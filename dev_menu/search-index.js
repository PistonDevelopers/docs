var searchIndex = {};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"paths":[]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
searchIndex["derivative"] = {"doc":"","items":[[5,"derivative","derivative","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}]],"paths":[]};
searchIndex["dev_menu"] = {"doc":"","items":[[3,"Menu","dev_menu","An in-game developer menu that responds to keyboard events, and can be drawn using a DebugRenderer instance,",null,null],[4,"MenuItem","","A single menu item instance",null,null],[13,"ActionItem","","",0,null],[13,"SliderItem","","",0,null],[11,"new","","Create a new Menu instance",1,{"o":{"n":"menu"}}],[11,"add_item","","Add a MenuItem to the menu",1,{"i":[{"n":"self"},{"n":"menuitem"}]}],[11,"draw","","Draw the menu using the current settings object",1,{"i":[{"n":"self"},{"n":"t"},{"n":"debugrenderer"}]}],[11,"event","","Respond to keyboard events",1,{"i":[{"n":"self"},{"n":"e"},{"n":"t"}]}],[11,"draw","","",0,null],[11,"event","","",0,{"i":[{"n":"self"},{"n":"e"},{"n":"t"}]}],[11,"action_item","","",0,{"i":[{"n":"str"},{"g":["fn"],"n":"box"}],"o":{"n":"menuitem"}}],[11,"slider_item","","",0,null]],"paths":[[4,"MenuItem"],[3,"Menu"]]};
searchIndex["draw_state"] = {"doc":"Graphics state blocks for gfx-rs","items":[[0,"preset","draw_state","State presets",null,null],[0,"blend","draw_state::preset","Blending preset modes.",null,null],[17,"REPLACE","draw_state::preset::blend","When combining two fragments, choose the source value",null,null],[17,"ADD","","When combining two fragments, add their values together, saturating at 1.0",null,null],[17,"MULTIPLY","","When combining two fragments, multiply their values together.",null,null],[17,"ALPHA","","When combining two fragments, add the value of the source times its alpha channel with the value of the destination multiplied by the inverse of the source alpha channel. Has the usual transparency effect: mixes the two colors using a fraction of each one specified by the alpha of the source.",null,null],[17,"INVERT","","When combining two fragments, subtract the destination color from a constant color using the source color as weight. Has an invert effect with the constant color as base and source color controlling displacement from the base color. A white source color and a white value results in plain invert. The output alpha is same as destination alpha.",null,null],[0,"depth","draw_state::preset","Depth presets for depth tests.",null,null],[17,"PASS_TEST","draw_state::preset::depth","When rendering a fragment, draw regardless of depth buffer state. Rendering will not update the depth buffer.",null,null],[17,"PASS_WRITE","","When rendering a fragment, draw regardless of depth buffer state. Rendering will update the depth buffer.",null,null],[17,"LESS_EQUAL_TEST","","\"<=\" comparison with read-only depth",null,null],[17,"LESS_EQUAL_WRITE","","When rendering a fragment, only draw when the fragment's output depth is less than or equal to the current depth buffer value. Rendering will update the depth buffer with the new depth value.",null,null],[0,"state","draw_state","Fixed-function hardware state.",null,null],[3,"Offset","draw_state::state","How to offset vertices in screen space, if at all.",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[3,"MultiSample","","Multi-sampling rasterization mode",null,null],[3,"Rasterizer","","Primitive rasterization state. Note that GL allows different raster method to be used for front and back, while this abstraction does not.",null,null],[12,"front_face","","Which vertex winding is considered to be the front face for culling.",1,null],[12,"cull_face","","Which face should be culled.",1,null],[12,"method","","How to rasterize this primitive.",1,null],[12,"offset","","Any polygon offset to apply.",1,null],[12,"samples","","Multi-sampling mode.",1,null],[3,"StencilSide","","Complete stencil state for a given side of a face.",null,null],[12,"fun","","Comparison function to use to determine if the stencil test passes.",2,null],[12,"mask_read","","A mask that is ANDd with both the stencil buffer value and the reference value when they are read before doing the stencil test.",2,null],[12,"mask_write","","A mask that is ANDd with the stencil value before writing to the stencil buffer.",2,null],[12,"op_fail","","What operation to do if the stencil test fails.",2,null],[12,"op_depth_fail","","What operation to do if the stenil test passes but the depth test fails.",2,null],[12,"op_pass","","What operation to do if both the depth and stencil test pass.",2,null],[3,"Stencil","","Complete stencil state, specifying how to handle the front and back side of a face.",null,null],[12,"front","","",3,null],[12,"back","","",3,null],[3,"Depth","","Depth test state.",null,null],[12,"fun","","Comparison function to use.",4,null],[12,"write","","Specify whether to write to the depth buffer or not.",4,null],[3,"BlendChannel","","",null,null],[12,"equation","","",5,null],[12,"source","","",5,null],[12,"destination","","",5,null],[3,"Blend","","",null,null],[12,"color","","",6,null],[12,"alpha","","",6,null],[3,"ColorMask","","",null,null],[3,"Color","","The state of an active color render target",null,null],[12,"mask","","Color mask to use.",7,null],[12,"blend","","Optional blending.",7,null],[3,"RefValues","","The complete set of the rasterizer reference values. Switching these doesn't roll the hardware context.",null,null],[12,"stencil","","Stencil front and back values.",8,null],[12,"blend","","Constant blend color.",8,null],[4,"FrontFace","","The front face winding order of a set of vertices.",null,null],[13,"Clockwise","","Clockwise winding order.",9,null],[13,"CounterClockwise","","Counter-clockwise winding order.",9,null],[4,"CullFace","","Which face, if any, to cull.",null,null],[13,"Nothing","","",10,null],[13,"Front","","",10,null],[13,"Back","","",10,null],[4,"RasterMethod","","How to rasterize a primitive.",null,null],[13,"Point","","Rasterize as a point.",11,null],[13,"Line","","Rasterize as a line with the given width.",11,null],[13,"Fill","","Rasterize as a face.",11,null],[4,"Comparison","","A pixel-wise comparison function.",null,null],[13,"Never","","`false`",12,null],[13,"Less","","`x < y`",12,null],[13,"LessEqual","","`x <= y`",12,null],[13,"Equal","","`x == y`",12,null],[13,"GreaterEqual","","`x >= y`",12,null],[13,"Greater","","`x > y`",12,null],[13,"NotEqual","","`x != y`",12,null],[13,"Always","","`true`",12,null],[4,"StencilOp","","Stencil mask operation.",null,null],[13,"Keep","","Keep the current value in the stencil buffer (no change).",13,null],[13,"Zero","","Set the value in the stencil buffer to zero.",13,null],[13,"Replace","","Set the stencil buffer value to `value` from `StencilSide`",13,null],[13,"IncrementClamp","","Increment the stencil buffer value, clamping to its maximum value.",13,null],[13,"IncrementWrap","","Increment the stencil buffer value, wrapping around to 0 on overflow.",13,null],[13,"DecrementClamp","","Decrement the stencil buffer value, clamping to its minimum value.",13,null],[13,"DecrementWrap","","Decrement the stencil buffer value, wrapping around to the maximum value on overflow.",13,null],[13,"Invert","","Bitwise invert the current value in the stencil buffer.",13,null],[4,"Equation","","",null,null],[13,"Add","","Adds source and destination. Source and destination are multiplied by blending parameters before addition.",14,null],[13,"Sub","","Subtracts destination from source. Source and destination are multiplied by blending parameters before subtraction.",14,null],[13,"RevSub","","Subtracts source from destination. Source and destination are multiplied by blending parameters before subtraction.",14,null],[13,"Min","","Component-wise minimum value of source and destination. Blending parameters are ignored.",14,null],[13,"Max","","Component-wise maximum value of source and destination. Blending parameters are ignored.",14,null],[4,"BlendValue","","",null,null],[13,"SourceColor","","",15,null],[13,"SourceAlpha","","",15,null],[13,"DestColor","","",15,null],[13,"DestAlpha","","",15,null],[13,"ConstColor","","",15,null],[13,"ConstAlpha","","",15,null],[4,"Factor","","",null,null],[13,"Zero","","",16,null],[13,"One","","",16,null],[13,"SourceAlphaSaturated","","",16,null],[13,"ZeroPlus","","",16,null],[13,"OneMinus","","",16,null],[6,"LineWidth","","Width of a line. Could be f32 if not for Hash deriving issues.",null,null],[6,"OffsetSlope","","Slope depth offset factor Could be f32 if not for Hash deriving issues.",null,null],[6,"OffsetUnits","","Number of units to offset, where the unit is the minimal difference in the depth value dictated by the precision of the depth buffer.",null,null],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"frontface"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",9,null],[11,"cmp","","",9,{"i":[{"n":"self"},{"n":"frontface"}],"o":{"n":"ordering"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"frontface"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",9,{"i":[{"n":"self"},{"n":"frontface"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"offset"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"offset"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"cullface"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",10,null],[11,"cmp","","",10,{"i":[{"n":"self"},{"n":"cullface"}],"o":{"n":"ordering"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"cullface"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",10,{"i":[{"n":"self"},{"n":"cullface"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"rastermethod"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",11,null],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"ne","","",11,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",11,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",11,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"le","","",11,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"gt","","",11,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"ge","","",11,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"multisample"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",17,null],[11,"cmp","","",17,{"i":[{"n":"self"},{"n":"multisample"}],"o":{"n":"ordering"}}],[11,"eq","","",17,{"i":[{"n":"self"},{"n":"multisample"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",17,{"i":[{"n":"self"},{"n":"multisample"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"rasterizer"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",1,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"le","","",1,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"gt","","",1,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"ge","","",1,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"new_fill","","Create a new filling rasterizer.",1,{"o":{"n":"self"}}],[11,"with_cull_back","","Add back face culling.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"with_offset","","Add polygon offset.",1,{"i":[{"n":"self"},{"n":"f32"},{"n":"offsetunits"}],"o":{"n":"self"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"comparison"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",12,null],[11,"cmp","","",12,{"i":[{"n":"self"},{"n":"comparison"}],"o":{"n":"ordering"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"comparison"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",12,{"i":[{"n":"self"},{"n":"comparison"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"stencilop"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",13,null],[11,"cmp","","",13,{"i":[{"n":"self"},{"n":"stencilop"}],"o":{"n":"ordering"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"stencilop"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",13,{"i":[{"n":"self"},{"n":"stencilop"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"stencilside"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",2,null],[11,"cmp","","",2,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"ordering"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",2,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"le","","",2,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"gt","","",2,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"ge","","",2,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"default","","",2,{"o":{"n":"self"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"stencil"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",3,{"o":{"n":"stencil"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"ordering"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",3,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",3,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"le","","",3,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"gt","","",3,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"ge","","",3,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"new","","Create a new stencil state with a given function.",3,null],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"depth"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"ordering"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"depth"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",4,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"le","","",4,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"gt","","",4,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"ge","","",4,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"default","","",4,{"o":{"n":"self"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"equation"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",14,null],[11,"cmp","","",14,{"i":[{"n":"self"},{"n":"equation"}],"o":{"n":"ordering"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"equation"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",14,{"i":[{"n":"self"},{"n":"equation"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"blendvalue"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",15,null],[11,"cmp","","",15,{"i":[{"n":"self"},{"n":"blendvalue"}],"o":{"n":"ordering"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"blendvalue"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",15,{"i":[{"n":"self"},{"n":"blendvalue"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"factor"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",16,null],[11,"cmp","","",16,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"ordering"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"ne","","",16,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",16,{"i":[{"n":"self"},{"n":"factor"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",16,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"le","","",16,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"gt","","",16,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"ge","","",16,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"blendchannel"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",5,null],[11,"cmp","","",5,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"ordering"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",5,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",5,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"le","","",5,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"gt","","",5,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"ge","","",5,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"default","","",5,{"o":{"n":"self"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"blend"}}],[11,"default","","",6,{"o":{"n":"blend"}}],[11,"hash","","",6,null],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"ne","","",6,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",6,{"i":[{"n":"self"},{"n":"blend"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",6,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"le","","",6,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"gt","","",6,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"ge","","",6,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"new","","Create a new blend state with a given equation.",6,{"i":[{"n":"equation"},{"n":"factor"},{"n":"factor"}],"o":{"n":"self"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"ne","","",18,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"colormask"}}],[11,"partial_cmp","","",18,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",18,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"le","","",18,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"gt","","",18,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"ge","","",18,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"cmp","","",18,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"ordering"}}],[11,"hash","","",18,null],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"RED","","",18,null],[18,"GREEN","","",18,null],[18,"BLUE","","",18,null],[18,"ALPHA","","",18,null],[11,"empty","","Returns an empty set of flags.",18,{"o":{"n":"colormask"}}],[11,"all","","Returns the set containing all flags.",18,{"o":{"n":"colormask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",18,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",18,{"i":[{"n":"u8"}],"o":{"g":["colormask"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",18,{"i":[{"n":"u8"}],"o":{"n":"colormask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",18,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",18,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",18,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",18,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",18,{"i":[{"n":"self"},{"n":"colormask"}]}],[11,"remove","","Removes the specified flags in-place.",18,{"i":[{"n":"self"},{"n":"colormask"}]}],[11,"toggle","","Toggles the specified flags in-place.",18,{"i":[{"n":"self"},{"n":"colormask"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",18,{"i":[{"n":"self"},{"n":"colormask"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",18,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"colormask"}}],[11,"bitor_assign","","Adds the set of flags.",18,{"i":[{"n":"self"},{"n":"colormask"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",18,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"colormask"}}],[11,"bitxor_assign","","Toggles the set of flags.",18,{"i":[{"n":"self"},{"n":"colormask"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",18,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"colormask"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",18,{"i":[{"n":"self"},{"n":"colormask"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",18,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"colormask"}}],[11,"sub_assign","","Disables all flags enabled in the set.",18,{"i":[{"n":"self"},{"n":"colormask"}]}],[11,"not","","Returns the complement of this set of flags.",18,{"i":[{"n":"self"}],"o":{"n":"colormask"}}],[11,"extend","","",18,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",18,{"i":[{"n":"t"}],"o":{"n":"colormask"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"color"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",7,null],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",7,{"i":[{"n":"self"},{"n":"color"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",7,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"le","","",7,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"gt","","",7,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"ge","","",7,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"default","","",7,{"o":{"n":"self"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"refvalues"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",8,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",8,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"le","","",8,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"gt","","",8,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"ge","","",8,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"default","","",8,{"o":{"n":"self"}}],[0,"target","draw_state","Render target specification.",null,null],[3,"Rect","draw_state::target","A screen space rectangle",null,null],[12,"x","","",19,null],[12,"y","","",19,null],[12,"w","","",19,null],[12,"h","","",19,null],[3,"Mirror","","Mirroring flags, used for blitting",null,null],[6,"Layer","","A depth value, specifying which plane to select out of a 3D texture.",null,null],[6,"Level","","Mipmap level to select in a texture.",null,null],[6,"Depth","","A single depth value from a depth buffer.",null,null],[6,"Stencil","","A single value from a stencil stencstencil buffer.",null,null],[6,"ColorValue","","A color with floating-point components.",null,null],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"rect"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",19,null],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"ne","","",19,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",19,{"i":[{"n":"self"},{"n":"rect"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",19,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"le","","",19,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"gt","","",19,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"ge","","",19,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"ne","","",20,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"mirror"}}],[11,"partial_cmp","","",20,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",20,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"le","","",20,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"gt","","",20,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"ge","","",20,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"cmp","","",20,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"ordering"}}],[11,"hash","","",20,null],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"X","","",20,null],[18,"Y","","",20,null],[11,"empty","","Returns an empty set of flags.",20,{"o":{"n":"mirror"}}],[11,"all","","Returns the set containing all flags.",20,{"o":{"n":"mirror"}}],[11,"bits","","Returns the raw value of the flags currently stored.",20,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",20,{"i":[{"n":"u8"}],"o":{"g":["mirror"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",20,{"i":[{"n":"u8"}],"o":{"n":"mirror"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",20,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",20,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",20,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",20,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",20,{"i":[{"n":"self"},{"n":"mirror"}]}],[11,"remove","","Removes the specified flags in-place.",20,{"i":[{"n":"self"},{"n":"mirror"}]}],[11,"toggle","","Toggles the specified flags in-place.",20,{"i":[{"n":"self"},{"n":"mirror"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",20,{"i":[{"n":"self"},{"n":"mirror"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",20,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"mirror"}}],[11,"bitor_assign","","Adds the set of flags.",20,{"i":[{"n":"self"},{"n":"mirror"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",20,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"mirror"}}],[11,"bitxor_assign","","Toggles the set of flags.",20,{"i":[{"n":"self"},{"n":"mirror"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",20,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"mirror"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",20,{"i":[{"n":"self"},{"n":"mirror"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",20,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"mirror"}}],[11,"sub_assign","","Disables all flags enabled in the set.",20,{"i":[{"n":"self"},{"n":"mirror"}]}],[11,"not","","Returns the complement of this set of flags.",20,{"i":[{"n":"self"}],"o":{"n":"mirror"}}],[11,"extend","","",20,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",20,{"i":[{"n":"t"}],"o":{"n":"mirror"}}]],"paths":[[3,"Offset"],[3,"Rasterizer"],[3,"StencilSide"],[3,"Stencil"],[3,"Depth"],[3,"BlendChannel"],[3,"Blend"],[3,"Color"],[3,"RefValues"],[4,"FrontFace"],[4,"CullFace"],[4,"RasterMethod"],[4,"Comparison"],[4,"StencilOp"],[4,"Equation"],[4,"BlendValue"],[4,"Factor"],[3,"MultiSample"],[3,"ColorMask"],[3,"Rect"],[3,"Mirror"]]};
searchIndex["either"] = {"doc":"The enum [`Either`] with variants `Left` and `Right` is a general purpose sum type with two cases.","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"i":[{"n":"self"},{"n":"f"},{"n":"g"}],"o":{"n":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"i":[{"n":"self"},{"n":"ctx"},{"n":"f"},{"n":"g"}],"o":{"n":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"from","","",0,{"i":[{"n":"result"}],"o":{"n":"self"}}],[11,"into","","",0,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"extend","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"next","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"i":[{"n":"self"},{"n":"acc"},{"n":"g"}],"o":{"n":"acc"}}],[11,"count","","",0,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"last","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"nth","","",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"collect","","",0,{"i":[{"n":"self"}],"o":{"n":"b"}}],[11,"all","","",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"bool"}}],[11,"next_back","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_ref","","",0,{"i":[{"n":"self"}],"o":{"n":"target"}}],[11,"as_mut","","",0,{"i":[{"n":"self"}],"o":{"n":"target"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",null,null],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",null,null]],"paths":[[4,"Either"]]};
searchIndex["float"] = {"doc":"Traits for generic floats in game programming","items":[[8,"Float","float","Convenience trait for floats.",null,null],[8,"Min","","Minimum value.",null,null],[10,"min","","Returns the minimum value of self or other.",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"Max","","Maximum value.",null,null],[10,"max","","Returns the maximum value of self or other.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"Signum","","The sign of the number.",null,null],[10,"signum","","Returns number representing the sign of self",2,{"i":[{"n":"self"}],"o":{"n":"self"}}],[8,"Powf","","Floating number power.",null,null],[10,"powf","","Returns floating power of the number.",3,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"Radians","","Useful constants for radians.",null,null],[10,"_90","","Returns radians corresponding to 90 degrees.",4,{"o":{"n":"self"}}],[10,"_180","","Returns radians corresponding to 180 degrees.",4,{"o":{"n":"self"}}],[10,"_360","","Returns radians corresponding to 360 degrees.",4,{"o":{"n":"self"}}],[10,"deg_to_rad","","Convert a value to radians from degrees. Equivalent to `value * (π / 180)`.",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"rad_to_deg","","Convert a value to degrees from radians. Equivalent to `value * (180 / π)`.",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[8,"One","","Number 1.",null,null],[10,"one","","Returns 1.",5,{"o":{"n":"self"}}],[8,"Zero","","Number 0.",null,null],[10,"zero","","Returns 0.",6,{"o":{"n":"self"}}],[8,"Sqrt","","Square root.",null,null],[10,"sqrt","","Returns square root.",7,{"i":[{"n":"self"}],"o":{"n":"self"}}],[8,"Trig","","Basic trigonometry functions",null,null],[10,"sin","","Returns sine of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Returns cosine of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Returns tangent of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Returns inverse sine of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Returns inverse cosine of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Returns inverse tangent of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Returns the four quadrant arctangent of self (y) and other (x).",8,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Returns hyperbolic sine of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Returns hyperbolic cosine of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Returns hyperbolic tangent of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Returns inverse hyperbolic sine of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Returns inverse hyperbolic cosine of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Returns inverse hyperbolic tangent of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[8,"Cast","","Casts into another type.",null,null],[10,"cast","","Casts into other type.",9,{"i":[{"n":"self"}],"o":{"n":"t"}}],[8,"FromPrimitive","","Trait for converting from different numeric types",null,null],[10,"from_f64","","from a f64",10,{"i":[{"n":"f64"}],"o":{"n":"self"}}],[10,"from_f32","","from a f32",10,{"i":[{"n":"f32"}],"o":{"n":"self"}}],[10,"from_isize","","from a isze",10,{"i":[{"n":"isize"}],"o":{"n":"self"}}],[10,"from_u32","","from a u32",10,{"i":[{"n":"u32"}],"o":{"n":"self"}}],[10,"from_i32","","from a i32",10,{"i":[{"n":"i32"}],"o":{"n":"self"}}]],"paths":[[8,"Min"],[8,"Max"],[8,"Signum"],[8,"Powf"],[8,"Radians"],[8,"One"],[8,"Zero"],[8,"Sqrt"],[8,"Trig"],[8,"Cast"],[8,"FromPrimitive"]]};
searchIndex["freetype"] = {"doc":"Rust wrapper around freetype 2 library","items":[[6,"FT_Byte","freetype::ffi","",null,null],[6,"FT_Bytes","","",null,null],[6,"FT_Char","","",null,null],[6,"FT_Int","","",null,null],[6,"FT_UInt","","",null,null],[6,"FT_Int16","","",null,null],[6,"FT_UInt16","","",null,null],[6,"FT_Int32","","",null,null],[6,"FT_UInt32","","",null,null],[6,"FT_Int64","","",null,null],[6,"FT_UInt64","","",null,null],[6,"FT_Short","","",null,null],[6,"FT_UShort","","",null,null],[6,"FT_Long","","",null,null],[6,"FT_ULong","","",null,null],[6,"FT_Bool","","",null,null],[6,"FT_Offset","","",null,null],[6,"FT_PtrDist","","",null,null],[6,"FT_String","","",null,null],[6,"FT_Tag","","",null,null],[6,"FT_Error","","",null,null],[6,"FT_Fixed","","",null,null],[6,"FT_Pointer","","",null,null],[6,"FT_Pos","","",null,null],[6,"FT_FWord","","",null,null],[6,"FT_UFWord","","",null,null],[6,"FT_F2Dot14","","",null,null],[6,"FT_F26Dot6","","",null,null],[6,"FT_Generic_Finalizer","","",null,null],[6,"FT_StreamDesc","","",null,null],[6,"FT_Stream_IoFunc","","",null,null],[6,"FT_Stream_CloseFunc","","",null,null],[6,"FT_Alloc_Func","","",null,null],[6,"FT_Free_Func","","",null,null],[6,"FT_Realloc_Func","","",null,null],[8,"FTErrorMethods","","",null,null],[10,"succeeded","","",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[3,"FT_Vector","","",null,null],[12,"x","","",1,null],[12,"y","","",1,null],[3,"FT_BBox","","",null,null],[12,"xMin","","",2,null],[12,"yMin","","",2,null],[12,"xMax","","",2,null],[12,"yMax","","",2,null],[3,"FT_Matrix","","",null,null],[12,"xx","","",3,null],[12,"xy","","",3,null],[12,"yx","","",3,null],[12,"yy","","",3,null],[3,"FT_UnitVector","","",null,null],[12,"x","","",4,null],[12,"y","","",4,null],[3,"FT_Bitmap","","",null,null],[12,"rows","","",5,null],[12,"width","","",5,null],[12,"pitch","","",5,null],[12,"buffer","","",5,null],[12,"num_grays","","",5,null],[12,"pixel_mode","","",5,null],[12,"palette_mode","","",5,null],[12,"palette","","",5,null],[3,"FT_Data","","",null,null],[12,"pointer","","",6,null],[12,"length","","",6,null],[3,"FT_Generic","","",null,null],[12,"data","","",7,null],[12,"finalizer","","",7,null],[3,"FT_Size_Metrics","","",null,null],[12,"x_ppem","","",8,null],[12,"y_ppem","","",8,null],[12,"x_scale","","",8,null],[12,"y_scale","","",8,null],[12,"ascender","","",8,null],[12,"descender","","",8,null],[12,"height","","",8,null],[12,"max_advance","","",8,null],[3,"FT_Outline","","",null,null],[12,"n_contours","","",9,null],[12,"n_points","","",9,null],[12,"points","","",9,null],[12,"tags","","",9,null],[12,"contours","","",9,null],[12,"flags","","",9,null],[3,"FT_Glyph_Metrics","","",null,null],[12,"width","","",10,null],[12,"height","","",10,null],[12,"horiBearingX","","",10,null],[12,"horiBearingY","","",10,null],[12,"horiAdvance","","",10,null],[12,"vertBearingX","","",10,null],[12,"vertBearingY","","",10,null],[12,"vertAdvance","","",10,null],[3,"FT_Parameter","","",null,null],[12,"tag","","",11,null],[12,"data","","",11,null],[3,"FT_Open_Args","","",null,null],[12,"flags","","",12,null],[12,"memory_base","","",12,null],[12,"memory_size","","",12,null],[12,"pathname","","",12,null],[12,"stream","","",12,null],[12,"driver","","",12,null],[12,"num_params","","",12,null],[12,"params","","",12,null],[3,"FT_Bitmap_Size","","",null,null],[12,"height","","",13,null],[12,"width","","",13,null],[12,"size","","",13,null],[12,"x_ppem","","",13,null],[12,"y_ppem","","",13,null],[3,"TT_OS2","","",null,null],[12,"version","","",14,null],[12,"xAvgCharWidth","","",14,null],[12,"usWeightClass","","",14,null],[12,"usWidthClass","","",14,null],[12,"fsType","","",14,null],[12,"ySubscriptXSize","","",14,null],[12,"ySubscriptYSize","","",14,null],[12,"ySubscriptXOffset","","",14,null],[12,"ySubscriptYOffset","","",14,null],[12,"ySuperscriptXSize","","",14,null],[12,"ySuperscriptYSize","","",14,null],[12,"ySuperscriptXOffset","","",14,null],[12,"ySuperscriptYOffset","","",14,null],[12,"yStrikeoutSize","","",14,null],[12,"yStrikeoutPosition","","",14,null],[12,"sFamilyClass","","",14,null],[12,"panose","","",14,null],[12,"ulUnicodeRange1","","",14,null],[12,"ulUnicodeRange2","","",14,null],[12,"ulUnicodeRange3","","",14,null],[12,"ulUnicodeRange4","","",14,null],[12,"ulCodePageRange1","","",14,null],[12,"ulCodePageRange2","","",14,null],[12,"sxHeight","","",14,null],[12,"sCapHeight","","",14,null],[12,"usDefaultChar","","",14,null],[12,"usBreakChar","","",14,null],[12,"usMaxContext","","",14,null],[6,"enum_FT_Sfnt_Tag_","","",null,null],[17,"ft_sfnt_head","","",null,null],[17,"ft_sfnt_maxp","","",null,null],[17,"ft_sfnt_os2","","",null,null],[17,"ft_sfnt_hhea","","",null,null],[17,"ft_sfnt_vhea","","",null,null],[17,"ft_sfnt_post","","",null,null],[17,"ft_sfnt_pclt","","",null,null],[17,"ft_sfnt_max","","",null,null],[6,"FT_Sfnt_Tag","","",null,null],[6,"FT_Pixel_Mode","","",null,null],[17,"FT_PIXEL_MODE_NONE","","",null,null],[17,"FT_PIXEL_MODE_MONO","","",null,null],[17,"FT_PIXEL_MODE_GRAY","","",null,null],[17,"FT_PIXEL_MODE_GRAY2","","",null,null],[17,"FT_PIXEL_MODE_GRAY4","","",null,null],[17,"FT_PIXEL_MODE_LCD","","",null,null],[17,"FT_PIXEL_MODE_LCD_V","","",null,null],[17,"FT_PIXEL_MODE_BGRA","","",null,null],[17,"FT_PIXEL_MODE_MAX","","",null,null],[6,"FT_Glyph_Format","","",null,null],[17,"FT_GLYPH_FORMAT_NONE","","",null,null],[17,"FT_GLYPH_FORMAT_COMPOSITE","","",null,null],[17,"FT_GLYPH_FORMAT_BITMAP","","",null,null],[17,"FT_GLYPH_FORMAT_OUTLINE","","",null,null],[17,"FT_GLYPH_FORMAT_PLOTTER","","",null,null],[6,"FT_Render_Mode","","",null,null],[17,"FT_RENDER_MODE_NORMAL","","",null,null],[17,"FT_RENDER_MODE_LIGHT","","",null,null],[17,"FT_RENDER_MODE_MONO","","",null,null],[17,"FT_RENDER_MODE_LCD","","",null,null],[17,"FT_RENDER_MODE_LCD_V","","",null,null],[17,"FT_RENDER_MODE_MAX","","",null,null],[6,"FT_LcdFilter","","",null,null],[17,"FT_LCD_FILTER_NONE","","",null,null],[17,"FT_LCD_FILTER_DEFAULT","","",null,null],[17,"FT_LCD_FILTER_LIGHT","","",null,null],[17,"FT_LCD_FILTER_LEGACY1","","",null,null],[17,"FT_LCD_FILTER_LEGACY","","",null,null],[17,"FT_LCD_FILTER_MAX","","",null,null],[6,"FT_Encoding","","",null,null],[17,"FT_ENCODING_NONE","","",null,null],[17,"FT_ENCODING_MS_SYMBOL","","",null,null],[17,"FT_ENCODING_UNICODE","","",null,null],[17,"FT_ENCODING_SJIS","","",null,null],[17,"FT_ENCODING_GB2312","","",null,null],[17,"FT_ENCODING_BIG5","","",null,null],[17,"FT_ENCODING_WANSUNG","","",null,null],[17,"FT_ENCODING_JOHAB","","",null,null],[17,"FT_ENCODING_MS_SJIS","","",null,null],[17,"FT_ENCODING_MS_GB2312","","",null,null],[17,"FT_ENCODING_MS_BIG5","","",null,null],[17,"FT_ENCODING_MS_WANSUNG","","",null,null],[17,"FT_ENCODING_MS_JOHAB","","",null,null],[17,"FT_ENCODING_ADOBE_STANDARD","","",null,null],[17,"FT_ENCODING_ADOBE_EXPERT","","",null,null],[17,"FT_ENCODING_ADOBE_CUSTOM","","",null,null],[17,"FT_ENCODING_ADOBE_LATIN_1","","",null,null],[17,"FT_ENCODING_OLD_LATIN_2","","",null,null],[17,"FT_ENCODING_APPLE_ROMAN","","",null,null],[6,"FT_Size_Request_Type","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_NOMINAL","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_REAL_DIM","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_BBOX","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_CELL","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_SCALES","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_MAX","","",null,null],[6,"FT_Kerning_Mode","","",null,null],[17,"FT_KERNING_DEFAULT","","",null,null],[17,"FT_KERNING_UNFITTED","","",null,null],[17,"FT_KERNING_UNSCALED","","",null,null],[6,"FT_Glyph_BBox_Mode","","",null,null],[17,"FT_GLYPH_BBOX_UNSCALED","","",null,null],[17,"FT_GLYPH_BBOX_SUBPIXELS","","",null,null],[17,"FT_GLYPH_BBOX_GRIDFIT","","",null,null],[17,"FT_GLYPH_BBOX_TRUNCATE","","",null,null],[17,"FT_GLYPH_BBOX_PIXELS","","",null,null],[6,"FT_Stroker_LineJoin","","",null,null],[17,"FT_STROKER_LINEJOIN_ROUND","","",null,null],[17,"FT_STROKER_LINEJOIN_BEVEL","","",null,null],[17,"FT_STROKER_LINEJOIN_MITER_VARIABLE","","",null,null],[17,"FT_STROKER_LINEJOIN_MITER","","",null,null],[17,"FT_STROKER_LINEJOIN_MITER_FIXED","","",null,null],[6,"FT_Stroker_LineCap","","",null,null],[17,"FT_STROKER_LINECAP_BUTT","","",null,null],[17,"FT_STROKER_LINECAP_ROUND","","",null,null],[17,"FT_STROKER_LINECAP_SQUARE","","",null,null],[6,"FT_StrokerBorder","","",null,null],[17,"FT_STROKER_BORDER_LEFT","","",null,null],[17,"FT_STROKER_BORDER_RIGHT","","",null,null],[17,"FT_FACE_FLAG_SCALABLE","","",null,null],[17,"FT_FACE_FLAG_FIXED_SIZES","","",null,null],[17,"FT_FACE_FLAG_FIXED_WIDTH","","",null,null],[17,"FT_FACE_FLAG_SFNT","","",null,null],[17,"FT_FACE_FLAG_HORIZONTAL","","",null,null],[17,"FT_FACE_FLAG_VERTICAL","","",null,null],[17,"FT_FACE_FLAG_KERNING","","",null,null],[17,"FT_FACE_FLAG_FAST_GLYPHS","","",null,null],[17,"FT_FACE_FLAG_MULTIPLE_MASTERS","","",null,null],[17,"FT_FACE_FLAG_GLYPH_NAMES","","",null,null],[17,"FT_FACE_FLAG_EXTERNAL_STREAM","","",null,null],[17,"FT_FACE_FLAG_HINTER","","",null,null],[17,"FT_FACE_FLAG_CID_KEYED","","",null,null],[17,"FT_FACE_FLAG_TRICKY","","",null,null],[17,"FT_FACE_FLAG_COLOR","","",null,null],[17,"FT_STYLE_FLAG_ITALIC","","",null,null],[17,"FT_STYLE_FLAG_BOLD","","",null,null],[17,"FT_OPEN_MEMORY","","",null,null],[17,"FT_OPEN_STREAM","","",null,null],[17,"FT_OPEN_PATHNAME","","",null,null],[17,"FT_OPEN_DRIVER","","",null,null],[17,"FT_OPEN_PARAMS","","",null,null],[17,"FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS","","",null,null],[17,"FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES","","",null,null],[17,"FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID","","",null,null],[17,"FT_SUBGLYPH_FLAG_SCALE","","",null,null],[17,"FT_SUBGLYPH_FLAG_XY_SCALE","","",null,null],[17,"FT_SUBGLYPH_FLAG_2X2","","",null,null],[17,"FT_SUBGLYPH_FLAG_USE_MY_METRICS","","",null,null],[17,"FT_LOAD_DEFAULT","","",null,null],[17,"FT_LOAD_NO_SCALE","","",null,null],[17,"FT_LOAD_NO_HINTING","","",null,null],[17,"FT_LOAD_RENDER","","",null,null],[17,"FT_LOAD_NO_BITMAP","","",null,null],[17,"FT_LOAD_VERTICAL_LAYOUT","","",null,null],[17,"FT_LOAD_FORCE_AUTOHINT","","",null,null],[17,"FT_LOAD_CROP_BITMAP","","",null,null],[17,"FT_LOAD_PEDANTIC","","",null,null],[17,"FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH","","",null,null],[17,"FT_LOAD_NO_RECURSE","","",null,null],[17,"FT_LOAD_IGNORE_TRANSFORM","","",null,null],[17,"FT_LOAD_MONOCHROME","","",null,null],[17,"FT_LOAD_LINEAR_DESIGN","","",null,null],[17,"FT_LOAD_NO_AUTOHINT","","",null,null],[17,"FT_LOAD_COLOR","","",null,null],[17,"FT_LOAD_TARGET_NORMAL","","",null,null],[17,"FT_LOAD_TARGET_LIGHT","","",null,null],[17,"FT_LOAD_TARGET_MONO","","",null,null],[17,"FT_LOAD_TARGET_LCD","","",null,null],[17,"FT_LOAD_TARGET_LCD_V","","",null,null],[17,"FT_FSTYPE_INSTALLABLE_EMBEDDING","","",null,null],[17,"FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING","","",null,null],[17,"FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING","","",null,null],[17,"FT_FSTYPE_EDITABLE_EMBEDDING","","",null,null],[17,"FT_FSTYPE_NO_SUBSETTING","","",null,null],[17,"FT_FSTYPE_BITMAP_EMBEDDING_ONLY","","",null,null],[17,"FT_Err_Ok","","",null,null],[17,"FT_Err_Cannot_Open_Resource","","",null,null],[17,"FT_Err_Unknown_File_Format","","",null,null],[17,"FT_Err_Invalid_File_Format","","",null,null],[17,"FT_Err_Invalid_Version","","",null,null],[17,"FT_Err_Lower_Module_Version","","",null,null],[17,"FT_Err_Invalid_Argument","","",null,null],[17,"FT_Err_Unimplemented_Feature","","",null,null],[17,"FT_Err_Invalid_Table","","",null,null],[17,"FT_Err_Invalid_Offset","","",null,null],[17,"FT_Err_Array_Too_Large","","",null,null],[17,"FT_Err_Missing_Module","","",null,null],[17,"FT_Err_Missing_Property","","",null,null],[17,"FT_Err_Invalid_Glyph_Index","","",null,null],[17,"FT_Err_Invalid_Character_Code","","",null,null],[17,"FT_Err_Invalid_Glyph_Format","","",null,null],[17,"FT_Err_Cannot_Render_Glyph","","",null,null],[17,"FT_Err_Invalid_Outline","","",null,null],[17,"FT_Err_Invalid_Composite","","",null,null],[17,"FT_Err_Too_Many_Hints","","",null,null],[17,"FT_Err_Invalid_Pixel_Size","","",null,null],[17,"FT_Err_Invalid_Handle","","",null,null],[17,"FT_Err_Invalid_Library_Handle","","",null,null],[17,"FT_Err_Invalid_Driver_Handle","","",null,null],[17,"FT_Err_Invalid_Face_Handle","","",null,null],[17,"FT_Err_Invalid_Size_Handle","","",null,null],[17,"FT_Err_Invalid_Slot_Handle","","",null,null],[17,"FT_Err_Invalid_CharMap_Handle","","",null,null],[17,"FT_Err_Invalid_Cache_Handle","","",null,null],[17,"FT_Err_Invalid_Stream_Handle","","",null,null],[17,"FT_Err_Too_Many_Drivers","","",null,null],[17,"FT_Err_Too_Many_Extensions","","",null,null],[17,"FT_Err_Out_Of_Memory","","",null,null],[17,"FT_Err_Unlisted_Object","","",null,null],[17,"FT_Err_Cannot_Open_Stream","","",null,null],[17,"FT_Err_Invalid_Stream_Seek","","",null,null],[17,"FT_Err_Invalid_Stream_Skip","","",null,null],[17,"FT_Err_Invalid_Stream_Read","","",null,null],[17,"FT_Err_Invalid_Stream_Operation","","",null,null],[17,"FT_Err_Invalid_Frame_Operation","","",null,null],[17,"FT_Err_Nested_Frame_Access","","",null,null],[17,"FT_Err_Invalid_Frame_Read","","",null,null],[17,"FT_Err_Raster_Uninitialized","","",null,null],[17,"FT_Err_Raster_Corrupted","","",null,null],[17,"FT_Err_Raster_Overflow","","",null,null],[17,"FT_Err_Raster_Negative_Height","","",null,null],[17,"FT_Err_Too_Many_Caches","","",null,null],[17,"FT_Err_Invalid_Opcode","","",null,null],[17,"FT_Err_Too_Few_Arguments","","",null,null],[17,"FT_Err_Stack_Overflow","","",null,null],[17,"FT_Err_Code_Overflow","","",null,null],[17,"FT_Err_Bad_Argument","","",null,null],[17,"FT_Err_Divide_By_Zero","","",null,null],[17,"FT_Err_Invalid_Reference","","",null,null],[17,"FT_Err_Debug_OpCode","","",null,null],[17,"FT_Err_ENDF_In_Exec_Stream","","",null,null],[17,"FT_Err_Nested_DEFS","","",null,null],[17,"FT_Err_Invalid_CodeRange","","",null,null],[17,"FT_Err_Execution_Too_Long","","",null,null],[17,"FT_Err_Too_Many_Function_Defs","","",null,null],[17,"FT_Err_Too_Many_Instruction_Defs","","",null,null],[17,"FT_Err_Table_Missing","","",null,null],[17,"FT_Err_Horiz_Header_Missing","","",null,null],[17,"FT_Err_Locations_Missing","","",null,null],[17,"FT_Err_Name_Table_Missing","","",null,null],[17,"FT_Err_CMap_Table_Missing","","",null,null],[17,"FT_Err_Hmtx_Table_Missing","","",null,null],[17,"FT_Err_Post_Table_Missing","","",null,null],[17,"FT_Err_Invalid_Horiz_Metrics","","",null,null],[17,"FT_Err_Invalid_CharMap_Format","","",null,null],[17,"FT_Err_Invalid_PPem","","",null,null],[17,"FT_Err_Invalid_Vert_Metrics","","",null,null],[17,"FT_Err_Could_Not_Find_Context","","",null,null],[17,"FT_Err_Invalid_Post_Table_Format","","",null,null],[17,"FT_Err_Invalid_Post_Table","","",null,null],[17,"FT_Err_Syntax_Error","","",null,null],[17,"FT_Err_Stack_Underflow","","",null,null],[17,"FT_Err_Ignore","","",null,null],[17,"FT_Err_No_Unicode_Glyph_Name","","",null,null],[17,"FT_Err_Missing_Startfont_Field","","",null,null],[17,"FT_Err_Missing_Font_Field","","",null,null],[17,"FT_Err_Missing_Size_Field","","",null,null],[17,"FT_Err_Missing_Fontboundingbox_Field","","",null,null],[17,"FT_Err_Missing_Chars_Field","","",null,null],[17,"FT_Err_Missing_Startchar_Field","","",null,null],[17,"FT_Err_Missing_Encoding_Field","","",null,null],[17,"FT_Err_Missing_Bbx_Field","","",null,null],[17,"FT_Err_Bbx_Too_Big","","",null,null],[17,"FT_Err_Corrupted_Font_Header","","",null,null],[17,"FT_Err_Corrupted_Font_Glyphs","","",null,null],[17,"FT_Err_Max","","",null,null],[6,"FT_Library","","",null,null],[6,"FT_Face","","",null,null],[6,"FT_Size","","",null,null],[6,"FT_GlyphSlot","","",null,null],[6,"FT_CharMap","","",null,null],[6,"FT_Module","","",null,null],[6,"FT_Driver","","",null,null],[6,"FT_Renderer","","",null,null],[6,"FT_Size_Internal","","",null,null],[6,"FT_SubGlyph","","",null,null],[6,"FT_Slot_Internal","","",null,null],[6,"FT_Size_Request","","",null,null],[6,"FT_Face_Internal","","",null,null],[6,"FT_Stream","","",null,null],[6,"FT_Memory","","",null,null],[6,"FT_ListNode","","",null,null],[6,"FT_Glyph","","",null,null],[6,"FT_BitmapGlyph","","",null,null],[6,"FT_OutlineGlyph","","",null,null],[6,"FT_Stroker","","",null,null],[6,"TT_OS2_Internal","","",null,null],[6,"FT_LibraryRec","","",null,null],[6,"FT_ModuleRec","","",null,null],[6,"FT_DriverRec","","",null,null],[6,"FT_RendererRec","","",null,null],[6,"FT_Size_InternalRec","","",null,null],[6,"FT_SubGlyphRec","","",null,null],[6,"FT_Slot_InternalRec","","",null,null],[6,"FT_Face_InternalRec","","",null,null],[6,"FT_StrokerRec","","",null,null],[3,"FT_CharMapRec","","",null,null],[12,"face","","",15,null],[12,"encoding","","",15,null],[12,"platform_id","","",15,null],[12,"encoding_id","","",15,null],[3,"FT_FaceRec","","",null,null],[12,"num_faces","","",16,null],[12,"face_index","","",16,null],[12,"face_flags","","",16,null],[12,"style_flags","","",16,null],[12,"num_glyphs","","",16,null],[12,"family_name","","",16,null],[12,"style_name","","",16,null],[12,"num_fixed_sizes","","",16,null],[12,"available_sizes","","",16,null],[12,"num_charmaps","","",16,null],[12,"charmaps","","",16,null],[12,"generic","","",16,null],[12,"bbox","","",16,null],[12,"units_per_EM","","",16,null],[12,"ascender","","",16,null],[12,"descender","","",16,null],[12,"height","","",16,null],[12,"max_advance_width","","",16,null],[12,"max_advance_height","","",16,null],[12,"underline_position","","",16,null],[12,"underline_thickness","","",16,null],[12,"glyph","","",16,null],[12,"size","","",16,null],[12,"charmap","","",16,null],[12,"driver","","",16,null],[12,"memory","","",16,null],[12,"stream","","",16,null],[12,"sizes_list","","",16,null],[12,"autohint","","",16,null],[12,"extensions","","",16,null],[12,"internal","","",16,null],[3,"FT_GlyphSlotRec","","",null,null],[12,"library","","",17,null],[12,"face","","",17,null],[12,"next","","",17,null],[12,"reserved","","",17,null],[12,"generic","","",17,null],[12,"metrics","","",17,null],[12,"linearHoriAdvance","","",17,null],[12,"linearVertAdvance","","",17,null],[12,"advance","","",17,null],[12,"format","","",17,null],[12,"bitmap","","",17,null],[12,"bitmap_left","","",17,null],[12,"bitmap_top","","",17,null],[12,"outline","","",17,null],[12,"num_subglyphs","","",17,null],[12,"subglyphs","","",17,null],[12,"control_data","","",17,null],[12,"control_len","","",17,null],[12,"lsb_delta","","",17,null],[12,"rsb_delta","","",17,null],[12,"other","","",17,null],[12,"internal","","",17,null],[3,"FT_SizeRec","","",null,null],[12,"face","","",18,null],[12,"generic","","",18,null],[12,"metrics","","",18,null],[12,"internal","","",18,null],[3,"FT_StreamRec","","",null,null],[12,"base","","",19,null],[12,"size","","",19,null],[12,"pos","","",19,null],[12,"descriptor","","",19,null],[12,"pathname","","",19,null],[12,"read","","",19,null],[12,"close","","",19,null],[12,"memory","","",19,null],[12,"cursor","","",19,null],[12,"limit","","",19,null],[3,"FT_MemoryRec","","",null,null],[12,"user","","",20,null],[12,"alloc","","",20,null],[12,"free","","",20,null],[12,"realloc","","",20,null],[3,"FT_ListRec","","",null,null],[12,"head","","",21,null],[12,"tail","","",21,null],[3,"FT_ListNodeRec","","",null,null],[12,"prev","","",22,null],[12,"next","","",22,null],[12,"data","","",22,null],[3,"FT_Size_RequestRec","","",null,null],[12,"size_request_type","","",23,null],[12,"width","","",23,null],[12,"height","","",23,null],[12,"horiResolution","","",23,null],[12,"vertResolution","","",23,null],[3,"FT_GlyphRec","","",null,null],[12,"library","","",24,null],[12,"clazz","","",24,null],[12,"format","","",24,null],[12,"advance","","",24,null],[3,"FT_BitmapGlyphRec","","",null,null],[12,"root","","",25,null],[12,"left","","",25,null],[12,"top","","",25,null],[12,"bitmap","","",25,null],[3,"FT_OutlineGlyphRec","","",null,null],[12,"root","","",26,null],[12,"outline","","",26,null],[5,"FT_HAS_HORIZONTAL","","",null,null],[5,"FT_HAS_VERTICAL","","",null,null],[5,"FT_HAS_KERNING","","",null,null],[5,"FT_IS_SCALABLE","","",null,null],[5,"FT_IS_SFNT","","",null,null],[5,"FT_IS_FIXED_WIDTH","","",null,null],[5,"FT_HAS_FIXED_SIZES","","",null,null],[5,"FT_HAS_GLYPH_NAMES","","",null,null],[5,"FT_HAS_MULTIPLE_MASTERS","","",null,null],[5,"FT_IS_CID_KEYED","","",null,null],[5,"FT_IS_TRICKY","","",null,null],[5,"FT_HAS_COLOR","","",null,null],[5,"FT_Get_Sfnt_Table","","",null,null],[5,"FT_Init_FreeType","","",null,null],[5,"FT_Done_FreeType","","",null,null],[5,"FT_New_Library","","",null,null],[5,"FT_Done_Library","","",null,null],[5,"FT_Reference_Library","","",null,null],[5,"FT_Add_Default_Modules","","",null,null],[5,"FT_New_Face","","",null,null],[5,"FT_New_Memory_Face","","",null,null],[5,"FT_Open_Face","","",null,null],[5,"FT_Attach_File","","",null,null],[5,"FT_Attach_Stream","","",null,null],[5,"FT_Reference_Face","","",null,null],[5,"FT_Done_Face","","",null,null],[5,"FT_Select_Size","","",null,null],[5,"FT_Request_Size","","",null,null],[5,"FT_Set_Char_Size","","",null,null],[5,"FT_Set_Pixel_Sizes","","",null,null],[5,"FT_Library_SetLcdFilter","","",null,null],[5,"FT_Load_Glyph","","",null,null],[5,"FT_Load_Char","","",null,null],[5,"FT_Set_Transform","","",null,null],[5,"FT_Render_Glyph","","",null,null],[5,"FT_Get_Kerning","","",null,null],[5,"FT_Get_Track_Kerning","","",null,null],[5,"FT_Get_Glyph_Name","","",null,null],[5,"FT_Get_Postscript_Name","","",null,null],[5,"FT_Select_CharMap","","",null,null],[5,"FT_Set_Charmap","","",null,null],[5,"FT_Get_Charmap_Index","","",null,null],[5,"FT_Get_Char_Index","","",null,null],[5,"FT_Get_First_Char","","",null,null],[5,"FT_Get_Next_Char","","",null,null],[5,"FT_Get_Name_Index","","",null,null],[5,"FT_Get_SubGlyph_Info","","",null,null],[5,"FT_Get_FSType_Flags","","",null,null],[5,"FT_Get_Glyph","","",null,null],[5,"FT_Glyph_Copy","","",null,null],[5,"FT_Glyph_Transform","","",null,null],[5,"FT_Glyph_Get_CBox","","",null,null],[5,"FT_Glyph_To_Bitmap","","",null,null],[5,"FT_Done_Glyph","","",null,null],[5,"FT_Outline_GetInsideBorder","","",null,null],[5,"FT_Outline_GetOutsideBorder","","",null,null],[5,"FT_Glyph_Stroke","","",null,null],[5,"FT_Glyph_StrokeBorder","","",null,null],[5,"FT_Stroker_New","","",null,null],[5,"FT_Stroker_Set","","",null,null],[5,"FT_Stroker_Rewind","","",null,null],[5,"FT_Stroker_ParseOutline","","",null,null],[5,"FT_Stroker_Done","","",null,null],[5,"FT_Stroker_BeginSubPath","","",null,null],[5,"FT_Stroker_EndSubPath","","",null,null],[5,"FT_Stroker_LineTo","","",null,null],[5,"FT_Stroker_ConicTo","","",null,null],[5,"FT_Stroker_CubicTo","","",null,null],[5,"FT_Stroker_GetBorderCounts","","",null,null],[5,"FT_Stroker_ExportBorder","","",null,null],[5,"FT_Stroker_GetCounts","","",null,null],[5,"FT_Stroker_Export","","",null,null],[5,"FT_MulDiv","","",null,{"i":[{"n":"i64"},{"n":"i64"},{"n":"i64"}],"o":{"n":"i64"}}],[5,"FT_MulFix","","",null,{"i":[{"n":"i64"},{"n":"i64"}],"o":{"n":"i64"}}],[5,"FT_DivFix","","",null,{"i":[{"n":"i64"},{"n":"i64"}],"o":{"n":"i64"}}],[5,"FT_RoundFix","","",null,{"i":[{"n":"i64"}],"o":{"n":"i64"}}],[5,"FT_CeilFix","","",null,{"i":[{"n":"i64"}],"o":{"n":"i64"}}],[5,"FT_FloorFix","","",null,{"i":[{"n":"i64"}],"o":{"n":"i64"}}],[5,"FT_Outline_Translate","","",null,null],[5,"FT_Outline_Get_CBox","","",null,null],[0,"bitmap","freetype","",null,null],[3,"Bitmap","freetype::bitmap","",null,null],[4,"PixelMode","","An enumeration type used to describe the format of pixels in a given bitmap. Note that additional formats may be added in the future.",null,null],[13,"None","","This value is reserved.",27,null],[13,"Mono","","A monochrome bitmap, using 1 bit per pixel. Note that pixels are stored in most-significant order (MSB), which means that the left-most pixel in a byte has value 128.",27,null],[13,"Gray","","An 8-bit bitmap, generally used to represent anti-aliased glyph images. Each pixel is stored in one byte. Note that the number of `gray` levels is stored in the `num_grays` field of the FT_Bitmap structure (it generally is 256).",27,null],[13,"Gray2","","A 2-bit per pixel bitmap, used to represent embedded anti-aliased bitmaps in font files according to the OpenType specification. We haven't found a single font using this format, however.",27,null],[13,"Gray4","","A 4-bit per pixel bitmap, representing embedded anti-aliased bitmaps in font files according to the OpenType specification. We haven't found a single font using this format, however.",27,null],[13,"Lcd","","An 8-bit bitmap, representing RGB or BGR decimated glyph images used for display on LCD displays; the bitmap is three times wider than the original glyph image. See also FT_RENDER_MODE_LCD.",27,null],[13,"LcdV","","An 8-bit bitmap, representing RGB or BGR decimated glyph images used for display on rotated LCD displays; the bitmap is three times taller than the original glyph image. See also FT_RENDER_MODE_LCD_V.",27,null],[13,"Bgra","","An image with four 8-bit channels per pixel, representing a color image (such as emoticons) with alpha channel. For each pixel, the format is BGRA, which means, the blue channel comes first in memory. The color channels are pre-multiplied and in the sRGB colorspace. For example, full red at half-translucent opacity will be represented as `00,00,80,80`, not `00,00,FF,80`. See also FT_LOAD_COLOR.",27,null],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"pixelmode"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"pixelmode"}],"o":{"n":"bool"}}],[11,"from_raw","","",28,null],[11,"buffer","","A typeless pointer to the bitmap buffer. This value should be aligned on 32-bit boundaries in most cases.",28,null],[11,"width","","The number of pixels in bitmap row.",28,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"rows","","The number of bitmap rows.",28,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"raw","","",28,{"i":[{"n":"self"}],"o":{"n":"ft_bitmap"}}],[11,"pixel_mode","","The pixel mode, i.e., how pixel bits are stored. See `PixelMode` for possible values.",28,{"i":[{"n":"self"}],"o":{"g":["pixelmode"],"n":"ftresult"}}],[11,"pitch","","The pitch's absolute value is the number of bytes taken by one bitmap row, including padding. However, the pitch is positive when the bitmap has a ‘down’ flow, and negative when it has an ‘up’ flow. In all cases, the pitch is an offset to add to a bitmap pointer in order to go down one row.",28,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[0,"bitmap_glyph","freetype","",null,null],[3,"BitmapGlyph","freetype::bitmap_glyph","",null,null],[11,"from_raw","","",29,{"i":[{"n":"ft_library"},{"n":"ft_bitmapglyph"}],"o":{"n":"self"}}],[11,"left","","",29,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"top","","",29,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"bitmap","","",29,{"i":[{"n":"self"}],"o":{"n":"bitmap"}}],[11,"raw","","",29,{"i":[{"n":"self"}],"o":{"n":"ft_bitmapglyphrec"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drop","","",29,{"i":[{"n":"self"}]}],[0,"error","freetype","",null,null],[4,"Error","freetype::error","",null,null],[13,"Ok","","",30,null],[13,"CannotOpenResource","","",30,null],[13,"UnknownFileFormat","","",30,null],[13,"InvalidFileFormat","","",30,null],[13,"InvalidVersion","","",30,null],[13,"LowerModuleVersion","","",30,null],[13,"InvalidArgument","","",30,null],[13,"UnimplementedFeature","","",30,null],[13,"InvalidTable","","",30,null],[13,"InvalidOffset","","",30,null],[13,"ArrayTooLarge","","",30,null],[13,"MissingModule","","",30,null],[13,"MissingProperty","","",30,null],[13,"InvalidGlyphIndex","","",30,null],[13,"InvalidCharacterCode","","",30,null],[13,"InvalidGlyphFormat","","",30,null],[13,"CannotRenderGlyph","","",30,null],[13,"InvalidOutline","","",30,null],[13,"InvalidComposite","","",30,null],[13,"TooManyHints","","",30,null],[13,"InvalidPixelSize","","",30,null],[13,"InvalidHandle","","",30,null],[13,"InvalidLibraryHandle","","",30,null],[13,"InvalidDriverHandle","","",30,null],[13,"InvalidFaceHandle","","",30,null],[13,"InvalidSizeHandle","","",30,null],[13,"InvalidSlotHandle","","",30,null],[13,"InvalidCharMapHandle","","",30,null],[13,"InvalidCacheHandle","","",30,null],[13,"InvalidStreamHandle","","",30,null],[13,"TooManyDrivers","","",30,null],[13,"TooManyExtensions","","",30,null],[13,"OutOfMemory","","",30,null],[13,"UnlistedObject","","",30,null],[13,"CannotOpenStream","","",30,null],[13,"InvalidStreamSeek","","",30,null],[13,"InvalidStreamSkip","","",30,null],[13,"InvalidStreamRead","","",30,null],[13,"InvalidStreamOperation","","",30,null],[13,"InvalidFrameOperation","","",30,null],[13,"NestedFrameAccess","","",30,null],[13,"InvalidFrameRead","","",30,null],[13,"RasterUninitialized","","",30,null],[13,"RasterCorrupted","","",30,null],[13,"RasterOverflow","","",30,null],[13,"RasterNegativeHeight","","",30,null],[13,"TooManyCaches","","",30,null],[13,"InvalidOpcode","","",30,null],[13,"TooFewArguments","","",30,null],[13,"StackOverflow","","",30,null],[13,"CodeOverflow","","",30,null],[13,"BadArgument","","",30,null],[13,"DivideByZero","","",30,null],[13,"InvalidReference","","",30,null],[13,"DebugOpCode","","",30,null],[13,"ENDFInExecStream","","",30,null],[13,"NestedDEFS","","",30,null],[13,"InvalidCodeRange","","",30,null],[13,"ExecutionTooLong","","",30,null],[13,"TooManyFunctionDefs","","",30,null],[13,"TooManyInstructionDefs","","",30,null],[13,"TableMissing","","",30,null],[13,"HorizHeaderMissing","","",30,null],[13,"LocationsMissing","","",30,null],[13,"NameTableMissing","","",30,null],[13,"CMapTableMissing","","",30,null],[13,"HmtxTableMissing","","",30,null],[13,"PostTableMissing","","",30,null],[13,"InvalidHorizMetrics","","",30,null],[13,"InvalidCharMapFormat","","",30,null],[13,"InvalidPPem","","",30,null],[13,"InvalidVertMetrics","","",30,null],[13,"CouldNotFindContext","","",30,null],[13,"InvalidPostTableFormat","","",30,null],[13,"InvalidPostTable","","",30,null],[13,"Syntax","","",30,null],[13,"StackUnderflow","","",30,null],[13,"Ignore","","",30,null],[13,"NoUnicodeGlyphName","","",30,null],[13,"MissingStartfontField","","",30,null],[13,"MissingFontField","","",30,null],[13,"MissingSizeField","","",30,null],[13,"MissingFontboundingboxField","","",30,null],[13,"MissingCharsField","","",30,null],[13,"MissingStartcharField","","",30,null],[13,"MissingEncodingField","","",30,null],[13,"MissingBbxField","","",30,null],[13,"BbxTooBig","","",30,null],[13,"CorruptedFontHeader","","",30,null],[13,"CorruptedFontGlyphs","","",30,null],[13,"Max","","",30,null],[13,"UnexpectedPixelMode","","",30,null],[13,"InvalidPath","","",30,null],[13,"Unknown","","",30,null],[6,"FtResult","","",null,null],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"eq","","",30,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",30,{"i":[{"n":"i32"}],"o":{"n":"self"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",30,{"i":[{"n":"self"}],"o":{"n":"str"}}],[0,"face","freetype","",null,null],[3,"LoadFlag","freetype::face","",null,null],[3,"Face","","",null,null],[4,"KerningMode","","",null,null],[13,"KerningDefault","","",31,null],[13,"KerningUnfitted","","",31,null],[13,"KerningUnscaled","","",31,null],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"kerningmode"}}],[11,"eq","","",32,{"i":[{"n":"self"},{"n":"loadflag"}],"o":{"n":"bool"}}],[11,"ne","","",32,{"i":[{"n":"self"},{"n":"loadflag"}],"o":{"n":"bool"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"loadflag"}}],[11,"partial_cmp","","",32,{"i":[{"n":"self"},{"n":"loadflag"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",32,{"i":[{"n":"self"},{"n":"loadflag"}],"o":{"n":"bool"}}],[11,"le","","",32,{"i":[{"n":"self"},{"n":"loadflag"}],"o":{"n":"bool"}}],[11,"gt","","",32,{"i":[{"n":"self"},{"n":"loadflag"}],"o":{"n":"bool"}}],[11,"ge","","",32,{"i":[{"n":"self"},{"n":"loadflag"}],"o":{"n":"bool"}}],[11,"cmp","","",32,{"i":[{"n":"self"},{"n":"loadflag"}],"o":{"n":"ordering"}}],[11,"hash","","",32,null],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"DEFAULT","","",32,null],[18,"NO_SCALE","","",32,null],[18,"NO_HINTING","","",32,null],[18,"RENDER","","",32,null],[18,"NO_BITMAP","","",32,null],[18,"VERTICAL_LAYOUT","","",32,null],[18,"FORCE_AUTOHINT","","",32,null],[18,"CROP_BITMAP","","",32,null],[18,"PEDANTIC","","",32,null],[18,"IGNORE_GLOBAL_ADVANCE_WITH","","",32,null],[18,"NO_RECURSE","","",32,null],[18,"IGNORE_TRANSFORM","","",32,null],[18,"MONOCHROME","","",32,null],[18,"LINEAR_DESIGN","","",32,null],[18,"NO_AUTOHINT","","",32,null],[18,"TARGET_NORMAL","","",32,null],[18,"TARGET_LIGHT","","",32,null],[18,"TARGET_MONO","","",32,null],[18,"TARGET_LCD","","",32,null],[18,"TARGET_LCD_V","","",32,null],[18,"COLOR","","",32,null],[11,"empty","","Returns an empty set of flags.",32,{"o":{"n":"loadflag"}}],[11,"all","","Returns the set containing all flags.",32,{"o":{"n":"loadflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",32,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",32,{"i":[{"n":"i32"}],"o":{"g":["loadflag"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",32,{"i":[{"n":"i32"}],"o":{"n":"loadflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",32,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",32,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",32,{"i":[{"n":"self"},{"n":"loadflag"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",32,{"i":[{"n":"self"},{"n":"loadflag"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",32,{"i":[{"n":"self"},{"n":"loadflag"}]}],[11,"remove","","Removes the specified flags in-place.",32,{"i":[{"n":"self"},{"n":"loadflag"}]}],[11,"toggle","","Toggles the specified flags in-place.",32,{"i":[{"n":"self"},{"n":"loadflag"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",32,{"i":[{"n":"self"},{"n":"loadflag"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",32,{"i":[{"n":"self"},{"n":"loadflag"}],"o":{"n":"loadflag"}}],[11,"bitor_assign","","Adds the set of flags.",32,{"i":[{"n":"self"},{"n":"loadflag"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",32,{"i":[{"n":"self"},{"n":"loadflag"}],"o":{"n":"loadflag"}}],[11,"bitxor_assign","","Toggles the set of flags.",32,{"i":[{"n":"self"},{"n":"loadflag"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",32,{"i":[{"n":"self"},{"n":"loadflag"}],"o":{"n":"loadflag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",32,{"i":[{"n":"self"},{"n":"loadflag"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",32,{"i":[{"n":"self"},{"n":"loadflag"}],"o":{"n":"loadflag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",32,{"i":[{"n":"self"},{"n":"loadflag"}]}],[11,"not","","Returns the complement of this set of flags.",32,{"i":[{"n":"self"}],"o":{"n":"loadflag"}}],[11,"extend","","",32,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",32,{"i":[{"n":"t"}],"o":{"n":"loadflag"}}],[11,"eq","","",33,{"i":[{"n":"self"},{"n":"face"}],"o":{"n":"bool"}}],[11,"ne","","",33,{"i":[{"n":"self"},{"n":"face"}],"o":{"n":"bool"}}],[11,"hash","","",33,null],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"from_raw","","",33,{"i":[{"n":"ft_library"},{"n":"ft_face"},{"g":["rc"],"n":"option"}],"o":{"n":"self"}}],[11,"attach_file","","",33,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"ftresult"}}],[11,"reference","","",33,{"i":[{"n":"self"}],"o":{"n":"ftresult"}}],[11,"set_char_size","","",33,{"i":[{"n":"self"},{"n":"isize"},{"n":"isize"},{"n":"u32"},{"n":"u32"}],"o":{"n":"ftresult"}}],[11,"set_pixel_sizes","","",33,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"n":"ftresult"}}],[11,"load_glyph","","",33,{"i":[{"n":"self"},{"n":"u32"},{"n":"loadflag"}],"o":{"n":"ftresult"}}],[11,"load_char","","",33,{"i":[{"n":"self"},{"n":"usize"},{"n":"loadflag"}],"o":{"n":"ftresult"}}],[11,"set_transform","","",33,{"i":[{"n":"self"},{"n":"matrix"},{"n":"vector"}]}],[11,"get_char_index","","",33,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"u32"}}],[11,"get_kerning","","",33,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"kerningmode"}],"o":{"g":["vector"],"n":"ftresult"}}],[11,"glyph","","",33,{"i":[{"n":"self"}],"o":{"n":"glyphslot"}}],[11,"has_horizontal","","",33,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"has_vertical","","",33,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"has_kerning","","",33,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_scalable","","",33,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_sfnt","","",33,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_fixed_width","","",33,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"has_fixed_sizes","","",33,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"has_glyph_names","","",33,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_cid_keyed","","",33,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_tricky","","",33,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"has_color","","",33,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"raw","","",33,{"i":[{"n":"self"}],"o":{"n":"ft_facerec"}}],[11,"raw_mut","","",33,{"i":[{"n":"self"}],"o":{"n":"ft_facerec"}}],[11,"ascender","","",33,{"i":[{"n":"self"}],"o":{"n":"ft_short"}}],[11,"descender","","",33,{"i":[{"n":"self"}],"o":{"n":"ft_short"}}],[11,"em_size","","",33,{"i":[{"n":"self"}],"o":{"n":"ft_short"}}],[11,"height","","",33,{"i":[{"n":"self"}],"o":{"n":"ft_short"}}],[11,"max_advance_width","","",33,{"i":[{"n":"self"}],"o":{"n":"ft_short"}}],[11,"max_advance_height","","",33,{"i":[{"n":"self"}],"o":{"n":"ft_short"}}],[11,"underline_position","","",33,{"i":[{"n":"self"}],"o":{"n":"ft_short"}}],[11,"underline_thickness","","",33,{"i":[{"n":"self"}],"o":{"n":"ft_short"}}],[11,"family_name","","",33,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}],[11,"style_name","","",33,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}],[11,"size_metrics","","",33,{"i":[{"n":"self"}],"o":{"g":["ft_size_metrics"],"n":"option"}}],[11,"postscript_name","","",33,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drop","","",33,{"i":[{"n":"self"}]}],[0,"glyph","freetype","",null,null],[3,"Glyph","freetype::glyph","Represents a retrieved glyph from the library",null,null],[11,"from_raw","","Create a freetype-rs glyph object from c constituent parts",34,{"i":[{"n":"ft_library"},{"n":"ft_glyph"}],"o":{"n":"self"}}],[11,"transform","","Transform a glyph image if its format is scalable.",34,{"i":[{"n":"self"},{"g":["matrix"],"n":"option"},{"g":["vector"],"n":"option"}],"o":{"n":"ftresult"}}],[11,"get_cbox","","Return a glyph's ‘control box’. The control box encloses all the outline's points, including Bézier control points. Though it coincides with the exact bounding box for most glyphs, it can be slightly larger in some situations (like when rotating an outline that contains Bézier outside arcs).",34,{"i":[{"n":"self"},{"n":"ft_glyph_bbox_mode"}],"o":{"n":"bbox"}}],[11,"to_bitmap","","Convert a given glyph object to a bitmap glyph object.",34,{"i":[{"n":"self"},{"n":"rendermode"},{"g":["vector"],"n":"option"}],"o":{"g":["bitmapglyph"],"n":"ftresult"}}],[11,"advance_x","","",34,{"i":[{"n":"self"}],"o":{"n":"isize"}}],[11,"advance_y","","",34,{"i":[{"n":"self"}],"o":{"n":"isize"}}],[11,"format","","An enumeration type used to describe the format of a given glyph image. Note that this version of FreeType only supports two image formats, even though future font drivers will be able to register their own format.",34,{"i":[{"n":"self"}],"o":{"n":"ft_glyph_format"}}],[11,"raw","","Get the underlying c glyph struct (The system actually calls this a GlyphRec because it can be a different struct in different circumstances)",34,{"i":[{"n":"self"}],"o":{"n":"ft_glyphrec"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drop","","",34,{"i":[{"n":"self"}]}],[0,"glyph_slot","freetype","",null,null],[3,"SubGlyphInfo","freetype::glyph_slot","A description of a given subglyph returned by `GlyphSlot::get_subglyph_info` function.",null,null],[12,"index","","The glyph index of the subglyph.",35,null],[12,"flags","","The subglyph flags, see FT_SUBGLYPH_FLAG_XXX.",35,null],[12,"arg1","","The subglyph's first argument (if any).",35,null],[12,"arg2","","The subglyph's second argument (if any).",35,null],[12,"transfrom","","The subglyph transformation (if any).",35,null],[3,"GlyphSlot","","A struct encapsulating the space for a glyph within a `Library`",null,null],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"subglyphinfo"}}],[11,"default","","",35,{"o":{"n":"self"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"glyphslot"}}],[11,"eq","","",36,{"i":[{"n":"self"},{"n":"glyphslot"}],"o":{"n":"bool"}}],[11,"ne","","",36,{"i":[{"n":"self"},{"n":"glyphslot"}],"o":{"n":"bool"}}],[11,"hash","","",36,null],[11,"from_raw","","Create a `GlyphSlot` from its constituent C parts",36,{"i":[{"n":"ft_library"},{"n":"ft_glyphslot"}],"o":{"n":"self"}}],[11,"render_glyph","","Convert a given glyph image to a bitmap. It does so by inspecting the glyph image format, finding the relevant renderer, and invoking it.",36,{"i":[{"n":"self"},{"n":"rendermode"}],"o":{"n":"ftresult"}}],[11,"get_subglyph_info","","Retrieve a description of a given subglyph. Only use it if the glyph's format is FT_GLYPH_FORMAT_COMPOSITE; an error is returned otherwise.",36,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["subglyphinfo"],"n":"ftresult"}}],[11,"get_glyph","","Returns a glyph object, that is similar to a `GlyphSlot` but managed outside of the library",36,{"i":[{"n":"self"}],"o":{"g":["glyph"],"n":"ftresult"}}],[11,"outline","","In freetype, the `Outline` object is a scalable glyph. This method unpacks a glyph into this object, or returns `None` if the glyph has no `outline`",36,{"i":[{"n":"self"}],"o":{"g":["outline"],"n":"option"}}],[11,"bitmap","","This field is used as a bitmap descriptor when the slot format is FT_GLYPH_FORMAT_BITMAP. Note that the address and content of the bitmap buffer can change between calls of FT_Load_Glyph and a few other functions.",36,{"i":[{"n":"self"}],"o":{"n":"bitmap"}}],[11,"bitmap_left","","The bitmap's left bearing expressed in integer pixels. Only valid if the format is FT_GLYPH_FORMAT_BITMAP, this is, if the glyph slot contains a bitmap.",36,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"bitmap_top","","The bitmap's top bearing expressed in integer pixels. Remember that this is the distance from the baseline to the top-most glyph scanline, upwards y coordinates being positive.",36,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"advance","","This shorthand is, depending on FT_LOAD_IGNORE_TRANSFORM, the transformed (hinted) advance width for the glyph, in 26.6 fractional pixel format. As specified with FT_LOAD_VERTICAL_LAYOUT, it uses either the ‘horiAdvance’ or the ‘vertAdvance’ value of ‘metrics’ field.",36,{"i":[{"n":"self"}],"o":{"n":"vector"}}],[11,"linear_hori_advance","","The advance width of the unhinted glyph. Its value is expressed in 16.16 fractional pixels, unless FT_LOAD_LINEAR_DESIGN is set when loading the glyph. This field can be important to perform correct WYSIWYG layout. Only relevant for outline glyphs.",36,{"i":[{"n":"self"}],"o":{"n":"ft_fixed"}}],[11,"linear_vert_advance","","The advance height of the unhinted glyph. Its value is expressed in 16.16 fractional pixels, unless FT_LOAD_LINEAR_DESIGN is set when loading the glyph. This field can be important to perform correct WYSIWYG layout. Only relevant for outline glyphs.",36,{"i":[{"n":"self"}],"o":{"n":"ft_fixed"}}],[11,"metrics","","The metrics of the last loaded glyph in the slot. The returned values depend on the last load flags (see the FT_Load_Glyph API function) and can be expressed either in 26.6 fractional pixels or font units.",36,{"i":[{"n":"self"}],"o":{"n":"glyphmetrics"}}],[11,"raw","","Get a pointer to the underlying c struct",36,{"i":[{"n":"self"}],"o":{"n":"ft_glyphslotrec"}}],[0,"library","freetype","",null,null],[3,"Library","freetype::library","",null,null],[4,"LcdFilter","","",null,null],[13,"LcdFilterNone","","",37,null],[13,"LcdFilterDefault","","",37,null],[13,"LcdFilterLight","","",37,null],[13,"LcdFilterLegacy","","",37,null],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"lcdfilter"}}],[11,"init","","This function is used to create a new FreeType library instance and add the default modules. It returns a struct encapsulating the freetype library. The library is correctly discarded when the struct is dropped.",38,{"o":{"n":"ftresult"}}],[11,"new_face","","Open a font file using its pathname. `face_index` should be 0 if there is only 1 font in the file.",38,{"i":[{"n":"self"},{"n":"p"},{"n":"isize"}],"o":{"g":["face"],"n":"ftresult"}}],[11,"new_memory_face","","Similar to `new_face`, but loads file data from a byte array in memory",38,{"i":[{"n":"self"},{"n":"t"},{"n":"isize"}],"o":{"g":["face"],"n":"ftresult"}}],[11,"set_lcd_filter","","",38,{"i":[{"n":"self"},{"n":"lcdfilter"}],"o":{"n":"ftresult"}}],[11,"raw","","Get the underlying library object",38,{"i":[{"n":"self"}],"o":{"n":"ft_library"}}],[11,"drop","","",38,{"i":[{"n":"self"}]}],[0,"outline","freetype","",null,null],[3,"Outline","freetype::outline","",null,null],[3,"CurveIterator","","",null,null],[3,"ContourIterator","","",null,null],[4,"Curve","","",null,null],[13,"Line","","",39,null],[13,"Bezier2","","",39,null],[13,"Bezier3","","",39,null],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"curve"}}],[11,"from_raw","","",40,{"i":[{"n":"ft_outline"}],"o":{"n":"self"}}],[11,"points","","",40,null],[11,"tags","","",40,null],[11,"contours","","",40,null],[11,"contours_iter","","",40,{"i":[{"n":"self"}],"o":{"n":"contouriterator"}}],[11,"from_raw","","",41,{"i":[{"n":"ft_outline"},{"n":"isize"},{"n":"isize"}],"o":{"n":"self"}}],[11,"start","","",41,{"i":[{"n":"self"}],"o":{"n":"vector"}}],[11,"next","","",41,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"from_raw","","",42,{"i":[{"n":"ft_outline"}],"o":{"n":"self"}}],[11,"next","","",42,{"i":[{"n":"self"}],"o":{"n":"option"}}],[0,"render_mode","freetype","",null,null],[4,"RenderMode","freetype::render_mode","",null,null],[13,"Normal","","",43,null],[13,"Light","","",43,null],[13,"Mono","","",43,null],[13,"Lcd","","",43,null],[13,"LcdV","","",43,null],[13,"Max","","",43,null],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"rendermode"}}],[0,"tt_os2","freetype","",null,null],[3,"TrueTypeOS2Table","freetype::tt_os2","",null,null],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"truetypeos2table"}}],[11,"from_face","","",44,{"i":[{"n":"face"}],"o":{"n":"option"}}],[11,"version","","",44,{"i":[{"n":"self"}],"o":{"n":"ft_ushort"}}],[11,"avg_char_width","","",44,{"i":[{"n":"self"}],"o":{"n":"ft_short"}}],[11,"us_weight_class","","",44,{"i":[{"n":"self"}],"o":{"n":"ft_ushort"}}],[11,"us_width_class","","",44,{"i":[{"n":"self"}],"o":{"n":"ft_ushort"}}],[11,"fs_type","","",44,{"i":[{"n":"self"}],"o":{"n":"ft_short"}}],[11,"y_subscript_x_size","","",44,{"i":[{"n":"self"}],"o":{"n":"ft_short"}}],[11,"y_subscript_y_size","","",44,{"i":[{"n":"self"}],"o":{"n":"ft_short"}}],[11,"y_subscript_x_offset","","",44,{"i":[{"n":"self"}],"o":{"n":"ft_short"}}],[11,"y_subscript_y_offset","","",44,{"i":[{"n":"self"}],"o":{"n":"ft_short"}}],[11,"y_superscript_x_size","","",44,{"i":[{"n":"self"}],"o":{"n":"ft_short"}}],[11,"y_superscript_y_size","","",44,{"i":[{"n":"self"}],"o":{"n":"ft_short"}}],[11,"y_superscript_x_offset","","",44,{"i":[{"n":"self"}],"o":{"n":"ft_short"}}],[11,"y_superscript_y_offset","","",44,{"i":[{"n":"self"}],"o":{"n":"ft_short"}}],[11,"y_strikeout_size","","",44,{"i":[{"n":"self"}],"o":{"n":"ft_short"}}],[11,"y_strikeout_position","","",44,{"i":[{"n":"self"}],"o":{"n":"ft_short"}}],[11,"s_family_class","","",44,{"i":[{"n":"self"}],"o":{"n":"ft_short"}}],[11,"x_height","","",44,{"i":[{"n":"self"}],"o":{"n":"ft_short"}}],[6,"BBox","freetype","",null,null],[6,"GlyphMetrics","","",null,null],[6,"Matrix","","",null,null],[6,"Vector","","",null,null],[11,"clone","freetype::ffi","",4,{"i":[{"n":"self"}],"o":{"n":"ft_unitvector"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"ft_glyph_metrics"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"ft_matrix"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"ft_vector"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"ft_charmaprec"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"ft_size_requestrec"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"ft_listrec"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"ft_bbox"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"ft_bitmap_size"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"ft_parameter"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"tt_os2"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"ft_size_metrics"}}]],"paths":[[8,"FTErrorMethods"],[3,"FT_Vector"],[3,"FT_BBox"],[3,"FT_Matrix"],[3,"FT_UnitVector"],[3,"FT_Bitmap"],[3,"FT_Data"],[3,"FT_Generic"],[3,"FT_Size_Metrics"],[3,"FT_Outline"],[3,"FT_Glyph_Metrics"],[3,"FT_Parameter"],[3,"FT_Open_Args"],[3,"FT_Bitmap_Size"],[3,"TT_OS2"],[3,"FT_CharMapRec"],[3,"FT_FaceRec"],[3,"FT_GlyphSlotRec"],[3,"FT_SizeRec"],[3,"FT_StreamRec"],[3,"FT_MemoryRec"],[3,"FT_ListRec"],[3,"FT_ListNodeRec"],[3,"FT_Size_RequestRec"],[3,"FT_GlyphRec"],[3,"FT_BitmapGlyphRec"],[3,"FT_OutlineGlyphRec"],[4,"PixelMode"],[3,"Bitmap"],[3,"BitmapGlyph"],[4,"Error"],[4,"KerningMode"],[3,"LoadFlag"],[3,"Face"],[3,"Glyph"],[3,"SubGlyphInfo"],[3,"GlyphSlot"],[4,"LcdFilter"],[3,"Library"],[4,"Curve"],[3,"Outline"],[3,"CurveIterator"],[3,"ContourIterator"],[4,"RenderMode"],[3,"TrueTypeOS2Table"]]};
searchIndex["freetype_sys"] = {"doc":"","items":[[3,"FT_Vector","freetype_sys","",null,null],[12,"x","","",0,null],[12,"y","","",0,null],[3,"FT_BBox","","",null,null],[12,"xMin","","",1,null],[12,"yMin","","",1,null],[12,"xMax","","",1,null],[12,"yMax","","",1,null],[3,"FT_Matrix","","",null,null],[12,"xx","","",2,null],[12,"xy","","",2,null],[12,"yx","","",2,null],[12,"yy","","",2,null],[3,"FT_UnitVector","","",null,null],[12,"x","","",3,null],[12,"y","","",3,null],[3,"FT_Bitmap","","",null,null],[12,"rows","","",4,null],[12,"width","","",4,null],[12,"pitch","","",4,null],[12,"buffer","","",4,null],[12,"num_grays","","",4,null],[12,"pixel_mode","","",4,null],[12,"palette_mode","","",4,null],[12,"palette","","",4,null],[3,"FT_Data","","",null,null],[12,"pointer","","",5,null],[12,"length","","",5,null],[3,"FT_Generic","","",null,null],[12,"data","","",6,null],[12,"finalizer","","",6,null],[3,"FT_Size_Metrics","","",null,null],[12,"x_ppem","","",7,null],[12,"y_ppem","","",7,null],[12,"x_scale","","",7,null],[12,"y_scale","","",7,null],[12,"ascender","","",7,null],[12,"descender","","",7,null],[12,"height","","",7,null],[12,"max_advance","","",7,null],[3,"FT_Outline","","",null,null],[12,"n_contours","","",8,null],[12,"n_points","","",8,null],[12,"points","","",8,null],[12,"tags","","",8,null],[12,"contours","","",8,null],[12,"flags","","",8,null],[3,"FT_Glyph_Metrics","","",null,null],[12,"width","","",9,null],[12,"height","","",9,null],[12,"horiBearingX","","",9,null],[12,"horiBearingY","","",9,null],[12,"horiAdvance","","",9,null],[12,"vertBearingX","","",9,null],[12,"vertBearingY","","",9,null],[12,"vertAdvance","","",9,null],[3,"FT_Parameter","","",null,null],[12,"tag","","",10,null],[12,"data","","",10,null],[3,"FT_Open_Args","","",null,null],[12,"flags","","",11,null],[12,"memory_base","","",11,null],[12,"memory_size","","",11,null],[12,"pathname","","",11,null],[12,"stream","","",11,null],[12,"driver","","",11,null],[12,"num_params","","",11,null],[12,"params","","",11,null],[3,"FT_Bitmap_Size","","",null,null],[12,"height","","",12,null],[12,"width","","",12,null],[12,"size","","",12,null],[12,"x_ppem","","",12,null],[12,"y_ppem","","",12,null],[3,"TT_OS2","","",null,null],[12,"version","","",13,null],[12,"xAvgCharWidth","","",13,null],[12,"usWeightClass","","",13,null],[12,"usWidthClass","","",13,null],[12,"fsType","","",13,null],[12,"ySubscriptXSize","","",13,null],[12,"ySubscriptYSize","","",13,null],[12,"ySubscriptXOffset","","",13,null],[12,"ySubscriptYOffset","","",13,null],[12,"ySuperscriptXSize","","",13,null],[12,"ySuperscriptYSize","","",13,null],[12,"ySuperscriptXOffset","","",13,null],[12,"ySuperscriptYOffset","","",13,null],[12,"yStrikeoutSize","","",13,null],[12,"yStrikeoutPosition","","",13,null],[12,"sFamilyClass","","",13,null],[12,"panose","","",13,null],[12,"ulUnicodeRange1","","",13,null],[12,"ulUnicodeRange2","","",13,null],[12,"ulUnicodeRange3","","",13,null],[12,"ulUnicodeRange4","","",13,null],[12,"ulCodePageRange1","","",13,null],[12,"ulCodePageRange2","","",13,null],[12,"sxHeight","","",13,null],[12,"sCapHeight","","",13,null],[12,"usDefaultChar","","",13,null],[12,"usBreakChar","","",13,null],[12,"usMaxContext","","",13,null],[3,"FT_CharMapRec","","",null,null],[12,"face","","",14,null],[12,"encoding","","",14,null],[12,"platform_id","","",14,null],[12,"encoding_id","","",14,null],[3,"FT_FaceRec","","",null,null],[12,"num_faces","","",15,null],[12,"face_index","","",15,null],[12,"face_flags","","",15,null],[12,"style_flags","","",15,null],[12,"num_glyphs","","",15,null],[12,"family_name","","",15,null],[12,"style_name","","",15,null],[12,"num_fixed_sizes","","",15,null],[12,"available_sizes","","",15,null],[12,"num_charmaps","","",15,null],[12,"charmaps","","",15,null],[12,"generic","","",15,null],[12,"bbox","","",15,null],[12,"units_per_EM","","",15,null],[12,"ascender","","",15,null],[12,"descender","","",15,null],[12,"height","","",15,null],[12,"max_advance_width","","",15,null],[12,"max_advance_height","","",15,null],[12,"underline_position","","",15,null],[12,"underline_thickness","","",15,null],[12,"glyph","","",15,null],[12,"size","","",15,null],[12,"charmap","","",15,null],[12,"driver","","",15,null],[12,"memory","","",15,null],[12,"stream","","",15,null],[12,"sizes_list","","",15,null],[12,"autohint","","",15,null],[12,"extensions","","",15,null],[12,"internal","","",15,null],[3,"FT_GlyphSlotRec","","",null,null],[12,"library","","",16,null],[12,"face","","",16,null],[12,"next","","",16,null],[12,"reserved","","",16,null],[12,"generic","","",16,null],[12,"metrics","","",16,null],[12,"linearHoriAdvance","","",16,null],[12,"linearVertAdvance","","",16,null],[12,"advance","","",16,null],[12,"format","","",16,null],[12,"bitmap","","",16,null],[12,"bitmap_left","","",16,null],[12,"bitmap_top","","",16,null],[12,"outline","","",16,null],[12,"num_subglyphs","","",16,null],[12,"subglyphs","","",16,null],[12,"control_data","","",16,null],[12,"control_len","","",16,null],[12,"lsb_delta","","",16,null],[12,"rsb_delta","","",16,null],[12,"other","","",16,null],[12,"internal","","",16,null],[3,"FT_SizeRec","","",null,null],[12,"face","","",17,null],[12,"generic","","",17,null],[12,"metrics","","",17,null],[12,"internal","","",17,null],[3,"FT_StreamRec","","",null,null],[12,"base","","",18,null],[12,"size","","",18,null],[12,"pos","","",18,null],[12,"descriptor","","",18,null],[12,"pathname","","",18,null],[12,"read","","",18,null],[12,"close","","",18,null],[12,"memory","","",18,null],[12,"cursor","","",18,null],[12,"limit","","",18,null],[3,"FT_MemoryRec","","",null,null],[12,"user","","",19,null],[12,"alloc","","",19,null],[12,"free","","",19,null],[12,"realloc","","",19,null],[3,"FT_ListRec","","",null,null],[12,"head","","",20,null],[12,"tail","","",20,null],[3,"FT_ListNodeRec","","",null,null],[12,"prev","","",21,null],[12,"next","","",21,null],[12,"data","","",21,null],[3,"FT_Size_RequestRec","","",null,null],[12,"size_request_type","","",22,null],[12,"width","","",22,null],[12,"height","","",22,null],[12,"horiResolution","","",22,null],[12,"vertResolution","","",22,null],[3,"FT_GlyphRec","","",null,null],[12,"library","","",23,null],[12,"clazz","","",23,null],[12,"format","","",23,null],[12,"advance","","",23,null],[3,"FT_BitmapGlyphRec","","",null,null],[12,"root","","",24,null],[12,"left","","",24,null],[12,"top","","",24,null],[12,"bitmap","","",24,null],[3,"FT_OutlineGlyphRec","","",null,null],[12,"root","","",25,null],[12,"outline","","",25,null],[5,"FT_HAS_HORIZONTAL","","",null,{"i":[{"n":"ft_face"}],"o":{"n":"bool"}}],[5,"FT_HAS_VERTICAL","","",null,{"i":[{"n":"ft_face"}],"o":{"n":"bool"}}],[5,"FT_HAS_KERNING","","",null,{"i":[{"n":"ft_face"}],"o":{"n":"bool"}}],[5,"FT_IS_SCALABLE","","",null,{"i":[{"n":"ft_face"}],"o":{"n":"bool"}}],[5,"FT_IS_SFNT","","",null,{"i":[{"n":"ft_face"}],"o":{"n":"bool"}}],[5,"FT_IS_FIXED_WIDTH","","",null,{"i":[{"n":"ft_face"}],"o":{"n":"bool"}}],[5,"FT_HAS_FIXED_SIZES","","",null,{"i":[{"n":"ft_face"}],"o":{"n":"bool"}}],[5,"FT_HAS_GLYPH_NAMES","","",null,{"i":[{"n":"ft_face"}],"o":{"n":"bool"}}],[5,"FT_HAS_MULTIPLE_MASTERS","","",null,{"i":[{"n":"ft_face"}],"o":{"n":"bool"}}],[5,"FT_IS_CID_KEYED","","",null,{"i":[{"n":"ft_face"}],"o":{"n":"bool"}}],[5,"FT_IS_TRICKY","","",null,{"i":[{"n":"ft_face"}],"o":{"n":"bool"}}],[5,"FT_HAS_COLOR","","",null,{"i":[{"n":"ft_face"}],"o":{"n":"bool"}}],[5,"FT_Get_Sfnt_Table","","",null,null],[5,"FT_Init_FreeType","","",null,null],[5,"FT_Done_FreeType","","",null,null],[5,"FT_New_Library","","",null,null],[5,"FT_Done_Library","","",null,null],[5,"FT_Reference_Library","","",null,null],[5,"FT_Add_Default_Modules","","",null,null],[5,"FT_New_Face","","",null,null],[5,"FT_New_Memory_Face","","",null,null],[5,"FT_Open_Face","","",null,null],[5,"FT_Attach_File","","",null,null],[5,"FT_Attach_Stream","","",null,null],[5,"FT_Reference_Face","","",null,null],[5,"FT_Done_Face","","",null,null],[5,"FT_Select_Size","","",null,null],[5,"FT_Request_Size","","",null,null],[5,"FT_Set_Char_Size","","",null,null],[5,"FT_Set_Pixel_Sizes","","",null,null],[5,"FT_Library_SetLcdFilter","","",null,null],[5,"FT_Load_Glyph","","",null,null],[5,"FT_Load_Char","","",null,null],[5,"FT_Set_Transform","","",null,null],[5,"FT_Render_Glyph","","",null,null],[5,"FT_Get_Kerning","","",null,null],[5,"FT_Get_Track_Kerning","","",null,null],[5,"FT_Get_Glyph_Name","","",null,null],[5,"FT_Get_Postscript_Name","","",null,null],[5,"FT_Select_CharMap","","",null,null],[5,"FT_Set_Charmap","","",null,null],[5,"FT_Get_Charmap_Index","","",null,null],[5,"FT_Get_Char_Index","","",null,null],[5,"FT_Get_First_Char","","",null,null],[5,"FT_Get_Next_Char","","",null,null],[5,"FT_Get_Name_Index","","",null,null],[5,"FT_Get_SubGlyph_Info","","",null,null],[5,"FT_Get_FSType_Flags","","",null,null],[5,"FT_Get_Glyph","","",null,null],[5,"FT_Glyph_Copy","","",null,null],[5,"FT_Glyph_Transform","","",null,null],[5,"FT_Glyph_Get_CBox","","",null,null],[5,"FT_Glyph_To_Bitmap","","",null,null],[5,"FT_Done_Glyph","","",null,null],[5,"FT_Outline_GetInsideBorder","","",null,null],[5,"FT_Outline_GetOutsideBorder","","",null,null],[5,"FT_Glyph_Stroke","","",null,null],[5,"FT_Glyph_StrokeBorder","","",null,null],[5,"FT_Stroker_New","","",null,null],[5,"FT_Stroker_Set","","",null,null],[5,"FT_Stroker_Rewind","","",null,null],[5,"FT_Stroker_ParseOutline","","",null,null],[5,"FT_Stroker_Done","","",null,null],[5,"FT_Stroker_BeginSubPath","","",null,null],[5,"FT_Stroker_EndSubPath","","",null,null],[5,"FT_Stroker_LineTo","","",null,null],[5,"FT_Stroker_ConicTo","","",null,null],[5,"FT_Stroker_CubicTo","","",null,null],[5,"FT_Stroker_GetBorderCounts","","",null,null],[5,"FT_Stroker_ExportBorder","","",null,null],[5,"FT_Stroker_GetCounts","","",null,null],[5,"FT_Stroker_Export","","",null,null],[5,"FT_MulDiv","","",null,null],[5,"FT_MulFix","","",null,null],[5,"FT_DivFix","","",null,null],[5,"FT_RoundFix","","",null,null],[5,"FT_CeilFix","","",null,null],[5,"FT_FloorFix","","",null,null],[5,"FT_Outline_Translate","","",null,null],[5,"FT_Outline_Get_CBox","","",null,null],[6,"FT_Byte","","",null,null],[6,"FT_Bytes","","",null,null],[6,"FT_Char","","",null,null],[6,"FT_Int","","",null,null],[6,"FT_UInt","","",null,null],[6,"FT_Int16","","",null,null],[6,"FT_UInt16","","",null,null],[6,"FT_Int32","","",null,null],[6,"FT_UInt32","","",null,null],[6,"FT_Int64","","",null,null],[6,"FT_UInt64","","",null,null],[6,"FT_Short","","",null,null],[6,"FT_UShort","","",null,null],[6,"FT_Long","","",null,null],[6,"FT_ULong","","",null,null],[6,"FT_Bool","","",null,null],[6,"FT_Offset","","",null,null],[6,"FT_PtrDist","","",null,null],[6,"FT_String","","",null,null],[6,"FT_Tag","","",null,null],[6,"FT_Error","","",null,null],[6,"FT_Fixed","","",null,null],[6,"FT_Pointer","","",null,null],[6,"FT_Pos","","",null,null],[6,"FT_FWord","","",null,null],[6,"FT_UFWord","","",null,null],[6,"FT_F2Dot14","","",null,null],[6,"FT_F26Dot6","","",null,null],[6,"FT_Generic_Finalizer","","",null,null],[6,"FT_StreamDesc","","",null,null],[6,"FT_Stream_IoFunc","","",null,null],[6,"FT_Stream_CloseFunc","","",null,null],[6,"FT_Alloc_Func","","",null,null],[6,"FT_Free_Func","","",null,null],[6,"FT_Realloc_Func","","",null,null],[6,"enum_FT_Sfnt_Tag_","","",null,null],[6,"FT_Sfnt_Tag","","",null,null],[6,"FT_Pixel_Mode","","",null,null],[6,"FT_Glyph_Format","","",null,null],[6,"FT_Render_Mode","","",null,null],[6,"FT_LcdFilter","","",null,null],[6,"FT_Encoding","","",null,null],[6,"FT_Size_Request_Type","","",null,null],[6,"FT_Kerning_Mode","","",null,null],[6,"FT_Glyph_BBox_Mode","","",null,null],[6,"FT_Stroker_LineJoin","","",null,null],[6,"FT_Stroker_LineCap","","",null,null],[6,"FT_StrokerBorder","","",null,null],[6,"FT_Library","","",null,null],[6,"FT_Face","","",null,null],[6,"FT_Size","","",null,null],[6,"FT_GlyphSlot","","",null,null],[6,"FT_CharMap","","",null,null],[6,"FT_Module","","",null,null],[6,"FT_Driver","","",null,null],[6,"FT_Renderer","","",null,null],[6,"FT_Size_Internal","","",null,null],[6,"FT_SubGlyph","","",null,null],[6,"FT_Slot_Internal","","",null,null],[6,"FT_Size_Request","","",null,null],[6,"FT_Face_Internal","","",null,null],[6,"FT_Stream","","",null,null],[6,"FT_Memory","","",null,null],[6,"FT_ListNode","","",null,null],[6,"FT_Glyph","","",null,null],[6,"FT_BitmapGlyph","","",null,null],[6,"FT_OutlineGlyph","","",null,null],[6,"FT_Stroker","","",null,null],[6,"TT_OS2_Internal","","",null,null],[6,"FT_LibraryRec","","",null,null],[6,"FT_ModuleRec","","",null,null],[6,"FT_DriverRec","","",null,null],[6,"FT_RendererRec","","",null,null],[6,"FT_Size_InternalRec","","",null,null],[6,"FT_SubGlyphRec","","",null,null],[6,"FT_Slot_InternalRec","","",null,null],[6,"FT_Face_InternalRec","","",null,null],[6,"FT_StrokerRec","","",null,null],[17,"ft_sfnt_head","","",null,null],[17,"ft_sfnt_maxp","","",null,null],[17,"ft_sfnt_os2","","",null,null],[17,"ft_sfnt_hhea","","",null,null],[17,"ft_sfnt_vhea","","",null,null],[17,"ft_sfnt_post","","",null,null],[17,"ft_sfnt_pclt","","",null,null],[17,"ft_sfnt_max","","",null,null],[17,"FT_PIXEL_MODE_NONE","","",null,null],[17,"FT_PIXEL_MODE_MONO","","",null,null],[17,"FT_PIXEL_MODE_GRAY","","",null,null],[17,"FT_PIXEL_MODE_GRAY2","","",null,null],[17,"FT_PIXEL_MODE_GRAY4","","",null,null],[17,"FT_PIXEL_MODE_LCD","","",null,null],[17,"FT_PIXEL_MODE_LCD_V","","",null,null],[17,"FT_PIXEL_MODE_BGRA","","",null,null],[17,"FT_PIXEL_MODE_MAX","","",null,null],[17,"FT_GLYPH_FORMAT_NONE","","",null,null],[17,"FT_GLYPH_FORMAT_COMPOSITE","","",null,null],[17,"FT_GLYPH_FORMAT_BITMAP","","",null,null],[17,"FT_GLYPH_FORMAT_OUTLINE","","",null,null],[17,"FT_GLYPH_FORMAT_PLOTTER","","",null,null],[17,"FT_RENDER_MODE_NORMAL","","",null,null],[17,"FT_RENDER_MODE_LIGHT","","",null,null],[17,"FT_RENDER_MODE_MONO","","",null,null],[17,"FT_RENDER_MODE_LCD","","",null,null],[17,"FT_RENDER_MODE_LCD_V","","",null,null],[17,"FT_RENDER_MODE_MAX","","",null,null],[17,"FT_LCD_FILTER_NONE","","",null,null],[17,"FT_LCD_FILTER_DEFAULT","","",null,null],[17,"FT_LCD_FILTER_LIGHT","","",null,null],[17,"FT_LCD_FILTER_LEGACY1","","",null,null],[17,"FT_LCD_FILTER_LEGACY","","",null,null],[17,"FT_LCD_FILTER_MAX","","",null,null],[17,"FT_ENCODING_NONE","","",null,null],[17,"FT_ENCODING_MS_SYMBOL","","",null,null],[17,"FT_ENCODING_UNICODE","","",null,null],[17,"FT_ENCODING_SJIS","","",null,null],[17,"FT_ENCODING_GB2312","","",null,null],[17,"FT_ENCODING_BIG5","","",null,null],[17,"FT_ENCODING_WANSUNG","","",null,null],[17,"FT_ENCODING_JOHAB","","",null,null],[17,"FT_ENCODING_MS_SJIS","","",null,null],[17,"FT_ENCODING_MS_GB2312","","",null,null],[17,"FT_ENCODING_MS_BIG5","","",null,null],[17,"FT_ENCODING_MS_WANSUNG","","",null,null],[17,"FT_ENCODING_MS_JOHAB","","",null,null],[17,"FT_ENCODING_ADOBE_STANDARD","","",null,null],[17,"FT_ENCODING_ADOBE_EXPERT","","",null,null],[17,"FT_ENCODING_ADOBE_CUSTOM","","",null,null],[17,"FT_ENCODING_ADOBE_LATIN_1","","",null,null],[17,"FT_ENCODING_OLD_LATIN_2","","",null,null],[17,"FT_ENCODING_APPLE_ROMAN","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_NOMINAL","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_REAL_DIM","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_BBOX","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_CELL","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_SCALES","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_MAX","","",null,null],[17,"FT_KERNING_DEFAULT","","",null,null],[17,"FT_KERNING_UNFITTED","","",null,null],[17,"FT_KERNING_UNSCALED","","",null,null],[17,"FT_GLYPH_BBOX_UNSCALED","","",null,null],[17,"FT_GLYPH_BBOX_SUBPIXELS","","",null,null],[17,"FT_GLYPH_BBOX_GRIDFIT","","",null,null],[17,"FT_GLYPH_BBOX_TRUNCATE","","",null,null],[17,"FT_GLYPH_BBOX_PIXELS","","",null,null],[17,"FT_STROKER_LINEJOIN_ROUND","","",null,null],[17,"FT_STROKER_LINEJOIN_BEVEL","","",null,null],[17,"FT_STROKER_LINEJOIN_MITER_VARIABLE","","",null,null],[17,"FT_STROKER_LINEJOIN_MITER","","",null,null],[17,"FT_STROKER_LINEJOIN_MITER_FIXED","","",null,null],[17,"FT_STROKER_LINECAP_BUTT","","",null,null],[17,"FT_STROKER_LINECAP_ROUND","","",null,null],[17,"FT_STROKER_LINECAP_SQUARE","","",null,null],[17,"FT_STROKER_BORDER_LEFT","","",null,null],[17,"FT_STROKER_BORDER_RIGHT","","",null,null],[17,"FT_FACE_FLAG_SCALABLE","","",null,null],[17,"FT_FACE_FLAG_FIXED_SIZES","","",null,null],[17,"FT_FACE_FLAG_FIXED_WIDTH","","",null,null],[17,"FT_FACE_FLAG_SFNT","","",null,null],[17,"FT_FACE_FLAG_HORIZONTAL","","",null,null],[17,"FT_FACE_FLAG_VERTICAL","","",null,null],[17,"FT_FACE_FLAG_KERNING","","",null,null],[17,"FT_FACE_FLAG_FAST_GLYPHS","","",null,null],[17,"FT_FACE_FLAG_MULTIPLE_MASTERS","","",null,null],[17,"FT_FACE_FLAG_GLYPH_NAMES","","",null,null],[17,"FT_FACE_FLAG_EXTERNAL_STREAM","","",null,null],[17,"FT_FACE_FLAG_HINTER","","",null,null],[17,"FT_FACE_FLAG_CID_KEYED","","",null,null],[17,"FT_FACE_FLAG_TRICKY","","",null,null],[17,"FT_FACE_FLAG_COLOR","","",null,null],[17,"FT_STYLE_FLAG_ITALIC","","",null,null],[17,"FT_STYLE_FLAG_BOLD","","",null,null],[17,"FT_OPEN_MEMORY","","",null,null],[17,"FT_OPEN_STREAM","","",null,null],[17,"FT_OPEN_PATHNAME","","",null,null],[17,"FT_OPEN_DRIVER","","",null,null],[17,"FT_OPEN_PARAMS","","",null,null],[17,"FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS","","",null,null],[17,"FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES","","",null,null],[17,"FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID","","",null,null],[17,"FT_SUBGLYPH_FLAG_SCALE","","",null,null],[17,"FT_SUBGLYPH_FLAG_XY_SCALE","","",null,null],[17,"FT_SUBGLYPH_FLAG_2X2","","",null,null],[17,"FT_SUBGLYPH_FLAG_USE_MY_METRICS","","",null,null],[17,"FT_LOAD_DEFAULT","","",null,null],[17,"FT_LOAD_NO_SCALE","","",null,null],[17,"FT_LOAD_NO_HINTING","","",null,null],[17,"FT_LOAD_RENDER","","",null,null],[17,"FT_LOAD_NO_BITMAP","","",null,null],[17,"FT_LOAD_VERTICAL_LAYOUT","","",null,null],[17,"FT_LOAD_FORCE_AUTOHINT","","",null,null],[17,"FT_LOAD_CROP_BITMAP","","",null,null],[17,"FT_LOAD_PEDANTIC","","",null,null],[17,"FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH","","",null,null],[17,"FT_LOAD_NO_RECURSE","","",null,null],[17,"FT_LOAD_IGNORE_TRANSFORM","","",null,null],[17,"FT_LOAD_MONOCHROME","","",null,null],[17,"FT_LOAD_LINEAR_DESIGN","","",null,null],[17,"FT_LOAD_NO_AUTOHINT","","",null,null],[17,"FT_LOAD_COLOR","","",null,null],[17,"FT_LOAD_TARGET_NORMAL","","",null,null],[17,"FT_LOAD_TARGET_LIGHT","","",null,null],[17,"FT_LOAD_TARGET_MONO","","",null,null],[17,"FT_LOAD_TARGET_LCD","","",null,null],[17,"FT_LOAD_TARGET_LCD_V","","",null,null],[17,"FT_FSTYPE_INSTALLABLE_EMBEDDING","","",null,null],[17,"FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING","","",null,null],[17,"FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING","","",null,null],[17,"FT_FSTYPE_EDITABLE_EMBEDDING","","",null,null],[17,"FT_FSTYPE_NO_SUBSETTING","","",null,null],[17,"FT_FSTYPE_BITMAP_EMBEDDING_ONLY","","",null,null],[17,"FT_Err_Ok","","",null,null],[17,"FT_Err_Cannot_Open_Resource","","",null,null],[17,"FT_Err_Unknown_File_Format","","",null,null],[17,"FT_Err_Invalid_File_Format","","",null,null],[17,"FT_Err_Invalid_Version","","",null,null],[17,"FT_Err_Lower_Module_Version","","",null,null],[17,"FT_Err_Invalid_Argument","","",null,null],[17,"FT_Err_Unimplemented_Feature","","",null,null],[17,"FT_Err_Invalid_Table","","",null,null],[17,"FT_Err_Invalid_Offset","","",null,null],[17,"FT_Err_Array_Too_Large","","",null,null],[17,"FT_Err_Missing_Module","","",null,null],[17,"FT_Err_Missing_Property","","",null,null],[17,"FT_Err_Invalid_Glyph_Index","","",null,null],[17,"FT_Err_Invalid_Character_Code","","",null,null],[17,"FT_Err_Invalid_Glyph_Format","","",null,null],[17,"FT_Err_Cannot_Render_Glyph","","",null,null],[17,"FT_Err_Invalid_Outline","","",null,null],[17,"FT_Err_Invalid_Composite","","",null,null],[17,"FT_Err_Too_Many_Hints","","",null,null],[17,"FT_Err_Invalid_Pixel_Size","","",null,null],[17,"FT_Err_Invalid_Handle","","",null,null],[17,"FT_Err_Invalid_Library_Handle","","",null,null],[17,"FT_Err_Invalid_Driver_Handle","","",null,null],[17,"FT_Err_Invalid_Face_Handle","","",null,null],[17,"FT_Err_Invalid_Size_Handle","","",null,null],[17,"FT_Err_Invalid_Slot_Handle","","",null,null],[17,"FT_Err_Invalid_CharMap_Handle","","",null,null],[17,"FT_Err_Invalid_Cache_Handle","","",null,null],[17,"FT_Err_Invalid_Stream_Handle","","",null,null],[17,"FT_Err_Too_Many_Drivers","","",null,null],[17,"FT_Err_Too_Many_Extensions","","",null,null],[17,"FT_Err_Out_Of_Memory","","",null,null],[17,"FT_Err_Unlisted_Object","","",null,null],[17,"FT_Err_Cannot_Open_Stream","","",null,null],[17,"FT_Err_Invalid_Stream_Seek","","",null,null],[17,"FT_Err_Invalid_Stream_Skip","","",null,null],[17,"FT_Err_Invalid_Stream_Read","","",null,null],[17,"FT_Err_Invalid_Stream_Operation","","",null,null],[17,"FT_Err_Invalid_Frame_Operation","","",null,null],[17,"FT_Err_Nested_Frame_Access","","",null,null],[17,"FT_Err_Invalid_Frame_Read","","",null,null],[17,"FT_Err_Raster_Uninitialized","","",null,null],[17,"FT_Err_Raster_Corrupted","","",null,null],[17,"FT_Err_Raster_Overflow","","",null,null],[17,"FT_Err_Raster_Negative_Height","","",null,null],[17,"FT_Err_Too_Many_Caches","","",null,null],[17,"FT_Err_Invalid_Opcode","","",null,null],[17,"FT_Err_Too_Few_Arguments","","",null,null],[17,"FT_Err_Stack_Overflow","","",null,null],[17,"FT_Err_Code_Overflow","","",null,null],[17,"FT_Err_Bad_Argument","","",null,null],[17,"FT_Err_Divide_By_Zero","","",null,null],[17,"FT_Err_Invalid_Reference","","",null,null],[17,"FT_Err_Debug_OpCode","","",null,null],[17,"FT_Err_ENDF_In_Exec_Stream","","",null,null],[17,"FT_Err_Nested_DEFS","","",null,null],[17,"FT_Err_Invalid_CodeRange","","",null,null],[17,"FT_Err_Execution_Too_Long","","",null,null],[17,"FT_Err_Too_Many_Function_Defs","","",null,null],[17,"FT_Err_Too_Many_Instruction_Defs","","",null,null],[17,"FT_Err_Table_Missing","","",null,null],[17,"FT_Err_Horiz_Header_Missing","","",null,null],[17,"FT_Err_Locations_Missing","","",null,null],[17,"FT_Err_Name_Table_Missing","","",null,null],[17,"FT_Err_CMap_Table_Missing","","",null,null],[17,"FT_Err_Hmtx_Table_Missing","","",null,null],[17,"FT_Err_Post_Table_Missing","","",null,null],[17,"FT_Err_Invalid_Horiz_Metrics","","",null,null],[17,"FT_Err_Invalid_CharMap_Format","","",null,null],[17,"FT_Err_Invalid_PPem","","",null,null],[17,"FT_Err_Invalid_Vert_Metrics","","",null,null],[17,"FT_Err_Could_Not_Find_Context","","",null,null],[17,"FT_Err_Invalid_Post_Table_Format","","",null,null],[17,"FT_Err_Invalid_Post_Table","","",null,null],[17,"FT_Err_Syntax_Error","","",null,null],[17,"FT_Err_Stack_Underflow","","",null,null],[17,"FT_Err_Ignore","","",null,null],[17,"FT_Err_No_Unicode_Glyph_Name","","",null,null],[17,"FT_Err_Missing_Startfont_Field","","",null,null],[17,"FT_Err_Missing_Font_Field","","",null,null],[17,"FT_Err_Missing_Size_Field","","",null,null],[17,"FT_Err_Missing_Fontboundingbox_Field","","",null,null],[17,"FT_Err_Missing_Chars_Field","","",null,null],[17,"FT_Err_Missing_Startchar_Field","","",null,null],[17,"FT_Err_Missing_Encoding_Field","","",null,null],[17,"FT_Err_Missing_Bbx_Field","","",null,null],[17,"FT_Err_Bbx_Too_Big","","",null,null],[17,"FT_Err_Corrupted_Font_Header","","",null,null],[17,"FT_Err_Corrupted_Font_Glyphs","","",null,null],[17,"FT_Err_Max","","",null,null],[8,"FTErrorMethods","","",null,null],[10,"succeeded","","",26,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"succeeded","","",27,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"ft_vector"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"ft_bbox"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"ft_matrix"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"ft_unitvector"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"ft_size_metrics"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"ft_glyph_metrics"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"ft_parameter"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"ft_bitmap_size"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"tt_os2"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"ft_charmaprec"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"ft_listrec"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"ft_size_requestrec"}}]],"paths":[[3,"FT_Vector"],[3,"FT_BBox"],[3,"FT_Matrix"],[3,"FT_UnitVector"],[3,"FT_Bitmap"],[3,"FT_Data"],[3,"FT_Generic"],[3,"FT_Size_Metrics"],[3,"FT_Outline"],[3,"FT_Glyph_Metrics"],[3,"FT_Parameter"],[3,"FT_Open_Args"],[3,"FT_Bitmap_Size"],[3,"TT_OS2"],[3,"FT_CharMapRec"],[3,"FT_FaceRec"],[3,"FT_GlyphSlotRec"],[3,"FT_SizeRec"],[3,"FT_StreamRec"],[3,"FT_MemoryRec"],[3,"FT_ListRec"],[3,"FT_ListNodeRec"],[3,"FT_Size_RequestRec"],[3,"FT_GlyphRec"],[3,"FT_BitmapGlyphRec"],[3,"FT_OutlineGlyphRec"],[8,"FTErrorMethods"],[6,"FT_Error"]]};
searchIndex["gfx"] = {"doc":"gfx","items":[[0,"preset","gfx","State presets",null,null],[0,"blend","gfx::preset","Blending preset modes.",null,null],[17,"REPLACE","gfx::preset::blend","When combining two fragments, choose the source value",null,null],[17,"ADD","","When combining two fragments, add their values together, saturating at 1.0",null,null],[17,"MULTIPLY","","When combining two fragments, multiply their values together.",null,null],[17,"ALPHA","","When combining two fragments, add the value of the source times its alpha channel with the value of the destination multiplied by the inverse of the source alpha channel. Has the usual transparency effect: mixes the two colors using a fraction of each one specified by the alpha of the source.",null,null],[17,"INVERT","","When combining two fragments, subtract the destination color from a constant color using the source color as weight. Has an invert effect with the constant color as base and source color controlling displacement from the base color. A white source color and a white value results in plain invert. The output alpha is same as destination alpha.",null,null],[0,"depth","gfx::preset","Depth presets for depth tests.",null,null],[17,"PASS_TEST","gfx::preset::depth","When rendering a fragment, draw regardless of depth buffer state. Rendering will not update the depth buffer.",null,null],[17,"PASS_WRITE","","When rendering a fragment, draw regardless of depth buffer state. Rendering will update the depth buffer.",null,null],[17,"LESS_EQUAL_TEST","","\"<=\" comparison with read-only depth",null,null],[17,"LESS_EQUAL_WRITE","","When rendering a fragment, only draw when the fragment's output depth is less than or equal to the current depth buffer value. Rendering will update the depth buffer with the new depth value.",null,null],[0,"state","gfx","Fixed-function hardware state.",null,null],[4,"FrontFace","gfx::state","The front face winding order of a set of vertices.",null,null],[13,"Clockwise","","Clockwise winding order.",0,null],[13,"CounterClockwise","","Counter-clockwise winding order.",0,null],[6,"LineWidth","","Width of a line. Could be f32 if not for Hash deriving issues.",null,null],[6,"OffsetSlope","","Slope depth offset factor Could be f32 if not for Hash deriving issues.",null,null],[6,"OffsetUnits","","Number of units to offset, where the unit is the minimal difference in the depth value dictated by the precision of the depth buffer.",null,null],[3,"Offset","","How to offset vertices in screen space, if at all.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[4,"CullFace","","Which face, if any, to cull.",null,null],[13,"Nothing","","",2,null],[13,"Front","","",2,null],[13,"Back","","",2,null],[4,"RasterMethod","","How to rasterize a primitive.",null,null],[13,"Point","","Rasterize as a point.",3,null],[13,"Line","","Rasterize as a line with the given width.",3,null],[13,"Fill","","Rasterize as a face.",3,null],[3,"MultiSample","","Multi-sampling rasterization mode",null,null],[3,"Rasterizer","","Primitive rasterization state. Note that GL allows different raster method to be used for front and back, while this abstraction does not.",null,null],[12,"front_face","","Which vertex winding is considered to be the front face for culling.",4,null],[12,"cull_face","","Which face should be culled.",4,null],[12,"method","","How to rasterize this primitive.",4,null],[12,"offset","","Any polygon offset to apply.",4,null],[12,"samples","","Multi-sampling mode.",4,null],[4,"Comparison","","A pixel-wise comparison function.",null,null],[13,"Never","","`false`",5,null],[13,"Less","","`x < y`",5,null],[13,"LessEqual","","`x <= y`",5,null],[13,"Equal","","`x == y`",5,null],[13,"GreaterEqual","","`x >= y`",5,null],[13,"Greater","","`x > y`",5,null],[13,"NotEqual","","`x != y`",5,null],[13,"Always","","`true`",5,null],[4,"StencilOp","","Stencil mask operation.",null,null],[13,"Keep","","Keep the current value in the stencil buffer (no change).",6,null],[13,"Zero","","Set the value in the stencil buffer to zero.",6,null],[13,"Replace","","Set the stencil buffer value to `value` from `StencilSide`",6,null],[13,"IncrementClamp","","Increment the stencil buffer value, clamping to its maximum value.",6,null],[13,"IncrementWrap","","Increment the stencil buffer value, wrapping around to 0 on overflow.",6,null],[13,"DecrementClamp","","Decrement the stencil buffer value, clamping to its minimum value.",6,null],[13,"DecrementWrap","","Decrement the stencil buffer value, wrapping around to the maximum value on overflow.",6,null],[13,"Invert","","Bitwise invert the current value in the stencil buffer.",6,null],[3,"StencilSide","","Complete stencil state for a given side of a face.",null,null],[12,"fun","","Comparison function to use to determine if the stencil test passes.",7,null],[12,"mask_read","","A mask that is ANDd with both the stencil buffer value and the reference value when they are read before doing the stencil test.",7,null],[12,"mask_write","","A mask that is ANDd with the stencil value before writing to the stencil buffer.",7,null],[12,"op_fail","","What operation to do if the stencil test fails.",7,null],[12,"op_depth_fail","","What operation to do if the stenil test passes but the depth test fails.",7,null],[12,"op_pass","","What operation to do if both the depth and stencil test pass.",7,null],[3,"Stencil","","Complete stencil state, specifying how to handle the front and back side of a face.",null,null],[12,"front","","",8,null],[12,"back","","",8,null],[3,"Depth","","Depth test state.",null,null],[12,"fun","","Comparison function to use.",9,null],[12,"write","","Specify whether to write to the depth buffer or not.",9,null],[4,"Equation","","",null,null],[13,"Add","","Adds source and destination. Source and destination are multiplied by blending parameters before addition.",10,null],[13,"Sub","","Subtracts destination from source. Source and destination are multiplied by blending parameters before subtraction.",10,null],[13,"RevSub","","Subtracts source from destination. Source and destination are multiplied by blending parameters before subtraction.",10,null],[13,"Min","","Component-wise minimum value of source and destination. Blending parameters are ignored.",10,null],[13,"Max","","Component-wise maximum value of source and destination. Blending parameters are ignored.",10,null],[4,"BlendValue","","",null,null],[13,"SourceColor","","",11,null],[13,"SourceAlpha","","",11,null],[13,"DestColor","","",11,null],[13,"DestAlpha","","",11,null],[13,"ConstColor","","",11,null],[13,"ConstAlpha","","",11,null],[4,"Factor","","",null,null],[13,"Zero","","",12,null],[13,"One","","",12,null],[13,"SourceAlphaSaturated","","",12,null],[13,"ZeroPlus","","",12,null],[13,"OneMinus","","",12,null],[3,"BlendChannel","","",null,null],[12,"equation","","",13,null],[12,"source","","",13,null],[12,"destination","","",13,null],[3,"Blend","","",null,null],[12,"color","","",14,null],[12,"alpha","","",14,null],[3,"ColorMask","","",null,null],[3,"Color","","The state of an active color render target",null,null],[12,"mask","","Color mask to use.",15,null],[12,"blend","","Optional blending.",15,null],[3,"RefValues","","The complete set of the rasterizer reference values. Switching these doesn't roll the hardware context.",null,null],[12,"stencil","","Stencil front and back values.",16,null],[12,"blend","","Constant blend color.",16,null],[8,"Device","gfx","A `Device` is responsible for submitting `CommandBuffer`s to the GPU.",null,null],[16,"Resources","","Associated `Resources` type.",17,null],[16,"CommandBuffer","","Associated `CommandBuffer` type. Every `Device` type can only work with one `CommandBuffer` type.",17,null],[10,"get_capabilities","","Returns the capabilities of this `Device`.",17,{"i":[{"n":"self"}],"o":{"n":"capabilities"}}],[10,"pin_submitted_resources","","Pin everything from this handle manager to live for a frame.",17,null],[10,"submit","","Submits a `CommandBuffer` to the GPU for execution.",17,null],[10,"fenced_submit","","Submits a `CommandBuffer` to the GPU for execution. returns a fence that is signaled after the GPU has executed all commands",17,null],[10,"wait_fence","","Stalls the current thread until the fence is satisfied",17,null],[10,"cleanup","","Cleanup unused resources. This should be called between frames.",17,null],[4,"Primitive","","Describes what geometric primitives are created from vertex data.",null,null],[13,"PointList","","Each vertex represents a single point.",18,null],[13,"LineList","","Each pair of vertices represent a single line segment. For example, with `[a, b, c, d, e]`, `a` and `b` form a line, `c` and `d` form a line, and `e` is discarded.",18,null],[13,"LineStrip","","Every two consecutive vertices represent a single line segment. Visually forms a \"path\" of lines, as they are all connected. For example, with `[a, b, c]`, `a` and `b` form a line line, and `b` and `c` form a line.",18,null],[13,"TriangleList","","Each triplet of vertices represent a single triangle. For example, with `[a, b, c, d, e]`, `a`, `b`, and `c` form a triangle, `d` and `e` are discarded.",18,null],[13,"TriangleStrip","","Every three consecutive vertices represent a single triangle. For example, with `[a, b, c, d]`, `a`, `b`, and `c` form a triangle, and `b`, `c`, and `d` form a triangle.",18,null],[13,"LineListAdjacency","","Each quadtruplet of vertices represent a single line segment with adjacency information. For example, with `[a, b, c, d]`, `b` and `c` form a line, and `a` and `d` are the adjacent vertices.",18,null],[13,"LineStripAdjacency","","Every four consecutive vertices represent a single line segment with adjacency information. For example, with `[a, b, c, d, e]`, `[a, b, c, d]` form a line segment with adjacency, and `[b, c, d, e]` form a line segment with adjacency.",18,null],[13,"TriangleListAdjacency","","Each sextuplet of vertices represent a single traingle with adjacency information. For example, with `[a, b, c, d, e, f]`, `a`, `c`, and `e` form a traingle, and `b`, `d`, and `f` are the adjacent vertices, where `b` is adjacent to the edge formed by `a` and `c`, `d` is adjacent to the edge `c` and `e`, and `f` is adjacent to the edge `e` and `a`.",18,null],[13,"TriangleStripAdjacency","","Every even-numbered vertex (every other starting from the first) represents an additional vertex for the triangle strip, while odd-numbered vertices (every other starting from the second) represent adjacent vertices. For example, with `[a, b, c, d, e, f, g, h]`, `[a, c, e, g]` form a triangle strip, and `[b, d, f, h]` are the adjacent vertices, where `b`, `d`, and `f` are adjacent to the first triangle in the strip, and `d`, `f`, and `h` are adjacent to the second.",18,null],[13,"PatchList","","Patch list, used with shaders capable of producing primitives on their own (tessellation)",18,null],[8,"Resources","","Different types of a specific API.",null,null],[16,"Buffer","","",19,null],[16,"Shader","","",19,null],[16,"Program","","",19,null],[16,"PipelineStateObject","","",19,null],[16,"Texture","","",19,null],[16,"ShaderResourceView","","",19,null],[16,"UnorderedAccessView","","",19,null],[16,"RenderTargetView","","",19,null],[16,"DepthStencilView","","",19,null],[16,"Sampler","","",19,null],[16,"Fence","","",19,null],[16,"Mapping","","",19,null],[4,"SubmissionError","","",null,null],[13,"AccessOverlap","","",20,null],[6,"SubmissionResult","","",null,null],[6,"VertexCount","","Draw vertex count.",null,null],[6,"InstanceCount","","Draw number of instances",null,null],[4,"ShaderSet","","A complete set of shaders to link a program.",null,null],[13,"Simple","","Simple program: Vs-Ps",21,null],[13,"Geometry","","Geometry shader programs: Vs-Gs-Ps",21,null],[13,"Tessellated","","Tessellated TODO: Tessellated, TessellatedGeometry, TransformFeedback",21,null],[3,"VertexShader","","",null,null],[3,"HullShader","","",null,null],[3,"DomainShader","","",null,null],[3,"GeometryShader","","",null,null],[3,"PixelShader","","",null,null],[0,"buffer","","Memory buffers",null,null],[3,"Raw","gfx::buffer","Untyped buffer",null,null],[4,"Role","","Role of the memory buffer.",null,null],[13,"Vertex","","Generic vertex buffer",22,null],[13,"Index","","Index buffer",22,null],[13,"Constant","","Constant buffer",22,null],[13,"Staging","","Staging buffer",22,null],[3,"Info","","An information block that is immutable and associated to each buffer.",null,null],[12,"role","","Role",23,null],[12,"usage","","Usage hint",23,null],[12,"bind","","Bind flags",23,null],[12,"size","","Size in bytes",23,null],[12,"stride","","Stride of a single element, in bytes. Only used for structured buffers that you use via shader resource / unordered access views.",23,null],[4,"CreationError","","Error creating a buffer.",null,null],[13,"UnsupportedBind","","Some of the bind flags are not supported.",24,null],[13,"Other","","Unknown other error.",24,null],[13,"UnsupportedUsage","","Usage mode is not supported",24,null],[0,"format","gfx","Universal format specification. Applicable to textures, views, and vertex buffers.",null,null],[4,"ChannelType","gfx::format","Type of a surface channel. This is how we interpret the storage allocated with `SurfaceType`.",null,null],[13,"Int","","",25,null],[13,"Uint","","",25,null],[13,"Inorm","","",25,null],[13,"Unorm","","",25,null],[13,"Float","","",25,null],[13,"Srgb","","",25,null],[4,"Int","","",null,null],[4,"Uint","","",null,null],[4,"Inorm","","",null,null],[4,"Unorm","","",null,null],[4,"Float","","",null,null],[4,"Srgb","","",null,null],[4,"SurfaceType","","Type of the allocated texture surface. It is supposed to only carry information about the number of bits per each channel. The actual types are up to the views to decide and interpret. The actual components are up to the swizzle to define.",null,null],[13,"R4_G4","","",26,null],[13,"R4_G4_B4_A4","","",26,null],[13,"R5_G5_B5_A1","","",26,null],[13,"R5_G6_B5","","",26,null],[13,"R8","","",26,null],[13,"R8_G8","","",26,null],[13,"R8_G8_B8_A8","","",26,null],[13,"R10_G10_B10_A2","","",26,null],[13,"R11_G11_B10","","",26,null],[13,"R16","","",26,null],[13,"R16_G16","","",26,null],[13,"R16_G16_B16","","",26,null],[13,"R16_G16_B16_A16","","",26,null],[13,"R32","","",26,null],[13,"R32_G32","","",26,null],[13,"R32_G32_B32","","",26,null],[13,"R32_G32_B32_A32","","",26,null],[13,"B8_G8_R8_A8","","",26,null],[13,"D16","","",26,null],[13,"D24","","",26,null],[13,"D24_S8","","",26,null],[13,"D32","","",26,null],[4,"R4_G4","","",null,null],[4,"R4_G4_B4_A4","","",null,null],[4,"R5_G5_B5_A1","","",null,null],[4,"R5_G6_B5","","",null,null],[4,"R8","","",null,null],[4,"R8_G8","","",null,null],[4,"R8_G8_B8_A8","","",null,null],[4,"R10_G10_B10_A2","","",null,null],[4,"R11_G11_B10","","",null,null],[4,"R16","","",null,null],[4,"R16_G16","","",null,null],[4,"R16_G16_B16","","",null,null],[4,"R16_G16_B16_A16","","",null,null],[4,"R32","","",null,null],[4,"R32_G32","","",null,null],[4,"R32_G32_B32","","",null,null],[4,"R32_G32_B32_A32","","",null,null],[4,"B8_G8_R8_A8","","",null,null],[4,"D16","","",null,null],[4,"D24","","",null,null],[4,"D24_S8","","",null,null],[4,"D32","","",null,null],[4,"ChannelSource","","Source channel in a swizzle configuration. Some may redirect onto different physical channels, some may be hardcoded to 0 or 1.",null,null],[13,"Zero","","",27,null],[13,"One","","",27,null],[13,"X","","",27,null],[13,"Y","","",27,null],[13,"Z","","",27,null],[13,"W","","",27,null],[3,"Swizzle","","Channel swizzle configuration for the resource views. Note: It's not currently mirrored at compile-time, thus providing less safety and convenience.",null,null],[12,"0","","",28,null],[12,"1","","",28,null],[12,"2","","",28,null],[12,"3","","",28,null],[3,"Format","","Complete run-time surface format.",null,null],[12,"0","","",29,null],[12,"1","","",29,null],[8,"SurfaceTyped","","Compile-time surface type trait.",null,null],[16,"DataType","","The corresponding data type to be passed from CPU.",30,null],[10,"get_surface_type","","Return the run-time value of the type.",30,{"o":{"n":"surfacetype"}}],[8,"BufferSurface","","An ability of a surface type to be used for vertex buffers.",null,null],[8,"TextureSurface","","An ability of a surface type to be used for textures.",null,null],[8,"RenderSurface","","An ability of a surface type to be used for render targets.",null,null],[8,"DepthSurface","","An ability of a surface type to be used for depth targets.",null,null],[8,"StencilSurface","","An ability of a surface type to be used for stencil targets.",null,null],[8,"ChannelTyped","","Compile-time channel type trait.",null,null],[16,"ShaderType","","Shader-visible type that corresponds to this channel. For example, normalized integers are visible as floats.",31,null],[10,"get_channel_type","","Return the run-time value of the type.",31,{"o":{"n":"channeltype"}}],[8,"TextureChannel","","An ability of a channel type to be used for textures.",null,null],[8,"RenderChannel","","An ability of a channel type to be used for render targets.",null,null],[8,"BlendChannel","","An ability of a channel type to be used for blended render targets.",null,null],[8,"Formatted","","Compile-time full format trait.",null,null],[16,"Surface","","Associated surface type.",32,null],[16,"Channel","","Associated channel type.",32,null],[16,"View","","Shader view type of this format.",32,null],[11,"get_format","","Return the run-time value of the type.",32,{"o":{"n":"format"}}],[8,"BufferFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthFormat","","Ability to be used for depth targets.",null,null],[8,"StencilFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthStencilFormat","","Ability to be used for depth+stencil targets.",null,null],[8,"TextureFormat","","Ability to be used for textures.",null,null],[8,"RenderFormat","","Ability to be used for render targets.",null,null],[8,"BlendFormat","","Ability to be used for blended render targets.",null,null],[3,"U8Norm","","",null,null],[12,"0","","",33,null],[3,"I8Norm","","",null,null],[12,"0","","",34,null],[3,"U16Norm","","",null,null],[12,"0","","",35,null],[3,"I16Norm","","",null,null],[12,"0","","",36,null],[3,"F16","","",null,null],[12,"0","","",37,null],[6,"Vec1","","Abstracted 1-element container for macro internal use",null,null],[6,"Vec2","","Abstracted 2-element container for macro internal use",null,null],[6,"Vec3","","Abstracted 3-element container for macro internal use",null,null],[6,"Vec4","","Abstracted 4-element container for macro internal use",null,null],[6,"Rgba8","","Standard 8bits RGBA format.",null,null],[6,"Srgba8","","Standard 8bit gamma transforming RGB format.",null,null],[6,"Rgb10a2F","","Standard HDR floating-point format with 10 bits for RGB components and 2 bits for the alpha.",null,null],[6,"Rgba16F","","Standard 16-bit floating-point RGBA format.",null,null],[6,"Rgba32F","","Standard 32-bit floating-point RGBA format.",null,null],[6,"Bgra8","","Standard 8bits BGRA format.",null,null],[6,"Depth","","Standard 24-bit depth format.",null,null],[6,"DepthStencil","","Standard 24-bit depth format with 8-bit stencil.",null,null],[6,"Depth32F","","Standard 32-bit floating-point depth format.",null,null],[0,"handle","gfx","Resource handles",null,null],[3,"RawBuffer","gfx::handle","Untyped buffer handle",null,null],[3,"Buffer","","Type-safe buffer handle",null,null],[3,"Shader","","Shader Handle",null,null],[3,"Program","","Program Handle",null,null],[3,"RawPipelineState","","Raw Pipeline State Handle",null,null],[3,"RawTexture","","Raw texture handle",null,null],[3,"Texture","","Typed texture object",null,null],[3,"RawShaderResourceView","","Raw Shader Resource View Handle",null,null],[3,"ShaderResourceView","","Type-safe Shader Resource View Handle",null,null],[3,"RawUnorderedAccessView","","Raw Unordered Access View Handle",null,null],[3,"UnorderedAccessView","","Type-safe Unordered Access View Handle",null,null],[3,"RawRenderTargetView","","Raw RTV",null,null],[3,"RawDepthStencilView","","Raw DSV",null,null],[3,"RenderTargetView","","Typed RTV",null,null],[3,"DepthStencilView","","Typed DSV",null,null],[3,"Sampler","","Sampler Handle",null,null],[3,"Fence","","Fence Handle",null,null],[3,"Manager","","Stores reference-counted resources used in a command buffer. Seals actual resource names behind the interface, automatically referencing them both by the Factory on resource creation and the Renderer during CommandBuffer population.",null,null],[0,"mapping","gfx","Memory mapping",null,null],[4,"Error","gfx::mapping","Error accessing a mapping.",null,null],[13,"InvalidAccess","","The requested mapping access did not match the expected usage.",38,null],[13,"AccessOverlap","","The requested mapping access overlaps with another.",38,null],[3,"Reader","","Mapping reader",null,null],[3,"Writer","","Mapping writer. Currently is not possible to make write-only slice so while it is technically possible to read from Writer, it will lead to an undefined behavior. Please do not read from it.",null,null],[0,"memory","gfx","Types to describe the properties of memory allocated for gfx resources.",null,null],[4,"Usage","gfx::memory","How this memory will be used regarding GPU-CPU data flow.",null,null],[13,"Data","","Full speed GPU access. Optimal for render targets and resourced memory.",39,null],[13,"Dynamic","","CPU to GPU data flow with update commands. Used for dynamic buffer data, typically constant buffers.",39,null],[13,"Upload","","CPU to GPU data flow with mapping. Used for staging for upload to GPU.",39,null],[13,"Download","","GPU to CPU data flow with mapping. Used for staging for download from GPU.",39,null],[3,"Access","","Flags providing information about the type of memory access to a resource.",null,null],[3,"Bind","","Flags providing information about the usage of a resource.",null,null],[8,"Pod","","A trait for plain-old-data types.",null,null],[5,"cast_slice","","Cast a slice from one POD type to another.",null,null],[0,"texture","gfx","Texture creation and modification.",null,null],[17,"MAX_LEVEL","gfx::texture","Maximum accessible mipmap level of a texture.",null,null],[3,"Raw","","Untyped texture",null,null],[4,"CreationError","","Pure texture object creation error.",null,null],[13,"Format","","Failed to map a given format to the device.",40,null],[13,"Kind","","The kind doesn't support a particular operation.",40,null],[13,"Samples","","Failed to map a given multisampled kind to the device.",40,null],[13,"Size","","Unsupported size in one of the dimensions.",40,null],[13,"Data","","The given data has a different size than the target texture slice.",40,null],[13,"Usage","","The mentioned usage mode is not supported",40,null],[13,"Mipmap","","The requested mipmap creation parameter is unsupported.",40,null],[13,"Level","","The requested mipmap level count does not match the provided data.",40,null],[4,"LayerError","","An error associated with selected texture layer.",null,null],[13,"NotExpected","","The source texture kind doesn't support array slices.",41,null],[13,"OutOfBounds","","Selected layer is outside of the provided range.",41,null],[6,"Size","","Dimension size",null,null],[6,"Bits","","Number of bits per component",null,null],[6,"NumSamples","","Number of MSAA samples",null,null],[6,"NumFragments","","Number of EQAA fragments",null,null],[6,"Dimensions","","Dimensions: width, height, depth, and samples.",null,null],[4,"AaMode","","Describes the configuration of samples inside each texel.",null,null],[13,"Single","","No additional sample information",42,null],[13,"Multi","","MultiSampled Anti-Aliasing (MSAA)",42,null],[13,"Coverage","","Coverage Sampling Anti-Aliasing (CSAA/EQAA)",42,null],[4,"FilterMethod","","How to filter the texture when sampling. They correspond to increasing levels of quality, but also cost. They \"layer\" on top of each other: it is not possible to have bilinear filtering without mipmapping, for example.",null,null],[13,"Scale","","The dumbest filtering possible, nearest-neighbor interpolation.",43,null],[13,"Mipmap","","Add simple mipmapping.",43,null],[13,"Bilinear","","Sample multiple texels within a single mipmap level to increase quality.",43,null],[13,"Trilinear","","Sample multiple texels across two mipmap levels to increase quality.",43,null],[13,"Anisotropic","","Anisotropic filtering with a given \"max\", must be between 1 and 16, inclusive.",43,null],[4,"CubeFace","","The face of a cube texture to do an operation on.",null,null],[13,"PosX","","",44,null],[13,"NegX","","",44,null],[13,"PosY","","",44,null],[13,"NegY","","",44,null],[13,"PosZ","","",44,null],[13,"NegZ","","",44,null],[17,"CUBE_FACES","","A constant array of cube faces in the order they map to the hardware.",null,null],[4,"Kind","","Specifies the kind of a texture storage to be allocated.",null,null],[13,"D1","","A single row of texels.",45,null],[13,"D1Array","","An array of rows of texels. Equivalent to Texture2D except that texels in a different row are not sampled.",45,null],[13,"D2","","A traditional 2D texture, with rows arranged contiguously.",45,null],[13,"D2Array","","An array of 2D textures. Equivalent to Texture3D except that texels in a different depth level are not sampled.",45,null],[13,"D3","","A volume texture, with each 2D layer arranged contiguously.",45,null],[13,"Cube","","A set of 6 2D textures, one for each face of a cube.",45,null],[13,"CubeArray","","An array of Cube textures.",45,null],[4,"Mipmap","","The marker for the texture initializer to generate extra space for the mipmap generation.",null,null],[13,"Provided","","The mipmap data is provided as a part of bitmap data.",46,null],[13,"Allocated","","The mipmap data is not provided, but the memory for it should be allocated for the later generation/",46,null],[3,"ImageInfoCommon","","Describes a subvolume of a texture, which image data can be uploaded into.",null,null],[12,"xoffset","","",47,null],[12,"yoffset","","",47,null],[12,"zoffset","","",47,null],[12,"width","","",47,null],[12,"height","","",47,null],[12,"depth","","",47,null],[12,"format","","Format of each texel.",47,null],[12,"mipmap","","Which mipmap to select.",47,null],[6,"RawImageInfo","","New raw image info based on the universal format spec.",null,null],[6,"NewImageInfo","","New image info based on the universal format spec. The format is suppsed to come from compile-time information as opposed to run-time enum values.",null,null],[3,"TextureCopyRegion","","A texture region defined for copy operations",null,null],[12,"texture","","Raw texture",48,null],[12,"kind","","Texture kind",48,null],[12,"cube_face","","Optional cube face",48,null],[12,"info","","Dimensions, offsets, and format",48,null],[4,"WrapMode","","Specifies how texture coordinates outside the range `[0, 1]` are handled.",null,null],[13,"Tile","","Tile the texture. That is, sample the coordinate modulo `1.0`. This is the default.",49,null],[13,"Mirror","","Mirror the texture. Like tile, but uses abs(coord) before the modulo.",49,null],[13,"Clamp","","Clamp the texture to the value at `0.0` or `1.0` respectively.",49,null],[13,"Border","","Use border color.",49,null],[3,"Lod","","A wrapper for the LOD level of a texture.",null,null],[3,"PackedColor","","A wrapper for the 8bpp RGBA color, encoded as u32.",null,null],[12,"0","","",50,null],[3,"SamplerInfo","","Specifies how to sample from a texture.",null,null],[12,"filter","","Filter method to use.",51,null],[12,"wrap_mode","","Wrapping mode for each of the U, V, and W axis (S, T, and R in OpenGL speak).",51,null],[12,"lod_bias","","This bias is added to every computed mipmap level (N + lod_bias). For example, if it would select mipmap level 2 and lod_bias is 1, it will use mipmap level 3.",51,null],[12,"lod_range","","This range is used to clamp LOD level used for sampling.",51,null],[12,"comparison","","Comparison mode, used primary for a shadow map.",51,null],[12,"border","","Border color is used when one of the wrap modes is set to border.",51,null],[3,"Info","","Texture storage descriptor.",null,null],[12,"kind","","",52,null],[12,"levels","","",52,null],[12,"format","","",52,null],[12,"bind","","",52,null],[12,"usage","","",52,null],[3,"ResourceDesc","","Texture resource view descriptor.",null,null],[12,"channel","","",53,null],[12,"layer","","",53,null],[12,"min","","",53,null],[12,"max","","",53,null],[12,"swizzle","","",53,null],[3,"RenderDesc","","Texture render view descriptor.",null,null],[12,"channel","","",54,null],[12,"level","","",54,null],[12,"layer","","",54,null],[3,"DepthStencilFlags","","Depth-stencil read-only flags",null,null],[3,"DepthStencilDesc","","Texture depth-stencil view descriptor.",null,null],[12,"level","","",55,null],[12,"layer","","",55,null],[12,"flags","","",55,null],[6,"Layer","","A depth value, specifying which plane to select out of a 3D texture.",null,null],[6,"Level","","Mipmap level to select in a texture.",null,null],[8,"Factory","gfx","Overview",null,null],[10,"get_capabilities","","Returns the capabilities of this `Factory`. This usually depends on the graphics API being used.",56,{"i":[{"n":"self"}],"o":{"n":"capabilities"}}],[10,"create_buffer_raw","","",56,{"i":[{"n":"self"},{"n":"info"}],"o":{"g":["rawbuffer","creationerror"],"n":"result"}}],[10,"create_buffer_immutable_raw","","",56,null],[11,"create_buffer_immutable","","",56,null],[11,"create_buffer","","",56,{"i":[{"n":"self"},{"n":"usize"},{"n":"role"},{"n":"usage"},{"n":"bind"}],"o":{"g":["buffer","creationerror"],"n":"result"}}],[10,"create_pipeline_state_raw","","Creates a new `RawPipelineState`. To create a safely typed `PipelineState`, see the `FactoryExt` trait and `pso` module, both in the `gfx` crate.",56,{"i":[{"n":"self"},{"n":"program"},{"n":"descriptor"}],"o":{"g":["rawpipelinestate","creationerror"],"n":"result"}}],[10,"create_program","","Creates a new shader `Program` for the supplied `ShaderSet`.",56,{"i":[{"n":"self"},{"n":"shaderset"}],"o":{"g":["program","createprogramerror"],"n":"result"}}],[10,"create_shader","","Compiles a shader source into a `Shader` object that can be used to create a shader `Program`.",56,null],[11,"create_shader_vertex","","Compiles a `VertexShader` from source.",56,null],[11,"create_shader_hull","","Compiles a `HullShader` from source.",56,null],[11,"create_shader_domain","","Compiles a `VertexShader` from source.",56,null],[11,"create_shader_geometry","","Compiles a `GeometryShader` from source.",56,null],[11,"create_shader_pixel","","Compiles a `PixelShader` from source. This is the same as what some APIs call a fragment shader.",56,null],[10,"create_sampler","","",56,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"sampler"}}],[10,"read_mapping","","Acquire a mapping Reader",56,{"i":[{"n":"self"},{"n":"buffer"}],"o":{"g":["reader","error"],"n":"result"}}],[10,"write_mapping","","Acquire a mapping Writer",56,{"i":[{"n":"self"},{"n":"buffer"}],"o":{"g":["writer","error"],"n":"result"}}],[10,"create_texture_raw","","Create a new empty raw texture with no data. The channel type parameter is a hint, required to assist backends that have no concept of typeless formats (OpenGL). The initial data, if given, has to be provided for all mip levels and slices: Slice0.Mip0, Slice0.Mip1, ..., Slice1.Mip0, ...",56,{"i":[{"n":"self"},{"n":"info"},{"g":["channeltype"],"n":"option"},{"n":"option"}],"o":{"g":["rawtexture","creationerror"],"n":"result"}}],[10,"view_buffer_as_shader_resource_raw","","",56,{"i":[{"n":"self"},{"n":"rawbuffer"},{"n":"format"}],"o":{"g":["rawshaderresourceview","resourceviewerror"],"n":"result"}}],[10,"view_buffer_as_unordered_access_raw","","",56,{"i":[{"n":"self"},{"n":"rawbuffer"}],"o":{"g":["rawunorderedaccessview","resourceviewerror"],"n":"result"}}],[10,"view_texture_as_shader_resource_raw","","",56,{"i":[{"n":"self"},{"n":"rawtexture"},{"n":"resourcedesc"}],"o":{"g":["rawshaderresourceview","resourceviewerror"],"n":"result"}}],[10,"view_texture_as_unordered_access_raw","","",56,{"i":[{"n":"self"},{"n":"rawtexture"}],"o":{"g":["rawunorderedaccessview","resourceviewerror"],"n":"result"}}],[10,"view_texture_as_render_target_raw","","",56,{"i":[{"n":"self"},{"n":"rawtexture"},{"n":"renderdesc"}],"o":{"g":["rawrendertargetview","targetviewerror"],"n":"result"}}],[10,"view_texture_as_depth_stencil_raw","","",56,{"i":[{"n":"self"},{"n":"rawtexture"},{"n":"depthstencildesc"}],"o":{"g":["rawdepthstencilview","targetviewerror"],"n":"result"}}],[11,"create_texture","","",56,{"i":[{"n":"self"},{"n":"kind"},{"n":"u8"},{"n":"bind"},{"n":"usage"},{"g":["channeltype"],"n":"option"}],"o":{"g":["texture","creationerror"],"n":"result"}}],[11,"view_buffer_as_shader_resource","","",56,{"i":[{"n":"self"},{"n":"buffer"}],"o":{"g":["shaderresourceview","resourceviewerror"],"n":"result"}}],[11,"view_buffer_as_unordered_access","","",56,{"i":[{"n":"self"},{"n":"buffer"}],"o":{"g":["unorderedaccessview","resourceviewerror"],"n":"result"}}],[11,"view_texture_as_shader_resource","","",56,null],[11,"view_texture_as_unordered_access","","",56,{"i":[{"n":"self"},{"n":"texture"}],"o":{"g":["unorderedaccessview","resourceviewerror"],"n":"result"}}],[11,"view_texture_as_render_target","","",56,{"i":[{"n":"self"},{"n":"texture"},{"n":"u8"},{"g":["u16"],"n":"option"}],"o":{"g":["rendertargetview","targetviewerror"],"n":"result"}}],[11,"view_texture_as_depth_stencil","","",56,{"i":[{"n":"self"},{"n":"texture"},{"n":"u8"},{"g":["u16"],"n":"option"},{"n":"depthstencilflags"}],"o":{"g":["depthstencilview","targetviewerror"],"n":"result"}}],[11,"view_texture_as_depth_stencil_trivial","","",56,{"i":[{"n":"self"},{"n":"texture"}],"o":{"g":["depthstencilview","targetviewerror"],"n":"result"}}],[11,"create_texture_immutable_u8","","",56,null],[11,"create_texture_immutable","","",56,null],[11,"create_render_target","","",56,{"i":[{"n":"self"},{"n":"u16"},{"n":"u16"}],"o":{"g":["combinederror"],"n":"result"}}],[11,"create_depth_stencil","","",56,{"i":[{"n":"self"},{"n":"u16"},{"n":"u16"}],"o":{"g":["combinederror"],"n":"result"}}],[11,"create_depth_stencil_view_only","","",56,{"i":[{"n":"self"},{"n":"u16"},{"n":"u16"}],"o":{"g":["depthstencilview","combinederror"],"n":"result"}}],[4,"ResourceViewError","","Error creating either a ShaderResourceView, or UnorderedAccessView.",null,null],[13,"NoBindFlag","","The corresponding bind flag is not present in the texture.",57,null],[13,"Channel","","Selected channel type is not supported for this texture.",57,null],[13,"Layer","","Selected layer can not be viewed for this texture.",57,null],[13,"Unsupported","","The backend was refused for some reason.",57,null],[4,"TargetViewError","","Error creating either a RenderTargetView, or DepthStencilView.",null,null],[13,"NoBindFlag","","The `RENDER_TARGET`/`DEPTH_STENCIL` flag is not present in the texture.",58,null],[13,"Level","","Selected mip level doesn't exist.",58,null],[13,"Layer","","Selected array layer doesn't exist.",58,null],[13,"Channel","","Selected channel type is not supported for this texture.",58,null],[13,"Unsupported","","The backend was refused for some reason.",58,null],[13,"NotDetached","","The RTV cannot be changed due to the references to it existing.",58,null],[4,"CombinedError","","An error from creating textures with views at the same time.",null,null],[13,"Texture","","Failed to create the raw texture.",59,null],[13,"Resource","","Failed to create SRV or UAV.",59,null],[13,"Target","","Failed to create RTV or DSV.",59,null],[8,"CommandBuffer","","An interface of the abstract command buffer. It collects commands in an efficient API-specific manner, to be ready for execution on the device.",null,null],[10,"reset","","Reset the command buffer contents, retain the allocated storage",60,null],[10,"bind_pipeline_state","","Bind a pipeline state object",60,null],[10,"bind_vertex_buffers","","Bind a complete set of vertex buffers",60,null],[10,"bind_constant_buffers","","Bind a complete set of constant buffers",60,null],[10,"bind_global_constant","","Bind a global constant",60,null],[10,"bind_resource_views","","Bind a complete set of shader resource views",60,null],[10,"bind_unordered_views","","Bind a complete set of unordered access views",60,null],[10,"bind_samplers","","Bind a complete set of samplers",60,null],[10,"bind_pixel_targets","","Bind a complete set of pixel targets, including multiple colors views and an optional depth/stencil view.",60,null],[10,"bind_index","","Bind an index buffer",60,null],[10,"set_scissor","","Set scissor rectangle",60,null],[10,"set_ref_values","","Set reference values for the blending and stencil front/back",60,null],[10,"copy_buffer","","Copy part of a buffer to another",60,null],[10,"copy_buffer_to_texture","","Copy part of a buffer to a texture",60,null],[10,"copy_texture_to_buffer","","Copy part of a texture to a buffer",60,null],[10,"copy_texture_to_texture","","Copy part of one texture into another",60,null],[10,"update_buffer","","Update a vertex/index/uniform buffer",60,null],[10,"update_texture","","Update a texture",60,null],[10,"generate_mipmap","","",60,null],[10,"clear_color","","Clear color target",60,null],[10,"clear_depth_stencil","","",60,null],[10,"call_draw","","Draw a primitive",60,null],[10,"call_draw_indexed","","Draw a primitive with index buffer",60,null],[6,"InstanceParams","","Optional instance parameters: (instance count, buffer offset)",null,null],[3,"ProgramInfo","","Metadata about a program.",null,null],[12,"vertex_attributes","","Attributes in the program",61,null],[12,"globals","","Global constants in the program",61,null],[12,"constant_buffers","","Constant buffers in the program",61,null],[12,"textures","","Textures in the program",61,null],[12,"unordereds","","Unordered access resources in the program",61,null],[12,"samplers","","Samplers in the program",61,null],[12,"outputs","","Output targets in the program",61,null],[12,"output_depth","","A flag indicating that the pixel shader manually assigns the depth.",61,null],[12,"knows_outputs","","A hacky flag to make sure the clients know we are unable to actually get the output variable info",61,null],[4,"UniformValue","","A value that can be uploaded to the device as a uniform.",null,null],[13,"I32","","",62,null],[13,"F32","","",62,null],[13,"I32Vector2","","",62,null],[13,"I32Vector3","","",62,null],[13,"I32Vector4","","",62,null],[13,"F32Vector2","","",62,null],[13,"F32Vector3","","",62,null],[13,"F32Vector4","","",62,null],[13,"F32Matrix2","","",62,null],[13,"F32Matrix3","","",62,null],[13,"F32Matrix4","","",62,null],[3,"Encoder","","Graphics Command Encoder",null,null],[3,"Slice","","A `Slice` dictates in which and in what order vertices get processed. It is required for processing a PSO.",null,null],[12,"start","","The start index of the index-buffer. Processing will start at this location in the index-buffer.",63,null],[12,"end","","The end index in the index-buffer. Processing will stop at this location (exclusive) in the index buffer.",63,null],[12,"base_vertex","","This is the index of the first vertex in the `VertexBuffer`. This value will be added to every index in the index-buffer, effectively moving the start of the `VertexBuffer` to this base-vertex.",63,null],[12,"instances","","Instancing configuration.",63,null],[12,"buffer","","Represents the type of index-buffer used.",63,null],[4,"CopyError","","An error occuring in memory copies.",null,null],[13,"OutOfSrcBounds","","",64,null],[12,"size","gfx::CopyError","",64,null],[12,"copy_end","","",64,null],[13,"OutOfDstBounds","gfx","",64,null],[12,"size","gfx::CopyError","",64,null],[12,"copy_end","","",64,null],[13,"Overlap","gfx","",64,null],[12,"src_offset","gfx::CopyError","",64,null],[12,"dst_offset","","",64,null],[12,"size","","",64,null],[13,"NoSrcBindFlag","gfx","",64,null],[13,"NoDstBindFlag","","",64,null],[4,"UpdateError","","An error occuring in buffer/texture updates.",null,null],[13,"OutOfBounds","","",65,null],[12,"target","gfx::UpdateError","",65,null],[12,"source","","",65,null],[13,"UnitCountMismatch","gfx","",65,null],[12,"target","gfx::UpdateError","",65,null],[12,"slice","","",65,null],[13,"InvalidUsage","gfx","",65,null],[4,"PipelineStateError","","Error creating a PipelineState",null,null],[13,"Program","","Shader program failed to link.",66,null],[13,"DescriptorInit","","Unable to create PSO descriptor due to mismatched formats.",66,null],[13,"DeviceCreate","","Device failed to create the handle give the descriptor.",66,null],[4,"IndexBuffer","","Type of index-buffer used in a Slice.",null,null],[13,"Auto","","Represents a hypothetical index-buffer from 0 to infinity. In other words, all vertices get processed in order.",67,null],[13,"Index16","","An index-buffer with unsigned 16 bit indices.",67,null],[13,"Index32","","An index-buffer with unsigned 32 bit indices.",67,null],[0,"traits","","public re-exported traits",null,null],[8,"Device","gfx::traits","A `Device` is responsible for submitting `CommandBuffer`s to the GPU.",null,null],[16,"Resources","","Associated `Resources` type.",17,null],[16,"CommandBuffer","","Associated `CommandBuffer` type. Every `Device` type can only work with one `CommandBuffer` type.",17,null],[10,"get_capabilities","","Returns the capabilities of this `Device`.",17,{"i":[{"n":"self"}],"o":{"n":"capabilities"}}],[10,"pin_submitted_resources","","Pin everything from this handle manager to live for a frame.",17,null],[10,"submit","","Submits a `CommandBuffer` to the GPU for execution.",17,null],[10,"fenced_submit","","Submits a `CommandBuffer` to the GPU for execution. returns a fence that is signaled after the GPU has executed all commands",17,null],[10,"wait_fence","","Stalls the current thread until the fence is satisfied",17,null],[10,"cleanup","","Cleanup unused resources. This should be called between frames.",17,null],[8,"Factory","","Overview",null,null],[10,"get_capabilities","","Returns the capabilities of this `Factory`. This usually depends on the graphics API being used.",56,{"i":[{"n":"self"}],"o":{"n":"capabilities"}}],[10,"create_buffer_raw","","",56,{"i":[{"n":"self"},{"n":"info"}],"o":{"g":["rawbuffer","creationerror"],"n":"result"}}],[10,"create_buffer_immutable_raw","","",56,null],[11,"create_buffer_immutable","","",56,null],[11,"create_buffer","","",56,{"i":[{"n":"self"},{"n":"usize"},{"n":"role"},{"n":"usage"},{"n":"bind"}],"o":{"g":["buffer","creationerror"],"n":"result"}}],[10,"create_pipeline_state_raw","","Creates a new `RawPipelineState`. To create a safely typed `PipelineState`, see the `FactoryExt` trait and `pso` module, both in the `gfx` crate.",56,{"i":[{"n":"self"},{"n":"program"},{"n":"descriptor"}],"o":{"g":["rawpipelinestate","creationerror"],"n":"result"}}],[10,"create_program","","Creates a new shader `Program` for the supplied `ShaderSet`.",56,{"i":[{"n":"self"},{"n":"shaderset"}],"o":{"g":["program","createprogramerror"],"n":"result"}}],[10,"create_shader","","Compiles a shader source into a `Shader` object that can be used to create a shader `Program`.",56,null],[11,"create_shader_vertex","","Compiles a `VertexShader` from source.",56,null],[11,"create_shader_hull","","Compiles a `HullShader` from source.",56,null],[11,"create_shader_domain","","Compiles a `VertexShader` from source.",56,null],[11,"create_shader_geometry","","Compiles a `GeometryShader` from source.",56,null],[11,"create_shader_pixel","","Compiles a `PixelShader` from source. This is the same as what some APIs call a fragment shader.",56,null],[10,"create_sampler","","",56,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"sampler"}}],[10,"read_mapping","","Acquire a mapping Reader",56,{"i":[{"n":"self"},{"n":"buffer"}],"o":{"g":["reader","error"],"n":"result"}}],[10,"write_mapping","","Acquire a mapping Writer",56,{"i":[{"n":"self"},{"n":"buffer"}],"o":{"g":["writer","error"],"n":"result"}}],[10,"create_texture_raw","","Create a new empty raw texture with no data. The channel type parameter is a hint, required to assist backends that have no concept of typeless formats (OpenGL). The initial data, if given, has to be provided for all mip levels and slices: Slice0.Mip0, Slice0.Mip1, ..., Slice1.Mip0, ...",56,{"i":[{"n":"self"},{"n":"info"},{"g":["channeltype"],"n":"option"},{"n":"option"}],"o":{"g":["rawtexture","creationerror"],"n":"result"}}],[10,"view_buffer_as_shader_resource_raw","","",56,{"i":[{"n":"self"},{"n":"rawbuffer"},{"n":"format"}],"o":{"g":["rawshaderresourceview","resourceviewerror"],"n":"result"}}],[10,"view_buffer_as_unordered_access_raw","","",56,{"i":[{"n":"self"},{"n":"rawbuffer"}],"o":{"g":["rawunorderedaccessview","resourceviewerror"],"n":"result"}}],[10,"view_texture_as_shader_resource_raw","","",56,{"i":[{"n":"self"},{"n":"rawtexture"},{"n":"resourcedesc"}],"o":{"g":["rawshaderresourceview","resourceviewerror"],"n":"result"}}],[10,"view_texture_as_unordered_access_raw","","",56,{"i":[{"n":"self"},{"n":"rawtexture"}],"o":{"g":["rawunorderedaccessview","resourceviewerror"],"n":"result"}}],[10,"view_texture_as_render_target_raw","","",56,{"i":[{"n":"self"},{"n":"rawtexture"},{"n":"renderdesc"}],"o":{"g":["rawrendertargetview","targetviewerror"],"n":"result"}}],[10,"view_texture_as_depth_stencil_raw","","",56,{"i":[{"n":"self"},{"n":"rawtexture"},{"n":"depthstencildesc"}],"o":{"g":["rawdepthstencilview","targetviewerror"],"n":"result"}}],[11,"create_texture","","",56,{"i":[{"n":"self"},{"n":"kind"},{"n":"u8"},{"n":"bind"},{"n":"usage"},{"g":["channeltype"],"n":"option"}],"o":{"g":["texture","creationerror"],"n":"result"}}],[11,"view_buffer_as_shader_resource","","",56,{"i":[{"n":"self"},{"n":"buffer"}],"o":{"g":["shaderresourceview","resourceviewerror"],"n":"result"}}],[11,"view_buffer_as_unordered_access","","",56,{"i":[{"n":"self"},{"n":"buffer"}],"o":{"g":["unorderedaccessview","resourceviewerror"],"n":"result"}}],[11,"view_texture_as_shader_resource","","",56,null],[11,"view_texture_as_unordered_access","","",56,{"i":[{"n":"self"},{"n":"texture"}],"o":{"g":["unorderedaccessview","resourceviewerror"],"n":"result"}}],[11,"view_texture_as_render_target","","",56,{"i":[{"n":"self"},{"n":"texture"},{"n":"u8"},{"g":["u16"],"n":"option"}],"o":{"g":["rendertargetview","targetviewerror"],"n":"result"}}],[11,"view_texture_as_depth_stencil","","",56,{"i":[{"n":"self"},{"n":"texture"},{"n":"u8"},{"g":["u16"],"n":"option"},{"n":"depthstencilflags"}],"o":{"g":["depthstencilview","targetviewerror"],"n":"result"}}],[11,"view_texture_as_depth_stencil_trivial","","",56,{"i":[{"n":"self"},{"n":"texture"}],"o":{"g":["depthstencilview","targetviewerror"],"n":"result"}}],[11,"create_texture_immutable_u8","","",56,null],[11,"create_texture_immutable","","",56,null],[11,"create_render_target","","",56,{"i":[{"n":"self"},{"n":"u16"},{"n":"u16"}],"o":{"g":["combinederror"],"n":"result"}}],[11,"create_depth_stencil","","",56,{"i":[{"n":"self"},{"n":"u16"},{"n":"u16"}],"o":{"g":["combinederror"],"n":"result"}}],[11,"create_depth_stencil_view_only","","",56,{"i":[{"n":"self"},{"n":"u16"},{"n":"u16"}],"o":{"g":["depthstencilview","combinederror"],"n":"result"}}],[8,"Pod","","A trait for plain-old-data types.",null,null],[8,"FactoryExt","","This trait is responsible for creating and managing graphics resources, much like the `Factory` trait in the `gfx` crate. Every `Factory` automatically implements `FactoryExt`.",null,null],[11,"create_vertex_buffer","","Creates an immutable vertex buffer from the supplied vertices. A `Slice` will have to manually be constructed.",68,null],[11,"create_index_buffer","","Creates an immutable index buffer from the supplied vertices.",68,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"indexbuffer"}}],[11,"create_vertex_buffer_with_slice","","Creates an immutable vertex buffer from the supplied vertices, together with a `Slice` from the supplied indices.",68,null],[11,"create_constant_buffer","","Creates a constant buffer for `num` identical elements of type `T`.",68,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"buffer"}}],[11,"create_upload_buffer","","Creates an upload buffer for `num` elements of type `T`.",68,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["buffer","creationerror"],"n":"result"}}],[11,"create_download_buffer","","Creates a download buffer for `num` elements of type `T`.",68,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["buffer","creationerror"],"n":"result"}}],[11,"create_shader_set","","Creates a `ShaderSet` from the supplied vertex and pixel shader source code.",68,null],[11,"create_shader_set_geometry","","Creates a `ShaderSet` from the supplied vertex, geometry, and pixel shader source code. Mainly used for testing.",68,null],[11,"create_shader_set_tessellation","","Creates a `ShaderSet` from the supplied vertex, hull, domain, and pixel shader source code. Mainly used for testing.",68,null],[11,"link_program","","Creates a basic shader `Program` from the supplied vertex and pixel shader source code.",68,null],[11,"create_pipeline_state","","Similar to `create_pipeline_from_program(..)`, but takes a `ShaderSet` as opposed to a shader `Program`.",68,{"i":[{"n":"self"},{"n":"shaderset"},{"n":"primitive"},{"n":"rasterizer"},{"n":"i"}],"o":{"g":["pipelinestate","pipelinestateerror"],"n":"result"}}],[11,"create_pipeline_from_program","","Creates a strongly typed `PipelineState` from its `Init` structure, a shader `Program`, a primitive type and a `Rasterizer`.",68,{"i":[{"n":"self"},{"n":"program"},{"n":"primitive"},{"n":"rasterizer"},{"n":"i"}],"o":{"g":["pipelinestate","pipelinestateerror"],"n":"result"}}],[11,"create_pipeline_simple","","Creates a strongly typed `PipelineState` from its `Init` structure. Automatically creates a shader `Program` from a vertex and pixel shader source, as well as a `Rasterizer` capable of rendering triangle faces without culling.",68,null],[11,"create_sampler_linear","","Create a linear sampler with clamping to border.",68,{"i":[{"n":"self"}],"o":{"n":"sampler"}}],[11,"clone","gfx","",64,{"i":[{"n":"self"}],"o":{"n":"copyerror"}}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",64,{"i":[{"n":"self"},{"n":"copyerror"}],"o":{"n":"bool"}}],[11,"ne","","",64,{"i":[{"n":"self"},{"n":"copyerror"}],"o":{"n":"bool"}}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",64,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"updateerror"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",65,{"i":[{"n":"self"},{"n":"updateerror"}],"o":{"n":"bool"}}],[11,"ne","","",65,{"i":[{"n":"self"},{"n":"updateerror"}],"o":{"n":"bool"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",65,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",69,{"i":[{"n":"c"}],"o":{"n":"encoder"}}],[11,"flush","","Submits the commands in this `Encoder`'s internal `CommandBuffer` to the GPU, so they can be executed.",69,{"i":[{"n":"self"},{"n":"d"}]}],[11,"flush_no_reset","","Like `flush` but keeps the encoded commands.",69,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"submissionresult"}}],[11,"fenced_flush_no_reset","","Like `flush_no_reset` but places a fence.",69,{"i":[{"n":"self"},{"n":"d"},{"g":["fence"],"n":"option"}],"o":{"g":["fence"],"n":"submissionresult"}}],[11,"reset","","Resets the encoded commands.",69,{"i":[{"n":"self"}]}],[11,"copy_buffer","","Copy part of a buffer to another",69,{"i":[{"n":"self"},{"n":"buffer"},{"n":"buffer"},{"n":"usize"},{"n":"usize"},{"n":"usize"}],"o":{"n":"copybufferresult"}}],[11,"copy_buffer_to_texture_raw","","Copy part of a buffer to a texture",69,{"i":[{"n":"self"},{"n":"rawbuffer"},{"n":"usize"},{"n":"rawtexture"},{"g":["cubeface"],"n":"option"},{"n":"rawimageinfo"}],"o":{"n":"copybuffertextureresult"}}],[11,"copy_texture_to_buffer_raw","","Copy part of a texture to a buffer",69,{"i":[{"n":"self"},{"n":"rawtexture"},{"g":["cubeface"],"n":"option"},{"n":"rawimageinfo"},{"n":"rawbuffer"},{"n":"usize"}],"o":{"n":"copytexturebufferresult"}}],[11,"copy_texture_to_texture_raw","","Copy part of a texture to another texture",69,{"i":[{"n":"self"},{"n":"rawtexture"},{"g":["cubeface"],"n":"option"},{"n":"rawimageinfo"},{"n":"rawtexture"},{"g":["cubeface"],"n":"option"},{"n":"rawimageinfo"}],"o":{"g":["copyerror"],"n":"result"}}],[11,"update_buffer","","Update a buffer with a slice of data.",69,null],[11,"update_constant_buffer","","Update a buffer with a single structure.",69,{"i":[{"n":"self"},{"n":"buffer"},{"n":"t"}]}],[11,"update_texture","","Update the contents of a texture.",69,null],[11,"clear","","Clears the supplied `RenderTargetView` to the supplied `ClearColor`.",69,null],[11,"clear_depth","","Clear a depth view with a specified value.",69,{"i":[{"n":"self"},{"n":"depthstencilview"},{"n":"depth"}]}],[11,"clear_stencil","","Clear a stencil view with a specified value.",69,{"i":[{"n":"self"},{"n":"depthstencilview"},{"n":"stencil"}]}],[11,"draw","","Draws a `slice::Slice` using a pipeline state object, and its matching `Data` structure.",69,{"i":[{"n":"self"},{"n":"slice"},{"n":"pipelinestate"},{"n":"d"}]}],[11,"generate_mipmap","","Generate a mipmap chain for the given resource view.",69,{"i":[{"n":"self"},{"n":"shaderresourceview"}]}],[11,"generate_mipmap_raw","","Untyped version of mipmap generation.",69,{"i":[{"n":"self"},{"n":"rawshaderresourceview"}]}],[11,"create_vertex_buffer","gfx::traits","Creates an immutable vertex buffer from the supplied vertices. A `Slice` will have to manually be constructed.",68,null],[11,"create_index_buffer","","Creates an immutable index buffer from the supplied vertices.",68,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"indexbuffer"}}],[11,"create_vertex_buffer_with_slice","","Creates an immutable vertex buffer from the supplied vertices, together with a `Slice` from the supplied indices.",68,null],[11,"create_constant_buffer","","Creates a constant buffer for `num` identical elements of type `T`.",68,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"buffer"}}],[11,"create_upload_buffer","","Creates an upload buffer for `num` elements of type `T`.",68,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["buffer","creationerror"],"n":"result"}}],[11,"create_download_buffer","","Creates a download buffer for `num` elements of type `T`.",68,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["buffer","creationerror"],"n":"result"}}],[11,"create_shader_set","","Creates a `ShaderSet` from the supplied vertex and pixel shader source code.",68,null],[11,"create_shader_set_geometry","","Creates a `ShaderSet` from the supplied vertex, geometry, and pixel shader source code. Mainly used for testing.",68,null],[11,"create_shader_set_tessellation","","Creates a `ShaderSet` from the supplied vertex, hull, domain, and pixel shader source code. Mainly used for testing.",68,null],[11,"link_program","","Creates a basic shader `Program` from the supplied vertex and pixel shader source code.",68,null],[11,"create_pipeline_state","","Similar to `create_pipeline_from_program(..)`, but takes a `ShaderSet` as opposed to a shader `Program`.",68,{"i":[{"n":"self"},{"n":"shaderset"},{"n":"primitive"},{"n":"rasterizer"},{"n":"i"}],"o":{"g":["pipelinestate","pipelinestateerror"],"n":"result"}}],[11,"create_pipeline_from_program","","Creates a strongly typed `PipelineState` from its `Init` structure, a shader `Program`, a primitive type and a `Rasterizer`.",68,{"i":[{"n":"self"},{"n":"program"},{"n":"primitive"},{"n":"rasterizer"},{"n":"i"}],"o":{"g":["pipelinestate","pipelinestateerror"],"n":"result"}}],[11,"create_pipeline_simple","","Creates a strongly typed `PipelineState` from its `Init` structure. Automatically creates a shader `Program` from a vertex and pixel shader source, as well as a `Rasterizer` capable of rendering triangle faces without culling.",68,null],[11,"create_sampler_linear","","Create a linear sampler with clamping to border.",68,{"i":[{"n":"self"}],"o":{"n":"sampler"}}],[11,"clone","gfx","",66,{"i":[{"n":"self"}],"o":{"n":"pipelinestateerror"}}],[11,"eq","","",66,{"i":[{"n":"self"},{"n":"pipelinestateerror"}],"o":{"n":"bool"}}],[11,"ne","","",66,{"i":[{"n":"self"},{"n":"pipelinestateerror"}],"o":{"n":"bool"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",66,{"i":[{"g":["str"],"n":"pipelinestateerror"}],"o":{"g":["string"],"n":"pipelinestateerror"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",66,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",66,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"from","","",66,{"i":[{"n":"programerror"}],"o":{"n":"self"}}],[11,"from","","",66,{"i":[{"n":"initerror"}],"o":{"n":"self"}}],[11,"from","","",66,{"i":[{"n":"creationerror"}],"o":{"n":"self"}}],[11,"clone","","",63,{"i":[{"n":"self"}],"o":{"n":"slice"}}],[11,"fmt","","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",63,null],[11,"eq","","",63,{"i":[{"n":"self"},{"n":"slice"}],"o":{"n":"bool"}}],[11,"ne","","",63,{"i":[{"n":"self"},{"n":"slice"}],"o":{"n":"bool"}}],[11,"new_match_vertex_buffer","","Creates a new `Slice` to match the supplied vertex buffer, from start to end, in order.",63,{"i":[{"n":"buffer"}],"o":{"n":"self"}}],[11,"get_prim_count","","Calculates the number of primitives of the specified type in this `Slice`.",63,{"i":[{"n":"self"},{"n":"primitive"}],"o":{"n":"u32"}}],[11,"split_at","","Divides one slice into two at an index.",63,null],[11,"clone","","",67,{"i":[{"n":"self"}],"o":{"n":"indexbuffer"}}],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",67,null],[11,"eq","","",67,{"i":[{"n":"self"},{"n":"indexbuffer"}],"o":{"n":"bool"}}],[11,"ne","","",67,{"i":[{"n":"self"},{"n":"indexbuffer"}],"o":{"n":"bool"}}],[11,"default","","",67,{"o":{"n":"self"}}],[11,"into_index_buffer","","",67,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"indexbuffer"}}],[11,"into_index_buffer","gfx::handle","",70,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"indexbuffer"}}],[11,"into_index_buffer","","",70,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"indexbuffer"}}],[0,"pso","gfx","A typed high-level graphics pipeline interface.",null,null],[3,"Descriptor","gfx::pso","All the information surrounding a shader program that is required for PSO creation, including the formats of vertex buffers and pixel targets;",null,null],[12,"primitive","","Type of the primitive",71,null],[12,"rasterizer","","Rasterizer setup",71,null],[12,"scissor","","Enable scissor test",71,null],[12,"vertex_buffers","","Vertex buffers",71,null],[12,"attributes","","Vertex attributes",71,null],[12,"constant_buffers","","Constant buffers",71,null],[12,"resource_views","","Shader resource views",71,null],[12,"unordered_views","","Unordered access views",71,null],[12,"samplers","","Samplers",71,null],[12,"color_targets","","Render target views (RTV)",71,null],[12,"depth_stencil","","Depth stencil view (DSV)",71,null],[3,"AccessInfo","","Informations about what is accessed by a bunch of commands.",null,null],[3,"RawDataSet","","A complete set of raw data that needs to be specified at run-time whenever we draw something with a PSO. This is what \"data\" struct gets transformed into when we call `encoder.draw(...)` with it. It doesn't have any typing information, since PSO knows what format and layout to expect from each resource.",null,null],[12,"vertex_buffers","","",72,null],[12,"constant_buffers","","",72,null],[12,"global_constants","","",72,null],[12,"resource_views","","",72,null],[12,"unordered_views","","",72,null],[12,"samplers","","",72,null],[12,"pixel_targets","","",72,null],[12,"ref_values","","",72,null],[12,"scissor","","",72,null],[3,"PipelineState","","A strongly typed Pipleline State Object. See the module documentation for more information.",null,null],[4,"ElementError","","Error matching an element inside the constant buffer.",null,null],[13,"NotFound","","Element not found.",73,null],[13,"Offset","","Element offset mismatch.",73,null],[12,"name","gfx::pso::ElementError","Element name.",73,null],[12,"shader_offset","","Element byte offset in the shader-side constant buffer.",73,null],[12,"code_offset","","Element byte offset in the code-side constant buffer.",73,null],[13,"Format","gfx::pso","Element format mismatch.",73,null],[12,"name","gfx::pso::ElementError","Element name.",73,null],[12,"shader_format","","Element format in the shader-side constant buffer.",73,null],[12,"code_format","","Element format in the code-side constant buffer.",73,null],[4,"InitError","gfx::pso","Failure to initilize the link between the shader and the data.",null,null],[13,"VertexImport","","Vertex attribute mismatch.",74,null],[13,"ConstantBuffer","","Constant buffer mismatch.",74,null],[13,"GlobalConstant","","Global constant mismatch.",74,null],[13,"ResourceView","","Shader resource view mismatch.",74,null],[13,"UnorderedView","","Unordered access view mismatch.",74,null],[13,"Sampler","","Sampler mismatch.",74,null],[13,"PixelExport","","Pixel target mismatch.",74,null],[0,"buffer","","Buffer components for a PSO.",null,null],[6,"BufferIndex","gfx::pso::buffer","Index of a vertex buffer.",null,null],[3,"Element","","A struct element descriptor.",null,null],[12,"format","","Element format",75,null],[12,"offset","","Offset from the beginning of the container, in bytes",75,null],[6,"ElemOffset","","Offset of an attribute from the start of the buffer, in bytes",null,null],[6,"ElemStride","","Offset between attribute values, in bytes",null,null],[6,"InstanceRate","","The number of instances between each subsequent attribute value",null,null],[3,"VertexBufferCommon","","Service struct to simplify the implementations of `VertexBuffer` and `InstanceBuffer`.",null,null],[3,"RawVertexBuffer","","Raw vertex/instance buffer component. Can be used when the formats of vertex attributes are not known at compile time.",null,null],[3,"ConstantBuffer","","Constant buffer component.",null,null],[3,"RawConstantBuffer","","Raw constant buffer component.",null,null],[3,"Global","","Global (uniform) constant component. Describes a free-standing value passed into the shader, which is not enclosed into any constant buffer.",null,null],[3,"RawGlobal","","Raw global (uniform) constant component. Describes a free-standing value passed into the shader, which is not enclosed in any constant buffer.",null,null],[4,"NonInstanced","","Helper phantom type for per-vertex attributes.",null,null],[4,"Instanced","","Helper phantom type for per-instance attributes.",null,null],[6,"VertexBuffer","","Vertex buffer component. Advanced per vertex.",null,null],[6,"InstanceBuffer","","Instance buffer component. Same as the vertex buffer but advances per instance.",null,null],[8,"Structure","","A trait to be implemented by any struct having the layout described in the graphics API, like a vertex buffer.",null,null],[10,"query","","Get the layout of an element by name.",76,{"i":[{"n":"str"}],"o":{"g":["element"],"n":"option"}}],[8,"ToInstanceRate","","Helper trait for `VertexBufferCommon` to support variable instance rate.",null,null],[16,"Init","","The associated init type for PSO component.",77,null],[10,"get_rate","","Get an actual instance rate value from the init.",77,null],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",78,{"i":[{"n":"self"},{"n":"__hti"}]}],[11,"eq","","",78,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"get_rate","","",79,null],[11,"get_rate","","",80,null],[11,"get_rate","","",81,null],[11,"clone","","",82,{"i":[{"n":"self"}],"o":{"n":"rawvertexbuffer"}}],[11,"fmt","","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",82,null],[11,"eq","","",82,{"i":[{"n":"self"},{"n":"rawvertexbuffer"}],"o":{"n":"bool"}}],[11,"ne","","",82,{"i":[{"n":"self"},{"n":"rawvertexbuffer"}],"o":{"n":"bool"}}],[11,"clone","","",83,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",83,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",83,{"i":[{"n":"self"},{"n":"__ht"}]}],[11,"eq","","",83,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",84,{"i":[{"n":"self"}],"o":{"n":"rawconstantbuffer"}}],[11,"fmt","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",84,null],[11,"eq","","",84,{"i":[{"n":"self"},{"n":"rawconstantbuffer"}],"o":{"n":"bool"}}],[11,"ne","","",84,{"i":[{"n":"self"},{"n":"rawconstantbuffer"}],"o":{"n":"bool"}}],[11,"clone","","",85,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",85,{"i":[{"n":"self"},{"n":"__ht"}]}],[11,"eq","","",85,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",86,{"i":[{"n":"self"}],"o":{"n":"rawglobal"}}],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",86,null],[11,"eq","","",86,{"i":[{"n":"self"},{"n":"rawglobal"}],"o":{"n":"bool"}}],[11,"ne","","",86,{"i":[{"n":"self"},{"n":"rawglobal"}],"o":{"n":"bool"}}],[11,"new","","",78,{"o":{"n":"self"}}],[11,"is_active","","",78,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_vertex_buffer","","",78,null],[11,"link_input","","",78,null],[11,"bind_to","","",78,null],[11,"new","","",82,{"o":{"n":"self"}}],[11,"is_active","","",82,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_vertex_buffer","","",82,null],[11,"link_input","","",82,null],[11,"bind_to","","",82,null],[11,"new","","",83,{"o":{"n":"self"}}],[11,"is_active","","",83,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_constant_buffer","","",83,null],[11,"bind_to","","",83,null],[11,"new","","",84,{"o":{"n":"self"}}],[11,"is_active","","",84,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_constant_buffer","","",84,null],[11,"bind_to","","",84,null],[11,"new","","",85,{"o":{"n":"self"}}],[11,"is_active","","",85,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_global_constant","","",85,null],[11,"bind_to","","",85,null],[11,"new","","",86,{"o":{"n":"self"}}],[11,"is_active","","",86,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_global_constant","","",86,null],[11,"bind_to","","",86,null],[0,"resource","gfx::pso","Resource components for a PSO.",null,null],[3,"ShaderResource","gfx::pso::resource","Shader resource component (SRV). Typically is a view into some texture, but can also be a buffer.",null,null],[3,"RawShaderResource","","Raw (untyped) shader resource (SRV).",null,null],[3,"UnorderedAccess","","Unordered access component (UAV). A writable resource (texture/buffer) with no defined access order across simultaneously executing shaders. Supported on DX10 and higher.",null,null],[3,"Sampler","","Sampler component.",null,null],[3,"TextureSampler","","A convenience type for a texture paired with a sampler. It only makes sense for DX9 class hardware, where every texture by default is bundled with a sampler, hence they are represented by the same name. In DX10 and higher samplers are totally separated from the textures.",null,null],[11,"clone","","",87,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",87,{"i":[{"n":"self"},{"n":"__ht"}]}],[11,"eq","","",87,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",88,{"i":[{"n":"self"}],"o":{"n":"rawshaderresource"}}],[11,"fmt","","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",88,null],[11,"eq","","",88,{"i":[{"n":"self"},{"n":"rawshaderresource"}],"o":{"n":"bool"}}],[11,"ne","","",88,{"i":[{"n":"self"},{"n":"rawshaderresource"}],"o":{"n":"bool"}}],[11,"clone","","",89,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",89,{"i":[{"n":"self"},{"n":"__ht"}]}],[11,"eq","","",89,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",90,{"i":[{"n":"self"}],"o":{"n":"sampler"}}],[11,"fmt","","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",90,null],[11,"eq","","",90,{"i":[{"n":"self"},{"n":"sampler"}],"o":{"n":"bool"}}],[11,"ne","","",90,{"i":[{"n":"self"},{"n":"sampler"}],"o":{"n":"bool"}}],[11,"clone","","",91,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",91,{"i":[{"n":"self"},{"n":"__ht"}]}],[11,"eq","","",91,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"new","","",87,{"o":{"n":"self"}}],[11,"is_active","","",87,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_resource_view","","",87,null],[11,"bind_to","","",87,null],[11,"new","","",88,{"o":{"n":"self"}}],[11,"is_active","","",88,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_resource_view","","",88,null],[11,"bind_to","","",88,null],[11,"new","","",89,{"o":{"n":"self"}}],[11,"is_active","","",89,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_unordered_view","","",89,null],[11,"bind_to","","",89,null],[11,"new","","",90,{"o":{"n":"self"}}],[11,"is_active","","",90,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_sampler","","",90,null],[11,"bind_to","","",90,null],[11,"new","","",91,{"o":{"n":"self"}}],[11,"is_active","","",91,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_resource_view","","",91,null],[11,"link_sampler","","",91,null],[11,"bind_to","","",91,null],[0,"target","gfx::pso","Render target components for a PSO.",null,null],[3,"RenderTarget","gfx::pso::target","Render target component. Typically points to a color-formatted texture.",null,null],[3,"BlendTarget","","Render target component with active blending mode.",null,null],[3,"RawRenderTarget","","Raw (untyped) render target component with optional blending.",null,null],[3,"DepthTarget","","Depth target component.",null,null],[3,"StencilTarget","","Stencil target component.",null,null],[3,"DepthStencilTarget","","Depth + stencil target component.",null,null],[3,"Scissor","","Scissor component. Sets up the scissor test for rendering.",null,null],[3,"BlendRef","","Blend reference component. Sets up the reference color for blending.",null,null],[11,"clone","","",92,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",92,{"i":[{"n":"self"},{"n":"__ht"}]}],[11,"eq","","",92,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",93,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",93,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",93,{"i":[{"n":"self"},{"n":"__ht"}]}],[11,"eq","","",93,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",94,{"i":[{"n":"self"}],"o":{"n":"rawrendertarget"}}],[11,"fmt","","",94,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",94,null],[11,"eq","","",94,{"i":[{"n":"self"},{"n":"rawrendertarget"}],"o":{"n":"bool"}}],[11,"ne","","",94,{"i":[{"n":"self"},{"n":"rawrendertarget"}],"o":{"n":"bool"}}],[11,"clone","","",95,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",95,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",95,{"i":[{"n":"self"},{"n":"__ht"}]}],[11,"eq","","",95,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",96,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",96,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",96,{"i":[{"n":"self"},{"n":"__ht"}]}],[11,"eq","","",96,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",97,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",97,{"i":[{"n":"self"},{"n":"__ht"}]}],[11,"eq","","",97,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",98,{"i":[{"n":"self"}],"o":{"n":"scissor"}}],[11,"fmt","","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",98,null],[11,"eq","","",98,{"i":[{"n":"self"},{"n":"scissor"}],"o":{"n":"bool"}}],[11,"ne","","",98,{"i":[{"n":"self"},{"n":"scissor"}],"o":{"n":"bool"}}],[11,"clone","","",99,{"i":[{"n":"self"}],"o":{"n":"blendref"}}],[11,"fmt","","",99,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",99,null],[11,"eq","","",99,{"i":[{"n":"self"},{"n":"blendref"}],"o":{"n":"bool"}}],[11,"new","","",92,{"o":{"n":"self"}}],[11,"is_active","","",92,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_output","","",92,null],[11,"bind_to","","",92,null],[11,"new","","",93,{"o":{"n":"self"}}],[11,"is_active","","",93,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_output","","",93,null],[11,"bind_to","","",93,null],[11,"new","","",94,{"o":{"n":"self"}}],[11,"is_active","","",94,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_output","","",94,null],[11,"bind_to","","",94,null],[11,"new","","",95,{"o":{"n":"self"}}],[11,"is_active","","",95,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_depth_stencil","","",95,null],[11,"bind_to","","",95,null],[11,"new","","",96,{"o":{"n":"self"}}],[11,"is_active","","",96,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_depth_stencil","","",96,null],[11,"bind_to","","",96,null],[11,"new","","",97,{"o":{"n":"self"}}],[11,"is_active","","",97,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_depth_stencil","","",97,null],[11,"bind_to","","",97,null],[11,"new","","",98,{"o":{"n":"self"}}],[11,"is_active","","",98,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_scissor","","",98,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"bind_to","","",98,null],[11,"new","","",99,{"o":{"n":"self"}}],[11,"is_active","","",99,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"bind_to","","",99,null],[0,"bundle","gfx::pso","Combine slice data with pipeline state.",null,null],[3,"Bundle","gfx::pso::bundle","Slice-PSO bundle.",null,null],[12,"slice","","Slice",100,null],[12,"pso","","Pipeline state",100,null],[12,"data","","Pipeline data",100,null],[11,"new","","Create new Bundle",100,{"i":[{"n":"slice"},{"n":"pipelinestate"},{"n":"data"}],"o":{"n":"self"}}],[11,"encode","","Draw bundle using encoder.",100,{"i":[{"n":"self"},{"n":"encoder"}]}],[8,"PipelineInit","gfx::pso","A service trait implemented by the \"init\" structure of PSO.",null,null],[16,"Meta","","The associated \"meta\" struct.",101,null],[10,"link_to","","Attempt to map a PSO descriptor to a give shader program, represented by `ProgramInfo`. Returns an instance of the \"meta\" struct upon successful mapping.",101,{"i":[{"n":"self"},{"n":"descriptor"},{"n":"programinfo"}],"o":{"g":["initerror"],"n":"result"}}],[8,"PipelineData","","a service trait implemented the \"data\" structure of PSO.",null,null],[16,"Meta","","The associated \"meta\" struct.",102,null],[10,"bake_to","","Dump all the contained data into the raw data set, given the mapping (\"meta\"), and a handle manager.",102,null],[8,"DataLink","","The \"link\" logic portion of a PSO component. Defines the input data for the component.",null,null],[16,"Init","","The assotiated \"init\" type - a member of the PSO \"init\" struct.",103,null],[10,"new","","Create a new empty data link.",103,{"o":{"n":"self"}}],[10,"is_active","","Check if this link is actually used by the shader.",103,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_vertex_buffer","","Attempt to link with a vertex buffer containing multiple attributes.",103,null],[11,"link_input","","Attempt to link with a vertex attribute.",103,null],[11,"link_constant_buffer","","Attempt to link with a constant buffer.",103,null],[11,"link_global_constant","","Attempt to link with a global constant.",103,null],[11,"link_output","","Attempt to link with an output render target (RTV).",103,null],[11,"link_depth_stencil","","Attempt to link with a depth-stencil target (DSV).",103,null],[11,"link_resource_view","","Attempt to link with a shader resource (SRV).",103,null],[11,"link_unordered_view","","Attempt to link with an unordered access (UAV).",103,null],[11,"link_sampler","","Attempt to link with a sampler.",103,null],[11,"link_scissor","","Attempt to enable scissor test.",103,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"DataBind","","The \"bind\" logic portion of the PSO component. Defines how the user data translates into the raw data set.",null,null],[16,"Data","","The associated \"data\" type - a member of the PSO \"data\" struct.",104,null],[10,"bind_to","","Dump the given data into the raw data set.",104,null],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"rawdataset"}}],[11,"fmt","","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",72,{"i":[{"n":"self"},{"n":"rawdataset"}],"o":{"n":"bool"}}],[11,"ne","","",72,{"i":[{"n":"self"},{"n":"rawdataset"}],"o":{"n":"bool"}}],[11,"new","","Create an empty data set.",72,{"o":{"n":"rawdataset"}}],[11,"clear","","Clear all contained data.",72,{"i":[{"n":"self"}]}],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"elementerror"}}],[11,"fmt","","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",73,{"i":[{"n":"self"},{"n":"elementerror"}],"o":{"n":"bool"}}],[11,"ne","","",73,{"i":[{"n":"self"},{"n":"elementerror"}],"o":{"n":"bool"}}],[11,"fmt","","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",73,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from","","",73,{"i":[{"g":["str"],"n":"elementerror"}],"o":{"g":["string"],"n":"elementerror"}}],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"initerror"}}],[11,"fmt","","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",74,{"i":[{"n":"self"},{"n":"initerror"}],"o":{"n":"bool"}}],[11,"ne","","",74,{"i":[{"n":"self"},{"n":"initerror"}],"o":{"n":"bool"}}],[11,"from","","",74,{"i":[{"g":["str"],"n":"initerror"}],"o":{"g":["string"],"n":"initerror"}}],[11,"fmt","","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",74,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",74,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"clone","","",105,{"i":[{"n":"self"}],"o":{"n":"pipelinestate"}}],[11,"fmt","","",105,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",105,null],[11,"eq","","",105,{"i":[{"n":"self"},{"n":"pipelinestate"}],"o":{"n":"bool"}}],[11,"ne","","",105,{"i":[{"n":"self"},{"n":"pipelinestate"}],"o":{"n":"bool"}}],[11,"new","","Create a new PSO from a raw handle and the \"meta\" instance.",105,{"i":[{"n":"rawpipelinestate"},{"n":"primitive"},{"n":"m"}],"o":{"n":"pipelinestate"}}],[11,"get_handle","","Get a raw handle reference.",105,{"i":[{"n":"self"}],"o":{"n":"rawpipelinestate"}}],[11,"get_meta","","Get a \"meta\" struct reference. Can be used by the user to check what resources are actually used and what not.",105,{"i":[{"n":"self"}],"o":{"n":"m"}}],[0,"shade","gfx","Shaders Shader parameter handling.",null,null],[0,"core","gfx::shade","Shader handling.",null,null],[6,"Dimension","gfx::shade::core","Number of components in a container type (vectors/matrices)",null,null],[4,"IsArray","","Whether the sampler samples an array texture.",null,null],[13,"Array","","",106,null],[13,"NoArray","","",106,null],[4,"IsComparison","","Whether the sampler compares the depth value upon sampling.",null,null],[13,"Compare","","",107,null],[13,"NoCompare","","",107,null],[4,"IsMultiSample","","Whether the sampler samples a multisample texture.",null,null],[13,"MultiSample","","",108,null],[13,"NoMultiSample","","",108,null],[4,"IsRect","","Whether the sampler samples a rectangle texture.",null,null],[13,"Rect","","",109,null],[13,"NoRect","","",109,null],[4,"MatrixFormat","","Whether the matrix is column or row major.",null,null],[13,"ColumnMajor","","",110,null],[13,"RowMajor","","",110,null],[4,"TextureType","","A type of the texture variable. This has to match the actual data we bind to the shader.",null,null],[13,"Buffer","","Sample from a buffer.",111,null],[13,"D1","","Sample from a 1D texture",111,null],[13,"D2","","Sample from a 2D texture",111,null],[13,"D3","","Sample from a 3D texture",111,null],[13,"Cube","","Sample from a cubemap.",111,null],[3,"SamplerType","","A type of the sampler variable.",null,null],[12,"0","","",112,null],[12,"1","","",112,null],[4,"BaseType","","Base type of this shader parameter.",null,null],[13,"I32","","",113,null],[13,"U32","","",113,null],[13,"F32","","",113,null],[13,"F64","","",113,null],[13,"Bool","","",113,null],[4,"ContainerType","","Number of components this parameter represents.",null,null],[13,"Single","","Scalar value",114,null],[13,"Vector","","A vector with `Dimension` components.",114,null],[13,"Matrix","","A matrix.",114,null],[4,"Stage","","Which program stage this shader represents.",null,null],[13,"Vertex","","",115,null],[13,"Hull","","",115,null],[13,"Domain","","",115,null],[13,"Geometry","","",115,null],[13,"Pixel","","",115,null],[17,"STAGES","","A constant static array of all shader stages.",null,null],[6,"Location","","Location of a parameter in the program.",null,null],[4,"UniformValue","","A value that can be uploaded to the device as a uniform.",null,null],[13,"I32","","",62,null],[13,"F32","","",62,null],[13,"I32Vector2","","",62,null],[13,"I32Vector3","","",62,null],[13,"I32Vector4","","",62,null],[13,"F32Vector2","","",62,null],[13,"F32Vector3","","",62,null],[13,"F32Vector4","","",62,null],[13,"F32Matrix2","","",62,null],[13,"F32Matrix3","","",62,null],[13,"F32Matrix4","","",62,null],[6,"ConstFormat","","Format of a shader constant.",null,null],[8,"BaseTyped","","A trait that statically links simple data types to base types of the shader constants.",null,null],[10,"get_base_type","","",116,{"o":{"n":"basetype"}}],[8,"Formatted","","A trait that statically links simple data types to constant formats.",null,null],[10,"get_format","","Get the associated constant format.",117,null],[3,"Usage","","Parameter usage flags.",null,null],[3,"AttributeVar","","Vertex information that a shader takes as input.",null,null],[12,"name","","Name of this attribute.",118,null],[12,"slot","","Slot of the vertex attribute.",118,null],[12,"base_type","","Type that this attribute is composed of.",118,null],[12,"container","","\"Scalarness\" of this attribute.",118,null],[3,"ConstVar","","A constant in the shader - a bit of data that doesn't vary",null,null],[12,"name","","Name of this constant.",119,null],[12,"location","","Location of this constant in the program. For constant buffer elements, it's the offset in bytes.",119,null],[12,"count","","Number of elements this constant represents.",119,null],[12,"base_type","","Type that this constant is composed of",119,null],[12,"container","","\"Scalarness\" of this constant.",119,null],[3,"ConstantBufferVar","","A constant buffer.",null,null],[12,"name","","Name of this constant buffer.",120,null],[12,"slot","","Slot of the constant buffer.",120,null],[12,"size","","Size (in bytes) of this buffer's data.",120,null],[12,"usage","","What program stage this buffer is used in.",120,null],[12,"elements","","List of individual elements in this buffer.",120,null],[3,"TextureVar","","Texture shader parameter.",null,null],[12,"name","","Name of this texture variable.",121,null],[12,"slot","","Slot of this texture variable.",121,null],[12,"base_type","","Base type for the texture.",121,null],[12,"ty","","Type of this texture.",121,null],[12,"usage","","What program stage this texture is used in.",121,null],[3,"UnorderedVar","","Unordered access shader parameter.",null,null],[12,"name","","Name of this unordered variable.",122,null],[12,"slot","","Slot of this unordered variable.",122,null],[12,"usage","","What program stage this UAV is used in.",122,null],[3,"SamplerVar","","Sampler shader parameter.",null,null],[12,"name","","Name of this sampler variable.",123,null],[12,"slot","","Slot of this sampler variable.",123,null],[12,"ty","","Type of this sampler.",123,null],[12,"usage","","What program stage this texture is used in.",123,null],[3,"OutputVar","","Target output variable.",null,null],[12,"name","","Name of this output variable.",124,null],[12,"slot","","Output color target index.",124,null],[12,"base_type","","Type of the output component.",124,null],[12,"container","","\"Scalarness\" of this output.",124,null],[3,"ProgramInfo","","Metadata about a program.",null,null],[12,"vertex_attributes","","Attributes in the program",61,null],[12,"globals","","Global constants in the program",61,null],[12,"constant_buffers","","Constant buffers in the program",61,null],[12,"textures","","Textures in the program",61,null],[12,"unordereds","","Unordered access resources in the program",61,null],[12,"samplers","","Samplers in the program",61,null],[12,"outputs","","Output targets in the program",61,null],[12,"output_depth","","A flag indicating that the pixel shader manually assigns the depth.",61,null],[12,"knows_outputs","","A hacky flag to make sure the clients know we are unable to actually get the output variable info",61,null],[3,"Program","","A program",null,null],[4,"CompatibilityError","","Error type for trying to store a UniformValue in a ConstVar.",null,null],[13,"ErrorArraySize","","Array sizes differ between the value and the var (trying to upload a vec2 as a vec4, etc)",125,null],[13,"ErrorBaseType","","Base types differ between the value and the var (trying to upload a f32 as a u16, etc)",125,null],[13,"ErrorContainer","","Container-ness differs between the value and the var (trying to upload a scalar as a vec4, etc)",125,null],[4,"CreateShaderError","","An error type for creating shaders.",null,null],[13,"ModelNotSupported","","The device does not support the requested shader model.",126,null],[13,"StageNotSupported","","The device does not support the shader stage.",126,null],[13,"CompilationFailed","","The shader failed to compile.",126,null],[3,"CreateProgramError","","An error type for creating programs.",null,null],[6,"ConstFormat","gfx::shade","Format of a shader constant.",null,null],[8,"Formatted","","A trait that statically links simple data types to constant formats.",null,null],[10,"get_format","","Get the associated constant format.",117,null],[3,"Usage","","Parameter usage flags.",null,null],[4,"ProgramError","","Program linking error",null,null],[13,"Vertex","","Unable to compile the vertex shader",127,null],[13,"Hull","","Unable to compile the hull shader",127,null],[13,"Domain","","Unable to compile the domain shader",127,null],[13,"Geometry","","Unable to compile the geometry shader",127,null],[13,"Pixel","","Unable to compile the pixel shader",127,null],[13,"Link","","Unable to link",127,null],[8,"ToUniform","","",null,null],[10,"convert","","",128,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"clone","","",127,{"i":[{"n":"self"}],"o":{"n":"programerror"}}],[11,"fmt","","",127,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",127,{"i":[{"n":"self"},{"n":"programerror"}],"o":{"n":"bool"}}],[11,"ne","","",127,{"i":[{"n":"self"},{"n":"programerror"}],"o":{"n":"bool"}}],[11,"fmt","","",127,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",127,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",127,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[0,"macros","gfx","Convenience macros Various helper macros.",null,null],[6,"CopyBufferResult","","Result type returned when copying a buffer into another buffer.",null,null],[6,"CopyBufferTextureResult","","Result type returned when copying buffer data into a texture.",null,null],[6,"CopyTextureBufferResult","","Result type returned when copying texture data into a buffer.",null,null],[8,"IntoIndexBuffer","","A helper trait to create `IndexBuffers` from different kinds of data.",null,null],[10,"into_index_buffer","","Turns self into an `IndexBuffer`.",129,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"indexbuffer"}}],[14,"gfx_pipeline_inner","","",null,null],[14,"gfx_pipeline_base","","",null,null],[14,"gfx_pipeline","","",null,null],[14,"gfx_impl_struct","","",null,null],[14,"gfx_impl_struct_meta","","",null,null],[14,"gfx_vertex_struct","","",null,null],[14,"gfx_vertex_struct_meta","","",null,null],[14,"gfx_constant_struct","","",null,null],[14,"gfx_constant_struct_meta","","",null,null],[14,"gfx_format","","",null,null],[14,"gfx_defines","","Defines vertex, constant and pipeline formats in one block.",null,null],[11,"fmt","gfx::state","",130,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"partial_cmp","","",10,{"i":[{"n":"self"},{"n":"equation"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"le","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"gt","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"ge","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",14,{"i":[{"n":"self"},{"n":"blend"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",14,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"le","","",14,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"gt","","",14,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"ge","","",14,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",3,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",3,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"le","","",3,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"gt","","",3,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"ge","","",3,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",11,{"i":[{"n":"self"},{"n":"blendvalue"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"le","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"gt","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"ge","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"le","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"gt","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"ge","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"le","","",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"gt","","",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"ge","","",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",6,{"i":[{"n":"self"},{"n":"stencilop"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",4,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"le","","",4,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"gt","","",4,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"ge","","",4,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",5,{"i":[{"n":"self"},{"n":"comparison"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"le","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"gt","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"ge","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"le","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"gt","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"ge","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"cullface"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"frontface"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",130,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",130,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"le","","",130,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"gt","","",130,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"ge","","",130,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"offset"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",1,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"le","","",1,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"gt","","",1,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"ge","","",1,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",131,{"i":[{"n":"self"},{"n":"multisample"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",16,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",16,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"le","","",16,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"gt","","",16,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"ge","","",16,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"from_iter","","",130,{"i":[{"n":"t"}],"o":{"n":"colormask"}}],[11,"fmt","","",130,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"bitor","","Returns the union of the two sets of flags.",130,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"colormask"}}],[11,"sub","","Returns the set difference of the two sets of flags.",130,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"colormask"}}],[11,"clone","","",130,{"i":[{"n":"self"}],"o":{"n":"colormask"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"factor"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"comparison"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"stencilop"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"stencil"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"blend"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"rasterizer"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"offset"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"equation"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"depth"}}],[11,"clone","","",131,{"i":[{"n":"self"}],"o":{"n":"multisample"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"blendvalue"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"cullface"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"color"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"frontface"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"blendchannel"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"refvalues"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"rastermethod"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"stencilside"}}],[11,"default","","",8,{"o":{"n":"stencil"}}],[11,"default","","",15,{"o":{"n":"color"}}],[11,"default","","",9,{"o":{"n":"depth"}}],[11,"default","","",13,{"o":{"n":"blendchannel"}}],[11,"default","","",7,{"o":{"n":"stencilside"}}],[11,"default","","",14,{"o":{"n":"blend"}}],[11,"default","","",16,{"o":{"n":"refvalues"}}],[11,"fmt","","",130,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"sub_assign","","Disables all flags enabled in the set.",130,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",130,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"colormask"}}],[11,"extend","","",130,null],[11,"cmp","","",5,{"i":[{"n":"self"},{"n":"comparison"}],"o":{"n":"ordering"}}],[11,"cmp","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"ordering"}}],[11,"cmp","","",11,{"i":[{"n":"self"},{"n":"blendvalue"}],"o":{"n":"ordering"}}],[11,"cmp","","",131,{"i":[{"n":"self"},{"n":"multisample"}],"o":{"n":"ordering"}}],[11,"cmp","","",2,{"i":[{"n":"self"},{"n":"cullface"}],"o":{"n":"ordering"}}],[11,"cmp","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"ordering"}}],[11,"cmp","","",130,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"ordering"}}],[11,"cmp","","",10,{"i":[{"n":"self"},{"n":"equation"}],"o":{"n":"ordering"}}],[11,"cmp","","",6,{"i":[{"n":"self"},{"n":"stencilop"}],"o":{"n":"ordering"}}],[11,"cmp","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"ordering"}}],[11,"cmp","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"ordering"}}],[11,"cmp","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"ordering"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"frontface"}],"o":{"n":"ordering"}}],[11,"hash","","",6,null],[11,"hash","","",10,null],[11,"hash","","",15,null],[11,"hash","","",2,null],[11,"hash","","",14,null],[11,"hash","","",4,null],[11,"hash","","",9,null],[11,"hash","","",13,null],[11,"hash","","",8,null],[11,"hash","","",7,null],[11,"hash","","",3,null],[11,"hash","","",131,null],[11,"hash","","",0,null],[11,"hash","","",1,null],[11,"hash","","",5,null],[11,"hash","","",130,null],[11,"hash","","",11,null],[11,"hash","","",12,null],[11,"bitand_assign","","Disables all flags disabled in the set.",130,null],[11,"eq","","",130,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"ne","","",130,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"blendvalue"}],"o":{"n":"bool"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"ne","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"cullface"}],"o":{"n":"bool"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"ne","","",16,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"comparison"}],"o":{"n":"bool"}}],[11,"eq","","",131,{"i":[{"n":"self"},{"n":"multisample"}],"o":{"n":"bool"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"ne","","",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"ne","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"equation"}],"o":{"n":"bool"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"stencilop"}],"o":{"n":"bool"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"ne","","",14,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"frontface"}],"o":{"n":"bool"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"bitxor_assign","","Toggles the set of flags.",130,null],[11,"not","","Returns the complement of this set of flags.",130,{"i":[{"n":"self"}],"o":{"n":"colormask"}}],[11,"bitor_assign","","Adds the set of flags.",130,null],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",131,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",130,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",130,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",130,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"colormask"}}],[11,"from_iter","gfx::memory","",132,{"i":[{"n":"t"}],"o":{"n":"access"}}],[11,"from_iter","gfx::texture","",133,{"i":[{"n":"t"}],"o":{"n":"depthstencilflags"}}],[11,"from_iter","gfx::memory","",134,{"i":[{"n":"t"}],"o":{"n":"bind"}}],[11,"from_iter","gfx::shade","",135,{"i":[{"n":"t"}],"o":{"n":"usage"}}],[11,"fmt","gfx::memory","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",134,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",133,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade","",135,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref_mut","gfx::mapping","",136,null],[11,"sub_assign","gfx::texture","Disables all flags enabled in the set.",133,null],[11,"sub_assign","gfx::memory","Disables all flags enabled in the set.",134,null],[11,"sub_assign","","Disables all flags enabled in the set.",132,null],[11,"sub_assign","gfx::shade","Disables all flags enabled in the set.",135,null],[11,"bitand_assign","","Disables all flags disabled in the set.",135,null],[11,"bitand_assign","gfx::texture","Disables all flags disabled in the set.",133,null],[11,"bitand_assign","gfx::memory","Disables all flags disabled in the set.",132,null],[11,"bitand_assign","","Disables all flags disabled in the set.",134,null],[11,"fmt","gfx::buffer","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",125,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",126,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::mapping","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",137,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"bitxor_assign","","Toggles the set of flags.",133,null],[11,"bitxor_assign","gfx::shade","Toggles the set of flags.",135,null],[11,"bitxor_assign","gfx::memory","Toggles the set of flags.",132,null],[11,"bitxor_assign","","Toggles the set of flags.",134,null],[11,"get_surface_type","gfx::format","",138,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",139,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",140,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",141,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",142,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",143,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",144,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",145,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",146,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",147,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",148,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",149,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",150,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",151,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",152,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",153,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",154,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",155,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",156,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",157,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",158,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",159,{"o":{"n":"surfacetype"}}],[11,"partial_cmp","","",140,{"i":[{"n":"self"},{"n":"r4_g4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx::texture","",43,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",43,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"n":"bool"}}],[11,"le","","",43,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"n":"bool"}}],[11,"gt","","",43,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"n":"bool"}}],[11,"ge","","",43,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",46,{"i":[{"n":"self"},{"n":"mipmap"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx::shade::core","",62,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",62,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"n":"bool"}}],[11,"le","","",62,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"n":"bool"}}],[11,"gt","","",62,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"n":"bool"}}],[11,"ge","","",62,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::format","",150,{"i":[{"n":"self"},{"n":"r32_g32_b32"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx::shade","",135,{"i":[{"n":"self"},{"n":"usage"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",135,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"le","","",135,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"gt","","",135,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"ge","","",135,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::texture","",160,{"i":[{"n":"self"},{"n":"lod"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",160,{"i":[{"n":"self"},{"n":"lod"}],"o":{"n":"bool"}}],[11,"le","","",160,{"i":[{"n":"self"},{"n":"lod"}],"o":{"n":"bool"}}],[11,"gt","","",160,{"i":[{"n":"self"},{"n":"lod"}],"o":{"n":"bool"}}],[11,"ge","","",160,{"i":[{"n":"self"},{"n":"lod"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::format","",34,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",34,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"n":"bool"}}],[11,"le","","",34,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"n":"bool"}}],[11,"gt","","",34,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"n":"bool"}}],[11,"ge","","",34,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",145,{"i":[{"n":"self"},{"n":"r16_g16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx::memory","",134,{"i":[{"n":"self"},{"n":"bind"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",134,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"le","","",134,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"gt","","",134,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"ge","","",134,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::format","",36,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",36,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"n":"bool"}}],[11,"le","","",36,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"n":"bool"}}],[11,"gt","","",36,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"n":"bool"}}],[11,"ge","","",36,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",157,{"i":[{"n":"self"},{"n":"r32_g32_b32_a32"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",142,{"i":[{"n":"self"},{"n":"d24"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx::texture","",45,{"i":[{"n":"self"},{"n":"kind"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",45,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"bool"}}],[11,"le","","",45,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"bool"}}],[11,"gt","","",45,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"bool"}}],[11,"ge","","",45,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",51,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",51,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"bool"}}],[11,"le","","",51,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"bool"}}],[11,"gt","","",51,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"bool"}}],[11,"ge","","",51,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::format","",154,{"i":[{"n":"self"},{"n":"d32"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",148,{"i":[{"n":"self"},{"n":"r16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",25,{"i":[{"n":"self"},{"n":"channeltype"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx::texture","",55,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",55,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"n":"bool"}}],[11,"le","","",55,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"n":"bool"}}],[11,"gt","","",55,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"n":"bool"}}],[11,"ge","","",55,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",53,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",53,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"n":"bool"}}],[11,"le","","",53,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"n":"bool"}}],[11,"gt","","",53,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"n":"bool"}}],[11,"ge","","",53,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::format","",27,{"i":[{"n":"self"},{"n":"channelsource"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",146,{"i":[{"n":"self"},{"n":"r32_g32"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx::texture","",52,{"i":[{"n":"self"},{"n":"info"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",52,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"le","","",52,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"gt","","",52,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"ge","","",52,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",42,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",42,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"n":"bool"}}],[11,"le","","",42,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"n":"bool"}}],[11,"gt","","",42,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"n":"bool"}}],[11,"ge","","",42,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::memory","",39,{"i":[{"n":"self"},{"n":"usage"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx::format","",151,{"i":[{"n":"self"},{"n":"r32"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",37,{"i":[{"n":"self"},{"n":"f16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",37,{"i":[{"n":"self"},{"n":"f16"}],"o":{"n":"bool"}}],[11,"le","","",37,{"i":[{"n":"self"},{"n":"f16"}],"o":{"n":"bool"}}],[11,"gt","","",37,{"i":[{"n":"self"},{"n":"f16"}],"o":{"n":"bool"}}],[11,"ge","","",37,{"i":[{"n":"self"},{"n":"f16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",161,{"i":[{"n":"self"},{"n":"int"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx::texture","",49,{"i":[{"n":"self"},{"n":"wrapmode"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx::format","",147,{"i":[{"n":"self"},{"n":"d24_s8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",138,{"i":[{"n":"self"},{"n":"r10_g10_b10_a2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",33,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",33,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"n":"bool"}}],[11,"le","","",33,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"n":"bool"}}],[11,"gt","","",33,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"n":"bool"}}],[11,"ge","","",33,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::texture","",48,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",48,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"n":"bool"}}],[11,"le","","",48,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"n":"bool"}}],[11,"gt","","",48,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"n":"bool"}}],[11,"ge","","",48,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::format","",35,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",35,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"n":"bool"}}],[11,"le","","",35,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"n":"bool"}}],[11,"gt","","",35,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"n":"bool"}}],[11,"ge","","",35,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::texture","",133,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",133,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"le","","",133,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"gt","","",133,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"ge","","",133,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::format","",159,{"i":[{"n":"self"},{"n":"r11_g11_b10"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",162,{"i":[{"n":"self"},{"n":"inorm"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx::texture","",44,{"i":[{"n":"self"},{"n":"cubeface"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",47,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",47,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"n":"bool"}}],[11,"le","","",47,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"n":"bool"}}],[11,"gt","","",47,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"n":"bool"}}],[11,"ge","","",47,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::format","",26,{"i":[{"n":"self"},{"n":"surfacetype"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",144,{"i":[{"n":"self"},{"n":"r8_g8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",156,{"i":[{"n":"self"},{"n":"b8_g8_r8_a8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",163,{"i":[{"n":"self"},{"n":"uint"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx::texture","",54,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",54,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"n":"bool"}}],[11,"le","","",54,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"n":"bool"}}],[11,"gt","","",54,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"n":"bool"}}],[11,"ge","","",54,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::format","",152,{"i":[{"n":"self"},{"n":"r8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx::memory","",132,{"i":[{"n":"self"},{"n":"access"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",132,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"le","","",132,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"gt","","",132,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"ge","","",132,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::format","",28,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",28,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"n":"bool"}}],[11,"le","","",28,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"n":"bool"}}],[11,"gt","","",28,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"n":"bool"}}],[11,"ge","","",28,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",164,{"i":[{"n":"self"},{"n":"srgb"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",158,{"i":[{"n":"self"},{"n":"r5_g6_b5"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx::texture","",50,{"i":[{"n":"self"},{"n":"packedcolor"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",50,{"i":[{"n":"self"},{"n":"packedcolor"}],"o":{"n":"bool"}}],[11,"le","","",50,{"i":[{"n":"self"},{"n":"packedcolor"}],"o":{"n":"bool"}}],[11,"gt","","",50,{"i":[{"n":"self"},{"n":"packedcolor"}],"o":{"n":"bool"}}],[11,"ge","","",50,{"i":[{"n":"self"},{"n":"packedcolor"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::format","",149,{"i":[{"n":"self"},{"n":"r16_g16_b16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",29,{"i":[{"n":"self"},{"n":"format"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",29,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"bool"}}],[11,"le","","",29,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"bool"}}],[11,"gt","","",29,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"bool"}}],[11,"ge","","",29,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",155,{"i":[{"n":"self"},{"n":"r8_g8_b8_a8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",139,{"i":[{"n":"self"},{"n":"r5_g5_b5_a1"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",153,{"i":[{"n":"self"},{"n":"r16_g16_b16_a16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",165,{"i":[{"n":"self"},{"n":"float"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",143,{"i":[{"n":"self"},{"n":"d16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",141,{"i":[{"n":"self"},{"n":"r4_g4_b4_a4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",166,{"i":[{"n":"self"},{"n":"unorm"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_info","gfx::shade::core","Get program info",167,{"i":[{"n":"self"}],"o":{"n":"programinfo"}}],[11,"deref","gfx::handle","",168,null],[11,"get_info","gfx::buffer","Get buffer info",169,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"is_mapped","","Is this buffer mapped ?",169,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"deref","gfx::handle","",170,null],[11,"deref","gfx::mapping","",171,null],[11,"get_info","gfx::texture","Get texture descriptor",172,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"deref","gfx::handle","",173,null],[11,"new","gfx::pso","Creates empty access informations",174,{"o":{"n":"accessinfo"}}],[11,"clear","","Clear access informations",174,null],[11,"buffer_read","","Register a buffer read access",174,null],[11,"buffer_write","","Register a buffer write access",174,null],[11,"mapped_reads","","Returns the mapped buffers that The GPU will read from",174,{"i":[{"n":"self"}],"o":{"g":["rawbuffer"],"n":"iter"}}],[11,"mapped_writes","","Returns the mapped buffers that The GPU will write to",174,{"i":[{"n":"self"}],"o":{"g":["rawbuffer"],"n":"iter"}}],[11,"has_mapped_reads","","Is there any mapped buffer reads ?",174,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"has_mapped_writes","","Is there any mapped buffer writes ?",174,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"take_accesses","","Takes all the accesses necessary for submission",174,{"i":[{"n":"self"}],"o":{"g":["accessguard","submissionerror"],"n":"result"}}],[11,"deref","gfx::mapping","",136,null],[11,"eq","gfx::handle","",175,{"i":[{"n":"self"},{"n":"depthstencilview"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",26,{"i":[{"n":"self"},{"n":"surfacetype"}],"o":{"n":"bool"}}],[11,"eq","","",163,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",113,{"i":[{"n":"self"},{"n":"basetype"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",27,{"i":[{"n":"self"},{"n":"channelsource"}],"o":{"n":"bool"}}],[11,"eq","gfx::buffer","",23,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"ne","","",23,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",119,{"i":[{"n":"self"},{"n":"constvar"}],"o":{"n":"bool"}}],[11,"ne","","",119,{"i":[{"n":"self"},{"n":"constvar"}],"o":{"n":"bool"}}],[11,"eq","gfx","",18,{"i":[{"n":"self"},{"n":"primitive"}],"o":{"n":"bool"}}],[11,"ne","","",18,{"i":[{"n":"self"},{"n":"primitive"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",151,{"i":[{"n":"self"},{"n":"r32"}],"o":{"n":"bool"}}],[11,"eq","","",148,{"i":[{"n":"self"},{"n":"r16"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",115,{"i":[{"n":"self"},{"n":"stage"}],"o":{"n":"bool"}}],[11,"eq","gfx","",57,{"i":[{"n":"self"},{"n":"resourceviewerror"}],"o":{"n":"bool"}}],[11,"ne","","",57,{"i":[{"n":"self"},{"n":"resourceviewerror"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",160,{"i":[{"n":"self"},{"n":"lod"}],"o":{"n":"bool"}}],[11,"ne","","",160,{"i":[{"n":"self"},{"n":"lod"}],"o":{"n":"bool"}}],[11,"eq","","",45,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"bool"}}],[11,"ne","","",45,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",138,{"i":[{"n":"self"},{"n":"r10_g10_b10_a2"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",114,{"i":[{"n":"self"},{"n":"containertype"}],"o":{"n":"bool"}}],[11,"ne","","",114,{"i":[{"n":"self"},{"n":"containertype"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",157,{"i":[{"n":"self"},{"n":"r32_g32_b32_a32"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",173,{"i":[{"n":"self"},{"n":"rawtexture"}],"o":{"n":"bool"}}],[11,"ne","","",173,{"i":[{"n":"self"},{"n":"rawtexture"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",142,{"i":[{"n":"self"},{"n":"d24"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",125,{"i":[{"n":"self"},{"n":"compatibilityerror"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",158,{"i":[{"n":"self"},{"n":"r5_g6_b5"}],"o":{"n":"bool"}}],[11,"eq","gfx::memory","",39,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",123,{"i":[{"n":"self"},{"n":"samplervar"}],"o":{"n":"bool"}}],[11,"ne","","",123,{"i":[{"n":"self"},{"n":"samplervar"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",165,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"bool"}}],[11,"eq","gfx","",176,{"i":[{"n":"self"},{"n":"hullshader"}],"o":{"n":"bool"}}],[11,"ne","","",176,{"i":[{"n":"self"},{"n":"hullshader"}],"o":{"n":"bool"}}],[11,"eq","","",177,{"i":[{"n":"self"},{"n":"geometryshader"}],"o":{"n":"bool"}}],[11,"ne","","",177,{"i":[{"n":"self"},{"n":"geometryshader"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",164,{"i":[{"n":"self"},{"n":"srgb"}],"o":{"n":"bool"}}],[11,"eq","","",152,{"i":[{"n":"self"},{"n":"r8"}],"o":{"n":"bool"}}],[11,"eq","","",159,{"i":[{"n":"self"},{"n":"r11_g11_b10"}],"o":{"n":"bool"}}],[11,"eq","gfx::memory","",132,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"ne","","",132,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",178,{"i":[{"n":"self"},{"n":"rendertargetview"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",146,{"i":[{"n":"self"},{"n":"r32_g32"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",179,{"i":[{"n":"self"},{"n":"shader"}],"o":{"n":"bool"}}],[11,"ne","","",179,{"i":[{"n":"self"},{"n":"shader"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",40,{"i":[{"n":"self"},{"n":"creationerror"}],"o":{"n":"bool"}}],[11,"ne","","",40,{"i":[{"n":"self"},{"n":"creationerror"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",108,{"i":[{"n":"self"},{"n":"ismultisample"}],"o":{"n":"bool"}}],[11,"eq","gfx","",180,{"i":[{"n":"self"},{"n":"vertexshader"}],"o":{"n":"bool"}}],[11,"ne","","",180,{"i":[{"n":"self"},{"n":"vertexshader"}],"o":{"n":"bool"}}],[11,"eq","gfx::pso::buffer","",75,{"i":[{"n":"self"},{"n":"element"}],"o":{"n":"bool"}}],[11,"ne","","",75,{"i":[{"n":"self"},{"n":"element"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",61,{"i":[{"n":"self"},{"n":"programinfo"}],"o":{"n":"bool"}}],[11,"ne","","",61,{"i":[{"n":"self"},{"n":"programinfo"}],"o":{"n":"bool"}}],[11,"eq","","",167,{"i":[{"n":"self"},{"n":"program"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",156,{"i":[{"n":"self"},{"n":"b8_g8_r8_a8"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",124,{"i":[{"n":"self"},{"n":"outputvar"}],"o":{"n":"bool"}}],[11,"ne","","",124,{"i":[{"n":"self"},{"n":"outputvar"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",172,{"i":[{"n":"self"},{"n":"raw"}],"o":{"n":"bool"}}],[11,"eq","","",51,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"bool"}}],[11,"ne","","",51,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",181,{"i":[{"n":"self"},{"n":"texture"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",28,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"n":"bool"}}],[11,"ne","","",28,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"n":"bool"}}],[11,"eq","","",145,{"i":[{"n":"self"},{"n":"r16_g16"}],"o":{"n":"bool"}}],[11,"eq","","",150,{"i":[{"n":"self"},{"n":"r32_g32_b32"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",182,{"i":[{"n":"self"},{"n":"fence"}],"o":{"n":"bool"}}],[11,"ne","","",182,{"i":[{"n":"self"},{"n":"fence"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",35,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"n":"bool"}}],[11,"ne","","",35,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"n":"bool"}}],[11,"eq","","",141,{"i":[{"n":"self"},{"n":"r4_g4_b4_a4"}],"o":{"n":"bool"}}],[11,"eq","","",155,{"i":[{"n":"self"},{"n":"r8_g8_b8_a8"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",183,{"i":[{"n":"self"},{"n":"rawpipelinestate"}],"o":{"n":"bool"}}],[11,"ne","","",183,{"i":[{"n":"self"},{"n":"rawpipelinestate"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",48,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"n":"bool"}}],[11,"ne","","",48,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"n":"bool"}}],[11,"eq","","",42,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"n":"bool"}}],[11,"ne","","",42,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",170,{"i":[{"n":"self"},{"n":"rawbuffer"}],"o":{"n":"bool"}}],[11,"ne","","",170,{"i":[{"n":"self"},{"n":"rawbuffer"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",139,{"i":[{"n":"self"},{"n":"r5_g5_b5_a1"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",133,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"ne","","",133,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",184,{"i":[{"n":"self"},{"n":"shaderresourceview"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",143,{"i":[{"n":"self"},{"n":"d16"}],"o":{"n":"bool"}}],[11,"eq","gfx","",185,{"i":[{"n":"self"},{"n":"pixelshader"}],"o":{"n":"bool"}}],[11,"ne","","",185,{"i":[{"n":"self"},{"n":"pixelshader"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",52,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"ne","","",52,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",70,{"i":[{"n":"self"},{"n":"buffer"}],"o":{"n":"bool"}}],[11,"eq","gfx","",186,{"i":[{"n":"self"},{"n":"domainshader"}],"o":{"n":"bool"}}],[11,"ne","","",186,{"i":[{"n":"self"},{"n":"domainshader"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",53,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"n":"bool"}}],[11,"ne","","",53,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",144,{"i":[{"n":"self"},{"n":"r8_g8"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",187,{"i":[{"n":"self"},{"n":"rawdepthstencilview"}],"o":{"n":"bool"}}],[11,"ne","","",187,{"i":[{"n":"self"},{"n":"rawdepthstencilview"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",166,{"i":[{"n":"self"},{"n":"unorm"}],"o":{"n":"bool"}}],[11,"eq","","",147,{"i":[{"n":"self"},{"n":"d24_s8"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade","",135,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"ne","","",135,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"eq","gfx","",58,{"i":[{"n":"self"},{"n":"targetviewerror"}],"o":{"n":"bool"}}],[11,"ne","","",58,{"i":[{"n":"self"},{"n":"targetviewerror"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",36,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"n":"bool"}}],[11,"ne","","",36,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"n":"bool"}}],[11,"eq","gfx::buffer","",169,{"i":[{"n":"self"},{"n":"raw"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",126,{"i":[{"n":"self"},{"n":"createshadererror"}],"o":{"n":"bool"}}],[11,"ne","","",126,{"i":[{"n":"self"},{"n":"createshadererror"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",34,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"n":"bool"}}],[11,"ne","","",34,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",188,{"i":[{"n":"self"},{"n":"rawshaderresourceview"}],"o":{"n":"bool"}}],[11,"ne","","",188,{"i":[{"n":"self"},{"n":"rawshaderresourceview"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",47,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"n":"bool"}}],[11,"ne","","",47,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"n":"bool"}}],[11,"eq","","",49,{"i":[{"n":"self"},{"n":"wrapmode"}],"o":{"n":"bool"}}],[11,"eq","gfx::pso","",71,{"i":[{"n":"self"},{"n":"descriptor"}],"o":{"n":"bool"}}],[11,"ne","","",71,{"i":[{"n":"self"},{"n":"descriptor"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",25,{"i":[{"n":"self"},{"n":"channeltype"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",54,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"n":"bool"}}],[11,"ne","","",54,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",120,{"i":[{"n":"self"},{"n":"constantbuffervar"}],"o":{"n":"bool"}}],[11,"ne","","",120,{"i":[{"n":"self"},{"n":"constantbuffervar"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",189,{"i":[{"n":"self"},{"n":"sampler"}],"o":{"n":"bool"}}],[11,"ne","","",189,{"i":[{"n":"self"},{"n":"sampler"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",111,{"i":[{"n":"self"},{"n":"texturetype"}],"o":{"n":"bool"}}],[11,"ne","","",111,{"i":[{"n":"self"},{"n":"texturetype"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",162,{"i":[{"n":"self"},{"n":"inorm"}],"o":{"n":"bool"}}],[11,"eq","","",154,{"i":[{"n":"self"},{"n":"d32"}],"o":{"n":"bool"}}],[11,"eq","gfx::buffer","",22,{"i":[{"n":"self"},{"n":"role"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",41,{"i":[{"n":"self"},{"n":"layererror"}],"o":{"n":"bool"}}],[11,"ne","","",41,{"i":[{"n":"self"},{"n":"layererror"}],"o":{"n":"bool"}}],[11,"eq","gfx","",59,{"i":[{"n":"self"},{"n":"combinederror"}],"o":{"n":"bool"}}],[11,"ne","","",59,{"i":[{"n":"self"},{"n":"combinederror"}],"o":{"n":"bool"}}],[11,"eq","gfx::buffer","",24,{"i":[{"n":"self"},{"n":"creationerror"}],"o":{"n":"bool"}}],[11,"ne","","",24,{"i":[{"n":"self"},{"n":"creationerror"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",118,{"i":[{"n":"self"},{"n":"attributevar"}],"o":{"n":"bool"}}],[11,"ne","","",118,{"i":[{"n":"self"},{"n":"attributevar"}],"o":{"n":"bool"}}],[11,"eq","","",137,{"i":[{"n":"self"},{"n":"createprogramerror"}],"o":{"n":"bool"}}],[11,"ne","","",137,{"i":[{"n":"self"},{"n":"createprogramerror"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",55,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"n":"bool"}}],[11,"ne","","",55,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",110,{"i":[{"n":"self"},{"n":"matrixformat"}],"o":{"n":"bool"}}],[11,"eq","gfx::pso","",174,{"i":[{"n":"self"},{"n":"accessinfo"}],"o":{"n":"bool"}}],[11,"ne","","",174,{"i":[{"n":"self"},{"n":"accessinfo"}],"o":{"n":"bool"}}],[11,"eq","gfx::mapping","",38,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"ne","","",38,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",190,{"i":[{"n":"self"},{"n":"rawrendertargetview"}],"o":{"n":"bool"}}],[11,"ne","","",190,{"i":[{"n":"self"},{"n":"rawrendertargetview"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",140,{"i":[{"n":"self"},{"n":"r4_g4"}],"o":{"n":"bool"}}],[11,"eq","","",29,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"bool"}}],[11,"ne","","",29,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"bool"}}],[11,"eq","gfx::memory","",134,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"ne","","",134,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",122,{"i":[{"n":"self"},{"n":"unorderedvar"}],"o":{"n":"bool"}}],[11,"ne","","",122,{"i":[{"n":"self"},{"n":"unorderedvar"}],"o":{"n":"bool"}}],[11,"eq","","",112,{"i":[{"n":"self"},{"n":"samplertype"}],"o":{"n":"bool"}}],[11,"ne","","",112,{"i":[{"n":"self"},{"n":"samplertype"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",153,{"i":[{"n":"self"},{"n":"r16_g16_b16_a16"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",106,{"i":[{"n":"self"},{"n":"isarray"}],"o":{"n":"bool"}}],[11,"eq","","",109,{"i":[{"n":"self"},{"n":"isrect"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",191,{"i":[{"n":"self"},{"n":"rawunorderedaccessview"}],"o":{"n":"bool"}}],[11,"ne","","",191,{"i":[{"n":"self"},{"n":"rawunorderedaccessview"}],"o":{"n":"bool"}}],[11,"eq","gfx","",20,{"i":[{"n":"self"},{"n":"submissionerror"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",168,{"i":[{"n":"self"},{"n":"program"}],"o":{"n":"bool"}}],[11,"ne","","",168,{"i":[{"n":"self"},{"n":"program"}],"o":{"n":"bool"}}],[11,"eq","gfx","",21,{"i":[{"n":"self"},{"n":"shaderset"}],"o":{"n":"bool"}}],[11,"ne","","",21,{"i":[{"n":"self"},{"n":"shaderset"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",192,{"i":[{"n":"self"},{"n":"unorderedaccessview"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",43,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"n":"bool"}}],[11,"ne","","",43,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",33,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"n":"bool"}}],[11,"ne","","",33,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",44,{"i":[{"n":"self"},{"n":"cubeface"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",121,{"i":[{"n":"self"},{"n":"texturevar"}],"o":{"n":"bool"}}],[11,"ne","","",121,{"i":[{"n":"self"},{"n":"texturevar"}],"o":{"n":"bool"}}],[11,"eq","","",107,{"i":[{"n":"self"},{"n":"iscomparison"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",161,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"bool"}}],[11,"eq","","",149,{"i":[{"n":"self"},{"n":"r16_g16_b16"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",50,{"i":[{"n":"self"},{"n":"packedcolor"}],"o":{"n":"bool"}}],[11,"ne","","",50,{"i":[{"n":"self"},{"n":"packedcolor"}],"o":{"n":"bool"}}],[11,"eq","","",46,{"i":[{"n":"self"},{"n":"mipmap"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",62,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"n":"bool"}}],[11,"ne","","",62,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",37,{"i":[{"n":"self"},{"n":"f16"}],"o":{"n":"bool"}}],[11,"ne","","",37,{"i":[{"n":"self"},{"n":"f16"}],"o":{"n":"bool"}}],[11,"from","gfx::shade::core","",137,{"i":[{"n":"s"}],"o":{"n":"createprogramerror"}}],[11,"from","gfx::format","",36,{"i":[{"n":"i16"}],"o":{"n":"i16norm"}}],[11,"from","gfx::texture","",42,{"i":[{"n":"u8"}],"o":{"n":"aamode"}}],[11,"from","","",50,null],[11,"from","gfx::format","",33,{"i":[{"n":"u8"}],"o":{"n":"u8norm"}}],[11,"from","gfx","",59,{"i":[{"n":"resourceviewerror"}],"o":{"n":"combinederror"}}],[11,"from","gfx::format","",35,{"i":[{"n":"u16"}],"o":{"n":"u16norm"}}],[11,"from","gfx","",59,{"i":[{"n":"creationerror"}],"o":{"n":"combinederror"}}],[11,"from","gfx::texture","",160,{"i":[{"n":"f32"}],"o":{"n":"lod"}}],[11,"from","","",55,{"i":[{"n":"renderdesc"}],"o":{"n":"depthstencildesc"}}],[11,"from","gfx","",59,{"i":[{"n":"targetviewerror"}],"o":{"n":"combinederror"}}],[11,"from","gfx::format","",34,{"i":[{"n":"i8"}],"o":{"n":"i8norm"}}],[11,"from","gfx::shade","",135,{"i":[{"n":"stage"}],"o":{"n":"usage"}}],[11,"from","gfx::format","",37,{"i":[{"n":"u16"}],"o":{"n":"f16"}}],[11,"bitor_assign","gfx::shade","Adds the set of flags.",135,null],[11,"bitor_assign","gfx::memory","Adds the set of flags.",132,null],[11,"bitor_assign","gfx::texture","Adds the set of flags.",133,null],[11,"bitor_assign","gfx::memory","Adds the set of flags.",134,null],[11,"fmt","gfx","",180,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",179,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",178,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",187,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",156,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",125,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",157,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::memory","",134,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",166,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",190,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",170,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::pso::buffer","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",121,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",123,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",162,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",141,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",183,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",160,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::mapping","",136,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",168,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",142,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",115,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",138,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::mapping","",171,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",151,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",144,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",188,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",150,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",189,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::buffer","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",109,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",147,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",111,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",139,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",118,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",110,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::mapping","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",113,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",192,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",176,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",120,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",119,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",193,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::buffer","",169,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",184,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",158,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::memory","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",191,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",161,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",149,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",155,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",186,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",143,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::pso","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",106,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",140,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",146,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",133,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",177,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",167,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::memory","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",126,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade","",135,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",114,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",173,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",185,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",181,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",154,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",172,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",145,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",152,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",182,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",122,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",148,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",164,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::pso","",174,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",159,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",124,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",165,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::buffer","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",153,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",108,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",175,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",163,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",112,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",137,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::memory","",134,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",133,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::memory","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade","",135,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",133,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade","",135,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::memory","",134,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"bitor","","Returns the union of the two sets of flags.",134,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bind"}}],[11,"bitor","gfx::shade","Returns the union of the two sets of flags.",135,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"usage"}}],[11,"bitor","gfx::memory","Returns the union of the two sets of flags.",132,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"access"}}],[11,"bitor","gfx::texture","Returns the union of the two sets of flags.",133,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"depthstencilflags"}}],[11,"clone","gfx::format","",150,{"i":[{"n":"self"}],"o":{"n":"r32_g32_b32"}}],[11,"clone","","",156,{"i":[{"n":"self"}],"o":{"n":"b8_g8_r8_a8"}}],[11,"clone","gfx::shade::core","",106,{"i":[{"n":"self"}],"o":{"n":"isarray"}}],[11,"clone","gfx","",186,{"i":[{"n":"self"}],"o":{"n":"domainshader"}}],[11,"clone","gfx::format","",28,{"i":[{"n":"self"}],"o":{"n":"swizzle"}}],[11,"clone","gfx::handle","",184,{"i":[{"n":"self"}],"o":{"n":"shaderresourceview"}}],[11,"clone","gfx::format","",34,{"i":[{"n":"self"}],"o":{"n":"i8norm"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"channeltype"}}],[11,"clone","","",157,{"i":[{"n":"self"}],"o":{"n":"r32_g32_b32_a32"}}],[11,"clone","gfx","",177,{"i":[{"n":"self"}],"o":{"n":"geometryshader"}}],[11,"clone","gfx::format","",149,{"i":[{"n":"self"}],"o":{"n":"r16_g16_b16"}}],[11,"clone","","",164,{"i":[{"n":"self"}],"o":{"n":"srgb"}}],[11,"clone","gfx","",57,{"i":[{"n":"self"}],"o":{"n":"resourceviewerror"}}],[11,"clone","gfx::format","",26,{"i":[{"n":"self"}],"o":{"n":"surfacetype"}}],[11,"clone","gfx::handle","",187,{"i":[{"n":"self"}],"o":{"n":"rawdepthstencilview"}}],[11,"clone","gfx::format","",139,{"i":[{"n":"self"}],"o":{"n":"r5_g5_b5_a1"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"i16norm"}}],[11,"clone","","",141,{"i":[{"n":"self"}],"o":{"n":"r4_g4_b4_a4"}}],[11,"clone","","",148,{"i":[{"n":"self"}],"o":{"n":"r16"}}],[11,"clone","gfx::memory","",134,{"i":[{"n":"self"}],"o":{"n":"bind"}}],[11,"clone","gfx::format","",143,{"i":[{"n":"self"}],"o":{"n":"d16"}}],[11,"clone","gfx::handle","",168,{"i":[{"n":"self"}],"o":{"n":"program"}}],[11,"clone","gfx::shade::core","",125,{"i":[{"n":"self"}],"o":{"n":"compatibilityerror"}}],[11,"clone","gfx::handle","",181,{"i":[{"n":"self"}],"o":{"n":"texture"}}],[11,"clone","","",173,{"i":[{"n":"self"}],"o":{"n":"rawtexture"}}],[11,"clone","gfx::buffer","",24,{"i":[{"n":"self"}],"o":{"n":"creationerror"}}],[11,"clone","gfx::format","",37,{"i":[{"n":"self"}],"o":{"n":"f16"}}],[11,"clone","gfx::pso","",174,{"i":[{"n":"self"}],"o":{"n":"accessinfo"}}],[11,"clone","gfx::format","",155,{"i":[{"n":"self"}],"o":{"n":"r8_g8_b8_a8"}}],[11,"clone","gfx::handle","",179,{"i":[{"n":"self"}],"o":{"n":"shader"}}],[11,"clone","gfx::pso::buffer","",75,{"i":[{"n":"self"}],"o":{"n":"element"}}],[11,"clone","gfx::shade","",135,{"i":[{"n":"self"}],"o":{"n":"usage"}}],[11,"clone","gfx::texture","",47,{"i":[{"n":"self"}],"o":{"n":"imageinfocommon"}}],[11,"clone","gfx::handle","",70,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"clone","gfx::shade::core","",122,{"i":[{"n":"self"}],"o":{"n":"unorderedvar"}}],[11,"clone","gfx::texture","",52,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"packedcolor"}}],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"texturecopyregion"}}],[11,"clone","gfx","",21,{"i":[{"n":"self"}],"o":{"n":"shaderset"}}],[11,"clone","gfx::texture","",133,{"i":[{"n":"self"}],"o":{"n":"depthstencilflags"}}],[11,"clone","gfx::handle","",183,{"i":[{"n":"self"}],"o":{"n":"rawpipelinestate"}}],[11,"clone","gfx::format","",142,{"i":[{"n":"self"}],"o":{"n":"d24"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"channelsource"}}],[11,"clone","gfx::shade::core","",113,{"i":[{"n":"self"}],"o":{"n":"basetype"}}],[11,"clone","gfx::handle","",178,{"i":[{"n":"self"}],"o":{"n":"rendertargetview"}}],[11,"clone","gfx::mapping","",38,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"clone","gfx::texture","",46,{"i":[{"n":"self"}],"o":{"n":"mipmap"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"kind"}}],[11,"clone","gfx::shade::core","",137,{"i":[{"n":"self"}],"o":{"n":"createprogramerror"}}],[11,"clone","gfx::texture","",40,{"i":[{"n":"self"}],"o":{"n":"creationerror"}}],[11,"clone","gfx::format","",138,{"i":[{"n":"self"}],"o":{"n":"r10_g10_b10_a2"}}],[11,"clone","gfx::shade::core","",109,{"i":[{"n":"self"}],"o":{"n":"isrect"}}],[11,"clone","gfx::format","",35,{"i":[{"n":"self"}],"o":{"n":"u16norm"}}],[11,"clone","gfx","",20,{"i":[{"n":"self"}],"o":{"n":"submissionerror"}}],[11,"clone","gfx::format","",146,{"i":[{"n":"self"}],"o":{"n":"r32_g32"}}],[11,"clone","gfx::texture","",41,{"i":[{"n":"self"}],"o":{"n":"layererror"}}],[11,"clone","gfx::format","",153,{"i":[{"n":"self"}],"o":{"n":"r16_g16_b16_a16"}}],[11,"clone","","",152,{"i":[{"n":"self"}],"o":{"n":"r8"}}],[11,"clone","gfx","",59,{"i":[{"n":"self"}],"o":{"n":"combinederror"}}],[11,"clone","gfx::texture","",160,{"i":[{"n":"self"}],"o":{"n":"lod"}}],[11,"clone","gfx::pso","",71,{"i":[{"n":"self"}],"o":{"n":"descriptor"}}],[11,"clone","gfx::format","",159,{"i":[{"n":"self"}],"o":{"n":"r11_g11_b10"}}],[11,"clone","gfx::handle","",190,{"i":[{"n":"self"}],"o":{"n":"rawrendertargetview"}}],[11,"clone","gfx::texture","",54,{"i":[{"n":"self"}],"o":{"n":"renderdesc"}}],[11,"clone","gfx::shade::core","",119,{"i":[{"n":"self"}],"o":{"n":"constvar"}}],[11,"clone","gfx::texture","",43,{"i":[{"n":"self"}],"o":{"n":"filtermethod"}}],[11,"clone","gfx::handle","",188,{"i":[{"n":"self"}],"o":{"n":"rawshaderresourceview"}}],[11,"clone","gfx::buffer","",22,{"i":[{"n":"self"}],"o":{"n":"role"}}],[11,"clone","gfx::shade::core","",126,{"i":[{"n":"self"}],"o":{"n":"createshadererror"}}],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"clone","gfx::memory","",132,{"i":[{"n":"self"}],"o":{"n":"access"}}],[11,"clone","gfx::shade::core","",61,{"i":[{"n":"self"}],"o":{"n":"programinfo"}}],[11,"clone","gfx::handle","",191,{"i":[{"n":"self"}],"o":{"n":"rawunorderedaccessview"}}],[11,"clone","gfx::shade::core","",120,{"i":[{"n":"self"}],"o":{"n":"constantbuffervar"}}],[11,"clone","","",108,{"i":[{"n":"self"}],"o":{"n":"ismultisample"}}],[11,"clone","gfx::format","",145,{"i":[{"n":"self"}],"o":{"n":"r16_g16"}}],[11,"clone","gfx::texture","",55,{"i":[{"n":"self"}],"o":{"n":"depthstencildesc"}}],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"resourcedesc"}}],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"samplerinfo"}}],[11,"clone","gfx::shade::core","",110,{"i":[{"n":"self"}],"o":{"n":"matrixformat"}}],[11,"clone","gfx::texture","",49,{"i":[{"n":"self"}],"o":{"n":"wrapmode"}}],[11,"clone","gfx::shade::core","",124,{"i":[{"n":"self"}],"o":{"n":"outputvar"}}],[11,"clone","gfx::buffer","",23,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"clone","gfx::format","",140,{"i":[{"n":"self"}],"o":{"n":"r4_g4"}}],[11,"clone","gfx::handle","",192,{"i":[{"n":"self"}],"o":{"n":"unorderedaccessview"}}],[11,"clone","gfx","",180,{"i":[{"n":"self"}],"o":{"n":"vertexshader"}}],[11,"clone","gfx::shade::core","",123,{"i":[{"n":"self"}],"o":{"n":"samplervar"}}],[11,"clone","gfx::format","",161,{"i":[{"n":"self"}],"o":{"n":"int"}}],[11,"clone","gfx::shade::core","",115,{"i":[{"n":"self"}],"o":{"n":"stage"}}],[11,"clone","gfx::format","",33,{"i":[{"n":"self"}],"o":{"n":"u8norm"}}],[11,"clone","gfx::handle","",182,{"i":[{"n":"self"}],"o":{"n":"fence"}}],[11,"clone","gfx::format","",163,{"i":[{"n":"self"}],"o":{"n":"uint"}}],[11,"clone","gfx::memory","",39,{"i":[{"n":"self"}],"o":{"n":"usage"}}],[11,"clone","gfx::format","",158,{"i":[{"n":"self"}],"o":{"n":"r5_g6_b5"}}],[11,"clone","gfx::shade::core","",114,{"i":[{"n":"self"}],"o":{"n":"containertype"}}],[11,"clone","gfx::format","",154,{"i":[{"n":"self"}],"o":{"n":"d32"}}],[11,"clone","","",144,{"i":[{"n":"self"}],"o":{"n":"r8_g8"}}],[11,"clone","gfx","",58,{"i":[{"n":"self"}],"o":{"n":"targetviewerror"}}],[11,"clone","gfx::format","",29,{"i":[{"n":"self"}],"o":{"n":"format"}}],[11,"clone","gfx::handle","",175,{"i":[{"n":"self"}],"o":{"n":"depthstencilview"}}],[11,"clone","gfx::shade::core","",121,{"i":[{"n":"self"}],"o":{"n":"texturevar"}}],[11,"clone","","",107,{"i":[{"n":"self"}],"o":{"n":"iscomparison"}}],[11,"clone","gfx::texture","",42,{"i":[{"n":"self"}],"o":{"n":"aamode"}}],[11,"clone","gfx::format","",147,{"i":[{"n":"self"}],"o":{"n":"d24_s8"}}],[11,"clone","gfx","",176,{"i":[{"n":"self"}],"o":{"n":"hullshader"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"primitive"}}],[11,"clone","gfx::shade::core","",111,{"i":[{"n":"self"}],"o":{"n":"texturetype"}}],[11,"clone","gfx::format","",151,{"i":[{"n":"self"}],"o":{"n":"r32"}}],[11,"clone","","",165,{"i":[{"n":"self"}],"o":{"n":"float"}}],[11,"clone","","",162,{"i":[{"n":"self"}],"o":{"n":"inorm"}}],[11,"clone","gfx::texture","",44,{"i":[{"n":"self"}],"o":{"n":"cubeface"}}],[11,"clone","gfx::shade::core","",112,{"i":[{"n":"self"}],"o":{"n":"samplertype"}}],[11,"clone","","",118,{"i":[{"n":"self"}],"o":{"n":"attributevar"}}],[11,"clone","gfx::format","",166,{"i":[{"n":"self"}],"o":{"n":"unorm"}}],[11,"clone","gfx::handle","",170,{"i":[{"n":"self"}],"o":{"n":"rawbuffer"}}],[11,"clone","","",189,{"i":[{"n":"self"}],"o":{"n":"sampler"}}],[11,"clone","gfx","",185,{"i":[{"n":"self"}],"o":{"n":"pixelshader"}}],[11,"not","gfx::texture","Returns the complement of this set of flags.",133,{"i":[{"n":"self"}],"o":{"n":"depthstencilflags"}}],[11,"not","gfx::shade","Returns the complement of this set of flags.",135,{"i":[{"n":"self"}],"o":{"n":"usage"}}],[11,"not","gfx::memory","Returns the complement of this set of flags.",132,{"i":[{"n":"self"}],"o":{"n":"access"}}],[11,"not","","Returns the complement of this set of flags.",134,{"i":[{"n":"self"}],"o":{"n":"bind"}}],[11,"description","gfx::mapping","",38,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","gfx::texture","",41,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","gfx::shade::core","",137,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","gfx","",20,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","gfx::shade::core","",125,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","","",126,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","gfx","",57,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",57,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"description","","",59,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",59,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"description","","",58,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",58,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"description","gfx::buffer","",24,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","gfx::texture","",40,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"into","","",50,null],[11,"into","","",160,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"sub","gfx::memory","Returns the set difference of the two sets of flags.",132,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"access"}}],[11,"sub","gfx::texture","Returns the set difference of the two sets of flags.",133,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"depthstencilflags"}}],[11,"sub","gfx::memory","Returns the set difference of the two sets of flags.",134,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bind"}}],[11,"sub","gfx::shade","Returns the set difference of the two sets of flags.",135,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"usage"}}],[11,"get_channel_type","gfx::format","",164,{"o":{"n":"channeltype"}}],[11,"get_channel_type","","",166,{"o":{"n":"channeltype"}}],[11,"get_channel_type","","",163,{"o":{"n":"channeltype"}}],[11,"get_channel_type","","",165,{"o":{"n":"channeltype"}}],[11,"get_channel_type","","",162,{"o":{"n":"channeltype"}}],[11,"get_channel_type","","",161,{"o":{"n":"channeltype"}}],[11,"fmt","gfx::shade","",135,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",133,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::memory","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",134,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",132,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"access"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",134,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bind"}}],[11,"bitxor","gfx::shade","Returns the left flags, but with all the right flags toggled.",135,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"usage"}}],[11,"bitxor","gfx::texture","Returns the left flags, but with all the right flags toggled.",133,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"depthstencilflags"}}],[11,"extend","","",133,null],[11,"extend","gfx::shade","",135,null],[11,"extend","gfx::memory","",134,null],[11,"extend","","",132,null],[11,"cmp","gfx::texture","",55,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::format","",148,{"i":[{"n":"self"},{"n":"r16"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::texture","",133,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::format","",146,{"i":[{"n":"self"},{"n":"r32_g32"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::memory","",132,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::format","",161,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"ordering"}}],[11,"cmp","","",139,{"i":[{"n":"self"},{"n":"r5_g5_b5_a1"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::texture","",42,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::format","",162,{"i":[{"n":"self"},{"n":"inorm"}],"o":{"n":"ordering"}}],[11,"cmp","","",28,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"n":"ordering"}}],[11,"cmp","","",138,{"i":[{"n":"self"},{"n":"r10_g10_b10_a2"}],"o":{"n":"ordering"}}],[11,"cmp","","",145,{"i":[{"n":"self"},{"n":"r16_g16"}],"o":{"n":"ordering"}}],[11,"cmp","","",159,{"i":[{"n":"self"},{"n":"r11_g11_b10"}],"o":{"n":"ordering"}}],[11,"cmp","","",149,{"i":[{"n":"self"},{"n":"r16_g16_b16"}],"o":{"n":"ordering"}}],[11,"cmp","","",143,{"i":[{"n":"self"},{"n":"d16"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::texture","",43,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::format","",140,{"i":[{"n":"self"},{"n":"r4_g4"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::texture","",49,{"i":[{"n":"self"},{"n":"wrapmode"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::format","",152,{"i":[{"n":"self"},{"n":"r8"}],"o":{"n":"ordering"}}],[11,"cmp","","",166,{"i":[{"n":"self"},{"n":"unorm"}],"o":{"n":"ordering"}}],[11,"cmp","","",165,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::texture","",44,{"i":[{"n":"self"},{"n":"cubeface"}],"o":{"n":"ordering"}}],[11,"cmp","","",53,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::format","",154,{"i":[{"n":"self"},{"n":"d32"}],"o":{"n":"ordering"}}],[11,"cmp","","",163,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"ordering"}}],[11,"cmp","","",36,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::texture","",52,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::format","",155,{"i":[{"n":"self"},{"n":"r8_g8_b8_a8"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::texture","",54,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::format","",25,{"i":[{"n":"self"},{"n":"channeltype"}],"o":{"n":"ordering"}}],[11,"cmp","","",37,{"i":[{"n":"self"},{"n":"f16"}],"o":{"n":"ordering"}}],[11,"cmp","","",34,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"n":"ordering"}}],[11,"cmp","","",142,{"i":[{"n":"self"},{"n":"d24"}],"o":{"n":"ordering"}}],[11,"cmp","","",35,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::memory","",39,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::format","",26,{"i":[{"n":"self"},{"n":"surfacetype"}],"o":{"n":"ordering"}}],[11,"cmp","","",157,{"i":[{"n":"self"},{"n":"r32_g32_b32_a32"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::texture","",45,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"ordering"}}],[11,"cmp","","",46,{"i":[{"n":"self"},{"n":"mipmap"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::format","",153,{"i":[{"n":"self"},{"n":"r16_g16_b16_a16"}],"o":{"n":"ordering"}}],[11,"cmp","","",29,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"ordering"}}],[11,"cmp","","",147,{"i":[{"n":"self"},{"n":"d24_s8"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::texture","",47,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::format","",33,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"n":"ordering"}}],[11,"cmp","","",150,{"i":[{"n":"self"},{"n":"r32_g32_b32"}],"o":{"n":"ordering"}}],[11,"cmp","","",156,{"i":[{"n":"self"},{"n":"b8_g8_r8_a8"}],"o":{"n":"ordering"}}],[11,"cmp","","",164,{"i":[{"n":"self"},{"n":"srgb"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::shade","",135,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::format","",158,{"i":[{"n":"self"},{"n":"r5_g6_b5"}],"o":{"n":"ordering"}}],[11,"cmp","","",27,{"i":[{"n":"self"},{"n":"channelsource"}],"o":{"n":"ordering"}}],[11,"cmp","","",141,{"i":[{"n":"self"},{"n":"r4_g4_b4_a4"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::memory","",134,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::format","",144,{"i":[{"n":"self"},{"n":"r8_g8"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::texture","",48,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::format","",151,{"i":[{"n":"self"},{"n":"r32"}],"o":{"n":"ordering"}}],[11,"hash","","",164,null],[11,"hash","","",29,null],[11,"hash","","",155,null],[11,"hash","","",146,null],[11,"hash","gfx::handle","",191,null],[11,"hash","gfx::shade::core","",122,null],[11,"hash","gfx::format","",161,null],[11,"hash","gfx::memory","",39,null],[11,"hash","gfx::format","",165,null],[11,"hash","","",34,null],[11,"hash","","",142,null],[11,"hash","","",140,null],[11,"hash","gfx::texture","",54,null],[11,"hash","gfx::mapping","",38,null],[11,"hash","gfx::pso","",71,null],[11,"hash","gfx::handle","",168,null],[11,"hash","gfx::format","",162,null],[11,"hash","gfx::buffer","",23,null],[11,"hash","gfx::shade::core","",120,null],[11,"hash","gfx::format","",156,null],[11,"hash","gfx::handle","",182,null],[11,"hash","gfx","",180,null],[11,"hash","gfx::texture","",133,null],[11,"hash","","",49,null],[11,"hash","","",42,null],[11,"hash","gfx::handle","",70,null],[11,"hash","gfx::format","",148,null],[11,"hash","gfx::shade::core","",123,null],[11,"hash","gfx::format","",149,null],[11,"hash","gfx::shade::core","",113,null],[11,"hash","","",109,null],[11,"hash","gfx::format","",35,null],[11,"hash","","",25,null],[11,"hash","gfx::shade::core","",118,null],[11,"hash","gfx::format","",152,null],[11,"hash","gfx::texture","",48,null],[11,"hash","gfx::handle","",179,null],[11,"hash","gfx::format","",158,null],[11,"hash","gfx::texture","",51,null],[11,"hash","gfx::format","",166,null],[11,"hash","gfx::buffer","",22,null],[11,"hash","gfx","",186,null],[11,"hash","gfx::shade::core","",61,null],[11,"hash","gfx::format","",157,null],[11,"hash","gfx::texture","",160,null],[11,"hash","gfx::pso::buffer","",75,null],[11,"hash","gfx::handle","",192,null],[11,"hash","gfx::format","",150,null],[11,"hash","","",145,null],[11,"hash","gfx::shade::core","",112,null],[11,"hash","gfx::format","",163,null],[11,"hash","gfx::handle","",188,null],[11,"hash","gfx::format","",159,null],[11,"hash","gfx::handle","",189,null],[11,"hash","gfx::memory","",132,null],[11,"hash","gfx::buffer","",169,null],[11,"hash","gfx::format","",26,null],[11,"hash","gfx::texture","",41,null],[11,"hash","gfx::format","",154,null],[11,"hash","gfx::shade::core","",107,null],[11,"hash","gfx::format","",151,null],[11,"hash","gfx::handle","",183,null],[11,"hash","gfx::shade::core","",121,null],[11,"hash","gfx","",21,null],[11,"hash","gfx::shade::core","",114,null],[11,"hash","gfx::texture","",50,null],[11,"hash","gfx","",185,null],[11,"hash","gfx::handle","",190,null],[11,"hash","","",184,null],[11,"hash","gfx::format","",37,null],[11,"hash","gfx::handle","",175,null],[11,"hash","gfx::shade::core","",106,null],[11,"hash","gfx::format","",36,null],[11,"hash","gfx::shade::core","",115,null],[11,"hash","gfx::buffer","",24,null],[11,"hash","gfx::shade::core","",124,null],[11,"hash","gfx::texture","",45,null],[11,"hash","gfx","",18,null],[11,"hash","gfx::handle","",178,null],[11,"hash","gfx::shade::core","",167,null],[11,"hash","gfx::texture","",172,null],[11,"hash","gfx::handle","",181,null],[11,"hash","gfx::shade::core","",119,null],[11,"hash","gfx::format","",144,null],[11,"hash","gfx::texture","",53,null],[11,"hash","gfx::format","",138,null],[11,"hash","gfx::handle","",187,null],[11,"hash","gfx::format","",28,null],[11,"hash","","",143,null],[11,"hash","gfx::shade::core","",111,null],[11,"hash","gfx::texture","",46,null],[11,"hash","gfx::format","",33,null],[11,"hash","gfx::texture","",55,null],[11,"hash","gfx::format","",153,null],[11,"hash","gfx","",176,null],[11,"hash","gfx::memory","",134,null],[11,"hash","gfx::format","",141,null],[11,"hash","gfx::texture","",43,null],[11,"hash","gfx::format","",139,null],[11,"hash","gfx","",177,null],[11,"hash","gfx::shade::core","",108,null],[11,"hash","","",110,null],[11,"hash","gfx::handle","",173,null],[11,"hash","gfx::texture","",47,null],[11,"hash","gfx::format","",27,null],[11,"hash","gfx::texture","",52,null],[11,"hash","gfx::shade","",135,null],[11,"hash","gfx::format","",147,null],[11,"hash","gfx::texture","",44,null],[11,"hash","gfx::handle","",170,null],[11,"bitand","gfx::memory","Returns the intersection between the two sets of flags.",132,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"access"}}],[11,"bitand","gfx::shade","Returns the intersection between the two sets of flags.",135,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"usage"}}],[11,"bitand","gfx::texture","Returns the intersection between the two sets of flags.",133,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"depthstencilflags"}}],[11,"bitand","gfx::memory","Returns the intersection between the two sets of flags.",134,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bind"}}],[11,"new_fill","gfx::state","Create a new filling rasterizer.",4,{"o":{"n":"rasterizer"}}],[11,"with_cull_back","","Add back face culling.",4,{"i":[{"n":"self"}],"o":{"n":"rasterizer"}}],[11,"with_offset","","Add polygon offset.",4,{"i":[{"n":"self"},{"n":"f32"},{"n":"i32"}],"o":{"n":"rasterizer"}}],[11,"new","","Create a new stencil state with a given function.",8,null],[11,"new","","Create a new blend state with a given equation.",14,{"i":[{"n":"equation"},{"n":"factor"},{"n":"factor"}],"o":{"n":"blend"}}],[18,"RED","","",130,null],[18,"GREEN","","",130,null],[18,"BLUE","","",130,null],[18,"ALPHA","","",130,null],[11,"empty","","Returns an empty set of flags.",130,{"o":{"n":"colormask"}}],[11,"all","","Returns the set containing all flags.",130,{"o":{"n":"colormask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",130,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",130,{"i":[{"n":"u8"}],"o":{"g":["colormask"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",130,{"i":[{"n":"u8"}],"o":{"n":"colormask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",130,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",130,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",130,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",130,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",130,null],[11,"remove","","Removes the specified flags in-place.",130,null],[11,"toggle","","Toggles the specified flags in-place.",130,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",130,null],[11,"get_usage","gfx","Return the aggregated stage usage for the set.",21,{"i":[{"n":"self"}],"o":{"n":"usage"}}],[11,"reference","","",180,null],[11,"reference","","",176,null],[11,"reference","","",186,null],[11,"reference","","",177,null],[11,"reference","","",185,null],[11,"get_total_bits","gfx::format","Return the total number of bits for this format.",26,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"get_alpha_stencil_bits","","Return the number of bits allocated for alpha and stencil.",26,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"new","","Create a new swizzle where each channel is unmapped.",28,{"o":{"n":"swizzle"}}],[11,"cast2","","Convert a 2-element slice.",33,null],[11,"cast3","","Convert a 3-element slice.",33,null],[11,"cast4","","Convert a 4-element slice.",33,null],[11,"cast_slice","","Convert a generic slice by transmutation.",33,null],[11,"cast2","","Convert a 2-element slice.",34,null],[11,"cast3","","Convert a 3-element slice.",34,null],[11,"cast4","","Convert a 4-element slice.",34,null],[11,"cast_slice","","Convert a generic slice by transmutation.",34,null],[11,"cast2","","Convert a 2-element slice.",35,null],[11,"cast3","","Convert a 3-element slice.",35,null],[11,"cast4","","Convert a 4-element slice.",35,null],[11,"cast_slice","","Convert a generic slice by transmutation.",35,null],[11,"cast2","","Convert a 2-element slice.",36,null],[11,"cast3","","Convert a 3-element slice.",36,null],[11,"cast4","","Convert a 4-element slice.",36,null],[11,"cast_slice","","Convert a generic slice by transmutation.",36,null],[11,"cast2","","Convert a 2-element slice.",37,null],[11,"cast3","","Convert a 3-element slice.",37,null],[11,"cast4","","Convert a 4-element slice.",37,null],[11,"cast_slice","","Convert a generic slice by transmutation.",37,null],[11,"get_info","gfx::handle","Get the associated information about the buffer",70,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"len","","Get the number of elements in the buffer.",70,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"get_info","","Get texture descriptor",181,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"get_dimensions","","Get target dimensions",190,null],[11,"get_texture","","Get the associated texture",190,{"i":[{"n":"self"}],"o":{"n":"rawtexture"}}],[11,"get_dimensions","","Get target dimensions",187,null],[11,"get_texture","","Get the associated texture",187,{"i":[{"n":"self"}],"o":{"n":"rawtexture"}}],[11,"get_dimensions","","Get target dimensions",178,null],[11,"get_dimensions","","Get target dimensions",175,null],[11,"get_info","","Get sampler info",189,{"i":[{"n":"self"}],"o":{"n":"samplerinfo"}}],[11,"new","","Create a new handle manager",193,{"o":{"n":"manager"}}],[11,"clear","","Clear all references",193,null],[11,"extend","","Extend with all references of another handle manager",193,null],[11,"count","","Count the total number of referenced resources",193,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"ref_buffer","","Reference a buffer",193,null],[11,"ref_shader","","Reference a shader",193,null],[11,"ref_program","","Reference a program",193,null],[11,"ref_pso","","Reference a pipeline state object",193,null],[11,"ref_texture","","Reference a texture",193,null],[11,"ref_srv","","Reference a shader resource view",193,null],[11,"ref_uav","","Reference an unordered access view",193,null],[11,"ref_rtv","","Reference an RTV",193,null],[11,"ref_dsv","","Reference a DSV",193,null],[11,"ref_sampler","","Reference a sampler",193,null],[11,"ref_fence","","Reference a fence",193,null],[18,"READ","gfx::memory","Read access",132,null],[18,"WRITE","","Write access",132,null],[18,"RW","","Full access",132,null],[11,"empty","","Returns an empty set of flags.",132,{"o":{"n":"access"}}],[11,"all","","Returns the set containing all flags.",132,{"o":{"n":"access"}}],[11,"bits","","Returns the raw value of the flags currently stored.",132,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",132,{"i":[{"n":"u8"}],"o":{"g":["access"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",132,{"i":[{"n":"u8"}],"o":{"n":"access"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",132,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",132,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",132,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",132,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",132,null],[11,"remove","","Removes the specified flags in-place.",132,null],[11,"toggle","","Toggles the specified flags in-place.",132,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",132,null],[11,"is_mutable","","Is this memory bound to be mutated ?",134,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[18,"RENDER_TARGET","","Can be rendered into.",134,null],[18,"DEPTH_STENCIL","","Can serve as a depth/stencil target.",134,null],[18,"SHADER_RESOURCE","","Can be bound to the shader for reading.",134,null],[18,"UNORDERED_ACCESS","","Can be bound to the shader for writing.",134,null],[18,"TRANSFER_SRC","","Can be transfered from.",134,null],[18,"TRANSFER_DST","","Can be transfered into.",134,null],[11,"empty","","Returns an empty set of flags.",134,{"o":{"n":"bind"}}],[11,"all","","Returns the set containing all flags.",134,{"o":{"n":"bind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",134,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",134,{"i":[{"n":"u8"}],"o":{"g":["bind"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",134,{"i":[{"n":"u8"}],"o":{"n":"bind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",134,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",134,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",134,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",134,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",134,null],[11,"remove","","Removes the specified flags in-place.",134,null],[11,"toggle","","Toggles the specified flags in-place.",134,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",134,null],[11,"get_num_fragments","gfx::texture","Return the number of actual data fragments stored per texel.",42,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"needs_resolve","","Return true if the surface has to be resolved before sampling.",42,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_dimensions","","Get texture dimensions, with 0 values where not applicable.",45,null],[11,"get_level_dimensions","","Get the dimensionality of a particular mipmap level.",45,null],[11,"get_num_levels","","Count the number of mipmap levels.",45,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"get_num_slices","","Return the number of slices for an array, or None for non-arrays.",45,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"is_cube","","Check if it's one of the cube kinds.",45,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_texel_count","","Get the total number of texels.",47,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"convert","","Convert into a differently typed format.",47,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"imageinfocommon"}}],[11,"is_inside","","Check if it fits inside given dimensions.",47,null],[11,"get_byte_count","","Get the total number of bytes.",47,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_texture","","Change the texture",48,{"i":[{"n":"self"},{"n":"u"}],"o":{"n":"texturecopyregion"}}],[11,"new","","Create a new sampler description with a given filter method and wrapping mode, using no LOD modifications.",51,{"i":[{"n":"filtermethod"},{"n":"wrapmode"}],"o":{"n":"samplerinfo"}}],[11,"to_image_info","","Get image info for a given mip.",52,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"imageinfocommon"}}],[11,"to_raw_image_info","","Get the raw image info for a given mip and a channel type.",52,{"i":[{"n":"self"},{"n":"channeltype"},{"n":"u8"}],"o":{"g":["format"],"n":"imageinfocommon"}}],[18,"RO_DEPTH","","Depth is read-only in the view.",133,null],[18,"RO_STENCIL","","Stencil is read-only in the view.",133,null],[18,"RO_DEPTH_STENCIL","","Both depth and stencil are read-only.",133,null],[11,"empty","","Returns an empty set of flags.",133,{"o":{"n":"depthstencilflags"}}],[11,"all","","Returns the set containing all flags.",133,{"o":{"n":"depthstencilflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",133,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",133,{"i":[{"n":"u8"}],"o":{"g":["depthstencilflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",133,{"i":[{"n":"u8"}],"o":{"n":"depthstencilflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",133,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",133,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",133,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",133,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",133,null],[11,"remove","","Removes the specified flags in-place.",133,null],[11,"toggle","","Toggles the specified flags in-place.",133,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",133,null],[11,"new","gfx::pso","Create a new empty PSO descriptor.",71,{"i":[{"n":"primitive"},{"n":"rasterizer"}],"o":{"n":"descriptor"}}],[11,"can_sample","gfx::shade::core","Check if this texture can be used with a sampler.",111,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[18,"VERTEX","gfx::shade","Used by the vertex shader",135,null],[18,"GEOMETRY","","Used by the geometry shader",135,null],[18,"PIXEL","","Used by the pixel shader",135,null],[18,"HULL","","Used by the hull shader",135,null],[18,"DOMAIN","","Used by the pixel shader",135,null],[11,"empty","","Returns an empty set of flags.",135,{"o":{"n":"usage"}}],[11,"all","","Returns the set containing all flags.",135,{"o":{"n":"usage"}}],[11,"bits","","Returns the raw value of the flags currently stored.",135,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",135,{"i":[{"n":"u8"}],"o":{"g":["usage"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",135,{"i":[{"n":"u8"}],"o":{"n":"usage"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",135,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",135,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",135,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",135,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",135,null],[11,"remove","","Removes the specified flags in-place.",135,null],[11,"toggle","","Toggles the specified flags in-place.",135,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",135,null],[11,"is_compatible","gfx::shade::core","Whether a value is compatible with this variable. That is, whether the value can be stored in this variable.",119,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"g":["compatibilityerror"],"n":"result"}}]],"paths":[[4,"FrontFace"],[3,"Offset"],[4,"CullFace"],[4,"RasterMethod"],[3,"Rasterizer"],[4,"Comparison"],[4,"StencilOp"],[3,"StencilSide"],[3,"Stencil"],[3,"Depth"],[4,"Equation"],[4,"BlendValue"],[4,"Factor"],[3,"BlendChannel"],[3,"Blend"],[3,"Color"],[3,"RefValues"],[8,"Device"],[4,"Primitive"],[8,"Resources"],[4,"SubmissionError"],[4,"ShaderSet"],[4,"Role"],[3,"Info"],[4,"CreationError"],[4,"ChannelType"],[4,"SurfaceType"],[4,"ChannelSource"],[3,"Swizzle"],[3,"Format"],[8,"SurfaceTyped"],[8,"ChannelTyped"],[8,"Formatted"],[3,"U8Norm"],[3,"I8Norm"],[3,"U16Norm"],[3,"I16Norm"],[3,"F16"],[4,"Error"],[4,"Usage"],[4,"CreationError"],[4,"LayerError"],[4,"AaMode"],[4,"FilterMethod"],[4,"CubeFace"],[4,"Kind"],[4,"Mipmap"],[3,"ImageInfoCommon"],[3,"TextureCopyRegion"],[4,"WrapMode"],[3,"PackedColor"],[3,"SamplerInfo"],[3,"Info"],[3,"ResourceDesc"],[3,"RenderDesc"],[3,"DepthStencilDesc"],[8,"Factory"],[4,"ResourceViewError"],[4,"TargetViewError"],[4,"CombinedError"],[8,"CommandBuffer"],[3,"ProgramInfo"],[4,"UniformValue"],[3,"Slice"],[4,"CopyError"],[4,"UpdateError"],[4,"PipelineStateError"],[4,"IndexBuffer"],[8,"FactoryExt"],[3,"Encoder"],[3,"Buffer"],[3,"Descriptor"],[3,"RawDataSet"],[4,"ElementError"],[4,"InitError"],[3,"Element"],[8,"Structure"],[8,"ToInstanceRate"],[3,"VertexBufferCommon"],[6,"InstanceRate"],[4,"Instanced"],[4,"NonInstanced"],[3,"RawVertexBuffer"],[3,"ConstantBuffer"],[3,"RawConstantBuffer"],[3,"Global"],[3,"RawGlobal"],[3,"ShaderResource"],[3,"RawShaderResource"],[3,"UnorderedAccess"],[3,"Sampler"],[3,"TextureSampler"],[3,"RenderTarget"],[3,"BlendTarget"],[3,"RawRenderTarget"],[3,"DepthTarget"],[3,"StencilTarget"],[3,"DepthStencilTarget"],[3,"Scissor"],[3,"BlendRef"],[3,"Bundle"],[8,"PipelineInit"],[8,"PipelineData"],[8,"DataLink"],[8,"DataBind"],[3,"PipelineState"],[4,"IsArray"],[4,"IsComparison"],[4,"IsMultiSample"],[4,"IsRect"],[4,"MatrixFormat"],[4,"TextureType"],[3,"SamplerType"],[4,"BaseType"],[4,"ContainerType"],[4,"Stage"],[8,"BaseTyped"],[8,"Formatted"],[3,"AttributeVar"],[3,"ConstVar"],[3,"ConstantBufferVar"],[3,"TextureVar"],[3,"UnorderedVar"],[3,"SamplerVar"],[3,"OutputVar"],[4,"CompatibilityError"],[4,"CreateShaderError"],[4,"ProgramError"],[8,"ToUniform"],[8,"IntoIndexBuffer"],[3,"ColorMask"],[3,"MultiSample"],[3,"Access"],[3,"DepthStencilFlags"],[3,"Bind"],[3,"Usage"],[3,"Writer"],[3,"CreateProgramError"],[4,"R10_G10_B10_A2"],[4,"R5_G5_B5_A1"],[4,"R4_G4"],[4,"R4_G4_B4_A4"],[4,"D24"],[4,"D16"],[4,"R8_G8"],[4,"R16_G16"],[4,"R32_G32"],[4,"D24_S8"],[4,"R16"],[4,"R16_G16_B16"],[4,"R32_G32_B32"],[4,"R32"],[4,"R8"],[4,"R16_G16_B16_A16"],[4,"D32"],[4,"R8_G8_B8_A8"],[4,"B8_G8_R8_A8"],[4,"R32_G32_B32_A32"],[4,"R5_G6_B5"],[4,"R11_G11_B10"],[3,"Lod"],[4,"Int"],[4,"Inorm"],[4,"Uint"],[4,"Srgb"],[4,"Float"],[4,"Unorm"],[3,"Program"],[3,"Program"],[3,"Raw"],[3,"RawBuffer"],[3,"Reader"],[3,"Raw"],[3,"RawTexture"],[3,"AccessInfo"],[3,"DepthStencilView"],[3,"HullShader"],[3,"GeometryShader"],[3,"RenderTargetView"],[3,"Shader"],[3,"VertexShader"],[3,"Texture"],[3,"Fence"],[3,"RawPipelineState"],[3,"ShaderResourceView"],[3,"PixelShader"],[3,"DomainShader"],[3,"RawDepthStencilView"],[3,"RawShaderResourceView"],[3,"Sampler"],[3,"RawRenderTargetView"],[3,"RawUnorderedAccessView"],[3,"UnorderedAccessView"],[3,"Manager"]]};
searchIndex["gfx_core"] = {"doc":"Low-level graphics abstraction for Rust. Mostly operates on data, not types. Designed for use by libraries and higher-level abstractions only.","items":[[0,"state","gfx_core","Fixed-function hardware state.",null,null],[4,"FrontFace","gfx_core::state","The front face winding order of a set of vertices.",null,null],[13,"Clockwise","","Clockwise winding order.",0,null],[13,"CounterClockwise","","Counter-clockwise winding order.",0,null],[6,"LineWidth","","Width of a line. Could be f32 if not for Hash deriving issues.",null,null],[6,"OffsetSlope","","Slope depth offset factor Could be f32 if not for Hash deriving issues.",null,null],[6,"OffsetUnits","","Number of units to offset, where the unit is the minimal difference in the depth value dictated by the precision of the depth buffer.",null,null],[3,"Offset","","How to offset vertices in screen space, if at all.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[4,"CullFace","","Which face, if any, to cull.",null,null],[13,"Nothing","","",2,null],[13,"Front","","",2,null],[13,"Back","","",2,null],[4,"RasterMethod","","How to rasterize a primitive.",null,null],[13,"Point","","Rasterize as a point.",3,null],[13,"Line","","Rasterize as a line with the given width.",3,null],[13,"Fill","","Rasterize as a face.",3,null],[3,"MultiSample","","Multi-sampling rasterization mode",null,null],[3,"Rasterizer","","Primitive rasterization state. Note that GL allows different raster method to be used for front and back, while this abstraction does not.",null,null],[12,"front_face","","Which vertex winding is considered to be the front face for culling.",4,null],[12,"cull_face","","Which face should be culled.",4,null],[12,"method","","How to rasterize this primitive.",4,null],[12,"offset","","Any polygon offset to apply.",4,null],[12,"samples","","Multi-sampling mode.",4,null],[4,"Comparison","","A pixel-wise comparison function.",null,null],[13,"Never","","`false`",5,null],[13,"Less","","`x < y`",5,null],[13,"LessEqual","","`x <= y`",5,null],[13,"Equal","","`x == y`",5,null],[13,"GreaterEqual","","`x >= y`",5,null],[13,"Greater","","`x > y`",5,null],[13,"NotEqual","","`x != y`",5,null],[13,"Always","","`true`",5,null],[4,"StencilOp","","Stencil mask operation.",null,null],[13,"Keep","","Keep the current value in the stencil buffer (no change).",6,null],[13,"Zero","","Set the value in the stencil buffer to zero.",6,null],[13,"Replace","","Set the stencil buffer value to `value` from `StencilSide`",6,null],[13,"IncrementClamp","","Increment the stencil buffer value, clamping to its maximum value.",6,null],[13,"IncrementWrap","","Increment the stencil buffer value, wrapping around to 0 on overflow.",6,null],[13,"DecrementClamp","","Decrement the stencil buffer value, clamping to its minimum value.",6,null],[13,"DecrementWrap","","Decrement the stencil buffer value, wrapping around to the maximum value on overflow.",6,null],[13,"Invert","","Bitwise invert the current value in the stencil buffer.",6,null],[3,"StencilSide","","Complete stencil state for a given side of a face.",null,null],[12,"fun","","Comparison function to use to determine if the stencil test passes.",7,null],[12,"mask_read","","A mask that is ANDd with both the stencil buffer value and the reference value when they are read before doing the stencil test.",7,null],[12,"mask_write","","A mask that is ANDd with the stencil value before writing to the stencil buffer.",7,null],[12,"op_fail","","What operation to do if the stencil test fails.",7,null],[12,"op_depth_fail","","What operation to do if the stenil test passes but the depth test fails.",7,null],[12,"op_pass","","What operation to do if both the depth and stencil test pass.",7,null],[3,"Stencil","","Complete stencil state, specifying how to handle the front and back side of a face.",null,null],[12,"front","","",8,null],[12,"back","","",8,null],[3,"Depth","","Depth test state.",null,null],[12,"fun","","Comparison function to use.",9,null],[12,"write","","Specify whether to write to the depth buffer or not.",9,null],[4,"Equation","","",null,null],[13,"Add","","Adds source and destination. Source and destination are multiplied by blending parameters before addition.",10,null],[13,"Sub","","Subtracts destination from source. Source and destination are multiplied by blending parameters before subtraction.",10,null],[13,"RevSub","","Subtracts source from destination. Source and destination are multiplied by blending parameters before subtraction.",10,null],[13,"Min","","Component-wise minimum value of source and destination. Blending parameters are ignored.",10,null],[13,"Max","","Component-wise maximum value of source and destination. Blending parameters are ignored.",10,null],[4,"BlendValue","","",null,null],[13,"SourceColor","","",11,null],[13,"SourceAlpha","","",11,null],[13,"DestColor","","",11,null],[13,"DestAlpha","","",11,null],[13,"ConstColor","","",11,null],[13,"ConstAlpha","","",11,null],[4,"Factor","","",null,null],[13,"Zero","","",12,null],[13,"One","","",12,null],[13,"SourceAlphaSaturated","","",12,null],[13,"ZeroPlus","","",12,null],[13,"OneMinus","","",12,null],[3,"BlendChannel","","",null,null],[12,"equation","","",13,null],[12,"source","","",13,null],[12,"destination","","",13,null],[3,"Blend","","",null,null],[12,"color","","",14,null],[12,"alpha","","",14,null],[3,"ColorMask","","",null,null],[3,"Color","","The state of an active color render target",null,null],[12,"mask","","Color mask to use.",15,null],[12,"blend","","Optional blending.",15,null],[3,"RefValues","","The complete set of the rasterizer reference values. Switching these doesn't roll the hardware context.",null,null],[12,"stencil","","Stencil front and back values.",16,null],[12,"blend","","Constant blend color.",16,null],[0,"target","gfx_core","Render target specification.",null,null],[6,"Layer","gfx_core::target","A depth value, specifying which plane to select out of a 3D texture.",null,null],[6,"Level","","Mipmap level to select in a texture.",null,null],[6,"Depth","","A single depth value from a depth buffer.",null,null],[6,"Stencil","","A single value from a stencil stencstencil buffer.",null,null],[3,"Rect","","A screen space rectangle",null,null],[12,"x","","",17,null],[12,"y","","",17,null],[12,"w","","",17,null],[12,"h","","",17,null],[6,"ColorValue","","A color with floating-point components.",null,null],[3,"Mirror","","Mirroring flags, used for blitting",null,null],[3,"VertexShader","gfx_core","",null,null],[3,"HullShader","","",null,null],[3,"DomainShader","","",null,null],[3,"GeometryShader","","",null,null],[3,"PixelShader","","",null,null],[3,"Capabilities","","Features that the device supports.",null,null],[12,"max_vertex_count","","",18,null],[12,"max_index_count","","",18,null],[12,"max_texture_size","","",18,null],[12,"max_patch_size","","",18,null],[12,"instance_base_supported","","",18,null],[12,"instance_call_supported","","",18,null],[12,"instance_rate_supported","","",18,null],[12,"vertex_base_supported","","",18,null],[12,"srgb_color_supported","","",18,null],[12,"constant_buffer_supported","","",18,null],[12,"unordered_access_view_supported","","",18,null],[12,"separate_blending_slots_supported","","",18,null],[12,"copy_buffer_supported","","",18,null],[3,"AdapterInfo","","Information about a backend adapater.",null,null],[12,"name","","Adapter name",19,null],[12,"vendor","","Vendor PCI id of the adapter",19,null],[12,"device","","PCI id of the adapter",19,null],[12,"software_rendering","","The device is based on a software rasterizer",19,null],[3,"Frame","","Handle to a backbuffer of the swapchain.",null,null],[4,"ShaderSet","","A complete set of shaders to link a program.",null,null],[13,"Simple","","Simple program: Vs-Ps",20,null],[13,"Geometry","","Geometry shader programs: Vs-Gs-Ps",20,null],[13,"Tessellated","","Tessellated TODO: Tessellated, TessellatedGeometry, TransformFeedback",20,null],[4,"Primitive","","Describes what geometric primitives are created from vertex data.",null,null],[13,"PointList","","Each vertex represents a single point.",21,null],[13,"LineList","","Each pair of vertices represent a single line segment. For example, with `[a, b, c, d, e]`, `a` and `b` form a line, `c` and `d` form a line, and `e` is discarded.",21,null],[13,"LineStrip","","Every two consecutive vertices represent a single line segment. Visually forms a \"path\" of lines, as they are all connected. For example, with `[a, b, c]`, `a` and `b` form a line line, and `b` and `c` form a line.",21,null],[13,"TriangleList","","Each triplet of vertices represent a single triangle. For example, with `[a, b, c, d, e]`, `a`, `b`, and `c` form a triangle, `d` and `e` are discarded.",21,null],[13,"TriangleStrip","","Every three consecutive vertices represent a single triangle. For example, with `[a, b, c, d]`, `a`, `b`, and `c` form a triangle, and `b`, `c`, and `d` form a triangle.",21,null],[13,"LineListAdjacency","","Each quadtruplet of vertices represent a single line segment with adjacency information. For example, with `[a, b, c, d]`, `b` and `c` form a line, and `a` and `d` are the adjacent vertices.",21,null],[13,"LineStripAdjacency","","Every four consecutive vertices represent a single line segment with adjacency information. For example, with `[a, b, c, d, e]`, `[a, b, c, d]` form a line segment with adjacency, and `[b, c, d, e]` form a line segment with adjacency.",21,null],[13,"TriangleListAdjacency","","Each sextuplet of vertices represent a single traingle with adjacency information. For example, with `[a, b, c, d, e, f]`, `a`, `c`, and `e` form a traingle, and `b`, `d`, and `f` are the adjacent vertices, where `b` is adjacent to the edge formed by `a` and `c`, `d` is adjacent to the edge `c` and `e`, and `f` is adjacent to the edge `e` and `a`.",21,null],[13,"TriangleStripAdjacency","","Every even-numbered vertex (every other starting from the first) represents an additional vertex for the triangle strip, while odd-numbered vertices (every other starting from the second) represent adjacent vertices. For example, with `[a, b, c, d, e, f, g, h]`, `[a, c, e, g]` form a triangle strip, and `[b, d, f, h]` are the adjacent vertices, where `b`, `d`, and `f` are adjacent to the first triangle in the strip, and `d`, `f`, and `h` are adjacent to the second.",21,null],[13,"PatchList","","Patch list, used with shaders capable of producing primitives on their own (tessellation)",21,null],[4,"IndexType","","A type of each index value in the slice's index buffer",null,null],[13,"U16","","",22,null],[13,"U32","","",22,null],[4,"SubmissionError","","",null,null],[13,"AccessOverlap","","",23,null],[0,"buffer","","Memory buffers",null,null],[3,"Raw","gfx_core::buffer","Untyped buffer",null,null],[3,"Info","","An information block that is immutable and associated to each buffer.",null,null],[12,"role","","Role",24,null],[12,"usage","","Usage hint",24,null],[12,"bind","","Bind flags",24,null],[12,"size","","Size in bytes",24,null],[12,"stride","","Stride of a single element, in bytes. Only used for structured buffers that you use via shader resource / unordered access views.",24,null],[4,"Role","","Role of the memory buffer.",null,null],[13,"Vertex","","Generic vertex buffer",25,null],[13,"Index","","Index buffer",25,null],[13,"Constant","","Constant buffer",25,null],[13,"Staging","","Staging buffer",25,null],[4,"CreationError","","Error creating a buffer.",null,null],[13,"UnsupportedBind","","Some of the bind flags are not supported.",26,null],[13,"Other","","Unknown other error.",26,null],[13,"UnsupportedUsage","","Usage mode is not supported",26,null],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_info","","Get buffer info",27,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"is_mapped","","Is this buffer mapped ?",27,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",27,{"i":[{"n":"self"},{"n":"h"}]}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"role"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",25,null],[11,"eq","","",25,{"i":[{"n":"self"},{"n":"role"}],"o":{"n":"bool"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",24,null],[11,"eq","","",24,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"ne","","",24,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"creationerror"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",26,null],[11,"eq","","",26,{"i":[{"n":"self"},{"n":"creationerror"}],"o":{"n":"bool"}}],[11,"ne","","",26,{"i":[{"n":"self"},{"n":"creationerror"}],"o":{"n":"bool"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",26,{"i":[{"n":"self"}],"o":{"n":"str"}}],[0,"command","gfx_core","Command Buffer device interface",null,null],[3,"AccessInfo","gfx_core::command","Informations about what is accessed by a bunch of commands.",null,null],[3,"AccessGuard","","",null,null],[3,"AccessGuardBuffers","","",null,null],[3,"AccessGuardBuffersChain","","",null,null],[4,"ClearColor","","A universal clear color supporting integet formats as well as the standard floating-point.",null,null],[13,"Float","","Standard floating-point vec4 color",28,null],[13,"Int","","Integer vector to clear ivec4 targets.",28,null],[13,"Uint","","Unsigned int vector to clear uvec4 targets.",28,null],[6,"InstanceParams","","Optional instance parameters: (instance count, buffer offset)",null,null],[6,"AccessInfoBuffers","","",null,null],[8,"Buffer","","An interface of the abstract command buffer. It collects commands in an efficient API-specific manner, to be ready for execution on the device.",null,null],[10,"reset","","Reset the command buffer contents, retain the allocated storage",29,{"i":[{"n":"self"}]}],[10,"bind_pipeline_state","","Bind a pipeline state object",29,null],[10,"bind_vertex_buffers","","Bind a complete set of vertex buffers",29,{"i":[{"n":"self"},{"n":"vertexbufferset"}]}],[10,"bind_constant_buffers","","Bind a complete set of constant buffers",29,null],[10,"bind_global_constant","","Bind a global constant",29,{"i":[{"n":"self"},{"n":"location"},{"n":"uniformvalue"}]}],[10,"bind_resource_views","","Bind a complete set of shader resource views",29,null],[10,"bind_unordered_views","","Bind a complete set of unordered access views",29,null],[10,"bind_samplers","","Bind a complete set of samplers",29,null],[10,"bind_pixel_targets","","Bind a complete set of pixel targets, including multiple colors views and an optional depth/stencil view.",29,{"i":[{"n":"self"},{"n":"pixeltargetset"}]}],[10,"bind_index","","Bind an index buffer",29,null],[10,"set_scissor","","Set scissor rectangle",29,{"i":[{"n":"self"},{"n":"rect"}]}],[10,"set_ref_values","","Set reference values for the blending and stencil front/back",29,{"i":[{"n":"self"},{"n":"refvalues"}]}],[10,"copy_buffer","","Copy part of a buffer to another",29,null],[10,"copy_buffer_to_texture","","Copy part of a buffer to a texture",29,null],[10,"copy_texture_to_buffer","","Copy part of a texture to a buffer",29,null],[10,"copy_texture_to_texture","","Copy part of one texture into another",29,{"i":[{"n":"self"},{"n":"texturecopyregion"},{"n":"texturecopyregion"}]}],[10,"update_buffer","","Update a vertex/index/uniform buffer",29,null],[10,"update_texture","","Update a texture",29,null],[10,"generate_mipmap","","",29,null],[10,"clear_color","","Clear color target",29,null],[10,"clear_depth_stencil","","",29,null],[10,"call_draw","","Draw a primitive",29,{"i":[{"n":"self"},{"n":"vertexcount"},{"n":"vertexcount"},{"g":["instanceparams"],"n":"option"}]}],[10,"call_draw_indexed","","Draw a primitive with index buffer",29,{"i":[{"n":"self"},{"n":"vertexcount"},{"n":"vertexcount"},{"n":"vertexcount"},{"g":["instanceparams"],"n":"option"}]}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"clearcolor"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",28,{"i":[{"n":"self"},{"n":"clearcolor"}],"o":{"n":"bool"}}],[11,"ne","","",28,{"i":[{"n":"self"},{"n":"clearcolor"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",28,{"i":[{"n":"self"},{"n":"clearcolor"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",28,{"i":[{"n":"self"},{"n":"clearcolor"}],"o":{"n":"bool"}}],[11,"le","","",28,{"i":[{"n":"self"},{"n":"clearcolor"}],"o":{"n":"bool"}}],[11,"gt","","",28,{"i":[{"n":"self"},{"n":"clearcolor"}],"o":{"n":"bool"}}],[11,"ge","","",28,{"i":[{"n":"self"},{"n":"clearcolor"}],"o":{"n":"bool"}}],[11,"from","","",28,null],[11,"from","","",28,null],[11,"from","","",28,null],[11,"from","","",28,null],[11,"from","","",28,null],[11,"from","","",28,null],[11,"from","","",28,null],[11,"from","","",28,null],[11,"from","","",28,null],[11,"from","","",28,{"i":[{"n":"f32"}],"o":{"n":"clearcolor"}}],[11,"from","","",28,{"i":[{"n":"i32"}],"o":{"n":"clearcolor"}}],[11,"from","","",28,{"i":[{"n":"u32"}],"o":{"n":"clearcolor"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"accessinfo"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",30,{"i":[{"n":"self"},{"n":"accessinfo"}],"o":{"n":"bool"}}],[11,"ne","","",30,{"i":[{"n":"self"},{"n":"accessinfo"}],"o":{"n":"bool"}}],[11,"new","","Creates empty access informations",30,{"o":{"n":"self"}}],[11,"clear","","Clear access informations",30,{"i":[{"n":"self"}]}],[11,"buffer_read","","Register a buffer read access",30,{"i":[{"n":"self"},{"n":"rawbuffer"}]}],[11,"buffer_write","","Register a buffer write access",30,{"i":[{"n":"self"},{"n":"rawbuffer"}]}],[11,"mapped_reads","","Returns the mapped buffers that The GPU will read from",30,{"i":[{"n":"self"}],"o":{"n":"accessinfobuffers"}}],[11,"mapped_writes","","Returns the mapped buffers that The GPU will write to",30,{"i":[{"n":"self"}],"o":{"n":"accessinfobuffers"}}],[11,"has_mapped_reads","","Is there any mapped buffer reads ?",30,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"has_mapped_writes","","Is there any mapped buffer writes ?",30,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"take_accesses","","Takes all the accesses necessary for submission",30,{"i":[{"n":"self"}],"o":{"g":["accessguard"],"n":"submissionresult"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"access_mapped_reads","","Returns the mapped buffers that The GPU will read from, with exclusive acces to their mapping",31,{"i":[{"n":"self"}],"o":{"n":"accessguardbuffers"}}],[11,"access_mapped_writes","","Returns the mapped buffers that The GPU will write to, with exclusive acces to their mapping",31,{"i":[{"n":"self"}],"o":{"n":"accessguardbuffers"}}],[11,"access_mapped","","",31,{"i":[{"n":"self"}],"o":{"n":"accessguardbufferschain"}}],[11,"deref","","",31,null],[11,"drop","","",31,{"i":[{"n":"self"}]}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",32,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",33,{"i":[{"n":"self"}],"o":{"n":"option"}}],[0,"dummy","gfx_core","Dummy backend implementation to test the code for compile errors outside of the graphics development environment.",null,null],[3,"DummyDevice","gfx_core::dummy","Dummy device which does minimal work, just to allow testing gfx-rs apps for compilation.",null,null],[3,"DummyFence","","Dummy fence that does nothing.",null,null],[3,"DummyMapping","","Dummy mapping which will crash on use.",null,null],[3,"DummyCommandBuffer","","Dummy command buffer, which ignores all the calls.",null,null],[4,"DummyResources","","Dummy resources phantom type",null,null],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"dummyresources"}}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",34,null],[11,"eq","","",34,{"i":[{"n":"self"},{"n":"dummyresources"}],"o":{"n":"bool"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"dummyfence"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",35,null],[11,"eq","","",35,{"i":[{"n":"self"},{"n":"dummyfence"}],"o":{"n":"bool"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"dummymapping"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",36,null],[11,"eq","","",36,{"i":[{"n":"self"},{"n":"dummymapping"}],"o":{"n":"bool"}}],[11,"new","","Create a new dummy device",37,{"o":{"n":"dummydevice"}}],[11,"reset","","",38,{"i":[{"n":"self"}]}],[11,"bind_pipeline_state","","",38,null],[11,"bind_vertex_buffers","","",38,{"i":[{"n":"self"},{"g":["dummyresources"],"n":"vertexbufferset"}]}],[11,"bind_constant_buffers","","",38,null],[11,"bind_global_constant","","",38,{"i":[{"n":"self"},{"n":"location"},{"n":"uniformvalue"}]}],[11,"bind_resource_views","","",38,null],[11,"bind_unordered_views","","",38,null],[11,"bind_samplers","","",38,null],[11,"bind_pixel_targets","","",38,{"i":[{"n":"self"},{"g":["dummyresources"],"n":"pixeltargetset"}]}],[11,"bind_index","","",38,null],[11,"set_scissor","","",38,{"i":[{"n":"self"},{"n":"rect"}]}],[11,"set_ref_values","","",38,{"i":[{"n":"self"},{"n":"refvalues"}]}],[11,"copy_buffer","","",38,null],[11,"copy_buffer_to_texture","","",38,null],[11,"copy_texture_to_buffer","","",38,null],[11,"copy_texture_to_texture","","",38,{"i":[{"n":"self"},{"n":"texturecopyregion"},{"n":"texturecopyregion"}]}],[11,"update_buffer","","",38,null],[11,"update_texture","","",38,null],[11,"generate_mipmap","","",38,null],[11,"clear_color","","",38,null],[11,"clear_depth_stencil","","",38,null],[11,"call_draw","","",38,{"i":[{"n":"self"},{"n":"vertexcount"},{"n":"vertexcount"},{"g":["instanceparams"],"n":"option"}]}],[11,"call_draw_indexed","","",38,{"i":[{"n":"self"},{"n":"vertexcount"},{"n":"vertexcount"},{"n":"vertexcount"},{"g":["instanceparams"],"n":"option"}]}],[11,"get_capabilities","","",37,{"i":[{"n":"self"}],"o":{"n":"capabilities"}}],[11,"pin_submitted_resources","","",37,{"i":[{"n":"self"},{"n":"manager"}]}],[11,"submit","","",37,{"i":[{"n":"self"},{"n":"dummycommandbuffer"},{"n":"accessinfo"}],"o":{"n":"submissionresult"}}],[11,"fenced_submit","","",37,null],[11,"wait_fence","","",37,{"i":[{"n":"self"},{"n":"fence"}]}],[11,"cleanup","","",37,{"i":[{"n":"self"}]}],[0,"factory","gfx_core","Resource factory",null,null],[4,"ResourceViewError","gfx_core::factory","Error creating either a ShaderResourceView, or UnorderedAccessView.",null,null],[13,"NoBindFlag","","The corresponding bind flag is not present in the texture.",39,null],[13,"Channel","","Selected channel type is not supported for this texture.",39,null],[13,"Layer","","Selected layer can not be viewed for this texture.",39,null],[13,"Unsupported","","The backend was refused for some reason.",39,null],[4,"TargetViewError","","Error creating either a RenderTargetView, or DepthStencilView.",null,null],[13,"NoBindFlag","","The `RENDER_TARGET`/`DEPTH_STENCIL` flag is not present in the texture.",40,null],[13,"Level","","Selected mip level doesn't exist.",40,null],[13,"Layer","","Selected array layer doesn't exist.",40,null],[13,"Channel","","Selected channel type is not supported for this texture.",40,null],[13,"Unsupported","","The backend was refused for some reason.",40,null],[13,"NotDetached","","The RTV cannot be changed due to the references to it existing.",40,null],[4,"CombinedError","","An error from creating textures with views at the same time.",null,null],[13,"Texture","","Failed to create the raw texture.",41,null],[13,"Resource","","Failed to create SRV or UAV.",41,null],[13,"Target","","Failed to create RTV or DSV.",41,null],[8,"Factory","","Overview",null,null],[10,"get_capabilities","","Returns the capabilities of this `Factory`. This usually depends on the graphics API being used.",42,{"i":[{"n":"self"}],"o":{"n":"capabilities"}}],[10,"create_buffer_raw","","",42,{"i":[{"n":"self"},{"n":"info"}],"o":{"g":["rawbuffer","creationerror"],"n":"result"}}],[10,"create_buffer_immutable_raw","","",42,null],[11,"create_buffer_immutable","","",42,null],[11,"create_buffer","","",42,{"i":[{"n":"self"},{"n":"usize"},{"n":"role"},{"n":"usage"},{"n":"bind"}],"o":{"g":["buffer","creationerror"],"n":"result"}}],[10,"create_pipeline_state_raw","","Creates a new `RawPipelineState`. To create a safely typed `PipelineState`, see the `FactoryExt` trait and `pso` module, both in the `gfx` crate.",42,{"i":[{"n":"self"},{"n":"program"},{"n":"descriptor"}],"o":{"g":["rawpipelinestate","creationerror"],"n":"result"}}],[10,"create_program","","Creates a new shader `Program` for the supplied `ShaderSet`.",42,{"i":[{"n":"self"},{"n":"shaderset"}],"o":{"g":["program","createprogramerror"],"n":"result"}}],[10,"create_shader","","Compiles a shader source into a `Shader` object that can be used to create a shader `Program`.",42,null],[11,"create_shader_vertex","","Compiles a `VertexShader` from source.",42,null],[11,"create_shader_hull","","Compiles a `HullShader` from source.",42,null],[11,"create_shader_domain","","Compiles a `VertexShader` from source.",42,null],[11,"create_shader_geometry","","Compiles a `GeometryShader` from source.",42,null],[11,"create_shader_pixel","","Compiles a `PixelShader` from source. This is the same as what some APIs call a fragment shader.",42,null],[10,"create_sampler","","",42,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"sampler"}}],[10,"read_mapping","","Acquire a mapping Reader",42,{"i":[{"n":"self"},{"n":"buffer"}],"o":{"g":["reader","error"],"n":"result"}}],[10,"write_mapping","","Acquire a mapping Writer",42,{"i":[{"n":"self"},{"n":"buffer"}],"o":{"g":["writer","error"],"n":"result"}}],[10,"create_texture_raw","","Create a new empty raw texture with no data. The channel type parameter is a hint, required to assist backends that have no concept of typeless formats (OpenGL). The initial data, if given, has to be provided for all mip levels and slices: Slice0.Mip0, Slice0.Mip1, ..., Slice1.Mip0, ...",42,{"i":[{"n":"self"},{"n":"info"},{"g":["channeltype"],"n":"option"},{"n":"option"}],"o":{"g":["rawtexture","creationerror"],"n":"result"}}],[10,"view_buffer_as_shader_resource_raw","","",42,{"i":[{"n":"self"},{"n":"rawbuffer"},{"n":"format"}],"o":{"g":["rawshaderresourceview","resourceviewerror"],"n":"result"}}],[10,"view_buffer_as_unordered_access_raw","","",42,{"i":[{"n":"self"},{"n":"rawbuffer"}],"o":{"g":["rawunorderedaccessview","resourceviewerror"],"n":"result"}}],[10,"view_texture_as_shader_resource_raw","","",42,{"i":[{"n":"self"},{"n":"rawtexture"},{"n":"resourcedesc"}],"o":{"g":["rawshaderresourceview","resourceviewerror"],"n":"result"}}],[10,"view_texture_as_unordered_access_raw","","",42,{"i":[{"n":"self"},{"n":"rawtexture"}],"o":{"g":["rawunorderedaccessview","resourceviewerror"],"n":"result"}}],[10,"view_texture_as_render_target_raw","","",42,{"i":[{"n":"self"},{"n":"rawtexture"},{"n":"renderdesc"}],"o":{"g":["rawrendertargetview","targetviewerror"],"n":"result"}}],[10,"view_texture_as_depth_stencil_raw","","",42,{"i":[{"n":"self"},{"n":"rawtexture"},{"n":"depthstencildesc"}],"o":{"g":["rawdepthstencilview","targetviewerror"],"n":"result"}}],[11,"create_texture","","",42,{"i":[{"n":"self"},{"n":"kind"},{"n":"level"},{"n":"bind"},{"n":"usage"},{"g":["channeltype"],"n":"option"}],"o":{"g":["texture","creationerror"],"n":"result"}}],[11,"view_buffer_as_shader_resource","","",42,{"i":[{"n":"self"},{"n":"buffer"}],"o":{"g":["shaderresourceview","resourceviewerror"],"n":"result"}}],[11,"view_buffer_as_unordered_access","","",42,{"i":[{"n":"self"},{"n":"buffer"}],"o":{"g":["unorderedaccessview","resourceviewerror"],"n":"result"}}],[11,"view_texture_as_shader_resource","","",42,null],[11,"view_texture_as_unordered_access","","",42,{"i":[{"n":"self"},{"n":"texture"}],"o":{"g":["unorderedaccessview","resourceviewerror"],"n":"result"}}],[11,"view_texture_as_render_target","","",42,{"i":[{"n":"self"},{"n":"texture"},{"n":"level"},{"g":["layer"],"n":"option"}],"o":{"g":["rendertargetview","targetviewerror"],"n":"result"}}],[11,"view_texture_as_depth_stencil","","",42,{"i":[{"n":"self"},{"n":"texture"},{"n":"level"},{"g":["layer"],"n":"option"},{"n":"depthstencilflags"}],"o":{"g":["depthstencilview","targetviewerror"],"n":"result"}}],[11,"view_texture_as_depth_stencil_trivial","","",42,{"i":[{"n":"self"},{"n":"texture"}],"o":{"g":["depthstencilview","targetviewerror"],"n":"result"}}],[11,"create_texture_immutable_u8","","",42,null],[11,"create_texture_immutable","","",42,null],[11,"create_render_target","","",42,{"i":[{"n":"self"},{"n":"size"},{"n":"size"}],"o":{"g":["combinederror"],"n":"result"}}],[11,"create_depth_stencil","","",42,{"i":[{"n":"self"},{"n":"size"},{"n":"size"}],"o":{"g":["combinederror"],"n":"result"}}],[11,"create_depth_stencil_view_only","","",42,{"i":[{"n":"self"},{"n":"size"},{"n":"size"}],"o":{"g":["depthstencilview","combinederror"],"n":"result"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"resourceviewerror"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",39,{"i":[{"n":"self"},{"n":"resourceviewerror"}],"o":{"n":"bool"}}],[11,"ne","","",39,{"i":[{"n":"self"},{"n":"resourceviewerror"}],"o":{"n":"bool"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",39,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",39,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"targetviewerror"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",40,{"i":[{"n":"self"},{"n":"targetviewerror"}],"o":{"n":"bool"}}],[11,"ne","","",40,{"i":[{"n":"self"},{"n":"targetviewerror"}],"o":{"n":"bool"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",40,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",40,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"combinederror"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",41,{"i":[{"n":"self"},{"n":"combinederror"}],"o":{"n":"bool"}}],[11,"ne","","",41,{"i":[{"n":"self"},{"n":"combinederror"}],"o":{"n":"bool"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",41,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",41,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"from","","",41,{"i":[{"n":"creationerror"}],"o":{"n":"combinederror"}}],[11,"from","","",41,{"i":[{"n":"resourceviewerror"}],"o":{"n":"combinederror"}}],[11,"from","","",41,{"i":[{"n":"targetviewerror"}],"o":{"n":"combinederror"}}],[0,"format","gfx_core","Universal format specification. Applicable to textures, views, and vertex buffers.",null,null],[3,"Swizzle","gfx_core::format","Channel swizzle configuration for the resource views. Note: It's not currently mirrored at compile-time, thus providing less safety and convenience.",null,null],[12,"0","","",43,null],[12,"1","","",43,null],[12,"2","","",43,null],[12,"3","","",43,null],[3,"Format","","Complete run-time surface format.",null,null],[12,"0","","",44,null],[12,"1","","",44,null],[3,"U8Norm","","",null,null],[12,"0","","",45,null],[3,"I8Norm","","",null,null],[12,"0","","",46,null],[3,"U16Norm","","",null,null],[12,"0","","",47,null],[3,"I16Norm","","",null,null],[12,"0","","",48,null],[3,"F16","","",null,null],[12,"0","","",49,null],[4,"ChannelType","","Type of a surface channel. This is how we interpret the storage allocated with `SurfaceType`.",null,null],[13,"Int","","",50,null],[13,"Uint","","",50,null],[13,"Inorm","","",50,null],[13,"Unorm","","",50,null],[13,"Float","","",50,null],[13,"Srgb","","",50,null],[4,"Int","","",null,null],[4,"Uint","","",null,null],[4,"Inorm","","",null,null],[4,"Unorm","","",null,null],[4,"Float","","",null,null],[4,"Srgb","","",null,null],[4,"SurfaceType","","Type of the allocated texture surface. It is supposed to only carry information about the number of bits per each channel. The actual types are up to the views to decide and interpret. The actual components are up to the swizzle to define.",null,null],[13,"R4_G4","","",51,null],[13,"R4_G4_B4_A4","","",51,null],[13,"R5_G5_B5_A1","","",51,null],[13,"R5_G6_B5","","",51,null],[13,"R8","","",51,null],[13,"R8_G8","","",51,null],[13,"R8_G8_B8_A8","","",51,null],[13,"R10_G10_B10_A2","","",51,null],[13,"R11_G11_B10","","",51,null],[13,"R16","","",51,null],[13,"R16_G16","","",51,null],[13,"R16_G16_B16","","",51,null],[13,"R16_G16_B16_A16","","",51,null],[13,"R32","","",51,null],[13,"R32_G32","","",51,null],[13,"R32_G32_B32","","",51,null],[13,"R32_G32_B32_A32","","",51,null],[13,"B8_G8_R8_A8","","",51,null],[13,"D16","","",51,null],[13,"D24","","",51,null],[13,"D24_S8","","",51,null],[13,"D32","","",51,null],[4,"R4_G4","","",null,null],[4,"R4_G4_B4_A4","","",null,null],[4,"R5_G5_B5_A1","","",null,null],[4,"R5_G6_B5","","",null,null],[4,"R8","","",null,null],[4,"R8_G8","","",null,null],[4,"R8_G8_B8_A8","","",null,null],[4,"R10_G10_B10_A2","","",null,null],[4,"R11_G11_B10","","",null,null],[4,"R16","","",null,null],[4,"R16_G16","","",null,null],[4,"R16_G16_B16","","",null,null],[4,"R16_G16_B16_A16","","",null,null],[4,"R32","","",null,null],[4,"R32_G32","","",null,null],[4,"R32_G32_B32","","",null,null],[4,"R32_G32_B32_A32","","",null,null],[4,"B8_G8_R8_A8","","",null,null],[4,"D16","","",null,null],[4,"D24","","",null,null],[4,"D24_S8","","",null,null],[4,"D32","","",null,null],[4,"ChannelSource","","Source channel in a swizzle configuration. Some may redirect onto different physical channels, some may be hardcoded to 0 or 1.",null,null],[13,"Zero","","",52,null],[13,"One","","",52,null],[13,"X","","",52,null],[13,"Y","","",52,null],[13,"Z","","",52,null],[13,"W","","",52,null],[6,"Vec1","","Abstracted 1-element container for macro internal use",null,null],[6,"Vec2","","Abstracted 2-element container for macro internal use",null,null],[6,"Vec3","","Abstracted 3-element container for macro internal use",null,null],[6,"Vec4","","Abstracted 4-element container for macro internal use",null,null],[6,"Rgba8","","Standard 8bits RGBA format.",null,null],[6,"Srgba8","","Standard 8bit gamma transforming RGB format.",null,null],[6,"Rgb10a2F","","Standard HDR floating-point format with 10 bits for RGB components and 2 bits for the alpha.",null,null],[6,"Rgba16F","","Standard 16-bit floating-point RGBA format.",null,null],[6,"Rgba32F","","Standard 32-bit floating-point RGBA format.",null,null],[6,"Bgra8","","Standard 8bits BGRA format.",null,null],[6,"Depth","","Standard 24-bit depth format.",null,null],[6,"DepthStencil","","Standard 24-bit depth format with 8-bit stencil.",null,null],[6,"Depth32F","","Standard 32-bit floating-point depth format.",null,null],[8,"SurfaceTyped","","Compile-time surface type trait.",null,null],[16,"DataType","","The corresponding data type to be passed from CPU.",53,null],[10,"get_surface_type","","Return the run-time value of the type.",53,{"o":{"n":"surfacetype"}}],[8,"BufferSurface","","An ability of a surface type to be used for vertex buffers.",null,null],[8,"TextureSurface","","An ability of a surface type to be used for textures.",null,null],[8,"RenderSurface","","An ability of a surface type to be used for render targets.",null,null],[8,"DepthSurface","","An ability of a surface type to be used for depth targets.",null,null],[8,"StencilSurface","","An ability of a surface type to be used for stencil targets.",null,null],[8,"ChannelTyped","","Compile-time channel type trait.",null,null],[16,"ShaderType","","Shader-visible type that corresponds to this channel. For example, normalized integers are visible as floats.",54,null],[10,"get_channel_type","","Return the run-time value of the type.",54,{"o":{"n":"channeltype"}}],[8,"TextureChannel","","An ability of a channel type to be used for textures.",null,null],[8,"RenderChannel","","An ability of a channel type to be used for render targets.",null,null],[8,"BlendChannel","","An ability of a channel type to be used for blended render targets.",null,null],[8,"Formatted","","Compile-time full format trait.",null,null],[16,"Surface","","Associated surface type.",55,null],[16,"Channel","","Associated channel type.",55,null],[16,"View","","Shader view type of this format.",55,null],[11,"get_format","","Return the run-time value of the type.",55,{"o":{"n":"format"}}],[8,"BufferFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthFormat","","Ability to be used for depth targets.",null,null],[8,"StencilFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthStencilFormat","","Ability to be used for depth+stencil targets.",null,null],[8,"TextureFormat","","Ability to be used for textures.",null,null],[8,"RenderFormat","","Ability to be used for render targets.",null,null],[8,"BlendFormat","","Ability to be used for blended render targets.",null,null],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"channeltype"}}],[11,"fmt","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",50,null],[11,"cmp","","",50,{"i":[{"n":"self"},{"n":"channeltype"}],"o":{"n":"ordering"}}],[11,"eq","","",50,{"i":[{"n":"self"},{"n":"channeltype"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",50,{"i":[{"n":"self"},{"n":"channeltype"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"int"}}],[11,"fmt","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",56,null],[11,"cmp","","",56,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"ordering"}}],[11,"eq","","",56,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",56,{"i":[{"n":"self"},{"n":"int"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_channel_type","","",56,{"o":{"n":"channeltype"}}],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"uint"}}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",57,null],[11,"cmp","","",57,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"ordering"}}],[11,"eq","","",57,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",57,{"i":[{"n":"self"},{"n":"uint"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_channel_type","","",57,{"o":{"n":"channeltype"}}],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"inorm"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",58,null],[11,"cmp","","",58,{"i":[{"n":"self"},{"n":"inorm"}],"o":{"n":"ordering"}}],[11,"eq","","",58,{"i":[{"n":"self"},{"n":"inorm"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",58,{"i":[{"n":"self"},{"n":"inorm"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_channel_type","","",58,{"o":{"n":"channeltype"}}],[11,"clone","","",59,{"i":[{"n":"self"}],"o":{"n":"unorm"}}],[11,"fmt","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",59,null],[11,"cmp","","",59,{"i":[{"n":"self"},{"n":"unorm"}],"o":{"n":"ordering"}}],[11,"eq","","",59,{"i":[{"n":"self"},{"n":"unorm"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",59,{"i":[{"n":"self"},{"n":"unorm"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_channel_type","","",59,{"o":{"n":"channeltype"}}],[11,"clone","","",60,{"i":[{"n":"self"}],"o":{"n":"float"}}],[11,"fmt","","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",60,null],[11,"cmp","","",60,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"ordering"}}],[11,"eq","","",60,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",60,{"i":[{"n":"self"},{"n":"float"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_channel_type","","",60,{"o":{"n":"channeltype"}}],[11,"clone","","",61,{"i":[{"n":"self"}],"o":{"n":"srgb"}}],[11,"fmt","","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",61,null],[11,"cmp","","",61,{"i":[{"n":"self"},{"n":"srgb"}],"o":{"n":"ordering"}}],[11,"eq","","",61,{"i":[{"n":"self"},{"n":"srgb"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",61,{"i":[{"n":"self"},{"n":"srgb"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_channel_type","","",61,{"o":{"n":"channeltype"}}],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"surfacetype"}}],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",51,null],[11,"cmp","","",51,{"i":[{"n":"self"},{"n":"surfacetype"}],"o":{"n":"ordering"}}],[11,"eq","","",51,{"i":[{"n":"self"},{"n":"surfacetype"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",51,{"i":[{"n":"self"},{"n":"surfacetype"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_total_bits","","Return the total number of bits for this format.",51,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"get_alpha_stencil_bits","","Return the number of bits allocated for alpha and stencil.",51,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"r4_g4"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",62,null],[11,"cmp","","",62,{"i":[{"n":"self"},{"n":"r4_g4"}],"o":{"n":"ordering"}}],[11,"eq","","",62,{"i":[{"n":"self"},{"n":"r4_g4"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",62,{"i":[{"n":"self"},{"n":"r4_g4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",62,{"o":{"n":"surfacetype"}}],[11,"clone","","",63,{"i":[{"n":"self"}],"o":{"n":"r4_g4_b4_a4"}}],[11,"fmt","","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",63,null],[11,"cmp","","",63,{"i":[{"n":"self"},{"n":"r4_g4_b4_a4"}],"o":{"n":"ordering"}}],[11,"eq","","",63,{"i":[{"n":"self"},{"n":"r4_g4_b4_a4"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",63,{"i":[{"n":"self"},{"n":"r4_g4_b4_a4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",63,{"o":{"n":"surfacetype"}}],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"r5_g5_b5_a1"}}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",64,null],[11,"cmp","","",64,{"i":[{"n":"self"},{"n":"r5_g5_b5_a1"}],"o":{"n":"ordering"}}],[11,"eq","","",64,{"i":[{"n":"self"},{"n":"r5_g5_b5_a1"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",64,{"i":[{"n":"self"},{"n":"r5_g5_b5_a1"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",64,{"o":{"n":"surfacetype"}}],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"r5_g6_b5"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",65,null],[11,"cmp","","",65,{"i":[{"n":"self"},{"n":"r5_g6_b5"}],"o":{"n":"ordering"}}],[11,"eq","","",65,{"i":[{"n":"self"},{"n":"r5_g6_b5"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",65,{"i":[{"n":"self"},{"n":"r5_g6_b5"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",65,{"o":{"n":"surfacetype"}}],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"r8"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",66,null],[11,"cmp","","",66,{"i":[{"n":"self"},{"n":"r8"}],"o":{"n":"ordering"}}],[11,"eq","","",66,{"i":[{"n":"self"},{"n":"r8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",66,{"i":[{"n":"self"},{"n":"r8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",66,{"o":{"n":"surfacetype"}}],[11,"clone","","",67,{"i":[{"n":"self"}],"o":{"n":"r8_g8"}}],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",67,null],[11,"cmp","","",67,{"i":[{"n":"self"},{"n":"r8_g8"}],"o":{"n":"ordering"}}],[11,"eq","","",67,{"i":[{"n":"self"},{"n":"r8_g8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",67,{"i":[{"n":"self"},{"n":"r8_g8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",67,{"o":{"n":"surfacetype"}}],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"r8_g8_b8_a8"}}],[11,"fmt","","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",68,null],[11,"cmp","","",68,{"i":[{"n":"self"},{"n":"r8_g8_b8_a8"}],"o":{"n":"ordering"}}],[11,"eq","","",68,{"i":[{"n":"self"},{"n":"r8_g8_b8_a8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",68,{"i":[{"n":"self"},{"n":"r8_g8_b8_a8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",68,{"o":{"n":"surfacetype"}}],[11,"clone","","",69,{"i":[{"n":"self"}],"o":{"n":"r10_g10_b10_a2"}}],[11,"fmt","","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",69,null],[11,"cmp","","",69,{"i":[{"n":"self"},{"n":"r10_g10_b10_a2"}],"o":{"n":"ordering"}}],[11,"eq","","",69,{"i":[{"n":"self"},{"n":"r10_g10_b10_a2"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",69,{"i":[{"n":"self"},{"n":"r10_g10_b10_a2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",69,{"o":{"n":"surfacetype"}}],[11,"clone","","",70,{"i":[{"n":"self"}],"o":{"n":"r11_g11_b10"}}],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",70,null],[11,"cmp","","",70,{"i":[{"n":"self"},{"n":"r11_g11_b10"}],"o":{"n":"ordering"}}],[11,"eq","","",70,{"i":[{"n":"self"},{"n":"r11_g11_b10"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",70,{"i":[{"n":"self"},{"n":"r11_g11_b10"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",70,{"o":{"n":"surfacetype"}}],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"r16"}}],[11,"fmt","","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",71,null],[11,"cmp","","",71,{"i":[{"n":"self"},{"n":"r16"}],"o":{"n":"ordering"}}],[11,"eq","","",71,{"i":[{"n":"self"},{"n":"r16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",71,{"i":[{"n":"self"},{"n":"r16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",71,{"o":{"n":"surfacetype"}}],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"r16_g16"}}],[11,"fmt","","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",72,null],[11,"cmp","","",72,{"i":[{"n":"self"},{"n":"r16_g16"}],"o":{"n":"ordering"}}],[11,"eq","","",72,{"i":[{"n":"self"},{"n":"r16_g16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",72,{"i":[{"n":"self"},{"n":"r16_g16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",72,{"o":{"n":"surfacetype"}}],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"r16_g16_b16"}}],[11,"fmt","","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",73,null],[11,"cmp","","",73,{"i":[{"n":"self"},{"n":"r16_g16_b16"}],"o":{"n":"ordering"}}],[11,"eq","","",73,{"i":[{"n":"self"},{"n":"r16_g16_b16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",73,{"i":[{"n":"self"},{"n":"r16_g16_b16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",73,{"o":{"n":"surfacetype"}}],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"r16_g16_b16_a16"}}],[11,"fmt","","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",74,null],[11,"cmp","","",74,{"i":[{"n":"self"},{"n":"r16_g16_b16_a16"}],"o":{"n":"ordering"}}],[11,"eq","","",74,{"i":[{"n":"self"},{"n":"r16_g16_b16_a16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",74,{"i":[{"n":"self"},{"n":"r16_g16_b16_a16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",74,{"o":{"n":"surfacetype"}}],[11,"clone","","",75,{"i":[{"n":"self"}],"o":{"n":"r32"}}],[11,"fmt","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",75,null],[11,"cmp","","",75,{"i":[{"n":"self"},{"n":"r32"}],"o":{"n":"ordering"}}],[11,"eq","","",75,{"i":[{"n":"self"},{"n":"r32"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",75,{"i":[{"n":"self"},{"n":"r32"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",75,{"o":{"n":"surfacetype"}}],[11,"clone","","",76,{"i":[{"n":"self"}],"o":{"n":"r32_g32"}}],[11,"fmt","","",76,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",76,null],[11,"cmp","","",76,{"i":[{"n":"self"},{"n":"r32_g32"}],"o":{"n":"ordering"}}],[11,"eq","","",76,{"i":[{"n":"self"},{"n":"r32_g32"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",76,{"i":[{"n":"self"},{"n":"r32_g32"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",76,{"o":{"n":"surfacetype"}}],[11,"clone","","",77,{"i":[{"n":"self"}],"o":{"n":"r32_g32_b32"}}],[11,"fmt","","",77,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",77,null],[11,"cmp","","",77,{"i":[{"n":"self"},{"n":"r32_g32_b32"}],"o":{"n":"ordering"}}],[11,"eq","","",77,{"i":[{"n":"self"},{"n":"r32_g32_b32"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",77,{"i":[{"n":"self"},{"n":"r32_g32_b32"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",77,{"o":{"n":"surfacetype"}}],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"r32_g32_b32_a32"}}],[11,"fmt","","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",78,null],[11,"cmp","","",78,{"i":[{"n":"self"},{"n":"r32_g32_b32_a32"}],"o":{"n":"ordering"}}],[11,"eq","","",78,{"i":[{"n":"self"},{"n":"r32_g32_b32_a32"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",78,{"i":[{"n":"self"},{"n":"r32_g32_b32_a32"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",78,{"o":{"n":"surfacetype"}}],[11,"clone","","",79,{"i":[{"n":"self"}],"o":{"n":"b8_g8_r8_a8"}}],[11,"fmt","","",79,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",79,null],[11,"cmp","","",79,{"i":[{"n":"self"},{"n":"b8_g8_r8_a8"}],"o":{"n":"ordering"}}],[11,"eq","","",79,{"i":[{"n":"self"},{"n":"b8_g8_r8_a8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",79,{"i":[{"n":"self"},{"n":"b8_g8_r8_a8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",79,{"o":{"n":"surfacetype"}}],[11,"clone","","",80,{"i":[{"n":"self"}],"o":{"n":"d16"}}],[11,"fmt","","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",80,null],[11,"cmp","","",80,{"i":[{"n":"self"},{"n":"d16"}],"o":{"n":"ordering"}}],[11,"eq","","",80,{"i":[{"n":"self"},{"n":"d16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",80,{"i":[{"n":"self"},{"n":"d16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",80,{"o":{"n":"surfacetype"}}],[11,"clone","","",81,{"i":[{"n":"self"}],"o":{"n":"d24"}}],[11,"fmt","","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",81,null],[11,"cmp","","",81,{"i":[{"n":"self"},{"n":"d24"}],"o":{"n":"ordering"}}],[11,"eq","","",81,{"i":[{"n":"self"},{"n":"d24"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",81,{"i":[{"n":"self"},{"n":"d24"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",81,{"o":{"n":"surfacetype"}}],[11,"clone","","",82,{"i":[{"n":"self"}],"o":{"n":"d24_s8"}}],[11,"fmt","","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",82,null],[11,"cmp","","",82,{"i":[{"n":"self"},{"n":"d24_s8"}],"o":{"n":"ordering"}}],[11,"eq","","",82,{"i":[{"n":"self"},{"n":"d24_s8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",82,{"i":[{"n":"self"},{"n":"d24_s8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",82,{"o":{"n":"surfacetype"}}],[11,"clone","","",83,{"i":[{"n":"self"}],"o":{"n":"d32"}}],[11,"fmt","","",83,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",83,null],[11,"cmp","","",83,{"i":[{"n":"self"},{"n":"d32"}],"o":{"n":"ordering"}}],[11,"eq","","",83,{"i":[{"n":"self"},{"n":"d32"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",83,{"i":[{"n":"self"},{"n":"d32"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",83,{"o":{"n":"surfacetype"}}],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"channelsource"}}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",52,null],[11,"cmp","","",52,{"i":[{"n":"self"},{"n":"channelsource"}],"o":{"n":"ordering"}}],[11,"eq","","",52,{"i":[{"n":"self"},{"n":"channelsource"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",52,{"i":[{"n":"self"},{"n":"channelsource"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"swizzle"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",43,null],[11,"cmp","","",43,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"n":"ordering"}}],[11,"eq","","",43,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"n":"bool"}}],[11,"ne","","",43,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",43,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",43,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"n":"bool"}}],[11,"le","","",43,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"n":"bool"}}],[11,"gt","","",43,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"n":"bool"}}],[11,"ge","","",43,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"n":"bool"}}],[11,"new","","Create a new swizzle where each channel is unmapped.",43,{"o":{"n":"swizzle"}}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"format"}}],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",44,null],[11,"cmp","","",44,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"ordering"}}],[11,"eq","","",44,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"bool"}}],[11,"ne","","",44,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",44,{"i":[{"n":"self"},{"n":"format"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",44,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"bool"}}],[11,"le","","",44,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"bool"}}],[11,"gt","","",44,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"bool"}}],[11,"ge","","",44,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"bool"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"u8norm"}}],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",45,null],[11,"cmp","","",45,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"n":"ordering"}}],[11,"eq","","",45,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"n":"bool"}}],[11,"ne","","",45,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",45,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",45,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"n":"bool"}}],[11,"le","","",45,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"n":"bool"}}],[11,"gt","","",45,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"n":"bool"}}],[11,"ge","","",45,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"n":"bool"}}],[11,"from","","",45,{"i":[{"n":"u8"}],"o":{"n":"u8norm"}}],[11,"cast2","","Convert a 2-element slice.",45,null],[11,"cast3","","Convert a 3-element slice.",45,null],[11,"cast4","","Convert a 4-element slice.",45,null],[11,"cast_slice","","Convert a generic slice by transmutation.",45,null],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"i8norm"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",46,null],[11,"cmp","","",46,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"n":"ordering"}}],[11,"eq","","",46,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"n":"bool"}}],[11,"ne","","",46,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",46,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",46,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"n":"bool"}}],[11,"le","","",46,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"n":"bool"}}],[11,"gt","","",46,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"n":"bool"}}],[11,"ge","","",46,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"n":"bool"}}],[11,"from","","",46,{"i":[{"n":"i8"}],"o":{"n":"i8norm"}}],[11,"cast2","","Convert a 2-element slice.",46,null],[11,"cast3","","Convert a 3-element slice.",46,null],[11,"cast4","","Convert a 4-element slice.",46,null],[11,"cast_slice","","Convert a generic slice by transmutation.",46,null],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"u16norm"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",47,null],[11,"cmp","","",47,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"n":"ordering"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"n":"bool"}}],[11,"ne","","",47,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",47,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",47,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"n":"bool"}}],[11,"le","","",47,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"n":"bool"}}],[11,"gt","","",47,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"n":"bool"}}],[11,"ge","","",47,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"n":"bool"}}],[11,"from","","",47,{"i":[{"n":"u16"}],"o":{"n":"u16norm"}}],[11,"cast2","","Convert a 2-element slice.",47,null],[11,"cast3","","Convert a 3-element slice.",47,null],[11,"cast4","","Convert a 4-element slice.",47,null],[11,"cast_slice","","Convert a generic slice by transmutation.",47,null],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"i16norm"}}],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",48,null],[11,"cmp","","",48,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"n":"ordering"}}],[11,"eq","","",48,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"n":"bool"}}],[11,"ne","","",48,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",48,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",48,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"n":"bool"}}],[11,"le","","",48,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"n":"bool"}}],[11,"gt","","",48,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"n":"bool"}}],[11,"ge","","",48,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"n":"bool"}}],[11,"from","","",48,{"i":[{"n":"i16"}],"o":{"n":"i16norm"}}],[11,"cast2","","Convert a 2-element slice.",48,null],[11,"cast3","","Convert a 3-element slice.",48,null],[11,"cast4","","Convert a 4-element slice.",48,null],[11,"cast_slice","","Convert a generic slice by transmutation.",48,null],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"f16"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",49,null],[11,"cmp","","",49,{"i":[{"n":"self"},{"n":"f16"}],"o":{"n":"ordering"}}],[11,"eq","","",49,{"i":[{"n":"self"},{"n":"f16"}],"o":{"n":"bool"}}],[11,"ne","","",49,{"i":[{"n":"self"},{"n":"f16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",49,{"i":[{"n":"self"},{"n":"f16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",49,{"i":[{"n":"self"},{"n":"f16"}],"o":{"n":"bool"}}],[11,"le","","",49,{"i":[{"n":"self"},{"n":"f16"}],"o":{"n":"bool"}}],[11,"gt","","",49,{"i":[{"n":"self"},{"n":"f16"}],"o":{"n":"bool"}}],[11,"ge","","",49,{"i":[{"n":"self"},{"n":"f16"}],"o":{"n":"bool"}}],[11,"from","","",49,{"i":[{"n":"u16"}],"o":{"n":"f16"}}],[11,"cast2","","Convert a 2-element slice.",49,null],[11,"cast3","","Convert a 3-element slice.",49,null],[11,"cast4","","Convert a 4-element slice.",49,null],[11,"cast_slice","","Convert a generic slice by transmutation.",49,null],[0,"handle","gfx_core","Resource handles",null,null],[3,"RawBuffer","gfx_core::handle","Untyped buffer handle",null,null],[3,"Buffer","","Type-safe buffer handle",null,null],[3,"Shader","","Shader Handle",null,null],[3,"Program","","Program Handle",null,null],[3,"RawPipelineState","","Raw Pipeline State Handle",null,null],[3,"RawTexture","","Raw texture handle",null,null],[3,"Texture","","Typed texture object",null,null],[3,"RawShaderResourceView","","Raw Shader Resource View Handle",null,null],[3,"ShaderResourceView","","Type-safe Shader Resource View Handle",null,null],[3,"RawUnorderedAccessView","","Raw Unordered Access View Handle",null,null],[3,"UnorderedAccessView","","Type-safe Unordered Access View Handle",null,null],[3,"RawRenderTargetView","","Raw RTV",null,null],[3,"RawDepthStencilView","","Raw DSV",null,null],[3,"RenderTargetView","","Typed RTV",null,null],[3,"DepthStencilView","","Typed DSV",null,null],[3,"Sampler","","Sampler Handle",null,null],[3,"Fence","","Fence Handle",null,null],[3,"Manager","","Stores reference-counted resources used in a command buffer. Seals actual resource names behind the interface, automatically referencing them both by the Factory on resource creation and the Renderer during CommandBuffer population.",null,null],[11,"clone","","",84,{"i":[{"n":"self"}],"o":{"n":"rawbuffer"}}],[11,"fmt","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",84,null],[11,"eq","","",84,{"i":[{"n":"self"},{"n":"rawbuffer"}],"o":{"n":"bool"}}],[11,"ne","","",84,{"i":[{"n":"self"},{"n":"rawbuffer"}],"o":{"n":"bool"}}],[11,"deref","","",84,null],[11,"clone","","",85,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",85,{"i":[{"n":"self"},{"n":"__hrt"}]}],[11,"eq","","",85,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"get_info","","Get the associated information about the buffer",85,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"len","","Get the number of elements in the buffer.",85,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",86,{"i":[{"n":"self"}],"o":{"n":"shader"}}],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",86,null],[11,"eq","","",86,{"i":[{"n":"self"},{"n":"shader"}],"o":{"n":"bool"}}],[11,"ne","","",86,{"i":[{"n":"self"},{"n":"shader"}],"o":{"n":"bool"}}],[11,"clone","","",87,{"i":[{"n":"self"}],"o":{"n":"program"}}],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",87,null],[11,"eq","","",87,{"i":[{"n":"self"},{"n":"program"}],"o":{"n":"bool"}}],[11,"ne","","",87,{"i":[{"n":"self"},{"n":"program"}],"o":{"n":"bool"}}],[11,"deref","","",87,null],[11,"clone","","",88,{"i":[{"n":"self"}],"o":{"n":"rawpipelinestate"}}],[11,"fmt","","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",88,null],[11,"eq","","",88,{"i":[{"n":"self"},{"n":"rawpipelinestate"}],"o":{"n":"bool"}}],[11,"ne","","",88,{"i":[{"n":"self"},{"n":"rawpipelinestate"}],"o":{"n":"bool"}}],[11,"clone","","",89,{"i":[{"n":"self"}],"o":{"n":"rawtexture"}}],[11,"fmt","","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",89,null],[11,"eq","","",89,{"i":[{"n":"self"},{"n":"rawtexture"}],"o":{"n":"bool"}}],[11,"ne","","",89,{"i":[{"n":"self"},{"n":"rawtexture"}],"o":{"n":"bool"}}],[11,"deref","","",89,null],[11,"clone","","",90,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",90,{"i":[{"n":"self"},{"n":"__hrs"}]}],[11,"eq","","",90,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"get_info","","Get texture descriptor",90,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"clone","","",91,{"i":[{"n":"self"}],"o":{"n":"rawshaderresourceview"}}],[11,"fmt","","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",91,null],[11,"eq","","",91,{"i":[{"n":"self"},{"n":"rawshaderresourceview"}],"o":{"n":"bool"}}],[11,"ne","","",91,{"i":[{"n":"self"},{"n":"rawshaderresourceview"}],"o":{"n":"bool"}}],[11,"clone","","",92,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",92,{"i":[{"n":"self"},{"n":"__hrt"}]}],[11,"eq","","",92,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",93,{"i":[{"n":"self"}],"o":{"n":"rawunorderedaccessview"}}],[11,"fmt","","",93,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",93,null],[11,"eq","","",93,{"i":[{"n":"self"},{"n":"rawunorderedaccessview"}],"o":{"n":"bool"}}],[11,"ne","","",93,{"i":[{"n":"self"},{"n":"rawunorderedaccessview"}],"o":{"n":"bool"}}],[11,"clone","","",94,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",94,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",94,{"i":[{"n":"self"},{"n":"__hrt"}]}],[11,"eq","","",94,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",95,{"i":[{"n":"self"}],"o":{"n":"rawrendertargetview"}}],[11,"fmt","","",95,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",95,null],[11,"eq","","",95,{"i":[{"n":"self"},{"n":"rawrendertargetview"}],"o":{"n":"bool"}}],[11,"ne","","",95,{"i":[{"n":"self"},{"n":"rawrendertargetview"}],"o":{"n":"bool"}}],[11,"get_dimensions","","Get target dimensions",95,{"i":[{"n":"self"}],"o":{"n":"dimensions"}}],[11,"get_texture","","Get the associated texture",95,{"i":[{"n":"self"}],"o":{"n":"rawtexture"}}],[11,"clone","","",96,{"i":[{"n":"self"}],"o":{"n":"rawdepthstencilview"}}],[11,"fmt","","",96,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",96,null],[11,"eq","","",96,{"i":[{"n":"self"},{"n":"rawdepthstencilview"}],"o":{"n":"bool"}}],[11,"ne","","",96,{"i":[{"n":"self"},{"n":"rawdepthstencilview"}],"o":{"n":"bool"}}],[11,"get_dimensions","","Get target dimensions",96,{"i":[{"n":"self"}],"o":{"n":"dimensions"}}],[11,"get_texture","","Get the associated texture",96,{"i":[{"n":"self"}],"o":{"n":"rawtexture"}}],[11,"clone","","",97,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",97,{"i":[{"n":"self"},{"n":"__hrt"}]}],[11,"eq","","",97,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"get_dimensions","","Get target dimensions",97,{"i":[{"n":"self"}],"o":{"n":"dimensions"}}],[11,"clone","","",98,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",98,{"i":[{"n":"self"},{"n":"__hrt"}]}],[11,"eq","","",98,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"get_dimensions","","Get target dimensions",98,{"i":[{"n":"self"}],"o":{"n":"dimensions"}}],[11,"clone","","",99,{"i":[{"n":"self"}],"o":{"n":"sampler"}}],[11,"fmt","","",99,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",99,null],[11,"eq","","",99,{"i":[{"n":"self"},{"n":"sampler"}],"o":{"n":"bool"}}],[11,"ne","","",99,{"i":[{"n":"self"},{"n":"sampler"}],"o":{"n":"bool"}}],[11,"get_info","","Get sampler info",99,{"i":[{"n":"self"}],"o":{"n":"samplerinfo"}}],[11,"clone","","",100,{"i":[{"n":"self"}],"o":{"n":"fence"}}],[11,"fmt","","",100,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",100,null],[11,"eq","","",100,{"i":[{"n":"self"},{"n":"fence"}],"o":{"n":"bool"}}],[11,"ne","","",100,{"i":[{"n":"self"},{"n":"fence"}],"o":{"n":"bool"}}],[11,"fmt","","",101,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new handle manager",101,{"o":{"n":"manager"}}],[11,"clear","","Clear all references",101,{"i":[{"n":"self"}]}],[11,"extend","","Extend with all references of another handle manager",101,{"i":[{"n":"self"},{"n":"manager"}]}],[11,"count","","Count the total number of referenced resources",101,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"ref_buffer","","Reference a buffer",101,null],[11,"ref_shader","","Reference a shader",101,null],[11,"ref_program","","Reference a program",101,null],[11,"ref_pso","","Reference a pipeline state object",101,null],[11,"ref_texture","","Reference a texture",101,null],[11,"ref_srv","","Reference a shader resource view",101,null],[11,"ref_uav","","Reference an unordered access view",101,null],[11,"ref_rtv","","Reference an RTV",101,null],[11,"ref_dsv","","Reference a DSV",101,null],[11,"ref_sampler","","Reference a sampler",101,null],[11,"ref_fence","","Reference a fence",101,null],[0,"mapping","gfx_core","Memory mapping",null,null],[3,"Reader","gfx_core::mapping","Mapping reader",null,null],[3,"Writer","","Mapping writer. Currently is not possible to make write-only slice so while it is technically possible to read from Writer, it will lead to an undefined behavior. Please do not read from it.",null,null],[4,"Error","","Error accessing a mapping.",null,null],[13,"InvalidAccess","","The requested mapping access did not match the expected usage.",102,null],[13,"AccessOverlap","","The requested mapping access overlaps with another.",102,null],[11,"clone","","",102,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",102,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",102,null],[11,"eq","","",102,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"ne","","",102,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"fmt","","",102,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",102,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",103,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deref","","",103,null],[11,"fmt","","",104,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deref","","",104,null],[11,"deref_mut","","",104,null],[0,"memory","gfx_core","Types to describe the properties of memory allocated for gfx resources.",null,null],[3,"Access","gfx_core::memory","Flags providing information about the type of memory access to a resource.",null,null],[3,"Bind","","Flags providing information about the usage of a resource.",null,null],[4,"Usage","","How this memory will be used regarding GPU-CPU data flow.",null,null],[13,"Data","","Full speed GPU access. Optimal for render targets and resourced memory.",105,null],[13,"Dynamic","","CPU to GPU data flow with update commands. Used for dynamic buffer data, typically constant buffers.",105,null],[13,"Upload","","CPU to GPU data flow with mapping. Used for staging for upload to GPU.",105,null],[13,"Download","","GPU to CPU data flow with mapping. Used for staging for download from GPU.",105,null],[5,"cast_slice","","Cast a slice from one POD type to another.",null,null],[8,"Pod","","A trait for plain-old-data types.",null,null],[11,"clone","","",105,{"i":[{"n":"self"}],"o":{"n":"usage"}}],[11,"fmt","","",105,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",105,null],[11,"cmp","","",105,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"ordering"}}],[11,"eq","","",105,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",105,{"i":[{"n":"self"},{"n":"usage"}],"o":{"g":["ordering"],"n":"option"}}],[11,"eq","","",106,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"ne","","",106,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"clone","","",106,{"i":[{"n":"self"}],"o":{"n":"access"}}],[11,"partial_cmp","","",106,{"i":[{"n":"self"},{"n":"access"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",106,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"le","","",106,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"gt","","",106,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"ge","","",106,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"cmp","","",106,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"ordering"}}],[11,"hash","","",106,null],[11,"fmt","","",106,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",106,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",106,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",106,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",106,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"READ","","Read access",106,null],[18,"WRITE","","Write access",106,null],[18,"RW","","Full access",106,null],[11,"empty","","Returns an empty set of flags.",106,{"o":{"n":"access"}}],[11,"all","","Returns the set containing all flags.",106,{"o":{"n":"access"}}],[11,"bits","","Returns the raw value of the flags currently stored.",106,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",106,{"i":[{"n":"u8"}],"o":{"g":["access"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",106,{"i":[{"n":"u8"}],"o":{"n":"access"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",106,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",106,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",106,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",106,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",106,{"i":[{"n":"self"},{"n":"access"}]}],[11,"remove","","Removes the specified flags in-place.",106,{"i":[{"n":"self"},{"n":"access"}]}],[11,"toggle","","Toggles the specified flags in-place.",106,{"i":[{"n":"self"},{"n":"access"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",106,{"i":[{"n":"self"},{"n":"access"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",106,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"access"}}],[11,"bitor_assign","","Adds the set of flags.",106,{"i":[{"n":"self"},{"n":"access"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",106,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"access"}}],[11,"bitxor_assign","","Toggles the set of flags.",106,{"i":[{"n":"self"},{"n":"access"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",106,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"access"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",106,{"i":[{"n":"self"},{"n":"access"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",106,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"access"}}],[11,"sub_assign","","Disables all flags enabled in the set.",106,{"i":[{"n":"self"},{"n":"access"}]}],[11,"not","","Returns the complement of this set of flags.",106,{"i":[{"n":"self"}],"o":{"n":"access"}}],[11,"extend","","",106,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",106,{"i":[{"n":"t"}],"o":{"n":"access"}}],[11,"eq","","",107,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"ne","","",107,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"clone","","",107,{"i":[{"n":"self"}],"o":{"n":"bind"}}],[11,"partial_cmp","","",107,{"i":[{"n":"self"},{"n":"bind"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",107,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"le","","",107,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"gt","","",107,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"ge","","",107,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"cmp","","",107,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"ordering"}}],[11,"hash","","",107,null],[11,"fmt","","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"RENDER_TARGET","","Can be rendered into.",107,null],[18,"DEPTH_STENCIL","","Can serve as a depth/stencil target.",107,null],[18,"SHADER_RESOURCE","","Can be bound to the shader for reading.",107,null],[18,"UNORDERED_ACCESS","","Can be bound to the shader for writing.",107,null],[18,"TRANSFER_SRC","","Can be transfered from.",107,null],[18,"TRANSFER_DST","","Can be transfered into.",107,null],[11,"empty","","Returns an empty set of flags.",107,{"o":{"n":"bind"}}],[11,"all","","Returns the set containing all flags.",107,{"o":{"n":"bind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",107,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",107,{"i":[{"n":"u8"}],"o":{"g":["bind"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",107,{"i":[{"n":"u8"}],"o":{"n":"bind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",107,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",107,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",107,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",107,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",107,{"i":[{"n":"self"},{"n":"bind"}]}],[11,"remove","","Removes the specified flags in-place.",107,{"i":[{"n":"self"},{"n":"bind"}]}],[11,"toggle","","Toggles the specified flags in-place.",107,{"i":[{"n":"self"},{"n":"bind"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",107,{"i":[{"n":"self"},{"n":"bind"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",107,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bind"}}],[11,"bitor_assign","","Adds the set of flags.",107,{"i":[{"n":"self"},{"n":"bind"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",107,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bind"}}],[11,"bitxor_assign","","Toggles the set of flags.",107,{"i":[{"n":"self"},{"n":"bind"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",107,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bind"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",107,{"i":[{"n":"self"},{"n":"bind"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",107,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bind"}}],[11,"sub_assign","","Disables all flags enabled in the set.",107,{"i":[{"n":"self"},{"n":"bind"}]}],[11,"not","","Returns the complement of this set of flags.",107,{"i":[{"n":"self"}],"o":{"n":"bind"}}],[11,"extend","","",107,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",107,{"i":[{"n":"t"}],"o":{"n":"bind"}}],[11,"is_mutable","","Is this memory bound to be mutated ?",107,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[0,"pso","gfx_core","Raw Pipeline State Objects",null,null],[3,"CreationError","gfx_core::pso","Error types happening upon PSO creation on the device side.",null,null],[3,"ColorInfo","","Color output configuration of the PSO.",null,null],[12,"mask","","Color channel mask",108,null],[12,"color","","Optional color blending",108,null],[12,"alpha","","Optional alpha blending",108,null],[3,"DepthStencilInfo","","Depth and stencil state of the PSO.",null,null],[12,"depth","","Optional depth test configuration",109,null],[12,"front","","Optional stencil test on the front faces",109,null],[12,"back","","Optional stencil test on the back faces",109,null],[3,"Element","","A struct element descriptor.",null,null],[12,"format","","Element format",110,null],[12,"offset","","Offset from the beginning of the container, in bytes",110,null],[3,"VertexBufferDesc","","Vertex buffer descriptor",null,null],[12,"stride","","Total container size, in bytes",111,null],[12,"rate","","Rate of the input for the given buffer",111,null],[3,"Descriptor","","All the information surrounding a shader program that is required for PSO creation, including the formats of vertex buffers and pixel targets;",null,null],[12,"primitive","","Type of the primitive",112,null],[12,"rasterizer","","Rasterizer setup",112,null],[12,"scissor","","Enable scissor test",112,null],[12,"vertex_buffers","","Vertex buffers",112,null],[12,"attributes","","Vertex attributes",112,null],[12,"constant_buffers","","Constant buffers",112,null],[12,"resource_views","","Shader resource views",112,null],[12,"unordered_views","","Unordered access views",112,null],[12,"samplers","","Samplers",112,null],[12,"color_targets","","Render target views (RTV)",112,null],[12,"depth_stencil","","Depth stencil view (DSV)",112,null],[3,"VertexBufferSet","","A complete set of vertex buffers to be used for vertex import in PSO.",null,null],[12,"0","","Array of buffer handles with offsets in them",113,null],[3,"ConstantBufferParam","","A constant buffer run-time parameter for PSO.",null,null],[12,"0","","",114,null],[12,"1","","",114,null],[12,"2","","",114,null],[3,"ResourceViewParam","","A shader resource view (SRV) run-time parameter for PSO.",null,null],[12,"0","","",115,null],[12,"1","","",115,null],[12,"2","","",115,null],[3,"UnorderedViewParam","","An unordered access view (UAV) run-time parameter for PSO.",null,null],[12,"0","","",116,null],[12,"1","","",116,null],[12,"2","","",116,null],[3,"SamplerParam","","A sampler run-time parameter for PSO.",null,null],[12,"0","","",117,null],[12,"1","","",117,null],[12,"2","","",117,null],[3,"PixelTargetSet","","A complete set of render targets to be used for pixel export in PSO.",null,null],[12,"colors","","Array of color target views",118,null],[12,"depth","","Depth target view",118,null],[12,"stencil","","Stencil target view",118,null],[12,"dimensions","","Rendering dimensions",118,null],[6,"BufferOffset","","An offset inside a vertex buffer, in bytes.",null,null],[6,"BufferIndex","","Index of a vertex buffer.",null,null],[6,"ElemOffset","","Offset of an attribute from the start of the buffer, in bytes",null,null],[6,"ElemStride","","Offset between attribute values, in bytes",null,null],[6,"InstanceRate","","The number of instances between each subsequent attribute value",null,null],[6,"AttributeDesc","","PSO vertex attribute descriptor",null,null],[6,"ConstantBufferDesc","","PSO constant buffer descriptor",null,null],[6,"ResourceViewDesc","","PSO shader resource view descriptor",null,null],[6,"UnorderedViewDesc","","PSO unordered access view descriptor",null,null],[6,"SamplerDesc","","PSO sampler descriptor",null,null],[6,"ColorTargetDesc","","PSO color target descriptor",null,null],[6,"DepthStencilDesc","","PSO depth-stencil target descriptor",null,null],[17,"MAX_VERTEX_BUFFERS","","Maximum number of vertex buffers used in a PSO definition.",null,null],[11,"clone","","",119,{"i":[{"n":"self"}],"o":{"n":"creationerror"}}],[11,"fmt","","",119,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",119,{"i":[{"n":"self"},{"n":"creationerror"}],"o":{"n":"bool"}}],[11,"fmt","","",119,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",119,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",108,{"i":[{"n":"self"}],"o":{"n":"colorinfo"}}],[11,"fmt","","",108,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",108,null],[11,"eq","","",108,{"i":[{"n":"self"},{"n":"colorinfo"}],"o":{"n":"bool"}}],[11,"ne","","",108,{"i":[{"n":"self"},{"n":"colorinfo"}],"o":{"n":"bool"}}],[11,"from","","",108,{"i":[{"n":"colormask"}],"o":{"n":"colorinfo"}}],[11,"from","","",108,{"i":[{"n":"blend"}],"o":{"n":"colorinfo"}}],[11,"clone","","",109,{"i":[{"n":"self"}],"o":{"n":"depthstencilinfo"}}],[11,"fmt","","",109,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",109,null],[11,"eq","","",109,{"i":[{"n":"self"},{"n":"depthstencilinfo"}],"o":{"n":"bool"}}],[11,"ne","","",109,{"i":[{"n":"self"},{"n":"depthstencilinfo"}],"o":{"n":"bool"}}],[11,"from","","",109,{"i":[{"n":"depth"}],"o":{"n":"depthstencilinfo"}}],[11,"from","","",109,{"i":[{"n":"stencil"}],"o":{"n":"depthstencilinfo"}}],[11,"from","","",109,null],[11,"clone","","",110,{"i":[{"n":"self"}],"o":{"n":"element"}}],[11,"fmt","","",110,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",110,null],[11,"eq","","",110,{"i":[{"n":"self"},{"n":"element"}],"o":{"n":"bool"}}],[11,"ne","","",110,{"i":[{"n":"self"},{"n":"element"}],"o":{"n":"bool"}}],[11,"clone","","",111,{"i":[{"n":"self"}],"o":{"n":"vertexbufferdesc"}}],[11,"fmt","","",111,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",111,null],[11,"eq","","",111,{"i":[{"n":"self"},{"n":"vertexbufferdesc"}],"o":{"n":"bool"}}],[11,"ne","","",111,{"i":[{"n":"self"},{"n":"vertexbufferdesc"}],"o":{"n":"bool"}}],[11,"clone","","",112,{"i":[{"n":"self"}],"o":{"n":"descriptor"}}],[11,"fmt","","",112,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",112,null],[11,"eq","","",112,{"i":[{"n":"self"},{"n":"descriptor"}],"o":{"n":"bool"}}],[11,"ne","","",112,{"i":[{"n":"self"},{"n":"descriptor"}],"o":{"n":"bool"}}],[11,"new","","Create a new empty PSO descriptor.",112,{"i":[{"n":"primitive"},{"n":"rasterizer"}],"o":{"n":"descriptor"}}],[11,"clone","","",113,{"i":[{"n":"self"}],"o":{"n":"vertexbufferset"}}],[11,"fmt","","",113,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",113,null],[11,"eq","","",113,{"i":[{"n":"self"},{"n":"vertexbufferset"}],"o":{"n":"bool"}}],[11,"ne","","",113,{"i":[{"n":"self"},{"n":"vertexbufferset"}],"o":{"n":"bool"}}],[11,"new","","Create an empty set",113,{"o":{"n":"vertexbufferset"}}],[11,"clone","","",114,{"i":[{"n":"self"}],"o":{"n":"constantbufferparam"}}],[11,"fmt","","",114,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",114,null],[11,"eq","","",114,{"i":[{"n":"self"},{"n":"constantbufferparam"}],"o":{"n":"bool"}}],[11,"ne","","",114,{"i":[{"n":"self"},{"n":"constantbufferparam"}],"o":{"n":"bool"}}],[11,"clone","","",115,{"i":[{"n":"self"}],"o":{"n":"resourceviewparam"}}],[11,"fmt","","",115,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",115,null],[11,"eq","","",115,{"i":[{"n":"self"},{"n":"resourceviewparam"}],"o":{"n":"bool"}}],[11,"ne","","",115,{"i":[{"n":"self"},{"n":"resourceviewparam"}],"o":{"n":"bool"}}],[11,"clone","","",116,{"i":[{"n":"self"}],"o":{"n":"unorderedviewparam"}}],[11,"fmt","","",116,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",116,null],[11,"eq","","",116,{"i":[{"n":"self"},{"n":"unorderedviewparam"}],"o":{"n":"bool"}}],[11,"ne","","",116,{"i":[{"n":"self"},{"n":"unorderedviewparam"}],"o":{"n":"bool"}}],[11,"clone","","",117,{"i":[{"n":"self"}],"o":{"n":"samplerparam"}}],[11,"fmt","","",117,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",117,null],[11,"eq","","",117,{"i":[{"n":"self"},{"n":"samplerparam"}],"o":{"n":"bool"}}],[11,"ne","","",117,{"i":[{"n":"self"},{"n":"samplerparam"}],"o":{"n":"bool"}}],[11,"clone","","",118,{"i":[{"n":"self"}],"o":{"n":"pixeltargetset"}}],[11,"fmt","","",118,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",118,null],[11,"eq","","",118,{"i":[{"n":"self"},{"n":"pixeltargetset"}],"o":{"n":"bool"}}],[11,"ne","","",118,{"i":[{"n":"self"},{"n":"pixeltargetset"}],"o":{"n":"bool"}}],[11,"new","","Create an empty set",118,{"o":{"n":"pixeltargetset"}}],[11,"add_color","","Add a color view to the specified slot",118,null],[11,"add_depth_stencil","","Add a depth or stencil view to the specified slot",118,null],[11,"get_view","","Get the rendering view (returns values > 0)",118,null],[0,"shade","gfx_core","Shader handling.",null,null],[3,"SamplerType","gfx_core::shade","A type of the sampler variable.",null,null],[12,"0","","",120,null],[12,"1","","",120,null],[3,"Usage","","Parameter usage flags.",null,null],[3,"AttributeVar","","Vertex information that a shader takes as input.",null,null],[12,"name","","Name of this attribute.",121,null],[12,"slot","","Slot of the vertex attribute.",121,null],[12,"base_type","","Type that this attribute is composed of.",121,null],[12,"container","","\"Scalarness\" of this attribute.",121,null],[3,"ConstVar","","A constant in the shader - a bit of data that doesn't vary",null,null],[12,"name","","Name of this constant.",122,null],[12,"location","","Location of this constant in the program. For constant buffer elements, it's the offset in bytes.",122,null],[12,"count","","Number of elements this constant represents.",122,null],[12,"base_type","","Type that this constant is composed of",122,null],[12,"container","","\"Scalarness\" of this constant.",122,null],[3,"ConstantBufferVar","","A constant buffer.",null,null],[12,"name","","Name of this constant buffer.",123,null],[12,"slot","","Slot of the constant buffer.",123,null],[12,"size","","Size (in bytes) of this buffer's data.",123,null],[12,"usage","","What program stage this buffer is used in.",123,null],[12,"elements","","List of individual elements in this buffer.",123,null],[3,"TextureVar","","Texture shader parameter.",null,null],[12,"name","","Name of this texture variable.",124,null],[12,"slot","","Slot of this texture variable.",124,null],[12,"base_type","","Base type for the texture.",124,null],[12,"ty","","Type of this texture.",124,null],[12,"usage","","What program stage this texture is used in.",124,null],[3,"UnorderedVar","","Unordered access shader parameter.",null,null],[12,"name","","Name of this unordered variable.",125,null],[12,"slot","","Slot of this unordered variable.",125,null],[12,"usage","","What program stage this UAV is used in.",125,null],[3,"SamplerVar","","Sampler shader parameter.",null,null],[12,"name","","Name of this sampler variable.",126,null],[12,"slot","","Slot of this sampler variable.",126,null],[12,"ty","","Type of this sampler.",126,null],[12,"usage","","What program stage this texture is used in.",126,null],[3,"OutputVar","","Target output variable.",null,null],[12,"name","","Name of this output variable.",127,null],[12,"slot","","Output color target index.",127,null],[12,"base_type","","Type of the output component.",127,null],[12,"container","","\"Scalarness\" of this output.",127,null],[3,"ProgramInfo","","Metadata about a program.",null,null],[12,"vertex_attributes","","Attributes in the program",128,null],[12,"globals","","Global constants in the program",128,null],[12,"constant_buffers","","Constant buffers in the program",128,null],[12,"textures","","Textures in the program",128,null],[12,"unordereds","","Unordered access resources in the program",128,null],[12,"samplers","","Samplers in the program",128,null],[12,"outputs","","Output targets in the program",128,null],[12,"output_depth","","A flag indicating that the pixel shader manually assigns the depth.",128,null],[12,"knows_outputs","","A hacky flag to make sure the clients know we are unable to actually get the output variable info",128,null],[3,"Program","","A program",null,null],[3,"CreateProgramError","","An error type for creating programs.",null,null],[4,"IsArray","","Whether the sampler samples an array texture.",null,null],[13,"Array","","",129,null],[13,"NoArray","","",129,null],[4,"IsComparison","","Whether the sampler compares the depth value upon sampling.",null,null],[13,"Compare","","",130,null],[13,"NoCompare","","",130,null],[4,"IsMultiSample","","Whether the sampler samples a multisample texture.",null,null],[13,"MultiSample","","",131,null],[13,"NoMultiSample","","",131,null],[4,"IsRect","","Whether the sampler samples a rectangle texture.",null,null],[13,"Rect","","",132,null],[13,"NoRect","","",132,null],[4,"MatrixFormat","","Whether the matrix is column or row major.",null,null],[13,"ColumnMajor","","",133,null],[13,"RowMajor","","",133,null],[4,"TextureType","","A type of the texture variable. This has to match the actual data we bind to the shader.",null,null],[13,"Buffer","","Sample from a buffer.",134,null],[13,"D1","","Sample from a 1D texture",134,null],[13,"D2","","Sample from a 2D texture",134,null],[13,"D3","","Sample from a 3D texture",134,null],[13,"Cube","","Sample from a cubemap.",134,null],[4,"BaseType","","Base type of this shader parameter.",null,null],[13,"I32","","",135,null],[13,"U32","","",135,null],[13,"F32","","",135,null],[13,"F64","","",135,null],[13,"Bool","","",135,null],[4,"ContainerType","","Number of components this parameter represents.",null,null],[13,"Single","","Scalar value",136,null],[13,"Vector","","A vector with `Dimension` components.",136,null],[13,"Matrix","","A matrix.",136,null],[4,"Stage","","Which program stage this shader represents.",null,null],[13,"Vertex","","",137,null],[13,"Hull","","",137,null],[13,"Domain","","",137,null],[13,"Geometry","","",137,null],[13,"Pixel","","",137,null],[4,"UniformValue","","A value that can be uploaded to the device as a uniform.",null,null],[13,"I32","","",138,null],[13,"F32","","",138,null],[13,"I32Vector2","","",138,null],[13,"I32Vector3","","",138,null],[13,"I32Vector4","","",138,null],[13,"F32Vector2","","",138,null],[13,"F32Vector3","","",138,null],[13,"F32Vector4","","",138,null],[13,"F32Matrix2","","",138,null],[13,"F32Matrix3","","",138,null],[13,"F32Matrix4","","",138,null],[4,"CompatibilityError","","Error type for trying to store a UniformValue in a ConstVar.",null,null],[13,"ErrorArraySize","","Array sizes differ between the value and the var (trying to upload a vec2 as a vec4, etc)",139,null],[13,"ErrorBaseType","","Base types differ between the value and the var (trying to upload a f32 as a u16, etc)",139,null],[13,"ErrorContainer","","Container-ness differs between the value and the var (trying to upload a scalar as a vec4, etc)",139,null],[4,"CreateShaderError","","An error type for creating shaders.",null,null],[13,"ModelNotSupported","","The device does not support the requested shader model.",140,null],[13,"StageNotSupported","","The device does not support the shader stage.",140,null],[13,"CompilationFailed","","The shader failed to compile.",140,null],[6,"Dimension","","Number of components in a container type (vectors/matrices)",null,null],[6,"Location","","Location of a parameter in the program.",null,null],[6,"ConstFormat","","Format of a shader constant.",null,null],[17,"STAGES","","A constant static array of all shader stages.",null,null],[8,"BaseTyped","","A trait that statically links simple data types to base types of the shader constants.",null,null],[10,"get_base_type","","",141,{"o":{"n":"basetype"}}],[8,"Formatted","","A trait that statically links simple data types to constant formats.",null,null],[10,"get_format","","Get the associated constant format.",142,{"o":{"n":"constformat"}}],[11,"clone","","",129,{"i":[{"n":"self"}],"o":{"n":"isarray"}}],[11,"fmt","","",129,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",129,null],[11,"eq","","",129,{"i":[{"n":"self"},{"n":"isarray"}],"o":{"n":"bool"}}],[11,"clone","","",130,{"i":[{"n":"self"}],"o":{"n":"iscomparison"}}],[11,"fmt","","",130,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",130,null],[11,"eq","","",130,{"i":[{"n":"self"},{"n":"iscomparison"}],"o":{"n":"bool"}}],[11,"clone","","",131,{"i":[{"n":"self"}],"o":{"n":"ismultisample"}}],[11,"fmt","","",131,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",131,null],[11,"eq","","",131,{"i":[{"n":"self"},{"n":"ismultisample"}],"o":{"n":"bool"}}],[11,"clone","","",132,{"i":[{"n":"self"}],"o":{"n":"isrect"}}],[11,"fmt","","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",132,null],[11,"eq","","",132,{"i":[{"n":"self"},{"n":"isrect"}],"o":{"n":"bool"}}],[11,"clone","","",133,{"i":[{"n":"self"}],"o":{"n":"matrixformat"}}],[11,"fmt","","",133,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",133,null],[11,"eq","","",133,{"i":[{"n":"self"},{"n":"matrixformat"}],"o":{"n":"bool"}}],[11,"clone","","",134,{"i":[{"n":"self"}],"o":{"n":"texturetype"}}],[11,"fmt","","",134,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",134,null],[11,"eq","","",134,{"i":[{"n":"self"},{"n":"texturetype"}],"o":{"n":"bool"}}],[11,"ne","","",134,{"i":[{"n":"self"},{"n":"texturetype"}],"o":{"n":"bool"}}],[11,"can_sample","","Check if this texture can be used with a sampler.",134,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",120,{"i":[{"n":"self"}],"o":{"n":"samplertype"}}],[11,"fmt","","",120,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",120,null],[11,"eq","","",120,{"i":[{"n":"self"},{"n":"samplertype"}],"o":{"n":"bool"}}],[11,"ne","","",120,{"i":[{"n":"self"},{"n":"samplertype"}],"o":{"n":"bool"}}],[11,"clone","","",135,{"i":[{"n":"self"}],"o":{"n":"basetype"}}],[11,"fmt","","",135,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",135,null],[11,"eq","","",135,{"i":[{"n":"self"},{"n":"basetype"}],"o":{"n":"bool"}}],[11,"clone","","",136,{"i":[{"n":"self"}],"o":{"n":"containertype"}}],[11,"fmt","","",136,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",136,null],[11,"eq","","",136,{"i":[{"n":"self"},{"n":"containertype"}],"o":{"n":"bool"}}],[11,"ne","","",136,{"i":[{"n":"self"},{"n":"containertype"}],"o":{"n":"bool"}}],[11,"clone","","",137,{"i":[{"n":"self"}],"o":{"n":"stage"}}],[11,"fmt","","",137,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",137,null],[11,"eq","","",137,{"i":[{"n":"self"},{"n":"stage"}],"o":{"n":"bool"}}],[11,"clone","","",138,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"eq","","",138,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"n":"bool"}}],[11,"ne","","",138,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",138,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",138,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"n":"bool"}}],[11,"le","","",138,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"n":"bool"}}],[11,"gt","","",138,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"n":"bool"}}],[11,"ge","","",138,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"n":"bool"}}],[11,"fmt","","",138,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",143,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"ne","","",143,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"clone","","",143,{"i":[{"n":"self"}],"o":{"n":"usage"}}],[11,"partial_cmp","","",143,{"i":[{"n":"self"},{"n":"usage"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",143,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"le","","",143,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"gt","","",143,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"ge","","",143,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"cmp","","",143,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"ordering"}}],[11,"hash","","",143,null],[11,"fmt","","",143,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",143,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",143,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",143,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",143,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"VERTEX","","Used by the vertex shader",143,null],[18,"GEOMETRY","","Used by the geometry shader",143,null],[18,"PIXEL","","Used by the pixel shader",143,null],[18,"HULL","","Used by the hull shader",143,null],[18,"DOMAIN","","Used by the pixel shader",143,null],[11,"empty","","Returns an empty set of flags.",143,{"o":{"n":"usage"}}],[11,"all","","Returns the set containing all flags.",143,{"o":{"n":"usage"}}],[11,"bits","","Returns the raw value of the flags currently stored.",143,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",143,{"i":[{"n":"u8"}],"o":{"g":["usage"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",143,{"i":[{"n":"u8"}],"o":{"n":"usage"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",143,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",143,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",143,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",143,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",143,{"i":[{"n":"self"},{"n":"usage"}]}],[11,"remove","","Removes the specified flags in-place.",143,{"i":[{"n":"self"},{"n":"usage"}]}],[11,"toggle","","Toggles the specified flags in-place.",143,{"i":[{"n":"self"},{"n":"usage"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",143,{"i":[{"n":"self"},{"n":"usage"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",143,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"usage"}}],[11,"bitor_assign","","Adds the set of flags.",143,{"i":[{"n":"self"},{"n":"usage"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",143,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"usage"}}],[11,"bitxor_assign","","Toggles the set of flags.",143,{"i":[{"n":"self"},{"n":"usage"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",143,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"usage"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",143,{"i":[{"n":"self"},{"n":"usage"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",143,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"usage"}}],[11,"sub_assign","","Disables all flags enabled in the set.",143,{"i":[{"n":"self"},{"n":"usage"}]}],[11,"not","","Returns the complement of this set of flags.",143,{"i":[{"n":"self"}],"o":{"n":"usage"}}],[11,"extend","","",143,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",143,{"i":[{"n":"t"}],"o":{"n":"usage"}}],[11,"from","","",143,{"i":[{"n":"stage"}],"o":{"n":"self"}}],[11,"clone","","",121,{"i":[{"n":"self"}],"o":{"n":"attributevar"}}],[11,"fmt","","",121,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",121,null],[11,"eq","","",121,{"i":[{"n":"self"},{"n":"attributevar"}],"o":{"n":"bool"}}],[11,"ne","","",121,{"i":[{"n":"self"},{"n":"attributevar"}],"o":{"n":"bool"}}],[11,"clone","","",122,{"i":[{"n":"self"}],"o":{"n":"constvar"}}],[11,"fmt","","",122,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",122,null],[11,"eq","","",122,{"i":[{"n":"self"},{"n":"constvar"}],"o":{"n":"bool"}}],[11,"ne","","",122,{"i":[{"n":"self"},{"n":"constvar"}],"o":{"n":"bool"}}],[11,"clone","","",123,{"i":[{"n":"self"}],"o":{"n":"constantbuffervar"}}],[11,"fmt","","",123,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",123,null],[11,"eq","","",123,{"i":[{"n":"self"},{"n":"constantbuffervar"}],"o":{"n":"bool"}}],[11,"ne","","",123,{"i":[{"n":"self"},{"n":"constantbuffervar"}],"o":{"n":"bool"}}],[11,"clone","","",124,{"i":[{"n":"self"}],"o":{"n":"texturevar"}}],[11,"fmt","","",124,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",124,null],[11,"eq","","",124,{"i":[{"n":"self"},{"n":"texturevar"}],"o":{"n":"bool"}}],[11,"ne","","",124,{"i":[{"n":"self"},{"n":"texturevar"}],"o":{"n":"bool"}}],[11,"clone","","",125,{"i":[{"n":"self"}],"o":{"n":"unorderedvar"}}],[11,"fmt","","",125,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",125,null],[11,"eq","","",125,{"i":[{"n":"self"},{"n":"unorderedvar"}],"o":{"n":"bool"}}],[11,"ne","","",125,{"i":[{"n":"self"},{"n":"unorderedvar"}],"o":{"n":"bool"}}],[11,"clone","","",126,{"i":[{"n":"self"}],"o":{"n":"samplervar"}}],[11,"fmt","","",126,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",126,null],[11,"eq","","",126,{"i":[{"n":"self"},{"n":"samplervar"}],"o":{"n":"bool"}}],[11,"ne","","",126,{"i":[{"n":"self"},{"n":"samplervar"}],"o":{"n":"bool"}}],[11,"clone","","",127,{"i":[{"n":"self"}],"o":{"n":"outputvar"}}],[11,"fmt","","",127,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",127,null],[11,"eq","","",127,{"i":[{"n":"self"},{"n":"outputvar"}],"o":{"n":"bool"}}],[11,"ne","","",127,{"i":[{"n":"self"},{"n":"outputvar"}],"o":{"n":"bool"}}],[11,"clone","","",128,{"i":[{"n":"self"}],"o":{"n":"programinfo"}}],[11,"fmt","","",128,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",128,null],[11,"eq","","",128,{"i":[{"n":"self"},{"n":"programinfo"}],"o":{"n":"bool"}}],[11,"ne","","",128,{"i":[{"n":"self"},{"n":"programinfo"}],"o":{"n":"bool"}}],[11,"fmt","","",144,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_info","","Get program info",144,{"i":[{"n":"self"}],"o":{"n":"programinfo"}}],[11,"eq","","",144,{"i":[{"n":"self"},{"n":"program"}],"o":{"n":"bool"}}],[11,"hash","","",144,{"i":[{"n":"self"},{"n":"h"}]}],[11,"clone","","",139,{"i":[{"n":"self"}],"o":{"n":"compatibilityerror"}}],[11,"fmt","","",139,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",139,{"i":[{"n":"self"},{"n":"compatibilityerror"}],"o":{"n":"bool"}}],[11,"fmt","","",139,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",139,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"is_compatible","","Whether a value is compatible with this variable. That is, whether the value can be stored in this variable.",122,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"g":["compatibilityerror"],"n":"result"}}],[11,"clone","","",140,{"i":[{"n":"self"}],"o":{"n":"createshadererror"}}],[11,"fmt","","",140,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",140,{"i":[{"n":"self"},{"n":"createshadererror"}],"o":{"n":"bool"}}],[11,"ne","","",140,{"i":[{"n":"self"},{"n":"createshadererror"}],"o":{"n":"bool"}}],[11,"fmt","","",140,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",140,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",145,{"i":[{"n":"self"}],"o":{"n":"createprogramerror"}}],[11,"fmt","","",145,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",145,{"i":[{"n":"self"},{"n":"createprogramerror"}],"o":{"n":"bool"}}],[11,"ne","","",145,{"i":[{"n":"self"},{"n":"createprogramerror"}],"o":{"n":"bool"}}],[11,"fmt","","",145,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",145,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from","","",145,{"i":[{"n":"s"}],"o":{"n":"createprogramerror"}}],[0,"texture","gfx_core","Texture creation and modification.",null,null],[6,"Layer","gfx_core::texture","A depth value, specifying which plane to select out of a 3D texture.",null,null],[6,"Level","","Mipmap level to select in a texture.",null,null],[3,"Raw","","Untyped texture",null,null],[3,"ImageInfoCommon","","Describes a subvolume of a texture, which image data can be uploaded into.",null,null],[12,"xoffset","","",146,null],[12,"yoffset","","",146,null],[12,"zoffset","","",146,null],[12,"width","","",146,null],[12,"height","","",146,null],[12,"depth","","",146,null],[12,"format","","Format of each texel.",146,null],[12,"mipmap","","Which mipmap to select.",146,null],[3,"TextureCopyRegion","","A texture region defined for copy operations",null,null],[12,"texture","","Raw texture",147,null],[12,"kind","","Texture kind",147,null],[12,"cube_face","","Optional cube face",147,null],[12,"info","","Dimensions, offsets, and format",147,null],[3,"Lod","","A wrapper for the LOD level of a texture.",null,null],[3,"PackedColor","","A wrapper for the 8bpp RGBA color, encoded as u32.",null,null],[12,"0","","",148,null],[3,"SamplerInfo","","Specifies how to sample from a texture.",null,null],[12,"filter","","Filter method to use.",149,null],[12,"wrap_mode","","Wrapping mode for each of the U, V, and W axis (S, T, and R in OpenGL speak).",149,null],[12,"lod_bias","","This bias is added to every computed mipmap level (N + lod_bias). For example, if it would select mipmap level 2 and lod_bias is 1, it will use mipmap level 3.",149,null],[12,"lod_range","","This range is used to clamp LOD level used for sampling.",149,null],[12,"comparison","","Comparison mode, used primary for a shadow map.",149,null],[12,"border","","Border color is used when one of the wrap modes is set to border.",149,null],[3,"Info","","Texture storage descriptor.",null,null],[12,"kind","","",150,null],[12,"levels","","",150,null],[12,"format","","",150,null],[12,"bind","","",150,null],[12,"usage","","",150,null],[3,"ResourceDesc","","Texture resource view descriptor.",null,null],[12,"channel","","",151,null],[12,"layer","","",151,null],[12,"min","","",151,null],[12,"max","","",151,null],[12,"swizzle","","",151,null],[3,"RenderDesc","","Texture render view descriptor.",null,null],[12,"channel","","",152,null],[12,"level","","",152,null],[12,"layer","","",152,null],[3,"DepthStencilFlags","","Depth-stencil read-only flags",null,null],[3,"DepthStencilDesc","","Texture depth-stencil view descriptor.",null,null],[12,"level","","",153,null],[12,"layer","","",153,null],[12,"flags","","",153,null],[4,"CreationError","","Pure texture object creation error.",null,null],[13,"Format","","Failed to map a given format to the device.",154,null],[13,"Kind","","The kind doesn't support a particular operation.",154,null],[13,"Samples","","Failed to map a given multisampled kind to the device.",154,null],[13,"Size","","Unsupported size in one of the dimensions.",154,null],[13,"Data","","The given data has a different size than the target texture slice.",154,null],[13,"Usage","","The mentioned usage mode is not supported",154,null],[13,"Mipmap","","The requested mipmap creation parameter is unsupported.",154,null],[13,"Level","","The requested mipmap level count does not match the provided data.",154,null],[4,"LayerError","","An error associated with selected texture layer.",null,null],[13,"NotExpected","","The source texture kind doesn't support array slices.",155,null],[13,"OutOfBounds","","Selected layer is outside of the provided range.",155,null],[4,"AaMode","","Describes the configuration of samples inside each texel.",null,null],[13,"Single","","No additional sample information",156,null],[13,"Multi","","MultiSampled Anti-Aliasing (MSAA)",156,null],[13,"Coverage","","Coverage Sampling Anti-Aliasing (CSAA/EQAA)",156,null],[4,"FilterMethod","","How to filter the texture when sampling. They correspond to increasing levels of quality, but also cost. They \"layer\" on top of each other: it is not possible to have bilinear filtering without mipmapping, for example.",null,null],[13,"Scale","","The dumbest filtering possible, nearest-neighbor interpolation.",157,null],[13,"Mipmap","","Add simple mipmapping.",157,null],[13,"Bilinear","","Sample multiple texels within a single mipmap level to increase quality.",157,null],[13,"Trilinear","","Sample multiple texels across two mipmap levels to increase quality.",157,null],[13,"Anisotropic","","Anisotropic filtering with a given \"max\", must be between 1 and 16, inclusive.",157,null],[4,"CubeFace","","The face of a cube texture to do an operation on.",null,null],[13,"PosX","","",158,null],[13,"NegX","","",158,null],[13,"PosY","","",158,null],[13,"NegY","","",158,null],[13,"PosZ","","",158,null],[13,"NegZ","","",158,null],[4,"Kind","","Specifies the kind of a texture storage to be allocated.",null,null],[13,"D1","","A single row of texels.",159,null],[13,"D1Array","","An array of rows of texels. Equivalent to Texture2D except that texels in a different row are not sampled.",159,null],[13,"D2","","A traditional 2D texture, with rows arranged contiguously.",159,null],[13,"D2Array","","An array of 2D textures. Equivalent to Texture3D except that texels in a different depth level are not sampled.",159,null],[13,"D3","","A volume texture, with each 2D layer arranged contiguously.",159,null],[13,"Cube","","A set of 6 2D textures, one for each face of a cube.",159,null],[13,"CubeArray","","An array of Cube textures.",159,null],[4,"Mipmap","","The marker for the texture initializer to generate extra space for the mipmap generation.",null,null],[13,"Provided","","The mipmap data is provided as a part of bitmap data.",160,null],[13,"Allocated","","The mipmap data is not provided, but the memory for it should be allocated for the later generation/",160,null],[4,"WrapMode","","Specifies how texture coordinates outside the range `[0, 1]` are handled.",null,null],[13,"Tile","","Tile the texture. That is, sample the coordinate modulo `1.0`. This is the default.",161,null],[13,"Mirror","","Mirror the texture. Like tile, but uses abs(coord) before the modulo.",161,null],[13,"Clamp","","Clamp the texture to the value at `0.0` or `1.0` respectively.",161,null],[13,"Border","","Use border color.",161,null],[6,"Size","","Dimension size",null,null],[6,"Bits","","Number of bits per component",null,null],[6,"NumSamples","","Number of MSAA samples",null,null],[6,"NumFragments","","Number of EQAA fragments",null,null],[6,"Dimensions","","Dimensions: width, height, depth, and samples.",null,null],[6,"RawImageInfo","","New raw image info based on the universal format spec.",null,null],[6,"NewImageInfo","","New image info based on the universal format spec. The format is suppsed to come from compile-time information as opposed to run-time enum values.",null,null],[17,"MAX_LEVEL","","Maximum accessible mipmap level of a texture.",null,null],[17,"CUBE_FACES","","A constant array of cube faces in the order they map to the hardware.",null,null],[11,"fmt","","",162,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_info","","Get texture descriptor",162,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"eq","","",162,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",162,{"i":[{"n":"self"},{"n":"h"}]}],[11,"clone","","",154,{"i":[{"n":"self"}],"o":{"n":"creationerror"}}],[11,"fmt","","",154,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",154,{"i":[{"n":"self"},{"n":"creationerror"}],"o":{"n":"bool"}}],[11,"ne","","",154,{"i":[{"n":"self"},{"n":"creationerror"}],"o":{"n":"bool"}}],[11,"fmt","","",154,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",154,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",155,{"i":[{"n":"self"}],"o":{"n":"layererror"}}],[11,"fmt","","",155,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",155,null],[11,"eq","","",155,{"i":[{"n":"self"},{"n":"layererror"}],"o":{"n":"bool"}}],[11,"ne","","",155,{"i":[{"n":"self"},{"n":"layererror"}],"o":{"n":"bool"}}],[11,"fmt","","",155,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",155,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",156,{"i":[{"n":"self"}],"o":{"n":"aamode"}}],[11,"fmt","","",156,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",156,null],[11,"cmp","","",156,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"n":"ordering"}}],[11,"eq","","",156,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"n":"bool"}}],[11,"ne","","",156,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",156,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",156,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"n":"bool"}}],[11,"le","","",156,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"n":"bool"}}],[11,"gt","","",156,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"n":"bool"}}],[11,"ge","","",156,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"n":"bool"}}],[11,"from","","",156,{"i":[{"n":"numsamples"}],"o":{"n":"aamode"}}],[11,"get_num_fragments","","Return the number of actual data fragments stored per texel.",156,{"i":[{"n":"self"}],"o":{"n":"numfragments"}}],[11,"needs_resolve","","Return true if the surface has to be resolved before sampling.",156,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",157,{"i":[{"n":"self"}],"o":{"n":"filtermethod"}}],[11,"fmt","","",157,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",157,null],[11,"cmp","","",157,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"n":"ordering"}}],[11,"eq","","",157,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"n":"bool"}}],[11,"ne","","",157,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",157,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",157,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"n":"bool"}}],[11,"le","","",157,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"n":"bool"}}],[11,"gt","","",157,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"n":"bool"}}],[11,"ge","","",157,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"n":"bool"}}],[11,"clone","","",158,{"i":[{"n":"self"}],"o":{"n":"cubeface"}}],[11,"fmt","","",158,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",158,null],[11,"cmp","","",158,{"i":[{"n":"self"},{"n":"cubeface"}],"o":{"n":"ordering"}}],[11,"eq","","",158,{"i":[{"n":"self"},{"n":"cubeface"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",158,{"i":[{"n":"self"},{"n":"cubeface"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",159,{"i":[{"n":"self"}],"o":{"n":"kind"}}],[11,"fmt","","",159,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",159,null],[11,"cmp","","",159,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"ordering"}}],[11,"eq","","",159,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"bool"}}],[11,"ne","","",159,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",159,{"i":[{"n":"self"},{"n":"kind"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",159,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"bool"}}],[11,"le","","",159,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"bool"}}],[11,"gt","","",159,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"bool"}}],[11,"ge","","",159,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"bool"}}],[11,"get_dimensions","","Get texture dimensions, with 0 values where not applicable.",159,{"i":[{"n":"self"}],"o":{"n":"dimensions"}}],[11,"get_level_dimensions","","Get the dimensionality of a particular mipmap level.",159,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"dimensions"}}],[11,"get_num_levels","","Count the number of mipmap levels.",159,{"i":[{"n":"self"}],"o":{"n":"level"}}],[11,"get_num_slices","","Return the number of slices for an array, or None for non-arrays.",159,{"i":[{"n":"self"}],"o":{"g":["layer"],"n":"option"}}],[11,"is_cube","","Check if it's one of the cube kinds.",159,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",160,{"i":[{"n":"self"}],"o":{"n":"mipmap"}}],[11,"fmt","","",160,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",160,null],[11,"cmp","","",160,{"i":[{"n":"self"},{"n":"mipmap"}],"o":{"n":"ordering"}}],[11,"eq","","",160,{"i":[{"n":"self"},{"n":"mipmap"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",160,{"i":[{"n":"self"},{"n":"mipmap"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",146,{"i":[{"n":"self"}],"o":{"n":"imageinfocommon"}}],[11,"fmt","","",146,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",146,null],[11,"cmp","","",146,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"n":"ordering"}}],[11,"eq","","",146,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"n":"bool"}}],[11,"ne","","",146,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",146,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",146,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"n":"bool"}}],[11,"le","","",146,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"n":"bool"}}],[11,"gt","","",146,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"n":"bool"}}],[11,"ge","","",146,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"n":"bool"}}],[11,"get_texel_count","","Get the total number of texels.",146,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"convert","","Convert into a differently typed format.",146,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"imageinfocommon"}}],[11,"is_inside","","Check if it fits inside given dimensions.",146,{"i":[{"n":"self"},{"n":"dimensions"}],"o":{"n":"bool"}}],[11,"get_byte_count","","Get the total number of bytes.",163,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",147,{"i":[{"n":"self"}],"o":{"n":"texturecopyregion"}}],[11,"fmt","","",147,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",147,null],[11,"cmp","","",147,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"n":"ordering"}}],[11,"eq","","",147,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"n":"bool"}}],[11,"ne","","",147,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",147,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",147,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"n":"bool"}}],[11,"le","","",147,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"n":"bool"}}],[11,"gt","","",147,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"n":"bool"}}],[11,"ge","","",147,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"n":"bool"}}],[11,"with_texture","","Change the texture",147,{"i":[{"n":"self"},{"n":"u"}],"o":{"n":"texturecopyregion"}}],[11,"clone","","",161,{"i":[{"n":"self"}],"o":{"n":"wrapmode"}}],[11,"fmt","","",161,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",161,null],[11,"cmp","","",161,{"i":[{"n":"self"},{"n":"wrapmode"}],"o":{"n":"ordering"}}],[11,"eq","","",161,{"i":[{"n":"self"},{"n":"wrapmode"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",161,{"i":[{"n":"self"},{"n":"wrapmode"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",164,{"i":[{"n":"self"}],"o":{"n":"lod"}}],[11,"fmt","","",164,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",164,null],[11,"eq","","",164,{"i":[{"n":"self"},{"n":"lod"}],"o":{"n":"bool"}}],[11,"ne","","",164,{"i":[{"n":"self"},{"n":"lod"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",164,{"i":[{"n":"self"},{"n":"lod"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",164,{"i":[{"n":"self"},{"n":"lod"}],"o":{"n":"bool"}}],[11,"le","","",164,{"i":[{"n":"self"},{"n":"lod"}],"o":{"n":"bool"}}],[11,"gt","","",164,{"i":[{"n":"self"},{"n":"lod"}],"o":{"n":"bool"}}],[11,"ge","","",164,{"i":[{"n":"self"},{"n":"lod"}],"o":{"n":"bool"}}],[11,"from","","",164,{"i":[{"n":"f32"}],"o":{"n":"lod"}}],[11,"into","","",164,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"clone","","",148,{"i":[{"n":"self"}],"o":{"n":"packedcolor"}}],[11,"fmt","","",148,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",148,null],[11,"eq","","",148,{"i":[{"n":"self"},{"n":"packedcolor"}],"o":{"n":"bool"}}],[11,"ne","","",148,{"i":[{"n":"self"},{"n":"packedcolor"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",148,{"i":[{"n":"self"},{"n":"packedcolor"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",148,{"i":[{"n":"self"},{"n":"packedcolor"}],"o":{"n":"bool"}}],[11,"le","","",148,{"i":[{"n":"self"},{"n":"packedcolor"}],"o":{"n":"bool"}}],[11,"gt","","",148,{"i":[{"n":"self"},{"n":"packedcolor"}],"o":{"n":"bool"}}],[11,"ge","","",148,{"i":[{"n":"self"},{"n":"packedcolor"}],"o":{"n":"bool"}}],[11,"from","","",148,null],[11,"into","","",148,null],[11,"clone","","",149,{"i":[{"n":"self"}],"o":{"n":"samplerinfo"}}],[11,"fmt","","",149,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",149,null],[11,"eq","","",149,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"bool"}}],[11,"ne","","",149,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",149,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",149,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"bool"}}],[11,"le","","",149,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"bool"}}],[11,"gt","","",149,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"bool"}}],[11,"ge","","",149,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"bool"}}],[11,"new","","Create a new sampler description with a given filter method and wrapping mode, using no LOD modifications.",149,{"i":[{"n":"filtermethod"},{"n":"wrapmode"}],"o":{"n":"samplerinfo"}}],[11,"clone","","",150,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"fmt","","",150,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",150,null],[11,"cmp","","",150,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"ordering"}}],[11,"eq","","",150,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"ne","","",150,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",150,{"i":[{"n":"self"},{"n":"info"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",150,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"le","","",150,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"gt","","",150,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"ge","","",150,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"to_image_info","","Get image info for a given mip.",150,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"newimageinfo"}}],[11,"to_raw_image_info","","Get the raw image info for a given mip and a channel type.",150,{"i":[{"n":"self"},{"n":"channeltype"},{"n":"level"}],"o":{"n":"rawimageinfo"}}],[11,"clone","","",151,{"i":[{"n":"self"}],"o":{"n":"resourcedesc"}}],[11,"fmt","","",151,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",151,null],[11,"cmp","","",151,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"n":"ordering"}}],[11,"eq","","",151,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"n":"bool"}}],[11,"ne","","",151,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",151,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",151,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"n":"bool"}}],[11,"le","","",151,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"n":"bool"}}],[11,"gt","","",151,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"n":"bool"}}],[11,"ge","","",151,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"n":"bool"}}],[11,"clone","","",152,{"i":[{"n":"self"}],"o":{"n":"renderdesc"}}],[11,"fmt","","",152,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",152,null],[11,"cmp","","",152,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"n":"ordering"}}],[11,"eq","","",152,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"n":"bool"}}],[11,"ne","","",152,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",152,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",152,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"n":"bool"}}],[11,"le","","",152,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"n":"bool"}}],[11,"gt","","",152,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"n":"bool"}}],[11,"ge","","",152,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"n":"bool"}}],[11,"eq","","",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"ne","","",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"clone","","",165,{"i":[{"n":"self"}],"o":{"n":"depthstencilflags"}}],[11,"partial_cmp","","",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"le","","",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"gt","","",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"ge","","",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"cmp","","",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"ordering"}}],[11,"hash","","",165,null],[11,"fmt","","",165,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",165,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",165,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",165,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",165,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"RO_DEPTH","","Depth is read-only in the view.",165,null],[18,"RO_STENCIL","","Stencil is read-only in the view.",165,null],[18,"RO_DEPTH_STENCIL","","Both depth and stencil are read-only.",165,null],[11,"empty","","Returns an empty set of flags.",165,{"o":{"n":"depthstencilflags"}}],[11,"all","","Returns the set containing all flags.",165,{"o":{"n":"depthstencilflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",165,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",165,{"i":[{"n":"u8"}],"o":{"g":["depthstencilflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",165,{"i":[{"n":"u8"}],"o":{"n":"depthstencilflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",165,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",165,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}]}],[11,"remove","","Removes the specified flags in-place.",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",165,{"i":[{"n":"self"},{"n":"depthstencilflags"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"depthstencilflags"}}],[11,"bitor_assign","","Adds the set of flags.",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"depthstencilflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"depthstencilflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"depthstencilflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}]}],[11,"not","","Returns the complement of this set of flags.",165,{"i":[{"n":"self"}],"o":{"n":"depthstencilflags"}}],[11,"extend","","",165,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",165,{"i":[{"n":"t"}],"o":{"n":"depthstencilflags"}}],[11,"clone","","",153,{"i":[{"n":"self"}],"o":{"n":"depthstencildesc"}}],[11,"fmt","","",153,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",153,null],[11,"cmp","","",153,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"n":"ordering"}}],[11,"eq","","",153,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"n":"bool"}}],[11,"ne","","",153,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",153,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",153,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"n":"bool"}}],[11,"le","","",153,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"n":"bool"}}],[11,"gt","","",153,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"n":"bool"}}],[11,"ge","","",153,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"n":"bool"}}],[11,"from","","",153,{"i":[{"n":"renderdesc"}],"o":{"n":"depthstencildesc"}}],[6,"VertexCount","gfx_core","Draw vertex count.",null,null],[6,"InstanceCount","","Draw number of instances",null,null],[6,"PatchSize","","Number of vertices in a patch",null,null],[6,"AttributeSlot","","Slot for an attribute.",null,null],[6,"ConstantBufferSlot","","Slot for a constant buffer object.",null,null],[6,"ResourceViewSlot","","Slot for a shader resource view.",null,null],[6,"UnorderedViewSlot","","Slot for an unordered access object.",null,null],[6,"ColorSlot","","Slot for an active color buffer.",null,null],[6,"SamplerSlot","","Slot for a sampler.",null,null],[6,"SubmissionResult","","",null,null],[17,"MAX_VERTEX_ATTRIBUTES","","Compile-time maximum number of vertex attributes.",null,null],[17,"MAX_COLOR_TARGETS","","Compile-time maximum number of color targets.",null,null],[17,"MAX_CONSTANT_BUFFERS","","Compile-time maximum number of constant buffers.",null,null],[17,"MAX_RESOURCE_VIEWS","","Compile-time maximum number of shader resource views (SRV).",null,null],[17,"MAX_UNORDERED_VIEWS","","Compile-time maximum number of unordered access views (UAV).",null,null],[17,"MAX_SAMPLERS","","Compile-time maximum number of samplers.",null,null],[8,"Resources","","Different types of a specific API.",null,null],[16,"Buffer","","",166,null],[16,"Shader","","",166,null],[16,"Program","","",166,null],[16,"PipelineStateObject","","",166,null],[16,"Texture","","",166,null],[16,"ShaderResourceView","","",166,null],[16,"UnorderedAccessView","","",166,null],[16,"RenderTargetView","","",166,null],[16,"DepthStencilView","","",166,null],[16,"Sampler","","",166,null],[16,"Fence","","",166,null],[16,"Mapping","","",166,null],[8,"Device","","A `Device` is responsible for submitting `CommandBuffer`s to the GPU.",null,null],[16,"Resources","","Associated `Resources` type.",167,null],[16,"CommandBuffer","","Associated `CommandBuffer` type. Every `Device` type can only work with one `CommandBuffer` type.",167,null],[10,"get_capabilities","","Returns the capabilities of this `Device`.",167,{"i":[{"n":"self"}],"o":{"n":"capabilities"}}],[10,"pin_submitted_resources","","Pin everything from this handle manager to live for a frame.",167,{"i":[{"n":"self"},{"n":"manager"}]}],[10,"submit","","Submits a `CommandBuffer` to the GPU for execution.",167,null],[10,"fenced_submit","","Submits a `CommandBuffer` to the GPU for execution. returns a fence that is signaled after the GPU has executed all commands",167,null],[10,"wait_fence","","Stalls the current thread until the fence is satisfied",167,{"i":[{"n":"self"},{"n":"fence"}]}],[10,"cleanup","","Cleanup unused resources. This should be called between frames.",167,{"i":[{"n":"self"}]}],[8,"Adapter","","Represents a physical or virtual device, which is capable of running the backend.",null,null],[16,"CommandQueue","","Associated `CommandQueue` type.",168,null],[16,"Device","","Associated `Device` type.",168,null],[16,"QueueFamily","","Associated `QueueFamily` type.",168,null],[10,"enumerate_adapters","","Enumerate all available adapters supporting this backend",168,{"o":{"n":"vec"}}],[10,"open","","Create a new device and command queues.",168,null],[10,"get_info","","Get the `AdapterInfo` for this adapater.",168,{"i":[{"n":"self"}],"o":{"n":"adapterinfo"}}],[10,"get_queue_families","","Return the supported queue families for this adapter.",168,null],[8,"QueueFamily","","`QueueFamily` denotes a group of command queues provided by the backend with the same properties/type.",null,null],[16,"Surface","","Associated `Surface` type.",169,null],[10,"supports_present","","Check if the queue family supports presentation to a surface",169,null],[10,"num_queues","","Return the number of available queues of this family",169,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[8,"CommandQueue","","Dummy trait for command queues. CommandBuffers will be later submitted to command queues instead of the device.",null,null],[8,"Surface","","A `Surface` abstracts the surface of a native window, which will be presented",null,null],[16,"CommandQueue","","Associated `CommandQueue` type.",170,null],[16,"SwapChain","","Associated `SwapChain` type.",170,null],[16,"Window","","Associated native `Window` type.",170,null],[10,"from_window","","Create a new surface from a native window.",170,null],[10,"build_swapchain","","Create a new swapchain from the current surface with an associated present queue.",170,null],[8,"SwapChain","","The `SwapChain` is the backend representation of the surface. It consists of multiple buffers, which will be presented on the surface.",null,null],[10,"acquire_frame","","Acquire a new frame for rendering. This needs to be called before presenting.",171,{"i":[{"n":"self"}],"o":{"n":"frame"}}],[10,"present","","Present one acquired frame in FIFO order.",171,{"i":[{"n":"self"}]}],[11,"clone","","",172,{"i":[{"n":"self"}],"o":{"n":"vertexshader"}}],[11,"fmt","","",172,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",172,null],[11,"eq","","",172,{"i":[{"n":"self"},{"n":"vertexshader"}],"o":{"n":"bool"}}],[11,"ne","","",172,{"i":[{"n":"self"},{"n":"vertexshader"}],"o":{"n":"bool"}}],[11,"reference","","",172,null],[11,"clone","","",173,{"i":[{"n":"self"}],"o":{"n":"hullshader"}}],[11,"fmt","","",173,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",173,null],[11,"eq","","",173,{"i":[{"n":"self"},{"n":"hullshader"}],"o":{"n":"bool"}}],[11,"ne","","",173,{"i":[{"n":"self"},{"n":"hullshader"}],"o":{"n":"bool"}}],[11,"reference","","",173,null],[11,"clone","","",174,{"i":[{"n":"self"}],"o":{"n":"domainshader"}}],[11,"fmt","","",174,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",174,null],[11,"eq","","",174,{"i":[{"n":"self"},{"n":"domainshader"}],"o":{"n":"bool"}}],[11,"ne","","",174,{"i":[{"n":"self"},{"n":"domainshader"}],"o":{"n":"bool"}}],[11,"reference","","",174,null],[11,"clone","","",175,{"i":[{"n":"self"}],"o":{"n":"geometryshader"}}],[11,"fmt","","",175,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",175,null],[11,"eq","","",175,{"i":[{"n":"self"},{"n":"geometryshader"}],"o":{"n":"bool"}}],[11,"ne","","",175,{"i":[{"n":"self"},{"n":"geometryshader"}],"o":{"n":"bool"}}],[11,"reference","","",175,null],[11,"clone","","",176,{"i":[{"n":"self"}],"o":{"n":"pixelshader"}}],[11,"fmt","","",176,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",176,null],[11,"eq","","",176,{"i":[{"n":"self"},{"n":"pixelshader"}],"o":{"n":"bool"}}],[11,"ne","","",176,{"i":[{"n":"self"},{"n":"pixelshader"}],"o":{"n":"bool"}}],[11,"reference","","",176,null],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"shaderset"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",20,null],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"shaderset"}],"o":{"n":"bool"}}],[11,"ne","","",20,{"i":[{"n":"self"},{"n":"shaderset"}],"o":{"n":"bool"}}],[11,"get_usage","","Return the aggregated stage usage for the set.",20,{"i":[{"n":"self"}],"o":{"n":"usage"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"capabilities"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"capabilities"}],"o":{"n":"bool"}}],[11,"ne","","",18,{"i":[{"n":"self"},{"n":"capabilities"}],"o":{"n":"bool"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"primitive"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",21,null],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"primitive"}],"o":{"n":"bool"}}],[11,"ne","","",21,{"i":[{"n":"self"},{"n":"primitive"}],"o":{"n":"bool"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"indextype"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",22,null],[11,"cmp","","",22,{"i":[{"n":"self"},{"n":"indextype"}],"o":{"n":"ordering"}}],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"indextype"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",22,{"i":[{"n":"self"},{"n":"indextype"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"submissionerror"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",23,{"i":[{"n":"self"},{"n":"submissionerror"}],"o":{"n":"bool"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",23,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"adapterinfo"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"adapterinfo"}],"o":{"n":"bool"}}],[11,"ne","","",19,{"i":[{"n":"self"},{"n":"adapterinfo"}],"o":{"n":"bool"}}],[11,"clone","","",177,{"i":[{"n":"self"}],"o":{"n":"frame"}}],[11,"fmt","","",177,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","gfx_core::state","",178,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx_core::target","",179,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"partial_cmp","gfx_core::state","",10,{"i":[{"n":"self"},{"n":"equation"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"le","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"gt","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"ge","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",14,{"i":[{"n":"self"},{"n":"blend"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",14,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"le","","",14,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"gt","","",14,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"ge","","",14,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",3,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",3,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"le","","",3,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"gt","","",3,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"ge","","",3,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",11,{"i":[{"n":"self"},{"n":"blendvalue"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"le","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"gt","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"ge","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx_core::target","",179,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",179,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"le","","",179,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"gt","","",179,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"ge","","",179,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx_core::state","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"le","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"gt","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"ge","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"le","","",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"gt","","",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"ge","","",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",6,{"i":[{"n":"self"},{"n":"stencilop"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx_core::target","",17,{"i":[{"n":"self"},{"n":"rect"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",17,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"le","","",17,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"gt","","",17,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"ge","","",17,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx_core::state","",4,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",4,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"le","","",4,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"gt","","",4,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"ge","","",4,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",5,{"i":[{"n":"self"},{"n":"comparison"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"le","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"gt","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"ge","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"le","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"gt","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"ge","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"cullface"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"frontface"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",178,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",178,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"le","","",178,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"gt","","",178,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"ge","","",178,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"offset"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",1,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"le","","",1,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"gt","","",1,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"ge","","",1,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",180,{"i":[{"n":"self"},{"n":"multisample"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",16,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",16,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"le","","",16,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"gt","","",16,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"ge","","",16,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"from_iter","gfx_core::target","",179,{"i":[{"n":"t"}],"o":{"n":"mirror"}}],[11,"from_iter","gfx_core::state","",178,{"i":[{"n":"t"}],"o":{"n":"colormask"}}],[11,"fmt","gfx_core::target","",179,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx_core::state","",178,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"bitor","gfx_core::target","Returns the union of the two sets of flags.",179,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"mirror"}}],[11,"bitor","gfx_core::state","Returns the union of the two sets of flags.",178,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"colormask"}}],[11,"sub","gfx_core::target","Returns the set difference of the two sets of flags.",179,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"mirror"}}],[11,"sub","gfx_core::state","Returns the set difference of the two sets of flags.",178,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"colormask"}}],[11,"clone","","",178,{"i":[{"n":"self"}],"o":{"n":"colormask"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"factor"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"comparison"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"stencilop"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"stencil"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"blend"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"rasterizer"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"offset"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"equation"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"depth"}}],[11,"clone","","",180,{"i":[{"n":"self"}],"o":{"n":"multisample"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"blendvalue"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"cullface"}}],[11,"clone","gfx_core::target","",179,{"i":[{"n":"self"}],"o":{"n":"mirror"}}],[11,"clone","gfx_core::state","",15,{"i":[{"n":"self"}],"o":{"n":"color"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"frontface"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"blendchannel"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"refvalues"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"rastermethod"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"stencilside"}}],[11,"clone","gfx_core::target","",17,{"i":[{"n":"self"}],"o":{"n":"rect"}}],[11,"default","gfx_core::state","",8,{"o":{"n":"stencil"}}],[11,"default","","",15,{"o":{"n":"color"}}],[11,"default","","",9,{"o":{"n":"depth"}}],[11,"default","","",13,{"o":{"n":"blendchannel"}}],[11,"default","","",7,{"o":{"n":"stencilside"}}],[11,"default","","",14,{"o":{"n":"blend"}}],[11,"default","","",16,{"o":{"n":"refvalues"}}],[11,"fmt","gfx_core::target","",179,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx_core::state","",178,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"sub_assign","gfx_core::target","Disables all flags enabled in the set.",179,null],[11,"sub_assign","gfx_core::state","Disables all flags enabled in the set.",178,null],[11,"bitxor","gfx_core::target","Returns the left flags, but with all the right flags toggled.",179,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"mirror"}}],[11,"bitxor","gfx_core::state","Returns the left flags, but with all the right flags toggled.",178,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"colormask"}}],[11,"extend","","",178,null],[11,"extend","gfx_core::target","",179,null],[11,"cmp","gfx_core::state","",5,{"i":[{"n":"self"},{"n":"comparison"}],"o":{"n":"ordering"}}],[11,"cmp","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"ordering"}}],[11,"cmp","","",11,{"i":[{"n":"self"},{"n":"blendvalue"}],"o":{"n":"ordering"}}],[11,"cmp","","",180,{"i":[{"n":"self"},{"n":"multisample"}],"o":{"n":"ordering"}}],[11,"cmp","","",2,{"i":[{"n":"self"},{"n":"cullface"}],"o":{"n":"ordering"}}],[11,"cmp","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"ordering"}}],[11,"cmp","","",178,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"ordering"}}],[11,"cmp","","",10,{"i":[{"n":"self"},{"n":"equation"}],"o":{"n":"ordering"}}],[11,"cmp","gfx_core::target","",179,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"ordering"}}],[11,"cmp","gfx_core::state","",6,{"i":[{"n":"self"},{"n":"stencilop"}],"o":{"n":"ordering"}}],[11,"cmp","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"ordering"}}],[11,"cmp","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"ordering"}}],[11,"cmp","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"ordering"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"frontface"}],"o":{"n":"ordering"}}],[11,"hash","","",6,null],[11,"hash","","",10,null],[11,"hash","","",15,null],[11,"hash","","",2,null],[11,"hash","","",14,null],[11,"hash","","",4,null],[11,"hash","","",9,null],[11,"hash","","",13,null],[11,"hash","","",8,null],[11,"hash","","",7,null],[11,"hash","","",3,null],[11,"hash","","",180,null],[11,"hash","gfx_core::target","",17,null],[11,"hash","gfx_core::state","",0,null],[11,"hash","","",1,null],[11,"hash","gfx_core::target","",179,null],[11,"hash","gfx_core::state","",5,null],[11,"hash","","",178,null],[11,"hash","","",11,null],[11,"hash","","",12,null],[11,"bitand_assign","","Disables all flags disabled in the set.",178,null],[11,"bitand_assign","gfx_core::target","Disables all flags disabled in the set.",179,null],[11,"eq","gfx_core::state","",178,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"ne","","",178,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"blendvalue"}],"o":{"n":"bool"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"ne","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"cullface"}],"o":{"n":"bool"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"ne","","",16,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"comparison"}],"o":{"n":"bool"}}],[11,"eq","","",180,{"i":[{"n":"self"},{"n":"multisample"}],"o":{"n":"bool"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"ne","","",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"eq","gfx_core::target","",179,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"ne","","",179,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"eq","gfx_core::state","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"ne","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"equation"}],"o":{"n":"bool"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"stencilop"}],"o":{"n":"bool"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"ne","","",14,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"frontface"}],"o":{"n":"bool"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"eq","gfx_core::target","",17,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"ne","","",17,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"bitxor_assign","gfx_core::state","Toggles the set of flags.",178,null],[11,"bitxor_assign","gfx_core::target","Toggles the set of flags.",179,null],[11,"not","","Returns the complement of this set of flags.",179,{"i":[{"n":"self"}],"o":{"n":"mirror"}}],[11,"not","gfx_core::state","Returns the complement of this set of flags.",178,{"i":[{"n":"self"}],"o":{"n":"colormask"}}],[11,"bitor_assign","","Adds the set of flags.",178,null],[11,"bitor_assign","gfx_core::target","Adds the set of flags.",179,null],[11,"fmt","gfx_core::state","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",180,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx_core::target","",179,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx_core::state","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",178,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx_core::target","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx_core::state","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",178,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx_core::target","",179,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",179,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"mirror"}}],[11,"bitand","gfx_core::state","Returns the intersection between the two sets of flags.",178,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"colormask"}}],[11,"new_fill","","Create a new filling rasterizer.",4,{"o":{"n":"rasterizer"}}],[11,"with_cull_back","","Add back face culling.",4,{"i":[{"n":"self"}],"o":{"n":"rasterizer"}}],[11,"with_offset","","Add polygon offset.",4,{"i":[{"n":"self"},{"n":"f32"},{"n":"i32"}],"o":{"n":"rasterizer"}}],[11,"new","","Create a new stencil state with a given function.",8,null],[11,"new","","Create a new blend state with a given equation.",14,{"i":[{"n":"equation"},{"n":"factor"},{"n":"factor"}],"o":{"n":"blend"}}],[18,"RED","","",178,null],[18,"GREEN","","",178,null],[18,"BLUE","","",178,null],[18,"ALPHA","","",178,null],[11,"empty","","Returns an empty set of flags.",178,{"o":{"n":"colormask"}}],[11,"all","","Returns the set containing all flags.",178,{"o":{"n":"colormask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",178,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",178,{"i":[{"n":"u8"}],"o":{"g":["colormask"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",178,{"i":[{"n":"u8"}],"o":{"n":"colormask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",178,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",178,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",178,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",178,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",178,null],[11,"remove","","Removes the specified flags in-place.",178,null],[11,"toggle","","Toggles the specified flags in-place.",178,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",178,null],[18,"X","gfx_core::target","",179,null],[18,"Y","","",179,null],[11,"empty","","Returns an empty set of flags.",179,{"o":{"n":"mirror"}}],[11,"all","","Returns the set containing all flags.",179,{"o":{"n":"mirror"}}],[11,"bits","","Returns the raw value of the flags currently stored.",179,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",179,{"i":[{"n":"u8"}],"o":{"g":["mirror"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",179,{"i":[{"n":"u8"}],"o":{"n":"mirror"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",179,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",179,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",179,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",179,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",179,null],[11,"remove","","Removes the specified flags in-place.",179,null],[11,"toggle","","Toggles the specified flags in-place.",179,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",179,null]],"paths":[[4,"FrontFace"],[3,"Offset"],[4,"CullFace"],[4,"RasterMethod"],[3,"Rasterizer"],[4,"Comparison"],[4,"StencilOp"],[3,"StencilSide"],[3,"Stencil"],[3,"Depth"],[4,"Equation"],[4,"BlendValue"],[4,"Factor"],[3,"BlendChannel"],[3,"Blend"],[3,"Color"],[3,"RefValues"],[3,"Rect"],[3,"Capabilities"],[3,"AdapterInfo"],[4,"ShaderSet"],[4,"Primitive"],[4,"IndexType"],[4,"SubmissionError"],[3,"Info"],[4,"Role"],[4,"CreationError"],[3,"Raw"],[4,"ClearColor"],[8,"Buffer"],[3,"AccessInfo"],[3,"AccessGuard"],[3,"AccessGuardBuffers"],[3,"AccessGuardBuffersChain"],[4,"DummyResources"],[3,"DummyFence"],[3,"DummyMapping"],[3,"DummyDevice"],[3,"DummyCommandBuffer"],[4,"ResourceViewError"],[4,"TargetViewError"],[4,"CombinedError"],[8,"Factory"],[3,"Swizzle"],[3,"Format"],[3,"U8Norm"],[3,"I8Norm"],[3,"U16Norm"],[3,"I16Norm"],[3,"F16"],[4,"ChannelType"],[4,"SurfaceType"],[4,"ChannelSource"],[8,"SurfaceTyped"],[8,"ChannelTyped"],[8,"Formatted"],[4,"Int"],[4,"Uint"],[4,"Inorm"],[4,"Unorm"],[4,"Float"],[4,"Srgb"],[4,"R4_G4"],[4,"R4_G4_B4_A4"],[4,"R5_G5_B5_A1"],[4,"R5_G6_B5"],[4,"R8"],[4,"R8_G8"],[4,"R8_G8_B8_A8"],[4,"R10_G10_B10_A2"],[4,"R11_G11_B10"],[4,"R16"],[4,"R16_G16"],[4,"R16_G16_B16"],[4,"R16_G16_B16_A16"],[4,"R32"],[4,"R32_G32"],[4,"R32_G32_B32"],[4,"R32_G32_B32_A32"],[4,"B8_G8_R8_A8"],[4,"D16"],[4,"D24"],[4,"D24_S8"],[4,"D32"],[3,"RawBuffer"],[3,"Buffer"],[3,"Shader"],[3,"Program"],[3,"RawPipelineState"],[3,"RawTexture"],[3,"Texture"],[3,"RawShaderResourceView"],[3,"ShaderResourceView"],[3,"RawUnorderedAccessView"],[3,"UnorderedAccessView"],[3,"RawRenderTargetView"],[3,"RawDepthStencilView"],[3,"RenderTargetView"],[3,"DepthStencilView"],[3,"Sampler"],[3,"Fence"],[3,"Manager"],[4,"Error"],[3,"Reader"],[3,"Writer"],[4,"Usage"],[3,"Access"],[3,"Bind"],[3,"ColorInfo"],[3,"DepthStencilInfo"],[3,"Element"],[3,"VertexBufferDesc"],[3,"Descriptor"],[3,"VertexBufferSet"],[3,"ConstantBufferParam"],[3,"ResourceViewParam"],[3,"UnorderedViewParam"],[3,"SamplerParam"],[3,"PixelTargetSet"],[3,"CreationError"],[3,"SamplerType"],[3,"AttributeVar"],[3,"ConstVar"],[3,"ConstantBufferVar"],[3,"TextureVar"],[3,"UnorderedVar"],[3,"SamplerVar"],[3,"OutputVar"],[3,"ProgramInfo"],[4,"IsArray"],[4,"IsComparison"],[4,"IsMultiSample"],[4,"IsRect"],[4,"MatrixFormat"],[4,"TextureType"],[4,"BaseType"],[4,"ContainerType"],[4,"Stage"],[4,"UniformValue"],[4,"CompatibilityError"],[4,"CreateShaderError"],[8,"BaseTyped"],[8,"Formatted"],[3,"Usage"],[3,"Program"],[3,"CreateProgramError"],[3,"ImageInfoCommon"],[3,"TextureCopyRegion"],[3,"PackedColor"],[3,"SamplerInfo"],[3,"Info"],[3,"ResourceDesc"],[3,"RenderDesc"],[3,"DepthStencilDesc"],[4,"CreationError"],[4,"LayerError"],[4,"AaMode"],[4,"FilterMethod"],[4,"CubeFace"],[4,"Kind"],[4,"Mipmap"],[4,"WrapMode"],[3,"Raw"],[6,"RawImageInfo"],[3,"Lod"],[3,"DepthStencilFlags"],[8,"Resources"],[8,"Device"],[8,"Adapter"],[8,"QueueFamily"],[8,"Surface"],[8,"SwapChain"],[3,"VertexShader"],[3,"HullShader"],[3,"DomainShader"],[3,"GeometryShader"],[3,"PixelShader"],[3,"Frame"],[3,"ColorMask"],[3,"Mirror"],[3,"MultiSample"]]};
searchIndex["gfx_debug_draw"] = {"doc":"","items":[[3,"DebugRenderer","gfx_debug_draw","",null,null],[4,"DebugRendererError","","",null,null],[13,"PipelineStateError","","",0,null],[13,"UpdateError","","",0,null],[13,"GfxTextError","","",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",0,{"i":[{"g":["string"],"n":"pipelinestateerror"}],"o":{"n":"debugrenderererror"}}],[11,"from","","",0,{"i":[{"g":["usize"],"n":"updateerror"}],"o":{"n":"debugrenderererror"}}],[11,"from","","",0,{"i":[{"n":"error"}],"o":{"n":"debugrenderererror"}}],[11,"new","","",1,{"i":[{"n":"f"},{"n":"renderer"},{"n":"usize"}],"o":{"g":["debugrenderer","debugrenderererror"],"n":"result"}}],[11,"draw_line","","",1,null],[11,"draw_marker","","",1,null],[11,"draw_text_on_screen","","",1,null],[11,"draw_text_at_position","","",1,null],[11,"render","","",1,null]],"paths":[[4,"DebugRendererError"],[3,"DebugRenderer"]]};
searchIndex["gfx_text"] = {"doc":"A library for drawing text for gfx-rs graphics API. Uses freetype-rs underneath to former the font bitmap texture and collect information about face glyphs.","items":[[3,"Renderer","gfx_text","Text renderer.",null,null],[3,"RendererBuilder","","Text renderer builder. Allows to set rendering options using builder pattern.",null,null],[4,"FontError","","Represents possible errors which may occur during the font loading.",null,null],[13,"NoFont","","No font was specified",0,null],[13,"EmptyFont","","Character set is empty",0,null],[13,"FreetypeError","","FreeType library error",0,null],[4,"Error","","General error type returned by the library. Wraps all other errors.",null,null],[13,"FontError","","Font loading error",1,null],[13,"PipelineError","","Pipeline creation/update error",1,null],[13,"ProgramError","","Program shader error.",1,null],[13,"CombinedError","","An error occuring during creation of texture or resource view",1,null],[13,"UpdateError","","An error occuring in buffer/texture updates",1,null],[4,"HorizontalAnchor","","An anchor aligns text horizontally to its given x position.",null,null],[13,"Left","","Anchor the left edge of the text",2,null],[13,"Center","","Anchor the horizontal mid-point of the text",2,null],[13,"Right","","Anchor the right edge of the text",2,null],[4,"VerticalAnchor","","An anchor aligns text vertically to its given y position.",null,null],[13,"Top","","Anchor the top edge of the text",3,null],[13,"Center","","Anchor the vertical mid-point of the text",3,null],[13,"Bottom","","Anchor the bottom edge of the text",3,null],[5,"new","","Create a new text renderer builder. Alias for `RendererBuilder::new`.",null,{"i":[{"n":"f"}],"o":{"n":"rendererbuilder"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",0,{"i":[{"n":"freetypeerror"}],"o":{"n":"fonterror"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"horizontalanchor"}],"o":{"n":"bool"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"verticalanchor"}],"o":{"n":"bool"}}],[11,"from","","",1,{"i":[{"n":"fonterror"}],"o":{"n":"error"}}],[11,"from","","",1,{"i":[{"g":["string"],"n":"pipelinestateerror"}],"o":{"n":"error"}}],[11,"from","","",1,{"i":[{"n":"programerror"}],"o":{"n":"error"}}],[11,"from","","",1,{"i":[{"n":"combinederror"}],"o":{"n":"error"}}],[11,"from","","",1,{"i":[{"g":["usize"],"n":"updateerror"}],"o":{"n":"error"}}],[11,"new","","Create a new text renderer builder.",4,{"i":[{"n":"f"}],"o":{"n":"self"}}],[11,"with_size","","Specify custom size.",4,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"self"}}],[11,"with_font","","Specify custom font by path.",4,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"with_font_data","","Pass raw font data.",4,null],[11,"with_outline","","Specify outline width and color. Not implemented yet.",4,null],[11,"with_buffer_size","","Specify custom initial buffer size.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"with_chars","","Make available only provided characters in font texture instead of loading all existing from the font face.",4,null],[11,"build","","Build a new text renderer instance using current settings.",4,{"i":[{"n":"self"}],"o":{"g":["renderer","error"],"n":"result"}}],[11,"unwrap","","Just an alias for `builder.build().unwrap()`.",4,{"i":[{"n":"self"}],"o":{"n":"renderer"}}],[11,"add","","Add some text to the current draw scene relative to the top left corner of the screen using pixel coordinates.",5,null],[11,"add_anchored","","Add text to the draw scene by anchoring an edge or mid-point to a position defined in screen pixel coordinates.",5,null],[11,"add_at","","Add some text to the draw scene using absolute world coordinates.",5,null],[11,"draw","","Draw the current scene and clear state.",5,{"i":[{"n":"self"},{"n":"encoder"},{"n":"rendertargetview"}],"o":{"g":["error"],"n":"result"}}],[11,"draw_at","","Draw using provided projection matrix.",5,null],[11,"measure","","Get the bounding box size of a string as rendered by this font.",5,null]],"paths":[[4,"FontError"],[4,"Error"],[4,"HorizontalAnchor"],[4,"VerticalAnchor"],[3,"RendererBuilder"],[3,"Renderer"]]};
searchIndex["input"] = {"doc":"A flexible structure for user interactions to be used in window frameworks and widgets libraries.","items":[[3,"AfterRenderArgs","input","After render arguments.",null,null],[3,"CloseArgs","","Close arguments.",null,null],[3,"IdleArgs","","Idle arguments, such as expected idle time in seconds.",null,null],[12,"dt","","Expected idle time in seconds.",0,null],[3,"ButtonArgs","","Button arguments",null,null],[12,"state","","New state of the button.",1,null],[12,"button","","The button that changed state.",1,null],[12,"scancode","","An optional scancode that tells the physical layout of a keyboard key. For other devices than keyboard, this is set to `None`.",1,null],[3,"RenderArgs","","Render arguments",null,null],[12,"ext_dt","","Extrapolated time in seconds, used to do smooth animation.",2,null],[12,"width","","The width of rendered area in points.",2,null],[12,"height","","The height of rendered area in points.",2,null],[12,"draw_width","","The width of rendered area in pixels.",2,null],[12,"draw_height","","The height of rendered area in pixels.",2,null],[3,"TouchArgs","","Touch arguments",null,null],[12,"device","","A unique identifier for touch device.",3,null],[12,"id","","A unique identifier for touch event.",3,null],[12,"x","","The x coordinate of the touch position, normalized 0..1.",3,null],[12,"y","","The y coordinate of the touch position, normalized 0..1.",3,null],[12,"z","","The z coordinate of the touch position, normalized 0..1.",3,null],[12,"px","","The x coordinate of the touch pressure direction.",3,null],[12,"py","","The y coordinate of the touch pressure direction.",3,null],[12,"pz","","The z coordinate of the touch pressure direction.",3,null],[12,"is_3d","","Whether the touch is in 3D.",3,null],[12,"touch","","The touch state.",3,null],[3,"UpdateArgs","","Update arguments, such as delta time in seconds",null,null],[12,"dt","","Delta time in seconds.",4,null],[3,"EventId","","Used to identify events arguments provided by traits.",null,null],[12,"0","","",5,null],[4,"ButtonState","","Stores button state.",null,null],[13,"Press","","Button was pressed.",6,null],[13,"Release","","Button was released.",6,null],[4,"Touch","","Stores the touch state.",null,null],[13,"Start","","The start of touch, for example a finger pressed down on a touch screen.",7,null],[13,"Move","","The move of touch, for example a finger moving while touching a touch screen.",7,null],[13,"End","","The end of touch, for example taking a finger away from a touch screen.",7,null],[13,"Cancel","","The cancel of touch, for example the window loses focus.",7,null],[4,"Button","","Models different kinds of buttons.",null,null],[13,"Keyboard","","A keyboard button.",8,null],[13,"Mouse","","A mouse button.",8,null],[13,"Controller","","A controller button.",8,null],[13,"Hat","","A controller hat (d-Pad)",8,null],[4,"Motion","","Models different kinds of motion.",null,null],[13,"MouseCursor","","x and y in window coordinates.",9,null],[13,"MouseRelative","","x and y in relative coordinates.",9,null],[13,"MouseScroll","","x and y in scroll ticks.",9,null],[13,"ControllerAxis","","controller axis move event.",9,null],[13,"Touch","","touch event.",9,null],[4,"HatState","","",null,null],[13,"Centered","","",10,null],[13,"Up","","",10,null],[13,"Right","","",10,null],[13,"Down","","",10,null],[13,"Left","","",10,null],[13,"RightUp","","",10,null],[13,"RightDown","","",10,null],[13,"LeftUp","","",10,null],[13,"LeftDown","","",10,null],[4,"Input","","Models input events.",null,null],[13,"Button","","Changed button state.",11,null],[13,"Move","","Moved mouse cursor.",11,null],[13,"Text","","Text (usually from keyboard).",11,null],[13,"Resize","","Window got resized.",11,null],[13,"Focus","","Window gained or lost focus.",11,null],[13,"Cursor","","Window gained or lost cursor.",11,null],[13,"Close","","Window closed.",11,null],[4,"Loop","","Models loop events.",null,null],[13,"Render","","Render graphics.",12,null],[13,"AfterRender","","After rendering and swapping buffers.",12,null],[13,"Update","","Update the state of the application.",12,null],[13,"Idle","","Do background tasks that can be done incrementally.",12,null],[4,"Event","","Models all events.",null,null],[13,"Input","","Input events.",13,null],[13,"Loop","","Events that commonly used by event loops.",13,null],[13,"Custom","","Custom event.",13,null],[0,"controller","","Back-end agnostic controller events.",null,null],[3,"ControllerButton","input::controller","Components of a controller button event. Not guaranteed consistent across backends.",null,null],[12,"id","","Which controller was the button on.",14,null],[12,"button","","Which button was pressed.",14,null],[3,"ControllerHat","","Components of a controller hat move event (d-Pad).",null,null],[12,"id","","Which Controller was the button on.",15,null],[12,"state","","Which button was pressed.",15,null],[12,"which","","Which hat on the controller was changed",15,null],[3,"ControllerAxisArgs","","Components of a controller axis move event. Not guaranteed consistent across backends.",null,null],[12,"id","","Which controller moved.",16,null],[12,"axis","","The axis that moved.",16,null],[12,"position","","Position of the controller. Usually [-1.0, 1.0], though backends may use a different range for various devices.",16,null],[8,"ControllerAxisEvent","","The position of a controller axis changed.",null,null],[10,"from_controller_axis_args","","Creates a controller axis event.",17,{"i":[{"n":"controlleraxisargs"},{"n":"self"}],"o":{"n":"option"}}],[10,"controller_axis","","Calls closure if this is a controller axis event.",17,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"controller_axis_args","","Returns controller axis arguments.",17,{"i":[{"n":"self"}],"o":{"g":["controlleraxisargs"],"n":"option"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"controllerbutton"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"controllerbutton"}],"o":{"n":"bool"}}],[11,"ne","","",14,{"i":[{"n":"self"},{"n":"controllerbutton"}],"o":{"n":"bool"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",14,null],[11,"new","","Create a new ControllerButton object. Intended for use by backends when emitting events.",14,{"i":[{"n":"i32"},{"n":"u8"}],"o":{"n":"self"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"controllerhat"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"controllerhat"}],"o":{"n":"bool"}}],[11,"ne","","",15,{"i":[{"n":"self"},{"n":"controllerhat"}],"o":{"n":"bool"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",15,null],[11,"new","","Create a new ControllerButton object. Intended for use by backends when emitting events.",15,{"i":[{"n":"i32"},{"n":"u8"},{"n":"hatstate"}],"o":{"n":"self"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"controlleraxisargs"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"controlleraxisargs"}],"o":{"n":"bool"}}],[11,"ne","","",16,{"i":[{"n":"self"},{"n":"controlleraxisargs"}],"o":{"n":"bool"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new ControllerAxisArgs object. Intended for use by backends when emitting events.",16,{"i":[{"n":"i32"},{"n":"u8"},{"n":"f64"}],"o":{"n":"self"}}],[11,"from_controller_axis_args","input","",13,{"i":[{"n":"controlleraxisargs"},{"n":"self"}],"o":{"n":"option"}}],[11,"controller_axis","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[0,"keyboard","","Back-end agnostic keyboard keys.",null,null],[3,"ModifierKey","input::keyboard","",null,null],[4,"Key","","Represent a keyboard key. Keycodes follows SDL http://wiki.libsdl.org/SDLKeycodeLookup",null,null],[13,"Unknown","","",18,null],[13,"Backspace","","",18,null],[13,"Tab","","",18,null],[13,"Return","","",18,null],[13,"Escape","","",18,null],[13,"Space","","",18,null],[13,"Exclaim","","",18,null],[13,"Quotedbl","","",18,null],[13,"Hash","","",18,null],[13,"Dollar","","",18,null],[13,"Percent","","",18,null],[13,"Ampersand","","",18,null],[13,"Quote","","",18,null],[13,"LeftParen","","",18,null],[13,"RightParen","","",18,null],[13,"Asterisk","","",18,null],[13,"Plus","","",18,null],[13,"Comma","","",18,null],[13,"Minus","","",18,null],[13,"Period","","",18,null],[13,"Slash","","",18,null],[13,"D0","","",18,null],[13,"D1","","",18,null],[13,"D2","","",18,null],[13,"D3","","",18,null],[13,"D4","","",18,null],[13,"D5","","",18,null],[13,"D6","","",18,null],[13,"D7","","",18,null],[13,"D8","","",18,null],[13,"D9","","",18,null],[13,"Colon","","",18,null],[13,"Semicolon","","",18,null],[13,"Less","","",18,null],[13,"Equals","","",18,null],[13,"Greater","","",18,null],[13,"Question","","",18,null],[13,"At","","",18,null],[13,"LeftBracket","","",18,null],[13,"Backslash","","",18,null],[13,"RightBracket","","",18,null],[13,"Caret","","",18,null],[13,"Underscore","","",18,null],[13,"Backquote","","",18,null],[13,"A","","",18,null],[13,"B","","",18,null],[13,"C","","",18,null],[13,"D","","",18,null],[13,"E","","",18,null],[13,"F","","",18,null],[13,"G","","",18,null],[13,"H","","",18,null],[13,"I","","",18,null],[13,"J","","",18,null],[13,"K","","",18,null],[13,"L","","",18,null],[13,"M","","",18,null],[13,"N","","",18,null],[13,"O","","",18,null],[13,"P","","",18,null],[13,"Q","","",18,null],[13,"R","","",18,null],[13,"S","","",18,null],[13,"T","","",18,null],[13,"U","","",18,null],[13,"V","","",18,null],[13,"W","","",18,null],[13,"X","","",18,null],[13,"Y","","",18,null],[13,"Z","","",18,null],[13,"Delete","","",18,null],[13,"CapsLock","","",18,null],[13,"F1","","",18,null],[13,"F2","","",18,null],[13,"F3","","",18,null],[13,"F4","","",18,null],[13,"F5","","",18,null],[13,"F6","","",18,null],[13,"F7","","",18,null],[13,"F8","","",18,null],[13,"F9","","",18,null],[13,"F10","","",18,null],[13,"F11","","",18,null],[13,"F12","","",18,null],[13,"PrintScreen","","",18,null],[13,"ScrollLock","","",18,null],[13,"Pause","","",18,null],[13,"Insert","","",18,null],[13,"Home","","",18,null],[13,"PageUp","","",18,null],[13,"End","","",18,null],[13,"PageDown","","",18,null],[13,"Right","","",18,null],[13,"Left","","",18,null],[13,"Down","","",18,null],[13,"Up","","",18,null],[13,"NumLockClear","","",18,null],[13,"NumPadDivide","","",18,null],[13,"NumPadMultiply","","",18,null],[13,"NumPadMinus","","",18,null],[13,"NumPadPlus","","",18,null],[13,"NumPadEnter","","",18,null],[13,"NumPad1","","",18,null],[13,"NumPad2","","",18,null],[13,"NumPad3","","",18,null],[13,"NumPad4","","",18,null],[13,"NumPad5","","",18,null],[13,"NumPad6","","",18,null],[13,"NumPad7","","",18,null],[13,"NumPad8","","",18,null],[13,"NumPad9","","",18,null],[13,"NumPad0","","",18,null],[13,"NumPadPeriod","","",18,null],[13,"Application","","",18,null],[13,"Power","","",18,null],[13,"NumPadEquals","","",18,null],[13,"F13","","",18,null],[13,"F14","","",18,null],[13,"F15","","",18,null],[13,"F16","","",18,null],[13,"F17","","",18,null],[13,"F18","","",18,null],[13,"F19","","",18,null],[13,"F20","","",18,null],[13,"F21","","",18,null],[13,"F22","","",18,null],[13,"F23","","",18,null],[13,"F24","","",18,null],[13,"Execute","","",18,null],[13,"Help","","",18,null],[13,"Menu","","",18,null],[13,"Select","","",18,null],[13,"Stop","","",18,null],[13,"Again","","",18,null],[13,"Undo","","",18,null],[13,"Cut","","",18,null],[13,"Copy","","",18,null],[13,"Paste","","",18,null],[13,"Find","","",18,null],[13,"Mute","","",18,null],[13,"VolumeUp","","",18,null],[13,"VolumeDown","","",18,null],[13,"NumPadComma","","",18,null],[13,"NumPadEqualsAS400","","",18,null],[13,"AltErase","","",18,null],[13,"Sysreq","","",18,null],[13,"Cancel","","",18,null],[13,"Clear","","",18,null],[13,"Prior","","",18,null],[13,"Return2","","",18,null],[13,"Separator","","",18,null],[13,"Out","","",18,null],[13,"Oper","","",18,null],[13,"ClearAgain","","",18,null],[13,"CrSel","","",18,null],[13,"ExSel","","",18,null],[13,"NumPad00","","",18,null],[13,"NumPad000","","",18,null],[13,"ThousandsSeparator","","",18,null],[13,"DecimalSeparator","","",18,null],[13,"CurrencyUnit","","",18,null],[13,"CurrencySubUnit","","",18,null],[13,"NumPadLeftParen","","",18,null],[13,"NumPadRightParen","","",18,null],[13,"NumPadLeftBrace","","",18,null],[13,"NumPadRightBrace","","",18,null],[13,"NumPadTab","","",18,null],[13,"NumPadBackspace","","",18,null],[13,"NumPadA","","",18,null],[13,"NumPadB","","",18,null],[13,"NumPadC","","",18,null],[13,"NumPadD","","",18,null],[13,"NumPadE","","",18,null],[13,"NumPadF","","",18,null],[13,"NumPadXor","","",18,null],[13,"NumPadPower","","",18,null],[13,"NumPadPercent","","",18,null],[13,"NumPadLess","","",18,null],[13,"NumPadGreater","","",18,null],[13,"NumPadAmpersand","","",18,null],[13,"NumPadDblAmpersand","","",18,null],[13,"NumPadVerticalBar","","",18,null],[13,"NumPadDblVerticalBar","","",18,null],[13,"NumPadColon","","",18,null],[13,"NumPadHash","","",18,null],[13,"NumPadSpace","","",18,null],[13,"NumPadAt","","",18,null],[13,"NumPadExclam","","",18,null],[13,"NumPadMemStore","","",18,null],[13,"NumPadMemRecall","","",18,null],[13,"NumPadMemClear","","",18,null],[13,"NumPadMemAdd","","",18,null],[13,"NumPadMemSubtract","","",18,null],[13,"NumPadMemMultiply","","",18,null],[13,"NumPadMemDivide","","",18,null],[13,"NumPadPlusMinus","","",18,null],[13,"NumPadClear","","",18,null],[13,"NumPadClearEntry","","",18,null],[13,"NumPadBinary","","",18,null],[13,"NumPadOctal","","",18,null],[13,"NumPadDecimal","","",18,null],[13,"NumPadHexadecimal","","",18,null],[13,"LCtrl","","",18,null],[13,"LShift","","",18,null],[13,"LAlt","","",18,null],[13,"LGui","","",18,null],[13,"RCtrl","","",18,null],[13,"RShift","","",18,null],[13,"RAlt","","",18,null],[13,"RGui","","",18,null],[13,"Mode","","",18,null],[13,"AudioNext","","",18,null],[13,"AudioPrev","","",18,null],[13,"AudioStop","","",18,null],[13,"AudioPlay","","",18,null],[13,"AudioMute","","",18,null],[13,"MediaSelect","","",18,null],[13,"Www","","",18,null],[13,"Mail","","",18,null],[13,"Calculator","","",18,null],[13,"Computer","","",18,null],[13,"AcSearch","","",18,null],[13,"AcHome","","",18,null],[13,"AcBack","","",18,null],[13,"AcForward","","",18,null],[13,"AcStop","","",18,null],[13,"AcRefresh","","",18,null],[13,"AcBookmarks","","",18,null],[13,"BrightnessDown","","",18,null],[13,"BrightnessUp","","",18,null],[13,"DisplaySwitch","","",18,null],[13,"KbdIllumToggle","","",18,null],[13,"KbdIllumDown","","",18,null],[13,"KbdIllumUp","","",18,null],[13,"Eject","","",18,null],[13,"Sleep","","",18,null],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"ne","","",19,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"modifierkey"}}],[11,"partial_cmp","","",19,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",19,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"le","","",19,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"gt","","",19,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"ge","","",19,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"cmp","","",19,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"ordering"}}],[11,"hash","","",19,null],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"NO_MODIFIER","","No modifier.",19,null],[18,"CTRL","","Ctrl.",19,null],[18,"SHIFT","","Shift.",19,null],[18,"ALT","","Alt.",19,null],[18,"GUI","","Gui.",19,null],[18,"CTRL_SHIFT","","Ctrl + Shift.",19,null],[18,"CTRL_ALT","","Ctrl + Alt.",19,null],[18,"CTRL_GUI","","Ctrl + Gui.",19,null],[18,"CTRL_SHIFT_ALT","","Ctrl + Shift + Alt.",19,null],[18,"CTRL_SHIFT_GUI","","Ctrl + Shift + Gui.",19,null],[18,"CTRL_SHIFT_ALT_GUI","","Ctrl + Shift + Alt + Gui.",19,null],[18,"SHIFT_ALT","","Shift + Alt.",19,null],[18,"SHIFT_GUI","","Shift + Gui.",19,null],[18,"SHIFT_ALT_GUI","","Shift + Alt + Gui.",19,null],[18,"ALT_GUI","","Alt + Gui.",19,null],[11,"empty","","Returns an empty set of flags.",19,{"o":{"n":"modifierkey"}}],[11,"all","","Returns the set containing all flags.",19,{"o":{"n":"modifierkey"}}],[11,"bits","","Returns the raw value of the flags currently stored.",19,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",19,{"i":[{"n":"u8"}],"o":{"g":["modifierkey"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",19,{"i":[{"n":"u8"}],"o":{"n":"modifierkey"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",19,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",19,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",19,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",19,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",19,{"i":[{"n":"self"},{"n":"modifierkey"}]}],[11,"remove","","Removes the specified flags in-place.",19,{"i":[{"n":"self"},{"n":"modifierkey"}]}],[11,"toggle","","Toggles the specified flags in-place.",19,{"i":[{"n":"self"},{"n":"modifierkey"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",19,{"i":[{"n":"self"},{"n":"modifierkey"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",19,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"modifierkey"}}],[11,"bitor_assign","","Adds the set of flags.",19,{"i":[{"n":"self"},{"n":"modifierkey"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",19,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"modifierkey"}}],[11,"bitxor_assign","","Toggles the set of flags.",19,{"i":[{"n":"self"},{"n":"modifierkey"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",19,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"modifierkey"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",19,{"i":[{"n":"self"},{"n":"modifierkey"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",19,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"modifierkey"}}],[11,"sub_assign","","Disables all flags enabled in the set.",19,{"i":[{"n":"self"},{"n":"modifierkey"}]}],[11,"not","","Returns the complement of this set of flags.",19,{"i":[{"n":"self"}],"o":{"n":"modifierkey"}}],[11,"extend","","",19,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",19,{"i":[{"n":"t"}],"o":{"n":"modifierkey"}}],[11,"event","","Change modifier key state depending on input.",19,{"i":[{"n":"self"},{"n":"e"}]}],[11,"default","","",19,{"o":{"n":"modifierkey"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"key"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",18,null],[11,"from","","",18,{"i":[{"n":"u32"}],"o":{"n":"key"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"key"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",18,{"i":[{"n":"self"},{"n":"key"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",18,{"i":[{"n":"self"},{"n":"key"}],"o":{"n":"ordering"}}],[11,"code","","Returns an id of the key",18,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[0,"mouse","input","Back-end agnostic mouse buttons.",null,null],[4,"MouseButton","input::mouse","Represent a mouse button.",null,null],[13,"Unknown","","Unknown mouse button.",20,null],[13,"Left","","Left mouse button.",20,null],[13,"Right","","Right mouse button.",20,null],[13,"Middle","","Middle mouse button.",20,null],[13,"X1","","Extra mouse button number 1.",20,null],[13,"X2","","Extra mouse button number 2.",20,null],[13,"Button6","","Mouse button number 6.",20,null],[13,"Button7","","Mouse button number 7.",20,null],[13,"Button8","","Mouse button number 8.",20,null],[8,"MouseCursorEvent","","The position of the mouse cursor",null,null],[10,"from_xy","","Creates a mouse cursor event.",21,{"i":[{"n":"f64"},{"n":"f64"},{"n":"self"}],"o":{"n":"option"}}],[10,"mouse_cursor","","Calls closure if this is a mouse cursor event.",21,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"mouse_cursor_args","","Returns mouse cursor arguments.",21,{"i":[{"n":"self"}],"o":{"n":"option"}}],[8,"MouseRelativeEvent","","The relative movement of mouse cursor",null,null],[10,"from_xy","","Creates a mouse relative event.",22,{"i":[{"n":"f64"},{"n":"f64"},{"n":"self"}],"o":{"n":"option"}}],[10,"mouse_relative","","Calls closure if this is a mouse relative event.",22,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"mouse_relative_args","","Returns mouse relative arguments.",22,{"i":[{"n":"self"}],"o":{"n":"option"}}],[8,"MouseScrollEvent","","The scroll of the mouse wheel",null,null],[10,"from_xy","","Creates a mouse scroll event.",23,{"i":[{"n":"f64"},{"n":"f64"},{"n":"self"}],"o":{"n":"option"}}],[10,"mouse_scroll","","Calls a closure if this is a mouse scroll event.",23,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"mouse_scroll_args","","Returns mouse scroll arguments.",23,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"mousebutton"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"mousebutton"}],"o":{"n":"bool"}}],[11,"cmp","","",20,{"i":[{"n":"self"},{"n":"mousebutton"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",20,{"i":[{"n":"self"},{"n":"mousebutton"}],"o":{"g":["ordering"],"n":"option"}}],[11,"hash","","",20,null],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",20,{"i":[{"n":"u32"}],"o":{"n":"mousebutton"}}],[11,"from_xy","input","",13,{"i":[{"n":"f64"},{"n":"f64"},{"n":"self"}],"o":{"n":"option"}}],[11,"mouse_cursor","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"from_xy","","",13,{"i":[{"n":"f64"},{"n":"f64"},{"n":"self"}],"o":{"n":"option"}}],[11,"mouse_relative","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"from_xy","","",13,{"i":[{"n":"f64"},{"n":"f64"},{"n":"self"}],"o":{"n":"option"}}],[11,"mouse_scroll","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[0,"generic_event","","Trait for generic events",null,null],[8,"GenericEvent","input::generic_event","Implemented by all events",null,null],[10,"event_id","","The id of this event.",24,{"i":[{"n":"self"}],"o":{"n":"eventid"}}],[10,"with_args","","Calls closure with arguments",24,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"u"}}],[11,"event_id","input","",13,{"i":[{"n":"self"}],"o":{"n":"eventid"}}],[11,"with_args","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"u"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"afterrenderargs"}}],[11,"eq","","",25,{"i":[{"n":"self"},{"n":"afterrenderargs"}],"o":{"n":"bool"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_after_render_args","","",13,{"i":[{"n":"afterrenderargs"},{"n":"self"}],"o":{"n":"option"}}],[11,"after_render","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"buttonstate"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"buttonstate"}],"o":{"n":"bool"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"buttonargs"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"buttonargs"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"buttonargs"}],"o":{"n":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_button_args","","",13,{"i":[{"n":"buttonargs"},{"n":"self"}],"o":{"n":"option"}}],[11,"button","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"closeargs"}}],[11,"eq","","",26,{"i":[{"n":"self"},{"n":"closeargs"}],"o":{"n":"bool"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_close_args","","",13,{"i":[{"n":"closeargs"},{"n":"self"}],"o":{"n":"option"}}],[11,"close","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"from_cursor","","",13,{"i":[{"n":"bool"},{"n":"self"}],"o":{"n":"option"}}],[11,"cursor","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"from_focused","","",13,{"i":[{"n":"bool"},{"n":"self"}],"o":{"n":"option"}}],[11,"focus","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"idleargs"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"idleargs"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"idleargs"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_idle_args","","",13,{"i":[{"n":"idleargs"},{"n":"self"}],"o":{"n":"option"}}],[11,"idle","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"renderargs"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"renderargs"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"renderargs"}],"o":{"n":"bool"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"viewport","","Returns viewport information filling entire render area.",2,{"i":[{"n":"self"}],"o":{"n":"viewport"}}],[11,"from_render_args","","",13,{"i":[{"n":"renderargs"},{"n":"self"}],"o":{"n":"option"}}],[11,"render","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"from_width_height","","",13,{"i":[{"n":"u32"},{"n":"u32"},{"n":"self"}],"o":{"n":"option"}}],[11,"resize","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"from_text","","",13,{"i":[{"n":"str"},{"n":"self"}],"o":{"n":"option"}}],[11,"text","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"touch"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"touch"}],"o":{"n":"bool"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"touchargs"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"touchargs"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"touchargs"}],"o":{"n":"bool"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates arguments for 2D touch.",3,null],[11,"new_3d","","Creates arguments for 3D touch.",3,null],[11,"position","","The position of the touch in 2D.",3,null],[11,"position_3d","","The position of the touch in 3D.",3,null],[11,"pressure","","The pressure magnitude, normalized 0..1.",3,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"pressure_3d","","The pressure vector in 3D.",3,null],[11,"from_touch_args","","",13,{"i":[{"n":"touchargs"},{"n":"self"}],"o":{"n":"option"}}],[11,"touch","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"updateargs"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"updateargs"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"updateargs"}],"o":{"n":"bool"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_update_args","","",13,{"i":[{"n":"updateargs"},{"n":"self"}],"o":{"n":"option"}}],[11,"update","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[8,"AfterRenderEvent","","After rendering and buffers are swapped.",null,null],[10,"from_after_render_args","","Creates an after render event.",27,{"i":[{"n":"afterrenderargs"},{"n":"self"}],"o":{"n":"option"}}],[10,"after_render","","Calls closure if this is an after render event.",27,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"after_render_args","","Returns after render arguments.",27,{"i":[{"n":"self"}],"o":{"g":["afterrenderargs"],"n":"option"}}],[8,"CloseEvent","","Window is closing.",null,null],[10,"from_close_args","","Creates a close event from arguments.",28,{"i":[{"n":"closeargs"},{"n":"self"}],"o":{"n":"option"}}],[10,"close","","Calls closure if this is a close event.",28,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"close_args","","Returns close arguments.",28,{"i":[{"n":"self"}],"o":{"g":["closeargs"],"n":"option"}}],[8,"CursorEvent","","When window gets or loses cursor",null,null],[10,"from_cursor","","Creates a cursor event.",29,{"i":[{"n":"bool"},{"n":"self"}],"o":{"n":"option"}}],[10,"cursor","","Calls closure if this is a cursor event.",29,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"cursor_args","","Returns cursor arguments.",29,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"option"}}],[8,"FocusEvent","","When window gets or loses focus",null,null],[10,"from_focused","","Creates a focus event.",30,{"i":[{"n":"bool"},{"n":"self"}],"o":{"n":"option"}}],[10,"focus","","Calls closure if this is a focus event.",30,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"focus_args","","Returns focus arguments.",30,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"option"}}],[8,"IdleEvent","","When background tasks should be performed",null,null],[10,"from_idle_args","","Creates an idle event.",31,{"i":[{"n":"idleargs"},{"n":"self"}],"o":{"n":"option"}}],[11,"from_dt","","Creates an update event with delta time.",31,{"i":[{"n":"f64"},{"n":"self"}],"o":{"n":"option"}}],[10,"idle","","Calls closure if this is an idle event.",31,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"idle_args","","Returns idle arguments.",31,{"i":[{"n":"self"}],"o":{"g":["idleargs"],"n":"option"}}],[8,"ButtonEvent","","Changed button state.",null,null],[10,"from_button_args","","Creates a button event.",32,{"i":[{"n":"buttonargs"},{"n":"self"}],"o":{"n":"option"}}],[10,"button","","Calls closure if this is a button event.",32,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"button_args","","Returns button arguments.",32,{"i":[{"n":"self"}],"o":{"g":["buttonargs"],"n":"option"}}],[8,"PressEvent","","The press of a button",null,null],[10,"from_button","","Creates a press event.",33,{"i":[{"n":"button"},{"n":"self"}],"o":{"n":"option"}}],[10,"press","","Calls closure if this is a press event.",33,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"press_args","","Returns press arguments.",33,{"i":[{"n":"self"}],"o":{"g":["button"],"n":"option"}}],[8,"ReleaseEvent","","The release of a button",null,null],[10,"from_button","","Creates a release event.",34,{"i":[{"n":"button"},{"n":"self"}],"o":{"n":"option"}}],[10,"release","","Calls closure if this is a release event.",34,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"release_args","","Returns release arguments.",34,{"i":[{"n":"self"}],"o":{"g":["button"],"n":"option"}}],[8,"ResizeEvent","","When the window is resized",null,null],[10,"from_width_height","","Creates a resize event.",35,{"i":[{"n":"u32"},{"n":"u32"},{"n":"self"}],"o":{"n":"option"}}],[10,"resize","","Calls closure if this is a resize event.",35,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"resize_args","","Returns resize arguments.",35,{"i":[{"n":"self"}],"o":{"n":"option"}}],[8,"RenderEvent","","When the next frame should be rendered",null,null],[10,"from_render_args","","Creates a render event.",36,{"i":[{"n":"renderargs"},{"n":"self"}],"o":{"n":"option"}}],[10,"render","","Calls closure if this is a render event.",36,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"render_args","","Returns render arguments.",36,{"i":[{"n":"self"}],"o":{"g":["renderargs"],"n":"option"}}],[8,"TextEvent","","When receiving text from user, such as typing a character",null,null],[10,"from_text","","Creates a text event.",37,{"i":[{"n":"str"},{"n":"self"}],"o":{"n":"option"}}],[10,"text","","Calls closure if this is a text event.",37,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"text_args","","Returns text arguments.",37,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}],[8,"TouchEvent","","When a touch is started, moved, ended or cancelled.",null,null],[10,"from_touch_args","","Creates a touch event.",38,{"i":[{"n":"touchargs"},{"n":"self"}],"o":{"n":"option"}}],[10,"touch","","Calls closure if this is a touch event.",38,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"touch_args","","Returns touch arguments.",38,{"i":[{"n":"self"}],"o":{"g":["touchargs"],"n":"option"}}],[8,"UpdateEvent","","When the application state should be updated",null,null],[10,"from_update_args","","Creates an update event.",39,{"i":[{"n":"updateargs"},{"n":"self"}],"o":{"n":"option"}}],[11,"from_dt","","Creates an update event with delta time.",39,{"i":[{"n":"f64"},{"n":"self"}],"o":{"n":"option"}}],[10,"update","","Calls closure if this is an update event.",39,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"update_args","","Returns update arguments.",39,{"i":[{"n":"self"}],"o":{"g":["updateargs"],"n":"option"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"eventid"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"eventid"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"eventid"}],"o":{"n":"bool"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"button"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"button"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"button"}],"o":{"n":"bool"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"motion"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"motion"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"motion"}],"o":{"n":"bool"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"hatstate"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"hatstate"}],"o":{"n":"bool"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",10,null],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"input"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"input"}],"o":{"n":"bool"}}],[11,"ne","","",11,{"i":[{"n":"self"},{"n":"input"}],"o":{"n":"bool"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"loop"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"loop"}],"o":{"n":"bool"}}],[11,"ne","","",12,{"i":[{"n":"self"},{"n":"loop"}],"o":{"n":"bool"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"event"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"event"}],"o":{"n":"bool"}}],[11,"from","","",8,{"i":[{"n":"key"}],"o":{"n":"self"}}],[11,"from","","",8,{"i":[{"n":"mousebutton"}],"o":{"n":"self"}}],[11,"from","","",8,{"i":[{"n":"controllerbutton"}],"o":{"n":"self"}}],[11,"from","","",11,{"i":[{"n":"buttonargs"}],"o":{"n":"self"}}],[11,"from","","",9,{"i":[{"n":"controlleraxisargs"}],"o":{"n":"self"}}],[11,"from","","",11,{"i":[{"n":"controlleraxisargs"}],"o":{"n":"self"}}],[11,"from","","",9,{"i":[{"n":"touchargs"}],"o":{"n":"self"}}],[11,"from","","",11,{"i":[{"n":"touchargs"}],"o":{"n":"self"}}],[11,"from","","",11,{"i":[{"n":"motion"}],"o":{"n":"self"}}],[11,"from","","",12,{"i":[{"n":"renderargs"}],"o":{"n":"self"}}],[11,"from","","",13,{"i":[{"n":"renderargs"}],"o":{"n":"self"}}],[11,"from","","",12,{"i":[{"n":"afterrenderargs"}],"o":{"n":"self"}}],[11,"from","","",13,{"i":[{"n":"afterrenderargs"}],"o":{"n":"self"}}],[11,"from","","",12,{"i":[{"n":"updateargs"}],"o":{"n":"self"}}],[11,"from","","",13,{"i":[{"n":"updateargs"}],"o":{"n":"self"}}],[11,"from","","",12,{"i":[{"n":"idleargs"}],"o":{"n":"self"}}],[11,"from","","",13,{"i":[{"n":"idleargs"}],"o":{"n":"self"}}],[11,"from","","",11,{"i":[{"n":"closeargs"}],"o":{"n":"self"}}],[11,"from","","",13,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"from","","",13,{"i":[{"n":"loop"}],"o":{"n":"self"}}],[11,"into","","",13,{"i":[{"n":"self"}],"o":{"g":["input"],"n":"option"}}],[11,"into","","",13,{"i":[{"n":"self"}],"o":{"g":["loop"],"n":"option"}}],[11,"after_render_args","","Returns after render arguments.",27,{"i":[{"n":"self"}],"o":{"g":["afterrenderargs"],"n":"option"}}],[11,"button_args","","Returns button arguments.",32,{"i":[{"n":"self"}],"o":{"g":["buttonargs"],"n":"option"}}],[11,"press_args","","Returns press arguments.",33,{"i":[{"n":"self"}],"o":{"g":["button"],"n":"option"}}],[11,"release_args","","Returns release arguments.",34,{"i":[{"n":"self"}],"o":{"g":["button"],"n":"option"}}],[11,"close_args","","Returns close arguments.",28,{"i":[{"n":"self"}],"o":{"g":["closeargs"],"n":"option"}}],[11,"cursor_args","","Returns cursor arguments.",29,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"option"}}],[11,"focus_args","","Returns focus arguments.",30,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"option"}}],[11,"from_dt","","Creates an update event with delta time.",31,{"i":[{"n":"f64"},{"n":"self"}],"o":{"n":"option"}}],[11,"idle_args","","Returns idle arguments.",31,{"i":[{"n":"self"}],"o":{"g":["idleargs"],"n":"option"}}],[11,"render_args","","Returns render arguments.",36,{"i":[{"n":"self"}],"o":{"g":["renderargs"],"n":"option"}}],[11,"resize_args","","Returns resize arguments.",35,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"text_args","","Returns text arguments.",37,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}],[11,"touch_args","","Returns touch arguments.",38,{"i":[{"n":"self"}],"o":{"g":["touchargs"],"n":"option"}}],[11,"from_dt","","Creates an update event with delta time.",39,{"i":[{"n":"f64"},{"n":"self"}],"o":{"n":"option"}}],[11,"update_args","","Returns update arguments.",39,{"i":[{"n":"self"}],"o":{"g":["updateargs"],"n":"option"}}]],"paths":[[3,"IdleArgs"],[3,"ButtonArgs"],[3,"RenderArgs"],[3,"TouchArgs"],[3,"UpdateArgs"],[3,"EventId"],[4,"ButtonState"],[4,"Touch"],[4,"Button"],[4,"Motion"],[4,"HatState"],[4,"Input"],[4,"Loop"],[4,"Event"],[3,"ControllerButton"],[3,"ControllerHat"],[3,"ControllerAxisArgs"],[8,"ControllerAxisEvent"],[4,"Key"],[3,"ModifierKey"],[4,"MouseButton"],[8,"MouseCursorEvent"],[8,"MouseRelativeEvent"],[8,"MouseScrollEvent"],[8,"GenericEvent"],[3,"AfterRenderArgs"],[3,"CloseArgs"],[8,"AfterRenderEvent"],[8,"CloseEvent"],[8,"CursorEvent"],[8,"FocusEvent"],[8,"IdleEvent"],[8,"ButtonEvent"],[8,"PressEvent"],[8,"ReleaseEvent"],[8,"ResizeEvent"],[8,"RenderEvent"],[8,"TextEvent"],[8,"TouchEvent"],[8,"UpdateEvent"]]};
searchIndex["itertools"] = {"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[4,"Either","itertools","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[4,"Diff","","A type returned by the `diff_with` function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator's remaining elements starting with the first mis-match.",1,null],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",1,null],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",1,null],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for more detail.",null,null],[13,"NoElements","","Empty iterator",2,null],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",2,null],[13,"MinMax","","More than one element in the iterator, the first element is not larger than the second",2,null],[4,"Position","","A value yielded by `WithPosition`. Indicates the position of this element in the iterator results.",null,null],[13,"First","","This is the first element.",3,null],[13,"Middle","","This is neither the first nor the last element.",3,null],[13,"Last","","This is the last element.",3,null],[13,"Only","","This is the only element.",3,null],[4,"EitherOrBoth","","A value yielded by `ZipLongest`. Contains one or two values, depending on which of the input iterators are exhausted.",null,null],[13,"Both","","Neither input iterator is exhausted yet, yielding two values.",4,null],[13,"Left","","The parameter iterator of `.zip_longest()` is exhausted, only yielding a value from the `self` iterator.",4,null],[13,"Right","","The `self` iterator of `.zip_longest()` is exhausted, only yielding a value from the parameter iterator.",4,null],[4,"FoldWhile","","An enum used for controlling the execution of `.fold_while()`.",null,null],[13,"Continue","","Continue folding with this value",5,null],[13,"Done","","Fold is complete and will return this value",5,null],[5,"cons_tuples","","Create an iterator that maps for example iterators of `((A, B), C)` to `(A, B, C)`.",null,{"i":[{"n":"i"}],"o":{"n":"constuples"}}],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and returns a `Diff` which describes how `j` differs from `i`.",null,{"i":[{"n":"i"},{"n":"j"},{"n":"f"}],"o":{"g":["diff"],"n":"option"}}],[5,"kmerge_by","","Create an iterator that merges elements of the contained iterators.",null,{"i":[{"n":"i"},{"n":"f"}],"o":{"n":"kmergeby"}}],[5,"repeat_n","","Create an iterator that produces `n` repetitions of `element`.",null,{"i":[{"n":"a"},{"n":"usize"}],"o":{"n":"repeatn"}}],[5,"repeat_call","","An iterator source that produces elements indefinitely by calling a given closure.",null,{"i":[{"n":"f"}],"o":{"n":"repeatcall"}}],[5,"unfold","","Creates a new unfold source with the specified closure as the \"iterator function\" and an initial state to eventually pass to the closure",null,{"i":[{"n":"st"},{"n":"f"}],"o":{"n":"unfold"}}],[5,"iterate","","Creates a new iterator that infinitely applies function to value and yields results.",null,{"i":[{"n":"st"},{"n":"f"}],"o":{"n":"iterate"}}],[5,"multizip","","An iterator that generalizes .zip() and allows running multiple iterators in lockstep.",null,{"i":[{"n":"u"}],"o":{"n":"zip"}}],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",null,{"i":[{"n":"i"},{"n":"j"}],"o":{"n":"interleave"}}],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",null,{"i":[{"n":"i"},{"n":"j"}],"o":{"n":"merge"}}],[5,"put_back","","Create an iterator where you can put back a single item",null,{"i":[{"n":"i"}],"o":{"n":"putback"}}],[5,"put_back_n","","Create an iterator where you can put back multiple values to the front of the iteration.",null,{"i":[{"n":"i"}],"o":{"n":"putbackn"}}],[5,"multipeek","","An iterator adaptor that allows the user to peek at multiple `.next()` values without advancing the base iterator.",null,{"i":[{"n":"i"}],"o":{"n":"multipeek"}}],[5,"kmerge","","Create an iterator that merges elements of the contained iterators using the ordering function.",null,{"i":[{"n":"i"}],"o":{"n":"kmerge"}}],[5,"zip_eq","","Iterate `i` and `j` in lock step.",null,{"i":[{"n":"i"},{"n":"j"}],"o":{"n":"zipeq"}}],[5,"rciter","","Return an iterator inside a `Rc<RefCell<_>>` wrapper.",null,{"i":[{"n":"i"}],"o":{"n":"rciter"}}],[5,"enumerate","","Iterate `iterable` with a running index.",null,{"i":[{"n":"i"}],"o":{"n":"enumerate"}}],[5,"rev","","Iterate `iterable` in reverse.",null,{"i":[{"n":"i"}],"o":{"n":"rev"}}],[5,"zip","","Iterate `i` and `j` in lock step.",null,{"i":[{"n":"i"},{"n":"j"}],"o":{"n":"zip"}}],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",null,{"i":[{"n":"i"},{"n":"j"}],"o":{"n":"chain"}}],[5,"cloned","","Create an iterator that clones each element from &T to T",null,{"i":[{"n":"i"}],"o":{"n":"cloned"}}],[5,"fold","","Perform a fold operation over the iterable.",null,{"i":[{"n":"i"},{"n":"b"},{"n":"f"}],"o":{"n":"b"}}],[5,"all","","Test whether the predicate holds for all elements in the iterable.",null,{"i":[{"n":"i"},{"n":"f"}],"o":{"n":"bool"}}],[5,"any","","Test whether the predicate holds for any elements in the iterable.",null,{"i":[{"n":"i"},{"n":"f"}],"o":{"n":"bool"}}],[5,"max","","Return the maximum value of the iterable.",null,{"i":[{"n":"i"}],"o":{"n":"option"}}],[5,"min","","Return the minimum value of the iterable.",null,{"i":[{"n":"i"}],"o":{"n":"option"}}],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",null,{"i":[{"n":"i"},{"n":"str"}],"o":{"n":"string"}}],[5,"sorted","","Collect all the iterable's elements into a sorted vector in ascending order.",null,{"i":[{"n":"i"}],"o":{"n":"vec"}}],[5,"equal","","Return `true` if both iterators produce equal sequences (elements pairwise equal and sequences of the same length), `false` otherwise.",null,{"i":[{"n":"i"},{"n":"j"}],"o":{"n":"bool"}}],[5,"assert_equal","","Assert that two iterators produce equal sequences, with the same semantics as equal(a, b).",null,{"i":[{"n":"i"},{"n":"j"}]}],[5,"partition","","Partition a sequence using predicate `pred` so that elements that map to `true` are placed before elements which map to `false`.",null,{"i":[{"n":"i"},{"n":"f"}],"o":{"n":"usize"}}],[0,"structs","","The concrete iterator types.",null,null],[3,"Dedup","itertools::structs","An iterator adaptor that removes repeated duplicates.",null,null],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both run out.",null,null],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until one of them runs out.",null,null],[3,"Product","","An iterator adaptor that iterates over the cartesian product of the element sets of two iterators `I` and `J`.",null,null],[3,"PutBack","","An iterator adaptor that allows putting back a single item to the front of the iterator.",null,null],[3,"PutBackN","","An iterator adaptor that allows putting multiple items in front of the iterator.",null,null],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",null,null],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator for each iteration.",null,null],[3,"MapResults","","An iterator adapter to apply a transformation within a nested `Result`.",null,null],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MultiPeek","","See `multipeek()` for more information.",null,null],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate returns `true`.",null,null],[3,"WhileSome","","An iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",null,null],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",null,null],[3,"TupleCombinations","","An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples of a specific size.",null,null],[3,"Combinations","","An iterator to iterate through all the `n`-length combinations in an iterator.",null,null],[3,"Unique","","An iterator adapter to filter out duplicate elements.",null,null],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",null,null],[3,"Flatten","","An iterator adapter to simply flatten a structure.",null,null],[3,"ConsTuples","","An iterator that maps an iterator of tuples like `((A, B), C)` to an iterator of `(A, B, C)`.",null,null],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"FormatWith","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"IntoChunks","","`ChunkLazy` is the storage for a lazy chunking operation.",null,null],[3,"Chunk","","An iterator for the elements in a single chunk.",null,null],[3,"Chunks","","An iterator that yields the Chunk iterators.",null,null],[3,"GroupBy","","`GroupBy` is the storage for the lazy grouping operation.",null,null],[3,"Group","","An iterator for the elements in a single group.",null,null],[3,"Groups","","An iterator that yields the Group iterators.",null,null],[3,"Intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",null,null],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base iterators in ascending order. If all base iterators are sorted (ascending), the result is sorted.",null,null],[3,"KMergeBy","","An iterator adaptor that merges an abitrary number of base iterators according to an ordering function.",null,null],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling missing elements using a closure.",null,null],[3,"PeekingTakeWhile","","An iterator adaptor that takes items while a closure returns `true`.",null,null],[3,"RcIter","","A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.",null,null],[12,"rciter","","The boxed iterator.",6,null],[3,"RepeatN","","An iterator that produces n repetitions of an element.",null,null],[3,"RepeatCall","","See `repeat_call` for more information.",null,null],[3,"Unfold","","See `unfold` for more information.",null,null],[12,"state","","Internal state that will be passed to the closure on the next iteration",7,null],[3,"Iterate","","An iterator that infinitely applies function to value and yields results.",null,null],[3,"Tee","","One half of an iterator pair where both return the same elements.",null,null],[3,"TupleBuffer","","An iterator over a incomplete tuple.",null,null],[3,"TupleWindows","","An iterator over all contiguous windows that produces tuples of a specific size.",null,null],[3,"Tuples","","An iterator that groups the items in tuples of a specific size.",null,null],[3,"WithPosition","","An iterator adaptor that wraps each element in an `Position`.",null,null],[3,"ZipEq","","An iterator which iterates two other iterators simultaneously",null,null],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",null,null],[3,"Zip","","See `multizip` for more information.",null,null],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"multipeek"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"reset_peek","","Reset the peeking “cursor”",8,{"i":[{"n":"self"}]}],[11,"peek","","Works exactly like `.next()` with the only difference that it doesn't advance itself. `.peek()` can be called multiple times, to peek further ahead.",8,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",8,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",8,null],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"interleave"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",9,null],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"interleaveshortest"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",10,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",10,null],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"putback"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"with_value","","put back value `value` (builder method)",11,null],[11,"into_parts","","Split the `PutBack` into its parts.",11,null],[11,"put_back","","Put back a single value to the front of the iterator.",11,null],[11,"next","","",11,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",11,null],[11,"all","","",11,{"i":[{"n":"self"},{"n":"g"}],"o":{"n":"bool"}}],[11,"fold","","",11,{"i":[{"n":"self"},{"n":"acc"},{"n":"g"}],"o":{"n":"acc"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"putbackn"}}],[11,"put_back","","Puts x in front of the iterator. The values are yielded in order of the most recently put back values first.",12,null],[11,"next","","",12,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",12,null],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"product"}}],[11,"next","","",13,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",13,null],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"batching"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",14,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",14,null],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"step"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",15,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",15,null],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",16,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",16,null],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"next","","",17,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",17,null],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",18,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",18,null],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",19,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",19,null],[11,"fold","","",19,{"i":[{"n":"self"},{"n":"acc"},{"n":"g"}],"o":{"n":"acc"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",20,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",20,null],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"whilesome"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",21,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",21,null],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",22,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",23,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"uniqueby"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",24,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",24,null],[11,"next","","",25,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",25,null],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"unique"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"flatten"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",26,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fold","","",26,{"i":[{"n":"self"},{"n":"acc"},{"n":"g"}],"o":{"n":"acc"}}],[11,"next_back","","",26,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",27,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",27,null],[11,"next","","",28,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",28,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",28,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",28,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",28,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",28,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"format"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",31,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"drop","","",32,{"i":[{"n":"self"}]}],[11,"next","","",32,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",33,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"drop","","",34,{"i":[{"n":"self"}]}],[11,"next","","",34,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"intersperse"}}],[11,"next","","",35,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",35,null],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"kmerge"}}],[11,"next","","",36,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",36,null],[11,"next","","",37,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",37,null],[11,"clone","itertools","",2,{"i":[{"n":"self"}],"o":{"n":"minmaxresult"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"minmaxresult"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"minmaxresult"}],"o":{"n":"bool"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The returned `Option` has variant `None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`. If the `MinMaxResult` has variant `OneElement(x)`, performing this operation will make one clone of `x`.",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","itertools::structs","",38,{"i":[{"n":"self"}],"o":{"n":"padusing"}}],[11,"next","","",38,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",38,null],[11,"next_back","","",38,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"peeking_next","","",11,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"peeking_next","","",12,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"next","","",39,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",39,null],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"rciter"}}],[11,"next","","",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"new","","",40,{"i":[{"n":"a"},{"n":"usize"}],"o":{"n":"self"}}],[11,"next","","",40,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",40,null],[11,"next_back","","",40,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",41,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",41,null],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"unfold"}}],[11,"next","","",7,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",7,null],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"iterate"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",42,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",42,null],[11,"next","","",43,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",43,null],[11,"next","","",44,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",44,null],[11,"next","","",45,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"into_buffer","","Return a buffer with the produced items that was not enough to be grouped in a tuple.",45,{"i":[{"n":"self"}],"o":{"n":"tuplebuffer"}}],[11,"next","","",46,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","itertools","",3,{"i":[{"n":"self"}],"o":{"n":"position"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"position"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"position"}],"o":{"n":"bool"}}],[11,"into_inner","","Return the inner value.",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"next","itertools::structs","",47,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",47,null],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"zipeq"}}],[11,"next","","",48,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",48,null],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"ziplongest"}}],[11,"next","","",49,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",49,null],[11,"next_back","","",49,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","itertools","",4,{"i":[{"n":"self"}],"o":{"n":"eitherorboth"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"eitherorboth"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"eitherorboth"}],"o":{"n":"bool"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","itertools::structs","",50,{"i":[{"n":"self"}],"o":{"n":"zip"}}],[11,"new","","Deprecated: renamed to multizip",50,{"i":[{"n":"u"}],"o":{"n":"zip"}}],[11,"from","","",50,null],[11,"next","","",50,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",50,null],[8,"PeekingNext","itertools","An iterator that allows peeking at an element before deciding to accept it.",null,null],[10,"peeking_next","","Pass a reference to the next iterator element to the closure `accept`; if `accept` returns true, return it as the next element, else None.",51,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both run out.",52,{"i":[{"n":"self"},{"n":"j"}],"o":{"n":"interleave"}}],[11,"interleave_shortest","","Alternate elements from two iterators until one of them runs out.",52,{"i":[{"n":"self"},{"n":"j"}],"o":{"n":"interleaveshortest"}}],[11,"intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",52,null],[11,"zip_longest","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of two optional elements.",52,{"i":[{"n":"self"},{"n":"j"}],"o":{"n":"ziplongest"}}],[11,"zip_eq","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of elements.",52,{"i":[{"n":"self"},{"n":"j"}],"o":{"n":"zipeq"}}],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",52,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"batching"}}],[11,"group_by","","Return an iterable that can group iterator elements. Consecutive elements that map to the same key (“runs”), are assigned to the same group.",52,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"groupby"}}],[11,"group_by_lazy","","",52,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"groupby"}}],[11,"chunks","","Return an iterable that can chunk the iterator.",52,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"intochunks"}}],[11,"chunks_lazy","","",52,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"intochunks"}}],[11,"tuple_windows","","Return an iterator over all contiguous windows producing tuples of a specific size (up to 4).",52,{"i":[{"n":"self"}],"o":{"n":"tuplewindows"}}],[11,"tuples","","Return an iterator that groups the items in tuples of a specific size (up to 4).",52,{"i":[{"n":"self"}],"o":{"n":"tuples"}}],[11,"tee","","Split into an iterator pair that both yield all elements from the original iterator.",52,null],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator for each iteration.",52,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"step"}}],[11,"map_results","","Return an iterator adaptor that applies the provided closure to every `Result::Ok` value. `Result::Err` values are unchanged.",52,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"mapresults"}}],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.  If both base iterators are sorted (ascending), the result is sorted.",52,{"i":[{"n":"self"},{"n":"j"}],"o":{"n":"merge"}}],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order. This is much like `.merge()` but allows for a custom ordering.",52,{"i":[{"n":"self"},{"n":"j"},{"n":"f"}],"o":{"n":"mergeby"}}],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by merging them in ascending order.",52,{"i":[{"n":"self"}],"o":{"n":"kmerge"}}],[11,"kmerge_by","","Return an iterator adaptor that flattens an iterator of iterators by merging them according to the given closure.",52,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"kmergeby"}}],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of the element sets of two iterators `self` and `J`.",52,{"i":[{"n":"self"},{"n":"j"}],"o":{"n":"product"}}],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to optionally merge together consecutive elements.",52,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"coalesce"}}],[11,"dedup","","Remove duplicates from sections of consecutive identical elements. If the iterator is sorted, all elements will be unique.",52,{"i":[{"n":"self"}],"o":{"n":"dedup"}}],[11,"unique","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration. Duplicates are detected using hash and equality.",52,{"i":[{"n":"self"}],"o":{"n":"unique"}}],[11,"unique_by","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration.",52,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"uniqueby"}}],[11,"peeking_take_while","","Return an iterator adaptor that borrows from this iterator and  takes items while the closure `accept` returns `true`.",52,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"peekingtakewhile"}}],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate `accept` returns `true`.",52,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"takewhileref"}}],[11,"while_some","","Return an iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",52,{"i":[{"n":"self"}],"o":{"n":"whilesome"}}],[11,"tuple_combinations","","Return an iterator adaptor that iterates over the combinations of the elements from an iterator.",52,{"i":[{"n":"self"}],"o":{"n":"tuplecombinations"}}],[11,"combinations","","Return an iterator adaptor that iterates over the `n`-length combinations of the elements from an iterator.",52,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"combinations"}}],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of `min` by filling missing elements using a closure `f`.",52,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"padusing"}}],[11,"flatten","","Unravel a nested iterator.",52,{"i":[{"n":"self"}],"o":{"n":"flatten"}}],[11,"with_position","","Return an iterator adaptor that wraps each element in a `Position` to ease special-case handling of the first or last elements.",52,{"i":[{"n":"self"}],"o":{"n":"withposition"}}],[11,"next_tuple","","Advances the iterator and returns the next items grouped in a tuple of a specific size (up to 4).",52,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",52,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"option"}}],[11,"dropping","","Consume the first `n` elements from the iterator eagerly, and return the same iterator again.",52,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly, and return the same iterator again.",52,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",52,{"i":[{"n":"self"},{"n":"f"}]}],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`, for convenience.",52,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"set_from","","Assign to each reference in `self` from the `from` iterator, stopping at the shortest of the two iterators.",52,{"i":[{"n":"self"},{"n":"j"}],"o":{"n":"usize"}}],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",52,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"string"}}],[11,"format","","Format all iterator elements, separated by `sep`.",52,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"format"}}],[11,"format_default","","",52,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"format"}}],[11,"format_with","","Format all iterator elements, separated by `sep`.",52,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"formatwith"}}],[11,"fold_results","","Fold `Result` values from an iterator.",52,{"i":[{"n":"self"},{"n":"b"},{"n":"f"}],"o":{"n":"result"}}],[11,"fold_options","","Fold `Option` values from an iterator.",52,{"i":[{"n":"self"},{"n":"b"},{"n":"f"}],"o":{"n":"option"}}],[11,"fold1","","Accumulator of the elements in the iterator.",52,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"fold_while","","An iterator method that applies a function, producing a single, final value.",52,{"i":[{"n":"self"},{"n":"b"},{"n":"f"}],"o":{"n":"b"}}],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",52,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",52,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"vec"}}],[11,"partition_map","","Collect all iterator elements into one of two partitions. Unlike `Iterator::partition`, each partition may have a distinct type.",52,null],[11,"minmax","","Return the minimum and maximum elements in the iterator.",52,{"i":[{"n":"self"}],"o":{"n":"minmaxresult"}}],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as determined by the specified function.",52,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"minmaxresult"}}],[11,"minmax_by","","Return the minimum and maximum element of an iterator, as determined by the specified comparison function.",52,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"minmaxresult"}}],[14,"iproduct","","Create an iterator over the “cartesian product” of iterators.",null,null],[14,"izip","","Create an iterator running multiple iterators in lockstep.",null,null],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"i":[{"n":"self"},{"n":"f"},{"n":"g"}],"o":{"n":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"i":[{"n":"self"},{"n":"ctx"},{"n":"f"},{"n":"g"}],"o":{"n":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"next_back","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"from","","",0,{"i":[{"n":"result"}],"o":{"n":"either"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"as_ref","","",0,{"i":[{"n":"self"}],"o":{"n":"target"}}],[11,"hash","","",0,null],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"ordering"}}],[11,"extend","","",0,null],[11,"deref","","",0,null],[11,"as_mut","","",0,{"i":[{"n":"self"}],"o":{"n":"target"}}],[11,"deref_mut","","",0,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"next","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"i":[{"n":"self"},{"n":"acc"},{"n":"g"}],"o":{"n":"acc"}}],[11,"count","","",0,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"last","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"nth","","",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"collect","","",0,{"i":[{"n":"self"}],"o":{"n":"b"}}],[11,"all","","",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"into","","",0,{"i":[{"n":"self"}],"o":{"n":"result"}}]],"paths":[[4,"Either"],[4,"Diff"],[4,"MinMaxResult"],[4,"Position"],[4,"EitherOrBoth"],[4,"FoldWhile"],[3,"RcIter"],[3,"Unfold"],[3,"MultiPeek"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"PutBackN"],[3,"Product"],[3,"Batching"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"Coalesce"],[3,"Dedup"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"TupleCombinations"],[3,"Combinations"],[3,"UniqueBy"],[3,"Unique"],[3,"Flatten"],[3,"MapResults"],[3,"ConsTuples"],[3,"Format"],[3,"FormatWith"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"KMerge"],[3,"KMergeBy"],[3,"PadUsing"],[3,"PeekingTakeWhile"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Iterate"],[3,"Tee"],[3,"TupleBuffer"],[3,"Tuples"],[3,"TupleWindows"],[3,"WithPosition"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"],[8,"PeekingNext"],[8,"Itertools"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",21,null],[12,"sin_port","","",21,null],[12,"sin_addr","","",21,null],[12,"sin_zero","","",21,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",22,null],[12,"sin6_port","","",22,null],[12,"sin6_flowinfo","","",22,null],[12,"sin6_addr","","",22,null],[12,"sin6_scope_id","","",22,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",23,null],[12,"sun_path","","",23,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",24,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",25,null],[12,"ai_family","","",25,null],[12,"ai_socktype","","",25,null],[12,"ai_protocol","","",25,null],[12,"ai_addrlen","","",25,null],[12,"ai_addr","","",25,null],[12,"ai_canonname","","",25,null],[12,"ai_next","","",25,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",26,null],[12,"nl_pid","","",26,null],[12,"nl_groups","","",26,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",27,null],[12,"sll_protocol","","",27,null],[12,"sll_ifindex","","",27,null],[12,"sll_hatype","","",27,null],[12,"sll_pkttype","","",27,null],[12,"sll_halen","","",27,null],[12,"sll_addr","","",27,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",28,null],[12,"tm_min","","",28,null],[12,"tm_hour","","",28,null],[12,"tm_mday","","",28,null],[12,"tm_mon","","",28,null],[12,"tm_year","","",28,null],[12,"tm_wday","","",28,null],[12,"tm_yday","","",28,null],[12,"tm_isdst","","",28,null],[12,"tm_gmtoff","","",28,null],[12,"tm_zone","","",28,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",29,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",30,null],[12,"dli_fbase","","",30,null],[12,"dli_sname","","",30,null],[12,"dli_saddr","","",30,null],[3,"epoll_event","","",null,null],[12,"events","","",31,null],[12,"u64","","",31,null],[3,"utsname","","",null,null],[12,"sysname","","",32,null],[12,"nodename","","",32,null],[12,"release","","",32,null],[12,"version","","",32,null],[12,"machine","","",32,null],[12,"domainname","","",32,null],[3,"lconv","","",null,null],[12,"decimal_point","","",33,null],[12,"thousands_sep","","",33,null],[12,"grouping","","",33,null],[12,"int_curr_symbol","","",33,null],[12,"currency_symbol","","",33,null],[12,"mon_decimal_point","","",33,null],[12,"mon_thousands_sep","","",33,null],[12,"mon_grouping","","",33,null],[12,"positive_sign","","",33,null],[12,"negative_sign","","",33,null],[12,"int_frac_digits","","",33,null],[12,"frac_digits","","",33,null],[12,"p_cs_precedes","","",33,null],[12,"p_sep_by_space","","",33,null],[12,"n_cs_precedes","","",33,null],[12,"n_sep_by_space","","",33,null],[12,"p_sign_posn","","",33,null],[12,"n_sign_posn","","",33,null],[12,"int_p_cs_precedes","","",33,null],[12,"int_p_sep_by_space","","",33,null],[12,"int_n_cs_precedes","","",33,null],[12,"int_n_sep_by_space","","",33,null],[12,"int_p_sign_posn","","",33,null],[12,"int_n_sign_posn","","",33,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",34,null],[12,"sigev_signo","","",34,null],[12,"sigev_notify","","",34,null],[12,"sigev_notify_thread_id","","",34,null],[3,"in_pktinfo","","",null,null],[12,"ipi_ifindex","","",35,null],[12,"ipi_spec_dst","","",35,null],[12,"ipi_addr","","",35,null],[3,"dirent","","",null,null],[12,"d_ino","","",36,null],[12,"d_off","","",36,null],[12,"d_reclen","","",36,null],[12,"d_type","","",36,null],[12,"d_name","","",36,null],[3,"dirent64","","",null,null],[12,"d_ino","","",37,null],[12,"d_off","","",37,null],[12,"d_reclen","","",37,null],[12,"d_type","","",37,null],[12,"d_name","","",37,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",38,null],[12,"rlim_max","","",38,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",39,null],[12,"gl_pathv","","",39,null],[12,"gl_offs","","",39,null],[12,"gl_flags","","",39,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",40,null],[12,"ifa_name","","",40,null],[12,"ifa_flags","","",40,null],[12,"ifa_addr","","",40,null],[12,"ifa_netmask","","",40,null],[12,"ifa_ifu","","",40,null],[12,"ifa_data","","",40,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",41,null],[12,"pw_passwd","","",41,null],[12,"pw_uid","","",41,null],[12,"pw_gid","","",41,null],[12,"pw_gecos","","",41,null],[12,"pw_dir","","",41,null],[12,"pw_shell","","",41,null],[3,"spwd","","",null,null],[12,"sp_namp","","",42,null],[12,"sp_pwdp","","",42,null],[12,"sp_lstchg","","",42,null],[12,"sp_min","","",42,null],[12,"sp_max","","",42,null],[12,"sp_warn","","",42,null],[12,"sp_inact","","",42,null],[12,"sp_expire","","",42,null],[12,"sp_flag","","",42,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",43,null],[12,"dqb_bsoftlimit","","",43,null],[12,"dqb_curspace","","",43,null],[12,"dqb_ihardlimit","","",43,null],[12,"dqb_isoftlimit","","",43,null],[12,"dqb_curinodes","","",43,null],[12,"dqb_btime","","",43,null],[12,"dqb_itime","","",43,null],[12,"dqb_valid","","",43,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",44,null],[12,"ssi_errno","","",44,null],[12,"ssi_code","","",44,null],[12,"ssi_pid","","",44,null],[12,"ssi_uid","","",44,null],[12,"ssi_fd","","",44,null],[12,"ssi_tid","","",44,null],[12,"ssi_band","","",44,null],[12,"ssi_overrun","","",44,null],[12,"ssi_trapno","","",44,null],[12,"ssi_status","","",44,null],[12,"ssi_int","","",44,null],[12,"ssi_ptr","","",44,null],[12,"ssi_utime","","",44,null],[12,"ssi_stime","","",44,null],[12,"ssi_addr","","",44,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",45,null],[12,"it_value","","",45,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",46,null],[12,"mq_maxmsg","","",46,null],[12,"mq_msgsize","","",46,null],[12,"mq_curmsgs","","",46,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",47,null],[12,"if_name","","",47,null],[3,"msginfo","","",null,null],[12,"msgpool","","",48,null],[12,"msgmap","","",48,null],[12,"msgmax","","",48,null],[12,"msgmnb","","",48,null],[12,"msgmni","","",48,null],[12,"msgssz","","",48,null],[12,"msgtql","","",48,null],[12,"msgseg","","",48,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",49,null],[12,"msg_len","","",49,null],[3,"sembuf","","",null,null],[12,"sem_num","","",50,null],[12,"sem_op","","",50,null],[12,"sem_flg","","",50,null],[3,"input_event","","",null,null],[12,"time","","",51,null],[12,"type_","","",51,null],[12,"code","","",51,null],[12,"value","","",51,null],[3,"input_id","","",null,null],[12,"bustype","","",52,null],[12,"vendor","","",52,null],[12,"product","","",52,null],[12,"version","","",52,null],[3,"input_absinfo","","",null,null],[12,"value","","",53,null],[12,"minimum","","",53,null],[12,"maximum","","",53,null],[12,"fuzz","","",53,null],[12,"flat","","",53,null],[12,"resolution","","",53,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",54,null],[12,"len","","",54,null],[12,"index","","",54,null],[12,"keycode","","",54,null],[12,"scancode","","",54,null],[3,"input_mask","","",null,null],[12,"type_","","",55,null],[12,"codes_size","","",55,null],[12,"codes_ptr","","",55,null],[3,"ff_replay","","",null,null],[12,"length","","",56,null],[12,"delay","","",56,null],[3,"ff_trigger","","",null,null],[12,"button","","",57,null],[12,"interval","","",57,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",58,null],[12,"attack_level","","",58,null],[12,"fade_length","","",58,null],[12,"fade_level","","",58,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",59,null],[12,"envelope","","",59,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",60,null],[12,"end_level","","",60,null],[12,"envelope","","",60,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",61,null],[12,"left_saturation","","",61,null],[12,"right_coeff","","",61,null],[12,"left_coeff","","",61,null],[12,"deadband","","",61,null],[12,"center","","",61,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",62,null],[12,"period","","",62,null],[12,"magnitude","","",62,null],[12,"offset","","",62,null],[12,"phase","","",62,null],[12,"envelope","","",62,null],[12,"custom_len","","",62,null],[12,"custom_data","","",62,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",63,null],[12,"weak_magnitude","","",63,null],[3,"ff_effect","","",null,null],[12,"type_","","",64,null],[12,"id","","",64,null],[12,"direction","","",64,null],[12,"trigger","","",64,null],[12,"replay","","",64,null],[12,"u","","",64,null],[3,"dl_phdr_info","","",null,null],[12,"dlpi_addr","","",65,null],[12,"dlpi_name","","",65,null],[12,"dlpi_phdr","","",65,null],[12,"dlpi_phnum","","",65,null],[12,"dlpi_adds","","",65,null],[12,"dlpi_subs","","",65,null],[12,"dlpi_tls_modid","","",65,null],[12,"dlpi_tls_data","","",65,null],[3,"Elf32_Phdr","","",null,null],[12,"p_type","","",66,null],[12,"p_offset","","",66,null],[12,"p_vaddr","","",66,null],[12,"p_paddr","","",66,null],[12,"p_filesz","","",66,null],[12,"p_memsz","","",66,null],[12,"p_flags","","",66,null],[12,"p_align","","",66,null],[3,"Elf64_Phdr","","",null,null],[12,"p_type","","",67,null],[12,"p_flags","","",67,null],[12,"p_offset","","",67,null],[12,"p_vaddr","","",67,null],[12,"p_paddr","","",67,null],[12,"p_filesz","","",67,null],[12,"p_memsz","","",67,null],[12,"p_align","","",67,null],[3,"ucred","","",null,null],[12,"pid","","",68,null],[12,"uid","","",68,null],[12,"gid","","",68,null],[3,"mntent","","",null,null],[12,"mnt_fsname","","",69,null],[12,"mnt_dir","","",69,null],[12,"mnt_type","","",69,null],[12,"mnt_opts","","",69,null],[12,"mnt_freq","","",69,null],[12,"mnt_passno","","",69,null],[3,"posix_spawn_file_actions_t","","",null,null],[3,"posix_spawnattr_t","","",null,null],[3,"genlmsghdr","","",null,null],[12,"cmd","","",70,null],[12,"version","","",70,null],[12,"reserved","","",70,null],[3,"in6_pktinfo","","",null,null],[12,"ipi6_addr","","",71,null],[12,"ipi6_ifindex","","",71,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",72,null],[12,"aio_lio_opcode","","",72,null],[12,"aio_reqprio","","",72,null],[12,"aio_buf","","",72,null],[12,"aio_nbytes","","",72,null],[12,"aio_sigevent","","",72,null],[12,"aio_offset","","",72,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",73,null],[12,"e_exit","","",73,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",74,null],[12,"tv_usec","","",74,null],[3,"utmpx","","",null,null],[12,"ut_type","","",75,null],[12,"ut_pid","","",75,null],[12,"ut_line","","",75,null],[12,"ut_id","","",75,null],[12,"ut_user","","",75,null],[12,"ut_host","","",75,null],[12,"ut_exit","","",75,null],[12,"ut_session","","",75,null],[12,"ut_tv","","",75,null],[12,"ut_addr_v6","","",75,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",76,null],[12,"sa_mask","","",76,null],[12,"sa_flags","","",76,null],[12,"sa_restorer","","",76,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",77,null],[12,"ss_flags","","",77,null],[12,"ss_size","","",77,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",78,null],[12,"si_errno","","",78,null],[12,"si_code","","",78,null],[12,"_pad","","",78,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",79,null],[12,"gl_pathv","","",79,null],[12,"gl_offs","","",79,null],[12,"gl_flags","","",79,null],[3,"statfs","","",null,null],[12,"f_type","","",80,null],[12,"f_bsize","","",80,null],[12,"f_blocks","","",80,null],[12,"f_bfree","","",80,null],[12,"f_bavail","","",80,null],[12,"f_files","","",80,null],[12,"f_ffree","","",80,null],[12,"f_fsid","","",80,null],[12,"f_namelen","","",80,null],[12,"f_frsize","","",80,null],[3,"msghdr","","",null,null],[12,"msg_name","","",81,null],[12,"msg_namelen","","",81,null],[12,"msg_iov","","",81,null],[12,"msg_iovlen","","",81,null],[12,"msg_control","","",81,null],[12,"msg_controllen","","",81,null],[12,"msg_flags","","",81,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",82,null],[12,"cmsg_level","","",82,null],[12,"cmsg_type","","",82,null],[3,"termios","","",null,null],[12,"c_iflag","","",83,null],[12,"c_oflag","","",83,null],[12,"c_cflag","","",83,null],[12,"c_lflag","","",83,null],[12,"c_line","","",83,null],[12,"c_cc","","",83,null],[12,"c_ispeed","","",83,null],[12,"c_ospeed","","",83,null],[3,"flock","","",null,null],[12,"l_type","","",84,null],[12,"l_whence","","",84,null],[12,"l_start","","",84,null],[12,"l_len","","",84,null],[12,"l_pid","","",84,null],[3,"sem_t","","",null,null],[3,"mallinfo","","",null,null],[12,"arena","","",85,null],[12,"ordblks","","",85,null],[12,"smblks","","",85,null],[12,"hblks","","",85,null],[12,"hblkhd","","",85,null],[12,"usmblks","","",85,null],[12,"fsmblks","","",85,null],[12,"uordblks","","",85,null],[12,"fordblks","","",85,null],[12,"keepcost","","",85,null],[3,"nlmsghdr","","",null,null],[12,"nlmsg_len","","",86,null],[12,"nlmsg_type","","",86,null],[12,"nlmsg_flags","","",86,null],[12,"nlmsg_seq","","",86,null],[12,"nlmsg_pid","","",86,null],[3,"nlmsgerr","","",null,null],[12,"error","","",87,null],[12,"msg","","",87,null],[3,"nl_pktinfo","","",null,null],[12,"group","","",88,null],[3,"nl_mmap_req","","",null,null],[12,"nm_block_size","","",89,null],[12,"nm_block_nr","","",89,null],[12,"nm_frame_size","","",89,null],[12,"nm_frame_nr","","",89,null],[3,"nl_mmap_hdr","","",null,null],[12,"nm_status","","",90,null],[12,"nm_len","","",90,null],[12,"nm_group","","",90,null],[12,"nm_pid","","",90,null],[12,"nm_uid","","",90,null],[12,"nm_gid","","",90,null],[3,"nlattr","","",null,null],[12,"nla_len","","",91,null],[12,"nla_type","","",91,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",92,null],[12,"loads","","",92,null],[12,"totalram","","",92,null],[12,"freeram","","",92,null],[12,"sharedram","","",92,null],[12,"bufferram","","",92,null],[12,"totalswap","","",92,null],[12,"freeswap","","",92,null],[12,"procs","","",92,null],[12,"pad","","",92,null],[12,"totalhigh","","",92,null],[12,"freehigh","","",92,null],[12,"mem_unit","","",92,null],[12,"_f","","",92,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",93,null],[12,"msg_stime","","",93,null],[12,"msg_rtime","","",93,null],[12,"msg_ctime","","",93,null],[12,"msg_qnum","","",93,null],[12,"msg_qbytes","","",93,null],[12,"msg_lspid","","",93,null],[12,"msg_lrpid","","",93,null],[3,"stat","","",null,null],[12,"st_dev","","",94,null],[12,"st_ino","","",94,null],[12,"st_nlink","","",94,null],[12,"st_mode","","",94,null],[12,"st_uid","","",94,null],[12,"st_gid","","",94,null],[12,"st_rdev","","",94,null],[12,"st_size","","",94,null],[12,"st_blksize","","",94,null],[12,"st_blocks","","",94,null],[12,"st_atime","","",94,null],[12,"st_atime_nsec","","",94,null],[12,"st_mtime","","",94,null],[12,"st_mtime_nsec","","",94,null],[12,"st_ctime","","",94,null],[12,"st_ctime_nsec","","",94,null],[3,"stat64","","",null,null],[12,"st_dev","","",95,null],[12,"st_ino","","",95,null],[12,"st_nlink","","",95,null],[12,"st_mode","","",95,null],[12,"st_uid","","",95,null],[12,"st_gid","","",95,null],[12,"st_rdev","","",95,null],[12,"st_size","","",95,null],[12,"st_blksize","","",95,null],[12,"st_blocks","","",95,null],[12,"st_atime","","",95,null],[12,"st_atime_nsec","","",95,null],[12,"st_mtime","","",95,null],[12,"st_mtime_nsec","","",95,null],[12,"st_ctime","","",95,null],[12,"st_ctime_nsec","","",95,null],[3,"statfs64","","",null,null],[12,"f_type","","",96,null],[12,"f_bsize","","",96,null],[12,"f_blocks","","",96,null],[12,"f_bfree","","",96,null],[12,"f_bavail","","",96,null],[12,"f_files","","",96,null],[12,"f_ffree","","",96,null],[12,"f_fsid","","",96,null],[12,"f_namelen","","",96,null],[12,"f_frsize","","",96,null],[12,"f_flags","","",96,null],[12,"f_spare","","",96,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",97,null],[12,"f_frsize","","",97,null],[12,"f_blocks","","",97,null],[12,"f_bfree","","",97,null],[12,"f_bavail","","",97,null],[12,"f_files","","",97,null],[12,"f_ffree","","",97,null],[12,"f_favail","","",97,null],[12,"f_fsid","","",97,null],[12,"f_flag","","",97,null],[12,"f_namemax","","",97,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",98,null],[12,"exponent","","",98,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",99,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",100,null],[12,"swd","","",100,null],[12,"ftw","","",100,null],[12,"fop","","",100,null],[12,"rip","","",100,null],[12,"rdp","","",100,null],[12,"mxcsr","","",100,null],[12,"mxcr_mask","","",100,null],[12,"_st","","",100,null],[12,"_xmm","","",100,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",101,null],[12,"swd","","",101,null],[12,"ftw","","",101,null],[12,"fop","","",101,null],[12,"rip","","",101,null],[12,"rdp","","",101,null],[12,"mxcsr","","",101,null],[12,"mxcr_mask","","",101,null],[12,"st_space","","",101,null],[12,"xmm_space","","",101,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",102,null],[12,"r14","","",102,null],[12,"r13","","",102,null],[12,"r12","","",102,null],[12,"rbp","","",102,null],[12,"rbx","","",102,null],[12,"r11","","",102,null],[12,"r10","","",102,null],[12,"r9","","",102,null],[12,"r8","","",102,null],[12,"rax","","",102,null],[12,"rcx","","",102,null],[12,"rdx","","",102,null],[12,"rsi","","",102,null],[12,"rdi","","",102,null],[12,"orig_rax","","",102,null],[12,"rip","","",102,null],[12,"cs","","",102,null],[12,"eflags","","",102,null],[12,"rsp","","",102,null],[12,"ss","","",102,null],[12,"fs_base","","",102,null],[12,"gs_base","","",102,null],[12,"ds","","",102,null],[12,"es","","",102,null],[12,"fs","","",102,null],[12,"gs","","",102,null],[3,"user","","",null,null],[12,"regs","","",103,null],[12,"u_fpvalid","","",103,null],[12,"i387","","",103,null],[12,"u_tsize","","",103,null],[12,"u_dsize","","",103,null],[12,"u_ssize","","",103,null],[12,"start_code","","",103,null],[12,"start_stack","","",103,null],[12,"signal","","",103,null],[12,"u_ar0","","",103,null],[12,"u_fpstate","","",103,null],[12,"magic","","",103,null],[12,"u_comm","","",103,null],[12,"u_debugreg","","",103,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",104,null],[12,"fpregs","","",104,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",105,null],[12,"uc_link","","",105,null],[12,"uc_stack","","",105,null],[12,"uc_mcontext","","",105,null],[12,"uc_sigmask","","",105,null],[3,"ipc_perm","","",null,null],[12,"__key","","",106,null],[12,"uid","","",106,null],[12,"gid","","",106,null],[12,"cuid","","",106,null],[12,"cgid","","",106,null],[12,"mode","","",106,null],[12,"__seq","","",106,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",107,null],[12,"shm_segsz","","",107,null],[12,"shm_atime","","",107,null],[12,"shm_dtime","","",107,null],[12,"shm_ctime","","",107,null],[12,"shm_cpid","","",107,null],[12,"shm_lpid","","",107,null],[12,"shm_nattch","","",107,null],[3,"termios2","","",null,null],[12,"c_iflag","","",108,null],[12,"c_oflag","","",108,null],[12,"c_cflag","","",108,null],[12,"c_lflag","","",108,null],[12,"c_line","","",108,null],[12,"c_cc","","",108,null],[12,"c_ispeed","","",108,null],[12,"c_ospeed","","",108,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",109,null],[12,"f_frsize","","",109,null],[12,"f_blocks","","",109,null],[12,"f_bfree","","",109,null],[12,"f_bavail","","",109,null],[12,"f_files","","",109,null],[12,"f_ffree","","",109,null],[12,"f_favail","","",109,null],[12,"f_fsid","","",109,null],[12,"f_flag","","",109,null],[12,"f_namemax","","",109,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"WSTOPSIG","","",null,{"i":[{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"WIFCONTINUED","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"WIFSIGNALED","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"WTERMSIG","","",null,{"i":[{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"WIFEXITED","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"WEXITSTATUS","","",null,{"i":[{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"WCOREDUMP","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"QCMD","","",null,{"i":[{"n":"c_int"},{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"i":[{"n":"usize"},{"n":"cpu_set_t"}],"o":{"n":"bool"}}],[5,"CPU_EQUAL","","",null,{"i":[{"n":"cpu_set_t"},{"n":"cpu_set_t"}],"o":{"n":"bool"}}],[5,"major","","",null,{"i":[{"n":"dev_t"}],"o":{"n":"c_uint"}}],[5,"minor","","",null,{"i":[{"n":"dev_t"}],"o":{"n":"c_uint"}}],[5,"makedev","","",null,{"i":[{"n":"c_uint"},{"n":"c_uint"}],"o":{"n":"dev_t"}}],[5,"NLA_ALIGN","","",null,{"i":[{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"killpg","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"difftime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"openpty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setgrent","","",null,null],[5,"endgrent","","",null,null],[5,"getgrent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"remap_file_pages","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sem_getvalue","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"dl_iterate_phdr","","",null,null],[5,"setmntent","","",null,null],[5,"getmntent","","",null,null],[5,"addmntent","","",null,null],[5,"endmntent","","",null,null],[5,"hasmntopt","","",null,null],[5,"posix_spawn","","",null,null],[5,"posix_spawnp","","",null,null],[5,"posix_spawnattr_init","","",null,null],[5,"posix_spawnattr_destroy","","",null,null],[5,"posix_spawnattr_getsigdefault","","",null,null],[5,"posix_spawnattr_setsigdefault","","",null,null],[5,"posix_spawnattr_getsigmask","","",null,null],[5,"posix_spawnattr_setsigmask","","",null,null],[5,"posix_spawnattr_getflags","","",null,null],[5,"posix_spawnattr_setflags","","",null,null],[5,"posix_spawnattr_getpgroup","","",null,null],[5,"posix_spawnattr_setpgroup","","",null,null],[5,"posix_spawnattr_getschedpolicy","","",null,null],[5,"posix_spawnattr_setschedpolicy","","",null,null],[5,"posix_spawnattr_getschedparam","","",null,null],[5,"posix_spawnattr_setschedparam","","",null,null],[5,"posix_spawn_file_actions_init","","",null,null],[5,"posix_spawn_file_actions_destroy","","",null,null],[5,"posix_spawn_file_actions_addopen","","",null,null],[5,"posix_spawn_file_actions_addclose","","",null,null],[5,"posix_spawn_file_actions_adddup2","","",null,null],[5,"fread_unlocked","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"mallinfo","","",null,null],[5,"malloc_usable_size","","",null,null],[5,"getauxval","","",null,null],[5,"getpwent_r","","",null,null],[5,"getgrent_r","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[5,"sysctl","","",null,null],[11,"clone","","",94,{"i":[{"n":"self"}],"o":{"n":"stat"}}],[11,"clone","","",95,{"i":[{"n":"self"}],"o":{"n":"stat64"}}],[11,"clone","","",96,{"i":[{"n":"self"}],"o":{"n":"statfs64"}}],[11,"clone","","",97,{"i":[{"n":"self"}],"o":{"n":"statvfs64"}}],[11,"clone","","",110,{"i":[{"n":"self"}],"o":{"n":"pthread_attr_t"}}],[11,"clone","","",98,{"i":[{"n":"self"}],"o":{"n":"_libc_fpxreg"}}],[11,"clone","","",99,{"i":[{"n":"self"}],"o":{"n":"_libc_xmmreg"}}],[11,"clone","","",100,{"i":[{"n":"self"}],"o":{"n":"_libc_fpstate"}}],[11,"clone","","",101,{"i":[{"n":"self"}],"o":{"n":"user_fpregs_struct"}}],[11,"clone","","",102,{"i":[{"n":"self"}],"o":{"n":"user_regs_struct"}}],[11,"clone","","",103,{"i":[{"n":"self"}],"o":{"n":"user"}}],[11,"clone","","",104,{"i":[{"n":"self"}],"o":{"n":"mcontext_t"}}],[11,"clone","","",105,{"i":[{"n":"self"}],"o":{"n":"ucontext_t"}}],[11,"clone","","",106,{"i":[{"n":"self"}],"o":{"n":"ipc_perm"}}],[11,"clone","","",107,{"i":[{"n":"self"}],"o":{"n":"shmid_ds"}}],[11,"clone","","",108,{"i":[{"n":"self"}],"o":{"n":"termios2"}}],[11,"clone","","",109,{"i":[{"n":"self"}],"o":{"n":"statvfs"}}],[11,"clone","","",111,{"i":[{"n":"self"}],"o":{"n":"sigset_t"}}],[11,"clone","","",92,{"i":[{"n":"self"}],"o":{"n":"sysinfo"}}],[11,"clone","","",93,{"i":[{"n":"self"}],"o":{"n":"msqid_ds"}}],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"aiocb"}}],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"__exit_status"}}],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"__timeval"}}],[11,"clone","","",75,{"i":[{"n":"self"}],"o":{"n":"utmpx"}}],[11,"clone","","",76,{"i":[{"n":"self"}],"o":{"n":"sigaction"}}],[11,"clone","","",77,{"i":[{"n":"self"}],"o":{"n":"stack_t"}}],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"siginfo_t"}}],[11,"clone","","",79,{"i":[{"n":"self"}],"o":{"n":"glob64_t"}}],[11,"clone","","",80,{"i":[{"n":"self"}],"o":{"n":"statfs"}}],[11,"clone","","",81,{"i":[{"n":"self"}],"o":{"n":"msghdr"}}],[11,"clone","","",82,{"i":[{"n":"self"}],"o":{"n":"cmsghdr"}}],[11,"clone","","",83,{"i":[{"n":"self"}],"o":{"n":"termios"}}],[11,"clone","","",84,{"i":[{"n":"self"}],"o":{"n":"flock"}}],[11,"clone","","",112,{"i":[{"n":"self"}],"o":{"n":"sem_t"}}],[11,"clone","","",85,{"i":[{"n":"self"}],"o":{"n":"mallinfo"}}],[11,"clone","","",86,{"i":[{"n":"self"}],"o":{"n":"nlmsghdr"}}],[11,"clone","","",87,{"i":[{"n":"self"}],"o":{"n":"nlmsgerr"}}],[11,"clone","","",88,{"i":[{"n":"self"}],"o":{"n":"nl_pktinfo"}}],[11,"clone","","",89,{"i":[{"n":"self"}],"o":{"n":"nl_mmap_req"}}],[11,"clone","","",90,{"i":[{"n":"self"}],"o":{"n":"nl_mmap_hdr"}}],[11,"clone","","",91,{"i":[{"n":"self"}],"o":{"n":"nlattr"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"dirent"}}],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"dirent64"}}],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"rlimit64"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"glob_t"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"ifaddrs"}}],[11,"clone","","",113,{"i":[{"n":"self"}],"o":{"n":"pthread_mutex_t"}}],[11,"clone","","",114,{"i":[{"n":"self"}],"o":{"n":"pthread_rwlock_t"}}],[11,"clone","","",115,{"i":[{"n":"self"}],"o":{"n":"pthread_mutexattr_t"}}],[11,"clone","","",116,{"i":[{"n":"self"}],"o":{"n":"pthread_rwlockattr_t"}}],[11,"clone","","",117,{"i":[{"n":"self"}],"o":{"n":"pthread_cond_t"}}],[11,"clone","","",118,{"i":[{"n":"self"}],"o":{"n":"pthread_condattr_t"}}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"passwd"}}],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"spwd"}}],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"dqblk"}}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"signalfd_siginfo"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"itimerspec"}}],[11,"clone","","",119,{"i":[{"n":"self"}],"o":{"n":"fsid_t"}}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"mq_attr"}}],[11,"clone","","",120,{"i":[{"n":"self"}],"o":{"n":"cpu_set_t"}}],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"if_nameindex"}}],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"msginfo"}}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"mmsghdr"}}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"sembuf"}}],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"input_event"}}],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"input_id"}}],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"input_absinfo"}}],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"input_keymap_entry"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"input_mask"}}],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"ff_replay"}}],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"ff_trigger"}}],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"ff_envelope"}}],[11,"clone","","",59,{"i":[{"n":"self"}],"o":{"n":"ff_constant_effect"}}],[11,"clone","","",60,{"i":[{"n":"self"}],"o":{"n":"ff_ramp_effect"}}],[11,"clone","","",61,{"i":[{"n":"self"}],"o":{"n":"ff_condition_effect"}}],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"ff_periodic_effect"}}],[11,"clone","","",63,{"i":[{"n":"self"}],"o":{"n":"ff_rumble_effect"}}],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"ff_effect"}}],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"dl_phdr_info"}}],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"elf32_phdr"}}],[11,"clone","","",67,{"i":[{"n":"self"}],"o":{"n":"elf64_phdr"}}],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"ucred"}}],[11,"clone","","",69,{"i":[{"n":"self"}],"o":{"n":"mntent"}}],[11,"clone","","",121,{"i":[{"n":"self"}],"o":{"n":"posix_spawn_file_actions_t"}}],[11,"clone","","",122,{"i":[{"n":"self"}],"o":{"n":"posix_spawnattr_t"}}],[11,"clone","","",70,{"i":[{"n":"self"}],"o":{"n":"genlmsghdr"}}],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"in6_pktinfo"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"sockaddr"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"sockaddr_in"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"sockaddr_in6"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"sockaddr_un"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"sockaddr_storage"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"addrinfo"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"sockaddr_nl"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"sockaddr_ll"}}],[11,"clone","","",123,{"i":[{"n":"self"}],"o":{"n":"fd_set"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"tm"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"sched_param"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"dl_info"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"epoll_event"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"utsname"}}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"lconv"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"sigevent"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"in_pktinfo"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"group"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"utimbuf"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"timeval"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"timespec"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"rlimit"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"rusage"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"in_addr"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"in6_addr"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"ip_mreq"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"ipv6_mreq"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"hostent"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"iovec"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"pollfd"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"winsize"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"linger"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"sigval"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"itimerval"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"tms"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"servent"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"protoent"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"Elf32_Half","","",null,null],[6,"Elf32_Word","","",null,null],[6,"Elf32_Off","","",null,null],[6,"Elf32_Addr","","",null,null],[6,"Elf64_Half","","",null,null],[6,"Elf64_Word","","",null,null],[6,"Elf64_Off","","",null,null],[6,"Elf64_Addr","","",null,null],[6,"Elf64_Xword","","",null,null],[6,"__priority_which_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"INT_MIN","","",null,null],[17,"INT_MAX","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_UNKNOWN","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_PKTINFO","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_UNICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_IF","","",null,null],[17,"IPV6_MULTICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"IPV6_RECVPKTINFO","","",null,null],[17,"IPV6_PKTINFO","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"IFF_TUN","","",null,null],[17,"IFF_TAP","","",null,null],[17,"IFF_NO_PI","","",null,null],[17,"TUN_READQ_SIZE","","",null,null],[17,"TUN_TUN_DEV","","",null,null],[17,"TUN_TAP_DEV","","",null,null],[17,"TUN_TYPE_MASK","","",null,null],[17,"IFF_ONE_QUEUE","","",null,null],[17,"IFF_VNET_HDR","","",null,null],[17,"IFF_TUN_EXCL","","",null,null],[17,"IFF_MULTI_QUEUE","","",null,null],[17,"IFF_ATTACH_QUEUE","","",null,null],[17,"IFF_DETACH_QUEUE","","",null,null],[17,"IFF_PERSIST","","",null,null],[17,"IFF_NOFILTER","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"RENAME_NOREPLACE","","",null,null],[17,"RENAME_EXCHANGE","","",null,null],[17,"RENAME_WHITEOUT","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_NODATA","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"GRND_NONBLOCK","","",null,null],[17,"GRND_RANDOM","","",null,null],[17,"SECCOMP_MODE_DISABLED","","",null,null],[17,"SECCOMP_MODE_STRICT","","",null,null],[17,"SECCOMP_MODE_FILTER","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[17,"PT_NULL","","",null,null],[17,"PT_LOAD","","",null,null],[17,"PT_DYNAMIC","","",null,null],[17,"PT_INTERP","","",null,null],[17,"PT_NOTE","","",null,null],[17,"PT_SHLIB","","",null,null],[17,"PT_PHDR","","",null,null],[17,"PT_TLS","","",null,null],[17,"PT_NUM","","",null,null],[17,"PT_LOOS","","",null,null],[17,"PT_GNU_EH_FRAME","","",null,null],[17,"PT_GNU_STACK","","",null,null],[17,"PT_GNU_RELRO","","",null,null],[17,"ETH_ALEN","","",null,null],[17,"ETH_HLEN","","",null,null],[17,"ETH_ZLEN","","",null,null],[17,"ETH_DATA_LEN","","",null,null],[17,"ETH_FRAME_LEN","","",null,null],[17,"ETH_FCS_LEN","","",null,null],[17,"ETH_P_LOOP","","",null,null],[17,"ETH_P_PUP","","",null,null],[17,"ETH_P_PUPAT","","",null,null],[17,"ETH_P_IP","","",null,null],[17,"ETH_P_X25","","",null,null],[17,"ETH_P_ARP","","",null,null],[17,"ETH_P_BPQ","","",null,null],[17,"ETH_P_IEEEPUP","","",null,null],[17,"ETH_P_IEEEPUPAT","","",null,null],[17,"ETH_P_BATMAN","","",null,null],[17,"ETH_P_DEC","","",null,null],[17,"ETH_P_DNA_DL","","",null,null],[17,"ETH_P_DNA_RC","","",null,null],[17,"ETH_P_DNA_RT","","",null,null],[17,"ETH_P_LAT","","",null,null],[17,"ETH_P_DIAG","","",null,null],[17,"ETH_P_CUST","","",null,null],[17,"ETH_P_SCA","","",null,null],[17,"ETH_P_TEB","","",null,null],[17,"ETH_P_RARP","","",null,null],[17,"ETH_P_ATALK","","",null,null],[17,"ETH_P_AARP","","",null,null],[17,"ETH_P_8021Q","","",null,null],[17,"ETH_P_IPX","","",null,null],[17,"ETH_P_IPV6","","",null,null],[17,"ETH_P_PAUSE","","",null,null],[17,"ETH_P_SLOW","","",null,null],[17,"ETH_P_WCCP","","",null,null],[17,"ETH_P_MPLS_UC","","",null,null],[17,"ETH_P_MPLS_MC","","",null,null],[17,"ETH_P_ATMMPOA","","",null,null],[17,"ETH_P_PPP_DISC","","",null,null],[17,"ETH_P_PPP_SES","","",null,null],[17,"ETH_P_LINK_CTL","","",null,null],[17,"ETH_P_ATMFATE","","",null,null],[17,"ETH_P_PAE","","",null,null],[17,"ETH_P_AOE","","",null,null],[17,"ETH_P_8021AD","","",null,null],[17,"ETH_P_802_EX1","","",null,null],[17,"ETH_P_TIPC","","",null,null],[17,"ETH_P_MACSEC","","",null,null],[17,"ETH_P_8021AH","","",null,null],[17,"ETH_P_MVRP","","",null,null],[17,"ETH_P_1588","","",null,null],[17,"ETH_P_PRP","","",null,null],[17,"ETH_P_FCOE","","",null,null],[17,"ETH_P_TDLS","","",null,null],[17,"ETH_P_FIP","","",null,null],[17,"ETH_P_80221","","",null,null],[17,"ETH_P_LOOPBACK","","",null,null],[17,"ETH_P_QINQ1","","",null,null],[17,"ETH_P_QINQ2","","",null,null],[17,"ETH_P_QINQ3","","",null,null],[17,"ETH_P_EDSA","","",null,null],[17,"ETH_P_AF_IUCV","","",null,null],[17,"ETH_P_802_3_MIN","","",null,null],[17,"ETH_P_802_3","","",null,null],[17,"ETH_P_AX25","","",null,null],[17,"ETH_P_ALL","","",null,null],[17,"ETH_P_802_2","","",null,null],[17,"ETH_P_SNAP","","",null,null],[17,"ETH_P_DDCMP","","",null,null],[17,"ETH_P_WAN_PPP","","",null,null],[17,"ETH_P_PPP_MP","","",null,null],[17,"ETH_P_LOCALTALK","","",null,null],[17,"ETH_P_CANFD","","",null,null],[17,"ETH_P_PPPTALK","","",null,null],[17,"ETH_P_TR_802_2","","",null,null],[17,"ETH_P_MOBITEX","","",null,null],[17,"ETH_P_CONTROL","","",null,null],[17,"ETH_P_IRDA","","",null,null],[17,"ETH_P_ECONET","","",null,null],[17,"ETH_P_HDLC","","",null,null],[17,"ETH_P_ARCNET","","",null,null],[17,"ETH_P_DSA","","",null,null],[17,"ETH_P_TRAILER","","",null,null],[17,"ETH_P_PHONET","","",null,null],[17,"ETH_P_IEEE802154","","",null,null],[17,"ETH_P_CAIF","","",null,null],[17,"POSIX_SPAWN_RESETIDS","","",null,null],[17,"POSIX_SPAWN_SETPGROUP","","",null,null],[17,"POSIX_SPAWN_SETSIGDEF","","",null,null],[17,"POSIX_SPAWN_SETSIGMASK","","",null,null],[17,"POSIX_SPAWN_SETSCHEDPARAM","","",null,null],[17,"POSIX_SPAWN_SETSCHEDULER","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"GENL_NAMSIZ","","",null,null],[17,"GENL_MIN_ID","","",null,null],[17,"GENL_MAX_ID","","",null,null],[17,"GENL_ADMIN_PERM","","",null,null],[17,"GENL_CMD_CAP_DO","","",null,null],[17,"GENL_CMD_CAP_DUMP","","",null,null],[17,"GENL_CMD_CAP_HASPOL","","",null,null],[17,"GENL_ID_CTRL","","",null,null],[17,"CTRL_CMD_UNSPEC","","",null,null],[17,"CTRL_CMD_NEWFAMILY","","",null,null],[17,"CTRL_CMD_DELFAMILY","","",null,null],[17,"CTRL_CMD_GETFAMILY","","",null,null],[17,"CTRL_CMD_NEWOPS","","",null,null],[17,"CTRL_CMD_DELOPS","","",null,null],[17,"CTRL_CMD_GETOPS","","",null,null],[17,"CTRL_CMD_NEWMCAST_GRP","","",null,null],[17,"CTRL_CMD_DELMCAST_GRP","","",null,null],[17,"CTRL_CMD_GETMCAST_GRP","","",null,null],[17,"CTRL_ATTR_UNSPEC","","",null,null],[17,"CTRL_ATTR_FAMILY_ID","","",null,null],[17,"CTRL_ATTR_FAMILY_NAME","","",null,null],[17,"CTRL_ATTR_VERSION","","",null,null],[17,"CTRL_ATTR_HDRSIZE","","",null,null],[17,"CTRL_ATTR_MAXATTR","","",null,null],[17,"CTRL_ATTR_OPS","","",null,null],[17,"CTRL_ATTR_MCAST_GROUPS","","",null,null],[17,"CTRL_ATTR_OP_UNSPEC","","",null,null],[17,"CTRL_ATTR_OP_ID","","",null,null],[17,"CTRL_ATTR_OP_FLAGS","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_UNSPEC","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_NAME","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_ID","","",null,null],[17,"NF_DROP","","",null,null],[17,"NF_ACCEPT","","",null,null],[17,"NF_STOLEN","","",null,null],[17,"NF_QUEUE","","",null,null],[17,"NF_REPEAT","","",null,null],[17,"NF_STOP","","",null,null],[17,"NF_MAX_VERDICT","","",null,null],[17,"NF_VERDICT_MASK","","",null,null],[17,"NF_VERDICT_FLAG_QUEUE_BYPASS","","",null,null],[17,"NF_VERDICT_QMASK","","",null,null],[17,"NF_VERDICT_QBITS","","",null,null],[17,"NF_VERDICT_BITS","","",null,null],[17,"NF_INET_PRE_ROUTING","","",null,null],[17,"NF_INET_LOCAL_IN","","",null,null],[17,"NF_INET_FORWARD","","",null,null],[17,"NF_INET_LOCAL_OUT","","",null,null],[17,"NF_INET_POST_ROUTING","","",null,null],[17,"NF_INET_NUMHOOKS","","",null,null],[17,"NFPROTO_UNSPEC","","",null,null],[17,"NFPROTO_IPV4","","",null,null],[17,"NFPROTO_ARP","","",null,null],[17,"NFPROTO_BRIDGE","","",null,null],[17,"NFPROTO_IPV6","","",null,null],[17,"NFPROTO_DECNET","","",null,null],[17,"NFPROTO_NUMPROTO","","",null,null],[17,"NF_IP_PRE_ROUTING","","",null,null],[17,"NF_IP_LOCAL_IN","","",null,null],[17,"NF_IP_FORWARD","","",null,null],[17,"NF_IP_LOCAL_OUT","","",null,null],[17,"NF_IP_POST_ROUTING","","",null,null],[17,"NF_IP_NUMHOOKS","","",null,null],[17,"NF_IP_PRI_FIRST","","",null,null],[17,"NF_IP_PRI_CONNTRACK_DEFRAG","","",null,null],[17,"NF_IP_PRI_RAW","","",null,null],[17,"NF_IP_PRI_SELINUX_FIRST","","",null,null],[17,"NF_IP_PRI_CONNTRACK","","",null,null],[17,"NF_IP_PRI_MANGLE","","",null,null],[17,"NF_IP_PRI_NAT_DST","","",null,null],[17,"NF_IP_PRI_FILTER","","",null,null],[17,"NF_IP_PRI_SECURITY","","",null,null],[17,"NF_IP_PRI_NAT_SRC","","",null,null],[17,"NF_IP_PRI_SELINUX_LAST","","",null,null],[17,"NF_IP_PRI_CONNTRACK_HELPER","","",null,null],[17,"NF_IP_PRI_CONNTRACK_CONFIRM","","",null,null],[17,"NF_IP_PRI_LAST","","",null,null],[17,"NF_IP6_PRE_ROUTING","","",null,null],[17,"NF_IP6_LOCAL_IN","","",null,null],[17,"NF_IP6_FORWARD","","",null,null],[17,"NF_IP6_LOCAL_OUT","","",null,null],[17,"NF_IP6_POST_ROUTING","","",null,null],[17,"NF_IP6_NUMHOOKS","","",null,null],[17,"NF_IP6_PRI_FIRST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK_DEFRAG","","",null,null],[17,"NF_IP6_PRI_RAW","","",null,null],[17,"NF_IP6_PRI_SELINUX_FIRST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK","","",null,null],[17,"NF_IP6_PRI_MANGLE","","",null,null],[17,"NF_IP6_PRI_NAT_DST","","",null,null],[17,"NF_IP6_PRI_FILTER","","",null,null],[17,"NF_IP6_PRI_SECURITY","","",null,null],[17,"NF_IP6_PRI_NAT_SRC","","",null,null],[17,"NF_IP6_PRI_SELINUX_LAST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK_HELPER","","",null,null],[17,"NF_IP6_PRI_LAST","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"NLA_ALIGNTO","","",null,null],[17,"GENL_UNS_ADMIN_PERM","","",null,null],[17,"GENL_ID_VFS_DQUOT","","",null,null],[17,"GENL_ID_PMCRAID","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"NF_NETDEV_INGRESS","","",null,null],[17,"NF_NETDEV_NUMHOOKS","","",null,null],[17,"NFPROTO_INET","","",null,null],[17,"NFPROTO_NETDEV","","",null,null],[17,"NFT_TABLE_MAXNAMELEN","","",null,null],[17,"NFT_CHAIN_MAXNAMELEN","","",null,null],[17,"NFT_SET_MAXNAMELEN","","",null,null],[17,"NFT_OBJ_MAXNAMELEN","","",null,null],[17,"NFT_USERDATA_MAXLEN","","",null,null],[17,"NFT_REG_VERDICT","","",null,null],[17,"NFT_REG_1","","",null,null],[17,"NFT_REG_2","","",null,null],[17,"NFT_REG_3","","",null,null],[17,"NFT_REG_4","","",null,null],[17,"__NFT_REG_MAX","","",null,null],[17,"NFT_REG32_00","","",null,null],[17,"NFT_REG32_01","","",null,null],[17,"NFT_REG32_02","","",null,null],[17,"NFT_REG32_03","","",null,null],[17,"NFT_REG32_04","","",null,null],[17,"NFT_REG32_05","","",null,null],[17,"NFT_REG32_06","","",null,null],[17,"NFT_REG32_07","","",null,null],[17,"NFT_REG32_08","","",null,null],[17,"NFT_REG32_09","","",null,null],[17,"NFT_REG32_10","","",null,null],[17,"NFT_REG32_11","","",null,null],[17,"NFT_REG32_12","","",null,null],[17,"NFT_REG32_13","","",null,null],[17,"NFT_REG32_14","","",null,null],[17,"NFT_REG32_15","","",null,null],[17,"NFT_REG_SIZE","","",null,null],[17,"NFT_REG32_SIZE","","",null,null],[17,"NFT_CONTINUE","","",null,null],[17,"NFT_BREAK","","",null,null],[17,"NFT_JUMP","","",null,null],[17,"NFT_GOTO","","",null,null],[17,"NFT_RETURN","","",null,null],[17,"NFT_MSG_NEWTABLE","","",null,null],[17,"NFT_MSG_GETTABLE","","",null,null],[17,"NFT_MSG_DELTABLE","","",null,null],[17,"NFT_MSG_NEWCHAIN","","",null,null],[17,"NFT_MSG_GETCHAIN","","",null,null],[17,"NFT_MSG_DELCHAIN","","",null,null],[17,"NFT_MSG_NEWRULE","","",null,null],[17,"NFT_MSG_GETRULE","","",null,null],[17,"NFT_MSG_DELRULE","","",null,null],[17,"NFT_MSG_NEWSET","","",null,null],[17,"NFT_MSG_GETSET","","",null,null],[17,"NFT_MSG_DELSET","","",null,null],[17,"NFT_MSG_NEWSETELEM","","",null,null],[17,"NFT_MSG_GETSETELEM","","",null,null],[17,"NFT_MSG_DELSETELEM","","",null,null],[17,"NFT_MSG_NEWGEN","","",null,null],[17,"NFT_MSG_GETGEN","","",null,null],[17,"NFT_MSG_TRACE","","",null,null],[17,"NFT_MSG_NEWOBJ","","",null,null],[17,"NFT_MSG_GETOBJ","","",null,null],[17,"NFT_MSG_DELOBJ","","",null,null],[17,"NFT_MSG_GETOBJ_RESET","","",null,null],[17,"NFT_MSG_MAX","","",null,null],[17,"NFT_SET_ANONYMOUS","","",null,null],[17,"NFT_SET_CONSTANT","","",null,null],[17,"NFT_SET_INTERVAL","","",null,null],[17,"NFT_SET_MAP","","",null,null],[17,"NFT_SET_TIMEOUT","","",null,null],[17,"NFT_SET_EVAL","","",null,null],[17,"NFT_SET_POL_PERFORMANCE","","",null,null],[17,"NFT_SET_POL_MEMORY","","",null,null],[17,"NFT_SET_ELEM_INTERVAL_END","","",null,null],[17,"NFT_DATA_VALUE","","",null,null],[17,"NFT_DATA_VERDICT","","",null,null],[17,"NFT_DATA_RESERVED_MASK","","",null,null],[17,"NFT_DATA_VALUE_MAXLEN","","",null,null],[17,"NFT_BYTEORDER_NTOH","","",null,null],[17,"NFT_BYTEORDER_HTON","","",null,null],[17,"NFT_CMP_EQ","","",null,null],[17,"NFT_CMP_NEQ","","",null,null],[17,"NFT_CMP_LT","","",null,null],[17,"NFT_CMP_LTE","","",null,null],[17,"NFT_CMP_GT","","",null,null],[17,"NFT_CMP_GTE","","",null,null],[17,"NFT_RANGE_EQ","","",null,null],[17,"NFT_RANGE_NEQ","","",null,null],[17,"NFT_LOOKUP_F_INV","","",null,null],[17,"NFT_DYNSET_OP_ADD","","",null,null],[17,"NFT_DYNSET_OP_UPDATE","","",null,null],[17,"NFT_DYNSET_F_INV","","",null,null],[17,"NFT_PAYLOAD_LL_HEADER","","",null,null],[17,"NFT_PAYLOAD_NETWORK_HEADER","","",null,null],[17,"NFT_PAYLOAD_TRANSPORT_HEADER","","",null,null],[17,"NFT_PAYLOAD_CSUM_NONE","","",null,null],[17,"NFT_PAYLOAD_CSUM_INET","","",null,null],[17,"NFT_META_LEN","","",null,null],[17,"NFT_META_PROTOCOL","","",null,null],[17,"NFT_META_PRIORITY","","",null,null],[17,"NFT_META_MARK","","",null,null],[17,"NFT_META_IIF","","",null,null],[17,"NFT_META_OIF","","",null,null],[17,"NFT_META_IIFNAME","","",null,null],[17,"NFT_META_OIFNAME","","",null,null],[17,"NFT_META_IIFTYPE","","",null,null],[17,"NFT_META_OIFTYPE","","",null,null],[17,"NFT_META_SKUID","","",null,null],[17,"NFT_META_SKGID","","",null,null],[17,"NFT_META_NFTRACE","","",null,null],[17,"NFT_META_RTCLASSID","","",null,null],[17,"NFT_META_SECMARK","","",null,null],[17,"NFT_META_NFPROTO","","",null,null],[17,"NFT_META_L4PROTO","","",null,null],[17,"NFT_META_BRI_IIFNAME","","",null,null],[17,"NFT_META_BRI_OIFNAME","","",null,null],[17,"NFT_META_PKTTYPE","","",null,null],[17,"NFT_META_CPU","","",null,null],[17,"NFT_META_IIFGROUP","","",null,null],[17,"NFT_META_OIFGROUP","","",null,null],[17,"NFT_META_CGROUP","","",null,null],[17,"NFT_META_PRANDOM","","",null,null],[17,"NFT_CT_STATE","","",null,null],[17,"NFT_CT_DIRECTION","","",null,null],[17,"NFT_CT_STATUS","","",null,null],[17,"NFT_CT_MARK","","",null,null],[17,"NFT_CT_SECMARK","","",null,null],[17,"NFT_CT_EXPIRATION","","",null,null],[17,"NFT_CT_HELPER","","",null,null],[17,"NFT_CT_L3PROTOCOL","","",null,null],[17,"NFT_CT_SRC","","",null,null],[17,"NFT_CT_DST","","",null,null],[17,"NFT_CT_PROTOCOL","","",null,null],[17,"NFT_CT_PROTO_SRC","","",null,null],[17,"NFT_CT_PROTO_DST","","",null,null],[17,"NFT_CT_LABELS","","",null,null],[17,"NFT_CT_PKTS","","",null,null],[17,"NFT_CT_BYTES","","",null,null],[17,"NFT_LIMIT_PKTS","","",null,null],[17,"NFT_LIMIT_PKT_BYTES","","",null,null],[17,"NFT_LIMIT_F_INV","","",null,null],[17,"NFT_QUEUE_FLAG_BYPASS","","",null,null],[17,"NFT_QUEUE_FLAG_CPU_FANOUT","","",null,null],[17,"NFT_QUEUE_FLAG_MASK","","",null,null],[17,"NFT_QUOTA_F_INV","","",null,null],[17,"NFT_REJECT_ICMP_UNREACH","","",null,null],[17,"NFT_REJECT_TCP_RST","","",null,null],[17,"NFT_REJECT_ICMPX_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_NO_ROUTE","","",null,null],[17,"NFT_REJECT_ICMPX_PORT_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_HOST_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_ADMIN_PROHIBITED","","",null,null],[17,"NFT_NAT_SNAT","","",null,null],[17,"NFT_NAT_DNAT","","",null,null],[17,"NFT_TRACETYPE_UNSPEC","","",null,null],[17,"NFT_TRACETYPE_POLICY","","",null,null],[17,"NFT_TRACETYPE_RETURN","","",null,null],[17,"NFT_TRACETYPE_RULE","","",null,null],[17,"NFT_NG_INCREMENTAL","","",null,null],[17,"NFT_NG_RANDOM","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"PTHREAD_MUTEX_ADAPTIVE_NP","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"F_RDLCK","","",null,null],[17,"F_WRLCK","","",null,null],[17,"F_UNLCK","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"BOTHER","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","","",null,null],[17,"PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","","",null,null],[17,"PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"in_pktinfo"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"genlmsghdr"],[3,"in6_pktinfo"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"mallinfo"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"nlattr"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"statvfs"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"fd_set"]]};
searchIndex["libz_sys"] = {"doc":"","items":[[3,"gz_header","libz_sys","",null,null],[12,"text","","",0,null],[12,"time","","",0,null],[12,"xflags","","",0,null],[12,"os","","",0,null],[12,"extra","","",0,null],[12,"extra_len","","",0,null],[12,"extra_max","","",0,null],[12,"name","","",0,null],[12,"name_max","","",0,null],[12,"comment","","",0,null],[12,"comm_max","","",0,null],[12,"hcrc","","",0,null],[12,"done","","",0,null],[3,"z_stream","","",null,null],[12,"next_in","","",1,null],[12,"avail_in","","",1,null],[12,"total_in","","",1,null],[12,"next_out","","",1,null],[12,"avail_out","","",1,null],[12,"total_out","","",1,null],[12,"msg","","",1,null],[12,"state","","",1,null],[12,"zalloc","","",1,null],[12,"zfree","","",1,null],[12,"opaque","","",1,null],[12,"data_type","","",1,null],[12,"adler","","",1,null],[12,"reserved","","",1,null],[4,"gzFile_s","","",null,null],[4,"internal_state","","",null,null],[5,"adler32","","",null,null],[5,"adler32_combine","","",null,null],[5,"compress","","",null,null],[5,"compress2","","",null,null],[5,"compressBound","","",null,null],[5,"crc32","","",null,null],[5,"crc32_combine","","",null,null],[5,"deflate","","",null,null],[5,"deflateBound","","",null,null],[5,"deflateCopy","","",null,null],[5,"deflateEnd","","",null,null],[5,"deflateInit_","","",null,null],[5,"deflateInit2_","","",null,null],[5,"deflateParams","","",null,null],[5,"deflatePrime","","",null,null],[5,"deflateReset","","",null,null],[5,"deflateSetDictionary","","",null,null],[5,"deflateSetHeader","","",null,null],[5,"deflateTune","","",null,null],[5,"gzdirect","","",null,null],[5,"gzdopen","","",null,null],[5,"gzclearerr","","",null,null],[5,"gzclose","","",null,null],[5,"gzeof","","",null,null],[5,"gzerror","","",null,null],[5,"gzflush","","",null,null],[5,"gzgetc","","",null,null],[5,"gzgets","","",null,null],[5,"gzopen","","",null,null],[5,"gzputc","","",null,null],[5,"gzputs","","",null,null],[5,"gzread","","",null,null],[5,"gzrewind","","",null,null],[5,"gzseek","","",null,null],[5,"gzsetparams","","",null,null],[5,"gztell","","",null,null],[5,"gzungetc","","",null,null],[5,"gzwrite","","",null,null],[5,"inflate","","",null,null],[5,"inflateBack","","",null,null],[5,"inflateBackEnd","","",null,null],[5,"inflateBackInit_","","",null,null],[5,"inflateCopy","","",null,null],[5,"inflateEnd","","",null,null],[5,"inflateGetHeader","","",null,null],[5,"inflateInit_","","",null,null],[5,"inflateInit2_","","",null,null],[5,"inflateMark","","",null,null],[5,"inflatePrime","","",null,null],[5,"inflateReset","","",null,null],[5,"inflateReset2","","",null,null],[5,"inflateSetDictionary","","",null,null],[5,"inflateSync","","",null,null],[5,"uncompress","","",null,null],[5,"zlibCompileFlags","","",null,null],[5,"zlibVersion","","",null,null],[6,"alloc_func","","",null,null],[6,"Bytef","","",null,null],[6,"free_func","","",null,null],[6,"gzFile","","",null,null],[6,"in_func","","",null,null],[6,"out_func","","",null,null],[6,"uInt","","",null,null],[6,"uLong","","",null,null],[6,"uLongf","","",null,null],[6,"voidp","","",null,null],[6,"voidpc","","",null,null],[6,"voidpf","","",null,null],[6,"z_off_t","","",null,null],[6,"gz_headerp","","",null,null],[6,"z_streamp","","",null,null],[17,"Z_NO_FLUSH","","",null,null],[17,"Z_PARTIAL_FLUSH","","",null,null],[17,"Z_SYNC_FLUSH","","",null,null],[17,"Z_FULL_FLUSH","","",null,null],[17,"Z_FINISH","","",null,null],[17,"Z_BLOCK","","",null,null],[17,"Z_TREES","","",null,null],[17,"Z_OK","","",null,null],[17,"Z_STREAM_END","","",null,null],[17,"Z_NEED_DICT","","",null,null],[17,"Z_ERRNO","","",null,null],[17,"Z_STREAM_ERROR","","",null,null],[17,"Z_DATA_ERROR","","",null,null],[17,"Z_MEM_ERROR","","",null,null],[17,"Z_BUF_ERROR","","",null,null],[17,"Z_VERSION_ERROR","","",null,null],[17,"Z_NO_COMPRESSION","","",null,null],[17,"Z_BEST_SPEED","","",null,null],[17,"Z_BEST_COMPRESSION","","",null,null],[17,"Z_DEFAULT_COMPRESSION","","",null,null],[17,"Z_FILTERED","","",null,null],[17,"Z_HUFFMAN_ONLY","","",null,null],[17,"Z_RLE","","",null,null],[17,"Z_FIXED","","",null,null],[17,"Z_DEFAULT_STRATEGY","","",null,null],[17,"Z_BINARY","","",null,null],[17,"Z_TEXT","","",null,null],[17,"Z_ASCII","","",null,null],[17,"Z_UNKNOWN","","",null,null],[17,"Z_DEFLATED","","",null,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"gz_header"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"z_stream"}}]],"paths":[[3,"gz_header"],[3,"z_stream"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"Record","log","The \"payload\" of a log message.",null,null],[3,"RecordBuilder","","Builder for `Record`.",null,null],[3,"Metadata","","Metadata about a log message.",null,null],[3,"MetadataBuilder","","Builder for `Metadata`.",null,null],[3,"SetLoggerError","","The type returned by [`set_logger`] if [`set_logger`] has already been called.",null,null],[3,"ParseLevelError","","The type returned by [`from_str`] when the string doesn't match any of the log levels.",null,null],[4,"Level","","An enum representing the available verbosity levels of the logger.",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LevelFilter","","An enum representing the available verbosity level filters of the logger.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"set_max_level","","Sets the global maximum log level.",null,{"i":[{"n":"levelfilter"}]}],[5,"max_level","","Returns the current maximum log level.",null,{"o":{"n":"levelfilter"}}],[5,"set_logger","","Sets the global logger to a `&'static Log`.",null,{"i":[{"n":"log"}],"o":{"g":["setloggererror"],"n":"result"}}],[5,"logger","","Returns a reference to the logger.",null,{"o":{"n":"log"}}],[17,"STATIC_MAX_LEVEL","","The statically resolved maximum log level.",null,null],[8,"Log","","A trait encapsulating the operations required of a logger.",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,{"i":[{"n":"self"},{"n":"metadata"}],"o":{"n":"bool"}}],[10,"log","","Logs the `Record`.",2,{"i":[{"n":"self"},{"n":"record"}]}],[10,"flush","","Flushes any buffered records.",2,{"i":[{"n":"self"}]}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"level"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"levelfilter"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"level"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"levelfilter"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"ordering"}}],[11,"from_str","","",0,{"i":[{"n":"str"}],"o":{"g":["level"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"o":{"n":"level"}}],[11,"to_level_filter","","Converts the `Level` to the equivalent `LevelFilter`.",0,{"i":[{"n":"self"}],"o":{"n":"levelfilter"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"levelfilter"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"levelfilter"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"levelfilter"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"level"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"levelfilter"}],"o":{"n":"ordering"}}],[11,"from_str","","",1,{"i":[{"n":"str"}],"o":{"g":["levelfilter"],"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"o":{"n":"levelfilter"}}],[11,"to_level","","Converts `self` to the equivalent `Level`.",1,{"i":[{"n":"self"}],"o":{"g":["level"],"n":"option"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"record"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"builder","","Returns a new builder.",3,{"o":{"n":"recordbuilder"}}],[11,"args","","The message body.",3,{"i":[{"n":"self"}],"o":{"n":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"i":[{"n":"self"}],"o":{"n":"metadata"}}],[11,"level","","The verbosity level of the message.",3,{"i":[{"n":"self"}],"o":{"n":"level"}}],[11,"target","","The name of the target of the directive.",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"module_path","","The module path of the message.",3,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"file","","The source file containing the message.",3,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"line","","The line containing the message.",3,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct new `RecordBuilder`.",4,{"o":{"n":"recordbuilder"}}],[11,"args","","Set `args`.",4,{"i":[{"n":"self"},{"n":"arguments"}],"o":{"n":"recordbuilder"}}],[11,"metadata","","Set `metadata`. Construct a `Metadata` object with `MetadataBuilder`.",4,{"i":[{"n":"self"},{"n":"metadata"}],"o":{"n":"recordbuilder"}}],[11,"level","","Set `Metadata::level`.",4,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"recordbuilder"}}],[11,"target","","Set `Metadata::target`",4,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"recordbuilder"}}],[11,"module_path","","Set `module_path`",4,{"i":[{"n":"self"},{"g":["str"],"n":"option"}],"o":{"n":"recordbuilder"}}],[11,"file","","Set `file`",4,{"i":[{"n":"self"},{"g":["str"],"n":"option"}],"o":{"n":"recordbuilder"}}],[11,"line","","Set `line`",4,{"i":[{"n":"self"},{"g":["u32"],"n":"option"}],"o":{"n":"recordbuilder"}}],[11,"build","","Invoke the builder and return a `Record`",4,{"i":[{"n":"self"}],"o":{"n":"record"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"metadata"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"metadata"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"metadata"}],"o":{"n":"bool"}}],[11,"cmp","","",5,{"i":[{"n":"self"},{"n":"metadata"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",5,{"i":[{"n":"self"},{"n":"metadata"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",5,{"i":[{"n":"self"},{"n":"metadata"}],"o":{"n":"bool"}}],[11,"le","","",5,{"i":[{"n":"self"},{"n":"metadata"}],"o":{"n":"bool"}}],[11,"gt","","",5,{"i":[{"n":"self"},{"n":"metadata"}],"o":{"n":"bool"}}],[11,"ge","","",5,{"i":[{"n":"self"},{"n":"metadata"}],"o":{"n":"bool"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"builder","","Returns a new builder.",5,{"o":{"n":"metadatabuilder"}}],[11,"level","","The verbosity level of the message.",5,{"i":[{"n":"self"}],"o":{"n":"level"}}],[11,"target","","The name of the target of the directive.",5,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"metadatabuilder"}],"o":{"n":"bool"}}],[11,"ne","","",6,{"i":[{"n":"self"},{"n":"metadatabuilder"}],"o":{"n":"bool"}}],[11,"cmp","","",6,{"i":[{"n":"self"},{"n":"metadatabuilder"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",6,{"i":[{"n":"self"},{"n":"metadatabuilder"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",6,{"i":[{"n":"self"},{"n":"metadatabuilder"}],"o":{"n":"bool"}}],[11,"le","","",6,{"i":[{"n":"self"},{"n":"metadatabuilder"}],"o":{"n":"bool"}}],[11,"gt","","",6,{"i":[{"n":"self"},{"n":"metadatabuilder"}],"o":{"n":"bool"}}],[11,"ge","","",6,{"i":[{"n":"self"},{"n":"metadatabuilder"}],"o":{"n":"bool"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `MetadataBuilder`.",6,{"o":{"n":"metadatabuilder"}}],[11,"level","","Setter for `level`.",6,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"metadatabuilder"}}],[11,"target","","Setter for `target`.",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"metadatabuilder"}}],[11,"build","","Returns a `Metadata` object.",6,{"i":[{"n":"self"}],"o":{"n":"metadata"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"parselevelerror"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"parselevelerror"}],"o":{"n":"bool"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",null,null]],"paths":[[4,"Level"],[4,"LevelFilter"],[8,"Log"],[3,"Record"],[3,"RecordBuilder"],[3,"Metadata"],[3,"MetadataBuilder"],[3,"SetLoggerError"],[3,"ParseLevelError"]]};
searchIndex["proc_macro2"] = {"doc":"A \"shim crate\" intended to multiplex the [`proc_macro`] API on to stable Rust.","items":[[3,"TokenStream","proc_macro2","An abstract stream of tokens, or more concretely a sequence of token trees.",null,null],[3,"LexError","","Error returned from `TokenStream::from_str`.",null,null],[3,"Span","","A region of source code, along with macro expansion information.",null,null],[3,"Group","","A delimited token stream.",null,null],[3,"Punct","","An `Punct` is an single punctuation character like `+`, `-` or `#`.",null,null],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",null,null],[3,"Literal","","A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).",null,null],[4,"TokenTree","","A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).",null,null],[13,"Group","","A token stream surrounded by bracket delimiters.",0,null],[13,"Ident","","An identifier.",0,null],[13,"Punct","","A single punctuation character (`+`, `,`, `$`, etc.).",0,null],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.",0,null],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",null,null],[13,"Parenthesis","","`( ... )`",1,null],[13,"Brace","","`{ ... }`",1,null],[13,"Bracket","","`[ ... ]`",1,null],[13,"None","","`Ø ... Ø`",1,null],[4,"Spacing","","Whether an `Punct` is followed immediately by another `Punct` or followed by another token or whitespace.",null,null],[13,"Alone","","E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.",2,null],[13,"Joint","","E.g. `+` is `Joint` in `+=` or `'#`.",2,null],[0,"token_stream","","Public implementation details for the `TokenStream` type, such as iterators.",null,null],[3,"IntoIter","proc_macro2::token_stream","An iterator over `TokenStream`'s `TokenTree`s.",null,null],[11,"next","","",3,{"i":[{"n":"self"}],"o":{"g":["tokentree"],"n":"option"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into_iter","proc_macro2","",4,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"empty","","Returns an empty `TokenStream` containing no token trees.",4,{"o":{"n":"tokenstream"}}],[11,"is_empty","","Checks if this `TokenStream` is empty.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from_str","","",4,{"i":[{"n":"str"}],"o":{"g":["tokenstream","lexerror"],"n":"result"}}],[11,"from","","",4,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}],[11,"extend","","",4,{"i":[{"n":"self"},{"n":"i"}]}],[11,"from_iter","","",4,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"call_site","","The span of the invocation of the current procedural macro.",6,{"o":{"n":"span"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"tokentree"}}],[11,"span","","Returns the span of this tree, delegating to the `span` method of the contained token or a delimited stream.",0,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configures the span for only this token.",0,{"i":[{"n":"self"},{"n":"span"}]}],[11,"from","","",0,{"i":[{"n":"group"}],"o":{"n":"tokentree"}}],[11,"from","","",0,{"i":[{"n":"ident"}],"o":{"n":"tokentree"}}],[11,"from","","",0,{"i":[{"n":"punct"}],"o":{"n":"tokentree"}}],[11,"from","","",0,{"i":[{"n":"literal"}],"o":{"n":"tokentree"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"group"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"delimiter"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"delimiter"}],"o":{"n":"bool"}}],[11,"new","","Creates a new `Group` with the given delimiter and token stream.",7,{"i":[{"n":"delimiter"},{"n":"tokenstream"}],"o":{"n":"group"}}],[11,"delimiter","","Returns the delimiter of this `Group`",7,{"i":[{"n":"self"}],"o":{"n":"delimiter"}}],[11,"stream","","Returns the `TokenStream` of tokens that are delimited in this `Group`.",7,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"span","","Returns the span for the delimiters of this token stream, spanning the entire `Group`.",7,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configures the span for this `Group`'s delimiters, but not its internal tokens.",7,{"i":[{"n":"self"},{"n":"span"}]}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"punct"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"spacing"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"spacing"}],"o":{"n":"bool"}}],[11,"new","","Creates a new `Punct` from the given character and spacing.",8,{"i":[{"n":"char"},{"n":"spacing"}],"o":{"n":"punct"}}],[11,"as_char","","Returns the value of this punctuation character as `char`.",8,{"i":[{"n":"self"}],"o":{"n":"char"}}],[11,"spacing","","Returns the spacing of this punctuation character, indicating whether it's immediately followed by another `Punct` in the token stream, so they can potentially be combined into a multicharacter operator (`Joint`), or it's followed by some other token or whitespace (`Alone`) so the operator has certainly ended.",8,{"i":[{"n":"self"}],"o":{"n":"spacing"}}],[11,"span","","Returns the span for this punctuation character.",8,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configure the span for this punctuation character.",8,{"i":[{"n":"self"},{"n":"span"}]}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",9,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"ident"}}],[11,"span","","Returns the span of this `Ident`.",9,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",9,{"i":[{"n":"self"},{"n":"span"}]}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"bool"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",9,{"i":[{"n":"self"},{"n":"ident"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",9,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"ordering"}}],[11,"hash","","",9,{"i":[{"n":"self"},{"n":"h"}]}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"literal"}}],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"u8"}],"o":{"n":"literal"}}],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"u16"}],"o":{"n":"literal"}}],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"u32"}],"o":{"n":"literal"}}],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"u64"}],"o":{"n":"literal"}}],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"usize"}],"o":{"n":"literal"}}],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"i8"}],"o":{"n":"literal"}}],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"i16"}],"o":{"n":"literal"}}],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"i32"}],"o":{"n":"literal"}}],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"i64"}],"o":{"n":"literal"}}],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"isize"}],"o":{"n":"literal"}}],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"u8"}],"o":{"n":"literal"}}],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"u16"}],"o":{"n":"literal"}}],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"u32"}],"o":{"n":"literal"}}],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"u64"}],"o":{"n":"literal"}}],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"usize"}],"o":{"n":"literal"}}],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"i8"}],"o":{"n":"literal"}}],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"i16"}],"o":{"n":"literal"}}],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"i32"}],"o":{"n":"literal"}}],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"i64"}],"o":{"n":"literal"}}],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"isize"}],"o":{"n":"literal"}}],[11,"f64_unsuffixed","","",10,{"i":[{"n":"f64"}],"o":{"n":"literal"}}],[11,"f64_suffixed","","",10,{"i":[{"n":"f64"}],"o":{"n":"literal"}}],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",10,{"i":[{"n":"f32"}],"o":{"n":"literal"}}],[11,"f32_suffixed","","",10,{"i":[{"n":"f32"}],"o":{"n":"literal"}}],[11,"string","","",10,{"i":[{"n":"str"}],"o":{"n":"literal"}}],[11,"character","","",10,{"i":[{"n":"char"}],"o":{"n":"literal"}}],[11,"byte_string","","",10,null],[11,"span","","",10,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",10,{"i":[{"n":"self"},{"n":"span"}]}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"IntoIter"],[3,"TokenStream"],[3,"LexError"],[3,"Span"],[3,"Group"],[3,"Punct"],[3,"Ident"],[3,"Literal"]]};
searchIndex["quote"] = {"doc":"This crate provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code.","items":[[8,"TokenStreamExt","quote","TokenStream extension trait with methods for appending tokens.",null,null],[10,"append","","",0,{"i":[{"n":"self"},{"n":"u"}]}],[10,"append_all","","",0,{"i":[{"n":"self"},{"n":"i"}]}],[10,"append_separated","","",0,{"i":[{"n":"self"},{"n":"i"},{"n":"u"}]}],[10,"append_terminated","","",0,{"i":[{"n":"self"},{"n":"i"},{"n":"u"}]}],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",null,null],[10,"to_tokens","","Write `self` to the given `TokenStream`.",1,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[14,"quote","","The whole point.",null,null],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",null,null],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}]],"paths":[[8,"TokenStreamExt"],[8,"ToTokens"]]};
searchIndex["serde"] = {"doc":"Serde","items":[[0,"de","serde","Generic data structure deserialization framework.",null,null],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",null,null],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",0,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",0,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",0,null],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",0,null],[13,"Char","","The input contained a `char` that was not expected.",0,null],[13,"Str","","The input contained a `&str` or `String` that was not expected.",0,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",0,null],[13,"Unit","","The input contained a unit `()` that was not expected.",0,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",0,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",0,null],[13,"Seq","","The input contained a sequence that was not expected.",0,null],[13,"Map","","The input contained a map that was not expected.",0,null],[13,"Enum","","The input contained an enum that was not expected.",0,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",0,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",0,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",0,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",0,null],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",0,null],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",null,null],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",null,null],[3,"UnitDeserializer","","A deserializer holding a `()`.",null,null],[3,"BoolDeserializer","","A deserializer holding a `bool`.",null,null],[3,"I8Deserializer","","A deserializer holding an `i8`.",null,null],[3,"I16Deserializer","","A deserializer holding an `i16`.",null,null],[3,"I32Deserializer","","A deserializer holding an `i32`.",null,null],[3,"I64Deserializer","","A deserializer holding an `i64`.",null,null],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",null,null],[3,"U8Deserializer","","A deserializer holding a `u8`.",null,null],[3,"U16Deserializer","","A deserializer holding a `u16`.",null,null],[3,"U64Deserializer","","A deserializer holding a `u64`.",null,null],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",null,null],[3,"F32Deserializer","","A deserializer holding an `f32`.",null,null],[3,"F64Deserializer","","A deserializer holding an `f64`.",null,null],[3,"CharDeserializer","","A deserializer holding a `char`.",null,null],[3,"I128Deserializer","","A deserializer holding an `i128`.",null,null],[3,"U128Deserializer","","A deserializer holding a `u128`.",null,null],[3,"U32Deserializer","","A deserializer holding a `u32`.",null,null],[3,"StrDeserializer","","A deserializer holding a `&str`.",null,null],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",null,null],[3,"StringDeserializer","","A deserializer holding a `String`.",null,null],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",null,null],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",null,null],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",null,null],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",null,null],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"custom","","",1,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"custom","","",1,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",2,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",2,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",2,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",2,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",2,null],[11,"deserialize_enum","","",2,null],[11,"deserialize_identifier","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",3,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",3,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",3,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",3,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",3,null],[11,"deserialize_enum","","",3,null],[11,"deserialize_identifier","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",4,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",4,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",4,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",4,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",4,null],[11,"deserialize_enum","","",4,null],[11,"deserialize_identifier","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",5,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",5,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",5,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",5,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",5,null],[11,"deserialize_enum","","",5,null],[11,"deserialize_identifier","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",6,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",6,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",6,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",6,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",6,null],[11,"deserialize_enum","","",6,null],[11,"deserialize_identifier","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",7,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",7,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",7,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",7,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",7,null],[11,"deserialize_enum","","",7,null],[11,"deserialize_identifier","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",8,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",8,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",8,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",8,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",8,null],[11,"deserialize_enum","","",8,null],[11,"deserialize_identifier","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",9,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",9,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",9,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",9,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",9,null],[11,"deserialize_enum","","",9,null],[11,"deserialize_identifier","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",10,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",10,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",10,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",10,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",10,null],[11,"deserialize_enum","","",10,null],[11,"deserialize_identifier","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",11,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",11,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",11,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",11,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",11,null],[11,"deserialize_enum","","",11,null],[11,"deserialize_identifier","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",12,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",12,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",12,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",12,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",12,null],[11,"deserialize_enum","","",12,null],[11,"deserialize_identifier","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",13,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",13,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",13,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",13,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",13,null],[11,"deserialize_enum","","",13,null],[11,"deserialize_identifier","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",14,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",14,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",14,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",14,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",14,null],[11,"deserialize_enum","","",14,null],[11,"deserialize_identifier","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",15,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",15,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",15,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",15,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",15,null],[11,"deserialize_enum","","",15,null],[11,"deserialize_identifier","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",16,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",16,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",16,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",16,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",16,null],[11,"deserialize_enum","","",16,null],[11,"deserialize_identifier","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",17,null],[11,"deserialize_enum","","",17,null],[11,"deserialize_identifier","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",18,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",18,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",18,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",18,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",18,null],[11,"deserialize_identifier","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",18,null],[11,"variant_seed","","",18,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_any","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",19,null],[11,"deserialize_bool","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",19,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",19,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",19,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",19,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",19,null],[11,"deserialize_identifier","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"variant_seed","","",19,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"new","","Create a new borrowed deserializer from the given string.",20,{"i":[{"n":"str"}],"o":{"n":"borrowedstrdeserializer"}}],[11,"deserialize_any","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",20,null],[11,"deserialize_bool","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",20,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",20,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",20,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",20,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",20,null],[11,"deserialize_identifier","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"variant_seed","","",20,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_any","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",21,null],[11,"deserialize_bool","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",21,null],[11,"deserialize_identifier","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"variant_seed","","",21,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_any","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",22,null],[11,"deserialize_bool","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",22,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",22,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",22,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",22,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",22,null],[11,"deserialize_identifier","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"variant_seed","","",22,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"new","","Create a new borrowed deserializer from the given byte slice.",23,null],[11,"deserialize_any","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",23,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",23,null],[11,"deserialize_identifier","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",23,null],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"seqdeserializer"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",24,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",24,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"deserialize_any","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",24,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",24,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",24,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",24,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",24,null],[11,"deserialize_enum","","",24,null],[11,"deserialize_identifier","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"next_element_seed","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["option"],"n":"result"}}],[11,"size_hint","","",24,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"seqaccessdeserializer"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",25,{"i":[{"n":"a"}],"o":{"n":"self"}}],[11,"deserialize_any","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",25,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",25,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",25,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",25,null],[11,"deserialize_enum","","",25,null],[11,"deserialize_identifier","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"new","","Construct a new `MapDeserializer<I, E>`.",26,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",26,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"deserialize_any","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",26,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",26,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",26,null],[11,"deserialize_enum","","",26,null],[11,"deserialize_identifier","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"next_key_seed","","",26,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["option"],"n":"result"}}],[11,"next_value_seed","","",26,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"next_entry_seed","","",26,{"i":[{"n":"self"},{"n":"tk"},{"n":"tv"}],"o":{"g":["option"],"n":"result"}}],[11,"size_hint","","",26,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"next_element_seed","","",26,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["option"],"n":"result"}}],[11,"size_hint","","",26,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"mapaccessdeserializer"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",27,{"i":[{"n":"a"}],"o":{"n":"self"}}],[11,"deserialize_any","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",27,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",27,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",27,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",27,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",27,null],[11,"deserialize_enum","","",27,null],[11,"deserialize_identifier","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"clone","serde::de","",28,{"i":[{"n":"self"}],"o":{"n":"ignoredany"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",28,{"o":{"n":"ignoredany"}}],[11,"expecting","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"visit_bool","","",28,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"visit_i64","","",28,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"visit_u64","","",28,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"visit_f64","","",28,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[11,"visit_str","","",28,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"visit_none","","",28,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"visit_some","","",28,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"result"}}],[11,"visit_newtype_struct","","",28,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"result"}}],[11,"visit_unit","","",28,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"visit_seq","","",28,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"result"}}],[11,"visit_map","","",28,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"result"}}],[11,"visit_bytes","","",28,null],[11,"deserialize","","",28,{"i":[{"n":"d"}],"o":{"g":["ignoredany"],"n":"result"}}],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",29,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",29,{"i":[{"n":"unexpected"},{"n":"expected"}],"o":{"n":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",29,{"i":[{"n":"unexpected"},{"n":"expected"}],"o":{"n":"self"}}],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",29,{"i":[{"n":"usize"},{"n":"expected"}],"o":{"n":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",29,null],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",29,null],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",29,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",29,{"i":[{"n":"str"}],"o":{"n":"self"}}],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",null,null],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,{"i":[{"n":"d"}],"o":{"n":"result"}}],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",null,null],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",null,null],[16,"Value","","The type produced by using this seed.",32,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",32,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",34,null],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"visit_bool","","The input contains a boolean.",34,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"visit_i8","","The input contains an `i8`.",34,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[11,"visit_i16","","The input contains an `i16`.",34,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[11,"visit_i32","","The input contains an `i32`.",34,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[11,"visit_i64","","The input contains an `i64`.",34,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"visit_i128","","The input contains a `i128`.",34,{"i":[{"n":"self"},{"n":"i128"}],"o":{"n":"result"}}],[11,"visit_u8","","The input contains a `u8`.",34,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[11,"visit_u16","","The input contains a `u16`.",34,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[11,"visit_u32","","The input contains a `u32`.",34,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"visit_u64","","The input contains a `u64`.",34,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"visit_u128","","The input contains a `u128`.",34,{"i":[{"n":"self"},{"n":"u128"}],"o":{"n":"result"}}],[11,"visit_f32","","The input contains an `f32`.",34,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[11,"visit_f64","","The input contains an `f64`.",34,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[11,"visit_char","","The input contains a `char`.",34,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"result"}}],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",34,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",34,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",34,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"result"}}],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",34,null],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",34,null],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",34,{"i":[{"n":"self"},{"g":["u8"],"n":"vec"}],"o":{"n":"result"}}],[11,"visit_none","","The input contains an optional that is absent.",34,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"visit_some","","The input contains an optional that is present.",34,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"result"}}],[11,"visit_unit","","The input contains a unit `()`.",34,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"visit_newtype_struct","","The input contains a newtype struct.",34,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"result"}}],[11,"visit_seq","","The input contains a sequence of elements.",34,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"result"}}],[11,"visit_map","","The input contains a key-value map.",34,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"result"}}],[11,"visit_enum","","The input contains an enum.",34,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"result"}}],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",35,null],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["option"],"n":"result"}}],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",35,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",36,null],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,{"i":[{"n":"self"},{"n":"k"}],"o":{"g":["option"],"n":"result"}}],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",36,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"g":["option"],"n":"result"}}],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",36,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",36,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",37,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",37,null],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",37,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"variant","","`variant` is called to identify which variant to deserialize.",37,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",38,null],[10,"unit_variant","","Called when deserializing a variant with no values.",38,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",38,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"newtype_variant","","Called when deserializing a variant with a single value.",38,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",38,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[10,"struct_variant","","Called when deserializing a struct-like variant.",38,null],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",39,null],[10,"into_deserializer","","Convert this value into a deserializer.",39,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"unexpected"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"unexpected"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"unexpected"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",null,null],[11,"serialize_element","","",40,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",40,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_element","","",40,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",40,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_field","","",40,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",40,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_field","","",40,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",40,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_key","","",40,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"serialize_value","","",40,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",40,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_field","","",40,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",40,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_field","","",40,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",40,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",null,null],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",41,{"i":[{"n":"t"}],"o":{"n":"self"}}],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",42,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,null],[16,"Error","","The error type when some error occurs during serialization.",43,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,null],[10,"serialize_bool","","Serialize a `bool` value.",43,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",43,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",43,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",43,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",43,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"serialize_i128","","Serialize an `i128` value.",43,{"i":[{"n":"self"},{"n":"i128"}],"o":{"n":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",43,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",43,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",43,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",43,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"serialize_u128","","Serialize a `u128` value.",43,{"i":[{"n":"self"},{"n":"u128"}],"o":{"n":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",43,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",43,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[10,"serialize_char","","Serialize a character.",43,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"result"}}],[10,"serialize_str","","Serialize a `&str`.",43,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,null],[10,"serialize_none","","Serialize a [`None`] value.",43,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",43,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,{"i":[{"n":"self"},{"g":["usize"],"n":"option"}],"o":{"n":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,{"i":[{"n":"self"},{"g":["usize"],"n":"option"}],"o":{"n":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",43,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"result"}}],[11,"collect_map","","Collect an iterator as a map.",43,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",44,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",44,null],[10,"serialize_element","","Serialize a sequence element.",44,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a sequence.",44,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",45,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",45,null],[10,"serialize_element","","Serialize a tuple element.",45,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a tuple.",45,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",46,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",46,null],[10,"serialize_field","","Serialize a tuple struct field.",46,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a tuple struct.",46,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",47,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",47,null],[10,"serialize_field","","Serialize a tuple variant field.",47,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a tuple variant.",47,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",48,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",48,null],[10,"serialize_key","","Serialize a map key.",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_value","","Serialize a map value.",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",48,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a map.",48,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",49,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",49,null],[10,"serialize_field","","Serialize a struct field.",49,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[11,"skip_field","","Indicate that a struct field has been skipped.",49,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a struct.",49,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",50,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",50,null],[10,"serialize_field","","Serialize a struct variant field.",50,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[11,"skip_field","","Indicate that a struct variant field has been skipped.",50,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a struct variant.",50,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"Deserialize","serde","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,{"i":[{"n":"d"}],"o":{"n":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",42,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,null],[16,"Error","","The error type when some error occurs during serialization.",43,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,null],[10,"serialize_bool","","Serialize a `bool` value.",43,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",43,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",43,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",43,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",43,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"serialize_i128","","Serialize an `i128` value.",43,{"i":[{"n":"self"},{"n":"i128"}],"o":{"n":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",43,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",43,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",43,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",43,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"serialize_u128","","Serialize a `u128` value.",43,{"i":[{"n":"self"},{"n":"u128"}],"o":{"n":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",43,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",43,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[10,"serialize_char","","Serialize a character.",43,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"result"}}],[10,"serialize_str","","Serialize a `&str`.",43,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,null],[10,"serialize_none","","Serialize a [`None`] value.",43,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",43,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,{"i":[{"n":"self"},{"g":["usize"],"n":"option"}],"o":{"n":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,{"i":[{"n":"self"},{"g":["usize"],"n":"option"}],"o":{"n":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",43,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"result"}}],[11,"collect_map","","Collect an iterator as a map.",43,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",null,null],[14,"serde_if_integer128","","Conditional compilation depending on whether Serde is built with support for 128-bit integers.",null,null]],"paths":[[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"]]};
searchIndex["serde_derive"] = {"doc":"This crate provides Serde's two derive macros.","items":[[5,"derive_serialize","serde_derive","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}],[5,"derive_deserialize","","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}]],"paths":[]};
searchIndex["syn"] = {"doc":"Syn is a parsing library for parsing a stream of Rust tokens into a syntax tree of Rust source code.","items":[[3,"Ident","syn","A word of Rust code, which may be a keyword or legal variable name.",null,null],[3,"Attribute","","An attribute like `#[repr(transparent)]`.",null,null],[12,"pound_token","","",0,null],[12,"style","","",0,null],[12,"bracket_token","","",0,null],[12,"path","","",0,null],[12,"tts","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",null,null],[12,"ident","","",1,null],[12,"paren_token","","",1,null],[12,"nested","","",1,null],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",null,null],[12,"ident","","",2,null],[12,"eq_token","","",2,null],[12,"lit","","",2,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"attrs","","Attributes tagged on the field.",3,null],[12,"vis","","Visibility of the field.",3,null],[12,"ident","","Name of the field, if any.",3,null],[12,"colon_token","","",3,null],[12,"ty","","Type of the field.",3,null],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",null,null],[12,"brace_token","","",4,null],[12,"named","","",4,null],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",null,null],[12,"paren_token","","",5,null],[12,"unnamed","","",5,null],[3,"Variant","","An enum variant.",null,null],[12,"attrs","","Attributes tagged on the variant.",6,null],[12,"ident","","Name of the variant.",6,null],[12,"fields","","Content stored in the variant.",6,null],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,null],[3,"VisCrate","","A crate-level visibility: `crate`.",null,null],[12,"crate_token","","",7,null],[3,"VisPublic","","A public visibility level: `pub`.",null,null],[12,"pub_token","","",8,null],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",null,null],[12,"pub_token","","",9,null],[12,"paren_token","","",9,null],[12,"in_token","","",9,null],[12,"path","","",9,null],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",null,null],[3,"ExprAssign","","An assignment expression: `a = compute()`.",null,null],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",null,null],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",null,null],[12,"attrs","","",10,null],[12,"left","","",10,null],[12,"op","","",10,null],[12,"right","","",10,null],[3,"ExprBlock","","A blocked scope: `{ ... }`.",null,null],[3,"ExprBox","","A box expression: `box f`.",null,null],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",null,null],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",null,null],[12,"attrs","","",11,null],[12,"func","","",11,null],[12,"paren_token","","",11,null],[12,"args","","",11,null],[3,"ExprCast","","A cast expression: `foo as f64`.",null,null],[12,"attrs","","",12,null],[12,"expr","","",12,null],[12,"as_token","","",12,null],[12,"ty","","",12,null],[3,"ExprCatch","","A catch expression: `do catch { ... }`.",null,null],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",null,null],[3,"ExprContinue","","A `continue`, with an optional label.",null,null],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",null,null],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",null,null],[3,"ExprGroup","","An expression contained within invisible delimiters.",null,null],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",null,null],[3,"ExprIfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",null,null],[3,"ExprInPlace","","A placement expression: `place <- value`.",null,null],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",null,null],[12,"attrs","","",13,null],[12,"expr","","",13,null],[12,"bracket_token","","",13,null],[12,"index","","",13,null],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",null,null],[12,"attrs","","",14,null],[12,"lit","","",14,null],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",null,null],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",null,null],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",null,null],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",null,null],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",null,null],[12,"attrs","","",15,null],[12,"paren_token","","",15,null],[12,"expr","","",15,null],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",null,null],[12,"attrs","","",16,null],[12,"qself","","",16,null],[12,"path","","",16,null],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",null,null],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",null,null],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",null,null],[3,"ExprReturn","","A `return`, with an optional value to be returned.",null,null],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",null,null],[3,"ExprTry","","A try-expression: `expr?`.",null,null],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",null,null],[3,"ExprType","","A type ascription expression: `foo: f64`.",null,null],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",null,null],[12,"attrs","","",17,null],[12,"op","","",17,null],[12,"expr","","",17,null],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",null,null],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",null,null],[12,"tts","","",18,null],[3,"ExprWhile","","A while loop: `while expr { ... }`.",null,null],[3,"ExprWhileLet","","A while-let loop: `while let pat = expr { ... }`.",null,null],[3,"ExprYield","","A yield expression: `yield expr`.",null,null],[3,"Index","","The index of an unnamed tuple struct field.",null,null],[12,"index","","",19,null],[12,"span","","",19,null],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",null,null],[12,"for_token","","",20,null],[12,"lt_token","","",20,null],[12,"lifetimes","","",20,null],[12,"gt_token","","",20,null],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",null,null],[12,"attrs","","",21,null],[12,"const_token","","",21,null],[12,"ident","","",21,null],[12,"colon_token","","",21,null],[12,"ty","","",21,null],[12,"eq_token","","",21,null],[12,"default","","",21,null],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lt_token","","",22,null],[12,"params","","",22,null],[12,"gt_token","","",22,null],[12,"where_clause","","",22,null],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",null,null],[12,"attrs","","",23,null],[12,"lifetime","","",23,null],[12,"colon_token","","",23,null],[12,"bounds","","",23,null],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",null,null],[12,"lhs_ty","","",24,null],[12,"eq_token","","",24,null],[12,"rhs_ty","","",24,null],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",null,null],[12,"lifetime","","",25,null],[12,"colon_token","","",25,null],[12,"bounds","","",25,null],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",null,null],[12,"lifetimes","","Any lifetimes from a `for` binding",26,null],[12,"bounded_ty","","The type being bounded",26,null],[12,"colon_token","","",26,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",26,null],[3,"TraitBound","","A trait used as a bound on a type parameter.",null,null],[12,"paren_token","","",27,null],[12,"modifier","","",27,null],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",27,null],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",27,null],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",null,null],[12,"attrs","","",28,null],[12,"ident","","",28,null],[12,"colon_token","","",28,null],[12,"bounds","","",28,null],[12,"eq_token","","",28,null],[12,"default","","",28,null],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",null,null],[12,"where_token","","",29,null],[12,"predicates","","",29,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",null,null],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Lifetime","","A Rust lifetime: `'a`.",null,null],[12,"apostrophe","","",30,null],[12,"ident","","",30,null],[3,"LitBool","","A boolean literal: `true` or `false`.",null,null],[12,"value","","",31,null],[12,"span","","",31,null],[3,"LitByte","","A byte literal: `b'f'`.",null,null],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",null,null],[3,"LitChar","","A character literal: `'a'`.",null,null],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",null,null],[3,"LitInt","","An integer literal: `1` or `1u16`.",null,null],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",null,null],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",null,null],[12,"token","","",32,null],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",null,null],[12,"path","","",33,null],[12,"bang_token","","",33,null],[12,"delimiter","","",33,null],[12,"tts","","",33,null],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",null,null],[12,"enum_token","","",34,null],[12,"brace_token","","",34,null],[12,"variants","","",34,null],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",null,null],[12,"struct_token","","",35,null],[12,"fields","","",35,null],[12,"semi_token","","",35,null],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",null,null],[12,"union_token","","",36,null],[12,"fields","","",36,null],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",null,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",37,null],[12,"vis","","Visibility of the struct or enum.",37,null],[12,"ident","","Name of the struct or enum.",37,null],[12,"generics","","Generics required to complete the definition.",37,null],[12,"data","","Data within the struct or enum.",37,null],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",null,null],[12,"extern_token","","",38,null],[12,"name","","",38,null],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",null,null],[12,"name","","",39,null],[12,"ty","","",39,null],[3,"TypeArray","","A fixed size array type: `[T; n]`.",null,null],[12,"bracket_token","","",40,null],[12,"elem","","",40,null],[12,"semi_token","","",40,null],[12,"len","","",40,null],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",null,null],[12,"unsafety","","",41,null],[12,"abi","","",41,null],[12,"fn_token","","",41,null],[12,"lifetimes","","",41,null],[12,"paren_token","","",41,null],[12,"inputs","","",41,null],[12,"variadic","","",41,null],[12,"output","","",41,null],[3,"TypeGroup","","A type contained within invisible delimiters.",null,null],[12,"group_token","","",42,null],[12,"elem","","",42,null],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",null,null],[12,"impl_token","","",43,null],[12,"bounds","","",43,null],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",null,null],[12,"underscore_token","","",44,null],[3,"TypeMacro","","A macro in the type position.",null,null],[12,"mac","","",45,null],[3,"TypeNever","","The never type: `!`.",null,null],[12,"bang_token","","",46,null],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",null,null],[12,"paren_token","","",47,null],[12,"elem","","",47,null],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",null,null],[12,"qself","","",48,null],[12,"path","","",48,null],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",null,null],[12,"star_token","","",49,null],[12,"const_token","","",49,null],[12,"mutability","","",49,null],[12,"elem","","",49,null],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",null,null],[12,"and_token","","",50,null],[12,"lifetime","","",50,null],[12,"mutability","","",50,null],[12,"elem","","",50,null],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",null,null],[12,"bracket_token","","",51,null],[12,"elem","","",51,null],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",null,null],[12,"dyn_token","","",52,null],[12,"bounds","","",52,null],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",null,null],[12,"paren_token","","",53,null],[12,"elems","","",53,null],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",null,null],[12,"tts","","",54,null],[3,"PathTokens","","A helper for printing a self-type qualified path as tokens.",null,null],[12,"0","","",55,null],[12,"1","","",55,null],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",null,null],[12,"colon2_token","","",56,null],[12,"lt_token","","",56,null],[12,"args","","",56,null],[12,"gt_token","","",56,null],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",null,null],[12,"ident","","",57,null],[12,"eq_token","","",57,null],[12,"ty","","",57,null],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",null,null],[12,"paren_token","","",58,null],[12,"inputs","","`(A, B)`",58,null],[12,"output","","`C`",58,null],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",null,null],[12,"leading_colon","","",59,null],[12,"segments","","",59,null],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",null,null],[12,"ident","","",60,null],[12,"arguments","","",60,null],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",null,null],[12,"lt_token","","",61,null],[12,"ty","","",61,null],[12,"position","","",61,null],[12,"as_token","","",61,null],[12,"gt_token","","",61,null],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",null,null],[13,"Outer","","",62,null],[13,"Inner","","",62,null],[4,"Meta","","Content of a compile-time structured attribute.",null,null],[13,"Word","","",63,null],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",63,null],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",63,null],[4,"NestedMeta","","Element of a compile-time attribute list.",null,null],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",64,null],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",64,null],[4,"Fields","","Data stored within an enum variant or struct.",null,null],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",65,null],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",65,null],[13,"Unit","","Unit struct or unit variant such as `None`.",65,null],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",null,null],[13,"Public","","A public visibility level: `pub`.",66,null],[13,"Crate","","A crate-level visibility: `crate`.",66,null],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",66,null],[13,"Inherited","","An inherited visibility, which usually means private.",66,null],[4,"Expr","","A Rust expression.",null,null],[13,"Box","","A box expression: `box f`.",67,null],[13,"InPlace","","A placement expression: `place <- value`.",67,null],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",67,null],[13,"Call","","A function call expression: `invoke(a, b)`.",67,null],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",67,null],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",67,null],[13,"Binary","","A binary operation: `a + b`, `a * b`.",67,null],[13,"Unary","","A unary operation: `!x`, `*x`.",67,null],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",67,null],[13,"Cast","","A cast expression: `foo as f64`.",67,null],[13,"Type","","A type ascription expression: `foo: f64`.",67,null],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",67,null],[13,"IfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",67,null],[13,"While","","A while loop: `while expr { ... }`.",67,null],[13,"WhileLet","","A while-let loop: `while let pat = expr { ... }`.",67,null],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",67,null],[13,"Loop","","Conditionless loop: `loop { ... }`.",67,null],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",67,null],[13,"Closure","","A closure expression: `|a, b| a + b`.",67,null],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",67,null],[13,"Block","","A blocked scope: `{ ... }`.",67,null],[13,"Assign","","An assignment expression: `a = compute()`.",67,null],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",67,null],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",67,null],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",67,null],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",67,null],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",67,null],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",67,null],[13,"Break","","A `break`, with an optional label to break and an optional expression.",67,null],[13,"Continue","","A `continue`, with an optional label.",67,null],[13,"Return","","A `return`, with an optional value to be returned.",67,null],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",67,null],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",67,null],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",67,null],[13,"Paren","","A parenthesized expression: `(a + b)`.",67,null],[13,"Group","","An expression contained within invisible delimiters.",67,null],[13,"Try","","A try-expression: `expr?`.",67,null],[13,"Catch","","A catch expression: `do catch { ... }`.",67,null],[13,"Yield","","A yield expression: `yield expr`.",67,null],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",67,null],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",null,null],[13,"Named","","A named field like `self.x`.",68,null],[13,"Unnamed","","An unnamed field like `self.0`.",68,null],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",null,null],[13,"Type","","A generic type parameter: `T: Into<String>`.",69,null],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",69,null],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",69,null],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",null,null],[13,"None","","",70,null],[13,"Maybe","","",70,null],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",null,null],[13,"Trait","","",71,null],[13,"Lifetime","","",71,null],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",null,null],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",72,null],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",72,null],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",72,null],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",null,null],[13,"F32","","",73,null],[13,"F64","","",73,null],[13,"None","","",73,null],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",null,null],[13,"I8","","",74,null],[13,"I16","","",74,null],[13,"I32","","",74,null],[13,"I64","","",74,null],[13,"I128","","",74,null],[13,"Isize","","",74,null],[13,"U8","","",74,null],[13,"U16","","",74,null],[13,"U32","","",74,null],[13,"U64","","",74,null],[13,"U128","","",74,null],[13,"Usize","","",74,null],[13,"None","","",74,null],[4,"Lit","","A Rust literal such as a string or integer or boolean.",null,null],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",75,null],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",75,null],[13,"Byte","","A byte literal: `b'f'`.",75,null],[13,"Char","","A character literal: `'a'`.",75,null],[13,"Int","","An integer literal: `1` or `1u16`.",75,null],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",75,null],[13,"Bool","","A boolean literal: `true` or `false`.",75,null],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",75,null],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",null,null],[13,"Cooked","","An ordinary string like `\"data\"`.",76,null],[13,"Raw","","A raw string like `r##\"data\"##`.",76,null],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",null,null],[13,"Paren","","",77,null],[13,"Brace","","",77,null],[13,"Bracket","","",77,null],[4,"Data","","The storage of a struct, enum or union data structure.",null,null],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",78,null],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",78,null],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",78,null],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",null,null],[13,"Add","","The `+` operator (addition)",79,null],[13,"Sub","","The `-` operator (subtraction)",79,null],[13,"Mul","","The `*` operator (multiplication)",79,null],[13,"Div","","The `/` operator (division)",79,null],[13,"Rem","","The `%` operator (modulus)",79,null],[13,"And","","The `&&` operator (logical and)",79,null],[13,"Or","","The `||` operator (logical or)",79,null],[13,"BitXor","","The `^` operator (bitwise xor)",79,null],[13,"BitAnd","","The `&` operator (bitwise and)",79,null],[13,"BitOr","","The `|` operator (bitwise or)",79,null],[13,"Shl","","The `<<` operator (shift left)",79,null],[13,"Shr","","The `>>` operator (shift right)",79,null],[13,"Eq","","The `==` operator (equality)",79,null],[13,"Lt","","The `<` operator (less than)",79,null],[13,"Le","","The `<=` operator (less than or equal to)",79,null],[13,"Ne","","The `!=` operator (not equal to)",79,null],[13,"Ge","","The `>=` operator (greater than or equal to)",79,null],[13,"Gt","","The `>` operator (greater than)",79,null],[13,"AddEq","","The `+=` operator",79,null],[13,"SubEq","","The `-=` operator",79,null],[13,"MulEq","","The `*=` operator",79,null],[13,"DivEq","","The `/=` operator",79,null],[13,"RemEq","","The `%=` operator",79,null],[13,"BitXorEq","","The `^=` operator",79,null],[13,"BitAndEq","","The `&=` operator",79,null],[13,"BitOrEq","","The `|=` operator",79,null],[13,"ShlEq","","The `<<=` operator",79,null],[13,"ShrEq","","The `>>=` operator",79,null],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",null,null],[13,"Deref","","The `*` operator for dereferencing",80,null],[13,"Not","","The `!` operator for logical inversion",80,null],[13,"Neg","","The `-` operator for negation",80,null],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",null,null],[13,"Named","","Argument given a name.",81,null],[13,"Wild","","Argument not given a name, matched with `_`.",81,null],[4,"ReturnType","","Return type of a function signature.",null,null],[13,"Default","","Return type is not specified.",82,null],[13,"Type","","A particular type is returned.",82,null],[4,"Type","","The possible types that a Rust value could have.",null,null],[13,"Slice","","A dynamically sized slice type: `[T]`.",83,null],[13,"Array","","A fixed size array type: `[T; n]`.",83,null],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",83,null],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",83,null],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",83,null],[13,"Never","","The never type: `!`.",83,null],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",83,null],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",83,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",83,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",83,null],[13,"Paren","","A parenthesized type equivalent to the inner type.",83,null],[13,"Group","","A type contained within invisible delimiters.",83,null],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",83,null],[13,"Macro","","A macro in the type position.",83,null],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",83,null],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",null,null],[13,"Lifetime","","A lifetime argument.",84,null],[13,"Type","","A type argument.",84,null],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",84,null],[13,"Const","","A const expression. Must be inside of a block.",84,null],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",null,null],[13,"None","","",85,null],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",85,null],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",85,null],[5,"parse","","Parse tokens of source code into the chosen syntax tree node.",null,{"i":[{"n":"tokenstream"}],"o":{"g":["parseerror"],"n":"result"}}],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",null,{"i":[{"n":"tokenstream"}],"o":{"g":["parseerror"],"n":"result"}}],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",null,{"i":[{"n":"str"}],"o":{"g":["parseerror"],"n":"result"}}],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",null,null],[3,"Underscore","syn::token","`_`",null,null],[12,"0","","",86,null],[3,"Apostrophe","","`'`",null,null],[12,"0","","",87,null],[3,"Add","","`+`",null,null],[12,"0","","",88,null],[3,"AddEq","","`+=`",null,null],[12,"0","","",89,null],[3,"And","","`&`",null,null],[12,"0","","",90,null],[3,"AndAnd","","`&&`",null,null],[12,"0","","",91,null],[3,"AndEq","","`&=`",null,null],[12,"0","","",92,null],[3,"At","","`@`",null,null],[12,"0","","",93,null],[3,"Bang","","`!`",null,null],[12,"0","","",94,null],[3,"Caret","","`^`",null,null],[12,"0","","",95,null],[3,"CaretEq","","`^=`",null,null],[12,"0","","",96,null],[3,"Colon","","`:`",null,null],[12,"0","","",97,null],[3,"Colon2","","`::`",null,null],[12,"0","","",98,null],[3,"Comma","","`,`",null,null],[12,"0","","",99,null],[3,"Div","","`/`",null,null],[12,"0","","",100,null],[3,"DivEq","","`/=`",null,null],[12,"0","","",101,null],[3,"Dollar","","`$`",null,null],[12,"0","","",102,null],[3,"Dot","","`.`",null,null],[12,"0","","",103,null],[3,"Dot2","","`..`",null,null],[12,"0","","",104,null],[3,"Dot3","","`...`",null,null],[12,"0","","",105,null],[3,"DotDotEq","","`..=`",null,null],[12,"0","","",106,null],[3,"Eq","","`=`",null,null],[12,"0","","",107,null],[3,"EqEq","","`==`",null,null],[12,"0","","",108,null],[3,"Ge","","`>=`",null,null],[12,"0","","",109,null],[3,"Gt","","`>`",null,null],[12,"0","","",110,null],[3,"Le","","`<=`",null,null],[12,"0","","",111,null],[3,"Lt","","`<`",null,null],[12,"0","","",112,null],[3,"MulEq","","`*=`",null,null],[12,"0","","",113,null],[3,"Ne","","`!=`",null,null],[12,"0","","",114,null],[3,"Or","","`|`",null,null],[12,"0","","",115,null],[3,"OrEq","","`|=`",null,null],[12,"0","","",116,null],[3,"OrOr","","`||`",null,null],[12,"0","","",117,null],[3,"Pound","","`#`",null,null],[12,"0","","",118,null],[3,"Question","","`?`",null,null],[12,"0","","",119,null],[3,"RArrow","","`->`",null,null],[12,"0","","",120,null],[3,"LArrow","","`<-`",null,null],[12,"0","","",121,null],[3,"Rem","","`%`",null,null],[12,"0","","",122,null],[3,"RemEq","","`%=`",null,null],[12,"0","","",123,null],[3,"FatArrow","","`=>`",null,null],[12,"0","","",124,null],[3,"Semi","","`;`",null,null],[12,"0","","",125,null],[3,"Shl","","`<<`",null,null],[12,"0","","",126,null],[3,"ShlEq","","`<<=`",null,null],[12,"0","","",127,null],[3,"Shr","","`>>`",null,null],[12,"0","","",128,null],[3,"ShrEq","","`>>=`",null,null],[12,"0","","",129,null],[3,"Star","","`*`",null,null],[12,"0","","",130,null],[3,"Sub","","`-`",null,null],[12,"0","","",131,null],[3,"SubEq","","`-=`",null,null],[12,"0","","",132,null],[3,"Brace","","`{...}`",null,null],[12,"0","","",133,null],[3,"Bracket","","`[...]`",null,null],[12,"0","","",134,null],[3,"Paren","","`(...)`",null,null],[12,"0","","",135,null],[3,"Group","","None-delimited group",null,null],[12,"0","","",136,null],[3,"As","","`as`",null,null],[12,"0","","",137,null],[3,"Auto","","`auto`",null,null],[12,"0","","",138,null],[3,"Box","","`box`",null,null],[12,"0","","",139,null],[3,"Break","","`break`",null,null],[12,"0","","",140,null],[3,"CapSelf","","`Self`",null,null],[12,"0","","",141,null],[3,"Catch","","`catch`",null,null],[12,"0","","",142,null],[3,"Const","","`const`",null,null],[12,"0","","",143,null],[3,"Continue","","`continue`",null,null],[12,"0","","",144,null],[3,"Crate","","`crate`",null,null],[12,"0","","",145,null],[3,"Default","","`default`",null,null],[12,"0","","",146,null],[3,"Do","","`do`",null,null],[12,"0","","",147,null],[3,"Dyn","","`dyn`",null,null],[12,"0","","",148,null],[3,"Else","","`else`",null,null],[12,"0","","",149,null],[3,"Enum","","`enum`",null,null],[12,"0","","",150,null],[3,"Extern","","`extern`",null,null],[12,"0","","",151,null],[3,"Fn","","`fn`",null,null],[12,"0","","",152,null],[3,"For","","`for`",null,null],[12,"0","","",153,null],[3,"If","","`if`",null,null],[12,"0","","",154,null],[3,"Impl","","`impl`",null,null],[12,"0","","",155,null],[3,"In","","`in`",null,null],[12,"0","","",156,null],[3,"Let","","`let`",null,null],[12,"0","","",157,null],[3,"Loop","","`loop`",null,null],[12,"0","","",158,null],[3,"Macro","","`macro`",null,null],[12,"0","","",159,null],[3,"Match","","`match`",null,null],[12,"0","","",160,null],[3,"Mod","","`mod`",null,null],[12,"0","","",161,null],[3,"Move","","`move`",null,null],[12,"0","","",162,null],[3,"Mut","","`mut`",null,null],[12,"0","","",163,null],[3,"Pub","","`pub`",null,null],[12,"0","","",164,null],[3,"Ref","","`ref`",null,null],[12,"0","","",165,null],[3,"Return","","`return`",null,null],[12,"0","","",166,null],[3,"Self_","","`self`",null,null],[12,"0","","",167,null],[3,"Static","","`static`",null,null],[12,"0","","",168,null],[3,"Struct","","`struct`",null,null],[12,"0","","",169,null],[3,"Super","","`super`",null,null],[12,"0","","",170,null],[3,"Trait","","`trait`",null,null],[12,"0","","",171,null],[3,"Type","","`type`",null,null],[12,"0","","",172,null],[3,"Union","","`union`",null,null],[12,"0","","",173,null],[3,"Unsafe","","`unsafe`",null,null],[12,"0","","",174,null],[3,"Use","","`use`",null,null],[12,"0","","",175,null],[3,"Where","","`where`",null,null],[12,"0","","",176,null],[3,"While","","`while`",null,null],[12,"0","","",177,null],[3,"Yield","","`yield`",null,null],[12,"0","","",178,null],[11,"clone","","",86,{"i":[{"n":"self"}],"o":{"n":"underscore"}}],[11,"new","","",86,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",86,{"o":{"n":"self"}}],[11,"from","","",86,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"to_tokens","","",86,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",86,{"i":[{"n":"cursor"}],"o":{"g":["underscore"],"n":"presult"}}],[11,"description","","",86,{"o":{"g":["str"],"n":"option"}}],[11,"clone","","",87,{"i":[{"n":"self"}],"o":{"n":"apostrophe"}}],[11,"new","","",87,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",87,{"o":{"n":"self"}}],[11,"from","","",87,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"to_tokens","","",87,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",87,{"i":[{"n":"cursor"}],"o":{"g":["apostrophe"],"n":"presult"}}],[11,"description","","",87,{"o":{"g":["str"],"n":"option"}}],[11,"clone","","",88,{"i":[{"n":"self"}],"o":{"n":"add"}}],[11,"new","","",88,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",88,{"o":{"n":"self"}}],[11,"from","","",88,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",89,{"i":[{"n":"self"}],"o":{"n":"addeq"}}],[11,"new","","",89,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",89,{"o":{"n":"self"}}],[11,"from","","",89,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",90,{"i":[{"n":"self"}],"o":{"n":"and"}}],[11,"new","","",90,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",90,{"o":{"n":"self"}}],[11,"from","","",90,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",91,{"i":[{"n":"self"}],"o":{"n":"andand"}}],[11,"new","","",91,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",91,{"o":{"n":"self"}}],[11,"from","","",91,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",92,{"i":[{"n":"self"}],"o":{"n":"andeq"}}],[11,"new","","",92,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",92,{"o":{"n":"self"}}],[11,"from","","",92,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",93,{"i":[{"n":"self"}],"o":{"n":"at"}}],[11,"new","","",93,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",93,{"o":{"n":"self"}}],[11,"from","","",93,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",94,{"i":[{"n":"self"}],"o":{"n":"bang"}}],[11,"new","","",94,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",94,{"o":{"n":"self"}}],[11,"from","","",94,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",95,{"i":[{"n":"self"}],"o":{"n":"caret"}}],[11,"new","","",95,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",95,{"o":{"n":"self"}}],[11,"from","","",95,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",96,{"i":[{"n":"self"}],"o":{"n":"careteq"}}],[11,"new","","",96,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",96,{"o":{"n":"self"}}],[11,"from","","",96,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",97,{"i":[{"n":"self"}],"o":{"n":"colon"}}],[11,"new","","",97,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",97,{"o":{"n":"self"}}],[11,"from","","",97,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",98,{"i":[{"n":"self"}],"o":{"n":"colon2"}}],[11,"new","","",98,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",98,{"o":{"n":"self"}}],[11,"from","","",98,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",99,{"i":[{"n":"self"}],"o":{"n":"comma"}}],[11,"new","","",99,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",99,{"o":{"n":"self"}}],[11,"from","","",99,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",100,{"i":[{"n":"self"}],"o":{"n":"div"}}],[11,"new","","",100,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",100,{"o":{"n":"self"}}],[11,"from","","",100,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",101,{"i":[{"n":"self"}],"o":{"n":"diveq"}}],[11,"new","","",101,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",101,{"o":{"n":"self"}}],[11,"from","","",101,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",102,{"i":[{"n":"self"}],"o":{"n":"dollar"}}],[11,"new","","",102,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",102,{"o":{"n":"self"}}],[11,"from","","",102,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",103,{"i":[{"n":"self"}],"o":{"n":"dot"}}],[11,"new","","",103,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",103,{"o":{"n":"self"}}],[11,"from","","",103,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",104,{"i":[{"n":"self"}],"o":{"n":"dot2"}}],[11,"new","","",104,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",104,{"o":{"n":"self"}}],[11,"from","","",104,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",105,{"i":[{"n":"self"}],"o":{"n":"dot3"}}],[11,"new","","",105,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",105,{"o":{"n":"self"}}],[11,"from","","",105,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",106,{"i":[{"n":"self"}],"o":{"n":"dotdoteq"}}],[11,"new","","",106,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",106,{"o":{"n":"self"}}],[11,"from","","",106,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",107,{"i":[{"n":"self"}],"o":{"n":"eq"}}],[11,"new","","",107,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",107,{"o":{"n":"self"}}],[11,"from","","",107,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",108,{"i":[{"n":"self"}],"o":{"n":"eqeq"}}],[11,"new","","",108,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",108,{"o":{"n":"self"}}],[11,"from","","",108,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",109,{"i":[{"n":"self"}],"o":{"n":"ge"}}],[11,"new","","",109,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",109,{"o":{"n":"self"}}],[11,"from","","",109,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",110,{"i":[{"n":"self"}],"o":{"n":"gt"}}],[11,"new","","",110,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",110,{"o":{"n":"self"}}],[11,"from","","",110,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",111,{"i":[{"n":"self"}],"o":{"n":"le"}}],[11,"new","","",111,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",111,{"o":{"n":"self"}}],[11,"from","","",111,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",112,{"i":[{"n":"self"}],"o":{"n":"lt"}}],[11,"new","","",112,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",112,{"o":{"n":"self"}}],[11,"from","","",112,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",113,{"i":[{"n":"self"}],"o":{"n":"muleq"}}],[11,"new","","",113,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",113,{"o":{"n":"self"}}],[11,"from","","",113,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",114,{"i":[{"n":"self"}],"o":{"n":"ne"}}],[11,"new","","",114,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",114,{"o":{"n":"self"}}],[11,"from","","",114,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",115,{"i":[{"n":"self"}],"o":{"n":"or"}}],[11,"new","","",115,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",115,{"o":{"n":"self"}}],[11,"from","","",115,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",116,{"i":[{"n":"self"}],"o":{"n":"oreq"}}],[11,"new","","",116,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",116,{"o":{"n":"self"}}],[11,"from","","",116,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",117,{"i":[{"n":"self"}],"o":{"n":"oror"}}],[11,"new","","",117,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",117,{"o":{"n":"self"}}],[11,"from","","",117,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",118,{"i":[{"n":"self"}],"o":{"n":"pound"}}],[11,"new","","",118,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",118,{"o":{"n":"self"}}],[11,"from","","",118,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",119,{"i":[{"n":"self"}],"o":{"n":"question"}}],[11,"new","","",119,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",119,{"o":{"n":"self"}}],[11,"from","","",119,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",120,{"i":[{"n":"self"}],"o":{"n":"rarrow"}}],[11,"new","","",120,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",120,{"o":{"n":"self"}}],[11,"from","","",120,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",121,{"i":[{"n":"self"}],"o":{"n":"larrow"}}],[11,"new","","",121,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",121,{"o":{"n":"self"}}],[11,"from","","",121,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",122,{"i":[{"n":"self"}],"o":{"n":"rem"}}],[11,"new","","",122,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",122,{"o":{"n":"self"}}],[11,"from","","",122,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",123,{"i":[{"n":"self"}],"o":{"n":"remeq"}}],[11,"new","","",123,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",123,{"o":{"n":"self"}}],[11,"from","","",123,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",124,{"i":[{"n":"self"}],"o":{"n":"fatarrow"}}],[11,"new","","",124,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",124,{"o":{"n":"self"}}],[11,"from","","",124,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",125,{"i":[{"n":"self"}],"o":{"n":"semi"}}],[11,"new","","",125,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",125,{"o":{"n":"self"}}],[11,"from","","",125,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",126,{"i":[{"n":"self"}],"o":{"n":"shl"}}],[11,"new","","",126,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",126,{"o":{"n":"self"}}],[11,"from","","",126,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",127,{"i":[{"n":"self"}],"o":{"n":"shleq"}}],[11,"new","","",127,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",127,{"o":{"n":"self"}}],[11,"from","","",127,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",128,{"i":[{"n":"self"}],"o":{"n":"shr"}}],[11,"new","","",128,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",128,{"o":{"n":"self"}}],[11,"from","","",128,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",129,{"i":[{"n":"self"}],"o":{"n":"shreq"}}],[11,"new","","",129,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",129,{"o":{"n":"self"}}],[11,"from","","",129,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",130,{"i":[{"n":"self"}],"o":{"n":"star"}}],[11,"new","","",130,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",130,{"o":{"n":"self"}}],[11,"from","","",130,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",131,{"i":[{"n":"self"}],"o":{"n":"sub"}}],[11,"new","","",131,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",131,{"o":{"n":"self"}}],[11,"from","","",131,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",132,{"i":[{"n":"self"}],"o":{"n":"subeq"}}],[11,"new","","",132,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",132,{"o":{"n":"self"}}],[11,"from","","",132,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"to_tokens","","",88,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",88,{"i":[{"n":"cursor"}],"o":{"g":["add"],"n":"presult"}}],[11,"description","","",88,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",89,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",89,{"i":[{"n":"cursor"}],"o":{"g":["addeq"],"n":"presult"}}],[11,"description","","",89,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",90,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",90,{"i":[{"n":"cursor"}],"o":{"g":["and"],"n":"presult"}}],[11,"description","","",90,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",91,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",91,{"i":[{"n":"cursor"}],"o":{"g":["andand"],"n":"presult"}}],[11,"description","","",91,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",92,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",92,{"i":[{"n":"cursor"}],"o":{"g":["andeq"],"n":"presult"}}],[11,"description","","",92,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",93,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",93,{"i":[{"n":"cursor"}],"o":{"g":["at"],"n":"presult"}}],[11,"description","","",93,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",94,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",94,{"i":[{"n":"cursor"}],"o":{"g":["bang"],"n":"presult"}}],[11,"description","","",94,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",95,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",95,{"i":[{"n":"cursor"}],"o":{"g":["caret"],"n":"presult"}}],[11,"description","","",95,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",96,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",96,{"i":[{"n":"cursor"}],"o":{"g":["careteq"],"n":"presult"}}],[11,"description","","",96,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",97,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",97,{"i":[{"n":"cursor"}],"o":{"g":["colon"],"n":"presult"}}],[11,"description","","",97,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",98,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",98,{"i":[{"n":"cursor"}],"o":{"g":["colon2"],"n":"presult"}}],[11,"description","","",98,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",99,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",99,{"i":[{"n":"cursor"}],"o":{"g":["comma"],"n":"presult"}}],[11,"description","","",99,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",100,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",100,{"i":[{"n":"cursor"}],"o":{"g":["div"],"n":"presult"}}],[11,"description","","",100,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",101,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",101,{"i":[{"n":"cursor"}],"o":{"g":["diveq"],"n":"presult"}}],[11,"description","","",101,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",102,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",102,{"i":[{"n":"cursor"}],"o":{"g":["dollar"],"n":"presult"}}],[11,"description","","",102,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",103,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",103,{"i":[{"n":"cursor"}],"o":{"g":["dot"],"n":"presult"}}],[11,"description","","",103,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",104,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",104,{"i":[{"n":"cursor"}],"o":{"g":["dot2"],"n":"presult"}}],[11,"description","","",104,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",105,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",105,{"i":[{"n":"cursor"}],"o":{"g":["dot3"],"n":"presult"}}],[11,"description","","",105,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",106,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",106,{"i":[{"n":"cursor"}],"o":{"g":["dotdoteq"],"n":"presult"}}],[11,"description","","",106,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",107,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",107,{"i":[{"n":"cursor"}],"o":{"g":["eq"],"n":"presult"}}],[11,"description","","",107,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",108,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",108,{"i":[{"n":"cursor"}],"o":{"g":["eqeq"],"n":"presult"}}],[11,"description","","",108,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",109,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",109,{"i":[{"n":"cursor"}],"o":{"g":["ge"],"n":"presult"}}],[11,"description","","",109,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",110,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",110,{"i":[{"n":"cursor"}],"o":{"g":["gt"],"n":"presult"}}],[11,"description","","",110,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",111,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",111,{"i":[{"n":"cursor"}],"o":{"g":["le"],"n":"presult"}}],[11,"description","","",111,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",112,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",112,{"i":[{"n":"cursor"}],"o":{"g":["lt"],"n":"presult"}}],[11,"description","","",112,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",113,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",113,{"i":[{"n":"cursor"}],"o":{"g":["muleq"],"n":"presult"}}],[11,"description","","",113,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",114,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",114,{"i":[{"n":"cursor"}],"o":{"g":["ne"],"n":"presult"}}],[11,"description","","",114,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",115,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",115,{"i":[{"n":"cursor"}],"o":{"g":["or"],"n":"presult"}}],[11,"description","","",115,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",116,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",116,{"i":[{"n":"cursor"}],"o":{"g":["oreq"],"n":"presult"}}],[11,"description","","",116,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",117,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",117,{"i":[{"n":"cursor"}],"o":{"g":["oror"],"n":"presult"}}],[11,"description","","",117,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",118,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",118,{"i":[{"n":"cursor"}],"o":{"g":["pound"],"n":"presult"}}],[11,"description","","",118,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",119,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",119,{"i":[{"n":"cursor"}],"o":{"g":["question"],"n":"presult"}}],[11,"description","","",119,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",120,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",120,{"i":[{"n":"cursor"}],"o":{"g":["rarrow"],"n":"presult"}}],[11,"description","","",120,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",121,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",121,{"i":[{"n":"cursor"}],"o":{"g":["larrow"],"n":"presult"}}],[11,"description","","",121,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",122,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",122,{"i":[{"n":"cursor"}],"o":{"g":["rem"],"n":"presult"}}],[11,"description","","",122,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",123,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",123,{"i":[{"n":"cursor"}],"o":{"g":["remeq"],"n":"presult"}}],[11,"description","","",123,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",124,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",124,{"i":[{"n":"cursor"}],"o":{"g":["fatarrow"],"n":"presult"}}],[11,"description","","",124,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",125,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",125,{"i":[{"n":"cursor"}],"o":{"g":["semi"],"n":"presult"}}],[11,"description","","",125,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",126,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",126,{"i":[{"n":"cursor"}],"o":{"g":["shl"],"n":"presult"}}],[11,"description","","",126,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",127,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",127,{"i":[{"n":"cursor"}],"o":{"g":["shleq"],"n":"presult"}}],[11,"description","","",127,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",128,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",128,{"i":[{"n":"cursor"}],"o":{"g":["shr"],"n":"presult"}}],[11,"description","","",128,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",129,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",129,{"i":[{"n":"cursor"}],"o":{"g":["shreq"],"n":"presult"}}],[11,"description","","",129,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",130,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",130,{"i":[{"n":"cursor"}],"o":{"g":["star"],"n":"presult"}}],[11,"description","","",130,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",131,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",131,{"i":[{"n":"cursor"}],"o":{"g":["sub"],"n":"presult"}}],[11,"description","","",131,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",132,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",132,{"i":[{"n":"cursor"}],"o":{"g":["subeq"],"n":"presult"}}],[11,"description","","",132,{"o":{"g":["str"],"n":"option"}}],[11,"clone","","",133,{"i":[{"n":"self"}],"o":{"n":"brace"}}],[11,"default","","",133,{"o":{"n":"self"}}],[11,"surround","","",133,{"i":[{"n":"self"},{"n":"tokenstream"},{"n":"f"}]}],[11,"parse","","",133,{"i":[{"n":"cursor"},{"n":"f"}],"o":{"n":"presult"}}],[11,"from","","",133,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",134,{"i":[{"n":"self"}],"o":{"n":"bracket"}}],[11,"default","","",134,{"o":{"n":"self"}}],[11,"surround","","",134,{"i":[{"n":"self"},{"n":"tokenstream"},{"n":"f"}]}],[11,"parse","","",134,{"i":[{"n":"cursor"},{"n":"f"}],"o":{"n":"presult"}}],[11,"from","","",134,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",135,{"i":[{"n":"self"}],"o":{"n":"paren"}}],[11,"default","","",135,{"o":{"n":"self"}}],[11,"surround","","",135,{"i":[{"n":"self"},{"n":"tokenstream"},{"n":"f"}]}],[11,"parse","","",135,{"i":[{"n":"cursor"},{"n":"f"}],"o":{"n":"presult"}}],[11,"from","","",135,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",136,{"i":[{"n":"self"}],"o":{"n":"group"}}],[11,"default","","",136,{"o":{"n":"self"}}],[11,"surround","","",136,{"i":[{"n":"self"},{"n":"tokenstream"},{"n":"f"}]}],[11,"parse","","",136,{"i":[{"n":"cursor"},{"n":"f"}],"o":{"n":"presult"}}],[11,"from","","",136,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",137,{"i":[{"n":"self"}],"o":{"n":"as"}}],[11,"default","","",137,{"o":{"n":"self"}}],[11,"to_tokens","","",137,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",137,{"i":[{"n":"cursor"}],"o":{"g":["as"],"n":"presult"}}],[11,"description","","",137,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",137,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",138,{"i":[{"n":"self"}],"o":{"n":"auto"}}],[11,"default","","",138,{"o":{"n":"self"}}],[11,"to_tokens","","",138,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",138,{"i":[{"n":"cursor"}],"o":{"g":["auto"],"n":"presult"}}],[11,"description","","",138,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",138,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",139,{"i":[{"n":"self"}],"o":{"n":"box"}}],[11,"default","","",139,{"o":{"n":"self"}}],[11,"to_tokens","","",139,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",139,{"i":[{"n":"cursor"}],"o":{"g":["box"],"n":"presult"}}],[11,"description","","",139,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",139,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",140,{"i":[{"n":"self"}],"o":{"n":"break"}}],[11,"default","","",140,{"o":{"n":"self"}}],[11,"to_tokens","","",140,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",140,{"i":[{"n":"cursor"}],"o":{"g":["break"],"n":"presult"}}],[11,"description","","",140,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",140,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",141,{"i":[{"n":"self"}],"o":{"n":"capself"}}],[11,"default","","",141,{"o":{"n":"self"}}],[11,"to_tokens","","",141,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",141,{"i":[{"n":"cursor"}],"o":{"g":["capself"],"n":"presult"}}],[11,"description","","",141,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",141,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",142,{"i":[{"n":"self"}],"o":{"n":"catch"}}],[11,"default","","",142,{"o":{"n":"self"}}],[11,"to_tokens","","",142,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",142,{"i":[{"n":"cursor"}],"o":{"g":["catch"],"n":"presult"}}],[11,"description","","",142,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",142,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",143,{"i":[{"n":"self"}],"o":{"n":"const"}}],[11,"default","","",143,{"o":{"n":"self"}}],[11,"to_tokens","","",143,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",143,{"i":[{"n":"cursor"}],"o":{"g":["const"],"n":"presult"}}],[11,"description","","",143,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",143,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",144,{"i":[{"n":"self"}],"o":{"n":"continue"}}],[11,"default","","",144,{"o":{"n":"self"}}],[11,"to_tokens","","",144,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",144,{"i":[{"n":"cursor"}],"o":{"g":["continue"],"n":"presult"}}],[11,"description","","",144,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",144,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",145,{"i":[{"n":"self"}],"o":{"n":"crate"}}],[11,"default","","",145,{"o":{"n":"self"}}],[11,"to_tokens","","",145,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",145,{"i":[{"n":"cursor"}],"o":{"g":["crate"],"n":"presult"}}],[11,"description","","",145,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",145,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",146,{"i":[{"n":"self"}],"o":{"n":"default"}}],[11,"default","","",146,{"o":{"n":"self"}}],[11,"to_tokens","","",146,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",146,{"i":[{"n":"cursor"}],"o":{"g":["default"],"n":"presult"}}],[11,"description","","",146,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",146,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",147,{"i":[{"n":"self"}],"o":{"n":"do"}}],[11,"default","","",147,{"o":{"n":"self"}}],[11,"to_tokens","","",147,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",147,{"i":[{"n":"cursor"}],"o":{"g":["do"],"n":"presult"}}],[11,"description","","",147,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",147,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",148,{"i":[{"n":"self"}],"o":{"n":"dyn"}}],[11,"default","","",148,{"o":{"n":"self"}}],[11,"to_tokens","","",148,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",148,{"i":[{"n":"cursor"}],"o":{"g":["dyn"],"n":"presult"}}],[11,"description","","",148,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",148,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",149,{"i":[{"n":"self"}],"o":{"n":"else"}}],[11,"default","","",149,{"o":{"n":"self"}}],[11,"to_tokens","","",149,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",149,{"i":[{"n":"cursor"}],"o":{"g":["else"],"n":"presult"}}],[11,"description","","",149,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",149,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",150,{"i":[{"n":"self"}],"o":{"n":"enum"}}],[11,"default","","",150,{"o":{"n":"self"}}],[11,"to_tokens","","",150,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",150,{"i":[{"n":"cursor"}],"o":{"g":["enum"],"n":"presult"}}],[11,"description","","",150,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",150,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",151,{"i":[{"n":"self"}],"o":{"n":"extern"}}],[11,"default","","",151,{"o":{"n":"self"}}],[11,"to_tokens","","",151,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",151,{"i":[{"n":"cursor"}],"o":{"g":["extern"],"n":"presult"}}],[11,"description","","",151,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",151,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",152,{"i":[{"n":"self"}],"o":{"n":"fn"}}],[11,"default","","",152,{"o":{"n":"self"}}],[11,"to_tokens","","",152,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",152,{"i":[{"n":"cursor"}],"o":{"g":["fn"],"n":"presult"}}],[11,"description","","",152,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",152,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",153,{"i":[{"n":"self"}],"o":{"n":"for"}}],[11,"default","","",153,{"o":{"n":"self"}}],[11,"to_tokens","","",153,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",153,{"i":[{"n":"cursor"}],"o":{"g":["for"],"n":"presult"}}],[11,"description","","",153,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",153,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",154,{"i":[{"n":"self"}],"o":{"n":"if"}}],[11,"default","","",154,{"o":{"n":"self"}}],[11,"to_tokens","","",154,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",154,{"i":[{"n":"cursor"}],"o":{"g":["if"],"n":"presult"}}],[11,"description","","",154,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",154,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",155,{"i":[{"n":"self"}],"o":{"n":"impl"}}],[11,"default","","",155,{"o":{"n":"self"}}],[11,"to_tokens","","",155,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",155,{"i":[{"n":"cursor"}],"o":{"g":["impl"],"n":"presult"}}],[11,"description","","",155,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",155,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",156,{"i":[{"n":"self"}],"o":{"n":"in"}}],[11,"default","","",156,{"o":{"n":"self"}}],[11,"to_tokens","","",156,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",156,{"i":[{"n":"cursor"}],"o":{"g":["in"],"n":"presult"}}],[11,"description","","",156,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",156,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",157,{"i":[{"n":"self"}],"o":{"n":"let"}}],[11,"default","","",157,{"o":{"n":"self"}}],[11,"to_tokens","","",157,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",157,{"i":[{"n":"cursor"}],"o":{"g":["let"],"n":"presult"}}],[11,"description","","",157,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",157,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",158,{"i":[{"n":"self"}],"o":{"n":"loop"}}],[11,"default","","",158,{"o":{"n":"self"}}],[11,"to_tokens","","",158,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",158,{"i":[{"n":"cursor"}],"o":{"g":["loop"],"n":"presult"}}],[11,"description","","",158,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",158,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",159,{"i":[{"n":"self"}],"o":{"n":"macro"}}],[11,"default","","",159,{"o":{"n":"self"}}],[11,"to_tokens","","",159,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",159,{"i":[{"n":"cursor"}],"o":{"g":["macro"],"n":"presult"}}],[11,"description","","",159,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",159,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",160,{"i":[{"n":"self"}],"o":{"n":"match"}}],[11,"default","","",160,{"o":{"n":"self"}}],[11,"to_tokens","","",160,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",160,{"i":[{"n":"cursor"}],"o":{"g":["match"],"n":"presult"}}],[11,"description","","",160,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",160,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",161,{"i":[{"n":"self"}],"o":{"n":"mod"}}],[11,"default","","",161,{"o":{"n":"self"}}],[11,"to_tokens","","",161,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",161,{"i":[{"n":"cursor"}],"o":{"g":["mod"],"n":"presult"}}],[11,"description","","",161,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",161,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",162,{"i":[{"n":"self"}],"o":{"n":"move"}}],[11,"default","","",162,{"o":{"n":"self"}}],[11,"to_tokens","","",162,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",162,{"i":[{"n":"cursor"}],"o":{"g":["move"],"n":"presult"}}],[11,"description","","",162,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",162,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",163,{"i":[{"n":"self"}],"o":{"n":"mut"}}],[11,"default","","",163,{"o":{"n":"self"}}],[11,"to_tokens","","",163,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",163,{"i":[{"n":"cursor"}],"o":{"g":["mut"],"n":"presult"}}],[11,"description","","",163,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",163,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",164,{"i":[{"n":"self"}],"o":{"n":"pub"}}],[11,"default","","",164,{"o":{"n":"self"}}],[11,"to_tokens","","",164,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",164,{"i":[{"n":"cursor"}],"o":{"g":["pub"],"n":"presult"}}],[11,"description","","",164,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",164,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",165,{"i":[{"n":"self"}],"o":{"n":"ref"}}],[11,"default","","",165,{"o":{"n":"self"}}],[11,"to_tokens","","",165,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",165,{"i":[{"n":"cursor"}],"o":{"g":["ref"],"n":"presult"}}],[11,"description","","",165,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",165,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",166,{"i":[{"n":"self"}],"o":{"n":"return"}}],[11,"default","","",166,{"o":{"n":"self"}}],[11,"to_tokens","","",166,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",166,{"i":[{"n":"cursor"}],"o":{"g":["return"],"n":"presult"}}],[11,"description","","",166,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",166,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",167,{"i":[{"n":"self"}],"o":{"n":"self_"}}],[11,"default","","",167,{"o":{"n":"self"}}],[11,"to_tokens","","",167,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",167,{"i":[{"n":"cursor"}],"o":{"g":["self_"],"n":"presult"}}],[11,"description","","",167,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",167,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",168,{"i":[{"n":"self"}],"o":{"n":"static"}}],[11,"default","","",168,{"o":{"n":"self"}}],[11,"to_tokens","","",168,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",168,{"i":[{"n":"cursor"}],"o":{"g":["static"],"n":"presult"}}],[11,"description","","",168,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",168,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",169,{"i":[{"n":"self"}],"o":{"n":"struct"}}],[11,"default","","",169,{"o":{"n":"self"}}],[11,"to_tokens","","",169,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",169,{"i":[{"n":"cursor"}],"o":{"g":["struct"],"n":"presult"}}],[11,"description","","",169,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",169,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",170,{"i":[{"n":"self"}],"o":{"n":"super"}}],[11,"default","","",170,{"o":{"n":"self"}}],[11,"to_tokens","","",170,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",170,{"i":[{"n":"cursor"}],"o":{"g":["super"],"n":"presult"}}],[11,"description","","",170,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",170,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",171,{"i":[{"n":"self"}],"o":{"n":"trait"}}],[11,"default","","",171,{"o":{"n":"self"}}],[11,"to_tokens","","",171,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",171,{"i":[{"n":"cursor"}],"o":{"g":["trait"],"n":"presult"}}],[11,"description","","",171,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",171,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",172,{"i":[{"n":"self"}],"o":{"n":"type"}}],[11,"default","","",172,{"o":{"n":"self"}}],[11,"to_tokens","","",172,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",172,{"i":[{"n":"cursor"}],"o":{"g":["type"],"n":"presult"}}],[11,"description","","",172,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",172,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",173,{"i":[{"n":"self"}],"o":{"n":"union"}}],[11,"default","","",173,{"o":{"n":"self"}}],[11,"to_tokens","","",173,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",173,{"i":[{"n":"cursor"}],"o":{"g":["union"],"n":"presult"}}],[11,"description","","",173,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",173,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",174,{"i":[{"n":"self"}],"o":{"n":"unsafe"}}],[11,"default","","",174,{"o":{"n":"self"}}],[11,"to_tokens","","",174,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",174,{"i":[{"n":"cursor"}],"o":{"g":["unsafe"],"n":"presult"}}],[11,"description","","",174,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",174,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",175,{"i":[{"n":"self"}],"o":{"n":"use"}}],[11,"default","","",175,{"o":{"n":"self"}}],[11,"to_tokens","","",175,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",175,{"i":[{"n":"cursor"}],"o":{"g":["use"],"n":"presult"}}],[11,"description","","",175,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",175,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",176,{"i":[{"n":"self"}],"o":{"n":"where"}}],[11,"default","","",176,{"o":{"n":"self"}}],[11,"to_tokens","","",176,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",176,{"i":[{"n":"cursor"}],"o":{"g":["where"],"n":"presult"}}],[11,"description","","",176,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",176,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",177,{"i":[{"n":"self"}],"o":{"n":"while"}}],[11,"default","","",177,{"o":{"n":"self"}}],[11,"to_tokens","","",177,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",177,{"i":[{"n":"cursor"}],"o":{"g":["while"],"n":"presult"}}],[11,"description","","",177,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",177,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",178,{"i":[{"n":"self"}],"o":{"n":"yield"}}],[11,"default","","",178,{"o":{"n":"self"}}],[11,"to_tokens","","",178,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",178,{"i":[{"n":"cursor"}],"o":{"g":["yield"],"n":"presult"}}],[11,"description","","",178,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",178,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"from","syn","",179,{"i":[{"n":"self_"}],"o":{"n":"ident"}}],[11,"from","","",179,{"i":[{"n":"capself"}],"o":{"n":"ident"}}],[11,"from","","",179,{"i":[{"n":"super"}],"o":{"n":"ident"}}],[11,"from","","",179,{"i":[{"n":"crate"}],"o":{"n":"ident"}}],[11,"parse_inner","","",0,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_outer","","",0,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"to_tokens","","",0,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",1,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",2,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"attribute"}}],[11,"interpret_meta","","Parses the tokens after the path as a `Meta` if possible.",0,{"i":[{"n":"self"}],"o":{"g":["meta"],"n":"option"}}],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"attrstyle"}}],[11,"clone","","",63,{"i":[{"n":"self"}],"o":{"n":"meta"}}],[11,"from","","",63,{"i":[{"n":"ident"}],"o":{"n":"meta"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"metalist"}}],[11,"from","","",63,{"i":[{"n":"metalist"}],"o":{"n":"meta"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"metanamevalue"}}],[11,"from","","",63,{"i":[{"n":"metanamevalue"}],"o":{"n":"meta"}}],[11,"to_tokens","","",63,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"name","","Returns the identifier that begins this structured meta item.",63,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"nestedmeta"}}],[11,"from","","",64,{"i":[{"n":"meta"}],"o":{"n":"nestedmeta"}}],[11,"from","","",64,{"i":[{"n":"lit"}],"o":{"n":"nestedmeta"}}],[11,"to_tokens","","",64,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",6,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",6,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",4,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",4,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",5,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",5,{"o":{"g":["str"],"n":"option"}}],[11,"parse_named","","",3,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_unnamed","","",3,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",66,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",66,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",6,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",4,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",5,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",3,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",8,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",7,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",9,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"variant"}}],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"fields"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"fieldsnamed"}}],[11,"from","","",65,{"i":[{"n":"fieldsnamed"}],"o":{"n":"fields"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"fieldsunnamed"}}],[11,"from","","",65,{"i":[{"n":"fieldsunnamed"}],"o":{"n":"fields"}}],[11,"to_tokens","","",65,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"iter","","Get an iterator over the [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",65,{"i":[{"n":"self"}],"o":{"g":["field"],"n":"iter"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"field"}}],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"visibility"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"vispublic"}}],[11,"from","","",66,{"i":[{"n":"vispublic"}],"o":{"n":"visibility"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"viscrate"}}],[11,"from","","",66,{"i":[{"n":"viscrate"}],"o":{"n":"visibility"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"visrestricted"}}],[11,"from","","",66,{"i":[{"n":"visrestricted"}],"o":{"n":"visibility"}}],[11,"to_tokens","","",66,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",67,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",67,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",14,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",14,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",15,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",15,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",16,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",16,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",11,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",10,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",17,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",14,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",12,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",68,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",19,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",13,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",16,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",15,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",18,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",67,{"i":[{"n":"self"}],"o":{"n":"expr"}}],[11,"clone","","",180,{"i":[{"n":"self"}],"o":{"n":"exprbox"}}],[11,"from","","",67,{"i":[{"n":"exprbox"}],"o":{"n":"expr"}}],[11,"clone","","",181,{"i":[{"n":"self"}],"o":{"n":"exprinplace"}}],[11,"from","","",67,{"i":[{"n":"exprinplace"}],"o":{"n":"expr"}}],[11,"clone","","",182,{"i":[{"n":"self"}],"o":{"n":"exprarray"}}],[11,"from","","",67,{"i":[{"n":"exprarray"}],"o":{"n":"expr"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"exprcall"}}],[11,"from","","",67,{"i":[{"n":"exprcall"}],"o":{"n":"expr"}}],[11,"clone","","",183,{"i":[{"n":"self"}],"o":{"n":"exprmethodcall"}}],[11,"from","","",67,{"i":[{"n":"exprmethodcall"}],"o":{"n":"expr"}}],[11,"clone","","",184,{"i":[{"n":"self"}],"o":{"n":"exprtuple"}}],[11,"from","","",67,{"i":[{"n":"exprtuple"}],"o":{"n":"expr"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"exprbinary"}}],[11,"from","","",67,{"i":[{"n":"exprbinary"}],"o":{"n":"expr"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"exprunary"}}],[11,"from","","",67,{"i":[{"n":"exprunary"}],"o":{"n":"expr"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"exprlit"}}],[11,"from","","",67,{"i":[{"n":"exprlit"}],"o":{"n":"expr"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"exprcast"}}],[11,"from","","",67,{"i":[{"n":"exprcast"}],"o":{"n":"expr"}}],[11,"clone","","",185,{"i":[{"n":"self"}],"o":{"n":"exprtype"}}],[11,"from","","",67,{"i":[{"n":"exprtype"}],"o":{"n":"expr"}}],[11,"clone","","",186,{"i":[{"n":"self"}],"o":{"n":"exprif"}}],[11,"from","","",67,{"i":[{"n":"exprif"}],"o":{"n":"expr"}}],[11,"clone","","",187,{"i":[{"n":"self"}],"o":{"n":"expriflet"}}],[11,"from","","",67,{"i":[{"n":"expriflet"}],"o":{"n":"expr"}}],[11,"clone","","",188,{"i":[{"n":"self"}],"o":{"n":"exprwhile"}}],[11,"from","","",67,{"i":[{"n":"exprwhile"}],"o":{"n":"expr"}}],[11,"clone","","",189,{"i":[{"n":"self"}],"o":{"n":"exprwhilelet"}}],[11,"from","","",67,{"i":[{"n":"exprwhilelet"}],"o":{"n":"expr"}}],[11,"clone","","",190,{"i":[{"n":"self"}],"o":{"n":"exprforloop"}}],[11,"from","","",67,{"i":[{"n":"exprforloop"}],"o":{"n":"expr"}}],[11,"clone","","",191,{"i":[{"n":"self"}],"o":{"n":"exprloop"}}],[11,"from","","",67,{"i":[{"n":"exprloop"}],"o":{"n":"expr"}}],[11,"clone","","",192,{"i":[{"n":"self"}],"o":{"n":"exprmatch"}}],[11,"from","","",67,{"i":[{"n":"exprmatch"}],"o":{"n":"expr"}}],[11,"clone","","",193,{"i":[{"n":"self"}],"o":{"n":"exprclosure"}}],[11,"from","","",67,{"i":[{"n":"exprclosure"}],"o":{"n":"expr"}}],[11,"clone","","",194,{"i":[{"n":"self"}],"o":{"n":"exprunsafe"}}],[11,"from","","",67,{"i":[{"n":"exprunsafe"}],"o":{"n":"expr"}}],[11,"clone","","",195,{"i":[{"n":"self"}],"o":{"n":"exprblock"}}],[11,"from","","",67,{"i":[{"n":"exprblock"}],"o":{"n":"expr"}}],[11,"clone","","",196,{"i":[{"n":"self"}],"o":{"n":"exprassign"}}],[11,"from","","",67,{"i":[{"n":"exprassign"}],"o":{"n":"expr"}}],[11,"clone","","",197,{"i":[{"n":"self"}],"o":{"n":"exprassignop"}}],[11,"from","","",67,{"i":[{"n":"exprassignop"}],"o":{"n":"expr"}}],[11,"clone","","",198,{"i":[{"n":"self"}],"o":{"n":"exprfield"}}],[11,"from","","",67,{"i":[{"n":"exprfield"}],"o":{"n":"expr"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"exprindex"}}],[11,"from","","",67,{"i":[{"n":"exprindex"}],"o":{"n":"expr"}}],[11,"clone","","",199,{"i":[{"n":"self"}],"o":{"n":"exprrange"}}],[11,"from","","",67,{"i":[{"n":"exprrange"}],"o":{"n":"expr"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"exprpath"}}],[11,"from","","",67,{"i":[{"n":"exprpath"}],"o":{"n":"expr"}}],[11,"clone","","",200,{"i":[{"n":"self"}],"o":{"n":"exprreference"}}],[11,"from","","",67,{"i":[{"n":"exprreference"}],"o":{"n":"expr"}}],[11,"clone","","",201,{"i":[{"n":"self"}],"o":{"n":"exprbreak"}}],[11,"from","","",67,{"i":[{"n":"exprbreak"}],"o":{"n":"expr"}}],[11,"clone","","",202,{"i":[{"n":"self"}],"o":{"n":"exprcontinue"}}],[11,"from","","",67,{"i":[{"n":"exprcontinue"}],"o":{"n":"expr"}}],[11,"clone","","",203,{"i":[{"n":"self"}],"o":{"n":"exprreturn"}}],[11,"from","","",67,{"i":[{"n":"exprreturn"}],"o":{"n":"expr"}}],[11,"clone","","",204,{"i":[{"n":"self"}],"o":{"n":"exprmacro"}}],[11,"from","","",67,{"i":[{"n":"exprmacro"}],"o":{"n":"expr"}}],[11,"clone","","",205,{"i":[{"n":"self"}],"o":{"n":"exprstruct"}}],[11,"from","","",67,{"i":[{"n":"exprstruct"}],"o":{"n":"expr"}}],[11,"clone","","",206,{"i":[{"n":"self"}],"o":{"n":"exprrepeat"}}],[11,"from","","",67,{"i":[{"n":"exprrepeat"}],"o":{"n":"expr"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"exprparen"}}],[11,"from","","",67,{"i":[{"n":"exprparen"}],"o":{"n":"expr"}}],[11,"clone","","",207,{"i":[{"n":"self"}],"o":{"n":"exprgroup"}}],[11,"from","","",67,{"i":[{"n":"exprgroup"}],"o":{"n":"expr"}}],[11,"clone","","",208,{"i":[{"n":"self"}],"o":{"n":"exprtry"}}],[11,"from","","",67,{"i":[{"n":"exprtry"}],"o":{"n":"expr"}}],[11,"clone","","",209,{"i":[{"n":"self"}],"o":{"n":"exprcatch"}}],[11,"from","","",67,{"i":[{"n":"exprcatch"}],"o":{"n":"expr"}}],[11,"clone","","",210,{"i":[{"n":"self"}],"o":{"n":"expryield"}}],[11,"from","","",67,{"i":[{"n":"expryield"}],"o":{"n":"expr"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"exprverbatim"}}],[11,"from","","",67,{"i":[{"n":"exprverbatim"}],"o":{"n":"expr"}}],[11,"to_tokens","","",67,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"member"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"index"}}],[11,"from","","",19,{"i":[{"n":"usize"}],"o":{"n":"index"}}],[11,"parse","","",22,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",22,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",69,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",69,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",23,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",23,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",20,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",20,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",28,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",28,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",71,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",71,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",27,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",27,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",70,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",70,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",21,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",21,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",29,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",29,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",72,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",72,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",22,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",211,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",212,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",213,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",20,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",23,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",28,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",27,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",70,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",21,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",29,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",26,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",25,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",24,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"default","","",22,{"o":{"n":"generics"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"generics"}}],[11,"clone","","",69,{"i":[{"n":"self"}],"o":{"n":"genericparam"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"typeparam"}}],[11,"from","","",69,{"i":[{"n":"typeparam"}],"o":{"n":"genericparam"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"lifetimedef"}}],[11,"from","","",69,{"i":[{"n":"lifetimedef"}],"o":{"n":"genericparam"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"constparam"}}],[11,"from","","",69,{"i":[{"n":"constparam"}],"o":{"n":"genericparam"}}],[11,"to_tokens","","",69,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",22,{"i":[{"n":"self"}],"o":{"n":"typeparams"}}],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",22,{"i":[{"n":"self"}],"o":{"n":"typeparamsmut"}}],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",22,{"i":[{"n":"self"}],"o":{"n":"lifetimes"}}],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",22,{"i":[{"n":"self"}],"o":{"n":"lifetimesmut"}}],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",22,{"i":[{"n":"self"}],"o":{"n":"constparams"}}],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",22,{"i":[{"n":"self"}],"o":{"n":"constparamsmut"}}],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one present already.",22,{"i":[{"n":"self"}],"o":{"n":"whereclause"}}],[11,"clone","","",211,{"i":[{"n":"self"}],"o":{"n":"implgenerics"}}],[11,"clone","","",212,{"i":[{"n":"self"}],"o":{"n":"typegenerics"}}],[11,"clone","","",213,{"i":[{"n":"self"}],"o":{"n":"turbofish"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",22,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",212,{"i":[{"n":"self"}],"o":{"n":"turbofish"}}],[11,"default","","",20,{"o":{"n":"boundlifetimes"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"boundlifetimes"}}],[11,"new","","",23,{"i":[{"n":"lifetime"}],"o":{"n":"self"}}],[11,"from","","",28,{"i":[{"n":"ident"}],"o":{"n":"self"}}],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"typeparambound"}}],[11,"from","","",71,{"i":[{"n":"traitbound"}],"o":{"n":"typeparambound"}}],[11,"from","","",71,{"i":[{"n":"lifetime"}],"o":{"n":"typeparambound"}}],[11,"to_tokens","","",71,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"traitbound"}}],[11,"clone","","",70,{"i":[{"n":"self"}],"o":{"n":"traitboundmodifier"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"whereclause"}}],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"wherepredicate"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"predicatetype"}}],[11,"from","","",72,{"i":[{"n":"predicatetype"}],"o":{"n":"wherepredicate"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"predicatelifetime"}}],[11,"from","","",72,{"i":[{"n":"predicatelifetime"}],"o":{"n":"wherepredicate"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"predicateeq"}}],[11,"from","","",72,{"i":[{"n":"predicateeq"}],"o":{"n":"wherepredicate"}}],[11,"to_tokens","","",72,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",30,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",30,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",30,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"lifetime"}}],[11,"new","","",30,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"self"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",30,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",30,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",30,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"n":"ordering"}}],[11,"hash","","",30,{"i":[{"n":"self"},{"n":"h"}]}],[11,"parse","","",75,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",75,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",214,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",214,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",215,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",215,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",216,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",216,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",217,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",217,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",218,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",218,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",219,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",219,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",31,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",31,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",214,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",215,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",216,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",217,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",218,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",219,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",31,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",32,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",75,{"i":[{"n":"literal"}],"o":{"n":"self"}}],[11,"clone","","",75,{"i":[{"n":"self"}],"o":{"n":"lit"}}],[11,"clone","","",214,{"i":[{"n":"self"}],"o":{"n":"litstr"}}],[11,"from","","",75,{"i":[{"n":"litstr"}],"o":{"n":"lit"}}],[11,"clone","","",215,{"i":[{"n":"self"}],"o":{"n":"litbytestr"}}],[11,"from","","",75,{"i":[{"n":"litbytestr"}],"o":{"n":"lit"}}],[11,"clone","","",216,{"i":[{"n":"self"}],"o":{"n":"litbyte"}}],[11,"from","","",75,{"i":[{"n":"litbyte"}],"o":{"n":"lit"}}],[11,"clone","","",217,{"i":[{"n":"self"}],"o":{"n":"litchar"}}],[11,"from","","",75,{"i":[{"n":"litchar"}],"o":{"n":"lit"}}],[11,"clone","","",218,{"i":[{"n":"self"}],"o":{"n":"litint"}}],[11,"from","","",75,{"i":[{"n":"litint"}],"o":{"n":"lit"}}],[11,"clone","","",219,{"i":[{"n":"self"}],"o":{"n":"litfloat"}}],[11,"from","","",75,{"i":[{"n":"litfloat"}],"o":{"n":"lit"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"litbool"}}],[11,"from","","",75,{"i":[{"n":"litbool"}],"o":{"n":"lit"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"litverbatim"}}],[11,"from","","",75,{"i":[{"n":"litverbatim"}],"o":{"n":"lit"}}],[11,"to_tokens","","",75,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"new","","",214,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",214,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"parse","","Parse a syntax tree node from the content of this string literal.",214,{"i":[{"n":"self"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"span","","",214,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",214,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",215,null],[11,"value","","",215,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"span","","",215,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",215,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",216,{"i":[{"n":"u8"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",216,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"span","","",216,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",216,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",217,{"i":[{"n":"char"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",217,{"i":[{"n":"self"}],"o":{"n":"char"}}],[11,"span","","",217,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",217,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",218,{"i":[{"n":"u64"},{"n":"intsuffix"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",218,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"suffix","","",218,{"i":[{"n":"self"}],"o":{"n":"intsuffix"}}],[11,"span","","",218,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",218,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",219,{"i":[{"n":"f64"},{"n":"floatsuffix"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",219,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"suffix","","",219,{"i":[{"n":"self"}],"o":{"n":"floatsuffix"}}],[11,"span","","",219,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",219,{"i":[{"n":"self"},{"n":"span"}]}],[11,"span","","",32,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",32,{"i":[{"n":"self"},{"n":"span"}]}],[11,"clone","","",76,{"i":[{"n":"self"}],"o":{"n":"strstyle"}}],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"intsuffix"}}],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"floatsuffix"}}],[11,"parse","","",33,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",33,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",33,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"macro"}}],[11,"clone","","",77,{"i":[{"n":"self"}],"o":{"n":"macrodelimiter"}}],[11,"parse","","",37,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",37,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",37,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"deriveinput"}}],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"data"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"datastruct"}}],[11,"from","","",78,{"i":[{"n":"datastruct"}],"o":{"n":"data"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"dataenum"}}],[11,"from","","",78,{"i":[{"n":"dataenum"}],"o":{"n":"data"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"dataunion"}}],[11,"from","","",78,{"i":[{"n":"dataunion"}],"o":{"n":"data"}}],[11,"parse_binop","","",79,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",80,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",80,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",79,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",80,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",79,{"i":[{"n":"self"}],"o":{"n":"binop"}}],[11,"clone","","",80,{"i":[{"n":"self"}],"o":{"n":"unop"}}],[11,"parse","","",83,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",83,{"o":{"g":["str"],"n":"option"}}],[11,"without_plus","","",83,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",51,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",51,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",40,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",40,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",49,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",49,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",50,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",50,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",41,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",41,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",46,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",46,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",44,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",44,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",53,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",53,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",45,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",45,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",48,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",48,{"o":{"g":["str"],"n":"option"}}],[11,"without_plus","","",82,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",82,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",82,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",52,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",52,{"o":{"g":["str"],"n":"option"}}],[11,"without_plus","","",52,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",43,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",43,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",42,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",42,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",47,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",47,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",39,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",39,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",81,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",81,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",38,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",38,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",51,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",40,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",49,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",50,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",41,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",46,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",53,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",48,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",52,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",43,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",42,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",47,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",44,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",45,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",54,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",82,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",39,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",81,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",38,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",83,{"i":[{"n":"self"}],"o":{"n":"type"}}],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"typeslice"}}],[11,"from","","",83,{"i":[{"n":"typeslice"}],"o":{"n":"type"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"typearray"}}],[11,"from","","",83,{"i":[{"n":"typearray"}],"o":{"n":"type"}}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"typeptr"}}],[11,"from","","",83,{"i":[{"n":"typeptr"}],"o":{"n":"type"}}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"typereference"}}],[11,"from","","",83,{"i":[{"n":"typereference"}],"o":{"n":"type"}}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"typebarefn"}}],[11,"from","","",83,{"i":[{"n":"typebarefn"}],"o":{"n":"type"}}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"typenever"}}],[11,"from","","",83,{"i":[{"n":"typenever"}],"o":{"n":"type"}}],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"typetuple"}}],[11,"from","","",83,{"i":[{"n":"typetuple"}],"o":{"n":"type"}}],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"typepath"}}],[11,"from","","",83,{"i":[{"n":"typepath"}],"o":{"n":"type"}}],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"typetraitobject"}}],[11,"from","","",83,{"i":[{"n":"typetraitobject"}],"o":{"n":"type"}}],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"typeimpltrait"}}],[11,"from","","",83,{"i":[{"n":"typeimpltrait"}],"o":{"n":"type"}}],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"typeparen"}}],[11,"from","","",83,{"i":[{"n":"typeparen"}],"o":{"n":"type"}}],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"typegroup"}}],[11,"from","","",83,{"i":[{"n":"typegroup"}],"o":{"n":"type"}}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"typeinfer"}}],[11,"from","","",83,{"i":[{"n":"typeinfer"}],"o":{"n":"type"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"typemacro"}}],[11,"from","","",83,{"i":[{"n":"typemacro"}],"o":{"n":"type"}}],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"typeverbatim"}}],[11,"from","","",83,{"i":[{"n":"typeverbatim"}],"o":{"n":"type"}}],[11,"to_tokens","","",83,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"abi"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"barefnarg"}}],[11,"clone","","",81,{"i":[{"n":"self"}],"o":{"n":"barefnargname"}}],[11,"clone","","",82,{"i":[{"n":"self"}],"o":{"n":"returntype"}}],[11,"parse","","",59,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",59,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",84,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",56,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",56,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",58,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",58,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",60,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",60,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",57,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",57,{"o":{"g":["str"],"n":"option"}}],[11,"parse_mod_style","","",59,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"to_tokens","","",59,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",60,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",85,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",84,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",56,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",57,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",58,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",55,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",59,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"global","","",59,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"pathtokens"}}],[11,"from","","",59,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"clone","","",60,{"i":[{"n":"self"}],"o":{"n":"pathsegment"}}],[11,"from","","",60,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"clone","","",85,{"i":[{"n":"self"}],"o":{"n":"patharguments"}}],[11,"default","","",85,{"o":{"n":"self"}}],[11,"is_empty","","",85,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",84,{"i":[{"n":"self"}],"o":{"n":"genericargument"}}],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"anglebracketedgenericarguments"}}],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"binding"}}],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"parenthesizedgenericarguments"}}],[11,"clone","","",61,{"i":[{"n":"self"}],"o":{"n":"qself"}}],[0,"buffer","","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",null,null],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",null,null],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",null,null],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",220,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenbuffer"}}],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",220,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenbuffer"}}],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",220,{"i":[{"n":"self"}],"o":{"n":"cursor"}}],[11,"clone","","",221,{"i":[{"n":"self"}],"o":{"n":"cursor"}}],[11,"eq","","",221,{"i":[{"n":"self"},{"n":"cursor"}],"o":{"n":"bool"}}],[11,"ne","","",221,{"i":[{"n":"self"},{"n":"cursor"}],"o":{"n":"bool"}}],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",221,{"o":{"n":"self"}}],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",221,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",221,{"i":[{"n":"self"},{"n":"delimiter"}],"o":{"n":"option"}}],[11,"ident","","If the cursor is pointing at a `Ident`, returns it along with a cursor pointing at the next `TokenTree`.",221,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"punct","","If the cursor is pointing at an `Punct`, returns it along with a cursor pointing at the next `TokenTree`.",221,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",221,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",221,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",221,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",221,{"i":[{"n":"self"}],"o":{"n":"span"}}],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by punctuation.",null,null],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",null,null],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",null,null],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",null,null],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",null,null],[3,"IntoIter","","An iterator over owned values of type `T`.",null,null],[3,"Iter","","An iterator over borrowed values of type `&T`.",null,null],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",null,null],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",null,null],[13,"Punctuated","","",222,null],[13,"End","","",222,null],[11,"to_tokens","","",223,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",222,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",223,{"i":[{"n":"self"}],"o":{"n":"punctuated"}}],[11,"new","","Creates an empty punctuated sequence.",223,{"o":{"n":"punctuated"}}],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",223,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",223,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"first","","Borrows the first punctuated pair in this sequence.",223,{"i":[{"n":"self"}],"o":{"g":["pair"],"n":"option"}}],[11,"last","","Borrows the last punctuated pair in this sequence.",223,{"i":[{"n":"self"}],"o":{"g":["pair"],"n":"option"}}],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",223,{"i":[{"n":"self"}],"o":{"g":["pair"],"n":"option"}}],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",223,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",223,{"i":[{"n":"self"}],"o":{"n":"itermut"}}],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",223,{"i":[{"n":"self"}],"o":{"n":"pairs"}}],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",223,{"i":[{"n":"self"}],"o":{"n":"pairsmut"}}],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",223,{"i":[{"n":"self"}],"o":{"n":"intopairs"}}],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",223,{"i":[{"n":"self"},{"n":"t"}]}],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",223,{"i":[{"n":"self"},{"n":"p"}]}],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",223,{"i":[{"n":"self"}],"o":{"g":["pair"],"n":"option"}}],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",223,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",223,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",223,{"i":[{"n":"self"},{"n":"t"}]}],[11,"insert","","Inserts an element at position `index`.",223,{"i":[{"n":"self"},{"n":"usize"},{"n":"t"}]}],[11,"from_iter","","",223,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"extend","","",223,{"i":[{"n":"self"},{"n":"i"}]}],[11,"from_iter","","",223,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"extend","","",223,{"i":[{"n":"self"},{"n":"i"}]}],[11,"into_iter","","",223,null],[11,"default","","",223,{"o":{"n":"self"}}],[11,"next","","",224,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",224,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",225,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",225,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",226,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",226,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",227,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",227,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",228,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",228,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",229,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",229,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",222,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"value","","Borrows the syntax tree node from this punctuated pair.",222,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",222,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",222,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",222,{"i":[{"n":"t"},{"n":"option"}],"o":{"n":"self"}}],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",222,null],[11,"index","","",223,null],[11,"index_mut","","",223,null],[11,"parse_separated","","Parse zero or more syntax tree nodes with punctuation in between and no trailing punctuation.",223,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_separated_nonempty","","Parse one or more syntax tree nodes with punctuation in bewteen and no trailing punctuation. allowing trailing punctuation.",223,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_terminated","","Parse zero or more syntax tree nodes with punctuation in between and optional trailing punctuation.",223,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_terminated_nonempty","","Parse one or more syntax tree nodes with punctuation in between and optional trailing punctuation.",223,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_separated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",223,null],[11,"parse_separated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",223,null],[11,"parse_terminated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",223,null],[11,"parse_terminated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",223,null],[0,"synom","syn","Parsing interface for parsing a token stream into a syntax tree node.",null,null],[3,"ParseError","syn::synom","Error returned when a `Synom` parser cannot parse the input tokens.",null,null],[0,"ext","","Extension traits that are made available within the `call!` parser.",null,null],[8,"IdentExt","syn::synom::ext","Additional parsing methods for `Ident`.",null,null],[10,"parse_any","","Parses any identifier including keywords.",230,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_any","syn","",179,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[6,"PResult","syn::synom","The result of a `Synom` parser.",null,null],[8,"Synom","","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",null,null],[10,"parse","","",231,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","A short name of the type being parsed.",231,{"o":{"g":["str"],"n":"option"}}],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",null,null],[16,"Output","","",232,null],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",232,{"i":[{"n":"self"},{"n":"tokenstream"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",232,{"i":[{"n":"self"},{"n":"tokenstream"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",232,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse","syn","",179,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",179,{"o":{"g":["str"],"n":"option"}}],[0,"spanned","","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",233,{"i":[{"n":"self"}],"o":{"n":"span"}}],[0,"visit","syn","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[5,"visit_abi","syn::visit","",null,{"i":[{"n":"v"},{"n":"abi"}]}],[5,"visit_angle_bracketed_generic_arguments","","",null,{"i":[{"n":"v"},{"n":"anglebracketedgenericarguments"}]}],[5,"visit_attr_style","","",null,{"i":[{"n":"v"},{"n":"attrstyle"}]}],[5,"visit_attribute","","",null,{"i":[{"n":"v"},{"n":"attribute"}]}],[5,"visit_bare_fn_arg","","",null,{"i":[{"n":"v"},{"n":"barefnarg"}]}],[5,"visit_bare_fn_arg_name","","",null,{"i":[{"n":"v"},{"n":"barefnargname"}]}],[5,"visit_bin_op","","",null,{"i":[{"n":"v"},{"n":"binop"}]}],[5,"visit_binding","","",null,{"i":[{"n":"v"},{"n":"binding"}]}],[5,"visit_bound_lifetimes","","",null,{"i":[{"n":"v"},{"n":"boundlifetimes"}]}],[5,"visit_const_param","","",null,{"i":[{"n":"v"},{"n":"constparam"}]}],[5,"visit_data","","",null,{"i":[{"n":"v"},{"n":"data"}]}],[5,"visit_data_enum","","",null,{"i":[{"n":"v"},{"n":"dataenum"}]}],[5,"visit_data_struct","","",null,{"i":[{"n":"v"},{"n":"datastruct"}]}],[5,"visit_data_union","","",null,{"i":[{"n":"v"},{"n":"dataunion"}]}],[5,"visit_derive_input","","",null,{"i":[{"n":"v"},{"n":"deriveinput"}]}],[5,"visit_expr","","",null,{"i":[{"n":"v"},{"n":"expr"}]}],[5,"visit_expr_binary","","",null,{"i":[{"n":"v"},{"n":"exprbinary"}]}],[5,"visit_expr_call","","",null,{"i":[{"n":"v"},{"n":"exprcall"}]}],[5,"visit_expr_cast","","",null,{"i":[{"n":"v"},{"n":"exprcast"}]}],[5,"visit_expr_index","","",null,{"i":[{"n":"v"},{"n":"exprindex"}]}],[5,"visit_expr_lit","","",null,{"i":[{"n":"v"},{"n":"exprlit"}]}],[5,"visit_expr_paren","","",null,{"i":[{"n":"v"},{"n":"exprparen"}]}],[5,"visit_expr_path","","",null,{"i":[{"n":"v"},{"n":"exprpath"}]}],[5,"visit_expr_unary","","",null,{"i":[{"n":"v"},{"n":"exprunary"}]}],[5,"visit_expr_verbatim","","",null,{"i":[{"n":"v"},{"n":"exprverbatim"}]}],[5,"visit_field","","",null,{"i":[{"n":"v"},{"n":"field"}]}],[5,"visit_fields","","",null,{"i":[{"n":"v"},{"n":"fields"}]}],[5,"visit_fields_named","","",null,{"i":[{"n":"v"},{"n":"fieldsnamed"}]}],[5,"visit_fields_unnamed","","",null,{"i":[{"n":"v"},{"n":"fieldsunnamed"}]}],[5,"visit_generic_argument","","",null,{"i":[{"n":"v"},{"n":"genericargument"}]}],[5,"visit_generic_param","","",null,{"i":[{"n":"v"},{"n":"genericparam"}]}],[5,"visit_generics","","",null,{"i":[{"n":"v"},{"n":"generics"}]}],[5,"visit_ident","","",null,{"i":[{"n":"v"},{"n":"ident"}]}],[5,"visit_index","","",null,{"i":[{"n":"v"},{"n":"index"}]}],[5,"visit_lifetime","","",null,{"i":[{"n":"v"},{"n":"lifetime"}]}],[5,"visit_lifetime_def","","",null,{"i":[{"n":"v"},{"n":"lifetimedef"}]}],[5,"visit_lit","","",null,{"i":[{"n":"v"},{"n":"lit"}]}],[5,"visit_lit_bool","","",null,{"i":[{"n":"v"},{"n":"litbool"}]}],[5,"visit_lit_byte","","",null,{"i":[{"n":"v"},{"n":"litbyte"}]}],[5,"visit_lit_byte_str","","",null,{"i":[{"n":"v"},{"n":"litbytestr"}]}],[5,"visit_lit_char","","",null,{"i":[{"n":"v"},{"n":"litchar"}]}],[5,"visit_lit_float","","",null,{"i":[{"n":"v"},{"n":"litfloat"}]}],[5,"visit_lit_int","","",null,{"i":[{"n":"v"},{"n":"litint"}]}],[5,"visit_lit_str","","",null,{"i":[{"n":"v"},{"n":"litstr"}]}],[5,"visit_lit_verbatim","","",null,{"i":[{"n":"v"},{"n":"litverbatim"}]}],[5,"visit_macro","","",null,{"i":[{"n":"v"},{"n":"macro"}]}],[5,"visit_macro_delimiter","","",null,{"i":[{"n":"v"},{"n":"macrodelimiter"}]}],[5,"visit_member","","",null,{"i":[{"n":"v"},{"n":"member"}]}],[5,"visit_meta","","",null,{"i":[{"n":"v"},{"n":"meta"}]}],[5,"visit_meta_list","","",null,{"i":[{"n":"v"},{"n":"metalist"}]}],[5,"visit_meta_name_value","","",null,{"i":[{"n":"v"},{"n":"metanamevalue"}]}],[5,"visit_nested_meta","","",null,{"i":[{"n":"v"},{"n":"nestedmeta"}]}],[5,"visit_parenthesized_generic_arguments","","",null,{"i":[{"n":"v"},{"n":"parenthesizedgenericarguments"}]}],[5,"visit_path","","",null,{"i":[{"n":"v"},{"n":"path"}]}],[5,"visit_path_arguments","","",null,{"i":[{"n":"v"},{"n":"patharguments"}]}],[5,"visit_path_segment","","",null,{"i":[{"n":"v"},{"n":"pathsegment"}]}],[5,"visit_predicate_eq","","",null,{"i":[{"n":"v"},{"n":"predicateeq"}]}],[5,"visit_predicate_lifetime","","",null,{"i":[{"n":"v"},{"n":"predicatelifetime"}]}],[5,"visit_predicate_type","","",null,{"i":[{"n":"v"},{"n":"predicatetype"}]}],[5,"visit_qself","","",null,{"i":[{"n":"v"},{"n":"qself"}]}],[5,"visit_return_type","","",null,{"i":[{"n":"v"},{"n":"returntype"}]}],[5,"visit_span","","",null,{"i":[{"n":"v"},{"n":"span"}]}],[5,"visit_trait_bound","","",null,{"i":[{"n":"v"},{"n":"traitbound"}]}],[5,"visit_trait_bound_modifier","","",null,{"i":[{"n":"v"},{"n":"traitboundmodifier"}]}],[5,"visit_type","","",null,{"i":[{"n":"v"},{"n":"type"}]}],[5,"visit_type_array","","",null,{"i":[{"n":"v"},{"n":"typearray"}]}],[5,"visit_type_bare_fn","","",null,{"i":[{"n":"v"},{"n":"typebarefn"}]}],[5,"visit_type_group","","",null,{"i":[{"n":"v"},{"n":"typegroup"}]}],[5,"visit_type_impl_trait","","",null,{"i":[{"n":"v"},{"n":"typeimpltrait"}]}],[5,"visit_type_infer","","",null,{"i":[{"n":"v"},{"n":"typeinfer"}]}],[5,"visit_type_macro","","",null,{"i":[{"n":"v"},{"n":"typemacro"}]}],[5,"visit_type_never","","",null,{"i":[{"n":"v"},{"n":"typenever"}]}],[5,"visit_type_param","","",null,{"i":[{"n":"v"},{"n":"typeparam"}]}],[5,"visit_type_param_bound","","",null,{"i":[{"n":"v"},{"n":"typeparambound"}]}],[5,"visit_type_paren","","",null,{"i":[{"n":"v"},{"n":"typeparen"}]}],[5,"visit_type_path","","",null,{"i":[{"n":"v"},{"n":"typepath"}]}],[5,"visit_type_ptr","","",null,{"i":[{"n":"v"},{"n":"typeptr"}]}],[5,"visit_type_reference","","",null,{"i":[{"n":"v"},{"n":"typereference"}]}],[5,"visit_type_slice","","",null,{"i":[{"n":"v"},{"n":"typeslice"}]}],[5,"visit_type_trait_object","","",null,{"i":[{"n":"v"},{"n":"typetraitobject"}]}],[5,"visit_type_tuple","","",null,{"i":[{"n":"v"},{"n":"typetuple"}]}],[5,"visit_type_verbatim","","",null,{"i":[{"n":"v"},{"n":"typeverbatim"}]}],[5,"visit_un_op","","",null,{"i":[{"n":"v"},{"n":"unop"}]}],[5,"visit_variant","","",null,{"i":[{"n":"v"},{"n":"variant"}]}],[5,"visit_vis_crate","","",null,{"i":[{"n":"v"},{"n":"viscrate"}]}],[5,"visit_vis_public","","",null,{"i":[{"n":"v"},{"n":"vispublic"}]}],[5,"visit_vis_restricted","","",null,{"i":[{"n":"v"},{"n":"visrestricted"}]}],[5,"visit_visibility","","",null,{"i":[{"n":"v"},{"n":"visibility"}]}],[5,"visit_where_clause","","",null,{"i":[{"n":"v"},{"n":"whereclause"}]}],[5,"visit_where_predicate","","",null,{"i":[{"n":"v"},{"n":"wherepredicate"}]}],[8,"Visit","","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[11,"visit_abi","","",234,{"i":[{"n":"self"},{"n":"abi"}]}],[11,"visit_angle_bracketed_generic_arguments","","",234,{"i":[{"n":"self"},{"n":"anglebracketedgenericarguments"}]}],[11,"visit_attr_style","","",234,{"i":[{"n":"self"},{"n":"attrstyle"}]}],[11,"visit_attribute","","",234,{"i":[{"n":"self"},{"n":"attribute"}]}],[11,"visit_bare_fn_arg","","",234,{"i":[{"n":"self"},{"n":"barefnarg"}]}],[11,"visit_bare_fn_arg_name","","",234,{"i":[{"n":"self"},{"n":"barefnargname"}]}],[11,"visit_bin_op","","",234,{"i":[{"n":"self"},{"n":"binop"}]}],[11,"visit_binding","","",234,{"i":[{"n":"self"},{"n":"binding"}]}],[11,"visit_bound_lifetimes","","",234,{"i":[{"n":"self"},{"n":"boundlifetimes"}]}],[11,"visit_const_param","","",234,{"i":[{"n":"self"},{"n":"constparam"}]}],[11,"visit_data","","",234,{"i":[{"n":"self"},{"n":"data"}]}],[11,"visit_data_enum","","",234,{"i":[{"n":"self"},{"n":"dataenum"}]}],[11,"visit_data_struct","","",234,{"i":[{"n":"self"},{"n":"datastruct"}]}],[11,"visit_data_union","","",234,{"i":[{"n":"self"},{"n":"dataunion"}]}],[11,"visit_derive_input","","",234,{"i":[{"n":"self"},{"n":"deriveinput"}]}],[11,"visit_expr","","",234,{"i":[{"n":"self"},{"n":"expr"}]}],[11,"visit_expr_binary","","",234,{"i":[{"n":"self"},{"n":"exprbinary"}]}],[11,"visit_expr_call","","",234,{"i":[{"n":"self"},{"n":"exprcall"}]}],[11,"visit_expr_cast","","",234,{"i":[{"n":"self"},{"n":"exprcast"}]}],[11,"visit_expr_index","","",234,{"i":[{"n":"self"},{"n":"exprindex"}]}],[11,"visit_expr_lit","","",234,{"i":[{"n":"self"},{"n":"exprlit"}]}],[11,"visit_expr_paren","","",234,{"i":[{"n":"self"},{"n":"exprparen"}]}],[11,"visit_expr_path","","",234,{"i":[{"n":"self"},{"n":"exprpath"}]}],[11,"visit_expr_unary","","",234,{"i":[{"n":"self"},{"n":"exprunary"}]}],[11,"visit_expr_verbatim","","",234,{"i":[{"n":"self"},{"n":"exprverbatim"}]}],[11,"visit_field","","",234,{"i":[{"n":"self"},{"n":"field"}]}],[11,"visit_fields","","",234,{"i":[{"n":"self"},{"n":"fields"}]}],[11,"visit_fields_named","","",234,{"i":[{"n":"self"},{"n":"fieldsnamed"}]}],[11,"visit_fields_unnamed","","",234,{"i":[{"n":"self"},{"n":"fieldsunnamed"}]}],[11,"visit_generic_argument","","",234,{"i":[{"n":"self"},{"n":"genericargument"}]}],[11,"visit_generic_param","","",234,{"i":[{"n":"self"},{"n":"genericparam"}]}],[11,"visit_generics","","",234,{"i":[{"n":"self"},{"n":"generics"}]}],[11,"visit_ident","","",234,{"i":[{"n":"self"},{"n":"ident"}]}],[11,"visit_index","","",234,{"i":[{"n":"self"},{"n":"index"}]}],[11,"visit_lifetime","","",234,{"i":[{"n":"self"},{"n":"lifetime"}]}],[11,"visit_lifetime_def","","",234,{"i":[{"n":"self"},{"n":"lifetimedef"}]}],[11,"visit_lit","","",234,{"i":[{"n":"self"},{"n":"lit"}]}],[11,"visit_lit_bool","","",234,{"i":[{"n":"self"},{"n":"litbool"}]}],[11,"visit_lit_byte","","",234,{"i":[{"n":"self"},{"n":"litbyte"}]}],[11,"visit_lit_byte_str","","",234,{"i":[{"n":"self"},{"n":"litbytestr"}]}],[11,"visit_lit_char","","",234,{"i":[{"n":"self"},{"n":"litchar"}]}],[11,"visit_lit_float","","",234,{"i":[{"n":"self"},{"n":"litfloat"}]}],[11,"visit_lit_int","","",234,{"i":[{"n":"self"},{"n":"litint"}]}],[11,"visit_lit_str","","",234,{"i":[{"n":"self"},{"n":"litstr"}]}],[11,"visit_lit_verbatim","","",234,{"i":[{"n":"self"},{"n":"litverbatim"}]}],[11,"visit_macro","","",234,{"i":[{"n":"self"},{"n":"macro"}]}],[11,"visit_macro_delimiter","","",234,{"i":[{"n":"self"},{"n":"macrodelimiter"}]}],[11,"visit_member","","",234,{"i":[{"n":"self"},{"n":"member"}]}],[11,"visit_meta","","",234,{"i":[{"n":"self"},{"n":"meta"}]}],[11,"visit_meta_list","","",234,{"i":[{"n":"self"},{"n":"metalist"}]}],[11,"visit_meta_name_value","","",234,{"i":[{"n":"self"},{"n":"metanamevalue"}]}],[11,"visit_nested_meta","","",234,{"i":[{"n":"self"},{"n":"nestedmeta"}]}],[11,"visit_parenthesized_generic_arguments","","",234,{"i":[{"n":"self"},{"n":"parenthesizedgenericarguments"}]}],[11,"visit_path","","",234,{"i":[{"n":"self"},{"n":"path"}]}],[11,"visit_path_arguments","","",234,{"i":[{"n":"self"},{"n":"patharguments"}]}],[11,"visit_path_segment","","",234,{"i":[{"n":"self"},{"n":"pathsegment"}]}],[11,"visit_predicate_eq","","",234,{"i":[{"n":"self"},{"n":"predicateeq"}]}],[11,"visit_predicate_lifetime","","",234,{"i":[{"n":"self"},{"n":"predicatelifetime"}]}],[11,"visit_predicate_type","","",234,{"i":[{"n":"self"},{"n":"predicatetype"}]}],[11,"visit_qself","","",234,{"i":[{"n":"self"},{"n":"qself"}]}],[11,"visit_return_type","","",234,{"i":[{"n":"self"},{"n":"returntype"}]}],[11,"visit_span","","",234,{"i":[{"n":"self"},{"n":"span"}]}],[11,"visit_trait_bound","","",234,{"i":[{"n":"self"},{"n":"traitbound"}]}],[11,"visit_trait_bound_modifier","","",234,{"i":[{"n":"self"},{"n":"traitboundmodifier"}]}],[11,"visit_type","","",234,{"i":[{"n":"self"},{"n":"type"}]}],[11,"visit_type_array","","",234,{"i":[{"n":"self"},{"n":"typearray"}]}],[11,"visit_type_bare_fn","","",234,{"i":[{"n":"self"},{"n":"typebarefn"}]}],[11,"visit_type_group","","",234,{"i":[{"n":"self"},{"n":"typegroup"}]}],[11,"visit_type_impl_trait","","",234,{"i":[{"n":"self"},{"n":"typeimpltrait"}]}],[11,"visit_type_infer","","",234,{"i":[{"n":"self"},{"n":"typeinfer"}]}],[11,"visit_type_macro","","",234,{"i":[{"n":"self"},{"n":"typemacro"}]}],[11,"visit_type_never","","",234,{"i":[{"n":"self"},{"n":"typenever"}]}],[11,"visit_type_param","","",234,{"i":[{"n":"self"},{"n":"typeparam"}]}],[11,"visit_type_param_bound","","",234,{"i":[{"n":"self"},{"n":"typeparambound"}]}],[11,"visit_type_paren","","",234,{"i":[{"n":"self"},{"n":"typeparen"}]}],[11,"visit_type_path","","",234,{"i":[{"n":"self"},{"n":"typepath"}]}],[11,"visit_type_ptr","","",234,{"i":[{"n":"self"},{"n":"typeptr"}]}],[11,"visit_type_reference","","",234,{"i":[{"n":"self"},{"n":"typereference"}]}],[11,"visit_type_slice","","",234,{"i":[{"n":"self"},{"n":"typeslice"}]}],[11,"visit_type_trait_object","","",234,{"i":[{"n":"self"},{"n":"typetraitobject"}]}],[11,"visit_type_tuple","","",234,{"i":[{"n":"self"},{"n":"typetuple"}]}],[11,"visit_type_verbatim","","",234,{"i":[{"n":"self"},{"n":"typeverbatim"}]}],[11,"visit_un_op","","",234,{"i":[{"n":"self"},{"n":"unop"}]}],[11,"visit_variant","","",234,{"i":[{"n":"self"},{"n":"variant"}]}],[11,"visit_vis_crate","","",234,{"i":[{"n":"self"},{"n":"viscrate"}]}],[11,"visit_vis_public","","",234,{"i":[{"n":"self"},{"n":"vispublic"}]}],[11,"visit_vis_restricted","","",234,{"i":[{"n":"self"},{"n":"visrestricted"}]}],[11,"visit_visibility","","",234,{"i":[{"n":"self"},{"n":"visibility"}]}],[11,"visit_where_clause","","",234,{"i":[{"n":"self"},{"n":"whereclause"}]}],[11,"visit_where_predicate","","",234,{"i":[{"n":"self"},{"n":"wherepredicate"}]}],[11,"fmt","syn::synom","",235,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",235,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",235,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[14,"named","syn","Define a parser function with the signature expected by syn parser combinators.",null,null],[14,"call","","Invoke the given parser function with zero or more arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Invert the result of a parser by parsing successfully if the given parser fails to parse and vice versa.",null,null],[14,"cond","","Execute a parser only if a condition is met, otherwise return None.",null,null],[14,"cond_reduce","","Execute a parser only if a condition is met, otherwise fail to parse.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything.",null,null],[14,"reject","","Unconditionally fail to parse anything.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, optionally naming each intermediate result, followed by a step to combine the intermediate results.",null,null],[14,"input_end","","Parse nothing and succeed only if the end of the enclosing block has been reached.",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"syn","","Parse any type that implements the `Synom` trait.",null,null],[14,"custom_keyword","","Parse the given word as a keyword.",null,null],[14,"parens","","Parse inside of `(` `)` parentheses.",null,null],[14,"brackets","","Parse inside of `[` `]` square brackets.",null,null],[14,"braces","","Parse inside of `{` `}` curly braces.",null,null],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",null,null],[14,"punct","","Parse a single Rust punctuation token.",null,null],[14,"keyword","","Parse a single Rust keyword token.",null,null],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",null,null],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",179,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"ident"}}],[11,"span","","Returns the span of this `Ident`.",179,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",179,null],[11,"partial_cmp","","",179,{"i":[{"n":"self"},{"n":"ident"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",179,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"cmp","","",179,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"ordering"}}],[11,"hash","","",179,null],[11,"eq","","",179,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"bool"}}],[11,"eq","","",179,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"fmt","","",179,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",179,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"to_tokens","","",179,null],[11,"visit_abi","syn::visit","",234,{"i":[{"n":"self"},{"n":"abi"}]}],[11,"visit_angle_bracketed_generic_arguments","","",234,{"i":[{"n":"self"},{"n":"anglebracketedgenericarguments"}]}],[11,"visit_attr_style","","",234,{"i":[{"n":"self"},{"n":"attrstyle"}]}],[11,"visit_attribute","","",234,{"i":[{"n":"self"},{"n":"attribute"}]}],[11,"visit_bare_fn_arg","","",234,{"i":[{"n":"self"},{"n":"barefnarg"}]}],[11,"visit_bare_fn_arg_name","","",234,{"i":[{"n":"self"},{"n":"barefnargname"}]}],[11,"visit_bin_op","","",234,{"i":[{"n":"self"},{"n":"binop"}]}],[11,"visit_binding","","",234,{"i":[{"n":"self"},{"n":"binding"}]}],[11,"visit_bound_lifetimes","","",234,{"i":[{"n":"self"},{"n":"boundlifetimes"}]}],[11,"visit_const_param","","",234,{"i":[{"n":"self"},{"n":"constparam"}]}],[11,"visit_data","","",234,{"i":[{"n":"self"},{"n":"data"}]}],[11,"visit_data_enum","","",234,{"i":[{"n":"self"},{"n":"dataenum"}]}],[11,"visit_data_struct","","",234,{"i":[{"n":"self"},{"n":"datastruct"}]}],[11,"visit_data_union","","",234,{"i":[{"n":"self"},{"n":"dataunion"}]}],[11,"visit_derive_input","","",234,{"i":[{"n":"self"},{"n":"deriveinput"}]}],[11,"visit_expr","","",234,{"i":[{"n":"self"},{"n":"expr"}]}],[11,"visit_expr_binary","","",234,{"i":[{"n":"self"},{"n":"exprbinary"}]}],[11,"visit_expr_call","","",234,{"i":[{"n":"self"},{"n":"exprcall"}]}],[11,"visit_expr_cast","","",234,{"i":[{"n":"self"},{"n":"exprcast"}]}],[11,"visit_expr_index","","",234,{"i":[{"n":"self"},{"n":"exprindex"}]}],[11,"visit_expr_lit","","",234,{"i":[{"n":"self"},{"n":"exprlit"}]}],[11,"visit_expr_paren","","",234,{"i":[{"n":"self"},{"n":"exprparen"}]}],[11,"visit_expr_path","","",234,{"i":[{"n":"self"},{"n":"exprpath"}]}],[11,"visit_expr_unary","","",234,{"i":[{"n":"self"},{"n":"exprunary"}]}],[11,"visit_expr_verbatim","","",234,{"i":[{"n":"self"},{"n":"exprverbatim"}]}],[11,"visit_field","","",234,{"i":[{"n":"self"},{"n":"field"}]}],[11,"visit_fields","","",234,{"i":[{"n":"self"},{"n":"fields"}]}],[11,"visit_fields_named","","",234,{"i":[{"n":"self"},{"n":"fieldsnamed"}]}],[11,"visit_fields_unnamed","","",234,{"i":[{"n":"self"},{"n":"fieldsunnamed"}]}],[11,"visit_generic_argument","","",234,{"i":[{"n":"self"},{"n":"genericargument"}]}],[11,"visit_generic_param","","",234,{"i":[{"n":"self"},{"n":"genericparam"}]}],[11,"visit_generics","","",234,{"i":[{"n":"self"},{"n":"generics"}]}],[11,"visit_ident","","",234,{"i":[{"n":"self"},{"n":"ident"}]}],[11,"visit_index","","",234,{"i":[{"n":"self"},{"n":"index"}]}],[11,"visit_lifetime","","",234,{"i":[{"n":"self"},{"n":"lifetime"}]}],[11,"visit_lifetime_def","","",234,{"i":[{"n":"self"},{"n":"lifetimedef"}]}],[11,"visit_lit","","",234,{"i":[{"n":"self"},{"n":"lit"}]}],[11,"visit_lit_bool","","",234,{"i":[{"n":"self"},{"n":"litbool"}]}],[11,"visit_lit_byte","","",234,{"i":[{"n":"self"},{"n":"litbyte"}]}],[11,"visit_lit_byte_str","","",234,{"i":[{"n":"self"},{"n":"litbytestr"}]}],[11,"visit_lit_char","","",234,{"i":[{"n":"self"},{"n":"litchar"}]}],[11,"visit_lit_float","","",234,{"i":[{"n":"self"},{"n":"litfloat"}]}],[11,"visit_lit_int","","",234,{"i":[{"n":"self"},{"n":"litint"}]}],[11,"visit_lit_str","","",234,{"i":[{"n":"self"},{"n":"litstr"}]}],[11,"visit_lit_verbatim","","",234,{"i":[{"n":"self"},{"n":"litverbatim"}]}],[11,"visit_macro","","",234,{"i":[{"n":"self"},{"n":"macro"}]}],[11,"visit_macro_delimiter","","",234,{"i":[{"n":"self"},{"n":"macrodelimiter"}]}],[11,"visit_member","","",234,{"i":[{"n":"self"},{"n":"member"}]}],[11,"visit_meta","","",234,{"i":[{"n":"self"},{"n":"meta"}]}],[11,"visit_meta_list","","",234,{"i":[{"n":"self"},{"n":"metalist"}]}],[11,"visit_meta_name_value","","",234,{"i":[{"n":"self"},{"n":"metanamevalue"}]}],[11,"visit_nested_meta","","",234,{"i":[{"n":"self"},{"n":"nestedmeta"}]}],[11,"visit_parenthesized_generic_arguments","","",234,{"i":[{"n":"self"},{"n":"parenthesizedgenericarguments"}]}],[11,"visit_path","","",234,{"i":[{"n":"self"},{"n":"path"}]}],[11,"visit_path_arguments","","",234,{"i":[{"n":"self"},{"n":"patharguments"}]}],[11,"visit_path_segment","","",234,{"i":[{"n":"self"},{"n":"pathsegment"}]}],[11,"visit_predicate_eq","","",234,{"i":[{"n":"self"},{"n":"predicateeq"}]}],[11,"visit_predicate_lifetime","","",234,{"i":[{"n":"self"},{"n":"predicatelifetime"}]}],[11,"visit_predicate_type","","",234,{"i":[{"n":"self"},{"n":"predicatetype"}]}],[11,"visit_qself","","",234,{"i":[{"n":"self"},{"n":"qself"}]}],[11,"visit_return_type","","",234,{"i":[{"n":"self"},{"n":"returntype"}]}],[11,"visit_span","","",234,{"i":[{"n":"self"},{"n":"span"}]}],[11,"visit_trait_bound","","",234,{"i":[{"n":"self"},{"n":"traitbound"}]}],[11,"visit_trait_bound_modifier","","",234,{"i":[{"n":"self"},{"n":"traitboundmodifier"}]}],[11,"visit_type","","",234,{"i":[{"n":"self"},{"n":"type"}]}],[11,"visit_type_array","","",234,{"i":[{"n":"self"},{"n":"typearray"}]}],[11,"visit_type_bare_fn","","",234,{"i":[{"n":"self"},{"n":"typebarefn"}]}],[11,"visit_type_group","","",234,{"i":[{"n":"self"},{"n":"typegroup"}]}],[11,"visit_type_impl_trait","","",234,{"i":[{"n":"self"},{"n":"typeimpltrait"}]}],[11,"visit_type_infer","","",234,{"i":[{"n":"self"},{"n":"typeinfer"}]}],[11,"visit_type_macro","","",234,{"i":[{"n":"self"},{"n":"typemacro"}]}],[11,"visit_type_never","","",234,{"i":[{"n":"self"},{"n":"typenever"}]}],[11,"visit_type_param","","",234,{"i":[{"n":"self"},{"n":"typeparam"}]}],[11,"visit_type_param_bound","","",234,{"i":[{"n":"self"},{"n":"typeparambound"}]}],[11,"visit_type_paren","","",234,{"i":[{"n":"self"},{"n":"typeparen"}]}],[11,"visit_type_path","","",234,{"i":[{"n":"self"},{"n":"typepath"}]}],[11,"visit_type_ptr","","",234,{"i":[{"n":"self"},{"n":"typeptr"}]}],[11,"visit_type_reference","","",234,{"i":[{"n":"self"},{"n":"typereference"}]}],[11,"visit_type_slice","","",234,{"i":[{"n":"self"},{"n":"typeslice"}]}],[11,"visit_type_trait_object","","",234,{"i":[{"n":"self"},{"n":"typetraitobject"}]}],[11,"visit_type_tuple","","",234,{"i":[{"n":"self"},{"n":"typetuple"}]}],[11,"visit_type_verbatim","","",234,{"i":[{"n":"self"},{"n":"typeverbatim"}]}],[11,"visit_un_op","","",234,{"i":[{"n":"self"},{"n":"unop"}]}],[11,"visit_variant","","",234,{"i":[{"n":"self"},{"n":"variant"}]}],[11,"visit_vis_crate","","",234,{"i":[{"n":"self"},{"n":"viscrate"}]}],[11,"visit_vis_public","","",234,{"i":[{"n":"self"},{"n":"vispublic"}]}],[11,"visit_vis_restricted","","",234,{"i":[{"n":"self"},{"n":"visrestricted"}]}],[11,"visit_visibility","","",234,{"i":[{"n":"self"},{"n":"visibility"}]}],[11,"visit_where_clause","","",234,{"i":[{"n":"self"},{"n":"whereclause"}]}],[11,"visit_where_predicate","","",234,{"i":[{"n":"self"},{"n":"wherepredicate"}]}]],"paths":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprBinary"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[3,"ExprVerbatim"],[3,"Index"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"Lifetime"],[3,"LitBool"],[3,"LitVerbatim"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"PathTokens"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Underscore"],[3,"Apostrophe"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"As"],[3,"Auto"],[3,"Box"],[3,"Break"],[3,"CapSelf"],[3,"Catch"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Self_"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Type"],[3,"Union"],[3,"Unsafe"],[3,"Use"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Ident"],[3,"ExprBox"],[3,"ExprInPlace"],[3,"ExprArray"],[3,"ExprMethodCall"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprIf"],[3,"ExprIfLet"],[3,"ExprWhile"],[3,"ExprWhileLet"],[3,"ExprForLoop"],[3,"ExprLoop"],[3,"ExprMatch"],[3,"ExprClosure"],[3,"ExprUnsafe"],[3,"ExprBlock"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprField"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprBreak"],[3,"ExprContinue"],[3,"ExprReturn"],[3,"ExprMacro"],[3,"ExprStruct"],[3,"ExprRepeat"],[3,"ExprGroup"],[3,"ExprTry"],[3,"ExprCatch"],[3,"ExprYield"],[3,"ImplGenerics"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Pair"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"IdentExt"],[8,"Synom"],[8,"Parser"],[8,"Spanned"],[8,"Visit"],[3,"ParseError"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
searchIndex["vecmath"] = {"doc":"A simple and generic library for vector math.","items":[[5,"col_mat3x2_mul_col","vecmath","Computes column vector in column matrix product.",null,{"i":[{"n":"matrix3x2"},{"n":"matrix3x2"},{"n":"usize"}],"o":{"n":"vector2"}}],[5,"col_mat3_mul_col","","Computes column vector in column matrix product.",null,{"i":[{"n":"matrix3"},{"n":"matrix3"},{"n":"usize"}],"o":{"n":"vector3"}}],[5,"col_mat4x3_mul_col","","Computes column vector in column matrix product.",null,{"i":[{"n":"matrix4x3"},{"n":"matrix4x3"},{"n":"usize"}],"o":{"n":"vector3"}}],[5,"col_mat4_mul_col","","Computes column vector in column matrix product.",null,{"i":[{"n":"matrix4"},{"n":"matrix4"},{"n":"usize"}],"o":{"n":"vector4"}}],[5,"row_mat2x3_mul_row","","Computes row vector in row matrix product.",null,{"i":[{"n":"matrix2x3"},{"n":"matrix2x3"},{"n":"usize"}],"o":{"n":"vector3"}}],[5,"row_mat3_mul_row","","Computes row vector in row matrix product.",null,{"i":[{"n":"matrix3"},{"n":"matrix3"},{"n":"usize"}],"o":{"n":"vector3"}}],[5,"row_mat3x4_mul_row","","Computes row vector in row matrix product.",null,{"i":[{"n":"matrix3x4"},{"n":"matrix3x4"},{"n":"usize"}],"o":{"n":"vector4"}}],[5,"row_mat4_mul_row","","Computes row vector in row matrix product.",null,{"i":[{"n":"matrix4"},{"n":"matrix4"},{"n":"usize"}],"o":{"n":"vector4"}}],[5,"col_mat3x2_mul","","Multiplies two matrices.",null,{"i":[{"n":"matrix3x2"},{"n":"matrix3x2"}],"o":{"n":"matrix3x2"}}],[5,"col_mat3_mul","","Multiplies two matrices.",null,{"i":[{"n":"matrix3"},{"n":"matrix3"}],"o":{"n":"matrix3"}}],[5,"col_mat4x3_mul","","Multiplies two matrices.",null,{"i":[{"n":"matrix4x3"},{"n":"matrix4x3"}],"o":{"n":"matrix4x3"}}],[5,"col_mat4_mul","","Multiplies two matrices.",null,{"i":[{"n":"matrix4"},{"n":"matrix4"}],"o":{"n":"matrix4"}}],[5,"row_mat2x3_mul","","Multiplies two matrices.",null,{"i":[{"n":"matrix2x3"},{"n":"matrix2x3"}],"o":{"n":"matrix2x3"}}],[5,"row_mat3_mul","","Multiplies two matrices.",null,{"i":[{"n":"matrix3"},{"n":"matrix3"}],"o":{"n":"matrix3"}}],[5,"row_mat3x4_mul","","Multiplies two matrices.",null,{"i":[{"n":"matrix3x4"},{"n":"matrix3x4"}],"o":{"n":"matrix3x4"}}],[5,"row_mat4_mul","","Multiplies two matrices.",null,{"i":[{"n":"matrix4"},{"n":"matrix4"}],"o":{"n":"matrix4"}}],[5,"mat2x3_id","","Constructs identity matrix.",null,{"o":{"n":"matrix2x3"}}],[5,"mat3x2_id","","Constructs identity matrix.",null,{"o":{"n":"matrix3x2"}}],[5,"mat3_id","","Constructs identity matrix.",null,{"o":{"n":"matrix3"}}],[5,"mat3x4_id","","Constructs identity matrix.",null,{"o":{"n":"matrix3x4"}}],[5,"mat4x3_id","","Constructs identity matrix.",null,{"o":{"n":"matrix4x3"}}],[5,"mat4_id","","Constructs identity matrix.",null,{"o":{"n":"matrix4"}}],[5,"vec2_cast","","Converts to another vector type.",null,{"i":[{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"vec3_cast","","Converts to another vector type.",null,{"i":[{"n":"vector3"}],"o":{"n":"vector3"}}],[5,"vec4_cast","","Converts to another vector type.",null,{"i":[{"n":"vector4"}],"o":{"n":"vector4"}}],[5,"mat2x3_cast","","Converts to another matrix type.",null,{"i":[{"n":"matrix2x3"}],"o":{"n":"matrix2x3"}}],[5,"mat3x2_cast","","Converts to another matrix type.",null,{"i":[{"n":"matrix3x2"}],"o":{"n":"matrix3x2"}}],[5,"mat3_cast","","Converts to another matrix type.",null,{"i":[{"n":"matrix3"}],"o":{"n":"matrix3"}}],[5,"mat3x4_cast","","Converts to another matrix type.",null,{"i":[{"n":"matrix3x4"}],"o":{"n":"matrix3x4"}}],[5,"mat4x3_cast","","Converts to another matrix type.",null,{"i":[{"n":"matrix4x3"}],"o":{"n":"matrix4x3"}}],[5,"mat4_cast","","Converts to another matrix type.",null,{"i":[{"n":"matrix4"}],"o":{"n":"matrix4"}}],[5,"vec2_sub","","Subtracts 'b' from 'a'.",null,{"i":[{"n":"vector2"},{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"vec3_sub","","Subtracts 'b' from 'a'.",null,{"i":[{"n":"vector3"},{"n":"vector3"}],"o":{"n":"vector3"}}],[5,"vec4_sub","","Subtracts 'b' from 'a'.",null,{"i":[{"n":"vector4"},{"n":"vector4"}],"o":{"n":"vector4"}}],[5,"mat2x3_sub","","Subtracts 'b' from 'a'.",null,{"i":[{"n":"matrix2x3"},{"n":"matrix2x3"}],"o":{"n":"matrix2x3"}}],[5,"mat3x2_sub","","Subtracts 'b' from 'a'.",null,{"i":[{"n":"matrix3x2"},{"n":"matrix3x2"}],"o":{"n":"matrix3x2"}}],[5,"mat3_sub","","Subtracts 'b' from 'a'.",null,{"i":[{"n":"matrix3"},{"n":"matrix3"}],"o":{"n":"matrix3"}}],[5,"mat3x4_sub","","Subtracts 'b' from 'a'.",null,{"i":[{"n":"matrix3x4"},{"n":"matrix3x4"}],"o":{"n":"matrix3x4"}}],[5,"mat4x3_sub","","Subtracts 'b' from 'a'.",null,{"i":[{"n":"matrix4x3"},{"n":"matrix4x3"}],"o":{"n":"matrix4x3"}}],[5,"mat4_sub","","Subtracts 'b' from 'a'.",null,{"i":[{"n":"matrix4"},{"n":"matrix4"}],"o":{"n":"matrix4"}}],[5,"vec2_add","","Adds two vectors.",null,{"i":[{"n":"vector2"},{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"vec3_add","","Adds two vectors.",null,{"i":[{"n":"vector3"},{"n":"vector3"}],"o":{"n":"vector3"}}],[5,"vec4_add","","Adds two vectors.",null,{"i":[{"n":"vector4"},{"n":"vector4"}],"o":{"n":"vector4"}}],[5,"mat2x3_add","","Adds two matrices.",null,{"i":[{"n":"matrix2x3"},{"n":"matrix2x3"}],"o":{"n":"matrix2x3"}}],[5,"mat3x2_add","","Adds two matrices.",null,{"i":[{"n":"matrix3x2"},{"n":"matrix3x2"}],"o":{"n":"matrix3x2"}}],[5,"mat3_add","","Adds two matrices.",null,{"i":[{"n":"matrix3"},{"n":"matrix3"}],"o":{"n":"matrix3"}}],[5,"mat3x4_add","","Adds two matrices.",null,{"i":[{"n":"matrix3x4"},{"n":"matrix3x4"}],"o":{"n":"matrix3x4"}}],[5,"mat4x3_add","","Adds two matrices.",null,{"i":[{"n":"matrix4x3"},{"n":"matrix4x3"}],"o":{"n":"matrix4x3"}}],[5,"mat4_add","","Adds two matrices.",null,{"i":[{"n":"matrix4"},{"n":"matrix4"}],"o":{"n":"matrix4"}}],[5,"vec2_mul","","Multiplies two vectors component wise.",null,{"i":[{"n":"vector2"},{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"vec3_mul","","Multiplies two vectors component wise.",null,{"i":[{"n":"vector3"},{"n":"vector3"}],"o":{"n":"vector3"}}],[5,"vec4_mul","","Multiplies two vectors component wise.",null,{"i":[{"n":"vector4"},{"n":"vector4"}],"o":{"n":"vector4"}}],[5,"vec2_dot","","Computes the dot product.",null,{"i":[{"n":"vector2"},{"n":"vector2"}],"o":{"n":"t"}}],[5,"vec3_dot","","Computes the dot product.",null,{"i":[{"n":"vector3"},{"n":"vector3"}],"o":{"n":"t"}}],[5,"vec4_dot","","Computes the dot product.",null,{"i":[{"n":"vector4"},{"n":"vector4"}],"o":{"n":"t"}}],[5,"vec2_square_len","","Computes the square length of a vector.",null,{"i":[{"n":"vector2"}],"o":{"n":"t"}}],[5,"vec3_square_len","","Computes the square length of a vector.",null,{"i":[{"n":"vector3"}],"o":{"n":"t"}}],[5,"vec4_square_len","","Computes the square length of a vector.",null,{"i":[{"n":"vector4"}],"o":{"n":"t"}}],[5,"vec2_cross","","Computes the cross product.",null,{"i":[{"n":"vector2"},{"n":"vector2"}],"o":{"n":"t"}}],[5,"vec3_cross","","Computes the cross product.",null,{"i":[{"n":"vector3"},{"n":"vector3"}],"o":{"n":"vector3"}}],[5,"vec2_scale","","Multiplies the vector with a scalar.",null,{"i":[{"n":"vector2"},{"n":"t"}],"o":{"n":"vector2"}}],[5,"vec3_scale","","Multiplies the vector with a scalar.",null,{"i":[{"n":"vector3"},{"n":"t"}],"o":{"n":"vector3"}}],[5,"vec4_scale","","Multiplies the vector with a scalar.",null,{"i":[{"n":"vector4"},{"n":"t"}],"o":{"n":"vector4"}}],[5,"vec2_neg","","Negates the vector.",null,{"i":[{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"vec3_neg","","Negates the vector.",null,{"i":[{"n":"vector3"}],"o":{"n":"vector3"}}],[5,"vec4_neg","","Negates the vector.",null,{"i":[{"n":"vector4"}],"o":{"n":"vector4"}}],[5,"vec2_len","","Computes the length of vector.",null,{"i":[{"n":"vector2"}],"o":{"n":"t"}}],[5,"vec3_len","","Computes the length of vector.",null,{"i":[{"n":"vector3"}],"o":{"n":"t"}}],[5,"vec4_len","","Computes the length of vector.",null,{"i":[{"n":"vector4"}],"o":{"n":"t"}}],[5,"vec2_inv_len","","Computes the inverse length of a vector.",null,{"i":[{"n":"vector2"}],"o":{"n":"t"}}],[5,"vec3_inv_len","","Computes the inverse length of a vector.",null,{"i":[{"n":"vector3"}],"o":{"n":"t"}}],[5,"vec4_inv_len","","Computes the inverse length of a vector.",null,{"i":[{"n":"vector4"}],"o":{"n":"t"}}],[5,"vec2_normalized","","Computes the normalized.",null,{"i":[{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"vec3_normalized","","Computes the normalized.",null,{"i":[{"n":"vector3"}],"o":{"n":"vector3"}}],[5,"vec4_normalized","","Computes the normalized.",null,{"i":[{"n":"vector4"}],"o":{"n":"vector4"}}],[5,"vec2_normalized_sub","","Computes the normalized difference between two vectors.",null,{"i":[{"n":"vector2"},{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"vec3_normalized_sub","","Computes the normalized difference between two vectors.",null,{"i":[{"n":"vector3"},{"n":"vector3"}],"o":{"n":"vector3"}}],[5,"vec4_normalized_sub","","Computes the normalized difference between two vectors.",null,{"i":[{"n":"vector4"},{"n":"vector4"}],"o":{"n":"vector4"}}],[5,"vec3_dot_vec2","","Computes transformed vector component.",null,{"i":[{"n":"vector3"},{"n":"vector2"}],"o":{"n":"t"}}],[5,"vec4_dot_vec3","","Computes transformed vector component.",null,{"i":[{"n":"vector4"},{"n":"vector3"}],"o":{"n":"t"}}],[5,"vec3_dot_pos2","","Computes transformed position component.",null,{"i":[{"n":"vector3"},{"n":"vector2"}],"o":{"n":"t"}}],[5,"vec4_dot_pos3","","Computes transformed position component.",null,{"i":[{"n":"vector4"},{"n":"vector3"}],"o":{"n":"t"}}],[5,"row_mat2x3_col","","Returns a column vector of a row matrix.",null,{"i":[{"n":"matrix2x3"},{"n":"usize"}],"o":{"n":"vector2"}}],[5,"col_mat2x3_row","","Returns a row vector of a column matrix.",null,{"i":[{"n":"matrix2x3"},{"n":"usize"}],"o":{"n":"vector2"}}],[5,"row_mat3x2_col","","Returns a column vector of a row matrix.",null,{"i":[{"n":"matrix3x2"},{"n":"usize"}],"o":{"n":"vector3"}}],[5,"col_mat3x2_row","","Returns a row vector of a column matrix.",null,{"i":[{"n":"matrix3x2"},{"n":"usize"}],"o":{"n":"vector3"}}],[5,"row_mat3_col","","Returns a column vector of a row matrix.",null,{"i":[{"n":"matrix3"},{"n":"usize"}],"o":{"n":"vector3"}}],[5,"col_mat3_row","","Returns a row vector of a column matrix.",null,{"i":[{"n":"matrix3"},{"n":"usize"}],"o":{"n":"vector3"}}],[5,"row_mat3x4_col","","Returns a column vector of a row matrix.",null,{"i":[{"n":"matrix3x4"},{"n":"usize"}],"o":{"n":"vector3"}}],[5,"col_mat3x4_row","","Returns a row vector of a column matrix.",null,{"i":[{"n":"matrix3x4"},{"n":"usize"}],"o":{"n":"vector3"}}],[5,"row_mat4x3_col","","Returns a column vector of a row matrix.",null,{"i":[{"n":"matrix4x3"},{"n":"usize"}],"o":{"n":"vector4"}}],[5,"col_mat4x3_row","","Returns a column vector of a row matrix.",null,{"i":[{"n":"matrix4x3"},{"n":"usize"}],"o":{"n":"vector4"}}],[5,"row_mat4_col","","Returns a column vector of a row matrix.",null,{"i":[{"n":"matrix4"},{"n":"usize"}],"o":{"n":"vector4"}}],[5,"col_mat4_row","","Returns a row vector of a column matrix.",null,{"i":[{"n":"matrix4"},{"n":"usize"}],"o":{"n":"vector4"}}],[5,"mat2x3_transposed","","Constructs the transpose of a matrix.",null,{"i":[{"n":"matrix2x3"}],"o":{"n":"matrix3x2"}}],[5,"mat3x2_transposed","","Constructs the transpose of a matrix.",null,{"i":[{"n":"matrix3x2"}],"o":{"n":"matrix2x3"}}],[5,"mat3_transposed","","Constructs the transpose of a matrix.",null,{"i":[{"n":"matrix3"}],"o":{"n":"matrix3"}}],[5,"mat3x4_transposed","","Constructs the transpose of a matrix.",null,{"i":[{"n":"matrix3x4"}],"o":{"n":"matrix4x3"}}],[5,"mat4x3_transposed","","Constructs the transpose of a matrix.",null,{"i":[{"n":"matrix4x3"}],"o":{"n":"matrix3x4"}}],[5,"mat4_transposed","","Constructs the transpose of a matrix.",null,{"i":[{"n":"matrix4"}],"o":{"n":"matrix4"}}],[5,"col_mat3_transform","","Transforms a 3D vector through a matrix.",null,{"i":[{"n":"matrix3"},{"n":"vector3"}],"o":{"n":"vector3"}}],[5,"col_mat4_transform","","Transforms a 4D vector through a matrix.",null,{"i":[{"n":"matrix4"},{"n":"vector4"}],"o":{"n":"vector4"}}],[5,"row_mat3_transform","","Transforms a 3D vector through a matrix.",null,{"i":[{"n":"matrix3"},{"n":"vector3"}],"o":{"n":"vector3"}}],[5,"row_mat4_transform","","Transforms a 4D vector through a matrix.",null,{"i":[{"n":"matrix4"},{"n":"vector4"}],"o":{"n":"vector4"}}],[5,"row_mat2x3_transform_pos2","","Transforms a 2D position through matrix.",null,{"i":[{"n":"matrix2x3"},{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"col_mat3x2_transform_pos2","","Transforms a 2D position through matrix.",null,{"i":[{"n":"matrix3x2"},{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"row_mat3_transform_pos2","","Transforms a 2D position through row matrix.",null,{"i":[{"n":"matrix3"},{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"col_mat3_transform_pos2","","Transforms a 2D position through column matrix.",null,{"i":[{"n":"matrix3"},{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"row_mat3x4_transform_pos3","","Transforms a 3D position through matrix.",null,{"i":[{"n":"matrix3x4"},{"n":"vector3"}],"o":{"n":"vector3"}}],[5,"col_mat4x3_transform_pos3","","Transforms a 3D position through matrix.",null,{"i":[{"n":"matrix4x3"},{"n":"vector3"}],"o":{"n":"vector3"}}],[5,"row_mat2x3_transform_vec2","","Transforms a 2D vector through matrix.",null,{"i":[{"n":"matrix2x3"},{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"col_mat3x2_transform_vec2","","Transforms a 2D vector through matrix.",null,{"i":[{"n":"matrix3x2"},{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"row_mat3_transform_vec2","","Transforms a 2D vector through row matrix.",null,{"i":[{"n":"matrix3"},{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"col_mat3_transform_vec2","","Transforms a 2D vector through column matrix.",null,{"i":[{"n":"matrix3"},{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"row_mat3x4_transform_vec3","","Transforms a 3D vector through matrix.",null,{"i":[{"n":"matrix3x4"},{"n":"vector3"}],"o":{"n":"vector3"}}],[5,"col_mat4x3_transform_vec3","","Transforms a 3D vector through matrix.",null,{"i":[{"n":"matrix4x3"},{"n":"vector3"}],"o":{"n":"vector3"}}],[5,"mat2x3_det","","Computes the determinant of a matrix.",null,{"i":[{"n":"matrix2x3"}],"o":{"n":"t"}}],[5,"mat3x2_det","","Computes the determinant of a matrix.",null,{"i":[{"n":"matrix3x2"}],"o":{"n":"t"}}],[5,"mat3_det","","Computes the determinant of a matrix.",null,{"i":[{"n":"matrix3"}],"o":{"n":"t"}}],[5,"mat3x4_det","","Computes the determinant of a matrix.",null,{"i":[{"n":"matrix3x4"}],"o":{"n":"t"}}],[5,"mat4x3_det","","Computes the determinant of a matrix.",null,{"i":[{"n":"matrix4x3"}],"o":{"n":"t"}}],[5,"mat4_det","","Computes the determinant of a 4x4 matrix.",null,{"i":[{"n":"matrix4"}],"o":{"n":"t"}}],[5,"mat2x3_inv_det","","Computes inverse determinant of a 2x3 matrix.",null,{"i":[{"n":"matrix2x3"}],"o":{"n":"t"}}],[5,"mat3x2_inv_det","","Computes inverse determinant of a 3x2 matrix.",null,{"i":[{"n":"matrix3x2"}],"o":{"n":"t"}}],[5,"mat3_inv_det","","Computes inverse determinant of a 3x3 matrix.",null,{"i":[{"n":"matrix3"}],"o":{"n":"t"}}],[5,"mat3x4_inv_det","","Computes inverse determinant of a 3x4 matrix.",null,{"i":[{"n":"matrix3x4"}],"o":{"n":"t"}}],[5,"mat4x3_inv_det","","Computes inverse determinant of a 4x3 matrix.",null,{"i":[{"n":"matrix4x3"}],"o":{"n":"t"}}],[5,"mat4_inv_det","","Computes the inverse determinant of a 4x4 matrix.",null,{"i":[{"n":"matrix4"}],"o":{"n":"t"}}],[5,"mat2x3_inv","","Computes the inverse of a 2x3 matrix.",null,{"i":[{"n":"matrix2x3"}],"o":{"n":"matrix2x3"}}],[5,"mat3x2_inv","","Computes the inverse of a 3x2 matrix.",null,{"i":[{"n":"matrix3x2"}],"o":{"n":"matrix3x2"}}],[5,"mat3_inv","","Computes the inverse of a 3x3 matrix.",null,{"i":[{"n":"matrix3"}],"o":{"n":"matrix3"}}],[5,"mat3x4_inv","","Computes the inverse of a 3x4 matrix.",null,{"i":[{"n":"matrix3x4"}],"o":{"n":"matrix3x4"}}],[5,"mat4x3_inv","","Computes the inverse of a 4x3 matrix.",null,{"i":[{"n":"matrix4x3"}],"o":{"n":"matrix4x3"}}],[5,"mat4_inv","","Computes the inverse of a 4x4 matrix.",null,{"i":[{"n":"matrix4"}],"o":{"n":"matrix4"}}],[0,"traits","","Various useful traits",null,null],[6,"Vector2","","A 2D vector.",null,null],[6,"Vector3","","A 3D vector.",null,null],[6,"Vector4","","A 4D vector.",null,null],[6,"Matrix2x3","","A 2x3 matrix.",null,null],[6,"Matrix3x2","","A 3x2 matrix.",null,null],[6,"Matrix3","","A 3x3 matrix.",null,null],[6,"Matrix3x4","","A 3x4 matrix.",null,null],[6,"Matrix4x3","","A 4x3 matrix.",null,null],[6,"Matrix4","","A 4x4 matrix.",null,null]],"paths":[]};
searchIndex["viewport"] = {"doc":"A library for storing viewport information","items":[[3,"Viewport","viewport","Stores viewport information.",null,null],[12,"rect","","Viewport in pixels. `[x, y, width height]` where `(x, y)` is lower left corner.",0,null],[12,"draw_size","","The size of frame buffer in pixels.",0,null],[12,"window_size","","The size of window in points.",0,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"viewport"}}],[11,"abs_transform","","Computes absolute transform for 2D graphics, which uses a row major 2x3 matrix. The origin is in the upper left corner of the viewport rectangle. The x axis points to the right, and the y axis points down. The units are in points (window coordinates).",0,null]],"paths":[[3,"Viewport"]]};
initSearch(searchIndex);
