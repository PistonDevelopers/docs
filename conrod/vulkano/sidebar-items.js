initSidebarItems({"enum":[["OomError","Error type returned by most Vulkan functions."]],"macro":[["app_info_from_cargo_toml","Builds an `ApplicationInfo` from the information gathered by Cargo."],["buffer_slice_field","Takes a `BufferSlice` that points to a struct, and returns a `BufferSlice` that points to a specific field of that struct."],["impl_vertex","Implements the `Vertex` trait on a struct. # Example"],["ordered_passes_renderpass","Builds a `RenderPass` object whose template parameter is of indeterminate type."],["single_pass_renderpass","Builds a `RenderPass` object whose template parameter is of indeterminate type."],["statically_linked_vulkan_loader","Expression that returns a loader that assumes that Vulkan is linked to the executable you're compiling."]],"mod":[["buffer","Location in memory that contains data."],["command_buffer","Commands that the GPU will execute (includes draw commands)."],["descriptor","Provides a way for shaders to access the content of buffers and images, or read arbitrary data."],["device","Communication channel with a physical device."],["format","Declares all the formats of data and images supported by Vulkan."],["framebuffer","Targets on which your draw commands are executed."],["image","Image storage (1D, 2D, 3D, arrays, etc.)."],["instance","API entry point."],["memory","Device memory allocation and memory pools."],["pipeline","Describes a graphical or compute operation."],["query","This module provides support for query pools."],["sampler","How to retrieve data from an image within a shader."],["swapchain","Link between Vulkan and a window and/or the screen."],["sync","Synchronization on the GPU."]],"trait":[["SafeDeref","Alternative to the `Deref` trait. Contrary to `Deref`, must always return the same object."],["SynchronizedVulkanObject","Gives access to the internal identifier of an object."],["VulkanHandle",""],["VulkanObject","Gives access to the internal identifier of an object."]]});