(function() {var implementors = {};
implementors["arrayvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; Drop for ArrayVec&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Drop for IntoIter&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, A:&nbsp;Array&gt; Drop for Drain&lt;'a, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: 'a,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["atom"] = [{"text":"impl&lt;P&gt; Drop for Atom&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: IntoRawPtr + FromRawPtr,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["backtrace"] = [{"text":"impl&lt;'_, '_, '_&gt; Drop for BacktraceFrameFmt&lt;'_, '_, '_&gt;","synthetic":false,"types":[]}];
implementors["calloop"] = [{"text":"impl Drop for Signals","synthetic":false,"types":[]}];
implementors["conrod_core"] = [{"text":"impl&lt;'a&gt; Drop for UiCell&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["copyless"] = [{"text":"impl&lt;T&gt; Drop for BoxAllocation&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; Drop for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Drop for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; Drop for SelectedOperation&lt;'_&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; Drop for Injector&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T&gt; Drop for Owned&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Drop for LocalHandle","synthetic":false,"types":[]},{"text":"impl Drop for Guard","synthetic":false,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl&lt;T&gt; Drop for ArrayQueue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Drop for SegQueue&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Drop for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl Drop for WaitGroup","synthetic":false,"types":[]}];
implementors["gfx_backend_vulkan"] = [{"text":"impl Drop for RawInstance","synthetic":false,"types":[]}];
implementors["gfx_core"] = [{"text":"impl&lt;'a, R:&nbsp;Resources&gt; Drop for AccessGuard&lt;'a, R&gt;","synthetic":false,"types":[]}];
implementors["gfx_descriptor"] = [{"text":"impl&lt;B:&nbsp;Backend&gt; Drop for DescriptorAllocator&lt;B&gt;","synthetic":false,"types":[]}];
implementors["gfx_memory"] = [{"text":"impl Drop for DedicatedAllocator","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Backend&gt; Drop for GeneralAllocator&lt;B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Backend&gt; Drop for LinearAllocator&lt;B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Backend&gt; Drop for Heaps&lt;B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, T, B:&nbsp;Backend&gt; Drop for Writer&lt;'a, 'b, T, B&gt;","synthetic":false,"types":[]}];
implementors["glium"] = [{"text":"impl&lt;T:&nbsp;?Sized&gt; Drop for Buffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Content,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Drop for BufferAny","synthetic":false,"types":[]},{"text":"impl Drop for RenderBufferAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Drop for TransformFeedbackSession&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Drop for ResidentTexture","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Drop for BufferTexture&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;[T]: BufferContent,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Drop for TextureAny","synthetic":false,"types":[]},{"text":"impl Drop for Context","synthetic":false,"types":[]},{"text":"impl Drop for SyncFence","synthetic":false,"types":[]},{"text":"impl Drop for LinearSyncFence","synthetic":false,"types":[]},{"text":"impl Drop for Frame","synthetic":false,"types":[]}];
implementors["libloading"] = [{"text":"impl Drop for Library","synthetic":false,"types":[]}];
implementors["linked_hash_map"] = [{"text":"impl&lt;K, V, S&gt; Drop for LinkedHashMap&lt;K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V&gt; Drop for IntoIter&lt;K, V&gt;","synthetic":false,"types":[]}];
implementors["lock_api"] = [{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, T:&nbsp;?Sized + 'a&gt; Drop for MutexGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, T:&nbsp;?Sized + 'a&gt; Drop for MappedMutexGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, G:&nbsp;GetThreadId + 'a, T:&nbsp;?Sized + 'a&gt; Drop for ReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, G:&nbsp;GetThreadId + 'a, T:&nbsp;?Sized + 'a&gt; Drop for MappedReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + 'a&gt; Drop for RwLockReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + 'a&gt; Drop for RwLockWriteGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLockUpgrade + 'a, T:&nbsp;?Sized + 'a&gt; Drop for RwLockUpgradableReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + 'a&gt; Drop for MappedRwLockReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + 'a&gt; Drop for MappedRwLockWriteGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]}];
implementors["mio"] = [{"text":"impl Drop for Registration","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl Drop for Dir","synthetic":false,"types":[]},{"text":"impl&lt;'d&gt; Drop for Iter&lt;'d&gt;","synthetic":false,"types":[]},{"text":"impl Drop for InterfaceAddressIterator","synthetic":false,"types":[]},{"text":"impl Drop for PtyMaster","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Drop for AioCb&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Drop for SignalFd","synthetic":false,"types":[]}];
implementors["relevant"] = [{"text":"impl Drop for Relevant","synthetic":false,"types":[]}];
implementors["rendy_command"] = [{"text":"impl&lt;'a, B&gt; Drop for RenderPassInlineEncoder&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Backend,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, B&gt; Drop for RenderPassSecondaryEncoder&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Backend,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["rendy_factory"] = [{"text":"impl&lt;B&gt; Drop for Factory&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Backend,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["rendy_memory"] = [{"text":"impl Drop for DedicatedAllocator","synthetic":false,"types":[]}];
implementors["rendy_resource"] = [{"text":"impl&lt;T&gt; Drop for Escape&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Drop for Terminal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["rendy_shader"] = [{"text":"impl&lt;B:&nbsp;Backend&gt; Drop for ShaderStorage&lt;B&gt;","synthetic":false,"types":[]}];
implementors["scopeguard"] = [{"text":"impl&lt;T, F, S&gt; Drop for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnOnce(T),<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Strategy,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["shaderc"] = [{"text":"impl Drop for Compiler","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Drop for CompileOptions&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Drop for CompilationArtifact","synthetic":false,"types":[]}];
implementors["shared_library"] = [{"text":"impl Drop for DynamicLibrary","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;'a, T:&nbsp;'a&gt; Drop for Drain&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Drop for SmallVec&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Drop for IntoIter&lt;A&gt;","synthetic":false,"types":[]}];
implementors["smithay_client_toolkit"] = [{"text":"impl Drop for DataDevice","synthetic":false,"types":[]},{"text":"impl Drop for DataOffer","synthetic":false,"types":[]},{"text":"impl Drop for MemPool","synthetic":false,"types":[]},{"text":"impl Drop for BasicFrame","synthetic":false,"types":[]},{"text":"impl Drop for ConceptFrame","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Frame&gt; Drop for Window&lt;F&gt;","synthetic":false,"types":[]}];
implementors["smithay_clipboard"] = [{"text":"impl Drop for ThreadedClipboard","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl&lt;'a&gt; Drop for ParseBuffer&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["vulkano"] = [{"text":"impl&lt;T, A&gt; Drop for CpuBufferPoolChunk&lt;T, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: MemoryPool,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Drop for UnsafeBuffer","synthetic":false,"types":[]},{"text":"impl&lt;F, B&gt; Drop for BufferView&lt;F, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: BufferAccess,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Drop for StandardCommandPoolAlloc","synthetic":false,"types":[]},{"text":"impl Drop for UnsafeCommandPool","synthetic":false,"types":[]},{"text":"impl&lt;F, Cb&gt; Drop for CommandBufferExecFuture&lt;F, Cb&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: GpuFuture,<br>&nbsp;&nbsp;&nbsp;&nbsp;Cb: CommandBuffer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Drop for StdDescriptorPoolAlloc","synthetic":false,"types":[]},{"text":"impl Drop for UnsafeDescriptorPool","synthetic":false,"types":[]},{"text":"impl Drop for UnsafeDescriptorSetLayout","synthetic":false,"types":[]},{"text":"impl&lt;L&gt; Drop for PipelineLayout&lt;L&gt;","synthetic":false,"types":[]},{"text":"impl Drop for Device","synthetic":false,"types":[]},{"text":"impl&lt;Rp, A&gt; Drop for Framebuffer&lt;Rp, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;D&gt; Drop for RenderPass&lt;D&gt;","synthetic":false,"types":[]},{"text":"impl Drop for UnsafeImage","synthetic":false,"types":[]},{"text":"impl Drop for UnsafeImageView","synthetic":false,"types":[]},{"text":"impl Drop for DebugCallback","synthetic":false,"types":[]},{"text":"impl Drop for Instance","synthetic":false,"types":[]},{"text":"impl Drop for DeviceMemory","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized + 'a&gt; Drop for CpuAccess&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl Drop for StdHostVisibleMemoryTypePoolAlloc","synthetic":false,"types":[]},{"text":"impl Drop for StdNonHostVisibleMemoryTypePoolAlloc","synthetic":false,"types":[]},{"text":"impl Drop for PipelineCache","synthetic":false,"types":[]},{"text":"impl Drop for ShaderModule","synthetic":false,"types":[]},{"text":"impl Drop for UnsafeQueryPool","synthetic":false,"types":[]},{"text":"impl Drop for Sampler","synthetic":false,"types":[]},{"text":"impl&lt;W&gt; Drop for Surface&lt;W&gt;","synthetic":false,"types":[]},{"text":"impl&lt;W&gt; Drop for Swapchain&lt;W&gt;","synthetic":false,"types":[]},{"text":"impl&lt;W&gt; Drop for SwapchainAcquireFuture&lt;W&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P, W&gt; Drop for PresentFuture&lt;P, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: GpuFuture,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Drop for Event","synthetic":false,"types":[]},{"text":"impl&lt;D&gt; Drop for Fence&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: SafeDeref&lt;Target = Device&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;F&gt; Drop for FenceSignalFuture&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: GpuFuture,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;F&gt; Drop for SemaphoreSignalFuture&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: GpuFuture,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;D&gt; Drop for Semaphore&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: SafeDeref&lt;Target = Device&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["wayland_client"] = [{"text":"impl Drop for ReadEventsGuard","synthetic":false,"types":[]},{"text":"impl Drop for CursorTheme","synthetic":false,"types":[]},{"text":"impl Drop for WlEglSurface","synthetic":false,"types":[]}];
implementors["wayland_commons"] = [{"text":"impl Drop for Socket","synthetic":false,"types":[]}];
implementors["wgpu"] = [{"text":"impl Drop for BindGroup","synthetic":false,"types":[]},{"text":"impl Drop for Device","synthetic":false,"types":[]},{"text":"impl Drop for BufferReadMapping","synthetic":false,"types":[]},{"text":"impl Drop for BufferWriteMapping","synthetic":false,"types":[]},{"text":"impl Drop for Buffer","synthetic":false,"types":[]},{"text":"impl Drop for Texture","synthetic":false,"types":[]},{"text":"impl Drop for TextureView","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Drop for RenderPass&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Drop for ComputePass&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Drop for SwapChainOutput","synthetic":false,"types":[]}];
implementors["wgpu_core"] = [{"text":"impl&lt;'a, T&gt; Drop for Token&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;G:&nbsp;GlobalIdentityHandlerFactory&gt; Drop for Global&lt;G&gt;","synthetic":false,"types":[]},{"text":"impl Drop for RefCount","synthetic":false,"types":[]}];
implementors["xcb"] = [{"text":"impl&lt;T&gt; Drop for Event&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Drop for Error&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Copy + CookieSeq&gt; Drop for Cookie&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Drop for Reply&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Drop for Connection","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()