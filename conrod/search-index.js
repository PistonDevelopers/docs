var searchIndex = {};
searchIndex["approx"] = {"doc":"A crate that provides facilities for testing the approximate equality of floating-point based types, using either relative difference, or units in the last place (ULPs) comparisons.","items":[[3,"Relative","approx","The requisite parameters for testing for approximate equality.",null,null],[12,"lhs","","The left-hand side of the approximate equality comparison.",0,null],[12,"rhs","","The right-hand side of the approximate equality comparison.",0,null],[12,"epsilon","","The tolerance to use when testing values that are close together.",0,null],[12,"max_relative","","The relative tolerance for testing values that are far-apart.",0,null],[3,"Ulps","","The requisite parameters for testing for approximate equality.",null,null],[12,"lhs","","The left-hand side of the approximate equality comparison.",1,null],[12,"rhs","","The right-hand side of the approximate equality comparison.",1,null],[12,"epsilon","","The tolerance to use when testing values that are close together.",1,null],[12,"max_ulps","","The ULPs to tolerate when testing values that are far-apart.",1,null],[8,"ApproxEq","","Equality comparisons based on floating point tolerances.",null,null],[16,"Epsilon","","Used for specifying relative comparisons.",2,null],[10,"default_epsilon","","The default tolerance to use when testing values that are close together.",2,null],[10,"default_max_relative","","The default relative tolerance for testing values that are far-apart.",2,null],[10,"default_max_ulps","","The default ULPs to tolerate when testing values that are far-apart.",2,{"o":{"n":"u32"}}],[10,"relative_eq","","A test for equality that uses a relative comparison if the values are far apart.",2,null],[11,"relative_ne","","The inverse of `ApproxEq::relative_eq`.",2,null],[10,"ulps_eq","","A test for equality that uses units in the last place (ULP) if the values are far apart.",2,null],[11,"ulps_ne","","The inverse of `ApproxEq::ulps_eq`.",2,null],[11,"new","","The beginning of a chained equality expression, using a relative based comparison.",0,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"relative"}}],[11,"epsilon","","Replace the epsilon value with the one specified.",0,null],[11,"max_relative","","Replace the maximum relative value with the one specified.",0,null],[11,"eq","","Peform the equality comparison",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"ne","","Peform the inequality comparison",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"new","","The beginning of a chained equality expression, using an ULPs based comparison.",1,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"ulps"}}],[11,"epsilon","","Replace the epsilon value with the one specified.",1,null],[11,"max_ulps","","Replace the max ulps value with the one specified.",1,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"ulps"}}],[11,"eq","","Peform the equality comparison",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"ne","","Peform the inequality comparison",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[14,"relative_eq","","Predicate for testing the approximate equality of two values.",null,null],[14,"relative_ne","","Predicate for testing the approximate inequality of two values.",null,null],[14,"assert_relative_eq","","",null,null],[14,"assert_relative_ne","","",null,null],[14,"ulps_eq","","Predicate for testing the approximate equality of two values using a maximum ULPs (Units in Last Place).",null,null],[14,"ulps_ne","","Predicate for testing the approximate inequality of two values using a maximum ULPs (Units in Last Place).",null,null],[14,"assert_ulps_eq","","",null,null],[14,"assert_ulps_ne","","",null,null]],"paths":[[3,"Relative"],[3,"Ulps"],[8,"ApproxEq"]]};
searchIndex["arrayvec"] = {"doc":"arrayvec provides the types `ArrayVec` and `ArrayString`:  array-backed vector and string types, which store their contents inline.","items":[[3,"ArrayString","arrayvec","A string with a fixed capacity.",null,null],[3,"CapacityError","","Error value indicating insufficient capacity",null,null],[3,"ArrayVec","","A vector with a fixed capacity.",null,null],[3,"IntoIter","","By-value iterator for `ArrayVec`.",null,null],[3,"Drain","","A draining iterator for `ArrayVec`.",null,null],[11,"default","","Return an empty `ArrayString`",0,{"o":{"n":"arraystring"}}],[11,"new","","Create a new empty `ArrayString`.",0,{"o":{"n":"arraystring"}}],[11,"from","","Create a new `ArrayString` from a `str`.",0,{"i":[{"n":"str"}],"o":{"g":["capacityerror"],"n":"result"}}],[11,"from_byte_string","","Create a new `ArrayString` from a byte string literal.",0,{"i":[{"n":"a"}],"o":{"g":["utf8error"],"n":"result"}}],[11,"capacity","","Return the capacity of the `ArrayString`.",0,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_full","","Return if the `ArrayString` is completely filled.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"push","","Adds the given char to the end of the string.",0,{"i":[{"n":"self"},{"n":"char"}]}],[11,"try_push","","Adds the given char to the end of the string.",0,{"i":[{"n":"self"},{"n":"char"}],"o":{"g":["capacityerror"],"n":"result"}}],[11,"push_str","","Adds the given string slice to the end of the string.",0,{"i":[{"n":"self"},{"n":"str"}]}],[11,"try_push_str","","Adds the given string slice to the end of the string.",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["capacityerror"],"n":"result"}}],[11,"pop","","Removes the last character from the string and returns it.",0,{"i":[{"n":"self"}],"o":{"g":["char"],"n":"option"}}],[11,"truncate","","Shortens this `ArrayString` to the specified length.",0,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"remove","","Removes a `char` from this `ArrayString` at a byte position and returns it.",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char"}}],[11,"clear","","Make the string empty.",0,{"i":[{"n":"self"}]}],[11,"set_len","","Set the strings’s length.",0,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"as_str","","Return a string slice of the whole `ArrayString`.",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"deref","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"deref_mut","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"hash","","",0,{"i":[{"n":"self"},{"n":"h"}]}],[11,"borrow","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"as_ref","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"write_char","","",0,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"result"}}],[11,"write_str","","",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"arraystring"}}],[11,"clone_from","","",0,{"i":[{"n":"self"},{"n":"self"}]}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"ordering"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"capacityerror"}}],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"capacityerror"}],"o":{"n":"ordering"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"capacityerror"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"capacityerror"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"capacityerror"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",1,{"i":[{"n":"self"},{"n":"capacityerror"}],"o":{"n":"bool"}}],[11,"le","","",1,{"i":[{"n":"self"},{"n":"capacityerror"}],"o":{"n":"bool"}}],[11,"gt","","",1,{"i":[{"n":"self"},{"n":"capacityerror"}],"o":{"n":"bool"}}],[11,"ge","","",1,{"i":[{"n":"self"},{"n":"capacityerror"}],"o":{"n":"bool"}}],[11,"new","","Create a new `CapacityError` from `element`.",1,{"i":[{"n":"t"}],"o":{"n":"capacityerror"}}],[11,"element","","Extract the overflowing element",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"simplify","","Convert into a `CapacityError` that does not carry an element.",1,{"i":[{"n":"self"}],"o":{"n":"capacityerror"}}],[11,"description","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[8,"Array","","Trait for fixed size arrays.",null,null],[16,"Item","","The array’s element type",2,null],[8,"RangeArgument","","`RangeArgument` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",3,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"end","","End index (exclusive)",3,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drop","","",4,{"i":[{"n":"self"}]}],[11,"new","","Create a new empty `ArrayVec`.",4,{"o":{"n":"arrayvec"}}],[11,"len","","Return the number of elements in the `ArrayVec`.",4,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"capacity","","Return the capacity of the `ArrayVec`.",4,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_full","","Return if the `ArrayVec` is completely filled.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"push","","Push `element` to the end of the vector.",4,null],[11,"try_push","","Push `element` to the end of the vector.",4,null],[11,"push_unchecked","","Push `element` to the end of the vector without checking the capacity.",4,null],[11,"insert","","Insert `element` at position `index`.",4,null],[11,"try_insert","","Insert `element` at position `index`.",4,null],[11,"pop","","Remove the last element in the vector and return it.",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"swap_remove","","Remove the element at `index` and swap the last element into its place.",4,null],[11,"swap_pop","","Remove the element at `index` and swap the last element into its place.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"remove","","Remove the element at `index` and shift down the following elements.",4,null],[11,"pop_at","","Remove the element at `index` and shift down the following elements.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",4,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"clear","","Remove all elements in the vector.",4,{"i":[{"n":"self"}]}],[11,"retain","","Retains only the elements specified by the predicate.",4,{"i":[{"n":"self"},{"n":"f"}]}],[11,"set_len","","Set the vector’s length without dropping or moving out elements",4,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"drain","","Create a draining iterator that removes the specified range in the vector and yields the removed items from start to end. The element range is removed even if the iterator is not consumed until the end.",4,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"drain"}}],[11,"into_inner","","Return the inner fixed size array, if it is full to its capacity.",4,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"dispose","","Dispose of `self` without the overwriting that is needed in Drop.",4,{"i":[{"n":"self"}]}],[11,"as_slice","","Return a slice containing all elements of the vector.",4,null],[11,"as_mut_slice","","Return a mutable slice containing all elements of the vector.",4,null],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"from","","",4,{"i":[{"n":"a"}],"o":{"n":"self"}}],[11,"into_iter","","",4,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"next","","",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"drop","","",5,{"i":[{"n":"self"}]}],[11,"next","","",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"drop","","",6,{"i":[{"n":"self"}]}],[11,"extend","","",4,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",4,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"clone_from","","",4,{"i":[{"n":"self"},{"n":"self"}]}],[11,"hash","","",4,{"i":[{"n":"self"},{"n":"h"}]}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"eq","","",4,null],[11,"borrow","","",4,null],[11,"borrow_mut","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","Return an empty array",4,{"o":{"n":"arrayvec"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"arrayvec"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",4,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"le","","",4,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"ge","","",4,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"gt","","",4,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"cmp","","",4,{"i":[{"n":"self"},{"n":"arrayvec"}],"o":{"n":"ordering"}}],[11,"write","","",4,null],[11,"flush","","",4,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"start","","Start index (inclusive)",3,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"end","","End index (exclusive)",3,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}]],"paths":[[3,"ArrayString"],[3,"CapacityError"],[8,"Array"],[8,"RangeArgument"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["backtrace"] = {"doc":"A library for acquiring a backtrace at runtime","items":[[3,"Frame","backtrace","A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.",null,null],[3,"Symbol","","A trait representing the resolution of a symbol in a file.",null,null],[3,"SymbolName","","A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.",null,null],[3,"Backtrace","","Representation of an owned and self-contained backtrace.",null,null],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",null,null],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",null,null],[5,"trace","","Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.",null,{"i":[{"n":"f"}]}],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified closure.",null,null],[11,"ip","","Returns the current instruction pointer of this frame.",0,null],[11,"symbol_address","","Returns the starting symbol address of the frame of this function.",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"name","","Returns the name of this function.",1,{"i":[{"n":"self"}],"o":{"g":["symbolname"],"n":"option"}}],[11,"addr","","Returns the starting address of this function.",1,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"filename","","Returns the file name where this function was defined.",1,{"i":[{"n":"self"}],"o":{"g":["path"],"n":"option"}}],[11,"lineno","","Returns the line number for where this symbol is currently executing.",1,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new symbol name from the raw underlying bytes.",2,null],[11,"as_str","","Returns the raw symbol name as a `str` if the symbols is valid utf-8.",2,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",2,null],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"backtrace"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"backtraceframe"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"backtracesymbol"}}],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",3,{"o":{"n":"backtrace"}}],[11,"new_unresolved","","Similar to `new` except that this does not resolve any symbols, this simply captures the backtrace as a list of addresses.",3,{"o":{"n":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",3,null],[11,"resolve","","If this backtrace was created from `new_unresolved` then this function will resolve all addresses in the backtrace to their symbolic names.",3,{"i":[{"n":"self"}]}],[11,"from","","",3,{"i":[{"g":["backtraceframe"],"n":"vec"}],"o":{"n":"self"}}],[11,"into","","",3,{"i":[{"n":"self"}],"o":{"g":["backtraceframe"],"n":"vec"}}],[11,"ip","","Same as `Frame::ip`",4,null],[11,"symbol_address","","Same as `Frame::symbol_address`",4,null],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",4,null],[11,"name","","Same as `Symbol::name`",5,{"i":[{"n":"self"}],"o":{"g":["symbolname"],"n":"option"}}],[11,"addr","","Same as `Symbol::addr`",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"filename","","Same as `Symbol::filename`",5,{"i":[{"n":"self"}],"o":{"g":["path"],"n":"option"}}],[11,"lineno","","Same as `Symbol::lineno`",5,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",3,{"o":{"n":"backtrace"}}]],"paths":[[3,"Frame"],[3,"Symbol"],[3,"SymbolName"],[3,"Backtrace"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"]]};
searchIndex["backtrace_sys"] = {"doc":"","items":[[4,"backtrace_state","backtrace_sys","",null,null],[5,"backtrace_create_state","","",null,null],[5,"backtrace_syminfo","","",null,null],[5,"backtrace_pcinfo","","",null,null],[6,"backtrace_syminfo_callback","","",null,null],[6,"backtrace_full_callback","","",null,null],[6,"backtrace_error_callback","","",null,null]],"paths":[]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"paths":[]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either [big-endian or little-endian order].","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"BE","","A type alias for [`BigEndian`].",null,null],[6,"LE","","A type alias for [`LittleEndian`].",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends [`Read`] with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["u64"],"n":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["i64"],"n":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[8,"WriteBytesExt","","Extends [`Write`] with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u64"},{"n":"usize"}],"o":{"n":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i64"},{"n":"usize"}],"o":{"n":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[8,"ByteOrder","","`ByteOrder` describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,null],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,null],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,null],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,null],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,null],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,null],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,null],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,null],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,null],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,null],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,null],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,null],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,null],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,null],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"bigendian"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"i":[{"n":"self"},{"n":"bigendian"}],"o":{"n":"ordering"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"bigendian"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",3,{"i":[{"n":"self"},{"n":"bigendian"}],"o":{"g":["ordering"],"n":"option"}}],[11,"default","","",3,{"o":{"n":"bigendian"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"littleendian"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"i":[{"n":"self"},{"n":"littleendian"}],"o":{"n":"ordering"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"littleendian"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"littleendian"}],"o":{"g":["ordering"],"n":"option"}}],[11,"default","","",4,{"o":{"n":"littleendian"}}],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16_into","","",3,null],[11,"read_u32_into","","",3,null],[11,"read_u64_into","","",3,null],[11,"write_u16_into","","",3,null],[11,"write_u32_into","","",3,null],[11,"write_u64_into","","",3,null],[11,"from_slice_u16","","",3,null],[11,"from_slice_u32","","",3,null],[11,"from_slice_u64","","",3,null],[11,"from_slice_f32","","",3,null],[11,"from_slice_f64","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u16_into","","",4,null],[11,"read_u32_into","","",4,null],[11,"read_u64_into","","",4,null],[11,"write_u16_into","","",4,null],[11,"write_u32_into","","",4,null],[11,"write_u64_into","","",4,null],[11,"from_slice_u16","","",4,null],[11,"from_slice_u32","","",4,null],[11,"from_slice_u64","","",4,null],[11,"from_slice_f32","","",4,null],[11,"from_slice_f64","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["u64"],"n":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["i64"],"n":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u64"},{"n":"usize"}],"o":{"n":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i64"},{"n":"usize"}],"o":{"n":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining `#[cfg]` if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
searchIndex["conrod"] = {"doc":"Conrod","items":[[3,"Ui","conrod","`Ui` is the most important type within Conrod and is necessary for rendering and maintaining widget state. # Ui Handles the following: * Contains the state of all widgets which can be indexed via their widget::Id. * Stores rendering state for each widget until the end of each render cycle. * Contains the theme used for default styling of the widgets. * Maintains the latest user input state (for mouse and keyboard). * Maintains the latest window dimensions.",null,null],[12,"theme","","The theme used to set default styling for widgets.",0,null],[12,"window","","An index into the root widget of the graph, representing the entire window.",0,null],[12,"fonts","","Manages all fonts that have been loaded by the user.",0,null],[12,"win_w","","Window width.",0,null],[12,"win_h","","Window height.",0,null],[3,"UiCell","","A wrapper around the `Ui` that restricts the user from mutating the `Ui` in certain ways while in the scope of the `Ui::set_widgets` function and within `Widget`s' `update` methods. Using the `UiCell`, users may access the `Ui` immutably (via `Deref`) however they wish, however they may only mutate the `Ui` via the `&mut self` methods provided by the `UiCell`.",null,null],[3,"UiBuilder","","A constructor type for building a `Ui` instance with a set of optional parameters.",null,null],[12,"window_dimensions","","The initial dimensions of the window in which the `Ui` exists.",1,null],[12,"maybe_theme","","The theme used to set default styling for widgets.",1,null],[12,"maybe_widgets_capacity","","An estimation of the maximum number of widgets that will be used with this `Ui` instance.",1,null],[4,"Bordering","","To be used as a parameter for defining the aesthetic of the widget border.",null,null],[13,"Border","","Border width and color.",2,null],[13,"NoBorder","","No border.",2,null],[0,"backend","","Feature-gated, backend-specific functionality.",null,null],[0,"glium","conrod::backend","A glium backend for rendering conrod primitives.",null,null],[0,"backend","conrod::backend::glium::glium","The `backend` module allows one to link between glium and the OpenGL context..",null,null],[0,"glutin","conrod::backend::glium::glium::backend","Backend implementation for the glutin library",null,null],[0,"headless","conrod::backend::glium::glium::backend::glutin","Backend implementation for a glutin headless renderer.",null,null],[3,"Headless","conrod::backend::glium::glium::backend::glutin::headless","A headless glutin context.",null,null],[3,"GlutinBackend","","An implementation of the `Backend` trait for a glutin headless context.",null,null],[3,"Display","conrod::backend::glium::glium::backend::glutin","A GL context combined with a facade for drawing upon.",null,null],[3,"GlutinBackend","","An implementation of the `Backend` trait for glutin.",null,null],[4,"DisplayCreationError","","Error that can happen while creating a glium display.",null,null],[13,"GlutinCreationError","","An error has happened while creating the backend.",3,null],[13,"IncompatibleOpenGl","","The OpenGL implementation is too old.",3,null],[0,"os","conrod::backend::glium::glium::backend::glutin::glutin","Contains traits with platform-specific methods in them.",null,null],[0,"unix","conrod::backend::glium::glium::backend::glutin::glutin::os","",null,null],[4,"RawHandle","conrod::backend::glium::glium::backend::glutin::glutin::os::unix","Context handles available on Unix-like platforms.",null,null],[13,"Glx","","",4,null],[13,"Egl","","",4,null],[6,"EGLContext","","",null,null],[8,"EventsLoopExt","","Additional methods on `EventsLoop` that are specific to Linux.",null,null],[10,"new_x11","","Builds a new `EventsLoop` that is forced to use X11.",5,{"o":{"g":["xnotsupported"],"n":"result"}}],[10,"new_wayland","","Builds a new `EventsLoop` that is forced to use Wayland.",5,{"o":{"n":"self"}}],[10,"is_wayland","","True if the `EventsLoop` uses Wayland.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_x11","","True if the `EventsLoop` uses X11.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"WindowBuilderExt","","Additional methods on `WindowBuilder` that are specific to Unix.",null,null],[10,"with_x11_visual","","",6,null],[10,"with_x11_screen","","",6,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"windowbuilder"}}],[8,"MonitorIdExt","","Additional methods on `MonitorId` that are specific to Linux.",null,null],[10,"native_id","","Returns the inner identifier of the monitor.",7,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[4,"XNotSupported","","Error returned if this system doesn't have XLib or can't create an X connection.",null,null],[13,"LibraryOpenError","","Failed to load one or several shared libraries.",8,null],[13,"XOpenDisplayFailed","","Connecting to the X server with `XOpenDisplay` failed.",8,null],[8,"WindowExt","","Additional methods on `Window` that are specific to Unix.",null,null],[10,"get_xlib_window","","Returns the ID of the `Window` xlib object that is used by this window.",9,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[10,"get_xlib_display","","Returns a pointer to the `Display` object of xlib that is used by this window.",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[10,"get_xlib_screen_id","","",9,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[10,"get_xlib_xconnection","","",9,{"i":[{"n":"self"}],"o":{"g":["arc"],"n":"option"}}],[10,"send_xim_spot","","",9,null],[10,"get_xcb_connection","","This function returns the underlying `xcb_connection_t` of an xlib `Display`.",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[10,"get_wayland_surface","","Returns a pointer to the `wl_surface` object of wayland that is used by this window.",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[10,"get_wayland_display","","Returns a pointer to the `wl_display` object of wayland that is used by this window.",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[10,"is_ready","","Check if the window is ready for drawing",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[6,"GLXContext","","",null,null],[8,"GlContextExt","conrod::backend::glium::glium::backend::glutin::glutin::os","Platform-specific extensions for OpenGL contexts.",null,null],[16,"Handle","","Raw context handle.",10,null],[10,"raw_handle","","Returns the raw context handle.",10,null],[8,"GlContext","conrod::backend::glium::glium::backend::glutin::glutin","A trait for types associated with a GL context.",null,null],[10,"make_current","","Sets the context as the current context.",11,{"i":[{"n":"self"}],"o":{"g":["contexterror"],"n":"result"}}],[10,"is_current","","Returns true if this context is the current one in this thread.",11,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"get_proc_address","","Returns the address of an OpenGL function.",11,null],[10,"swap_buffers","","Swaps the buffers in case of double or triple buffering.",11,{"i":[{"n":"self"}],"o":{"g":["contexterror"],"n":"result"}}],[10,"get_api","","Returns the OpenGL API being used.",11,{"i":[{"n":"self"}],"o":{"n":"api"}}],[10,"get_pixel_format","","Returns the pixel format of the main framebuffer of the context.",11,{"i":[{"n":"self"}],"o":{"n":"pixelformat"}}],[10,"resize","","Resize the GL context.",11,null],[3,"Context","","Represents an OpenGL context.",null,null],[3,"ContextBuilder","","Object that allows you to build `Context`s.",null,null],[12,"gl_attr","","The attributes to use to create the context.",12,null],[3,"GlWindow","","Represents an OpenGL context and a Window with which it is associated.",null,null],[4,"CreationError","","Error that can happen while creating a window or a headless renderer.",null,null],[13,"OsError","","",13,null],[13,"NotSupported","","TODO: remove this error",13,null],[13,"NoBackendAvailable","","",13,null],[13,"RobustnessNotSupported","","",13,null],[13,"OpenGlVersionNotSupported","","",13,null],[13,"NoAvailablePixelFormat","","",13,null],[13,"PlatformSpecific","","",13,null],[13,"Window","","",13,null],[4,"ContextError","","Error that can happen when manipulating an OpenGL context.",null,null],[13,"IoError","","",14,null],[13,"ContextLost","","",14,null],[4,"Api","","All APIs related to OpenGL that you can possibly get while using glutin.",null,null],[13,"OpenGl","","The classical OpenGL. Available on Windows, Linux, OS/X.",15,null],[13,"OpenGlEs","","OpenGL embedded system. Available on Linux, Android.",15,null],[13,"WebGl","","OpenGL for the web. Very similar to OpenGL ES.",15,null],[4,"GlProfile","","Describes the requested OpenGL context profiles.",null,null],[13,"Compatibility","","Include all the immediate more functions and definitions.",16,null],[13,"Core","","Include all the future-compatible functions and definitions.",16,null],[4,"GlRequest","","Describes the OpenGL API and version that are being requested when a context is created.",null,null],[13,"Latest","","Request the latest version of the \"best\" API of this platform.",17,null],[13,"Specific","","Request a specific version of a specific API.",17,null],[13,"GlThenGles","","If OpenGL is available, create an OpenGL context with the specified `opengl_version`. Else if OpenGL ES or WebGL is available, create a context with the specified `opengles_version`.",17,null],[12,"opengl_version","conrod::backend::glium::glium::backend::glutin::glutin::GlRequest","The version to use for OpenGL.",17,null],[12,"opengles_version","","The version to use for OpenGL ES.",17,null],[7,"GL_CORE","conrod::backend::glium::glium::backend::glutin::glutin","The minimum core profile GL context. Useful for getting the minimum required GL version while still running on OSX, which often forbids the compatibility profile features.",null,null],[4,"Robustness","","Specifies the tolerance of the OpenGL context to faults. If you accept raw OpenGL commands and/or raw shader code from an untrusted source, you should definitely care about this.",null,null],[13,"NotRobust","","Not everything is checked. Your application can crash if you do something wrong with your shaders.",18,null],[13,"NoError","","The driver doesn't check anything. This option is very dangerous. Please know what you're doing before using it. See the `GL_KHR_no_error` extension.",18,null],[13,"RobustNoResetNotification","","Everything is checked to avoid any crash. The driver will attempt to avoid any problem, but if a problem occurs the behavior is implementation-defined. You are just guaranteed not to get a crash.",18,null],[13,"TryRobustNoResetNotification","","Same as `RobustNoResetNotification` but the context creation doesn't fail if it's not supported.",18,null],[13,"RobustLoseContextOnReset","","Everything is checked to avoid any crash. If a problem occurs, the context will enter a \"context lost\" state. It must then be recreated. For the moment, glutin doesn't provide a way to recreate a context with the same window :-/",18,null],[13,"TryRobustLoseContextOnReset","","Same as `RobustLoseContextOnReset` but the context creation doesn't fail if it's not supported.",18,null],[4,"ReleaseBehavior","","The behavior of the driver when you change the current context.",null,null],[13,"None","","Doesn't do anything. Most notably doesn't flush.",19,null],[13,"Flush","","Flushes the context that was previously current as if `glFlush` was called.",19,null],[3,"PixelFormat","","Describes a possible format. Unused.",null,null],[12,"hardware_accelerated","","",20,null],[12,"color_bits","","",20,null],[12,"alpha_bits","","",20,null],[12,"depth_bits","","",20,null],[12,"stencil_bits","","",20,null],[12,"stereoscopy","","",20,null],[12,"double_buffer","","",20,null],[12,"multisampling","","",20,null],[12,"srgb","","",20,null],[3,"PixelFormatRequirements","","Describes how the backend should choose a pixel format.",null,null],[12,"hardware_accelerated","","If true, only hardware-accelerated formats will be considered. If false, only software renderers. `None` means \"don't care\". Default is `Some(true)`.",21,null],[12,"color_bits","","Minimum number of bits for the color buffer, excluding alpha. `None` means \"don't care\". The default is `Some(24)`.",21,null],[12,"float_color_buffer","","If true, the color buffer must be in a floating point format. Default is `false`.",21,null],[12,"alpha_bits","","Minimum number of bits for the alpha in the color buffer. `None` means \"don't care\". The default is `Some(8)`.",21,null],[12,"depth_bits","","Minimum number of bits for the depth buffer. `None` means \"don't care\". The default value is `Some(24)`.",21,null],[12,"stencil_bits","","Minimum number of bits for the depth buffer. `None` means \"don't care\". The default value is `Some(8)`.",21,null],[12,"double_buffer","","If true, only double-buffered formats will be considered. If false, only single-buffer formats. `None` means \"don't care\". The default is `Some(true)`.",21,null],[12,"multisampling","","Contains the minimum number of samples per pixel in the color, depth and stencil buffers. `None` means \"don't care\". Default is `None`. A value of `Some(0)` indicates that multisampling must not be enabled.",21,null],[12,"stereoscopy","","If true, only stereoscopic formats will be considered. If false, only non-stereoscopic formats. The default is `false`.",21,null],[12,"srgb","","If true, only sRGB-capable formats will be considered. If false, don't care. The default is `false`.",21,null],[12,"release_behavior","","The behavior when changing the current context. Default is `Flush`.",21,null],[3,"GlAttributes","","Attributes to use when creating an OpenGL context.",null,null],[12,"sharing","","An existing context to share the new the context with.",22,null],[12,"version","","Version to try create. See `GlRequest` for more infos.",22,null],[12,"profile","","OpenGL profile to use.",22,null],[12,"debug","","Whether to enable the `debug` flag of the context.",22,null],[12,"robustness","","How the OpenGL context should detect errors.",22,null],[12,"vsync","","Whether to use vsync. If vsync is enabled, calling `swap_buffers` will block until the screen refreshes. This is typically used to prevent screen tearing.",22,null],[6,"AxisId","","Identifier for a specific analog axis on some device.",null,null],[4,"Event","","Describes a generic event.",null,null],[13,"WindowEvent","","",23,null],[12,"window_id","conrod::backend::glium::glium::backend::glutin::glutin::Event","",23,null],[12,"event","","",23,null],[13,"DeviceEvent","conrod::backend::glium::glium::backend::glutin::glutin","",23,null],[12,"device_id","conrod::backend::glium::glium::backend::glutin::glutin::Event","",23,null],[12,"event","","",23,null],[13,"Awakened","conrod::backend::glium::glium::backend::glutin::glutin","",23,null],[13,"Suspended","","The application has been suspended or resumed.",23,null],[4,"MouseButton","","Describes a button of a mouse controller.",null,null],[13,"Left","","",24,null],[13,"Right","","",24,null],[13,"Middle","","",24,null],[13,"Other","","",24,null],[3,"KeyboardInput","","Describes a keyboard input event.",null,null],[12,"scancode","","Identifies the physical key pressed",25,null],[12,"state","","",25,null],[12,"virtual_keycode","","Identifies the semantic meaning of the key",25,null],[12,"modifiers","","Modifier keys active at the time of this input.",25,null],[3,"WindowAttributes","","Attributes to use when creating a window.",null,null],[12,"dimensions","","The dimensions of the window. If this is `None`, some platform-specific dimensions will be used.",26,null],[12,"min_dimensions","","The minimum dimensions a window can be, If this is `None`, the window will have no minimum dimensions (aside from reserved).",26,null],[12,"max_dimensions","","The maximum dimensions a window can be, If this is `None`, the maximum will have no maximum or will be set to the primary monitor's dimensions by the platform.",26,null],[12,"fullscreen","","Whether the window should be set as fullscreen upon creation.",26,null],[12,"title","","The title of the window in the title bar.",26,null],[12,"maximized","","Whether the window should be maximized upon creation.",26,null],[12,"visible","","Whether the window should be immediately visible upon creation.",26,null],[12,"transparent","","Whether the the window should be transparent. If this is true, writing colors with alpha values different than `1.0` will produce a transparent window.",26,null],[12,"decorations","","Whether the window should have borders and bars.",26,null],[12,"multitouch","","[iOS only] Enable multitouch, see multipleTouchEnabled",26,null],[4,"WindowCreationError","","Error that can happen while creating a window or a headless renderer.",null,null],[13,"OsError","","",27,null],[13,"NotSupported","","TODO: remove this error",27,null],[4,"ElementState","","Describes the input state of a key.",null,null],[13,"Pressed","","",28,null],[13,"Released","","",28,null],[3,"MonitorId","","Identifier for a monitor.",null,null],[3,"Touch","","Represents touch event",null,null],[12,"device_id","","",29,null],[12,"phase","","",29,null],[12,"location","","",29,null],[12,"id","","unique identifier of a finger.",29,null],[3,"EventsLoopProxy","","Used to wake up the `EventsLoop` from another thread.",null,null],[3,"AvailableMonitorsIter","","An iterator for the list of available monitors.",null,null],[3,"DeviceId","","Identifier of an input device.",null,null],[6,"ScanCode","","Hardware-dependent keyboard scan code.",null,null],[3,"EventsLoopClosed","","The error that is returned when an `EventsLoopProxy` attempts to wake up an `EventsLoop` that no longer exists.",null,null],[3,"Window","","Represents a window.",null,null],[3,"WindowId","","Identifier of a window. Unique for each window.",null,null],[4,"MouseScrollDelta","","Describes a difference in the mouse scroll wheel state.",null,null],[13,"LineDelta","","Amount in lines or rows to scroll in the horizontal and vertical directions.",30,null],[13,"PixelDelta","","Amount in pixels to scroll in the horizontal and vertical direction.",30,null],[4,"VirtualKeyCode","","Symbolic name for a keyboard key.",null,null],[13,"Key1","","The '1' key over the letters.",31,null],[13,"Key2","","The '2' key over the letters.",31,null],[13,"Key3","","The '3' key over the letters.",31,null],[13,"Key4","","The '4' key over the letters.",31,null],[13,"Key5","","The '5' key over the letters.",31,null],[13,"Key6","","The '6' key over the letters.",31,null],[13,"Key7","","The '7' key over the letters.",31,null],[13,"Key8","","The '8' key over the letters.",31,null],[13,"Key9","","The '9' key over the letters.",31,null],[13,"Key0","","The '0' key over the 'O' and 'P' keys.",31,null],[13,"A","","",31,null],[13,"B","","",31,null],[13,"C","","",31,null],[13,"D","","",31,null],[13,"E","","",31,null],[13,"F","","",31,null],[13,"G","","",31,null],[13,"H","","",31,null],[13,"I","","",31,null],[13,"J","","",31,null],[13,"K","","",31,null],[13,"L","","",31,null],[13,"M","","",31,null],[13,"N","","",31,null],[13,"O","","",31,null],[13,"P","","",31,null],[13,"Q","","",31,null],[13,"R","","",31,null],[13,"S","","",31,null],[13,"T","","",31,null],[13,"U","","",31,null],[13,"V","","",31,null],[13,"W","","",31,null],[13,"X","","",31,null],[13,"Y","","",31,null],[13,"Z","","",31,null],[13,"Escape","","The Escape key, next to F1.",31,null],[13,"F1","","",31,null],[13,"F2","","",31,null],[13,"F3","","",31,null],[13,"F4","","",31,null],[13,"F5","","",31,null],[13,"F6","","",31,null],[13,"F7","","",31,null],[13,"F8","","",31,null],[13,"F9","","",31,null],[13,"F10","","",31,null],[13,"F11","","",31,null],[13,"F12","","",31,null],[13,"F13","","",31,null],[13,"F14","","",31,null],[13,"F15","","",31,null],[13,"Snapshot","","Print Screen/SysRq.",31,null],[13,"Scroll","","Scroll Lock.",31,null],[13,"Pause","","Pause/Break key, next to Scroll lock.",31,null],[13,"Insert","","`Insert`, next to Backspace.",31,null],[13,"Home","","",31,null],[13,"Delete","","",31,null],[13,"End","","",31,null],[13,"PageDown","","",31,null],[13,"PageUp","","",31,null],[13,"Left","","",31,null],[13,"Up","","",31,null],[13,"Right","","",31,null],[13,"Down","","",31,null],[13,"Back","","The Backspace key, right over Enter.",31,null],[13,"Return","","The Enter key.",31,null],[13,"Space","","The space bar.",31,null],[13,"Compose","","The \"Compose\" key on Linux.",31,null],[13,"Caret","","",31,null],[13,"Numlock","","",31,null],[13,"Numpad0","","",31,null],[13,"Numpad1","","",31,null],[13,"Numpad2","","",31,null],[13,"Numpad3","","",31,null],[13,"Numpad4","","",31,null],[13,"Numpad5","","",31,null],[13,"Numpad6","","",31,null],[13,"Numpad7","","",31,null],[13,"Numpad8","","",31,null],[13,"Numpad9","","",31,null],[13,"AbntC1","","",31,null],[13,"AbntC2","","",31,null],[13,"Add","","",31,null],[13,"Apostrophe","","",31,null],[13,"Apps","","",31,null],[13,"At","","",31,null],[13,"Ax","","",31,null],[13,"Backslash","","",31,null],[13,"Calculator","","",31,null],[13,"Capital","","",31,null],[13,"Colon","","",31,null],[13,"Comma","","",31,null],[13,"Convert","","",31,null],[13,"Decimal","","",31,null],[13,"Divide","","",31,null],[13,"Equals","","",31,null],[13,"Grave","","",31,null],[13,"Kana","","",31,null],[13,"Kanji","","",31,null],[13,"LAlt","","",31,null],[13,"LBracket","","",31,null],[13,"LControl","","",31,null],[13,"LMenu","","",31,null],[13,"LShift","","",31,null],[13,"LWin","","",31,null],[13,"Mail","","",31,null],[13,"MediaSelect","","",31,null],[13,"MediaStop","","",31,null],[13,"Minus","","",31,null],[13,"Multiply","","",31,null],[13,"Mute","","",31,null],[13,"MyComputer","","",31,null],[13,"NavigateForward","","",31,null],[13,"NavigateBackward","","",31,null],[13,"NextTrack","","",31,null],[13,"NoConvert","","",31,null],[13,"NumpadComma","","",31,null],[13,"NumpadEnter","","",31,null],[13,"NumpadEquals","","",31,null],[13,"OEM102","","",31,null],[13,"Period","","",31,null],[13,"PlayPause","","",31,null],[13,"Power","","",31,null],[13,"PrevTrack","","",31,null],[13,"RAlt","","",31,null],[13,"RBracket","","",31,null],[13,"RControl","","",31,null],[13,"RMenu","","",31,null],[13,"RShift","","",31,null],[13,"RWin","","",31,null],[13,"Semicolon","","",31,null],[13,"Slash","","",31,null],[13,"Sleep","","",31,null],[13,"Stop","","",31,null],[13,"Subtract","","",31,null],[13,"Sysrq","","",31,null],[13,"Tab","","",31,null],[13,"Underline","","",31,null],[13,"Unlabeled","","",31,null],[13,"VolumeDown","","",31,null],[13,"VolumeUp","","",31,null],[13,"Wake","","",31,null],[13,"WebBack","","",31,null],[13,"WebFavorites","","",31,null],[13,"WebForward","","",31,null],[13,"WebHome","","",31,null],[13,"WebRefresh","","",31,null],[13,"WebSearch","","",31,null],[13,"WebStop","","",31,null],[13,"Yen","","",31,null],[4,"ControlFlow","","Returned by the user callback given to the `EventsLoop::run_forever` method.",null,null],[13,"Continue","","Continue looping and waiting for events.",32,null],[13,"Break","","Break from the event loop.",32,null],[4,"DeviceEvent","","Represents raw hardware events that are not associated with any particular window.",null,null],[13,"Added","","",33,null],[13,"Removed","","",33,null],[13,"MouseMotion","","Change in physical position of a pointing device.",33,null],[12,"delta","conrod::backend::glium::glium::backend::glutin::glutin::DeviceEvent","(x, y) change in position in unspecified units.",33,null],[13,"MouseWheel","conrod::backend::glium::glium::backend::glutin::glutin","Physical scroll event",33,null],[12,"delta","conrod::backend::glium::glium::backend::glutin::glutin::DeviceEvent","",33,null],[13,"Motion","conrod::backend::glium::glium::backend::glutin::glutin","Motion on some analog axis.  This event will be reported for all arbitrary input devices that winit supports on this platform, including mouse devices.  If the device is a mouse device then this will be reported alongside the MouseMotion event.",33,null],[12,"axis","conrod::backend::glium::glium::backend::glutin::glutin::DeviceEvent","",33,null],[12,"value","","",33,null],[13,"Button","conrod::backend::glium::glium::backend::glutin::glutin","",33,null],[12,"button","conrod::backend::glium::glium::backend::glutin::glutin::DeviceEvent","",33,null],[12,"state","","",33,null],[13,"Key","conrod::backend::glium::glium::backend::glutin::glutin","",33,null],[13,"Text","","",33,null],[12,"codepoint","conrod::backend::glium::glium::backend::glutin::glutin::DeviceEvent","",33,null],[4,"WindowEvent","conrod::backend::glium::glium::backend::glutin::glutin","Describes an event from a `Window`.",null,null],[13,"Resized","","The size of the window has changed.",34,null],[13,"Moved","","The position of the window has changed.",34,null],[13,"Closed","","The window has been closed.",34,null],[13,"DroppedFile","","A file has been dropped into the window.",34,null],[13,"HoveredFile","","A file is being hovered over the window.",34,null],[13,"HoveredFileCancelled","","A file was hovered, but has exited the window.",34,null],[13,"ReceivedCharacter","","The window received a unicode character.",34,null],[13,"Focused","","The window gained or lost focus.",34,null],[13,"KeyboardInput","","An event from the keyboard has been received.",34,null],[12,"device_id","conrod::backend::glium::glium::backend::glutin::glutin::WindowEvent","",34,null],[12,"input","","",34,null],[13,"CursorMoved","conrod::backend::glium::glium::backend::glutin::glutin","The cursor has moved on the window.",34,null],[12,"device_id","conrod::backend::glium::glium::backend::glutin::glutin::WindowEvent","",34,null],[12,"position","","(x,y) coords in pixels relative to the top-left corner of the window. Because the range of this data is limited by the display area and it may have been transformed by the OS to implement effects such as cursor acceleration, it should not be used to implement non-cursor-like interactions such as 3D camera control.",34,null],[12,"modifiers","","",34,null],[13,"CursorEntered","conrod::backend::glium::glium::backend::glutin::glutin","The cursor has entered the window.",34,null],[12,"device_id","conrod::backend::glium::glium::backend::glutin::glutin::WindowEvent","",34,null],[13,"CursorLeft","conrod::backend::glium::glium::backend::glutin::glutin","The cursor has left the window.",34,null],[12,"device_id","conrod::backend::glium::glium::backend::glutin::glutin::WindowEvent","",34,null],[13,"MouseWheel","conrod::backend::glium::glium::backend::glutin::glutin","A mouse wheel movement or touchpad scroll occurred.",34,null],[12,"device_id","conrod::backend::glium::glium::backend::glutin::glutin::WindowEvent","",34,null],[12,"delta","","",34,null],[12,"phase","","",34,null],[12,"modifiers","","",34,null],[13,"MouseInput","conrod::backend::glium::glium::backend::glutin::glutin","An mouse button press has been received.",34,null],[12,"device_id","conrod::backend::glium::glium::backend::glutin::glutin::WindowEvent","",34,null],[12,"state","","",34,null],[12,"button","","",34,null],[12,"modifiers","","",34,null],[13,"TouchpadPressure","conrod::backend::glium::glium::backend::glutin::glutin","Touchpad pressure event.",34,null],[12,"device_id","conrod::backend::glium::glium::backend::glutin::glutin::WindowEvent","",34,null],[12,"pressure","","",34,null],[12,"stage","","",34,null],[13,"AxisMotion","conrod::backend::glium::glium::backend::glutin::glutin","Motion on some analog axis. May report data redundant to other, more specific events.",34,null],[12,"device_id","conrod::backend::glium::glium::backend::glutin::glutin::WindowEvent","",34,null],[12,"axis","","",34,null],[12,"value","","",34,null],[13,"Refresh","conrod::backend::glium::glium::backend::glutin::glutin","The window needs to be redrawn.",34,null],[13,"Touch","","Touch event has been received",34,null],[13,"HiDPIFactorChanged","","DPI scaling factor of the window has changed.",34,null],[3,"HeadlessRendererBuilder","","Object that allows you to build headless contexts.",null,null],[12,"dimensions","","The dimensions to use.",35,null],[12,"opengl","","The OpenGL attributes to build the context with.",35,null],[3,"EventsLoop","","Provides a way to retreive events from the system and from the windows that were registered to the events loop.",null,null],[3,"ModifiersState","","Represents the current state of the keyboard modifiers",null,null],[12,"shift","","The \"shift\" key",36,null],[12,"ctrl","","The \"control\" key",36,null],[12,"alt","","The \"alt\" key",36,null],[12,"logo","","The \"logo\" key",36,null],[4,"TouchPhase","","Describes touch-screen input state.",null,null],[13,"Started","","",37,null],[13,"Moved","","",37,null],[13,"Ended","","",37,null],[13,"Cancelled","","",37,null],[6,"ButtonId","","Identifier for a specific button on some device.",null,null],[3,"HeadlessContext","","Represents a headless OpenGL context.",null,null],[4,"CursorState","","Describes how winit handles the cursor.",null,null],[13,"Normal","","Normal cursor behavior.",38,null],[13,"Hide","","The cursor will be invisible when over the window.",38,null],[13,"Grab","","Grabs the mouse cursor. The cursor's motion will be confined to this window and the window has exclusive access to further events regarding the cursor.",38,null],[4,"MouseCursor","","Describes the appearance of the mouse cursor.",null,null],[13,"Default","","The platform-dependent default cursor.",39,null],[13,"Crosshair","","A simple crosshair.",39,null],[13,"Hand","","A hand (often used to indicate links in web browsers).",39,null],[13,"Arrow","","Self explanatory.",39,null],[13,"Move","","Indicates something is to be moved.",39,null],[13,"Text","","Indicates text that may be selected or edited.",39,null],[13,"Wait","","Program busy indicator.",39,null],[13,"Help","","Help indicator (often rendered as a \"?\")",39,null],[13,"Progress","","Progress indicator. Shows that processing is being done. But in contrast with \"Wait\" the user may still interact with the program. Often rendered as a spinning beach ball, or an arrow with a watch or hourglass.",39,null],[13,"NotAllowed","","Cursor showing that something cannot be done.",39,null],[13,"ContextMenu","","",39,null],[13,"NoneCursor","","",39,null],[13,"Cell","","",39,null],[13,"VerticalText","","",39,null],[13,"Alias","","",39,null],[13,"Copy","","",39,null],[13,"NoDrop","","",39,null],[13,"Grab","","",39,null],[13,"Grabbing","","",39,null],[13,"AllScroll","","",39,null],[13,"ZoomIn","","",39,null],[13,"ZoomOut","","",39,null],[13,"EResize","","Indicate that some edge is to be moved. For example, the 'SeResize' cursor is used when the movement starts from the south-east corner of the box.",39,null],[13,"NResize","","",39,null],[13,"NeResize","","",39,null],[13,"NwResize","","",39,null],[13,"SResize","","",39,null],[13,"SeResize","","",39,null],[13,"SwResize","","",39,null],[13,"WResize","","",39,null],[13,"EwResize","","",39,null],[13,"NsResize","","",39,null],[13,"NeswResize","","",39,null],[13,"NwseResize","","",39,null],[13,"ColResize","","",39,null],[13,"RowResize","","",39,null],[3,"WindowBuilder","","Object that allows you to build windows.",null,null],[12,"window","","The attributes to use to create the window.",40,null],[8,"Backend","conrod::backend::glium::glium::backend","Trait for types that can be used as a backend for a glium context.",null,null],[10,"swap_buffers","","Swaps buffers at the end of a frame.",41,{"i":[{"n":"self"}],"o":{"g":["swapbufferserror"],"n":"result"}}],[10,"get_proc_address","","Returns the address of an OpenGL function.",41,null],[10,"get_framebuffer_dimensions","","Returns the dimensions of the window, or screen, etc.",41,null],[10,"is_current","","Returns true if the OpenGL context is the current one in the thread.",41,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"make_current","","Makes the OpenGL context the current context in the current thread.",41,null],[8,"Facade","","Trait for types that provide a safe access for glium functions.",null,null],[10,"get_context","","Returns an opaque type that contains the OpenGL state, extensions, version, etc.",42,{"i":[{"n":"self"}],"o":{"n":"rc"}}],[3,"Context","","Stores the state and information required for glium to execute commands. Most public glium functions require passing a `Rc<Context>`.",null,null],[4,"ReleaseBehavior","","Defines what happens when you change the current context.",null,null],[13,"None","","Nothing is done when using another context.",43,null],[13,"Flush","","The commands queue of the current context is flushed.",43,null],[0,"buffer","conrod::backend::glium::glium","A buffer is a memory location accessible to the video card.",null,null],[8,"Content","conrod::backend::glium::glium::buffer","Trait for types of data that can be put inside buffers.",null,null],[16,"Owned","","A type that holds a sized version of the content.",44,null],[10,"read","","Prepares an output buffer, then turns this buffer into an `Owned`.",44,{"i":[{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"get_elements_size","","Returns the size of each element.",44,{"o":{"n":"usize"}}],[10,"to_void_ptr","","Produces a pointer to the data.",44,null],[10,"ref_from_ptr","","Builds a pointer to this type from a raw pointer.",44,null],[10,"is_size_suitable","","Returns true if the size is suitable to store a type like this.",44,{"i":[{"n":"usize"}],"o":{"n":"bool"}}],[4,"BufferCreationError","","Error that can happen when creating a buffer.",null,null],[13,"OutOfMemory","","Not enough memory to create the buffer.",45,null],[13,"BufferTypeNotSupported","","This type of buffer is not supported.",45,null],[4,"BufferMode","","How the buffer is created.",null,null],[13,"Default","","This is the default mode suitable for any usage. Will never be slow, will never be fast either.",46,null],[13,"Dynamic","","The mode to use when you modify a buffer multiple times per frame. Similar to `Default` in that it is suitable for most usages.",46,null],[13,"Persistent","","Optimized for when you modify a buffer exactly once per frame. You can modify it more than once per frame, but if you modify it too often things will slow down.",46,null],[13,"Immutable","","Optimized when you will never touch the content of the buffer.",46,null],[4,"BufferType","","Type of a buffer.",null,null],[13,"ArrayBuffer","","",47,null],[13,"PixelPackBuffer","","",47,null],[13,"PixelUnpackBuffer","","",47,null],[13,"UniformBuffer","","",47,null],[13,"CopyReadBuffer","","",47,null],[13,"CopyWriteBuffer","","",47,null],[13,"AtomicCounterBuffer","","",47,null],[13,"DispatchIndirectBuffer","","",47,null],[13,"DrawIndirectBuffer","","",47,null],[13,"QueryBuffer","","",47,null],[13,"ShaderStorageBuffer","","",47,null],[13,"TextureBuffer","","",47,null],[13,"TransformFeedbackBuffer","","",47,null],[13,"ElementArrayBuffer","","",47,null],[3,"BufferViewMutSlice","","Represents a sub-part of a buffer.",null,null],[3,"Buffer","","Represents a view of a buffer.",null,null],[3,"WriteMapping","","A mapping of a buffer for write only.",null,null],[5,"is_buffer_read_supported","","Returns true if reading from a buffer is supported by the backend.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[3,"BufferAnySlice","","Slice of a `Buffer` without any type info.",null,null],[3,"BufferViewSlice","","Represents a sub-part of a buffer.",null,null],[4,"CopyError","","Error that can happen when copying data between buffers.",null,null],[13,"NotSupported","","The backend doesn't support copying between buffers.",48,null],[4,"ReadError","","Error that can happen when reading from a buffer.",null,null],[13,"NotSupported","","The backend doesn't support reading from a buffer.",49,null],[13,"ContextLost","","The context has been lost. Reading from the buffer would return garbage data.",49,null],[3,"Mapping","","A mapping of a buffer for reading and writing.",null,null],[3,"BufferViewAny","","Represents a sub-part of a buffer.",null,null],[3,"Inserter","","Allows inserting a fence in the list.",null,null],[3,"ReadMapping","","A mapping of a buffer for reading.",null,null],[0,"debug","conrod::backend::glium::glium","",null,null],[6,"DebugCallback","conrod::backend::glium::glium::debug","Represents a callback that can be used for the debug output feature of OpenGL.",null,null],[4,"Severity","","Severity of a debug message.",null,null],[13,"Notification","","Anything that isn't an error or performance issue.",50,null],[13,"Low","","Redundant state-change performance warning, or unimportant undefined behavior.",50,null],[13,"Medium","","Major performance warnings, shader compilation/linking warnings, or the use of deprecated functionality.",50,null],[13,"High","","All OpenGL Errors, shader compilation/linking errors, or highly-dangerous undefined behavior.",50,null],[4,"Source","","Source of a debug message.",null,null],[13,"Api","","Calls to the OpenGL API.",51,null],[13,"WindowSystem","","Calls to a window-system API.",51,null],[13,"ShaderCompiler","","A compiler for a shading language.",51,null],[13,"ThirdParty","","An application associated with Openctxt.gl.",51,null],[13,"Application","","Explicitly generated by Glium or the application.",51,null],[13,"OtherSource","","",51,null],[4,"MessageType","","Type of a debug message.",null,null],[13,"Error","","An error, typically from the API",52,null],[13,"DeprecatedBehavior","","Some behavior marked deprecated has been used",52,null],[13,"UndefinedBehavior","","Something has invoked undefined behavior",52,null],[13,"Portability","","Some functionality the user relies upon is not portable",52,null],[13,"Performance","","Code has triggered possible performance issues",52,null],[13,"Marker","","Command stream annotation",52,null],[13,"PushGroup","","Entering a debug group",52,null],[13,"PopGroup","","Leaving a debug group",52,null],[13,"Other","","Any other event",52,null],[3,"TimestampQuery","","Allows you to obtain the timestamp inside the OpenGL commands queue.",null,null],[4,"DebugCallbackBehavior","","Describes the behavior that the debug output should have.",null,null],[13,"Ignore","","Don't do anything. This is the default behavior in release.",53,null],[13,"DebugMessageOnError","","Print a message on stdout on error, except in some circumstances like when compiling shaders. This is the default behavior in debug mode.",53,null],[13,"PrintAll","","Print every single output received by the driver.",53,null],[13,"Custom","","Use a custom callback.",53,null],[12,"callback","conrod::backend::glium::glium::debug::DebugCallbackBehavior","The function to be called.",53,null],[12,"synchronous","","Whether or not it should be called immediately (true) or asynchronously (false).",53,null],[0,"draw_parameters","conrod::backend::glium::glium","Describes miscellaneous parameters to be used when drawing.",null,null],[4,"BackfaceCullingMode","conrod::backend::glium::glium::draw_parameters","Describes how triangles should be filtered before the fragment processing. Backface culling is purely an optimization. If you don't know what this does, just use `CullingDisabled`.",null,null],[13,"CullingDisabled","","All triangles are always drawn.",54,null],[13,"CullCounterClockwise","","Triangles whose vertices are counterclockwise won't be drawn.",54,null],[13,"CullClockwise","","Triangles whose vertices are clockwise won't be drawn.",54,null],[4,"PolygonMode","","Defines how the device should render polygons.",null,null],[13,"Point","","Only draw a single point at each vertex.",55,null],[13,"Line","","Only draw a line in the boundaries of each polygon.",55,null],[13,"Fill","","Fill the content of the polygon. This is the default mode.",55,null],[4,"Smooth","","Specifies a hint for the smoothing.",null,null],[13,"Fastest","","The most efficient option should be chosen.",56,null],[13,"Nicest","","The most correct, or highest quality, option should be chosen.",56,null],[13,"DontCare","","No preference.",56,null],[4,"ProvokingVertex","","The vertex to use for flat shading.",null,null],[13,"LastVertex","","Use the last vertex of each primitive.",57,null],[13,"FirstVertex","","Use the first vertex of each primitive.",57,null],[3,"DrawParameters","","Represents the parameters to use when drawing.",null,null],[12,"depth","","How the fragment will interact with the depth buffer.",58,null],[12,"stencil","","How the fragment will interact with the stencil buffer.",58,null],[12,"blend","","The effect that the GPU will use to merge the existing pixel with the pixel that is being written.",58,null],[12,"color_mask","","Allows you to disable some color components.",58,null],[12,"line_width","","Width in pixels of the lines to draw when drawing lines.",58,null],[12,"point_size","","Diameter in pixels of the points to draw when drawing points.",58,null],[12,"clip_planes_bitmask","","If the bit corresponding to 2^i is 1 in the bitmask, then GL_CLIP_DISTANCEi is enabled.",58,null],[12,"backface_culling","","Whether or not the GPU should filter out some faces.",58,null],[12,"polygon_mode","","How to render polygons. The default value is `Fill`.",58,null],[12,"multisampling","","Whether multisample antialiasing (MSAA) should be used. Default value is `true`.",58,null],[12,"dithering","","Whether dithering is activated. Default value is `true`.",58,null],[12,"viewport","","The viewport to use when drawing.",58,null],[12,"scissor","","If specified, only pixels in this rect will be displayed. Default is `None`.",58,null],[12,"draw_primitives","","If `false`, the pipeline will stop after the primitives generation stage. The default value is `true`.",58,null],[12,"samples_passed_query","","If set, each sample (ie. usually each pixel) written to the output adds one to the counter of the `SamplesPassedQuery`.",58,null],[12,"time_elapsed_query","","If set, the time it took for the GPU to execute this draw command is added to the total stored inside the `TimeElapsedQuery`.",58,null],[12,"primitives_generated_query","","If set, the number of primitives generated is added to the total stored inside the query.",58,null],[12,"transform_feedback_primitives_written_query","","If set, the number of vertices written by transform feedback.",58,null],[12,"condition","","If set, the commands will only be executed if the specified query contains `true` or a number different than 0.",58,null],[12,"transform_feedback","","If set, then the generated primitives will be written back to a buffer.",58,null],[12,"smooth","","If set, then the generated primitives will be smoothed.",58,null],[12,"provoking_vertex","","In your vertex shader or geometry shader, you have the possibility to mark some output varyings as `flat`. If this is the case, the value of one of the vertices will be used for the whole primitive. This variable allows you to specify which vertex.",58,null],[12,"primitive_bounding_box","","Hint for the GPU of the bounding box of the geometry.",58,null],[12,"primitive_restart_index","","If enabled, will split the index buffer (if any is used in the draw call)  at the MAX value of the IndexType (u8::MAX, u16::MAX or u32::MAX) and start a new primitive of the same type (\"primitive restarting\"). Supported on > OpenGL 3.1 or OpenGL ES 3.0.  If the backend does not support GL_PRIMITIVE_RESTART_FIXED_INDEX, an Error  of type `FixedIndexRestartingNotSupported` will be returned.",58,null],[3,"ConditionalRendering","","Condition whether to render or not.",null,null],[12,"query","","The query to use.",59,null],[12,"wait","","If true, the GPU will wait until the query result has been obtained. If false, the GPU is free to ignore the query and draw anyway.",59,null],[12,"per_region","","If true, only samples that match those that were written with the query active will be drawn.",59,null],[4,"SamplesQueryParam","","The query to use for samples counting.",null,null],[13,"SamplesPassedQuery","","A `SamplesPassedQuery`.",60,null],[13,"AnySamplesPassedQuery","","A `AnySamplesPassedQuery`.",60,null],[5,"validate","","DEPRECATED. Checks parameters and returns an error if something is wrong.",null,{"i":[{"n":"context"},{"n":"drawparameters"}],"o":{"g":["drawerror"],"n":"result"}}],[3,"PrimitivesGeneratedQuery","","Query that allows you to know the number of primitives generated by the geometry shader. Will stay at `0` if you use it without any active geometry shader.",null,null],[4,"StencilOperation","","Specificies which operation the GPU will do depending on the result of the stencil test.",null,null],[13,"Keep","","Keeps the value currently in the stencil buffer.",61,null],[13,"Zero","","Writes zero in the stencil buffer.",61,null],[13,"Replace","","Writes the reference value (`stencil_reference_value_clockwise` or `stencil_reference_value_counter_clockwise`) in the stencil buffer.",61,null],[13,"Increment","","Increments the value currently in the stencil buffer. If the value is the maximum, don't do anything.",61,null],[13,"IncrementWrap","","Increments the value currently in the stencil buffer. If the value is the maximum, wrap to `0`.",61,null],[13,"Decrement","","Decrements the value currently in the stencil buffer. If the value is `0`, don't do anything.",61,null],[13,"DecrementWrap","","Decrements the value currently in the stencil buffer. If the value is `0`, wrap to `-1`.",61,null],[13,"Invert","","Inverts each bit of the value.",61,null],[3,"Blend","","Blend effect that the GPU will use for blending.",null,null],[12,"color","","The blending function for color channels.",62,null],[12,"alpha","","The blending function for alpha channels.",62,null],[12,"constant_value","","A constant color that can be used in the blending functions.",62,null],[4,"StencilTest","","Specifies which comparison the GPU will do to determine whether a sample passes the stencil test. The general equation is `(ref & mask) CMP (stencil & mask)`, where `ref` is the reference value (`stencil_reference_value_clockwise` or `stencil_reference_value_counter_clockwise`), `CMP` is the comparison chosen, and `stencil` is the current value in the stencil buffer.",null,null],[13,"AlwaysPass","","The stencil test always passes.",63,null],[13,"AlwaysFail","","The stencil test always fails.",63,null],[13,"IfLess","","`(ref & mask) < (stencil & mask)`",63,null],[12,"mask","conrod::backend::glium::glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",63,null],[13,"IfLessOrEqual","conrod::backend::glium::glium::draw_parameters","`(ref & mask) <= (stencil & mask)`",63,null],[12,"mask","conrod::backend::glium::glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",63,null],[13,"IfMore","conrod::backend::glium::glium::draw_parameters","`(ref & mask) > (stencil & mask)`",63,null],[12,"mask","conrod::backend::glium::glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",63,null],[13,"IfMoreOrEqual","conrod::backend::glium::glium::draw_parameters","`(ref & mask) >= (stencil & mask)`",63,null],[12,"mask","conrod::backend::glium::glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",63,null],[13,"IfEqual","conrod::backend::glium::glium::draw_parameters","`(ref & mask) == (stencil & mask)`",63,null],[12,"mask","conrod::backend::glium::glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",63,null],[13,"IfNotEqual","conrod::backend::glium::glium::draw_parameters","`(ref & mask) != (stencil & mask)`",63,null],[12,"mask","conrod::backend::glium::glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",63,null],[3,"TimeElapsedQuery","conrod::backend::glium::glium::draw_parameters","A query that allows you to know the number of nanoseconds that have elapsed during the draw operations.",null,null],[3,"Stencil","","Describes the parameters that must be used for the stencil operations when drawing.",null,null],[12,"test_clockwise","","A comparison against the existing value in the stencil buffer.",64,null],[12,"reference_value_clockwise","","Reference value that is used by `stencil_test_clockwise`, `stencil_fail_operation_clockwise`, `stencil_pass_depth_fail_operation_clockwise` and `stencil_depth_pass_operation_clockwise`.",64,null],[12,"write_mask_clockwise","","Allows specifying a mask when writing data on the stencil buffer.",64,null],[12,"fail_operation_clockwise","","Specifies the operation to do when a fragment fails the stencil test.",64,null],[12,"pass_depth_fail_operation_clockwise","","Specifies the operation to do when a fragment passes the stencil test but fails the depth test.",64,null],[12,"depth_pass_operation_clockwise","","Specifies the operation to do when a fragment passes both the stencil and depth tests.",64,null],[12,"test_counter_clockwise","","A comparaison against the existing value in the stencil buffer.",64,null],[12,"reference_value_counter_clockwise","","Reference value that is used by `stencil_test_counter_clockwise`, `stencil_fail_operation_counter_clockwise`, `stencil_pass_depth_fail_operation_counter_clockwise` and `stencil_depth_pass_operation_counter_clockwise`.",64,null],[12,"write_mask_counter_clockwise","","Allows specifying a mask when writing data on the stencil buffer.",64,null],[12,"fail_operation_counter_clockwise","","Specifies the operation to do when a fragment fails the stencil test.",64,null],[12,"pass_depth_fail_operation_counter_clockwise","","Specifies the operation to do when a fragment passes the stencil test but fails the depth test.",64,null],[12,"depth_pass_operation_counter_clockwise","","Specifies the operation to do when a fragment passes both the stencil and depth tests.",64,null],[3,"SamplesPassedQuery","","A query that allows you to know the number of samples written to the output during the draw operations where this query was active.",null,null],[4,"DepthClamp","","Specifies whether the depth value of samples should be clamped to `0.0` or `1.0`.",null,null],[13,"NoClamp","","Do not clamp. Samples with values outside of the `[0.0, 1.0]` range will be discarded.",65,null],[13,"Clamp","","Clamp the depth values. All samples will always be drawn.",65,null],[13,"ClampNear","","Depth values inferior to `0.0` will be clamped to `0.0`.",65,null],[13,"ClampFar","","Depth values superior to `1.0` will be clamped to `1.0`.",65,null],[3,"TransformFeedbackPrimitivesWrittenQuery","","Query that allows you to know the number of primitives generated by transform feedback.",null,null],[4,"LinearBlendingFactor","","Indicates which value to multiply each component with.",null,null],[13,"Zero","","Multiply the source or destination component by zero, which always gives `0.0`.",66,null],[13,"One","","Multiply the source or destination component by one, which always gives you the original value.",66,null],[13,"SourceColor","","Multiply the source or destination component by its corresponding value in the source.",66,null],[13,"OneMinusSourceColor","","Equivalent to `1 - SourceColor`.",66,null],[13,"DestinationColor","","Multiply the source or destination component by its corresponding value in the destination.",66,null],[13,"OneMinusDestinationColor","","Equivalent to `1 - DestinationColor`.",66,null],[13,"SourceAlpha","","Multiply the source or destination component by the alpha value of the source.",66,null],[13,"SourceAlphaSaturate","","Multiply the source or destination component by the smallest value of `SourceAlpha` and `1 - DestinationAlpha`.",66,null],[13,"OneMinusSourceAlpha","","Multiply the source or destination component by `1.0` minus the alpha value of the source.",66,null],[13,"DestinationAlpha","","Multiply the source or destination component by the alpha value of the destination.",66,null],[13,"OneMinusDestinationAlpha","","Multiply the source or destination component by `1.0` minus the alpha value of the destination.",66,null],[13,"ConstantColor","","Multiply the source or destination component by the corresponding value in `Blend::const_value`.",66,null],[13,"OneMinusConstantColor","","Multiply the source or destination component by `1.0` minus the corresponding value in `Blend::const_value`.",66,null],[13,"ConstantAlpha","","Multiply the source or destination component by the alpha value of `Blend::const_value`.",66,null],[13,"OneMinusConstantAlpha","","Multiply the source or destination component by `1.0` minus the alpha value of `Blend::const_value`.",66,null],[4,"QueryCreationError","","Error that can happen when creating a query object.",null,null],[13,"NotSupported","","The given query type is not supported.",67,null],[4,"BlendingFunction","","Function that the GPU will use for blending.",null,null],[13,"AlwaysReplace","","Simply overwrite the destination pixel with the source pixel.",68,null],[13,"Min","","For each individual component (red, green, blue, and alpha), the minimum value is chosen between the source and the destination.",68,null],[13,"Max","","For each individual component (red, green, blue, and alpha), the maximum value is chosen between the source and the destination.",68,null],[13,"Addition","","For each individual component (red, green, blue, and alpha), a weighted addition between the source and the destination.",68,null],[12,"source","conrod::backend::glium::glium::draw_parameters::BlendingFunction","The factor to apply to the source pixel.",68,null],[12,"destination","","The factor to apply to the destination pixel.",68,null],[13,"Subtraction","conrod::backend::glium::glium::draw_parameters","For each individual component (red, green, blue, and alpha), a weighted subtraction of the source by the destination.",68,null],[12,"source","conrod::backend::glium::glium::draw_parameters::BlendingFunction","The factor to apply to the source pixel.",68,null],[12,"destination","","The factor to apply to the destination pixel.",68,null],[13,"ReverseSubtraction","conrod::backend::glium::glium::draw_parameters","For each individual component (red, green, blue, and alpha), a weighted subtraction of the destination by the source.",68,null],[12,"source","conrod::backend::glium::glium::draw_parameters::BlendingFunction","The factor to apply to the source pixel.",68,null],[12,"destination","","The factor to apply to the destination pixel.",68,null],[3,"AnySamplesPassedQuery","conrod::backend::glium::glium::draw_parameters","A query type that allows you to know whether any sample has been written to the output during the operations executed with this query.",null,null],[4,"DepthTest","","The function that the GPU will use to determine whether to write over an existing pixel on the target.",null,null],[13,"Ignore","","Never replace the target pixel.",69,null],[13,"Overwrite","","Always replace the target pixel.",69,null],[13,"IfEqual","","Replace if the z-value of the source is equal to the destination.",69,null],[13,"IfNotEqual","","Replace if the z-value of the source is different than the destination.",69,null],[13,"IfMore","","Replace if the z-value of the source is more than the destination.",69,null],[13,"IfMoreOrEqual","","Replace if the z-value of the source is more than, or equal to the destination.",69,null],[13,"IfLess","","Replace if the z-value of the source is less than the destination.",69,null],[13,"IfLessOrEqual","","Replace if the z-value of the source is less than, or equal to the destination.",69,null],[3,"Depth","","Represents the depth parameters of a draw command.",null,null],[12,"test","","The function that the GPU will use to determine whether to write over an existing pixel on the target. Don't forget to set `depth_write` appropriately if you use a depth test.",70,null],[12,"write","","Sets whether the GPU will write the depth values on the depth buffer if they pass the depth test.",70,null],[12,"range","","The range of possible Z values in surface coordinates.",70,null],[12,"clamp","","Sets whether the depth values of samples should be clamped to `0.0` and `1.0`.",70,null],[0,"framebuffer","conrod::backend::glium::glium","Framebuffers allow you to customize the color, depth and stencil buffers you will draw on.",null,null],[3,"SimpleFrameBuffer","conrod::backend::glium::glium::framebuffer","A framebuffer which has only one color attachment.",null,null],[3,"MultiOutputFrameBuffer","","This struct is useless for the moment.",null,null],[3,"EmptyFrameBuffer","","A framebuffer with no attachment at all.",null,null],[4,"ColorAttachment","","Describes an attachment for a color buffer.",null,null],[13,"Texture","","A texture.",71,null],[13,"RenderBuffer","","A render buffer.",71,null],[8,"ToColorAttachment","","Trait for objects that can be used as color attachments.",null,null],[10,"to_color_attachment","","Builds the `ColorAttachment`.",72,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[4,"DepthAttachment","","Describes an attachment for a depth buffer.",null,null],[13,"Texture","","A texture.",73,null],[13,"RenderBuffer","","A render buffer.",73,null],[8,"ToDepthAttachment","","Trait for objects that can be used as depth attachments.",null,null],[10,"to_depth_attachment","","Builds the `DepthAttachment`.",74,{"i":[{"n":"self"}],"o":{"n":"depthattachment"}}],[4,"StencilAttachment","","Describes an attachment for a stencil buffer.",null,null],[13,"Texture","","A texture.",75,null],[13,"RenderBuffer","","A render buffer.",75,null],[8,"ToStencilAttachment","","Trait for objects that can be used as stencil attachments.",null,null],[10,"to_stencil_attachment","","Builds the `StencilAttachment`.",76,{"i":[{"n":"self"}],"o":{"n":"stencilattachment"}}],[4,"DepthStencilAttachment","","Describes an attachment for a depth and stencil buffer.",null,null],[13,"Texture","","A texture.",77,null],[13,"RenderBuffer","","A render buffer.",77,null],[8,"ToDepthStencilAttachment","","Trait for objects that can be used as depth and stencil attachments.",null,null],[10,"to_depth_stencil_attachment","","Builds the `DepthStencilAttachment`.",78,{"i":[{"n":"self"}],"o":{"n":"depthstencilattachment"}}],[3,"DefaultFramebuffer","","A framebuffer which has only one color attachment.",null,null],[4,"DefaultFramebufferAttachment","","One of the color attachments on the default framebuffer.",null,null],[13,"BackLeft","","The backbuffer for the left eye. Equivalent to the backbuffer if stereoscopy is disabled.",79,null],[13,"BackRight","","The backbuffer for the right eye. May not be present.",79,null],[13,"FrontLeft","","The frontbuffer for the left eye. Equivalent to the frontbuffer if stereoscopy is disabled. May not be accessible.",79,null],[13,"FrontRight","","The frontbuffer for the right eye. May not be present or accessible.",79,null],[3,"RenderBufferAny","","A RenderBuffer of indeterminate type.",null,null],[5,"is_dimensions_mismatch_supported","","Returns true if the backend supports attachments with varying dimensions.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[4,"RenderBufferCreationError","","Error while creating a render buffer.",null,null],[13,"FormatNotSupported","","The requested format is not supported.",80,null],[3,"DepthRenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target.",null,null],[3,"DepthStencilRenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target.",null,null],[3,"RenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target.",null,null],[3,"StencilRenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target.",null,null],[4,"ValidationError","","An error that can happen while validating attachments.",null,null],[13,"EmptyFramebufferObjectsNotSupported","","You requested an empty framebuffer object, but they are not supported.",81,null],[13,"EmptyFramebufferUnsupportedDimensions","","The requested characteristics of an empty framebuffer object are out of range.",81,null],[13,"DimensionsMismatchNotSupported","","The backend doesn't support attachments with various dimensions.",81,null],[13,"SamplesCountMismatch","","All attachments must have the same number of samples.",81,null],[13,"TooManyColorAttachments","","Backends only support a certain number of color attachments.",81,null],[12,"maximum","conrod::backend::glium::glium::framebuffer::ValidationError","Maximum number of attachments.",81,null],[12,"obtained","","Number of attachments that were given.",81,null],[0,"index","conrod::backend::glium::glium","In order to draw, you need to provide a way for the video card to know how to link primitives together.",null,null],[4,"IndicesSource","conrod::backend::glium::glium::index","Describes a source of indices used for drawing.",null,null],[13,"IndexBuffer","","A buffer uploaded in video memory.",82,null],[12,"buffer","conrod::backend::glium::glium::index::IndicesSource","The buffer.",82,null],[12,"data_type","","Type of indices in the buffer.",82,null],[12,"primitives","","Type of primitives contained in the vertex source.",82,null],[13,"MultidrawArray","conrod::backend::glium::glium::index","Use a multidraw indirect buffer without indices.",82,null],[12,"buffer","conrod::backend::glium::glium::index::IndicesSource","The buffer.",82,null],[12,"primitives","","Type of primitives contained in the vertex source.",82,null],[13,"MultidrawElement","conrod::backend::glium::glium::index","Use a multidraw indirect buffer with indices.",82,null],[12,"commands","conrod::backend::glium::glium::index::IndicesSource","The buffer of the commands.",82,null],[12,"indices","","The buffer of the indices.",82,null],[12,"data_type","","Type of indices in the buffer.",82,null],[12,"primitives","","Type of primitives contained in the vertex source.",82,null],[13,"NoIndices","conrod::backend::glium::glium::index","Don't use indices. Assemble primitives by using the order in which the vertices are in the vertices source.",82,null],[12,"primitives","conrod::backend::glium::glium::index::IndicesSource","Type of primitives contained in the vertex source.",82,null],[4,"PrimitiveType","conrod::backend::glium::glium::index","List of available primitives.",null,null],[13,"Points","","Each vertex is an individual point.",83,null],[13,"LinesList","","Vertices are grouped by chunks of two vertices. Each chunk represents a line.",83,null],[13,"LinesListAdjacency","","Vertices are grouped by chunks of four vertices. The second and third vertices of each chunk represents the line.",83,null],[13,"LineStrip","","Each vertex (except the last one) forms a line with the next vertex.",83,null],[13,"LineStripAdjacency","","Similar to `LineStrip`, but with an additional vertex at the beginning and at the end that represent the vertices adjacent to the first and last ones.",83,null],[13,"LineLoop","","Each vertex forms a line with the next vertex. The last vertex form a line with the first one.",83,null],[13,"TrianglesList","","Vertices are grouped by chunks of three vertices. Each chunk represents a triangle.",83,null],[13,"TrianglesListAdjacency","","Vertices are grouped by chunks of six vertices. The first, third and fifth vertices represent a triangle.",83,null],[13,"TriangleStrip","","Each vertex (except the first one and the last one) forms a triangle with the previous and the next vertices.",83,null],[13,"TriangleStripAdjacency","","Each even vertex forms a triangle with vertices `n+2` and `n+4`.",83,null],[13,"TriangleFan","","Starting at the second vertex, each vertex forms a triangle with the next and the first vertices.",83,null],[13,"Patches","","Vertices are grouped by chunks of `vertices_per_patch` vertices.",83,null],[12,"vertices_per_patch","conrod::backend::glium::glium::index::PrimitiveType","Number of vertices per patch.",83,null],[3,"NoIndices","conrod::backend::glium::glium::index","Marker that can be used as an indices source when you don't need indices.",null,null],[12,"0","","",84,null],[4,"IndexType","","Type of the indices in an index source.",null,null],[13,"U8","","u8",85,null],[13,"U16","","u16",85,null],[13,"U32","","u32",85,null],[8,"Index","","An index from the index buffer.",null,null],[10,"get_type","","Returns the `IndexType` corresponding to this type.",86,{"o":{"n":"indextype"}}],[11,"is_supported","","Returns true if this type of index is supported by the backend.",86,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[3,"IndexBufferSlice","","Slice of an `IndexBuffer`.",null,null],[3,"DrawCommandIndices","","Represents an element in a list of draw commands.",null,null],[12,"count","","Number of indices to use in the index buffer.",87,null],[12,"instance_count","","Number of instances to draw. If it's `0`, nothing will be drawn.",87,null],[12,"first_index","","First index to draw in the index buffer.",87,null],[12,"base_vertex","","Value to add to each index.",87,null],[12,"base_instance","","Numero of the first instance to draw.",87,null],[3,"DrawCommandNoIndices","","Represents an element in a list of draw commands.",null,null],[12,"count","","Number of vertices to draw.",88,null],[12,"instance_count","","Number of instances to draw. If it's `0`, nothing will be drawn.",88,null],[12,"first_index","","First vertex to draw in the vertices source.",88,null],[12,"base_instance","","Numero of the first instance to draw.",88,null],[3,"IndexBufferAny","","An `IndexBuffer` without any type information.",null,null],[3,"DrawCommandsNoIndicesBuffer","","A buffer containing a list of draw commands.",null,null],[3,"DrawCommandsIndicesBuffer","","A buffer containing a list of draw commands.",null,null],[4,"BufferCreationError","","Error that can happen while creating an index buffer.",null,null],[13,"IndexTypeNotSupported","","The type of index is not supported by the backend.",89,null],[13,"PrimitiveTypeNotSupported","","The type of primitives is not supported by the backend.",89,null],[13,"BufferCreationError","","An error happened while creating the buffer.",89,null],[3,"IndexBuffer","","A list of indices loaded in the graphics card's memory.",null,null],[0,"pixel_buffer","conrod::backend::glium::glium","DEPRECATED. Moved to the `texture` module.",null,null],[3,"PixelBuffer","conrod::backend::glium::glium::pixel_buffer","Buffer that stores the content of a texture.",null,null],[0,"program","conrod::backend::glium::glium","Items related to creating an OpenGL program.",null,null],[5,"is_geometry_shader_supported","conrod::backend::glium::glium::program","Returns true if the backend supports geometry shaders.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[5,"is_tessellation_shader_supported","","Returns true if the backend supports tessellation shaders.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[5,"is_binary_supported","","Returns true if the backend supports creating and retrieving binary format.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[5,"is_subroutine_supported","","Returns true if the backend supports shader subroutines.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[4,"ProgramCreationError","","Error that can be triggered when creating a `Program`.",null,null],[13,"CompilationError","","Error while compiling one of the shaders.",90,null],[13,"LinkingError","","Error while linking the program.",90,null],[13,"ShaderTypeNotSupported","","One of the requested shader types is not supported by the backend.",90,null],[13,"CompilationNotSupported","","The OpenGL implementation doesn't provide a compiler.",90,null],[13,"TransformFeedbackNotSupported","","You have requested transform feedback varyings, but transform feedback is not supported by the backend.",90,null],[13,"PointSizeNotSupported","","You have requested point size setting from the shader, but it's not supported by the backend.",90,null],[13,"BinaryHeaderError","","The glium-specific binary header was not found or is corrupt.",90,null],[4,"ProgramChooserCreationError","","Error type that is returned by the `program!` macro.",null,null],[13,"NoVersion","","No available version has been found.",91,null],[13,"ProgramCreationError","","A version has been found but it triggered the given error.",91,null],[4,"GetBinaryError","","Error while retrieving the binary representation of a program.",null,null],[13,"NotSupported","","The backend doesn't support binary.",92,null],[13,"NoFormats","","The backend does not supply any binary formats.",92,null],[4,"ProgramCreationInput","","Input when creating a program.",null,null],[13,"SourceCode","","Use GLSL source code.",93,null],[12,"vertex_shader","conrod::backend::glium::glium::program::ProgramCreationInput","Source code of the vertex shader.",93,null],[12,"tessellation_control_shader","","Source code of the optional tessellation control shader.",93,null],[12,"tessellation_evaluation_shader","","Source code of the optional tessellation evaluation shader.",93,null],[12,"geometry_shader","","Source code of the optional geometry shader.",93,null],[12,"fragment_shader","","Source code of the fragment shader.",93,null],[12,"transform_feedback_varyings","","The list of variables and mode to use for transform feedback.",93,null],[12,"outputs_srgb","","Whether the fragment shader outputs colors in `sRGB` or `RGB`. This is false by default, meaning that the program outputs `RGB`.",93,null],[12,"uses_point_size","","Whether the shader uses point size.",93,null],[13,"Binary","conrod::backend::glium::glium::program","Use a precompiled binary.",93,null],[12,"data","conrod::backend::glium::glium::program::ProgramCreationInput","The data.",93,null],[12,"outputs_srgb","","See `SourceCode::outputs_srgb`.",93,null],[12,"uses_point_size","","Whether the shader uses point size.",93,null],[3,"SourceCode","conrod::backend::glium::glium::program","Represents the source code of a program.",null,null],[12,"vertex_shader","","Source code of the vertex shader.",94,null],[12,"tessellation_control_shader","","Source code of the optional tessellation control shader.",94,null],[12,"tessellation_evaluation_shader","","Source code of the optional tessellation evaluation shader.",94,null],[12,"geometry_shader","","Source code of the optional geometry shader.",94,null],[12,"fragment_shader","","Source code of the fragment shader.",94,null],[3,"Binary","","Represents the compiled binary data of a program.",null,null],[12,"format","","An implementation-defined format.",95,null],[12,"content","","The binary data.",95,null],[3,"TransformFeedbackVarying","","Describes a varying that is being output with transform feedback.",null,null],[12,"name","","Name of the variable.",96,null],[12,"offset","","Number of bytes between the start of the first element and the start of this one.",96,null],[12,"size","","Size in bytes of this value.",96,null],[12,"ty","","Type of the value.",96,null],[3,"ComputeShader","","A combination of compute shaders linked together.",null,null],[3,"TransformFeedbackBuffer","","Describes the layout of a buffer that can receive transform feedback output.",null,null],[12,"id","","Slot of this buffer.",97,null],[12,"elements","","List of elements inside the buffer.",97,null],[12,"stride","","Size in bytes between two consecutive elements.",97,null],[4,"BlockLayout","","Layout of a shader storage buffer or a uniform buffer.",null,null],[13,"Struct","","Multiple elements, each having a name.",98,null],[12,"members","conrod::backend::glium::glium::program::BlockLayout","The list of elements, with `name`/`layout` pairs.",98,null],[13,"BasicType","conrod::backend::glium::glium::program","A basic element.",98,null],[12,"ty","conrod::backend::glium::glium::program::BlockLayout","Type of data.",98,null],[12,"offset_in_buffer","","Offset of this element in bytes from the start of the buffer.",98,null],[13,"Array","conrod::backend::glium::glium::program","A fixed-size array.",98,null],[12,"content","conrod::backend::glium::glium::program::BlockLayout","Type of data of each element.",98,null],[12,"length","","Number of elements in the array.",98,null],[13,"DynamicSizedArray","conrod::backend::glium::glium::program","An array whose size isn't known at compile-time. Can only be used as the last element of a buffer.",98,null],[12,"content","conrod::backend::glium::glium::program::BlockLayout","Type of data of each element.",98,null],[3,"Uniform","conrod::backend::glium::glium::program","Information about a uniform (except its name).",null,null],[12,"location","","The location of the uniform.",99,null],[12,"ty","","Type of the uniform.",99,null],[12,"size","","If it is an array, the number of elements.",99,null],[4,"OutputPrimitives","","Type of primitives that is being output by transform feedback.",null,null],[13,"Points","","Points.",100,null],[13,"Lines","","Lines.",100,null],[13,"Triangles","","Triangles.",100,null],[13,"Quads","","Quads.",100,null],[3,"Program","","A combination of shaders linked together.",null,null],[4,"ShaderStage","","The different stages of the program pipeline.",null,null],[13,"Vertex","","",101,null],[13,"Fragment","","",101,null],[13,"TessellationControl","","",101,null],[13,"TessellationEvaluation","","",101,null],[13,"Geometry","","",101,null],[3,"UniformBlock","","Information about a uniform block (except its name).",null,null],[12,"id","","Identifier of the block.",102,null],[12,"initial_binding","","Initial bind point of the block.",102,null],[12,"size","","Size in bytes of the data in the block.",102,null],[12,"layout","","Layout of the block.",102,null],[3,"SubroutineUniform","","Information about a Subroutine Uniform (except name)",null,null],[12,"index","","The index of the subroutine uniform. Needed to query information from the OpenGL backend.",103,null],[12,"location","","The location of the uniform. This is used to bind subroutines to this subroutine uniform.",103,null],[12,"size","","If the uniform is an array, the size of the array.",103,null],[12,"compatible_subroutines","","A list of subroutines that can potentially be used with this uniform.",103,null],[3,"ComputeCommand","","Represents a compute shader command waiting to be dispatched.",null,null],[12,"num_groups_x","","Number of X groups.",104,null],[12,"num_groups_y","","Number of Y groups.",104,null],[12,"num_groups_z","","Number of Z groups.",104,null],[4,"TransformFeedbackMode","","Type of transform feedback. Only used with the legacy interface.",null,null],[13,"Interleaved","","Each value is interleaved in the same buffer.",105,null],[13,"Separate","","Each value will go in a separate buffer.",105,null],[3,"SubroutineData","","Contains all subroutine data of a program.",null,null],[12,"location_counts","","Number of subroutine uniform locations per shader stage. This is not equal to the number of subroutine uniforms per stage, because users can use `#layout(location=...)`.",106,null],[12,"subroutine_uniforms","","The list of all subroutine uniforms of the program stored in a structured way to enable fast lookups. A subroutine uniform is uniquely defined by a name and a shader stage.",106,null],[3,"Attribute","","Information about an attribute of a program (except its name).",null,null],[12,"location","","The index of the uniform.",107,null],[12,"ty","","Type of the attribute.",107,null],[12,"size","","Number of elements of the attribute.",107,null],[0,"uniforms","conrod::backend::glium::glium","A uniform is a global variable in your program. In order to draw something, you will need to give `glium` the values of all your uniforms. Objects that implement the `Uniform` trait are here to do that.",null,null],[8,"Uniforms","conrod::backend::glium::glium::uniforms","Object that contains the values of all the uniforms to bind to a program.",null,null],[10,"visit_values","","Calls the parameter once with the name and value of each uniform.",108,null],[4,"LayoutMismatchError","","Error about a block layout mismatch.",null,null],[13,"TypeMismatch","","There is a mismatch in the type of one element.",109,null],[12,"expected","conrod::backend::glium::glium::uniforms::LayoutMismatchError","Type expected by the shader.",109,null],[12,"obtained","","Type that you gave.",109,null],[13,"LayoutMismatch","conrod::backend::glium::glium::uniforms","The expected layout is totally different from what we have.",109,null],[12,"expected","conrod::backend::glium::glium::uniforms::LayoutMismatchError","Layout expected by the shader.",109,null],[12,"obtained","","Layout of the input.",109,null],[13,"OffsetMismatch","conrod::backend::glium::glium::uniforms","The type of data is good, but there is a misalignment.",109,null],[12,"expected","conrod::backend::glium::glium::uniforms::LayoutMismatchError","Expected offset of a member.",109,null],[12,"obtained","","Offset of the same member in the input.",109,null],[13,"MemberMismatch","conrod::backend::glium::glium::uniforms","There is a mismatch in a submember of this layout.",109,null],[12,"member","conrod::backend::glium::glium::uniforms::LayoutMismatchError","Name of the field.",109,null],[12,"err","","The sub-error.",109,null],[13,"MissingField","conrod::backend::glium::glium::uniforms","A field is missing in either the expected of the input data layout.",109,null],[12,"name","conrod::backend::glium::glium::uniforms::LayoutMismatchError","Name of the field.",109,null],[8,"AsUniformValue","conrod::backend::glium::glium::uniforms","Value that can be used as the value of a uniform.",null,null],[10,"as_uniform_value","","Builds a `UniformValue`.",110,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[8,"UniformBlock","","Objects that are suitable for being inside a uniform block or a SSBO.",null,null],[10,"matches","","Checks whether the uniforms' layout matches the given block if `Self` starts at the given offset.",111,{"i":[{"n":"blocklayout"},{"n":"usize"}],"o":{"g":["layoutmismatcherror"],"n":"result"}}],[10,"build_layout","","Builds the `BlockLayout` corresponding to the current object.",111,{"i":[{"n":"usize"}],"o":{"n":"blocklayout"}}],[4,"UniformType","","Type of a uniform in a program.",null,null],[13,"Float","","",112,null],[13,"FloatVec2","","",112,null],[13,"FloatVec3","","",112,null],[13,"FloatVec4","","",112,null],[13,"Double","","",112,null],[13,"DoubleVec2","","",112,null],[13,"DoubleVec3","","",112,null],[13,"DoubleVec4","","",112,null],[13,"Int","","",112,null],[13,"IntVec2","","",112,null],[13,"IntVec3","","",112,null],[13,"IntVec4","","",112,null],[13,"UnsignedInt","","",112,null],[13,"UnsignedIntVec2","","",112,null],[13,"UnsignedIntVec3","","",112,null],[13,"UnsignedIntVec4","","",112,null],[13,"Int64","","",112,null],[13,"Int64Vec2","","",112,null],[13,"Int64Vec3","","",112,null],[13,"Int64Vec4","","",112,null],[13,"UnsignedInt64","","",112,null],[13,"UnsignedInt64Vec2","","",112,null],[13,"UnsignedInt64Vec3","","",112,null],[13,"UnsignedInt64Vec4","","",112,null],[13,"Bool","","",112,null],[13,"BoolVec2","","",112,null],[13,"BoolVec3","","",112,null],[13,"BoolVec4","","",112,null],[13,"FloatMat2","","",112,null],[13,"FloatMat3","","",112,null],[13,"FloatMat4","","",112,null],[13,"FloatMat2x3","","",112,null],[13,"FloatMat2x4","","",112,null],[13,"FloatMat3x2","","",112,null],[13,"FloatMat3x4","","",112,null],[13,"FloatMat4x2","","",112,null],[13,"FloatMat4x3","","",112,null],[13,"DoubleMat2","","",112,null],[13,"DoubleMat3","","",112,null],[13,"DoubleMat4","","",112,null],[13,"DoubleMat2x3","","",112,null],[13,"DoubleMat2x4","","",112,null],[13,"DoubleMat3x2","","",112,null],[13,"DoubleMat3x4","","",112,null],[13,"DoubleMat4x2","","",112,null],[13,"DoubleMat4x3","","",112,null],[13,"Sampler1d","","",112,null],[13,"ISampler1d","","",112,null],[13,"USampler1d","","",112,null],[13,"Sampler2d","","",112,null],[13,"ISampler2d","","",112,null],[13,"USampler2d","","",112,null],[13,"Sampler3d","","",112,null],[13,"ISampler3d","","",112,null],[13,"USampler3d","","",112,null],[13,"Sampler1dArray","","",112,null],[13,"ISampler1dArray","","",112,null],[13,"USampler1dArray","","",112,null],[13,"Sampler2dArray","","",112,null],[13,"ISampler2dArray","","",112,null],[13,"USampler2dArray","","",112,null],[13,"SamplerCube","","",112,null],[13,"ISamplerCube","","",112,null],[13,"USamplerCube","","",112,null],[13,"Sampler2dRect","","",112,null],[13,"ISampler2dRect","","",112,null],[13,"USampler2dRect","","",112,null],[13,"Sampler2dRectShadow","","",112,null],[13,"SamplerCubeArray","","",112,null],[13,"ISamplerCubeArray","","",112,null],[13,"USamplerCubeArray","","",112,null],[13,"SamplerBuffer","","",112,null],[13,"ISamplerBuffer","","",112,null],[13,"USamplerBuffer","","",112,null],[13,"Sampler2dMultisample","","",112,null],[13,"ISampler2dMultisample","","",112,null],[13,"USampler2dMultisample","","",112,null],[13,"Sampler2dMultisampleArray","","",112,null],[13,"ISampler2dMultisampleArray","","",112,null],[13,"USampler2dMultisampleArray","","",112,null],[13,"Sampler1dShadow","","",112,null],[13,"Sampler2dShadow","","",112,null],[13,"SamplerCubeShadow","","",112,null],[13,"Sampler1dArrayShadow","","",112,null],[13,"Sampler2dArrayShadow","","",112,null],[13,"SamplerCubeArrayShadow","","",112,null],[13,"Image1d","","",112,null],[13,"IImage1d","","",112,null],[13,"UImage1d","","",112,null],[13,"Image2d","","",112,null],[13,"IImage2d","","",112,null],[13,"UImage2d","","",112,null],[13,"Image3d","","",112,null],[13,"IImage3d","","",112,null],[13,"UImage3d","","",112,null],[13,"Image2dRect","","",112,null],[13,"IImage2dRect","","",112,null],[13,"UImage2dRect","","",112,null],[13,"ImageCube","","",112,null],[13,"IImageCube","","",112,null],[13,"UImageCube","","",112,null],[13,"ImageBuffer","","",112,null],[13,"IImageBuffer","","",112,null],[13,"UImageBuffer","","",112,null],[13,"Image1dArray","","",112,null],[13,"IImage1dArray","","",112,null],[13,"UImage1dArray","","",112,null],[13,"Image2dArray","","",112,null],[13,"IImage2dArray","","",112,null],[13,"UImage2dArray","","",112,null],[13,"Image2dMultisample","","",112,null],[13,"IImage2dMultisample","","",112,null],[13,"UImage2dMultisample","","",112,null],[13,"Image2dMultisampleArray","","",112,null],[13,"IImage2dMultisampleArray","","",112,null],[13,"UImage2dMultisampleArray","","",112,null],[13,"AtomicCounterUint","","",112,null],[3,"Sampler","","A sampler.",null,null],[12,"0","","",113,null],[12,"1","","",113,null],[4,"SamplerWrapFunction","","Function to use for out-of-bounds samples.",null,null],[13,"Repeat","","Samples at coord `x + 1` map to coord `x`.",114,null],[13,"Mirror","","Samples at coord `x + 1` map to coord `1 - x`.",114,null],[13,"Clamp","","Samples at coord `x + 1` map to coord `1`.",114,null],[13,"MirrorClamp","","Same as Mirror, but only for one repetition,",114,null],[3,"SamplerBehavior","","Behavior of a sampler.",null,null],[12,"wrap_function","","Functions to use for the X, Y, and Z coordinates.",115,null],[12,"minify_filter","","Filter to use when minifying the texture.",115,null],[12,"magnify_filter","","Filter to use when magnifying the texture.",115,null],[12,"max_anisotropy","","`1` means no anisotropic filtering, any value above `1` sets the max anisotropy.",115,null],[4,"MinifySamplerFilter","","The function that the GPU will use when loading the value of a texel.",null,null],[13,"Nearest","","The nearest texel will be loaded.",116,null],[13,"Linear","","All nearby texels will be loaded and their values will be merged.",116,null],[13,"NearestMipmapNearest","","The nearest texel of the nearest mipmap will be loaded.",116,null],[13,"LinearMipmapNearest","","Takes the nearest texel from the two nearest mipmaps, and merges them.",116,null],[13,"NearestMipmapLinear","","Same as `Linear`, but from the nearest mipmap.",116,null],[13,"LinearMipmapLinear","","Same as `Linear`, but from the two nearest mipmaps.",116,null],[3,"EmptyUniforms","","Object that can be used when you don't have any uniforms.",null,null],[3,"UniformBuffer","","Buffer that contains a uniform block.",null,null],[4,"MagnifySamplerFilter","","The function that the GPU will use when loading the value of a texel.",null,null],[13,"Nearest","","The nearest texel will be loaded.",117,null],[13,"Linear","","All nearby texels will be loaded and their values will be merged.",117,null],[4,"UniformValue","","Represents a value to bind to a uniform.",null,null],[13,"Block","","Contains a handle to the buffer, and a function that indicates whether this buffer can be bound on a block with the given layout. The last parameter is a sender which must be used to send a `SyncFence` that expires when the buffer has finished being used.",118,null],[13,"Subroutine","","",118,null],[13,"SignedInt","","",118,null],[13,"UnsignedInt","","",118,null],[13,"Float","","",118,null],[13,"Mat2","","2x2 column-major matrix.",118,null],[13,"Mat3","","3x3 column-major matrix.",118,null],[13,"Mat4","","4x4 column-major matrix.",118,null],[13,"Vec2","","",118,null],[13,"Vec3","","",118,null],[13,"Vec4","","",118,null],[13,"IntVec2","","",118,null],[13,"IntVec3","","",118,null],[13,"IntVec4","","",118,null],[13,"UnsignedIntVec2","","",118,null],[13,"UnsignedIntVec3","","",118,null],[13,"UnsignedIntVec4","","",118,null],[13,"Bool","","",118,null],[13,"BoolVec2","","",118,null],[13,"BoolVec3","","",118,null],[13,"BoolVec4","","",118,null],[13,"Double","","",118,null],[13,"DoubleVec2","","",118,null],[13,"DoubleVec3","","",118,null],[13,"DoubleVec4","","",118,null],[13,"DoubleMat2","","",118,null],[13,"DoubleMat3","","",118,null],[13,"DoubleMat4","","",118,null],[13,"Int64","","",118,null],[13,"Int64Vec2","","",118,null],[13,"Int64Vec3","","",118,null],[13,"Int64Vec4","","",118,null],[13,"UnsignedInt64","","",118,null],[13,"UnsignedInt64Vec2","","",118,null],[13,"UnsignedInt64Vec3","","",118,null],[13,"UnsignedInt64Vec4","","",118,null],[13,"Texture1d","","",118,null],[13,"CompressedTexture1d","","",118,null],[13,"SrgbTexture1d","","",118,null],[13,"CompressedSrgbTexture1d","","",118,null],[13,"IntegralTexture1d","","",118,null],[13,"UnsignedTexture1d","","",118,null],[13,"DepthTexture1d","","",118,null],[13,"Texture2d","","",118,null],[13,"CompressedTexture2d","","",118,null],[13,"SrgbTexture2d","","",118,null],[13,"CompressedSrgbTexture2d","","",118,null],[13,"IntegralTexture2d","","",118,null],[13,"UnsignedTexture2d","","",118,null],[13,"DepthTexture2d","","",118,null],[13,"Texture2dMultisample","","",118,null],[13,"SrgbTexture2dMultisample","","",118,null],[13,"IntegralTexture2dMultisample","","",118,null],[13,"UnsignedTexture2dMultisample","","",118,null],[13,"DepthTexture2dMultisample","","",118,null],[13,"Texture3d","","",118,null],[13,"CompressedTexture3d","","",118,null],[13,"SrgbTexture3d","","",118,null],[13,"CompressedSrgbTexture3d","","",118,null],[13,"IntegralTexture3d","","",118,null],[13,"UnsignedTexture3d","","",118,null],[13,"DepthTexture3d","","",118,null],[13,"Texture1dArray","","",118,null],[13,"CompressedTexture1dArray","","",118,null],[13,"SrgbTexture1dArray","","",118,null],[13,"CompressedSrgbTexture1dArray","","",118,null],[13,"IntegralTexture1dArray","","",118,null],[13,"UnsignedTexture1dArray","","",118,null],[13,"DepthTexture1dArray","","",118,null],[13,"Texture2dArray","","",118,null],[13,"CompressedTexture2dArray","","",118,null],[13,"SrgbTexture2dArray","","",118,null],[13,"CompressedSrgbTexture2dArray","","",118,null],[13,"IntegralTexture2dArray","","",118,null],[13,"UnsignedTexture2dArray","","",118,null],[13,"DepthTexture2dArray","","",118,null],[13,"Texture2dMultisampleArray","","",118,null],[13,"SrgbTexture2dMultisampleArray","","",118,null],[13,"IntegralTexture2dMultisampleArray","","",118,null],[13,"UnsignedTexture2dMultisampleArray","","",118,null],[13,"DepthTexture2dMultisampleArray","","",118,null],[13,"Cubemap","","",118,null],[13,"CompressedCubemap","","",118,null],[13,"SrgbCubemap","","",118,null],[13,"CompressedSrgbCubemap","","",118,null],[13,"IntegralCubemap","","",118,null],[13,"UnsignedCubemap","","",118,null],[13,"DepthCubemap","","",118,null],[13,"CubemapArray","","",118,null],[13,"CompressedCubemapArray","","",118,null],[13,"SrgbCubemapArray","","",118,null],[13,"CompressedSrgbCubemapArray","","",118,null],[13,"IntegralCubemapArray","","",118,null],[13,"UnsignedCubemapArray","","",118,null],[13,"DepthCubemapArray","","",118,null],[13,"BufferTexture","","",118,null],[3,"UniformsStorage","","Stores uniforms.",null,null],[0,"vertex","conrod::backend::glium::glium","Contains everything related to vertex sources.",null,null],[4,"VerticesSource","conrod::backend::glium::glium::vertex","Describes the source to use for the vertices when drawing.",null,null],[13,"VertexBuffer","","A buffer uploaded in the video memory.",119,null],[13,"Marker","","A marker indicating a \"phantom list of attributes\".",119,null],[12,"len","conrod::backend::glium::glium::vertex::VerticesSource","Number of attributes.",119,null],[12,"per_instance","","Whether or not this buffer is \"per instance\" (true) or \"per vertex\" (false).",119,null],[3,"EmptyVertexAttributes","conrod::backend::glium::glium::vertex","Marker that can be passed instead of a buffer to indicate an empty list of buffers.",null,null],[12,"len","","Number of phantom vertices.",120,null],[3,"EmptyInstanceAttributes","","Marker that can be passed instead of a buffer to indicate an empty list of buffers.",null,null],[12,"len","","Number of phantom vertices.",121,null],[3,"PerInstance","","Marker that instructs glium that the buffer is to be used per instance.",null,null],[8,"MultiVerticesSource","","Objects that describe multiple vertex sources.",null,null],[16,"Iterator","","Iterator that enumerates each source.",122,null],[10,"iter","","Iterates over the `VerticesSource`.",122,null],[8,"Vertex","","Trait for structures that represent a vertex.",null,null],[10,"build_bindings","","Builds the `VertexFormat` representing the layout of this element.",123,{"o":{"n":"cow"}}],[11,"is_supported","","Returns true if the backend supports this vertex format.",123,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[8,"Attribute","","Trait for types that can be used as vertex attributes.",null,null],[10,"get_type","","Get the type of data.",124,{"o":{"n":"attributetype"}}],[11,"is_supported","","Returns true if the backend supports this type of attribute.",124,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[3,"VertexBufferSlice","","Represents a slice of a `VertexBuffer`.",null,null],[5,"is_transform_feedback_supported","","Returns true if transform feedback is supported by the OpenGL implementation.",null,{"i":[{"n":"f"}],"o":{"n":"bool"}}],[6,"VertexFormat","","Describes the layout of each vertex in a vertex buffer.",null,null],[3,"VertexBuffer","","A list of vertices loaded in the graphics card's memory.",null,null],[3,"TransformFeedbackSession","","Transform feedback allows you to obtain in a buffer the list of the vertices generated by the vertex shader, geometry shader, or tessellation evaluation shader of your program. This is usually used to cache the result in order to draw the vertices multiple times with multiple different fragment shaders.",null,null],[4,"AttributeType","","",null,null],[13,"I8","","",125,null],[13,"I8I8","","",125,null],[13,"I8I8I8","","",125,null],[13,"I8I8I8I8","","",125,null],[13,"U8","","",125,null],[13,"U8U8","","",125,null],[13,"U8U8U8","","",125,null],[13,"U8U8U8U8","","",125,null],[13,"I16","","",125,null],[13,"I16I16","","",125,null],[13,"I16I16I16","","",125,null],[13,"I16I16I16I16","","",125,null],[13,"U16","","",125,null],[13,"U16U16","","",125,null],[13,"U16U16U16","","",125,null],[13,"U16U16U16U16","","",125,null],[13,"I32","","",125,null],[13,"I32I32","","",125,null],[13,"I32I32I32","","",125,null],[13,"I32I32I32I32","","",125,null],[13,"U32","","",125,null],[13,"U32U32","","",125,null],[13,"U32U32U32","","",125,null],[13,"U32U32U32U32","","",125,null],[13,"I64","","",125,null],[13,"I64I64","","",125,null],[13,"I64I64I64","","",125,null],[13,"I64I64I64I64","","",125,null],[13,"U64","","",125,null],[13,"U64U64","","",125,null],[13,"U64U64U64","","",125,null],[13,"U64U64U64U64","","",125,null],[13,"F16","","",125,null],[13,"F16F16","","",125,null],[13,"F16F16F16","","",125,null],[13,"F16F16F16F16","","",125,null],[13,"F16x2x2","","2x2 matrix of `f16`s",125,null],[13,"F16x2x3","","2x3 matrix of `f16`s",125,null],[13,"F16x2x4","","2x3 matrix of `f16`s",125,null],[13,"F16x3x2","","3x2 matrix of `f16`s",125,null],[13,"F16x3x3","","3x3 matrix of `f16`s",125,null],[13,"F16x3x4","","3x4 matrix of `f16`s",125,null],[13,"F16x4x2","","4x2 matrix of `f16`s",125,null],[13,"F16x4x3","","4x3 matrix of `f16`s",125,null],[13,"F16x4x4","","4x4 matrix of `f16`s",125,null],[13,"F32","","",125,null],[13,"F32F32","","",125,null],[13,"F32F32F32","","",125,null],[13,"F32F32F32F32","","",125,null],[13,"F32x2x2","","2x2 matrix of `f32`s",125,null],[13,"F32x2x3","","2x3 matrix of `f32`s",125,null],[13,"F32x2x4","","2x3 matrix of `f32`s",125,null],[13,"F32x3x2","","3x2 matrix of `f32`s",125,null],[13,"F32x3x3","","3x3 matrix of `f32`s",125,null],[13,"F32x3x4","","3x4 matrix of `f32`s",125,null],[13,"F32x4x2","","4x2 matrix of `f32`s",125,null],[13,"F32x4x3","","4x3 matrix of `f32`s",125,null],[13,"F32x4x4","","4x4 matrix of `f32`s",125,null],[13,"F64","","Warning: using `f64`s can be very slow.",125,null],[13,"F64F64","","Warning: using `f64`s can be very slow.",125,null],[13,"F64F64F64","","Warning: using `f64`s can be very slow.",125,null],[13,"F64F64F64F64","","Warning: using `f64`s can be very slow.",125,null],[13,"F64x2x2","","2x2 matrix of `f64`s Warning: using `f64`s can be very slow.",125,null],[13,"F64x2x3","","2x3 matrix of `f64`s Warning: using `f64`s can be very slow.",125,null],[13,"F64x2x4","","2x3 matrix of `f64`s Warning: using `f64`s can be very slow.",125,null],[13,"F64x3x2","","3x2 matrix of `f64`s Warning: using `f64`s can be very slow.",125,null],[13,"F64x3x3","","3x3 matrix of `f64`s Warning: using `f64`s can be very slow.",125,null],[13,"F64x3x4","","3x4 matrix of `f64`s Warning: using `f64`s can be very slow.",125,null],[13,"F64x4x2","","4x2 matrix of `f64`s Warning: using `f64`s can be very slow.",125,null],[13,"F64x4x3","","4x3 matrix of `f64`s Warning: using `f64`s can be very slow.",125,null],[13,"F64x4x4","","4x4 matrix of `f64`s Warning: using `f64`s can be very slow.",125,null],[13,"I2I10I10I10Reversed","","From MSB to LSB: two bits for the alpha, ten bits for the blue, ten bits for the green, ten bits for the red.",125,null],[13,"U2U10U10U10Reversed","","From MSB to LSB: two bits for the alpha, ten bits for the blue, ten bits for the green, ten bits for the red.",125,null],[13,"I10I10I10I2","","Corresponds to `GL_INT_10_10_10_2`.",125,null],[13,"U10U10U10U2","","Corresponds to `GL_UNSIGNED_INT_10_10_10_2`.",125,null],[13,"F10F11F11UnsignedIntReversed","","Three floating points values turned into unsigned integers./",125,null],[13,"FixedFloatI16U16","","Fixed floating points. A 16bits signed value followed by the 16bits unsigned exponent.",125,null],[4,"BufferCreationError","","Error that can happen when creating a vertex buffer.",null,null],[13,"FormatNotSupported","","The vertex format is not supported by the backend.",126,null],[13,"BufferCreationError","","Error while creating the vertex buffer.",126,null],[3,"VertexBufferAny","","A list of vertices loaded in the graphics card's memory.",null,null],[0,"texture","conrod::backend::glium::glium","A texture is an image loaded in video memory, which can be sampled in your shaders.",null,null],[0,"bindless","conrod::backend::glium::glium::texture","Without bindless textures, using a texture in a shader requires binding the texture to a specific bind point before drawing. This not only slows down rendering, but may also prevent you from grouping multiple draw calls into one because of the limitation to the number of available texture units.",null,null],[3,"ResidentTexture","conrod::backend::glium::glium::texture::bindless","A texture that is resident in video memory. This allows you to use bindless textures in your shaders.",null,null],[3,"TextureHandle","","Represents a handle to a texture. Contains a raw pointer to a texture that is hidden from you.",null,null],[3,"BindlessTexturesNotSupportedError","","Bindless textures are not supported.",null,null],[0,"buffer_texture","conrod::backend::glium::glium::texture","A `BufferTexture` is a special kind of one-dimensional texture that gets its data from a buffer. Buffer textures have very limited capabilities compared to other texture types.",null,null],[4,"TextureCreationError","conrod::backend::glium::glium::texture::buffer_texture","Error that can happen while building the texture part of a buffer texture.",null,null],[13,"NotSupported","","Buffer textures are not supported at all.",127,null],[13,"FormatNotSupported","","The requested format is not supported in combination with the given texture buffer type.",127,null],[13,"TooLarge","","The size of the buffer that you are trying to bind exceeds `GL_MAX_TEXTURE_BUFFER_SIZE`.",127,null],[4,"CreationError","","Error that can happen while building a buffer texture.",null,null],[13,"BufferCreationError","","Failed to create the buffer.",128,null],[13,"TextureCreationError","","Failed to create the texture.",128,null],[4,"BufferTextureType","","Type of a buffer texture.",null,null],[13,"Float","","The texture will behave as if it contained floating-point data. It can be sampled with a `samplerBuffer` in your GLSL code.",129,null],[13,"Integral","","The texture will behave as if it contained signed integral data. It can be sampled with a `isamplerBuffer` in your GLSL code.",129,null],[13,"Unsigned","","The texture will behave as if it contained unsigned integral data. It can be sampled with a `usamplerBuffer` in your GLSL code.",129,null],[3,"BufferTexture","","A one-dimensional texture that gets its data from a buffer.",null,null],[3,"BufferTextureRef","","Holds a reference to a `BufferTexture`.",null,null],[4,"TextureBufferContentType","","Note that some three-component types are missing. This is not a mistake. OpenGL doesn't support them.",null,null],[13,"U8","","",130,null],[13,"I8","","",130,null],[13,"U16","","",130,null],[13,"I16","","",130,null],[13,"U32","","",130,null],[13,"I32","","",130,null],[13,"U8U8","","",130,null],[13,"I8I8","","",130,null],[13,"U16U16","","",130,null],[13,"I16I16","","",130,null],[13,"U32U32","","",130,null],[13,"I32I32","","",130,null],[13,"U32U32U32","","",130,null],[13,"I32I32I32","","",130,null],[13,"U8U8U8U8","","",130,null],[13,"I8I8I8I8","","",130,null],[13,"U16U16U16U16","","",130,null],[13,"I16I16I16I16","","",130,null],[13,"U32U32U32U32","","",130,null],[13,"I32I32I32I32","","",130,null],[13,"F16","","",130,null],[13,"F32","","",130,null],[13,"F16F16","","",130,null],[13,"F32F32","","",130,null],[13,"F32F32F32","","",130,null],[13,"F16F16F16F16","","",130,null],[13,"F32F32F32F32","","",130,null],[8,"TextureBufferContent","","Trait for data types that can be interpreted by a buffer texture.",null,null],[10,"get_type","","Returns the enumeration corresponding to elements of this data type.",131,{"o":{"n":"texturebuffercontenttype"}}],[0,"pixel_buffer","conrod::backend::glium::glium::texture","Pixel buffers are buffers that contain two-dimensional texture data.",null,null],[0,"texture1d","","Contains the implementation of `Texture1d`.",null,null],[3,"Texture1d","conrod::backend::glium::glium::texture::texture1d","A one-dimensional texture  containing floating-point data.",null,null],[3,"Texture1dMipmap","","Represents a single mipmap level of a `Texture1d`.",null,null],[0,"compressed_texture1d","conrod::backend::glium::glium::texture","Contains the implementation of `CompressedTexture1d`.",null,null],[3,"CompressedTexture1d","conrod::backend::glium::glium::texture::compressed_texture1d","A compressed one-dimensional texture  containing floating-point data.",null,null],[3,"CompressedTexture1dMipmap","","Represents a single mipmap level of a `CompressedTexture1d`.",null,null],[0,"srgb_texture1d","conrod::backend::glium::glium::texture","Contains the implementation of `SrgbTexture1d`.",null,null],[3,"SrgbTexture1d","conrod::backend::glium::glium::texture::srgb_texture1d","A one-dimensional texture  containing sRGB floating-point data.",null,null],[3,"SrgbTexture1dMipmap","","Represents a single mipmap level of a `SrgbTexture1d`.",null,null],[0,"compressed_srgb_texture1d","conrod::backend::glium::glium::texture","Contains the implementation of `CompressedSrgbTexture1d`.",null,null],[3,"CompressedSrgbTexture1d","conrod::backend::glium::glium::texture::compressed_srgb_texture1d","A compressed one-dimensional texture  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture1dMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture1d`.",null,null],[0,"integral_texture1d","conrod::backend::glium::glium::texture","Contains the implementation of `IntegralTexture1d`.",null,null],[3,"IntegralTexture1d","conrod::backend::glium::glium::texture::integral_texture1d","A one-dimensional texture  containing signed integral data.",null,null],[3,"IntegralTexture1dMipmap","","Represents a single mipmap level of a `IntegralTexture1d`.",null,null],[0,"unsigned_texture1d","conrod::backend::glium::glium::texture","Contains the implementation of `UnsignedTexture1d`.",null,null],[3,"UnsignedTexture1d","conrod::backend::glium::glium::texture::unsigned_texture1d","A one-dimensional texture  containing unsigned integral data.",null,null],[3,"UnsignedTexture1dMipmap","","Represents a single mipmap level of a `UnsignedTexture1d`.",null,null],[0,"depth_texture1d","conrod::backend::glium::glium::texture","Contains the implementation of `DepthTexture1d`.",null,null],[3,"DepthTexture1d","conrod::backend::glium::glium::texture::depth_texture1d","A one-dimensional texture  containing depth data.",null,null],[3,"DepthTexture1dMipmap","","Represents a single mipmap level of a `DepthTexture1d`.",null,null],[0,"stencil_texture1d","conrod::backend::glium::glium::texture","Contains the implementation of `StencilTexture1d`.",null,null],[3,"StencilTexture1d","conrod::backend::glium::glium::texture::stencil_texture1d","A one-dimensional texture  containing stencil data.",null,null],[3,"StencilTexture1dMipmap","","Represents a single mipmap level of a `StencilTexture1d`.",null,null],[0,"depth_stencil_texture1d","conrod::backend::glium::glium::texture","Contains the implementation of `DepthStencilTexture1d`.",null,null],[3,"DepthStencilTexture1d","conrod::backend::glium::glium::texture::depth_stencil_texture1d","A one-dimensional texture  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture1dMipmap","","Represents a single mipmap level of a `DepthStencilTexture1d`.",null,null],[0,"texture2d","conrod::backend::glium::glium::texture","Contains the implementation of `Texture2d`.",null,null],[3,"Texture2d","conrod::backend::glium::glium::texture::texture2d","A two-dimensional texture  containing floating-point data.",null,null],[3,"Texture2dMipmap","","Represents a single mipmap level of a `Texture2d`.",null,null],[0,"compressed_texture2d","conrod::backend::glium::glium::texture","Contains the implementation of `CompressedTexture2d`.",null,null],[3,"CompressedTexture2d","conrod::backend::glium::glium::texture::compressed_texture2d","A compressed two-dimensional texture  containing floating-point data.",null,null],[3,"CompressedTexture2dMipmap","","Represents a single mipmap level of a `CompressedTexture2d`.",null,null],[0,"srgb_texture2d","conrod::backend::glium::glium::texture","Contains the implementation of `SrgbTexture2d`.",null,null],[3,"SrgbTexture2d","conrod::backend::glium::glium::texture::srgb_texture2d","A two-dimensional texture  containing sRGB floating-point data.",null,null],[3,"SrgbTexture2dMipmap","","Represents a single mipmap level of a `SrgbTexture2d`.",null,null],[0,"compressed_srgb_texture2d","conrod::backend::glium::glium::texture","Contains the implementation of `CompressedSrgbTexture2d`.",null,null],[3,"CompressedSrgbTexture2d","conrod::backend::glium::glium::texture::compressed_srgb_texture2d","A compressed two-dimensional texture  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture2dMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture2d`.",null,null],[0,"integral_texture2d","conrod::backend::glium::glium::texture","Contains the implementation of `IntegralTexture2d`.",null,null],[3,"IntegralTexture2d","conrod::backend::glium::glium::texture::integral_texture2d","A two-dimensional texture  containing signed integral data.",null,null],[3,"IntegralTexture2dMipmap","","Represents a single mipmap level of a `IntegralTexture2d`.",null,null],[0,"unsigned_texture2d","conrod::backend::glium::glium::texture","Contains the implementation of `UnsignedTexture2d`.",null,null],[3,"UnsignedTexture2d","conrod::backend::glium::glium::texture::unsigned_texture2d","A two-dimensional texture  containing unsigned integral data.",null,null],[3,"UnsignedTexture2dMipmap","","Represents a single mipmap level of a `UnsignedTexture2d`.",null,null],[0,"depth_texture2d","conrod::backend::glium::glium::texture","Contains the implementation of `DepthTexture2d`.",null,null],[3,"DepthTexture2d","conrod::backend::glium::glium::texture::depth_texture2d","A two-dimensional texture  containing depth data.",null,null],[3,"DepthTexture2dMipmap","","Represents a single mipmap level of a `DepthTexture2d`.",null,null],[0,"stencil_texture2d","conrod::backend::glium::glium::texture","Contains the implementation of `StencilTexture2d`.",null,null],[3,"StencilTexture2d","conrod::backend::glium::glium::texture::stencil_texture2d","A two-dimensional texture  containing stencil data.",null,null],[3,"StencilTexture2dMipmap","","Represents a single mipmap level of a `StencilTexture2d`.",null,null],[0,"depth_stencil_texture2d","conrod::backend::glium::glium::texture","Contains the implementation of `DepthStencilTexture2d`.",null,null],[3,"DepthStencilTexture2d","conrod::backend::glium::glium::texture::depth_stencil_texture2d","A two-dimensional texture  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture2dMipmap","","Represents a single mipmap level of a `DepthStencilTexture2d`.",null,null],[0,"texture2d_multisample","conrod::backend::glium::glium::texture","Contains the implementation of `Texture2dMultisample`.",null,null],[3,"Texture2dMultisample","conrod::backend::glium::glium::texture::texture2d_multisample","A two-dimensional texture  containing floating-point data.",null,null],[3,"Texture2dMultisampleMipmap","","Represents a single mipmap level of a `Texture2dMultisample`.",null,null],[0,"integral_texture2d_multisample","conrod::backend::glium::glium::texture","Contains the implementation of `IntegralTexture2dMultisample`.",null,null],[3,"IntegralTexture2dMultisample","conrod::backend::glium::glium::texture::integral_texture2d_multisample","A two-dimensional texture  containing signed integral data.",null,null],[3,"IntegralTexture2dMultisampleMipmap","","Represents a single mipmap level of a `IntegralTexture2dMultisample`.",null,null],[0,"srgb_texture2d_multisample","conrod::backend::glium::glium::texture","Contains the implementation of `SrgbTexture2dMultisample`.",null,null],[3,"SrgbTexture2dMultisample","conrod::backend::glium::glium::texture::srgb_texture2d_multisample","A two-dimensional texture  containing sRGB floating-point data.",null,null],[3,"SrgbTexture2dMultisampleMipmap","","Represents a single mipmap level of a `SrgbTexture2dMultisample`.",null,null],[0,"unsigned_texture2d_multisample","conrod::backend::glium::glium::texture","Contains the implementation of `UnsignedTexture2dMultisample`.",null,null],[3,"UnsignedTexture2dMultisample","conrod::backend::glium::glium::texture::unsigned_texture2d_multisample","A two-dimensional texture  containing unsigned integral data.",null,null],[3,"UnsignedTexture2dMultisampleMipmap","","Represents a single mipmap level of a `UnsignedTexture2dMultisample`.",null,null],[0,"depth_texture2d_multisample","conrod::backend::glium::glium::texture","Contains the implementation of `DepthTexture2dMultisample`.",null,null],[3,"DepthTexture2dMultisample","conrod::backend::glium::glium::texture::depth_texture2d_multisample","A two-dimensional texture  containing depth data.",null,null],[3,"DepthTexture2dMultisampleMipmap","","Represents a single mipmap level of a `DepthTexture2dMultisample`.",null,null],[0,"stencil_texture2d_multisample","conrod::backend::glium::glium::texture","Contains the implementation of `StencilTexture2dMultisample`.",null,null],[3,"StencilTexture2dMultisample","conrod::backend::glium::glium::texture::stencil_texture2d_multisample","A two-dimensional texture  containing stencil data.",null,null],[3,"StencilTexture2dMultisampleMipmap","","Represents a single mipmap level of a `StencilTexture2dMultisample`.",null,null],[0,"depth_stencil_texture2d_multisample","conrod::backend::glium::glium::texture","Contains the implementation of `DepthStencilTexture2dMultisample`.",null,null],[3,"DepthStencilTexture2dMultisample","conrod::backend::glium::glium::texture::depth_stencil_texture2d_multisample","A two-dimensional texture  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture2dMultisampleMipmap","","Represents a single mipmap level of a `DepthStencilTexture2dMultisample`.",null,null],[0,"texture3d","conrod::backend::glium::glium::texture","Contains the implementation of `Texture3d`.",null,null],[3,"Texture3d","conrod::backend::glium::glium::texture::texture3d","A three-dimensional texture  containing floating-point data.",null,null],[3,"Texture3dMipmap","","Represents a single mipmap level of a `Texture3d`.",null,null],[0,"compressed_texture3d","conrod::backend::glium::glium::texture","Contains the implementation of `CompressedTexture3d`.",null,null],[3,"CompressedTexture3d","conrod::backend::glium::glium::texture::compressed_texture3d","A compressed three-dimensional texture  containing floating-point data.",null,null],[3,"CompressedTexture3dMipmap","","Represents a single mipmap level of a `CompressedTexture3d`.",null,null],[0,"srgb_texture3d","conrod::backend::glium::glium::texture","Contains the implementation of `SrgbTexture3d`.",null,null],[3,"SrgbTexture3d","conrod::backend::glium::glium::texture::srgb_texture3d","A three-dimensional texture  containing sRGB floating-point data.",null,null],[3,"SrgbTexture3dMipmap","","Represents a single mipmap level of a `SrgbTexture3d`.",null,null],[0,"compressed_srgb_texture3d","conrod::backend::glium::glium::texture","Contains the implementation of `CompressedSrgbTexture3d`.",null,null],[3,"CompressedSrgbTexture3d","conrod::backend::glium::glium::texture::compressed_srgb_texture3d","A compressed three-dimensional texture  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture3dMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture3d`.",null,null],[0,"integral_texture3d","conrod::backend::glium::glium::texture","Contains the implementation of `IntegralTexture3d`.",null,null],[3,"IntegralTexture3d","conrod::backend::glium::glium::texture::integral_texture3d","A three-dimensional texture  containing signed integral data.",null,null],[3,"IntegralTexture3dMipmap","","Represents a single mipmap level of a `IntegralTexture3d`.",null,null],[0,"unsigned_texture3d","conrod::backend::glium::glium::texture","Contains the implementation of `UnsignedTexture3d`.",null,null],[3,"UnsignedTexture3d","conrod::backend::glium::glium::texture::unsigned_texture3d","A three-dimensional texture  containing unsigned integral data.",null,null],[3,"UnsignedTexture3dMipmap","","Represents a single mipmap level of a `UnsignedTexture3d`.",null,null],[0,"depth_texture3d","conrod::backend::glium::glium::texture","Contains the implementation of `DepthTexture3d`.",null,null],[3,"DepthTexture3d","conrod::backend::glium::glium::texture::depth_texture3d","A three-dimensional texture  containing depth data.",null,null],[3,"DepthTexture3dMipmap","","Represents a single mipmap level of a `DepthTexture3d`.",null,null],[0,"depth_stencil_texture3d","conrod::backend::glium::glium::texture","Contains the implementation of `DepthStencilTexture3d`.",null,null],[3,"DepthStencilTexture3d","conrod::backend::glium::glium::texture::depth_stencil_texture3d","A three-dimensional texture  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture3dMipmap","","Represents a single mipmap level of a `DepthStencilTexture3d`.",null,null],[0,"texture1d_array","conrod::backend::glium::glium::texture","Contains the implementation of `Texture1dArray`.",null,null],[3,"Texture1dArray","conrod::backend::glium::glium::texture::texture1d_array","An array of one-dimensional textures  containing floating-point data.",null,null],[3,"Texture1dArrayLayer","","Represents a single layer of a `Texture1dArray`.",null,null],[3,"Texture1dArrayMipmap","","Represents a single mipmap level of a `Texture1dArray`.",null,null],[3,"Texture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `Texture1dArray`.",null,null],[0,"compressed_texture1d_array","conrod::backend::glium::glium::texture","Contains the implementation of `CompressedTexture1dArray`.",null,null],[3,"CompressedTexture1dArray","conrod::backend::glium::glium::texture::compressed_texture1d_array","An array of compressed one-dimensional textures  containing floating-point data.",null,null],[3,"CompressedTexture1dArrayLayer","","Represents a single layer of a `CompressedTexture1dArray`.",null,null],[3,"CompressedTexture1dArrayMipmap","","Represents a single mipmap level of a `CompressedTexture1dArray`.",null,null],[3,"CompressedTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedTexture1dArray`.",null,null],[0,"srgb_texture1d_array","conrod::backend::glium::glium::texture","Contains the implementation of `SrgbTexture1dArray`.",null,null],[3,"SrgbTexture1dArray","conrod::backend::glium::glium::texture::srgb_texture1d_array","An array of one-dimensional textures  containing sRGB floating-point data.",null,null],[3,"SrgbTexture1dArrayLayer","","Represents a single layer of a `SrgbTexture1dArray`.",null,null],[3,"SrgbTexture1dArrayMipmap","","Represents a single mipmap level of a `SrgbTexture1dArray`.",null,null],[3,"SrgbTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `SrgbTexture1dArray`.",null,null],[0,"compressed_srgb_texture1d_array","conrod::backend::glium::glium::texture","Contains the implementation of `CompressedSrgbTexture1dArray`.",null,null],[3,"CompressedSrgbTexture1dArray","conrod::backend::glium::glium::texture::compressed_srgb_texture1d_array","An array of compressed one-dimensional textures  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture1dArrayLayer","","Represents a single layer of a `CompressedSrgbTexture1dArray`.",null,null],[3,"CompressedSrgbTexture1dArrayMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture1dArray`.",null,null],[3,"CompressedSrgbTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedSrgbTexture1dArray`.",null,null],[0,"integral_texture1d_array","conrod::backend::glium::glium::texture","Contains the implementation of `IntegralTexture1dArray`.",null,null],[3,"IntegralTexture1dArray","conrod::backend::glium::glium::texture::integral_texture1d_array","An array of one-dimensional textures  containing signed integral data.",null,null],[3,"IntegralTexture1dArrayLayer","","Represents a single layer of a `IntegralTexture1dArray`.",null,null],[3,"IntegralTexture1dArrayMipmap","","Represents a single mipmap level of a `IntegralTexture1dArray`.",null,null],[3,"IntegralTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `IntegralTexture1dArray`.",null,null],[0,"unsigned_texture1d_array","conrod::backend::glium::glium::texture","Contains the implementation of `UnsignedTexture1dArray`.",null,null],[3,"UnsignedTexture1dArray","conrod::backend::glium::glium::texture::unsigned_texture1d_array","An array of one-dimensional textures  containing unsigned integral data.",null,null],[3,"UnsignedTexture1dArrayLayer","","Represents a single layer of a `UnsignedTexture1dArray`.",null,null],[3,"UnsignedTexture1dArrayMipmap","","Represents a single mipmap level of a `UnsignedTexture1dArray`.",null,null],[3,"UnsignedTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `UnsignedTexture1dArray`.",null,null],[0,"depth_texture1d_array","conrod::backend::glium::glium::texture","Contains the implementation of `DepthTexture1dArray`.",null,null],[3,"DepthTexture1dArray","conrod::backend::glium::glium::texture::depth_texture1d_array","An array of one-dimensional textures  containing depth data.",null,null],[3,"DepthTexture1dArrayLayer","","Represents a single layer of a `DepthTexture1dArray`.",null,null],[3,"DepthTexture1dArrayMipmap","","Represents a single mipmap level of a `DepthTexture1dArray`.",null,null],[3,"DepthTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthTexture1dArray`.",null,null],[0,"stencil_texture1d_array","conrod::backend::glium::glium::texture","Contains the implementation of `StencilTexture1dArray`.",null,null],[3,"StencilTexture1dArray","conrod::backend::glium::glium::texture::stencil_texture1d_array","An array of one-dimensional textures  containing stencil data.",null,null],[3,"StencilTexture1dArrayLayer","","Represents a single layer of a `StencilTexture1dArray`.",null,null],[3,"StencilTexture1dArrayMipmap","","Represents a single mipmap level of a `StencilTexture1dArray`.",null,null],[3,"StencilTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `StencilTexture1dArray`.",null,null],[0,"depth_stencil_texture1d_array","conrod::backend::glium::glium::texture","Contains the implementation of `DepthStencilTexture1dArray`.",null,null],[3,"DepthStencilTexture1dArray","conrod::backend::glium::glium::texture::depth_stencil_texture1d_array","An array of one-dimensional textures  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture1dArrayLayer","","Represents a single layer of a `DepthStencilTexture1dArray`.",null,null],[3,"DepthStencilTexture1dArrayMipmap","","Represents a single mipmap level of a `DepthStencilTexture1dArray`.",null,null],[3,"DepthStencilTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthStencilTexture1dArray`.",null,null],[0,"texture2d_array","conrod::backend::glium::glium::texture","Contains the implementation of `Texture2dArray`.",null,null],[3,"Texture2dArray","conrod::backend::glium::glium::texture::texture2d_array","An array of two-dimensional textures  containing floating-point data.",null,null],[3,"Texture2dArrayLayer","","Represents a single layer of a `Texture2dArray`.",null,null],[3,"Texture2dArrayMipmap","","Represents a single mipmap level of a `Texture2dArray`.",null,null],[3,"Texture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `Texture2dArray`.",null,null],[0,"compressed_texture2d_array","conrod::backend::glium::glium::texture","Contains the implementation of `CompressedTexture2dArray`.",null,null],[3,"CompressedTexture2dArray","conrod::backend::glium::glium::texture::compressed_texture2d_array","An array of compressed two-dimensional textures  containing floating-point data.",null,null],[3,"CompressedTexture2dArrayLayer","","Represents a single layer of a `CompressedTexture2dArray`.",null,null],[3,"CompressedTexture2dArrayMipmap","","Represents a single mipmap level of a `CompressedTexture2dArray`.",null,null],[3,"CompressedTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedTexture2dArray`.",null,null],[0,"srgb_texture2d_array","conrod::backend::glium::glium::texture","Contains the implementation of `SrgbTexture2dArray`.",null,null],[3,"SrgbTexture2dArray","conrod::backend::glium::glium::texture::srgb_texture2d_array","An array of two-dimensional textures  containing sRGB floating-point data.",null,null],[3,"SrgbTexture2dArrayLayer","","Represents a single layer of a `SrgbTexture2dArray`.",null,null],[3,"SrgbTexture2dArrayMipmap","","Represents a single mipmap level of a `SrgbTexture2dArray`.",null,null],[3,"SrgbTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `SrgbTexture2dArray`.",null,null],[0,"compressed_srgb_texture2d_array","conrod::backend::glium::glium::texture","Contains the implementation of `CompressedSrgbTexture2dArray`.",null,null],[3,"CompressedSrgbTexture2dArray","conrod::backend::glium::glium::texture::compressed_srgb_texture2d_array","An array of compressed two-dimensional textures  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture2dArrayLayer","","Represents a single layer of a `CompressedSrgbTexture2dArray`.",null,null],[3,"CompressedSrgbTexture2dArrayMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture2dArray`.",null,null],[3,"CompressedSrgbTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedSrgbTexture2dArray`.",null,null],[0,"integral_texture2d_array","conrod::backend::glium::glium::texture","Contains the implementation of `IntegralTexture2dArray`.",null,null],[3,"IntegralTexture2dArray","conrod::backend::glium::glium::texture::integral_texture2d_array","An array of two-dimensional textures  containing signed integral data.",null,null],[3,"IntegralTexture2dArrayLayer","","Represents a single layer of a `IntegralTexture2dArray`.",null,null],[3,"IntegralTexture2dArrayMipmap","","Represents a single mipmap level of a `IntegralTexture2dArray`.",null,null],[3,"IntegralTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `IntegralTexture2dArray`.",null,null],[0,"unsigned_texture2d_array","conrod::backend::glium::glium::texture","Contains the implementation of `UnsignedTexture2dArray`.",null,null],[3,"UnsignedTexture2dArray","conrod::backend::glium::glium::texture::unsigned_texture2d_array","An array of two-dimensional textures  containing unsigned integral data.",null,null],[3,"UnsignedTexture2dArrayLayer","","Represents a single layer of a `UnsignedTexture2dArray`.",null,null],[3,"UnsignedTexture2dArrayMipmap","","Represents a single mipmap level of a `UnsignedTexture2dArray`.",null,null],[3,"UnsignedTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `UnsignedTexture2dArray`.",null,null],[0,"depth_texture2d_array","conrod::backend::glium::glium::texture","Contains the implementation of `DepthTexture2dArray`.",null,null],[3,"DepthTexture2dArray","conrod::backend::glium::glium::texture::depth_texture2d_array","An array of two-dimensional textures  containing depth data.",null,null],[3,"DepthTexture2dArrayLayer","","Represents a single layer of a `DepthTexture2dArray`.",null,null],[3,"DepthTexture2dArrayMipmap","","Represents a single mipmap level of a `DepthTexture2dArray`.",null,null],[3,"DepthTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthTexture2dArray`.",null,null],[0,"stencil_texture2d_array","conrod::backend::glium::glium::texture","Contains the implementation of `StencilTexture2dArray`.",null,null],[3,"StencilTexture2dArray","conrod::backend::glium::glium::texture::stencil_texture2d_array","An array of two-dimensional textures  containing stencil data.",null,null],[3,"StencilTexture2dArrayLayer","","Represents a single layer of a `StencilTexture2dArray`.",null,null],[3,"StencilTexture2dArrayMipmap","","Represents a single mipmap level of a `StencilTexture2dArray`.",null,null],[3,"StencilTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `StencilTexture2dArray`.",null,null],[0,"depth_stencil_texture2d_array","conrod::backend::glium::glium::texture","Contains the implementation of `DepthStencilTexture2dArray`.",null,null],[3,"DepthStencilTexture2dArray","conrod::backend::glium::glium::texture::depth_stencil_texture2d_array","An array of two-dimensional textures  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture2dArrayLayer","","Represents a single layer of a `DepthStencilTexture2dArray`.",null,null],[3,"DepthStencilTexture2dArrayMipmap","","Represents a single mipmap level of a `DepthStencilTexture2dArray`.",null,null],[3,"DepthStencilTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthStencilTexture2dArray`.",null,null],[0,"texture2d_multisample_array","conrod::backend::glium::glium::texture","Contains the implementation of `Texture2dMultisampleArray`.",null,null],[3,"Texture2dMultisampleArray","conrod::backend::glium::glium::texture::texture2d_multisample_array","An array of two-dimensional textures  containing floating-point data.",null,null],[3,"Texture2dMultisampleArrayLayer","","Represents a single layer of a `Texture2dMultisampleArray`.",null,null],[3,"Texture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `Texture2dMultisampleArray`.",null,null],[3,"Texture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `Texture2dMultisampleArray`.",null,null],[0,"srgb_texture2d_multisample_array","conrod::backend::glium::glium::texture","Contains the implementation of `SrgbTexture2dMultisampleArray`.",null,null],[3,"SrgbTexture2dMultisampleArray","conrod::backend::glium::glium::texture::srgb_texture2d_multisample_array","An array of two-dimensional textures  containing sRGB floating-point data.",null,null],[3,"SrgbTexture2dMultisampleArrayLayer","","Represents a single layer of a `SrgbTexture2dMultisampleArray`.",null,null],[3,"SrgbTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `SrgbTexture2dMultisampleArray`.",null,null],[3,"SrgbTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `SrgbTexture2dMultisampleArray`.",null,null],[0,"integral_texture2d_multisample_array","conrod::backend::glium::glium::texture","Contains the implementation of `IntegralTexture2dMultisampleArray`.",null,null],[3,"IntegralTexture2dMultisampleArray","conrod::backend::glium::glium::texture::integral_texture2d_multisample_array","An array of two-dimensional textures  containing signed integral data.",null,null],[3,"IntegralTexture2dMultisampleArrayLayer","","Represents a single layer of a `IntegralTexture2dMultisampleArray`.",null,null],[3,"IntegralTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `IntegralTexture2dMultisampleArray`.",null,null],[3,"IntegralTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `IntegralTexture2dMultisampleArray`.",null,null],[0,"unsigned_texture2d_multisample_array","conrod::backend::glium::glium::texture","Contains the implementation of `UnsignedTexture2dMultisampleArray`.",null,null],[3,"UnsignedTexture2dMultisampleArray","conrod::backend::glium::glium::texture::unsigned_texture2d_multisample_array","An array of two-dimensional textures  containing unsigned integral data.",null,null],[3,"UnsignedTexture2dMultisampleArrayLayer","","Represents a single layer of a `UnsignedTexture2dMultisampleArray`.",null,null],[3,"UnsignedTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `UnsignedTexture2dMultisampleArray`.",null,null],[3,"UnsignedTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `UnsignedTexture2dMultisampleArray`.",null,null],[0,"depth_texture2d_multisample_array","conrod::backend::glium::glium::texture","Contains the implementation of `DepthTexture2dMultisampleArray`.",null,null],[3,"DepthTexture2dMultisampleArray","conrod::backend::glium::glium::texture::depth_texture2d_multisample_array","An array of two-dimensional textures  containing depth data.",null,null],[3,"DepthTexture2dMultisampleArrayLayer","","Represents a single layer of a `DepthTexture2dMultisampleArray`.",null,null],[3,"DepthTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `DepthTexture2dMultisampleArray`.",null,null],[3,"DepthTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthTexture2dMultisampleArray`.",null,null],[0,"stencil_texture2d_multisample_array","conrod::backend::glium::glium::texture","Contains the implementation of `StencilTexture2dMultisampleArray`.",null,null],[3,"StencilTexture2dMultisampleArray","conrod::backend::glium::glium::texture::stencil_texture2d_multisample_array","An array of two-dimensional textures  containing stencil data.",null,null],[3,"StencilTexture2dMultisampleArrayLayer","","Represents a single layer of a `StencilTexture2dMultisampleArray`.",null,null],[3,"StencilTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `StencilTexture2dMultisampleArray`.",null,null],[3,"StencilTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `StencilTexture2dMultisampleArray`.",null,null],[0,"depth_stencil_texture2d_multisample_array","conrod::backend::glium::glium::texture","Contains the implementation of `DepthStencilTexture2dMultisampleArray`.",null,null],[3,"DepthStencilTexture2dMultisampleArray","conrod::backend::glium::glium::texture::depth_stencil_texture2d_multisample_array","An array of two-dimensional textures  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture2dMultisampleArrayLayer","","Represents a single layer of a `DepthStencilTexture2dMultisampleArray`.",null,null],[3,"DepthStencilTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `DepthStencilTexture2dMultisampleArray`.",null,null],[3,"DepthStencilTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthStencilTexture2dMultisampleArray`.",null,null],[0,"cubemap","conrod::backend::glium::glium::texture","Contains the implementation of `Cubemap`.",null,null],[3,"Cubemap","conrod::backend::glium::glium::texture::cubemap","A cube texture  containing floating-point data.",null,null],[3,"CubemapMipmap","","Represents a single mipmap level of a `Cubemap`.",null,null],[3,"CubemapImage","","Represents a single image of a mipmap level of a layer of `Cubemap`.",null,null],[0,"compressed_cubemap","conrod::backend::glium::glium::texture","Contains the implementation of `CompressedCubemap`.",null,null],[3,"CompressedCubemap","conrod::backend::glium::glium::texture::compressed_cubemap","A compressed cube texture  containing floating-point data.",null,null],[3,"CompressedCubemapMipmap","","Represents a single mipmap level of a `CompressedCubemap`.",null,null],[3,"CompressedCubemapImage","","Represents a single image of a mipmap level of a layer of `CompressedCubemap`.",null,null],[0,"srgb_cubemap","conrod::backend::glium::glium::texture","Contains the implementation of `SrgbCubemap`.",null,null],[3,"SrgbCubemap","conrod::backend::glium::glium::texture::srgb_cubemap","A cube texture  containing sRGB floating-point data.",null,null],[3,"SrgbCubemapMipmap","","Represents a single mipmap level of a `SrgbCubemap`.",null,null],[3,"SrgbCubemapImage","","Represents a single image of a mipmap level of a layer of `SrgbCubemap`.",null,null],[0,"compressed_srgb_cubemap","conrod::backend::glium::glium::texture","Contains the implementation of `CompressedSrgbCubemap`.",null,null],[3,"CompressedSrgbCubemap","conrod::backend::glium::glium::texture::compressed_srgb_cubemap","A compressed cube texture  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbCubemapMipmap","","Represents a single mipmap level of a `CompressedSrgbCubemap`.",null,null],[3,"CompressedSrgbCubemapImage","","Represents a single image of a mipmap level of a layer of `CompressedSrgbCubemap`.",null,null],[0,"integral_cubemap","conrod::backend::glium::glium::texture","Contains the implementation of `IntegralCubemap`.",null,null],[3,"IntegralCubemap","conrod::backend::glium::glium::texture::integral_cubemap","A cube texture  containing signed integral data.",null,null],[3,"IntegralCubemapMipmap","","Represents a single mipmap level of a `IntegralCubemap`.",null,null],[3,"IntegralCubemapImage","","Represents a single image of a mipmap level of a layer of `IntegralCubemap`.",null,null],[0,"unsigned_cubemap","conrod::backend::glium::glium::texture","Contains the implementation of `UnsignedCubemap`.",null,null],[3,"UnsignedCubemap","conrod::backend::glium::glium::texture::unsigned_cubemap","A cube texture  containing unsigned integral data.",null,null],[3,"UnsignedCubemapMipmap","","Represents a single mipmap level of a `UnsignedCubemap`.",null,null],[3,"UnsignedCubemapImage","","Represents a single image of a mipmap level of a layer of `UnsignedCubemap`.",null,null],[0,"depth_cubemap","conrod::backend::glium::glium::texture","Contains the implementation of `DepthCubemap`.",null,null],[3,"DepthCubemap","conrod::backend::glium::glium::texture::depth_cubemap","A cube texture  containing depth data.",null,null],[3,"DepthCubemapMipmap","","Represents a single mipmap level of a `DepthCubemap`.",null,null],[3,"DepthCubemapImage","","Represents a single image of a mipmap level of a layer of `DepthCubemap`.",null,null],[0,"stencil_cubemap","conrod::backend::glium::glium::texture","Contains the implementation of `StencilCubemap`.",null,null],[3,"StencilCubemap","conrod::backend::glium::glium::texture::stencil_cubemap","A cube texture  containing stencil data.",null,null],[3,"StencilCubemapMipmap","","Represents a single mipmap level of a `StencilCubemap`.",null,null],[3,"StencilCubemapImage","","Represents a single image of a mipmap level of a layer of `StencilCubemap`.",null,null],[0,"depth_stencil_cubemap","conrod::backend::glium::glium::texture","Contains the implementation of `DepthStencilCubemap`.",null,null],[3,"DepthStencilCubemap","conrod::backend::glium::glium::texture::depth_stencil_cubemap","A cube texture  containing both depth and stencil data.",null,null],[3,"DepthStencilCubemapMipmap","","Represents a single mipmap level of a `DepthStencilCubemap`.",null,null],[3,"DepthStencilCubemapImage","","Represents a single image of a mipmap level of a layer of `DepthStencilCubemap`.",null,null],[0,"cubemap_array","conrod::backend::glium::glium::texture","Contains the implementation of `CubemapArray`.",null,null],[3,"CubemapArray","conrod::backend::glium::glium::texture::cubemap_array","An array of cube textures  containing floating-point data.",null,null],[3,"CubemapArrayLayer","","Represents a single layer of a `CubemapArray`.",null,null],[3,"CubemapArrayMipmap","","Represents a single mipmap level of a `CubemapArray`.",null,null],[3,"CubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CubemapArray`.",null,null],[3,"CubemapArrayImage","","Represents a single image of a mipmap level of a layer of `CubemapArray`.",null,null],[0,"compressed_cubemap_array","conrod::backend::glium::glium::texture","Contains the implementation of `CompressedCubemapArray`.",null,null],[3,"CompressedCubemapArray","conrod::backend::glium::glium::texture::compressed_cubemap_array","An array of compressed cube textures  containing floating-point data.",null,null],[3,"CompressedCubemapArrayLayer","","Represents a single layer of a `CompressedCubemapArray`.",null,null],[3,"CompressedCubemapArrayMipmap","","Represents a single mipmap level of a `CompressedCubemapArray`.",null,null],[3,"CompressedCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedCubemapArray`.",null,null],[3,"CompressedCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `CompressedCubemapArray`.",null,null],[0,"srgb_cubemap_array","conrod::backend::glium::glium::texture","Contains the implementation of `SrgbCubemapArray`.",null,null],[3,"SrgbCubemapArray","conrod::backend::glium::glium::texture::srgb_cubemap_array","An array of cube textures  containing sRGB floating-point data.",null,null],[3,"SrgbCubemapArrayLayer","","Represents a single layer of a `SrgbCubemapArray`.",null,null],[3,"SrgbCubemapArrayMipmap","","Represents a single mipmap level of a `SrgbCubemapArray`.",null,null],[3,"SrgbCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `SrgbCubemapArray`.",null,null],[3,"SrgbCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `SrgbCubemapArray`.",null,null],[0,"compressed_srgb_cubemap_array","conrod::backend::glium::glium::texture","Contains the implementation of `CompressedSrgbCubemapArray`.",null,null],[3,"CompressedSrgbCubemapArray","conrod::backend::glium::glium::texture::compressed_srgb_cubemap_array","An array of compressed cube textures  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbCubemapArrayLayer","","Represents a single layer of a `CompressedSrgbCubemapArray`.",null,null],[3,"CompressedSrgbCubemapArrayMipmap","","Represents a single mipmap level of a `CompressedSrgbCubemapArray`.",null,null],[3,"CompressedSrgbCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedSrgbCubemapArray`.",null,null],[3,"CompressedSrgbCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `CompressedSrgbCubemapArray`.",null,null],[0,"integral_cubemap_array","conrod::backend::glium::glium::texture","Contains the implementation of `IntegralCubemapArray`.",null,null],[3,"IntegralCubemapArray","conrod::backend::glium::glium::texture::integral_cubemap_array","An array of cube textures  containing signed integral data.",null,null],[3,"IntegralCubemapArrayLayer","","Represents a single layer of a `IntegralCubemapArray`.",null,null],[3,"IntegralCubemapArrayMipmap","","Represents a single mipmap level of a `IntegralCubemapArray`.",null,null],[3,"IntegralCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `IntegralCubemapArray`.",null,null],[3,"IntegralCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `IntegralCubemapArray`.",null,null],[0,"unsigned_cubemap_array","conrod::backend::glium::glium::texture","Contains the implementation of `UnsignedCubemapArray`.",null,null],[3,"UnsignedCubemapArray","conrod::backend::glium::glium::texture::unsigned_cubemap_array","An array of cube textures  containing unsigned integral data.",null,null],[3,"UnsignedCubemapArrayLayer","","Represents a single layer of a `UnsignedCubemapArray`.",null,null],[3,"UnsignedCubemapArrayMipmap","","Represents a single mipmap level of a `UnsignedCubemapArray`.",null,null],[3,"UnsignedCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `UnsignedCubemapArray`.",null,null],[3,"UnsignedCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `UnsignedCubemapArray`.",null,null],[0,"depth_cubemap_array","conrod::backend::glium::glium::texture","Contains the implementation of `DepthCubemapArray`.",null,null],[3,"DepthCubemapArray","conrod::backend::glium::glium::texture::depth_cubemap_array","An array of cube textures  containing depth data.",null,null],[3,"DepthCubemapArrayLayer","","Represents a single layer of a `DepthCubemapArray`.",null,null],[3,"DepthCubemapArrayMipmap","","Represents a single mipmap level of a `DepthCubemapArray`.",null,null],[3,"DepthCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthCubemapArray`.",null,null],[3,"DepthCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `DepthCubemapArray`.",null,null],[0,"stencil_cubemap_array","conrod::backend::glium::glium::texture","Contains the implementation of `StencilCubemapArray`.",null,null],[3,"StencilCubemapArray","conrod::backend::glium::glium::texture::stencil_cubemap_array","An array of cube textures  containing stencil data.",null,null],[3,"StencilCubemapArrayLayer","","Represents a single layer of a `StencilCubemapArray`.",null,null],[3,"StencilCubemapArrayMipmap","","Represents a single mipmap level of a `StencilCubemapArray`.",null,null],[3,"StencilCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `StencilCubemapArray`.",null,null],[3,"StencilCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `StencilCubemapArray`.",null,null],[0,"depth_stencil_cubemap_array","conrod::backend::glium::glium::texture","Contains the implementation of `DepthStencilCubemapArray`.",null,null],[3,"DepthStencilCubemapArray","conrod::backend::glium::glium::texture::depth_stencil_cubemap_array","An array of cube textures  containing both depth and stencil data.",null,null],[3,"DepthStencilCubemapArrayLayer","","Represents a single layer of a `DepthStencilCubemapArray`.",null,null],[3,"DepthStencilCubemapArrayMipmap","","Represents a single mipmap level of a `DepthStencilCubemapArray`.",null,null],[3,"DepthStencilCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthStencilCubemapArray`.",null,null],[3,"DepthStencilCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `DepthStencilCubemapArray`.",null,null],[4,"CubeLayer","conrod::backend::glium::glium::texture","Represents a layer of a cubemap.",null,null],[13,"PositiveX","","",132,null],[13,"NegativeX","","",132,null],[13,"PositiveY","","",132,null],[13,"NegativeY","","",132,null],[13,"PositiveZ","","",132,null],[13,"NegativeZ","","",132,null],[4,"TextureKind","","Represents a kind of texture.",null,null],[13,"Float","","",133,null],[13,"Integral","","",133,null],[13,"Unsigned","","",133,null],[13,"Depth","","",133,null],[13,"Stencil","","",133,null],[13,"DepthStencil","","",133,null],[4,"MipmapsOption","","Describes what to do about mipmaps during texture creation.",null,null],[13,"NoMipmap","","No mipmap will be allocated or generated.",134,null],[13,"EmptyMipmaps","","Allocates space for all the possible amount of mipmaps given the texture dimensions.",134,null],[13,"EmptyMipmapsMax","","Allocates space for the specified amount of mipmaps (excluding the top level) but does not generate mipmaps.",134,null],[13,"AutoGeneratedMipmaps","","Allocates and generates mipmaps for all the possible levels given the texture dimensions.",134,null],[13,"AutoGeneratedMipmapsMax","","Allocates and generates mipmaps for the specified amount of mipmaps (excluding the top level) the possible levels given the texture dimensions.",134,null],[4,"CompressedMipmapsOption","","Describes what to do about mipmaps during compressed texture creation.",null,null],[13,"NoMipmap","","No mipmaps will be allocated or generated.",135,null],[13,"EmptyMipmaps","","Allocates space for all the possible amount of mipmaps given the texture dimensions.",135,null],[13,"EmptyMipmapsMax","","Allocates space for the specified amount of mipmaps (excluding the top level) but does not generate mipmaps.",135,null],[8,"Texture1dDataSource","","Trait that describes data for a one-dimensional texture.",null,null],[16,"Data","","The type of each pixel.",136,null],[10,"into_raw","","Returns the raw representation of the data.",136,{"i":[{"n":"self"}],"o":{"n":"rawimage1d"}}],[8,"Texture1dDataSink","","Trait that describes types that can be built from one-dimensional texture data.",null,null],[10,"from_raw","","Builds a new object from raw data.",137,{"i":[{"n":"cow"},{"n":"u32"}],"o":{"n":"self"}}],[3,"RawImage1d","","Represents raw data for a two-dimensional image.",null,null],[12,"data","","A contiguous array of pixel data.",138,null],[12,"width","","Number of pixels per column.",138,null],[12,"format","","Formats of the pixels.",138,null],[8,"Texture2dDataSource","","Trait that describes data for a two-dimensional texture.",null,null],[16,"Data","","The type of each pixel.",139,null],[10,"into_raw","","Returns the raw representation of the data.",139,{"i":[{"n":"self"}],"o":{"n":"rawimage2d"}}],[8,"Texture2dDataSink","","Trait that describes types that can be built from two-dimensional texture data.",null,null],[10,"from_raw","","Builds a new object from raw data.",140,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[3,"RawImage2d","","Represents raw data for a two-dimensional image.",null,null],[12,"data","","A contiguous array of pixel data.",141,null],[12,"width","","Number of pixels per column.",141,null],[12,"height","","Number of pixels per row.",141,null],[12,"format","","Formats of the pixels.",141,null],[8,"ToClientFormat","","",null,null],[10,"rgb_format","","",142,{"o":{"n":"clientformat"}}],[10,"rgba_format","","",142,{"o":{"n":"clientformat"}}],[8,"Texture3dDataSource","","Trait that describes data for a two-dimensional texture.",null,null],[16,"Data","","The type of each pixel.",143,null],[10,"into_raw","","Returns the raw representation of the data.",143,{"i":[{"n":"self"}],"o":{"n":"rawimage3d"}}],[8,"Texture3dDataSink","","Trait that describes types that can be built from one-dimensional texture data.",null,null],[10,"from_raw","","Builds a new object from raw data.",144,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[3,"RawImage3d","","Represents raw data for a two-dimensional image.",null,null],[12,"data","","A contiguous array of pixel data.",145,null],[12,"width","","Number of pixels per column.",145,null],[12,"height","","Number of pixels per row.",145,null],[12,"depth","","Number of pixels per depth.",145,null],[12,"format","","Formats of the pixels.",145,null],[4,"TextureCreationError","","Error that can happen when creating a texture.",null,null],[13,"FormatNotSupported","","The requested format is not supported by the backend.",146,null],[13,"DimensionsNotSupported","","The requested texture dimensions are not supported.",146,null],[13,"TypeNotSupported","","The texture format is not supported by the backend.",146,null],[4,"InternalFormat","","Internal format of a texture.",null,null],[13,"OneComponent","","The format has one component.",147,null],[12,"ty1","conrod::backend::glium::glium::texture::InternalFormat","Type of the first component of the format.",147,null],[12,"bits1","","Number of bits of the first component.",147,null],[13,"TwoComponents","conrod::backend::glium::glium::texture","The format has two components.",147,null],[12,"ty1","conrod::backend::glium::glium::texture::InternalFormat","Type of the first component of the format.",147,null],[12,"bits1","","Number of bits of the first component.",147,null],[12,"ty2","","Type of the second component.",147,null],[12,"bits2","","Number of bits of the second component.",147,null],[13,"ThreeComponents","conrod::backend::glium::glium::texture","The format has three components.",147,null],[12,"ty1","conrod::backend::glium::glium::texture::InternalFormat","Type of the first component of the format.",147,null],[12,"bits1","","Number of bits of the first component.",147,null],[12,"ty2","","Type of the second component.",147,null],[12,"bits2","","Number of bits of the second component.",147,null],[12,"ty3","","Type of the third component.",147,null],[12,"bits3","","Number of bits of the third component.",147,null],[13,"FourComponents","conrod::backend::glium::glium::texture","The format has four components.",147,null],[12,"ty1","conrod::backend::glium::glium::texture::InternalFormat","Type of the first component of the format.",147,null],[12,"bits1","","Number of bits of the first component.",147,null],[12,"ty2","","Type of the second component.",147,null],[12,"bits2","","Number of bits of the second component.",147,null],[12,"ty3","","Type of the third component.",147,null],[12,"bits3","","Number of bits of the third component.",147,null],[12,"ty4","","Type of the fourth component.",147,null],[12,"bits4","","Number of bits of the fourth component.",147,null],[4,"StencilFormat","conrod::backend::glium::glium::texture","List of formats available for stencil textures.",null,null],[13,"I1","","",148,null],[13,"I4","","",148,null],[13,"I8","","",148,null],[13,"I16","","",148,null],[3,"TextureAnyImage","","Represents a specific 2D image of a texture. 1D textures are considered as having a height of 1.",null,null],[3,"TextureAnyMipmap","","Represents a specific mipmap of a texture.",null,null],[3,"TextureAny","","A texture whose type isn't fixed at compile-time.",null,null],[4,"GetFormatError","","Error that can happen when retrieving the internal format of a texture.",null,null],[13,"NotSupported","","The backend doesn't support retrieving the internal format.",149,null],[4,"UncompressedUintFormat","","List of uncompressed pixel formats that contain unsigned integral data.",null,null],[13,"U8","","",150,null],[13,"U16","","",150,null],[13,"U32","","",150,null],[13,"U8U8","","",150,null],[13,"U16U16","","",150,null],[13,"U32U32","","",150,null],[13,"U8U8U8","","",150,null],[13,"U16U16U16","","May not be supported by renderbuffers.",150,null],[13,"U32U32U32","","May not be supported by renderbuffers.",150,null],[13,"U8U8U8U8","","May not be supported by renderbuffers.",150,null],[13,"U16U16U16U16","","",150,null],[13,"U32U32U32U32","","",150,null],[13,"U10U10U10U2","","",150,null],[3,"TextureAnyLayer","","Represents a specific layer of an array texture and 3D textures.",null,null],[8,"PixelValue","","A trait that must be implemented for any type that can represent the value of a pixel.",null,null],[10,"get_format","","Returns corresponding client format.",151,{"o":{"n":"clientformat"}}],[4,"SrgbFormat","","List of uncompressed pixel formats that contain floating-point data in the sRGB color space.",null,null],[13,"U8U8U8","","",152,null],[13,"U8U8U8U8","","",152,null],[4,"UncompressedFloatFormat","","List of uncompressed pixel formats that contain floating-point-like data.",null,null],[13,"U8","","Guaranteed to be supported for both textures and renderbuffers.",153,null],[13,"I8","","Guaranteed to be supported for textures.",153,null],[13,"U16","","Guaranteed to be supported for both textures and renderbuffers.",153,null],[13,"I16","","Guaranteed to be supported for textures.",153,null],[13,"U8U8","","Guaranteed to be supported for both textures and renderbuffers.",153,null],[13,"I8I8","","Guaranteed to be supported for textures.",153,null],[13,"U16U16","","Guaranteed to be supported for both textures and renderbuffers.",153,null],[13,"I16I16","","Guaranteed to be supported for textures.",153,null],[13,"U3U3U2","","",153,null],[13,"U4U4U4","","",153,null],[13,"U5U5U5","","",153,null],[13,"U8U8U8","","Guaranteed to be supported for textures.",153,null],[13,"I8I8I8","","Guaranteed to be supported for textures.",153,null],[13,"U10U10U10","","",153,null],[13,"U12U12U12","","",153,null],[13,"U16U16U16","","Guaranteed to be supported for both textures and renderbuffers.",153,null],[13,"I16I16I16","","Guaranteed to be supported for textures.",153,null],[13,"U2U2U2U2","","",153,null],[13,"U4U4U4U4","","",153,null],[13,"U5U5U5U1","","",153,null],[13,"U8U8U8U8","","Guaranteed to be supported for both textures and renderbuffers.",153,null],[13,"I8I8I8I8","","Guaranteed to be supported for textures.",153,null],[13,"U10U10U10U2","","Guaranteed to be supported for both textures and renderbuffers.",153,null],[13,"U12U12U12U12","","",153,null],[13,"U16U16U16U16","","Guaranteed to be supported for both textures and renderbuffers.",153,null],[13,"I16I16I16I16","","Guaranteed to be supported for both textures and renderbuffers.",153,null],[13,"F16","","Guaranteed to be supported for both textures and renderbuffers.",153,null],[13,"F16F16","","Guaranteed to be supported for both textures and renderbuffers.",153,null],[13,"F16F16F16","","Guaranteed to be supported for textures.",153,null],[13,"F16F16F16F16","","Guaranteed to be supported for both textures and renderbuffers.",153,null],[13,"F32","","Guaranteed to be supported for both textures and renderbuffers.",153,null],[13,"F32F32","","Guaranteed to be supported for both textures and renderbuffers.",153,null],[13,"F32F32F32","","Guaranteed to be supported for textures.",153,null],[13,"F32F32F32F32","","Guaranteed to be supported for both textures and renderbuffers.",153,null],[13,"F11F11F10","","Guaranteed to be supported for both textures and renderbuffers.",153,null],[13,"F9F9F9","","Uses three components of 9 bits of precision that all share the same exponent.",153,null],[4,"Dimensions","","Type of a texture.",null,null],[13,"Texture1d","","",154,null],[12,"width","conrod::backend::glium::glium::texture::Dimensions","",154,null],[13,"Texture1dArray","conrod::backend::glium::glium::texture","",154,null],[12,"width","conrod::backend::glium::glium::texture::Dimensions","",154,null],[12,"array_size","","",154,null],[13,"Texture2d","conrod::backend::glium::glium::texture","",154,null],[12,"width","conrod::backend::glium::glium::texture::Dimensions","",154,null],[12,"height","","",154,null],[13,"Texture2dArray","conrod::backend::glium::glium::texture","",154,null],[12,"width","conrod::backend::glium::glium::texture::Dimensions","",154,null],[12,"height","","",154,null],[12,"array_size","","",154,null],[13,"Texture2dMultisample","conrod::backend::glium::glium::texture","",154,null],[12,"width","conrod::backend::glium::glium::texture::Dimensions","",154,null],[12,"height","","",154,null],[12,"samples","","",154,null],[13,"Texture2dMultisampleArray","conrod::backend::glium::glium::texture","",154,null],[12,"width","conrod::backend::glium::glium::texture::Dimensions","",154,null],[12,"height","","",154,null],[12,"array_size","","",154,null],[12,"samples","","",154,null],[13,"Texture3d","conrod::backend::glium::glium::texture","",154,null],[12,"width","conrod::backend::glium::glium::texture::Dimensions","",154,null],[12,"height","","",154,null],[12,"depth","","",154,null],[13,"Cubemap","conrod::backend::glium::glium::texture","",154,null],[12,"dimension","conrod::backend::glium::glium::texture::Dimensions","",154,null],[13,"CubemapArray","conrod::backend::glium::glium::texture","",154,null],[12,"dimension","conrod::backend::glium::glium::texture::Dimensions","",154,null],[12,"array_size","","",154,null],[5,"is_texture_3d_supported","conrod::backend::glium::glium::texture","Returns true is three-dimensional textures are supported.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[5,"is_texture_2d_multisample_supported","","Returns true is two-dimensional multisample textures are supported.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[5,"is_texture_1d_supported","","Returns true is one-dimensional textures are supported.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[3,"TextureAnyLayerMipmap","","Represents a specific layer of a specific mipmap. This is the same as `TextureAnyImage`, except for 3D textures, cubemaps and cubemap arrays.",null,null],[4,"InternalFormatType","","Format of a component of an internal format.",null,null],[13,"SignedNormalized","","Floating point texture with signed components.",155,null],[13,"UnsignedNormalized","","Floating point texture with unsigned components.",155,null],[13,"Float","","Floating point texture with floats.",155,null],[13,"Int","","Integral texture.",155,null],[13,"UnsignedInt","","Unsigned texture.",155,null],[4,"CompressedSrgbFormat","","List of compressed pixel formats in the sRGB color space.",null,null],[13,"Bptc","","BPTC format. sRGB with alpha. Also called `BC7` by DirectX.",156,null],[13,"S3tcDxt1NoAlpha","","",156,null],[13,"S3tcDxt1Alpha","","",156,null],[13,"S3tcDxt3Alpha","","",156,null],[13,"S3tcDxt5Alpha","","",156,null],[4,"DepthFormat","","List of formats available for depth textures.",null,null],[13,"I16","","",157,null],[13,"I24","","",157,null],[13,"I32","","May not be supported by all hardware.",157,null],[13,"F32","","",157,null],[4,"ClientFormat","","List of client-side pixel formats.",null,null],[13,"U8","","",158,null],[13,"U8U8","","",158,null],[13,"U8U8U8","","",158,null],[13,"U8U8U8U8","","",158,null],[13,"I8","","",158,null],[13,"I8I8","","",158,null],[13,"I8I8I8","","",158,null],[13,"I8I8I8I8","","",158,null],[13,"U16","","",158,null],[13,"U16U16","","",158,null],[13,"U16U16U16","","",158,null],[13,"U16U16U16U16","","",158,null],[13,"I16","","",158,null],[13,"I16I16","","",158,null],[13,"I16I16I16","","",158,null],[13,"I16I16I16I16","","",158,null],[13,"U32","","",158,null],[13,"U32U32","","",158,null],[13,"U32U32U32","","",158,null],[13,"U32U32U32U32","","",158,null],[13,"I32","","",158,null],[13,"I32I32","","",158,null],[13,"I32I32I32","","",158,null],[13,"I32I32I32I32","","",158,null],[13,"U3U3U2","","",158,null],[13,"U5U6U5","","",158,null],[13,"U4U4U4U4","","",158,null],[13,"U5U5U5U1","","",158,null],[13,"U10U10U10U2","","",158,null],[13,"F16","","",158,null],[13,"F16F16","","",158,null],[13,"F16F16F16","","",158,null],[13,"F16F16F16F16","","",158,null],[13,"F32","","",158,null],[13,"F32F32","","",158,null],[13,"F32F32F32","","",158,null],[13,"F32F32F32F32","","",158,null],[4,"CompressedFormat","","List of compressed texture formats.",null,null],[13,"RgtcFormatU","","Red/green compressed texture with one unsigned component.",159,null],[13,"RgtcFormatI","","Red/green compressed texture with one signed component.",159,null],[13,"RgtcFormatUU","","Red/green compressed texture with two unsigned components.",159,null],[13,"RgtcFormatII","","Red/green compressed texture with two signed components.",159,null],[13,"BptcUnorm4","","BPTC format with four components represented as integers.",159,null],[13,"BptcSignedFloat3","","BPTC format with three components (no alpha) represented as signed floats.",159,null],[13,"BptcUnsignedFloat3","","BPTC format with three components (no alpha) represented as unsigned floats.",159,null],[13,"S3tcDxt1NoAlpha","","S3TC DXT1 without alpha, see https://www.opengl.org/wiki/S3_Texture_Compression.",159,null],[13,"S3tcDxt1Alpha","","S3TC DXT1 with 1-bit alpha, see https://www.opengl.org/wiki/S3_Texture_Compression.",159,null],[13,"S3tcDxt3Alpha","","S3TC DXT3, see https://www.opengl.org/wiki/S3_Texture_Compression.",159,null],[13,"S3tcDxt5Alpha","","S3TC DXT5, see https://www.opengl.org/wiki/S3_Texture_Compression.",159,null],[5,"is_texture_2d_supported","","Returns true is two-dimensional textures are supported.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[5,"is_texture_1d_array_supported","","Returns true is one-dimensional texture arrays are supported.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[5,"is_texture_2d_multisample_array_supported","","Returns true is two-dimensional multisample texture arrays are supported.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[4,"UncompressedIntFormat","","List of uncompressed pixel formats that contain signed integral data.",null,null],[13,"I8","","",160,null],[13,"I16","","",160,null],[13,"I32","","",160,null],[13,"I8I8","","",160,null],[13,"I16I16","","",160,null],[13,"I32I32","","",160,null],[13,"I8I8I8","","",160,null],[13,"I16I16I16","","May not be supported by renderbuffers.",160,null],[13,"I32I32I32","","May not be supported by renderbuffers.",160,null],[13,"I8I8I8I8","","May not be supported by renderbuffers.",160,null],[13,"I16I16I16I16","","",160,null],[13,"I32I32I32I32","","",160,null],[4,"TextureFormat","","Format of the internal representation of a texture.",null,null],[13,"UncompressedFloat","","",161,null],[13,"UncompressedIntegral","","",161,null],[13,"UncompressedUnsigned","","",161,null],[13,"Srgb","","",161,null],[13,"CompressedFormat","","",161,null],[13,"CompressedSrgbFormat","","",161,null],[13,"DepthFormat","","",161,null],[13,"StencilFormat","","",161,null],[13,"DepthStencilFormat","","",161,null],[5,"is_cubemap_arrays_supported","","Returns true is cubemap arrays are supported.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[4,"DepthStencilFormat","","List of formats available for depth-stencil textures.",null,null],[13,"I24I8","","",162,null],[13,"F32I8","","",162,null],[5,"is_texture_2d_array_supported","","Returns true is two-dimensional texture arrays are supported.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[5,"is_cubemaps_supported","","Returns true is cubemaps are supported.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[8,"CapabilitiesSource","conrod::backend::glium::glium","Trait for objects that describe the capabilities of an OpenGL backend.",null,null],[10,"get_version","","Returns the version of the backend.",163,{"i":[{"n":"self"}],"o":{"n":"version"}}],[10,"get_extensions","","Returns the list of extensions that are supported.",163,{"i":[{"n":"self"}],"o":{"n":"extensionslist"}}],[10,"get_capabilities","","Returns the capabilities of the backend.",163,{"i":[{"n":"self"}],"o":{"n":"capabilities"}}],[8,"GlObject","","Trait for objects that are OpenGL objects.",null,null],[16,"Id","","The type of identifier for this object.",164,null],[10,"get_id","","Returns the id of the object.",164,null],[4,"Handle","","Handle to a shader or a program.",null,null],[13,"Id","","A numeric identifier.",165,null],[13,"Handle","","A `GLhandleARB`.",165,null],[4,"RawUniformValue","","A raw value of a uniform. \"Raw\" means that it's passed directly with `glUniform`. Textures for example are just passed as integers.",null,null],[13,"SignedInt","","",166,null],[13,"UnsignedInt","","",166,null],[13,"Float","","",166,null],[13,"Mat2","","2x2 column-major matrix.",166,null],[13,"Mat3","","3x3 column-major matrix.",166,null],[13,"Mat4","","4x4 column-major matrix.",166,null],[13,"Vec2","","",166,null],[13,"Vec3","","",166,null],[13,"Vec4","","",166,null],[13,"IntVec2","","",166,null],[13,"IntVec3","","",166,null],[13,"IntVec4","","",166,null],[13,"UnsignedIntVec2","","",166,null],[13,"UnsignedIntVec3","","",166,null],[13,"UnsignedIntVec4","","",166,null],[13,"Double","","",166,null],[13,"DoubleMat2","","",166,null],[13,"DoubleMat3","","",166,null],[13,"DoubleMat4","","",166,null],[13,"DoubleVec2","","",166,null],[13,"DoubleVec3","","",166,null],[13,"DoubleVec4","","",166,null],[13,"Int64","","",166,null],[13,"Int64Vec2","","",166,null],[13,"Int64Vec3","","",166,null],[13,"Int64Vec4","","",166,null],[13,"UnsignedInt64","","",166,null],[13,"UnsignedInt64Vec2","","",166,null],[13,"UnsignedInt64Vec3","","",166,null],[13,"UnsignedInt64Vec4","","",166,null],[3,"Rect","","Area of a surface in pixels.",null,null],[12,"left","","Number of pixels between the left border of the surface and the left border of the rectangle.",167,null],[12,"bottom","","Number of pixels between the bottom border of the surface and the bottom border of the rectangle.",167,null],[12,"width","","Width of the area in pixels.",167,null],[12,"height","","Height of the area in pixels.",167,null],[3,"BlitTarget","","Area of a surface in pixels. Similar to a `Rect` except that dimensions can be negative.",null,null],[12,"left","","Number of pixels between the left border of the surface and the left border of the rectangle.",168,null],[12,"bottom","","Number of pixels between the bottom border of the surface and the bottom border of the rectangle.",168,null],[12,"width","","Width of the area in pixels. Can be negative.",168,null],[12,"height","","Height of the area in pixels. Can be negative.",168,null],[8,"Surface","","Object that can be drawn upon.",null,null],[10,"clear","","Clears some attachments of the target.",169,null],[11,"clear_color","","Clears the color attachment of the target.",169,null],[11,"clear_color_srgb","","Clears the color attachment of the target. The color is in sRGB format.",169,null],[11,"clear_depth","","Clears the depth attachment of the target.",169,null],[11,"clear_stencil","","Clears the stencil attachment of the target.",169,null],[11,"clear_color_and_depth","","Clears the color and depth attachments of the target.",169,null],[11,"clear_color_srgb_and_depth","","Clears the color and depth attachments of the target. The color is in sRGB format.",169,null],[11,"clear_color_and_stencil","","Clears the color and stencil attachments of the target.",169,null],[11,"clear_color_srgb_and_stencil","","Clears the color and stencil attachments of the target. The color is in sRGB format.",169,null],[11,"clear_depth_and_stencil","","Clears the depth and stencil attachments of the target.",169,null],[11,"clear_all","","Clears the color, depth and stencil attachments of the target.",169,null],[11,"clear_all_srgb","","Clears the color, depth and stencil attachments of the target. The color is in sRGB format.",169,null],[10,"get_dimensions","","Returns the dimensions in pixels of the target.",169,null],[10,"get_depth_buffer_bits","","Returns the number of bits of each pixel of the depth buffer.",169,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"has_depth_buffer","","Returns true if the surface has a depth buffer available.",169,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"get_stencil_buffer_bits","","Returns the number of bits of each pixel of the stencil buffer.",169,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"has_stencil_buffer","","Returns true if the surface has a stencil buffer available.",169,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"draw","","Draws.",169,{"i":[{"n":"self"},{"n":"v"},{"n":"i"},{"n":"program"},{"n":"u"},{"n":"drawparameters"}],"o":{"g":["drawerror"],"n":"result"}}],[10,"blit_from_frame","","Blits from the default framebuffer.",169,null],[10,"blit_from_simple_framebuffer","","Blits from a simple framebuffer.",169,null],[10,"blit_from_multioutput_framebuffer","","Blits from a multi-output framebuffer.",169,null],[10,"blit_color","","Copies a rectangle of pixels from this surface to another surface.",169,null],[11,"blit_whole_color_to","","Copies the entire surface to a target surface. See `blit_color`.",169,null],[11,"fill","","Copies the entire surface to the entire target. See `blit_color`.",169,null],[4,"DrawError","","Error that can happen while drawing.",null,null],[13,"NoDepthBuffer","","A depth function has been requested but no depth buffer is available.",170,null],[13,"AttributeTypeMismatch","","The type of a vertex attribute in the vertices source doesn't match what the program requires.",170,null],[13,"AttributeMissing","","One of the attributes required by the program is missing from the vertex format.",170,null],[13,"ViewportTooLarge","","The viewport's dimensions are not supported by the backend.",170,null],[13,"InvalidDepthRange","","The depth range is outside of the `(0, 1)` range.",170,null],[13,"UniformTypeMismatch","","The type of a uniform doesn't match what the program requires.",170,null],[12,"name","conrod::backend::glium::glium::DrawError","Name of the uniform you are trying to bind.",170,null],[12,"expected","","The expected type.",170,null],[13,"UniformBufferToValue","conrod::backend::glium::glium","Tried to bind a uniform buffer to a single uniform value.",170,null],[12,"name","conrod::backend::glium::glium::DrawError","Name of the uniform you are trying to bind.",170,null],[13,"UniformValueToBlock","conrod::backend::glium::glium","Tried to bind a single uniform value to a uniform block.",170,null],[12,"name","conrod::backend::glium::glium::DrawError","Name of the uniform you are trying to bind.",170,null],[13,"UniformBlockLayoutMismatch","conrod::backend::glium::glium","The layout of the content of the uniform buffer does not match the layout of the block.",170,null],[12,"name","conrod::backend::glium::glium::DrawError","Name of the block you are trying to bind.",170,null],[12,"err","","The error giving more details about the mismatch.",170,null],[13,"SubroutineUniformToValue","conrod::backend::glium::glium","Tried to bind a subroutine uniform like a regular uniform value.",170,null],[12,"name","conrod::backend::glium::glium::DrawError","Name of the uniform you are trying to bind.",170,null],[13,"SubroutineUniformMissing","conrod::backend::glium::glium","Not all subroutine uniforms of a shader stage were set.",170,null],[12,"stage","conrod::backend::glium::glium::DrawError","Shader stage with missing bindings.",170,null],[12,"expected_count","","The expected number of bindings.",170,null],[12,"real_count","","The number of bindings defined by the user.",170,null],[13,"SubroutineNotFound","conrod::backend::glium::glium","A non-existent subroutine was referenced.",170,null],[12,"stage","conrod::backend::glium::glium::DrawError","The stage the subroutine was searched for.",170,null],[12,"name","","The invalid name of the subroutine.",170,null],[13,"UnsupportedVerticesPerPatch","conrod::backend::glium::glium","The number of vertices per patch that has been requested is not supported.",170,null],[13,"TessellationNotSupported","","Trying to use tessellation, but this is not supported by the underlying hardware.",170,null],[13,"TessellationWithoutPatches","","Using a program which contains tessellation shaders, but without submitting patches.",170,null],[13,"SamplersNotSupported","","Trying to use a sampler, but they are not supported by the backend.",170,null],[13,"InstancesCountMismatch","","When you use instancing, all vertices sources must have the same size.",170,null],[13,"VerticesSourcesLengthMismatch","","If you don't use indices, then all vertices sources must have the same size.",170,null],[13,"TransformFeedbackNotSupported","","You requested not to draw primitives, but this is not supported by the backend.",170,null],[13,"WrongQueryOperation","","See the documentation of the `draw_parameters` module for infos.",170,null],[13,"SmoothingNotSupported","","You requested smoothing, but this is not supported by the backend.",170,null],[13,"ProvokingVertexNotSupported","","The requested provoking vertex is not supported by the backend.",170,null],[13,"RasterizerDiscardNotSupported","","Discarding rasterizer output isn't supported by the backend.",170,null],[13,"DepthClampNotSupported","","Depth clamping isn't supported by the backend.",170,null],[13,"BlendingParameterNotSupported","","One of the blending parameters is not supported by the backend.",170,null],[13,"FixedIndexRestartingNotSupported","","Restarting indices (multiple objects per draw call) is not supported by the backend.",170,null],[13,"ClipPlaneIndexOutOfBounds","","Tried to enable a clip plane that does not exist.",170,null],[4,"SwapBuffersError","","Error that can happen when swapping buffers.",null,null],[13,"ContextLost","","The OpenGL context has been lost and needs to be recreated. The `Display` and all the objects associated to it (textures, buffers, programs, etc.) need to be recreated from scratch.",171,null],[13,"AlreadySwapped","","The buffers have already been swapped.",171,null],[3,"Frame","","Implementation of `Surface`, targeting the default framebuffer.",null,null],[3,"IncompatibleOpenGl","","Returned during Context creation if the OpenGL implementation is too old.",null,null],[12,"0","","",172,null],[5,"get_supported_glsl_version","","Given an API version, this function returns the GLSL version that the implementation is required to support.",null,{"i":[{"n":"version"}],"o":{"n":"version"}}],[4,"Api","","Describes an OpenGL-related API.",null,null],[13,"Gl","","Regular OpenGL.",173,null],[13,"GlEs","","OpenGL embedded system.",173,null],[3,"SyncFence","","Provides a way to wait for a server-side operation to be finished.",null,null],[3,"LinearSyncFence","","Prototype for a `SyncFence`.",null,null],[4,"Profile","","Describes the OpenGL context profile.",null,null],[13,"Core","","The context uses only future-compatible functions and definitions.",174,null],[13,"Compatibility","","The context includes all immediate mode functions and definitions.",174,null],[3,"Version","","Describes a version.",null,null],[12,"0","","",175,null],[12,"1","","",175,null],[12,"2","","",175,null],[3,"GlyphCache","conrod::backend::glium","A rusttype `GlyphCache` along with a `glium::texture::Texture2d` for caching text on the `GPU`.",null,null],[3,"Renderer","","A type used for translating `render::Primitives` into `Command`s that indicate how to draw the conrod GUI using `glium`.",null,null],[3,"Commands","","An iterator yielding `Command`s, produced by the `Renderer::commands` method.",null,null],[3,"Vertex","","The `Vertex` type passed to the vertex shader.",null,null],[12,"mode","","The mode with which the `Vertex` will be drawn within the fragment shader.",176,null],[12,"position","","The position of the vertex within vector space.",176,null],[12,"tex_coords","","The coordinates of the texture used by this `Vertex`.",176,null],[12,"color","","A color associated with the `Vertex`.",176,null],[4,"Command","","A `Command` describing a step in the drawing process.",null,null],[13,"Draw","","Draw to the target.",177,null],[13,"Scizzor","","Update the scizzor within the `glium::DrawParameters`.",177,null],[4,"Draw","","A `Command` for drawing to the target.",null,null],[13,"Image","","A range of vertices representing triangles textured with the image in the image_map at the given `widget::Id`.",178,null],[13,"Plain","","A range of vertices representing plain triangles.",178,null],[4,"RendererCreationError","","Possible errors that may occur during a call to `Renderer::new`.",null,null],[13,"Texture","","Errors that might occur when creating the glyph cache texture.",179,null],[13,"Program","","Errors that might occur when constructing the shader program.",179,null],[4,"DrawError","","Possible errors that may occur during a call to `Renderer::draw`.",null,null],[13,"Buffer","","Errors that might occur upon construction of a `glium::VertexBuffer`.",180,null],[13,"Draw","","Errors that might occur when drawing to the `glium::Surface`.",180,null],[5,"program","","Construct the glium shader program that can be used to render `Vertex`es.",null,{"i":[{"n":"f"}],"o":{"g":["program","programchoosercreationerror"],"n":"result"}}],[5,"draw_parameters","","Default glium `DrawParameters` with alpha blending enabled.",null,{"o":{"n":"drawparameters"}}],[5,"gamma_srgb_to_linear","","Converts gamma (brightness) from sRGB to linear color space.",null,null],[5,"text_texture_client_format","","Return the optimal client format for the text texture given the version.",null,{"i":[{"n":"version"}],"o":{"n":"clientformat"}}],[5,"text_texture_uncompressed_float_format","","Return the optimal uncompressed float format for the text texture given the version.",null,{"i":[{"n":"version"}],"o":{"n":"uncompressedfloatformat"}}],[11,"build_bindings","","",176,{"o":{"n":"vertexformat"}}],[17,"MODE_TEXT","","Draw text from the text cache texture `tex` in the fragment shader.",null,null],[17,"MODE_IMAGE","","Draw an image from the texture at `tex` in the fragment shader.",null,null],[17,"MODE_GEOMETRY","","Ignore `tex` and draw simple, colored 2D geometry.",null,null],[17,"VERTEX_SHADER_120","","The vertex shader used within the `glium::Program` for OpenGL.",null,null],[17,"FRAGMENT_SHADER_120","","The fragment shader used within the `glium::Program` for OpenGL.",null,null],[17,"VERTEX_SHADER_140","","The vertex shader used within the `glium::Program` for OpenGL.",null,null],[17,"FRAGMENT_SHADER_140","","The fragment shader used within the `glium::Program` for OpenGL.",null,null],[17,"VERTEX_SHADER_300_ES","","The vertex shader used within the `glium::Program` for OpenGL ES.",null,null],[17,"FRAGMENT_SHADER_300_ES","","The fragment shader used within the `glium::Program` for OpenGL ES.",null,null],[8,"TextureDimensions","","Glium textures that have two dimensions.",null,null],[10,"dimensions","","The width and height of the texture.",181,null],[11,"clone","","",177,{"i":[{"n":"self"}],"o":{"n":"command"}}],[11,"fmt","","",177,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",178,{"i":[{"n":"self"}],"o":{"n":"draw"}}],[11,"fmt","","",178,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",179,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",180,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",176,{"i":[{"n":"self"}],"o":{"n":"vertex"}}],[11,"fmt","","",176,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"with_dimensions","","Construct a GlyphCache with the given texture dimensions.",182,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texturecreationerror"],"n":"result"}}],[11,"new","","Construct a `GlyphCache` with a size equal to the given `Display`'s current framebuffer dimensions.",182,{"i":[{"n":"f"}],"o":{"g":["texturecreationerror"],"n":"result"}}],[11,"texture","","The texture used to cache the glyphs on the GPU.",182,{"i":[{"n":"self"}],"o":{"n":"texture2d"}}],[11,"new","","Construct a new empty `Renderer`.",183,{"i":[{"n":"f"}],"o":{"g":["renderercreationerror"],"n":"result"}}],[11,"with_glyph_cache_dimensions","","Construct a new empty `Renderer` with the given glyph cache dimensions.",183,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["renderercreationerror"],"n":"result"}}],[11,"commands","","Produce an `Iterator` yielding `Command`s.",183,{"i":[{"n":"self"}],"o":{"n":"commands"}}],[11,"fill","","Fill the inner vertex and command buffers by translating the given `primitives`.",183,{"i":[{"n":"self"},{"n":"display"},{"n":"p"},{"n":"map"}]}],[11,"draw","","Draws using the inner list of `Command`s to the given `display`.",183,{"i":[{"n":"self"},{"n":"f"},{"n":"s"},{"n":"map"}],"o":{"g":["drawerror"],"n":"result"}}],[11,"next","","",184,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"from","","",179,{"i":[{"n":"texturecreationerror"}],"o":{"n":"self"}}],[11,"from","","",179,{"i":[{"n":"programchoosercreationerror"}],"o":{"n":"self"}}],[11,"description","","",179,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",179,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"from","","",180,{"i":[{"n":"buffercreationerror"}],"o":{"n":"self"}}],[11,"from","","",180,{"i":[{"n":"drawerror"}],"o":{"n":"self"}}],[11,"description","","",180,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",180,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[0,"winit","conrod::backend","A function for converting a `winit::Event` to a `conrod::event::Input`.",null,null],[5,"convert_event","conrod::backend::winit","A function for converting a `winit::Event` to a `conrod::event::Input`.",null,{"i":[{"n":"event"},{"n":"w"}],"o":{"g":["input"],"n":"option"}}],[5,"convert_window_event","","A function for converting a `winit::WindowEvent` to a `conrod::event::Input`.",null,{"i":[{"n":"windowevent"},{"n":"w"}],"o":{"g":["input"],"n":"option"}}],[5,"map_key","","Maps winit's key to a conrod `Key`.",null,{"i":[{"n":"virtualkeycode"}],"o":{"n":"key"}}],[5,"map_mouse","","Maps winit's mouse button to conrod's mouse button.",null,{"i":[{"n":"mousebutton"}],"o":{"n":"mousebutton"}}],[5,"convert_mouse_cursor","","Convert a given conrod mouse cursor to the corresponding winit cursor type.",null,{"i":[{"n":"mousecursor"}],"o":{"n":"mousecursor"}}],[8,"WinitWindow","","Types that have access to a `winit::Window` and can provide the necessary dimensions and hidpi factor for converting `winit::Event`s to `conrod::event::Input`, as well as set the mouse cursor.",null,null],[10,"get_inner_size","","Return the inner size of the window in pixels.",185,{"i":[{"n":"self"}],"o":{"n":"option"}}],[10,"hidpi_factor","","Return the window's DPI factor so that we can convert from pixel values to scalar values.",185,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"get_inner_size","conrod::backend::glium::glium::backend::glutin::glutin","",186,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"hidpi_factor","","",186,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"get_inner_size","conrod::backend::glium::glium::backend::glutin","",187,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"hidpi_factor","","",187,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[0,"piston","conrod::backend","Functionality for simplifying the work involved when using conrod along-side piston.",null,null],[0,"draw","conrod::backend::piston","A piston backend for rendering conrod primitives.",null,null],[3,"Context","conrod::backend::piston::draw","Drawing 2d context.",null,null],[12,"viewport","","Viewport information.",188,null],[12,"view","","View transformation.",188,null],[12,"transform","","Current transformation.",188,null],[12,"draw_state","","Current draw state settings.",188,null],[3,"DrawState","","Graphics draw state used for blending, clipping and stencil rendering.",null,null],[12,"scissor","","Scissor mask to use. If set, no pixel outside of this rectangle (in screen space) will be written to as a result of rendering.",189,null],[12,"stencil","","Stencil test to use. If None, no stencil testing is done.",189,null],[12,"blend","","Blend function to use. If None, blending is disabled.",189,null],[8,"Graphics","","Implemented by all graphics back-ends.",null,null],[16,"Texture","","The texture type associated with the back-end.",190,null],[10,"clear_color","","Clears background with a color.",190,null],[10,"clear_stencil","","Clears stencil buffer with a value, usually 0.",190,null],[10,"tri_list","","Renders list of 2d triangles using a solid color.",190,null],[10,"tri_list_uv","","Renders list of 2d triangles using a color and a texture.",190,null],[11,"rectangle","","Draws a rectangle.",190,null],[11,"polygon","","Draws a polygon.",190,null],[11,"polygon_tween_lerp","","Draws a tweened polygon using linear interpolation.",190,null],[11,"image","","Draws image.",190,null],[11,"ellipse","","Draws ellipse.",190,null],[11,"line","","Draws line.",190,null],[11,"circle_arc","","Draws circle arc.",190,null],[11,"deform_image","","Draws deformed image.",190,null],[8,"ImageSize","","Implemented by all images to be used with generic algorithms.",null,null],[10,"get_size","","Get the image size.",191,null],[11,"get_width","","Gets the image width.",191,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_height","","Gets the image height.",191,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[8,"Transformed","","Implemented by contexts that can transform.",null,null],[10,"append_transform","","Appends transform to the current one.",192,null],[10,"prepend_transform","","Prepends transform to the current one.",192,null],[10,"trans","","Translate x and y in local coordinates.",192,{"i":[{"n":"self"},{"n":"f64"},{"n":"f64"}],"o":{"n":"self"}}],[11,"rot_deg","","Rotates degrees in local coordinates.",192,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"self"}}],[10,"rot_rad","","Rotate radians in local coordinates.",192,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"self"}}],[10,"orient","","Orients x axis to look at point locally.",192,{"i":[{"n":"self"},{"n":"f64"},{"n":"f64"}],"o":{"n":"self"}}],[10,"scale","","Scales in local coordinates.",192,{"i":[{"n":"self"},{"n":"f64"},{"n":"f64"}],"o":{"n":"self"}}],[11,"zoom","","Scales in both directions in local coordinates.",192,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"self"}}],[11,"flip_v","","Flips vertically in local coordinates.",192,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"flip_h","","Flips horizontally in local coordinates.",192,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"flip_hv","","Flips horizontally and vertically in local coordinates.",192,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"shear","","Shears in local coordinates.",192,null],[5,"primitives","","Render the given sequence of conrod primitive widgets.",null,{"i":[{"n":"p"},{"n":"context"},{"n":"g"},{"n":"t"},{"n":"glyphcache"},{"n":"map"},{"n":"c"},{"n":"f"}]}],[5,"primitive","","Render a single `Primitive`.",null,{"i":[{"n":"primitive"},{"n":"context"},{"n":"g"},{"n":"t"},{"n":"glyphcache"},{"n":"map"},{"n":"vec"},{"n":"c"},{"n":"f"}]}],[0,"event","conrod::backend::piston","A backend for converting piston events to conrod's `Input` type.",null,null],[8,"GenericEvent","conrod::backend::piston::event","Implemented by all events",null,null],[10,"event_id","","The id of this event.",193,{"i":[{"n":"self"}],"o":{"n":"eventid"}}],[10,"with_args","","Calls closure with arguments",193,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"u"}}],[8,"UpdateEvent","","When the application state should be updated",null,null],[10,"from_update_args","","Creates an update event.",194,{"i":[{"n":"updateargs"},{"n":"self"}],"o":{"n":"option"}}],[11,"from_dt","","Creates an update event with delta time.",194,{"i":[{"n":"f64"},{"n":"self"}],"o":{"n":"option"}}],[10,"update","","Calls closure if this is an update event.",194,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"update_args","","Returns update arguments.",194,{"i":[{"n":"self"}],"o":{"g":["updateargs"],"n":"option"}}],[5,"convert","","Converts any `GenericEvent` to an `Input` event for conrod.",null,{"i":[{"n":"e"},{"n":"scalar"},{"n":"scalar"}],"o":{"g":["input"],"n":"option"}}],[0,"gfx","conrod::backend","",null,null],[3,"Commands","conrod::backend::gfx","An iterator yielding `Command`s, produced by the `Renderer::commands` method.",null,null],[3,"Renderer","","",null,null],[4,"Command","","A `Command` describing a step in the drawing process.",null,null],[13,"Draw","","Draw to the target.",195,null],[13,"Scizzor","","Update the scizzor within the pipeline.",195,null],[4,"Draw","","A `Command` for drawing to the target.",null,null],[13,"Image","","A range of vertices representing triangles textured with the image in the image_map at the given `widget::Id`.",196,null],[13,"Plain","","A range of vertices representing plain triangles.",196,null],[4,"RendererCreationError","","Possible errors that may occur during a call to `Renderer::new`.",null,null],[13,"PipelineState","","Errors that might occur when creating the pipeline.",197,null],[6,"ColorFormat","","",null,null],[17,"MODE_TEXT","","Draw text from the text cache texture `tex` in the fragment shader.",null,null],[17,"MODE_IMAGE","","Draw an image from the texture at `tex` in the fragment shader.",null,null],[17,"MODE_GEOMETRY","","Ignore `tex` and draw simple, colored 2D geometry.",null,null],[11,"clone","","",195,{"i":[{"n":"self"}],"o":{"n":"command"}}],[11,"fmt","","",195,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",196,{"i":[{"n":"self"}],"o":{"n":"draw"}}],[11,"fmt","","",196,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",197,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",198,{"i":[{"n":"f"},{"n":"rendertargetview"},{"n":"f64"}],"o":{"g":["renderercreationerror"],"n":"result"}}],[11,"commands","","Produce an `Iterator` yielding `Command`s.",198,{"i":[{"n":"self"}],"o":{"n":"commands"}}],[11,"fill","","Fill the inner vertex and command buffers by translating the given `primitives`.",198,null],[11,"draw","","Draws using the inner list of `Command`s to the given `display`.",198,{"i":[{"n":"self"},{"n":"f"},{"n":"encoder"},{"n":"map"}]}],[11,"next","","",199,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"from","","",197,{"i":[{"g":["string"],"n":"pipelinestateerror"}],"o":{"n":"self"}}],[11,"description","","",197,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",197,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"clone","conrod","",2,{"i":[{"n":"self"}],"o":{"n":"bordering"}}],[0,"color","","A library providing simple `Color` and `Gradient` types along with useful transformations and presets.",null,null],[3,"Hsla","conrod::color","The parts of HSL along with an alpha for transparency.",null,null],[12,"0","","",200,null],[12,"1","","",200,null],[12,"2","","",200,null],[12,"3","","",200,null],[3,"Rgba","","The parts of RGB along with an alpha for transparency.",null,null],[12,"0","","",201,null],[12,"1","","",201,null],[12,"2","","",201,null],[12,"3","","",201,null],[4,"Color","","Color supporting RGB and HSL variants.",null,null],[13,"Rgba","","Red, Green, Blue, Alpha - All values' scales represented between 0.0 and 1.0.",202,null],[13,"Hsla","","Hue, Saturation, Lightness, Alpha - all valuess scales represented between 0.0 and 1.0.",202,null],[4,"Gradient","","Linear or Radial Gradient.",null,null],[13,"Linear","","Takes a start and end point and then a series of color stops that indicate how to interpolate between the start and end points.",203,null],[13,"Radial","","First takes a start point and inner radius. Then takes an end point and outer radius. It then takes a series of color stops that indicate how to interpolate between the inner and outer circles.",203,null],[5,"rgba","","Create RGB colors with an alpha component for transparency. The alpha component is specified with numbers between 0 and 1.",null,{"i":[{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"color"}}],[5,"rgb","","Create RGB colors from numbers between 0.0 and 1.0.",null,{"i":[{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"color"}}],[5,"rgba_bytes","","Create RGB colors from numbers between 0 and 255 inclusive. The alpha component is specified with numbers between 0 and 1.",null,{"i":[{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"f32"}],"o":{"n":"color"}}],[5,"rgb_bytes","","Create RGB colors from numbers between 0 and 255 inclusive.",null,{"i":[{"n":"u8"},{"n":"u8"},{"n":"u8"}],"o":{"n":"color"}}],[5,"hsla","","Create HSL colors with an alpha component for transparency.",null,{"i":[{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"color"}}],[5,"hsl","","Create HSL colors. This gives you access to colors more like a color wheel, where all hues are arranged in a circle that you specify with radians.",null,{"i":[{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"color"}}],[5,"grayscale","","Produce a gray based on the input. 0.0 is white, 1.0 is black.",null,{"i":[{"n":"f32"}],"o":{"n":"color"}}],[5,"greyscale","","Produce a gray based on the input. 0.0 is white, 1.0 is black.",null,{"i":[{"n":"f32"}],"o":{"n":"color"}}],[5,"f32_to_byte","","Convert an f32 color to a byte.",null,{"i":[{"n":"f32"}],"o":{"n":"u8"}}],[5,"rgb_to_hsl","","Pure function for converting rgb to hsl.",null,null],[5,"hsl_to_rgb","","Pure function for converting hsl to rgb.",null,null],[5,"linear","","Create a linear gradient.",null,null],[5,"radial","","Create a radial gradient. ",null,null],[6,"Colour","","Regional spelling alias.",null,null],[17,"LIGHT_RED","","Scarlet Red - Light - #EF2929                         ",null,null],[17,"RED","","Scarlet Red - Regular - #CC0000                       ",null,null],[17,"DARK_RED","","Scarlet Red - Dark - #A30000                          ",null,null],[17,"LIGHT_ORANGE","","Orange - Light - #FCAF3E                              ",null,null],[17,"ORANGE","","Orange - Regular - #F57900                            ",null,null],[17,"DARK_ORANGE","","Orange - Dark - #CE5C00                               ",null,null],[17,"LIGHT_YELLOW","","Butter - Light - #FCE94F                              ",null,null],[17,"YELLOW","","Butter - Regular - #EDD400                            ",null,null],[17,"DARK_YELLOW","","Butter - Dark - #C4A000                               ",null,null],[17,"LIGHT_GREEN","","Chameleon - Light - #8AE234                           ",null,null],[17,"GREEN","","Chameleon - Regular - #73D216                         ",null,null],[17,"DARK_GREEN","","Chameleon - Dark - #4E9A06                            ",null,null],[17,"LIGHT_BLUE","","Sky Blue - Light - #729FCF                            ",null,null],[17,"BLUE","","Sky Blue - Regular - #3465A4                          ",null,null],[17,"DARK_BLUE","","Sky Blue - Dark - #204A87                             ",null,null],[17,"LIGHT_PURPLE","","Plum - Light - #AD7FA8                                ",null,null],[17,"PURPLE","","Plum - Regular - #75507B                              ",null,null],[17,"DARK_PURPLE","","Plum - Dark - #5C3566                                 ",null,null],[17,"LIGHT_BROWN","","Chocolate - Light - #E9B96E                           ",null,null],[17,"BROWN","","Chocolate - Regular - #C17D11                         ",null,null],[17,"DARK_BROWN","","Chocolate - Dark - #8F5902                            ",null,null],[17,"BLACK","","Straight Black.                                       ",null,null],[17,"WHITE","","Straight White.                                       ",null,null],[17,"LIGHT_GRAY","","Alluminium - Light                                    ",null,null],[17,"GRAY","","Alluminium - Regular                                  ",null,null],[17,"DARK_GRAY","","Alluminium - Dark                                     ",null,null],[17,"LIGHT_GREY","","Aluminium - Light - #EEEEEC                           ",null,null],[17,"GREY","","Aluminium - Regular - #D3D7CF                         ",null,null],[17,"DARK_GREY","","Aluminium - Dark - #BABDB6                            ",null,null],[17,"LIGHT_CHARCOAL","","Charcoal - Light - #888A85                            ",null,null],[17,"CHARCOAL","","Charcoal - Regular - #555753                          ",null,null],[17,"DARK_CHARCOAL","","Charcoal - Dark - #2E3436                             ",null,null],[17,"TRANSPARENT","","Transparent",null,null],[8,"Colorable","","Types that can be colored.",null,null],[10,"color","","Set the color of the widget.",204,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"rgba","","Set the color of the widget from rgba values.",204,{"i":[{"n":"self"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"self"}}],[11,"rgb","","Set the color of the widget from rgb values.",204,{"i":[{"n":"self"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"self"}}],[11,"hsla","","Set the color of the widget from hsla values.",204,{"i":[{"n":"self"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"self"}}],[11,"hsl","","Set the color of the widget from hsl values.",204,{"i":[{"n":"self"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"self"}}],[11,"eq","","",202,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"ne","","",202,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"clone","","",202,{"i":[{"n":"self"}],"o":{"n":"color"}}],[11,"fmt","","",202,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"complement","","Produce a complementary color. The two colors will accent each other. This is the same as rotating the hue by 180 degrees.",202,{"i":[{"n":"self"}],"o":{"n":"color"}}],[11,"luminance","","Calculate and return the luminance of the Color.",202,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"plain_contrast","","Return either black or white, depending which contrasts the Color the most. This will be useful for determining a readable color for text on any given background Color.",202,{"i":[{"n":"self"}],"o":{"n":"color"}}],[11,"to_hsl","","Extract the components of a color in the HSL format.",202,{"i":[{"n":"self"}],"o":{"n":"hsla"}}],[11,"to_rgb","","Extract the components of a color in the RGB format.",202,{"i":[{"n":"self"}],"o":{"n":"rgba"}}],[11,"to_fsa","","Extract the components of a color in the RGB format within a fixed-size array.",202,null],[11,"to_byte_fsa","","Same as `to_fsa`, except r, g, b and a are represented in byte form.",202,null],[11,"with_luminance","","Return the same color but with the given luminance.",202,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"color"}}],[11,"alpha","","Return the same color but with the alpha multiplied by the given alpha.",202,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"color"}}],[11,"with_alpha","","Return the same color but with the given alpha.",202,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"color"}}],[11,"highlighted","","Return a highlighted version of the current Color.",202,{"i":[{"n":"self"}],"o":{"n":"color"}}],[11,"clicked","","Return a clicked version of the current Color.",202,{"i":[{"n":"self"}],"o":{"n":"color"}}],[11,"invert","","Return the Color's invert.",202,{"i":[{"n":"self"}],"o":{"n":"color"}}],[11,"red","","Return the red value.",202,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"green","","Return the green value.",202,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"blue","","Return the blue value.",202,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"set_red","","Set the red value.",202,{"i":[{"n":"self"},{"n":"f32"}]}],[11,"set_green","","Set the green value.",202,{"i":[{"n":"self"},{"n":"f32"}]}],[11,"set_blue","","Set the blue value.",202,{"i":[{"n":"self"},{"n":"f32"}]}],[11,"clone","","",200,{"i":[{"n":"self"}],"o":{"n":"hsla"}}],[11,"fmt","","",200,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",200,{"i":[{"n":"self"},{"n":"hsla"}],"o":{"n":"bool"}}],[11,"ne","","",200,{"i":[{"n":"self"},{"n":"hsla"}],"o":{"n":"bool"}}],[11,"from","","",200,{"i":[{"n":"color"}],"o":{"n":"self"}}],[11,"from","","",202,{"i":[{"n":"hsla"}],"o":{"n":"self"}}],[11,"clone","","",201,{"i":[{"n":"self"}],"o":{"n":"rgba"}}],[11,"fmt","","",201,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",201,{"i":[{"n":"self"},{"n":"rgba"}],"o":{"n":"bool"}}],[11,"ne","","",201,{"i":[{"n":"self"},{"n":"rgba"}],"o":{"n":"bool"}}],[11,"from","","",201,{"i":[{"n":"color"}],"o":{"n":"self"}}],[11,"from","","",202,{"i":[{"n":"rgba"}],"o":{"n":"self"}}],[11,"into","","",201,null],[11,"clone","","",203,{"i":[{"n":"self"}],"o":{"n":"gradient"}}],[11,"fmt","","",203,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"event","conrod","Contains all types used to describe the input events that `Widget`s may handle.",null,null],[3,"Text","conrod::event","Contains all relevant information for a Text event.",null,null],[12,"string","","All text that was entered as a part of the event.",205,null],[12,"modifiers","","The modifier keys that were down at the time.",205,null],[3,"Motion","","Contains all relevant information for a Motion event.",null,null],[12,"motion","","The type of `Motion` that occurred.",206,null],[12,"modifiers","","The modifier keys that were down at the time.",206,null],[3,"Press","","Contains all relevant information for a Press event.",null,null],[12,"button","","The `Button` that was pressed.",207,null],[12,"modifiers","","The modifier keys that were down at the time.",207,null],[3,"MousePress","","Contains all relevant information for the event where a mouse button was pressed.",null,null],[12,"button","","The mouse button that was pressed.",208,null],[12,"xy","","The location at which the mouse was pressed.",208,null],[12,"modifiers","","The modifier keys that were down at the time.",208,null],[3,"KeyPress","","Contains all relevant information for the event where a keyboard button was pressed.",null,null],[12,"key","","The key that was pressed.",209,null],[12,"modifiers","","The modifier keys that were down at the time.",209,null],[3,"Release","","Contains all relevant information for a Release event.",null,null],[12,"button","","The `Button` that was released.",210,null],[12,"modifiers","","The modifier keys that were down at the time.",210,null],[3,"MouseRelease","","Contains all relevant information for the event where a mouse button was released.",null,null],[12,"button","","The mouse button that was released.",211,null],[12,"xy","","The location at which the mouse was released.",211,null],[12,"modifiers","","The modifier keys that were down at the time.",211,null],[3,"KeyRelease","","Contains all relevant information for the event where a keyboard button was release.",null,null],[12,"key","","The key that was release.",212,null],[12,"modifiers","","The modifier keys that were down at the time.",212,null],[3,"Drag","","Contains all the relevant information for a mouse drag.",null,null],[12,"button","","Which mouse button was being held during the drag",213,null],[12,"origin","","The point from which the current series of drag events began.",213,null],[12,"from","","The point from which this drag event began.",213,null],[12,"to","","The point at which this drag event ended.",213,null],[12,"delta_xy","","The magnitude of the vector between `from` and `to`.",213,null],[12,"total_delta_xy","","The magnitude of the vector between `origin` and `to`.",213,null],[12,"modifiers","","Which modifier keys are being held during the mouse drag.",213,null],[3,"Click","","Contains all the relevant information for a mouse click.",null,null],[12,"button","","Which mouse button was clicked",214,null],[12,"xy","","The position at which the mouse was released.",214,null],[12,"modifiers","","Which modifier keys, if any, that were being held down when the user clicked",214,null],[3,"DoubleClick","","Contains all the relevant information for a double click.",null,null],[12,"button","","Which mouse button was clicked",215,null],[12,"xy","","The position at which the mouse was released.",215,null],[12,"modifiers","","Which modifier keys, if any, that were being held down when the user clicked",215,null],[3,"Tap","","All relevant information for a touch-screen tap event.",null,null],[12,"id","","The unique identifier of the source of the touch.",216,null],[12,"xy","","The position at which the finger left the screen.",216,null],[3,"Scroll","","Holds all the relevant information about a scroll event",null,null],[12,"x","","The amount of scroll along the x axis.",217,null],[12,"y","","The amount of scroll along the y axis.",217,null],[12,"modifiers","","Which modifier keys, if any, that were being held down while the scroll occured",217,null],[4,"Input","","The event type that is used by conrod to track inputs from the world. Events yielded by polling window backends should be converted to this type. This can be thought of as the event type which is supplied by the window backend to drive the state of the `Ui` forward.",null,null],[13,"Press","","A button on some input device was pressed.",218,null],[13,"Release","","A button on some input device was released.",218,null],[13,"Resize","","The window was received to the given dimensions.",218,null],[13,"Motion","","Some motion input was received (e.g. moving mouse or joystick axis).",218,null],[13,"Touch","","Input from a touch surface/screen.",218,null],[13,"Text","","Text input was received, usually via the keyboard.",218,null],[13,"Focus","","The window was focused or lost focus.",218,null],[13,"Redraw","","The backed requested to redraw.",218,null],[4,"Event","","Enum containing all the events that the `Ui` may provide.",null,null],[13,"Raw","","Represents a raw `input::Input` event.",219,null],[13,"Ui","","Events that have been interpreted from `backend::RawEvent`s by the `Ui`.",219,null],[4,"Ui","","Represents all events interpreted by the `Ui`.",null,null],[13,"Text","","Entered text, along with the widget that was capturing the keyboard at the time.",220,null],[13,"Press","","Some button was pressed, along with the widget that was capturing the device whose button was pressed.",220,null],[13,"Release","","Some button was released, along with the widget that was capturing the device whose button was released.",220,null],[13,"Motion","","Represents all forms of motion input, alongside with the widget that was capturing the mouse at the time.",220,null],[13,"Touch","","Interaction with a touch screen/surface.",220,null],[13,"WindowResized","","The window's dimensions were resized.",220,null],[13,"Click","","Represents a pointing device being pressed and subsequently released while over the same location.",220,null],[13,"DoubleClick","","Two `Click` events with the same `button` and `xy` occurring within a duration that is less that the `theme.double_click_threshold`.",220,null],[13,"Tap","","A user tapped a touch screen/surface.",220,null],[13,"Drag","","Represents a pointing device button being pressed and a subsequent movement of the mouse.",220,null],[13,"Scroll","","A generic scroll event.",220,null],[13,"WidgetCapturesInputSource","","Indicates that the given widget has captured the given user input source.",220,null],[13,"WidgetUncapturesInputSource","","Indicates that the given widget has released the given user input source.",220,null],[4,"Widget","","Events that apply to a specific widget.",null,null],[13,"Text","","Entered text.",221,null],[13,"Motion","","Represents all forms of motion input.",221,null],[13,"Touch","","Interaction with a touch screen.",221,null],[13,"Press","","Some button was pressed.",221,null],[13,"Release","","Some button was released.",221,null],[13,"Click","","Represents a pointing device being pressed and subsequently released while over the same location.",221,null],[13,"DoubleClick","","Two `Click` events with the same `button` and `xy` occurring within a duration that is less that the `theme.double_click_threshold`.",221,null],[13,"Tap","","A user tapped the widget on a touch screen/surface.",221,null],[13,"Drag","","Represents a pointing device button being pressed and a subsequent movement of the mouse.",221,null],[13,"Scroll","","Represents the amount of scroll that has been applied to this widget.",221,null],[13,"WindowResized","","The window's dimensions were resized.",221,null],[13,"CapturesInputSource","","The widget has captured the given input source.",221,null],[13,"UncapturesInputSource","","The widget has released the input source from capturing.",221,null],[4,"Button","","The different kinds of `Button`s that may be `Press`ed or `Release`d.",null,null],[13,"Keyboard","","A keyboard button.",222,null],[13,"Mouse","","A mouse button along with the location at which it was `Press`ed/`Release`d.",222,null],[13,"Controller","","A controller button.",222,null],[11,"clone","","",218,{"i":[{"n":"self"}],"o":{"n":"input"}}],[11,"fmt","","",218,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",218,{"i":[{"n":"self"},{"n":"input"}],"o":{"n":"bool"}}],[11,"ne","","",218,{"i":[{"n":"self"},{"n":"input"}],"o":{"n":"bool"}}],[11,"clone","","",219,{"i":[{"n":"self"}],"o":{"n":"event"}}],[11,"eq","","",219,{"i":[{"n":"self"},{"n":"event"}],"o":{"n":"bool"}}],[11,"ne","","",219,{"i":[{"n":"self"},{"n":"event"}],"o":{"n":"bool"}}],[11,"fmt","","",219,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",220,{"i":[{"n":"self"}],"o":{"n":"ui"}}],[11,"eq","","",220,{"i":[{"n":"self"},{"n":"ui"}],"o":{"n":"bool"}}],[11,"ne","","",220,{"i":[{"n":"self"},{"n":"ui"}],"o":{"n":"bool"}}],[11,"fmt","","",220,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",221,{"i":[{"n":"self"}],"o":{"n":"widget"}}],[11,"eq","","",221,{"i":[{"n":"self"},{"n":"widget"}],"o":{"n":"bool"}}],[11,"ne","","",221,{"i":[{"n":"self"},{"n":"widget"}],"o":{"n":"bool"}}],[11,"fmt","","",221,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",205,{"i":[{"n":"self"}],"o":{"n":"text"}}],[11,"eq","","",205,{"i":[{"n":"self"},{"n":"text"}],"o":{"n":"bool"}}],[11,"ne","","",205,{"i":[{"n":"self"},{"n":"text"}],"o":{"n":"bool"}}],[11,"fmt","","",205,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",206,{"i":[{"n":"self"}],"o":{"n":"motion"}}],[11,"eq","","",206,{"i":[{"n":"self"},{"n":"motion"}],"o":{"n":"bool"}}],[11,"ne","","",206,{"i":[{"n":"self"},{"n":"motion"}],"o":{"n":"bool"}}],[11,"fmt","","",206,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",222,{"i":[{"n":"self"}],"o":{"n":"button"}}],[11,"eq","","",222,{"i":[{"n":"self"},{"n":"button"}],"o":{"n":"bool"}}],[11,"ne","","",222,{"i":[{"n":"self"},{"n":"button"}],"o":{"n":"bool"}}],[11,"fmt","","",222,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",207,{"i":[{"n":"self"}],"o":{"n":"press"}}],[11,"eq","","",207,{"i":[{"n":"self"},{"n":"press"}],"o":{"n":"bool"}}],[11,"ne","","",207,{"i":[{"n":"self"},{"n":"press"}],"o":{"n":"bool"}}],[11,"fmt","","",207,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",208,{"i":[{"n":"self"}],"o":{"n":"mousepress"}}],[11,"eq","","",208,{"i":[{"n":"self"},{"n":"mousepress"}],"o":{"n":"bool"}}],[11,"ne","","",208,{"i":[{"n":"self"},{"n":"mousepress"}],"o":{"n":"bool"}}],[11,"fmt","","",208,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",209,{"i":[{"n":"self"}],"o":{"n":"keypress"}}],[11,"eq","","",209,{"i":[{"n":"self"},{"n":"keypress"}],"o":{"n":"bool"}}],[11,"ne","","",209,{"i":[{"n":"self"},{"n":"keypress"}],"o":{"n":"bool"}}],[11,"fmt","","",209,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",210,{"i":[{"n":"self"}],"o":{"n":"release"}}],[11,"eq","","",210,{"i":[{"n":"self"},{"n":"release"}],"o":{"n":"bool"}}],[11,"ne","","",210,{"i":[{"n":"self"},{"n":"release"}],"o":{"n":"bool"}}],[11,"fmt","","",210,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",211,{"i":[{"n":"self"}],"o":{"n":"mouserelease"}}],[11,"eq","","",211,{"i":[{"n":"self"},{"n":"mouserelease"}],"o":{"n":"bool"}}],[11,"ne","","",211,{"i":[{"n":"self"},{"n":"mouserelease"}],"o":{"n":"bool"}}],[11,"fmt","","",211,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",212,{"i":[{"n":"self"}],"o":{"n":"keyrelease"}}],[11,"eq","","",212,{"i":[{"n":"self"},{"n":"keyrelease"}],"o":{"n":"bool"}}],[11,"ne","","",212,{"i":[{"n":"self"},{"n":"keyrelease"}],"o":{"n":"bool"}}],[11,"fmt","","",212,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",213,{"i":[{"n":"self"}],"o":{"n":"drag"}}],[11,"eq","","",213,{"i":[{"n":"self"},{"n":"drag"}],"o":{"n":"bool"}}],[11,"ne","","",213,{"i":[{"n":"self"},{"n":"drag"}],"o":{"n":"bool"}}],[11,"fmt","","",213,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",214,{"i":[{"n":"self"}],"o":{"n":"click"}}],[11,"eq","","",214,{"i":[{"n":"self"},{"n":"click"}],"o":{"n":"bool"}}],[11,"ne","","",214,{"i":[{"n":"self"},{"n":"click"}],"o":{"n":"bool"}}],[11,"fmt","","",214,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",215,{"i":[{"n":"self"}],"o":{"n":"doubleclick"}}],[11,"eq","","",215,{"i":[{"n":"self"},{"n":"doubleclick"}],"o":{"n":"bool"}}],[11,"ne","","",215,{"i":[{"n":"self"},{"n":"doubleclick"}],"o":{"n":"bool"}}],[11,"fmt","","",215,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",216,{"i":[{"n":"self"}],"o":{"n":"tap"}}],[11,"eq","","",216,{"i":[{"n":"self"},{"n":"tap"}],"o":{"n":"bool"}}],[11,"ne","","",216,{"i":[{"n":"self"},{"n":"tap"}],"o":{"n":"bool"}}],[11,"fmt","","",216,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",217,{"i":[{"n":"self"}],"o":{"n":"scroll"}}],[11,"eq","","",217,{"i":[{"n":"self"},{"n":"scroll"}],"o":{"n":"bool"}}],[11,"ne","","",217,{"i":[{"n":"self"},{"n":"scroll"}],"o":{"n":"bool"}}],[11,"fmt","","",217,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"relative_to","","Returns a copy of the `Motion` relative to the given `xy`",206,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"motion"}}],[11,"relative_to","","Returns a copy of the Button relative to the given `xy`",222,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"button"}}],[11,"relative_to","","Returns a copy of the Press relative to the given `xy`",207,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"press"}}],[11,"mouse","","If the `Press` event represents the pressing of a mouse button, return `Some`.",207,{"i":[{"n":"self"}],"o":{"g":["mousepress"],"n":"option"}}],[11,"key","","If the `Press` event represents the pressing of keyboard button, return `Some`.",207,{"i":[{"n":"self"}],"o":{"g":["keypress"],"n":"option"}}],[11,"relative_to","","Returns a copy of the Release relative to the given `xy`",210,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"release"}}],[11,"mouse","","If the `Release` event represents the releasing of a mouse button, return `Some`.",210,{"i":[{"n":"self"}],"o":{"g":["mouserelease"],"n":"option"}}],[11,"key","","If the `Release` event represents the release of keyboard button, return `Some`.",210,{"i":[{"n":"self"}],"o":{"g":["keyrelease"],"n":"option"}}],[11,"relative_to","","Returns a copy of the `Tap` relative to the given `xy`",216,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"self"}}],[11,"relative_to","","Returns a copy of the Click relative to the given `xy`",214,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"click"}}],[11,"relative_to","","Returns a copy of the DoubleClick relative to the given `xy`",215,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"doubleclick"}}],[11,"relative_to","","Returns a copy of the Drag relative to the given `xy`",213,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"drag"}}],[11,"from","","",218,{"i":[{"n":"motion"}],"o":{"n":"self"}}],[11,"from","","",218,{"i":[{"n":"touch"}],"o":{"n":"self"}}],[11,"from","","",219,{"i":[{"n":"ui"}],"o":{"n":"self"}}],[11,"from","","",219,{"i":[{"n":"input"}],"o":{"n":"self"}}],[11,"from","","",221,{"i":[{"n":"text"}],"o":{"n":"self"}}],[11,"from","","",221,{"i":[{"n":"motion"}],"o":{"n":"self"}}],[11,"from","","",221,{"i":[{"n":"touch"}],"o":{"n":"self"}}],[11,"from","","",221,{"i":[{"n":"press"}],"o":{"n":"self"}}],[11,"from","","",221,{"i":[{"n":"release"}],"o":{"n":"self"}}],[11,"from","","",221,{"i":[{"n":"click"}],"o":{"n":"self"}}],[11,"from","","",221,{"i":[{"n":"doubleclick"}],"o":{"n":"self"}}],[11,"from","","",221,{"i":[{"n":"tap"}],"o":{"n":"self"}}],[11,"from","","",221,{"i":[{"n":"scroll"}],"o":{"n":"self"}}],[11,"from","","",221,{"i":[{"n":"drag"}],"o":{"n":"self"}}],[0,"graph","conrod","Conrod uses a directed acyclic graph to manage both storing widgets and describing their relationships.",null,null],[8,"Walker","conrod::graph","A trait providing a variety of useful methods for traversing some graph type G.",null,null],[16,"Index","","The unsigned integer type used for node and edge indices.",223,null],[10,"next","","Fetch the `EdgeIndex` and `NodeIndex` to the next neighbour in our walk through the given Graph.",223,{"i":[{"n":"self"},{"n":"g"}],"o":{"n":"option"}}],[11,"next_edge","","The next edge in our walk for the given Graph.",223,{"i":[{"n":"self"},{"n":"g"}],"o":{"g":["edgeindex"],"n":"option"}}],[11,"next_node","","The next node in our walk for the given Graph.",223,{"i":[{"n":"self"},{"n":"g"}],"o":{"g":["nodeindex"],"n":"option"}}],[11,"count","","Counts all the steps in the entire walk of the given graph.",223,{"i":[{"n":"self"},{"n":"g"}],"o":{"n":"usize"}}],[11,"last","","Walks the whole walk until reaching and returning the last edge node pair.",223,{"i":[{"n":"self"},{"n":"g"}],"o":{"n":"option"}}],[11,"last_edge","","Walks the whole walk until reaching and returning the last edge.",223,{"i":[{"n":"self"},{"n":"g"}],"o":{"g":["edgeindex"],"n":"option"}}],[11,"last_node","","Walks the whole walk until reaching and returning the last node.",223,{"i":[{"n":"self"},{"n":"g"}],"o":{"g":["nodeindex"],"n":"option"}}],[11,"nth","","Walks \"n\" number of steps and produces the resulting edge node pair.",223,{"i":[{"n":"self"},{"n":"g"},{"n":"usize"}],"o":{"n":"option"}}],[11,"nth_edge","","Walks \"n\" number of steps and produces the resulting edge.",223,{"i":[{"n":"self"},{"n":"g"},{"n":"usize"}],"o":{"g":["edgeindex"],"n":"option"}}],[11,"nth_node","","Walks \"n\" number of steps and produces the resulting node.",223,{"i":[{"n":"self"},{"n":"g"},{"n":"usize"}],"o":{"g":["nodeindex"],"n":"option"}}],[11,"chain","","Produces a walker that will walk the entirey of `self` before walking the entirey of other.",223,{"i":[{"n":"self"},{"n":"o"}],"o":{"n":"chain"}}],[11,"filter","","Creates a walker that applies the predicate to each element returned by this walker. The only elements that will be yielded are those that make the predicate evaluate to true.",223,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"filter"}}],[11,"peekable","","Creates a walker that has a `.peek(&graph)` method that returns an optional next neighbor.",223,{"i":[{"n":"self"}],"o":{"n":"peekable"}}],[11,"skip_while","","Creates a walker that invokes the predicate on elements until it returns false. Once the predicate returns false, that element and all further elements are yielded.",223,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"skipwhile"}}],[11,"take_while","","Creates a walker that yields elements so long as the predicate returns true. After the predicate returns false for the first time, no further elements will be yielded.",223,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"takewhile"}}],[11,"skip","","Creates a walker that skips the first n steps of this walk, and then yields all further steps.",223,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"skip"}}],[11,"take","","Creates a walker that yields the first n steps of this walk.",223,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"take"}}],[11,"all","","Tests whether the predicate holds true for all steps in the walk.",223,{"i":[{"n":"self"},{"n":"g"},{"n":"p"}],"o":{"n":"bool"}}],[11,"any","","Tests whether any step in the walk satisfies the given predicate.",223,{"i":[{"n":"self"},{"n":"g"},{"n":"p"}],"o":{"n":"bool"}}],[11,"find","","Returns the first edge node index pair satisfying the specified predicate.",223,{"i":[{"n":"self"},{"n":"g"},{"n":"p"}],"o":{"n":"option"}}],[11,"find_edge","","Returns the edge index satisfying the specified predicate.",223,{"i":[{"n":"self"},{"n":"g"},{"n":"p"}],"o":{"g":["edgeindex"],"n":"option"}}],[11,"find_node","","Returns the node index satisfying the specified predicate.",223,{"i":[{"n":"self"},{"n":"g"},{"n":"p"}],"o":{"g":["nodeindex"],"n":"option"}}],[11,"cycle","","Repeats the walker endlessly.",223,{"i":[{"n":"self"}],"o":{"n":"cycle"}}],[11,"fold","","Performs a fold operation over the entire walker, returning the eventual state at the end of the walk.",223,{"i":[{"n":"self"},{"n":"b"},{"n":"g"},{"n":"f"}],"o":{"n":"b"}}],[11,"inspect","","Creates a walker that calls a function with a reference to each index pair before yielding them. This is often useful for debugging a walker pipeline.",223,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspect"}}],[11,"iter","","Converts the walker into an iterator yielding index pairs.",223,{"i":[{"n":"self"},{"n":"g"}],"o":{"n":"iter"}}],[11,"iter_weights","","Converts the walker into an iterator yielding `(&e, &n)`, where `e` is the edge weight for the next `EdgeIndex` and `n` is the node weight for the next `NodeIndex`.",223,{"i":[{"n":"self"},{"n":"g"}],"o":{"n":"iterweights"}}],[3,"UniqueWidgetState","","The state type that we'll dynamically cast to and from `Any` for storage within the cache.",null,null],[12,"state","","A Widget's unique \"State\".",224,null],[12,"style","","A Widget's unique \"Style\".",224,null],[3,"Container","","A container for caching a Widget's state inside a Graph Node.",null,null],[12,"maybe_state","","Dynamically stored widget state.",225,null],[12,"type_id","","The unique `TypeId` associated with the `Widget::State`.",225,null],[12,"rect","","The rectangle describing the Widget's area.",225,null],[12,"depth","","The depth at which the widget will be rendered comparatively to its siblings.",225,null],[12,"kid_area","","The area in which child widgets are placed.",225,null],[12,"maybe_floating","","Whether or not the widget is a \"Floating\" widget.",225,null],[12,"crop_kids","","Whether or not children widgets should be cropped to the `kid_area`.",225,null],[12,"maybe_x_scroll_state","","Scroll related state (is only `Some` if this axis is scrollable).",225,null],[12,"maybe_y_scroll_state","","Scroll related state (is only `Some` if this axis is scrollable).",225,null],[12,"instantiation_order_idx","","Represents the Widget's position within the overall instantiation ordering of the widgets.",225,null],[12,"is_over","","A function specified by the widget to use when determining whether or not a point is over it.",225,null],[3,"IsOverFn","","A wrapper around a `widget::IsOverFn` to make implementing `Debug` easier for `Container`.",null,null],[12,"0","","",226,null],[3,"Graph","","Stores the dynamic state of a UI tree of Widgets.",null,null],[4,"Node","","A node for use within the Graph.",null,null],[13,"Widget","","A widget constructed by a user.",227,null],[13,"Placeholder","","A placeholder node - used when reserving a place for a Widget within the Graph.",227,null],[4,"Edge","","An edge between nodes within the UI Graph.",null,null],[13,"Position","","Describes the relative positioning of widgets.",228,null],[13,"Depth","","Describes the rendering order of the widgets.",228,null],[13,"Graphic","","Describes when a widget is used solely as a graphical element for another widget.",228,null],[0,"algo","","This module was created in order to keep the `graph` module clean and focused upon the Graph data structure behaviour.",null,null],[3,"PickWidgets","conrod::graph::algo","A node \"walker\" that yields all widgets under the given `xy` position in order from top to bottom.",null,null],[3,"PickScrollableWidgets","","A node \"walker\" that yields all scrollable widgets under the given `xy` position in order from top to bottom.",null,null],[5,"pick_widgets","","Produces a graph node \"walker\" that yields all widgets under the given `xy` position in order from top to bottom.",null,null],[5,"pick_scrollable_widgets","","Produces a graph node \"walker\" that yields all scrollable widgets under the given `xy` position in order from top to bottom.",null,null],[5,"cropped_area_of_widget","","The rectangle that represents the maximum visible area for the widget with the given index.",null,{"i":[{"n":"graph"},{"n":"id"}],"o":{"g":["rect"],"n":"option"}}],[5,"cropped_area_of_widget_within_depth","","The rectangle that represents the maximum visible area for the widget with the given index.",null,{"i":[{"n":"graph"},{"n":"id"},{"n":"id"}],"o":{"g":["rect"],"n":"option"}}],[5,"kids_bounding_box","","Find the absolute `Rect` that bounds all widgets that are `Depth` children of the widget at the given `idx`.",null,{"i":[{"n":"graph"},{"n":"fnvhashset"},{"n":"id"}],"o":{"g":["rect"],"n":"option"}}],[5,"scroll_offset","","Return the `scroll_offset` for the widget at the given index.",null,{"i":[{"n":"graph"},{"n":"id"}],"o":{"n":"point"}}],[11,"clone","","",229,{"i":[{"n":"self"}],"o":{"n":"pickwidgets"}}],[11,"clone","","",230,{"i":[{"n":"self"}],"o":{"n":"pickscrollablewidgets"}}],[11,"next_including_graphics_children","","The next `widget::Id` under the `xy` location.",229,null],[11,"next","","The `widget::Id` of the next `Widget` under the `xy` location.",229,null],[11,"next","","The `widget::Id` of the next scrollable `Widget` under the `xy` location.",230,null],[0,"depth_order","conrod::graph","Types and functionality related to the calculation of a Graph's rendering depth order.",null,null],[3,"DepthOrder","conrod::graph::depth_order","Contains Node indices in order of depth, starting with the deepest.",null,null],[12,"indices","","The primary Vec storing the DepthOrder's ordered indices.",231,null],[11,"new","","Construct a new empty DepthOrder.",231,{"o":{"n":"depthorder"}}],[11,"with_node_capacity","","Construct a new empty DepthOrder.",231,{"i":[{"n":"usize"}],"o":{"n":"depthorder"}}],[11,"update","","Update the DepthOrder (starting with the deepest) for all nodes in the given Graph.",231,{"i":[{"n":"self"},{"n":"graph"},{"n":"id"},{"n":"fnvhashset"}]}],[6,"EdgeIndex","conrod::graph","An alias for our Graph's Edge Index.",null,null],[6,"IndexPair","","An alias for a tuple containing an associated `Edge/widget::Id` pair.",null,null],[6,"Parents","","A Walker over some node's parent nodes.",null,null],[6,"Children","","A Walker over some node's child nodes.",null,null],[6,"PositionParents","","An alias for the iterator yielding both X and Y Position parents.",null,null],[6,"FilteredChildren","","An alias for some filtered children walker.",null,null],[6,"DepthChildren","","An alias for a Walker over a node's Depth children.",null,null],[6,"XPositionChildren","","An alias for a Walker over a node's X Position children.",null,null],[6,"YPositionChildren","","An alias for a Walker over a node's Y Position children.",null,null],[6,"PositionChildren","","An alias for a Walker over a node's X and Y Position children respectively.",null,null],[6,"GraphicChildren","","An alias for a Walker over a node's Graphic children.",null,null],[6,"RecursiveWalk","","An alias for our Graph's recursive walker.",null,null],[6,"WouldCycle","","An alias for our Graph's WouldCycle error type.",null,null],[17,"NUM_EDGE_VARIANTS","","The number of different variants within the Edge enum.",null,null],[11,"fmt","","",224,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",225,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",226,{"i":[{"n":"self"}],"o":{"n":"isoverfn"}}],[11,"fmt","","",226,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",227,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",228,{"i":[{"n":"self"}],"o":{"n":"edge"}}],[11,"fmt","","",228,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",228,{"i":[{"n":"self"},{"n":"edge"}],"o":{"n":"bool"}}],[11,"ne","","",228,{"i":[{"n":"self"},{"n":"edge"}],"o":{"n":"bool"}}],[11,"fmt","","",232,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"state_and_style","","Borrow the Container's unique widget State and Style if there is any.",225,{"i":[{"n":"self"}],"o":{"g":["uniquewidgetstate"],"n":"option"}}],[11,"unique_widget_state","","Same as Container::state_and_style but accessed using a Widget type parameter instead of the unique State and Style types.",225,{"i":[{"n":"self"}],"o":{"g":["uniquewidgetstate"],"n":"option"}}],[11,"is_widget","","Whether or not the Node is of the Widget variant.",227,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"new","","A new empty Graph.",232,{"o":{"n":"self"}}],[11,"with_node_capacity","","A new Graph with the given node capacity.",232,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"clear","","Removes all Nodes and Edges from the Graph.",232,{"i":[{"n":"self"}]}],[11,"node_count","","The total number of Nodes in the Graph.",232,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"widget_count","","The total number of Node::Widgets in the Graph.",232,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"edge_count","","The total number of Edges in the Graph.",232,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"node_capacity","","The current capacity for the Graph's internal node `Vec`.",232,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"add_placeholder","","Add a new placeholder node and return it's `widget::Id` into the `Graph`.",232,{"i":[{"n":"self"}],"o":{"n":"id"}}],[11,"node","","Borrow the node at the given widget::Id if there is one.",232,{"i":[{"n":"self"},{"n":"id"}],"o":{"g":["node"],"n":"option"}}],[11,"node_mut","","Mutably borrow the node at the given widget::Id if there is one.",232,{"i":[{"n":"self"},{"n":"id"}],"o":{"g":["node"],"n":"option"}}],[11,"edge","","Borrow the edge at the given EdgeIndex if there is one.",232,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"g":["edge"],"n":"option"}}],[11,"edge_mut","","Mutably borrow the edge at the given EdgeIndex if there is one.",232,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"g":["edge"],"n":"option"}}],[11,"edge_endpoints","","Return the parent and child nodes on either end of the Edge at the given index.",232,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"option"}}],[11,"widget","","If there is a Widget for the given index, return a reference to it.",232,{"i":[{"n":"self"},{"n":"id"}],"o":{"g":["container"],"n":"option"}}],[11,"widget_mut","","If there is a Widget for the given Id, return a mutable reference to it.",232,{"i":[{"n":"self"},{"n":"id"}],"o":{"g":["container"],"n":"option"}}],[11,"parents","","A Walker type that may be used to step through the parents of the given child node.",232,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"parents"}}],[11,"recursive_walk","","A Walker type that recursively walks the Graph using the given `recursive_fn`.",232,{"i":[{"n":"self"},{"n":"id"},{"n":"f"}],"o":{"n":"recursivewalk"}}],[11,"edge_parent","","If the widget at the given index has some parent along an Edge of the given variant, return an index to it.",232,{"i":[{"n":"self"},{"n":"id"},{"n":"edge"}],"o":{"g":["id"],"n":"option"}}],[11,"depth_parent","","Return the index of the parent along the given widget's Depth Edge.",232,{"i":[{"n":"self"},{"n":"id"}],"o":{"g":["id"],"n":"option"}}],[11,"x_position_parent","","Return the index of the parent along the given widget's Position Edge.",232,{"i":[{"n":"self"},{"n":"id"}],"o":{"g":["id"],"n":"option"}}],[11,"y_position_parent","","Return the index of the parent along the given widget's Position Edge.",232,{"i":[{"n":"self"},{"n":"id"}],"o":{"g":["id"],"n":"option"}}],[11,"position_parents","","Produces an iterator yielding the parents along both the X and Y Position Edges respectively.",232,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"positionparents"}}],[11,"graphic_parent","","Return the index of the parent along the given widget's Graphic Edge.",232,{"i":[{"n":"self"},{"n":"id"}],"o":{"g":["id"],"n":"option"}}],[11,"depth_parent_recursion","","A Walker type that recursively walks Depth parents starting from the given node.",232,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"recursivewalk"}}],[11,"x_position_parent_recursion","","A Walker type that recursively walks X Position parents starting from the given node.",232,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"recursivewalk"}}],[11,"y_position_parent_recursion","","A Walker type that recursively walks Y Position parents starting from the given node.",232,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"recursivewalk"}}],[11,"graphic_parent_recursion","","A Walker type that recursively walks Graphic parents starting from the given node.",232,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"recursivewalk"}}],[11,"scrollable_y_parent_recursion","","A Walker type that recursively walks Depth parents that are scrollable along the y axis for the given node.",232,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"recursivewalk"}}],[11,"scrollable_x_parent_recursion","","A Walker type that recursively walks Depth parents that are scrollable along the x axis for the given node.",232,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"recursivewalk"}}],[11,"children","","A Walker type that may be used to step through the children of the given parent node.",232,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"children"}}],[11,"depth_children","","For walking the Depth children of the given parent node.",232,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"depthchildren"}}],[11,"x_position_children","","For walking the Position(X) children of the given parent node.",232,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"xpositionchildren"}}],[11,"y_position_children","","For walking the Position(Y) children of the given parent node.",232,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"ypositionchildren"}}],[11,"position_children","","For walking the Position children of the given parent node.",232,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"positionchildren"}}],[11,"graphic_children","","For walking the Graphic children of the given parent node.",232,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"graphicchildren"}}],[11,"does_edge_exist","","Does the given edge type exist between the nodes `parent` -> `child`.",232,{"i":[{"n":"self"},{"n":"id"},{"n":"id"},{"n":"f"}],"o":{"n":"bool"}}],[11,"does_depth_edge_exist","","Does a Edge::Depth exist between the nodes `parent` -> `child`.",232,{"i":[{"n":"self"},{"n":"id"},{"n":"id"}],"o":{"n":"bool"}}],[11,"does_position_edge_exist","","Does a Edge::Position exist between the nodes `parent` -> `child`.",232,{"i":[{"n":"self"},{"n":"id"},{"n":"id"}],"o":{"n":"bool"}}],[11,"does_graphic_edge_exist","","Does a Edge::Graphic exist between the nodes `parent` -> `child`.",232,{"i":[{"n":"self"},{"n":"id"},{"n":"id"}],"o":{"n":"bool"}}],[11,"does_recursive_edge_exist","","Are the given `parent` and `child` nodes connected by a single chain of edges of the given kind?",232,{"i":[{"n":"self"},{"n":"id"},{"n":"id"},{"n":"f"}],"o":{"n":"bool"}}],[11,"does_recursive_depth_edge_exist","","Are the given `parent` and `child` nodes connected by a single chain of Depth edges?",232,{"i":[{"n":"self"},{"n":"id"},{"n":"id"}],"o":{"n":"bool"}}],[11,"does_recursive_graphic_edge_exist","","Are the given `parent` and `child` nodes connected by a single chain of Graphic edges?",232,{"i":[{"n":"self"},{"n":"id"},{"n":"id"}],"o":{"n":"bool"}}],[11,"pre_update_cache","","Cache some `PreUpdateCache` widget data into the graph.",232,{"i":[{"n":"self"},{"n":"id"},{"n":"preupdatecache"},{"n":"usize"}]}],[11,"post_update_cache","","Cache some `PostUpdateCache` widget data into the graph.",232,{"i":[{"n":"self"},{"n":"postupdatecache"}]}],[11,"next","","",233,{"i":[{"n":"self"},{"n":"graph"}],"o":{"n":"option"}}],[11,"next","","",234,{"i":[{"n":"self"},{"n":"graph"}],"o":{"n":"option"}}],[11,"index","","",232,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"node"}}],[11,"index_mut","","",232,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"node"}}],[11,"index","","",232,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"edge"}}],[11,"index_mut","","",232,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"edge"}}],[0,"guide","conrod","The Conrod Guide",null,null],[0,"chapter_1","conrod::guide","What is Conrod?",null,null],[0,"chapter_2","","Getting Started",null,null],[0,"image","conrod","A type used to manage a user's image data and map them to `Image` widgets:",null,null],[3,"Id","conrod::image","Unique image identifier.",null,null],[3,"Map","","A type used to map the `widget::Id` of `Image` widgets to their associated `Img` data.",null,null],[12,"trigger_redraw","","Whether or not the `image::Map` will trigger a redraw the next time `Ui::draw` is called.",235,null],[3,"NewIds","","An iterator yielding an `Id` for each new `Img` inserted into the `Map` via the `extend` method.",null,null],[6,"HashMap","","The type of `std::collections::HashMap` with `fnv::FnvHasher` used within the `image::Map`.",null,null],[11,"clone","","",236,{"i":[{"n":"self"}],"o":{"n":"id"}}],[11,"fmt","","",236,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",236,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"bool"}}],[11,"ne","","",236,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"bool"}}],[11,"cmp","","",236,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",236,{"i":[{"n":"self"},{"n":"id"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",236,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"bool"}}],[11,"le","","",236,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"bool"}}],[11,"gt","","",236,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"bool"}}],[11,"ge","","",236,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"bool"}}],[11,"hash","","",236,null],[11,"deref","","",235,null],[11,"new","","Construct a new, empty `image::Map`.",235,{"o":{"n":"self"}}],[11,"get_mut","","Uniquely borrow the `Img` associated with the given widget.",235,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"option"}}],[11,"insert","","Inserts the given image into the map, returning its associated `image::Id`. The user must store the returned `image::Id` in order to use, modify or remove the inserted image.",235,{"i":[{"n":"self"},{"n":"img"}],"o":{"n":"id"}}],[11,"replace","","Replaces the given image in the map if it exists. Returns the image or None.",235,{"i":[{"n":"self"},{"n":"id"},{"n":"img"}],"o":{"n":"option"}}],[11,"remove","","Removes the given image from the map if it exists. Returns the image or None.",235,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"option"}}],[11,"extend","","Insert each of the images yielded by the given iterator and produce an iterator yielding their generated `Ids` in the same order.",235,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"newids"}}],[11,"next","","",237,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",237,null],[11,"len","","",237,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[0,"input","conrod","This module contains all the logic for handling input events and providing them to widgets.",null,null],[3,"ModifierKey","conrod::input","",null,null],[4,"Button","","Models different kinds of buttons.",null,null],[13,"Keyboard","","A keyboard button.",238,null],[13,"Mouse","","A mouse button.",238,null],[13,"Controller","","A controller button.",238,null],[13,"Hat","","A controller hat (d-Pad)",238,null],[3,"ControllerButton","","Components of a controller button event. Not guaranteed consistent across backends.",null,null],[12,"id","","Which controller was the button on.",239,null],[12,"button","","Which button was pressed.",239,null],[3,"ControllerAxisArgs","","Components of a controller axis move event. Not guaranteed consistent across backends.",null,null],[12,"id","","Which controller moved.",240,null],[12,"axis","","The axis that moved.",240,null],[12,"position","","Position of the controller. Usually [-1.0, 1.0], though backends may use a different range for various devices.",240,null],[0,"keyboard","","Back-end agnostic keyboard keys.",null,null],[3,"ModifierKey","conrod::input::keyboard","",null,null],[4,"Key","","Represent a keyboard key. Keycodes follows SDL http://wiki.libsdl.org/SDLKeycodeLookup",null,null],[13,"Unknown","","",241,null],[13,"Backspace","","",241,null],[13,"Tab","","",241,null],[13,"Return","","",241,null],[13,"Escape","","",241,null],[13,"Space","","",241,null],[13,"Exclaim","","",241,null],[13,"Quotedbl","","",241,null],[13,"Hash","","",241,null],[13,"Dollar","","",241,null],[13,"Percent","","",241,null],[13,"Ampersand","","",241,null],[13,"Quote","","",241,null],[13,"LeftParen","","",241,null],[13,"RightParen","","",241,null],[13,"Asterisk","","",241,null],[13,"Plus","","",241,null],[13,"Comma","","",241,null],[13,"Minus","","",241,null],[13,"Period","","",241,null],[13,"Slash","","",241,null],[13,"D0","","",241,null],[13,"D1","","",241,null],[13,"D2","","",241,null],[13,"D3","","",241,null],[13,"D4","","",241,null],[13,"D5","","",241,null],[13,"D6","","",241,null],[13,"D7","","",241,null],[13,"D8","","",241,null],[13,"D9","","",241,null],[13,"Colon","","",241,null],[13,"Semicolon","","",241,null],[13,"Less","","",241,null],[13,"Equals","","",241,null],[13,"Greater","","",241,null],[13,"Question","","",241,null],[13,"At","","",241,null],[13,"LeftBracket","","",241,null],[13,"Backslash","","",241,null],[13,"RightBracket","","",241,null],[13,"Caret","","",241,null],[13,"Underscore","","",241,null],[13,"Backquote","","",241,null],[13,"A","","",241,null],[13,"B","","",241,null],[13,"C","","",241,null],[13,"D","","",241,null],[13,"E","","",241,null],[13,"F","","",241,null],[13,"G","","",241,null],[13,"H","","",241,null],[13,"I","","",241,null],[13,"J","","",241,null],[13,"K","","",241,null],[13,"L","","",241,null],[13,"M","","",241,null],[13,"N","","",241,null],[13,"O","","",241,null],[13,"P","","",241,null],[13,"Q","","",241,null],[13,"R","","",241,null],[13,"S","","",241,null],[13,"T","","",241,null],[13,"U","","",241,null],[13,"V","","",241,null],[13,"W","","",241,null],[13,"X","","",241,null],[13,"Y","","",241,null],[13,"Z","","",241,null],[13,"Delete","","",241,null],[13,"CapsLock","","",241,null],[13,"F1","","",241,null],[13,"F2","","",241,null],[13,"F3","","",241,null],[13,"F4","","",241,null],[13,"F5","","",241,null],[13,"F6","","",241,null],[13,"F7","","",241,null],[13,"F8","","",241,null],[13,"F9","","",241,null],[13,"F10","","",241,null],[13,"F11","","",241,null],[13,"F12","","",241,null],[13,"PrintScreen","","",241,null],[13,"ScrollLock","","",241,null],[13,"Pause","","",241,null],[13,"Insert","","",241,null],[13,"Home","","",241,null],[13,"PageUp","","",241,null],[13,"End","","",241,null],[13,"PageDown","","",241,null],[13,"Right","","",241,null],[13,"Left","","",241,null],[13,"Down","","",241,null],[13,"Up","","",241,null],[13,"NumLockClear","","",241,null],[13,"NumPadDivide","","",241,null],[13,"NumPadMultiply","","",241,null],[13,"NumPadMinus","","",241,null],[13,"NumPadPlus","","",241,null],[13,"NumPadEnter","","",241,null],[13,"NumPad1","","",241,null],[13,"NumPad2","","",241,null],[13,"NumPad3","","",241,null],[13,"NumPad4","","",241,null],[13,"NumPad5","","",241,null],[13,"NumPad6","","",241,null],[13,"NumPad7","","",241,null],[13,"NumPad8","","",241,null],[13,"NumPad9","","",241,null],[13,"NumPad0","","",241,null],[13,"NumPadPeriod","","",241,null],[13,"Application","","",241,null],[13,"Power","","",241,null],[13,"NumPadEquals","","",241,null],[13,"F13","","",241,null],[13,"F14","","",241,null],[13,"F15","","",241,null],[13,"F16","","",241,null],[13,"F17","","",241,null],[13,"F18","","",241,null],[13,"F19","","",241,null],[13,"F20","","",241,null],[13,"F21","","",241,null],[13,"F22","","",241,null],[13,"F23","","",241,null],[13,"F24","","",241,null],[13,"Execute","","",241,null],[13,"Help","","",241,null],[13,"Menu","","",241,null],[13,"Select","","",241,null],[13,"Stop","","",241,null],[13,"Again","","",241,null],[13,"Undo","","",241,null],[13,"Cut","","",241,null],[13,"Copy","","",241,null],[13,"Paste","","",241,null],[13,"Find","","",241,null],[13,"Mute","","",241,null],[13,"VolumeUp","","",241,null],[13,"VolumeDown","","",241,null],[13,"NumPadComma","","",241,null],[13,"NumPadEqualsAS400","","",241,null],[13,"AltErase","","",241,null],[13,"Sysreq","","",241,null],[13,"Cancel","","",241,null],[13,"Clear","","",241,null],[13,"Prior","","",241,null],[13,"Return2","","",241,null],[13,"Separator","","",241,null],[13,"Out","","",241,null],[13,"Oper","","",241,null],[13,"ClearAgain","","",241,null],[13,"CrSel","","",241,null],[13,"ExSel","","",241,null],[13,"NumPad00","","",241,null],[13,"NumPad000","","",241,null],[13,"ThousandsSeparator","","",241,null],[13,"DecimalSeparator","","",241,null],[13,"CurrencyUnit","","",241,null],[13,"CurrencySubUnit","","",241,null],[13,"NumPadLeftParen","","",241,null],[13,"NumPadRightParen","","",241,null],[13,"NumPadLeftBrace","","",241,null],[13,"NumPadRightBrace","","",241,null],[13,"NumPadTab","","",241,null],[13,"NumPadBackspace","","",241,null],[13,"NumPadA","","",241,null],[13,"NumPadB","","",241,null],[13,"NumPadC","","",241,null],[13,"NumPadD","","",241,null],[13,"NumPadE","","",241,null],[13,"NumPadF","","",241,null],[13,"NumPadXor","","",241,null],[13,"NumPadPower","","",241,null],[13,"NumPadPercent","","",241,null],[13,"NumPadLess","","",241,null],[13,"NumPadGreater","","",241,null],[13,"NumPadAmpersand","","",241,null],[13,"NumPadDblAmpersand","","",241,null],[13,"NumPadVerticalBar","","",241,null],[13,"NumPadDblVerticalBar","","",241,null],[13,"NumPadColon","","",241,null],[13,"NumPadHash","","",241,null],[13,"NumPadSpace","","",241,null],[13,"NumPadAt","","",241,null],[13,"NumPadExclam","","",241,null],[13,"NumPadMemStore","","",241,null],[13,"NumPadMemRecall","","",241,null],[13,"NumPadMemClear","","",241,null],[13,"NumPadMemAdd","","",241,null],[13,"NumPadMemSubtract","","",241,null],[13,"NumPadMemMultiply","","",241,null],[13,"NumPadMemDivide","","",241,null],[13,"NumPadPlusMinus","","",241,null],[13,"NumPadClear","","",241,null],[13,"NumPadClearEntry","","",241,null],[13,"NumPadBinary","","",241,null],[13,"NumPadOctal","","",241,null],[13,"NumPadDecimal","","",241,null],[13,"NumPadHexadecimal","","",241,null],[13,"LCtrl","","",241,null],[13,"LShift","","",241,null],[13,"LAlt","","",241,null],[13,"LGui","","",241,null],[13,"RCtrl","","",241,null],[13,"RShift","","",241,null],[13,"RAlt","","",241,null],[13,"RGui","","",241,null],[13,"Mode","","",241,null],[13,"AudioNext","","",241,null],[13,"AudioPrev","","",241,null],[13,"AudioStop","","",241,null],[13,"AudioPlay","","",241,null],[13,"AudioMute","","",241,null],[13,"MediaSelect","","",241,null],[13,"Www","","",241,null],[13,"Mail","","",241,null],[13,"Calculator","","",241,null],[13,"Computer","","",241,null],[13,"AcSearch","","",241,null],[13,"AcHome","","",241,null],[13,"AcBack","","",241,null],[13,"AcForward","","",241,null],[13,"AcStop","","",241,null],[13,"AcRefresh","","",241,null],[13,"AcBookmarks","","",241,null],[13,"BrightnessDown","","",241,null],[13,"BrightnessUp","","",241,null],[13,"DisplaySwitch","","",241,null],[13,"KbdIllumToggle","","",241,null],[13,"KbdIllumDown","","",241,null],[13,"KbdIllumUp","","",241,null],[13,"Eject","","",241,null],[13,"Sleep","","",241,null],[4,"Key","conrod::input","Represent a keyboard key. Keycodes follows SDL http://wiki.libsdl.org/SDLKeycodeLookup",null,null],[13,"Unknown","","",241,null],[13,"Backspace","","",241,null],[13,"Tab","","",241,null],[13,"Return","","",241,null],[13,"Escape","","",241,null],[13,"Space","","",241,null],[13,"Exclaim","","",241,null],[13,"Quotedbl","","",241,null],[13,"Hash","","",241,null],[13,"Dollar","","",241,null],[13,"Percent","","",241,null],[13,"Ampersand","","",241,null],[13,"Quote","","",241,null],[13,"LeftParen","","",241,null],[13,"RightParen","","",241,null],[13,"Asterisk","","",241,null],[13,"Plus","","",241,null],[13,"Comma","","",241,null],[13,"Minus","","",241,null],[13,"Period","","",241,null],[13,"Slash","","",241,null],[13,"D0","","",241,null],[13,"D1","","",241,null],[13,"D2","","",241,null],[13,"D3","","",241,null],[13,"D4","","",241,null],[13,"D5","","",241,null],[13,"D6","","",241,null],[13,"D7","","",241,null],[13,"D8","","",241,null],[13,"D9","","",241,null],[13,"Colon","","",241,null],[13,"Semicolon","","",241,null],[13,"Less","","",241,null],[13,"Equals","","",241,null],[13,"Greater","","",241,null],[13,"Question","","",241,null],[13,"At","","",241,null],[13,"LeftBracket","","",241,null],[13,"Backslash","","",241,null],[13,"RightBracket","","",241,null],[13,"Caret","","",241,null],[13,"Underscore","","",241,null],[13,"Backquote","","",241,null],[13,"A","","",241,null],[13,"B","","",241,null],[13,"C","","",241,null],[13,"D","","",241,null],[13,"E","","",241,null],[13,"F","","",241,null],[13,"G","","",241,null],[13,"H","","",241,null],[13,"I","","",241,null],[13,"J","","",241,null],[13,"K","","",241,null],[13,"L","","",241,null],[13,"M","","",241,null],[13,"N","","",241,null],[13,"O","","",241,null],[13,"P","","",241,null],[13,"Q","","",241,null],[13,"R","","",241,null],[13,"S","","",241,null],[13,"T","","",241,null],[13,"U","","",241,null],[13,"V","","",241,null],[13,"W","","",241,null],[13,"X","","",241,null],[13,"Y","","",241,null],[13,"Z","","",241,null],[13,"Delete","","",241,null],[13,"CapsLock","","",241,null],[13,"F1","","",241,null],[13,"F2","","",241,null],[13,"F3","","",241,null],[13,"F4","","",241,null],[13,"F5","","",241,null],[13,"F6","","",241,null],[13,"F7","","",241,null],[13,"F8","","",241,null],[13,"F9","","",241,null],[13,"F10","","",241,null],[13,"F11","","",241,null],[13,"F12","","",241,null],[13,"PrintScreen","","",241,null],[13,"ScrollLock","","",241,null],[13,"Pause","","",241,null],[13,"Insert","","",241,null],[13,"Home","","",241,null],[13,"PageUp","","",241,null],[13,"End","","",241,null],[13,"PageDown","","",241,null],[13,"Right","","",241,null],[13,"Left","","",241,null],[13,"Down","","",241,null],[13,"Up","","",241,null],[13,"NumLockClear","","",241,null],[13,"NumPadDivide","","",241,null],[13,"NumPadMultiply","","",241,null],[13,"NumPadMinus","","",241,null],[13,"NumPadPlus","","",241,null],[13,"NumPadEnter","","",241,null],[13,"NumPad1","","",241,null],[13,"NumPad2","","",241,null],[13,"NumPad3","","",241,null],[13,"NumPad4","","",241,null],[13,"NumPad5","","",241,null],[13,"NumPad6","","",241,null],[13,"NumPad7","","",241,null],[13,"NumPad8","","",241,null],[13,"NumPad9","","",241,null],[13,"NumPad0","","",241,null],[13,"NumPadPeriod","","",241,null],[13,"Application","","",241,null],[13,"Power","","",241,null],[13,"NumPadEquals","","",241,null],[13,"F13","","",241,null],[13,"F14","","",241,null],[13,"F15","","",241,null],[13,"F16","","",241,null],[13,"F17","","",241,null],[13,"F18","","",241,null],[13,"F19","","",241,null],[13,"F20","","",241,null],[13,"F21","","",241,null],[13,"F22","","",241,null],[13,"F23","","",241,null],[13,"F24","","",241,null],[13,"Execute","","",241,null],[13,"Help","","",241,null],[13,"Menu","","",241,null],[13,"Select","","",241,null],[13,"Stop","","",241,null],[13,"Again","","",241,null],[13,"Undo","","",241,null],[13,"Cut","","",241,null],[13,"Copy","","",241,null],[13,"Paste","","",241,null],[13,"Find","","",241,null],[13,"Mute","","",241,null],[13,"VolumeUp","","",241,null],[13,"VolumeDown","","",241,null],[13,"NumPadComma","","",241,null],[13,"NumPadEqualsAS400","","",241,null],[13,"AltErase","","",241,null],[13,"Sysreq","","",241,null],[13,"Cancel","","",241,null],[13,"Clear","","",241,null],[13,"Prior","","",241,null],[13,"Return2","","",241,null],[13,"Separator","","",241,null],[13,"Out","","",241,null],[13,"Oper","","",241,null],[13,"ClearAgain","","",241,null],[13,"CrSel","","",241,null],[13,"ExSel","","",241,null],[13,"NumPad00","","",241,null],[13,"NumPad000","","",241,null],[13,"ThousandsSeparator","","",241,null],[13,"DecimalSeparator","","",241,null],[13,"CurrencyUnit","","",241,null],[13,"CurrencySubUnit","","",241,null],[13,"NumPadLeftParen","","",241,null],[13,"NumPadRightParen","","",241,null],[13,"NumPadLeftBrace","","",241,null],[13,"NumPadRightBrace","","",241,null],[13,"NumPadTab","","",241,null],[13,"NumPadBackspace","","",241,null],[13,"NumPadA","","",241,null],[13,"NumPadB","","",241,null],[13,"NumPadC","","",241,null],[13,"NumPadD","","",241,null],[13,"NumPadE","","",241,null],[13,"NumPadF","","",241,null],[13,"NumPadXor","","",241,null],[13,"NumPadPower","","",241,null],[13,"NumPadPercent","","",241,null],[13,"NumPadLess","","",241,null],[13,"NumPadGreater","","",241,null],[13,"NumPadAmpersand","","",241,null],[13,"NumPadDblAmpersand","","",241,null],[13,"NumPadVerticalBar","","",241,null],[13,"NumPadDblVerticalBar","","",241,null],[13,"NumPadColon","","",241,null],[13,"NumPadHash","","",241,null],[13,"NumPadSpace","","",241,null],[13,"NumPadAt","","",241,null],[13,"NumPadExclam","","",241,null],[13,"NumPadMemStore","","",241,null],[13,"NumPadMemRecall","","",241,null],[13,"NumPadMemClear","","",241,null],[13,"NumPadMemAdd","","",241,null],[13,"NumPadMemSubtract","","",241,null],[13,"NumPadMemMultiply","","",241,null],[13,"NumPadMemDivide","","",241,null],[13,"NumPadPlusMinus","","",241,null],[13,"NumPadClear","","",241,null],[13,"NumPadClearEntry","","",241,null],[13,"NumPadBinary","","",241,null],[13,"NumPadOctal","","",241,null],[13,"NumPadDecimal","","",241,null],[13,"NumPadHexadecimal","","",241,null],[13,"LCtrl","","",241,null],[13,"LShift","","",241,null],[13,"LAlt","","",241,null],[13,"LGui","","",241,null],[13,"RCtrl","","",241,null],[13,"RShift","","",241,null],[13,"RAlt","","",241,null],[13,"RGui","","",241,null],[13,"Mode","","",241,null],[13,"AudioNext","","",241,null],[13,"AudioPrev","","",241,null],[13,"AudioStop","","",241,null],[13,"AudioPlay","","",241,null],[13,"AudioMute","","",241,null],[13,"MediaSelect","","",241,null],[13,"Www","","",241,null],[13,"Mail","","",241,null],[13,"Calculator","","",241,null],[13,"Computer","","",241,null],[13,"AcSearch","","",241,null],[13,"AcHome","","",241,null],[13,"AcBack","","",241,null],[13,"AcForward","","",241,null],[13,"AcStop","","",241,null],[13,"AcRefresh","","",241,null],[13,"AcBookmarks","","",241,null],[13,"BrightnessDown","","",241,null],[13,"BrightnessUp","","",241,null],[13,"DisplaySwitch","","",241,null],[13,"KbdIllumToggle","","",241,null],[13,"KbdIllumDown","","",241,null],[13,"KbdIllumUp","","",241,null],[13,"Eject","","",241,null],[13,"Sleep","","",241,null],[4,"MouseButton","","Represent a mouse button.",null,null],[13,"Unknown","","Unknown mouse button.",242,null],[13,"Left","","Left mouse button.",242,null],[13,"Right","","Right mouse button.",242,null],[13,"Middle","","Middle mouse button.",242,null],[13,"X1","","Extra mouse button number 1.",242,null],[13,"X2","","Extra mouse button number 2.",242,null],[13,"Button6","","Mouse button number 6.",242,null],[13,"Button7","","Mouse button number 7.",242,null],[13,"Button8","","Mouse button number 8.",242,null],[3,"RenderArgs","","Render arguments",null,null],[12,"ext_dt","","Extrapolated time in seconds, used to do smooth animation.",243,null],[12,"width","","The width of rendered area in points.",243,null],[12,"height","","The height of rendered area in points.",243,null],[12,"draw_width","","The width of rendered area in pixels.",243,null],[12,"draw_height","","The height of rendered area in pixels.",243,null],[4,"Source","","Sources from which user input may be received.",null,null],[13,"Mouse","","Mouse input (i.e. movement, buttons).",244,null],[13,"Keyboard","","Keyboard input.",244,null],[13,"Touch","","Input from a finger on a touch screen/surface.",244,null],[4,"Motion","","Different kinds of motion input.",null,null],[13,"MouseCursor","","Absolute cursor position within the window.",245,null],[12,"x","conrod::input::Motion","",245,null],[12,"y","","",245,null],[13,"MouseRelative","conrod::input","Relative mouse movement.",245,null],[12,"x","conrod::input::Motion","",245,null],[12,"y","","",245,null],[13,"Scroll","conrod::input","x and y in scroll ticks.",245,null],[12,"x","conrod::input::Motion","",245,null],[12,"y","","",245,null],[13,"ControllerAxis","conrod::input","controller axis move event.",245,null],[0,"state","","Everything related to storing the state of user input.",null,null],[3,"State","conrod::input::state","Holds the current state of user input.",null,null],[12,"mouse","","Mouse position and button state.",246,null],[12,"touch","","All in-progress touch interactions.",246,null],[12,"widget_capturing_keyboard","","Which widget, if any, is currently capturing the keyboard",246,null],[12,"widget_capturing_mouse","","Which widget, if any, is currently capturing the mouse",246,null],[12,"widget_under_mouse","","The widget that is currently under the mouse cursor.",246,null],[12,"modifiers","","Which modifier keys are being held down.",246,null],[0,"touch","","Touch specific state.",null,null],[3,"Start","conrod::input::state::touch","State stored about the start of a `Touch` interaction.",null,null],[12,"time","","The time at which the `Touch` began.",247,null],[12,"xy","","The position at which the touch began.",247,null],[12,"widget","","The widget under the beginning of the touch if there was one.",247,null],[3,"Touch","","All state stored for a `Touch` interaction in progress.",null,null],[12,"start","","The `Start` of the touch interaction.",248,null],[12,"xy","","The last recorded position of the finger on the window.",248,null],[12,"widget","","The widget currently being touched.",248,null],[11,"clone","","",247,{"i":[{"n":"self"}],"o":{"n":"start"}}],[11,"fmt","","",247,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",247,{"i":[{"n":"self"},{"n":"start"}],"o":{"n":"bool"}}],[11,"ne","","",247,{"i":[{"n":"self"},{"n":"start"}],"o":{"n":"bool"}}],[11,"clone","","",248,{"i":[{"n":"self"}],"o":{"n":"touch"}}],[11,"fmt","","",248,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",248,{"i":[{"n":"self"},{"n":"touch"}],"o":{"n":"bool"}}],[11,"ne","","",248,{"i":[{"n":"self"},{"n":"touch"}],"o":{"n":"bool"}}],[0,"mouse","conrod::input::state","Mouse specific state.",null,null],[4,"Button","conrod::input::state::mouse","Represent a mouse button.",null,null],[13,"Unknown","","Unknown mouse button.",242,null],[13,"Left","","Left mouse button.",242,null],[13,"Right","","Right mouse button.",242,null],[13,"Middle","","Middle mouse button.",242,null],[13,"X1","","Extra mouse button number 1.",242,null],[13,"X2","","Extra mouse button number 2.",242,null],[13,"Button6","","Mouse button number 6.",242,null],[13,"Button7","","Mouse button number 7.",242,null],[13,"Button8","","Mouse button number 8.",242,null],[3,"Mouse","","The state of the `Mouse`, including it's position and button states.",null,null],[12,"buttons","","A map that stores the up/down state of each button.",249,null],[12,"xy","","The current position of the mouse.",249,null],[3,"ButtonMap","","Stores the state of all mouse buttons.",null,null],[3,"PressedButtons","","An iterator yielding all pressed buttons.",null,null],[4,"ButtonPosition","","Whether the button is up or down.",null,null],[13,"Up","","The button is up (i.e. pressed).",250,null],[13,"Down","","The button is down and was originally pressed down at the given `Point` over the widget at the given widget::Id.",250,null],[17,"NUM_BUTTONS","","The max total number of buttons on a mouse.",null,null],[11,"clone","","",249,{"i":[{"n":"self"}],"o":{"n":"mouse"}}],[11,"fmt","","",249,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",249,{"i":[{"n":"self"},{"n":"mouse"}],"o":{"n":"bool"}}],[11,"ne","","",249,{"i":[{"n":"self"},{"n":"mouse"}],"o":{"n":"bool"}}],[11,"clone","","",250,{"i":[{"n":"self"}],"o":{"n":"buttonposition"}}],[11,"fmt","","",250,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",250,{"i":[{"n":"self"},{"n":"buttonposition"}],"o":{"n":"bool"}}],[11,"ne","","",250,{"i":[{"n":"self"},{"n":"buttonposition"}],"o":{"n":"bool"}}],[11,"clone","","",251,{"i":[{"n":"self"}],"o":{"n":"buttonmap"}}],[11,"fmt","","",251,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",251,{"i":[{"n":"self"},{"n":"buttonmap"}],"o":{"n":"bool"}}],[11,"ne","","",251,{"i":[{"n":"self"},{"n":"buttonmap"}],"o":{"n":"bool"}}],[11,"clone","","",252,{"i":[{"n":"self"}],"o":{"n":"pressedbuttons"}}],[11,"new","","Construct a new default `Mouse`.",249,{"o":{"n":"self"}}],[11,"relative_to","","If the mouse button is down, return a new one with position relative to the given `xy`.",250,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"self"}}],[11,"is_down","","Is the `ButtonPosition` down.",250,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_up","","Is the `ButtonPosition` up.",250,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"if_down","","Returns the position at which the button was pressed along with the widget that was under the mouse at the time of pressing if the position is `Down`.",250,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"xy_if_down","","Returns the position at which the button was pressed if it's down.",250,{"i":[{"n":"self"}],"o":{"g":["point"],"n":"option"}}],[11,"new","","Returns a new button map with all states set to `None`",251,{"o":{"n":"self"}}],[11,"relative_to","","Returns a copy of the ButtonMap relative to the given `Point`",251,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"self"}}],[11,"left","","The state of the left mouse button.",251,{"i":[{"n":"self"}],"o":{"n":"buttonposition"}}],[11,"middle","","The state of the middle mouse button.",251,{"i":[{"n":"self"}],"o":{"n":"buttonposition"}}],[11,"right","","The state of the right mouse button.",251,{"i":[{"n":"self"}],"o":{"n":"buttonposition"}}],[11,"press","","Sets the `Button` in the `Down` position.",251,{"i":[{"n":"self"},{"n":"button"},{"n":"point"},{"g":["id"],"n":"option"}]}],[11,"release","","Set's the `Button` in the `Up` position.",251,{"i":[{"n":"self"},{"n":"button"}]}],[11,"pressed","","An iterator yielding all pressed mouse buttons along with the location at which they were originally pressed.",251,{"i":[{"n":"self"}],"o":{"n":"pressedbuttons"}}],[11,"index","","",251,null],[11,"next","","",252,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","conrod::input::state","",246,{"i":[{"n":"self"}],"o":{"n":"state"}}],[11,"fmt","","",246,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",246,{"i":[{"n":"self"},{"n":"state"}],"o":{"n":"bool"}}],[11,"ne","","",246,{"i":[{"n":"self"},{"n":"state"}],"o":{"n":"bool"}}],[11,"new","","Returns a fresh new input state",246,{"o":{"n":"state"}}],[11,"relative_to","","Returns a copy of the input::State relative to the given `position::Point`",246,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"state"}}],[0,"widget","conrod::input","Contains all the logic for filtering input events and making them relative to widgets.",null,null],[3,"Widget","conrod::input::widget","Provides only events and input state that are relevant to a specific widget.",null,null],[3,"Mouse","","A view of the `input::state::Mouse` that is specific to a single widget.",null,null],[12,"buttons","","The state of each `MouseButton`.",253,null],[3,"Events","","An iterator yielding all events that are relevant to a specific widget.",null,null],[3,"Presses","","An `Iterator` yielding all button presses occuring within the given sequence of `widget::Event`s.",null,null],[3,"MousePresses","","An `Iterator` yielding all mouse button presses occuring within the given sequence of `Presses`.",null,null],[3,"MouseButtonPresses","","An `Iterator` yielding all mouse button presses occuring within the given sequence of `Presses` for some specific mouse button.",null,null],[3,"KeyPresses","","An `Iterator` yielding all keyboard button presses occuring within the given sequence of `Presses`.",null,null],[3,"Releases","","An `Iterator` yielding all button releases occuring within the given sequence of `widget::Event`s.",null,null],[3,"MouseButtonReleases","","An `Iterator` yielding all mouse button releases occuring within the given sequence of `Releases` for some specific mouse button.",null,null],[3,"MouseReleases","","An `Iterator` yielding all mouse button releases occuring within the given sequence of `Releases`.",null,null],[3,"KeyReleases","","An `Iterator` yielding all keyboard button releases occuring within the given sequence of `Releases`.",null,null],[3,"Clicks","","An `Iterator` yielding all mouse clicks occuring within the given sequence of `widget::Event`s.",null,null],[3,"ButtonClicks","","An `Iterator` yielding all mouse `button` clicks occuring within the given sequence of `widget::Click`s.",null,null],[3,"Taps","","An `Iterator` yielding all touch screen taps occuring within the given sequence of `widget::Event`s.",null,null],[3,"Drags","","An iterator that yields all `event::Drag` events yielded by the `Events` iterator.",null,null],[3,"ButtonDrags","","An `Iterator` yielding all mouse `button` drags occuring within the given sequence of `widget::Drag`s.",null,null],[3,"Texts","","An iterator that yields all `Input::Text` events yielded by the `Events` iterator.",null,null],[3,"Scrolls","","An iterator that yields all `Scroll` events yielded by the given `Events` iterator.",null,null],[11,"clone","","",254,{"i":[{"n":"self"}],"o":{"n":"widget"}}],[11,"clone","","",253,{"i":[{"n":"self"}],"o":{"n":"mouse"}}],[11,"fmt","","",253,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",255,{"i":[{"n":"self"}],"o":{"n":"events"}}],[11,"clone","","",256,{"i":[{"n":"self"}],"o":{"n":"presses"}}],[11,"clone","","",257,{"i":[{"n":"self"}],"o":{"n":"mousepresses"}}],[11,"clone","","",258,{"i":[{"n":"self"}],"o":{"n":"mousebuttonpresses"}}],[11,"clone","","",259,{"i":[{"n":"self"}],"o":{"n":"keypresses"}}],[11,"clone","","",260,{"i":[{"n":"self"}],"o":{"n":"releases"}}],[11,"clone","","",261,{"i":[{"n":"self"}],"o":{"n":"mousebuttonreleases"}}],[11,"clone","","",262,{"i":[{"n":"self"}],"o":{"n":"mousereleases"}}],[11,"clone","","",263,{"i":[{"n":"self"}],"o":{"n":"keyreleases"}}],[11,"clone","","",264,{"i":[{"n":"self"}],"o":{"n":"clicks"}}],[11,"clone","","",265,{"i":[{"n":"self"}],"o":{"n":"buttonclicks"}}],[11,"clone","","",266,{"i":[{"n":"self"}],"o":{"n":"taps"}}],[11,"clone","","",267,{"i":[{"n":"self"}],"o":{"n":"drags"}}],[11,"clone","","",268,{"i":[{"n":"self"}],"o":{"n":"buttondrags"}}],[11,"clone","","",269,{"i":[{"n":"self"}],"o":{"n":"texts"}}],[11,"clone","","",270,{"i":[{"n":"self"}],"o":{"n":"scrolls"}}],[11,"for_widget","","Returns a `Widget` with events specifically for the given widget.",254,{"i":[{"n":"id"},{"n":"rect"},{"n":"global"}],"o":{"n":"self"}}],[11,"mouse","","If the widget is currently capturing the mouse, this returns the state of the mouse.",254,{"i":[{"n":"self"}],"o":{"g":["mouse"],"n":"option"}}],[11,"events","","Produces an iterator yielding all events that are relevant to a specific widget.",254,{"i":[{"n":"self"}],"o":{"n":"events"}}],[11,"presses","","Filters all events yielded by `Self::events` other than `event::Press`es.",254,{"i":[{"n":"self"}],"o":{"n":"presses"}}],[11,"releases","","Filters all events yielded by `Self::events` other than `event::Release`es.",254,{"i":[{"n":"self"}],"o":{"n":"releases"}}],[11,"clicks","","Filters all events yielded by `Self::events` for all `event::Click`s.",254,{"i":[{"n":"self"}],"o":{"n":"clicks"}}],[11,"taps","","Filters all events yielded by `Self::events` for all `event::Tap`s.",254,{"i":[{"n":"self"}],"o":{"n":"taps"}}],[11,"drags","","Produces an iterator that yields all `event::Drag` events yielded by the `Events` iterator.",254,{"i":[{"n":"self"}],"o":{"n":"drags"}}],[11,"texts","","Produces an iterator that yields all `Input::Text` events that have occurred as `&str`s since the last time `Ui::set_widgets` was called.",254,{"i":[{"n":"self"}],"o":{"n":"texts"}}],[11,"scrolls","","Produce an iterator that yields only the `Scroll` events yielded by the `Events` iterator.",254,{"i":[{"n":"self"}],"o":{"n":"scrolls"}}],[11,"abs_xy","","The absolute position of the mouse within the window.",253,{"i":[{"n":"self"}],"o":{"n":"point"}}],[11,"rel_xy","","The position of the mouse relative to the middle of the widget's `Rect`.",253,{"i":[{"n":"self"}],"o":{"n":"point"}}],[11,"is_over","","Is the mouse currently over the widget.",253,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"mouse","","Produces an `Iterator` that yields only the press events that correspond with mouse buttons.",256,{"i":[{"n":"self"}],"o":{"n":"mousepresses"}}],[11,"key","","Produces an `Iterator` that yields only the press events that correspond with keyboard buttons.",256,{"i":[{"n":"self"}],"o":{"n":"keypresses"}}],[11,"button","","Produces an `Iterator` that yields only events associated with the given mouse button.",257,{"i":[{"n":"self"},{"n":"mousebutton"}],"o":{"n":"mousebuttonpresses"}}],[11,"left","","Produces an `Iterator` that yields only the left mouse button press events.",257,{"i":[{"n":"self"}],"o":{"n":"mousebuttonpresses"}}],[11,"middle","","Produces an `Iterator` that yields only the middle mouse button press events.",257,{"i":[{"n":"self"}],"o":{"n":"mousebuttonpresses"}}],[11,"right","","Produces an `Iterator` that yields only the right mouse button press events.",257,{"i":[{"n":"self"}],"o":{"n":"mousebuttonpresses"}}],[11,"mouse","","Produces an `Iterator` that yields only the release events that correspond with mouse buttons.",260,{"i":[{"n":"self"}],"o":{"n":"mousereleases"}}],[11,"key","","Produces an `Iterator` that yields only the release events that correspond with keyboard buttons.",260,{"i":[{"n":"self"}],"o":{"n":"keyreleases"}}],[11,"button","","Produces an `Iterator` that yields only events associated with the given mouse button.",262,{"i":[{"n":"self"},{"n":"mousebutton"}],"o":{"n":"mousebuttonreleases"}}],[11,"left","","Produces an `Iterator` that yields only the left mouse button release events.",262,{"i":[{"n":"self"}],"o":{"n":"mousebuttonreleases"}}],[11,"middle","","Produces an `Iterator` that yields only the middle mouse button release events.",262,{"i":[{"n":"self"}],"o":{"n":"mousebuttonreleases"}}],[11,"right","","Produces an `Iterator` that yields only the right mouse button release events.",262,{"i":[{"n":"self"}],"o":{"n":"mousebuttonreleases"}}],[11,"button","","Yield only the `Click`s that occurred from the given button.",264,{"i":[{"n":"self"},{"n":"mousebutton"}],"o":{"n":"buttonclicks"}}],[11,"left","","Yield only left mouse button `Click`s.",264,{"i":[{"n":"self"}],"o":{"n":"buttonclicks"}}],[11,"middle","","Yields only middle mouse button `Click`s.",264,{"i":[{"n":"self"}],"o":{"n":"buttonclicks"}}],[11,"right","","Yield only right mouse button `Click`s.",264,{"i":[{"n":"self"}],"o":{"n":"buttonclicks"}}],[11,"button","","Yield only the `Drag`s that occurred from the given button.",267,{"i":[{"n":"self"},{"n":"mousebutton"}],"o":{"n":"buttondrags"}}],[11,"left","","Yield only left mouse button `Drag`s.",267,{"i":[{"n":"self"}],"o":{"n":"buttondrags"}}],[11,"middle","","Yields only middle mouse button `Drag`s.",267,{"i":[{"n":"self"}],"o":{"n":"buttondrags"}}],[11,"right","","Yield only right mouse button `Drag`s.",267,{"i":[{"n":"self"}],"o":{"n":"buttondrags"}}],[11,"next","","",255,{"i":[{"n":"self"}],"o":{"g":["widget"],"n":"option"}}],[11,"next","","",256,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",257,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",258,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",259,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",260,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",262,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",261,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",263,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",264,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",265,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",266,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",267,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",268,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",269,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",270,{"i":[{"n":"self"}],"o":{"n":"option"}}],[0,"global","conrod::input","Handles all of the global input events and state. The core of this module is the `Global` struct. It is responsible for aggregating and interpreting raw input events into high-level semantic events.",null,null],[3,"Global","conrod::input::global","Global input event handler that also implements `input::Provider`. The `Ui` passes all events to it's `Global` instance, which aggregates and interprets the events to provide so-called 'high-level' events to widgets. This input gets reset after every update by the `Ui`.",null,null],[12,"start","","The `input::State` as it was at the end of the last update cycle.",271,null],[12,"current","","The most recent `input::State`, with updates from handling all the events this update cycle",271,null],[12,"last_click","","Tracks the last click that occurred and the time at which it occurred in order to create double-click events.",271,null],[3,"Events","","Iterator over all global `event::Event`s that have occurred since the last time `Ui::set_widgets` was called.",null,null],[3,"UiEvents","","An iterator yielding all `event::Ui`s that have occurred since the last time `Ui::set_widgets` was called.",null,null],[11,"clone","","",272,{"i":[{"n":"self"}],"o":{"n":"events"}}],[11,"clone","","",273,{"i":[{"n":"self"}],"o":{"n":"uievents"}}],[11,"new","","Returns a fresh new `Global`",271,{"o":{"n":"global"}}],[11,"events","","Returns an iterator yielding all events that have occurred since the last time `Ui::set_widgets` was called.",271,{"i":[{"n":"self"}],"o":{"n":"events"}}],[11,"push_event","","Add the new event to the stack.",271,{"i":[{"n":"self"},{"n":"event"}]}],[11,"clear_events_and_update_start_state","","Called at the end of every update cycle in order to prepare the `Global` to handle events for the next one.",271,{"i":[{"n":"self"}]}],[11,"ui","","Converts the `Events` into a `UiEvents`, yielding only the `event::Ui`s that have occurred since the last time `Ui::set_widgets` was called.",272,{"i":[{"n":"self"}],"o":{"n":"uievents"}}],[11,"next","","",272,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",273,{"i":[{"n":"self"}],"o":{"n":"option"}}],[0,"touch","conrod::input","Touch-related items.",null,null],[3,"Id","conrod::input::touch","A type for uniquely identifying the source of a touch interaction.",null,null],[3,"Touch","","Represents a touch interaction.",null,null],[12,"phase","","The stage of the touch interaction.",274,null],[12,"id","","A unique identifier associated with the source of the touch interaction.",274,null],[12,"xy","","The location of the touch on the surface/screen. See `Input` docs for information on the co-ordinate system.",274,null],[4,"Phase","","The stage of the touch interaction.",null,null],[13,"Start","","The start of a touch interaction.",275,null],[13,"Move","","A touch moving across a surface.",275,null],[13,"Cancel","","The touch interaction was cancelled.",275,null],[13,"End","","The end of a touch interaction.",275,null],[11,"clone","","",276,{"i":[{"n":"self"}],"o":{"n":"id"}}],[11,"fmt","","",276,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",276,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"bool"}}],[11,"ne","","",276,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",276,{"i":[{"n":"self"},{"n":"id"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",276,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"bool"}}],[11,"le","","",276,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"bool"}}],[11,"gt","","",276,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"bool"}}],[11,"ge","","",276,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"bool"}}],[11,"cmp","","",276,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"ordering"}}],[11,"hash","","",276,null],[11,"clone","","",275,{"i":[{"n":"self"}],"o":{"n":"phase"}}],[11,"fmt","","",275,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",275,{"i":[{"n":"self"},{"n":"phase"}],"o":{"n":"bool"}}],[11,"hash","","",275,null],[11,"clone","","",274,{"i":[{"n":"self"}],"o":{"n":"touch"}}],[11,"fmt","","",274,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",274,{"i":[{"n":"self"},{"n":"touch"}],"o":{"n":"bool"}}],[11,"ne","","",274,{"i":[{"n":"self"},{"n":"touch"}],"o":{"n":"bool"}}],[11,"new","","Construct a new identifier.",276,{"i":[{"n":"u64"}],"o":{"n":"self"}}],[11,"relative_to","","Returns a copy of the `Touch` relative to the given `xy`.",274,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"self"}}],[11,"clone","conrod::input","",244,{"i":[{"n":"self"}],"o":{"n":"source"}}],[11,"eq","","",244,{"i":[{"n":"self"},{"n":"source"}],"o":{"n":"bool"}}],[11,"ne","","",244,{"i":[{"n":"self"},{"n":"source"}],"o":{"n":"bool"}}],[11,"fmt","","",244,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",245,{"i":[{"n":"self"}],"o":{"n":"motion"}}],[11,"fmt","","",245,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",245,{"i":[{"n":"self"},{"n":"motion"}],"o":{"n":"bool"}}],[11,"ne","","",245,{"i":[{"n":"self"},{"n":"motion"}],"o":{"n":"bool"}}],[0,"position","conrod","Items related to 2D positioning, used throughout conrod.",null,null],[3,"Padding","conrod::position","The distance between the inner edge of a border and the outer edge of the inner content.",null,null],[12,"x","","Padding on the start and end of the x axis.",277,null],[12,"y","","Padding on the start and end of the y axis.",277,null],[4,"Axis","","Represents either Axis in the 2-dimensional plane.",null,null],[13,"X","","The horizontal plane's Axis.",278,null],[13,"Y","","The vertical plane's Axis.",278,null],[4,"Position","","Some Position of some Widget along a single axis.",null,null],[13,"Absolute","","A specific position.",279,null],[13,"Relative","","A position relative to some other Widget.",279,null],[4,"Relative","","Positions that are described as Relative to some other Widget.",null,null],[13,"Scalar","","A relative scalar distance.",280,null],[13,"Align","","Aligned to either the `Start`, `Middle` or `End`.",280,null],[13,"Direction","","A distance as a `Scalar` value over the given `Direction`.",280,null],[13,"Place","","Some place on top of another widget.",280,null],[4,"Direction","","Directionally positioned, normally relative to some other widget.",null,null],[13,"Forwards","","Positioned forwards (positive Scalar) along some Axis.",281,null],[13,"Backwards","","Positioned backwards (negative Scalar) along some Axis.",281,null],[4,"Align","","The orientation of Alignment along some Axis.",null,null],[13,"Start","","Align our Start with the Start of some other widget along the Axis.",282,null],[13,"Middle","","Align our Middle with the Middle of some other widget along the Axis.",282,null],[13,"End","","Align our End with the End of some other widget along the Axis.",282,null],[4,"Place","","Place the widget at a position on some other widget.",null,null],[13,"Start","","Place upon the Start of the Widget's `kid_area`.",283,null],[13,"Middle","","Place upon the Middle of the Widget's `kid_area`.",283,null],[13,"End","","Place upon the End of the Widget's `kid_area`.",283,null],[4,"Dimension","","The length of a Widget over either the x or y axes.",null,null],[13,"Absolute","","Some specific length has been given.",284,null],[13,"Of","","The dimension should match that of the widget at the given index.",284,null],[13,"KidAreaOf","","The dimension should match that of the `kid_area` of the widget at the given index.",284,null],[0,"range","","A type for working one-dimensional ranges.",null,null],[3,"Range","conrod::position::range","Some start and end position along a single axis.",null,null],[12,"start","","The start of some `Range` along an axis.",285,null],[12,"end","","The end of some `Range` along an axis.",285,null],[4,"Edge","","Represents either the Start or End Edge of a Range.",null,null],[13,"Start","","The beginning of a Range.",286,null],[13,"End","","The end of a Range.",286,null],[11,"clone","","",285,{"i":[{"n":"self"}],"o":{"n":"range"}}],[11,"fmt","","",285,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",285,{"i":[{"n":"self"},{"n":"range"}],"o":{"n":"bool"}}],[11,"ne","","",285,{"i":[{"n":"self"},{"n":"range"}],"o":{"n":"bool"}}],[11,"clone","","",286,{"i":[{"n":"self"}],"o":{"n":"edge"}}],[11,"fmt","","",286,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",286,{"i":[{"n":"self"},{"n":"edge"}],"o":{"n":"bool"}}],[11,"new","","Construct a new `Range` from a given range, i.e. `Range::new(start, end)`.",285,{"i":[{"n":"scalar"},{"n":"scalar"}],"o":{"n":"range"}}],[11,"from_pos_and_len","","Construct a new `Range` from a given length and its centered position.",285,{"i":[{"n":"scalar"},{"n":"scalar"}],"o":{"n":"range"}}],[11,"magnitude","","The `start` value subtracted from the `end` value.",285,{"i":[{"n":"self"}],"o":{"n":"scalar"}}],[11,"len","","The absolute length of the Range aka the absolute magnitude.",285,{"i":[{"n":"self"}],"o":{"n":"scalar"}}],[11,"middle","","Return the value directly between the start and end values.",285,{"i":[{"n":"self"}],"o":{"n":"scalar"}}],[11,"invert","","The current range with its start and end values swapped.",285,{"i":[{"n":"self"}],"o":{"n":"range"}}],[11,"map_value_to","","Map the given Scalar from `Self` to some other given `Range`.",285,{"i":[{"n":"self"},{"n":"scalar"},{"n":"range"}],"o":{"n":"scalar"}}],[11,"shift","","Shift the `Range` start and end points by a given `Scalar`.",285,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"range"}}],[11,"direction","","The direction of the Range represented as a normalised scalar.",285,{"i":[{"n":"self"}],"o":{"n":"scalar"}}],[11,"undirected","","Converts the Range to an undirected Range. By ensuring that `start` <= `end`.",285,{"i":[{"n":"self"}],"o":{"n":"range"}}],[11,"max","","The Range that encompasses both self and the given Range.",285,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"range"}}],[11,"overlap","","The Range that represents the range of the overlap between two Ranges if there is some.",285,{"i":[{"n":"self"},{"n":"self"}],"o":{"g":["range"],"n":"option"}}],[11,"max_directed","","The Range that encompasses both self and the given Range.",285,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"range"}}],[11,"is_over","","Is the given scalar within our range.",285,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"bool"}}],[11,"round","","Round the values at both ends of the Range and return the result.",285,{"i":[{"n":"self"}],"o":{"n":"range"}}],[11,"floor","","Floor the values at both ends of the Range and return the result.",285,{"i":[{"n":"self"}],"o":{"n":"range"}}],[11,"pad_start","","The Range with some padding given to the `start` value.",285,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"range"}}],[11,"pad_end","","The Range with some padding given to the `end` value.",285,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"range"}}],[11,"pad","","The Range with some given padding to be applied to each end.",285,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"range"}}],[11,"pad_ends","","The Range with some padding given for each end.",285,{"i":[{"n":"self"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"range"}}],[11,"clamp_value","","Clamp the given value to the range.",285,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"scalar"}}],[11,"stretch_to_value","","Stretch the end that is closest to the given value only if it lies outside the Range.",285,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"range"}}],[11,"has_same_direction","","Does `self` have the same direction as `other`.",285,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"align_start_of","","Align the `start` of `self` to the `start` of the `other` Range.",285,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"align_end_of","","Align the `end` of `self` to the `end` of the `other` Range.",285,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"align_middle_of","","Align the middle of `self` to the middle of the `other` Range.",285,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"align_after","","Aligns the `start` of `self` with the `end` of `other`.",285,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"align_before","","Aligns the `end` of `self` with the `start` of `other`.",285,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"align_to","","Align `self` to `other` along the x axis in accordance with the given `Align` variant.",285,{"i":[{"n":"self"},{"n":"align"},{"n":"self"}],"o":{"n":"self"}}],[11,"closest_edge","","The closest Edge of `self` to the given `scalar`.",285,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"edge"}}],[0,"rect","conrod::position","Defines the scalar `Rect` type used throughout conrod.",null,null],[3,"Rect","conrod::position::rect","Defines a Rectangle's bounds across the x and y axes.",null,null],[12,"x","","The start and end positions of the Rectangle on the x axis.",287,null],[12,"y","","The start and end positions of the Rectangle on the y axis.",287,null],[4,"Corner","","Either of the four corners of a Rect.",null,null],[13,"TopLeft","","The top left corner of a Rect.",288,null],[13,"TopRight","","The top right corner of a Rect.",288,null],[13,"BottomLeft","","The bottom left corner of a Rect.",288,null],[13,"BottomRight","","The bottom right corner of a Rect.",288,null],[11,"clone","","",287,{"i":[{"n":"self"}],"o":{"n":"rect"}}],[11,"fmt","","",287,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",287,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"ne","","",287,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"clone","","",288,{"i":[{"n":"self"}],"o":{"n":"corner"}}],[11,"fmt","","",288,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",288,{"i":[{"n":"self"},{"n":"corner"}],"o":{"n":"bool"}}],[11,"from_xy_dim","","Construct a Rect from a given `Point` and `Dimensions`.",287,{"i":[{"n":"point"},{"n":"dimensions"}],"o":{"n":"self"}}],[11,"from_corners","","Construct a Rect from the coordinates of two points.",287,{"i":[{"n":"point"},{"n":"point"}],"o":{"n":"self"}}],[11,"overlap","","The Rect representing the area in which two Rects overlap.",287,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[11,"max","","The Rect that encompass the two given sets of Rect.",287,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"x","","The position in the middle of the x bounds.",287,{"i":[{"n":"self"}],"o":{"n":"scalar"}}],[11,"y","","The position in the middle of the y bounds.",287,{"i":[{"n":"self"}],"o":{"n":"scalar"}}],[11,"xy","","The xy position in the middle of the bounds.",287,{"i":[{"n":"self"}],"o":{"n":"point"}}],[11,"x_y","","The centered x and y coordinates as a tuple.",287,null],[11,"w","","The width of the Rect.",287,{"i":[{"n":"self"}],"o":{"n":"scalar"}}],[11,"h","","The height of the Rect.",287,{"i":[{"n":"self"}],"o":{"n":"scalar"}}],[11,"dim","","The total dimensions of the Rect.",287,{"i":[{"n":"self"}],"o":{"n":"dimensions"}}],[11,"w_h","","The width and height of the Rect as a tuple.",287,null],[11,"xy_dim","","Convert the Rect to a `Point` and `Dimensions`.",287,null],[11,"x_y_w_h","","The Rect's centered coordinates and dimensions in a tuple.",287,null],[11,"len","","The length of the longest side of the rectangle.",287,{"i":[{"n":"self"}],"o":{"n":"scalar"}}],[11,"bottom","","The Rect's lowest y value.",287,{"i":[{"n":"self"}],"o":{"n":"scalar"}}],[11,"top","","The Rect's highest y value.",287,{"i":[{"n":"self"}],"o":{"n":"scalar"}}],[11,"left","","The Rect's lowest x value.",287,{"i":[{"n":"self"}],"o":{"n":"scalar"}}],[11,"right","","The Rect's highest x value.",287,{"i":[{"n":"self"}],"o":{"n":"scalar"}}],[11,"top_left","","The top left corner Point.",287,{"i":[{"n":"self"}],"o":{"n":"point"}}],[11,"bottom_left","","The bottom left corner Point.",287,{"i":[{"n":"self"}],"o":{"n":"point"}}],[11,"top_right","","The top right corner Point.",287,{"i":[{"n":"self"}],"o":{"n":"point"}}],[11,"bottom_right","","The bottom right corner Point.",287,{"i":[{"n":"self"}],"o":{"n":"point"}}],[11,"l_r_b_t","","The edges of the Rect in a tuple (top, bottom, left, right).",287,null],[11,"l_t_w_h","","The left and top edges of the Rect along with the width and height.",287,null],[11,"l_b_w_h","","The left and bottom edges of the Rect along with the width and height.",287,null],[11,"shift_x","","Shift the Rect along the x axis.",287,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"shift_y","","Shift the Rect along the y axis.",287,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"shift","","Shift the Rect by the given Point.",287,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"self"}}],[11,"relative_to_x","","Returns a `Rect` with a position relative to the given position on the x axis.",287,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"relative_to_y","","Returns a `Rect` with a position relative to the given position on the y axis.",287,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"relative_to","","Returns a `Rect` with a position relative to the given position.",287,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"self"}}],[11,"is_over","","Does the given point touch the Rectangle.",287,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"bool"}}],[11,"pad_left","","The Rect with some padding applied to the left edge.",287,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"pad_right","","The Rect with some padding applied to the right edge.",287,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"pad_bottom","","The rect with some padding applied to the bottom edge.",287,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"pad_top","","The Rect with some padding applied to the top edge.",287,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"pad","","The Rect with some padding amount applied to each edge.",287,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"padding","","The Rect with some padding applied.",287,{"i":[{"n":"self"},{"n":"padding"}],"o":{"n":"self"}}],[11,"stretch_to_point","","Stretches the closest edge(s) to the given point if the point lies outside of the Rect area.",287,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"self"}}],[11,"left_of","","Align `self`'s right edge with the left edge of the `other` Rect.",287,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"right_of","","Align `self`'s left edge with the right dge of the `other` Rect.",287,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"below","","Align `self`'s top edge with the bottom edge of the `other` Rect.",287,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"above","","Align `self`'s bottom edge with the top edge of the `other` Rect.",287,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"align_x_of","","Align `self` to `other` along the x axis in accordance with the given `Align` variant.",287,{"i":[{"n":"self"},{"n":"align"},{"n":"self"}],"o":{"n":"self"}}],[11,"align_y_of","","Align `self` to `other` along the y axis in accordance with the given `Align` variant.",287,{"i":[{"n":"self"},{"n":"align"},{"n":"self"}],"o":{"n":"self"}}],[11,"align_left_of","","Align `self`'s left edge with the left edge of the `other` Rect.",287,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"align_middle_x_of","","Align the middle of `self` with the middle of the `other` Rect along the x axis.",287,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"align_right_of","","Align `self`'s right edge with the right edge of the `other` Rect.",287,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"align_bottom_of","","Align `self`'s bottom edge with the bottom edge of the `other` Rect.",287,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"align_middle_y_of","","Align the middle of `self` with the middle of the `other` Rect along the y axis.",287,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"align_top_of","","Align `self`'s top edge with the top edge of the `other` Rect.",287,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"top_left_of","","Place `self` along the top left edges of the `other` Rect.",287,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"top_right_of","","Place `self` along the top right edges of the `other` Rect.",287,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"bottom_left_of","","Place `self` along the bottom left edges of the `other` Rect.",287,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"bottom_right_of","","Place `self` along the bottom right edges of the `other` Rect.",287,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"mid_top_of","","Place `self` in the middle of the top edge of the `other` Rect.",287,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"mid_bottom_of","","Place `self` in the middle of the bottom edge of the `other` Rect.",287,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"mid_left_of","","Place `self` in the middle of the left edge of the `other` Rect.",287,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"mid_right_of","","Place `self` in the middle of the right edge of the `other` Rect.",287,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"middle_of","","Place `self` directly in the middle of the `other` Rect.",287,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"closest_corner","","Return the Corner of `self` that is closest to the given Point.",287,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"corner"}}],[6,"Scalar","conrod::position","An alias over the Scalar type used throughout Conrod.",null,null],[6,"Depth","","The depth at which the widget will be rendered.",null,null],[6,"Dimensions","","General use 2D spatial dimensions.",null,null],[6,"Point","","General use 2D spatial point.",null,null],[6,"Margin","","The margin for some `Place`ment on either end of an axis.",null,null],[8,"Positionable","","Widgets that are positionable.",null,null],[10,"x_position","","Build with the given Position along the x axis.",289,{"i":[{"n":"self"},{"n":"position"}],"o":{"n":"self"}}],[10,"y_position","","Build with the given Position along the y axis.",289,{"i":[{"n":"self"},{"n":"position"}],"o":{"n":"self"}}],[10,"get_x_position","","Get the Position along the x axis.",289,{"i":[{"n":"self"},{"n":"ui"}],"o":{"n":"position"}}],[10,"get_y_position","","Get the Position along the y axis.",289,{"i":[{"n":"self"},{"n":"ui"}],"o":{"n":"position"}}],[11,"x","","Build with the given Absolute Position along the x axis.",289,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"y","","Build with the given Absolute Position along the y axis.",289,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"xy","","Set the Position with some Point.",289,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"self"}}],[11,"x_y","","Set the Position with x y coordinates.",289,{"i":[{"n":"self"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"x_position_relative","","Set the x Position Relative to the previous widget.",289,{"i":[{"n":"self"},{"n":"relative"}],"o":{"n":"self"}}],[11,"y_position_relative","","Set the y Position Relative to the previous widget.",289,{"i":[{"n":"self"},{"n":"relative"}],"o":{"n":"self"}}],[11,"x_y_position_relative","","Set the x and y Positions Relative to the previous widget.",289,{"i":[{"n":"self"},{"n":"relative"},{"n":"relative"}],"o":{"n":"self"}}],[11,"x_position_relative_to","","Set the x Position Relative to the given widget.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"relative"}],"o":{"n":"self"}}],[11,"y_position_relative_to","","Set the y Position Relative to the given widget.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"relative"}],"o":{"n":"self"}}],[11,"x_y_position_relative_to","","Set the x and y Positions Relative to the given widget.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"relative"},{"n":"relative"}],"o":{"n":"self"}}],[11,"x_relative","","Set the Position as a Scalar along the x axis Relative to the middle of previous widget.",289,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"y_relative","","Set the Position as a Scalar along the y axis Relative to the middle of previous widget.",289,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"xy_relative","","Set the Position as a Point Relative to the middle of the previous widget.",289,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"self"}}],[11,"x_y_relative","","Set the Position as Scalars along the x and y axes Relative to the middle of the previous widget.",289,{"i":[{"n":"self"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"x_relative_to","","Set the position relative to the widget with the given widget::Id.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"y_relative_to","","Set the position relative to the widget with the given widget::Id.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"xy_relative_to","","Set the position relative to the widget with the given widget::Id.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"point"}],"o":{"n":"self"}}],[11,"x_y_relative_to","","Set the position relative to the widget with the given widget::Id.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"x_direction","","Build with the Position along the x axis as some distance from another widget.",289,{"i":[{"n":"self"},{"n":"direction"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"y_direction","","Build with the Position along the y axis as some distance from another widget.",289,{"i":[{"n":"self"},{"n":"direction"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"down","","Build with the Position as some distance below another widget.",289,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"up","","Build with the Position as some distance above another widget.",289,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"left","","Build with the Position as some distance to the left of another widget.",289,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"right","","Build with the Position as some distance to the right of another widget.",289,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"x_direction_from","","Build with the Position along the x axis as some distance from the given widget.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"direction"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"y_direction_from","","Build with the Position along the y axis as some distance from the given widget.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"direction"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"down_from","","Build with the Position as some distance below the given widget.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"up_from","","Build with the Position as some distance above the given widget.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"left_from","","Build with the Position as some distance to the left of the given widget.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"right_from","","Build with the Position as some distance to the right of the given widget.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"x_align","","Align the Position of the widget along the x axis.",289,{"i":[{"n":"self"},{"n":"align"}],"o":{"n":"self"}}],[11,"y_align","","Align the Position of the widget along the y axis.",289,{"i":[{"n":"self"},{"n":"align"}],"o":{"n":"self"}}],[11,"align_left","","Align the position to the left (only effective for Up or Down `Direction`s).",289,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"align_middle_x","","Align the position to the middle (only effective for Up or Down `Direction`s).",289,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"align_right","","Align the position to the right (only effective for Up or Down `Direction`s).",289,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"align_top","","Align the position to the top (only effective for Left or Right `Direction`s).",289,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"align_middle_y","","Align the position to the middle (only effective for Left or Right `Direction`s).",289,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"align_bottom","","Align the position to the bottom (only effective for Left or Right `Direction`s).",289,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"x_align_to","","Align the Position of the widget with the given widget along the x axis.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"align"}],"o":{"n":"self"}}],[11,"y_align_to","","Align the Position of the widget with the given widget along the y axis.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"align"}],"o":{"n":"self"}}],[11,"align_left_of","","Align the position to the left (only effective for Up or Down `Direction`s).",289,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"align_middle_x_of","","Align the position to the middle (only effective for Up or Down `Direction`s).",289,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"align_right_of","","Align the position to the right (only effective for Up or Down `Direction`s).",289,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"align_top_of","","Align the position to the top (only effective for Left or Right `Direction`s).",289,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"align_middle_y_of","","Align the position to the middle (only effective for Left or Right `Direction`s).",289,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"align_bottom_of","","Align the position to the bottom (only effective for Left or Right `Direction`s).",289,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"x_place_on","","Place the widget at some position on the `other` Widget along the x axis.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"place"}],"o":{"n":"self"}}],[11,"y_place_on","","Place the widget at some position on the `other` Widget along the y axis.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"place"}],"o":{"n":"self"}}],[11,"middle_of","","Place the widget in the middle of the given Widget.",289,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"top_left_of","","Place the widget in the top left corner of the given Widget.",289,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"top_left_with_margin_on","","Place the widget in the top left corner of the given Widget with the given margin between both edges.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"top_left_with_margins_on","","Place the widget in the top left corner of the given Widget with the given margins between each respective edge.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"top_right_of","","Place the widget in the top right corner of the given Widget.",289,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"top_right_with_margin_on","","Place the widget in the top right corner of the given Widget with the given margin between both edges.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"top_right_with_margins_on","","Place the widget in the top right corner of the given Widget with the given margins between each respective edge.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"bottom_left_of","","Place the widget in the bottom left corner of the given Widget.",289,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"bottom_left_with_margin_on","","Place the widget in the bottom left corner of the given Widget with the given margin between both edges.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"bottom_left_with_margins_on","","Place the widget in the bottom left corner of the given Widget with the given margins between each respective edge.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"bottom_right_of","","Place the widget in the bottom right corner of the given Widget.",289,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"bottom_right_with_margin_on","","Place the widget in the bottom right corner of the given Widget with the given margin between both edges.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"bottom_right_with_margins_on","","Place the widget in the bottom right corner of the given Widget with the given margins between each respective edge.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"mid_top_of","","Place the widget in the middle of the top edge of the given Widget.",289,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"mid_top_with_margin_on","","Place the widget in the middle of the top edge of the given Widget with the given margin between the edges.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"mid_bottom_of","","Place the widget in the middle of the bottom edge of the given Widget.",289,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"mid_bottom_with_margin_on","","Place the widget in the middle of the bottom edge of the given Widget with the given margin between the edges.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"mid_left_of","","Place the widget in the middle of the left edge of the given Widget.",289,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"mid_left_with_margin_on","","Place the widget in the middle of the left edge of the given Widget with the given margin between the edges.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"mid_right_of","","Place the widget in the middle of the right edge of the given Widget.",289,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"mid_right_with_margin_on","","Place the widget in the middle of the right edge of the given Widget with the given margin between the edges.",289,{"i":[{"n":"self"},{"n":"id"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"x_place","","Place the widget at some position on the Widget along the x axis.",289,{"i":[{"n":"self"},{"n":"place"}],"o":{"n":"self"}}],[11,"y_place","","Place the widget at some position on the Widget along the y axis.",289,{"i":[{"n":"self"},{"n":"place"}],"o":{"n":"self"}}],[11,"middle","","Place the widget in the middle of the current parent Widget.",289,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"top_left","","Place the widget in the top left corner of the current parent Widget.",289,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"top_left_with_margin","","Place the widget in the top left corner of the current parent Widget with the given margin between both edges.",289,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"top_left_with_margins","","Place the widget in the top left corner of the current parent Widget with the given margins between each respective edge.",289,{"i":[{"n":"self"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"top_right","","Place the widget in the top right corner of the current parent Widget.",289,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"top_right_with_margin","","Place the widget in the top right corner of the current parent Widget with the given margin between both edges.",289,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"top_right_with_margins","","Place the widget in the top right corner of the current parent Widget with the given margins between each respective edge.",289,{"i":[{"n":"self"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"bottom_left","","Place the widget in the bottom left corner of the current parent Widget.",289,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"bottom_left_with_margin","","Place the widget in the bottom left corner of the current parent Widget with the given margin between both edges.",289,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"bottom_left_with_margins","","Place the widget in the bottom left corner of the current parent Widget with the given margins between each respective edge.",289,{"i":[{"n":"self"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"bottom_right","","Place the widget in the bottom right corner of the current parent Widget.",289,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"bottom_right_with_margin","","Place the widget in the bottom right corner of the current parent Widget with the given margin between both edges.",289,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"bottom_right_with_margins","","Place the widget in the bottom right corner of the current parent Widget with the given margins between each respective edge.",289,{"i":[{"n":"self"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"mid_top","","Place the widget in the middle of the top edge of the current parent Widget.",289,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"mid_top_with_margin","","Place the widget in the middle of the top edge of the current parent Widget with the given margin from the edge.",289,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"mid_bottom","","Place the widget in the middle of the bottom edge of the current parent Widget.",289,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"mid_bottom_with_margin","","Place the widget in the middle of the bottom edge of the current parent Widget with the given margin from the edge.",289,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"mid_left","","Place the widget in the middle of the left edge of the current parent Widget.",289,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"mid_left_with_margin","","Place the widget in the middle of the left edge of the current parent Widget with the given margin from the edge.",289,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"mid_right","","Place the widget in the middle of the right edge of the current parent Widget.",289,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"mid_right_with_margin","","Place the widget in the middle of the right edge of the current parent Widget with the given margin from the edge.",289,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[10,"depth","","The depth at which the widget should be rendered relatively to its sibling widgets.",289,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"self"}}],[10,"get_depth","","Return the depth.",289,{"i":[{"n":"self"}],"o":{"n":"depth"}}],[8,"Sizeable","","Widgets that support different dimensions.",null,null],[10,"x_dimension","","Set the length along the x axis.",290,{"i":[{"n":"self"},{"n":"dimension"}],"o":{"n":"self"}}],[10,"y_dimension","","Set the length along the y axis.",290,{"i":[{"n":"self"},{"n":"dimension"}],"o":{"n":"self"}}],[10,"get_x_dimension","","The widget's length along the x axis as a Dimension.",290,{"i":[{"n":"self"},{"n":"ui"}],"o":{"n":"dimension"}}],[10,"get_y_dimension","","The widget's length along the y axis as a Dimension.",290,{"i":[{"n":"self"},{"n":"ui"}],"o":{"n":"dimension"}}],[11,"w","","Set the absolute width for the widget.",290,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"h","","Set the absolute height for the widget.",290,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"wh","","Set the dimensions for the widget.",290,{"i":[{"n":"self"},{"n":"dimensions"}],"o":{"n":"self"}}],[11,"w_h","","Set the width and height for the widget.",290,{"i":[{"n":"self"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"w_of","","Set the width as the width of the widget at the given index.",290,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"padded_w_of","","Set the width as the width of the widget at the given index padded at both ends by the given Scalar.",290,{"i":[{"n":"self"},{"n":"id"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"h_of","","Set the height as the height of the widget at the given index.",290,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"padded_h_of","","Set the height as the height of the widget at the given index padded at both ends by the given Scalar.",290,{"i":[{"n":"self"},{"n":"id"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"wh_of","","Set the dimensions as the dimensions of the widget at the given index.",290,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"padded_wh_of","","Set the dimensions as the dimensions of the widget at the given index with all four edges padded by the given scalar.",290,{"i":[{"n":"self"},{"n":"id"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"kid_area_w_of","","Set the width as the width of the padded area of the widget at the given index.",290,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"padded_kid_area_w_of","","Set the width as the `KidArea` width for the widget at the given index, padded at both ends by the given scalar.",290,{"i":[{"n":"self"},{"n":"id"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"kid_area_h_of","","Set the height as the `KidArea` height of the widget at the given index.",290,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"padded_kid_area_h_of","","Set the height as the `KidArea` height of the widget at the given index, padded at both ends by the given scalar.",290,{"i":[{"n":"self"},{"n":"id"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"kid_area_wh_of","","Set the dimensions as the `KidArea` dimensions of the widget at the given index.",290,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"padded_kid_area_wh_of","","Set the dimensions as the `KidArea` dimensions of the widget at the given index, padded at all four edges by the given scalar.",290,{"i":[{"n":"self"},{"n":"id"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"get_w","","Get the absolute width of the widget as a Scalar value.",290,{"i":[{"n":"self"},{"n":"ui"}],"o":{"g":["scalar"],"n":"option"}}],[11,"get_h","","Get the height of the widget.",290,{"i":[{"n":"self"},{"n":"ui"}],"o":{"g":["scalar"],"n":"option"}}],[11,"get_wh","","The dimensions for the widget.",290,{"i":[{"n":"self"},{"n":"ui"}],"o":{"g":["dimensions"],"n":"option"}}],[11,"clone","","",278,{"i":[{"n":"self"}],"o":{"n":"axis"}}],[11,"fmt","","",278,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",278,{"i":[{"n":"self"},{"n":"axis"}],"o":{"n":"bool"}}],[11,"clone","","",279,{"i":[{"n":"self"}],"o":{"n":"position"}}],[11,"fmt","","",279,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",279,{"i":[{"n":"self"},{"n":"position"}],"o":{"n":"bool"}}],[11,"ne","","",279,{"i":[{"n":"self"},{"n":"position"}],"o":{"n":"bool"}}],[11,"clone","","",280,{"i":[{"n":"self"}],"o":{"n":"relative"}}],[11,"fmt","","",280,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",280,{"i":[{"n":"self"},{"n":"relative"}],"o":{"n":"bool"}}],[11,"ne","","",280,{"i":[{"n":"self"},{"n":"relative"}],"o":{"n":"bool"}}],[11,"clone","","",281,{"i":[{"n":"self"}],"o":{"n":"direction"}}],[11,"fmt","","",281,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",281,{"i":[{"n":"self"},{"n":"direction"}],"o":{"n":"bool"}}],[11,"clone","","",282,{"i":[{"n":"self"}],"o":{"n":"align"}}],[11,"fmt","","",282,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",282,{"i":[{"n":"self"},{"n":"align"}],"o":{"n":"bool"}}],[11,"clone","","",283,{"i":[{"n":"self"}],"o":{"n":"place"}}],[11,"fmt","","",283,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",283,{"i":[{"n":"self"},{"n":"place"}],"o":{"n":"bool"}}],[11,"ne","","",283,{"i":[{"n":"self"},{"n":"place"}],"o":{"n":"bool"}}],[11,"clone","","",284,{"i":[{"n":"self"}],"o":{"n":"dimension"}}],[11,"fmt","","",284,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",284,{"i":[{"n":"self"},{"n":"dimension"}],"o":{"n":"bool"}}],[11,"ne","","",284,{"i":[{"n":"self"},{"n":"dimension"}],"o":{"n":"bool"}}],[11,"clone","","",277,{"i":[{"n":"self"}],"o":{"n":"padding"}}],[11,"fmt","","",277,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",277,{"i":[{"n":"self"},{"n":"padding"}],"o":{"n":"bool"}}],[11,"ne","","",277,{"i":[{"n":"self"},{"n":"padding"}],"o":{"n":"bool"}}],[11,"none","","No padding.",277,{"o":{"n":"padding"}}],[0,"render","conrod","Conrod's generic graphics backend.",null,null],[3,"Primitives","conrod::render","An iterator-like type that yields a reference to each primitive in order of depth for rendering.",null,null],[3,"OwnedPrimitives","","An owned alternative to the `Primitives` type.",null,null],[3,"Primitive","","Data required for rendering a single primitive widget.",null,null],[12,"id","","The id of the widget within the widget graph.",291,null],[12,"kind","","State and style for this primitive widget.",291,null],[12,"scizzor","","The Rect to which the primitive widget should be cropped.",291,null],[12,"rect","","The bounding rectangle for the `Primitive`.",291,null],[3,"Text","","A type used for producing a `PositionedGlyph` iterator.",null,null],[3,"WalkOwnedPrimitives","","An iterator-like type for yielding `Primitive`s from an `OwnedPrimitives`.",null,null],[4,"PrimitiveKind","","The unique kind for each primitive element in the Ui.",null,null],[13,"Rectangle","","A filled `Rectangle`.",292,null],[12,"color","conrod::render::PrimitiveKind","The fill colour for the rectangle. ",292,null],[13,"TrianglesSingleColor","conrod::render","A series of consecutive `Triangles` that are all the same color.",292,null],[12,"color","conrod::render::PrimitiveKind","The color of all triangles.",292,null],[12,"triangles","","An ordered slice of triangles.",292,null],[13,"TrianglesMultiColor","conrod::render","A series of consecutive `Triangles` with unique colors per vertex.",292,null],[12,"triangles","conrod::render::PrimitiveKind","An ordered slice of multicolored triangles.",292,null],[13,"Image","conrod::render","A single `Image`, produced by the primitive `Image` widget.",292,null],[12,"image_id","conrod::render::PrimitiveKind","The unique identifier of the image that will be drawn.",292,null],[12,"color","","When `Some`, colours the `Image`. When `None`, the `Image` uses its regular colours.",292,null],[12,"source_rect","","The area of the texture that will be drawn to the `Image`'s `Rect`.",292,null],[13,"Text","conrod::render","A single block of `Text`, produced by the primitive `Text` widget.",292,null],[12,"color","conrod::render::PrimitiveKind","The colour of the `Text`.",292,null],[12,"text","","All glyphs within the `Text` laid out in their correct positions in order from top-left to bottom right.",292,null],[12,"font_id","","The unique identifier for the font, useful for the `glyph_cache.rect_for(id, glyph)` method when using the `conrod::text::GlyphCache` (rusttype's GPU `Cache`).",292,null],[13,"Other","conrod::render","An `Other` variant will be yielded for every non-primitive widget in the list.",292,null],[8,"PrimitiveWalker","","A trait that allows the user to remain generic over types yielding `Primitive`s.",null,null],[10,"next_primitive","","Yield the next `Primitive` in order of depth, bottom to top.",293,{"i":[{"n":"self"}],"o":{"g":["primitive"],"n":"option"}}],[11,"clone","","",294,{"i":[{"n":"self"}],"o":{"n":"ownedprimitives"}}],[11,"next_primitive","","",295,{"i":[{"n":"self"}],"o":{"g":["primitive"],"n":"option"}}],[11,"next_primitive","","",296,{"i":[{"n":"self"}],"o":{"g":["primitive"],"n":"option"}}],[11,"positioned_glyphs","","Produces a list of `PositionedGlyph`s which may be used to cache and render the text.",297,null],[11,"new","","Constructor for the `Primitives` iterator.",295,null],[11,"next","","Yield the next `Primitive` for rendering.",295,{"i":[{"n":"self"}],"o":{"g":["primitive"],"n":"option"}}],[11,"owned","","Collect the `Primitives` list into an owned collection.",295,{"i":[{"n":"self"}],"o":{"n":"ownedprimitives"}}],[11,"walk","","Produce an iterator-like type for yielding `Primitive`s.",294,{"i":[{"n":"self"}],"o":{"n":"walkownedprimitives"}}],[11,"next","","Yield the next `Primitive` in order or rendering depth, bottom to top.",296,{"i":[{"n":"self"}],"o":{"g":["primitive"],"n":"option"}}],[0,"text","conrod","Text layout logic.",null,null],[3,"Glyph","conrod::text","A single glyph of a font. this may either be a thin wrapper referring to the font and the glyph id, or it may be a standalone glyph that owns the data needed by it.",null,null],[3,"GlyphId","","Represents a glyph identifier for a particular font. This identifier will not necessarily correspond to the correct glyph in a font other than the one that it was obtained from.",null,null],[12,"0","","",298,null],[3,"GlyphIter","","",null,null],[3,"LayoutIter","","",null,null],[3,"Scale","","Defines the size of a rendered face of a font, in pixels, horizontally and vertically. A vertical scale of `y` pixels means that the distance betwen the ascent and descent lines (see `VMetrics`) of the face will be `y` pixels. If `x` and `y` are equal the scaling is uniform. Non-uniform scaling by a factor f in the horizontal direction is achieved by setting `x` equal to f times `y`.",null,null],[12,"x","","Horizontal scale, in pixels.",299,null],[12,"y","","Vertical scale, in pixels.",299,null],[3,"GlyphCache","","An implementation of a dynamic GPU glyph cache. See the module documentation for more information.",null,null],[3,"Lines","","An iterator yielding each line within the given `text` as a new `&str`, where the start and end indices into each line are provided by the given iterator.",null,null],[4,"Justify","","A type used for referring to typographic alignment of `Text`.",null,null],[13,"Left","","Align text to the start of the bounding `Rect`'s x axis.",300,null],[13,"Center","","Symmetrically align text along the y axis.",300,null],[13,"Right","","Align text to the end of the bounding `Rect`'s x axis.",300,null],[5,"height","","Determine the total height of a block of text with the given number of lines, font size and `line_spacing` (the space that separates each line of text).",null,{"i":[{"n":"usize"},{"n":"fontsize"},{"n":"scalar"}],"o":{"n":"scalar"}}],[5,"lines","","Produce an iterator yielding each line within the given `text` as a new `&str`, where the start and end indices into each line are provided by the given iterator.",null,{"i":[{"n":"str"},{"n":"i"}],"o":{"n":"lines"}}],[5,"pt_to_px","","Converts the given font size in \"points\" to its font size in pixels.",null,{"i":[{"n":"fontsize"}],"o":{"n":"f32"}}],[5,"pt_to_scale","","Converts the given font size in \"points\" to a uniform `rusttype::Scale`.",null,{"i":[{"n":"fontsize"}],"o":{"n":"scale"}}],[0,"rt","","Re-exported RustType geometrical types.",null,null],[3,"Point","conrod::text::rt","A point in 2-dimensional space, with each dimension of type `N`.",null,null],[12,"x","","",301,null],[12,"y","","",301,null],[3,"Rect","","A rectangle, with top-left corner at `min`, and bottom-right corner at `max`.",null,null],[12,"min","","",302,null],[12,"max","","",302,null],[3,"Vector","","A vector in 2-dimensional space, with each dimension of type `N`.",null,null],[12,"x","","",303,null],[12,"y","","",303,null],[5,"point","","A convenience function for generating `Point`s.",null,{"i":[{"n":"n"},{"n":"n"}],"o":{"n":"point"}}],[5,"vector","","A convenience function for generating `Vector`s.",null,{"i":[{"n":"n"},{"n":"n"}],"o":{"n":"vector"}}],[0,"font","conrod::text","The `font::Id` and `font::Map` types.",null,null],[3,"Id","conrod::text::font","A type-safe wrapper around the `FontId`.",null,null],[3,"Map","","A collection of mappings from `font::Id`s to `rusttype::Font`s.",null,null],[3,"NewIds","","An iterator yielding an `Id` for each new `rusttype::Font` inserted into the `Map` via the `insert_collection` method.",null,null],[3,"Ids","","Yields the `Id` for each `Font` within the `Map`.",null,null],[4,"Error","","Returned when loading new fonts from file or bytes.",null,null],[13,"IO","","Some error occurred while loading a `FontCollection` from a file.",304,null],[13,"NoFont","","No `Font`s could be yielded from the `FontCollection`.",304,null],[5,"collection_from_file","","Load a `super::FontCollection` from a file at a given path.",null,{"i":[{"n":"p"}],"o":{"g":["fontcollection","error"],"n":"result"}}],[5,"from_file","","Load a single `Font` from a file at the given path.",null,{"i":[{"n":"p"}],"o":{"g":["font","error"],"n":"result"}}],[11,"clone","","",305,{"i":[{"n":"self"}],"o":{"n":"id"}}],[11,"fmt","","",305,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",305,null],[11,"eq","","",305,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"bool"}}],[11,"ne","","",305,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",305,{"i":[{"n":"self"},{"n":"id"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",305,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"bool"}}],[11,"le","","",305,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"bool"}}],[11,"gt","","",305,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"bool"}}],[11,"ge","","",305,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"bool"}}],[11,"cmp","","",305,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"ordering"}}],[11,"clone","","",306,{"i":[{"n":"self"}],"o":{"n":"ids"}}],[11,"fmt","","",304,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"index","","Returns the inner `usize` from the `Id`.",305,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"new","","Construct the new, empty `Map`.",307,{"o":{"n":"self"}}],[11,"get","","Borrow the `rusttype::Font` associated with the given `font::Id`.",307,{"i":[{"n":"self"},{"n":"id"}],"o":{"g":["font"],"n":"option"}}],[11,"insert","","Adds the given `rusttype::Font` to the `Map` and returns a unique `Id` for it.",307,{"i":[{"n":"self"},{"n":"font"}],"o":{"n":"id"}}],[11,"insert_from_file","","Insert a single `Font` into the map by loading it from the given file path.",307,{"i":[{"n":"self"},{"n":"p"}],"o":{"g":["id","error"],"n":"result"}}],[11,"ids","","Produces an iterator yielding the `Id` for each `Font` within the `Map`.",307,{"i":[{"n":"self"}],"o":{"n":"ids"}}],[11,"next","","",308,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",306,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"from","","",304,{"i":[{"n":"error"}],"o":{"n":"self"}}],[11,"description","","",304,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",304,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[0,"glyph","conrod::text","Logic and types specific to individual glyph layout.",null,null],[3,"Rects","conrod::text::glyph","An iterator yielding the `Rect` for each `char`'s `Glyph` in the given `text`.",null,null],[3,"RectsPerLine","","An iterator that, for every `(line, line_rect)` pair yielded by the given iterator, produces an iterator that yields a `Rect` for every character in that line.",null,null],[3,"SelectedRectsPerLine","","Yields an iteraor yielding `Rect`s for each selected character in each line of text within the given iterator yielding char `Rect`s.",null,null],[3,"SelectedRects","","Yields a `Rect` for each selected character in a single line of text.",null,null],[5,"index_after_cursor","","Find the index of the character that directly follows the cursor at the given `cursor_idx`.",null,{"i":[{"n":"i"},{"n":"index"}],"o":{"g":["usize"],"n":"option"}}],[5,"rects_per_line","","Produce an iterator that, for every `(line, line_rect)` pair yielded by the given iterator, produces an iterator that yields a `Rect` for every character in that line.",null,{"i":[{"n":"i"},{"n":"font"},{"n":"fontsize"}],"o":{"n":"rectsperline"}}],[5,"selected_rects_per_line","","Produces an iterator that yields iteraors yielding `Rect`s for each selected character in each line of text within the given iterator yielding char `Rect`s.",null,{"i":[{"n":"i"},{"n":"font"},{"n":"fontsize"},{"n":"index"},{"n":"index"}],"o":{"n":"selectedrectsperline"}}],[6,"X","","Some position along the X axis (used within `CharXs`).",null,null],[6,"HalfW","","The half of the width of some character (used within `CharXs`).",null,null],[11,"next","","",309,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",310,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",311,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",312,{"i":[{"n":"self"}],"o":{"n":"option"}}],[0,"cursor","conrod::text","Logic related to the positioning of the cursor within text.",null,null],[3,"XysPerLine","conrod::text::cursor","Every possible cursor position within each line of text yielded by the given iterator.",null,null],[3,"XysPerLineFromText","","Similarly to `XysPerLine`, yields every possible cursor position within each line of text yielded by the given iterator.",null,null],[3,"Xs","","Each possible cursor position along the x axis within a line of text.",null,null],[3,"Index","","An index representing the position of a cursor within some text.",null,null],[12,"line","","The index of the line upon which the cursor is situated.",313,null],[12,"char","","The index within all possible cursor positions for the line.",313,null],[5,"xys_per_line","","Every possible cursor position within each line of text yielded by the given iterator.",null,{"i":[{"n":"i"},{"n":"font"},{"n":"str"},{"n":"fontsize"}],"o":{"n":"xysperline"}}],[5,"xys_per_line_from_text","","Similarly to `xys_per_line`, this produces an iterator yielding every possible cursor position within each line of text yielded by the given iterator.",null,null],[5,"index_before_char","","Convert the given character index into a cursor `Index`.",null,{"i":[{"n":"i"},{"n":"usize"}],"o":{"g":["index"],"n":"option"}}],[5,"xy_at","","Determine the xy location of the cursor at the given cursor `Index`.",null,{"i":[{"n":"i"},{"n":"index"}],"o":{"n":"option"}}],[5,"closest_line","","Find the closest line for the given `y` position, and return the line index, Xs iterator, and y-range of that line",null,{"i":[{"n":"scalar"},{"n":"i"}],"o":{"n":"option"}}],[5,"closest_cursor_index_and_xy","","Find the closest cursor index to the given `xy` position, and the center `Point` of that cursor.",null,{"i":[{"n":"point"},{"n":"i"}],"o":{"n":"option"}}],[5,"closest_cursor_index_on_line","","Find the closest cursor index to the given `x` position on the given line along with the `x` position of that cursor.",null,null],[11,"clone","","",314,{"i":[{"n":"self"}],"o":{"n":"xysperline"}}],[11,"clone","","",315,{"i":[{"n":"self"}],"o":{"n":"xysperlinefromtext"}}],[11,"clone","","",313,{"i":[{"n":"self"}],"o":{"n":"index"}}],[11,"fmt","","",313,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",313,{"i":[{"n":"self"},{"n":"index"}],"o":{"n":"bool"}}],[11,"ne","","",313,{"i":[{"n":"self"},{"n":"index"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",313,{"i":[{"n":"self"},{"n":"index"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",313,{"i":[{"n":"self"},{"n":"index"}],"o":{"n":"bool"}}],[11,"le","","",313,{"i":[{"n":"self"},{"n":"index"}],"o":{"n":"bool"}}],[11,"gt","","",313,{"i":[{"n":"self"},{"n":"index"}],"o":{"n":"bool"}}],[11,"ge","","",313,{"i":[{"n":"self"},{"n":"index"}],"o":{"n":"bool"}}],[11,"cmp","","",313,{"i":[{"n":"self"},{"n":"index"}],"o":{"n":"ordering"}}],[11,"previous_word_start","","The cursor index of the beginning of the word (block of non-whitespace) before `self`.",313,{"i":[{"n":"self"},{"n":"str"},{"n":"i"}],"o":{"n":"option"}}],[11,"next_word_end","","The cursor index of the end of the first word (block of non-whitespace) after `self`.",313,{"i":[{"n":"self"},{"n":"str"},{"n":"i"}],"o":{"n":"option"}}],[11,"previous","","The cursor index that comes before `self`.",313,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"option"}}],[11,"next","","The cursor index that follows `self`.",313,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"option"}}],[11,"clamp_to_lines","","Clamps `self` to the given lines.",313,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"self"}}],[11,"next","","",314,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",315,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",316,{"i":[{"n":"self"}],"o":{"n":"option"}}],[0,"line","conrod::text","Text handling logic related to individual lines of text.",null,null],[3,"Info","conrod::text::line","Information about a single line of text within a `&str`.",null,null],[12,"start_byte","","The index into the `&str` that represents the first character within the line.",317,null],[12,"start_char","","The character index of the first character in the line.",317,null],[12,"end_break","","The index within the `&str` at which this line breaks into a new line, along with the index at which the following line begins. The variant describes whether the break is caused by a `Newline` character or a `Wrap` by the given wrap function.",317,null],[12,"width","","The total width of all characters within the line.",317,null],[3,"Infos","","An iterator yielding an `Info` struct for each line in the given `text` wrapped by the given `next_break_fn`.",null,null],[3,"Rects","","An iterator yielding a `Rect` for each line in ",null,null],[3,"SelectedRects","","An iterator yielding a `Rect` for each selected line in a block of text.",null,null],[4,"Break","","The two types of Break indices returned by the WrapIndicesBy iterators.",null,null],[13,"Wrap","","A break caused by the text exceeding some maximum width.",318,null],[12,"byte","conrod::text::line::Break","The byte index at which the break occurs.",318,null],[12,"char","","The char index at which the string should wrap due to exceeding a maximum width.",318,null],[12,"len_bytes","","The byte length which should be skipped in order to reach the first non-whitespace character to use as the beginning of the next line.",318,null],[13,"Newline","conrod::text::line","A break caused by a newline character.",318,null],[12,"byte","conrod::text::line::Break","The byte index at which the string should wrap due to exceeding a maximum width.",318,null],[12,"char","","The char index at which the string should wrap due to exceeding a maximum width.",318,null],[12,"len_bytes","","The width of the \"newline\" token in bytes.",318,null],[13,"End","conrod::text::line","The end of the string has been reached, with the given length.",318,null],[12,"byte","conrod::text::line::Break","The ending byte index.",318,null],[12,"char","","The ending char index.",318,null],[5,"width","conrod::text::line","Produce the width of the given line of text including spaces (i.e. ' ').",null,{"i":[{"n":"str"},{"n":"font"},{"n":"fontsize"}],"o":{"n":"scalar"}}],[5,"infos_wrapped_by","","Produce an `Infos` iterator wrapped by the given `next_break_fn`.",null,{"i":[{"n":"str"},{"n":"font"},{"n":"fontsize"},{"n":"scalar"},{"n":"f"}],"o":{"n":"infos"}}],[5,"infos","","Produce an `Infos` iterator that yields an `Info` for every line in the given text.",null,{"i":[{"n":"str"},{"n":"font"},{"n":"fontsize"}],"o":{"g":["nextbreakfnptr"],"n":"infos"}}],[5,"rects","","Produce an iterator yielding the bounding `Rect` for each line in the text.",null,{"i":[{"n":"i"},{"n":"fontsize"},{"n":"rect"},{"n":"justify"},{"n":"align"},{"n":"scalar"}],"o":{"n":"rects"}}],[5,"selected_rects","","Produces an iterator yielding a `Rect` for the selected range in each selected line in a block of text.",null,{"i":[{"n":"i"},{"n":"font"},{"n":"fontsize"},{"n":"index"},{"n":"index"}],"o":{"n":"selectedrects"}}],[6,"NextBreakFnPtr","","An alias for function pointers that are compatible with the `Block`'s required text wrapping function.",null,null],[11,"clone","","",318,{"i":[{"n":"self"}],"o":{"n":"break"}}],[11,"fmt","","",318,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",318,{"i":[{"n":"self"},{"n":"break"}],"o":{"n":"bool"}}],[11,"ne","","",318,{"i":[{"n":"self"},{"n":"break"}],"o":{"n":"bool"}}],[11,"clone","","",317,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"fmt","","",317,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",317,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"ne","","",317,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"clone","","",319,{"i":[{"n":"self"}],"o":{"n":"rects"}}],[11,"byte_index","","Return the index at which the break occurs.",318,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"char_index","","Return the index of the `char` at which the break occurs.",318,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",320,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"end_byte","","The end of the byte index range for indexing into the slice.",317,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"end_char","","The end of the index range for indexing into the slice.",317,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"byte_range","","The index range for indexing (via bytes) into the original str slice.",317,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"range"}}],[11,"char_range","","The index range for indexing into a `char` iterator over the original str slice.",317,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"range"}}],[11,"wrap_by_character","","Converts `Self` into an `Infos` whose lines are wrapped at the character that first causes the line width to exceed the given `max_width`.",320,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"wrap_by_whitespace","","Converts `Self` into an `Infos` whose lines are wrapped at the whitespace prior to the character that causes the line width to exceed the given `max_width`.",320,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"next","","",320,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",319,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",321,{"i":[{"n":"self"}],"o":{"n":"option"}}],[6,"FontCollection","conrod::text","The RustType `FontCollection` type used by conrod.",null,null],[6,"Font","","The RustType `Font` type used by conrod.",null,null],[6,"PositionedGlyph","","The RustType `PositionedGlyph` type used by conrod.",null,null],[11,"clone","","",322,{"i":[{"n":"self"}],"o":{"n":"lines"}}],[11,"clone","","",300,{"i":[{"n":"self"}],"o":{"n":"justify"}}],[11,"fmt","","",300,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",300,{"i":[{"n":"self"},{"n":"justify"}],"o":{"n":"bool"}}],[11,"next","","",322,{"i":[{"n":"self"}],"o":{"n":"option"}}],[0,"theme","conrod","Types a functionality for handling Canvas and Widget theming.",null,null],[3,"Theme","conrod::theme","A serializable collection of canvas and widget styling defaults.",null,null],[12,"name","","A name for the theme used for identification.",323,null],[12,"padding","","Padding for Canvas layout and positioning.",323,null],[12,"x_position","","A default widget position along the x axis.",323,null],[12,"y_position","","A default widget position along the y axis.",323,null],[12,"background_color","","A default background for the theme.",323,null],[12,"shape_color","","A default color for widget shapes.",323,null],[12,"border_color","","A default color for widget borders.",323,null],[12,"border_width","","A default width for widget borders.",323,null],[12,"label_color","","A default color for widget labels.",323,null],[12,"font_id","","The `Id` of the default font used for text widgets when one is not specified.",323,null],[12,"font_size_large","","A default \"large\" font size.",323,null],[12,"font_size_medium","","A default \"medium\" font size.",323,null],[12,"font_size_small","","A default \"small\" font size.",323,null],[12,"widget_styling","","`StyleMap` for unique styling of each widget, index-able by the Widget::kind.",323,null],[12,"mouse_drag_threshold","","Mouse Drag distance threshold determines the minimum distance from the mouse-down point that the mouse must move before starting a drag operation.",323,null],[12,"double_click_threshold","","Once the `Duration` that separates two consecutive `Click`s is greater than this value, a `DoubleClick` event will no longer be generated.",323,null],[3,"WidgetDefault","","The defaults for a specific widget.",null,null],[12,"style","","The unique style of a widget.",324,null],[12,"common","","The attributes commonly shared between widgets.",324,null],[3,"UniqueDefault","","A WidgetDefault downcast to a Widget's unique Style type.",null,null],[12,"style","","The unique style for the widget.",325,null],[12,"common","","Attributes that are common to all widgets.",325,null],[6,"StyleMap","","`std::collections::HashMap` with `fnv::FnvHasher` for unique styling of each widget, index-able by the Widget::kind.",null,null],[11,"clone","","",325,{"i":[{"n":"self"}],"o":{"n":"uniquedefault"}}],[11,"fmt","","",325,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Constructor for a WidgetDefault.",324,{"i":[{"g":["any"],"n":"box"}],"o":{"n":"widgetdefault"}}],[11,"default","","The default theme if not loading from file.",323,{"o":{"n":"theme"}}],[11,"widget_style","","Retrieve the unique default styling for a widget.",323,{"i":[{"n":"self"}],"o":{"g":["uniquedefault"],"n":"option"}}],[11,"new","conrod","Begin building a new `Ui` instance.",1,{"i":[{"n":"dimensions"}],"o":{"n":"self"}}],[11,"theme","","The theme used to set default styling for widgets.",1,{"i":[{"n":"self"},{"n":"theme"}],"o":{"n":"self"}}],[11,"widgets_capacity","","An estimation of the maximum number of widgets that will be used with this `Ui` instance.",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"build","","Build Ui from the given builder",1,{"i":[{"n":"self"}],"o":{"n":"ui"}}],[11,"widget_input","","Returns a `input::Widget` for the given widget",0,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"widget"}}],[11,"rect_of","","The Rect for the widget at the given index.",0,{"i":[{"n":"self"},{"n":"id"}],"o":{"g":["rect"],"n":"option"}}],[11,"w_of","","The absolute width of the widget at the given index.",0,{"i":[{"n":"self"},{"n":"id"}],"o":{"g":["scalar"],"n":"option"}}],[11,"h_of","","The absolute height of the widget at the given index.",0,{"i":[{"n":"self"},{"n":"id"}],"o":{"g":["scalar"],"n":"option"}}],[11,"wh_of","","The absolute dimensions for the widget at the given index.",0,{"i":[{"n":"self"},{"n":"id"}],"o":{"g":["dimensions"],"n":"option"}}],[11,"xy_of","","The coordinates for the widget at the given index.",0,{"i":[{"n":"self"},{"n":"id"}],"o":{"g":["point"],"n":"option"}}],[11,"kid_area_of","","The `kid_area` of the widget at the given index.",0,{"i":[{"n":"self"},{"n":"id"}],"o":{"g":["rect"],"n":"option"}}],[11,"maybe_prev_widget","","An index to the previously updated widget if there is one.",0,{"i":[{"n":"self"}],"o":{"g":["id"],"n":"option"}}],[11,"widget_graph","","Borrow the Ui's `widget_graph`.",0,{"i":[{"n":"self"}],"o":{"n":"graph"}}],[11,"updated_widgets","","Borrow the Ui's set of updated widgets.",0,{"i":[{"n":"self"}],"o":{"n":"fnvhashset"}}],[11,"prev_updated_widgets","","Borrow the Ui's set of updated widgets.",0,{"i":[{"n":"self"}],"o":{"n":"fnvhashset"}}],[11,"widget_id_generator","","Produces a type that may be used to generate new unique `widget::Id`s.",0,{"i":[{"n":"self"}],"o":{"n":"generator"}}],[11,"scroll_widget","","Scroll the widget at the given index by the given offset amount.",0,null],[11,"handle_event","","Handle raw window events and update the `Ui` state accordingly.",0,{"i":[{"n":"self"},{"n":"input"}]}],[11,"global_input","","Get an immutable reference to global input. Handles aggregation of events and providing them to Widgets",0,{"i":[{"n":"self"}],"o":{"n":"global"}}],[11,"calc_xy","","Get the centred xy coords for some given `Dimension`s, `Position` and alignment.",0,{"i":[{"n":"self"},{"g":["id"],"n":"option"},{"n":"position"},{"n":"position"},{"n":"dimensions"},{"n":"bool"}],"o":{"n":"point"}}],[11,"set_widgets","","A function within which all widgets are instantiated by the user, normally situated within the \"update\" stage of an event loop.",0,{"i":[{"n":"self"}],"o":{"n":"uicell"}}],[11,"set_num_redraw_frames","","Set the number of frames that the `Ui` should draw in the case that `needs_redraw` is called. The default is `3` (see the SAFE_REDRAW_COUNT docs for details).",0,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"needs_redraw","","Tells the `Ui` that it needs to re-draw everything. It does this by setting the redraw count to `num_redraw_frames`. See the docs for `set_num_redraw_frames`, SAFE_REDRAW_COUNT or `draw_if_changed` for more info on how/why the redraw count is used.",0,{"i":[{"n":"self"}]}],[11,"clear_with","","The first of the `Primitives` yielded by `Ui::draw` or `Ui::draw_if_changed` will always be a `Rectangle` the size of the window in which conrod is hosted.",0,{"i":[{"n":"self"},{"n":"color"}]}],[11,"draw","","Draw the `Ui` in it's current state.",0,{"i":[{"n":"self"}],"o":{"n":"primitives"}}],[11,"draw_if_changed","","Same as the `Ui::draw` method, but only draws if the `redraw_count` is greater than 0.",0,{"i":[{"n":"self"}],"o":{"g":["primitives"],"n":"option"}}],[11,"kids_bounding_box","","The Rect that bounds the kids of the widget with the given index.",0,{"i":[{"n":"self"},{"n":"id"}],"o":{"g":["rect"],"n":"option"}}],[11,"visible_area","","The Rect that represents the maximum fully visible area for the widget with the given index, including consideration of cropped scroll area.",0,{"i":[{"n":"self"},{"n":"id"}],"o":{"g":["rect"],"n":"option"}}],[11,"mouse_cursor","","Get mouse cursor state.",0,{"i":[{"n":"self"}],"o":{"n":"mousecursor"}}],[11,"theme","","A reference to the `Theme` that is currently active within the `Ui`.",326,{"i":[{"n":"self"}],"o":{"n":"theme"}}],[11,"font","","A convenience method for borrowing the `Font` for the given `Id` if it exists.",326,{"i":[{"n":"self"},{"n":"id"}],"o":{"g":["font"],"n":"option"}}],[11,"window_dim","","Returns the dimensions of the window",326,{"i":[{"n":"self"}],"o":{"n":"dimensions"}}],[11,"global_input","","Returns an immutable reference to the `input::Global` of the `Ui`.",326,{"i":[{"n":"self"}],"o":{"n":"global"}}],[11,"widget_input","","Returns a `input::Widget` with input events for the widget.",326,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"widget"}}],[11,"widget_id_generator","","Produces a type that may be used to generate new unique `widget::Id`s.",326,{"i":[{"n":"self"}],"o":{"n":"generator"}}],[11,"kids_bounding_box","","The Rect that bounds the kids of the widget with the given index.",326,{"i":[{"n":"self"},{"n":"id"}],"o":{"g":["rect"],"n":"option"}}],[11,"scroll_widget","","Scroll the widget at the given index by the given offset amount.",326,null],[11,"set_mouse_cursor","","Sets the mouse cursor",326,{"i":[{"n":"self"},{"n":"mousecursor"}]}],[11,"drop","","",326,{"i":[{"n":"self"}]}],[11,"deref","","",326,{"i":[{"n":"self"}],"o":{"n":"ui"}}],[11,"as_ref","","",326,{"i":[{"n":"self"}],"o":{"n":"ui"}}],[0,"utils","","Various utility functions used throughout Conrod.",null,null],[4,"IterDiff","conrod::utils","A type returned by the `iter_diff` function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with the iterator's remaining elements starting with the first mis-matched element.",327,null],[13,"Longer","","The remaining elements of the iterator.",327,null],[13,"Shorter","","The total number of elements that were in the iterator.",327,null],[5,"partial_min","","Compare to PartialOrd values and return the min.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"partial_max","","Compare to PartialOrd values and return the max.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"clamp","","Clamp a value between some range.",null,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"degrees","","Convert degrees to radians.",null,{"i":[{"n":"f"}],"o":{"n":"f"}}],[5,"fmod","","Modulo float.",null,{"i":[{"n":"f32"},{"n":"i32"}],"o":{"n":"f32"}}],[5,"modulo","","The modulo function.",null,{"i":[{"n":"i"},{"n":"i"}],"o":{"n":"i"}}],[5,"map_range","","Map a value from a given range to a new given range.",null,{"i":[{"n":"x"},{"n":"x"},{"n":"x"},{"n":"y"},{"n":"y"}],"o":{"n":"y"}}],[5,"percentage","","Get value percentage between max and min.",null,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"n":"f32"}}],[5,"turns","","Convert turns to radians.",null,{"i":[{"n":"f"}],"o":{"n":"f"}}],[5,"value_from_perc","","Adjust the value to the given percentage.",null,{"i":[{"n":"f32"},{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"val_to_string","","Get a suitable string from the value, its max and the pixel range.",null,{"i":[{"n":"t"},{"n":"t"},{"n":"t"},{"n":"usize"}],"o":{"n":"string"}}],[5,"vec2_add","","Add `a` and `b`.",null,null],[5,"vec2_sub","","Subtract `b` from `a`.",null,null],[5,"bounding_box_for_points","","Find the bounding rect for the given series of points.",null,{"i":[{"n":"i"}],"o":{"n":"rect"}}],[5,"iter_diff","","Compares every element yielded by both elems and new_elems in lock-step.",null,{"i":[{"n":"a"},{"n":"b"}],"o":{"g":["iterdiff"],"n":"option"}}],[5,"write_if_different","","Returns `Borrowed` `elems` if `elems` contains the same elements as yielded by `new_elems`.",null,null],[5,"iter_eq","","Compares two iterators to see if they yield the same thing.",null,{"i":[{"n":"a"},{"n":"b"}],"o":{"n":"bool"}}],[0,"widget","conrod","Widgets are the core building blocks for every conrod user interface.",null,null],[3,"UpdateArgs","conrod::widget","Arguments for the Widget::update method in a struct to simplify the method signature.",null,null],[12,"id","","The Widget's unique index.",328,null],[12,"maybe_parent_id","","The Widget's parent unique index, if there is one.",328,null],[12,"prev","","The Widget's previous state. Specifically, the state that is common between all widgets, such as positioning, floatability, draggability, etc.",328,null],[12,"state","","A wrapper around the Widget's unique state, providing methods for both immutably viewing and mutably updating the state.",328,null],[12,"rect","","The rectangle describing the Widget's area.",328,null],[12,"style","","The Widget's current Widget::Style.",328,null],[12,"ui","","Restricted access to the `Ui`.",328,null],[3,"KidAreaArgs","","Arguments to the Widget::kid_area method in a struct to simplify the method signature.",null,null],[12,"rect","","The Rect describing the Widget's position and dimensions.",329,null],[12,"style","","Current Widget::Style of the Widget.",329,null],[12,"theme","","The active Theme within the Ui.",329,null],[12,"fonts","","The Font (for determining text width).",329,null],[3,"KidArea","","The area upon which a Widget's child widgets will be placed.",null,null],[12,"rect","","The Rect bounds describing the position and area.",330,null],[12,"pad","","The distance between the edge of the area and where the widgets will be placed.",330,null],[3,"Floating","","State necessary for \"floating\" (pop-up style) widgets.",null,null],[12,"time_last_clicked","","The time the Widget was last clicked (used for depth sorting in the widget Graph).",331,null],[3,"CommonBuilder","","A struct containing builder data common to all Widget types.",null,null],[12,"style","","Styling and positioning data that is common between all widget types.",332,null],[12,"maybe_parent_id","","The parent widget of the Widget.",332,null],[12,"is_floating","","Whether or not the Widget is a \"floating\" Widget.",332,null],[12,"crop_kids","","Whether or not the children of this Widget should be cropped to its `kid_area`.",332,null],[12,"maybe_x_scroll","","Arguments to the scrolling of the widget's x axis.",332,null],[12,"maybe_y_scroll","","Arguments to the scrolling of the widget's y axis.",332,null],[12,"place_on_kid_area","","Whether or not the Widget should be placed on the kid_area.",332,null],[12,"maybe_graphics_for","","Describes whether or not the Widget is instantiated as a graphical element for some other Widget.",332,null],[3,"CommonStyle","","Styling and positioning data that is common between all widget types.",null,null],[12,"maybe_x_dimension","","The width of a Widget.",333,null],[12,"maybe_y_dimension","","The height of a Widget.",333,null],[12,"maybe_x_position","","The position of a Widget along the x axis.",333,null],[12,"maybe_y_position","","The position of a Widget along the y axis.",333,null],[12,"maybe_depth","","The rendering Depth of the Widget.",333,null],[3,"State","","A wrapper around a Widget's unique Widget::State.",null,null],[3,"CommonState","","A wrapper around state that is common to all Widget types.",null,null],[12,"rect","","The rectangle describing the `Widget`'s area.",334,null],[12,"depth","","The rendering depth for the Widget (the default is 0.0).",334,null],[12,"maybe_floating","","Floating state for the widget if it is floating.",334,null],[12,"kid_area","","The area of the widget upon which kid widgets are placed.",334,null],[12,"maybe_x_scroll_state","","If the widget is scrollable across the x axis.",334,null],[12,"maybe_y_scroll_state","","If the widget is scrollable across the y axis.",334,null],[3,"PreUpdateCache","","",null,null],[12,"type_id","","The Widget's unique type identifier.",335,null],[12,"id","","The Widget's unique Id.",335,null],[12,"maybe_parent_id","","The Widget's parent's unique index (if it has a parent).",335,null],[12,"maybe_x_positioned_relatively_id","","If this Widget is relatively positioned to another Widget, this will be the index of the Widget to which this Widget is relatively positioned along the x axis.",335,null],[12,"maybe_y_positioned_relatively_id","","If this Widget is relatively positioned to another Widget, this will be the index of the Widget to which this Widget is relatively positioned along the y axis.",335,null],[12,"rect","","The Rect describing the Widget's position and dimensions.",335,null],[12,"depth","","The z-axis depth - affects the render order of sibling widgets.",335,null],[12,"kid_area","","The area upon which the Widget's children widgets will be placed.",335,null],[12,"maybe_floating","","Floating data for the Widget if there is some.",335,null],[12,"crop_kids","","Whether or not the children of the Widget should be cropped to its `kid_area`.",335,null],[12,"maybe_x_scroll_state","","Scrolling data for the Widget's x axis if there is some.",335,null],[12,"maybe_y_scroll_state","","Scrolling data for the Widget's y axis if there is some.",335,null],[12,"maybe_graphics_for","","Whether or not the Widget has been instantiated as a graphical element for some other widget.",335,null],[12,"is_over","","A function describing whether or not a given point is over the widget.",335,null],[3,"PostUpdateCache","","",null,null],[12,"id","","The Widget's unique Id.",336,null],[12,"maybe_parent_id","","The Widget's parent's unique Id (if it has a parent).",336,null],[12,"state","","The newly produced unique Widget::State associated with the Widget.",336,null],[12,"style","","The newly produced unique Widget::Style associated with the Widget.",336,null],[4,"MaybeParent","","The builder argument for the Widget's parent.",null,null],[13,"None","","The user specified the widget should not have any parents, so the Root will be used.",337,null],[13,"Some","","The user gave a specific parent widget.",337,null],[13,"Unspecified","","No parent widget was specified, so we will assume they want the last parent.",337,null],[4,"IsOver","","Returned by the `Widget::is_over` method.",null,null],[13,"Bool","","Whether or not the point was over the widget.",338,null],[13,"Widget","","Check whether or not the point is over the widget at the given `Id` and if so, assume it is over this widget.",338,null],[5,"is_over_rect","","The default `IsOverFn` used if the `Widget::is_over` method is not overridden.",null,{"i":[{"n":"container"},{"n":"point"},{"n":"theme"}],"o":{"n":"isover"}}],[5,"default_x_dimension","","Determines the default Dimension for a Widget.",null,{"i":[{"n":"w"},{"n":"ui"}],"o":{"n":"dimension"}}],[5,"default_y_dimension","","Determines the default Dimension for a Widget.",null,{"i":[{"n":"w"},{"n":"ui"}],"o":{"n":"dimension"}}],[0,"id","","The widget identifier type used throughout conrod, along with helper types and macros to simplify the process of generating them.",null,null],[3,"Generator","conrod::widget::id","Used for generating new unique `widget::Id`s.",null,null],[3,"List","","A list of lazily generated `widget::Id`s.",null,null],[3,"ListWalk","","An iterator-like type for producing indices from a `List`.",null,null],[6,"Id","","Unique widget identifier.",null,null],[11,"clone","","",339,{"i":[{"n":"self"}],"o":{"n":"list"}}],[11,"fmt","","",339,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",339,{"i":[{"n":"self"},{"n":"list"}],"o":{"n":"bool"}}],[11,"ne","","",339,{"i":[{"n":"self"},{"n":"list"}],"o":{"n":"bool"}}],[11,"new","","Constructor for a new `widget::Id` generator.",340,{"i":[{"n":"graph"}],"o":{"n":"self"}}],[11,"next","","Generate a new, unique `widget::Id` into a Placeholder node within the widget graph. This should only be called once for each unique widget needed to avoid unnecessary bloat within the `Ui`'s widget graph.",340,{"i":[{"n":"self"}],"o":{"n":"id"}}],[11,"new","","Construct a cache for multiple indices.",339,{"o":{"n":"self"}}],[11,"walk","","Produce a walker for producing the `List`'s indices.",339,{"i":[{"n":"self"}],"o":{"n":"listwalk"}}],[11,"resize","","Resizes the `List`'s inner `Vec` to the given target length, using the given `UiCell` to generate new unique `widget::Id`s if necessary.",339,{"i":[{"n":"self"},{"n":"usize"},{"n":"generator"}]}],[11,"deref","","",339,null],[11,"next","","Yield the next index, generating one if it does not yet exist.",341,{"i":[{"n":"self"},{"n":"list"},{"n":"generator"}],"o":{"n":"id"}}],[0,"scroll","conrod::widget","Scroll related types and logic.",null,null],[3,"Scroll","conrod::widget::scroll","Arguments given via a scrollable `Widget`'s builder methods for the scrolling along a single axis.",null,null],[3,"State","","Scroll state calculated for a single axis.",null,null],[12,"offset","","The distance that has been scrolled from the origin.",342,null],[12,"offset_bounds","","The start and end bounds for the offset along the axis.",342,null],[12,"scrollable_range_len","","The total range which may be \"offset\" from the \"root\" range (aka the `kid_area`).",342,null],[12,"is_scrolling","","Whether or not the this axis is currently scrolling.",342,null],[4,"X","","Behaviour for scrolling across the `X` axis.",null,null],[4,"Y","","Behaviour for scrolling across the `Y` axis.",null,null],[6,"StateX","","State for scrolling along the X axis.",null,null],[6,"StateY","","State for scrolling along the Y axis.",null,null],[8,"Axis","","Methods for distinguishing behaviour between both scroll axes at compile-time.",null,null],[10,"parallel_range","","The range of the given `Rect` that is parallel with this `Axis`.",343,{"i":[{"n":"rect"}],"o":{"n":"range"}}],[10,"perpendicular_range","","The range of the given `Rect` that is perpendicular with this `Axis`.",343,{"i":[{"n":"rect"}],"o":{"n":"range"}}],[10,"padding_range","","Given some rectangular `Padding`, return the `Range` that corresponds with this `Axis`.",343,{"i":[{"n":"padding"}],"o":{"n":"range"}}],[10,"mouse_scalar","","The coordinate of the given mouse position that corresponds with this `Axis`.",343,{"i":[{"n":"point"}],"o":{"n":"scalar"}}],[10,"offset_direction","","A `Scalar` multiplier representing the direction in which positive offset shifts the `scrollable_range` (either `-1.0` or `1.0).",343,{"o":{"n":"scalar"}}],[11,"clone","","",344,{"i":[{"n":"self"}],"o":{"n":"scroll"}}],[11,"fmt","","",344,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",344,{"i":[{"n":"self"},{"n":"scroll"}],"o":{"n":"bool"}}],[11,"ne","","",344,{"i":[{"n":"self"},{"n":"scroll"}],"o":{"n":"bool"}}],[11,"clone","","",342,{"i":[{"n":"self"}],"o":{"n":"state"}}],[11,"fmt","","",342,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",342,{"i":[{"n":"self"},{"n":"state"}],"o":{"n":"bool"}}],[11,"ne","","",342,{"i":[{"n":"self"},{"n":"state"}],"o":{"n":"bool"}}],[11,"clone","","",345,{"i":[{"n":"self"}],"o":{"n":"x"}}],[11,"fmt","","",345,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",345,{"i":[{"n":"self"},{"n":"x"}],"o":{"n":"bool"}}],[11,"clone","","",346,{"i":[{"n":"self"}],"o":{"n":"y"}}],[11,"fmt","","",346,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",346,{"i":[{"n":"self"},{"n":"y"}],"o":{"n":"bool"}}],[11,"new","","The default `Scroll` args.",344,{"o":{"n":"self"}}],[11,"update","","Calculate the new scroll state for the single axis of a `Widget`.",342,{"i":[{"n":"ui"},{"n":"id"},{"n":"kidarea"},{"n":"option"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"parallel_range","","",345,{"i":[{"n":"rect"}],"o":{"n":"range"}}],[11,"perpendicular_range","","",345,{"i":[{"n":"rect"}],"o":{"n":"range"}}],[11,"padding_range","","",345,{"i":[{"n":"padding"}],"o":{"n":"range"}}],[11,"mouse_scalar","","",345,{"i":[{"n":"point"}],"o":{"n":"scalar"}}],[11,"offset_direction","","",345,{"o":{"n":"scalar"}}],[11,"parallel_range","","",346,{"i":[{"n":"rect"}],"o":{"n":"range"}}],[11,"perpendicular_range","","",346,{"i":[{"n":"rect"}],"o":{"n":"range"}}],[11,"padding_range","","",346,{"i":[{"n":"padding"}],"o":{"n":"range"}}],[11,"mouse_scalar","","",346,{"i":[{"n":"point"}],"o":{"n":"scalar"}}],[11,"offset_direction","","",346,{"o":{"n":"scalar"}}],[0,"primitive","conrod::widget","Primitive widgets are special in that they are built into conrod's `render`ing logic.",null,null],[5,"bounding_box_for_points","conrod::widget::primitive","Find the bounding rect for the given series of points.",null,{"i":[{"n":"i"}],"o":{"n":"rect"}}],[0,"line","","A simple, non-interactive widget for drawing a single straight Line.",null,null],[3,"Line","conrod::widget::primitive::line","A simple, non-interactive widget for drawing a single straight Line.",null,null],[12,"common","","Data necessary and common for all widget builder types.",347,null],[12,"start","","The start of the line.",347,null],[12,"end","","The end of the line.",347,null],[12,"style","","Unique styling.",347,null],[12,"should_centre_points","","Whether or not the line should be automatically centred to the widget position.",347,null],[3,"State","","Unique state for the Line widget.",null,null],[12,"start","","The start of the line.",348,null],[12,"end","","The end of the line.",348,null],[3,"Style","","Unique styling for a Line widget.",null,null],[12,"maybe_pattern","","The patter for the line.",349,null],[12,"maybe_color","","Color of the Button's pressable area.",349,null],[12,"maybe_thickness","","The thickness of the line.",349,null],[12,"maybe_cap","","The style with which the ends of the line are drawn.",349,null],[4,"Pattern","","The pattern used to draw the line.",null,null],[13,"Solid","","A single continuous stroke.",350,null],[13,"Dashed","","A series of line strokes.",350,null],[13,"Dotted","","A series of circles.",350,null],[4,"Cap","","Whether the end of the Line should be flat or rounded.",null,null],[13,"Flat","","The line is capped with a flat edge.",351,null],[13,"Round","","The line is capped with a semi-circle.",351,null],[5,"rect_corners","","Given two points and half the line thickness, return the four corners of the rectangle describing the line.",null,null],[5,"triangles","","Given two points and half the line thickness, return the two triangles that describe the line.",null,null],[5,"is_over","","Describes whether or not the given point touches the line described by a -> b with the given thickness.",null,{"i":[{"n":"point"},{"n":"point"},{"n":"scalar"},{"n":"point"}],"o":{"n":"bool"}}],[5,"is_over_widget","","The function to use for picking whether a given point is over the line.",null,{"i":[{"n":"container"},{"n":"point"},{"n":"theme"}],"o":{"n":"isover"}}],[11,"clone","","",347,{"i":[{"n":"self"}],"o":{"n":"line"}}],[11,"fmt","","",347,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",348,{"i":[{"n":"self"}],"o":{"n":"state"}}],[11,"fmt","","",348,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",348,{"i":[{"n":"self"},{"n":"state"}],"o":{"n":"bool"}}],[11,"ne","","",348,{"i":[{"n":"self"},{"n":"state"}],"o":{"n":"bool"}}],[11,"clone","","",349,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fmt","","",349,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",349,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",349,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"clone","","",350,{"i":[{"n":"self"}],"o":{"n":"pattern"}}],[11,"fmt","","",350,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",350,{"i":[{"n":"self"},{"n":"pattern"}],"o":{"n":"bool"}}],[11,"clone","","",351,{"i":[{"n":"self"}],"o":{"n":"cap"}}],[11,"fmt","","",351,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",351,{"i":[{"n":"self"},{"n":"cap"}],"o":{"n":"bool"}}],[11,"styled","","Build a new Line widget with the given style.",347,{"i":[{"n":"point"},{"n":"point"},{"n":"style"}],"o":{"n":"self"}}],[11,"new","","Build a new default Line widget.",347,{"i":[{"n":"point"},{"n":"point"}],"o":{"n":"self"}}],[11,"abs","","Build a new Line whose bounding box is fit to the absolute co-ordinates of the line points.",347,{"i":[{"n":"point"},{"n":"point"}],"o":{"n":"self"}}],[11,"abs_styled","","The same as Line::abs but with the given style.",347,{"i":[{"n":"point"},{"n":"point"},{"n":"style"}],"o":{"n":"self"}}],[11,"centred","","Build a new Line and shift the location of the start and end points so that the centre of their bounding rectangle lies at the position determined by the layout for the Line widget.",347,{"i":[{"n":"point"},{"n":"point"}],"o":{"n":"self"}}],[11,"centred_styled","","The same as Line::centred but with the given style.",347,{"i":[{"n":"point"},{"n":"point"},{"n":"style"}],"o":{"n":"self"}}],[11,"thickness","","The thickness or width of the Line.",347,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"solid","","Make a solid line.",347,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"dashed","","Make a line with a Dashed pattern.",347,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"dotted","","Make a line with a Dotted pattern.",347,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"new","","Constructor for a default Line Style.",349,{"o":{"n":"self"}}],[11,"solid","","Make a solid line.",349,{"o":{"n":"self"}}],[11,"dashed","","Make a line with a Dashed pattern.",349,{"o":{"n":"self"}}],[11,"dotted","","Make a line with a Dotted pattern.",349,{"o":{"n":"self"}}],[11,"pattern","","The style with some given pattern.",349,{"i":[{"n":"self"},{"n":"pattern"}],"o":{"n":"self"}}],[11,"color","","The style with some given color.",349,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"thickness","","The style with some given thickness.",349,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"cap","","The style for the ends of the Line.",349,{"i":[{"n":"self"},{"n":"cap"}],"o":{"n":"self"}}],[11,"set_pattern","","Set the pattern for the line.",349,{"i":[{"n":"self"},{"n":"pattern"}]}],[11,"set_color","","Set the color for the line.",349,{"i":[{"n":"self"},{"n":"color"}]}],[11,"set_thickness","","Set the thickness for the line.",349,{"i":[{"n":"self"},{"n":"scalar"}]}],[11,"set_cap","","Set the Cap for the line.",349,{"i":[{"n":"self"},{"n":"cap"}]}],[11,"get_pattern","","The Pattern for the Line.",349,{"i":[{"n":"self"},{"n":"theme"}],"o":{"n":"pattern"}}],[11,"get_color","","The Color for the Line.",349,{"i":[{"n":"self"},{"n":"theme"}],"o":{"n":"color"}}],[11,"get_thickness","","The width or thickness of the Line.",349,{"i":[{"n":"self"},{"n":"theme"}],"o":{"n":"scalar"}}],[11,"get_cap","","The styling for the ends of the Line.",349,{"i":[{"n":"self"},{"n":"theme"}],"o":{"n":"cap"}}],[11,"init_state","","",347,null],[11,"style","","",347,null],[11,"is_over","","",347,{"i":[{"n":"self"}],"o":{"n":"isoverfn"}}],[11,"update","","Update the state of the Line.",347,null],[11,"color","","",347,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[0,"image","conrod::widget::primitive","A simple, non-interactive widget for drawing an `Image`.",null,null],[3,"Image","conrod::widget::primitive::image","A primitive and basic widget for drawing an `Image`.",null,null],[12,"common","","Data necessary and common for all widget builder types.",352,null],[12,"image_id","","The unique identifier for the image that will be drawn.",352,null],[12,"src_rect","","The rectangle area of the original source image that should be used.",352,null],[12,"style","","Unique styling.",352,null],[3,"State","","Unique `State` to be stored between updates for the `Image`.",null,null],[12,"src_rect","","The rectangular area of the image that we wish to display.",353,null],[12,"image_id","","The unique identifier for the image's associated data that will be drawn.",353,null],[3,"Style","","Unique styling for the `Image` widget.",null,null],[12,"maybe_color","","Optionally specify a single color to use for the image.",354,null],[11,"clone","","",352,{"i":[{"n":"self"}],"o":{"n":"image"}}],[11,"clone","","",353,{"i":[{"n":"self"}],"o":{"n":"state"}}],[11,"clone","","",354,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fmt","","",354,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",354,{"o":{"n":"style"}}],[11,"eq","","",354,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",354,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"new","","Construct a new `Image`.",352,{"i":[{"n":"id"}],"o":{"n":"self"}}],[11,"source_rectangle","","The rectangular area of the image that we wish to display.",352,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"self"}}],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",352,{"i":[{"n":"self"},{"g":["color"],"n":"option"}],"o":{"n":"self"}}],[11,"init_state","","",352,null],[11,"style","","",352,null],[11,"default_x_dimension","","",352,{"i":[{"n":"self"},{"n":"ui"}],"o":{"n":"dimension"}}],[11,"default_y_dimension","","",352,{"i":[{"n":"self"},{"n":"ui"}],"o":{"n":"dimension"}}],[11,"update","","",352,null],[0,"point_path","conrod::widget::primitive","A simple, non-interactive widget for drawing a series of conjoined lines.",null,null],[3,"PointPath","conrod::widget::primitive::point_path","A simple, non-interactive widget for drawing a series of lines and/or points.",null,null],[12,"points","","Some iterator yielding a series of Points.",355,null],[12,"common","","Data necessary and common for all widget builder types.",355,null],[12,"style","","Unique styling for the PointPath.",355,null],[12,"maybe_shift_to_centre_from","","Whether or not the points should be automatically centred to the widget position.",355,null],[3,"State","","State that is unique to the PointPath.",null,null],[12,"points","","An owned version of the list of points.",356,null],[3,"Triangles","","An iterator that triangulates a point path.",null,null],[5,"triangles","","Triangulate a point path.",null,{"i":[{"n":"i"},{"n":"cap"},{"n":"scalar"}],"o":{"g":["triangles"],"n":"option"}}],[5,"is_over","","Returns whether or not the given point `p` lies over the `PointPath` described by the given points, line cap and thickness.",null,{"i":[{"n":"i"},{"n":"cap"},{"n":"scalar"},{"n":"point"}],"o":{"n":"bool"}}],[5,"is_over_widget","","The function to use for picking whether a given point is over the point path.",null,{"i":[{"n":"container"},{"n":"point"},{"n":"theme"}],"o":{"n":"isover"}}],[11,"clone","","",355,{"i":[{"n":"self"}],"o":{"n":"pointpath"}}],[11,"fmt","","",355,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",356,{"i":[{"n":"self"}],"o":{"n":"state"}}],[11,"fmt","","",356,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",356,{"i":[{"n":"self"},{"n":"state"}],"o":{"n":"bool"}}],[11,"ne","","",356,{"i":[{"n":"self"},{"n":"state"}],"o":{"n":"bool"}}],[11,"clone","","",357,{"i":[{"n":"self"}],"o":{"n":"triangles"}}],[11,"styled","","The same as PointPath::new but with th given style.",355,{"i":[{"n":"i"},{"n":"style"}],"o":{"n":"self"}}],[11,"new","","Build a new default PointPath widget.",355,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"abs","","Build a new PointPath whose bounding box is fit to the absolute co-ordinates of the points.",355,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"abs_styled","","The same as PointPath::abs but constructs the PointPath with the given style.",355,{"i":[{"n":"i"},{"n":"style"}],"o":{"n":"self"}}],[11,"centred","","Build a new PointPath and shift the location of the points so that the centre of their bounding rectangle lies at the position determined for the PointPath widget.",355,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"centred_styled","","The same as PointPath::centred but constructs the PointPath with the given style.",355,{"i":[{"n":"i"},{"n":"style"}],"o":{"n":"self"}}],[11,"thickness","","The thickness or width of the PointPath's lines.",355,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"solid","","Make a Solid line.",355,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"dashed","","Make a line with a Dashed pattern.",355,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"dotted","","Make a line with a Dotted pattern.",355,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"init_state","","",355,null],[11,"style","","",355,null],[11,"is_over","","",355,{"i":[{"n":"self"}],"o":{"n":"isoverfn"}}],[11,"update","","Update the state of the Line.",355,null],[11,"color","","",355,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"next","","",357,{"i":[{"n":"self"}],"o":{"n":"option"}}],[0,"shape","conrod::widget::primitive","A module encompassing the primitive 2D shape widgets.",null,null],[4,"Style","conrod::widget::primitive::shape","The style for some 2D shape.",null,null],[13,"Outline","","The outline of the shape with this style.",358,null],[13,"Fill","","A rectangle filled with this color.",358,null],[0,"circle","","An adaptation of the Oval type where the width and height are equal.",null,null],[3,"Circle","conrod::widget::primitive::shape::circle","A tiny wrapper around the Oval widget type.",null,null],[11,"clone","","",359,{"i":[{"n":"self"}],"o":{"n":"circle"}}],[11,"fmt","","",359,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"styled","","Build a circular Oval with the given dimensions and style.",359,{"i":[{"n":"scalar"},{"n":"style"}],"o":{"g":["full"],"n":"oval"}}],[11,"fill","","Build a new Filled circular Oval.",359,{"i":[{"n":"scalar"}],"o":{"g":["full"],"n":"oval"}}],[11,"fill_with","","Build a new circular Oval Filled with the given color.",359,{"i":[{"n":"scalar"},{"n":"color"}],"o":{"g":["full"],"n":"oval"}}],[11,"outline","","Build a new circular Outlined Oval widget.",359,{"i":[{"n":"scalar"}],"o":{"g":["full"],"n":"oval"}}],[11,"outline_styled","","Build a new circular Oval Outlined with the given style.",359,{"i":[{"n":"scalar"},{"n":"style"}],"o":{"g":["full"],"n":"oval"}}],[0,"oval","conrod::widget::primitive::shape","A simple, non-interactive widget for drawing a single Oval.",null,null],[3,"Oval","conrod::widget::primitive::shape::oval","A simple, non-interactive widget for drawing a single Oval.",null,null],[12,"common","","Data necessary and common for all widget builder types.",360,null],[12,"style","","Unique styling.",360,null],[12,"resolution","","The number of lines used to draw the edge.",360,null],[12,"section","","A type describing the section of the `Oval` that is to be drawn.",360,null],[3,"Full","","The entire `Oval` will be drawn.",null,null],[3,"Section","","A section of the oval will be drawn where the section is specified by the given radians.",null,null],[12,"radians","","The angle occuppied by the section's circumference.",361,null],[12,"offset_radians","","The radians at which the section will begin.",361,null],[3,"State","","Unique state for the Oval.",null,null],[12,"resolution","","The number of lines used to draw the edge.",362,null],[12,"section","","A type describing the section of the `Oval` that is to be drawn.",362,null],[3,"Circumference","","An iterator yielding the edges of an `Oval` (or some section of an `Oval`) as a circumference represented as a series of edges.",null,null],[3,"Triangles","","An iterator yielding triangles that describe an oval or some section of an oval.",null,null],[5,"circumference","","An iterator yielding the `Oval`'s edges as a circumference represented as a series of points.",null,{"i":[{"n":"rect"},{"n":"usize"}],"o":{"n":"circumference"}}],[5,"triangles","","An iterator yielding the triangles that describe the given oval.",null,{"i":[{"n":"rect"},{"n":"usize"}],"o":{"n":"triangles"}}],[5,"is_over","","Returns `true` if the given `Point` is over an oval at the given rect.",null,{"i":[{"n":"rect"},{"n":"point"}],"o":{"n":"bool"}}],[5,"is_over_widget","","The function to use for picking whether a given point is over the oval.",null,{"i":[{"n":"container"},{"n":"point"},{"n":"theme"}],"o":{"n":"isover"}}],[5,"is_over_section","","Returns whether or not the given point is over the section described",null,{"i":[{"n":"circumference"},{"n":"point"}],"o":{"n":"bool"}}],[5,"is_over_section_widget","","The function to use for picking whether a given point is over the oval section.",null,{"i":[{"n":"container"},{"n":"point"},{"n":"theme"}],"o":{"n":"isover"}}],[17,"DEFAULT_RESOLUTION","","The default circle resolution if none is specified.",null,null],[8,"OvalSection","","Types that may be used to describe the visible section of the `Oval`.",null,null],[18,"IS_OVER","","The function used to determine if a point is over the oval section widget.",363,null],[11,"clone","","",360,{"i":[{"n":"self"}],"o":{"n":"oval"}}],[11,"fmt","","",360,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",364,{"i":[{"n":"self"}],"o":{"n":"full"}}],[11,"fmt","","",364,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",364,{"i":[{"n":"self"},{"n":"full"}],"o":{"n":"bool"}}],[11,"clone","","",361,{"i":[{"n":"self"}],"o":{"n":"section"}}],[11,"fmt","","",361,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",361,{"i":[{"n":"self"},{"n":"section"}],"o":{"n":"bool"}}],[11,"ne","","",361,{"i":[{"n":"self"},{"n":"section"}],"o":{"n":"bool"}}],[11,"clone","","",362,{"i":[{"n":"self"}],"o":{"n":"state"}}],[11,"fmt","","",362,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",362,{"i":[{"n":"self"},{"n":"state"}],"o":{"n":"bool"}}],[11,"ne","","",362,{"i":[{"n":"self"},{"n":"state"}],"o":{"n":"bool"}}],[11,"styled","","Build an Oval with the given dimensions and style.",360,{"i":[{"n":"dimensions"},{"n":"style"}],"o":{"n":"self"}}],[11,"fill","","Build a new Filled Oval.",360,{"i":[{"n":"dimensions"}],"o":{"n":"self"}}],[11,"fill_with","","Build a new Oval Filled with the given color.",360,{"i":[{"n":"dimensions"},{"n":"color"}],"o":{"n":"self"}}],[11,"outline","","Build a new Outlined Oval widget.",360,{"i":[{"n":"dimensions"}],"o":{"n":"self"}}],[11,"outline_styled","","Build a new Oval Outlined with the given style.",360,{"i":[{"n":"dimensions"},{"n":"style"}],"o":{"n":"self"}}],[11,"resolution","","The number of lines used to draw the edge.",360,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"section","","Produces an `Oval` where only a section is drawn.",360,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"g":["section"],"n":"oval"}}],[11,"offset_radians","","The radians at which the section will begin.",360,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"init_state","","",360,null],[11,"style","","",360,null],[11,"is_over","","",360,{"i":[{"n":"self"}],"o":{"n":"isoverfn"}}],[11,"update","","",360,null],[11,"color","","",360,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"clone","","",365,{"i":[{"n":"self"}],"o":{"n":"circumference"}}],[11,"new","","An iterator yielding the `Oval`'s edges as a circumference represented as a series of points.",365,{"i":[{"n":"rect"},{"n":"usize"}],"o":{"n":"self"}}],[11,"new_section","","Produces a new iterator that yields only a section of the `Oval`'s circumference, where the section is described via its angle in radians.",365,{"i":[{"n":"rect"},{"n":"usize"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"clone","","",366,{"i":[{"n":"self"}],"o":{"n":"triangles"}}],[11,"section","","Produces a new iterator that yields only a section of the `Oval`'s circumference, where the section is described via its angle in radians.",365,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"offset_radians","","Rotates the position at which the iterator starts yielding points by the given radians.",365,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"triangles","","Produces an `Iterator` yielding `Triangle`s.",365,{"i":[{"n":"self"}],"o":{"n":"triangles"}}],[11,"next","","",365,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",366,{"i":[{"n":"self"}],"o":{"n":"option"}}],[0,"polygon","conrod::widget::primitive::shape","A simple, non-interactive Polygon widget for drawing arbitrary convex shapes.",null,null],[3,"Polygon","conrod::widget::primitive::shape::polygon","A basic, non-interactive, arbitrary Polygon widget.",null,null],[12,"common","","Data necessary and common for all widget builder types.",367,null],[12,"points","","The points describing the corners of the Polygon.",367,null],[12,"style","","Unique styling for the Polygon.",367,null],[12,"maybe_shift_to_centre_from","","Whether or not the points should be automatically centred to the widget position.",367,null],[3,"State","","Unique state for the Polygon.",null,null],[12,"points","","An owned version of the points yielded by the Polygon's `points` iterator.",368,null],[3,"Triangles","","An iterator that triangulates a polygon represented by a sequence of points describing its edges.",null,null],[4,"Kind","","Whether the rectangle is drawn as an outline or a filled color.",null,null],[13,"Outline","","Only the outline of the rectangle is drawn.",369,null],[13,"Fill","","The rectangle area is filled with some color.",369,null],[5,"triangles","","Triangulate the polygon given as a list of `Point`s describing its sides.",null,{"i":[{"n":"i"}],"o":{"g":["triangles"],"n":"option"}}],[5,"is_over","","Returns `true` if the given `Point` is over the polygon described by the given series of points.",null,{"i":[{"n":"i"},{"n":"point"}],"o":{"n":"bool"}}],[5,"is_over_widget","","The function to use for picking whether a given point is over the polygon.",null,{"i":[{"n":"container"},{"n":"point"},{"n":"theme"}],"o":{"n":"isover"}}],[11,"clone","","",367,{"i":[{"n":"self"}],"o":{"n":"polygon"}}],[11,"fmt","","",367,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",368,{"i":[{"n":"self"}],"o":{"n":"state"}}],[11,"fmt","","",368,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",368,{"i":[{"n":"self"},{"n":"state"}],"o":{"n":"bool"}}],[11,"ne","","",368,{"i":[{"n":"self"},{"n":"state"}],"o":{"n":"bool"}}],[11,"clone","","",369,{"i":[{"n":"self"}],"o":{"n":"kind"}}],[11,"fmt","","",369,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",369,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"bool"}}],[11,"clone","","",370,{"i":[{"n":"self"}],"o":{"n":"triangles"}}],[11,"styled","","Build a polygon with the given points and style.",367,{"i":[{"n":"i"},{"n":"style"}],"o":{"n":"self"}}],[11,"fill","","Build a Polygon with the default Fill style.",367,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"fill_with","","Build a Polygon Filled with the given Color.",367,{"i":[{"n":"i"},{"n":"color"}],"o":{"n":"self"}}],[11,"outline","","Build a Polygon with the default Outline style.",367,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"outline_styled","","Build a Polygon Outlineed with the given line style.",367,{"i":[{"n":"i"},{"n":"style"}],"o":{"n":"self"}}],[11,"abs_styled","","Build a new filled Polygon whose bounding box is fit to the absolute co-ordinates of the points.",367,{"i":[{"n":"i"},{"n":"style"}],"o":{"n":"self"}}],[11,"abs_fill","","The same as Polygon::abs_styled but builds the Polygon with the default Fill style.",367,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"abs_fill_with","","The same as Polygon::abs_styled but builds the Polygon Filled with the given Color.",367,{"i":[{"n":"i"},{"n":"color"}],"o":{"n":"self"}}],[11,"abs_outline","","The same as Polygon::abs_styled but builds the Polygon with the default Outline style.",367,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"abs_outline_styled","","The same as Polygon::abs_styled but builds the Polygon with the given Outline styling.",367,{"i":[{"n":"i"},{"n":"style"}],"o":{"n":"self"}}],[11,"centred_styled","","Build a new Polygon and shift the location of the points so that the centre of their bounding rectangle lies at the position determined for the Polygon widget.",367,{"i":[{"n":"i"},{"n":"style"}],"o":{"n":"self"}}],[11,"centred_fill","","The same as Polygon::centred_styled but constructs the Polygon with the default Fill style.",367,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"centred_fill_with","","The same as Polygon::centred_styled but constructs the Polygon Filled with the given color.",367,{"i":[{"n":"i"},{"n":"color"}],"o":{"n":"self"}}],[11,"centred_outline","","The same as Polygon::centred_styled but constructs the Polygon with the default Outline style.",367,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"centred_outline_styled","","The same as Polygon::centred_styled but constructs the Polygon Outlined with the given styling.",367,{"i":[{"n":"i"},{"n":"style"}],"o":{"n":"self"}}],[11,"init_state","","",367,null],[11,"style","","",367,null],[11,"is_over","","",367,{"i":[{"n":"self"}],"o":{"n":"isoverfn"}}],[11,"update","","Update the state of the Polygon.",367,null],[11,"color","","",367,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"next","","",370,{"i":[{"n":"self"}],"o":{"n":"option"}}],[0,"rectangle","conrod::widget::primitive::shape","A simple, non-interactive rectangle shape widget.",null,null],[3,"Rectangle","conrod::widget::primitive::shape::rectangle","A basic, non-interactive rectangle shape widget.",null,null],[12,"common","","Data necessary and common for all widget builder types.",371,null],[12,"style","","Unique styling for the Rectangle.",371,null],[3,"State","","Unique state for the Rectangle.",null,null],[4,"Kind","","Whether the rectangle is drawn as an outline or a filled color.",null,null],[13,"Outline","","Only the outline of the rectangle is drawn.",372,null],[13,"Fill","","The rectangle area is filled with some color.",372,null],[5,"triangles","","The two triangles that describe the given `Rect`.",null,null],[11,"clone","","",371,{"i":[{"n":"self"}],"o":{"n":"rectangle"}}],[11,"fmt","","",371,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",373,{"i":[{"n":"self"}],"o":{"n":"state"}}],[11,"fmt","","",373,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",373,{"i":[{"n":"self"},{"n":"state"}],"o":{"n":"bool"}}],[11,"ne","","",373,{"i":[{"n":"self"},{"n":"state"}],"o":{"n":"bool"}}],[11,"clone","","",372,{"i":[{"n":"self"}],"o":{"n":"kind"}}],[11,"fmt","","",372,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",372,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"bool"}}],[11,"styled","","Build a rectangle with the dimensions and style.",371,{"i":[{"n":"dimensions"},{"n":"style"}],"o":{"n":"self"}}],[11,"fill","","Build a new filled rectangle.",371,{"i":[{"n":"dimensions"}],"o":{"n":"self"}}],[11,"fill_with","","Build a new filled rectangle widget filled with the given color.",371,{"i":[{"n":"dimensions"},{"n":"color"}],"o":{"n":"self"}}],[11,"outline","","Build a new outlined rectangle widget.",371,{"i":[{"n":"dimensions"}],"o":{"n":"self"}}],[11,"outline_styled","","Build an outlined rectangle rather than a filled one.",371,{"i":[{"n":"dimensions"},{"n":"style"}],"o":{"n":"self"}}],[11,"init_state","","",371,null],[11,"style","","",371,null],[11,"update","","Update the state of the Rectangle.",371,null],[11,"color","","",371,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[0,"triangles","conrod::widget::primitive::shape","A primitive widget that allows for drawing using a list of triangles.",null,null],[3,"Triangles","conrod::widget::primitive::shape::triangles","A widget that allows for drawing a list of triangles.",null,null],[12,"common","","Data necessary and common for all widget builder types.",374,null],[12,"style","","Unique styling for the Triangles.",374,null],[12,"triangles","","All the point in the triangle list.",374,null],[12,"maybe_shift_to_centre_from","","Whether or not the triangles should be automatically centred to the widget position.",374,null],[3,"SingleColor","","All triangles colored with a single `Color`.",null,null],[12,"0","","",375,null],[3,"MultiColor","","Each triangle is colored per vertex.",null,null],[3,"Triangle","","A single triangle described by three vertices.",null,null],[12,"0","","",376,null],[3,"State","","Unique state stored between updates for a `Triangles`.",null,null],[12,"triangles","","The triangles that make up the triangles.",377,null],[3,"TrianglesUnpositioned","","When beginning to build `Triangles` they are initially unpositioned.",null,null],[5,"from_quad","","Triangulates the given quad, represented by four points that describe its edges in either clockwise or anti-clockwise order.",null,null],[5,"is_over_triangle","","Returns `true` if the given `Point` is over the given `Triangle`.",null,{"i":[{"n":"triangle"},{"n":"point"}],"o":{"n":"bool"}}],[5,"is_over","","Returns `true` if the given `Point` is over any of the given `Triangle`s.",null,{"i":[{"n":"i"},{"n":"point"}],"o":{"n":"bool"}}],[5,"is_over_widget","","The function to use for picking whether a given point is over the line.",null,{"i":[{"n":"container"},{"n":"point"},{"n":"theme"}],"o":{"n":"isover"}}],[6,"ColoredPoint","","A point with an associated color.",null,null],[8,"Vertex","","Types used as vertices that make up a list of triangles.",null,null],[10,"point","","The x y location of the vertex.",378,{"i":[{"n":"self"}],"o":{"n":"point"}}],[10,"add","","Add the given vector onto the position of self and return the result.",378,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"self"}}],[8,"Style","","Unique styling types for `Triangles`.",null,null],[16,"Vertex","","The type of vertices that make up the list of triangles for this style.",379,null],[11,"clone","","",374,{"i":[{"n":"self"}],"o":{"n":"triangles"}}],[11,"fmt","","",374,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",375,{"i":[{"n":"self"}],"o":{"n":"singlecolor"}}],[11,"fmt","","",375,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",375,{"i":[{"n":"self"},{"n":"singlecolor"}],"o":{"n":"bool"}}],[11,"ne","","",375,{"i":[{"n":"self"},{"n":"singlecolor"}],"o":{"n":"bool"}}],[11,"clone","","",380,{"i":[{"n":"self"}],"o":{"n":"multicolor"}}],[11,"fmt","","",380,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",380,{"i":[{"n":"self"},{"n":"multicolor"}],"o":{"n":"bool"}}],[11,"clone","","",376,{"i":[{"n":"self"}],"o":{"n":"triangle"}}],[11,"fmt","","",376,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",376,{"i":[{"n":"self"},{"n":"triangle"}],"o":{"n":"bool"}}],[11,"ne","","",376,{"i":[{"n":"self"},{"n":"triangle"}],"o":{"n":"bool"}}],[11,"clone","","",377,{"i":[{"n":"self"}],"o":{"n":"state"}}],[11,"fmt","","",377,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",377,{"i":[{"n":"self"},{"n":"state"}],"o":{"n":"bool"}}],[11,"ne","","",377,{"i":[{"n":"self"},{"n":"state"}],"o":{"n":"bool"}}],[11,"point","","",381,{"i":[{"n":"self"}],"o":{"n":"point"}}],[11,"add","","",381,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"self"}}],[11,"point","","",382,{"i":[{"n":"self"}],"o":{"n":"point"}}],[11,"add","","",382,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"self"}}],[11,"clone","","",383,{"i":[{"n":"self"}],"o":{"n":"trianglesunpositioned"}}],[11,"fmt","","",383,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"add","","Shift the triangle by the given amount by adding it onto the position of each point.",376,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"self"}}],[11,"points","","The three points that make up the triangle.",376,null],[11,"color","","Convert the `Triangle<Point>` to a `Triangle<ColoredPoint>`.",376,{"i":[{"n":"self"},{"n":"rgba"},{"n":"rgba"},{"n":"rgba"}],"o":{"g":["coloredpoint"],"n":"triangle"}}],[11,"color_all","","Convert the `Triangle<Point>` to a `Triangle<ColoredPoint>` using the given color.",376,{"i":[{"n":"self"},{"n":"rgba"}],"o":{"g":["coloredpoint"],"n":"triangle"}}],[11,"deref","","",376,null],[11,"from","","",376,null],[11,"from","","",376,null],[11,"into","","",376,null],[11,"into","","",376,null],[11,"single_color","","A list of triangles described by the given points.",374,{"i":[{"n":"c"},{"n":"i"}],"o":{"g":["singlecolor"],"n":"trianglesunpositioned"}}],[11,"multi_color","","A list of triangles described by the given points.",374,{"i":[{"n":"i"}],"o":{"g":["multicolor"],"n":"trianglesunpositioned"}}],[11,"with_bounding_rect","","Specify the bounding rectangle for the Triangles.",383,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"triangles"}}],[11,"calc_bounding_rect","","Calculate the position and size of the bounding rectangle from the `Triangles` points. The resulting bounding rectangle will fit to the absolute co-ordinates of all points.",383,{"i":[{"n":"self"}],"o":{"n":"triangles"}}],[11,"centre_points_to_bounding_rect","","Shift the location of the Triangles points so that the centre of their bounding rectangle lies at the position determined for the Triangles widget.",383,{"i":[{"n":"self"}],"o":{"n":"triangles"}}],[11,"init_state","","",374,null],[11,"style","","",374,null],[11,"is_over","","",374,{"i":[{"n":"self"}],"o":{"n":"isoverfn"}}],[11,"update","","",374,null],[11,"as_ref","","",376,{"i":[{"n":"self"}],"o":{"n":"triangle"}}],[11,"clone","conrod::widget::primitive::shape","",358,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fmt","","",358,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",358,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",358,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"fill","","A default `Fill` style.",358,{"o":{"n":"self"}}],[11,"fill_with","","A `Fill` style with some given `Color`.",358,{"i":[{"n":"color"}],"o":{"n":"self"}}],[11,"outline","","A default `Outline` style.",358,{"o":{"n":"self"}}],[11,"outline_styled","","A default `Outline` style.",358,{"i":[{"n":"style"}],"o":{"n":"self"}}],[11,"color","","The style with some given Color.",358,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"set_color","","Set the color for the style.",358,{"i":[{"n":"self"},{"n":"color"}]}],[11,"get_color","","Get the color of the Rectangle.",358,{"i":[{"n":"self"},{"n":"theme"}],"o":{"n":"color"}}],[0,"text","conrod::widget::primitive","The primitive widget used for displaying text.",null,null],[3,"Text","conrod::widget::primitive::text","Displays some given text centered within a rectangular area.",null,null],[12,"common","","Data necessary and common for all widget builder types.",384,null],[12,"text","","The text to be drawn by the Text.",384,null],[12,"style","","Unique styling for the Text.",384,null],[3,"Style","","The styling for a Text's graphics.",null,null],[12,"font_size","","The font size for the Text.",385,null],[12,"color","","The color of the Text.",385,null],[12,"maybe_wrap","","Whether or not the text should wrap around the width.",385,null],[12,"line_spacing","","The spacing between consecutive lines.",385,null],[12,"justify","","Alignment of the text along the x axis.",385,null],[12,"font_id","","The id of the font to use for rendering and layout.",385,null],[3,"State","","The state to be stored between updates for the Text.",null,null],[12,"string","","An owned version of the string.",386,null],[12,"line_infos","","The indices and width for each line of text within the `string`.",386,null],[4,"Wrap","","The way in which text should wrap around the width.",null,null],[13,"Character","","Wrap at the first character that exceeds the width.",387,null],[13,"Whitespace","","Wrap at the first word that exceeds the width.",387,null],[11,"clone","","",384,{"i":[{"n":"self"}],"o":{"n":"text"}}],[11,"fmt","","",384,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",385,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fmt","","",385,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",385,{"o":{"n":"style"}}],[11,"eq","","",385,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",385,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"clone","","",387,{"i":[{"n":"self"}],"o":{"n":"wrap"}}],[11,"fmt","","",387,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",387,{"i":[{"n":"self"},{"n":"wrap"}],"o":{"n":"bool"}}],[11,"clone","","",386,{"i":[{"n":"self"}],"o":{"n":"state"}}],[11,"fmt","","",386,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",386,{"i":[{"n":"self"},{"n":"state"}],"o":{"n":"bool"}}],[11,"ne","","",386,{"i":[{"n":"self"},{"n":"state"}],"o":{"n":"bool"}}],[11,"new","","Build a new Text widget.",384,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"no_line_wrap","","Specify that the Text should not wrap lines around the width.",384,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"wrap_by_word","","Line wrap the Text at the beginning of the first word that exceeds the width.",384,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"wrap_by_character","","Line wrap the Text at the beginning of the first character that exceeds the width.",384,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"font_id","","A method for specifying the `Font` used for displaying the `Text`.",384,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"with_style","","Build the Text with the given Style.",384,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"self"}}],[11,"left_justify","","Align the text to the left of its bounding Rect's x axis range.",384,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"center_justify","","Align the text to the middle of its bounding Rect's x axis range.",384,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"right_justify","","Align the text to the right of its bounding Rect's x axis range.",384,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"font_size","","Build the type's self.$($assignee).+ with the given $Type.",384,{"i":[{"n":"self"},{"n":"fontsize"}],"o":{"n":"self"}}],[11,"justify","","Build the type's self.$($assignee).+ with the given $Type.",384,{"i":[{"n":"self"},{"n":"justify"}],"o":{"n":"self"}}],[11,"line_spacing","","Build the type's self.$($assignee).+ with the given $Type.",384,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"init_state","","",384,null],[11,"style","","",384,null],[11,"default_x_dimension","","If no specific width was given, we'll use the width of the widest line as a default.",384,{"i":[{"n":"self"},{"n":"ui"}],"o":{"n":"dimension"}}],[11,"default_y_dimension","","If no specific height was given, we'll use the total height of the text as a default.",384,{"i":[{"n":"self"},{"n":"ui"}],"o":{"n":"dimension"}}],[11,"update","","Update the state of the Text.",384,null],[11,"color","","",384,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[0,"bordered_rectangle","conrod::widget","The `BorderedRectangle` widget and related items.",null,null],[3,"BorderedRectangle","conrod::widget::bordered_rectangle","A filled rectangle widget that may or may not have some border.",null,null],[12,"common","","Data necessary and common for all widget builder types.",388,null],[12,"style","","Unique styling for the BorderedRectangle.",388,null],[3,"Style","","Unique styling for the BorderedRectangle widget.",null,null],[12,"color","","Shape styling for the inner rectangle.",389,null],[12,"border","","The thickness of the border.",389,null],[12,"border_color","","The color of the border.",389,null],[3,"State","","Unique state for the `BorderedRectangle`.",null,null],[3,"RoundedBorderTriangles","","An iterator yielding triangles for a rounded border.",null,null],[5,"border_triangles","","The eight triangles that describe a rectangular border.",null,{"i":[{"n":"rect"},{"n":"scalar"}],"o":{"n":"option"}}],[5,"rounded_border_triangles","","An iterator yielding triangles for a rounded border.",null,{"i":[{"n":"rect"},{"n":"scalar"},{"n":"scalar"},{"n":"usize"}],"o":{"n":"roundedbordertriangles"}}],[11,"clone","","",388,{"i":[{"n":"self"}],"o":{"n":"borderedrectangle"}}],[11,"fmt","","",388,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",389,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fmt","","",389,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",389,{"o":{"n":"style"}}],[11,"eq","","",389,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",389,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"new","","Build a new BorderedRectangle.",388,{"i":[{"n":"dimensions"}],"o":{"n":"self"}}],[11,"with_style","","Build the type's self.$($assignee).+ with the given $Type.",388,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"self"}}],[11,"init_state","","",388,null],[11,"style","","",388,null],[11,"update","","Update the state of the Rectangle.",388,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",388,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",388,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",388,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"clone","","",390,{"i":[{"n":"self"}],"o":{"n":"roundedbordertriangles"}}],[11,"new","","Constructor for an iterator yielding triangles for a rounded border.",390,{"i":[{"n":"rect"},{"n":"scalar"},{"n":"scalar"},{"n":"usize"}],"o":{"n":"self"}}],[11,"next","","",390,{"i":[{"n":"self"}],"o":{"n":"option"}}],[0,"button","conrod::widget","The `Button` widget and related items.",null,null],[3,"Button","conrod::widget::button","A pressable button widget whose reaction is triggered upon release.",null,null],[12,"show","","Whether the `Button` is a `Flat` color or an `Image`.",391,null],[12,"style","","Unique styling parameters for the Button.",391,null],[3,"Style","","Unique styling for the Button.",null,null],[12,"color","","Color of the Button's pressable area.",392,null],[12,"border","","Width of the border surrounding the button",392,null],[12,"border_color","","The color of the border.",392,null],[12,"label_color","","The color of the Button's label.",392,null],[12,"label_font_size","","The font size of the Button's label.",392,null],[12,"label_font_id","","The ID of the font used to display the label.",392,null],[12,"label_justify","","The label's typographic alignment over the x axis.",392,null],[12,"label_x","","The position of the title bar's `Label` widget over the x axis.",392,null],[12,"label_y","","The position of the title bar's `Label` widget over the y axis.",392,null],[3,"FlatIds","","Identifiers for a \"flat\" button.",null,null],[12,"rectangle","","",393,null],[12,"label","","",393,null],[3,"ImageIds","","Identifiers for an image button.",null,null],[12,"image","","",394,null],[12,"label","","",394,null],[3,"Flat","","The `Button` simply displays a flat color.",null,null],[12,"hover_color","","Allows specifying a color to use when the mouse hovers over the button.",395,null],[12,"press_color","","Allows specifying a color to use when the mouse presses the button.",395,null],[3,"Image","","The `Button` displays an `Image` on top.",null,null],[12,"image_id","","The id of the `Image` to be used.",396,null],[12,"hover_image_id","","The image displayed when the mouse hovers over the button.",396,null],[12,"press_image_id","","The image displayed when the mouse has captured and is pressing the button.",396,null],[12,"color","","If `Some`, maps the image's luminance to this `Color`.",396,null],[12,"src_rect","","The rectangular area of the original source image that should be displayed.",396,null],[3,"TimesClicked","","The `Event` type yielded by the `Button` widget.",null,null],[12,"0","","",397,null],[4,"ImageColor","","The coloring of the `Image`.",null,null],[13,"Normal","","The image's luminance will be mapped to this color.",398,null],[13,"WithFeedback","","The image's luminance will be mapped to this color.",398,null],[13,"None","","The image's regular color will be used.",398,null],[11,"clone","","",391,{"i":[{"n":"self"}],"o":{"n":"button"}}],[11,"clone","","",392,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fmt","","",392,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",392,{"o":{"n":"style"}}],[11,"eq","","",392,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",392,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"new","","Construct a new `widget::Id` container.",393,{"i":[{"n":"generator"}],"o":{"n":"self"}}],[11,"new","","Construct a new `widget::Id` container.",394,{"i":[{"n":"generator"}],"o":{"n":"self"}}],[11,"clone","","",395,{"i":[{"n":"self"}],"o":{"n":"flat"}}],[11,"default","","",395,{"o":{"n":"flat"}}],[11,"eq","","",395,{"i":[{"n":"self"},{"n":"flat"}],"o":{"n":"bool"}}],[11,"ne","","",395,{"i":[{"n":"self"},{"n":"flat"}],"o":{"n":"bool"}}],[11,"fmt","","",395,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",396,{"i":[{"n":"self"}],"o":{"n":"image"}}],[11,"clone","","",398,{"i":[{"n":"self"}],"o":{"n":"imagecolor"}}],[11,"fmt","","",398,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",397,{"i":[{"n":"self"}],"o":{"n":"timesclicked"}}],[11,"fmt","","",397,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"was_clicked","","`true` if the `Button` was clicked one or more times.",397,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"next","","",397,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"image","","Begin building a button displaying the given `Image` on top.",391,{"i":[{"n":"id"}],"o":{"n":"self"}}],[11,"source_rectangle","","The rectangular area of the image that we wish to display.",391,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"self"}}],[11,"image_color","","Map the `Image`'s luminance to the given color.",391,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"image_color_with_feedback","","Map the `Image`'s luminance to the given color.",391,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"hover_image","","The image displayed while the mouse hovers over the `Button`.",391,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"press_image","","The image displayed while the `Button` is pressed.",391,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"new","","Begin building a flat-colored `Button` widget.",391,{"o":{"n":"self"}}],[11,"with_style","","Override the default button style",391,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"self"}}],[11,"hover_color","","Specify a color to use when the mouse hovers over the button.",391,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"press_color","","Specify a color to use when the mouse presses the button.",391,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"label_font_id","","Specify the font used for displaying the label.",391,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"left_justify_label","","Align the label to the left of the `Button`'s surface.",391,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"center_justify_label","","Align the label to the mid-left of the `Button`'s surface.",391,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"right_justify_label","","Align the label to the mid-left of the `Button`'s surface.",391,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"label_x","","Specify the label's position relatively to `Button` along the x axis.",391,{"i":[{"n":"self"},{"n":"relative"}],"o":{"n":"self"}}],[11,"label_y","","Specify the label's position relatively to `Button` along the y axis.",391,{"i":[{"n":"self"},{"n":"relative"}],"o":{"n":"self"}}],[11,"enabled","","Build the type's self.$($assignee).+ with the given $Type.",391,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"init_state","","",391,null],[11,"style","","",391,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"update","","Update the state of the Button.",391,null],[11,"init_state","","",391,null],[11,"style","","",391,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"update","","Update the state of the Button.",391,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",391,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",391,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",391,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",391,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",391,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",391,{"i":[{"n":"self"},{"n":"fontsize"}],"o":{"n":"self"}}],[0,"canvas","conrod::widget","The `Canvas` widget and related items.",null,null],[3,"Canvas","conrod::widget::canvas","Canvas is designed to be a \"container\"-like \"parent\" widget that simplifies placement of \"children\" widgets.",null,null],[12,"common","","Data necessary and common for all widget builder types.",399,null],[12,"style","","The builder data related to the style of the Canvas.",399,null],[12,"maybe_title_bar_label","","The label for the Canvas' TitleBar if there is one.",399,null],[12,"maybe_splits","","A list of child Canvasses as splits of this Canvas flowing in the given direction.",399,null],[3,"State","","Canvas state to be cached.",null,null],[3,"Style","","Unique styling for the Canvas.",null,null],[12,"color","","The color of the Canvas' rectangle surface.",400,null],[12,"border","","The width of the border surrounding the Canvas' rectangle.",400,null],[12,"border_color","","The color of the Canvas' border.",400,null],[12,"length","","If this Canvas is a split of some parent Canvas, this is the length of the split.",400,null],[12,"pad_left","","Padding for the left edge of the Canvas' kid area.",400,null],[12,"pad_right","","Padding for the right edge of the Canvas' kid area.",400,null],[12,"pad_bottom","","Padding for the bottom edge of the Canvas' kid area.",400,null],[12,"pad_top","","Padding for the top edge of the Canvas' kid area.",400,null],[12,"title_bar_color","","The color of the title bar. Defaults to the color of the Canvas.",400,null],[12,"title_bar_text_color","","The color of the title bar's text.",400,null],[12,"title_bar_font_size","","The font size for the title bar's text.",400,null],[12,"title_bar_maybe_wrap","","The way in which the title bar's text should wrap.",400,null],[12,"title_bar_line_spacing","","The distance between lines for multi-line title bar text.",400,null],[12,"title_bar_justify","","The label's typographic alignment over the x axis.",400,null],[4,"Length","","Used to describe the desired length for a `Split`.",null,null],[13,"Absolute","","The length as an absolute scalar.",401,null],[13,"Weight","","The length as a weight of the non-absolute length of the parent Canvas.",401,null],[4,"Direction","","The direction in which a sequence of canvas splits will be laid out.",null,null],[13,"X","","Lay splits along the x axis.",402,null],[13,"Y","","Lay splits along the y axis.",402,null],[6,"ListOfSplits","","A series of Canvas splits along with their unique identifiers.",null,null],[6,"FlowOfSplits","","A series of Canvas splits flowing in the specified direction.",null,null],[6,"Weight","","The length of a `Split` given as a weight.",null,null],[11,"clone","","",399,{"i":[{"n":"self"}],"o":{"n":"canvas"}}],[11,"fmt","","",399,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",400,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fmt","","",400,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",400,{"o":{"n":"style"}}],[11,"eq","","",400,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",400,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"clone","","",401,{"i":[{"n":"self"}],"o":{"n":"length"}}],[11,"fmt","","",401,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",401,{"i":[{"n":"self"},{"n":"length"}],"o":{"n":"bool"}}],[11,"ne","","",401,{"i":[{"n":"self"},{"n":"length"}],"o":{"n":"bool"}}],[11,"clone","","",402,{"i":[{"n":"self"}],"o":{"n":"direction"}}],[11,"fmt","","",402,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new Canvas builder.",399,{"o":{"n":"self"}}],[11,"title_bar","","Build the type's self.$($assignee).+ with the given $Type.",399,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"pad_left","","Build the type's self.$($assignee).+ with the given $Type.",399,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"pad_right","","Build the type's self.$($assignee).+ with the given $Type.",399,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"pad_bottom","","Build the type's self.$($assignee).+ with the given $Type.",399,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"pad_top","","Build the type's self.$($assignee).+ with the given $Type.",399,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"with_style","","Build the type's self.$($assignee).+ with the given $Type.",399,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"self"}}],[11,"length","","Set the length of the Split as an absolute scalar.",399,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"length_weight","","Set the length of the Split as a weight.",399,{"i":[{"n":"self"},{"n":"weight"}],"o":{"n":"self"}}],[11,"flow_right","","Set the child Canvasses flowing to the right.",399,{"i":[{"n":"self"},{"n":"listofsplits"}],"o":{"n":"self"}}],[11,"flow_left","","Set the child Canvasses flowing to the left.",399,{"i":[{"n":"self"},{"n":"listofsplits"}],"o":{"n":"self"}}],[11,"flow_up","","Set the child Canvasses flowing upwards.",399,{"i":[{"n":"self"},{"n":"listofsplits"}],"o":{"n":"self"}}],[11,"flow_down","","Set the child Canvasses flowing downwards.",399,{"i":[{"n":"self"},{"n":"listofsplits"}],"o":{"n":"self"}}],[11,"pad","","Set the padding for all edges of the area where child widgets will be placed.",399,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"padding","","Set the padding of the area where child widgets will be placed.",399,{"i":[{"n":"self"},{"n":"padding"}],"o":{"n":"self"}}],[11,"title_bar_color","","Set the color of the `Canvas`' `TitleBar` if it is visible.",399,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"init_state","","",399,null],[11,"style","","",399,null],[11,"default_x_position","","",399,{"i":[{"n":"self"},{"n":"ui"}],"o":{"n":"position"}}],[11,"default_y_position","","",399,{"i":[{"n":"self"},{"n":"ui"}],"o":{"n":"position"}}],[11,"drag_area","","The title bar area at which the Canvas can be clicked and dragged.",399,{"i":[{"n":"self"},{"n":"dimensions"},{"n":"style"},{"n":"theme"}],"o":{"g":["rect"],"n":"option"}}],[11,"kid_area","","The area of the widget below the title bar, upon which child widgets will be placed.",399,{"i":[{"n":"self"},{"n":"kidareaargs"}],"o":{"n":"kidarea"}}],[11,"update","","Update the state of the Canvas.",399,{"i":[{"n":"self"},{"n":"updateargs"}]}],[11,"padding","","Get the Padding for the Canvas' kid area.",400,{"i":[{"n":"self"},{"n":"theme"}],"o":{"n":"padding"}}],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",399,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",399,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",399,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"label","","",399,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",399,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",399,{"i":[{"n":"self"},{"n":"fontsize"}],"o":{"n":"self"}}],[0,"collapsible_area","conrod::widget","The `CollapsibleArea` widget and related items.",null,null],[3,"CollapsibleArea","conrod::widget::collapsible_area","A vertically collapsible area.",null,null],[3,"Ids","","The unique identifiers for the `CollapsibleArea`'s child widgets.",null,null],[12,"button","","",403,null],[12,"triangle","","",403,null],[12,"area","","",403,null],[3,"State","","The unique state cached within the widget graph for the `CollapsibleArea`.",null,null],[3,"Style","","Unique styling for the CollapsibleArea.",null,null],[12,"color","","Color of the Button's pressable area.",404,null],[12,"border","","Width of the border surrounding the button",404,null],[12,"border_color","","The color of the border.",404,null],[12,"label_color","","The color of the Button's label.",404,null],[12,"label_font_size","","The font size of the Button's label.",404,null],[12,"label_font_id","","The ID of the font used to display the label.",404,null],[3,"Area","","The area returned by the widget when the `CollapsibleArea` is open.",null,null],[12,"id","","A unique identifier for the user's widget.",405,null],[12,"collapsible_area_id","","The widget::Id for the collapsible area that produced this `Area`.",405,null],[12,"width","","The width of the `CollapsibleArea` that produced this `Area`.",405,null],[4,"Event","","The event returned when the text bar or triangle is pressed.",null,null],[13,"Open","","The collapsible area was opened.",406,null],[13,"Close","","The collapsible area was closed.",406,null],[11,"clone","","",407,{"i":[{"n":"self"}],"o":{"n":"collapsiblearea"}}],[11,"fmt","","",407,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `widget::Id` container.",403,{"i":[{"n":"generator"}],"o":{"n":"self"}}],[11,"clone","","",404,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fmt","","",404,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",404,{"o":{"n":"style"}}],[11,"eq","","",404,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",404,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"clone","","",406,{"i":[{"n":"self"}],"o":{"n":"event"}}],[11,"fmt","","",406,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",406,{"i":[{"n":"self"},{"n":"event"}],"o":{"n":"bool"}}],[11,"hash","","",406,null],[11,"clone","","",405,{"i":[{"n":"self"}],"o":{"n":"area"}}],[11,"fmt","","",405,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",405,{"i":[{"n":"self"},{"n":"area"}],"o":{"n":"bool"}}],[11,"ne","","",405,{"i":[{"n":"self"},{"n":"area"}],"o":{"n":"bool"}}],[11,"new","","Begin building the `CollapsibleArea` widget.",407,{"i":[{"n":"bool"},{"n":"str"}],"o":{"n":"self"}}],[11,"label_color","","Specify the color of the `CollapsibleArea`'s label.",407,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"label_font_size","","Specify the font size for the `CollapsibleArea`'s label.",407,{"i":[{"n":"self"},{"n":"fontsize"}],"o":{"n":"self"}}],[11,"label_font_id","","Specify the font for the `CollapsibleArea`'s label.",407,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"init_state","","",407,null],[11,"style","","",407,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"update","","",407,null],[11,"color","","",407,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"border","","",407,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"border_color","","",407,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"is_open","","Returns whether or not the `Event` results in an open collapsible area.",406,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set","","Set the user's given widget directly under the `CollapsibleArea`.",405,null],[0,"drop_down_list","conrod::widget","The `DropDownList` and related items.",null,null],[3,"DropDownList","conrod::widget::drop_down_list","Displays a given `Vec<String>` as a selectable drop down menu.",null,null],[3,"Style","","Styling for the DropDownList, necessary for constructing its renderable Element.",null,null],[12,"color","","Color of the widget.",408,null],[12,"border","","Width of the widget's border.",408,null],[12,"border_color","","Color of the widget's border.",408,null],[12,"label_color","","Color of the item labels.",408,null],[12,"label_font_size","","Font size for the item labels.",408,null],[12,"label_justify","","The label's typographic alignment over the x axis.",408,null],[12,"label_x","","The label's position relative to its `Button` along the x axis.",408,null],[12,"label_y","","The label's position relative to its `Button` along the y axis.",408,null],[12,"maybe_max_visible_height","","Maximum height of the Open menu before the scrollbar appears.",408,null],[12,"scrollbar_position","","The position of the scrollbar in the case that the list is scrollable.",408,null],[12,"scrollbar_width","","The width of the scrollbar in the case that the list is scrollable.",408,null],[12,"label_font_id","","The ID of the font used to display the labels.",408,null],[3,"State","","Represents the state of the DropDownList.",null,null],[4,"MaxHeight","","Representations of the max height of the visible area of the DropDownList.",null,null],[13,"Items","","Specify the max height as a number of items.",409,null],[13,"Scalar","","Specify the max height as an absolute scalar distance.",409,null],[6,"Idx","","The index of a selected item.",null,null],[6,"Len","","The number of items in a list.",null,null],[11,"clone","","",408,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fmt","","",408,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",408,{"o":{"n":"style"}}],[11,"eq","","",408,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",408,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"eq","","",409,{"i":[{"n":"self"},{"n":"maxheight"}],"o":{"n":"bool"}}],[11,"ne","","",409,{"i":[{"n":"self"},{"n":"maxheight"}],"o":{"n":"bool"}}],[11,"clone","","",409,{"i":[{"n":"self"}],"o":{"n":"maxheight"}}],[11,"fmt","","",409,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new DropDownList.",410,null],[11,"enabled","","Build the type's self.$($assignee).+ with the given $Type.",410,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"max_visible_items","","Set the maximum height of the DropDownList (before the scrollbar appears) as a number of items.",410,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"max_visible_height","","Set the maximum height of the DropDownList (before the scrollbar appears) as a scalar height.",410,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"self"}}],[11,"scrollbar_next_to","","Specifies that the list should be scrollable and should provide a `Scrollbar` to the right of the items.",410,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"scrollbar_on_top","","Specifies that the list should be scrollable and should provide a `Scrollbar` that hovers above the right edge of the items and automatically hides when the user is not scrolling.",410,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"no_scrollbar","","Even in the case that the list is scrollable, do not display a `Scrollbar`.",410,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"scrollbar_width","","Specify the width of the scrollbar.",410,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"label_font_id","","Specify the font used for displaying the label.",410,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"left_justify_label","","Align the labels to the left of their `Button`s' surface.",410,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"right_justify_label","","Align the labels to the right of their `Button`s' surface.",410,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"center_justify_label","","Center the labels to the their `Button`s' surface.",410,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"label_x","","Specify the label's position relatively to `Button` along the x axis.",410,{"i":[{"n":"self"},{"n":"relative"}],"o":{"n":"self"}}],[11,"label_y","","Specify the label's position relatively to `Button` along the y axis.",410,{"i":[{"n":"self"},{"n":"relative"}],"o":{"n":"self"}}],[11,"init_state","","",410,null],[11,"style","","",410,null],[11,"update","","Update the state of the DropDownList.",410,null],[11,"button_style","","Style for a `Button` given this `Style`'s current state.",408,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"style"}}],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",410,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",410,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",410,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",410,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",410,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",410,{"i":[{"n":"self"},{"n":"fontsize"}],"o":{"n":"self"}}],[0,"envelope_editor","conrod::widget","The `EnvelopeEditor` widget and related items.",null,null],[3,"EnvelopeEditor","conrod::widget::envelope_editor","Used for editing a series of 2D Points on a cartesian (X, Y) plane within some given range.",null,null],[12,"skew_y_range","","The value skewing for the envelope's y-axis. This is useful for displaying exponential ranges such as frequency.",411,null],[3,"Style","","Styling for the EnvelopeEditor, necessary for constructing its renderable Element.",null,null],[12,"color","","Coloring for the EnvelopeEditor's BorderedRectangle.",412,null],[12,"border","","Thickness of the BorderedRectangle's border.",412,null],[12,"border_color","","Color of the border.",412,null],[12,"label_color","","Color of the label.",412,null],[12,"label_font_size","","The font size of the EnvelopeEditor's label if one was given.",412,null],[12,"value_font_size","","The font size of the value label.",412,null],[12,"point_radius","","The radius of the envelope points.",412,null],[12,"line_thickness","","The thickness of the envelope lines.",412,null],[12,"label_font_id","","The ID of the font used to display the label.",412,null],[3,"State","","Represents the state of the EnvelopeEditor widget.",null,null],[4,"Event","","The kinds of events that may be yielded by the `EnvelopeEditor`.",null,null],[13,"AddPoint","","Insert a new point.",413,null],[12,"i","conrod::widget::envelope_editor::Event","The index at which the point should be inserted.",413,null],[12,"point","","The new point.",413,null],[13,"RemovePoint","conrod::widget::envelope_editor","Remove a point.",413,null],[12,"i","conrod::widget::envelope_editor::Event","The index of the point that should be removed.",413,null],[13,"MovePoint","conrod::widget::envelope_editor","Move a point.",413,null],[12,"i","conrod::widget::envelope_editor::Event","The index of the point that should be moved.",413,null],[12,"x","","The point's new x value.",413,null],[12,"y","","The point's new y value.",413,null],[8,"EnvelopePoint","conrod::widget::envelope_editor","`EnvPoint` must be implemented for any type that is used as a 2D point within the EnvelopeEditor.",null,null],[16,"X","","A value on the X-axis of the envelope.",414,null],[16,"Y","","A value on the Y-axis of the envelope.",414,null],[10,"get_x","","Return the X value.",414,null],[10,"get_y","","Return the Y value.",414,null],[10,"set_x","","Set the X value.",414,null],[10,"set_y","","Set the Y value.",414,null],[11,"get_curve","","Return the bezier curve depth (-1. to 1.) for the next interpolation.",414,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"set_curve","","Set the bezier curve depth (-1. to 1.) for the next interpolation.",414,{"i":[{"n":"self"},{"n":"f32"}]}],[10,"new","","Create a new EnvPoint.",414,null],[11,"clone","","",412,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fmt","","",412,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",412,{"o":{"n":"style"}}],[11,"eq","","",412,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",412,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"get_x","","Return the X value.",381,{"i":[{"n":"self"}],"o":{"n":"scalar"}}],[11,"get_y","","Return the Y value.",381,{"i":[{"n":"self"}],"o":{"n":"scalar"}}],[11,"set_x","","Return the X value.",381,{"i":[{"n":"self"},{"n":"scalar"}]}],[11,"set_y","","Return the Y value.",381,{"i":[{"n":"self"},{"n":"scalar"}]}],[11,"new","","Create a new Envelope Point.",381,{"i":[{"n":"scalar"},{"n":"scalar"}],"o":{"n":"point"}}],[11,"new","","Construct an EnvelopeEditor widget.",411,null],[11,"label_font_id","","Specify the font used for displaying the label.",411,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"point_radius","","Build the type's self.$($assignee).+ with the given $Type.",411,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"line_thickness","","Build the type's self.$($assignee).+ with the given $Type.",411,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"value_font_size","","Build the type's self.$($assignee).+ with the given $Type.",411,{"i":[{"n":"self"},{"n":"fontsize"}],"o":{"n":"self"}}],[11,"skew_y","","Build the type's self.$($assignee).+ with the given $Type.",411,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"self"}}],[11,"enabled","","Build the type's self.$($assignee).+ with the given $Type.",411,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"clone","","",413,{"i":[{"n":"self"}],"o":{"n":"event"}}],[11,"fmt","","",413,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"update","","Update the given `envelope` in accordance with the `Event`.",413,{"i":[{"n":"self"},{"n":"vec"}]}],[11,"init_state","","",411,null],[11,"style","","",411,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"update","","Update the `EnvelopeEditor` in accordance to the latest input and call the given `react` function if necessary.",411,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",411,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",411,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",411,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",411,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",411,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",411,{"i":[{"n":"self"},{"n":"fontsize"}],"o":{"n":"self"}}],[0,"file_navigator","conrod::widget","A widget for navigating through through a file system. Generally inspired by Finder.",null,null],[3,"FileNavigator","conrod::widget::file_navigator","A widget for navigating and interacting with a file system.",null,null],[12,"style","","Unique styling for the widget.",415,null],[12,"starting_directory","","The first directory shown for the `FileNavigator`.",415,null],[12,"types","","Only display files of the given type.",415,null],[3,"State","","Unique state stored within the widget graph for each `FileNavigator`.",null,null],[3,"Directory","","Represents the state for a single directory.",null,null],[3,"Style","","Unique styling for the widget.",null,null],[12,"color","","Color of the selected entries.",416,null],[12,"unselected_color","","The color of the unselected entries.",416,null],[12,"text_color","","The color of the directory and file names.",416,null],[12,"font_size","","The font size for the directory and file names.",416,null],[12,"column_width","","The default width of a single directory view.",416,null],[12,"resize_handle_width","","The width of the bar that separates each directory in the stack and allows for re-sizing.",416,null],[4,"Types","","A type for specifying the types of files to be shown by a `FileNavigator`.",null,null],[13,"All","","Indicates that files of all types should be shown.",417,null],[13,"WithExtension","","A list of types of files that are accepted by the `FileNavigator`.",417,null],[13,"Directories","","Indicates only directories should be shown",417,null],[4,"Event","","The kinds of events that the `FileNavigator` may produce.",null,null],[13,"ChangeDirectory","","The directory at the top of the stack has changed.",418,null],[13,"ChangeSelection","","The selection of files in the top of the stack has changed.",418,null],[13,"Click","","A `Click` event occurred over a selection of entries.",418,null],[13,"DoubleClick","","A file was double clicked.",418,null],[13,"Press","","A `Press` event occurred over a selection of entries.",418,null],[13,"Release","","A `Release` event occurred over a selection of entries.",418,null],[0,"directory_view","","Lists the contents of a single directory.",null,null],[3,"DirectoryView","conrod::widget::file_navigator::directory_view","For viewing, selecting, double-clicking, etc the contents of a directory.",null,null],[12,"style","","Unique styling for the widget.",419,null],[12,"directory","","The path of the directory to display.",419,null],[12,"types","","Only display files of the given type.",419,null],[3,"State","","Unique state stored within the widget graph for each `FileNavigator`.",null,null],[3,"Entry","","Data stored for each `File` in the `State`.",null,null],[3,"Style","","Unique styling for the widget.",null,null],[12,"color","","Color of the selected entries.",420,null],[12,"unselected_color","","The color of the unselected entries.",420,null],[12,"text_color","","The color of the directory and file names.",420,null],[12,"font_size","","The font size for the directory and file names.",420,null],[4,"Event","","The kinds of `Event`s produced by the `DirectoryView`.",null,null],[13,"Selection","","Some change in the `Selection` occurred. This represents the new full selection.",421,null],[13,"Click","","One or more entries have been double clicked.",421,null],[13,"DoubleClick","","One or more entries have been double clicked.",421,null],[13,"Press","","A `Press` event occurred while the given entries were selected.",421,null],[13,"Release","","A `Release` event occurred while the given entries were selected.",421,null],[11,"clone","","",422,{"i":[{"n":"self"}],"o":{"n":"entry"}}],[11,"fmt","","",422,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",422,{"i":[{"n":"self"},{"n":"entry"}],"o":{"n":"bool"}}],[11,"ne","","",422,{"i":[{"n":"self"},{"n":"entry"}],"o":{"n":"bool"}}],[11,"clone","","",420,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fmt","","",420,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",420,{"o":{"n":"style"}}],[11,"eq","","",420,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",420,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"clone","","",421,{"i":[{"n":"self"}],"o":{"n":"event"}}],[11,"new","","Begin building a `DirectoryNavigator` widget that displays only files of the given types.",419,{"i":[{"n":"path"},{"n":"types"}],"o":{"n":"self"}}],[11,"unselected_color","","The color of the unselected entries within each `DirectoryView`.",419,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"text_color","","The color of the `Text` used to display the file names.",419,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"show_hidden_files","","Whether to show hidden files and directories",419,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"font_size","","Build the type's self.$($assignee).+ with the given $Type.",419,{"i":[{"n":"self"},{"n":"fontsize"}],"o":{"n":"self"}}],[11,"init_state","","",419,null],[11,"style","","",419,null],[11,"update","","",419,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",419,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"clone","conrod::widget::file_navigator","",417,{"i":[{"n":"self"}],"o":{"n":"types"}}],[11,"fmt","","",423,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",423,{"i":[{"n":"self"},{"n":"directory"}],"o":{"n":"bool"}}],[11,"ne","","",423,{"i":[{"n":"self"},{"n":"directory"}],"o":{"n":"bool"}}],[11,"clone","","",416,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fmt","","",416,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",416,{"o":{"n":"style"}}],[11,"eq","","",416,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",416,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"clone","","",418,{"i":[{"n":"self"}],"o":{"n":"event"}}],[11,"fmt","","",418,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Begin building a `FileNavigator` widget that displays only files of the given types.",415,{"i":[{"n":"path"},{"n":"types"}],"o":{"n":"self"}}],[11,"all","","Begin building a `FileNavigator` that will display all file types.",415,{"i":[{"n":"path"}],"o":{"n":"self"}}],[11,"with_extension","","Begin building a `FileNavigator` that will only display files whose extensions match one of those within the given extension list.",415,null],[11,"directories","","Begin building a `FileNavigator` that only displays directories.",415,{"i":[{"n":"path"}],"o":{"n":"self"}}],[11,"unselected_color","","The color of the unselected entries within each `DirectoryView`.",415,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"text_color","","The color of the `Text` used to display the file names.",415,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"show_hidden_files","","Whether to show hidden files and directories.",415,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"font_size","","Build the type's self.$($assignee).+ with the given $Type.",415,{"i":[{"n":"self"},{"n":"fontsize"}],"o":{"n":"self"}}],[11,"init_state","","",415,null],[11,"style","","",415,null],[11,"update","","Update the state of the Button.",415,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",415,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[0,"grid","conrod::widget","A widget for displaying a grid of lines across two axes.",null,null],[3,"Grid","conrod::widget::grid","A widget for displaying a grid of lines across two axes.",null,null],[12,"common","","Builder parameters that are common to all `Widget`s.",424,null],[12,"style","","Unique styling parameters for the `Grid` widget.",424,null],[12,"min_x","","The minimum visible bound along the x axis.",424,null],[12,"max_x","","The maximum visible bound along the x axis.",424,null],[12,"min_y","","The minimum visible bound along the y axis.",424,null],[12,"max_y","","The maximum visible bound along the y axis.",424,null],[12,"x_offset","","An offset for all vertical lines distributed across the x axis.",424,null],[12,"y_offset","","An offset for all horizontal lines distributed across the y axis.",424,null],[12,"lines","","An iterator yielding each sequence of lines to be distributed across the grid.",424,null],[3,"Style","","Unique styling parameters for the `Grid` widget.",null,null],[12,"color","","The color of the grid lines.",425,null],[12,"thickness","","The thickness of the grid lines.",425,null],[3,"Lines","","A series of lines distributed across an axis.",null,null],[12,"step","","The distance that separates each line.",426,null],[12,"offset","","An optional offset for the lines along they're axis.",426,null],[12,"thickness","","The thickness of each of the lines drawn.",426,null],[12,"color","","The color of each of the lines drawn.",426,null],[3,"State","","Unique state for the `Grid` retained between updates.",null,null],[4,"Axis","","A series of lines distributed over an axis.",null,null],[13,"X","","Vertical lines that are spread across the x axis.",427,null],[13,"Y","","Horizontal lines that are spread across the y axis.",427,null],[11,"clone","","",424,{"i":[{"n":"self"}],"o":{"n":"grid"}}],[11,"fmt","","",424,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",425,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fmt","","",425,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",425,{"o":{"n":"style"}}],[11,"eq","","",425,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",425,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"clone","","",426,{"i":[{"n":"self"}],"o":{"n":"lines"}}],[11,"fmt","","",426,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",427,{"i":[{"n":"self"}],"o":{"n":"axis"}}],[11,"fmt","","",427,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"step","","Begin building a new set of lines for the grid `step` distance apart.",426,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"offset","","Specify an offset for the grid.",426,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"self"}}],[11,"thickness","","Specify a unique thickness for these lines.",426,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"color","","Use the specified color to uniquely color the this set of lines.",426,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"x","","Move the lines over the X axis.",426,{"i":[{"n":"self"}],"o":{"n":"axis"}}],[11,"y","","Move the lines over the Y axis.",426,{"i":[{"n":"self"}],"o":{"n":"axis"}}],[11,"new","","Begin building a new `PlotPath` widget instance.",424,{"i":[{"n":"x"},{"n":"x"},{"n":"y"},{"n":"y"},{"n":"i"}],"o":{"n":"grid"}}],[11,"x_offset","","Specify an offset for all vertical lines placed along the X axis.",424,{"i":[{"n":"self"},{"n":"x"}],"o":{"n":"self"}}],[11,"y_offset","","Specify an offset for all horizontal lines placed along the Y axis.",424,{"i":[{"n":"self"},{"n":"y"}],"o":{"n":"self"}}],[11,"init_state","","",424,null],[11,"style","","",424,null],[11,"update","","Update the state of the PlotPath.",424,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",424,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[0,"list","conrod::widget","A helper widget, useful for instantiating a sequence of widgets in a vertical list.",null,null],[3,"List","conrod::widget::list","A helper widget, useful for instantiating a sequence of widgets in a vertical list.",null,null],[12,"common","","Common widget building params for the `List`.",428,null],[12,"style","","Unique styling for the `List`.",428,null],[12,"item_instantiation","","Whether all or only visible items should be instantiated.",428,null],[3,"Fixed","","A type that implements `ItemSize` for `List`s whose `Item`s are a fixed size and known prior to setting the widgets for each item.",null,null],[12,"length","","The length of each item in the direction that the list flows.",429,null],[3,"Dynamic","","A type that implements `ItemSize` for `List`s whose `Item`s' length are unknown until setting the widget for each item.",null,null],[3,"Style","","Unique styling for the `List`.",null,null],[12,"scrollbar_thickness","","The width of the scrollbar if it is visible.",430,null],[12,"scrollbar_color","","The color of the scrollbar if it is visible.",430,null],[12,"scrollbar_position","","The location of the `List`'s scrollbar.",430,null],[3,"State","","Represents the state of the List widget.",null,null],[3,"Item","","The data necessary for instantiating a single item within a `List`.",null,null],[12,"i","","The index of the item within the list.",431,null],[12,"widget_id","","The id generated for the widget.",431,null],[12,"last_id","","The id used for the previous item's widget.",431,null],[3,"Scrollbar","","A wrapper around a `List`'s `Scrollbar` and its `widget::Id`.",null,null],[3,"Items","","An `Iterator` yielding each `Item` in the list.",null,null],[4,"Up","","Items flow from bottom to top.",null,null],[4,"Down","","Items flow from top to bottom.",null,null],[4,"Left","","Items flow from right to left.",null,null],[4,"Right","","Items flow from left to right.",null,null],[4,"ItemInstantiation","","The way in which a `List` should instantiate its `Item`s.",null,null],[13,"All","","Instantiate an `Item` for every element, regardless of visibility.",432,null],[13,"OnlyVisible","","Only instantiate visible `Item`s.",432,null],[4,"ScrollbarPosition","","If the `List` is scrollable, this describes how th `Scrollbar` should be positioned.",null,null],[13,"NextTo","","To the right of the items (reduces the item width to fit).",433,null],[13,"OnTop","","On top of the right edge of the items with auto_hide activated.",433,null],[8,"Direction","","The direction in which the list is laid out.",null,null],[16,"Axis","","The direction along which the `Scrollbar` is laid out.",434,null],[10,"ranges","","For some given `Rect`, returns the parallel and perpendicular ranges respectively.",434,null],[10,"scrollbar","","Begin building the scrollbar for the `List`.",434,{"i":[{"n":"id"}],"o":{"n":"scrollbar"}}],[10,"common_scroll","","Borrow the scroll state associated with this `Direction`'s axis.",434,{"i":[{"n":"commonbuilder"}],"o":{"g":["scroll"],"n":"option"}}],[10,"position_item","","Positions the given widget.",434,{"i":[{"n":"w"},{"g":["id"],"n":"option"},{"n":"id"},{"n":"scalar"}],"o":{"n":"w"}}],[10,"position_scroll_trigger","","Position the `Rectangle` used for scrolling `List`s with fixed `Item` sizes.",434,{"i":[{"n":"w"},{"n":"id"}],"o":{"n":"w"}}],[10,"scroll_list_kids","","Calls the suitable `scroll_kids_<axis>` method on the `List`.",434,{"i":[{"n":"list"}],"o":{"n":"list"}}],[10,"size_breadth","","Size the widget given its breadth.",434,{"i":[{"n":"w"},{"n":"scalar"}],"o":{"n":"w"}}],[10,"size_length","","Size the widget given its length.",434,{"i":[{"n":"w"},{"n":"scalar"}],"o":{"n":"w"}}],[8,"ItemSize","","The way in which the `List`'s items are sized. E.g. `Fired` or `Dynamic`.",null,null],[10,"update_list","","Update the `List` widget.",435,null],[10,"size_item","","Set the size for the given item `widget` and return it.",435,{"i":[{"n":"self"},{"n":"w"},{"n":"scalar"}],"o":{"n":"w"}}],[11,"clone","","",428,{"i":[{"n":"self"}],"o":{"n":"list"}}],[11,"clone","","",436,{"i":[{"n":"self"}],"o":{"n":"up"}}],[11,"fmt","","",436,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",437,{"i":[{"n":"self"}],"o":{"n":"down"}}],[11,"fmt","","",437,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",438,{"i":[{"n":"self"}],"o":{"n":"left"}}],[11,"fmt","","",438,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",439,{"i":[{"n":"self"}],"o":{"n":"right"}}],[11,"fmt","","",439,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",429,{"i":[{"n":"self"}],"o":{"n":"fixed"}}],[11,"fmt","","",429,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",440,{"i":[{"n":"self"}],"o":{"n":"dynamic"}}],[11,"fmt","","",440,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",430,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fmt","","",430,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",430,{"o":{"n":"style"}}],[11,"eq","","",430,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",430,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"clone","","",431,{"i":[{"n":"self"}],"o":{"n":"item"}}],[11,"fmt","","",431,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",432,{"i":[{"n":"self"}],"o":{"n":"iteminstantiation"}}],[11,"fmt","","",432,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",432,{"i":[{"n":"self"},{"n":"iteminstantiation"}],"o":{"n":"bool"}}],[11,"clone","","",433,{"i":[{"n":"self"}],"o":{"n":"scrollbarposition"}}],[11,"fmt","","",433,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",433,{"i":[{"n":"self"},{"n":"scrollbarposition"}],"o":{"n":"bool"}}],[11,"new","","Begin building a new `List`.",428,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"flow_left","","Begin building a new `List` flowing from right to left.",428,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"flow_right","","Begin building a new `List` flowing from left to right.",428,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"flow_up","","Begin building a new `List` flowing from bottom to top.",428,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"flow_down","","Begin building a new `List` flowing from top to bottom.",428,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"from_item_size","","Begin building a new `List` given some direction and item size.",428,{"i":[{"n":"usize"},{"n":"s"}],"o":{"n":"self"}}],[11,"item_size","","Specify a fixed item size, where size is a `Scalar` in the direction that the `List` is flowing. When a `List` is constructed with this method, all items will have a fixed, equal length.",428,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"g":["fixed"],"n":"list"}}],[11,"instantiate_all_items","","Indicates that an `Item` should be instantiated for every element in the list, regardless of whether or not the `Item` would be visible.",428,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"instantiate_only_visible_items","","Indicates that only `Item`s that are visible should be instantiated. This ensures that we avoid bloating the widget graph with unnecessary nodes and in turn keep traversal times to a minimum.",428,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"scrollbar_next_to","","Specifies that the `List` should be scrollable and should provide a `Scrollbar` to the right of the items.",428,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"scrollbar_on_top","","Specifies that the `List` should be scrollable and should provide a `Scrollbar` that hovers above the right edge of the items and automatically hides when the user is not scrolling.",428,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"scrollbar_thickness","","The width of the `Scrollbar`.",428,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"scrollbar_color","","The color of the `Scrollbar`.",428,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"init_state","","",428,null],[11,"style","","",428,null],[11,"update","","",428,null],[11,"next","","Yield the next `Item` in the list.",441,{"i":[{"n":"self"},{"n":"ui"}],"o":{"g":["item"],"n":"option"}}],[11,"set","","Sets the given widget as the widget to use for the item.",431,null],[11,"width","","The width of the `Item`.",431,{"i":[{"n":"self"}],"o":{"n":"scalar"}}],[11,"height","","The height of the `Item`.",431,{"i":[{"n":"self"}],"o":{"n":"scalar"}}],[11,"width","","The width of the `Item`.",431,{"i":[{"n":"self"}],"o":{"n":"scalar"}}],[11,"height","","The height of the `Item`.",431,{"i":[{"n":"self"}],"o":{"n":"scalar"}}],[11,"height","","The height of the `Item`.",431,{"i":[{"n":"self"}],"o":{"n":"scalar"}}],[11,"width","","The width of the `Item`.",431,{"i":[{"n":"self"}],"o":{"n":"scalar"}}],[11,"height","","The height of the `Item`.",431,{"i":[{"n":"self"}],"o":{"n":"scalar"}}],[11,"width","","The width of the `Item`.",431,{"i":[{"n":"self"}],"o":{"n":"scalar"}}],[11,"set","","Set the `Scrollbar` within the given `Ui`.",442,{"i":[{"n":"self"},{"n":"uicell"}]}],[11,"update_list","","",429,null],[11,"size_item","","",429,{"i":[{"n":"self"},{"n":"w"},{"n":"scalar"}],"o":{"n":"w"}}],[11,"update_list","","",440,null],[11,"size_item","","",440,{"i":[{"n":"self"},{"n":"w"},{"n":"scalar"}],"o":{"n":"w"}}],[11,"ranges","","",437,null],[11,"scrollbar","","",437,{"i":[{"n":"id"}],"o":{"n":"scrollbar"}}],[11,"common_scroll","","",437,{"i":[{"n":"commonbuilder"}],"o":{"g":["scroll"],"n":"option"}}],[11,"scroll_list_kids","","",437,{"i":[{"n":"list"}],"o":{"n":"list"}}],[11,"position_item","","",437,{"i":[{"n":"w"},{"g":["id"],"n":"option"},{"n":"id"},{"n":"scalar"}],"o":{"n":"w"}}],[11,"position_scroll_trigger","","",437,{"i":[{"n":"w"},{"n":"id"}],"o":{"n":"w"}}],[11,"size_breadth","","",437,{"i":[{"n":"w"},{"n":"scalar"}],"o":{"n":"w"}}],[11,"size_length","","",437,{"i":[{"n":"w"},{"n":"scalar"}],"o":{"n":"w"}}],[11,"ranges","","",436,null],[11,"scrollbar","","",436,{"i":[{"n":"id"}],"o":{"n":"scrollbar"}}],[11,"common_scroll","","",436,{"i":[{"n":"commonbuilder"}],"o":{"g":["scroll"],"n":"option"}}],[11,"scroll_list_kids","","",436,{"i":[{"n":"list"}],"o":{"n":"list"}}],[11,"position_item","","",436,{"i":[{"n":"w"},{"g":["id"],"n":"option"},{"n":"id"},{"n":"scalar"}],"o":{"n":"w"}}],[11,"position_scroll_trigger","","",436,{"i":[{"n":"w"},{"n":"id"}],"o":{"n":"w"}}],[11,"size_breadth","","",436,{"i":[{"n":"w"},{"n":"scalar"}],"o":{"n":"w"}}],[11,"size_length","","",436,{"i":[{"n":"w"},{"n":"scalar"}],"o":{"n":"w"}}],[11,"ranges","","",438,null],[11,"scrollbar","","",438,{"i":[{"n":"id"}],"o":{"n":"scrollbar"}}],[11,"common_scroll","","",438,{"i":[{"n":"commonbuilder"}],"o":{"g":["scroll"],"n":"option"}}],[11,"scroll_list_kids","","",438,{"i":[{"n":"list"}],"o":{"n":"list"}}],[11,"position_item","","",438,{"i":[{"n":"w"},{"g":["id"],"n":"option"},{"n":"id"},{"n":"scalar"}],"o":{"n":"w"}}],[11,"position_scroll_trigger","","",438,{"i":[{"n":"w"},{"n":"id"}],"o":{"n":"w"}}],[11,"size_breadth","","",438,{"i":[{"n":"w"},{"n":"scalar"}],"o":{"n":"w"}}],[11,"size_length","","",438,{"i":[{"n":"w"},{"n":"scalar"}],"o":{"n":"w"}}],[11,"ranges","","",439,null],[11,"scrollbar","","",439,{"i":[{"n":"id"}],"o":{"n":"scrollbar"}}],[11,"common_scroll","","",439,{"i":[{"n":"commonbuilder"}],"o":{"g":["scroll"],"n":"option"}}],[11,"scroll_list_kids","","",439,{"i":[{"n":"list"}],"o":{"n":"list"}}],[11,"position_item","","",439,{"i":[{"n":"w"},{"g":["id"],"n":"option"},{"n":"id"},{"n":"scalar"}],"o":{"n":"w"}}],[11,"position_scroll_trigger","","",439,{"i":[{"n":"w"},{"n":"id"}],"o":{"n":"w"}}],[11,"size_breadth","","",439,{"i":[{"n":"w"},{"n":"scalar"}],"o":{"n":"w"}}],[11,"size_length","","",439,{"i":[{"n":"w"},{"n":"scalar"}],"o":{"n":"w"}}],[0,"list_select","conrod::widget","A wrapper around the `List` widget providing the ability to select one or more items.",null,null],[3,"ListSelect","conrod::widget::list_select","A wrapper around the `List` widget that handles single and multiple selection logic.",null,null],[3,"State","","Represents the state of the ListSelect.",null,null],[3,"Events","","An iterator-like type for yielding `ListSelect` `Event`s.",null,null],[3,"Single","","A single item selection `Mode` for the `ListSelect`.",null,null],[3,"Multiple","","A selection `Mode` for the `ListSelect` that allows selecting more than one item at a time.",null,null],[4,"ListDirection","","The direction in which the list flows.",null,null],[13,"Forward","","The direction flowing from the start of the list to the end of the list.",443,null],[13,"Backward","","The direction flowing from the end of the list to the start of the list.",443,null],[4,"Event","","The kind of events that the `ListSelect` may `react` to. Provides tuple(s) of index in list and string representation of selection",null,null],[13,"Item","","The next `Item` is ready for instantiation.",444,null],[13,"Selection","","A change in selection has occurred.",444,null],[13,"Press","","A button press occurred while the widget was capturing the mouse.",444,null],[13,"Release","","A button release occurred while the widget was capturing the mouse.",444,null],[13,"Click","","A click occurred while the widget was capturing the mouse.",444,null],[13,"DoubleClick","","A double click occurred while the widget was capturing the mouse.",444,null],[4,"Selection","","Represents some change in item selection for a `ListSelect` in `Multiple` mode.",null,null],[13,"Add","","Items which have been added to the selection.",445,null],[13,"Remove","","Items which have been removed from the selection.",445,null],[6,"PendingEvents","","Buffer used for storing events that have been produced but are yet to be yielded.",null,null],[8,"Direction","","A trait that extends the `List` `Direction` trait with behaviour necessary for the `ListSelect` widget.",null,null],[10,"key_direction","","Maps a given `key` to a direction along the list.",446,{"i":[{"n":"key"}],"o":{"g":["listdirection"],"n":"option"}}],[8,"Mode","","Allows the `ListSelect` to be generic over `Single` and `Multiple` selection modes.",null,null],[16,"Selection","","The data associated with the `Mode`s `Event::Selection`.",447,null],[10,"click_selection","","Update the `PendingEvents` in accordance with the given `Click` event.",447,{"i":[{"n":"self"},{"n":"click"},{"n":"usize"},{"n":"usize"},{"n":"state"},{"n":"f"},{"n":"pendingevents"}]}],[10,"key_selection","","Update the `PendingEvents` in accordance with the given `KeyPress` event.",447,{"i":[{"n":"self"},{"n":"keypress"},{"n":"usize"},{"n":"usize"},{"n":"state"},{"n":"f"},{"n":"pendingevents"}]}],[11,"clone","","",448,{"i":[{"n":"self"}],"o":{"n":"listselect"}}],[11,"clone","","",443,{"i":[{"n":"self"}],"o":{"n":"listdirection"}}],[11,"fmt","","",443,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",444,{"i":[{"n":"self"}],"o":{"n":"event"}}],[11,"fmt","","",444,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",449,{"i":[{"n":"self"}],"o":{"n":"single"}}],[11,"clone","","",450,{"i":[{"n":"self"}],"o":{"n":"multiple"}}],[11,"clone","","",445,{"i":[{"n":"self"}],"o":{"n":"selection"}}],[11,"fmt","","",445,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"update_bool_slice","","Update the given slice of `bool`s with this `Selection`.",445,null],[11,"update_index_set","","Update the given set of selected indices with this `Selection`.",445,{"i":[{"n":"self"},{"n":"hashset"}]}],[11,"single","","Construct a new ListSelect, allowing one selected item at a time.",448,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"multiple","","Construct a new ListSelect, allowing multiple selected items.",448,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"flow_down","","Flows items from top to bottom.",448,{"i":[{"n":"self"}],"o":{"g":["down"],"n":"listselect"}}],[11,"flow_right","","Flows items from left to right.",448,{"i":[{"n":"self"}],"o":{"g":["right"],"n":"listselect"}}],[11,"flow_left","","Flows items from right to left.",448,{"i":[{"n":"self"}],"o":{"g":["left"],"n":"listselect"}}],[11,"flow_up","","Flows items from bottom to top.",448,{"i":[{"n":"self"}],"o":{"g":["up"],"n":"listselect"}}],[11,"item_size","","Specify a fixed item size, where size is a `Scalar` in the direction that the `List` is flowing. When a `List` is constructed with this method, all items will have a fixed, equal length.",448,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"g":["fixed"],"n":"listselect"}}],[11,"new","","Begin building a new `ListSelect` with the given mode.",448,{"i":[{"n":"usize"},{"n":"m"}],"o":{"n":"self"}}],[11,"scrollbar_next_to","","Specifies that the `List` should be scrollable and should provide a `Scrollbar` to the right of the items.",448,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"scrollbar_on_top","","Specifies that the `List` should be scrollable and should provide a `Scrollbar` that hovers above the right edge of the items and automatically hides when the user is not scrolling.",448,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"scrollbar_thickness","","The width of the `Scrollbar`.",448,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"scrollbar_color","","The color of the `Scrollbar`.",448,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"instantiate_all_items","","Indicates that an `Item` should be instatiated for every element in the list, regardless of whether or not the `Item` would be visible.",448,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"instantiate_only_visible_items","","Indicates that only `Item`s that are visible should be instantiated. This ensures that we avoid bloating the widget graph with unnecessary nodes and in turn keep traversal times to a minimum.",448,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"init_state","","",448,null],[11,"style","","",448,null],[11,"update","","Update the state of the ListSelect.",448,null],[11,"next","","Yield the next `Event`.",451,{"i":[{"n":"self"},{"n":"ui"},{"n":"f"}],"o":{"g":["event"],"n":"option"}}],[11,"click_selection","","",449,{"i":[{"n":"self"},{"n":"click"},{"n":"usize"},{"n":"usize"},{"n":"state"},{"n":"f"},{"n":"pendingevents"}]}],[11,"key_selection","","",449,{"i":[{"n":"self"},{"n":"keypress"},{"n":"usize"},{"n":"usize"},{"n":"state"},{"n":"f"},{"n":"pendingevents"}]}],[11,"click_selection","","",450,{"i":[{"n":"self"},{"n":"click"},{"n":"usize"},{"n":"usize"},{"n":"state"},{"n":"f"},{"n":"pendingevents"}]}],[11,"key_selection","","",450,{"i":[{"n":"self"},{"n":"keypress"},{"n":"usize"},{"n":"usize"},{"n":"state"},{"n":"f"},{"n":"pendingevents"}]}],[11,"key_direction","conrod::widget::list","",437,{"i":[{"n":"key"}],"o":{"g":["listdirection"],"n":"option"}}],[11,"key_direction","","",436,{"i":[{"n":"key"}],"o":{"g":["listdirection"],"n":"option"}}],[11,"key_direction","","",439,{"i":[{"n":"key"}],"o":{"g":["listdirection"],"n":"option"}}],[11,"key_direction","","",438,{"i":[{"n":"key"}],"o":{"g":["listdirection"],"n":"option"}}],[0,"matrix","conrod::widget","A helper widget for laying out child widgets in the form of a grid.",null,null],[3,"Matrix","conrod::widget::matrix","Draw a matrix of any rectangular widget type, where the matrix will provide a function with the widget number, it's `rows` and `cols` position, the width and height for the widget and the location at which the widget should be drawn.",null,null],[3,"State","","The state of the Matrix, to be cached within the `Ui`'s widget `Graph`.",null,null],[3,"Style","","Unique styling for the `Matrix`.",null,null],[12,"cell_pad_w","","The width of the padding for each matrix element's \"cell\".",452,null],[12,"cell_pad_h","","The height of the padding for each matrix element's \"cell\".",452,null],[3,"Elements","","The event type yielded by the `Matrix`.",null,null],[3,"Element","","Data necessary for instantiating a widget for a single `Matrix` element.",null,null],[12,"widget_id","","The id generated for the widget.",453,null],[12,"row","","The row number for the `Element`.",453,null],[12,"col","","The column number for the `Element`.",453,null],[12,"w","","The width of the element.",453,null],[12,"h","","The height of the element.",453,null],[12,"rel_x","","The x position of the element relative to the centre of the `Matrix`.",453,null],[12,"rel_y","","The y position of the element relative to the centre of the `Matrix`.",453,null],[6,"WidgetNum","","The number of the widget.",null,null],[6,"ColNum","","A column index.",null,null],[6,"RowNum","","A row index.",null,null],[6,"Width","","The width of an element.",null,null],[6,"Height","","The height of an element.",null,null],[6,"PosX","","The position of an element along the x axis.",null,null],[6,"PosY","","The position of an element along the y axis.",null,null],[11,"clone","","",454,{"i":[{"n":"self"}],"o":{"n":"matrix"}}],[11,"clone","","",452,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fmt","","",452,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",452,{"o":{"n":"style"}}],[11,"eq","","",452,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",452,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"fmt","","",455,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",453,{"i":[{"n":"self"}],"o":{"n":"element"}}],[11,"fmt","","",453,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a widget matrix context.",454,{"i":[{"n":"usize"},{"n":"usize"}],"o":{"n":"self"}}],[11,"cell_padding","","A builder method for adding padding to the cell.",454,{"i":[{"n":"self"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"init_state","","",454,null],[11,"style","","",454,null],[11,"update","","Update the state of the Matrix.",454,null],[11,"next","","Yield the next `Element`.",455,{"i":[{"n":"self"},{"n":"ui"}],"o":{"g":["element"],"n":"option"}}],[11,"set","","Sets the given widget as the widget to use for the item.",453,null],[0,"graph","conrod::widget","A widget for viewing and controlling graph structures.",null,null],[3,"Layout","conrod::widget::graph","Stores the layout of all nodes within the graph.",null,null],[3,"Graph","","A widget used for visualising and manipulating Graph types.",null,null],[12,"common","","Data necessary and common for all widget builder types.",456,null],[12,"style","","Unique styling for the Graph.",456,null],[12,"nodes","","All nodes within the graph that the widget is to represent.",456,null],[12,"edges","","All edges within the graph.",456,null],[12,"layout","","The position of each node within the graph.",456,null],[3,"Style","","Unique styling for the BorderedRectangle widget.",null,null],[12,"background_color","","Shape styling for the inner rectangle.",457,null],[3,"State","","Unique state for the `Graph`.",null,null],[3,"NodeSocket","","Represents a socket connection on a node.",null,null],[12,"id","","The unique identifier for the node.",458,null],[12,"socket_index","","The index of the socket on one side of the node.",458,null],[3,"Camera","","The camera used to view the graph.",null,null],[3,"Session","","A context for moving through the modes of graph widget instantiation in a type-safe manner.",null,null],[3,"SessionEvents","","The first stage of the graph's Session event.",null,null],[3,"SessionNodes","","The second stage of the graph's Session event.",null,null],[3,"SessionEdges","","The third stage of the graph's Session event.",null,null],[3,"Events","","An iterator yielding all pending events.",null,null],[3,"Nodes","","An iterator-like type yielding a `NodeContext` for every node in the graph.",null,null],[3,"NodeContext","","A context for a node yielded during the node instantiation stage.",null,null],[3,"NodeWidget","","Returned when a `NodeContext` is assigned a widget.",null,null],[3,"Edges","","An iterator-like type yielding a `NodeContext` for every node in the graph.",null,null],[3,"Edge","","A context for an edge yielded during the edge instantiation stage.",null,null],[3,"EdgeWidget","","Returned when an `Edge` is assigned a widget.",null,null],[4,"Event","","An interaction has caused some event to occur.",null,null],[13,"Node","","Events associated with nodes.",459,null],[13,"Edge","","Events associated with edges.",459,null],[4,"NodeEvent","","Events related to adding and removing nodes.",null,null],[13,"Remove","","The user attempted to remove the node with the given identifier.",460,null],[13,"Dragged","","The widget used to represent this `Node` has been dragged.",460,null],[12,"node_id","conrod::widget::graph::NodeEvent","Unique identifier of the node being dragged.",460,null],[12,"from","","The origin of the drag relative to the `Graph` widget position.",460,null],[12,"to","","The end of the drag relative to the `Graph` widget position.",460,null],[4,"EdgeEvent","conrod::widget::graph","Events related to adding and removing edges.",null,null],[13,"AddStart","","The user has pressed the given node socket with the left mouse button to begin creating an edge.",461,null],[13,"Add","","The user has attempted to create an edge between the two given node sockets.",461,null],[12,"start","conrod::widget::graph::EdgeEvent","",461,null],[12,"end","","",461,null],[13,"Cancelled","conrod::widget::graph","The user has cancelled creating an edge from the given socket.",461,null],[13,"Remove","","The user has attempted to remove the edge connecting the two given sockets.",461,null],[12,"start","conrod::widget::graph::EdgeEvent","",461,null],[12,"end","","",461,null],[5,"node_widget_id","conrod::widget::graph","Returns the `widget::Id` for a node if one exists.",null,{"i":[{"n":"ni"},{"n":"id"},{"n":"ui"}],"o":{"g":["id"],"n":"option"}}],[5,"edge_node_widget_ids","","Returns the `widget::Id`s for the start and end nodes.",null,null],[0,"node","","A default container widget to use for nodes that exist within a `Graph` widget.",null,null],[3,"Node","conrod::widget::graph::node","A widget that acts as a convenience container for some `Node`'s unique widgets.",null,null],[12,"common","","Data necessary and common for all widget builder types.",462,null],[12,"style","","Unique styling for the Node.",462,null],[12,"widget","","The widget wrapped by this node container.",462,null],[12,"inputs","","The number of input sockets on the node.",462,null],[12,"outputs","","The number of output sockets on the node.",462,null],[3,"Style","","Unique styling for the BorderedRectangle widget.",null,null],[12,"color","","Shape color for the inner rectangle.",463,null],[12,"socket_length","","The length of each rectangle along its `SocketSide`.",463,null],[12,"border","","The widget of the border around the widget.",463,null],[12,"border_radius","","The radius of the rounded corners of the border.",463,null],[12,"border_color","","Color of the border.",463,null],[12,"socket_color","","Color of the sockets.",463,null],[12,"input_socket_layout","","Default layout for input sockets.",463,null],[12,"output_socket_layout","","Default layout for node output sockets.",463,null],[3,"SocketLayout","","Describes the layout of either input or output sockets.",null,null],[12,"side","","Represents the side of a node widget's bounding rectangle.",464,null],[12,"direction","","The direction in which sockets will be laid out over the side.",464,null],[3,"State","","Unique state for the `Node`.",null,null],[3,"Event","","The event produced by the `Node` widget.",null,null],[12,"widget_event","","The event produced by the inner widget `W`.",465,null],[3,"SocketRects","","The rectangle for each socket (either inputs or outputs only).",null,null],[4,"SocketSide","","Represents the side of a node widget's bounding rectangle.",null,null],[13,"Left","","",466,null],[13,"Right","","",466,null],[13,"Top","","",466,null],[13,"Bottom","","",466,null],[4,"SocketType","","Describes whether a socket is associated with a node's inputs or outputs.",null,null],[13,"Input","","",467,null],[13,"Output","","",467,null],[5,"socket_rect","","Retrieve the `Rect` for the given socket on the given node.",null,{"i":[{"n":"id"},{"n":"sockettype"},{"n":"usize"},{"n":"ui"}],"o":{"g":["rect"],"n":"option"}}],[5,"edge_socket_rects","","Returns a `Rect` for an edge's start and end nodes.",null,null],[5,"socket_rects","","Produces an iterator yielding a `Rect` for each socket for both inputs and outputs respectively.",null,{"i":[{"n":"id"},{"n":"ui"}],"o":{"n":"option"}}],[17,"DEFAULT_BORDER_THICKNESS","","",null,null],[17,"DEFAULT_SOCKET_LENGTH","","",null,null],[11,"clone","","",462,{"i":[{"n":"self"}],"o":{"n":"node"}}],[11,"fmt","","",462,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",463,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fmt","","",463,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",463,{"o":{"n":"style"}}],[11,"eq","","",463,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",463,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"clone","","",464,{"i":[{"n":"self"}],"o":{"n":"socketlayout"}}],[11,"fmt","","",464,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",464,{"i":[{"n":"self"},{"n":"socketlayout"}],"o":{"n":"bool"}}],[11,"ne","","",464,{"i":[{"n":"self"},{"n":"socketlayout"}],"o":{"n":"bool"}}],[11,"clone","","",466,{"i":[{"n":"self"}],"o":{"n":"socketside"}}],[11,"fmt","","",466,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",466,{"i":[{"n":"self"},{"n":"socketside"}],"o":{"n":"bool"}}],[11,"hash","","",466,null],[11,"clone","","",467,{"i":[{"n":"self"}],"o":{"n":"sockettype"}}],[11,"fmt","","",467,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",467,{"i":[{"n":"self"},{"n":"sockettype"}],"o":{"n":"bool"}}],[11,"hash","","",467,null],[11,"clone","","",465,{"i":[{"n":"self"}],"o":{"n":"event"}}],[11,"fmt","","",465,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Begin building a new `Node` widget.",462,{"i":[{"n":"w"}],"o":{"n":"self"}}],[11,"inputs","","Specify the number of input sockets for the node.",462,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"outputs","","Specify the number of output sockets for the node.",462,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"color","","Specify the color for the node's inner rectangle.",462,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"border_thickness","","The thickness of the border around the inner widget.",462,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"border_color","","Specify the color for the node's border.",462,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"border_radius","","Specify the radius for the node's border.",462,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"socket_color","","Specify the color for the node's sockets.",462,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"input_socket_layout","","Specify the layout of the input sockets.",462,{"i":[{"n":"self"},{"n":"socketlayout"}],"o":{"n":"self"}}],[11,"output_socket_layout","","Specify the layout of the input sockets.",462,{"i":[{"n":"self"},{"n":"socketlayout"}],"o":{"n":"self"}}],[11,"deref","","",465,null],[11,"deref_mut","","",465,null],[11,"clone","","",468,{"i":[{"n":"self"}],"o":{"n":"socketrects"}}],[11,"next","","",468,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"init_state","","",462,null],[11,"style","","",462,null],[11,"update","","",462,null],[8,"NodeId","conrod::widget::graph","Traits required by types that may be used as a graph node identifier.",null,null],[11,"clone","","",469,{"i":[{"n":"self"}],"o":{"n":"layout"}}],[11,"fmt","","",469,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",469,{"i":[{"n":"self"},{"n":"layout"}],"o":{"n":"bool"}}],[11,"ne","","",469,{"i":[{"n":"self"},{"n":"layout"}],"o":{"n":"bool"}}],[11,"deref","","",469,null],[11,"deref_mut","","",469,null],[11,"clone","","",456,{"i":[{"n":"self"}],"o":{"n":"graph"}}],[11,"fmt","","",456,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",457,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fmt","","",457,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",457,{"o":{"n":"style"}}],[11,"eq","","",457,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",457,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"clone","","",459,{"i":[{"n":"self"}],"o":{"n":"event"}}],[11,"fmt","","",459,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",459,{"i":[{"n":"self"},{"n":"event"}],"o":{"n":"bool"}}],[11,"ne","","",459,{"i":[{"n":"self"},{"n":"event"}],"o":{"n":"bool"}}],[11,"clone","","",458,{"i":[{"n":"self"}],"o":{"n":"nodesocket"}}],[11,"fmt","","",458,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",458,{"i":[{"n":"self"},{"n":"nodesocket"}],"o":{"n":"bool"}}],[11,"ne","","",458,{"i":[{"n":"self"},{"n":"nodesocket"}],"o":{"n":"bool"}}],[11,"hash","","",458,null],[11,"clone","","",460,{"i":[{"n":"self"}],"o":{"n":"nodeevent"}}],[11,"fmt","","",460,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",460,{"i":[{"n":"self"},{"n":"nodeevent"}],"o":{"n":"bool"}}],[11,"ne","","",460,{"i":[{"n":"self"},{"n":"nodeevent"}],"o":{"n":"bool"}}],[11,"clone","","",461,{"i":[{"n":"self"}],"o":{"n":"edgeevent"}}],[11,"fmt","","",461,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",461,{"i":[{"n":"self"},{"n":"edgeevent"}],"o":{"n":"bool"}}],[11,"ne","","",461,{"i":[{"n":"self"},{"n":"edgeevent"}],"o":{"n":"bool"}}],[11,"clone","","",470,{"i":[{"n":"self"}],"o":{"n":"camera"}}],[11,"fmt","","",470,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",470,{"o":{"n":"camera"}}],[11,"eq","","",470,{"i":[{"n":"self"},{"n":"camera"}],"o":{"n":"bool"}}],[11,"ne","","",470,{"i":[{"n":"self"},{"n":"camera"}],"o":{"n":"bool"}}],[11,"from","","",469,{"i":[{"g":["point"],"n":"hashmap"}],"o":{"n":"self"}}],[11,"into","","",469,{"i":[{"n":"self"}],"o":{"g":["point"],"n":"hashmap"}}],[11,"events","","All events that have occurred since the last ",471,{"i":[{"n":"self"}],"o":{"n":"events"}}],[11,"next","","Transition from the SessionEvents into SessionNodes for instantiating nodes.",471,{"i":[{"n":"self"}],"o":{"n":"sessionnodes"}}],[11,"next","","",472,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"nodes","","Produce an iterator yielding a `NodeContext` for each node present in the graph.",473,{"i":[{"n":"self"}],"o":{"n":"nodes"}}],[11,"next","","Transition from the SessionNodes into SessionEdges for instantiating edges.",473,{"i":[{"n":"self"}],"o":{"n":"sessionedges"}}],[11,"next","","",474,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"edges","","Produce an iterator yielding an `Edge` for each node present in the graph.",475,{"i":[{"n":"self"}],"o":{"n":"edges"}}],[11,"next","","",476,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"node_id","","The unique identifier associated with this node.",477,{"i":[{"n":"self"}],"o":{"n":"ni"}}],[11,"point","","The location of the node.",477,{"i":[{"n":"self"}],"o":{"n":"point"}}],[11,"widget","","Specify the widget to use ",477,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"nodewidget"}}],[11,"widget_id","","Retrieve the `widget::Id` that will be used to instantiate this node's widget.",478,{"i":[{"n":"self"},{"n":"uicell"}],"o":{"n":"id"}}],[11,"map","","Map over the inner widget.",478,{"i":[{"n":"self"},{"n":"m"}],"o":{"n":"self"}}],[11,"set","","Set the given widget for the node at `node_id()`.",478,null],[11,"deref","","",478,null],[11,"start","","The start (or \"input\") for the edge.",479,{"i":[{"n":"self"}],"o":{"n":"nodesocket"}}],[11,"end","","The end (or \"output\") for the edge.",479,{"i":[{"n":"self"}],"o":{"n":"nodesocket"}}],[11,"sockets","","The start and end sockets.",479,null],[11,"widget","","Specify the widget to use ",479,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"edgewidget"}}],[11,"widget_id","","Retrieve the `widget::Id` that will be used to instantiate this edge's widget.",480,{"i":[{"n":"self"},{"n":"uicell"}],"o":{"n":"id"}}],[11,"map","","Apply the given function to the inner widget.",480,{"i":[{"n":"self"},{"n":"m"}],"o":{"n":"self"}}],[11,"set","","Set the given widget for the edge.",480,null],[11,"new","","Begin building a new Graph widget.",456,{"i":[{"n":"ni"},{"n":"ei"},{"n":"layout"}],"o":{"n":"self"}}],[11,"background_color","","Color the Graph's rectangular area with the given color.",456,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"init_state","","",456,null],[11,"style","","",456,null],[11,"update","","",456,null],[0,"number_dialer","conrod::widget","A widget for precision control over any base-10 digit within a given value.",null,null],[3,"NumberDialer","conrod::widget::number_dialer","A widget for precision control over any digit within a value.",null,null],[3,"Style","","Unique graphical styling for the NumberDialer.",null,null],[12,"color","","Color of the NumberDialer's rectangle.",481,null],[12,"border","","The color of the rectangle border.",481,null],[12,"border_color","","The color of the rectangle border.",481,null],[12,"label_color","","The color of the NumberDialer's label.",481,null],[12,"label_font_size","","The font size for the NumberDialer's label.",481,null],[12,"font_id","","The `Id` associated with the font to use for the `NumberDialer` values.",481,null],[3,"State","","The state of the NumberDialer.",null,null],[3,"GlyphSlot","","Each digit in the adjustable value has its own Rectangle and Text widgets.",null,null],[11,"clone","","",481,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fmt","","",481,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",481,{"o":{"n":"style"}}],[11,"eq","","",481,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",481,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"clone","","",482,{"i":[{"n":"self"}],"o":{"n":"glyphslot"}}],[11,"fmt","","",482,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",482,{"i":[{"n":"self"},{"n":"glyphslot"}],"o":{"n":"bool"}}],[11,"ne","","",482,{"i":[{"n":"self"},{"n":"glyphslot"}],"o":{"n":"bool"}}],[11,"new","","Construct a new NumberDialer widget.",483,{"i":[{"n":"t"},{"n":"t"},{"n":"t"},{"n":"u8"}],"o":{"n":"self"}}],[11,"font_id","","Specify the font used for displaying the label.",483,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"enabled","","Build the type's self.$($assignee).+ with the given $Type.",483,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"init_state","","",483,null],[11,"style","","",483,null],[11,"update","","Update the state of the NumberDialer.",483,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",483,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",483,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",483,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",483,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",483,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",483,{"i":[{"n":"self"},{"n":"fontsize"}],"o":{"n":"self"}}],[0,"plot_path","conrod::widget","A widget for plotting a series of lines using the given function x -> y.",null,null],[3,"PlotPath","conrod::widget::plot_path","A widget that plots a series of lines using the given function x -> y.",null,null],[3,"Style","","Unique styling parameters for the `PlotPath` widget.",null,null],[12,"thickness","","The thickness of the plotted line.",484,null],[12,"color","","The color of the line.",484,null],[3,"State","","Unique state stored between updates for the `PlotPath` widget.",null,null],[11,"clone","","",484,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fmt","","",484,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",484,{"o":{"n":"style"}}],[11,"eq","","",484,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",484,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"new","","Begin building a new `PlotPath` widget instance.",485,{"i":[{"n":"x"},{"n":"x"},{"n":"y"},{"n":"y"},{"n":"f"}],"o":{"n":"self"}}],[11,"thickness","","The thickness of the point path used to draw the plot.",485,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"init_state","","",485,null],[11,"style","","",485,null],[11,"is_over","","",485,{"i":[{"n":"self"}],"o":{"n":"isoverfn"}}],[11,"update","","Update the state of the PlotPath.",485,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",485,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[0,"range_slider","conrod::widget","A widget for specifying start and end values for some linear range.",null,null],[3,"RangeSlider","conrod::widget::range_slider","Linear range selection.",null,null],[12,"skew","","The amount in which the slider's display should be skewed.",486,null],[3,"Style","","Graphical styling unique to the RangeSlider widget.",null,null],[12,"color","","The color of the slidable rectangle.",487,null],[12,"border","","The length of the border around the edges of the slidable rectangle.",487,null],[12,"border_color","","The color of the Slider's border.",487,null],[12,"label_color","","The color of the Slider's label.",487,null],[12,"label_font_size","","The font-size for the Slider's label.",487,null],[12,"label_font_id","","The ID of the font used to display the label.",487,null],[3,"State","","Represents the state of the Slider widget.",null,null],[3,"Event","","The `Event` type produced by the `RangeSlider`.",null,null],[4,"Drag","","The part of the `RangeSlider` that is in the process of being dragged.",null,null],[13,"Edge","","One of the edges is being dragged.",488,null],[13,"Handle","","The whole range is being dragged.",488,null],[4,"Edge","","Either the `Start` or `End` `Edge` of the `RangeSlider`'s bar.",null,null],[13,"Start","","The start edge of the scrollbar handle.",489,null],[13,"End","","The end edge of the scrollbar handle.",489,null],[11,"clone","","",487,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fmt","","",487,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",487,{"o":{"n":"style"}}],[11,"eq","","",487,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",487,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"clone","","",488,{"i":[{"n":"self"}],"o":{"n":"drag"}}],[11,"fmt","","",488,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",488,{"i":[{"n":"self"},{"n":"drag"}],"o":{"n":"bool"}}],[11,"ne","","",488,{"i":[{"n":"self"},{"n":"drag"}],"o":{"n":"bool"}}],[11,"clone","","",489,{"i":[{"n":"self"}],"o":{"n":"edge"}}],[11,"fmt","","",489,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",489,{"i":[{"n":"self"},{"n":"edge"}],"o":{"n":"bool"}}],[11,"clone","","",490,{"i":[{"n":"self"}],"o":{"n":"event"}}],[11,"next","","",490,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"new","","Construct a new RangeSlider widget.",486,{"i":[{"n":"t"},{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"n":"self"}}],[11,"label_font_id","","Specify the font used for displaying the label.",486,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"skew","","The amount in which the slider's display should be skewed.",486,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"self"}}],[11,"init_state","","",486,null],[11,"style","","",486,null],[11,"kid_area","","",486,{"i":[{"n":"self"},{"n":"kidareaargs"}],"o":{"n":"kidarea"}}],[11,"update","","Update the state of the range slider.",486,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",486,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",486,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",486,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",486,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",486,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",486,{"i":[{"n":"self"},{"n":"fontsize"}],"o":{"n":"self"}}],[0,"rounded_rectangle","conrod::widget","Similar to the `Rectangle` widget however is drawn with rounded corners.",null,null],[3,"RoundedRectangle","conrod::widget::rounded_rectangle","Draws a rectangle with corners rounded via the given radius.",null,null],[12,"common","","Data necessary and common for all widget builder types.",491,null],[12,"style","","Unique styling for the RoundedRectangle.",491,null],[12,"radius","","The radius of the circle used to round each corner of the rectangle.",491,null],[12,"corner_resolution","","The number of points in each corner of the circle used to draw the rounded corners.",491,null],[3,"State","","Unique state for the `RoundedRectangle`.",null,null],[3,"Points","","An iterator yielding the outer points of a `RoundedRectangle`",null,null],[5,"points","","Produce an iterator yielding the outer points of a rounded rectangle.",null,{"i":[{"n":"rect"},{"n":"scalar"},{"n":"usize"}],"o":{"n":"points"}}],[5,"is_over_widget","","The function to use for picking whether a given point is over the polygon.",null,{"i":[{"n":"container"},{"n":"point"},{"n":"theme"}],"o":{"n":"isover"}}],[6,"Triangles","","An iterator yielding triangles for a `RoundedRectangle`.",null,null],[17,"DEFAULT_CORNER_RESOLUTION","","The default resolution of the circle used to draw the rounded corners.",null,null],[11,"clone","","",491,{"i":[{"n":"self"}],"o":{"n":"roundedrectangle"}}],[11,"fmt","","",491,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"styled","","Build a rounded rectangle with the given dimensions and style.",491,{"i":[{"n":"dimensions"},{"n":"scalar"},{"n":"style"}],"o":{"n":"self"}}],[11,"fill","","Build a new filled rounded rectangle.",491,{"i":[{"n":"dimensions"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"fill_with","","Build a new filled rounded rectangle widget filled with the given color.",491,{"i":[{"n":"dimensions"},{"n":"scalar"},{"n":"color"}],"o":{"n":"self"}}],[11,"outline","","Build a new outlined rounded rectangle widget.",491,{"i":[{"n":"dimensions"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"outline_styled","","Build an outlined rounded rectangle rather than a filled one.",491,{"i":[{"n":"dimensions"},{"n":"scalar"},{"n":"style"}],"o":{"n":"self"}}],[11,"corner_resolution","","The number of points in each corner of the circle used to draw the rounded corners.",491,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"init_state","","",491,null],[11,"style","","",491,null],[11,"is_over","","",491,{"i":[{"n":"self"}],"o":{"n":"isoverfn"}}],[11,"update","","Update the state of the Rectangle.",491,null],[11,"color","","",491,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"clone","","",492,{"i":[{"n":"self"}],"o":{"n":"points"}}],[11,"next","","",492,{"i":[{"n":"self"}],"o":{"n":"option"}}],[0,"scrollbar","conrod::widget","A widget that allows for manually scrolling via dragging the mouse.",null,null],[3,"Scrollbar","conrod::widget::scrollbar","A widget that allows for scrolling via dragging the mouse.",null,null],[3,"Style","","Styling for the DropDownList, necessary for constructing its renderable Element.",null,null],[12,"color","","Color of the widget.",493,null],[12,"thickness","","The \"thickness\" of the scrollbar's track and handle `Rect`s.",493,null],[12,"auto_hide","","When true, the `Scrollbar` will only be visible when:",493,null],[3,"State","","The state of the `Scrollbar`.",null,null],[8,"Axis","","The axis that is scrolled by the `Scrollbar`.",null,null],[10,"track_rect","","The `Rect` for a scroll \"track\" with the given `thickness` for a container with the given `Rect`.",494,{"i":[{"n":"rect"},{"n":"scalar"}],"o":{"n":"rect"}}],[10,"handle_rect","","The `Rect` for a scroll handle given both `Range`s.",494,{"i":[{"n":"range"},{"n":"range"}],"o":{"n":"rect"}}],[10,"scroll_state","","Retrieve the related `scroll::State` for the axis from a given widget container.",494,{"i":[{"n":"container"}],"o":{"g":["state"],"n":"option"}}],[10,"default_x_dimension","","Determine a default x dimension for the scrollbar in the case that no specific width is given.",494,{"i":[{"n":"scrollbar"},{"n":"ui"}],"o":{"n":"dimension"}}],[10,"default_y_dimension","","Determine a default y dimension for the scrollbar in the case that no specific height is given.",494,{"i":[{"n":"scrollbar"},{"n":"ui"}],"o":{"n":"dimension"}}],[10,"to_2d","","Convert a given `Scalar` along the axis into two dimensions.",494,null],[11,"clone","","",493,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fmt","","",493,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",493,{"o":{"n":"style"}}],[11,"eq","","",493,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",493,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"auto_hide","","By default, this is set to `false`.",495,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"thickness","","Build the widget with the given `thickness`.",495,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"x_axis","","Begin building a new scrollbar widget that scrolls along the X axis along the range of the scrollable widget at the given Id.",495,{"i":[{"n":"id"}],"o":{"n":"self"}}],[11,"y_axis","","Begin building a new scrollbar widget that scrolls along the Y axis along the range of the scrollable widget at the given Id.",495,{"i":[{"n":"id"}],"o":{"n":"self"}}],[11,"init_state","","",495,null],[11,"style","","",495,null],[11,"default_x_dimension","","",495,{"i":[{"n":"self"},{"n":"ui"}],"o":{"n":"dimension"}}],[11,"default_y_dimension","","",495,{"i":[{"n":"self"},{"n":"ui"}],"o":{"n":"dimension"}}],[11,"update","","",495,null],[11,"track_rect","conrod::widget::scroll","",345,{"i":[{"n":"rect"},{"n":"scalar"}],"o":{"n":"rect"}}],[11,"handle_rect","","",345,{"i":[{"n":"range"},{"n":"range"}],"o":{"n":"rect"}}],[11,"scroll_state","","",345,{"i":[{"n":"container"}],"o":{"g":["state"],"n":"option"}}],[11,"default_x_dimension","","",345,{"i":[{"n":"scrollbar"},{"n":"ui"}],"o":{"n":"dimension"}}],[11,"default_y_dimension","","",345,{"i":[{"n":"scrollbar"},{"n":"ui"}],"o":{"n":"dimension"}}],[11,"to_2d","","",345,null],[11,"track_rect","","",346,{"i":[{"n":"rect"},{"n":"scalar"}],"o":{"n":"rect"}}],[11,"handle_rect","","",346,{"i":[{"n":"range"},{"n":"range"}],"o":{"n":"rect"}}],[11,"scroll_state","","",346,{"i":[{"n":"container"}],"o":{"g":["state"],"n":"option"}}],[11,"default_x_dimension","","",346,{"i":[{"n":"scrollbar"},{"n":"ui"}],"o":{"n":"dimension"}}],[11,"default_y_dimension","","",346,{"i":[{"n":"scrollbar"},{"n":"ui"}],"o":{"n":"dimension"}}],[11,"to_2d","","",346,null],[11,"color","conrod::widget::scrollbar","Build the type's self.$($assignee).+ with the given $Type.",495,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[0,"slider","conrod::widget","A widget for selecting a single value along some linear range.",null,null],[3,"Slider","conrod::widget::slider","Linear value selection.",null,null],[12,"skew","","The amount in which the slider's display should be skewed.",496,null],[12,"enabled","","Whether or not user input is enabled for the Slider.",496,null],[3,"Style","","Graphical styling unique to the Slider widget.",null,null],[12,"color","","The color of the slidable rectangle.",497,null],[12,"border","","The length of the border around the edges of the slidable rectangle.",497,null],[12,"border_color","","The color of the Slider's border.",497,null],[12,"label_color","","The color of the Slider's label.",497,null],[12,"label_font_size","","The font-size for the Slider's label.",497,null],[12,"label_font_id","","The ID of the font used to display the label.",497,null],[3,"State","","Represents the state of the Slider widget.",null,null],[11,"clone","","",497,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fmt","","",497,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",497,{"o":{"n":"style"}}],[11,"eq","","",497,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",497,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"new","","Construct a new Slider widget.",496,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"n":"self"}}],[11,"label_font_id","","Specify the font used for displaying the label.",496,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"skew","","Build the type's self.$($assignee).+ with the given $Type.",496,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"self"}}],[11,"enabled","","Build the type's self.$($assignee).+ with the given $Type.",496,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"init_state","","",496,null],[11,"style","","",496,null],[11,"kid_area","","",496,{"i":[{"n":"self"},{"n":"kidareaargs"}],"o":{"n":"kidarea"}}],[11,"update","","Update the state of the Slider.",496,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",496,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",496,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",496,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",496,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",496,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",496,{"i":[{"n":"self"},{"n":"fontsize"}],"o":{"n":"self"}}],[0,"tabs","conrod::widget","A wrapper around a list of `Canvas`ses that displays them as a list of selectable tabs.",null,null],[3,"Tabs","conrod::widget::tabs","A wrapper around a list of `Canvas`ses that displays them as a list of selectable tabs.",null,null],[3,"State","","The state to be cached within the Canvas.",null,null],[3,"Tab","","A single Tab in the list owned by the Tabs State.",null,null],[3,"Style","","Unique styling for the `Tabs` widget.",null,null],[12,"layout","","Layout for the tab selection bar.",498,null],[12,"bar_thickness","","The thickness of the tab selection bar (width for vertical, height for horizontal).",498,null],[12,"label_color","","Color of the number dialer's label.",498,null],[12,"label_font_size","","Font size of the number dialer's label.",498,null],[12,"font_id","","The `font::Id` of the number dialer's font.",498,null],[12,"canvas","","The styling for each `Canvas`.",498,null],[3,"TabRects","","An iterator yielding the Rect for each Tab in the given list.",null,null],[4,"Layout","","The direction in which the tabs will be laid out.",null,null],[13,"Horizontal","","Tabs will be laid out horizontally (left to right).",499,null],[13,"Vertical","","Tabs will be laid out vertically (top to bottom).",499,null],[11,"clone","","",500,{"i":[{"n":"self"}],"o":{"n":"tab"}}],[11,"fmt","","",500,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",500,{"i":[{"n":"self"},{"n":"tab"}],"o":{"n":"bool"}}],[11,"ne","","",500,{"i":[{"n":"self"},{"n":"tab"}],"o":{"n":"bool"}}],[11,"clone","","",498,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fmt","","",498,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",498,{"o":{"n":"style"}}],[11,"eq","","",498,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",498,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"clone","","",499,{"i":[{"n":"self"}],"o":{"n":"layout"}}],[11,"fmt","","",499,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",499,{"i":[{"n":"self"},{"n":"layout"}],"o":{"n":"bool"}}],[11,"new","","Construct some new Canvas Tabs.",501,null],[11,"starting_canvas","","Set the initially selected tab with a Canvas via its widget::Id.",501,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"pad","","Set the padding for all edges.",501,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"tabs"}}],[11,"layout_horizontally","","Layout the tabs horizontally.",501,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"layout_vertically","","Layout the tabs vertically.",501,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"canvas_style","","Build the `Tabs` widget with the given styling for its `Canvas`ses.",501,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"self"}}],[11,"pad_left","","If the `Tabs` has some `widget::canvas::Style`, assign the left padding.",501,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"pad_right","","If the `Tabs` has some `widget::canvas::Style`, assign the left padding.",501,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"pad_bottom","","If the `Tabs` has some `widget::canvas::Style`, assign the left padding.",501,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"pad_top","","If the `Tabs` has some `widget::canvas::Style`, assign the left padding.",501,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"bar_thickness","","The width of a vertical `Tabs` selection bar, or the height of a horizontal one.",501,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"starting_tab_idx","","Build the type's self.$($assignee).+ with the given $Type.",501,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",501,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",501,{"i":[{"n":"self"},{"n":"fontsize"}],"o":{"n":"self"}}],[11,"init_state","","",501,null],[11,"style","","",501,null],[11,"kid_area","","The area on which child widgets will be placed when using the `Place` Positionable methods.",501,{"i":[{"n":"self"},{"n":"kidareaargs"}],"o":{"n":"kidarea"}}],[11,"update","","Update the state of the Tabs.",501,{"i":[{"n":"self"},{"n":"updateargs"}]}],[11,"color","","",501,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"border","","",501,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"self"}}],[11,"border_color","","",501,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"new","","Construct a new TabRects iterator.",502,null],[11,"next_with_id_and_label","","Yield the next Tab Rect, along with the associated ID and label.",502,{"i":[{"n":"self"}],"o":{"n":"option"}}],[0,"text_box","conrod::widget","A widget for displaying and mutating a one-line field of text.",null,null],[3,"TextBox","conrod::widget::text_box","A widget for displaying and mutating a small, one-line field of text, given by the user in the form of a `String`.",null,null],[3,"Style","","Unique graphical styling for the TextBox.",null,null],[12,"text_padding","","The length of the gap between the bounding rectangle's border and the edge of the text.",503,null],[12,"color","","Color of the rectangle behind the text.",503,null],[12,"border","","The width of the bounding `BorderedRectangle` border.",503,null],[12,"border_color","","The color of the `BorderedRecangle`'s border.",503,null],[12,"text_color","","The color of the `TextEdit` widget.",503,null],[12,"font_size","","The font size for the text.",503,null],[12,"justify","","The typographic alignment of the text.",503,null],[12,"font_id","","The font used for the `Text`.",503,null],[3,"State","","The `State` of the `TextBox` widget that will be cached within the `Ui`.",null,null],[4,"Event","","Events produced by the `TextBox`.",null,null],[13,"Update","","The `String` was updated.",504,null],[13,"Enter","","The `Return` or `Enter` key was pressed.",504,null],[11,"clone","","",503,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fmt","","",503,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",503,{"o":{"n":"style"}}],[11,"eq","","",503,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",503,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"new","","Construct a TextBox widget.",505,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"left_justify","","Align the text to the left of its bounding Rect's x axis range.",505,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"center_justify","","Align the text to the middle of its bounding Rect's x axis range.",505,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"right_justify","","Align the text to the right of its bounding Rect's x axis range.",505,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"font_id","","Specify the font used for displaying the text.",505,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"text_color","","Build the type's self.$($assignee).+ with the given $Type.",505,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"font_size","","Build the type's self.$($assignee).+ with the given $Type.",505,{"i":[{"n":"self"},{"n":"fontsize"}],"o":{"n":"self"}}],[11,"justify","","Build the type's self.$($assignee).+ with the given $Type.",505,{"i":[{"n":"self"},{"n":"justify"}],"o":{"n":"self"}}],[11,"pad_text","","Build the type's self.$($assignee).+ with the given $Type.",505,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"clone","","",504,{"i":[{"n":"self"}],"o":{"n":"event"}}],[11,"fmt","","",504,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"init_state","","",505,null],[11,"style","","",505,null],[11,"update","","Update the state of the TextEdit.",505,null],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",505,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",505,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",505,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[0,"text_edit","conrod::widget","A widget for displaying and mutating multi-line text, given as a `String`.",null,null],[3,"TextEdit","conrod::widget::text_edit","A widget for displaying and mutating multi-line text, given as a `String`.",null,null],[3,"Style","","Unique graphical styling for the TextEdit.",null,null],[12,"color","","The color of the text (this includes cursor and selection color).",506,null],[12,"font_size","","The font size for the text.",506,null],[12,"justify","","The horizontal alignment of the text.",506,null],[12,"y_align","","The vertical alignment of the text.",506,null],[12,"line_spacing","","The vertical space between each line of text.",506,null],[12,"line_wrap","","The way in which text is wrapped at the end of a line.",506,null],[12,"restrict_to_height","","Do not allow to enter text that would exceed the bounds of the `TextEdit`'s `Rect`.",506,null],[12,"font_id","","The font used for the `Text`.",506,null],[3,"State","","The State of the TextEdit widget that will be cached within the Ui.",null,null],[4,"Drag","","Track whether some sort of dragging is currently occurring.",null,null],[13,"Selecting","","The drag is currently selecting a range of text.",507,null],[13,"MoveSelection","","The drag is moving a selection of text.",507,null],[4,"Cursor","","The position of the `Cursor` over the text.",null,null],[13,"Idx","","The cursor is at the given character index.",508,null],[13,"Selection","","The cursor is a selection between these two indices.",508,null],[12,"start","conrod::widget::text_edit::Cursor","The `start` is always the \"anchor\" point.",508,null],[12,"end","","The `end` may be either greater or less than the `start`.",508,null],[11,"clone","conrod::widget::text_edit","",506,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fmt","","",506,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",506,{"o":{"n":"style"}}],[11,"eq","","",506,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",506,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"clone","","",507,{"i":[{"n":"self"}],"o":{"n":"drag"}}],[11,"fmt","","",507,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",507,{"i":[{"n":"self"},{"n":"drag"}],"o":{"n":"bool"}}],[11,"clone","","",508,{"i":[{"n":"self"}],"o":{"n":"cursor"}}],[11,"fmt","","",508,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",508,{"i":[{"n":"self"},{"n":"cursor"}],"o":{"n":"bool"}}],[11,"ne","","",508,{"i":[{"n":"self"},{"n":"cursor"}],"o":{"n":"bool"}}],[11,"new","","Construct a TextEdit widget.",509,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"wrap_by_whitespace","","The `TextEdit` will wrap text via the whitespace that precedes the first width-exceeding character.",509,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"wrap_by_character","","By default, the `TextEdit` will wrap text via the whitespace that precedes the first width-exceeding character.",509,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"left_justify","","Align the text to the left of its bounding Rect's x axis range.",509,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"center_justify","","Align the text to the middle of its bounding Rect's x axis range.",509,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"right_justify","","Align the text to the right of its bounding Rect's x axis range.",509,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"align_text_bottom","","Align the text to the left of its bounding Rect's y axis range.",509,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"align_text_y_middle","","Align the text to the middle of its bounding Rect's y axis range.",509,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"align_text_top","","Align the text to the right of its bounding Rect's y axis range.",509,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"align_text_middle","","Align the text to the middle of its bounding Rect.",509,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"font_id","","Specify the font used for displaying the text.",509,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"font_size","","Build the type's self.$($assignee).+ with the given $Type.",509,{"i":[{"n":"self"},{"n":"fontsize"}],"o":{"n":"self"}}],[11,"justify","","Build the type's self.$($assignee).+ with the given $Type.",509,{"i":[{"n":"self"},{"n":"justify"}],"o":{"n":"self"}}],[11,"y_align_text","","Build the type's self.$($assignee).+ with the given $Type.",509,{"i":[{"n":"self"},{"n":"align"}],"o":{"n":"self"}}],[11,"line_wrap","","Build the type's self.$($assignee).+ with the given $Type.",509,{"i":[{"n":"self"},{"n":"wrap"}],"o":{"n":"self"}}],[11,"line_spacing","","Build the type's self.$($assignee).+ with the given $Type.",509,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"restrict_to_height","","Build the type's self.$($assignee).+ with the given $Type.",509,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"init_state","","",509,null],[11,"style","","",509,null],[11,"default_y_dimension","","",509,{"i":[{"n":"self"},{"n":"ui"}],"o":{"n":"dimension"}}],[11,"update","","Update the state of the TextEdit.",509,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",509,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[0,"title_bar","conrod::widget","A simple title bar widget that automatically sizes itself to the top of some other widget.",null,null],[3,"TitleBar","conrod::widget::title_bar","A simple title bar widget that automatically sizes itself to the top of some other widget.",null,null],[12,"common","","Data necessary and common for all widget builder types.",510,null],[12,"style","","Unique styling for the BorderedRectangle.",510,null],[12,"label","","A label displayed in the middle of the TitleBar.",510,null],[3,"State","","Unique state for the TitleBar widget.",null,null],[3,"Style","","Unique styling for the TitleBar widget.",null,null],[12,"color","","The color of the TitleBar's rectangle surface.",511,null],[12,"border","","The width of the border surrounding the TitleBar's rectangle.",511,null],[12,"border_color","","The color of the TitleBar's border.",511,null],[12,"text_color","","The color of the title bar's text.",511,null],[12,"font_size","","The font size for the title bar's text.",511,null],[12,"maybe_wrap","","The way in which the title bar's text should wrap.",511,null],[12,"line_spacing","","The distance between lines for multi-line title bar text.",511,null],[12,"justify","","The horizontal alignment of the title bar text.",511,null],[12,"label_x","","The position of the title bar's `Label` widget over the x axis.",511,null],[12,"label_y","","The position of the title bar's `Label` widget over the y axis.",511,null],[12,"font_id","","The font used for the `Text`.",511,null],[5,"calc_height","","Calculate the default height for the TitleBar's rect.",null,{"i":[{"n":"fontsize"}],"o":{"n":"scalar"}}],[11,"clone","","",510,{"i":[{"n":"self"}],"o":{"n":"titlebar"}}],[11,"clone","","",511,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fmt","","",511,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",511,{"o":{"n":"style"}}],[11,"eq","","",511,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",511,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"new","","Construct a new TitleBar widget and attach it to the widget at the given index.",510,{"i":[{"n":"str"},{"n":"id"}],"o":{"n":"self"}}],[11,"left_justify_label","","Align the text to the left of its bounding Rect's x axis range.",510,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"center_justify_label","","Align the text to the middle of its bounding Rect's x axis range.",510,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"right_justify_label","","Align the text to the right of its bounding Rect's x axis range.",510,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"label_x","","Specify the label's position relatively to `Button` along the x axis.",510,{"i":[{"n":"self"},{"n":"relative"}],"o":{"n":"self"}}],[11,"label_y","","Specify the label's position relatively to `Button` along the y axis.",510,{"i":[{"n":"self"},{"n":"relative"}],"o":{"n":"self"}}],[11,"font_id","","Specify the font used for displaying the text.",510,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"line_spacing","","Build the type's self.$($assignee).+ with the given $Type.",510,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"init_state","","",510,null],[11,"style","","",510,null],[11,"default_y_dimension","","",510,{"i":[{"n":"self"},{"n":"ui"}],"o":{"n":"dimension"}}],[11,"update","","",510,{"i":[{"n":"self"},{"n":"updateargs"}]}],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",510,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",510,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",510,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",510,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",510,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",510,{"i":[{"n":"self"},{"n":"fontsize"}],"o":{"n":"self"}}],[0,"toggle","conrod::widget","A button that allows for toggling boolean state.",null,null],[3,"Toggle","conrod::widget::toggle","A pressable widget for toggling the state of a bool.",null,null],[12,"enabled","","If true, will allow user inputs. If false, will disallow user inputs.",512,null],[3,"Style","","Styling for the Toggle including coloring, bordering and labelling.",null,null],[12,"color","","Color of the Toggle's pressable area.",513,null],[12,"border","","The width of the rectangular border surrounding the Toggle.",513,null],[12,"border_color","","The color of the Toggle's border.",513,null],[12,"label_color","","The color of the Toggle's Text label.",513,null],[12,"label_font_size","","The font size for the Toggle's Text label.",513,null],[12,"label_font_id","","The ID of the font used to display the label.",513,null],[12,"label_x","","The position of the title bar's `Label` widget over the x axis.",513,null],[12,"label_y","","The position of the title bar's `Label` widget over the y axis.",513,null],[3,"State","","The state of the Toggle.",null,null],[3,"TimesClicked","","The `Event` type yielded by the `Toggle` widget.",null,null],[11,"clone","","",512,{"i":[{"n":"self"}],"o":{"n":"toggle"}}],[11,"clone","","",513,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fmt","","",513,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",513,{"o":{"n":"style"}}],[11,"eq","","",513,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",513,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"clone","","",514,{"i":[{"n":"self"}],"o":{"n":"timesclicked"}}],[11,"fmt","","",514,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",514,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"new","","Construct a new Toggle widget.",512,{"i":[{"n":"bool"}],"o":{"n":"toggle"}}],[11,"label_font_id","","Specify the font used for displaying the label.",512,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"label_x","","Specify the label's position relatively to `Toggle` along the x axis.",512,{"i":[{"n":"self"},{"n":"relative"}],"o":{"n":"self"}}],[11,"label_y","","Specify the label's position relatively to `Toggle` along the y axis.",512,{"i":[{"n":"self"},{"n":"relative"}],"o":{"n":"self"}}],[11,"enabled","","Build the type's self.$($assignee).+ with the given $Type.",512,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"init_state","","",512,null],[11,"style","","",512,null],[11,"update","","Update the state of the Toggle.",512,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",512,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",512,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",512,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",512,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",512,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",512,{"i":[{"n":"self"},{"n":"fontsize"}],"o":{"n":"self"}}],[0,"xy_pad","conrod::widget","Used for displaying and controlling a 2D point on a cartesian plane within a given range.",null,null],[3,"XYPad","conrod::widget::xy_pad","Used for displaying and controlling a 2D point on a cartesian plane within a given range.",null,null],[12,"enabled","","Indicates whether the XYPad will respond to user input.",515,null],[3,"Style","","Unique graphical styling for the XYPad.",null,null],[12,"color","","The color of the XYPad's rectangle.",516,null],[12,"border","","The width of the border surrounding the rectangle.",516,null],[12,"border_color","","The color of the surrounding rectangle border.",516,null],[12,"label_color","","The color of the XYPad's label and value label text.",516,null],[12,"label_font_size","","The font size for the XYPad's label.",516,null],[12,"label_font_id","","The ID of the font used to display the label.",516,null],[12,"value_font_size","","The font size for the XYPad's value label.",516,null],[12,"line_thickness","","The thickness of the XYPad's crosshair lines.",516,null],[3,"State","","The state of the XYPad.",null,null],[11,"clone","","",516,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fmt","","",516,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",516,{"o":{"n":"style"}}],[11,"eq","","",516,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",516,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"new","","Build a new XYPad widget.",515,{"i":[{"n":"x"},{"n":"x"},{"n":"x"},{"n":"y"},{"n":"y"},{"n":"y"}],"o":{"n":"self"}}],[11,"label_font_id","","Specify the font used for displaying the label.",515,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"line_thickness","","Build the type's self.$($assignee).+ with the given $Type.",515,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"value_font_size","","Build the type's self.$($assignee).+ with the given $Type.",515,{"i":[{"n":"self"},{"n":"fontsize"}],"o":{"n":"self"}}],[11,"enabled","","Build the type's self.$($assignee).+ with the given $Type.",515,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"init_state","","",515,null],[11,"style","","",515,null],[11,"update","","Update the XYPad's cached state.",515,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",515,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",515,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",515,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",515,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",515,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",515,{"i":[{"n":"self"},{"n":"fontsize"}],"o":{"n":"self"}}],[6,"IsOverFn","conrod::widget","A function type used to determine whether or not a given point is over a widget.",null,null],[8,"Style","","The necessary bounds for a Widget's associated Style type.",null,null],[8,"Common","","A trait implemented by all Widget types.",null,null],[10,"common","","Borrows the `CommonBuilder` field.",517,{"i":[{"n":"self"}],"o":{"n":"commonbuilder"}}],[10,"common_mut","","Mutably borrows the `CommonBuilder` field.",517,{"i":[{"n":"self"}],"o":{"n":"commonbuilder"}}],[8,"Widget","","A trait to be implemented by all Widget types.",null,null],[16,"State","","State to be stored within the `Ui`s widget cache.",518,null],[16,"Style","","Every widget is required to have its own associated `Style` type. This type is intended to contain high-level styling information for the widget that can be optionally specified by a user of the widget.",518,null],[16,"Event","","The type of event yielded by the widget, returned via the `Widget::set` function.",518,null],[10,"init_state","","Return the initial State of the Widget.",518,null],[10,"style","","Return the styling of the widget.",518,null],[10,"update","","Update our Widget's unique Widget::State via the State wrapper type (the `state` field within the UpdateArgs).",518,null],[11,"default_x_position","","The default Position for the widget along the x axis.",518,{"i":[{"n":"self"},{"n":"ui"}],"o":{"n":"position"}}],[11,"default_y_position","","The default Position for the widget along the y axis.",518,{"i":[{"n":"self"},{"n":"ui"}],"o":{"n":"position"}}],[11,"default_x_dimension","","The default width for the Widget.",518,{"i":[{"n":"self"},{"n":"ui"}],"o":{"n":"dimension"}}],[11,"default_y_dimension","","The default height of the widget.",518,{"i":[{"n":"self"},{"n":"ui"}],"o":{"n":"dimension"}}],[11,"drag_area","","If the widget is draggable, implement this method and return the position and dimensions of the draggable space. The position should be relative to the center of the widget.",518,null],[11,"kid_area","","The area on which child widgets will be placed when using the `Place` `Position` methods.",518,{"i":[{"n":"self"},{"n":"kidareaargs"}],"o":{"n":"kidarea"}}],[11,"is_over","","Returns either of the following:",518,{"i":[{"n":"self"}],"o":{"n":"isoverfn"}}],[11,"parent","","Set the parent widget for this Widget by passing the WidgetId of the parent.",518,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"no_parent","","Specify that this widget has no parent widgets.",518,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"place_on_kid_area","","Set whether or not the Widget should be placed on the kid_area.",518,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"graphics_for","","Indicates that the Widget is used as a non-interactive graphical element for some other widget.",518,{"i":[{"n":"self"},{"n":"id"}],"o":{"n":"self"}}],[11,"floating","","Set whether or not the widget is floating (the default is `false`). A typical example of a floating widget would be a pop-up or alert window.",518,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"crop_kids","","Indicates that all widgets who are children of this widget should be cropped to the `kid_area` of this widget.",518,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"scroll_kids","","Makes the widget's `KidArea` scrollable.",518,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"scroll_kids_vertically","","Makes the widget's `KidArea` scrollable.",518,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"scroll_kids_horizontally","","Set whether or not the widget's `KidArea` is scrollable (the default is false).",518,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"and","","A builder method that \"lifts\" the Widget through the given `build` function.",518,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"and_mut","","A builder method that mutates the Widget with the given `mutate` function.",518,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"and_if","","A method that conditionally builds the Widget with the given `build` function.",518,{"i":[{"n":"self"},{"n":"bool"},{"n":"f"}],"o":{"n":"self"}}],[11,"and_then","","A method that optionally builds the Widget with the given `build` function.",518,{"i":[{"n":"self"},{"n":"option"},{"n":"f"}],"o":{"n":"self"}}],[11,"set","","Note: There should be no need to override this method.",518,null],[11,"clone","","",330,{"i":[{"n":"self"}],"o":{"n":"kidarea"}}],[11,"fmt","","",330,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",330,{"i":[{"n":"self"},{"n":"kidarea"}],"o":{"n":"bool"}}],[11,"ne","","",330,{"i":[{"n":"self"},{"n":"kidarea"}],"o":{"n":"bool"}}],[11,"clone","","",337,{"i":[{"n":"self"}],"o":{"n":"maybeparent"}}],[11,"fmt","","",337,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",337,{"i":[{"n":"self"},{"n":"maybeparent"}],"o":{"n":"bool"}}],[11,"ne","","",337,{"i":[{"n":"self"},{"n":"maybeparent"}],"o":{"n":"bool"}}],[11,"get_unchecked","","Convert the MaybeParent into an Option.",337,{"i":[{"n":"self"},{"n":"ui"},{"n":"position"},{"n":"position"}],"o":{"n":"id"}}],[11,"get","","The same as `get_unchecked`, but checks whether or not the widget that we're inferring the parent for is the `Ui`'s window (which cannot have a parent, without creating a cycle).",337,{"i":[{"n":"self"},{"n":"id"},{"n":"ui"},{"n":"position"},{"n":"position"}],"o":{"g":["id"],"n":"option"}}],[11,"clone","","",331,{"i":[{"n":"self"}],"o":{"n":"floating"}}],[11,"fmt","","",331,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",331,{"i":[{"n":"self"},{"n":"floating"}],"o":{"n":"bool"}}],[11,"ne","","",331,{"i":[{"n":"self"},{"n":"floating"}],"o":{"n":"bool"}}],[11,"clone","","",332,{"i":[{"n":"self"}],"o":{"n":"commonbuilder"}}],[11,"fmt","","",332,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",333,{"i":[{"n":"self"}],"o":{"n":"commonstyle"}}],[11,"fmt","","",333,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",333,{"o":{"n":"commonstyle"}}],[11,"eq","","",333,{"i":[{"n":"self"},{"n":"commonstyle"}],"o":{"n":"bool"}}],[11,"ne","","",333,{"i":[{"n":"self"},{"n":"commonstyle"}],"o":{"n":"bool"}}],[11,"clone","","",334,{"i":[{"n":"self"}],"o":{"n":"commonstate"}}],[11,"fmt","","",334,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",334,{"i":[{"n":"self"},{"n":"commonstate"}],"o":{"n":"bool"}}],[11,"ne","","",334,{"i":[{"n":"self"},{"n":"commonstate"}],"o":{"n":"bool"}}],[11,"clone","","",338,{"i":[{"n":"self"}],"o":{"n":"isover"}}],[11,"from","","",338,{"i":[{"n":"bool"}],"o":{"n":"self"}}],[11,"from","","",338,{"i":[{"n":"id"}],"o":{"n":"self"}}],[11,"update","","Mutate the internal widget state and set a flag notifying us that there has been a mutation.",519,{"i":[{"n":"self"},{"n":"f"}]}],[11,"deref","","",519,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"default","","",332,{"o":{"n":"self"}}],[0,"cursor","conrod","Contains an extendable enum of supported mouse cursor types.",null,null],[4,"MouseCursor","conrod::cursor","This enum specifies cursor types used by internal widgets. For custom widgets using custom cursor types, you can still use this enum by specifying a numbered custom variant.",null,null],[13,"Arrow","","Default mouse cursor.",520,null],[13,"Text","","Text input curosr.",520,null],[13,"VerticalText","","Text input for vertical text.",520,null],[13,"Hand","","Open hand with index finger pointing up.",520,null],[13,"Grab","","Open hand.",520,null],[13,"Grabbing","","Closed hand.",520,null],[13,"ResizeVertical","","Vertical resize cursor.",520,null],[13,"ResizeHorizontal","","Horizontal resize cursor.",520,null],[13,"ResizeTopLeftBottomRight","","Diagonal resize cursor pointing to top left and bottom right corners.",520,null],[13,"ResizeTopRightBottomLeft","","Diagonal resize cursor pointing to top right to bottom left corners.",520,null],[13,"Custom","","Custom cursor variant. Encode your favourite cursor with a u8.",520,null],[11,"clone","","",520,{"i":[{"n":"self"}],"o":{"n":"mousecursor"}}],[11,"fmt","","",520,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",520,{"i":[{"n":"self"},{"n":"mousecursor"}],"o":{"n":"bool"}}],[11,"ne","","",520,{"i":[{"n":"self"},{"n":"mousecursor"}],"o":{"n":"bool"}}],[6,"FontSize","conrod","Font size used throughout Conrod.",null,null],[8,"Borderable","","Widgets that may display a border.",null,null],[10,"border","","Set the width of the widget's border.",521,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"self"}}],[10,"border_color","","Set the color of the widget's border.",521,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"border_rgba","","Set the color of the widget's border with rgba values.",521,{"i":[{"n":"self"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"self"}}],[11,"border_rgb","","Set the color of the widget's border with rgb values.",521,{"i":[{"n":"self"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"self"}}],[11,"border_hsla","","Set the color of the widget's border with hsla values.",521,{"i":[{"n":"self"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"self"}}],[11,"border_hsl","","Set the color of the widget's border with hsl values.",521,{"i":[{"n":"self"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"self"}}],[8,"Labelable","","Widgets that may display some label.",null,null],[10,"label","","Set the label for the widget.",522,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[10,"label_color","","Set the color of the widget's label.",522,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"label_rgba","","Set the color of the widget's label from rgba values.",522,{"i":[{"n":"self"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"self"}}],[11,"label_rgb","","Set the color of the widget's label from rgb values.",522,{"i":[{"n":"self"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"self"}}],[11,"label_hsla","","Set the color of the widget's label from hsla values.",522,{"i":[{"n":"self"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"self"}}],[11,"label_hsl","","Set the color of the widget's label from hsl values.",522,{"i":[{"n":"self"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"self"}}],[10,"label_font_size","","Set the font size for the widget's label.",522,{"i":[{"n":"self"},{"n":"fontsize"}],"o":{"n":"self"}}],[11,"small_font","","Set a \"small\" font size for the widget's label.",522,{"i":[{"n":"self"},{"n":"ui"}],"o":{"n":"self"}}],[11,"medium_font","","Set a \"medium\" font size for the widget's label.",522,{"i":[{"n":"self"},{"n":"ui"}],"o":{"n":"self"}}],[11,"large_font","","Set a \"large\" font size for the widget's label.",522,{"i":[{"n":"self"},{"n":"ui"}],"o":{"n":"self"}}],[14,"builder_method","","A macro for simplifying implementation of methods for the `builder pattern`.",null,null],[14,"builder_methods","","A macro to simplify implementation of \"builder-pattern\" methods.",null,null],[14,"widget_ids","","A macro used to generate a struct with a field for each unique identifier given. Each field can then be used to generate unique `widget::Id`s.",null,null],[11,"new","conrod::backend::glium::glium::backend::glutin::headless","Create a new glium `Headless` context.",523,{"i":[{"n":"headlesscontext"}],"o":{"g":["headless","incompatibleopengl"],"n":"result"}}],[11,"unchecked","","Create a new glium `Headless` context.",523,{"i":[{"n":"headlesscontext"}],"o":{"g":["headless","incompatibleopengl"],"n":"result"}}],[11,"with_debug","","The same as the `new` constructor, but allows for specifying debug callback behaviour.",523,{"i":[{"n":"headlesscontext"},{"n":"debugcallbackbehavior"}],"o":{"g":["headless","incompatibleopengl"],"n":"result"}}],[11,"unchecked_with_debug","","The same as the `unchecked` constructor, but allows for specifying debug callback behaviour.",523,{"i":[{"n":"headlesscontext"},{"n":"debugcallbackbehavior"}],"o":{"g":["headless","incompatibleopengl"],"n":"result"}}],[11,"draw","","Start drawing on the backbuffer.",523,{"i":[{"n":"self"}],"o":{"n":"frame"}}],[11,"fmt","conrod::input::keyboard","",524,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"cmp","conrod::input::state::mouse","",242,{"i":[{"n":"self"},{"n":"mousebutton"}],"o":{"n":"ordering"}}],[11,"cmp","conrod::input","",241,{"i":[{"n":"self"},{"n":"key"}],"o":{"n":"ordering"}}],[11,"cmp","conrod::input::keyboard","",524,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"ordering"}}],[11,"from","conrod::input","",238,{"i":[{"n":"controllerbutton"}],"o":{"n":"button"}}],[11,"from","","",241,{"i":[{"n":"u32"}],"o":{"n":"key"}}],[11,"from","","",238,{"i":[{"n":"mousebutton"}],"o":{"n":"button"}}],[11,"from","conrod::input::state::mouse","",242,{"i":[{"n":"u32"}],"o":{"n":"mousebutton"}}],[11,"from","conrod::input","",238,{"i":[{"n":"key"}],"o":{"n":"button"}}],[11,"from_iter","conrod::input::keyboard","",524,{"i":[{"n":"t"}],"o":{"n":"modifierkey"}}],[11,"sub_assign","","Disables all flags enabled in the set.",524,null],[11,"fmt","conrod::input","",239,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::input::keyboard","",524,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::input","",241,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",238,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",243,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",240,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::input::state::mouse","",242,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::input::keyboard","",524,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",524,null],[11,"bitor","","Returns the union of the two sets of flags.",524,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"modifierkey"}}],[11,"serialize","conrod::input","",240,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"serialize","","",241,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"serialize","","",238,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"serialize","conrod::input::keyboard","",524,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"serialize","conrod::input","",243,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"serialize","","",239,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"serialize","conrod::input::state::mouse","",242,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"deserialize","","",242,{"i":[{"n":"__d"}],"o":{"g":["mousebutton"],"n":"result"}}],[11,"deserialize","conrod::input::keyboard","",524,{"i":[{"n":"__d"}],"o":{"g":["modifierkey"],"n":"result"}}],[11,"deserialize","conrod::input","",241,{"i":[{"n":"__d"}],"o":{"g":["key"],"n":"result"}}],[11,"deserialize","","",238,{"i":[{"n":"__d"}],"o":{"g":["button"],"n":"result"}}],[11,"deserialize","","",239,{"i":[{"n":"__d"}],"o":{"g":["controllerbutton"],"n":"result"}}],[11,"deserialize","","",243,{"i":[{"n":"__d"}],"o":{"g":["renderargs"],"n":"result"}}],[11,"deserialize","","",240,{"i":[{"n":"__d"}],"o":{"g":["controlleraxisargs"],"n":"result"}}],[11,"bitxor","conrod::input::keyboard","Returns the left flags, but with all the right flags toggled.",524,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"modifierkey"}}],[11,"partial_cmp","conrod::input","",241,{"i":[{"n":"self"},{"n":"key"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","conrod::input::state::mouse","",242,{"i":[{"n":"self"},{"n":"mousebutton"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","conrod::input::keyboard","",524,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",524,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"le","","",524,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"gt","","",524,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"ge","","",524,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"bitxor_assign","","Toggles the set of flags.",524,null],[11,"not","","Returns the complement of this set of flags.",524,{"i":[{"n":"self"}],"o":{"n":"modifierkey"}}],[11,"bitor_assign","","Adds the set of flags.",524,null],[11,"default","","",524,{"o":{"n":"modifierkey"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",524,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"modifierkey"}}],[11,"extend","","",524,null],[11,"eq","conrod::input","",241,{"i":[{"n":"self"},{"n":"key"}],"o":{"n":"bool"}}],[11,"eq","","",240,{"i":[{"n":"self"},{"n":"controlleraxisargs"}],"o":{"n":"bool"}}],[11,"ne","","",240,{"i":[{"n":"self"},{"n":"controlleraxisargs"}],"o":{"n":"bool"}}],[11,"eq","conrod::input::keyboard","",524,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"ne","","",524,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"eq","conrod::input","",243,{"i":[{"n":"self"},{"n":"renderargs"}],"o":{"n":"bool"}}],[11,"ne","","",243,{"i":[{"n":"self"},{"n":"renderargs"}],"o":{"n":"bool"}}],[11,"eq","","",238,{"i":[{"n":"self"},{"n":"button"}],"o":{"n":"bool"}}],[11,"ne","","",238,{"i":[{"n":"self"},{"n":"button"}],"o":{"n":"bool"}}],[11,"eq","conrod::input::state::mouse","",242,{"i":[{"n":"self"},{"n":"mousebutton"}],"o":{"n":"bool"}}],[11,"eq","conrod::input","",239,{"i":[{"n":"self"},{"n":"controllerbutton"}],"o":{"n":"bool"}}],[11,"ne","","",239,{"i":[{"n":"self"},{"n":"controllerbutton"}],"o":{"n":"bool"}}],[11,"sub","conrod::input::keyboard","Returns the set difference of the two sets of flags.",524,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"modifierkey"}}],[11,"fmt","","",524,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"clone","conrod::input","",239,{"i":[{"n":"self"}],"o":{"n":"controllerbutton"}}],[11,"clone","","",243,{"i":[{"n":"self"}],"o":{"n":"renderargs"}}],[11,"clone","","",241,{"i":[{"n":"self"}],"o":{"n":"key"}}],[11,"clone","","",238,{"i":[{"n":"self"}],"o":{"n":"button"}}],[11,"clone","conrod::input::state::mouse","",242,{"i":[{"n":"self"}],"o":{"n":"mousebutton"}}],[11,"clone","conrod::input","",240,{"i":[{"n":"self"}],"o":{"n":"controlleraxisargs"}}],[11,"clone","conrod::input::keyboard","",524,{"i":[{"n":"self"}],"o":{"n":"modifierkey"}}],[11,"fmt","","",524,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"hash","conrod::input","",239,null],[11,"hash","","",238,null],[11,"hash","conrod::input::keyboard","",524,null],[11,"hash","conrod::input::state::mouse","",242,null],[11,"hash","conrod::input","",241,null],[11,"into_glyph_id","conrod::text","",298,{"i":[{"n":"self"},{"n":"font"}],"o":{"n":"glyphid"}}],[11,"mul","conrod::text::rt","",303,{"i":[{"n":"self"},{"n":"f32"}],"o":{"g":["f32"],"n":"vector"}}],[11,"mul","","",303,{"i":[{"n":"self"},{"n":"f64"}],"o":{"g":["f64"],"n":"vector"}}],[11,"cmp","","",303,{"i":[{"n":"self"},{"n":"vector"}],"o":{"n":"ordering"}}],[11,"cmp","","",302,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"ordering"}}],[11,"cmp","","",301,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"ordering"}}],[11,"cmp","conrod::text","",298,{"i":[{"n":"self"},{"n":"glyphid"}],"o":{"n":"ordering"}}],[11,"partial_cmp","conrod::text::rt","",303,{"i":[{"n":"self"},{"n":"vector"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",303,{"i":[{"n":"self"},{"n":"vector"}],"o":{"n":"bool"}}],[11,"le","","",303,{"i":[{"n":"self"},{"n":"vector"}],"o":{"n":"bool"}}],[11,"gt","","",303,{"i":[{"n":"self"},{"n":"vector"}],"o":{"n":"bool"}}],[11,"ge","","",303,{"i":[{"n":"self"},{"n":"vector"}],"o":{"n":"bool"}}],[11,"partial_cmp","conrod::text","",298,{"i":[{"n":"self"},{"n":"glyphid"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",298,{"i":[{"n":"self"},{"n":"glyphid"}],"o":{"n":"bool"}}],[11,"le","","",298,{"i":[{"n":"self"},{"n":"glyphid"}],"o":{"n":"bool"}}],[11,"gt","","",298,{"i":[{"n":"self"},{"n":"glyphid"}],"o":{"n":"bool"}}],[11,"ge","","",298,{"i":[{"n":"self"},{"n":"glyphid"}],"o":{"n":"bool"}}],[11,"partial_cmp","conrod::text::rt","",302,{"i":[{"n":"self"},{"n":"rect"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",302,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"le","","",302,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"gt","","",302,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"ge","","",302,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"partial_cmp","conrod::text","",299,{"i":[{"n":"self"},{"n":"scale"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",299,{"i":[{"n":"self"},{"n":"scale"}],"o":{"n":"bool"}}],[11,"le","","",299,{"i":[{"n":"self"},{"n":"scale"}],"o":{"n":"bool"}}],[11,"gt","","",299,{"i":[{"n":"self"},{"n":"scale"}],"o":{"n":"bool"}}],[11,"ge","","",299,{"i":[{"n":"self"},{"n":"scale"}],"o":{"n":"bool"}}],[11,"partial_cmp","conrod::text::rt","",301,{"i":[{"n":"self"},{"n":"point"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",301,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"bool"}}],[11,"le","","",301,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"bool"}}],[11,"gt","","",301,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"bool"}}],[11,"ge","","",301,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"bool"}}],[11,"next","conrod::text","",525,{"i":[{"n":"self"}],"o":{"g":["positionedglyph"],"n":"option"}}],[11,"next","","",526,{"i":[{"n":"self"}],"o":{"g":["glyph"],"n":"option"}}],[11,"div","conrod::text::rt","",303,{"i":[{"n":"self"},{"n":"f32"}],"o":{"g":["f32"],"n":"vector"}}],[11,"div","","",303,{"i":[{"n":"self"},{"n":"f64"}],"o":{"g":["f64"],"n":"vector"}}],[11,"fmt","conrod::text","",298,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::text::rt","",303,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",301,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::text","",299,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::text::rt","",302,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"add","","",303,{"i":[{"n":"self"},{"n":"vector"}],"o":{"n":"vector"}}],[11,"add","","",303,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"point"}}],[11,"add","","",301,{"i":[{"n":"self"},{"n":"vector"}],"o":{"n":"point"}}],[11,"eq","","",301,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"bool"}}],[11,"ne","","",301,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"bool"}}],[11,"eq","conrod::text","",299,{"i":[{"n":"self"},{"n":"scale"}],"o":{"n":"bool"}}],[11,"ne","","",299,{"i":[{"n":"self"},{"n":"scale"}],"o":{"n":"bool"}}],[11,"eq","","",298,{"i":[{"n":"self"},{"n":"glyphid"}],"o":{"n":"bool"}}],[11,"ne","","",298,{"i":[{"n":"self"},{"n":"glyphid"}],"o":{"n":"bool"}}],[11,"eq","conrod::text::rt","",302,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"ne","","",302,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"eq","","",303,{"i":[{"n":"self"},{"n":"vector"}],"o":{"n":"bool"}}],[11,"ne","","",303,{"i":[{"n":"self"},{"n":"vector"}],"o":{"n":"bool"}}],[11,"sub","","",301,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"vector"}}],[11,"sub","","",301,{"i":[{"n":"self"},{"n":"vector"}],"o":{"n":"point"}}],[11,"sub","","",303,{"i":[{"n":"self"},{"n":"vector"}],"o":{"n":"vector"}}],[11,"clone","conrod::text","",525,{"i":[{"n":"self"}],"o":{"n":"layoutiter"}}],[11,"clone","conrod::text::rt","",303,{"i":[{"n":"self"}],"o":{"n":"vector"}}],[11,"clone","conrod::text","",527,{"i":[{"n":"self"}],"o":{"n":"glyph"}}],[11,"clone","","",299,{"i":[{"n":"self"}],"o":{"n":"scale"}}],[11,"clone","","",298,{"i":[{"n":"self"}],"o":{"n":"glyphid"}}],[11,"clone","conrod::text::rt","",302,{"i":[{"n":"self"}],"o":{"n":"rect"}}],[11,"clone","","",301,{"i":[{"n":"self"}],"o":{"n":"point"}}],[11,"clone","conrod::text","",526,{"i":[{"n":"self"}],"o":{"n":"glyphiter"}}],[11,"hash","","",298,null],[11,"hash","conrod::text::rt","",302,null],[11,"hash","","",303,null],[11,"hash","","",301,null],[11,"swap_buffers","conrod::backend::glium::glium::backend::glutin","",528,{"i":[{"n":"self"}],"o":{"g":["swapbufferserror"],"n":"result"}}],[11,"get_proc_address","","",528,null],[11,"get_framebuffer_dimensions","","",528,null],[11,"is_current","","",528,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"make_current","","",528,null],[11,"swap_buffers","conrod::backend::glium::glium::backend::glutin::headless","",529,{"i":[{"n":"self"}],"o":{"g":["swapbufferserror"],"n":"result"}}],[11,"get_proc_address","","",529,null],[11,"get_framebuffer_dimensions","","",529,null],[11,"is_current","","",529,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"make_current","","",529,null],[11,"get_version","conrod::backend::glium::glium::backend","",530,{"i":[{"n":"self"}],"o":{"n":"version"}}],[11,"get_extensions","","",530,{"i":[{"n":"self"}],"o":{"n":"extensionslist"}}],[11,"get_capabilities","","",530,{"i":[{"n":"self"}],"o":{"n":"capabilities"}}],[11,"as_uniform_value","conrod::backend::glium::glium::uniforms","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","conrod::backend::glium::glium::texture::bindless","",531,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","conrod::backend::glium::glium::uniforms","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","conrod::backend::glium::glium::texture::buffer_texture","",532,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","conrod::backend::glium::glium::uniforms","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"as_uniform_value","","",113,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"to_depth_attachment","conrod::backend::glium::glium::texture::depth_texture2d","",533,{"i":[{"n":"self"}],"o":{"n":"depthattachment"}}],[11,"to_depth_attachment","conrod::backend::glium::glium::texture::depth_cubemap_array","",534,{"i":[{"n":"self"}],"o":{"n":"depthattachment"}}],[11,"to_depth_attachment","conrod::backend::glium::glium::texture::depth_texture3d","",535,{"i":[{"n":"self"}],"o":{"n":"depthattachment"}}],[11,"to_depth_attachment","conrod::backend::glium::glium::texture::depth_texture1d_array","",536,{"i":[{"n":"self"}],"o":{"n":"depthattachment"}}],[11,"to_depth_attachment","conrod::backend::glium::glium::texture::depth_cubemap","",537,{"i":[{"n":"self"}],"o":{"n":"depthattachment"}}],[11,"to_depth_attachment","conrod::backend::glium::glium::texture::depth_texture2d_array","",538,{"i":[{"n":"self"}],"o":{"n":"depthattachment"}}],[11,"to_depth_attachment","conrod::backend::glium::glium::texture::depth_texture2d_multisample_array","",539,{"i":[{"n":"self"}],"o":{"n":"depthattachment"}}],[11,"to_depth_attachment","conrod::backend::glium::glium::texture::depth_texture2d_multisample","",540,{"i":[{"n":"self"}],"o":{"n":"depthattachment"}}],[11,"to_depth_attachment","conrod::backend::glium::glium::framebuffer","",73,{"i":[{"n":"self"}],"o":{"n":"depthattachment"}}],[11,"to_depth_attachment","conrod::backend::glium::glium::texture::depth_texture1d","",541,{"i":[{"n":"self"}],"o":{"n":"depthattachment"}}],[11,"from","conrod::backend::glium::glium::buffer","",542,{"i":[{"n":"vertexbuffer"}],"o":{"n":"buffermutslice"}}],[11,"from","conrod::backend::glium::glium::texture::buffer_texture","",128,{"i":[{"n":"buffercreationerror"}],"o":{"n":"creationerror"}}],[11,"from","conrod::backend::glium::glium::framebuffer","",80,{"i":[{"n":"formatnotsupportederror"}],"o":{"n":"creationerror"}}],[11,"from","conrod::backend::glium::glium::vertex","",126,{"i":[{"n":"buffercreationerror"}],"o":{"n":"creationerror"}}],[11,"from","conrod::backend::glium::glium::buffer","",542,{"i":[{"n":"drawcommandsindicesbuffer"}],"o":{"n":"buffermutslice"}}],[11,"from","conrod::backend::glium::glium::index","",82,{"i":[{"n":"indexbufferslice"}],"o":{"n":"indicessource"}}],[11,"from","conrod::backend::glium::glium::vertex","",543,{"i":[{"n":"buffer"}],"o":{"n":"vertexbufferany"}}],[11,"from","conrod::backend::glium::glium::buffer","",544,{"i":[{"n":"drawcommandsnoindicesbuffer"}],"o":{"n":"bufferslice"}}],[11,"from","conrod::backend::glium::glium::vertex","",543,{"i":[{"n":"vertexbuffer"}],"o":{"n":"vertexbufferany"}}],[11,"from","conrod::backend::glium::glium::buffer","",544,{"i":[{"n":"indexbuffer"}],"o":{"n":"bufferslice"}}],[11,"from","conrod::backend::glium::glium::index","",82,{"i":[{"n":"indexbufferslice"}],"o":{"n":"indicessource"}}],[11,"from","conrod::backend::glium::glium::vertex","",545,{"i":[{"n":"buffer"}],"o":{"n":"vertexbuffer"}}],[11,"from","conrod::backend::glium::glium::draw_parameters","",60,{"i":[{"n":"samplespassedquery"}],"o":{"n":"samplesqueryparam"}}],[11,"from","conrod::backend::glium::glium::buffer","",542,{"i":[{"n":"uniformbuffer"}],"o":{"n":"buffermutslice"}}],[11,"from","","",544,{"i":[{"n":"indexbufferslice"}],"o":{"n":"bufferslice"}}],[11,"from","","",542,{"i":[{"n":"drawcommandsnoindicesbuffer"}],"o":{"n":"buffermutslice"}}],[11,"from","conrod::backend::glium::glium::program","",91,{"i":[{"n":"programcreationerror"}],"o":{"n":"programchoosercreationerror"}}],[11,"from","conrod::backend::glium::glium::backend::glutin","",3,{"i":[{"n":"creationerror"}],"o":{"n":"displaycreationerror"}}],[11,"from","conrod::backend::glium::glium::index","",546,{"i":[{"n":"indexbuffer"}],"o":{"n":"indexbufferany"}}],[11,"from","conrod::backend::glium::glium::texture","",146,{"i":[{"n":"formatnotsupportederror"}],"o":{"n":"texturecreationerror"}}],[11,"from","","",134,{"i":[{"n":"compressedmipmapsoption"}],"o":{"n":"mipmapsoption"}}],[11,"from","conrod::backend::glium::glium::buffer","",544,{"i":[{"n":"vertexbufferslice"}],"o":{"n":"bufferslice"}}],[11,"from","conrod::backend::glium::glium::index","",89,{"i":[{"n":"buffercreationerror"}],"o":{"n":"creationerror"}}],[11,"from","","",82,{"i":[{"n":"indexbuffer"}],"o":{"n":"indicessource"}}],[11,"from","conrod::backend::glium::glium::buffer","",544,{"i":[{"n":"buffer"}],"o":{"n":"bufferslice"}}],[11,"from","conrod::backend::glium::glium::index","",82,{"i":[{"n":"noindices"}],"o":{"n":"indicessource"}}],[11,"from","conrod::backend::glium::glium::buffer","",544,{"i":[{"n":"buffermutslice"}],"o":{"n":"bufferslice"}}],[11,"from","conrod::backend::glium::glium::program","",93,{"i":[{"n":"binary"}],"o":{"n":"programcreationinput"}}],[11,"from","conrod::backend::glium::glium::buffer","",542,{"i":[{"n":"indexbuffer"}],"o":{"n":"buffermutslice"}}],[11,"from","","",544,{"i":[{"n":"drawcommandsindicesbuffer"}],"o":{"n":"bufferslice"}}],[11,"from","conrod::backend::glium::glium::backend::glutin","",3,{"i":[{"n":"incompatibleopengl"}],"o":{"n":"displaycreationerror"}}],[11,"from","conrod::backend::glium::glium::buffer","",544,{"i":[{"n":"uniformbuffer"}],"o":{"n":"bufferslice"}}],[11,"from","conrod::backend::glium::glium::program","",93,{"i":[{"n":"sourcecode"}],"o":{"n":"programcreationinput"}}],[11,"from","conrod::backend::glium::glium::buffer","",544,{"i":[{"n":"vertexbuffer"}],"o":{"n":"bufferslice"}}],[11,"from","conrod::backend::glium::glium::index","",82,{"i":[{"n":"indexbufferany"}],"o":{"n":"indicessource"}}],[11,"from","","",82,{"i":[{"n":"noindices"}],"o":{"n":"indicessource"}}],[11,"from","conrod::backend::glium::glium::buffer","",542,{"i":[{"n":"buffer"}],"o":{"n":"buffermutslice"}}],[11,"from","","",547,{"i":[{"n":"buffer"}],"o":{"n":"bufferany"}}],[11,"from","conrod::backend::glium::glium::draw_parameters","",60,{"i":[{"n":"anysamplespassedquery"}],"o":{"n":"samplesqueryparam"}}],[11,"from","conrod::backend::glium::glium::texture::buffer_texture","",128,{"i":[{"n":"texturecreationerror"}],"o":{"n":"creationerror"}}],[11,"from","conrod::backend::glium::glium::buffer","",544,{"i":[{"n":"buffer"}],"o":{"n":"bufferslice"}}],[11,"fmt","conrod::backend::glium::glium::program","",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::uniforms","",109,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::backend::glutin","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture","",146,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::index","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::framebuffer","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::buffer","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::buffer_texture","",127,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::framebuffer","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::vertex","",126,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::draw_parameters","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium","",172,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture","",149,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::buffer_texture","",128,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::program","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium","",171,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::buffer","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium","",170,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::program","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::unsigned_texture2d_multisample_array","",548,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::compressed_texture2d","",549,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::texture2d_multisample_array","",550,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::uniforms","",115,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::framebuffer","",79,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium","",167,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture","",161,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::vertex","",543,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::debug","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::buffer","",551,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::depth_stencil_texture1d","",552,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::compressed_srgb_texture2d","",553,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::stencil_texture1d","",554,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::depth_texture2d_multisample_array","",555,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::draw_parameters","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::unsigned_texture1d","",556,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::program","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::unsigned_texture2d_multisample","",557,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture","",558,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::compressed_srgb_texture1d","",559,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::compressed_cubemap","",560,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::depth_cubemap_array","",561,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::srgb_texture2d","",562,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium","",175,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::draw_parameters","",563,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::depth_stencil_cubemap","",564,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::buffer","",542,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::stencil_cubemap","",565,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::index","",566,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::draw_parameters","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::compressed_texture1d","",567,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::buffer_texture","",127,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture","",156,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::depth_stencil_texture3d","",568,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::integral_texture2d_multisample_array","",569,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::framebuffer","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::draw_parameters","",570,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::stencil_texture2d_multisample_array","",571,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::depth_cubemap","",572,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::vertex","",125,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::program","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::uniforms","",116,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::buffer_texture","",129,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::uniforms","",114,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::program","",104,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium","",171,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::backend::glutin","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::buffer","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium","",173,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::depth_stencil_texture2d","",573,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::draw_parameters","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium","",170,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::uniforms","",117,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::srgb_texture2d_array","",574,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::program","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::buffer","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture","",148,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::compressed_srgb_texture3d","",575,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::depth_stencil_texture1d_array","",576,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium","",165,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture","",146,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",134,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::cubemap_array","",577,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::integral_texture3d","",578,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::framebuffer","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture","",160,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",159,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::depth_stencil_texture2d_multisample","",579,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::program","",101,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture","",149,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::vertex","",545,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::program","",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::index","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture","",158,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::integral_texture2d_multisample","",580,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::vertex","",126,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::program","",581,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",96,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",106,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::draw_parameters","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",582,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::depth_texture3d","",583,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::index","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::program","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::draw_parameters","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::compressed_srgb_texture1d_array","",584,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::draw_parameters","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture","",152,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::program","",102,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::draw_parameters","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::buffer","",547,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::depth_stencil_texture2d_multisample_array","",585,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::draw_parameters","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::texture2d_array","",586,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::index","",546,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::buffer","",544,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::srgb_cubemap","",587,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::buffer","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::debug","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::draw_parameters","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::texture3d","",588,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::unsigned_texture2d_array","",589,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::texture1d","",590,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::compressed_texture2d_array","",591,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium","",168,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::texture1d_array","",592,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::unsigned_texture1d_array","",593,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture","",135,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::compressed_srgb_texture2d_array","",594,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::index","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::draw_parameters","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::index","",595,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::compressed_srgb_cubemap","",596,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::program","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::draw_parameters","",597,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::stencil_texture2d_multisample","",598,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::program","",100,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::integral_texture1d","",599,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::srgb_texture2d_multisample","",600,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::backend","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::srgb_texture2d_multisample_array","",601,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture","",154,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::program","",602,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::compressed_srgb_cubemap_array","",603,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::index","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::cubemap","",604,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::draw_parameters","",605,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::depth_stencil_texture2d_array","",606,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::uniforms","",607,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::stencil_texture1d_array","",608,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::buffer_texture","",128,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::program","",99,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::index","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::integral_texture2d_array","",609,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::unsigned_texture2d","",610,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::vertex","",611,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::srgb_texture3d","",612,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::depth_texture1d","",613,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::compressed_texture3d","",614,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium","",174,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture","",150,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::integral_texture1d_array","",615,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::uniforms","",616,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::depth_texture2d_array","",617,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::unsigned_cubemap_array","",618,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::srgb_texture1d","",619,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::compressed_cubemap_array","",620,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::uniforms","",113,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture","",157,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::integral_cubemap_array","",621,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture","",155,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::stencil_texture2d","",622,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::integral_texture2d","",623,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture","",162,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",133,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::srgb_texture1d_array","",624,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::depth_texture1d_array","",625,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::texture2d_multisample","",626,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::integral_cubemap","",627,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium","",172,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::draw_parameters","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::unsigned_texture3d","",628,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::compressed_texture1d_array","",629,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::debug","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::bindless","",630,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::srgb_cubemap_array","",631,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::buffer","",632,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium","",166,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::program","",105,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::index","",83,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::depth_stencil_cubemap_array","",633,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture","",147,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::depth_texture2d_multisample","",634,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::buffer","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::uniforms","",109,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::unsigned_cubemap","",635,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::draw_parameters","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::program","",103,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::draw_parameters","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::depth_texture2d","",636,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",153,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::stencil_cubemap_array","",637,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::stencil_texture2d_array","",638,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::texture::texture2d","",639,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::uniforms","",112,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"to_depth_stencil_attachment","conrod::backend::glium::glium::texture::depth_stencil_texture1d","",640,{"i":[{"n":"self"}],"o":{"n":"depthstencilattachment"}}],[11,"to_depth_stencil_attachment","conrod::backend::glium::glium::texture::depth_stencil_texture1d_array","",641,{"i":[{"n":"self"}],"o":{"n":"depthstencilattachment"}}],[11,"to_depth_stencil_attachment","conrod::backend::glium::glium::framebuffer","",77,{"i":[{"n":"self"}],"o":{"n":"depthstencilattachment"}}],[11,"to_depth_stencil_attachment","conrod::backend::glium::glium::texture::depth_stencil_cubemap","",642,{"i":[{"n":"self"}],"o":{"n":"depthstencilattachment"}}],[11,"to_depth_stencil_attachment","conrod::backend::glium::glium::texture::depth_stencil_texture2d","",643,{"i":[{"n":"self"}],"o":{"n":"depthstencilattachment"}}],[11,"to_depth_stencil_attachment","conrod::backend::glium::glium::texture::depth_stencil_cubemap_array","",644,{"i":[{"n":"self"}],"o":{"n":"depthstencilattachment"}}],[11,"to_depth_stencil_attachment","conrod::backend::glium::glium::texture::depth_stencil_texture2d_array","",645,{"i":[{"n":"self"}],"o":{"n":"depthstencilattachment"}}],[11,"to_depth_stencil_attachment","conrod::backend::glium::glium::texture::depth_stencil_texture3d","",646,{"i":[{"n":"self"}],"o":{"n":"depthstencilattachment"}}],[11,"to_depth_stencil_attachment","conrod::backend::glium::glium::texture::depth_stencil_texture2d_multisample","",647,{"i":[{"n":"self"}],"o":{"n":"depthstencilattachment"}}],[11,"to_depth_stencil_attachment","conrod::backend::glium::glium::texture::depth_stencil_texture2d_multisample_array","",648,{"i":[{"n":"self"}],"o":{"n":"depthstencilattachment"}}],[11,"matches","conrod::backend::glium::glium::index","",87,{"i":[{"n":"blocklayout"},{"n":"usize"}],"o":{"g":["layoutmismatcherror"],"n":"result"}}],[11,"build_layout","","",87,{"i":[{"n":"usize"}],"o":{"n":"blocklayout"}}],[11,"matches","conrod::backend::glium::glium::program","",104,{"i":[{"n":"blocklayout"},{"n":"usize"}],"o":{"g":["layoutmismatcherror"],"n":"result"}}],[11,"build_layout","","",104,{"i":[{"n":"usize"}],"o":{"n":"blocklayout"}}],[11,"matches","conrod::backend::glium::glium::index","",88,{"i":[{"n":"blocklayout"},{"n":"usize"}],"o":{"g":["layoutmismatcherror"],"n":"result"}}],[11,"build_layout","","",88,{"i":[{"n":"usize"}],"o":{"n":"blocklayout"}}],[11,"matches","conrod::backend::glium::glium::texture::bindless","",531,{"i":[{"n":"blocklayout"},{"n":"usize"}],"o":{"g":["layoutmismatcherror"],"n":"result"}}],[11,"build_layout","","",531,{"i":[{"n":"usize"}],"o":{"n":"blocklayout"}}],[11,"drop","conrod::backend::glium::glium::backend","",530,null],[11,"drop","conrod::backend::glium::glium","",649,null],[11,"drop","conrod::backend::glium::glium::vertex","",611,null],[11,"drop","conrod::backend::glium::glium","",650,null],[11,"drop","conrod::backend::glium::glium::buffer","",547,null],[11,"drop","conrod::backend::glium::glium","",651,null],[11,"drop","conrod::backend::glium::glium::framebuffer","",652,null],[11,"drop","conrod::backend::glium::glium::texture","",558,null],[11,"drop","conrod::backend::glium::glium::buffer","",632,null],[11,"drop","conrod::backend::glium::glium::texture::buffer_texture","",532,null],[11,"drop","conrod::backend::glium::glium::texture::bindless","",653,null],[11,"to_color_attachment","conrod::backend::glium::glium::texture::unsigned_texture1d_array","",654,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::integral_cubemap","",655,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::integral_texture2d_array","",656,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::srgb_texture3d","",657,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::unsigned_texture2d_multisample","",658,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::cubemap_array","",659,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::texture2d_multisample_array","",660,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::framebuffer","",71,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::unsigned_texture1d","",661,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::texture2d_multisample","",662,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::cubemap","",663,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::srgb_texture2d_multisample","",664,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::texture2d_array","",665,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::integral_texture2d","",666,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::integral_texture2d_multisample","",667,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::srgb_texture2d_multisample_array","",668,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::unsigned_texture2d","",669,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::texture1d_array","",670,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::srgb_texture1d","",671,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::unsigned_texture2d_multisample_array","",672,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::unsigned_texture3d","",673,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::unsigned_cubemap_array","",674,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::integral_texture1d","",675,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::srgb_texture2d_array","",676,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::srgb_texture2d","",677,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::texture3d","",678,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::unsigned_texture2d_array","",679,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::unsigned_cubemap","",680,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::srgb_cubemap_array","",681,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::texture2d","",682,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::texture1d","",683,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::srgb_texture1d_array","",684,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::srgb_cubemap","",685,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::integral_texture2d_multisample_array","",686,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::integral_cubemap_array","",687,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::integral_texture3d","",688,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","conrod::backend::glium::glium::texture::integral_texture1d_array","",689,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"into","conrod::backend::glium::glium::texture::compressed_srgb_cubemap_array","",690,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::integral_texture2d_multisample","",667,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::compressed_texture3d","",691,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::integral_texture2d","",666,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::texture2d_multisample_array","",660,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::stencil_texture2d_multisample","",692,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::unsigned_texture1d","",661,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::depth_texture2d_multisample_array","",539,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::cubemap_array","",659,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::depth_texture3d","",535,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::srgb_texture1d_array","",684,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::integral_texture2d_multisample_array","",686,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::compressed_srgb_texture1d_array","",693,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::srgb_texture1d","",671,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::depth_cubemap_array","",534,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::depth_stencil_texture3d","",646,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::unsigned_texture2d","",669,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::stencil_texture1d","",694,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::integral_texture1d","",675,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::srgb_texture2d","",677,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::compressed_texture1d_array","",695,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::integral_cubemap","",655,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::compressed_srgb_texture1d","",696,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::stencil_texture1d_array","",697,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::depth_stencil_texture2d","",643,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::stencil_texture2d_multisample_array","",698,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::integral_texture3d","",688,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::depth_stencil_texture2d_array","",645,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::vertex","",121,{"i":[{"n":"self"}],"o":{"n":"verticessource"}}],[11,"into","conrod::backend::glium::glium::texture::integral_texture2d_array","",656,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::compressed_texture2d","",699,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::depth_cubemap","",537,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::integral_cubemap_array","",687,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::integral_texture1d_array","",689,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::vertex","",120,{"i":[{"n":"self"}],"o":{"n":"verticessource"}}],[11,"into","conrod::backend::glium::glium::texture::srgb_cubemap_array","",681,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::texture1d","",683,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::stencil_cubemap","",700,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::depth_texture2d_multisample","",540,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::texture2d_array","",665,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::unsigned_texture2d_multisample_array","",672,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::compressed_srgb_texture2d_array","",701,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::unsigned_cubemap","",680,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::unsigned_texture3d","",673,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::unsigned_texture2d_multisample","",658,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::depth_texture2d","",533,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::depth_texture1d_array","",536,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::compressed_cubemap","",702,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::cubemap","",663,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::depth_stencil_texture1d","",640,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::compressed_srgb_cubemap","",703,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::depth_stencil_texture2d_multisample_array","",648,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::depth_stencil_cubemap","",642,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::vertex","",704,{"i":[{"n":"self"}],"o":{"n":"verticessource"}}],[11,"into","conrod::backend::glium::glium::texture::stencil_texture2d_array","",705,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::unsigned_texture2d_array","",679,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::texture2d_multisample","",662,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::srgb_texture2d_array","",676,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::depth_texture2d_array","",538,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::texture2d","",682,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::texture1d_array","",670,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::stencil_texture2d","",706,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::compressed_cubemap_array","",707,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::srgb_cubemap","",685,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::unsigned_texture1d_array","",654,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::depth_texture1d","",541,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::compressed_texture2d_array","",708,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::srgb_texture2d_multisample_array","",668,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::depth_stencil_cubemap_array","",644,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::compressed_srgb_texture3d","",709,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::srgb_texture2d_multisample","",664,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::compressed_srgb_texture2d","",710,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::depth_stencil_texture2d_multisample","",647,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::stencil_cubemap_array","",711,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::texture3d","",678,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::compressed_texture1d","",712,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::unsigned_cubemap_array","",674,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::texture::depth_stencil_texture1d_array","",641,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"into","conrod::backend::glium::glium::vertex","",713,{"i":[{"n":"self"}],"o":{"n":"verticessource"}}],[11,"into","conrod::backend::glium::glium::texture::srgb_texture3d","",657,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"visit_values","conrod::backend::glium::glium::uniforms","",714,null],[11,"visit_values","","",607,null],[11,"get_width","conrod::backend::glium::glium::texture","Returns the width of the texture.",558,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_height","","Returns the height of the texture.",558,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"get_depth","","Returns the depth of the texture.",558,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"kind","","Returns the kind of texture.",558,{"i":[{"n":"self"}],"o":{"n":"texturekind"}}],[11,"dimensions","","Returns the dimensions of the texture.",558,{"i":[{"n":"self"}],"o":{"n":"dimensions"}}],[11,"get_array_size","","Returns the array size of the texture.",558,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"get_samples","","Returns the number of samples of the texture if it is a multisampling texture.",558,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"first_layer","","Returns a structure that represents the first layer of the texture. All textures have a first layer.",558,{"i":[{"n":"self"}],"o":{"n":"textureanylayer"}}],[11,"layer","","Returns a structure that represents a specific layer of the texture.",558,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["textureanylayer"],"n":"option"}}],[11,"get_texture_type","","Returns the type of the texture (1D, 2D, 3D, etc.).",558,{"i":[{"n":"self"}],"o":{"n":"dimensions"}}],[11,"get_internal_format","","Determines the internal format of this texture.",558,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",558,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"main_level","","Returns a structure that represents the main mipmap level of the texture.",558,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"mipmap","","Returns a structure that represents a specific mipmap of the texture.",558,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["textureanymipmap"],"n":"option"}}],[11,"generate_mipmaps","","Binds this texture and generates mipmaps.",558,null],[11,"deref","conrod::backend::glium::glium::texture::compressed_texture2d_array","",591,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::texture2d_multisample_array","",550,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"get_width","conrod::backend::glium::glium::texture","Returns the width of the mipmap.",715,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_height","","Returns the height of the mipmap.",715,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"get_depth","","Returns the depth of the mipmap.",715,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"get_samples","","Returns the number of samples of the texture.",715,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"get_texture","","Returns the texture.",715,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"get_level","","Returns the level of the texture.",715,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Returns a structure that represents the first layer of this mipmap of the texture. All textures have a first layer.",715,{"i":[{"n":"self"}],"o":{"n":"textureanylayermipmap"}}],[11,"layer","","Returns a structure that represents a specific layer of this mipmap of the texture.",715,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["textureanylayermipmap"],"n":"option"}}],[11,"get_array_size","","Returns the array size of the texture.",715,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"raw_upload_from_pixel_buffer","","Uploads data to the texture from a buffer.",715,null],[11,"raw_upload_from_pixel_buffer_inverted","","Uploads data to the texture from a buffer. The R, G and B components are flipped.",715,null],[11,"deref","conrod::backend::glium::glium::texture::srgb_cubemap","",716,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"get_dimensions","conrod::backend::glium::glium::framebuffer","Returns the dimensions of the render buffer.",652,null],[11,"get_samples","","Returns the number of samples of the render buffer, or `None` if multisampling isn't enabled.",652,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"get_context","","Returns the context used to create this renderbuffer.",652,{"i":[{"n":"self"}],"o":{"n":"rc"}}],[11,"kind","","Returns the kind of renderbuffer.",652,{"i":[{"n":"self"}],"o":{"n":"texturekind"}}],[11,"deref","","",717,{"i":[{"n":"self"}],"o":{"n":"renderbufferany"}}],[11,"deref","conrod::backend::glium::glium::texture::compressed_texture1d","",712,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::stencil_cubemap","",565,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::compressed_texture2d","",549,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_texture1d_array","",718,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::srgb_cubemap_array","",719,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::integral_texture1d","",599,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::cubemap_array","",577,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_stencil_texture1d","",640,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::compressed_texture1d_array","",629,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::unsigned_cubemap","",720,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::unsigned_texture2d_multisample_array","",721,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::cubemap","",722,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_texture1d","",541,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_texture2d","",533,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_stencil_texture2d_multisample","",647,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_texture2d_multisample","",634,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::compressed_srgb_texture2d","",553,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::compressed_texture1d_array","",723,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::texture3d","",588,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::stencil_texture1d_array","",724,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_stencil_cubemap","",725,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_texture1d_array","",625,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::compressed_srgb_texture2d","",710,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_texture2d_multisample_array","",726,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::stencil_texture1d","",554,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::integral_texture2d","",623,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::integral_cubemap","",627,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_stencil_texture1d_array","",727,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::integral_cubemap_array","",728,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::compressed_cubemap_array","",620,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::integral_texture1d_array","",729,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"new","conrod::backend::glium::glium::buffer","Builds a new buffer containing the given data. The size of the buffer is equal to the size of the data.",632,{"i":[{"n":"f"},{"n":"t"},{"n":"buffertype"},{"n":"buffermode"}],"o":{"g":["buffer","buffercreationerror"],"n":"result"}}],[11,"empty_unsized","","Builds a new buffer of the given size.",632,{"i":[{"n":"f"},{"n":"buffertype"},{"n":"usize"},{"n":"buffermode"}],"o":{"g":["buffer","buffercreationerror"],"n":"result"}}],[11,"get_context","","Returns the context corresponding to this buffer.",632,{"i":[{"n":"self"}],"o":{"n":"rc"}}],[11,"get_size","","Returns the size in bytes of this buffer.",632,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_persistent","","Returns true if this buffer uses persistent mapping.",632,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"write","","Uploads some data in this buffer.",632,null],[11,"invalidate","","Invalidates the content of the buffer. The data becomes undefined.",632,null],[11,"read","","Reads the content of the buffer.",632,{"i":[{"n":"self"}],"o":{"g":["readerror"],"n":"result"}}],[11,"map","","Maps the buffer in memory for both reading and writing.",632,{"i":[{"n":"self"}],"o":{"n":"mapping"}}],[11,"map_read","","Maps the buffer in memory for reading.",632,{"i":[{"n":"self"}],"o":{"n":"readmapping"}}],[11,"map_write","","Maps the buffer in memory for writing only.",632,{"i":[{"n":"self"}],"o":{"n":"writemapping"}}],[11,"copy_to","","Copies the content of the buffer to another buffer.",632,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["copyerror"],"n":"result"}}],[11,"slice_custom","","Builds a slice that contains an element from inside the buffer.",632,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"bufferslice"}}],[11,"slice_custom_mut","","Same as `slice_custom` but returns a mutable slice.",632,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"buffermutslice"}}],[11,"as_slice","","Builds a slice containing the whole subbuffer.",632,{"i":[{"n":"self"}],"o":{"n":"bufferslice"}}],[11,"as_mut_slice","","Builds a slice containing the whole subbuffer.",632,{"i":[{"n":"self"}],"o":{"n":"buffermutslice"}}],[11,"as_slice_any","","Builds a slice-any containing the whole subbuffer.",632,{"i":[{"n":"self"}],"o":{"n":"bufferanyslice"}}],[11,"empty","","Builds a new buffer of the given size.",632,{"i":[{"n":"f"},{"n":"buffertype"},{"n":"buffermode"}],"o":{"g":["buffer","buffercreationerror"],"n":"result"}}],[11,"empty_array","","Builds a new buffer of the given size.",632,{"i":[{"n":"f"},{"n":"buffertype"},{"n":"usize"},{"n":"buffermode"}],"o":{"g":["buffer","buffercreationerror"],"n":"result"}}],[11,"len","","Returns the number of elements in this buffer.",632,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"slice","","Builds a slice of this subbuffer. Returns `None` if out of range.",632,{"i":[{"n":"self"},{"n":"r"}],"o":{"g":["bufferslice"],"n":"option"}}],[11,"slice_mut","","Builds a slice of this subbuffer. Returns `None` if out of range.",632,{"i":[{"n":"self"},{"n":"r"}],"o":{"g":["buffermutslice"],"n":"option"}}],[11,"read_as_texture_1d","","Reads the content of the buffer.",632,{"i":[{"n":"self"}],"o":{"g":["readerror"],"n":"result"}}],[11,"deref","conrod::backend::glium::glium::index","",730,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"deref","conrod::backend::glium::glium::texture::integral_texture2d_multisample_array","",731,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::texture3d","",678,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::integral_texture2d_multisample_array","",569,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::srgb_texture3d","",657,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::srgb_texture2d","",677,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::srgb_cubemap_array","",631,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::vertex","",545,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_stencil_texture2d_array","",606,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::compressed_srgb_texture1d_array","",732,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_cubemap","",572,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::stencil_texture2d_multisample_array","",571,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::integral_texture1d","",675,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::texture2d_multisample","",662,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_stencil_texture2d_multisample","",579,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::buffer","",733,{"i":[{"n":"self"}],"o":{"n":"d"}}],[11,"deref","conrod::backend::glium::glium::texture::cubemap","",604,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::srgb_texture2d_multisample_array","",734,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::compressed_cubemap","",560,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::integral_texture2d_array","",735,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::srgb_texture2d_array","",574,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::stencil_texture1d_array","",608,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::texture2d","",682,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::compressed_srgb_cubemap_array","",603,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::unsigned_cubemap_array","",736,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::integral_texture2d_multisample","",667,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::backend::glutin::headless","",529,{"i":[{"n":"self"}],"o":{"n":"headlesscontext"}}],[11,"deref","conrod::backend::glium::glium::texture::srgb_texture2d_multisample","",664,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_texture2d_array","",737,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::compressed_texture3d","",614,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::buffer","",738,{"i":[{"n":"self"}],"o":{"n":"d"}}],[11,"deref","conrod::backend::glium::glium::texture::texture1d","",590,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::srgb_texture2d_multisample_array","",601,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::compressed_srgb_texture2d_array","",739,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::index","",595,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"deref","conrod::backend::glium::glium::texture::unsigned_texture2d","",669,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::integral_cubemap_array","",621,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::unsigned_texture2d_multisample_array","",548,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::stencil_texture2d_array","",638,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_stencil_texture2d_array","",740,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::stencil_texture1d","",694,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::integral_texture3d","",578,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_stencil_texture3d","",646,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::unsigned_texture1d","",661,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::stencil_cubemap_array","",741,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::texture1d","",683,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::compressed_srgb_texture1d","",696,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::srgb_texture2d","",562,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_slice_any","conrod::backend::glium::glium::buffer","Builds a slice-any containing the whole subbuffer.",547,{"i":[{"n":"self"}],"o":{"n":"bufferanyslice"}}],[11,"as_typed_slice_mut","","Builds a mutable typed slice containing the whole subbuffer, without checking the type.",547,{"i":[{"n":"self"}],"o":{"n":"buffermutslice"}}],[11,"as_typed_slice","","Builds a typed slice containing the whole subbuffer, without checking the type.",547,{"i":[{"n":"self"}],"o":{"n":"bufferslice"}}],[11,"get_elements_size","","Returns the size in bytes of each element in the buffer.",547,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"get_elements_count","","Returns the number of elements in the buffer.",547,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"get_context","","Returns the context corresponding to this buffer.",547,{"i":[{"n":"self"}],"o":{"n":"rc"}}],[11,"get_size","","Returns the number of bytes in this subbuffer.",547,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"invalidate","","Invalidates the content of the buffer. The data becomes undefined.",547,null],[11,"read","","UNSTABLE. This function can be removed at any moment without any further notice.",547,{"i":[{"n":"self"}],"o":{"g":["readerror"],"n":"result"}}],[11,"deref","conrod::backend::glium::glium::index","",546,{"i":[{"n":"self"}],"o":{"n":"bufferany"}}],[11,"deref","conrod::backend::glium::glium::texture::stencil_texture2d","",622,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_texture3d","",583,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::srgb_texture2d_array","",742,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::compressed_srgb_texture3d","",575,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::framebuffer","",743,{"i":[{"n":"self"}],"o":{"n":"renderbufferany"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_cubemap","",744,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::backend::glutin","",528,{"i":[{"n":"self"}],"o":{"n":"rc"}}],[11,"deref","conrod::backend::glium::glium::texture::compressed_texture1d","",567,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"new","conrod::backend::glium::glium::backend","Builds a new context.",530,{"i":[{"n":"b"},{"n":"bool"},{"n":"debugcallbackbehavior"}],"o":{"g":["rc","incompatibleopengl"],"n":"result"}}],[11,"get_framebuffer_dimensions","","Calls `get_framebuffer_dimensions` on the backend object stored by this context.",530,null],[11,"rebuild","","Changes the OpenGL context associated with this context.",530,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["incompatibleopengl"],"n":"result"}}],[11,"swap_buffers","","Swaps the buffers in the backend.",530,{"i":[{"n":"self"}],"o":{"g":["swapbufferserror"],"n":"result"}}],[11,"get_version","","DEPRECATED. Use `get_opengl_version` instead.",530,{"i":[{"n":"self"}],"o":{"n":"version"}}],[11,"get_opengl_version","","Returns the OpenGL version detected by this context.",530,{"i":[{"n":"self"}],"o":{"n":"version"}}],[11,"get_supported_glsl_version","","Returns the GLSL version guaranteed to be supported.",530,{"i":[{"n":"self"}],"o":{"n":"version"}}],[11,"is_glsl_version_supported","","Returns true if the given GLSL version is supported.",530,{"i":[{"n":"self"},{"n":"version"}],"o":{"n":"bool"}}],[11,"get_opengl_version_string","","Returns a string containing this GL version or release number used by this context.",530,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"get_opengl_vendor_string","","Returns a string containing the company responsible for this GL implementation.",530,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"get_opengl_renderer_string","","Returns a string containing the name of the GL renderer used by this context.",530,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"is_debug","","Returns true if the context is in debug mode.",530,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_forward_compatible","","Returns true if the context is in \"forward-compatible\" mode.",530,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_opengl_profile","","Returns this context's OpenGL profile if available.",530,{"i":[{"n":"self"}],"o":{"g":["profile"],"n":"option"}}],[11,"is_robust","","Returns true if out-of-bound buffer access from the GPU side (inside a program) cannot result in a crash.",530,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_context_loss_possible","","Returns true if a context loss is possible.",530,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_context_lost","","Returns true if the context has been lost and needs to be recreated.",530,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_release_behavior","","Returns the behavior when the current OpenGL context is changed.",530,{"i":[{"n":"self"}],"o":{"n":"releasebehavior"}}],[11,"get_max_anisotropy_support","","Returns the maximum value that can be used for anisotropic filtering, or `None` if the hardware doesn't support it.",530,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"get_max_viewport_dimensions","","Returns the maximum dimensions of the viewport.",530,null],[11,"release_shader_compiler","","Releases the shader compiler, indicating that no new programs will be created for a while.",530,null],[11,"get_free_video_memory","","Returns an estimate of the amount of video memory available in bytes.",530,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"read_front_buffer","","Reads the content of the front buffer.",530,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"exec_in_context","","Execute an arbitrary closure with the OpenGL context active. Useful if another component needs to directly manipulate OpenGL state.",530,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"t"}}],[11,"assert_no_error","","Asserts that there are no OpenGL errors pending.",530,null],[11,"synchronize","","DEPRECATED. Renamed `finish`.",530,null],[11,"finish","","Calls `glFinish()`. This waits until all the previously issued commands have finished being executed.",530,null],[11,"flush","","Calls `glFlush()`. This starts executing the commands that you have issued if it is not yet the case.",530,null],[11,"insert_debug_marker","","Inserts a debugging string in the commands queue. If you use an OpenGL debugger, you will be able to see that string.",530,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"debug_insert_debug_marker","","Same as `insert_debug_marker`, except that if you don't compile with `debug_assertions` it is a no-op and returns `Ok`.",530,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"deref","conrod::backend::glium::glium::backend::glutin","",187,{"i":[{"n":"self"}],"o":{"n":"context"}}],[11,"deref","conrod::backend::glium::glium::texture::unsigned_texture1d","",556,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::integral_texture2d_multisample","",580,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::unsigned_texture3d","",628,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::integral_texture2d","",666,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::buffer_texture","",532,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"deref","conrod::backend::glium::glium::texture::compressed_srgb_texture2d_array","",594,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::compressed_srgb_cubemap","",745,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::stencil_cubemap","",746,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_stencil_texture2d_multisample_array","",585,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::unsigned_texture2d_array","",589,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::texture2d_multisample_array","",747,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_stencil_texture2d","",643,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::stencil_cubemap_array","",637,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::texture1d_array","",748,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::unsigned_texture1d_array","",749,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::srgb_texture1d_array","",750,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::compressed_texture2d_array","",751,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::framebuffer","",752,{"i":[{"n":"self"}],"o":{"n":"renderbufferany"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_texture2d_multisample","",540,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::srgb_texture2d_multisample","",600,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_texture2d_multisample_array","",555,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_stencil_texture1d_array","",576,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::unsigned_texture2d_multisample","",557,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::compressed_srgb_cubemap","",596,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::texture2d","",639,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::unsigned_texture2d_multisample","",658,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::stencil_texture2d_multisample_array","",753,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::compressed_texture2d","",699,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::index","",754,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"deref","conrod::backend::glium::glium::vertex","",543,{"i":[{"n":"self"}],"o":{"n":"bufferany"}}],[11,"get_size","conrod::backend::glium::glium::buffer","Returns the size in bytes of this slice.",544,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"get_context","","Returns the context corresponding to this buffer.",544,{"i":[{"n":"self"}],"o":{"n":"rc"}}],[11,"write","","Uploads some data in this buffer.",544,null],[11,"invalidate","","Invalidates the content of the slice. The data becomes undefined.",544,null],[11,"read","","Reads the content of the buffer.",544,{"i":[{"n":"self"}],"o":{"g":["readerror"],"n":"result"}}],[11,"copy_to","","Copies the content of this slice to another slice.",544,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["copyerror"],"n":"result"}}],[11,"slice_custom","","Builds a slice that contains an element from inside the buffer.",544,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"bufferslice"}}],[11,"as_slice_any","","Builds a slice-any containing the whole subbuffer.",544,{"i":[{"n":"self"}],"o":{"n":"bufferanyslice"}}],[11,"len","","Returns the number of elements in this slice.",544,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"slice","","Builds a subslice of this slice. Returns `None` if out of range.",544,{"i":[{"n":"self"},{"n":"r"}],"o":{"g":["bufferslice"],"n":"option"}}],[11,"read_as_texture_1d","","Reads the content of the buffer.",544,{"i":[{"n":"self"}],"o":{"g":["readerror"],"n":"result"}}],[11,"deref","conrod::backend::glium::glium::index","",566,{"i":[{"n":"self"}],"o":{"n":"bufferslice"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_cubemap_array","",561,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::uniforms","",616,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"deref","conrod::backend::glium::glium::texture::unsigned_texture1d_array","",593,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_cubemap_array","",755,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::compressed_srgb_texture3d","",709,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::unsigned_cubemap","",635,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::integral_cubemap","",756,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_stencil_texture2d_multisample_array","",757,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_stencil_cubemap","",564,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_texture2d","",636,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::bindless","",653,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::vertex","",704,{"i":[{"n":"self"}],"o":{"n":"bufferslice"}}],[11,"deref","conrod::backend::glium::glium::texture::texture2d_multisample","",626,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_texture2d_array","",617,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::integral_texture1d_array","",615,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::compressed_srgb_texture1d","",559,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::srgb_texture1d_array","",624,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_stencil_cubemap_array","",633,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::srgb_cubemap","",587,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_stencil_texture3d","",568,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::srgb_texture1d","",619,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::compressed_texture3d","",691,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::compressed_srgb_texture1d_array","",584,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_texture3d","",535,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::stencil_texture2d_multisample","",598,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::stencil_texture2d","",706,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::integral_texture2d_array","",609,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_stencil_texture1d","",552,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::stencil_texture2d_array","",758,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_texture1d","",613,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_stencil_cubemap_array","",759,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::depth_stencil_texture2d","",573,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::pixel_buffer","",760,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"deref","conrod::backend::glium::glium::texture::unsigned_texture3d","",673,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::unsigned_texture2d","",610,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::stencil_texture2d_multisample","",692,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::compressed_srgb_cubemap_array","",761,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::framebuffer","",762,{"i":[{"n":"self"}],"o":{"n":"renderbufferany"}}],[11,"deref","conrod::backend::glium::glium::texture::srgb_texture1d","",671,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::cubemap_array","",763,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::texture2d_array","",586,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::backend::glutin::headless","",523,{"i":[{"n":"self"}],"o":{"n":"context"}}],[11,"deref","conrod::backend::glium::glium::texture::compressed_cubemap_array","",764,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::unsigned_texture2d_array","",765,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::integral_texture3d","",688,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::srgb_texture3d","",612,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::texture1d_array","",592,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::compressed_cubemap","",766,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"deref","conrod::backend::glium::glium::texture::unsigned_cubemap_array","",618,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","conrod::backend::glium::glium::texture::texture2d_array","",767,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"into_raw","conrod::backend::glium::glium::texture","",145,{"i":[{"n":"self"}],"o":{"n":"rawimage3d"}}],[11,"partial_cmp","conrod::backend::glium::glium","",175,{"i":[{"n":"self"},{"n":"version"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_id","conrod::backend::glium::glium::texture::compressed_texture2d_array","",591,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::depth_cubemap","",572,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::stencil_texture1d_array","",608,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::depth_texture2d_array","",617,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::texture2d","",639,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::stencil_cubemap","",565,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::texture2d_multisample","",626,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::depth_texture2d_multisample_array","",555,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::unsigned_texture2d_multisample_array","",548,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture","",558,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::depth_stencil_cubemap","",564,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::depth_stencil_texture2d_array","",606,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::buffer","",551,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::framebuffer","",652,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::srgb_texture2d_multisample_array","",601,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::unsigned_cubemap_array","",618,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::depth_stencil_texture2d_multisample","",579,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::compressed_cubemap_array","",620,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::depth_texture2d_multisample","",634,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::unsigned_cubemap","",635,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::srgb_cubemap","",587,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::draw_parameters","",605,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::depth_texture1d","",613,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::program","",581,{"i":[{"n":"self"}],"o":{"n":"handle"}}],[11,"get_id","conrod::backend::glium::glium::texture::texture2d_multisample_array","",550,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::integral_texture1d","",599,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::depth_stencil_texture1d","",552,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::srgb_texture3d","",612,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::depth_stencil_texture2d_multisample_array","",585,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::index","",595,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::texture1d_array","",592,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::stencil_cubemap_array","",637,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::compressed_texture3d","",614,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::unsigned_texture2d_array","",589,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::integral_texture3d","",578,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::depth_stencil_texture1d_array","",576,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::srgb_texture2d_multisample","",600,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::framebuffer","",762,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::compressed_cubemap","",560,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::compressed_srgb_texture2d_array","",594,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::depth_stencil_texture2d","",573,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::compressed_srgb_texture2d","",553,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::integral_cubemap_array","",621,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::pixel_buffer","",760,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::unsigned_texture1d_array","",593,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::compressed_texture1d_array","",629,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::cubemap","",604,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::texture2d_array","",586,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::draw_parameters","",597,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::framebuffer","",717,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::stencil_texture2d","",622,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::buffer","",632,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::srgb_texture1d","",619,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::integral_texture2d_multisample","",580,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::compressed_texture2d","",549,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::compressed_srgb_texture1d_array","",584,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::unsigned_texture3d","",628,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::depth_texture2d","",636,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::framebuffer","",743,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::vertex","",545,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::depth_cubemap_array","",561,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::draw_parameters","",563,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::integral_texture2d_multisample_array","",569,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::draw_parameters","",582,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::integral_texture2d","",623,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::srgb_texture2d","",562,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::cubemap_array","",577,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::unsigned_texture2d_multisample","",557,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::depth_stencil_cubemap_array","",633,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::compressed_texture1d","",567,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::program","",602,{"i":[{"n":"self"}],"o":{"n":"handle"}}],[11,"get_id","conrod::backend::glium::glium::texture::srgb_cubemap_array","",631,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::stencil_texture2d_multisample_array","",571,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::texture3d","",588,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::depth_stencil_texture3d","",568,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::compressed_srgb_texture3d","",575,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::srgb_texture2d_array","",574,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::draw_parameters","",570,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::depth_texture1d_array","",625,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::compressed_srgb_texture1d","",559,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::unsigned_texture1d","",556,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::integral_cubemap","",627,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::stencil_texture2d_multisample","",598,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::compressed_srgb_cubemap_array","",603,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::texture1d","",590,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::unsigned_texture2d","",610,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::stencil_texture1d","",554,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::compressed_srgb_cubemap","",596,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::framebuffer","",752,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::stencil_texture2d_array","",638,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::integral_texture1d_array","",615,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::depth_texture3d","",583,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::integral_texture2d_array","",609,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::uniforms","",616,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_id","conrod::backend::glium::glium::texture::srgb_texture1d_array","",624,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clear","conrod::backend::glium::glium::framebuffer","",768,null],[11,"get_dimensions","","",768,null],[11,"get_depth_buffer_bits","","",768,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"get_stencil_buffer_bits","","",768,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"draw","","",768,{"i":[{"n":"self"},{"n":"v"},{"n":"i"},{"n":"program"},{"n":"u"},{"n":"drawparameters"}],"o":{"g":["drawerror"],"n":"result"}}],[11,"blit_color","","",768,null],[11,"blit_from_frame","","",768,null],[11,"blit_from_simple_framebuffer","","",768,null],[11,"blit_from_multioutput_framebuffer","","",768,null],[11,"clear","conrod::backend::glium::glium","",649,null],[11,"get_dimensions","","",649,null],[11,"get_depth_buffer_bits","","",649,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"get_stencil_buffer_bits","","",649,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"draw","","",649,{"i":[{"n":"self"},{"n":"v"},{"n":"i"},{"n":"program"},{"n":"u"},{"n":"drawparameters"}],"o":{"g":["drawerror"],"n":"result"}}],[11,"blit_color","","",649,null],[11,"blit_from_frame","","",649,null],[11,"blit_from_simple_framebuffer","","",649,null],[11,"blit_from_multioutput_framebuffer","","",649,null],[11,"clear","conrod::backend::glium::glium::framebuffer","",769,null],[11,"get_dimensions","","",769,null],[11,"get_depth_buffer_bits","","",769,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"get_stencil_buffer_bits","","",769,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"draw","","",769,{"i":[{"n":"self"},{"n":"v"},{"n":"i"},{"n":"program"},{"n":"u"},{"n":"drawparameters"}],"o":{"g":["drawerror"],"n":"result"}}],[11,"blit_color","","",769,null],[11,"blit_from_frame","","",769,null],[11,"blit_from_simple_framebuffer","","",769,null],[11,"blit_from_multioutput_framebuffer","","",769,null],[11,"clear","","",770,null],[11,"get_dimensions","","",770,null],[11,"get_depth_buffer_bits","","",770,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"get_stencil_buffer_bits","","",770,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"draw","","",770,{"i":[{"n":"self"},{"n":"v"},{"n":"i"},{"n":"program"},{"n":"u"},{"n":"drawparameters"}],"o":{"g":["drawerror"],"n":"result"}}],[11,"blit_color","","",770,null],[11,"blit_from_frame","","",770,null],[11,"blit_from_simple_framebuffer","","",770,null],[11,"blit_from_multioutput_framebuffer","","",770,null],[11,"clear","","",771,null],[11,"get_dimensions","","",771,null],[11,"get_depth_buffer_bits","","",771,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"get_stencil_buffer_bits","","",771,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"draw","","",771,{"i":[{"n":"self"},{"n":"v"},{"n":"i"},{"n":"program"},{"n":"u"},{"n":"drawparameters"}],"o":{"g":["drawerror"],"n":"result"}}],[11,"blit_color","","",771,null],[11,"blit_from_frame","","",771,null],[11,"blit_from_simple_framebuffer","","",771,null],[11,"blit_from_multioutput_framebuffer","","",771,null],[11,"to_stencil_attachment","","",75,{"i":[{"n":"self"}],"o":{"n":"stencilattachment"}}],[11,"to_stencil_attachment","conrod::backend::glium::glium::texture::stencil_cubemap","",700,{"i":[{"n":"self"}],"o":{"n":"stencilattachment"}}],[11,"to_stencil_attachment","conrod::backend::glium::glium::texture::stencil_cubemap_array","",711,{"i":[{"n":"self"}],"o":{"n":"stencilattachment"}}],[11,"to_stencil_attachment","conrod::backend::glium::glium::texture::stencil_texture2d_multisample_array","",698,{"i":[{"n":"self"}],"o":{"n":"stencilattachment"}}],[11,"to_stencil_attachment","conrod::backend::glium::glium::texture::stencil_texture2d_array","",705,{"i":[{"n":"self"}],"o":{"n":"stencilattachment"}}],[11,"to_stencil_attachment","conrod::backend::glium::glium::texture::stencil_texture1d_array","",697,{"i":[{"n":"self"}],"o":{"n":"stencilattachment"}}],[11,"to_stencil_attachment","conrod::backend::glium::glium::texture::stencil_texture2d","",706,{"i":[{"n":"self"}],"o":{"n":"stencilattachment"}}],[11,"to_stencil_attachment","conrod::backend::glium::glium::texture::stencil_texture2d_multisample","",692,{"i":[{"n":"self"}],"o":{"n":"stencilattachment"}}],[11,"to_stencil_attachment","conrod::backend::glium::glium::texture::stencil_texture1d","",694,{"i":[{"n":"self"}],"o":{"n":"stencilattachment"}}],[11,"default","conrod::backend::glium::glium::draw_parameters","",58,{"o":{"n":"drawparameters"}}],[11,"default","conrod::backend::glium::glium","",167,{"o":{"n":"rect"}}],[11,"default","conrod::backend::glium::glium::draw_parameters","",70,{"o":{"n":"depth"}}],[11,"default","conrod::backend::glium::glium::buffer","",46,{"o":{"n":"buffermode"}}],[11,"default","conrod::backend::glium::glium","",168,{"o":{"n":"blittarget"}}],[11,"default","conrod::backend::glium::glium::debug","",53,{"o":{"n":"debugcallbackbehavior"}}],[11,"default","conrod::backend::glium::glium::uniforms","",115,{"o":{"n":"samplerbehavior"}}],[11,"default","conrod::backend::glium::glium::draw_parameters","",62,{"o":{"n":"blend"}}],[11,"default","","",64,{"o":{"n":"stencil"}}],[11,"description","conrod::backend::glium::glium","",171,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","conrod::backend::glium::glium::program","",92,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","conrod::backend::glium::glium::draw_parameters","",67,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","conrod::backend::glium::glium","",170,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",170,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"description","conrod::backend::glium::glium::vertex","",126,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",126,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"description","conrod::backend::glium::glium::index","",89,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",89,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"description","conrod::backend::glium::glium::texture::buffer_texture","",128,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",128,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"description","conrod::backend::glium::glium::buffer","",45,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","conrod::backend::glium::glium::framebuffer","",80,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","conrod::backend::glium::glium::program","",91,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",91,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"description","conrod::backend::glium::glium::texture::buffer_texture","",127,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","conrod::backend::glium::glium::buffer","",49,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","conrod::backend::glium::glium::uniforms","",109,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",109,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"description","conrod::backend::glium::glium::buffer","",48,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","conrod::backend::glium::glium::texture","",149,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","conrod::backend::glium::glium::framebuffer","",81,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","conrod::backend::glium::glium::backend::glutin","",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",3,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"description","conrod::backend::glium::glium::texture","",146,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","conrod::backend::glium::glium","",172,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","conrod::backend::glium::glium::program","",90,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"into_raw","conrod::backend::glium::glium::texture","",138,{"i":[{"n":"self"}],"o":{"n":"rawimage1d"}}],[11,"get_context","conrod::backend::glium::glium::backend::glutin::headless","",523,{"i":[{"n":"self"}],"o":{"n":"rc"}}],[11,"get_context","conrod::backend::glium::glium::backend::glutin","",187,{"i":[{"n":"self"}],"o":{"n":"rc"}}],[11,"eq","conrod::backend::glium::glium::draw_parameters","",56,{"i":[{"n":"self"},{"n":"smooth"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::uniforms","",116,{"i":[{"n":"self"},{"n":"minifysamplerfilter"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::texture","",154,{"i":[{"n":"self"},{"n":"dimensions"}],"o":{"n":"bool"}}],[11,"ne","","",154,{"i":[{"n":"self"},{"n":"dimensions"}],"o":{"n":"bool"}}],[11,"eq","","",161,{"i":[{"n":"self"},{"n":"textureformat"}],"o":{"n":"bool"}}],[11,"ne","","",161,{"i":[{"n":"self"},{"n":"textureformat"}],"o":{"n":"bool"}}],[11,"eq","","",150,{"i":[{"n":"self"},{"n":"uncompresseduintformat"}],"o":{"n":"bool"}}],[11,"eq","","",146,{"i":[{"n":"self"},{"n":"texturecreationerror"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::uniforms","",114,{"i":[{"n":"self"},{"n":"samplerwrapfunction"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium","",171,{"i":[{"n":"self"},{"n":"swapbufferserror"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::texture","",162,{"i":[{"n":"self"},{"n":"depthstencilformat"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::draw_parameters","",69,{"i":[{"n":"self"},{"n":"depthtest"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::texture","",148,{"i":[{"n":"self"},{"n":"stencilformat"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::buffer","",46,{"i":[{"n":"self"},{"n":"buffermode"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::program","",97,{"i":[{"n":"self"},{"n":"transformfeedbackbuffer"}],"o":{"n":"bool"}}],[11,"ne","","",97,{"i":[{"n":"self"},{"n":"transformfeedbackbuffer"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::texture","",160,{"i":[{"n":"self"},{"n":"uncompressedintformat"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::buffer","",47,{"i":[{"n":"self"},{"n":"buffertype"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::texture::buffer_texture","",129,{"i":[{"n":"self"},{"n":"buffertexturetype"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::uniforms","",117,{"i":[{"n":"self"},{"n":"magnifysamplerfilter"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::backend","",43,{"i":[{"n":"self"},{"n":"releasebehavior"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::draw_parameters","",63,{"i":[{"n":"self"},{"n":"stenciltest"}],"o":{"n":"bool"}}],[11,"ne","","",63,{"i":[{"n":"self"},{"n":"stenciltest"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::vertex","",125,{"i":[{"n":"self"},{"n":"attributetype"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::draw_parameters","",55,{"i":[{"n":"self"},{"n":"polygonmode"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::index","",83,{"i":[{"n":"self"},{"n":"primitivetype"}],"o":{"n":"bool"}}],[11,"ne","","",83,{"i":[{"n":"self"},{"n":"primitivetype"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::uniforms","",113,{"i":[{"n":"self"},{"n":"sampler"}],"o":{"n":"bool"}}],[11,"ne","","",113,{"i":[{"n":"self"},{"n":"sampler"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::texture","",156,{"i":[{"n":"self"},{"n":"compressedsrgbformat"}],"o":{"n":"bool"}}],[11,"eq","","",133,{"i":[{"n":"self"},{"n":"texturekind"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::program","",100,{"i":[{"n":"self"},{"n":"outputprimitives"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium","",165,{"i":[{"n":"self"},{"n":"handle"}],"o":{"n":"bool"}}],[11,"ne","","",165,{"i":[{"n":"self"},{"n":"handle"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::program","",96,{"i":[{"n":"self"},{"n":"transformfeedbackvarying"}],"o":{"n":"bool"}}],[11,"ne","","",96,{"i":[{"n":"self"},{"n":"transformfeedbackvarying"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::texture","",158,{"i":[{"n":"self"},{"n":"clientformat"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::draw_parameters","",57,{"i":[{"n":"self"},{"n":"provokingvertex"}],"o":{"n":"bool"}}],[11,"eq","","",66,{"i":[{"n":"self"},{"n":"linearblendingfactor"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::texture","",147,{"i":[{"n":"self"},{"n":"internalformat"}],"o":{"n":"bool"}}],[11,"ne","","",147,{"i":[{"n":"self"},{"n":"internalformat"}],"o":{"n":"bool"}}],[11,"eq","","",152,{"i":[{"n":"self"},{"n":"srgbformat"}],"o":{"n":"bool"}}],[11,"eq","","",157,{"i":[{"n":"self"},{"n":"depthformat"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::draw_parameters","",61,{"i":[{"n":"self"},{"n":"stenciloperation"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium","",168,{"i":[{"n":"self"},{"n":"blittarget"}],"o":{"n":"bool"}}],[11,"ne","","",168,{"i":[{"n":"self"},{"n":"blittarget"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::program","",101,{"i":[{"n":"self"},{"n":"shaderstage"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium","",175,{"i":[{"n":"self"},{"n":"version"}],"o":{"n":"bool"}}],[11,"ne","","",175,{"i":[{"n":"self"},{"n":"version"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::debug","",50,{"i":[{"n":"self"},{"n":"severity"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::framebuffer","",81,{"i":[{"n":"self"},{"n":"validationerror"}],"o":{"n":"bool"}}],[11,"ne","","",81,{"i":[{"n":"self"},{"n":"validationerror"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::uniforms","",115,{"i":[{"n":"self"},{"n":"samplerbehavior"}],"o":{"n":"bool"}}],[11,"ne","","",115,{"i":[{"n":"self"},{"n":"samplerbehavior"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::program","",105,{"i":[{"n":"self"},{"n":"transformfeedbackmode"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium","",173,{"i":[{"n":"self"},{"n":"api"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::program","",98,{"i":[{"n":"self"},{"n":"blocklayout"}],"o":{"n":"bool"}}],[11,"ne","","",98,{"i":[{"n":"self"},{"n":"blocklayout"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::uniforms","",112,{"i":[{"n":"self"},{"n":"uniformtype"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::texture","",159,{"i":[{"n":"self"},{"n":"compressedformat"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::draw_parameters","",54,{"i":[{"n":"self"},{"n":"backfacecullingmode"}],"o":{"n":"bool"}}],[11,"eq","","",62,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"ne","","",62,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::texture","",135,{"i":[{"n":"self"},{"n":"compressedmipmapsoption"}],"o":{"n":"bool"}}],[11,"ne","","",135,{"i":[{"n":"self"},{"n":"compressedmipmapsoption"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::index","",85,{"i":[{"n":"self"},{"n":"indextype"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::draw_parameters","",65,{"i":[{"n":"self"},{"n":"depthclamp"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium","",172,{"i":[{"n":"self"},{"n":"incompatibleopengl"}],"o":{"n":"bool"}}],[11,"ne","","",172,{"i":[{"n":"self"},{"n":"incompatibleopengl"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::texture","",132,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"bool"}}],[11,"eq","","",134,{"i":[{"n":"self"},{"n":"mipmapsoption"}],"o":{"n":"bool"}}],[11,"ne","","",134,{"i":[{"n":"self"},{"n":"mipmapsoption"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium","",167,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"ne","","",167,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::texture","",155,{"i":[{"n":"self"},{"n":"internalformattype"}],"o":{"n":"bool"}}],[11,"eq","","",153,{"i":[{"n":"self"},{"n":"uncompressedfloatformat"}],"o":{"n":"bool"}}],[11,"eq","conrod::backend::glium::glium::draw_parameters","",68,{"i":[{"n":"self"},{"n":"blendingfunction"}],"o":{"n":"bool"}}],[11,"ne","","",68,{"i":[{"n":"self"},{"n":"blendingfunction"}],"o":{"n":"bool"}}],[11,"clone","conrod::backend::glium::glium::texture::cubemap_array","",763,{"i":[{"n":"self"}],"o":{"n":"cubemaparraymipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_texture2d_array","",751,{"i":[{"n":"self"}],"o":{"n":"compressedtexture2darraymipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_texture1d_array","",695,{"i":[{"n":"self"}],"o":{"n":"compressedtexture1darraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::srgb_texture1d_array","",684,{"i":[{"n":"self"}],"o":{"n":"srgbtexture1darraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::draw_parameters","",61,{"i":[{"n":"self"}],"o":{"n":"stenciloperation"}}],[11,"clone","conrod::backend::glium::glium::framebuffer","",77,{"i":[{"n":"self"}],"o":{"n":"depthstencilattachment"}}],[11,"clone","conrod::backend::glium::glium::index","",83,{"i":[{"n":"self"}],"o":{"n":"primitivetype"}}],[11,"clone","conrod::backend::glium::glium::texture::texture2d_multisample_array","",772,{"i":[{"n":"self"}],"o":{"n":"texture2dmultisamplearraylayer"}}],[11,"clone","conrod::backend::glium::glium","",170,{"i":[{"n":"self"}],"o":{"n":"drawerror"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_texture2d_multisample_array","",773,{"i":[{"n":"self"}],"o":{"n":"depthtexture2dmultisamplearraylayer"}}],[11,"clone","conrod::backend::glium::glium::draw_parameters","",63,{"i":[{"n":"self"}],"o":{"n":"stenciltest"}}],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"smooth"}}],[11,"clone","conrod::backend::glium::glium::program","",101,{"i":[{"n":"self"}],"o":{"n":"shaderstage"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_cubemap","",537,{"i":[{"n":"self"}],"o":{"n":"depthcubemapimage"}}],[11,"clone","conrod::backend::glium::glium::texture::stencil_texture2d_multisample","",692,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2dmultisamplemipmap"}}],[11,"clone","conrod::backend::glium::glium::debug","",52,{"i":[{"n":"self"}],"o":{"n":"messagetype"}}],[11,"clone","conrod::backend::glium::glium::texture::srgb_cubemap_array","",681,{"i":[{"n":"self"}],"o":{"n":"srgbcubemaparrayimage"}}],[11,"clone","conrod::backend::glium::glium::debug","",51,{"i":[{"n":"self"}],"o":{"n":"source"}}],[11,"clone","conrod::backend::glium::glium::texture::texture1d_array","",670,{"i":[{"n":"self"}],"o":{"n":"texture1darraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_srgb_texture2d_array","",701,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture2darraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::cubemap_array","",774,{"i":[{"n":"self"}],"o":{"n":"cubemaparraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::buffer_texture","",129,{"i":[{"n":"self"}],"o":{"n":"buffertexturetype"}}],[11,"clone","conrod::backend::glium::glium::texture::srgb_texture3d","",657,{"i":[{"n":"self"}],"o":{"n":"srgbtexture3dmipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_stencil_texture2d_multisample_array","",775,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2dmultisamplearraylayer"}}],[11,"clone","conrod::backend::glium::glium::uniforms","",112,{"i":[{"n":"self"}],"o":{"n":"uniformtype"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_srgb_cubemap_array","",690,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbcubemaparrayimage"}}],[11,"clone","conrod::backend::glium::glium::texture","",154,{"i":[{"n":"self"}],"o":{"n":"dimensions"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_texture3d","",691,{"i":[{"n":"self"}],"o":{"n":"compressedtexture3dmipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_texture2d_array","",708,{"i":[{"n":"self"}],"o":{"n":"compressedtexture2darraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::srgb_texture2d_array","",776,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2darraylayer"}}],[11,"clone","conrod::backend::glium::glium::index","",85,{"i":[{"n":"self"}],"o":{"n":"indextype"}}],[11,"clone","conrod::backend::glium::glium::texture::buffer_texture","",128,{"i":[{"n":"self"}],"o":{"n":"creationerror"}}],[11,"clone","conrod::backend::glium::glium::texture::texture2d_multisample_array","",660,{"i":[{"n":"self"}],"o":{"n":"texture2dmultisamplearraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::vertex","",125,{"i":[{"n":"self"}],"o":{"n":"attributetype"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_stencil_cubemap","",725,{"i":[{"n":"self"}],"o":{"n":"depthstencilcubemapmipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_stencil_texture2d_array","",740,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2darraymipmap"}}],[11,"clone","conrod::backend::glium::glium::program","",97,{"i":[{"n":"self"}],"o":{"n":"transformfeedbackbuffer"}}],[11,"clone","conrod::backend::glium::glium::texture::integral_texture2d_array","",777,{"i":[{"n":"self"}],"o":{"n":"integraltexture2darraylayer"}}],[11,"clone","conrod::backend::glium::glium::texture::stencil_texture2d_array","",758,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2darraymipmap"}}],[11,"clone","conrod::backend::glium::glium","",165,{"i":[{"n":"self"}],"o":{"n":"handle"}}],[11,"clone","conrod::backend::glium::glium::texture::unsigned_cubemap_array","",736,{"i":[{"n":"self"}],"o":{"n":"unsignedcubemaparraymipmap"}}],[11,"clone","conrod::backend::glium::glium","",172,{"i":[{"n":"self"}],"o":{"n":"incompatibleopengl"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_texture2d_multisample_array","",726,{"i":[{"n":"self"}],"o":{"n":"depthtexture2dmultisamplearraymipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_cubemap_array","",755,{"i":[{"n":"self"}],"o":{"n":"depthcubemaparraymipmap"}}],[11,"clone","conrod::backend::glium::glium::texture","",147,{"i":[{"n":"self"}],"o":{"n":"internalformat"}}],[11,"clone","conrod::backend::glium::glium::texture::unsigned_texture2d_multisample_array","",672,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2dmultisamplearraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_cubemap_array","",764,{"i":[{"n":"self"}],"o":{"n":"compressedcubemaparraymipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::cubemap_array","",778,{"i":[{"n":"self"}],"o":{"n":"cubemaparraylayer"}}],[11,"clone","conrod::backend::glium::glium::texture","",779,{"i":[{"n":"self"}],"o":{"n":"textureanylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::bindless","",531,{"i":[{"n":"self"}],"o":{"n":"texturehandle"}}],[11,"clone","conrod::backend::glium::glium::texture::stencil_texture2d_array","",705,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2darraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::framebuffer","",81,{"i":[{"n":"self"}],"o":{"n":"validationerror"}}],[11,"clone","conrod::backend::glium::glium","",174,{"i":[{"n":"self"}],"o":{"n":"profile"}}],[11,"clone","conrod::backend::glium::glium::texture::stencil_texture2d_multisample_array","",698,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2dmultisamplearraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::index","",84,{"i":[{"n":"self"}],"o":{"n":"noindices"}}],[11,"clone","conrod::backend::glium::glium::texture::integral_texture2d_array","",735,{"i":[{"n":"self"}],"o":{"n":"integraltexture2darraymipmap"}}],[11,"clone","conrod::backend::glium::glium::texture","",153,{"i":[{"n":"self"}],"o":{"n":"uncompressedfloatformat"}}],[11,"clone","conrod::backend::glium::glium::draw_parameters","",55,{"i":[{"n":"self"}],"o":{"n":"polygonmode"}}],[11,"clone","conrod::backend::glium::glium::uniforms","",114,{"i":[{"n":"self"}],"o":{"n":"samplerwrapfunction"}}],[11,"clone","conrod::backend::glium::glium::texture","",162,{"i":[{"n":"self"}],"o":{"n":"depthstencilformat"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_cubemap_array","",780,{"i":[{"n":"self"}],"o":{"n":"compressedcubemaparraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::draw_parameters","",54,{"i":[{"n":"self"}],"o":{"n":"backfacecullingmode"}}],[11,"clone","conrod::backend::glium::glium::texture::unsigned_cubemap","",720,{"i":[{"n":"self"}],"o":{"n":"unsignedcubemapmipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::integral_cubemap_array","",687,{"i":[{"n":"self"}],"o":{"n":"integralcubemaparrayimage"}}],[11,"clone","conrod::backend::glium::glium::buffer","",45,{"i":[{"n":"self"}],"o":{"n":"buffercreationerror"}}],[11,"clone","conrod::backend::glium::glium::texture::texture2d","",682,{"i":[{"n":"self"}],"o":{"n":"texture2dmipmap"}}],[11,"clone","conrod::backend::glium::glium::draw_parameters","",59,{"i":[{"n":"self"}],"o":{"n":"conditionalrendering"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_stencil_texture2d_multisample","",647,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2dmultisamplemipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_texture2d_array","",538,{"i":[{"n":"self"}],"o":{"n":"depthtexture2darraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::program","",106,{"i":[{"n":"self"}],"o":{"n":"subroutinedata"}}],[11,"clone","conrod::backend::glium::glium::draw_parameters","",69,{"i":[{"n":"self"}],"o":{"n":"depthtest"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_srgb_cubemap","",703,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbcubemapimage"}}],[11,"clone","conrod::backend::glium::glium::program","",96,{"i":[{"n":"self"}],"o":{"n":"transformfeedbackvarying"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_cubemap","",766,{"i":[{"n":"self"}],"o":{"n":"compressedcubemapmipmap"}}],[11,"clone","conrod::backend::glium::glium::index","",87,{"i":[{"n":"self"}],"o":{"n":"drawcommandindices"}}],[11,"clone","conrod::backend::glium::glium::texture::integral_cubemap_array","",781,{"i":[{"n":"self"}],"o":{"n":"integralcubemaparraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_stencil_cubemap","",642,{"i":[{"n":"self"}],"o":{"n":"depthstencilcubemapimage"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_texture1d_array","",782,{"i":[{"n":"self"}],"o":{"n":"compressedtexture1darraylayer"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_texture1d_array","",536,{"i":[{"n":"self"}],"o":{"n":"depthtexture1darraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::srgb_texture1d","",671,{"i":[{"n":"self"}],"o":{"n":"srgbtexture1dmipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_stencil_texture2d","",643,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2dmipmap"}}],[11,"clone","conrod::backend::glium::glium::draw_parameters","",62,{"i":[{"n":"self"}],"o":{"n":"blend"}}],[11,"clone","conrod::backend::glium::glium::texture::srgb_texture2d_multisample_array","",734,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2dmultisamplearraymipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::stencil_cubemap_array","",783,{"i":[{"n":"self"}],"o":{"n":"stencilcubemaparraylayer"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_cubemap_array","",784,{"i":[{"n":"self"}],"o":{"n":"depthcubemaparraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::cubemap_array","",659,{"i":[{"n":"self"}],"o":{"n":"cubemaparrayimage"}}],[11,"clone","conrod::backend::glium::glium::texture::unsigned_texture2d_multisample","",658,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2dmultisamplemipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_srgb_texture3d","",709,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture3dmipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::unsigned_cubemap_array","",785,{"i":[{"n":"self"}],"o":{"n":"unsignedcubemaparraylayer"}}],[11,"clone","conrod::backend::glium::glium::texture::bindless","",630,{"i":[{"n":"self"}],"o":{"n":"bindlesstexturesnotsupportederror"}}],[11,"clone","conrod::backend::glium::glium::texture::srgb_cubemap_array","",719,{"i":[{"n":"self"}],"o":{"n":"srgbcubemaparraymipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_stencil_texture2d_multisample_array","",648,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2dmultisamplearraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::draw_parameters","",57,{"i":[{"n":"self"}],"o":{"n":"provokingvertex"}}],[11,"clone","conrod::backend::glium::glium::texture::integral_texture3d","",688,{"i":[{"n":"self"}],"o":{"n":"integraltexture3dmipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_stencil_cubemap_array","",644,{"i":[{"n":"self"}],"o":{"n":"depthstencilcubemaparrayimage"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_srgb_cubemap_array","",786,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbcubemaparraylayer"}}],[11,"clone","conrod::backend::glium::glium","",175,{"i":[{"n":"self"}],"o":{"n":"version"}}],[11,"clone","conrod::backend::glium::glium::program","",98,{"i":[{"n":"self"}],"o":{"n":"blocklayout"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_texture1d_array","",718,{"i":[{"n":"self"}],"o":{"n":"depthtexture1darraymipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::unsigned_texture3d","",673,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture3dmipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::integral_cubemap","",756,{"i":[{"n":"self"}],"o":{"n":"integralcubemapmipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::srgb_cubemap_array","",787,{"i":[{"n":"self"}],"o":{"n":"srgbcubemaparraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::srgb_texture1d_array","",750,{"i":[{"n":"self"}],"o":{"n":"srgbtexture1darraymipmap"}}],[11,"clone","conrod::backend::glium::glium::program","",105,{"i":[{"n":"self"}],"o":{"n":"transformfeedbackmode"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_texture2d","",533,{"i":[{"n":"self"}],"o":{"n":"depthtexture2dmipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_stencil_texture1d_array","",641,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture1darraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::srgb_texture2d_multisample_array","",668,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2dmultisamplearraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::buffer","",49,{"i":[{"n":"self"}],"o":{"n":"readerror"}}],[11,"clone","conrod::backend::glium::glium::texture","",156,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbformat"}}],[11,"clone","conrod::backend::glium::glium::uniforms","",118,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"clone","conrod::backend::glium::glium::texture::srgb_texture2d","",677,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2dmipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::texture2d_array","",665,{"i":[{"n":"self"}],"o":{"n":"texture2darraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::texture","",715,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"clone","conrod::backend::glium::glium::program","",103,{"i":[{"n":"self"}],"o":{"n":"subroutineuniform"}}],[11,"clone","conrod::backend::glium::glium::texture::srgb_texture2d_multisample_array","",788,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2dmultisamplearraylayer"}}],[11,"clone","conrod::backend::glium::glium::texture::integral_texture2d_multisample","",667,{"i":[{"n":"self"}],"o":{"n":"integraltexture2dmultisamplemipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_cubemap","",702,{"i":[{"n":"self"}],"o":{"n":"compressedcubemapimage"}}],[11,"clone","conrod::backend::glium::glium::texture::texture2d_array","",767,{"i":[{"n":"self"}],"o":{"n":"texture2darraymipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_texture2d_array","",789,{"i":[{"n":"self"}],"o":{"n":"compressedtexture2darraylayer"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_cubemap_array","",790,{"i":[{"n":"self"}],"o":{"n":"compressedcubemaparraylayer"}}],[11,"clone","conrod::backend::glium::glium::texture::cubemap","",722,{"i":[{"n":"self"}],"o":{"n":"cubemapmipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_srgb_texture2d","",710,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture2dmipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::integral_cubemap_array","",791,{"i":[{"n":"self"}],"o":{"n":"integralcubemaparraylayer"}}],[11,"clone","conrod::backend::glium::glium::buffer","",48,{"i":[{"n":"self"}],"o":{"n":"copyerror"}}],[11,"clone","conrod::backend::glium::glium::texture::texture3d","",678,{"i":[{"n":"self"}],"o":{"n":"texture3dmipmap"}}],[11,"clone","conrod::backend::glium::glium::texture","",149,{"i":[{"n":"self"}],"o":{"n":"getformaterror"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_texture2d_multisample","",540,{"i":[{"n":"self"}],"o":{"n":"depthtexture2dmultisamplemipmap"}}],[11,"clone","conrod::backend::glium::glium::texture","",159,{"i":[{"n":"self"}],"o":{"n":"compressedformat"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_srgb_texture1d_array","",732,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture1darraymipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::unsigned_texture2d_multisample_array","",792,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2dmultisamplearraylayer"}}],[11,"clone","conrod::backend::glium::glium::uniforms","",117,{"i":[{"n":"self"}],"o":{"n":"magnifysamplerfilter"}}],[11,"clone","conrod::backend::glium::glium::index","",82,{"i":[{"n":"self"}],"o":{"n":"indicessource"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_cubemap_array","",793,{"i":[{"n":"self"}],"o":{"n":"depthcubemaparraylayer"}}],[11,"clone","conrod::backend::glium::glium::texture::texture2d_multisample","",662,{"i":[{"n":"self"}],"o":{"n":"texture2dmultisamplemipmap"}}],[11,"clone","conrod::backend::glium::glium::texture","",132,{"i":[{"n":"self"}],"o":{"n":"cubelayer"}}],[11,"clone","conrod::backend::glium::glium::texture::unsigned_texture2d_array","",794,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2darraylayer"}}],[11,"clone","conrod::backend::glium::glium","",168,{"i":[{"n":"self"}],"o":{"n":"blittarget"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_stencil_cubemap_array","",795,{"i":[{"n":"self"}],"o":{"n":"depthstencilcubemaparraylayer"}}],[11,"clone","conrod::backend::glium::glium::texture::srgb_cubemap","",716,{"i":[{"n":"self"}],"o":{"n":"srgbcubemapmipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_texture1d","",712,{"i":[{"n":"self"}],"o":{"n":"compressedtexture1dmipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_texture1d","",541,{"i":[{"n":"self"}],"o":{"n":"depthtexture1dmipmap"}}],[11,"clone","conrod::backend::glium::glium::vertex","",119,{"i":[{"n":"self"}],"o":{"n":"verticessource"}}],[11,"clone","conrod::backend::glium::glium::buffer","",551,{"i":[{"n":"self"}],"o":{"n":"bufferanyslice"}}],[11,"clone","conrod::backend::glium::glium","",173,{"i":[{"n":"self"}],"o":{"n":"api"}}],[11,"clone","conrod::backend::glium::glium::texture::unsigned_texture1d_array","",796,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture1darraylayer"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_texture3d","",535,{"i":[{"n":"self"}],"o":{"n":"depthtexture3dmipmap"}}],[11,"clone","conrod::backend::glium::glium::texture","",134,{"i":[{"n":"self"}],"o":{"n":"mipmapsoption"}}],[11,"clone","conrod::backend::glium::glium::texture::integral_texture2d","",666,{"i":[{"n":"self"}],"o":{"n":"integraltexture2dmipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_cubemap","",744,{"i":[{"n":"self"}],"o":{"n":"depthcubemapmipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::integral_texture1d_array","",797,{"i":[{"n":"self"}],"o":{"n":"integraltexture1darraylayer"}}],[11,"clone","conrod::backend::glium::glium::draw_parameters","",66,{"i":[{"n":"self"}],"o":{"n":"linearblendingfactor"}}],[11,"clone","conrod::backend::glium::glium::texture::integral_texture2d_multisample_array","",731,{"i":[{"n":"self"}],"o":{"n":"integraltexture2dmultisamplearraymipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_texture2d_multisample_array","",539,{"i":[{"n":"self"}],"o":{"n":"depthtexture2dmultisamplearraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::stencil_cubemap","",700,{"i":[{"n":"self"}],"o":{"n":"stencilcubemapimage"}}],[11,"clone","conrod::backend::glium::glium::texture::stencil_texture2d_array","",798,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2darraylayer"}}],[11,"clone","conrod::backend::glium::glium::texture","",135,{"i":[{"n":"self"}],"o":{"n":"compressedmipmapsoption"}}],[11,"clone","conrod::backend::glium::glium::texture::texture2d_array","",799,{"i":[{"n":"self"}],"o":{"n":"texture2darraylayer"}}],[11,"clone","conrod::backend::glium::glium::texture::stencil_texture1d_array","",697,{"i":[{"n":"self"}],"o":{"n":"stenciltexture1darraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_srgb_texture1d_array","",693,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture1darraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::stencil_texture1d_array","",724,{"i":[{"n":"self"}],"o":{"n":"stenciltexture1darraymipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::srgb_texture1d_array","",800,{"i":[{"n":"self"}],"o":{"n":"srgbtexture1darraylayer"}}],[11,"clone","conrod::backend::glium::glium::texture::unsigned_cubemap_array","",674,{"i":[{"n":"self"}],"o":{"n":"unsignedcubemaparrayimage"}}],[11,"clone","conrod::backend::glium::glium::texture::texture2d_multisample_array","",747,{"i":[{"n":"self"}],"o":{"n":"texture2dmultisamplearraymipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::stencil_texture2d","",706,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2dmipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_srgb_texture1d_array","",801,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture1darraylayer"}}],[11,"clone","conrod::backend::glium::glium::texture::unsigned_cubemap_array","",802,{"i":[{"n":"self"}],"o":{"n":"unsignedcubemaparraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::texture1d_array","",803,{"i":[{"n":"self"}],"o":{"n":"texture1darraylayer"}}],[11,"clone","conrod::backend::glium::glium::texture::integral_cubemap","",655,{"i":[{"n":"self"}],"o":{"n":"integralcubemapimage"}}],[11,"clone","conrod::backend::glium::glium::program","",90,{"i":[{"n":"self"}],"o":{"n":"programcreationerror"}}],[11,"clone","conrod::backend::glium::glium::backend::glutin","",187,{"i":[{"n":"self"}],"o":{"n":"display"}}],[11,"clone","conrod::backend::glium::glium::texture","",804,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"clone","","",160,{"i":[{"n":"self"}],"o":{"n":"uncompressedintformat"}}],[11,"clone","conrod::backend::glium::glium::texture::stencil_texture1d_array","",805,{"i":[{"n":"self"}],"o":{"n":"stenciltexture1darraylayer"}}],[11,"clone","conrod::backend::glium::glium::uniforms","",116,{"i":[{"n":"self"}],"o":{"n":"minifysamplerfilter"}}],[11,"clone","","",109,{"i":[{"n":"self"}],"o":{"n":"layoutmismatcherror"}}],[11,"clone","conrod::backend::glium::glium::texture::srgb_cubemap","",685,{"i":[{"n":"self"}],"o":{"n":"srgbcubemapimage"}}],[11,"clone","conrod::backend::glium::glium::framebuffer","",79,{"i":[{"n":"self"}],"o":{"n":"defaultframebufferattachment"}}],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"clone","conrod::backend::glium::glium::buffer","",47,{"i":[{"n":"self"}],"o":{"n":"buffertype"}}],[11,"clone","conrod::backend::glium::glium::debug","",50,{"i":[{"n":"self"}],"o":{"n":"severity"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_stencil_texture2d_multisample_array","",757,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2dmultisamplearraymipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_cubemap_array","",534,{"i":[{"n":"self"}],"o":{"n":"depthcubemaparrayimage"}}],[11,"clone","conrod::backend::glium::glium::framebuffer","",73,{"i":[{"n":"self"}],"o":{"n":"depthattachment"}}],[11,"clone","conrod::backend::glium::glium::texture::unsigned_texture2d","",669,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2dmipmap"}}],[11,"clone","conrod::backend::glium::glium::program","",92,{"i":[{"n":"self"}],"o":{"n":"getbinaryerror"}}],[11,"clone","conrod::backend::glium::glium::texture","",155,{"i":[{"n":"self"}],"o":{"n":"internalformattype"}}],[11,"clone","conrod::backend::glium::glium::texture::integral_texture2d_multisample_array","",686,{"i":[{"n":"self"}],"o":{"n":"integraltexture2dmultisamplearraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::framebuffer","",80,{"i":[{"n":"self"}],"o":{"n":"creationerror"}}],[11,"clone","conrod::backend::glium::glium::texture::unsigned_cubemap","",680,{"i":[{"n":"self"}],"o":{"n":"unsignedcubemapimage"}}],[11,"clone","conrod::backend::glium::glium::program","",100,{"i":[{"n":"self"}],"o":{"n":"outputprimitives"}}],[11,"clone","conrod::backend::glium::glium::texture::texture1d","",683,{"i":[{"n":"self"}],"o":{"n":"texture1dmipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_texture1d_array","",723,{"i":[{"n":"self"}],"o":{"n":"compressedtexture1darraymipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::unsigned_texture2d_array","",679,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2darraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::draw_parameters","",70,{"i":[{"n":"self"}],"o":{"n":"depth"}}],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"depthclamp"}}],[11,"clone","conrod::backend::glium::glium::texture","",150,{"i":[{"n":"self"}],"o":{"n":"uncompresseduintformat"}}],[11,"clone","conrod::backend::glium::glium::texture::unsigned_texture1d_array","",749,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture1darraymipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_texture2d","",699,{"i":[{"n":"self"}],"o":{"n":"compressedtexture2dmipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::integral_texture1d_array","",729,{"i":[{"n":"self"}],"o":{"n":"integraltexture1darraymipmap"}}],[11,"clone","conrod::backend::glium::glium::framebuffer","",75,{"i":[{"n":"self"}],"o":{"n":"stencilattachment"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_srgb_cubemap","",745,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbcubemapmipmap"}}],[11,"clone","conrod::backend::glium::glium::texture","",146,{"i":[{"n":"self"}],"o":{"n":"texturecreationerror"}}],[11,"clone","conrod::backend::glium::glium","",167,{"i":[{"n":"self"}],"o":{"n":"rect"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_texture2d_array","",737,{"i":[{"n":"self"}],"o":{"n":"depthtexture2darraymipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::srgb_texture2d_array","",742,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2darraymipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::integral_texture1d_array","",689,{"i":[{"n":"self"}],"o":{"n":"integraltexture1darraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::unsigned_texture2d_array","",765,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2darraymipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::integral_texture2d_array","",656,{"i":[{"n":"self"}],"o":{"n":"integraltexture2darraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_srgb_texture2d_array","",739,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture2darraymipmap"}}],[11,"clone","conrod::backend::glium::glium::program","",99,{"i":[{"n":"self"}],"o":{"n":"uniform"}}],[11,"clone","conrod::backend::glium::glium::texture","",148,{"i":[{"n":"self"}],"o":{"n":"stencilformat"}}],[11,"clone","conrod::backend::glium::glium::texture::srgb_texture2d_multisample","",664,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2dmultisamplemipmap"}}],[11,"clone","conrod::backend::glium::glium::backend::glutin","",528,{"i":[{"n":"self"}],"o":{"n":"glutinbackend"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_stencil_texture3d","",646,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture3dmipmap"}}],[11,"clone","conrod::backend::glium::glium::index","",88,{"i":[{"n":"self"}],"o":{"n":"drawcommandnoindices"}}],[11,"clone","conrod::backend::glium::glium::texture","",133,{"i":[{"n":"self"}],"o":{"n":"texturekind"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_texture1d_array","",806,{"i":[{"n":"self"}],"o":{"n":"depthtexture1darraylayer"}}],[11,"clone","conrod::backend::glium::glium::texture::stencil_cubemap","",746,{"i":[{"n":"self"}],"o":{"n":"stencilcubemapmipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::buffer_texture","",127,{"i":[{"n":"self"}],"o":{"n":"texturecreationerror"}}],[11,"clone","conrod::backend::glium::glium::program","",104,{"i":[{"n":"self"}],"o":{"n":"computecommand"}}],[11,"clone","conrod::backend::glium::glium::uniforms","",113,{"i":[{"n":"self"}],"o":{"n":"sampler"}}],[11,"clone","conrod::backend::glium::glium::draw_parameters","",60,{"i":[{"n":"self"}],"o":{"n":"samplesqueryparam"}}],[11,"clone","conrod::backend::glium::glium::texture::stencil_cubemap_array","",741,{"i":[{"n":"self"}],"o":{"n":"stencilcubemaparraymipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::stencil_texture2d_multisample_array","",807,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2dmultisamplearraylayer"}}],[11,"clone","conrod::backend::glium::glium::texture::integral_cubemap_array","",728,{"i":[{"n":"self"}],"o":{"n":"integralcubemaparraymipmap"}}],[11,"clone","conrod::backend::glium::glium::backend","",43,{"i":[{"n":"self"}],"o":{"n":"releasebehavior"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_stencil_texture1d_array","",808,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture1darraylayer"}}],[11,"clone","conrod::backend::glium::glium::texture","",158,{"i":[{"n":"self"}],"o":{"n":"clientformat"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_srgb_texture1d","",696,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture1dmipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::stencil_texture2d_multisample_array","",753,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2dmultisamplearraymipmap"}}],[11,"clone","conrod::backend::glium::glium::texture","",157,{"i":[{"n":"self"}],"o":{"n":"depthformat"}}],[11,"clone","conrod::backend::glium::glium::texture::stencil_texture1d","",694,{"i":[{"n":"self"}],"o":{"n":"stenciltexture1dmipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_stencil_texture1d","",640,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture1dmipmap"}}],[11,"clone","conrod::backend::glium::glium::texture","",809,{"i":[{"n":"self"}],"o":{"n":"textureanylayer"}}],[11,"clone","conrod::backend::glium::glium::texture::cubemap","",663,{"i":[{"n":"self"}],"o":{"n":"cubemapimage"}}],[11,"clone","conrod::backend::glium::glium::vertex","",126,{"i":[{"n":"self"}],"o":{"n":"creationerror"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_stencil_texture2d_array","",645,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2darraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::program","",107,{"i":[{"n":"self"}],"o":{"n":"attribute"}}],[11,"clone","conrod::backend::glium::glium::draw_parameters","",64,{"i":[{"n":"self"}],"o":{"n":"stencil"}}],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"drawparameters"}}],[11,"clone","conrod::backend::glium::glium::buffer","",544,{"i":[{"n":"self"}],"o":{"n":"bufferslice"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_stencil_cubemap_array","",759,{"i":[{"n":"self"}],"o":{"n":"depthstencilcubemaparraymipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::buffer_texture","",810,{"i":[{"n":"self"}],"o":{"n":"buffertextureref"}}],[11,"clone","conrod::backend::glium::glium::texture::stencil_cubemap_array","",811,{"i":[{"n":"self"}],"o":{"n":"stencilcubemaparraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_stencil_texture1d_array","",727,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture1darraymipmap"}}],[11,"clone","conrod::backend::glium::glium::texture","",161,{"i":[{"n":"self"}],"o":{"n":"textureformat"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_cubemap_array","",707,{"i":[{"n":"self"}],"o":{"n":"compressedcubemaparrayimage"}}],[11,"clone","conrod::backend::glium::glium::texture::unsigned_texture1d","",661,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture1dmipmap"}}],[11,"clone","conrod::backend::glium::glium::draw_parameters","",68,{"i":[{"n":"self"}],"o":{"n":"blendingfunction"}}],[11,"clone","conrod::backend::glium::glium::texture","",152,{"i":[{"n":"self"}],"o":{"n":"srgbformat"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_stencil_texture2d_array","",812,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2darraylayer"}}],[11,"clone","conrod::backend::glium::glium::texture::integral_texture1d","",675,{"i":[{"n":"self"}],"o":{"n":"integraltexture1dmipmap"}}],[11,"clone","conrod::backend::glium::glium::draw_parameters","",67,{"i":[{"n":"self"}],"o":{"n":"querycreationerror"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_srgb_cubemap_array","",761,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbcubemaparraymipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::unsigned_texture2d_multisample_array","",721,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2dmultisamplearraymipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::unsigned_texture1d_array","",654,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture1darraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::srgb_cubemap_array","",813,{"i":[{"n":"self"}],"o":{"n":"srgbcubemaparraylayer"}}],[11,"clone","conrod::backend::glium::glium::texture::stencil_cubemap_array","",711,{"i":[{"n":"self"}],"o":{"n":"stencilcubemaparrayimage"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_srgb_texture2d_array","",814,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture2darraylayer"}}],[11,"clone","conrod::backend::glium::glium::program","",102,{"i":[{"n":"self"}],"o":{"n":"uniformblock"}}],[11,"clone","conrod::backend::glium::glium::texture::integral_texture2d_multisample_array","",815,{"i":[{"n":"self"}],"o":{"n":"integraltexture2dmultisamplearraylayer"}}],[11,"clone","conrod::backend::glium::glium","",171,{"i":[{"n":"self"}],"o":{"n":"swapbufferserror"}}],[11,"clone","conrod::backend::glium::glium::texture::compressed_srgb_cubemap_array","",816,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbcubemaparraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::uniforms","",115,{"i":[{"n":"self"}],"o":{"n":"samplerbehavior"}}],[11,"clone","conrod::backend::glium::glium::texture::srgb_texture2d_array","",676,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2darraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::index","",89,{"i":[{"n":"self"}],"o":{"n":"creationerror"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_stencil_cubemap_array","",817,{"i":[{"n":"self"}],"o":{"n":"depthstencilcubemaparraylayermipmap"}}],[11,"clone","conrod::backend::glium::glium::texture::texture1d_array","",748,{"i":[{"n":"self"}],"o":{"n":"texture1darraymipmap"}}],[11,"clone","conrod::backend::glium::glium::program","",91,{"i":[{"n":"self"}],"o":{"n":"programchoosercreationerror"}}],[11,"clone","conrod::backend::glium::glium::buffer","",46,{"i":[{"n":"self"}],"o":{"n":"buffermode"}}],[11,"clone","conrod::backend::glium::glium::uniforms","",607,{"i":[{"n":"self"}],"o":{"n":"emptyuniforms"}}],[11,"clone","conrod::backend::glium::glium::texture::depth_texture2d_array","",818,{"i":[{"n":"self"}],"o":{"n":"depthtexture2darraylayer"}}],[11,"clone","conrod::backend::glium::glium","",166,{"i":[{"n":"self"}],"o":{"n":"rawuniformvalue"}}],[11,"deref_mut","conrod::backend::glium::glium::framebuffer","",717,{"i":[{"n":"self"}],"o":{"n":"renderbufferany"}}],[11,"deref_mut","conrod::backend::glium::glium::index","",595,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"deref_mut","conrod::backend::glium::glium::texture::buffer_texture","",532,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"deref_mut","conrod::backend::glium::glium::framebuffer","",762,{"i":[{"n":"self"}],"o":{"n":"renderbufferany"}}],[11,"deref_mut","conrod::backend::glium::glium::texture::bindless","",653,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref_mut","conrod::backend::glium::glium::uniforms","",616,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"deref_mut","conrod::backend::glium::glium::index","",546,{"i":[{"n":"self"}],"o":{"n":"bufferany"}}],[11,"deref_mut","conrod::backend::glium::glium::framebuffer","",752,{"i":[{"n":"self"}],"o":{"n":"renderbufferany"}}],[11,"deref_mut","conrod::backend::glium::glium::index","",730,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"deref_mut","conrod::backend::glium::glium::vertex","",545,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"deref_mut","conrod::backend::glium::glium::index","",754,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"deref_mut","conrod::backend::glium::glium::vertex","",704,{"i":[{"n":"self"}],"o":{"n":"bufferslice"}}],[11,"deref_mut","","",543,{"i":[{"n":"self"}],"o":{"n":"bufferany"}}],[11,"deref_mut","conrod::backend::glium::glium::buffer","",738,{"i":[{"n":"self"}],"o":{"n":"d"}}],[11,"deref_mut","conrod::backend::glium::glium::framebuffer","",743,{"i":[{"n":"self"}],"o":{"n":"renderbufferany"}}],[11,"deref_mut","conrod::backend::glium::glium::index","",566,{"i":[{"n":"self"}],"o":{"n":"bufferslice"}}],[11,"deref_mut","conrod::backend::glium::glium::pixel_buffer","",760,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"from_raw","conrod::backend::glium::glium::texture","",141,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"g":["u8"],"n":"rawimage2d"}}],[11,"from_raw","","",141,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"g":["i16"],"n":"rawimage2d"}}],[11,"from_raw","","",141,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"g":["i32"],"n":"rawimage2d"}}],[11,"from_raw","","",141,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"g":["i16"],"n":"rawimage2d"}}],[11,"from_raw","","",141,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"g":["f32"],"n":"rawimage2d"}}],[11,"from_raw","","",141,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"g":["i8"],"n":"rawimage2d"}}],[11,"from_raw","","",141,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"g":["i32"],"n":"rawimage2d"}}],[11,"from_raw","","",141,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"g":["u32"],"n":"rawimage2d"}}],[11,"from_raw","","",141,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"g":["u16"],"n":"rawimage2d"}}],[11,"from_raw","","",141,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"g":["i8"],"n":"rawimage2d"}}],[11,"from_raw","","",141,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"g":["f32"],"n":"rawimage2d"}}],[11,"from_raw","","",141,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"g":["u8"],"n":"rawimage2d"}}],[11,"from_raw","","",141,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"g":["u32"],"n":"rawimage2d"}}],[11,"from_raw","","",141,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"g":["u16"],"n":"rawimage2d"}}],[11,"from_raw","","",141,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"g":["u16"],"n":"rawimage2d"}}],[11,"from_raw","","",141,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"g":["u8"],"n":"rawimage2d"}}],[11,"from_raw","","",141,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"g":["i16"],"n":"rawimage2d"}}],[11,"from_raw","","",141,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"g":["u32"],"n":"rawimage2d"}}],[11,"from_raw","","",141,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"g":["i8"],"n":"rawimage2d"}}],[11,"from_raw","","",141,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"g":["i32"],"n":"rawimage2d"}}],[11,"from_raw","","",141,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"g":["u8"],"n":"rawimage2d"}}],[11,"from_raw","","",141,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"g":["i32"],"n":"rawimage2d"}}],[11,"from_raw","","",141,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"g":["u16"],"n":"rawimage2d"}}],[11,"from_raw","","",141,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"g":["i8"],"n":"rawimage2d"}}],[11,"from_raw","","",141,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"g":["f32"],"n":"rawimage2d"}}],[11,"from_raw","","",141,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"g":["f32"],"n":"rawimage2d"}}],[11,"from_raw","","",141,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"g":["i16"],"n":"rawimage2d"}}],[11,"from_raw","","",141,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"g":["u32"],"n":"rawimage2d"}}],[11,"hash","conrod::backend::glium::glium","",165,null],[11,"hash","conrod::backend::glium::glium::texture","",159,null],[11,"hash","","",152,null],[11,"hash","","",132,null],[11,"hash","","",160,null],[11,"hash","conrod::backend::glium::glium::uniforms","",116,null],[11,"hash","","",115,null],[11,"hash","conrod::backend::glium::glium::texture","",162,null],[11,"hash","","",148,null],[11,"hash","conrod::backend::glium::glium::program","",101,null],[11,"hash","conrod::backend::glium::glium::uniforms","",117,null],[11,"hash","conrod::backend::glium::glium::texture","",133,null],[11,"hash","","",157,null],[11,"hash","conrod::backend::glium::glium::uniforms","",113,null],[11,"hash","conrod::backend::glium::glium::texture","",161,null],[11,"hash","","",150,null],[11,"hash","conrod::backend::glium::glium::uniforms","",114,null],[11,"hash","conrod::backend::glium::glium::texture","",153,null],[11,"hash","","",156,null],[11,"into_raw","","",141,{"i":[{"n":"self"}],"o":{"n":"rawimage2d"}}],[11,"new","conrod::backend::glium::glium::backend::glutin::glutin","Creates a new Window for platforms where this is appropriate.",186,{"i":[{"n":"eventsloop"}],"o":{"g":["window","creationerror"],"n":"result"}}],[11,"set_title","","Modifies the title of the window.",186,null],[11,"show","","Shows the window if it was hidden.",186,null],[11,"hide","","Hides the window if it was visible.",186,null],[11,"get_position","","Returns the position of the top-left hand corner of the window relative to the  top-left hand corner of the desktop.",186,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"set_position","","Modifies the position of the window.",186,null],[11,"get_inner_size","","Returns the size in pixels of the client area of the window.",186,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_inner_size_points","","Returns the size in points of the client area of the window.",186,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_inner_size_pixels","","Returns the size in pixels of the client area of the window.",186,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_outer_size","","Returns the size in pixels of the window.",186,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"set_inner_size","","Modifies the inner size of the window.",186,null],[11,"set_min_dimensions","","Sets a minimum dimension size for the window.",186,null],[11,"set_max_dimensions","","Sets a maximum dimension size for the window.",186,null],[11,"platform_display","","DEPRECATED. Gets the native platform specific display for this window. This is typically only required when integrating with other libraries that need this information.",186,null],[11,"platform_window","","DEPRECATED. Gets the native platform specific window handle. This is typically only required when integrating with other libraries that need this information.",186,null],[11,"set_cursor","","Modifies the mouse cursor of the window. Has no effect on Android.",186,null],[11,"hidpi_factor","","Returns the ratio between the backing framebuffer resolution and the window size in screen pixels. This is typically one for a normal display and two for a retina display.",186,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"set_cursor_position","","Changes the position of the cursor in window coordinates.",186,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"}],"o":{"n":"result"}}],[11,"set_cursor_state","","Sets how winit handles the cursor. See the documentation of `CursorState` for details.",186,{"i":[{"n":"self"},{"n":"cursorstate"}],"o":{"g":["string"],"n":"result"}}],[11,"set_maximized","","Sets the window to maximized or back",186,null],[11,"set_fullscreen","","Sets the window to fullscreen or back",186,null],[11,"set_decorations","","Turn window decorations on or off.",186,null],[11,"get_current_monitor","","Returns the current monitor the window is on or the primary monitor is nothing matches",186,{"i":[{"n":"self"}],"o":{"n":"monitorid"}}],[11,"id","","",186,{"i":[{"n":"self"}],"o":{"n":"windowid"}}],[11,"deref","","",819,null],[11,"from","","",13,{"i":[{"n":"creationerror"}],"o":{"n":"creationerror"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"default","","",21,{"o":{"n":"pixelformatrequirements"}}],[11,"default","","",22,{"o":{"n":"glattributes"}}],[11,"fmt","conrod::backend::glium::glium::backend::glutin::glutin::os::unix","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::backend::glutin::glutin","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"make_current","","",820,{"i":[{"n":"self"}],"o":{"g":["contexterror"],"n":"result"}}],[11,"is_current","","",820,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_proc_address","","",820,null],[11,"swap_buffers","","",820,{"i":[{"n":"self"}],"o":{"g":["contexterror"],"n":"result"}}],[11,"get_api","","",820,{"i":[{"n":"self"}],"o":{"n":"api"}}],[11,"get_pixel_format","","",820,{"i":[{"n":"self"}],"o":{"n":"pixelformat"}}],[11,"resize","","",820,null],[11,"make_current","","",819,{"i":[{"n":"self"}],"o":{"g":["contexterror"],"n":"result"}}],[11,"is_current","","",819,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_proc_address","","",819,null],[11,"swap_buffers","","",819,{"i":[{"n":"self"}],"o":{"g":["contexterror"],"n":"result"}}],[11,"get_api","","",819,{"i":[{"n":"self"}],"o":{"n":"api"}}],[11,"get_pixel_format","","",819,{"i":[{"n":"self"}],"o":{"n":"pixelformat"}}],[11,"resize","","",819,null],[11,"make_current","","Creates a new OpenGL context Sets the context as the current context.",821,{"i":[{"n":"self"}],"o":{"g":["contexterror"],"n":"result"}}],[11,"is_current","","Returns true if this context is the current one in this thread.",821,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_proc_address","","Returns the address of an OpenGL function.",821,null],[11,"get_api","","Returns the API that is currently provided by this window.",821,{"i":[{"n":"self"}],"o":{"n":"api"}}],[11,"swap_buffers","","",821,{"i":[{"n":"self"}],"o":{"g":["contexterror"],"n":"result"}}],[11,"get_pixel_format","","",821,{"i":[{"n":"self"}],"o":{"n":"pixelformat"}}],[11,"resize","","",821,null],[11,"description","","",14,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","","",13,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",13,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"raw_handle","","",820,null],[11,"raw_handle","","",821,null],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"robustness"}],"o":{"n":"bool"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"api"}],"o":{"n":"bool"}}],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"releasebehavior"}],"o":{"n":"bool"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"glprofile"}],"o":{"n":"bool"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"headlessrendererbuilder"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"robustness"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"releasebehavior"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"glrequest"}}],[11,"clone","conrod::backend::glium::glium::backend::glutin::glutin::os::unix","",4,{"i":[{"n":"self"}],"o":{"n":"rawhandle"}}],[11,"clone","conrod::backend::glium::glium::backend::glutin::glutin","",20,{"i":[{"n":"self"}],"o":{"n":"pixelformat"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"pixelformatrequirements"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"api"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"glattributes"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"glprofile"}}],[11,"cmp","","",822,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"n":"ordering"}}],[11,"cmp","","",823,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",823,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",823,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"bool"}}],[11,"le","","",823,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"bool"}}],[11,"gt","","",823,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"bool"}}],[11,"ge","","",823,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",822,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",822,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"n":"bool"}}],[11,"le","","",822,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"n":"bool"}}],[11,"gt","","",822,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"n":"bool"}}],[11,"ge","","",822,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"n":"bool"}}],[11,"new_x11","","",824,{"o":{"g":["eventsloop","xnotsupported"],"n":"result"}}],[11,"new_wayland","","",824,{"o":{"n":"eventsloop"}}],[11,"is_wayland","","",824,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_x11","","",824,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_xlib_xconnection","","",824,{"i":[{"n":"self"}],"o":{"g":["arc"],"n":"option"}}],[11,"from","","",36,{"i":[{"n":"ximodifierstate"}],"o":{"n":"modifiersstate"}}],[11,"from","conrod::backend::glium::glium::backend::glutin::glutin::os::unix","",8,{"i":[{"n":"openerror"}],"o":{"n":"xnotsupported"}}],[11,"next","conrod::backend::glium::glium::backend::glutin::glutin","",825,{"i":[{"n":"self"}],"o":{"g":["monitorid"],"n":"option"}}],[11,"size_hint","","",825,null],[11,"fmt","","",826,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::backend::glutin::glutin::os::unix","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"default","conrod::backend::glium::glium::backend::glutin::glutin","",36,{"o":{"n":"modifiersstate"}}],[11,"default","","",26,{"o":{"n":"windowattributes"}}],[11,"fmt","","",826,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::backend::glutin::glutin::os::unix","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","conrod::backend::glium::glium::backend::glutin::glutin","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",823,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",822,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",27,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","","",826,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","conrod::backend::glium::glium::backend::glutin::glutin::os::unix","",8,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",8,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"eq","conrod::backend::glium::glium::backend::glutin::glutin","",28,{"i":[{"n":"self"},{"n":"elementstate"}],"o":{"n":"bool"}}],[11,"eq","","",38,{"i":[{"n":"self"},{"n":"cursorstate"}],"o":{"n":"bool"}}],[11,"eq","","",823,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"bool"}}],[11,"ne","","",823,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"bool"}}],[11,"eq","","",30,{"i":[{"n":"self"},{"n":"mousescrolldelta"}],"o":{"n":"bool"}}],[11,"ne","","",30,{"i":[{"n":"self"},{"n":"mousescrolldelta"}],"o":{"n":"bool"}}],[11,"eq","","",39,{"i":[{"n":"self"},{"n":"mousecursor"}],"o":{"n":"bool"}}],[11,"eq","","",822,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"n":"bool"}}],[11,"ne","","",822,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"n":"bool"}}],[11,"eq","","",826,{"i":[{"n":"self"},{"n":"eventsloopclosed"}],"o":{"n":"bool"}}],[11,"eq","","",31,{"i":[{"n":"self"},{"n":"virtualkeycode"}],"o":{"n":"bool"}}],[11,"eq","","",37,{"i":[{"n":"self"},{"n":"touchphase"}],"o":{"n":"bool"}}],[11,"eq","","",36,{"i":[{"n":"self"},{"n":"modifiersstate"}],"o":{"n":"bool"}}],[11,"ne","","",36,{"i":[{"n":"self"},{"n":"modifiersstate"}],"o":{"n":"bool"}}],[11,"eq","","",24,{"i":[{"n":"self"},{"n":"mousebutton"}],"o":{"n":"bool"}}],[11,"ne","","",24,{"i":[{"n":"self"},{"n":"mousebutton"}],"o":{"n":"bool"}}],[11,"eq","","",32,{"i":[{"n":"self"},{"n":"controlflow"}],"o":{"n":"bool"}}],[11,"native_id","","",827,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"with_x11_visual","","",40,null],[11,"with_x11_screen","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"windowbuilder"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"mousebutton"}}],[11,"clone","","",822,{"i":[{"n":"self"}],"o":{"n":"windowid"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"keyboardinput"}}],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"cursorstate"}}],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"touchphase"}}],[11,"clone","","",827,{"i":[{"n":"self"}],"o":{"n":"monitorid"}}],[11,"clone","","",828,{"i":[{"n":"self"}],"o":{"n":"eventsloopproxy"}}],[11,"clone","","",823,{"i":[{"n":"self"}],"o":{"n":"deviceid"}}],[11,"clone","conrod::backend::glium::glium::backend::glutin::glutin::os::unix","",8,{"i":[{"n":"self"}],"o":{"n":"xnotsupported"}}],[11,"clone","conrod::backend::glium::glium::backend::glutin::glutin","",28,{"i":[{"n":"self"}],"o":{"n":"elementstate"}}],[11,"clone","","",826,{"i":[{"n":"self"}],"o":{"n":"eventsloopclosed"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"event"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"mousescrolldelta"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"windowbuilder"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"mousecursor"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"windowevent"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"windowattributes"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"creationerror"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"touch"}}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"deviceevent"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"controlflow"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"modifiersstate"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"virtualkeycode"}}],[11,"hash","","",28,null],[11,"hash","","",823,null],[11,"hash","","",37,null],[11,"hash","","",826,null],[11,"hash","","",36,null],[11,"hash","","",822,null],[11,"hash","","",31,null],[11,"hash","","",24,null],[11,"get_xlib_window","","",186,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"get_xlib_display","","",186,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_xlib_screen_id","","",186,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[11,"get_xlib_xconnection","","",186,{"i":[{"n":"self"}],"o":{"g":["arc"],"n":"option"}}],[11,"get_xcb_connection","","",186,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"send_xim_spot","","",186,null],[11,"get_wayland_surface","","",186,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_wayland_display","","",186,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"is_ready","","",186,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"partial_cmp","conrod::backend::piston::draw","",189,{"i":[{"n":"self"},{"n":"drawstate"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",189,{"i":[{"n":"self"},{"n":"drawstate"}],"o":{"n":"bool"}}],[11,"le","","",189,{"i":[{"n":"self"},{"n":"drawstate"}],"o":{"n":"bool"}}],[11,"gt","","",189,{"i":[{"n":"self"},{"n":"drawstate"}],"o":{"n":"bool"}}],[11,"ge","","",189,{"i":[{"n":"self"},{"n":"drawstate"}],"o":{"n":"bool"}}],[11,"append_transform","","",188,null],[11,"prepend_transform","","",188,null],[11,"trans","","",188,{"i":[{"n":"self"},{"n":"f64"},{"n":"f64"}],"o":{"n":"context"}}],[11,"rot_rad","","",188,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"context"}}],[11,"orient","","",188,{"i":[{"n":"self"},{"n":"f64"},{"n":"f64"}],"o":{"n":"context"}}],[11,"scale","","",188,{"i":[{"n":"self"},{"n":"f64"},{"n":"f64"}],"o":{"n":"context"}}],[11,"shear","","",188,null],[11,"default","","",189,{"o":{"n":"drawstate"}}],[11,"fmt","","",189,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","","",189,{"i":[{"n":"self"},{"n":"drawstate"}],"o":{"n":"bool"}}],[11,"ne","","",189,{"i":[{"n":"self"},{"n":"drawstate"}],"o":{"n":"bool"}}],[11,"clone","","",189,{"i":[{"n":"self"}],"o":{"n":"drawstate"}}],[11,"clone","","",188,{"i":[{"n":"self"}],"o":{"n":"context"}}],[11,"new","conrod::backend::glium::glium::backend::glutin","Create a new glium `Display` from the given context and window builders.",187,{"i":[{"n":"windowbuilder"},{"n":"contextbuilder"},{"n":"eventsloop"}],"o":{"g":["display","displaycreationerror"],"n":"result"}}],[11,"from_gl_window","","Create a new glium `Display`.",187,{"i":[{"n":"glwindow"}],"o":{"g":["display","incompatibleopengl"],"n":"result"}}],[11,"unchecked","","Create a new glium `Display`.",187,{"i":[{"n":"glwindow"}],"o":{"g":["display","incompatibleopengl"],"n":"result"}}],[11,"with_debug","","The same as the `new` constructor, but allows for specifying debug callback behaviour.",187,{"i":[{"n":"glwindow"},{"n":"debugcallbackbehavior"}],"o":{"g":["display","incompatibleopengl"],"n":"result"}}],[11,"unchecked_with_debug","","The same as the `unchecked` constructor, but allows for specifying debug callback behaviour.",187,{"i":[{"n":"glwindow"},{"n":"debugcallbackbehavior"}],"o":{"g":["display","incompatibleopengl"],"n":"result"}}],[11,"rebuild","","Rebuilds the Display's `GlWindow` with the given window and context builders.",187,{"i":[{"n":"self"},{"n":"windowbuilder"},{"n":"contextbuilder"},{"n":"eventsloop"}],"o":{"g":["displaycreationerror"],"n":"result"}}],[11,"gl_window","","Borrow the inner glutin GlWindow.",187,{"i":[{"n":"self"}],"o":{"g":["glwindow"],"n":"ref"}}],[11,"draw","","Start drawing on the backbuffer.",187,{"i":[{"n":"self"}],"o":{"n":"frame"}}],[11,"new","conrod::backend::glium::glium::backend::glutin::glutin","Initializes a new `ContextBuilder` with default values.",12,{"o":{"n":"contextbuilder"}}],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",12,{"i":[{"n":"self"},{"n":"glrequest"}],"o":{"n":"contextbuilder"}}],[11,"with_gl_profile","","Sets the desired OpenGL context profile.",12,{"i":[{"n":"self"},{"n":"glprofile"}],"o":{"n":"contextbuilder"}}],[11,"with_gl_debug_flag","","Sets the debug flag for the OpenGL context.",12,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"contextbuilder"}}],[11,"with_gl_robustness","","Sets the robustness of the OpenGL context. See the docs of `Robustness`.",12,{"i":[{"n":"self"},{"n":"robustness"}],"o":{"n":"contextbuilder"}}],[11,"with_vsync","","Requests that the window has vsync enabled.",12,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"contextbuilder"}}],[11,"with_shared_lists","","Share the display lists with the given `Context`.",12,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"contextbuilder"}}],[11,"with_multisampling","","Sets the multisampling level to request. A value of `0` indicates that multisampling must not be enabled.",12,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"contextbuilder"}}],[11,"with_depth_buffer","","Sets the number of bits in the depth buffer.",12,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"contextbuilder"}}],[11,"with_stencil_buffer","","Sets the number of bits in the stencil buffer.",12,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"contextbuilder"}}],[11,"with_pixel_format","","Sets the number of bits in the color buffer.",12,{"i":[{"n":"self"},{"n":"u8"},{"n":"u8"}],"o":{"n":"contextbuilder"}}],[11,"with_stereoscopy","","Request the backend to be stereoscopic.",12,{"i":[{"n":"self"}],"o":{"n":"contextbuilder"}}],[11,"with_srgb","","Sets whether sRGB should be enabled on the window.",12,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"contextbuilder"}}],[11,"new","","Builds the given window along with the associated GL context, returning the pair as a `GlWindow`.",819,{"i":[{"n":"windowbuilder"},{"n":"contextbuilder"},{"n":"eventsloop"}],"o":{"g":["glwindow","creationerror"],"n":"result"}}],[11,"window","","Borrow the inner `Window`.",819,{"i":[{"n":"self"}],"o":{"n":"window"}}],[11,"context","","Borrow the inner GL `Context`.",819,{"i":[{"n":"self"}],"o":{"n":"context"}}],[11,"to_gl_version","","Extract the desktop GL version, if any.",17,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"map_sharing","","Turns the `sharing` parameter into another type by calling a closure.",22,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"glattributes"}}],[11,"get_name","","Returns a human-readable name of the monitor.",827,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}],[11,"get_dimensions","","Returns the number of pixels currently displayed on the monitor.",827,null],[11,"get_position","","Returns the top-left corner position of the monitor relative to the larger full screen area.",827,null],[11,"get_hidpi_factor","","Returns the ratio between the monitor's physical pixels and logical pixels.",827,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"wakeup","","Wake up the `EventsLoop` from which this proxy was created.",828,{"i":[{"n":"self"}],"o":{"g":["eventsloopclosed"],"n":"result"}}],[11,"new","","Initializes a new `HeadlessRendererBuilder` with default values.",35,{"i":[{"n":"u32"},{"n":"u32"}],"o":{"n":"headlessrendererbuilder"}}],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",35,{"i":[{"n":"self"},{"n":"glrequest"}],"o":{"n":"headlessrendererbuilder"}}],[11,"with_gl_profile","","Sets the desired OpenGL context profile.",35,{"i":[{"n":"self"},{"n":"glprofile"}],"o":{"n":"headlessrendererbuilder"}}],[11,"with_gl_debug_flag","","Sets the debug flag for the OpenGL context.",35,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"headlessrendererbuilder"}}],[11,"with_gl_robustness","","Sets the robustness of the OpenGL context. See the docs of `Robustness`.",35,{"i":[{"n":"self"},{"n":"robustness"}],"o":{"n":"headlessrendererbuilder"}}],[11,"build","","Builds the headless context.",35,{"i":[{"n":"self"}],"o":{"g":["headlesscontext","creationerror"],"n":"result"}}],[11,"build_strict","","Builds the headless context.",35,{"i":[{"n":"self"}],"o":{"g":["headlesscontext","creationerror"],"n":"result"}}],[11,"new","","Builds a new events loop.",824,{"o":{"n":"eventsloop"}}],[11,"get_available_monitors","","Returns the list of all the monitors available on the system.",824,{"i":[{"n":"self"}],"o":{"n":"availablemonitorsiter"}}],[11,"get_primary_monitor","","Returns the primary monitor of the system.",824,{"i":[{"n":"self"}],"o":{"n":"monitorid"}}],[11,"poll_events","","Fetches all the events that are pending, calls the callback function for each of them, and returns.",824,null],[11,"run_forever","","Calls `callback` every time an event is received. If no event is available, sleeps the current thread and waits for an event. If the callback returns `ControlFlow::Break` then `run_forever` will immediately return.",824,null],[11,"create_proxy","","Creates an `EventsLoopProxy` that can be used to wake up the `EventsLoop` from another thread.",824,{"i":[{"n":"self"}],"o":{"n":"eventsloopproxy"}}],[11,"new","","Initializes a new `WindowBuilder` with default values.",40,{"o":{"n":"windowbuilder"}}],[11,"with_dimensions","","Requests the window to be of specific dimensions.",40,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"n":"windowbuilder"}}],[11,"with_min_dimensions","","Sets a minimum dimension size for the window",40,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"n":"windowbuilder"}}],[11,"with_max_dimensions","","Sets a maximum dimension size for the window",40,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"n":"windowbuilder"}}],[11,"with_title","","Requests a specific title for the window.",40,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"windowbuilder"}}],[11,"with_fullscreen","","Sets the window fullscreen state. None means a normal window, Some(MonitorId) means a fullscreen window on that specific monitor",40,{"i":[{"n":"self"},{"g":["monitorid"],"n":"option"}],"o":{"n":"windowbuilder"}}],[11,"with_maximized","","Requests maximized mode.",40,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"windowbuilder"}}],[11,"with_visibility","","Sets whether the window will be initially hidden or visible.",40,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"windowbuilder"}}],[11,"with_transparency","","Sets whether the background of the window should be transparent.",40,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"windowbuilder"}}],[11,"with_decorations","","Sets whether the window should have a border, a title bar, etc.",40,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"windowbuilder"}}],[11,"with_multitouch","","Enables multitouch.",40,{"i":[{"n":"self"}],"o":{"n":"windowbuilder"}}],[11,"build","","Builds the window.",40,{"i":[{"n":"self"},{"n":"eventsloop"}],"o":{"g":["window","creationerror"],"n":"result"}}],[11,"get_size","conrod::backend::glium::glium::buffer","Returns the size in bytes of this slice.",542,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"map","","Maps the buffer in memory for both reading and writing.",542,{"i":[{"n":"self"}],"o":{"n":"mapping"}}],[11,"map_read","","Maps the buffer in memory for reading.",542,{"i":[{"n":"self"}],"o":{"n":"readmapping"}}],[11,"map_write","","Maps the buffer in memory for writing only.",542,{"i":[{"n":"self"}],"o":{"n":"writemapping"}}],[11,"write","","Uploads some data in this buffer.",542,null],[11,"invalidate","","Invalidates the content of the slice. The data becomes undefined.",542,null],[11,"read","","Reads the content of the buffer.",542,{"i":[{"n":"self"}],"o":{"g":["readerror"],"n":"result"}}],[11,"copy_to","","Copies the content of this slice to another slice.",542,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["copyerror"],"n":"result"}}],[11,"slice_custom","","Builds a slice that contains an element from inside the buffer.",542,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"buffermutslice"}}],[11,"as_slice_any","","Builds a slice-any containing the whole subbuffer.",542,{"i":[{"n":"self"}],"o":{"n":"bufferanyslice"}}],[11,"len","","Returns the number of elements in this slice.",542,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"slice","","Builds a subslice of this slice. Returns `None` if out of range.",542,{"i":[{"n":"self"},{"n":"r"}],"o":{"g":["buffermutslice"],"n":"option"}}],[11,"read_as_texture_1d","","Reads the content of the buffer.",542,{"i":[{"n":"self"}],"o":{"g":["readerror"],"n":"result"}}],[11,"write","","Writes the whole content.",829,null],[11,"len","","Returns the length of the mapping.",829,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"set","","Changes an element of the mapping.",829,null],[11,"get_size","","Returns the number of bytes in this slice.",551,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"get_elements_size","","Returns the size in bytes of each element in the buffer.",551,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"get_elements_count","","Returns the number of elements in the buffer.",551,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"invalidate","","Invalidates the content of the slice. The data becomes undefined.",551,null],[11,"get_context","","Returns the context corresponding to this buffer.",551,{"i":[{"n":"self"}],"o":{"n":"rc"}}],[11,"insert","","Inserts a new fence.",830,null],[11,"new","conrod::backend::glium::glium::debug","Creates a new `TimestampQuery`. Returns `None` if the backend doesn't support it.",831,{"i":[{"n":"f"}],"o":{"g":["timestampquery"],"n":"option"}}],[11,"is_ready","","Queries the counter to see if the timestamp is already available.",831,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get","","Returns the value of the timestamp. Blocks until it is available.",831,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"new","conrod::backend::glium::glium::draw_parameters","Builds a new query.",605,{"i":[{"n":"f"}],"o":{"g":["primitivesgeneratedquery","querycreationerror"],"n":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",605,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",605,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",605,{"i":[{"n":"self"},{"g":["u32"],"n":"bufferslice"}],"o":{"g":["tobuffererror"],"n":"result"}}],[11,"alpha_blending","","Returns a blend effect to add transparent objects over others.",62,{"o":{"n":"blend"}}],[11,"new","","Builds a new query.",570,{"i":[{"n":"f"}],"o":{"g":["timeelapsedquery","querycreationerror"],"n":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",570,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",570,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",570,{"i":[{"n":"self"},{"g":["u32"],"n":"bufferslice"}],"o":{"g":["tobuffererror"],"n":"result"}}],[11,"new","","Builds a new query.",597,{"i":[{"n":"f"}],"o":{"g":["samplespassedquery","querycreationerror"],"n":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",597,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",597,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",597,{"i":[{"n":"self"},{"g":["u32"],"n":"bufferslice"}],"o":{"g":["tobuffererror"],"n":"result"}}],[11,"new","","Builds a new query.",582,{"i":[{"n":"f"}],"o":{"g":["transformfeedbackprimitiveswrittenquery","querycreationerror"],"n":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",582,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",582,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",582,{"i":[{"n":"self"},{"g":["u32"],"n":"bufferslice"}],"o":{"g":["tobuffererror"],"n":"result"}}],[11,"new","","Builds a new query.",563,{"i":[{"n":"f"},{"n":"bool"}],"o":{"g":["anysamplespassedquery","querycreationerror"],"n":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",563,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",563,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",563,{"i":[{"n":"self"},{"g":["u32"],"n":"bufferslice"}],"o":{"g":["tobuffererror"],"n":"result"}}],[11,"requires_depth_buffer","","Returns true if the function requires a depth buffer to be used.",69,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"new","conrod::backend::glium::glium::framebuffer","Creates a `SimpleFrameBuffer` with a single color attachment and no depth nor stencil buffer.",769,{"i":[{"n":"f"},{"n":"c"}],"o":{"g":["simpleframebuffer","validationerror"],"n":"result"}}],[11,"with_depth_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a depth buffer, but no stencil buffer.",769,{"i":[{"n":"f"},{"n":"c"},{"n":"d"}],"o":{"g":["simpleframebuffer","validationerror"],"n":"result"}}],[11,"depth_only","","Creates a `SimpleFrameBuffer` with a single color attachment and no depth nor stencil buffer.",769,{"i":[{"n":"f"},{"n":"d"}],"o":{"g":["simpleframebuffer","validationerror"],"n":"result"}}],[11,"with_depth_and_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment, a depth buffer, and a stencil buffer.",769,{"i":[{"n":"f"},{"n":"c"},{"n":"d"},{"n":"s"}],"o":{"g":["simpleframebuffer","validationerror"],"n":"result"}}],[11,"depth_and_stencil_only","","Creates a `SimpleFrameBuffer` with a single color attachment and no depth nor stencil buffer.",769,{"i":[{"n":"f"},{"n":"d"},{"n":"s"}],"o":{"g":["simpleframebuffer","validationerror"],"n":"result"}}],[11,"with_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a stencil buffer, but no depth buffer.",769,{"i":[{"n":"f"},{"n":"c"},{"n":"s"}],"o":{"g":["simpleframebuffer","validationerror"],"n":"result"}}],[11,"stencil_only","","Creates a `SimpleFrameBuffer` with a single color attachment and a stencil buffer, but no depth buffer.",769,{"i":[{"n":"f"},{"n":"s"}],"o":{"g":["simpleframebuffer","validationerror"],"n":"result"}}],[11,"with_depth_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a depth-stencil buffer.",769,{"i":[{"n":"f"},{"n":"c"},{"n":"d"}],"o":{"g":["simpleframebuffer","validationerror"],"n":"result"}}],[11,"depth_stencil_only","","Creates a `SimpleFrameBuffer` with a single color attachment and a depth-stencil buffer.",769,{"i":[{"n":"f"},{"n":"d"}],"o":{"g":["simpleframebuffer","validationerror"],"n":"result"}}],[11,"new","","Creates a new `MultiOutputFrameBuffer`.",771,{"i":[{"n":"f"},{"n":"i"}],"o":{"g":["multioutputframebuffer","validationerror"],"n":"result"}}],[11,"with_depth_buffer","","Creates a `MultiOutputFrameBuffer` with a depth buffer.",771,{"i":[{"n":"f"},{"n":"i"},{"n":"d"}],"o":{"g":["multioutputframebuffer","validationerror"],"n":"result"}}],[11,"with_depth_and_stencil_buffer","","Creates a `MultiOutputFrameBuffer` with a depth buffer, and a stencil buffer.",771,{"i":[{"n":"f"},{"n":"i"},{"n":"d"},{"n":"s"}],"o":{"g":["multioutputframebuffer","validationerror"],"n":"result"}}],[11,"with_stencil_buffer","","Creates a `MultiOutputFrameBuffer` with a stencil buffer, but no depth buffer.",771,{"i":[{"n":"f"},{"n":"i"},{"n":"s"}],"o":{"g":["multioutputframebuffer","validationerror"],"n":"result"}}],[11,"with_depth_stencil_buffer","","Creates a `MultiOutputFrameBuffer` with a depth-stencil buffer.",771,{"i":[{"n":"f"},{"n":"i"},{"n":"d"}],"o":{"g":["multioutputframebuffer","validationerror"],"n":"result"}}],[11,"is_supported","","Returns true if empty framebuffers are supported by the backend.",768,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[11,"is_layered_supported","","Returns true if layered empty framebuffers are supported by the backend.",768,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[11,"get_max_supported_width","","Returns the maximum width of empty framebuffers that the backend supports, or `None` if empty framebuffers are not supported.",768,{"i":[{"n":"c"}],"o":{"g":["u32"],"n":"option"}}],[11,"get_max_supported_height","","Returns the maximum height of empty framebuffers that the backend supports, or `None` if empty framebuffers are not supported.",768,{"i":[{"n":"c"}],"o":{"g":["u32"],"n":"option"}}],[11,"get_max_supported_samples","","Returns the maximum number of samples of empty framebuffers that the backend supports, or `None` if empty framebuffers are not supported.",768,{"i":[{"n":"c"}],"o":{"g":["u32"],"n":"option"}}],[11,"get_max_supported_layers","","Returns the maximum number of layers of empty framebuffers that the backend supports, or `None` if layered empty framebuffers are not supported.",768,{"i":[{"n":"c"}],"o":{"g":["u32"],"n":"option"}}],[11,"new","","Creates a `EmptyFrameBuffer`.",768,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"g":["u32"],"n":"option"},{"g":["u32"],"n":"option"},{"n":"bool"}],"o":{"g":["emptyframebuffer","validationerror"],"n":"result"}}],[11,"back_left","","Creates a `DefaultFramebuffer` with the back left buffer.",770,{"i":[{"n":"f"}],"o":{"n":"defaultframebuffer"}}],[11,"new","","Builds a new render buffer.",743,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthrenderbuffer","creationerror"],"n":"result"}}],[11,"new","","Builds a new render buffer.",752,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstencilrenderbuffer","creationerror"],"n":"result"}}],[11,"new","","Builds a new render buffer.",717,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"u32"},{"n":"u32"}],"o":{"g":["renderbuffer","creationerror"],"n":"result"}}],[11,"new","","Builds a new render buffer.",762,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stencilrenderbuffer","creationerror"],"n":"result"}}],[11,"get_primitives_type","conrod::backend::glium::glium::index","Returns the type of the primitives.",82,{"i":[{"n":"self"}],"o":{"n":"primitivetype"}}],[11,"is_supported","","Returns true if the backend supports this type of primitives.",83,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"get_size","","Returns the size in bytes of each index of this type.",85,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_supported","","Returns true if the backend supports this type of index.",85,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"get_primitives_type","","Returns the type of primitives associated with this index buffer.",566,{"i":[{"n":"self"}],"o":{"n":"primitivetype"}}],[11,"get_indices_type","","Returns the data type of the indices inside this index buffer.",566,{"i":[{"n":"self"}],"o":{"n":"indextype"}}],[11,"slice","","Returns `None` if out of range.",566,{"i":[{"n":"self"},{"n":"r"}],"o":{"g":["indexbufferslice"],"n":"option"}}],[11,"get_primitives_type","","Returns the type of primitives associated with this index buffer.",546,{"i":[{"n":"self"}],"o":{"n":"primitivetype"}}],[11,"get_indices_type","","Returns the data type of the indices inside this index buffer.",546,{"i":[{"n":"self"}],"o":{"n":"indextype"}}],[11,"empty","","Builds an empty buffer.",754,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["drawcommandsnoindicesbuffer","buffercreationerror"],"n":"result"}}],[11,"empty_dynamic","","Builds an empty buffer.",754,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["drawcommandsnoindicesbuffer","buffercreationerror"],"n":"result"}}],[11,"empty_persistent","","Builds an empty buffer.",754,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["drawcommandsnoindicesbuffer","buffercreationerror"],"n":"result"}}],[11,"empty_immutable","","Builds an empty buffer.",754,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["drawcommandsnoindicesbuffer","buffercreationerror"],"n":"result"}}],[11,"with_primitive_type","","Builds an indices source from this buffer and a primitives type. This indices source can be passed to the `draw()` function.",754,{"i":[{"n":"self"},{"n":"primitivetype"}],"o":{"n":"indicessource"}}],[11,"empty","","Builds an empty buffer.",730,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["drawcommandsindicesbuffer","buffercreationerror"],"n":"result"}}],[11,"empty_dynamic","","Builds an empty buffer.",730,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["drawcommandsindicesbuffer","buffercreationerror"],"n":"result"}}],[11,"empty_persistent","","Builds an empty buffer.",730,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["drawcommandsindicesbuffer","buffercreationerror"],"n":"result"}}],[11,"empty_immutable","","Builds an empty buffer.",730,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["drawcommandsindicesbuffer","buffercreationerror"],"n":"result"}}],[11,"with_index_buffer","","Builds an indices source from this buffer and a primitives type. This indices source can be passed to the `draw()` function.",730,{"i":[{"n":"self"},{"n":"indexbuffer"}],"o":{"n":"indicessource"}}],[11,"new","","Builds a new index buffer from a list of indices and a primitive type.",595,null],[11,"dynamic","","Builds a new index buffer from a list of indices and a primitive type.",595,null],[11,"persistent","","Builds a new index buffer from a list of indices and a primitive type.",595,null],[11,"immutable","","Builds a new index buffer from a list of indices and a primitive type.",595,null],[11,"empty","","Builds a new empty index buffer.",595,{"i":[{"n":"f"},{"n":"primitivetype"},{"n":"usize"}],"o":{"g":["indexbuffer","creationerror"],"n":"result"}}],[11,"empty_dynamic","","Builds a new empty index buffer.",595,{"i":[{"n":"f"},{"n":"primitivetype"},{"n":"usize"}],"o":{"g":["indexbuffer","creationerror"],"n":"result"}}],[11,"empty_persistent","","Builds a new empty index buffer.",595,{"i":[{"n":"f"},{"n":"primitivetype"},{"n":"usize"}],"o":{"g":["indexbuffer","creationerror"],"n":"result"}}],[11,"empty_immutable","","Builds a new empty index buffer.",595,{"i":[{"n":"f"},{"n":"primitivetype"},{"n":"usize"}],"o":{"g":["indexbuffer","creationerror"],"n":"result"}}],[11,"get_primitives_type","","Returns the type of primitives associated with this index buffer.",595,{"i":[{"n":"self"}],"o":{"n":"primitivetype"}}],[11,"get_indices_type","","Returns the data type of the indices inside this index buffer.",595,{"i":[{"n":"self"}],"o":{"n":"indextype"}}],[11,"slice","","Returns `None` if out of range.",595,{"i":[{"n":"self"},{"n":"r"}],"o":{"g":["indexbufferslice"],"n":"option"}}],[11,"new_empty","conrod::backend::glium::glium::pixel_buffer","Builds a new buffer with an uninitialized content.",760,{"i":[{"n":"f"},{"n":"usize"}],"o":{"n":"pixelbuffer"}}],[11,"read_as_texture_2d","","Reads the content of the pixel buffer.",760,{"i":[{"n":"self"}],"o":{"g":["readerror"],"n":"result"}}],[11,"is_supported","conrod::backend::glium::glium::program","Returns true if the backend supports compute shaders.",602,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[11,"from_source","","Builds a new compute shader from some source code.",602,{"i":[{"n":"f"},{"n":"str"}],"o":{"g":["computeshader","programcreationerror"],"n":"result"}}],[11,"from_binary","","Builds a new compute shader from some binary.",602,{"i":[{"n":"f"},{"n":"binary"}],"o":{"g":["computeshader","programcreationerror"],"n":"result"}}],[11,"execute","","Executes the compute shader.",602,null],[11,"execute_indirect","","Executes the compute shader.",602,null],[11,"get_binary","","Returns the program's compiled binary.",602,{"i":[{"n":"self"}],"o":{"g":["binary","getbinaryerror"],"n":"result"}}],[11,"get_uniform","","Returns informations about a uniform variable, if it exists.",602,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["uniform"],"n":"option"}}],[11,"uniforms","","Returns an iterator to the list of uniforms.",602,{"i":[{"n":"self"}],"o":{"g":["string","uniform"],"n":"iter"}}],[11,"get_uniform_blocks","","Returns a list of uniform blocks.",602,{"i":[{"n":"self"}],"o":{"n":"hashmap"}}],[11,"get_shader_storage_blocks","","Returns the list of shader storage blocks.",602,{"i":[{"n":"self"}],"o":{"n":"hashmap"}}],[11,"new","","Builds a new program.",581,{"i":[{"n":"f"},{"n":"i"}],"o":{"g":["program","programcreationerror"],"n":"result"}}],[11,"from_source","","Builds a new program from GLSL source code.",581,{"i":[{"n":"f"},{"n":"str"},{"n":"str"},{"g":["str"],"n":"option"}],"o":{"g":["program","programcreationerror"],"n":"result"}}],[11,"get_binary","","Returns the program's compiled binary.",581,{"i":[{"n":"self"}],"o":{"g":["binary","getbinaryerror"],"n":"result"}}],[11,"get_frag_data_location","","Returns the location of an output fragment, if it exists.",581,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["u32"],"n":"option"}}],[11,"get_uniform","","Returns informations about a uniform variable, if it exists.",581,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["uniform"],"n":"option"}}],[11,"uniforms","","Returns an iterator to the list of uniforms.",581,{"i":[{"n":"self"}],"o":{"g":["string","uniform"],"n":"iter"}}],[11,"get_uniform_blocks","","Returns a list of uniform blocks.",581,{"i":[{"n":"self"}],"o":{"n":"hashmap"}}],[11,"get_transform_feedback_buffers","","Returns the list of transform feedback varyings.",581,null],[11,"transform_feedback_matches","","True if the transform feedback output of this program matches the specified `VertexFormat` and `stride`.",581,{"i":[{"n":"self"},{"n":"cow"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"get_output_primitives","","Returns the type of geometry that transform feedback would generate, or `None` if it depends on the vertex/index data passed when drawing.",581,{"i":[{"n":"self"}],"o":{"g":["outputprimitives"],"n":"option"}}],[11,"has_tessellation_shaders","","Returns true if the program contains a tessellation stage.",581,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"has_tessellation_control_shader","","Returns true if the program contains a tessellation control stage.",581,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"has_tessellation_evaluation_shader","","Returns true if the program contains a tessellation evaluation stage.",581,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"has_geometry_shader","","Returns true if the program contains a geometry shader.",581,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_attribute","","Returns informations about an attribute, if it exists.",581,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["attribute"],"n":"option"}}],[11,"attributes","","Returns an iterator to the list of attributes.",581,{"i":[{"n":"self"}],"o":{"g":["string","attribute"],"n":"iter"}}],[11,"has_srgb_output","","Returns true if the program has been configured to output sRGB instead of RGB.",581,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_shader_storage_blocks","","Returns the list of shader storage blocks.",581,{"i":[{"n":"self"}],"o":{"n":"hashmap"}}],[11,"get_subroutine_uniforms","","Returns the subroutine uniforms of this program.",581,{"i":[{"n":"self"}],"o":{"n":"hashmap"}}],[11,"uses_point_size","","Returns true if the program has been configured to use the `gl_PointSize` variable.",581,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"to_gl_enum","","Converts the `ShaderStage` to its GLenum equivalent",101,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"new","conrod::backend::glium::glium::uniforms","Builds a new `Sampler` with default parameters.",113,{"i":[{"n":"t"}],"o":{"n":"sampler"}}],[11,"wrap_function","","Changes the wrap functions of all three coordinates.",113,{"i":[{"n":"self"},{"n":"samplerwrapfunction"}],"o":{"n":"sampler"}}],[11,"minify_filter","","Changes the minifying filter of the sampler.",113,{"i":[{"n":"self"},{"n":"minifysamplerfilter"}],"o":{"n":"sampler"}}],[11,"magnify_filter","","Changes the magnifying filter of the sampler.",113,{"i":[{"n":"self"},{"n":"magnifysamplerfilter"}],"o":{"n":"sampler"}}],[11,"anisotropy","","Changes the magnifying filter of the sampler.",113,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"sampler"}}],[11,"new","","Uploads data in the uniforms buffer.",616,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["uniformbuffer","buffercreationerror"],"n":"result"}}],[11,"dynamic","","Uploads data in the uniforms buffer.",616,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["uniformbuffer","buffercreationerror"],"n":"result"}}],[11,"persistent","","Uploads data in the uniforms buffer.",616,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["uniformbuffer","buffercreationerror"],"n":"result"}}],[11,"immutable","","Uploads data in the uniforms buffer.",616,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["uniformbuffer","buffercreationerror"],"n":"result"}}],[11,"empty","","Creates an empty buffer.",616,{"i":[{"n":"f"}],"o":{"g":["uniformbuffer","buffercreationerror"],"n":"result"}}],[11,"empty_dynamic","","Creates an empty buffer.",616,{"i":[{"n":"f"}],"o":{"g":["uniformbuffer","buffercreationerror"],"n":"result"}}],[11,"empty_persistent","","Creates an empty buffer.",616,{"i":[{"n":"f"}],"o":{"g":["uniformbuffer","buffercreationerror"],"n":"result"}}],[11,"empty_immutable","","Creates an empty buffer.",616,{"i":[{"n":"f"}],"o":{"g":["uniformbuffer","buffercreationerror"],"n":"result"}}],[11,"empty_unsized","","Creates an empty buffer.",616,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["uniformbuffer","buffercreationerror"],"n":"result"}}],[11,"empty_unsized_dynamic","","Creates an empty buffer.",616,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["uniformbuffer","buffercreationerror"],"n":"result"}}],[11,"empty_unsized_persistent","","Creates an empty buffer.",616,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["uniformbuffer","buffercreationerror"],"n":"result"}}],[11,"empty_unsized_immutable","","Creates an empty buffer.",616,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["uniformbuffer","buffercreationerror"],"n":"result"}}],[11,"is_usable_with","","Returns true if this value can be used with a uniform of the given type.",118,{"i":[{"n":"self"},{"n":"uniformtype"}],"o":{"n":"bool"}}],[11,"new","","Builds a new storage with a value.",714,{"i":[{"n":"str"},{"n":"t"}],"o":{"g":["emptyuniforms"],"n":"uniformsstorage"}}],[11,"add","","Adds a value to the storage.",714,{"i":[{"n":"self"},{"n":"str"},{"n":"u"}],"o":{"g":["uniformsstorage"],"n":"uniformsstorage"}}],[11,"per_instance","conrod::backend::glium::glium::vertex","Creates a marker that instructs glium to use multiple instances.",704,{"i":[{"n":"self"}],"o":{"g":["perinstance","instancingnotsupported"],"n":"result"}}],[11,"new","","Builds a new vertex buffer.",545,null],[11,"dynamic","","Builds a new vertex buffer.",545,null],[11,"persistent","","Builds a new vertex buffer.",545,null],[11,"immutable","","Builds a new vertex buffer.",545,null],[11,"empty","","Builds an empty vertex buffer.",545,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["vertexbuffer","creationerror"],"n":"result"}}],[11,"empty_dynamic","","Builds an empty vertex buffer.",545,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["vertexbuffer","creationerror"],"n":"result"}}],[11,"empty_persistent","","Builds an empty vertex buffer.",545,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["vertexbuffer","creationerror"],"n":"result"}}],[11,"empty_immutable","","Builds an empty vertex buffer.",545,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["vertexbuffer","creationerror"],"n":"result"}}],[11,"new_raw","","Builds a new vertex buffer from an indeterminate data type and bindings.",545,null],[11,"new_raw_dynamic","","Dynamic version of `new_raw`.",545,null],[11,"slice","","Accesses a slice of the buffer.",545,{"i":[{"n":"self"},{"n":"r"}],"o":{"g":["vertexbufferslice"],"n":"option"}}],[11,"get_bindings","","Returns the associated `VertexFormat`.",545,{"i":[{"n":"self"}],"o":{"n":"cow"}}],[11,"per_instance","","Creates a marker that instructs glium to use multiple instances.",545,{"i":[{"n":"self"}],"o":{"g":["perinstance","instancingnotsupported"],"n":"result"}}],[11,"into_vertex_buffer_any","","DEPRECATED: use `.into()` instead. Discard the type information and turn the vertex buffer into a `VertexBufferAny`.",545,{"i":[{"n":"self"}],"o":{"n":"vertexbufferany"}}],[11,"new","","Builds a new transform feedback session.",611,{"i":[{"n":"f"},{"n":"program"},{"n":"buffer"}],"o":{"g":["transformfeedbacksession","transformfeedbacksessioncreationerror"],"n":"result"}}],[11,"is_supported","","Returns true if the backend supports this type of attribute.",125,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"get_size_bytes","","Returns the size in bytes of a value of this type.",125,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"get_num_components","","Returns the number of values for this type.",125,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"get_elements_size","","Returns the number of bytes between two consecutive elements in the buffer.",543,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"len","","Returns the number of elements in the buffer.",543,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"get_bindings","","Returns the associated `VertexFormat`.",543,{"i":[{"n":"self"}],"o":{"n":"cow"}}],[11,"into_vertex_buffer","","Turns the vertex buffer into a `VertexBuffer` without checking the type.",543,{"i":[{"n":"self"}],"o":{"n":"vertexbuffer"}}],[11,"per_instance","","Creates a marker that instructs glium to use multiple instances.",543,{"i":[{"n":"self"}],"o":{"g":["perinstance","instancingnotsupported"],"n":"result"}}],[11,"new","conrod::backend::glium::glium::texture::bindless","Takes ownership of the given texture and makes it resident.",653,{"i":[{"n":"textureany"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"into_inner","","Unwraps the texture and restores it.",653,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"new","","Builds a new handle.",531,{"i":[{"n":"residenttexture"},{"n":"samplerbehavior"}],"o":{"n":"texturehandle"}}],[11,"set","","Sets the value to the given texture.",531,null],[11,"new","conrod::backend::glium::glium::texture::buffer_texture","Builds a new texture buffer from data.",532,null],[11,"dynamic","","Builds a new texture buffer from data.",532,null],[11,"persistent","","Builds a new texture buffer from data.",532,null],[11,"immutable","","Builds a new texture buffer from data.",532,null],[11,"empty","","Builds a new empty buffer buffer.",532,{"i":[{"n":"f"},{"n":"usize"},{"n":"buffertexturetype"}],"o":{"g":["buffertexture","creationerror"],"n":"result"}}],[11,"empty_dynamic","","Builds a new empty buffer buffer.",532,{"i":[{"n":"f"},{"n":"usize"},{"n":"buffertexturetype"}],"o":{"g":["buffertexture","creationerror"],"n":"result"}}],[11,"empty_persistent","","Builds a new empty buffer buffer.",532,{"i":[{"n":"f"},{"n":"usize"},{"n":"buffertexturetype"}],"o":{"g":["buffertexture","creationerror"],"n":"result"}}],[11,"empty_immutable","","Builds a new empty buffer buffer.",532,{"i":[{"n":"f"},{"n":"usize"},{"n":"buffertexturetype"}],"o":{"g":["buffertexture","creationerror"],"n":"result"}}],[11,"from_buffer","","Builds a new buffer texture by taking ownership of a buffer.",532,{"i":[{"n":"f"},{"n":"buffer"},{"n":"buffertexturetype"}],"o":{"g":["buffertexture"],"n":"result"}}],[11,"as_buffer_texture_ref","","Builds a `BufferTextureRef`.",532,{"i":[{"n":"self"}],"o":{"n":"buffertextureref"}}],[11,"get_texture_type","","Return the type of the texture.",810,{"i":[{"n":"self"}],"o":{"n":"buffertexturetype"}}],[11,"sampled","conrod::backend::glium::glium::texture::texture1d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",590,{"i":[{"n":"self"}],"o":{"g":["texture1d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",590,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",590,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["texture1d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",590,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["texture1d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",590,{"i":[{"n":"f"},{"n":"t"},{"n":"uncompressedfloatformat"},{"n":"mipmapsoption"}],"o":{"g":["texture1d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",590,{"i":[{"n":"f"},{"n":"u32"}],"o":{"g":["texture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",590,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["texture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",590,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["texture1d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",590,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"texture1d"}}],[11,"width","","Returns the width of that image.",590,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",590,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",590,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",590,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture1dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",590,{"i":[{"n":"self"}],"o":{"n":"texture1dmipmap"}}],[11,"width","","Returns the width of that image.",683,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",683,{"i":[{"n":"self"}],"o":{"n":"texture1d"}}],[11,"get_level","","Returns the texture level.",683,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::compressed_texture1d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",567,{"i":[{"n":"self"}],"o":{"g":["compressedtexture1d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",567,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",567,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["compressedtexture1d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",567,{"i":[{"n":"f"},{"n":"t"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedtexture1d","texturecreationerror"],"n":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",567,null],[11,"with_format","","Builds a new texture with a specific format.",567,{"i":[{"n":"f"},{"n":"t"},{"n":"compressedformat"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedtexture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",567,{"i":[{"n":"f"},{"n":"compressedformat"},{"n":"compressedmipmapsoption"},{"n":"u32"}],"o":{"g":["compressedtexture1d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",567,{"i":[{"n":"f"},{"n":"compressedformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"compressedtexture1d"}}],[11,"width","","Returns the width of that image.",567,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",567,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",567,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",567,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",567,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedtexture1dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",567,{"i":[{"n":"self"}],"o":{"n":"compressedtexture1dmipmap"}}],[11,"width","","Returns the width of that image.",712,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",712,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_texture","","Returns the corresponding texture.",712,{"i":[{"n":"self"}],"o":{"n":"compressedtexture1d"}}],[11,"get_level","","Returns the texture level.",712,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::srgb_texture1d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",619,{"i":[{"n":"self"}],"o":{"g":["srgbtexture1d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",619,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",619,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["srgbtexture1d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",619,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["srgbtexture1d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",619,{"i":[{"n":"f"},{"n":"t"},{"n":"srgbformat"},{"n":"mipmapsoption"}],"o":{"g":["srgbtexture1d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",619,{"i":[{"n":"f"},{"n":"u32"}],"o":{"g":["srgbtexture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",619,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["srgbtexture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",619,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["srgbtexture1d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",619,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"srgbtexture1d"}}],[11,"width","","Returns the width of that image.",619,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",619,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",619,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",619,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture1dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",619,{"i":[{"n":"self"}],"o":{"n":"srgbtexture1dmipmap"}}],[11,"width","","Returns the width of that image.",671,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",671,{"i":[{"n":"self"}],"o":{"n":"srgbtexture1d"}}],[11,"get_level","","Returns the texture level.",671,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::compressed_srgb_texture1d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",559,{"i":[{"n":"self"}],"o":{"g":["compressedsrgbtexture1d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",559,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",559,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["compressedsrgbtexture1d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",559,{"i":[{"n":"f"},{"n":"t"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedsrgbtexture1d","texturecreationerror"],"n":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",559,null],[11,"with_format","","Builds a new texture with a specific format.",559,{"i":[{"n":"f"},{"n":"t"},{"n":"compressedsrgbformat"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedsrgbtexture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",559,{"i":[{"n":"f"},{"n":"compressedsrgbformat"},{"n":"compressedmipmapsoption"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture1d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",559,{"i":[{"n":"f"},{"n":"compressedsrgbformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"compressedsrgbtexture1d"}}],[11,"width","","Returns the width of that image.",559,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",559,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",559,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",559,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",559,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture1dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",559,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture1dmipmap"}}],[11,"width","","Returns the width of that image.",696,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",696,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_texture","","Returns the corresponding texture.",696,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture1d"}}],[11,"get_level","","Returns the texture level.",696,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::integral_texture1d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",599,{"i":[{"n":"self"}],"o":{"g":["integraltexture1d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",599,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",599,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["integraltexture1d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",599,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["integraltexture1d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",599,{"i":[{"n":"f"},{"n":"t"},{"n":"uncompressedintformat"},{"n":"mipmapsoption"}],"o":{"g":["integraltexture1d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",599,{"i":[{"n":"f"},{"n":"u32"}],"o":{"g":["integraltexture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",599,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["integraltexture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",599,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["integraltexture1d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",599,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"integraltexture1d"}}],[11,"width","","Returns the width of that image.",599,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",599,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",599,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",599,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture1dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",599,{"i":[{"n":"self"}],"o":{"n":"integraltexture1dmipmap"}}],[11,"width","","Returns the width of that image.",675,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",675,{"i":[{"n":"self"}],"o":{"n":"integraltexture1d"}}],[11,"get_level","","Returns the texture level.",675,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::unsigned_texture1d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",556,{"i":[{"n":"self"}],"o":{"g":["unsignedtexture1d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",556,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",556,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["unsignedtexture1d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",556,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["unsignedtexture1d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",556,{"i":[{"n":"f"},{"n":"t"},{"n":"uncompresseduintformat"},{"n":"mipmapsoption"}],"o":{"g":["unsignedtexture1d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",556,{"i":[{"n":"f"},{"n":"u32"}],"o":{"g":["unsignedtexture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",556,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["unsignedtexture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",556,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["unsignedtexture1d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",556,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"unsignedtexture1d"}}],[11,"width","","Returns the width of that image.",556,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",556,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",556,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",556,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture1dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",556,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture1dmipmap"}}],[11,"width","","Returns the width of that image.",661,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",661,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture1d"}}],[11,"get_level","","Returns the texture level.",661,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::depth_texture1d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",613,{"i":[{"n":"self"}],"o":{"g":["depthtexture1d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",613,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",613,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["depthtexture1d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",613,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["depthtexture1d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",613,{"i":[{"n":"f"},{"n":"t"},{"n":"depthformat"},{"n":"mipmapsoption"}],"o":{"g":["depthtexture1d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",613,{"i":[{"n":"f"},{"n":"u32"}],"o":{"g":["depthtexture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",613,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["depthtexture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",613,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["depthtexture1d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",613,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthtexture1d"}}],[11,"width","","Returns the width of that image.",613,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",613,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",613,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",613,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture1dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",613,{"i":[{"n":"self"}],"o":{"n":"depthtexture1dmipmap"}}],[11,"width","","Returns the width of that image.",541,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",541,{"i":[{"n":"self"}],"o":{"n":"depthtexture1d"}}],[11,"get_level","","Returns the texture level.",541,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_internal_format","conrod::backend::glium::glium::texture::stencil_texture1d","Determines the internal format of this texture.",554,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",554,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["stenciltexture1d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",554,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["stenciltexture1d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",554,{"i":[{"n":"f"},{"n":"t"},{"n":"stencilformat"},{"n":"mipmapsoption"}],"o":{"g":["stenciltexture1d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",554,{"i":[{"n":"f"},{"n":"u32"}],"o":{"g":["stenciltexture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",554,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["stenciltexture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",554,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["stenciltexture1d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",554,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"stenciltexture1d"}}],[11,"width","","Returns the width of that image.",554,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",554,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",554,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",554,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture1dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",554,{"i":[{"n":"self"}],"o":{"n":"stenciltexture1dmipmap"}}],[11,"width","","Returns the width of that image.",694,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",694,{"i":[{"n":"self"}],"o":{"n":"stenciltexture1d"}}],[11,"get_level","","Returns the texture level.",694,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_internal_format","conrod::backend::glium::glium::texture::depth_stencil_texture1d","Determines the internal format of this texture.",552,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",552,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["depthstenciltexture1d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",552,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["depthstenciltexture1d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",552,{"i":[{"n":"f"},{"n":"t"},{"n":"depthstencilformat"},{"n":"mipmapsoption"}],"o":{"g":["depthstenciltexture1d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",552,{"i":[{"n":"f"},{"n":"u32"}],"o":{"g":["depthstenciltexture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",552,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["depthstenciltexture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",552,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["depthstenciltexture1d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",552,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthstenciltexture1d"}}],[11,"width","","Returns the width of that image.",552,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",552,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",552,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",552,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture1dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",552,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture1dmipmap"}}],[11,"width","","Returns the width of that image.",640,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",640,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture1d"}}],[11,"get_level","","Returns the texture level.",640,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::texture2d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",639,{"i":[{"n":"self"}],"o":{"g":["texture2d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",639,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",639,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["texture2d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",639,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["texture2d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",639,{"i":[{"n":"f"},{"n":"t"},{"n":"uncompressedfloatformat"},{"n":"mipmapsoption"}],"o":{"g":["texture2d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",639,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",639,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",639,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture2d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",639,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"texture2d"}}],[11,"width","","Returns the width of that image.",639,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",639,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",639,null],[11,"as_surface","","Starts drawing on the texture.",639,{"i":[{"n":"self"}],"o":{"n":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",639,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read","","Reads the content of the texture to RAM. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",639,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",639,{"i":[{"n":"self"}],"o":{"n":"pixelbuffer"}}],[11,"unchecked_read","","Unsafely reads the content of the texture to RAM in the specified pixel format. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",639,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"unchecked_read_to_pixel_buffer","","Unsafely reads the content of the texture into a buffer in video memory. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",639,{"i":[{"n":"self"}],"o":{"n":"pixelbuffer"}}],[11,"write","","Uploads some data in the texture.",639,null],[11,"resident","","Turns the texture into a `ResidentTexture`.",639,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",639,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture2dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",639,{"i":[{"n":"self"}],"o":{"n":"texture2dmipmap"}}],[11,"width","","Returns the width of that image.",682,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",682,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",682,null],[11,"write","","Uploads some data in the texture level.",682,null],[11,"get_texture","","Returns the corresponding texture.",682,{"i":[{"n":"self"}],"o":{"n":"texture2d"}}],[11,"get_level","","Returns the texture level.",682,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::compressed_texture2d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",549,{"i":[{"n":"self"}],"o":{"g":["compressedtexture2d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",549,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",549,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["compressedtexture2d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",549,{"i":[{"n":"f"},{"n":"t"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedtexture2d","texturecreationerror"],"n":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",549,null],[11,"with_format","","Builds a new texture with a specific format.",549,{"i":[{"n":"f"},{"n":"t"},{"n":"compressedformat"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedtexture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",549,{"i":[{"n":"f"},{"n":"compressedformat"},{"n":"compressedmipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["compressedtexture2d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",549,{"i":[{"n":"f"},{"n":"compressedformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"compressedtexture2d"}}],[11,"width","","Returns the width of that image.",549,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",549,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",549,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",549,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read","","Reads the content of the texture to RAM. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",549,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",549,{"i":[{"n":"self"}],"o":{"n":"pixelbuffer"}}],[11,"unchecked_read","","Unsafely reads the content of the texture to RAM in the specified pixel format. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",549,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"unchecked_read_to_pixel_buffer","","Unsafely reads the content of the texture into a buffer in video memory. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",549,{"i":[{"n":"self"}],"o":{"n":"pixelbuffer"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",549,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"write","","Uploads some data in the texture.",549,null],[11,"write_compressed_data","","Uploads some data in the texture by using a compressed format as input.",549,null],[11,"resident","","Turns the texture into a `ResidentTexture`.",549,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",549,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedtexture2dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",549,{"i":[{"n":"self"}],"o":{"n":"compressedtexture2dmipmap"}}],[11,"width","","Returns the width of that image.",699,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",699,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",699,null],[11,"write","","Uploads some data in the texture level.",699,null],[11,"write_compressed_data","","Uploads some data in the texture level by using a compressed format as input.",699,null],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",699,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_texture","","Returns the corresponding texture.",699,{"i":[{"n":"self"}],"o":{"n":"compressedtexture2d"}}],[11,"get_level","","Returns the texture level.",699,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::srgb_texture2d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",562,{"i":[{"n":"self"}],"o":{"g":["srgbtexture2d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",562,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",562,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["srgbtexture2d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",562,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["srgbtexture2d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",562,{"i":[{"n":"f"},{"n":"t"},{"n":"srgbformat"},{"n":"mipmapsoption"}],"o":{"g":["srgbtexture2d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",562,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",562,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",562,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture2d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",562,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"srgbtexture2d"}}],[11,"width","","Returns the width of that image.",562,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",562,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",562,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",562,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read","","Reads the content of the texture to RAM. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",562,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",562,{"i":[{"n":"self"}],"o":{"n":"pixelbuffer"}}],[11,"unchecked_read","","Unsafely reads the content of the texture to RAM in the specified pixel format. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",562,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"unchecked_read_to_pixel_buffer","","Unsafely reads the content of the texture into a buffer in video memory. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",562,{"i":[{"n":"self"}],"o":{"n":"pixelbuffer"}}],[11,"write","","Uploads some data in the texture.",562,null],[11,"resident","","Turns the texture into a `ResidentTexture`.",562,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",562,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture2dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",562,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2dmipmap"}}],[11,"width","","Returns the width of that image.",677,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",677,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",677,null],[11,"write","","Uploads some data in the texture level.",677,null],[11,"get_texture","","Returns the corresponding texture.",677,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2d"}}],[11,"get_level","","Returns the texture level.",677,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::compressed_srgb_texture2d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",553,{"i":[{"n":"self"}],"o":{"g":["compressedsrgbtexture2d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",553,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",553,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["compressedsrgbtexture2d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",553,{"i":[{"n":"f"},{"n":"t"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedsrgbtexture2d","texturecreationerror"],"n":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",553,null],[11,"with_format","","Builds a new texture with a specific format.",553,{"i":[{"n":"f"},{"n":"t"},{"n":"compressedsrgbformat"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedsrgbtexture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",553,{"i":[{"n":"f"},{"n":"compressedsrgbformat"},{"n":"compressedmipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture2d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",553,{"i":[{"n":"f"},{"n":"compressedsrgbformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"compressedsrgbtexture2d"}}],[11,"width","","Returns the width of that image.",553,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",553,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",553,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",553,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read","","Reads the content of the texture to RAM. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",553,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",553,{"i":[{"n":"self"}],"o":{"n":"pixelbuffer"}}],[11,"unchecked_read","","Unsafely reads the content of the texture to RAM in the specified pixel format. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",553,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"unchecked_read_to_pixel_buffer","","Unsafely reads the content of the texture into a buffer in video memory. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",553,{"i":[{"n":"self"}],"o":{"n":"pixelbuffer"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",553,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"write","","Uploads some data in the texture.",553,null],[11,"write_compressed_data","","Uploads some data in the texture by using a compressed format as input.",553,null],[11,"resident","","Turns the texture into a `ResidentTexture`.",553,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",553,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture2dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",553,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture2dmipmap"}}],[11,"width","","Returns the width of that image.",710,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",710,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",710,null],[11,"write","","Uploads some data in the texture level.",710,null],[11,"write_compressed_data","","Uploads some data in the texture level by using a compressed format as input.",710,null],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",710,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_texture","","Returns the corresponding texture.",710,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture2d"}}],[11,"get_level","","Returns the texture level.",710,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::integral_texture2d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",623,{"i":[{"n":"self"}],"o":{"g":["integraltexture2d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",623,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",623,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["integraltexture2d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",623,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["integraltexture2d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",623,{"i":[{"n":"f"},{"n":"t"},{"n":"uncompressedintformat"},{"n":"mipmapsoption"}],"o":{"g":["integraltexture2d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",623,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",623,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",623,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture2d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",623,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"integraltexture2d"}}],[11,"width","","Returns the width of that image.",623,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",623,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",623,null],[11,"as_surface","","Starts drawing on the texture.",623,{"i":[{"n":"self"}],"o":{"n":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",623,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",623,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",623,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture2dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",623,{"i":[{"n":"self"}],"o":{"n":"integraltexture2dmipmap"}}],[11,"width","","Returns the width of that image.",666,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",666,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",666,null],[11,"get_texture","","Returns the corresponding texture.",666,{"i":[{"n":"self"}],"o":{"n":"integraltexture2d"}}],[11,"get_level","","Returns the texture level.",666,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::unsigned_texture2d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",610,{"i":[{"n":"self"}],"o":{"g":["unsignedtexture2d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",610,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",610,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["unsignedtexture2d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",610,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["unsignedtexture2d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",610,{"i":[{"n":"f"},{"n":"t"},{"n":"uncompresseduintformat"},{"n":"mipmapsoption"}],"o":{"g":["unsignedtexture2d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",610,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",610,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",610,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture2d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",610,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"unsignedtexture2d"}}],[11,"width","","Returns the width of that image.",610,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",610,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",610,null],[11,"as_surface","","Starts drawing on the texture.",610,{"i":[{"n":"self"}],"o":{"n":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",610,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",610,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",610,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture2dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",610,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2dmipmap"}}],[11,"width","","Returns the width of that image.",669,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",669,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",669,null],[11,"get_texture","","Returns the corresponding texture.",669,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2d"}}],[11,"get_level","","Returns the texture level.",669,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::depth_texture2d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",636,{"i":[{"n":"self"}],"o":{"g":["depthtexture2d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",636,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",636,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["depthtexture2d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",636,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["depthtexture2d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",636,{"i":[{"n":"f"},{"n":"t"},{"n":"depthformat"},{"n":"mipmapsoption"}],"o":{"g":["depthtexture2d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",636,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",636,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",636,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture2d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",636,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthtexture2d"}}],[11,"width","","Returns the width of that image.",636,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",636,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",636,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",636,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",636,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",636,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture2dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",636,{"i":[{"n":"self"}],"o":{"n":"depthtexture2dmipmap"}}],[11,"width","","Returns the width of that image.",533,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",533,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",533,null],[11,"get_texture","","Returns the corresponding texture.",533,{"i":[{"n":"self"}],"o":{"n":"depthtexture2d"}}],[11,"get_level","","Returns the texture level.",533,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_internal_format","conrod::backend::glium::glium::texture::stencil_texture2d","Determines the internal format of this texture.",622,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",622,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["stenciltexture2d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",622,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["stenciltexture2d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",622,{"i":[{"n":"f"},{"n":"t"},{"n":"stencilformat"},{"n":"mipmapsoption"}],"o":{"g":["stenciltexture2d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",622,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",622,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",622,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture2d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",622,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"stenciltexture2d"}}],[11,"width","","Returns the width of that image.",622,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",622,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",622,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",622,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",622,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",622,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture2dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",622,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2dmipmap"}}],[11,"width","","Returns the width of that image.",706,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",706,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",706,null],[11,"get_texture","","Returns the corresponding texture.",706,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2d"}}],[11,"get_level","","Returns the texture level.",706,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_internal_format","conrod::backend::glium::glium::texture::depth_stencil_texture2d","Determines the internal format of this texture.",573,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",573,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["depthstenciltexture2d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",573,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["depthstenciltexture2d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",573,{"i":[{"n":"f"},{"n":"t"},{"n":"depthstencilformat"},{"n":"mipmapsoption"}],"o":{"g":["depthstenciltexture2d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",573,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",573,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",573,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture2d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",573,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthstenciltexture2d"}}],[11,"width","","Returns the width of that image.",573,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",573,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",573,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",573,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",573,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",573,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture2dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",573,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2dmipmap"}}],[11,"width","","Returns the width of that image.",643,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",643,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",643,null],[11,"get_texture","","Returns the corresponding texture.",643,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2d"}}],[11,"get_level","","Returns the texture level.",643,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",626,{"i":[{"n":"self"}],"o":{"g":["texture2dmultisample"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",626,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",626,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",626,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",626,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",626,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"texture2dmultisample"}}],[11,"width","","Returns the width of that image.",626,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",626,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",626,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",626,null],[11,"as_surface","","Starts drawing on the texture.",626,{"i":[{"n":"self"}],"o":{"n":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",626,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",626,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",626,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture2dmultisamplemipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",626,{"i":[{"n":"self"}],"o":{"n":"texture2dmultisamplemipmap"}}],[11,"width","","Returns the width of that image.",662,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",662,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",662,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",662,null],[11,"get_texture","","Returns the corresponding texture.",662,{"i":[{"n":"self"}],"o":{"n":"texture2dmultisample"}}],[11,"get_level","","Returns the texture level.",662,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::integral_texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",580,{"i":[{"n":"self"}],"o":{"g":["integraltexture2dmultisample"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",580,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",580,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",580,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",580,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",580,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"integraltexture2dmultisample"}}],[11,"width","","Returns the width of that image.",580,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",580,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",580,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",580,null],[11,"as_surface","","Starts drawing on the texture.",580,{"i":[{"n":"self"}],"o":{"n":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",580,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",580,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",580,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture2dmultisamplemipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",580,{"i":[{"n":"self"}],"o":{"n":"integraltexture2dmultisamplemipmap"}}],[11,"width","","Returns the width of that image.",667,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",667,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",667,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",667,null],[11,"get_texture","","Returns the corresponding texture.",667,{"i":[{"n":"self"}],"o":{"n":"integraltexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",667,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::srgb_texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",600,{"i":[{"n":"self"}],"o":{"g":["srgbtexture2dmultisample"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",600,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",600,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",600,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",600,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",600,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"srgbtexture2dmultisample"}}],[11,"width","","Returns the width of that image.",600,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",600,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",600,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",600,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",600,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",600,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",600,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture2dmultisamplemipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",600,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2dmultisamplemipmap"}}],[11,"width","","Returns the width of that image.",664,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",664,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",664,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",664,null],[11,"get_texture","","Returns the corresponding texture.",664,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",664,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::unsigned_texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",557,{"i":[{"n":"self"}],"o":{"g":["unsignedtexture2dmultisample"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",557,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",557,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",557,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",557,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",557,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"unsignedtexture2dmultisample"}}],[11,"width","","Returns the width of that image.",557,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",557,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",557,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",557,null],[11,"as_surface","","Starts drawing on the texture.",557,{"i":[{"n":"self"}],"o":{"n":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",557,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",557,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",557,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture2dmultisamplemipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",557,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2dmultisamplemipmap"}}],[11,"width","","Returns the width of that image.",658,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",658,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",658,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",658,null],[11,"get_texture","","Returns the corresponding texture.",658,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",658,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::depth_texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",634,{"i":[{"n":"self"}],"o":{"g":["depthtexture2dmultisample"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",634,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",634,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",634,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",634,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",634,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthtexture2dmultisample"}}],[11,"width","","Returns the width of that image.",634,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",634,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",634,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",634,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",634,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",634,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",634,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture2dmultisamplemipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",634,{"i":[{"n":"self"}],"o":{"n":"depthtexture2dmultisamplemipmap"}}],[11,"width","","Returns the width of that image.",540,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",540,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",540,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",540,null],[11,"get_texture","","Returns the corresponding texture.",540,{"i":[{"n":"self"}],"o":{"n":"depthtexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",540,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_internal_format","conrod::backend::glium::glium::texture::stencil_texture2d_multisample","Determines the internal format of this texture.",598,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",598,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",598,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",598,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",598,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"stenciltexture2dmultisample"}}],[11,"width","","Returns the width of that image.",598,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",598,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",598,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",598,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",598,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",598,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",598,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture2dmultisamplemipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",598,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2dmultisamplemipmap"}}],[11,"width","","Returns the width of that image.",692,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",692,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",692,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",692,null],[11,"get_texture","","Returns the corresponding texture.",692,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",692,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_internal_format","conrod::backend::glium::glium::texture::depth_stencil_texture2d_multisample","Determines the internal format of this texture.",579,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",579,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",579,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",579,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",579,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthstenciltexture2dmultisample"}}],[11,"width","","Returns the width of that image.",579,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",579,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",579,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",579,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",579,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",579,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",579,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture2dmultisamplemipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",579,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2dmultisamplemipmap"}}],[11,"width","","Returns the width of that image.",647,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",647,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",647,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",647,null],[11,"get_texture","","Returns the corresponding texture.",647,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",647,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::texture3d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",588,{"i":[{"n":"self"}],"o":{"g":["texture3d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",588,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",588,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["texture3d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",588,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["texture3d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",588,{"i":[{"n":"f"},{"n":"t"},{"n":"uncompressedfloatformat"},{"n":"mipmapsoption"}],"o":{"g":["texture3d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",588,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture3d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",588,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture3d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",588,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture3d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",588,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"texture3d"}}],[11,"width","","Returns the width of that image.",588,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",588,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",588,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",588,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",588,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",588,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",588,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture3dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",588,{"i":[{"n":"self"}],"o":{"n":"texture3dmipmap"}}],[11,"width","","Returns the width of that image.",678,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",678,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",678,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",678,null],[11,"get_texture","","Returns the corresponding texture.",678,{"i":[{"n":"self"}],"o":{"n":"texture3d"}}],[11,"get_level","","Returns the texture level.",678,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::compressed_texture3d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",614,{"i":[{"n":"self"}],"o":{"g":["compressedtexture3d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",614,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",614,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["compressedtexture3d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",614,{"i":[{"n":"f"},{"n":"t"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedtexture3d","texturecreationerror"],"n":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",614,null],[11,"with_format","","Builds a new texture with a specific format.",614,{"i":[{"n":"f"},{"n":"t"},{"n":"compressedformat"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedtexture3d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",614,{"i":[{"n":"f"},{"n":"compressedformat"},{"n":"compressedmipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["compressedtexture3d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",614,{"i":[{"n":"f"},{"n":"compressedformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"compressedtexture3d"}}],[11,"width","","Returns the width of that image.",614,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",614,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",614,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",614,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",614,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",614,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",614,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",614,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedtexture3dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",614,{"i":[{"n":"self"}],"o":{"n":"compressedtexture3dmipmap"}}],[11,"width","","Returns the width of that image.",691,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",691,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",691,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",691,null],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",691,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_texture","","Returns the corresponding texture.",691,{"i":[{"n":"self"}],"o":{"n":"compressedtexture3d"}}],[11,"get_level","","Returns the texture level.",691,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::srgb_texture3d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",612,{"i":[{"n":"self"}],"o":{"g":["srgbtexture3d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",612,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",612,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["srgbtexture3d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",612,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["srgbtexture3d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",612,{"i":[{"n":"f"},{"n":"t"},{"n":"srgbformat"},{"n":"mipmapsoption"}],"o":{"g":["srgbtexture3d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",612,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture3d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",612,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture3d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",612,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture3d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",612,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"srgbtexture3d"}}],[11,"width","","Returns the width of that image.",612,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",612,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",612,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",612,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",612,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",612,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",612,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture3dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",612,{"i":[{"n":"self"}],"o":{"n":"srgbtexture3dmipmap"}}],[11,"width","","Returns the width of that image.",657,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",657,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",657,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",657,null],[11,"get_texture","","Returns the corresponding texture.",657,{"i":[{"n":"self"}],"o":{"n":"srgbtexture3d"}}],[11,"get_level","","Returns the texture level.",657,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::compressed_srgb_texture3d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",575,{"i":[{"n":"self"}],"o":{"g":["compressedsrgbtexture3d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",575,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",575,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["compressedsrgbtexture3d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",575,{"i":[{"n":"f"},{"n":"t"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedsrgbtexture3d","texturecreationerror"],"n":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",575,null],[11,"with_format","","Builds a new texture with a specific format.",575,{"i":[{"n":"f"},{"n":"t"},{"n":"compressedsrgbformat"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedsrgbtexture3d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",575,{"i":[{"n":"f"},{"n":"compressedsrgbformat"},{"n":"compressedmipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture3d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",575,{"i":[{"n":"f"},{"n":"compressedsrgbformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"compressedsrgbtexture3d"}}],[11,"width","","Returns the width of that image.",575,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",575,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",575,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",575,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",575,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",575,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",575,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",575,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture3dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",575,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture3dmipmap"}}],[11,"width","","Returns the width of that image.",709,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",709,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",709,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",709,null],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",709,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_texture","","Returns the corresponding texture.",709,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture3d"}}],[11,"get_level","","Returns the texture level.",709,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::integral_texture3d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",578,{"i":[{"n":"self"}],"o":{"g":["integraltexture3d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",578,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",578,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["integraltexture3d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",578,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["integraltexture3d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",578,{"i":[{"n":"f"},{"n":"t"},{"n":"uncompressedintformat"},{"n":"mipmapsoption"}],"o":{"g":["integraltexture3d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",578,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture3d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",578,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture3d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",578,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture3d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",578,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"integraltexture3d"}}],[11,"width","","Returns the width of that image.",578,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",578,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",578,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",578,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",578,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",578,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",578,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture3dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",578,{"i":[{"n":"self"}],"o":{"n":"integraltexture3dmipmap"}}],[11,"width","","Returns the width of that image.",688,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",688,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",688,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",688,null],[11,"get_texture","","Returns the corresponding texture.",688,{"i":[{"n":"self"}],"o":{"n":"integraltexture3d"}}],[11,"get_level","","Returns the texture level.",688,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::unsigned_texture3d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",628,{"i":[{"n":"self"}],"o":{"g":["unsignedtexture3d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",628,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",628,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["unsignedtexture3d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",628,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["unsignedtexture3d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",628,{"i":[{"n":"f"},{"n":"t"},{"n":"uncompresseduintformat"},{"n":"mipmapsoption"}],"o":{"g":["unsignedtexture3d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",628,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture3d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",628,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture3d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",628,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture3d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",628,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"unsignedtexture3d"}}],[11,"width","","Returns the width of that image.",628,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",628,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",628,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",628,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",628,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",628,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",628,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture3dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",628,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture3dmipmap"}}],[11,"width","","Returns the width of that image.",673,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",673,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",673,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",673,null],[11,"get_texture","","Returns the corresponding texture.",673,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture3d"}}],[11,"get_level","","Returns the texture level.",673,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::depth_texture3d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",583,{"i":[{"n":"self"}],"o":{"g":["depthtexture3d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",583,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",583,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["depthtexture3d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",583,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["depthtexture3d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",583,{"i":[{"n":"f"},{"n":"t"},{"n":"depthformat"},{"n":"mipmapsoption"}],"o":{"g":["depthtexture3d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",583,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture3d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",583,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture3d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",583,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture3d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",583,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthtexture3d"}}],[11,"width","","Returns the width of that image.",583,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",583,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",583,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",583,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",583,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",583,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",583,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture3dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",583,{"i":[{"n":"self"}],"o":{"n":"depthtexture3dmipmap"}}],[11,"width","","Returns the width of that image.",535,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",535,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",535,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",535,null],[11,"get_texture","","Returns the corresponding texture.",535,{"i":[{"n":"self"}],"o":{"n":"depthtexture3d"}}],[11,"get_level","","Returns the texture level.",535,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_internal_format","conrod::backend::glium::glium::texture::depth_stencil_texture3d","Determines the internal format of this texture.",568,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",568,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["depthstenciltexture3d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",568,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["depthstenciltexture3d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",568,{"i":[{"n":"f"},{"n":"t"},{"n":"depthstencilformat"},{"n":"mipmapsoption"}],"o":{"g":["depthstenciltexture3d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",568,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture3d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",568,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture3d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",568,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture3d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",568,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthstenciltexture3d"}}],[11,"width","","Returns the width of that image.",568,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",568,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",568,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",568,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",568,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",568,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",568,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture3dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",568,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture3dmipmap"}}],[11,"width","","Returns the width of that image.",646,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",646,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",646,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",646,null],[11,"get_texture","","Returns the corresponding texture.",646,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture3d"}}],[11,"get_level","","Returns the texture level.",646,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::texture1d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",592,{"i":[{"n":"self"}],"o":{"g":["texture1darray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",592,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",592,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["texture1darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",592,{"i":[{"n":"f"},{"n":"vec"},{"n":"mipmapsoption"}],"o":{"g":["texture1darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",592,{"i":[{"n":"f"},{"n":"vec"},{"n":"uncompressedfloatformat"},{"n":"mipmapsoption"}],"o":{"g":["texture1darray","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",592,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",592,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",592,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture1darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",592,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"texture1darray"}}],[11,"width","","Returns the width of that image.",592,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",592,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",592,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",592,{"i":[{"n":"self"}],"o":{"n":"texture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",592,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture1darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",592,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture1darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",592,{"i":[{"n":"self"}],"o":{"n":"texture1darraymipmap"}}],[11,"width","","Returns the width of that image.",803,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",803,{"i":[{"n":"self"}],"o":{"n":"texture1darray"}}],[11,"get_layer","","Returns the layer index.",803,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",803,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",803,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture1darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",803,{"i":[{"n":"self"}],"o":{"n":"texture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",748,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",748,{"i":[{"n":"self"}],"o":{"n":"texture1darray"}}],[11,"get_level","","Returns the texture level.",748,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",748,{"i":[{"n":"self"}],"o":{"n":"texture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",748,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture1darraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",670,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::compressed_texture1d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",629,{"i":[{"n":"self"}],"o":{"g":["compressedtexture1darray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",629,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",629,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["compressedtexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",629,{"i":[{"n":"f"},{"n":"vec"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedtexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",629,{"i":[{"n":"f"},{"n":"vec"},{"n":"u32"},{"n":"u32"},{"n":"compressedformat"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedtexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",629,{"i":[{"n":"f"},{"n":"vec"},{"n":"compressedformat"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedtexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",629,{"i":[{"n":"f"},{"n":"compressedformat"},{"n":"compressedmipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["compressedtexture1darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",629,{"i":[{"n":"f"},{"n":"compressedformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"compressedtexture1darray"}}],[11,"width","","Returns the width of that image.",629,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",629,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",629,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",629,{"i":[{"n":"self"}],"o":{"n":"compressedtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",629,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedtexture1darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",629,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedtexture1darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",629,{"i":[{"n":"self"}],"o":{"n":"compressedtexture1darraymipmap"}}],[11,"width","","Returns the width of that image.",782,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",782,{"i":[{"n":"self"}],"o":{"n":"compressedtexture1darray"}}],[11,"get_layer","","Returns the layer index.",782,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",782,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",782,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedtexture1darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",782,{"i":[{"n":"self"}],"o":{"n":"compressedtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",723,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",723,{"i":[{"n":"self"}],"o":{"n":"compressedtexture1darray"}}],[11,"get_level","","Returns the texture level.",723,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",723,{"i":[{"n":"self"}],"o":{"n":"compressedtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",723,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedtexture1darraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",695,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::srgb_texture1d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",624,{"i":[{"n":"self"}],"o":{"g":["srgbtexture1darray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",624,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",624,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["srgbtexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",624,{"i":[{"n":"f"},{"n":"vec"},{"n":"mipmapsoption"}],"o":{"g":["srgbtexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",624,{"i":[{"n":"f"},{"n":"vec"},{"n":"srgbformat"},{"n":"mipmapsoption"}],"o":{"g":["srgbtexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",624,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",624,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",624,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture1darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",624,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"srgbtexture1darray"}}],[11,"width","","Returns the width of that image.",624,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",624,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",624,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",624,{"i":[{"n":"self"}],"o":{"n":"srgbtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",624,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture1darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",624,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture1darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",624,{"i":[{"n":"self"}],"o":{"n":"srgbtexture1darraymipmap"}}],[11,"width","","Returns the width of that image.",800,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",800,{"i":[{"n":"self"}],"o":{"n":"srgbtexture1darray"}}],[11,"get_layer","","Returns the layer index.",800,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",800,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",800,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture1darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",800,{"i":[{"n":"self"}],"o":{"n":"srgbtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",750,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",750,{"i":[{"n":"self"}],"o":{"n":"srgbtexture1darray"}}],[11,"get_level","","Returns the texture level.",750,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",750,{"i":[{"n":"self"}],"o":{"n":"srgbtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",750,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture1darraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",684,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::compressed_srgb_texture1d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",584,{"i":[{"n":"self"}],"o":{"g":["compressedsrgbtexture1darray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",584,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",584,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["compressedsrgbtexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",584,{"i":[{"n":"f"},{"n":"vec"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedsrgbtexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",584,{"i":[{"n":"f"},{"n":"vec"},{"n":"u32"},{"n":"u32"},{"n":"compressedsrgbformat"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedsrgbtexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",584,{"i":[{"n":"f"},{"n":"vec"},{"n":"compressedsrgbformat"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedsrgbtexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",584,{"i":[{"n":"f"},{"n":"compressedsrgbformat"},{"n":"compressedmipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture1darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",584,{"i":[{"n":"f"},{"n":"compressedsrgbformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"compressedsrgbtexture1darray"}}],[11,"width","","Returns the width of that image.",584,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",584,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",584,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",584,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",584,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture1darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",584,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture1darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",584,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture1darraymipmap"}}],[11,"width","","Returns the width of that image.",801,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",801,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture1darray"}}],[11,"get_layer","","Returns the layer index.",801,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",801,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",801,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture1darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",801,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",732,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",732,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture1darray"}}],[11,"get_level","","Returns the texture level.",732,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",732,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",732,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture1darraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",693,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::integral_texture1d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",615,{"i":[{"n":"self"}],"o":{"g":["integraltexture1darray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",615,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",615,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["integraltexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",615,{"i":[{"n":"f"},{"n":"vec"},{"n":"mipmapsoption"}],"o":{"g":["integraltexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",615,{"i":[{"n":"f"},{"n":"vec"},{"n":"uncompressedintformat"},{"n":"mipmapsoption"}],"o":{"g":["integraltexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",615,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",615,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",615,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture1darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",615,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"integraltexture1darray"}}],[11,"width","","Returns the width of that image.",615,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",615,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",615,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",615,{"i":[{"n":"self"}],"o":{"n":"integraltexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",615,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture1darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",615,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture1darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",615,{"i":[{"n":"self"}],"o":{"n":"integraltexture1darraymipmap"}}],[11,"width","","Returns the width of that image.",797,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",797,{"i":[{"n":"self"}],"o":{"n":"integraltexture1darray"}}],[11,"get_layer","","Returns the layer index.",797,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",797,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",797,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture1darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",797,{"i":[{"n":"self"}],"o":{"n":"integraltexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",729,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",729,{"i":[{"n":"self"}],"o":{"n":"integraltexture1darray"}}],[11,"get_level","","Returns the texture level.",729,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",729,{"i":[{"n":"self"}],"o":{"n":"integraltexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",729,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture1darraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",689,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::unsigned_texture1d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",593,{"i":[{"n":"self"}],"o":{"g":["unsignedtexture1darray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",593,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",593,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["unsignedtexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",593,{"i":[{"n":"f"},{"n":"vec"},{"n":"mipmapsoption"}],"o":{"g":["unsignedtexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",593,{"i":[{"n":"f"},{"n":"vec"},{"n":"uncompresseduintformat"},{"n":"mipmapsoption"}],"o":{"g":["unsignedtexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",593,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",593,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",593,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture1darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",593,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"unsignedtexture1darray"}}],[11,"width","","Returns the width of that image.",593,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",593,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",593,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",593,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",593,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture1darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",593,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture1darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",593,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture1darraymipmap"}}],[11,"width","","Returns the width of that image.",796,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",796,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture1darray"}}],[11,"get_layer","","Returns the layer index.",796,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",796,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",796,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture1darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",796,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",749,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",749,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture1darray"}}],[11,"get_level","","Returns the texture level.",749,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",749,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",749,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture1darraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",654,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::depth_texture1d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",625,{"i":[{"n":"self"}],"o":{"g":["depthtexture1darray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",625,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",625,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["depthtexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",625,{"i":[{"n":"f"},{"n":"vec"},{"n":"mipmapsoption"}],"o":{"g":["depthtexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",625,{"i":[{"n":"f"},{"n":"vec"},{"n":"depthformat"},{"n":"mipmapsoption"}],"o":{"g":["depthtexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",625,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",625,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",625,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture1darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",625,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthtexture1darray"}}],[11,"width","","Returns the width of that image.",625,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",625,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",625,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",625,{"i":[{"n":"self"}],"o":{"n":"depthtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",625,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture1darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",625,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture1darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",625,{"i":[{"n":"self"}],"o":{"n":"depthtexture1darraymipmap"}}],[11,"width","","Returns the width of that image.",806,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",806,{"i":[{"n":"self"}],"o":{"n":"depthtexture1darray"}}],[11,"get_layer","","Returns the layer index.",806,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",806,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",806,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture1darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",806,{"i":[{"n":"self"}],"o":{"n":"depthtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",718,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",718,{"i":[{"n":"self"}],"o":{"n":"depthtexture1darray"}}],[11,"get_level","","Returns the texture level.",718,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",718,{"i":[{"n":"self"}],"o":{"n":"depthtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",718,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture1darraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",536,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_internal_format","conrod::backend::glium::glium::texture::stencil_texture1d_array","Determines the internal format of this texture.",608,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",608,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["stenciltexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",608,{"i":[{"n":"f"},{"n":"vec"},{"n":"mipmapsoption"}],"o":{"g":["stenciltexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",608,{"i":[{"n":"f"},{"n":"vec"},{"n":"stencilformat"},{"n":"mipmapsoption"}],"o":{"g":["stenciltexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",608,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",608,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",608,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture1darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",608,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"stenciltexture1darray"}}],[11,"width","","Returns the width of that image.",608,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",608,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",608,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",608,{"i":[{"n":"self"}],"o":{"n":"stenciltexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",608,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture1darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",608,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture1darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",608,{"i":[{"n":"self"}],"o":{"n":"stenciltexture1darraymipmap"}}],[11,"width","","Returns the width of that image.",805,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",805,{"i":[{"n":"self"}],"o":{"n":"stenciltexture1darray"}}],[11,"get_layer","","Returns the layer index.",805,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",805,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",805,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture1darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",805,{"i":[{"n":"self"}],"o":{"n":"stenciltexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",724,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",724,{"i":[{"n":"self"}],"o":{"n":"stenciltexture1darray"}}],[11,"get_level","","Returns the texture level.",724,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",724,{"i":[{"n":"self"}],"o":{"n":"stenciltexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",724,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture1darraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",697,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_internal_format","conrod::backend::glium::glium::texture::depth_stencil_texture1d_array","Determines the internal format of this texture.",576,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",576,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["depthstenciltexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",576,{"i":[{"n":"f"},{"n":"vec"},{"n":"mipmapsoption"}],"o":{"g":["depthstenciltexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",576,{"i":[{"n":"f"},{"n":"vec"},{"n":"depthstencilformat"},{"n":"mipmapsoption"}],"o":{"g":["depthstenciltexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",576,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",576,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",576,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture1darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",576,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthstenciltexture1darray"}}],[11,"width","","Returns the width of that image.",576,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",576,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",576,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",576,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",576,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture1darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",576,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture1darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",576,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture1darraymipmap"}}],[11,"width","","Returns the width of that image.",808,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",808,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture1darray"}}],[11,"get_layer","","Returns the layer index.",808,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",808,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",808,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture1darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",808,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",727,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",727,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture1darray"}}],[11,"get_level","","Returns the texture level.",727,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",727,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",727,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture1darraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",641,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::texture2d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",586,{"i":[{"n":"self"}],"o":{"g":["texture2darray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",586,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",586,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["texture2darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",586,{"i":[{"n":"f"},{"n":"vec"},{"n":"mipmapsoption"}],"o":{"g":["texture2darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",586,{"i":[{"n":"f"},{"n":"vec"},{"n":"uncompressedfloatformat"},{"n":"mipmapsoption"}],"o":{"g":["texture2darray","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",586,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",586,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",586,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture2darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",586,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"texture2darray"}}],[11,"width","","Returns the width of that image.",586,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",586,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",586,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",586,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",586,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",586,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",586,{"i":[{"n":"self"}],"o":{"n":"texture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",586,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture2darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",586,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture2darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",586,{"i":[{"n":"self"}],"o":{"n":"texture2darraymipmap"}}],[11,"width","","Returns the width of that image.",799,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",799,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",799,null],[11,"get_texture","","Returns the corresponding texture.",799,{"i":[{"n":"self"}],"o":{"n":"texture2darray"}}],[11,"get_layer","","Returns the layer index.",799,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",799,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",799,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture2darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",799,{"i":[{"n":"self"}],"o":{"n":"texture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",767,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",767,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",767,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",767,null],[11,"get_texture","","Returns the corresponding texture.",767,{"i":[{"n":"self"}],"o":{"n":"texture2darray"}}],[11,"get_level","","Returns the texture level.",767,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",767,{"i":[{"n":"self"}],"o":{"n":"texture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",767,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture2darraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",665,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",665,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",665,null],[11,"sampled","conrod::backend::glium::glium::texture::compressed_texture2d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",591,{"i":[{"n":"self"}],"o":{"g":["compressedtexture2darray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",591,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",591,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["compressedtexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",591,{"i":[{"n":"f"},{"n":"vec"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedtexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",591,{"i":[{"n":"f"},{"n":"vec"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"compressedformat"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedtexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",591,{"i":[{"n":"f"},{"n":"vec"},{"n":"compressedformat"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedtexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",591,{"i":[{"n":"f"},{"n":"compressedformat"},{"n":"compressedmipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["compressedtexture2darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",591,{"i":[{"n":"f"},{"n":"compressedformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"compressedtexture2darray"}}],[11,"width","","Returns the width of that image.",591,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",591,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",591,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",591,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",591,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",591,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",591,{"i":[{"n":"self"}],"o":{"n":"compressedtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",591,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedtexture2darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",591,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedtexture2darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",591,{"i":[{"n":"self"}],"o":{"n":"compressedtexture2darraymipmap"}}],[11,"width","","Returns the width of that image.",789,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",789,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",789,null],[11,"get_texture","","Returns the corresponding texture.",789,{"i":[{"n":"self"}],"o":{"n":"compressedtexture2darray"}}],[11,"get_layer","","Returns the layer index.",789,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",789,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",789,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedtexture2darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",789,{"i":[{"n":"self"}],"o":{"n":"compressedtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",751,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",751,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",751,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",751,null],[11,"get_texture","","Returns the corresponding texture.",751,{"i":[{"n":"self"}],"o":{"n":"compressedtexture2darray"}}],[11,"get_level","","Returns the texture level.",751,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",751,{"i":[{"n":"self"}],"o":{"n":"compressedtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",751,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedtexture2darraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",708,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",708,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",708,null],[11,"sampled","conrod::backend::glium::glium::texture::srgb_texture2d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",574,{"i":[{"n":"self"}],"o":{"g":["srgbtexture2darray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",574,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",574,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["srgbtexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",574,{"i":[{"n":"f"},{"n":"vec"},{"n":"mipmapsoption"}],"o":{"g":["srgbtexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",574,{"i":[{"n":"f"},{"n":"vec"},{"n":"srgbformat"},{"n":"mipmapsoption"}],"o":{"g":["srgbtexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",574,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",574,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",574,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture2darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",574,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"srgbtexture2darray"}}],[11,"width","","Returns the width of that image.",574,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",574,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",574,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",574,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",574,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",574,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",574,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",574,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture2darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",574,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture2darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",574,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2darraymipmap"}}],[11,"width","","Returns the width of that image.",776,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",776,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",776,null],[11,"get_texture","","Returns the corresponding texture.",776,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2darray"}}],[11,"get_layer","","Returns the layer index.",776,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",776,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",776,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture2darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",776,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",742,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",742,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",742,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",742,null],[11,"get_texture","","Returns the corresponding texture.",742,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2darray"}}],[11,"get_level","","Returns the texture level.",742,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",742,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",742,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture2darraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",676,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",676,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",676,null],[11,"sampled","conrod::backend::glium::glium::texture::compressed_srgb_texture2d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",594,{"i":[{"n":"self"}],"o":{"g":["compressedsrgbtexture2darray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",594,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",594,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["compressedsrgbtexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",594,{"i":[{"n":"f"},{"n":"vec"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedsrgbtexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",594,{"i":[{"n":"f"},{"n":"vec"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"compressedsrgbformat"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedsrgbtexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",594,{"i":[{"n":"f"},{"n":"vec"},{"n":"compressedsrgbformat"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedsrgbtexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",594,{"i":[{"n":"f"},{"n":"compressedsrgbformat"},{"n":"compressedmipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture2darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",594,{"i":[{"n":"f"},{"n":"compressedsrgbformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"compressedsrgbtexture2darray"}}],[11,"width","","Returns the width of that image.",594,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",594,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",594,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",594,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",594,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",594,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",594,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",594,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture2darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",594,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture2darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",594,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture2darraymipmap"}}],[11,"width","","Returns the width of that image.",814,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",814,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",814,null],[11,"get_texture","","Returns the corresponding texture.",814,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture2darray"}}],[11,"get_layer","","Returns the layer index.",814,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",814,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",814,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture2darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",814,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",739,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",739,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",739,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",739,null],[11,"get_texture","","Returns the corresponding texture.",739,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture2darray"}}],[11,"get_level","","Returns the texture level.",739,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",739,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",739,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture2darraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",701,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",701,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",701,null],[11,"sampled","conrod::backend::glium::glium::texture::integral_texture2d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",609,{"i":[{"n":"self"}],"o":{"g":["integraltexture2darray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",609,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",609,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["integraltexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",609,{"i":[{"n":"f"},{"n":"vec"},{"n":"mipmapsoption"}],"o":{"g":["integraltexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",609,{"i":[{"n":"f"},{"n":"vec"},{"n":"uncompressedintformat"},{"n":"mipmapsoption"}],"o":{"g":["integraltexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",609,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",609,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",609,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture2darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",609,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"integraltexture2darray"}}],[11,"width","","Returns the width of that image.",609,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",609,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",609,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",609,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",609,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",609,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",609,{"i":[{"n":"self"}],"o":{"n":"integraltexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",609,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture2darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",609,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture2darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",609,{"i":[{"n":"self"}],"o":{"n":"integraltexture2darraymipmap"}}],[11,"width","","Returns the width of that image.",777,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",777,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",777,null],[11,"get_texture","","Returns the corresponding texture.",777,{"i":[{"n":"self"}],"o":{"n":"integraltexture2darray"}}],[11,"get_layer","","Returns the layer index.",777,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",777,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",777,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture2darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",777,{"i":[{"n":"self"}],"o":{"n":"integraltexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",735,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",735,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",735,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",735,null],[11,"get_texture","","Returns the corresponding texture.",735,{"i":[{"n":"self"}],"o":{"n":"integraltexture2darray"}}],[11,"get_level","","Returns the texture level.",735,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",735,{"i":[{"n":"self"}],"o":{"n":"integraltexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",735,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture2darraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",656,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",656,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",656,null],[11,"sampled","conrod::backend::glium::glium::texture::unsigned_texture2d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",589,{"i":[{"n":"self"}],"o":{"g":["unsignedtexture2darray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",589,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",589,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["unsignedtexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",589,{"i":[{"n":"f"},{"n":"vec"},{"n":"mipmapsoption"}],"o":{"g":["unsignedtexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",589,{"i":[{"n":"f"},{"n":"vec"},{"n":"uncompresseduintformat"},{"n":"mipmapsoption"}],"o":{"g":["unsignedtexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",589,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",589,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",589,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture2darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",589,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"unsignedtexture2darray"}}],[11,"width","","Returns the width of that image.",589,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",589,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",589,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",589,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",589,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",589,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",589,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",589,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture2darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",589,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture2darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",589,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2darraymipmap"}}],[11,"width","","Returns the width of that image.",794,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",794,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",794,null],[11,"get_texture","","Returns the corresponding texture.",794,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2darray"}}],[11,"get_layer","","Returns the layer index.",794,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",794,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",794,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture2darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",794,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",765,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",765,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",765,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",765,null],[11,"get_texture","","Returns the corresponding texture.",765,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2darray"}}],[11,"get_level","","Returns the texture level.",765,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",765,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",765,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture2darraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",679,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",679,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",679,null],[11,"sampled","conrod::backend::glium::glium::texture::depth_texture2d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",617,{"i":[{"n":"self"}],"o":{"g":["depthtexture2darray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",617,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",617,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["depthtexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",617,{"i":[{"n":"f"},{"n":"vec"},{"n":"mipmapsoption"}],"o":{"g":["depthtexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",617,{"i":[{"n":"f"},{"n":"vec"},{"n":"depthformat"},{"n":"mipmapsoption"}],"o":{"g":["depthtexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",617,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",617,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",617,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture2darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",617,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthtexture2darray"}}],[11,"width","","Returns the width of that image.",617,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",617,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",617,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",617,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",617,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",617,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",617,{"i":[{"n":"self"}],"o":{"n":"depthtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",617,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture2darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",617,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture2darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",617,{"i":[{"n":"self"}],"o":{"n":"depthtexture2darraymipmap"}}],[11,"width","","Returns the width of that image.",818,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",818,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",818,null],[11,"get_texture","","Returns the corresponding texture.",818,{"i":[{"n":"self"}],"o":{"n":"depthtexture2darray"}}],[11,"get_layer","","Returns the layer index.",818,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",818,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",818,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture2darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",818,{"i":[{"n":"self"}],"o":{"n":"depthtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",737,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",737,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",737,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",737,null],[11,"get_texture","","Returns the corresponding texture.",737,{"i":[{"n":"self"}],"o":{"n":"depthtexture2darray"}}],[11,"get_level","","Returns the texture level.",737,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",737,{"i":[{"n":"self"}],"o":{"n":"depthtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",737,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture2darraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",538,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",538,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",538,null],[11,"get_internal_format","conrod::backend::glium::glium::texture::stencil_texture2d_array","Determines the internal format of this texture.",638,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",638,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["stenciltexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",638,{"i":[{"n":"f"},{"n":"vec"},{"n":"mipmapsoption"}],"o":{"g":["stenciltexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",638,{"i":[{"n":"f"},{"n":"vec"},{"n":"stencilformat"},{"n":"mipmapsoption"}],"o":{"g":["stenciltexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",638,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",638,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",638,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture2darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",638,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"stenciltexture2darray"}}],[11,"width","","Returns the width of that image.",638,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",638,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",638,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",638,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",638,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",638,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",638,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",638,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture2darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",638,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture2darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",638,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2darraymipmap"}}],[11,"width","","Returns the width of that image.",798,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",798,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",798,null],[11,"get_texture","","Returns the corresponding texture.",798,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2darray"}}],[11,"get_layer","","Returns the layer index.",798,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",798,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",798,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture2darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",798,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",758,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",758,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",758,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",758,null],[11,"get_texture","","Returns the corresponding texture.",758,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2darray"}}],[11,"get_level","","Returns the texture level.",758,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",758,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",758,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture2darraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",705,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",705,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",705,null],[11,"get_internal_format","conrod::backend::glium::glium::texture::depth_stencil_texture2d_array","Determines the internal format of this texture.",606,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",606,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["depthstenciltexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",606,{"i":[{"n":"f"},{"n":"vec"},{"n":"mipmapsoption"}],"o":{"g":["depthstenciltexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",606,{"i":[{"n":"f"},{"n":"vec"},{"n":"depthstencilformat"},{"n":"mipmapsoption"}],"o":{"g":["depthstenciltexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",606,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",606,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",606,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture2darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",606,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthstenciltexture2darray"}}],[11,"width","","Returns the width of that image.",606,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",606,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",606,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",606,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",606,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",606,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",606,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",606,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture2darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",606,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture2darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",606,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2darraymipmap"}}],[11,"width","","Returns the width of that image.",812,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",812,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",812,null],[11,"get_texture","","Returns the corresponding texture.",812,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2darray"}}],[11,"get_layer","","Returns the layer index.",812,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",812,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",812,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture2darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",812,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",740,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",740,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",740,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",740,null],[11,"get_texture","","Returns the corresponding texture.",740,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2darray"}}],[11,"get_level","","Returns the texture level.",740,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",740,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",740,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture2darraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",645,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",645,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",645,null],[11,"sampled","conrod::backend::glium::glium::texture::texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",550,{"i":[{"n":"self"}],"o":{"g":["texture2dmultisamplearray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",550,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",550,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",550,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",550,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",550,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"texture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",550,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",550,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",550,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",550,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",550,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",550,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",550,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",550,{"i":[{"n":"self"}],"o":{"n":"texture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",550,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture2dmultisamplearraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",550,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture2dmultisamplearraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",550,{"i":[{"n":"self"}],"o":{"n":"texture2dmultisamplearraymipmap"}}],[11,"width","","Returns the width of that image.",772,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",772,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",772,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",772,null],[11,"get_texture","","Returns the corresponding texture.",772,{"i":[{"n":"self"}],"o":{"n":"texture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",772,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",772,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",772,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture2dmultisamplearraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",772,{"i":[{"n":"self"}],"o":{"n":"texture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",747,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",747,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",747,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",747,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",747,null],[11,"get_texture","","Returns the corresponding texture.",747,{"i":[{"n":"self"}],"o":{"n":"texture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",747,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",747,{"i":[{"n":"self"}],"o":{"n":"texture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",747,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture2dmultisamplearraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",660,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",660,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",660,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",660,null],[11,"sampled","conrod::backend::glium::glium::texture::srgb_texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",601,{"i":[{"n":"self"}],"o":{"g":["srgbtexture2dmultisamplearray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",601,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",601,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",601,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",601,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",601,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"srgbtexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",601,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",601,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",601,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",601,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",601,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",601,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",601,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",601,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",601,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture2dmultisamplearraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",601,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture2dmultisamplearraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",601,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2dmultisamplearraymipmap"}}],[11,"width","","Returns the width of that image.",788,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",788,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",788,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",788,null],[11,"get_texture","","Returns the corresponding texture.",788,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",788,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",788,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",788,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture2dmultisamplearraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",788,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",734,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",734,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",734,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",734,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",734,null],[11,"get_texture","","Returns the corresponding texture.",734,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",734,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",734,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",734,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture2dmultisamplearraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",668,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",668,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",668,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",668,null],[11,"sampled","conrod::backend::glium::glium::texture::integral_texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",569,{"i":[{"n":"self"}],"o":{"g":["integraltexture2dmultisamplearray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",569,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",569,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",569,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",569,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",569,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"integraltexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",569,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",569,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",569,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",569,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",569,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",569,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",569,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",569,{"i":[{"n":"self"}],"o":{"n":"integraltexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",569,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture2dmultisamplearraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",569,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture2dmultisamplearraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",569,{"i":[{"n":"self"}],"o":{"n":"integraltexture2dmultisamplearraymipmap"}}],[11,"width","","Returns the width of that image.",815,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",815,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",815,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",815,null],[11,"get_texture","","Returns the corresponding texture.",815,{"i":[{"n":"self"}],"o":{"n":"integraltexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",815,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",815,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",815,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture2dmultisamplearraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",815,{"i":[{"n":"self"}],"o":{"n":"integraltexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",731,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",731,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",731,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",731,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",731,null],[11,"get_texture","","Returns the corresponding texture.",731,{"i":[{"n":"self"}],"o":{"n":"integraltexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",731,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",731,{"i":[{"n":"self"}],"o":{"n":"integraltexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",731,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture2dmultisamplearraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",686,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",686,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",686,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",686,null],[11,"sampled","conrod::backend::glium::glium::texture::unsigned_texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",548,{"i":[{"n":"self"}],"o":{"g":["unsignedtexture2dmultisamplearray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",548,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",548,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",548,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",548,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",548,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"unsignedtexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",548,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",548,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",548,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",548,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",548,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",548,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",548,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",548,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",548,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture2dmultisamplearraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",548,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture2dmultisamplearraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",548,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2dmultisamplearraymipmap"}}],[11,"width","","Returns the width of that image.",792,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",792,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",792,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",792,null],[11,"get_texture","","Returns the corresponding texture.",792,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",792,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",792,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",792,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture2dmultisamplearraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",792,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",721,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",721,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",721,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",721,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",721,null],[11,"get_texture","","Returns the corresponding texture.",721,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",721,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",721,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",721,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture2dmultisamplearraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",672,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",672,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",672,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",672,null],[11,"sampled","conrod::backend::glium::glium::texture::depth_texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",555,{"i":[{"n":"self"}],"o":{"g":["depthtexture2dmultisamplearray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",555,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",555,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",555,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",555,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",555,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthtexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",555,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",555,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",555,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",555,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",555,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",555,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",555,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",555,{"i":[{"n":"self"}],"o":{"n":"depthtexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",555,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture2dmultisamplearraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",555,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture2dmultisamplearraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",555,{"i":[{"n":"self"}],"o":{"n":"depthtexture2dmultisamplearraymipmap"}}],[11,"width","","Returns the width of that image.",773,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",773,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",773,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",773,null],[11,"get_texture","","Returns the corresponding texture.",773,{"i":[{"n":"self"}],"o":{"n":"depthtexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",773,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",773,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",773,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture2dmultisamplearraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",773,{"i":[{"n":"self"}],"o":{"n":"depthtexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",726,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",726,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",726,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",726,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",726,null],[11,"get_texture","","Returns the corresponding texture.",726,{"i":[{"n":"self"}],"o":{"n":"depthtexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",726,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",726,{"i":[{"n":"self"}],"o":{"n":"depthtexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",726,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture2dmultisamplearraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",539,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",539,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",539,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",539,null],[11,"get_internal_format","conrod::backend::glium::glium::texture::stencil_texture2d_multisample_array","Determines the internal format of this texture.",571,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",571,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",571,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",571,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",571,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"stenciltexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",571,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",571,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",571,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",571,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",571,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",571,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",571,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",571,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",571,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture2dmultisamplearraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",571,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture2dmultisamplearraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",571,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2dmultisamplearraymipmap"}}],[11,"width","","Returns the width of that image.",807,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",807,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",807,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",807,null],[11,"get_texture","","Returns the corresponding texture.",807,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",807,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",807,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",807,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture2dmultisamplearraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",807,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",753,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",753,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",753,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",753,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",753,null],[11,"get_texture","","Returns the corresponding texture.",753,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",753,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",753,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",753,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture2dmultisamplearraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",698,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",698,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",698,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",698,null],[11,"get_internal_format","conrod::backend::glium::glium::texture::depth_stencil_texture2d_multisample_array","Determines the internal format of this texture.",585,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",585,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",585,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",585,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",585,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthstenciltexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",585,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",585,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",585,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",585,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",585,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",585,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",585,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",585,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",585,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture2dmultisamplearraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",585,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture2dmultisamplearraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",585,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2dmultisamplearraymipmap"}}],[11,"width","","Returns the width of that image.",775,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",775,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",775,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",775,null],[11,"get_texture","","Returns the corresponding texture.",775,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",775,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",775,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",775,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture2dmultisamplearraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",775,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",757,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",757,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",757,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",757,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",757,null],[11,"get_texture","","Returns the corresponding texture.",757,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",757,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",757,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",757,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture2dmultisamplearraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",648,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",648,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",648,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",648,null],[11,"sampled","conrod::backend::glium::glium::texture::cubemap","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",604,{"i":[{"n":"self"}],"o":{"g":["cubemap"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",604,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",604,{"i":[{"n":"f"},{"n":"u32"}],"o":{"g":["cubemap","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",604,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["cubemap","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",604,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["cubemap","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",604,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"cubemap"}}],[11,"width","","Returns the width of that image.",604,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",604,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",604,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",604,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",604,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",604,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["cubemapmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",604,{"i":[{"n":"self"}],"o":{"n":"cubemapmipmap"}}],[11,"width","","Returns the width of that image.",722,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",722,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",722,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",722,{"i":[{"n":"self"}],"o":{"n":"cubemap"}}],[11,"get_level","","Returns the texture level.",722,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",722,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"cubemapimage"}}],[11,"width","","Returns the width of that image.",663,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",663,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",663,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::compressed_cubemap","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",560,{"i":[{"n":"self"}],"o":{"g":["compressedcubemap"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",560,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",560,{"i":[{"n":"f"},{"n":"compressedformat"},{"n":"compressedmipmapsoption"},{"n":"u32"}],"o":{"g":["compressedcubemap","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",560,{"i":[{"n":"f"},{"n":"compressedformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"compressedcubemap"}}],[11,"width","","Returns the width of that image.",560,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",560,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",560,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",560,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",560,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",560,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",560,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedcubemapmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",560,{"i":[{"n":"self"}],"o":{"n":"compressedcubemapmipmap"}}],[11,"width","","Returns the width of that image.",766,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",766,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",766,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",766,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_texture","","Returns the corresponding texture.",766,{"i":[{"n":"self"}],"o":{"n":"compressedcubemap"}}],[11,"get_level","","Returns the texture level.",766,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",766,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"compressedcubemapimage"}}],[11,"width","","Returns the width of that image.",702,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",702,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",702,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::srgb_cubemap","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",587,{"i":[{"n":"self"}],"o":{"g":["srgbcubemap"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",587,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",587,{"i":[{"n":"f"},{"n":"u32"}],"o":{"g":["srgbcubemap","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",587,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["srgbcubemap","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",587,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["srgbcubemap","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",587,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"srgbcubemap"}}],[11,"width","","Returns the width of that image.",587,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",587,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",587,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",587,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",587,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",587,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbcubemapmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",587,{"i":[{"n":"self"}],"o":{"n":"srgbcubemapmipmap"}}],[11,"width","","Returns the width of that image.",716,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",716,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",716,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",716,{"i":[{"n":"self"}],"o":{"n":"srgbcubemap"}}],[11,"get_level","","Returns the texture level.",716,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",716,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"srgbcubemapimage"}}],[11,"width","","Returns the width of that image.",685,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",685,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",685,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::compressed_srgb_cubemap","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",596,{"i":[{"n":"self"}],"o":{"g":["compressedsrgbcubemap"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",596,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",596,{"i":[{"n":"f"},{"n":"compressedsrgbformat"},{"n":"compressedmipmapsoption"},{"n":"u32"}],"o":{"g":["compressedsrgbcubemap","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",596,{"i":[{"n":"f"},{"n":"compressedsrgbformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"compressedsrgbcubemap"}}],[11,"width","","Returns the width of that image.",596,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",596,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",596,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",596,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",596,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",596,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",596,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbcubemapmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",596,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbcubemapmipmap"}}],[11,"width","","Returns the width of that image.",745,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",745,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",745,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",745,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_texture","","Returns the corresponding texture.",745,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbcubemap"}}],[11,"get_level","","Returns the texture level.",745,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",745,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"compressedsrgbcubemapimage"}}],[11,"width","","Returns the width of that image.",703,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",703,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",703,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::integral_cubemap","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",627,{"i":[{"n":"self"}],"o":{"g":["integralcubemap"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",627,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",627,{"i":[{"n":"f"},{"n":"u32"}],"o":{"g":["integralcubemap","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",627,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["integralcubemap","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",627,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["integralcubemap","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",627,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"integralcubemap"}}],[11,"width","","Returns the width of that image.",627,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",627,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",627,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",627,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",627,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",627,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integralcubemapmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",627,{"i":[{"n":"self"}],"o":{"n":"integralcubemapmipmap"}}],[11,"width","","Returns the width of that image.",756,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",756,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",756,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",756,{"i":[{"n":"self"}],"o":{"n":"integralcubemap"}}],[11,"get_level","","Returns the texture level.",756,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",756,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"integralcubemapimage"}}],[11,"width","","Returns the width of that image.",655,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",655,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",655,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::unsigned_cubemap","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",635,{"i":[{"n":"self"}],"o":{"g":["unsignedcubemap"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",635,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",635,{"i":[{"n":"f"},{"n":"u32"}],"o":{"g":["unsignedcubemap","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",635,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["unsignedcubemap","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",635,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["unsignedcubemap","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",635,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"unsignedcubemap"}}],[11,"width","","Returns the width of that image.",635,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",635,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",635,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",635,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",635,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",635,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedcubemapmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",635,{"i":[{"n":"self"}],"o":{"n":"unsignedcubemapmipmap"}}],[11,"width","","Returns the width of that image.",720,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",720,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",720,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",720,{"i":[{"n":"self"}],"o":{"n":"unsignedcubemap"}}],[11,"get_level","","Returns the texture level.",720,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",720,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"unsignedcubemapimage"}}],[11,"width","","Returns the width of that image.",680,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",680,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",680,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::depth_cubemap","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",572,{"i":[{"n":"self"}],"o":{"g":["depthcubemap"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",572,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",572,{"i":[{"n":"f"},{"n":"u32"}],"o":{"g":["depthcubemap","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",572,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["depthcubemap","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",572,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["depthcubemap","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",572,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthcubemap"}}],[11,"width","","Returns the width of that image.",572,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",572,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",572,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",572,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",572,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",572,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthcubemapmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",572,{"i":[{"n":"self"}],"o":{"n":"depthcubemapmipmap"}}],[11,"width","","Returns the width of that image.",744,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",744,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",744,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",744,{"i":[{"n":"self"}],"o":{"n":"depthcubemap"}}],[11,"get_level","","Returns the texture level.",744,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",744,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"depthcubemapimage"}}],[11,"width","","Returns the width of that image.",537,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",537,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",537,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_internal_format","conrod::backend::glium::glium::texture::stencil_cubemap","Determines the internal format of this texture.",565,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",565,{"i":[{"n":"f"},{"n":"u32"}],"o":{"g":["stencilcubemap","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",565,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["stencilcubemap","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",565,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["stencilcubemap","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",565,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"stencilcubemap"}}],[11,"width","","Returns the width of that image.",565,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",565,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",565,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",565,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",565,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",565,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stencilcubemapmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",565,{"i":[{"n":"self"}],"o":{"n":"stencilcubemapmipmap"}}],[11,"width","","Returns the width of that image.",746,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",746,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",746,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",746,{"i":[{"n":"self"}],"o":{"n":"stencilcubemap"}}],[11,"get_level","","Returns the texture level.",746,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",746,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"stencilcubemapimage"}}],[11,"width","","Returns the width of that image.",700,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",700,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",700,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_internal_format","conrod::backend::glium::glium::texture::depth_stencil_cubemap","Determines the internal format of this texture.",564,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",564,{"i":[{"n":"f"},{"n":"u32"}],"o":{"g":["depthstencilcubemap","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",564,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["depthstencilcubemap","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",564,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["depthstencilcubemap","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",564,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthstencilcubemap"}}],[11,"width","","Returns the width of that image.",564,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",564,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",564,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",564,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",564,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",564,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstencilcubemapmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",564,{"i":[{"n":"self"}],"o":{"n":"depthstencilcubemapmipmap"}}],[11,"width","","Returns the width of that image.",725,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",725,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",725,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",725,{"i":[{"n":"self"}],"o":{"n":"depthstencilcubemap"}}],[11,"get_level","","Returns the texture level.",725,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",725,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"depthstencilcubemapimage"}}],[11,"width","","Returns the width of that image.",642,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",642,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",642,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::cubemap_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",577,{"i":[{"n":"self"}],"o":{"g":["cubemaparray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",577,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",577,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["cubemaparray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",577,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["cubemaparray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",577,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["cubemaparray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",577,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"cubemaparray"}}],[11,"width","","Returns the width of that image.",577,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",577,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",577,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",577,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",577,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",577,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",577,{"i":[{"n":"self"}],"o":{"n":"cubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",577,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["cubemaparraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",577,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["cubemaparraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",577,{"i":[{"n":"self"}],"o":{"n":"cubemaparraymipmap"}}],[11,"width","","Returns the width of that image.",778,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",778,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",778,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",778,{"i":[{"n":"self"}],"o":{"n":"cubemaparray"}}],[11,"get_layer","","Returns the layer index.",778,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",778,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",778,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["cubemaparraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",778,{"i":[{"n":"self"}],"o":{"n":"cubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",763,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",763,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",763,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",763,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",763,{"i":[{"n":"self"}],"o":{"n":"cubemaparray"}}],[11,"get_level","","Returns the texture level.",763,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",763,{"i":[{"n":"self"}],"o":{"n":"cubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",763,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["cubemaparraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",774,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",774,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",774,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",774,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"cubemaparrayimage"}}],[11,"width","","Returns the width of that image.",659,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",659,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",659,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::compressed_cubemap_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",620,{"i":[{"n":"self"}],"o":{"g":["compressedcubemaparray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",620,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",620,{"i":[{"n":"f"},{"n":"compressedformat"},{"n":"compressedmipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["compressedcubemaparray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",620,{"i":[{"n":"f"},{"n":"compressedformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"compressedcubemaparray"}}],[11,"width","","Returns the width of that image.",620,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",620,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",620,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",620,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",620,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",620,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",620,{"i":[{"n":"self"}],"o":{"n":"compressedcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",620,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedcubemaparraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",620,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedcubemaparraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",620,{"i":[{"n":"self"}],"o":{"n":"compressedcubemaparraymipmap"}}],[11,"width","","Returns the width of that image.",790,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",790,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",790,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",790,{"i":[{"n":"self"}],"o":{"n":"compressedcubemaparray"}}],[11,"get_layer","","Returns the layer index.",790,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",790,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",790,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedcubemaparraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",790,{"i":[{"n":"self"}],"o":{"n":"compressedcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",764,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",764,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",764,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",764,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",764,{"i":[{"n":"self"}],"o":{"n":"compressedcubemaparray"}}],[11,"get_level","","Returns the texture level.",764,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",764,{"i":[{"n":"self"}],"o":{"n":"compressedcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",764,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedcubemaparraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",780,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",780,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",780,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",780,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"compressedcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",707,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",707,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",707,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::srgb_cubemap_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",631,{"i":[{"n":"self"}],"o":{"g":["srgbcubemaparray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",631,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",631,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbcubemaparray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",631,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbcubemaparray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",631,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbcubemaparray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",631,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"srgbcubemaparray"}}],[11,"width","","Returns the width of that image.",631,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",631,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",631,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",631,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",631,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",631,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",631,{"i":[{"n":"self"}],"o":{"n":"srgbcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",631,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbcubemaparraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",631,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbcubemaparraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",631,{"i":[{"n":"self"}],"o":{"n":"srgbcubemaparraymipmap"}}],[11,"width","","Returns the width of that image.",813,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",813,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",813,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",813,{"i":[{"n":"self"}],"o":{"n":"srgbcubemaparray"}}],[11,"get_layer","","Returns the layer index.",813,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",813,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",813,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbcubemaparraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",813,{"i":[{"n":"self"}],"o":{"n":"srgbcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",719,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",719,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",719,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",719,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",719,{"i":[{"n":"self"}],"o":{"n":"srgbcubemaparray"}}],[11,"get_level","","Returns the texture level.",719,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",719,{"i":[{"n":"self"}],"o":{"n":"srgbcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",719,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbcubemaparraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",787,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",787,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",787,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",787,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"srgbcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",681,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",681,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",681,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::compressed_srgb_cubemap_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",603,{"i":[{"n":"self"}],"o":{"g":["compressedsrgbcubemaparray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",603,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",603,{"i":[{"n":"f"},{"n":"compressedsrgbformat"},{"n":"compressedmipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["compressedsrgbcubemaparray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",603,{"i":[{"n":"f"},{"n":"compressedsrgbformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"compressedsrgbcubemaparray"}}],[11,"width","","Returns the width of that image.",603,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",603,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",603,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",603,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",603,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",603,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",603,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",603,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbcubemaparraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",603,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbcubemaparraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",603,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbcubemaparraymipmap"}}],[11,"width","","Returns the width of that image.",786,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",786,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",786,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",786,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbcubemaparray"}}],[11,"get_layer","","Returns the layer index.",786,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",786,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",786,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbcubemaparraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",786,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",761,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",761,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",761,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",761,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",761,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbcubemaparray"}}],[11,"get_level","","Returns the texture level.",761,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",761,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",761,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbcubemaparraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",816,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",816,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",816,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",816,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"compressedsrgbcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",690,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",690,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",690,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::integral_cubemap_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",621,{"i":[{"n":"self"}],"o":{"g":["integralcubemaparray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",621,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",621,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integralcubemaparray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",621,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integralcubemaparray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",621,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integralcubemaparray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",621,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"integralcubemaparray"}}],[11,"width","","Returns the width of that image.",621,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",621,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",621,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",621,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",621,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",621,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",621,{"i":[{"n":"self"}],"o":{"n":"integralcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",621,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integralcubemaparraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",621,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integralcubemaparraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",621,{"i":[{"n":"self"}],"o":{"n":"integralcubemaparraymipmap"}}],[11,"width","","Returns the width of that image.",791,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",791,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",791,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",791,{"i":[{"n":"self"}],"o":{"n":"integralcubemaparray"}}],[11,"get_layer","","Returns the layer index.",791,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",791,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",791,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integralcubemaparraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",791,{"i":[{"n":"self"}],"o":{"n":"integralcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",728,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",728,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",728,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",728,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",728,{"i":[{"n":"self"}],"o":{"n":"integralcubemaparray"}}],[11,"get_level","","Returns the texture level.",728,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",728,{"i":[{"n":"self"}],"o":{"n":"integralcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",728,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integralcubemaparraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",781,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",781,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",781,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",781,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"integralcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",687,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",687,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",687,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::unsigned_cubemap_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",618,{"i":[{"n":"self"}],"o":{"g":["unsignedcubemaparray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",618,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",618,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedcubemaparray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",618,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedcubemaparray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",618,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedcubemaparray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",618,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"unsignedcubemaparray"}}],[11,"width","","Returns the width of that image.",618,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",618,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",618,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",618,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",618,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",618,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",618,{"i":[{"n":"self"}],"o":{"n":"unsignedcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",618,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedcubemaparraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",618,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedcubemaparraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",618,{"i":[{"n":"self"}],"o":{"n":"unsignedcubemaparraymipmap"}}],[11,"width","","Returns the width of that image.",785,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",785,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",785,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",785,{"i":[{"n":"self"}],"o":{"n":"unsignedcubemaparray"}}],[11,"get_layer","","Returns the layer index.",785,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",785,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",785,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedcubemaparraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",785,{"i":[{"n":"self"}],"o":{"n":"unsignedcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",736,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",736,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",736,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",736,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",736,{"i":[{"n":"self"}],"o":{"n":"unsignedcubemaparray"}}],[11,"get_level","","Returns the texture level.",736,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",736,{"i":[{"n":"self"}],"o":{"n":"unsignedcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",736,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedcubemaparraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",802,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",802,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",802,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",802,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"unsignedcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",674,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",674,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",674,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sampled","conrod::backend::glium::glium::texture::depth_cubemap_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",561,{"i":[{"n":"self"}],"o":{"g":["depthcubemaparray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",561,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",561,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthcubemaparray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",561,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthcubemaparray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",561,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthcubemaparray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",561,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthcubemaparray"}}],[11,"width","","Returns the width of that image.",561,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",561,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",561,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",561,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",561,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",561,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",561,{"i":[{"n":"self"}],"o":{"n":"depthcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",561,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthcubemaparraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",561,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthcubemaparraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",561,{"i":[{"n":"self"}],"o":{"n":"depthcubemaparraymipmap"}}],[11,"width","","Returns the width of that image.",793,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",793,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",793,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",793,{"i":[{"n":"self"}],"o":{"n":"depthcubemaparray"}}],[11,"get_layer","","Returns the layer index.",793,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",793,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",793,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthcubemaparraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",793,{"i":[{"n":"self"}],"o":{"n":"depthcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",755,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",755,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",755,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",755,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",755,{"i":[{"n":"self"}],"o":{"n":"depthcubemaparray"}}],[11,"get_level","","Returns the texture level.",755,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",755,{"i":[{"n":"self"}],"o":{"n":"depthcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",755,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthcubemaparraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",784,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",784,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",784,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",784,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"depthcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",534,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",534,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",534,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_internal_format","conrod::backend::glium::glium::texture::stencil_cubemap_array","Determines the internal format of this texture.",637,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",637,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stencilcubemaparray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",637,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stencilcubemaparray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",637,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stencilcubemaparray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",637,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"stencilcubemaparray"}}],[11,"width","","Returns the width of that image.",637,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",637,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",637,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",637,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",637,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",637,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",637,{"i":[{"n":"self"}],"o":{"n":"stencilcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",637,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stencilcubemaparraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",637,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stencilcubemaparraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",637,{"i":[{"n":"self"}],"o":{"n":"stencilcubemaparraymipmap"}}],[11,"width","","Returns the width of that image.",783,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",783,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",783,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",783,{"i":[{"n":"self"}],"o":{"n":"stencilcubemaparray"}}],[11,"get_layer","","Returns the layer index.",783,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",783,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",783,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stencilcubemaparraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",783,{"i":[{"n":"self"}],"o":{"n":"stencilcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",741,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",741,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",741,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",741,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",741,{"i":[{"n":"self"}],"o":{"n":"stencilcubemaparray"}}],[11,"get_level","","Returns the texture level.",741,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",741,{"i":[{"n":"self"}],"o":{"n":"stencilcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",741,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stencilcubemaparraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",811,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",811,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",811,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",811,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"stencilcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",711,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",711,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",711,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_internal_format","conrod::backend::glium::glium::texture::depth_stencil_cubemap_array","Determines the internal format of this texture.",633,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",633,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstencilcubemaparray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",633,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstencilcubemaparray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",633,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstencilcubemaparray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",633,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"u32"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthstencilcubemaparray"}}],[11,"width","","Returns the width of that image.",633,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",633,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",633,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",633,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",633,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",633,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",633,{"i":[{"n":"self"}],"o":{"n":"depthstencilcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",633,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstencilcubemaparraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",633,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstencilcubemaparraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",633,{"i":[{"n":"self"}],"o":{"n":"depthstencilcubemaparraymipmap"}}],[11,"width","","Returns the width of that image.",795,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",795,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",795,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",795,{"i":[{"n":"self"}],"o":{"n":"depthstencilcubemaparray"}}],[11,"get_layer","","Returns the layer index.",795,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",795,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",795,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstencilcubemaparraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",795,{"i":[{"n":"self"}],"o":{"n":"depthstencilcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",759,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",759,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",759,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",759,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",759,{"i":[{"n":"self"}],"o":{"n":"depthstencilcubemaparray"}}],[11,"get_level","","Returns the texture level.",759,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",759,{"i":[{"n":"self"}],"o":{"n":"depthstencilcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",759,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstencilcubemaparraylayermipmap"],"n":"option"}}],[11,"width","","Returns the width of that image.",817,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",817,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",817,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",817,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"depthstencilcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",644,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",644,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",644,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_layer_index","conrod::backend::glium::glium::texture","In some situations whole cubemaps can be bound at once. If this is the case, each layer of the cubemap has a specific index.",132,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"from_raw_rgb","","Builds a raw image from a vector of interleaved RGB values.",141,null],[11,"from_raw_rgba","","Builds a raw image from a vector of interleaved RGBA values.",141,null],[11,"from_raw_rgb_reversed","","Builds a raw image from a vector of interleaved RGB values, flipping it vertically.",141,null],[11,"from_raw_rgba_reversed","","Builds a raw image from a vector of interleaved RGBA values, flipping it vertically.",141,null],[11,"from_vec_raw1d","","Transforms a Vec into a RawImage2d",141,{"i":[{"n":"vec"}],"o":{"n":"rawimage2d"}}],[11,"from_vec_raw2d","","Transforms a Vec into a RawImage3d",145,{"i":[{"n":"vec"}],"o":{"n":"rawimage3d"}}],[11,"get_total_bits","","Returns the total number of bits of this format.",147,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",148,{"o":{"g":["stencilformat"],"n":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",148,{"i":[{"n":"self"}],"o":{"n":"textureformat"}}],[11,"is_supported_for_textures","","Returns true if this format is supported by the backend for textures.",148,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"is_supported_for_renderbuffers","","Returns true if this format is supported by the backend for renderbuffers.",148,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"get_texture","","Returns the texture.",804,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"get_level","","Returns the level of the texture.",804,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_layer","","Returns the layer of the texture.",804,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_cubemap_layer","","Returns the cubemap layer of this image, or `None` if the texture is not a cubemap.",804,{"i":[{"n":"self"}],"o":{"g":["cubelayer"],"n":"option"}}],[11,"get_width","","Returns the width of this texture slice.",804,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_height","","Returns the height of this texture slice.",804,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"get_samples","","Returns the number of samples of the texture.",804,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"raw_read","","Reads the content of the image.",804,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"t"}}],[11,"raw_read_to_pixel_buffer","","Reads the content of the image to a pixel buffer.",804,null],[11,"raw_clear_buffer","","Clears the content of the texture to a specific value.",804,null],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",150,{"o":{"g":["uncompresseduintformat"],"n":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",150,{"i":[{"n":"self"}],"o":{"n":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",150,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"is_color_renderable","","Returns true if a texture or renderbuffer with this format can be used as a framebuffer attachment.",150,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"get_texture","","Returns the texture.",809,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"get_samples","","Returns the number of samples of the texture.",809,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"get_layer","","Returns the layer of the texture.",809,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"main_level","","Returns a structure that represents the main mipmap level of this layer of the texture.",809,{"i":[{"n":"self"}],"o":{"n":"textureanylayermipmap"}}],[11,"mipmap","","Returns a structure that represents a specific mipmap of this layer of the texture.",809,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["textureanylayermipmap"],"n":"option"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",152,{"o":{"g":["srgbformat"],"n":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",152,{"i":[{"n":"self"}],"o":{"n":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",152,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"is_color_renderable","","Returns true if a texture or renderbuffer with this format can be used as a framebuffer attachment.",152,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",153,{"o":{"g":["uncompressedfloatformat"],"n":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",153,{"i":[{"n":"self"}],"o":{"n":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",153,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"is_color_renderable","","Returns true if a texture or renderbuffer with this format can be used as a framebuffer attachment.",153,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"get_texture","","Returns the texture.",779,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"get_level","","Returns the level of the texture.",779,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_layer","","Returns the layer of the texture.",779,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_width","","Returns the width of this texture slice.",779,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_height","","Returns the height of this texture slice.",779,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"get_samples","","Returns the number of samples of the texture.",779,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"into_image","","Turns this into an image.",779,{"i":[{"n":"self"},{"g":["cubelayer"],"n":"option"}],"o":{"g":["textureanyimage"],"n":"option"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",156,{"o":{"g":["compressedsrgbformat"],"n":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",156,{"i":[{"n":"self"}],"o":{"n":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",156,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",157,{"o":{"g":["depthformat"],"n":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",157,{"i":[{"n":"self"}],"o":{"n":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",157,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"get_size","","Returns the size in bytes of a pixel of this type.",158,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"get_num_components","","Returns the number of components of this client format.",158,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",159,{"o":{"g":["compressedformat"],"n":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",159,{"i":[{"n":"self"}],"o":{"n":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",159,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",160,{"o":{"g":["uncompressedintformat"],"n":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",160,{"i":[{"n":"self"}],"o":{"n":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",160,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"is_color_renderable","","Returns true if a texture or renderbuffer with this format can be used as a framebuffer attachment.",160,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",161,{"o":{"g":["textureformat"],"n":"vec"}}],[11,"is_supported_for_textures","","Returns true if this format is supported by the backend for textures.",161,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"is_supported_for_renderbuffers","","Returns true if this format is supported by the backend for renderbuffers.",161,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"is_renderable","","Returns true if the format is color-renderable, depth-renderable, depth-stencil-renderable or stencil-renderable.",161,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",162,{"o":{"g":["depthstencilformat"],"n":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",162,{"i":[{"n":"self"}],"o":{"n":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",162,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"new","conrod::backend::glium::glium","Builds a new `Frame`. Use the `draw` function on `Display` instead of this function.",649,null],[11,"finish","","Stop drawing, swap the buffers, and consume the Frame.",649,{"i":[{"n":"self"}],"o":{"g":["swapbufferserror"],"n":"result"}}],[11,"set_finish","","Stop drawing, swap the buffers.",649,{"i":[{"n":"self"}],"o":{"g":["swapbufferserror"],"n":"result"}}],[11,"new","","Builds a new `SyncFence` that is injected in the server.",650,{"i":[{"n":"f"}],"o":{"g":["syncfence","syncnotsupportederror"],"n":"result"}}],[11,"wait","","Blocks until the operation has finished on the server.",650,null],[11,"into_sync_fence","","Turns the prototype into a real fence.",651,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"syncfence"}}],[11,"new","conrod::backend::piston::draw","Creates a new drawing context.",188,{"o":{"n":"context"}}],[11,"new_viewport","","Creates a new context with absolute transform in point coordinates.",188,{"i":[{"n":"viewport"}],"o":{"n":"context"}}],[11,"new_abs","","Creates a new drawing context in absolute coordinates.",188,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"context"}}],[11,"view","","Moves the current transform to the view coordinate system.",188,{"i":[{"n":"self"}],"o":{"n":"context"}}],[11,"reset","","Moves the current transform to the default coordinate system.",188,{"i":[{"n":"self"}],"o":{"n":"context"}}],[11,"store_view","","Stores the current transform as new view.",188,{"i":[{"n":"self"}],"o":{"n":"context"}}],[11,"get_view_size","","Computes the current view size.",188,null],[11,"new_alpha","","Uses alpha blending.",189,{"o":{"n":"drawstate"}}],[11,"new_clip","","Draws to stencil buffer with value 255. This can be used for clipping.",189,{"o":{"n":"drawstate"}}],[11,"new_inside","","Tests against stencil buffer with value 255. Draws inside the shape defined by stencil buffer.",189,{"o":{"n":"drawstate"}}],[11,"new_outside","","Tests against stencil buffer with value 255. Draws outside the shape defined by stencil buffer.",189,{"o":{"n":"drawstate"}}],[11,"blend","","Sets blending.",189,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"drawstate"}}],[11,"scissor","","Sets scissor `[x, y, w, h]`.",189,null],[11,"border_rgba","conrod","Set the color of the widget's border with rgba values.",521,{"i":[{"n":"self"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"self"}}],[11,"border_rgb","","Set the color of the widget's border with rgb values.",521,{"i":[{"n":"self"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"self"}}],[11,"border_hsla","","Set the color of the widget's border with hsla values.",521,{"i":[{"n":"self"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"self"}}],[11,"border_hsl","","Set the color of the widget's border with hsl values.",521,{"i":[{"n":"self"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"self"}}],[11,"event","conrod::input::keyboard","Change modifier key state depending on input.",524,null],[18,"NO_MODIFIER","","No modifier.",524,null],[18,"CTRL","","Ctrl.",524,null],[18,"SHIFT","","Shift.",524,null],[18,"ALT","","Alt.",524,null],[18,"GUI","","Gui.",524,null],[18,"CTRL_SHIFT","","Ctrl + Shift.",524,null],[18,"CTRL_ALT","","Ctrl + Alt.",524,null],[18,"CTRL_GUI","","Ctrl + Gui.",524,null],[18,"CTRL_SHIFT_ALT","","Ctrl + Shift + Alt.",524,null],[18,"CTRL_SHIFT_GUI","","Ctrl + Shift + Gui.",524,null],[18,"CTRL_SHIFT_ALT_GUI","","Ctrl + Shift + Alt + Gui.",524,null],[18,"SHIFT_ALT","","Shift + Alt.",524,null],[18,"SHIFT_GUI","","Shift + Gui.",524,null],[18,"SHIFT_ALT_GUI","","Shift + Alt + Gui.",524,null],[18,"ALT_GUI","","Alt + Gui.",524,null],[11,"empty","","Returns an empty set of flags.",524,{"o":{"n":"modifierkey"}}],[11,"all","","Returns the set containing all flags.",524,{"o":{"n":"modifierkey"}}],[11,"bits","","Returns the raw value of the flags currently stored.",524,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",524,{"i":[{"n":"u8"}],"o":{"g":["modifierkey"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",524,{"i":[{"n":"u8"}],"o":{"n":"modifierkey"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",524,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",524,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",524,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",524,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",524,null],[11,"remove","","Removes the specified flags in-place.",524,null],[11,"toggle","","Toggles the specified flags in-place.",524,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",524,null],[11,"new","conrod::input","Create a new ControllerButton object. Intended for use by backends when emitting events.",239,{"i":[{"n":"i32"},{"n":"u8"}],"o":{"n":"controllerbutton"}}],[11,"new","","Create a new ControllerAxisArgs object. Intended for use by backends when emitting events.",240,{"i":[{"n":"i32"},{"n":"u8"},{"n":"f64"}],"o":{"n":"controlleraxisargs"}}],[11,"code","","Returns an id of the key",241,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"viewport","","Returns viewport information filling entire render area.",243,{"i":[{"n":"self"}],"o":{"n":"viewport"}}],[11,"label_rgba","conrod","Set the color of the widget's label from rgba values.",522,{"i":[{"n":"self"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"self"}}],[11,"label_rgb","","Set the color of the widget's label from rgb values.",522,{"i":[{"n":"self"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"self"}}],[11,"label_hsla","","Set the color of the widget's label from hsla values.",522,{"i":[{"n":"self"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"self"}}],[11,"label_hsl","","Set the color of the widget's label from hsl values.",522,{"i":[{"n":"self"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"self"}}],[11,"small_font","","Set a \"small\" font size for the widget's label.",522,{"i":[{"n":"self"},{"n":"ui"}],"o":{"n":"self"}}],[11,"medium_font","","Set a \"medium\" font size for the widget's label.",522,{"i":[{"n":"self"},{"n":"ui"}],"o":{"n":"self"}}],[11,"large_font","","Set a \"large\" font size for the widget's label.",522,{"i":[{"n":"self"},{"n":"ui"}],"o":{"n":"self"}}],[11,"font","conrod::text","The font to which this glyph belongs. If the glyph is a standalone glyph that owns its resources, it no longer has a reference to the font which it was created from (using `standalone()`). In which case, `None` is returned.",527,{"i":[{"n":"self"}],"o":{"g":["font"],"n":"option"}}],[11,"id","","The glyph identifier for this glyph.",527,{"i":[{"n":"self"}],"o":{"n":"glyphid"}}],[11,"scaled","","Augments this glyph with scaling information, making methods that depend on the scale of the glyph available.",527,{"i":[{"n":"self"},{"n":"scale"}],"o":{"n":"scaledglyph"}}],[11,"standalone","","Turns a `Glyph<'a>` into a `Glyph<'static>`. This produces a glyph that owns its resources, extracted from the font. This glyph can outlive the font that it comes from.",527,{"i":[{"n":"self"}],"o":{"n":"glyph"}}],[11,"get_data","","Get the data from this glyph (such as width, extents, vertices, etc.). Only possible if the glyph is a shared glyph.",527,{"i":[{"n":"self"}],"o":{"g":["arc"],"n":"option"}}],[11,"uniform","","Uniform scaling, equivalent to `Scale { x: s, y: s }`.",299,{"i":[{"n":"f32"}],"o":{"n":"scale"}}],[11,"new","","Legacy `Cache` construction, use `CacheBuilder` for more options.",832,{"i":[{"n":"u32"},{"n":"u32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"cache"}}],[11,"set_scale_tolerance","","Sets the scale tolerance for the cache. See the documentation for `CacheBuilder` for more information.",832,null],[11,"scale_tolerance","","Returns the current scale tolerance for the cache.",832,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"set_position_tolerance","","Sets the subpixel position tolerance for the cache. See the documentation for `CacheBuilder` for more information.",832,null],[11,"position_tolerance","","Returns the current subpixel position tolerance for the cache.",832,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"dimensions","","Returns the cache texture dimensions assumed by the cache. For proper operation this should match the dimensions of the used GPU texture.",832,null],[11,"queue_glyph","","Queue a glyph for caching by the next call to `cache_queued`. `font_id` is used to disambiguate glyphs from different fonts. The user should ensure that `font_id` is unique to the font the glyph is from.",832,null],[11,"clear","","Clears the cache. Does not affect the glyph queue.",832,null],[11,"clear_queue","","Clears the glyph queue.",832,null],[11,"cache_queued","","Caches the queued glyphs. If this is unsuccessful, the queue is untouched. Any glyphs cached by previous calls to this function may be removed from the cache to make room for the newly queued glyphs. Thus if you want to ensure that a glyph is in the cache, the most recently cached queue must have contained that glyph.",832,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["cachewriteerr"],"n":"result"}}],[11,"rect_for","","Retrieves the (floating point) texture coordinates of the quad for a glyph in the cache, as well as the pixel-space (integer) coordinates that this region should be drawn at. In the majority of cases these pixel-space coordinates should be identical to the bounding box of the input glyph. They only differ if the cache has returned a substitute glyph that is deemed close enough to the requested glyph as specified by the cache tolerance parameters.",832,{"i":[{"n":"self"},{"n":"usize"},{"n":"positionedglyph"}],"o":{"g":["option","cachereaderr"],"n":"result"}}],[11,"width","conrod::text::rt","",302,{"i":[{"n":"self"}],"o":{"n":"n"}}],[11,"height","","",302,{"i":[{"n":"self"}],"o":{"n":"n"}}]],"paths":[[3,"Ui"],[3,"UiBuilder"],[4,"Bordering"],[4,"DisplayCreationError"],[4,"RawHandle"],[8,"EventsLoopExt"],[8,"WindowBuilderExt"],[8,"MonitorIdExt"],[4,"XNotSupported"],[8,"WindowExt"],[8,"GlContextExt"],[8,"GlContext"],[3,"ContextBuilder"],[4,"CreationError"],[4,"ContextError"],[4,"Api"],[4,"GlProfile"],[4,"GlRequest"],[4,"Robustness"],[4,"ReleaseBehavior"],[3,"PixelFormat"],[3,"PixelFormatRequirements"],[3,"GlAttributes"],[4,"Event"],[4,"MouseButton"],[3,"KeyboardInput"],[3,"WindowAttributes"],[4,"WindowCreationError"],[4,"ElementState"],[3,"Touch"],[4,"MouseScrollDelta"],[4,"VirtualKeyCode"],[4,"ControlFlow"],[4,"DeviceEvent"],[4,"WindowEvent"],[3,"HeadlessRendererBuilder"],[3,"ModifiersState"],[4,"TouchPhase"],[4,"CursorState"],[4,"MouseCursor"],[3,"WindowBuilder"],[8,"Backend"],[8,"Facade"],[4,"ReleaseBehavior"],[8,"Content"],[4,"BufferCreationError"],[4,"BufferMode"],[4,"BufferType"],[4,"CopyError"],[4,"ReadError"],[4,"Severity"],[4,"Source"],[4,"MessageType"],[4,"DebugCallbackBehavior"],[4,"BackfaceCullingMode"],[4,"PolygonMode"],[4,"Smooth"],[4,"ProvokingVertex"],[3,"DrawParameters"],[3,"ConditionalRendering"],[4,"SamplesQueryParam"],[4,"StencilOperation"],[3,"Blend"],[4,"StencilTest"],[3,"Stencil"],[4,"DepthClamp"],[4,"LinearBlendingFactor"],[4,"QueryCreationError"],[4,"BlendingFunction"],[4,"DepthTest"],[3,"Depth"],[4,"ColorAttachment"],[8,"ToColorAttachment"],[4,"DepthAttachment"],[8,"ToDepthAttachment"],[4,"StencilAttachment"],[8,"ToStencilAttachment"],[4,"DepthStencilAttachment"],[8,"ToDepthStencilAttachment"],[4,"DefaultFramebufferAttachment"],[4,"RenderBufferCreationError"],[4,"ValidationError"],[4,"IndicesSource"],[4,"PrimitiveType"],[3,"NoIndices"],[4,"IndexType"],[8,"Index"],[3,"DrawCommandIndices"],[3,"DrawCommandNoIndices"],[4,"BufferCreationError"],[4,"ProgramCreationError"],[4,"ProgramChooserCreationError"],[4,"GetBinaryError"],[4,"ProgramCreationInput"],[3,"SourceCode"],[3,"Binary"],[3,"TransformFeedbackVarying"],[3,"TransformFeedbackBuffer"],[4,"BlockLayout"],[3,"Uniform"],[4,"OutputPrimitives"],[4,"ShaderStage"],[3,"UniformBlock"],[3,"SubroutineUniform"],[3,"ComputeCommand"],[4,"TransformFeedbackMode"],[3,"SubroutineData"],[3,"Attribute"],[8,"Uniforms"],[4,"LayoutMismatchError"],[8,"AsUniformValue"],[8,"UniformBlock"],[4,"UniformType"],[3,"Sampler"],[4,"SamplerWrapFunction"],[3,"SamplerBehavior"],[4,"MinifySamplerFilter"],[4,"MagnifySamplerFilter"],[4,"UniformValue"],[4,"VerticesSource"],[3,"EmptyVertexAttributes"],[3,"EmptyInstanceAttributes"],[8,"MultiVerticesSource"],[8,"Vertex"],[8,"Attribute"],[4,"AttributeType"],[4,"BufferCreationError"],[4,"TextureCreationError"],[4,"CreationError"],[4,"BufferTextureType"],[4,"TextureBufferContentType"],[8,"TextureBufferContent"],[4,"CubeLayer"],[4,"TextureKind"],[4,"MipmapsOption"],[4,"CompressedMipmapsOption"],[8,"Texture1dDataSource"],[8,"Texture1dDataSink"],[3,"RawImage1d"],[8,"Texture2dDataSource"],[8,"Texture2dDataSink"],[3,"RawImage2d"],[8,"ToClientFormat"],[8,"Texture3dDataSource"],[8,"Texture3dDataSink"],[3,"RawImage3d"],[4,"TextureCreationError"],[4,"InternalFormat"],[4,"StencilFormat"],[4,"GetFormatError"],[4,"UncompressedUintFormat"],[8,"PixelValue"],[4,"SrgbFormat"],[4,"UncompressedFloatFormat"],[4,"Dimensions"],[4,"InternalFormatType"],[4,"CompressedSrgbFormat"],[4,"DepthFormat"],[4,"ClientFormat"],[4,"CompressedFormat"],[4,"UncompressedIntFormat"],[4,"TextureFormat"],[4,"DepthStencilFormat"],[8,"CapabilitiesSource"],[8,"GlObject"],[4,"Handle"],[4,"RawUniformValue"],[3,"Rect"],[3,"BlitTarget"],[8,"Surface"],[4,"DrawError"],[4,"SwapBuffersError"],[3,"IncompatibleOpenGl"],[4,"Api"],[4,"Profile"],[3,"Version"],[3,"Vertex"],[4,"Command"],[4,"Draw"],[4,"RendererCreationError"],[4,"DrawError"],[8,"TextureDimensions"],[3,"GlyphCache"],[3,"Renderer"],[3,"Commands"],[8,"WinitWindow"],[3,"Window"],[3,"Display"],[3,"Context"],[3,"DrawState"],[8,"Graphics"],[8,"ImageSize"],[8,"Transformed"],[8,"GenericEvent"],[8,"UpdateEvent"],[4,"Command"],[4,"Draw"],[4,"RendererCreationError"],[3,"Renderer"],[3,"Commands"],[3,"Hsla"],[3,"Rgba"],[4,"Color"],[4,"Gradient"],[8,"Colorable"],[3,"Text"],[3,"Motion"],[3,"Press"],[3,"MousePress"],[3,"KeyPress"],[3,"Release"],[3,"MouseRelease"],[3,"KeyRelease"],[3,"Drag"],[3,"Click"],[3,"DoubleClick"],[3,"Tap"],[3,"Scroll"],[4,"Input"],[4,"Event"],[4,"Ui"],[4,"Widget"],[4,"Button"],[8,"Walker"],[3,"UniqueWidgetState"],[3,"Container"],[3,"IsOverFn"],[4,"Node"],[4,"Edge"],[3,"PickWidgets"],[3,"PickScrollableWidgets"],[3,"DepthOrder"],[3,"Graph"],[6,"Children"],[6,"Parents"],[3,"Map"],[3,"Id"],[3,"NewIds"],[4,"Button"],[3,"ControllerButton"],[3,"ControllerAxisArgs"],[4,"Key"],[4,"Button"],[3,"RenderArgs"],[4,"Source"],[4,"Motion"],[3,"State"],[3,"Start"],[3,"Touch"],[3,"Mouse"],[4,"ButtonPosition"],[3,"ButtonMap"],[3,"PressedButtons"],[3,"Mouse"],[3,"Widget"],[3,"Events"],[3,"Presses"],[3,"MousePresses"],[3,"MouseButtonPresses"],[3,"KeyPresses"],[3,"Releases"],[3,"MouseButtonReleases"],[3,"MouseReleases"],[3,"KeyReleases"],[3,"Clicks"],[3,"ButtonClicks"],[3,"Taps"],[3,"Drags"],[3,"ButtonDrags"],[3,"Texts"],[3,"Scrolls"],[3,"Global"],[3,"Events"],[3,"UiEvents"],[3,"Touch"],[4,"Phase"],[3,"Id"],[3,"Padding"],[4,"Axis"],[4,"Position"],[4,"Relative"],[4,"Direction"],[4,"Align"],[4,"Place"],[4,"Dimension"],[3,"Range"],[4,"Edge"],[3,"Rect"],[4,"Corner"],[8,"Positionable"],[8,"Sizeable"],[3,"Primitive"],[4,"PrimitiveKind"],[8,"PrimitiveWalker"],[3,"OwnedPrimitives"],[3,"Primitives"],[3,"WalkOwnedPrimitives"],[3,"Text"],[3,"GlyphId"],[3,"Scale"],[4,"Justify"],[3,"Point"],[3,"Rect"],[3,"Vector"],[4,"Error"],[3,"Id"],[3,"Ids"],[3,"Map"],[3,"NewIds"],[3,"RectsPerLine"],[3,"SelectedRectsPerLine"],[3,"Rects"],[3,"SelectedRects"],[3,"Index"],[3,"XysPerLine"],[3,"XysPerLineFromText"],[3,"Xs"],[3,"Info"],[4,"Break"],[3,"Rects"],[3,"Infos"],[3,"SelectedRects"],[3,"Lines"],[3,"Theme"],[3,"WidgetDefault"],[3,"UniqueDefault"],[3,"UiCell"],[4,"IterDiff"],[3,"UpdateArgs"],[3,"KidAreaArgs"],[3,"KidArea"],[3,"Floating"],[3,"CommonBuilder"],[3,"CommonStyle"],[3,"CommonState"],[3,"PreUpdateCache"],[3,"PostUpdateCache"],[4,"MaybeParent"],[4,"IsOver"],[3,"List"],[3,"Generator"],[3,"ListWalk"],[3,"State"],[8,"Axis"],[3,"Scroll"],[4,"X"],[4,"Y"],[3,"Line"],[3,"State"],[3,"Style"],[4,"Pattern"],[4,"Cap"],[3,"Image"],[3,"State"],[3,"Style"],[3,"PointPath"],[3,"State"],[3,"Triangles"],[4,"Style"],[3,"Circle"],[3,"Oval"],[3,"Section"],[3,"State"],[8,"OvalSection"],[3,"Full"],[3,"Circumference"],[3,"Triangles"],[3,"Polygon"],[3,"State"],[4,"Kind"],[3,"Triangles"],[3,"Rectangle"],[4,"Kind"],[3,"State"],[3,"Triangles"],[3,"SingleColor"],[3,"Triangle"],[3,"State"],[8,"Vertex"],[8,"Style"],[3,"MultiColor"],[6,"Point"],[6,"ColoredPoint"],[3,"TrianglesUnpositioned"],[3,"Text"],[3,"Style"],[3,"State"],[4,"Wrap"],[3,"BorderedRectangle"],[3,"Style"],[3,"RoundedBorderTriangles"],[3,"Button"],[3,"Style"],[3,"FlatIds"],[3,"ImageIds"],[3,"Flat"],[3,"Image"],[3,"TimesClicked"],[4,"ImageColor"],[3,"Canvas"],[3,"Style"],[4,"Length"],[4,"Direction"],[3,"Ids"],[3,"Style"],[3,"Area"],[4,"Event"],[3,"CollapsibleArea"],[3,"Style"],[4,"MaxHeight"],[3,"DropDownList"],[3,"EnvelopeEditor"],[3,"Style"],[4,"Event"],[8,"EnvelopePoint"],[3,"FileNavigator"],[3,"Style"],[4,"Types"],[4,"Event"],[3,"DirectoryView"],[3,"Style"],[4,"Event"],[3,"Entry"],[3,"Directory"],[3,"Grid"],[3,"Style"],[3,"Lines"],[4,"Axis"],[3,"List"],[3,"Fixed"],[3,"Style"],[3,"Item"],[4,"ItemInstantiation"],[4,"ScrollbarPosition"],[8,"Direction"],[8,"ItemSize"],[4,"Up"],[4,"Down"],[4,"Left"],[4,"Right"],[3,"Dynamic"],[3,"Items"],[3,"Scrollbar"],[4,"ListDirection"],[4,"Event"],[4,"Selection"],[8,"Direction"],[8,"Mode"],[3,"ListSelect"],[3,"Single"],[3,"Multiple"],[3,"Events"],[3,"Style"],[3,"Element"],[3,"Matrix"],[3,"Elements"],[3,"Graph"],[3,"Style"],[3,"NodeSocket"],[4,"Event"],[4,"NodeEvent"],[4,"EdgeEvent"],[3,"Node"],[3,"Style"],[3,"SocketLayout"],[3,"Event"],[4,"SocketSide"],[4,"SocketType"],[3,"SocketRects"],[3,"Layout"],[3,"Camera"],[3,"SessionEvents"],[3,"Events"],[3,"SessionNodes"],[3,"Nodes"],[3,"SessionEdges"],[3,"Edges"],[3,"NodeContext"],[3,"NodeWidget"],[3,"Edge"],[3,"EdgeWidget"],[3,"Style"],[3,"GlyphSlot"],[3,"NumberDialer"],[3,"Style"],[3,"PlotPath"],[3,"RangeSlider"],[3,"Style"],[4,"Drag"],[4,"Edge"],[3,"Event"],[3,"RoundedRectangle"],[3,"Points"],[3,"Style"],[8,"Axis"],[3,"Scrollbar"],[3,"Slider"],[3,"Style"],[3,"Style"],[4,"Layout"],[3,"Tab"],[3,"Tabs"],[3,"TabRects"],[3,"Style"],[4,"Event"],[3,"TextBox"],[3,"Style"],[4,"Drag"],[4,"Cursor"],[3,"TextEdit"],[3,"TitleBar"],[3,"Style"],[3,"Toggle"],[3,"Style"],[3,"TimesClicked"],[3,"XYPad"],[3,"Style"],[8,"Common"],[8,"Widget"],[3,"State"],[4,"MouseCursor"],[8,"Borderable"],[8,"Labelable"],[3,"Headless"],[3,"ModifierKey"],[3,"LayoutIter"],[3,"GlyphIter"],[3,"Glyph"],[3,"GlutinBackend"],[3,"GlutinBackend"],[3,"Context"],[3,"TextureHandle"],[3,"BufferTexture"],[3,"DepthTexture2dMipmap"],[3,"DepthCubemapArrayImage"],[3,"DepthTexture3dMipmap"],[3,"DepthTexture1dArrayLayerMipmap"],[3,"DepthCubemapImage"],[3,"DepthTexture2dArrayLayerMipmap"],[3,"DepthTexture2dMultisampleArrayLayerMipmap"],[3,"DepthTexture2dMultisampleMipmap"],[3,"DepthTexture1dMipmap"],[3,"BufferViewMutSlice"],[3,"VertexBufferAny"],[3,"BufferViewSlice"],[3,"VertexBuffer"],[3,"IndexBufferAny"],[3,"BufferViewAny"],[3,"UnsignedTexture2dMultisampleArray"],[3,"CompressedTexture2d"],[3,"Texture2dMultisampleArray"],[3,"BufferAnySlice"],[3,"DepthStencilTexture1d"],[3,"CompressedSrgbTexture2d"],[3,"StencilTexture1d"],[3,"DepthTexture2dMultisampleArray"],[3,"UnsignedTexture1d"],[3,"UnsignedTexture2dMultisample"],[3,"TextureAny"],[3,"CompressedSrgbTexture1d"],[3,"CompressedCubemap"],[3,"DepthCubemapArray"],[3,"SrgbTexture2d"],[3,"AnySamplesPassedQuery"],[3,"DepthStencilCubemap"],[3,"StencilCubemap"],[3,"IndexBufferSlice"],[3,"CompressedTexture1d"],[3,"DepthStencilTexture3d"],[3,"IntegralTexture2dMultisampleArray"],[3,"TimeElapsedQuery"],[3,"StencilTexture2dMultisampleArray"],[3,"DepthCubemap"],[3,"DepthStencilTexture2d"],[3,"SrgbTexture2dArray"],[3,"CompressedSrgbTexture3d"],[3,"DepthStencilTexture1dArray"],[3,"CubemapArray"],[3,"IntegralTexture3d"],[3,"DepthStencilTexture2dMultisample"],[3,"IntegralTexture2dMultisample"],[3,"Program"],[3,"TransformFeedbackPrimitivesWrittenQuery"],[3,"DepthTexture3d"],[3,"CompressedSrgbTexture1dArray"],[3,"DepthStencilTexture2dMultisampleArray"],[3,"Texture2dArray"],[3,"SrgbCubemap"],[3,"Texture3d"],[3,"UnsignedTexture2dArray"],[3,"Texture1d"],[3,"CompressedTexture2dArray"],[3,"Texture1dArray"],[3,"UnsignedTexture1dArray"],[3,"CompressedSrgbTexture2dArray"],[3,"IndexBuffer"],[3,"CompressedSrgbCubemap"],[3,"SamplesPassedQuery"],[3,"StencilTexture2dMultisample"],[3,"IntegralTexture1d"],[3,"SrgbTexture2dMultisample"],[3,"SrgbTexture2dMultisampleArray"],[3,"ComputeShader"],[3,"CompressedSrgbCubemapArray"],[3,"Cubemap"],[3,"PrimitivesGeneratedQuery"],[3,"DepthStencilTexture2dArray"],[3,"EmptyUniforms"],[3,"StencilTexture1dArray"],[3,"IntegralTexture2dArray"],[3,"UnsignedTexture2d"],[3,"TransformFeedbackSession"],[3,"SrgbTexture3d"],[3,"DepthTexture1d"],[3,"CompressedTexture3d"],[3,"IntegralTexture1dArray"],[3,"UniformBuffer"],[3,"DepthTexture2dArray"],[3,"UnsignedCubemapArray"],[3,"SrgbTexture1d"],[3,"CompressedCubemapArray"],[3,"IntegralCubemapArray"],[3,"StencilTexture2d"],[3,"IntegralTexture2d"],[3,"SrgbTexture1dArray"],[3,"DepthTexture1dArray"],[3,"Texture2dMultisample"],[3,"IntegralCubemap"],[3,"UnsignedTexture3d"],[3,"CompressedTexture1dArray"],[3,"BindlessTexturesNotSupportedError"],[3,"SrgbCubemapArray"],[3,"Buffer"],[3,"DepthStencilCubemapArray"],[3,"DepthTexture2dMultisample"],[3,"UnsignedCubemap"],[3,"DepthTexture2d"],[3,"StencilCubemapArray"],[3,"StencilTexture2dArray"],[3,"Texture2d"],[3,"DepthStencilTexture1dMipmap"],[3,"DepthStencilTexture1dArrayLayerMipmap"],[3,"DepthStencilCubemapImage"],[3,"DepthStencilTexture2dMipmap"],[3,"DepthStencilCubemapArrayImage"],[3,"DepthStencilTexture2dArrayLayerMipmap"],[3,"DepthStencilTexture3dMipmap"],[3,"DepthStencilTexture2dMultisampleMipmap"],[3,"DepthStencilTexture2dMultisampleArrayLayerMipmap"],[3,"Frame"],[3,"SyncFence"],[3,"LinearSyncFence"],[3,"RenderBufferAny"],[3,"ResidentTexture"],[3,"UnsignedTexture1dArrayLayerMipmap"],[3,"IntegralCubemapImage"],[3,"IntegralTexture2dArrayLayerMipmap"],[3,"SrgbTexture3dMipmap"],[3,"UnsignedTexture2dMultisampleMipmap"],[3,"CubemapArrayImage"],[3,"Texture2dMultisampleArrayLayerMipmap"],[3,"UnsignedTexture1dMipmap"],[3,"Texture2dMultisampleMipmap"],[3,"CubemapImage"],[3,"SrgbTexture2dMultisampleMipmap"],[3,"Texture2dArrayLayerMipmap"],[3,"IntegralTexture2dMipmap"],[3,"IntegralTexture2dMultisampleMipmap"],[3,"SrgbTexture2dMultisampleArrayLayerMipmap"],[3,"UnsignedTexture2dMipmap"],[3,"Texture1dArrayLayerMipmap"],[3,"SrgbTexture1dMipmap"],[3,"UnsignedTexture2dMultisampleArrayLayerMipmap"],[3,"UnsignedTexture3dMipmap"],[3,"UnsignedCubemapArrayImage"],[3,"IntegralTexture1dMipmap"],[3,"SrgbTexture2dArrayLayerMipmap"],[3,"SrgbTexture2dMipmap"],[3,"Texture3dMipmap"],[3,"UnsignedTexture2dArrayLayerMipmap"],[3,"UnsignedCubemapImage"],[3,"SrgbCubemapArrayImage"],[3,"Texture2dMipmap"],[3,"Texture1dMipmap"],[3,"SrgbTexture1dArrayLayerMipmap"],[3,"SrgbCubemapImage"],[3,"IntegralTexture2dMultisampleArrayLayerMipmap"],[3,"IntegralCubemapArrayImage"],[3,"IntegralTexture3dMipmap"],[3,"IntegralTexture1dArrayLayerMipmap"],[3,"CompressedSrgbCubemapArrayImage"],[3,"CompressedTexture3dMipmap"],[3,"StencilTexture2dMultisampleMipmap"],[3,"CompressedSrgbTexture1dArrayLayerMipmap"],[3,"StencilTexture1dMipmap"],[3,"CompressedTexture1dArrayLayerMipmap"],[3,"CompressedSrgbTexture1dMipmap"],[3,"StencilTexture1dArrayLayerMipmap"],[3,"StencilTexture2dMultisampleArrayLayerMipmap"],[3,"CompressedTexture2dMipmap"],[3,"StencilCubemapImage"],[3,"CompressedSrgbTexture2dArrayLayerMipmap"],[3,"CompressedCubemapImage"],[3,"CompressedSrgbCubemapImage"],[3,"VertexBufferSlice"],[3,"StencilTexture2dArrayLayerMipmap"],[3,"StencilTexture2dMipmap"],[3,"CompressedCubemapArrayImage"],[3,"CompressedTexture2dArrayLayerMipmap"],[3,"CompressedSrgbTexture3dMipmap"],[3,"CompressedSrgbTexture2dMipmap"],[3,"StencilCubemapArrayImage"],[3,"CompressedTexture1dMipmap"],[3,"PerInstance"],[3,"UniformsStorage"],[3,"TextureAnyMipmap"],[3,"SrgbCubemapMipmap"],[3,"RenderBuffer"],[3,"DepthTexture1dArrayMipmap"],[3,"SrgbCubemapArrayMipmap"],[3,"UnsignedCubemapMipmap"],[3,"UnsignedTexture2dMultisampleArrayMipmap"],[3,"CubemapMipmap"],[3,"CompressedTexture1dArrayMipmap"],[3,"StencilTexture1dArrayMipmap"],[3,"DepthStencilCubemapMipmap"],[3,"DepthTexture2dMultisampleArrayMipmap"],[3,"DepthStencilTexture1dArrayMipmap"],[3,"IntegralCubemapArrayMipmap"],[3,"IntegralTexture1dArrayMipmap"],[3,"DrawCommandsIndicesBuffer"],[3,"IntegralTexture2dMultisampleArrayMipmap"],[3,"CompressedSrgbTexture1dArrayMipmap"],[3,"ReadMapping"],[3,"SrgbTexture2dMultisampleArrayMipmap"],[3,"IntegralTexture2dArrayMipmap"],[3,"UnsignedCubemapArrayMipmap"],[3,"DepthTexture2dArrayMipmap"],[3,"Mapping"],[3,"CompressedSrgbTexture2dArrayMipmap"],[3,"DepthStencilTexture2dArrayMipmap"],[3,"StencilCubemapArrayMipmap"],[3,"SrgbTexture2dArrayMipmap"],[3,"DepthRenderBuffer"],[3,"DepthCubemapMipmap"],[3,"CompressedSrgbCubemapMipmap"],[3,"StencilCubemapMipmap"],[3,"Texture2dMultisampleArrayMipmap"],[3,"Texture1dArrayMipmap"],[3,"UnsignedTexture1dArrayMipmap"],[3,"SrgbTexture1dArrayMipmap"],[3,"CompressedTexture2dArrayMipmap"],[3,"DepthStencilRenderBuffer"],[3,"StencilTexture2dMultisampleArrayMipmap"],[3,"DrawCommandsNoIndicesBuffer"],[3,"DepthCubemapArrayMipmap"],[3,"IntegralCubemapMipmap"],[3,"DepthStencilTexture2dMultisampleArrayMipmap"],[3,"StencilTexture2dArrayMipmap"],[3,"DepthStencilCubemapArrayMipmap"],[3,"PixelBuffer"],[3,"CompressedSrgbCubemapArrayMipmap"],[3,"StencilRenderBuffer"],[3,"CubemapArrayMipmap"],[3,"CompressedCubemapArrayMipmap"],[3,"UnsignedTexture2dArrayMipmap"],[3,"CompressedCubemapMipmap"],[3,"Texture2dArrayMipmap"],[3,"EmptyFrameBuffer"],[3,"SimpleFrameBuffer"],[3,"DefaultFramebuffer"],[3,"MultiOutputFrameBuffer"],[3,"Texture2dMultisampleArrayLayer"],[3,"DepthTexture2dMultisampleArrayLayer"],[3,"CubemapArrayLayerMipmap"],[3,"DepthStencilTexture2dMultisampleArrayLayer"],[3,"SrgbTexture2dArrayLayer"],[3,"IntegralTexture2dArrayLayer"],[3,"CubemapArrayLayer"],[3,"TextureAnyLayerMipmap"],[3,"CompressedCubemapArrayLayerMipmap"],[3,"IntegralCubemapArrayLayerMipmap"],[3,"CompressedTexture1dArrayLayer"],[3,"StencilCubemapArrayLayer"],[3,"DepthCubemapArrayLayerMipmap"],[3,"UnsignedCubemapArrayLayer"],[3,"CompressedSrgbCubemapArrayLayer"],[3,"SrgbCubemapArrayLayerMipmap"],[3,"SrgbTexture2dMultisampleArrayLayer"],[3,"CompressedTexture2dArrayLayer"],[3,"CompressedCubemapArrayLayer"],[3,"IntegralCubemapArrayLayer"],[3,"UnsignedTexture2dMultisampleArrayLayer"],[3,"DepthCubemapArrayLayer"],[3,"UnsignedTexture2dArrayLayer"],[3,"DepthStencilCubemapArrayLayer"],[3,"UnsignedTexture1dArrayLayer"],[3,"IntegralTexture1dArrayLayer"],[3,"StencilTexture2dArrayLayer"],[3,"Texture2dArrayLayer"],[3,"SrgbTexture1dArrayLayer"],[3,"CompressedSrgbTexture1dArrayLayer"],[3,"UnsignedCubemapArrayLayerMipmap"],[3,"Texture1dArrayLayer"],[3,"TextureAnyImage"],[3,"StencilTexture1dArrayLayer"],[3,"DepthTexture1dArrayLayer"],[3,"StencilTexture2dMultisampleArrayLayer"],[3,"DepthStencilTexture1dArrayLayer"],[3,"TextureAnyLayer"],[3,"BufferTextureRef"],[3,"StencilCubemapArrayLayerMipmap"],[3,"DepthStencilTexture2dArrayLayer"],[3,"SrgbCubemapArrayLayer"],[3,"CompressedSrgbTexture2dArrayLayer"],[3,"IntegralTexture2dMultisampleArrayLayer"],[3,"CompressedSrgbCubemapArrayLayerMipmap"],[3,"DepthStencilCubemapArrayLayerMipmap"],[3,"DepthTexture2dArrayLayer"],[3,"GlWindow"],[3,"Context"],[3,"HeadlessContext"],[3,"WindowId"],[3,"DeviceId"],[3,"EventsLoop"],[3,"AvailableMonitorsIter"],[3,"EventsLoopClosed"],[3,"MonitorId"],[3,"EventsLoopProxy"],[3,"WriteMapping"],[3,"Inserter"],[3,"TimestampQuery"],[3,"GlyphCache"]]};
searchIndex["conrod_derive"] = {"doc":"","items":[[5,"widget_common","conrod_derive","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}],[5,"widget_common_","","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}],[5,"widget_style","","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}],[5,"widget_style_","","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}]],"paths":[]};
searchIndex["daggy"] = {"doc":"daggy is a directed acyclic graph data structure library.","items":[[3,"EdgeIndex","daggy","Edge identifier.",null,null],[3,"NodeIndex","","Node identifier.",null,null],[3,"EdgeWeightsMut","","Iterator yielding mutable access to all edge weights.",null,null],[3,"NodeWeightsMut","","Iterator yielding mutable access to all node weights.",null,null],[3,"Dag","","A Directed acyclic graph (DAG) data structure.",null,null],[3,"Children","","A Walker type that can be used to step through the children of some parent node.",null,null],[3,"Parents","","A Walker type that can be used to step through the parents of some child node.",null,null],[3,"EdgeIndices","","An iterator yielding multiple `EdgeIndex`s, returned by the `Graph::add_edges` method.",null,null],[3,"WouldCycle","","An error returned by the `Dag::add_edge` method in the case that adding an edge would have caused the graph to cycle.",null,null],[12,"0","","",0,null],[0,"walker","","Walker is a trait providing a variety of useful methods for traversing graph types.",null,null],[3,"Recursive","daggy::walker","Recursively walks a graph using the recursive function `recursive_fn`.",null,null],[3,"Chain","","Walks the entirety of `a` before walking the entirety of `b`.",null,null],[3,"Filter","","A walker that applies some given predicate to each element returned by its walker. The only index pairs that will be yielded are those that make the predicate evaluate to true.",null,null],[3,"Peekable","","A walker that has a `.peek(&graph)` method that returns an optional next neighbor.",null,null],[3,"SkipWhile","","A walker that invokes the predicate on elements until it returns false. Once the predicate returns false, that element and all further elements are yielded.",null,null],[3,"TakeWhile","","A walker that yields elements so long as the predicate returns true. After the predicate returns false for the first time, no further elements will be yielded.",null,null],[3,"Skip","","A walker that skips the first n steps of this walk, and then yields all further steps.",null,null],[3,"Take","","A walker that yields the first n steps of this walk.",null,null],[3,"Cycle","","A walker that repeats its internal walker endlessly.",null,null],[3,"Inspect","","A walker that calls a function with a reference to each index pair before yielding them. This is often useful for debugging a walker pipeline.",null,null],[3,"Iter","","An iterator yielding index pairs produced by its internal walker and graph.",null,null],[3,"IterEdges","","An iterator yielding edge indices produced by its internal walker and graph.",null,null],[3,"IterNodes","","An iterator yielding node indices produced by its internal walker and graph.",null,null],[3,"IterWeights","","An iterator yielding weights associated with the index pairs produced by its internal walker and graph.",null,null],[3,"IterEdgeWeights","","An iterator yielding edge weights associated with the indices produced by its internal walker and graph.",null,null],[3,"IterNodeWeights","","An iterator yielding node weights associated with the indices produced by its internal walker and graph.",null,null],[6,"IndexPair","","Short-hand for an edge node index pair.",null,null],[8,"Walker","","A trait providing a variety of useful methods for traversing some graph type G.",null,null],[16,"Index","","The unsigned integer type used for node and edge indices.",1,null],[10,"next","","Fetch the `EdgeIndex` and `NodeIndex` to the next neighbour in our walk through the given Graph.",1,{"i":[{"n":"self"},{"n":"g"}],"o":{"g":["indexpair"],"n":"option"}}],[11,"next_edge","","The next edge in our walk for the given Graph.",1,{"i":[{"n":"self"},{"n":"g"}],"o":{"g":["edgeindex"],"n":"option"}}],[11,"next_node","","The next node in our walk for the given Graph.",1,{"i":[{"n":"self"},{"n":"g"}],"o":{"g":["nodeindex"],"n":"option"}}],[11,"count","","Counts all the steps in the entire walk of the given graph.",1,{"i":[{"n":"self"},{"n":"g"}],"o":{"n":"usize"}}],[11,"last","","Walks the whole walk until reaching and returning the last edge node pair.",1,{"i":[{"n":"self"},{"n":"g"}],"o":{"g":["indexpair"],"n":"option"}}],[11,"last_edge","","Walks the whole walk until reaching and returning the last edge.",1,{"i":[{"n":"self"},{"n":"g"}],"o":{"g":["edgeindex"],"n":"option"}}],[11,"last_node","","Walks the whole walk until reaching and returning the last node.",1,{"i":[{"n":"self"},{"n":"g"}],"o":{"g":["nodeindex"],"n":"option"}}],[11,"nth","","Walks \"n\" number of steps and produces the resulting edge node pair.",1,{"i":[{"n":"self"},{"n":"g"},{"n":"usize"}],"o":{"g":["indexpair"],"n":"option"}}],[11,"nth_edge","","Walks \"n\" number of steps and produces the resulting edge.",1,{"i":[{"n":"self"},{"n":"g"},{"n":"usize"}],"o":{"g":["edgeindex"],"n":"option"}}],[11,"nth_node","","Walks \"n\" number of steps and produces the resulting node.",1,{"i":[{"n":"self"},{"n":"g"},{"n":"usize"}],"o":{"g":["nodeindex"],"n":"option"}}],[11,"chain","","Produces a walker that will walk the entirey of `self` before walking the entirey of other.",1,{"i":[{"n":"self"},{"n":"o"}],"o":{"n":"chain"}}],[11,"filter","","Creates a walker that applies the predicate to each element returned by this walker. The only elements that will be yielded are those that make the predicate evaluate to true.",1,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"filter"}}],[11,"peekable","","Creates a walker that has a `.peek(&graph)` method that returns an optional next neighbor.",1,{"i":[{"n":"self"}],"o":{"n":"peekable"}}],[11,"skip_while","","Creates a walker that invokes the predicate on elements until it returns false. Once the predicate returns false, that element and all further elements are yielded.",1,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"skipwhile"}}],[11,"take_while","","Creates a walker that yields elements so long as the predicate returns true. After the predicate returns false for the first time, no further elements will be yielded.",1,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"takewhile"}}],[11,"skip","","Creates a walker that skips the first n steps of this walk, and then yields all further steps.",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"skip"}}],[11,"take","","Creates a walker that yields the first n steps of this walk.",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"take"}}],[11,"all","","Tests whether the predicate holds true for all steps in the walk.",1,{"i":[{"n":"self"},{"n":"g"},{"n":"p"}],"o":{"n":"bool"}}],[11,"any","","Tests whether any step in the walk satisfies the given predicate.",1,{"i":[{"n":"self"},{"n":"g"},{"n":"p"}],"o":{"n":"bool"}}],[11,"find","","Returns the first edge node index pair satisfying the specified predicate.",1,{"i":[{"n":"self"},{"n":"g"},{"n":"p"}],"o":{"g":["indexpair"],"n":"option"}}],[11,"find_edge","","Returns the edge index satisfying the specified predicate.",1,{"i":[{"n":"self"},{"n":"g"},{"n":"p"}],"o":{"g":["edgeindex"],"n":"option"}}],[11,"find_node","","Returns the node index satisfying the specified predicate.",1,{"i":[{"n":"self"},{"n":"g"},{"n":"p"}],"o":{"g":["nodeindex"],"n":"option"}}],[11,"cycle","","Repeats the walker endlessly.",1,{"i":[{"n":"self"}],"o":{"n":"cycle"}}],[11,"fold","","Performs a fold operation over the entire walker, returning the eventual state at the end of the walk.",1,{"i":[{"n":"self"},{"n":"b"},{"n":"g"},{"n":"f"}],"o":{"n":"b"}}],[11,"inspect","","Creates a walker that calls a function with a reference to each index pair before yielding them. This is often useful for debugging a walker pipeline.",1,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspect"}}],[11,"iter","","Converts the walker into an iterator yielding index pairs.",1,{"i":[{"n":"self"},{"n":"g"}],"o":{"n":"iter"}}],[11,"iter_weights","","Converts the walker into an iterator yielding `(&e, &n)`, where `e` is the edge weight for the next `EdgeIndex` and `n` is the node weight for the next `NodeIndex`.",1,{"i":[{"n":"self"},{"n":"g"}],"o":{"n":"iterweights"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"recursive"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new Recursive Walker starting from the node at the given index.",2,{"i":[{"n":"nodeindex"},{"n":"f"}],"o":{"n":"self"}}],[11,"next","","",2,{"i":[{"n":"self"},{"n":"g"}],"o":{"g":["indexpair"],"n":"option"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"chain"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",3,{"i":[{"n":"self"},{"n":"g"}],"o":{"g":["indexpair"],"n":"option"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"filter"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",4,{"i":[{"n":"self"},{"n":"g"}],"o":{"g":["indexpair"],"n":"option"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"peekable"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"peek","","The edge node index pair of the neighbor at the next step in our walk of the given graph.",5,{"i":[{"n":"self"},{"n":"g"}],"o":{"g":["indexpair"],"n":"option"}}],[11,"peek_edge","","The edge index of the neighbor at the next step in our walk of the given graph.",5,{"i":[{"n":"self"},{"n":"g"}],"o":{"g":["edgeindex"],"n":"option"}}],[11,"peek_node","","The node index of the neighbor at the next step in our walk of the given graph.",5,{"i":[{"n":"self"},{"n":"g"}],"o":{"g":["nodeindex"],"n":"option"}}],[11,"next","","",5,{"i":[{"n":"self"},{"n":"g"}],"o":{"g":["indexpair"],"n":"option"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"skipwhile"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",6,{"i":[{"n":"self"},{"n":"g"}],"o":{"g":["indexpair"],"n":"option"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"takewhile"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",7,{"i":[{"n":"self"},{"n":"g"}],"o":{"g":["indexpair"],"n":"option"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"skip"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",8,{"i":[{"n":"self"},{"n":"g"}],"o":{"g":["indexpair"],"n":"option"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"take"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",9,{"i":[{"n":"self"},{"n":"g"}],"o":{"g":["indexpair"],"n":"option"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"cycle"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",10,{"i":[{"n":"self"},{"n":"g"}],"o":{"g":["indexpair"],"n":"option"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"inspect"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",11,{"i":[{"n":"self"},{"n":"g"}],"o":{"g":["indexpair"],"n":"option"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"edges","","Convert to an iterator that only yields the edge indices.",12,{"i":[{"n":"self"}],"o":{"n":"iteredges"}}],[11,"nodes","","Convert to an iterator that only yields the node indices.",12,{"i":[{"n":"self"}],"o":{"n":"iternodes"}}],[11,"next","","",12,{"i":[{"n":"self"}],"o":{"g":["indexpair"],"n":"option"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"iteredges"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",13,{"i":[{"n":"self"}],"o":{"g":["edgeindex"],"n":"option"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"iternodes"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",14,{"i":[{"n":"self"}],"o":{"g":["nodeindex"],"n":"option"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"iterweights"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"edges","","Convert to an iterator yielding only the edge weights.",15,{"i":[{"n":"self"}],"o":{"n":"iteredgeweights"}}],[11,"nodes","","Convert to an iterator yielding only the node weights.",15,{"i":[{"n":"self"}],"o":{"n":"iternodeweights"}}],[11,"next","","",15,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"iteredgeweights"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",16,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"iternodeweights"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",17,{"i":[{"n":"self"}],"o":{"n":"option"}}],[6,"PetGraph","daggy","The Petgraph to be used internally within the Dag for storing/managing nodes and edges.",null,null],[6,"RawNodes","","Read only access into a Dag's internal node array.",null,null],[6,"RawEdges","","Read only access into a Dag's internal edge array.",null,null],[6,"RecursiveWalk","","An alias to simplify the Recursive Walker type returned by Dag.",null,null],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"dag"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"wouldcycle"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new, empty `Dag`.",18,{"o":{"n":"self"}}],[11,"with_capacity","","Create a new `Dag` with estimated capacity for its node and edge Vecs.",18,{"i":[{"n":"usize"},{"n":"usize"}],"o":{"n":"self"}}],[11,"clear","","Removes all nodes and edges from the Dag.",18,{"i":[{"n":"self"}]}],[11,"node_count","","The total number of nodes in the Dag.",18,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"edge_count","","The total number of edgees in the Dag.",18,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"graph","","Borrow the `Dag`'s underlying `PetGraph<N, Ix>`. All existing indices may be used to index into this `PetGraph` the same way they may be used to index into the `Dag`.",18,{"i":[{"n":"self"}],"o":{"n":"petgraph"}}],[11,"into_graph","","Take ownership of the `Dag` and return the internal `PetGraph`. All existing indices may be used to index into this `PetGraph` the same way they may be used to index into the `Dag`.",18,{"i":[{"n":"self"}],"o":{"n":"petgraph"}}],[11,"add_node","","Add a new node to the `Dag` with the given weight.",18,{"i":[{"n":"self"},{"n":"n"}],"o":{"n":"nodeindex"}}],[11,"add_edge","","Add a new directed edge to the `Dag` with the given weight.",18,{"i":[{"n":"self"},{"n":"nodeindex"},{"n":"nodeindex"},{"n":"e"}],"o":{"g":["edgeindex","wouldcycle"],"n":"result"}}],[11,"add_edges","","Adds the given directed edges to the `Dag`, each with their own given weight.",18,{"i":[{"n":"self"},{"n":"i"}],"o":{"g":["edgeindices","wouldcycle"],"n":"result"}}],[11,"update_edge","","Update the edge from nodes `a` -> `b` with the given weight.",18,{"i":[{"n":"self"},{"n":"nodeindex"},{"n":"nodeindex"},{"n":"e"}],"o":{"g":["edgeindex","wouldcycle"],"n":"result"}}],[11,"find_edge","","Find and return the index to the edge that describes `a` -> `b` if there is one.",18,{"i":[{"n":"self"},{"n":"nodeindex"},{"n":"nodeindex"}],"o":{"g":["edgeindex"],"n":"option"}}],[11,"edge_endpoints","","Access the parent and child nodes for the given `EdgeIndex`.",18,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"option"}}],[11,"clear_edges","","Remove all edges.",18,{"i":[{"n":"self"}]}],[11,"add_parent","","Add a new edge and parent node to the node at the given `NodeIndex`. Returns both the edge's `EdgeIndex` and the node's `NodeIndex`.",18,null],[11,"add_child","","Add a new edge and child node to the node at the given `NodeIndex`. Returns both the edge's `EdgeIndex` and the node's `NodeIndex`.",18,null],[11,"node_weight","","Borrow the weight from the node at the given index.",18,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"option"}}],[11,"node_weight_mut","","Mutably borrow the weight from the node at the given index.",18,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"option"}}],[11,"raw_nodes","","Read from the internal node array.",18,{"i":[{"n":"self"}],"o":{"n":"rawnodes"}}],[11,"node_weights_mut","","An iterator yielding mutable access to all node weights.",18,{"i":[{"n":"self"}],"o":{"n":"nodeweightsmut"}}],[11,"edge_weight","","Borrow the weight from the edge at the given index.",18,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"option"}}],[11,"edge_weight_mut","","Mutably borrow the weight from the edge at the given index.",18,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"option"}}],[11,"raw_edges","","Read from the internal edge array.",18,{"i":[{"n":"self"}],"o":{"n":"rawedges"}}],[11,"edge_weights_mut","","An iterator yielding mutable access to all edge weights.",18,{"i":[{"n":"self"}],"o":{"n":"edgeweightsmut"}}],[11,"index_twice_mut","","Index the `Dag` by two indices.",18,null],[11,"remove_node","","Remove the node at the given index from the `Dag` and return it if it exists.",18,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"option"}}],[11,"remove_edge","","Remove an edge and return its weight, or `None` if it didn't exist.",18,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"option"}}],[11,"parents","","A Walker type that may be used to step through the parents of the given child node.",18,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"parents"}}],[11,"children","","A \"walker\" object that may be used to step through the children of the given parent node.",18,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"children"}}],[11,"recursive_walk","","A Walker type that recursively walks the Dag using the given `recursive_fn`.",18,{"i":[{"n":"self"},{"n":"nodeindex"},{"n":"f"}],"o":{"n":"recursivewalk"}}],[11,"index","","",18,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"n"}}],[11,"index_mut","","",18,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"n"}}],[11,"index","","",18,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"e"}}],[11,"index_mut","","",18,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"e"}}],[11,"next","","",19,{"i":[{"n":"self"},{"n":"dag"}],"o":{"n":"option"}}],[11,"next","","",20,{"i":[{"n":"self"},{"n":"dag"}],"o":{"n":"option"}}],[11,"next","","",21,{"i":[{"n":"self"}],"o":{"g":["edgeindex"],"n":"option"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"new","","",22,{"i":[{"n":"usize"}],"o":{"n":"edgeindex"}}],[11,"index","","",22,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"end","","An invalid `EdgeIndex` used to denote absence of an edge, for example to end an adjacency list.",22,{"o":{"n":"edgeindex"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"edgeindex"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"nodeindex"}}],[11,"hash","","",23,null],[11,"hash","","",22,null],[11,"cmp","","",22,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"ordering"}}],[11,"cmp","","",23,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"ordering"}}],[11,"from","","",23,{"i":[{"n":"ix"}],"o":{"n":"nodeindex"}}],[11,"next","","",24,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",24,null],[11,"next","","",25,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",25,null],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"partial_cmp","","",22,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",22,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"bool"}}],[11,"le","","",22,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"bool"}}],[11,"gt","","",22,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"bool"}}],[11,"ge","","",22,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",23,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",23,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"bool"}}],[11,"le","","",23,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"bool"}}],[11,"gt","","",23,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"bool"}}],[11,"ge","","",23,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"bool"}}],[11,"index","","",23,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_node_index","","",23,{"o":{"n":"bool"}}],[11,"index","","",22,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_node_index","","",22,{"o":{"n":"bool"}}],[11,"default","","",23,{"o":{"n":"nodeindex"}}],[11,"default","","",22,{"o":{"n":"edgeindex"}}],[11,"eq","","",23,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"bool"}}],[11,"ne","","",23,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"bool"}}],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"bool"}}],[11,"ne","","",22,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"bool"}}],[11,"new","","",23,{"i":[{"n":"usize"}],"o":{"n":"nodeindex"}}],[11,"index","","",23,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"end","","",23,{"o":{"n":"nodeindex"}}]],"paths":[[3,"WouldCycle"],[8,"Walker"],[3,"Recursive"],[3,"Chain"],[3,"Filter"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Cycle"],[3,"Inspect"],[3,"Iter"],[3,"IterEdges"],[3,"IterNodes"],[3,"IterWeights"],[3,"IterEdgeWeights"],[3,"IterNodeWeights"],[3,"Dag"],[3,"Children"],[3,"Parents"],[3,"EdgeIndices"],[3,"EdgeIndex"],[3,"NodeIndex"],[3,"EdgeWeightsMut"],[3,"NodeWeightsMut"]]};
searchIndex["derivative"] = {"doc":"","items":[[5,"derivative","derivative","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}]],"paths":[]};
searchIndex["dlib"] = {"doc":"","items":[[3,"Library","dlib","A loaded dynamic library.",null,null],[3,"Symbol","","Symbol from a library.",null,null],[4,"DlError","","",null,null],[13,"NotFound","","",0,null],[13,"MissingSymbol","","",0,null],[14,"ffi_dispatch","","",null,null],[14,"ffi_dispatch_static","","",null,null],[14,"link_external_library","","",null,null],[14,"dlopen_external_library","","",null,null],[14,"external_library","","",null,null],[11,"new","","Find and load a dynamic library.",1,{"i":[{"n":"p"}],"o":{"g":["library","error"],"n":"result"}}],[11,"get","","Get a pointer to function or static variable by symbol name.",1,null],[11,"deref","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"from","","",1,{"i":[{"n":"library"}],"o":{"n":"library"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"symbol"}}],[11,"into_raw","","Extract the wrapped `os::platform::Symbol`.",2,{"i":[{"n":"self"}],"o":{"n":"symbol"}}],[11,"from_raw","","Wrap the `os::platform::Symbol` into this safe wrapper.",2,{"i":[{"n":"symbol"},{"n":"l"}],"o":{"n":"symbol"}}],[11,"lift_option","","Lift Option out of the symbol.",2,{"i":[{"n":"self"}],"o":{"g":["symbol"],"n":"option"}}]],"paths":[[4,"DlError"],[3,"Library"],[3,"Symbol"]]};
searchIndex["draw_state"] = {"doc":"Graphics state blocks for gfx-rs","items":[[0,"preset","draw_state","State presets",null,null],[0,"blend","draw_state::preset","Blending preset modes.",null,null],[17,"REPLACE","draw_state::preset::blend","When combining two fragments, choose the source value",null,null],[17,"ADD","","When combining two fragments, add their values together, saturating at 1.0",null,null],[17,"MULTIPLY","","When combining two fragments, multiply their values together.",null,null],[17,"ALPHA","","When combining two fragments, add the value of the source times its alpha channel with the value of the destination multiplied by the inverse of the source alpha channel. Has the usual transparency effect: mixes the two colors using a fraction of each one specified by the alpha of the source.",null,null],[17,"INVERT","","When combining two fragments, subtract the destination color from a constant color using the source color as weight. Has an invert effect with the constant color as base and source color controlling displacement from the base color. A white source color and a white value results in plain invert. The output alpha is same as destination alpha.",null,null],[0,"depth","draw_state::preset","Depth presets for depth tests.",null,null],[17,"PASS_TEST","draw_state::preset::depth","When rendering a fragment, draw regardless of depth buffer state. Rendering will not update the depth buffer.",null,null],[17,"PASS_WRITE","","When rendering a fragment, draw regardless of depth buffer state. Rendering will update the depth buffer.",null,null],[17,"LESS_EQUAL_TEST","","\"<=\" comparison with read-only depth",null,null],[17,"LESS_EQUAL_WRITE","","When rendering a fragment, only draw when the fragment's output depth is less than or equal to the current depth buffer value. Rendering will update the depth buffer with the new depth value.",null,null],[0,"state","draw_state","Fixed-function hardware state.",null,null],[3,"Offset","draw_state::state","How to offset vertices in screen space, if at all.",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[3,"MultiSample","","Multi-sampling rasterization mode",null,null],[3,"Rasterizer","","Primitive rasterization state. Note that GL allows different raster method to be used for front and back, while this abstraction does not.",null,null],[12,"front_face","","Which vertex winding is considered to be the front face for culling.",1,null],[12,"cull_face","","Which face should be culled.",1,null],[12,"method","","How to rasterize this primitive.",1,null],[12,"offset","","Any polygon offset to apply.",1,null],[12,"samples","","Multi-sampling mode.",1,null],[3,"StencilSide","","Complete stencil state for a given side of a face.",null,null],[12,"fun","","Comparison function to use to determine if the stencil test passes.",2,null],[12,"mask_read","","A mask that is ANDd with both the stencil buffer value and the reference value when they are read before doing the stencil test.",2,null],[12,"mask_write","","A mask that is ANDd with the stencil value before writing to the stencil buffer.",2,null],[12,"op_fail","","What operation to do if the stencil test fails.",2,null],[12,"op_depth_fail","","What operation to do if the stenil test passes but the depth test fails.",2,null],[12,"op_pass","","What operation to do if both the depth and stencil test pass.",2,null],[3,"Stencil","","Complete stencil state, specifying how to handle the front and back side of a face.",null,null],[12,"front","","",3,null],[12,"back","","",3,null],[3,"Depth","","Depth test state.",null,null],[12,"fun","","Comparison function to use.",4,null],[12,"write","","Specify whether to write to the depth buffer or not.",4,null],[3,"BlendChannel","","",null,null],[12,"equation","","",5,null],[12,"source","","",5,null],[12,"destination","","",5,null],[3,"Blend","","",null,null],[12,"color","","",6,null],[12,"alpha","","",6,null],[3,"ColorMask","","",null,null],[3,"Color","","The state of an active color render target",null,null],[12,"mask","","Color mask to use.",7,null],[12,"blend","","Optional blending.",7,null],[3,"RefValues","","The complete set of the rasterizer reference values. Switching these doesn't roll the hardware context.",null,null],[12,"stencil","","Stencil front and back values.",8,null],[12,"blend","","Constant blend color.",8,null],[4,"FrontFace","","The front face winding order of a set of vertices.",null,null],[13,"Clockwise","","Clockwise winding order.",9,null],[13,"CounterClockwise","","Counter-clockwise winding order.",9,null],[4,"CullFace","","Which face, if any, to cull.",null,null],[13,"Nothing","","",10,null],[13,"Front","","",10,null],[13,"Back","","",10,null],[4,"RasterMethod","","How to rasterize a primitive.",null,null],[13,"Point","","Rasterize as a point.",11,null],[13,"Line","","Rasterize as a line with the given width.",11,null],[13,"Fill","","Rasterize as a face.",11,null],[4,"Comparison","","A pixel-wise comparison function.",null,null],[13,"Never","","`false`",12,null],[13,"Less","","`x < y`",12,null],[13,"LessEqual","","`x <= y`",12,null],[13,"Equal","","`x == y`",12,null],[13,"GreaterEqual","","`x >= y`",12,null],[13,"Greater","","`x > y`",12,null],[13,"NotEqual","","`x != y`",12,null],[13,"Always","","`true`",12,null],[4,"StencilOp","","Stencil mask operation.",null,null],[13,"Keep","","Keep the current value in the stencil buffer (no change).",13,null],[13,"Zero","","Set the value in the stencil buffer to zero.",13,null],[13,"Replace","","Set the stencil buffer value to `value` from `StencilSide`",13,null],[13,"IncrementClamp","","Increment the stencil buffer value, clamping to its maximum value.",13,null],[13,"IncrementWrap","","Increment the stencil buffer value, wrapping around to 0 on overflow.",13,null],[13,"DecrementClamp","","Decrement the stencil buffer value, clamping to its minimum value.",13,null],[13,"DecrementWrap","","Decrement the stencil buffer value, wrapping around to the maximum value on overflow.",13,null],[13,"Invert","","Bitwise invert the current value in the stencil buffer.",13,null],[4,"Equation","","",null,null],[13,"Add","","Adds source and destination. Source and destination are multiplied by blending parameters before addition.",14,null],[13,"Sub","","Subtracts destination from source. Source and destination are multiplied by blending parameters before subtraction.",14,null],[13,"RevSub","","Subtracts source from destination. Source and destination are multiplied by blending parameters before subtraction.",14,null],[13,"Min","","Component-wise minimum value of source and destination. Blending parameters are ignored.",14,null],[13,"Max","","Component-wise maximum value of source and destination. Blending parameters are ignored.",14,null],[4,"BlendValue","","",null,null],[13,"SourceColor","","",15,null],[13,"SourceAlpha","","",15,null],[13,"DestColor","","",15,null],[13,"DestAlpha","","",15,null],[13,"ConstColor","","",15,null],[13,"ConstAlpha","","",15,null],[4,"Factor","","",null,null],[13,"Zero","","",16,null],[13,"One","","",16,null],[13,"SourceAlphaSaturated","","",16,null],[13,"ZeroPlus","","",16,null],[13,"OneMinus","","",16,null],[6,"LineWidth","","Width of a line. Could be f32 if not for Hash deriving issues.",null,null],[6,"OffsetSlope","","Slope depth offset factor Could be f32 if not for Hash deriving issues.",null,null],[6,"OffsetUnits","","Number of units to offset, where the unit is the minimal difference in the depth value dictated by the precision of the depth buffer.",null,null],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"frontface"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",9,null],[11,"cmp","","",9,{"i":[{"n":"self"},{"n":"frontface"}],"o":{"n":"ordering"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"frontface"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",9,{"i":[{"n":"self"},{"n":"frontface"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"offset"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"offset"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"cullface"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",10,null],[11,"cmp","","",10,{"i":[{"n":"self"},{"n":"cullface"}],"o":{"n":"ordering"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"cullface"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",10,{"i":[{"n":"self"},{"n":"cullface"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"rastermethod"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",11,null],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"ne","","",11,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",11,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",11,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"le","","",11,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"gt","","",11,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"ge","","",11,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"multisample"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",17,null],[11,"cmp","","",17,{"i":[{"n":"self"},{"n":"multisample"}],"o":{"n":"ordering"}}],[11,"eq","","",17,{"i":[{"n":"self"},{"n":"multisample"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",17,{"i":[{"n":"self"},{"n":"multisample"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"rasterizer"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",1,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"le","","",1,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"gt","","",1,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"ge","","",1,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"new_fill","","Create a new filling rasterizer.",1,{"o":{"n":"self"}}],[11,"with_cull_back","","Add back face culling.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"with_offset","","Add polygon offset.",1,{"i":[{"n":"self"},{"n":"f32"},{"n":"offsetunits"}],"o":{"n":"self"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"comparison"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",12,null],[11,"cmp","","",12,{"i":[{"n":"self"},{"n":"comparison"}],"o":{"n":"ordering"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"comparison"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",12,{"i":[{"n":"self"},{"n":"comparison"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"stencilop"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",13,null],[11,"cmp","","",13,{"i":[{"n":"self"},{"n":"stencilop"}],"o":{"n":"ordering"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"stencilop"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",13,{"i":[{"n":"self"},{"n":"stencilop"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"stencilside"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",2,null],[11,"cmp","","",2,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"ordering"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",2,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"le","","",2,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"gt","","",2,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"ge","","",2,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"default","","",2,{"o":{"n":"self"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"stencil"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",3,{"o":{"n":"stencil"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"ordering"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",3,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",3,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"le","","",3,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"gt","","",3,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"ge","","",3,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"new","","Create a new stencil state with a given function.",3,null],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"depth"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"ordering"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"depth"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",4,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"le","","",4,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"gt","","",4,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"ge","","",4,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"default","","",4,{"o":{"n":"self"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"equation"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",14,null],[11,"cmp","","",14,{"i":[{"n":"self"},{"n":"equation"}],"o":{"n":"ordering"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"equation"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",14,{"i":[{"n":"self"},{"n":"equation"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"blendvalue"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",15,null],[11,"cmp","","",15,{"i":[{"n":"self"},{"n":"blendvalue"}],"o":{"n":"ordering"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"blendvalue"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",15,{"i":[{"n":"self"},{"n":"blendvalue"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"factor"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",16,null],[11,"cmp","","",16,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"ordering"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"ne","","",16,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",16,{"i":[{"n":"self"},{"n":"factor"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",16,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"le","","",16,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"gt","","",16,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"ge","","",16,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"blendchannel"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",5,null],[11,"cmp","","",5,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"ordering"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",5,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",5,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"le","","",5,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"gt","","",5,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"ge","","",5,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"default","","",5,{"o":{"n":"self"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"blend"}}],[11,"default","","",6,{"o":{"n":"blend"}}],[11,"hash","","",6,null],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"ne","","",6,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",6,{"i":[{"n":"self"},{"n":"blend"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",6,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"le","","",6,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"gt","","",6,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"ge","","",6,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"new","","Create a new blend state with a given equation.",6,{"i":[{"n":"equation"},{"n":"factor"},{"n":"factor"}],"o":{"n":"self"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"ne","","",18,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"colormask"}}],[11,"partial_cmp","","",18,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",18,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"le","","",18,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"gt","","",18,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"ge","","",18,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"cmp","","",18,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"ordering"}}],[11,"hash","","",18,null],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"RED","","",18,null],[18,"GREEN","","",18,null],[18,"BLUE","","",18,null],[18,"ALPHA","","",18,null],[11,"empty","","Returns an empty set of flags.",18,{"o":{"n":"colormask"}}],[11,"all","","Returns the set containing all flags.",18,{"o":{"n":"colormask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",18,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",18,{"i":[{"n":"u8"}],"o":{"g":["colormask"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",18,{"i":[{"n":"u8"}],"o":{"n":"colormask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",18,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",18,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",18,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",18,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",18,{"i":[{"n":"self"},{"n":"colormask"}]}],[11,"remove","","Removes the specified flags in-place.",18,{"i":[{"n":"self"},{"n":"colormask"}]}],[11,"toggle","","Toggles the specified flags in-place.",18,{"i":[{"n":"self"},{"n":"colormask"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",18,{"i":[{"n":"self"},{"n":"colormask"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",18,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"colormask"}}],[11,"bitor_assign","","Adds the set of flags.",18,{"i":[{"n":"self"},{"n":"colormask"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",18,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"colormask"}}],[11,"bitxor_assign","","Toggles the set of flags.",18,{"i":[{"n":"self"},{"n":"colormask"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",18,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"colormask"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",18,{"i":[{"n":"self"},{"n":"colormask"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",18,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"colormask"}}],[11,"sub_assign","","Disables all flags enabled in the set.",18,{"i":[{"n":"self"},{"n":"colormask"}]}],[11,"not","","Returns the complement of this set of flags.",18,{"i":[{"n":"self"}],"o":{"n":"colormask"}}],[11,"extend","","",18,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",18,{"i":[{"n":"t"}],"o":{"n":"colormask"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"color"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",7,null],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",7,{"i":[{"n":"self"},{"n":"color"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",7,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"le","","",7,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"gt","","",7,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"ge","","",7,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"default","","",7,{"o":{"n":"self"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"refvalues"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",8,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",8,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"le","","",8,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"gt","","",8,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"ge","","",8,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"default","","",8,{"o":{"n":"self"}}],[0,"target","draw_state","Render target specification.",null,null],[3,"Rect","draw_state::target","A screen space rectangle",null,null],[12,"x","","",19,null],[12,"y","","",19,null],[12,"w","","",19,null],[12,"h","","",19,null],[3,"Mirror","","Mirroring flags, used for blitting",null,null],[6,"Layer","","A depth value, specifying which plane to select out of a 3D texture.",null,null],[6,"Level","","Mipmap level to select in a texture.",null,null],[6,"Depth","","A single depth value from a depth buffer.",null,null],[6,"Stencil","","A single value from a stencil stencstencil buffer.",null,null],[6,"ColorValue","","A color with floating-point components.",null,null],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"rect"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",19,null],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"ne","","",19,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",19,{"i":[{"n":"self"},{"n":"rect"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",19,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"le","","",19,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"gt","","",19,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"ge","","",19,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"ne","","",20,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"mirror"}}],[11,"partial_cmp","","",20,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",20,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"le","","",20,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"gt","","",20,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"ge","","",20,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"cmp","","",20,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"ordering"}}],[11,"hash","","",20,null],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"X","","",20,null],[18,"Y","","",20,null],[11,"empty","","Returns an empty set of flags.",20,{"o":{"n":"mirror"}}],[11,"all","","Returns the set containing all flags.",20,{"o":{"n":"mirror"}}],[11,"bits","","Returns the raw value of the flags currently stored.",20,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",20,{"i":[{"n":"u8"}],"o":{"g":["mirror"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",20,{"i":[{"n":"u8"}],"o":{"n":"mirror"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",20,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",20,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",20,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",20,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",20,{"i":[{"n":"self"},{"n":"mirror"}]}],[11,"remove","","Removes the specified flags in-place.",20,{"i":[{"n":"self"},{"n":"mirror"}]}],[11,"toggle","","Toggles the specified flags in-place.",20,{"i":[{"n":"self"},{"n":"mirror"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",20,{"i":[{"n":"self"},{"n":"mirror"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",20,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"mirror"}}],[11,"bitor_assign","","Adds the set of flags.",20,{"i":[{"n":"self"},{"n":"mirror"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",20,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"mirror"}}],[11,"bitxor_assign","","Toggles the set of flags.",20,{"i":[{"n":"self"},{"n":"mirror"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",20,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"mirror"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",20,{"i":[{"n":"self"},{"n":"mirror"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",20,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"mirror"}}],[11,"sub_assign","","Disables all flags enabled in the set.",20,{"i":[{"n":"self"},{"n":"mirror"}]}],[11,"not","","Returns the complement of this set of flags.",20,{"i":[{"n":"self"}],"o":{"n":"mirror"}}],[11,"extend","","",20,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",20,{"i":[{"n":"t"}],"o":{"n":"mirror"}}]],"paths":[[3,"Offset"],[3,"Rasterizer"],[3,"StencilSide"],[3,"Stencil"],[3,"Depth"],[3,"BlendChannel"],[3,"Blend"],[3,"Color"],[3,"RefValues"],[4,"FrontFace"],[4,"CullFace"],[4,"RasterMethod"],[4,"Comparison"],[4,"StencilOp"],[4,"Equation"],[4,"BlendValue"],[4,"Factor"],[3,"MultiSample"],[3,"ColorMask"],[3,"Rect"],[3,"Mirror"]]};
searchIndex["either"] = {"doc":"The enum [`Either`] with variants `Left` and `Right` is a general purpose sum type with two cases.","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"i":[{"n":"self"},{"n":"f"},{"n":"g"}],"o":{"n":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"i":[{"n":"self"},{"n":"ctx"},{"n":"f"},{"n":"g"}],"o":{"n":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"from","","",0,{"i":[{"n":"result"}],"o":{"n":"self"}}],[11,"into","","",0,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"extend","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"next","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"i":[{"n":"self"},{"n":"acc"},{"n":"g"}],"o":{"n":"acc"}}],[11,"count","","",0,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"last","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"nth","","",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"collect","","",0,{"i":[{"n":"self"}],"o":{"n":"b"}}],[11,"all","","",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"bool"}}],[11,"next_back","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_ref","","",0,{"i":[{"n":"self"}],"o":{"n":"target"}}],[11,"as_mut","","",0,{"i":[{"n":"self"}],"o":{"n":"target"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",null,null],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",null,null]],"paths":[[4,"Either"]]};
searchIndex["fixedbitset"] = {"doc":"`FixedBitSet` is a simple fixed size set of bits.","items":[[3,"FixedBitSet","fixedbitset","`FixedBitSet` is a simple fixed size set of bits that each can be enabled (1 / true) or disabled (0 / false).",null,null],[3,"Difference","","An iterator producing elements in the difference of two sets.",null,null],[3,"Intersection","","An iterator producing elements in the intersection of two sets.",null,null],[3,"Union","","An iterator producing elements in the union of two sets.",null,null],[3,"Ones","","An  iterator producing the indices of the set bit in a set.",null,null],[8,"IndexRange","","IndexRange is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"end","","End index (exclusive)",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"fixedbitset"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"fixedbitset"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"fixedbitset"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",1,{"i":[{"n":"self"},{"n":"fixedbitset"}],"o":{"n":"bool"}}],[11,"le","","",1,{"i":[{"n":"self"},{"n":"fixedbitset"}],"o":{"n":"bool"}}],[11,"gt","","",1,{"i":[{"n":"self"},{"n":"fixedbitset"}],"o":{"n":"bool"}}],[11,"ge","","",1,{"i":[{"n":"self"},{"n":"fixedbitset"}],"o":{"n":"bool"}}],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"fixedbitset"}],"o":{"n":"ordering"}}],[11,"hash","","",1,null],[11,"default","","",1,{"o":{"n":"fixedbitset"}}],[11,"with_capacity","","Create a new FixedBitSet with a specific number of bits, all initially clear.",1,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"grow","","Grow capacity to bits, all new bits initialized to zero",1,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"len","","Return the length of the `FixedBitSet` in bits.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"contains","","Return true if the bit is enabled in the FixedBitSet, false otherwise.",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"clear","","Clear all bits.",1,{"i":[{"n":"self"}]}],[11,"insert","","Enable `bit`.",1,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"put","","Enable `bit`, and return its previous value.",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"set","","Panics if bit is out of bounds.",1,{"i":[{"n":"self"},{"n":"usize"},{"n":"bool"}]}],[11,"copy_bit","","Copies boolean value from specified bit to the specified bit.",1,{"i":[{"n":"self"},{"n":"usize"},{"n":"usize"}]}],[11,"count_ones","","Count the number of set bits in the given bit range.",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"usize"}}],[11,"set_range","","Sets every bit in the given range to the given state (`enabled`)",1,{"i":[{"n":"self"},{"n":"t"},{"n":"bool"}]}],[11,"insert_range","","Enables every bit in the given range.",1,{"i":[{"n":"self"},{"n":"t"}]}],[11,"as_slice","","View the bitset as a slice of `u32` blocks",1,null],[11,"as_mut_slice","","View the bitset as a mutable slice of `u32` blocks. Writing past the bitlength in the last will cause `contains` to return potentially incorrect results for bits past the bitlength.",1,null],[11,"ones","","Iterates over all enabled bits.",1,{"i":[{"n":"self"}],"o":{"n":"ones"}}],[11,"intersection","","Returns a lazy iterator over the intersection of two `FixedBitSet`s",1,{"i":[{"n":"self"},{"n":"fixedbitset"}],"o":{"n":"intersection"}}],[11,"union","","Returns a lazy iterator over the union of two `FixedBitSet`s.",1,{"i":[{"n":"self"},{"n":"fixedbitset"}],"o":{"n":"union"}}],[11,"difference","","Returns a lazy iterator over the difference of two `FixedBitSet`s. The difference of `a` and `b` is the elements of `a` which are not in `b`.",1,{"i":[{"n":"self"},{"n":"fixedbitset"}],"o":{"n":"difference"}}],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",3,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"index","","",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"extend","","",1,{"i":[{"n":"self"},{"n":"i"}]}],[11,"from_iter","","",1,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"start","","Start index (inclusive)",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"end","","End index (exclusive)",0,{"i":[{"n":"self"}],"o":{"n":"option"}}]],"paths":[[8,"IndexRange"],[3,"FixedBitSet"],[3,"Difference"],[3,"Intersection"],[3,"Union"],[3,"Ones"]]};
searchIndex["float"] = {"doc":"Traits for generic floats in game programming","items":[[8,"Float","float","Convenience trait for floats.",null,null],[8,"Min","","Minimum value.",null,null],[10,"min","","Returns the minimum value of self or other.",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"Max","","Maximum value.",null,null],[10,"max","","Returns the maximum value of self or other.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"Signum","","The sign of the number.",null,null],[10,"signum","","Returns number representing the sign of self",2,{"i":[{"n":"self"}],"o":{"n":"self"}}],[8,"Powf","","Floating number power.",null,null],[10,"powf","","Returns floating power of the number.",3,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"Radians","","Useful constants for radians.",null,null],[10,"_90","","Returns radians corresponding to 90 degrees.",4,{"o":{"n":"self"}}],[10,"_180","","Returns radians corresponding to 180 degrees.",4,{"o":{"n":"self"}}],[10,"_360","","Returns radians corresponding to 360 degrees.",4,{"o":{"n":"self"}}],[10,"deg_to_rad","","Convert a value to radians from degrees. Equivalent to `value * (π / 180)`.",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"rad_to_deg","","Convert a value to degrees from radians. Equivalent to `value * (180 / π)`.",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[8,"One","","Number 1.",null,null],[10,"one","","Returns 1.",5,{"o":{"n":"self"}}],[8,"Zero","","Number 0.",null,null],[10,"zero","","Returns 0.",6,{"o":{"n":"self"}}],[8,"Sqrt","","Square root.",null,null],[10,"sqrt","","Returns square root.",7,{"i":[{"n":"self"}],"o":{"n":"self"}}],[8,"Trig","","Basic trigonometry functions",null,null],[10,"sin","","Returns sine of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Returns cosine of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Returns tangent of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Returns inverse sine of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Returns inverse cosine of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Returns inverse tangent of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Returns the four quadrant arctangent of self (y) and other (x).",8,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Returns hyperbolic sine of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Returns hyperbolic cosine of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Returns hyperbolic tangent of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Returns inverse hyperbolic sine of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Returns inverse hyperbolic cosine of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Returns inverse hyperbolic tangent of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[8,"Cast","","Casts into another type.",null,null],[10,"cast","","Casts into other type.",9,{"i":[{"n":"self"}],"o":{"n":"t"}}],[8,"FromPrimitive","","Trait for converting from different numeric types",null,null],[10,"from_f64","","from a f64",10,{"i":[{"n":"f64"}],"o":{"n":"self"}}],[10,"from_f32","","from a f32",10,{"i":[{"n":"f32"}],"o":{"n":"self"}}],[10,"from_isize","","from a isze",10,{"i":[{"n":"isize"}],"o":{"n":"self"}}],[10,"from_u32","","from a u32",10,{"i":[{"n":"u32"}],"o":{"n":"self"}}],[10,"from_i32","","from a i32",10,{"i":[{"n":"i32"}],"o":{"n":"self"}}]],"paths":[[8,"Min"],[8,"Max"],[8,"Signum"],[8,"Powf"],[8,"Radians"],[8,"One"],[8,"Zero"],[8,"Sqrt"],[8,"Trig"],[8,"Cast"],[8,"FromPrimitive"]]};
searchIndex["fnv"] = {"doc":"An implementation of the [Fowler–Noll–Vo hash function][chongo].","items":[[3,"FnvHasher","fnv","An implementation of the Fowler–Noll–Vo hash function.",null,null],[6,"FnvBuildHasher","","A builder for default FNV hashers.",null,null],[6,"FnvHashMap","","A `HashMap` using a default FNV hasher.",null,null],[6,"FnvHashSet","","A `HashSet` using a default FNV hasher.",null,null],[11,"default","","",0,{"o":{"n":"fnvhasher"}}],[11,"with_key","","Create an FNV hasher starting with a state corresponding to the hash `key`.",0,{"i":[{"n":"u64"}],"o":{"n":"fnvhasher"}}],[11,"finish","","",0,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"write","","",0,null]],"paths":[[3,"FnvHasher"]]};
searchIndex["gfx"] = {"doc":"gfx","items":[[0,"preset","gfx","State presets",null,null],[0,"blend","gfx::preset","Blending preset modes.",null,null],[17,"REPLACE","gfx::preset::blend","When combining two fragments, choose the source value",null,null],[17,"ADD","","When combining two fragments, add their values together, saturating at 1.0",null,null],[17,"MULTIPLY","","When combining two fragments, multiply their values together.",null,null],[17,"ALPHA","","When combining two fragments, add the value of the source times its alpha channel with the value of the destination multiplied by the inverse of the source alpha channel. Has the usual transparency effect: mixes the two colors using a fraction of each one specified by the alpha of the source.",null,null],[17,"INVERT","","When combining two fragments, subtract the destination color from a constant color using the source color as weight. Has an invert effect with the constant color as base and source color controlling displacement from the base color. A white source color and a white value results in plain invert. The output alpha is same as destination alpha.",null,null],[0,"depth","gfx::preset","Depth presets for depth tests.",null,null],[17,"PASS_TEST","gfx::preset::depth","When rendering a fragment, draw regardless of depth buffer state. Rendering will not update the depth buffer.",null,null],[17,"PASS_WRITE","","When rendering a fragment, draw regardless of depth buffer state. Rendering will update the depth buffer.",null,null],[17,"LESS_EQUAL_TEST","","\"<=\" comparison with read-only depth",null,null],[17,"LESS_EQUAL_WRITE","","When rendering a fragment, only draw when the fragment's output depth is less than or equal to the current depth buffer value. Rendering will update the depth buffer with the new depth value.",null,null],[0,"state","gfx","Fixed-function hardware state.",null,null],[4,"FrontFace","gfx::state","The front face winding order of a set of vertices.",null,null],[13,"Clockwise","","Clockwise winding order.",0,null],[13,"CounterClockwise","","Counter-clockwise winding order.",0,null],[6,"LineWidth","","Width of a line. Could be f32 if not for Hash deriving issues.",null,null],[6,"OffsetSlope","","Slope depth offset factor Could be f32 if not for Hash deriving issues.",null,null],[6,"OffsetUnits","","Number of units to offset, where the unit is the minimal difference in the depth value dictated by the precision of the depth buffer.",null,null],[3,"Offset","","How to offset vertices in screen space, if at all.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[4,"CullFace","","Which face, if any, to cull.",null,null],[13,"Nothing","","",2,null],[13,"Front","","",2,null],[13,"Back","","",2,null],[4,"RasterMethod","","How to rasterize a primitive.",null,null],[13,"Point","","Rasterize as a point.",3,null],[13,"Line","","Rasterize as a line with the given width.",3,null],[13,"Fill","","Rasterize as a face.",3,null],[3,"MultiSample","","Multi-sampling rasterization mode",null,null],[3,"Rasterizer","","Primitive rasterization state. Note that GL allows different raster method to be used for front and back, while this abstraction does not.",null,null],[12,"front_face","","Which vertex winding is considered to be the front face for culling.",4,null],[12,"cull_face","","Which face should be culled.",4,null],[12,"method","","How to rasterize this primitive.",4,null],[12,"offset","","Any polygon offset to apply.",4,null],[12,"samples","","Multi-sampling mode.",4,null],[4,"Comparison","","A pixel-wise comparison function.",null,null],[13,"Never","","`false`",5,null],[13,"Less","","`x < y`",5,null],[13,"LessEqual","","`x <= y`",5,null],[13,"Equal","","`x == y`",5,null],[13,"GreaterEqual","","`x >= y`",5,null],[13,"Greater","","`x > y`",5,null],[13,"NotEqual","","`x != y`",5,null],[13,"Always","","`true`",5,null],[4,"StencilOp","","Stencil mask operation.",null,null],[13,"Keep","","Keep the current value in the stencil buffer (no change).",6,null],[13,"Zero","","Set the value in the stencil buffer to zero.",6,null],[13,"Replace","","Set the stencil buffer value to `value` from `StencilSide`",6,null],[13,"IncrementClamp","","Increment the stencil buffer value, clamping to its maximum value.",6,null],[13,"IncrementWrap","","Increment the stencil buffer value, wrapping around to 0 on overflow.",6,null],[13,"DecrementClamp","","Decrement the stencil buffer value, clamping to its minimum value.",6,null],[13,"DecrementWrap","","Decrement the stencil buffer value, wrapping around to the maximum value on overflow.",6,null],[13,"Invert","","Bitwise invert the current value in the stencil buffer.",6,null],[3,"StencilSide","","Complete stencil state for a given side of a face.",null,null],[12,"fun","","Comparison function to use to determine if the stencil test passes.",7,null],[12,"mask_read","","A mask that is ANDd with both the stencil buffer value and the reference value when they are read before doing the stencil test.",7,null],[12,"mask_write","","A mask that is ANDd with the stencil value before writing to the stencil buffer.",7,null],[12,"op_fail","","What operation to do if the stencil test fails.",7,null],[12,"op_depth_fail","","What operation to do if the stenil test passes but the depth test fails.",7,null],[12,"op_pass","","What operation to do if both the depth and stencil test pass.",7,null],[3,"Stencil","","Complete stencil state, specifying how to handle the front and back side of a face.",null,null],[12,"front","","",8,null],[12,"back","","",8,null],[3,"Depth","","Depth test state.",null,null],[12,"fun","","Comparison function to use.",9,null],[12,"write","","Specify whether to write to the depth buffer or not.",9,null],[4,"Equation","","",null,null],[13,"Add","","Adds source and destination. Source and destination are multiplied by blending parameters before addition.",10,null],[13,"Sub","","Subtracts destination from source. Source and destination are multiplied by blending parameters before subtraction.",10,null],[13,"RevSub","","Subtracts source from destination. Source and destination are multiplied by blending parameters before subtraction.",10,null],[13,"Min","","Component-wise minimum value of source and destination. Blending parameters are ignored.",10,null],[13,"Max","","Component-wise maximum value of source and destination. Blending parameters are ignored.",10,null],[4,"BlendValue","","",null,null],[13,"SourceColor","","",11,null],[13,"SourceAlpha","","",11,null],[13,"DestColor","","",11,null],[13,"DestAlpha","","",11,null],[13,"ConstColor","","",11,null],[13,"ConstAlpha","","",11,null],[4,"Factor","","",null,null],[13,"Zero","","",12,null],[13,"One","","",12,null],[13,"SourceAlphaSaturated","","",12,null],[13,"ZeroPlus","","",12,null],[13,"OneMinus","","",12,null],[3,"BlendChannel","","",null,null],[12,"equation","","",13,null],[12,"source","","",13,null],[12,"destination","","",13,null],[3,"Blend","","",null,null],[12,"color","","",14,null],[12,"alpha","","",14,null],[3,"ColorMask","","",null,null],[3,"Color","","The state of an active color render target",null,null],[12,"mask","","Color mask to use.",15,null],[12,"blend","","Optional blending.",15,null],[3,"RefValues","","The complete set of the rasterizer reference values. Switching these doesn't roll the hardware context.",null,null],[12,"stencil","","Stencil front and back values.",16,null],[12,"blend","","Constant blend color.",16,null],[6,"Layer","gfx","A depth value, specifying which plane to select out of a 3D texture.",null,null],[6,"Level","","Mipmap level to select in a texture.",null,null],[6,"Depth","","A single depth value from a depth buffer.",null,null],[6,"Stencil","","A single value from a stencil stencstencil buffer.",null,null],[3,"Rect","","A screen space rectangle",null,null],[12,"x","","",17,null],[12,"y","","",17,null],[12,"w","","",17,null],[12,"h","","",17,null],[6,"ColorValue","","A color with floating-point components.",null,null],[3,"Mirror","","Mirroring flags, used for blitting",null,null],[8,"Device","","A `Device` is responsible for submitting `CommandBuffer`s to the GPU.",null,null],[16,"Resources","","Associated `Resources` type.",18,null],[16,"CommandBuffer","","Associated `CommandBuffer` type. Every `Device` type can only work with one `CommandBuffer` type.",18,null],[10,"get_capabilities","","Returns the capabilities of this `Device`.",18,{"i":[{"n":"self"}],"o":{"n":"capabilities"}}],[10,"pin_submitted_resources","","Pin everything from this handle manager to live for a frame.",18,null],[10,"submit","","Submits a `CommandBuffer` to the GPU for execution.",18,null],[10,"fenced_submit","","Submits a `CommandBuffer` to the GPU for execution. returns a fence that is signaled after the GPU has executed all commands",18,null],[10,"wait_fence","","Stalls the current thread until the fence is satisfied",18,null],[10,"cleanup","","Cleanup unused resources. This should be called between frames.",18,null],[4,"Primitive","","Describes what geometric primitives are created from vertex data.",null,null],[13,"PointList","","Each vertex represents a single point.",19,null],[13,"LineList","","Each pair of vertices represent a single line segment. For example, with `[a, b, c, d, e]`, `a` and `b` form a line, `c` and `d` form a line, and `e` is discarded.",19,null],[13,"LineStrip","","Every two consecutive vertices represent a single line segment. Visually forms a \"path\" of lines, as they are all connected. For example, with `[a, b, c]`, `a` and `b` form a line line, and `b` and `c` form a line.",19,null],[13,"TriangleList","","Each triplet of vertices represent a single triangle. For example, with `[a, b, c, d, e]`, `a`, `b`, and `c` form a triangle, `d` and `e` are discarded.",19,null],[13,"TriangleStrip","","Every three consecutive vertices represent a single triangle. For example, with `[a, b, c, d]`, `a`, `b`, and `c` form a triangle, and `b`, `c`, and `d` form a triangle.",19,null],[13,"LineListAdjacency","","Each quadtruplet of vertices represent a single line segment with adjacency information. For example, with `[a, b, c, d]`, `b` and `c` form a line, and `a` and `d` are the adjacent vertices.",19,null],[13,"LineStripAdjacency","","Every four consecutive vertices represent a single line segment with adjacency information. For example, with `[a, b, c, d, e]`, `[a, b, c, d]` form a line segment with adjacency, and `[b, c, d, e]` form a line segment with adjacency.",19,null],[13,"TriangleListAdjacency","","Each sextuplet of vertices represent a single traingle with adjacency information. For example, with `[a, b, c, d, e, f]`, `a`, `c`, and `e` form a traingle, and `b`, `d`, and `f` are the adjacent vertices, where `b` is adjacent to the edge formed by `a` and `c`, `d` is adjacent to the edge `c` and `e`, and `f` is adjacent to the edge `e` and `a`.",19,null],[13,"TriangleStripAdjacency","","Every even-numbered vertex (every other starting from the first) represents an additional vertex for the triangle strip, while odd-numbered vertices (every other starting from the second) represent adjacent vertices. For example, with `[a, b, c, d, e, f, g, h]`, `[a, c, e, g]` form a triangle strip, and `[b, d, f, h]` are the adjacent vertices, where `b`, `d`, and `f` are adjacent to the first triangle in the strip, and `d`, `f`, and `h` are adjacent to the second.",19,null],[13,"PatchList","","Patch list, used with shaders capable of producing primitives on their own (tessellation)",19,null],[8,"Resources","","Different types of a specific API.",null,null],[16,"Buffer","","",20,null],[16,"Shader","","",20,null],[16,"Program","","",20,null],[16,"PipelineStateObject","","",20,null],[16,"Texture","","",20,null],[16,"ShaderResourceView","","",20,null],[16,"UnorderedAccessView","","",20,null],[16,"RenderTargetView","","",20,null],[16,"DepthStencilView","","",20,null],[16,"Sampler","","",20,null],[16,"Fence","","",20,null],[16,"Mapping","","",20,null],[4,"SubmissionError","","",null,null],[13,"AccessOverlap","","",21,null],[6,"SubmissionResult","","",null,null],[6,"VertexCount","","Draw vertex count.",null,null],[6,"InstanceCount","","Draw number of instances",null,null],[4,"ShaderSet","","A complete set of shaders to link a program.",null,null],[13,"Simple","","Simple program: Vs-Ps",22,null],[13,"Geometry","","Geometry shader programs: Vs-Gs-Ps",22,null],[13,"Tessellated","","Tessellated TODO: Tessellated, TessellatedGeometry, TransformFeedback",22,null],[3,"VertexShader","","",null,null],[3,"HullShader","","",null,null],[3,"DomainShader","","",null,null],[3,"GeometryShader","","",null,null],[3,"PixelShader","","",null,null],[0,"buffer","","Memory buffers",null,null],[3,"Raw","gfx::buffer","Untyped buffer",null,null],[4,"Role","","Role of the memory buffer.",null,null],[13,"Vertex","","Generic vertex buffer",23,null],[13,"Index","","Index buffer",23,null],[13,"Constant","","Constant buffer",23,null],[13,"Staging","","Staging buffer",23,null],[3,"Info","","An information block that is immutable and associated to each buffer.",null,null],[12,"role","","Role",24,null],[12,"usage","","Usage hint",24,null],[12,"bind","","Bind flags",24,null],[12,"size","","Size in bytes",24,null],[12,"stride","","Stride of a single element, in bytes. Only used for structured buffers that you use via shader resource / unordered access views.",24,null],[4,"CreationError","","Error creating a buffer.",null,null],[13,"UnsupportedBind","","Some of the bind flags are not supported.",25,null],[13,"Other","","Unknown other error.",25,null],[13,"UnsupportedUsage","","Usage mode is not supported",25,null],[0,"format","gfx","Universal format specification. Applicable to textures, views, and vertex buffers.",null,null],[4,"ChannelType","gfx::format","Type of a surface channel. This is how we interpret the storage allocated with `SurfaceType`.",null,null],[13,"Int","","",26,null],[13,"Uint","","",26,null],[13,"Inorm","","",26,null],[13,"Unorm","","",26,null],[13,"Float","","",26,null],[13,"Srgb","","",26,null],[4,"Int","","",null,null],[4,"Uint","","",null,null],[4,"Inorm","","",null,null],[4,"Unorm","","",null,null],[4,"Float","","",null,null],[4,"Srgb","","",null,null],[4,"SurfaceType","","Type of the allocated texture surface. It is supposed to only carry information about the number of bits per each channel. The actual types are up to the views to decide and interpret. The actual components are up to the swizzle to define.",null,null],[13,"R4_G4","","",27,null],[13,"R4_G4_B4_A4","","",27,null],[13,"R5_G5_B5_A1","","",27,null],[13,"R5_G6_B5","","",27,null],[13,"R8","","",27,null],[13,"R8_G8","","",27,null],[13,"R8_G8_B8_A8","","",27,null],[13,"R10_G10_B10_A2","","",27,null],[13,"R11_G11_B10","","",27,null],[13,"R16","","",27,null],[13,"R16_G16","","",27,null],[13,"R16_G16_B16","","",27,null],[13,"R16_G16_B16_A16","","",27,null],[13,"R32","","",27,null],[13,"R32_G32","","",27,null],[13,"R32_G32_B32","","",27,null],[13,"R32_G32_B32_A32","","",27,null],[13,"B8_G8_R8_A8","","",27,null],[13,"D16","","",27,null],[13,"D24","","",27,null],[13,"D24_S8","","",27,null],[13,"D32","","",27,null],[4,"R4_G4","","",null,null],[4,"R4_G4_B4_A4","","",null,null],[4,"R5_G5_B5_A1","","",null,null],[4,"R5_G6_B5","","",null,null],[4,"R8","","",null,null],[4,"R8_G8","","",null,null],[4,"R8_G8_B8_A8","","",null,null],[4,"R10_G10_B10_A2","","",null,null],[4,"R11_G11_B10","","",null,null],[4,"R16","","",null,null],[4,"R16_G16","","",null,null],[4,"R16_G16_B16","","",null,null],[4,"R16_G16_B16_A16","","",null,null],[4,"R32","","",null,null],[4,"R32_G32","","",null,null],[4,"R32_G32_B32","","",null,null],[4,"R32_G32_B32_A32","","",null,null],[4,"B8_G8_R8_A8","","",null,null],[4,"D16","","",null,null],[4,"D24","","",null,null],[4,"D24_S8","","",null,null],[4,"D32","","",null,null],[4,"ChannelSource","","Source channel in a swizzle configuration. Some may redirect onto different physical channels, some may be hardcoded to 0 or 1.",null,null],[13,"Zero","","",28,null],[13,"One","","",28,null],[13,"X","","",28,null],[13,"Y","","",28,null],[13,"Z","","",28,null],[13,"W","","",28,null],[3,"Swizzle","","Channel swizzle configuration for the resource views. Note: It's not currently mirrored at compile-time, thus providing less safety and convenience.",null,null],[12,"0","","",29,null],[12,"1","","",29,null],[12,"2","","",29,null],[12,"3","","",29,null],[3,"Format","","Complete run-time surface format.",null,null],[12,"0","","",30,null],[12,"1","","",30,null],[8,"SurfaceTyped","","Compile-time surface type trait.",null,null],[16,"DataType","","The corresponding data type to be passed from CPU.",31,null],[10,"get_surface_type","","Return the run-time value of the type.",31,{"o":{"n":"surfacetype"}}],[8,"BufferSurface","","An ability of a surface type to be used for vertex buffers.",null,null],[8,"TextureSurface","","An ability of a surface type to be used for textures.",null,null],[8,"RenderSurface","","An ability of a surface type to be used for render targets.",null,null],[8,"DepthSurface","","An ability of a surface type to be used for depth targets.",null,null],[8,"StencilSurface","","An ability of a surface type to be used for stencil targets.",null,null],[8,"ChannelTyped","","Compile-time channel type trait.",null,null],[16,"ShaderType","","Shader-visible type that corresponds to this channel. For example, normalized integers are visible as floats.",32,null],[10,"get_channel_type","","Return the run-time value of the type.",32,{"o":{"n":"channeltype"}}],[8,"TextureChannel","","An ability of a channel type to be used for textures.",null,null],[8,"RenderChannel","","An ability of a channel type to be used for render targets.",null,null],[8,"BlendChannel","","An ability of a channel type to be used for blended render targets.",null,null],[8,"Formatted","","Compile-time full format trait.",null,null],[16,"Surface","","Associated surface type.",33,null],[16,"Channel","","Associated channel type.",33,null],[16,"View","","Shader view type of this format.",33,null],[11,"get_format","","Return the run-time value of the type.",33,{"o":{"n":"format"}}],[8,"BufferFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthFormat","","Ability to be used for depth targets.",null,null],[8,"StencilFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthStencilFormat","","Ability to be used for depth+stencil targets.",null,null],[8,"TextureFormat","","Ability to be used for textures.",null,null],[8,"RenderFormat","","Ability to be used for render targets.",null,null],[8,"BlendFormat","","Ability to be used for blended render targets.",null,null],[3,"U8Norm","","",null,null],[12,"0","","",34,null],[3,"I8Norm","","",null,null],[12,"0","","",35,null],[3,"U16Norm","","",null,null],[12,"0","","",36,null],[3,"I16Norm","","",null,null],[12,"0","","",37,null],[3,"F16","","",null,null],[12,"0","","",38,null],[6,"Vec1","","Abstracted 1-element container for macro internal use",null,null],[6,"Vec2","","Abstracted 2-element container for macro internal use",null,null],[6,"Vec3","","Abstracted 3-element container for macro internal use",null,null],[6,"Vec4","","Abstracted 4-element container for macro internal use",null,null],[6,"Rgba8","","Standard 8bits RGBA format.",null,null],[6,"Srgba8","","Standard 8bit gamma transforming RGB format.",null,null],[6,"Rgb10a2F","","Standard HDR floating-point format with 10 bits for RGB components and 2 bits for the alpha.",null,null],[6,"Rgba16F","","Standard 16-bit floating-point RGBA format.",null,null],[6,"Rgba32F","","Standard 32-bit floating-point RGBA format.",null,null],[6,"Bgra8","","Standard 8bits BGRA format.",null,null],[6,"Depth","","Standard 24-bit depth format.",null,null],[6,"DepthStencil","","Standard 24-bit depth format with 8-bit stencil.",null,null],[6,"Depth32F","","Standard 32-bit floating-point depth format.",null,null],[0,"handle","gfx","Resource handles",null,null],[3,"RawBuffer","gfx::handle","Untyped buffer handle",null,null],[3,"Buffer","","Type-safe buffer handle",null,null],[3,"Shader","","Shader Handle",null,null],[3,"Program","","Program Handle",null,null],[3,"RawPipelineState","","Raw Pipeline State Handle",null,null],[3,"RawTexture","","Raw texture handle",null,null],[3,"Texture","","Typed texture object",null,null],[3,"RawShaderResourceView","","Raw Shader Resource View Handle",null,null],[3,"ShaderResourceView","","Type-safe Shader Resource View Handle",null,null],[3,"RawUnorderedAccessView","","Raw Unordered Access View Handle",null,null],[3,"UnorderedAccessView","","Type-safe Unordered Access View Handle",null,null],[3,"RawRenderTargetView","","Raw RTV",null,null],[3,"RawDepthStencilView","","Raw DSV",null,null],[3,"RenderTargetView","","Typed RTV",null,null],[3,"DepthStencilView","","Typed DSV",null,null],[3,"Sampler","","Sampler Handle",null,null],[3,"Fence","","Fence Handle",null,null],[3,"Manager","","Stores reference-counted resources used in a command buffer. Seals actual resource names behind the interface, automatically referencing them both by the Factory on resource creation and the Renderer during CommandBuffer population.",null,null],[0,"mapping","gfx","Memory mapping",null,null],[4,"Error","gfx::mapping","Error accessing a mapping.",null,null],[13,"InvalidAccess","","The requested mapping access did not match the expected usage.",39,null],[13,"AccessOverlap","","The requested mapping access overlaps with another.",39,null],[3,"Reader","","Mapping reader",null,null],[3,"Writer","","Mapping writer. Currently is not possible to make write-only slice so while it is technically possible to read from Writer, it will lead to an undefined behavior. Please do not read from it.",null,null],[0,"memory","gfx","Types to describe the properties of memory allocated for gfx resources.",null,null],[4,"Usage","gfx::memory","How this memory will be used regarding GPU-CPU data flow.",null,null],[13,"Data","","Full speed GPU access. Optimal for render targets and resourced memory.",40,null],[13,"Dynamic","","CPU to GPU data flow with update commands. Used for dynamic buffer data, typically constant buffers.",40,null],[13,"Upload","","CPU to GPU data flow with mapping. Used for staging for upload to GPU.",40,null],[13,"Download","","GPU to CPU data flow with mapping. Used for staging for download from GPU.",40,null],[3,"Access","","Flags providing information about the type of memory access to a resource.",null,null],[3,"Bind","","Flags providing information about the usage of a resource.",null,null],[8,"Pod","","A trait for plain-old-data types.",null,null],[5,"cast_slice","","Cast a slice from one POD type to another.",null,null],[0,"texture","gfx","Texture creation and modification.",null,null],[17,"MAX_LEVEL","gfx::texture","Maximum accessible mipmap level of a texture.",null,null],[3,"Raw","","Untyped texture",null,null],[4,"CreationError","","Pure texture object creation error.",null,null],[13,"Format","","Failed to map a given format to the device.",41,null],[13,"Kind","","The kind doesn't support a particular operation.",41,null],[13,"Samples","","Failed to map a given multisampled kind to the device.",41,null],[13,"Size","","Unsupported size in one of the dimensions.",41,null],[13,"Data","","The given data has a different size than the target texture slice.",41,null],[13,"Usage","","The mentioned usage mode is not supported",41,null],[13,"Mipmap","","The requested mipmap creation parameter is unsupported.",41,null],[13,"Level","","The requested mipmap level count does not match the provided data.",41,null],[4,"LayerError","","An error associated with selected texture layer.",null,null],[13,"NotExpected","","The source texture kind doesn't support array slices.",42,null],[13,"OutOfBounds","","Selected layer is outside of the provided range.",42,null],[6,"Size","","Dimension size",null,null],[6,"Bits","","Number of bits per component",null,null],[6,"NumSamples","","Number of MSAA samples",null,null],[6,"NumFragments","","Number of EQAA fragments",null,null],[6,"Dimensions","","Dimensions: width, height, depth, and samples.",null,null],[4,"AaMode","","Describes the configuration of samples inside each texel.",null,null],[13,"Single","","No additional sample information",43,null],[13,"Multi","","MultiSampled Anti-Aliasing (MSAA)",43,null],[13,"Coverage","","Coverage Sampling Anti-Aliasing (CSAA/EQAA)",43,null],[4,"FilterMethod","","How to filter the texture when sampling. They correspond to increasing levels of quality, but also cost. They \"layer\" on top of each other: it is not possible to have bilinear filtering without mipmapping, for example.",null,null],[13,"Scale","","The dumbest filtering possible, nearest-neighbor interpolation.",44,null],[13,"Mipmap","","Add simple mipmapping.",44,null],[13,"Bilinear","","Sample multiple texels within a single mipmap level to increase quality.",44,null],[13,"Trilinear","","Sample multiple texels across two mipmap levels to increase quality.",44,null],[13,"Anisotropic","","Anisotropic filtering with a given \"max\", must be between 1 and 16, inclusive.",44,null],[4,"CubeFace","","The face of a cube texture to do an operation on.",null,null],[13,"PosX","","",45,null],[13,"NegX","","",45,null],[13,"PosY","","",45,null],[13,"NegY","","",45,null],[13,"PosZ","","",45,null],[13,"NegZ","","",45,null],[17,"CUBE_FACES","","A constant array of cube faces in the order they map to the hardware.",null,null],[4,"Kind","","Specifies the kind of a texture storage to be allocated.",null,null],[13,"D1","","A single row of texels.",46,null],[13,"D1Array","","An array of rows of texels. Equivalent to Texture2D except that texels in a different row are not sampled.",46,null],[13,"D2","","A traditional 2D texture, with rows arranged contiguously.",46,null],[13,"D2Array","","An array of 2D textures. Equivalent to Texture3D except that texels in a different depth level are not sampled.",46,null],[13,"D3","","A volume texture, with each 2D layer arranged contiguously.",46,null],[13,"Cube","","A set of 6 2D textures, one for each face of a cube.",46,null],[13,"CubeArray","","An array of Cube textures.",46,null],[4,"Mipmap","","The marker for the texture initializer to generate extra space for the mipmap generation.",null,null],[13,"Provided","","The mipmap data is provided as a part of bitmap data.",47,null],[13,"Allocated","","The mipmap data is not provided, but the memory for it should be allocated for the later generation/",47,null],[3,"ImageInfoCommon","","Describes a subvolume of a texture, which image data can be uploaded into.",null,null],[12,"xoffset","","",48,null],[12,"yoffset","","",48,null],[12,"zoffset","","",48,null],[12,"width","","",48,null],[12,"height","","",48,null],[12,"depth","","",48,null],[12,"format","","Format of each texel.",48,null],[12,"mipmap","","Which mipmap to select.",48,null],[6,"RawImageInfo","","New raw image info based on the universal format spec.",null,null],[6,"NewImageInfo","","New image info based on the universal format spec. The format is suppsed to come from compile-time information as opposed to run-time enum values.",null,null],[3,"TextureCopyRegion","","A texture region defined for copy operations",null,null],[12,"texture","","Raw texture",49,null],[12,"kind","","Texture kind",49,null],[12,"cube_face","","Optional cube face",49,null],[12,"info","","Dimensions, offsets, and format",49,null],[4,"WrapMode","","Specifies how texture coordinates outside the range `[0, 1]` are handled.",null,null],[13,"Tile","","Tile the texture. That is, sample the coordinate modulo `1.0`. This is the default.",50,null],[13,"Mirror","","Mirror the texture. Like tile, but uses abs(coord) before the modulo.",50,null],[13,"Clamp","","Clamp the texture to the value at `0.0` or `1.0` respectively.",50,null],[13,"Border","","Use border color.",50,null],[3,"Lod","","A wrapper for the LOD level of a texture.",null,null],[3,"PackedColor","","A wrapper for the 8bpp RGBA color, encoded as u32.",null,null],[12,"0","","",51,null],[3,"SamplerInfo","","Specifies how to sample from a texture.",null,null],[12,"filter","","Filter method to use.",52,null],[12,"wrap_mode","","Wrapping mode for each of the U, V, and W axis (S, T, and R in OpenGL speak).",52,null],[12,"lod_bias","","This bias is added to every computed mipmap level (N + lod_bias). For example, if it would select mipmap level 2 and lod_bias is 1, it will use mipmap level 3.",52,null],[12,"lod_range","","This range is used to clamp LOD level used for sampling.",52,null],[12,"comparison","","Comparison mode, used primary for a shadow map.",52,null],[12,"border","","Border color is used when one of the wrap modes is set to border.",52,null],[3,"Info","","Texture storage descriptor.",null,null],[12,"kind","","",53,null],[12,"levels","","",53,null],[12,"format","","",53,null],[12,"bind","","",53,null],[12,"usage","","",53,null],[3,"ResourceDesc","","Texture resource view descriptor.",null,null],[12,"channel","","",54,null],[12,"layer","","",54,null],[12,"min","","",54,null],[12,"max","","",54,null],[12,"swizzle","","",54,null],[3,"RenderDesc","","Texture render view descriptor.",null,null],[12,"channel","","",55,null],[12,"level","","",55,null],[12,"layer","","",55,null],[3,"DepthStencilFlags","","Depth-stencil read-only flags",null,null],[3,"DepthStencilDesc","","Texture depth-stencil view descriptor.",null,null],[12,"level","","",56,null],[12,"layer","","",56,null],[12,"flags","","",56,null],[6,"Level","","Mipmap level to select in a texture.",null,null],[6,"Layer","","A depth value, specifying which plane to select out of a 3D texture.",null,null],[8,"Factory","gfx","Overview",null,null],[10,"get_capabilities","","Returns the capabilities of this `Factory`. This usually depends on the graphics API being used.",57,{"i":[{"n":"self"}],"o":{"n":"capabilities"}}],[10,"create_buffer_raw","","",57,{"i":[{"n":"self"},{"n":"info"}],"o":{"g":["rawbuffer","creationerror"],"n":"result"}}],[10,"create_buffer_immutable_raw","","",57,null],[11,"create_buffer_immutable","","",57,null],[11,"create_buffer","","",57,{"i":[{"n":"self"},{"n":"usize"},{"n":"role"},{"n":"usage"},{"n":"bind"}],"o":{"g":["buffer","creationerror"],"n":"result"}}],[10,"create_pipeline_state_raw","","Creates a new `RawPipelineState`. To create a safely typed `PipelineState`, see the `FactoryExt` trait and `pso` module, both in the `gfx` crate.",57,{"i":[{"n":"self"},{"n":"program"},{"n":"descriptor"}],"o":{"g":["rawpipelinestate","creationerror"],"n":"result"}}],[10,"create_program","","Creates a new shader `Program` for the supplied `ShaderSet`.",57,{"i":[{"n":"self"},{"n":"shaderset"}],"o":{"g":["program","createprogramerror"],"n":"result"}}],[10,"create_shader","","Compiles a shader source into a `Shader` object that can be used to create a shader `Program`.",57,null],[11,"create_shader_vertex","","Compiles a `VertexShader` from source.",57,null],[11,"create_shader_hull","","Compiles a `HullShader` from source.",57,null],[11,"create_shader_domain","","Compiles a `VertexShader` from source.",57,null],[11,"create_shader_geometry","","Compiles a `GeometryShader` from source.",57,null],[11,"create_shader_pixel","","Compiles a `PixelShader` from source. This is the same as what some APIs call a fragment shader.",57,null],[10,"create_sampler","","",57,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"sampler"}}],[10,"read_mapping","","Acquire a mapping Reader",57,{"i":[{"n":"self"},{"n":"buffer"}],"o":{"g":["reader","error"],"n":"result"}}],[10,"write_mapping","","Acquire a mapping Writer",57,{"i":[{"n":"self"},{"n":"buffer"}],"o":{"g":["writer","error"],"n":"result"}}],[10,"create_texture_raw","","Create a new empty raw texture with no data. The channel type parameter is a hint, required to assist backends that have no concept of typeless formats (OpenGL). The initial data, if given, has to be provided for all mip levels and slices: Slice0.Mip0, Slice0.Mip1, ..., Slice1.Mip0, ...",57,{"i":[{"n":"self"},{"n":"info"},{"g":["channeltype"],"n":"option"},{"n":"option"}],"o":{"g":["rawtexture","creationerror"],"n":"result"}}],[10,"view_buffer_as_shader_resource_raw","","",57,{"i":[{"n":"self"},{"n":"rawbuffer"},{"n":"format"}],"o":{"g":["rawshaderresourceview","resourceviewerror"],"n":"result"}}],[10,"view_buffer_as_unordered_access_raw","","",57,{"i":[{"n":"self"},{"n":"rawbuffer"}],"o":{"g":["rawunorderedaccessview","resourceviewerror"],"n":"result"}}],[10,"view_texture_as_shader_resource_raw","","",57,{"i":[{"n":"self"},{"n":"rawtexture"},{"n":"resourcedesc"}],"o":{"g":["rawshaderresourceview","resourceviewerror"],"n":"result"}}],[10,"view_texture_as_unordered_access_raw","","",57,{"i":[{"n":"self"},{"n":"rawtexture"}],"o":{"g":["rawunorderedaccessview","resourceviewerror"],"n":"result"}}],[10,"view_texture_as_render_target_raw","","",57,{"i":[{"n":"self"},{"n":"rawtexture"},{"n":"renderdesc"}],"o":{"g":["rawrendertargetview","targetviewerror"],"n":"result"}}],[10,"view_texture_as_depth_stencil_raw","","",57,{"i":[{"n":"self"},{"n":"rawtexture"},{"n":"depthstencildesc"}],"o":{"g":["rawdepthstencilview","targetviewerror"],"n":"result"}}],[11,"create_texture","","",57,{"i":[{"n":"self"},{"n":"kind"},{"n":"u8"},{"n":"bind"},{"n":"usage"},{"g":["channeltype"],"n":"option"}],"o":{"g":["texture","creationerror"],"n":"result"}}],[11,"view_buffer_as_shader_resource","","",57,{"i":[{"n":"self"},{"n":"buffer"}],"o":{"g":["shaderresourceview","resourceviewerror"],"n":"result"}}],[11,"view_buffer_as_unordered_access","","",57,{"i":[{"n":"self"},{"n":"buffer"}],"o":{"g":["unorderedaccessview","resourceviewerror"],"n":"result"}}],[11,"view_texture_as_shader_resource","","",57,null],[11,"view_texture_as_unordered_access","","",57,{"i":[{"n":"self"},{"n":"texture"}],"o":{"g":["unorderedaccessview","resourceviewerror"],"n":"result"}}],[11,"view_texture_as_render_target","","",57,{"i":[{"n":"self"},{"n":"texture"},{"n":"u8"},{"g":["u16"],"n":"option"}],"o":{"g":["rendertargetview","targetviewerror"],"n":"result"}}],[11,"view_texture_as_depth_stencil","","",57,{"i":[{"n":"self"},{"n":"texture"},{"n":"u8"},{"g":["u16"],"n":"option"},{"n":"depthstencilflags"}],"o":{"g":["depthstencilview","targetviewerror"],"n":"result"}}],[11,"view_texture_as_depth_stencil_trivial","","",57,{"i":[{"n":"self"},{"n":"texture"}],"o":{"g":["depthstencilview","targetviewerror"],"n":"result"}}],[11,"create_texture_immutable_u8","","",57,null],[11,"create_texture_immutable","","",57,null],[11,"create_render_target","","",57,{"i":[{"n":"self"},{"n":"u16"},{"n":"u16"}],"o":{"g":["combinederror"],"n":"result"}}],[11,"create_depth_stencil","","",57,{"i":[{"n":"self"},{"n":"u16"},{"n":"u16"}],"o":{"g":["combinederror"],"n":"result"}}],[11,"create_depth_stencil_view_only","","",57,{"i":[{"n":"self"},{"n":"u16"},{"n":"u16"}],"o":{"g":["depthstencilview","combinederror"],"n":"result"}}],[4,"ResourceViewError","","Error creating either a ShaderResourceView, or UnorderedAccessView.",null,null],[13,"NoBindFlag","","The corresponding bind flag is not present in the texture.",58,null],[13,"Channel","","Selected channel type is not supported for this texture.",58,null],[13,"Layer","","Selected layer can not be viewed for this texture.",58,null],[13,"Unsupported","","The backend was refused for some reason.",58,null],[4,"TargetViewError","","Error creating either a RenderTargetView, or DepthStencilView.",null,null],[13,"NoBindFlag","","The `RENDER_TARGET`/`DEPTH_STENCIL` flag is not present in the texture.",59,null],[13,"Level","","Selected mip level doesn't exist.",59,null],[13,"Layer","","Selected array layer doesn't exist.",59,null],[13,"Channel","","Selected channel type is not supported for this texture.",59,null],[13,"Unsupported","","The backend was refused for some reason.",59,null],[13,"NotDetached","","The RTV cannot be changed due to the references to it existing.",59,null],[4,"CombinedError","","An error from creating textures with views at the same time.",null,null],[13,"Texture","","Failed to create the raw texture.",60,null],[13,"Resource","","Failed to create SRV or UAV.",60,null],[13,"Target","","Failed to create RTV or DSV.",60,null],[8,"CommandBuffer","","An interface of the abstract command buffer. It collects commands in an efficient API-specific manner, to be ready for execution on the device.",null,null],[10,"reset","","Reset the command buffer contents, retain the allocated storage",61,null],[10,"bind_pipeline_state","","Bind a pipeline state object",61,null],[10,"bind_vertex_buffers","","Bind a complete set of vertex buffers",61,null],[10,"bind_constant_buffers","","Bind a complete set of constant buffers",61,null],[10,"bind_global_constant","","Bind a global constant",61,null],[10,"bind_resource_views","","Bind a complete set of shader resource views",61,null],[10,"bind_unordered_views","","Bind a complete set of unordered access views",61,null],[10,"bind_samplers","","Bind a complete set of samplers",61,null],[10,"bind_pixel_targets","","Bind a complete set of pixel targets, including multiple colors views and an optional depth/stencil view.",61,null],[10,"bind_index","","Bind an index buffer",61,null],[10,"set_scissor","","Set scissor rectangle",61,null],[10,"set_ref_values","","Set reference values for the blending and stencil front/back",61,null],[10,"copy_buffer","","Copy part of a buffer to another",61,null],[10,"copy_buffer_to_texture","","Copy part of a buffer to a texture",61,null],[10,"copy_texture_to_buffer","","Copy part of a texture to a buffer",61,null],[10,"copy_texture_to_texture","","Copy part of one texture into another",61,null],[10,"update_buffer","","Update a vertex/index/uniform buffer",61,null],[10,"update_texture","","Update a texture",61,null],[10,"generate_mipmap","","",61,null],[10,"clear_color","","Clear color target",61,null],[10,"clear_depth_stencil","","",61,null],[10,"call_draw","","Draw a primitive",61,null],[10,"call_draw_indexed","","Draw a primitive with index buffer",61,null],[6,"InstanceParams","","Optional instance parameters: (instance count, buffer offset)",null,null],[3,"ProgramInfo","","Metadata about a program.",null,null],[12,"vertex_attributes","","Attributes in the program",62,null],[12,"globals","","Global constants in the program",62,null],[12,"constant_buffers","","Constant buffers in the program",62,null],[12,"textures","","Textures in the program",62,null],[12,"unordereds","","Unordered access resources in the program",62,null],[12,"samplers","","Samplers in the program",62,null],[12,"outputs","","Output targets in the program",62,null],[12,"output_depth","","A flag indicating that the pixel shader manually assigns the depth.",62,null],[12,"knows_outputs","","A hacky flag to make sure the clients know we are unable to actually get the output variable info",62,null],[4,"UniformValue","","A value that can be uploaded to the device as a uniform.",null,null],[13,"I32","","",63,null],[13,"F32","","",63,null],[13,"I32Vector2","","",63,null],[13,"I32Vector3","","",63,null],[13,"I32Vector4","","",63,null],[13,"F32Vector2","","",63,null],[13,"F32Vector3","","",63,null],[13,"F32Vector4","","",63,null],[13,"F32Matrix2","","",63,null],[13,"F32Matrix3","","",63,null],[13,"F32Matrix4","","",63,null],[3,"Encoder","","Graphics Command Encoder",null,null],[3,"Slice","","A `Slice` dictates in which and in what order vertices get processed. It is required for processing a PSO.",null,null],[12,"start","","The start index of the index-buffer. Processing will start at this location in the index-buffer.",64,null],[12,"end","","The end index in the index-buffer. Processing will stop at this location (exclusive) in the index buffer.",64,null],[12,"base_vertex","","This is the index of the first vertex in the `VertexBuffer`. This value will be added to every index in the index-buffer, effectively moving the start of the `VertexBuffer` to this base-vertex.",64,null],[12,"instances","","Instancing configuration.",64,null],[12,"buffer","","Represents the type of index-buffer used.",64,null],[4,"CopyError","","An error occuring in memory copies.",null,null],[13,"OutOfSrcBounds","","",65,null],[12,"size","gfx::CopyError","",65,null],[12,"copy_end","","",65,null],[13,"OutOfDstBounds","gfx","",65,null],[12,"size","gfx::CopyError","",65,null],[12,"copy_end","","",65,null],[13,"Overlap","gfx","",65,null],[12,"src_offset","gfx::CopyError","",65,null],[12,"dst_offset","","",65,null],[12,"size","","",65,null],[13,"NoSrcBindFlag","gfx","",65,null],[13,"NoDstBindFlag","","",65,null],[4,"UpdateError","","An error occuring in buffer/texture updates.",null,null],[13,"OutOfBounds","","",66,null],[12,"target","gfx::UpdateError","",66,null],[12,"source","","",66,null],[13,"UnitCountMismatch","gfx","",66,null],[12,"target","gfx::UpdateError","",66,null],[12,"slice","","",66,null],[13,"InvalidUsage","gfx","",66,null],[4,"PipelineStateError","","Error creating a PipelineState",null,null],[13,"Program","","Shader program failed to link.",67,null],[13,"DescriptorInit","","Unable to create PSO descriptor due to mismatched formats.",67,null],[13,"DeviceCreate","","Device failed to create the handle give the descriptor.",67,null],[4,"IndexBuffer","","Type of index-buffer used in a Slice.",null,null],[13,"Auto","","Represents a hypothetical index-buffer from 0 to infinity. In other words, all vertices get processed in order.",68,null],[13,"Index16","","An index-buffer with unsigned 16 bit indices.",68,null],[13,"Index32","","An index-buffer with unsigned 32 bit indices.",68,null],[0,"traits","","public re-exported traits",null,null],[8,"Device","gfx::traits","A `Device` is responsible for submitting `CommandBuffer`s to the GPU.",null,null],[16,"Resources","","Associated `Resources` type.",18,null],[16,"CommandBuffer","","Associated `CommandBuffer` type. Every `Device` type can only work with one `CommandBuffer` type.",18,null],[10,"get_capabilities","","Returns the capabilities of this `Device`.",18,{"i":[{"n":"self"}],"o":{"n":"capabilities"}}],[10,"pin_submitted_resources","","Pin everything from this handle manager to live for a frame.",18,null],[10,"submit","","Submits a `CommandBuffer` to the GPU for execution.",18,null],[10,"fenced_submit","","Submits a `CommandBuffer` to the GPU for execution. returns a fence that is signaled after the GPU has executed all commands",18,null],[10,"wait_fence","","Stalls the current thread until the fence is satisfied",18,null],[10,"cleanup","","Cleanup unused resources. This should be called between frames.",18,null],[8,"Factory","","Overview",null,null],[10,"get_capabilities","","Returns the capabilities of this `Factory`. This usually depends on the graphics API being used.",57,{"i":[{"n":"self"}],"o":{"n":"capabilities"}}],[10,"create_buffer_raw","","",57,{"i":[{"n":"self"},{"n":"info"}],"o":{"g":["rawbuffer","creationerror"],"n":"result"}}],[10,"create_buffer_immutable_raw","","",57,null],[11,"create_buffer_immutable","","",57,null],[11,"create_buffer","","",57,{"i":[{"n":"self"},{"n":"usize"},{"n":"role"},{"n":"usage"},{"n":"bind"}],"o":{"g":["buffer","creationerror"],"n":"result"}}],[10,"create_pipeline_state_raw","","Creates a new `RawPipelineState`. To create a safely typed `PipelineState`, see the `FactoryExt` trait and `pso` module, both in the `gfx` crate.",57,{"i":[{"n":"self"},{"n":"program"},{"n":"descriptor"}],"o":{"g":["rawpipelinestate","creationerror"],"n":"result"}}],[10,"create_program","","Creates a new shader `Program` for the supplied `ShaderSet`.",57,{"i":[{"n":"self"},{"n":"shaderset"}],"o":{"g":["program","createprogramerror"],"n":"result"}}],[10,"create_shader","","Compiles a shader source into a `Shader` object that can be used to create a shader `Program`.",57,null],[11,"create_shader_vertex","","Compiles a `VertexShader` from source.",57,null],[11,"create_shader_hull","","Compiles a `HullShader` from source.",57,null],[11,"create_shader_domain","","Compiles a `VertexShader` from source.",57,null],[11,"create_shader_geometry","","Compiles a `GeometryShader` from source.",57,null],[11,"create_shader_pixel","","Compiles a `PixelShader` from source. This is the same as what some APIs call a fragment shader.",57,null],[10,"create_sampler","","",57,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"sampler"}}],[10,"read_mapping","","Acquire a mapping Reader",57,{"i":[{"n":"self"},{"n":"buffer"}],"o":{"g":["reader","error"],"n":"result"}}],[10,"write_mapping","","Acquire a mapping Writer",57,{"i":[{"n":"self"},{"n":"buffer"}],"o":{"g":["writer","error"],"n":"result"}}],[10,"create_texture_raw","","Create a new empty raw texture with no data. The channel type parameter is a hint, required to assist backends that have no concept of typeless formats (OpenGL). The initial data, if given, has to be provided for all mip levels and slices: Slice0.Mip0, Slice0.Mip1, ..., Slice1.Mip0, ...",57,{"i":[{"n":"self"},{"n":"info"},{"g":["channeltype"],"n":"option"},{"n":"option"}],"o":{"g":["rawtexture","creationerror"],"n":"result"}}],[10,"view_buffer_as_shader_resource_raw","","",57,{"i":[{"n":"self"},{"n":"rawbuffer"},{"n":"format"}],"o":{"g":["rawshaderresourceview","resourceviewerror"],"n":"result"}}],[10,"view_buffer_as_unordered_access_raw","","",57,{"i":[{"n":"self"},{"n":"rawbuffer"}],"o":{"g":["rawunorderedaccessview","resourceviewerror"],"n":"result"}}],[10,"view_texture_as_shader_resource_raw","","",57,{"i":[{"n":"self"},{"n":"rawtexture"},{"n":"resourcedesc"}],"o":{"g":["rawshaderresourceview","resourceviewerror"],"n":"result"}}],[10,"view_texture_as_unordered_access_raw","","",57,{"i":[{"n":"self"},{"n":"rawtexture"}],"o":{"g":["rawunorderedaccessview","resourceviewerror"],"n":"result"}}],[10,"view_texture_as_render_target_raw","","",57,{"i":[{"n":"self"},{"n":"rawtexture"},{"n":"renderdesc"}],"o":{"g":["rawrendertargetview","targetviewerror"],"n":"result"}}],[10,"view_texture_as_depth_stencil_raw","","",57,{"i":[{"n":"self"},{"n":"rawtexture"},{"n":"depthstencildesc"}],"o":{"g":["rawdepthstencilview","targetviewerror"],"n":"result"}}],[11,"create_texture","","",57,{"i":[{"n":"self"},{"n":"kind"},{"n":"u8"},{"n":"bind"},{"n":"usage"},{"g":["channeltype"],"n":"option"}],"o":{"g":["texture","creationerror"],"n":"result"}}],[11,"view_buffer_as_shader_resource","","",57,{"i":[{"n":"self"},{"n":"buffer"}],"o":{"g":["shaderresourceview","resourceviewerror"],"n":"result"}}],[11,"view_buffer_as_unordered_access","","",57,{"i":[{"n":"self"},{"n":"buffer"}],"o":{"g":["unorderedaccessview","resourceviewerror"],"n":"result"}}],[11,"view_texture_as_shader_resource","","",57,null],[11,"view_texture_as_unordered_access","","",57,{"i":[{"n":"self"},{"n":"texture"}],"o":{"g":["unorderedaccessview","resourceviewerror"],"n":"result"}}],[11,"view_texture_as_render_target","","",57,{"i":[{"n":"self"},{"n":"texture"},{"n":"u8"},{"g":["u16"],"n":"option"}],"o":{"g":["rendertargetview","targetviewerror"],"n":"result"}}],[11,"view_texture_as_depth_stencil","","",57,{"i":[{"n":"self"},{"n":"texture"},{"n":"u8"},{"g":["u16"],"n":"option"},{"n":"depthstencilflags"}],"o":{"g":["depthstencilview","targetviewerror"],"n":"result"}}],[11,"view_texture_as_depth_stencil_trivial","","",57,{"i":[{"n":"self"},{"n":"texture"}],"o":{"g":["depthstencilview","targetviewerror"],"n":"result"}}],[11,"create_texture_immutable_u8","","",57,null],[11,"create_texture_immutable","","",57,null],[11,"create_render_target","","",57,{"i":[{"n":"self"},{"n":"u16"},{"n":"u16"}],"o":{"g":["combinederror"],"n":"result"}}],[11,"create_depth_stencil","","",57,{"i":[{"n":"self"},{"n":"u16"},{"n":"u16"}],"o":{"g":["combinederror"],"n":"result"}}],[11,"create_depth_stencil_view_only","","",57,{"i":[{"n":"self"},{"n":"u16"},{"n":"u16"}],"o":{"g":["depthstencilview","combinederror"],"n":"result"}}],[8,"Pod","","A trait for plain-old-data types.",null,null],[8,"FactoryExt","","This trait is responsible for creating and managing graphics resources, much like the `Factory` trait in the `gfx` crate. Every `Factory` automatically implements `FactoryExt`.",null,null],[11,"create_vertex_buffer","","Creates an immutable vertex buffer from the supplied vertices. A `Slice` will have to manually be constructed.",69,null],[11,"create_index_buffer","","Creates an immutable index buffer from the supplied vertices.",69,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"indexbuffer"}}],[11,"create_vertex_buffer_with_slice","","Creates an immutable vertex buffer from the supplied vertices, together with a `Slice` from the supplied indices.",69,null],[11,"create_constant_buffer","","Creates a constant buffer for `num` identical elements of type `T`.",69,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"buffer"}}],[11,"create_upload_buffer","","Creates an upload buffer for `num` elements of type `T`.",69,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["buffer","creationerror"],"n":"result"}}],[11,"create_download_buffer","","Creates a download buffer for `num` elements of type `T`.",69,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["buffer","creationerror"],"n":"result"}}],[11,"create_shader_set","","Creates a `ShaderSet` from the supplied vertex and pixel shader source code.",69,null],[11,"create_shader_set_geometry","","Creates a `ShaderSet` from the supplied vertex, geometry, and pixel shader source code. Mainly used for testing.",69,null],[11,"create_shader_set_tessellation","","Creates a `ShaderSet` from the supplied vertex, hull, domain, and pixel shader source code. Mainly used for testing.",69,null],[11,"link_program","","Creates a basic shader `Program` from the supplied vertex and pixel shader source code.",69,null],[11,"create_pipeline_state","","Similar to `create_pipeline_from_program(..)`, but takes a `ShaderSet` as opposed to a shader `Program`.",69,{"i":[{"n":"self"},{"n":"shaderset"},{"n":"primitive"},{"n":"rasterizer"},{"n":"i"}],"o":{"g":["pipelinestate","pipelinestateerror"],"n":"result"}}],[11,"create_pipeline_from_program","","Creates a strongly typed `PipelineState` from its `Init` structure, a shader `Program`, a primitive type and a `Rasterizer`.",69,{"i":[{"n":"self"},{"n":"program"},{"n":"primitive"},{"n":"rasterizer"},{"n":"i"}],"o":{"g":["pipelinestate","pipelinestateerror"],"n":"result"}}],[11,"create_pipeline_simple","","Creates a strongly typed `PipelineState` from its `Init` structure. Automatically creates a shader `Program` from a vertex and pixel shader source, as well as a `Rasterizer` capable of rendering triangle faces without culling.",69,null],[11,"create_sampler_linear","","Create a linear sampler with clamping to border.",69,{"i":[{"n":"self"}],"o":{"n":"sampler"}}],[11,"clone","gfx","",65,{"i":[{"n":"self"}],"o":{"n":"copyerror"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",65,{"i":[{"n":"self"},{"n":"copyerror"}],"o":{"n":"bool"}}],[11,"ne","","",65,{"i":[{"n":"self"},{"n":"copyerror"}],"o":{"n":"bool"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",65,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"updateerror"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",66,{"i":[{"n":"self"},{"n":"updateerror"}],"o":{"n":"bool"}}],[11,"ne","","",66,{"i":[{"n":"self"},{"n":"updateerror"}],"o":{"n":"bool"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",66,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",70,{"i":[{"n":"c"}],"o":{"n":"encoder"}}],[11,"flush","","Submits the commands in this `Encoder`'s internal `CommandBuffer` to the GPU, so they can be executed.",70,{"i":[{"n":"self"},{"n":"d"}]}],[11,"flush_no_reset","","Like `flush` but keeps the encoded commands.",70,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"submissionresult"}}],[11,"fenced_flush_no_reset","","Like `flush_no_reset` but places a fence.",70,{"i":[{"n":"self"},{"n":"d"},{"g":["fence"],"n":"option"}],"o":{"g":["fence"],"n":"submissionresult"}}],[11,"reset","","Resets the encoded commands.",70,{"i":[{"n":"self"}]}],[11,"copy_buffer","","Copy part of a buffer to another",70,{"i":[{"n":"self"},{"n":"buffer"},{"n":"buffer"},{"n":"usize"},{"n":"usize"},{"n":"usize"}],"o":{"n":"copybufferresult"}}],[11,"copy_buffer_to_texture_raw","","Copy part of a buffer to a texture",70,{"i":[{"n":"self"},{"n":"rawbuffer"},{"n":"usize"},{"n":"rawtexture"},{"g":["cubeface"],"n":"option"},{"n":"rawimageinfo"}],"o":{"n":"copybuffertextureresult"}}],[11,"copy_texture_to_buffer_raw","","Copy part of a texture to a buffer",70,{"i":[{"n":"self"},{"n":"rawtexture"},{"g":["cubeface"],"n":"option"},{"n":"rawimageinfo"},{"n":"rawbuffer"},{"n":"usize"}],"o":{"n":"copytexturebufferresult"}}],[11,"copy_texture_to_texture_raw","","Copy part of a texture to another texture",70,{"i":[{"n":"self"},{"n":"rawtexture"},{"g":["cubeface"],"n":"option"},{"n":"rawimageinfo"},{"n":"rawtexture"},{"g":["cubeface"],"n":"option"},{"n":"rawimageinfo"}],"o":{"g":["copyerror"],"n":"result"}}],[11,"update_buffer","","Update a buffer with a slice of data.",70,null],[11,"update_constant_buffer","","Update a buffer with a single structure.",70,{"i":[{"n":"self"},{"n":"buffer"},{"n":"t"}]}],[11,"update_texture","","Update the contents of a texture.",70,null],[11,"clear","","Clears the supplied `RenderTargetView` to the supplied `ClearColor`.",70,null],[11,"clear_depth","","Clear a depth view with a specified value.",70,{"i":[{"n":"self"},{"n":"depthstencilview"},{"n":"depth"}]}],[11,"clear_stencil","","Clear a stencil view with a specified value.",70,{"i":[{"n":"self"},{"n":"depthstencilview"},{"n":"stencil"}]}],[11,"draw","","Draws a `slice::Slice` using a pipeline state object, and its matching `Data` structure.",70,{"i":[{"n":"self"},{"n":"slice"},{"n":"pipelinestate"},{"n":"d"}]}],[11,"generate_mipmap","","Generate a mipmap chain for the given resource view.",70,{"i":[{"n":"self"},{"n":"shaderresourceview"}]}],[11,"generate_mipmap_raw","","Untyped version of mipmap generation.",70,{"i":[{"n":"self"},{"n":"rawshaderresourceview"}]}],[11,"create_vertex_buffer","gfx::traits","Creates an immutable vertex buffer from the supplied vertices. A `Slice` will have to manually be constructed.",69,null],[11,"create_index_buffer","","Creates an immutable index buffer from the supplied vertices.",69,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"indexbuffer"}}],[11,"create_vertex_buffer_with_slice","","Creates an immutable vertex buffer from the supplied vertices, together with a `Slice` from the supplied indices.",69,null],[11,"create_constant_buffer","","Creates a constant buffer for `num` identical elements of type `T`.",69,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"buffer"}}],[11,"create_upload_buffer","","Creates an upload buffer for `num` elements of type `T`.",69,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["buffer","creationerror"],"n":"result"}}],[11,"create_download_buffer","","Creates a download buffer for `num` elements of type `T`.",69,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["buffer","creationerror"],"n":"result"}}],[11,"create_shader_set","","Creates a `ShaderSet` from the supplied vertex and pixel shader source code.",69,null],[11,"create_shader_set_geometry","","Creates a `ShaderSet` from the supplied vertex, geometry, and pixel shader source code. Mainly used for testing.",69,null],[11,"create_shader_set_tessellation","","Creates a `ShaderSet` from the supplied vertex, hull, domain, and pixel shader source code. Mainly used for testing.",69,null],[11,"link_program","","Creates a basic shader `Program` from the supplied vertex and pixel shader source code.",69,null],[11,"create_pipeline_state","","Similar to `create_pipeline_from_program(..)`, but takes a `ShaderSet` as opposed to a shader `Program`.",69,{"i":[{"n":"self"},{"n":"shaderset"},{"n":"primitive"},{"n":"rasterizer"},{"n":"i"}],"o":{"g":["pipelinestate","pipelinestateerror"],"n":"result"}}],[11,"create_pipeline_from_program","","Creates a strongly typed `PipelineState` from its `Init` structure, a shader `Program`, a primitive type and a `Rasterizer`.",69,{"i":[{"n":"self"},{"n":"program"},{"n":"primitive"},{"n":"rasterizer"},{"n":"i"}],"o":{"g":["pipelinestate","pipelinestateerror"],"n":"result"}}],[11,"create_pipeline_simple","","Creates a strongly typed `PipelineState` from its `Init` structure. Automatically creates a shader `Program` from a vertex and pixel shader source, as well as a `Rasterizer` capable of rendering triangle faces without culling.",69,null],[11,"create_sampler_linear","","Create a linear sampler with clamping to border.",69,{"i":[{"n":"self"}],"o":{"n":"sampler"}}],[11,"clone","gfx","",67,{"i":[{"n":"self"}],"o":{"n":"pipelinestateerror"}}],[11,"eq","","",67,{"i":[{"n":"self"},{"n":"pipelinestateerror"}],"o":{"n":"bool"}}],[11,"ne","","",67,{"i":[{"n":"self"},{"n":"pipelinestateerror"}],"o":{"n":"bool"}}],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",67,{"i":[{"g":["str"],"n":"pipelinestateerror"}],"o":{"g":["string"],"n":"pipelinestateerror"}}],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",67,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",67,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"from","","",67,{"i":[{"n":"programerror"}],"o":{"n":"self"}}],[11,"from","","",67,{"i":[{"n":"initerror"}],"o":{"n":"self"}}],[11,"from","","",67,{"i":[{"n":"creationerror"}],"o":{"n":"self"}}],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"slice"}}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",64,null],[11,"eq","","",64,{"i":[{"n":"self"},{"n":"slice"}],"o":{"n":"bool"}}],[11,"ne","","",64,{"i":[{"n":"self"},{"n":"slice"}],"o":{"n":"bool"}}],[11,"new_match_vertex_buffer","","Creates a new `Slice` to match the supplied vertex buffer, from start to end, in order.",64,{"i":[{"n":"buffer"}],"o":{"n":"self"}}],[11,"get_prim_count","","Calculates the number of primitives of the specified type in this `Slice`.",64,{"i":[{"n":"self"},{"n":"primitive"}],"o":{"n":"u32"}}],[11,"split_at","","Divides one slice into two at an index.",64,null],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"indexbuffer"}}],[11,"fmt","","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",68,null],[11,"eq","","",68,{"i":[{"n":"self"},{"n":"indexbuffer"}],"o":{"n":"bool"}}],[11,"ne","","",68,{"i":[{"n":"self"},{"n":"indexbuffer"}],"o":{"n":"bool"}}],[11,"default","","",68,{"o":{"n":"self"}}],[11,"into_index_buffer","","",68,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"indexbuffer"}}],[11,"into_index_buffer","gfx::handle","",71,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"indexbuffer"}}],[11,"into_index_buffer","","",71,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"indexbuffer"}}],[0,"pso","gfx","A typed high-level graphics pipeline interface.",null,null],[3,"Descriptor","gfx::pso","All the information surrounding a shader program that is required for PSO creation, including the formats of vertex buffers and pixel targets;",null,null],[12,"primitive","","Type of the primitive",72,null],[12,"rasterizer","","Rasterizer setup",72,null],[12,"scissor","","Enable scissor test",72,null],[12,"vertex_buffers","","Vertex buffers",72,null],[12,"attributes","","Vertex attributes",72,null],[12,"constant_buffers","","Constant buffers",72,null],[12,"resource_views","","Shader resource views",72,null],[12,"unordered_views","","Unordered access views",72,null],[12,"samplers","","Samplers",72,null],[12,"color_targets","","Render target views (RTV)",72,null],[12,"depth_stencil","","Depth stencil view (DSV)",72,null],[3,"AccessInfo","","Informations about what is accessed by a bunch of commands.",null,null],[3,"RawDataSet","","A complete set of raw data that needs to be specified at run-time whenever we draw something with a PSO. This is what \"data\" struct gets transformed into when we call `encoder.draw(...)` with it. It doesn't have any typing information, since PSO knows what format and layout to expect from each resource.",null,null],[12,"vertex_buffers","","",73,null],[12,"constant_buffers","","",73,null],[12,"global_constants","","",73,null],[12,"resource_views","","",73,null],[12,"unordered_views","","",73,null],[12,"samplers","","",73,null],[12,"pixel_targets","","",73,null],[12,"ref_values","","",73,null],[12,"scissor","","",73,null],[3,"PipelineState","","A strongly typed Pipleline State Object. See the module documentation for more information.",null,null],[4,"ElementError","","Error matching an element inside the constant buffer.",null,null],[13,"NotFound","","Element not found.",74,null],[13,"Offset","","Element offset mismatch.",74,null],[12,"name","gfx::pso::ElementError","Element name.",74,null],[12,"shader_offset","","Element byte offset in the shader-side constant buffer.",74,null],[12,"code_offset","","Element byte offset in the code-side constant buffer.",74,null],[13,"Format","gfx::pso","Element format mismatch.",74,null],[12,"name","gfx::pso::ElementError","Element name.",74,null],[12,"shader_format","","Element format in the shader-side constant buffer.",74,null],[12,"code_format","","Element format in the code-side constant buffer.",74,null],[4,"InitError","gfx::pso","Failure to initilize the link between the shader and the data.",null,null],[13,"VertexImport","","Vertex attribute mismatch.",75,null],[13,"ConstantBuffer","","Constant buffer mismatch.",75,null],[13,"GlobalConstant","","Global constant mismatch.",75,null],[13,"ResourceView","","Shader resource view mismatch.",75,null],[13,"UnorderedView","","Unordered access view mismatch.",75,null],[13,"Sampler","","Sampler mismatch.",75,null],[13,"PixelExport","","Pixel target mismatch.",75,null],[0,"buffer","","Buffer components for a PSO.",null,null],[6,"BufferIndex","gfx::pso::buffer","Index of a vertex buffer.",null,null],[3,"Element","","A struct element descriptor.",null,null],[12,"format","","Element format",76,null],[12,"offset","","Offset from the beginning of the container, in bytes",76,null],[6,"ElemOffset","","Offset of an attribute from the start of the buffer, in bytes",null,null],[6,"ElemStride","","Offset between attribute values, in bytes",null,null],[6,"InstanceRate","","The number of instances between each subsequent attribute value",null,null],[3,"VertexBufferCommon","","Service struct to simplify the implementations of `VertexBuffer` and `InstanceBuffer`.",null,null],[3,"RawVertexBuffer","","Raw vertex/instance buffer component. Can be used when the formats of vertex attributes are not known at compile time.",null,null],[3,"ConstantBuffer","","Constant buffer component.",null,null],[3,"RawConstantBuffer","","Raw constant buffer component.",null,null],[3,"Global","","Global (uniform) constant component. Describes a free-standing value passed into the shader, which is not enclosed into any constant buffer.",null,null],[3,"RawGlobal","","Raw global (uniform) constant component. Describes a free-standing value passed into the shader, which is not enclosed in any constant buffer.",null,null],[4,"NonInstanced","","Helper phantom type for per-vertex attributes.",null,null],[4,"Instanced","","Helper phantom type for per-instance attributes.",null,null],[6,"VertexBuffer","","Vertex buffer component. Advanced per vertex.",null,null],[6,"InstanceBuffer","","Instance buffer component. Same as the vertex buffer but advances per instance.",null,null],[8,"Structure","","A trait to be implemented by any struct having the layout described in the graphics API, like a vertex buffer.",null,null],[10,"query","","Get the layout of an element by name.",77,{"i":[{"n":"str"}],"o":{"g":["element"],"n":"option"}}],[8,"ToInstanceRate","","Helper trait for `VertexBufferCommon` to support variable instance rate.",null,null],[16,"Init","","The associated init type for PSO component.",78,null],[10,"get_rate","","Get an actual instance rate value from the init.",78,null],[11,"clone","","",79,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",79,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",79,{"i":[{"n":"self"},{"n":"__hti"}]}],[11,"eq","","",79,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"get_rate","","",80,null],[11,"get_rate","","",81,null],[11,"get_rate","","",82,null],[11,"clone","","",83,{"i":[{"n":"self"}],"o":{"n":"rawvertexbuffer"}}],[11,"fmt","","",83,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",83,null],[11,"eq","","",83,{"i":[{"n":"self"},{"n":"rawvertexbuffer"}],"o":{"n":"bool"}}],[11,"ne","","",83,{"i":[{"n":"self"},{"n":"rawvertexbuffer"}],"o":{"n":"bool"}}],[11,"clone","","",84,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",84,{"i":[{"n":"self"},{"n":"__ht"}]}],[11,"eq","","",84,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",85,{"i":[{"n":"self"}],"o":{"n":"rawconstantbuffer"}}],[11,"fmt","","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",85,null],[11,"eq","","",85,{"i":[{"n":"self"},{"n":"rawconstantbuffer"}],"o":{"n":"bool"}}],[11,"ne","","",85,{"i":[{"n":"self"},{"n":"rawconstantbuffer"}],"o":{"n":"bool"}}],[11,"clone","","",86,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",86,{"i":[{"n":"self"},{"n":"__ht"}]}],[11,"eq","","",86,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",87,{"i":[{"n":"self"}],"o":{"n":"rawglobal"}}],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",87,null],[11,"eq","","",87,{"i":[{"n":"self"},{"n":"rawglobal"}],"o":{"n":"bool"}}],[11,"ne","","",87,{"i":[{"n":"self"},{"n":"rawglobal"}],"o":{"n":"bool"}}],[11,"new","","",79,{"o":{"n":"self"}}],[11,"is_active","","",79,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_vertex_buffer","","",79,null],[11,"link_input","","",79,null],[11,"bind_to","","",79,null],[11,"new","","",83,{"o":{"n":"self"}}],[11,"is_active","","",83,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_vertex_buffer","","",83,null],[11,"link_input","","",83,null],[11,"bind_to","","",83,null],[11,"new","","",84,{"o":{"n":"self"}}],[11,"is_active","","",84,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_constant_buffer","","",84,null],[11,"bind_to","","",84,null],[11,"new","","",85,{"o":{"n":"self"}}],[11,"is_active","","",85,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_constant_buffer","","",85,null],[11,"bind_to","","",85,null],[11,"new","","",86,{"o":{"n":"self"}}],[11,"is_active","","",86,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_global_constant","","",86,null],[11,"bind_to","","",86,null],[11,"new","","",87,{"o":{"n":"self"}}],[11,"is_active","","",87,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_global_constant","","",87,null],[11,"bind_to","","",87,null],[0,"resource","gfx::pso","Resource components for a PSO.",null,null],[3,"ShaderResource","gfx::pso::resource","Shader resource component (SRV). Typically is a view into some texture, but can also be a buffer.",null,null],[3,"RawShaderResource","","Raw (untyped) shader resource (SRV).",null,null],[3,"UnorderedAccess","","Unordered access component (UAV). A writable resource (texture/buffer) with no defined access order across simultaneously executing shaders. Supported on DX10 and higher.",null,null],[3,"Sampler","","Sampler component.",null,null],[3,"TextureSampler","","A convenience type for a texture paired with a sampler. It only makes sense for DX9 class hardware, where every texture by default is bundled with a sampler, hence they are represented by the same name. In DX10 and higher samplers are totally separated from the textures.",null,null],[11,"clone","","",88,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",88,{"i":[{"n":"self"},{"n":"__ht"}]}],[11,"eq","","",88,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",89,{"i":[{"n":"self"}],"o":{"n":"rawshaderresource"}}],[11,"fmt","","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",89,null],[11,"eq","","",89,{"i":[{"n":"self"},{"n":"rawshaderresource"}],"o":{"n":"bool"}}],[11,"ne","","",89,{"i":[{"n":"self"},{"n":"rawshaderresource"}],"o":{"n":"bool"}}],[11,"clone","","",90,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",90,{"i":[{"n":"self"},{"n":"__ht"}]}],[11,"eq","","",90,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",91,{"i":[{"n":"self"}],"o":{"n":"sampler"}}],[11,"fmt","","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",91,null],[11,"eq","","",91,{"i":[{"n":"self"},{"n":"sampler"}],"o":{"n":"bool"}}],[11,"ne","","",91,{"i":[{"n":"self"},{"n":"sampler"}],"o":{"n":"bool"}}],[11,"clone","","",92,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",92,{"i":[{"n":"self"},{"n":"__ht"}]}],[11,"eq","","",92,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"new","","",88,{"o":{"n":"self"}}],[11,"is_active","","",88,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_resource_view","","",88,null],[11,"bind_to","","",88,null],[11,"new","","",89,{"o":{"n":"self"}}],[11,"is_active","","",89,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_resource_view","","",89,null],[11,"bind_to","","",89,null],[11,"new","","",90,{"o":{"n":"self"}}],[11,"is_active","","",90,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_unordered_view","","",90,null],[11,"bind_to","","",90,null],[11,"new","","",91,{"o":{"n":"self"}}],[11,"is_active","","",91,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_sampler","","",91,null],[11,"bind_to","","",91,null],[11,"new","","",92,{"o":{"n":"self"}}],[11,"is_active","","",92,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_resource_view","","",92,null],[11,"link_sampler","","",92,null],[11,"bind_to","","",92,null],[0,"target","gfx::pso","Render target components for a PSO.",null,null],[3,"RenderTarget","gfx::pso::target","Render target component. Typically points to a color-formatted texture.",null,null],[3,"BlendTarget","","Render target component with active blending mode.",null,null],[3,"RawRenderTarget","","Raw (untyped) render target component with optional blending.",null,null],[3,"DepthTarget","","Depth target component.",null,null],[3,"StencilTarget","","Stencil target component.",null,null],[3,"DepthStencilTarget","","Depth + stencil target component.",null,null],[3,"Scissor","","Scissor component. Sets up the scissor test for rendering.",null,null],[3,"BlendRef","","Blend reference component. Sets up the reference color for blending.",null,null],[11,"clone","","",93,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",93,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",93,{"i":[{"n":"self"},{"n":"__ht"}]}],[11,"eq","","",93,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",94,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",94,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",94,{"i":[{"n":"self"},{"n":"__ht"}]}],[11,"eq","","",94,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",95,{"i":[{"n":"self"}],"o":{"n":"rawrendertarget"}}],[11,"fmt","","",95,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",95,null],[11,"eq","","",95,{"i":[{"n":"self"},{"n":"rawrendertarget"}],"o":{"n":"bool"}}],[11,"ne","","",95,{"i":[{"n":"self"},{"n":"rawrendertarget"}],"o":{"n":"bool"}}],[11,"clone","","",96,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",96,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",96,{"i":[{"n":"self"},{"n":"__ht"}]}],[11,"eq","","",96,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",97,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",97,{"i":[{"n":"self"},{"n":"__ht"}]}],[11,"eq","","",97,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",98,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",98,{"i":[{"n":"self"},{"n":"__ht"}]}],[11,"eq","","",98,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",99,{"i":[{"n":"self"}],"o":{"n":"scissor"}}],[11,"fmt","","",99,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",99,null],[11,"eq","","",99,{"i":[{"n":"self"},{"n":"scissor"}],"o":{"n":"bool"}}],[11,"ne","","",99,{"i":[{"n":"self"},{"n":"scissor"}],"o":{"n":"bool"}}],[11,"clone","","",100,{"i":[{"n":"self"}],"o":{"n":"blendref"}}],[11,"fmt","","",100,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",100,null],[11,"eq","","",100,{"i":[{"n":"self"},{"n":"blendref"}],"o":{"n":"bool"}}],[11,"new","","",93,{"o":{"n":"self"}}],[11,"is_active","","",93,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_output","","",93,null],[11,"bind_to","","",93,null],[11,"new","","",94,{"o":{"n":"self"}}],[11,"is_active","","",94,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_output","","",94,null],[11,"bind_to","","",94,null],[11,"new","","",95,{"o":{"n":"self"}}],[11,"is_active","","",95,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_output","","",95,null],[11,"bind_to","","",95,null],[11,"new","","",96,{"o":{"n":"self"}}],[11,"is_active","","",96,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_depth_stencil","","",96,null],[11,"bind_to","","",96,null],[11,"new","","",97,{"o":{"n":"self"}}],[11,"is_active","","",97,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_depth_stencil","","",97,null],[11,"bind_to","","",97,null],[11,"new","","",98,{"o":{"n":"self"}}],[11,"is_active","","",98,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_depth_stencil","","",98,null],[11,"bind_to","","",98,null],[11,"new","","",99,{"o":{"n":"self"}}],[11,"is_active","","",99,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_scissor","","",99,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"bind_to","","",99,null],[11,"new","","",100,{"o":{"n":"self"}}],[11,"is_active","","",100,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"bind_to","","",100,null],[0,"bundle","gfx::pso","Combine slice data with pipeline state.",null,null],[3,"Bundle","gfx::pso::bundle","Slice-PSO bundle.",null,null],[12,"slice","","Slice",101,null],[12,"pso","","Pipeline state",101,null],[12,"data","","Pipeline data",101,null],[11,"new","","Create new Bundle",101,{"i":[{"n":"slice"},{"n":"pipelinestate"},{"n":"data"}],"o":{"n":"self"}}],[11,"encode","","Draw bundle using encoder.",101,{"i":[{"n":"self"},{"n":"encoder"}]}],[8,"PipelineInit","gfx::pso","A service trait implemented by the \"init\" structure of PSO.",null,null],[16,"Meta","","The associated \"meta\" struct.",102,null],[10,"link_to","","Attempt to map a PSO descriptor to a give shader program, represented by `ProgramInfo`. Returns an instance of the \"meta\" struct upon successful mapping.",102,{"i":[{"n":"self"},{"n":"descriptor"},{"n":"programinfo"}],"o":{"g":["initerror"],"n":"result"}}],[8,"PipelineData","","a service trait implemented the \"data\" structure of PSO.",null,null],[16,"Meta","","The associated \"meta\" struct.",103,null],[10,"bake_to","","Dump all the contained data into the raw data set, given the mapping (\"meta\"), and a handle manager.",103,null],[8,"DataLink","","The \"link\" logic portion of a PSO component. Defines the input data for the component.",null,null],[16,"Init","","The assotiated \"init\" type - a member of the PSO \"init\" struct.",104,null],[10,"new","","Create a new empty data link.",104,{"o":{"n":"self"}}],[10,"is_active","","Check if this link is actually used by the shader.",104,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"link_vertex_buffer","","Attempt to link with a vertex buffer containing multiple attributes.",104,null],[11,"link_input","","Attempt to link with a vertex attribute.",104,null],[11,"link_constant_buffer","","Attempt to link with a constant buffer.",104,null],[11,"link_global_constant","","Attempt to link with a global constant.",104,null],[11,"link_output","","Attempt to link with an output render target (RTV).",104,null],[11,"link_depth_stencil","","Attempt to link with a depth-stencil target (DSV).",104,null],[11,"link_resource_view","","Attempt to link with a shader resource (SRV).",104,null],[11,"link_unordered_view","","Attempt to link with an unordered access (UAV).",104,null],[11,"link_sampler","","Attempt to link with a sampler.",104,null],[11,"link_scissor","","Attempt to enable scissor test.",104,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"DataBind","","The \"bind\" logic portion of the PSO component. Defines how the user data translates into the raw data set.",null,null],[16,"Data","","The associated \"data\" type - a member of the PSO \"data\" struct.",105,null],[10,"bind_to","","Dump the given data into the raw data set.",105,null],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"rawdataset"}}],[11,"fmt","","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",73,{"i":[{"n":"self"},{"n":"rawdataset"}],"o":{"n":"bool"}}],[11,"ne","","",73,{"i":[{"n":"self"},{"n":"rawdataset"}],"o":{"n":"bool"}}],[11,"new","","Create an empty data set.",73,{"o":{"n":"rawdataset"}}],[11,"clear","","Clear all contained data.",73,{"i":[{"n":"self"}]}],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"elementerror"}}],[11,"fmt","","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",74,{"i":[{"n":"self"},{"n":"elementerror"}],"o":{"n":"bool"}}],[11,"ne","","",74,{"i":[{"n":"self"},{"n":"elementerror"}],"o":{"n":"bool"}}],[11,"fmt","","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",74,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from","","",74,{"i":[{"g":["str"],"n":"elementerror"}],"o":{"g":["string"],"n":"elementerror"}}],[11,"clone","","",75,{"i":[{"n":"self"}],"o":{"n":"initerror"}}],[11,"fmt","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",75,{"i":[{"n":"self"},{"n":"initerror"}],"o":{"n":"bool"}}],[11,"ne","","",75,{"i":[{"n":"self"},{"n":"initerror"}],"o":{"n":"bool"}}],[11,"from","","",75,{"i":[{"g":["str"],"n":"initerror"}],"o":{"g":["string"],"n":"initerror"}}],[11,"fmt","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",75,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",75,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"clone","","",106,{"i":[{"n":"self"}],"o":{"n":"pipelinestate"}}],[11,"fmt","","",106,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",106,null],[11,"eq","","",106,{"i":[{"n":"self"},{"n":"pipelinestate"}],"o":{"n":"bool"}}],[11,"ne","","",106,{"i":[{"n":"self"},{"n":"pipelinestate"}],"o":{"n":"bool"}}],[11,"new","","Create a new PSO from a raw handle and the \"meta\" instance.",106,{"i":[{"n":"rawpipelinestate"},{"n":"primitive"},{"n":"m"}],"o":{"n":"pipelinestate"}}],[11,"get_handle","","Get a raw handle reference.",106,{"i":[{"n":"self"}],"o":{"n":"rawpipelinestate"}}],[11,"get_meta","","Get a \"meta\" struct reference. Can be used by the user to check what resources are actually used and what not.",106,{"i":[{"n":"self"}],"o":{"n":"m"}}],[0,"shade","gfx","Shaders Shader parameter handling.",null,null],[0,"core","gfx::shade","Shader handling.",null,null],[6,"Dimension","gfx::shade::core","Number of components in a container type (vectors/matrices)",null,null],[4,"IsArray","","Whether the sampler samples an array texture.",null,null],[13,"Array","","",107,null],[13,"NoArray","","",107,null],[4,"IsComparison","","Whether the sampler compares the depth value upon sampling.",null,null],[13,"Compare","","",108,null],[13,"NoCompare","","",108,null],[4,"IsMultiSample","","Whether the sampler samples a multisample texture.",null,null],[13,"MultiSample","","",109,null],[13,"NoMultiSample","","",109,null],[4,"IsRect","","Whether the sampler samples a rectangle texture.",null,null],[13,"Rect","","",110,null],[13,"NoRect","","",110,null],[4,"MatrixFormat","","Whether the matrix is column or row major.",null,null],[13,"ColumnMajor","","",111,null],[13,"RowMajor","","",111,null],[4,"TextureType","","A type of the texture variable. This has to match the actual data we bind to the shader.",null,null],[13,"Buffer","","Sample from a buffer.",112,null],[13,"D1","","Sample from a 1D texture",112,null],[13,"D2","","Sample from a 2D texture",112,null],[13,"D3","","Sample from a 3D texture",112,null],[13,"Cube","","Sample from a cubemap.",112,null],[3,"SamplerType","","A type of the sampler variable.",null,null],[12,"0","","",113,null],[12,"1","","",113,null],[4,"BaseType","","Base type of this shader parameter.",null,null],[13,"I32","","",114,null],[13,"U32","","",114,null],[13,"F32","","",114,null],[13,"F64","","",114,null],[13,"Bool","","",114,null],[4,"ContainerType","","Number of components this parameter represents.",null,null],[13,"Single","","Scalar value",115,null],[13,"Vector","","A vector with `Dimension` components.",115,null],[13,"Matrix","","A matrix.",115,null],[4,"Stage","","Which program stage this shader represents.",null,null],[13,"Vertex","","",116,null],[13,"Hull","","",116,null],[13,"Domain","","",116,null],[13,"Geometry","","",116,null],[13,"Pixel","","",116,null],[17,"STAGES","","A constant static array of all shader stages.",null,null],[6,"Location","","Location of a parameter in the program.",null,null],[4,"UniformValue","","A value that can be uploaded to the device as a uniform.",null,null],[13,"I32","","",63,null],[13,"F32","","",63,null],[13,"I32Vector2","","",63,null],[13,"I32Vector3","","",63,null],[13,"I32Vector4","","",63,null],[13,"F32Vector2","","",63,null],[13,"F32Vector3","","",63,null],[13,"F32Vector4","","",63,null],[13,"F32Matrix2","","",63,null],[13,"F32Matrix3","","",63,null],[13,"F32Matrix4","","",63,null],[6,"ConstFormat","","Format of a shader constant.",null,null],[8,"BaseTyped","","A trait that statically links simple data types to base types of the shader constants.",null,null],[10,"get_base_type","","",117,{"o":{"n":"basetype"}}],[8,"Formatted","","A trait that statically links simple data types to constant formats.",null,null],[10,"get_format","","Get the associated constant format.",118,null],[3,"Usage","","Parameter usage flags.",null,null],[3,"AttributeVar","","Vertex information that a shader takes as input.",null,null],[12,"name","","Name of this attribute.",119,null],[12,"slot","","Slot of the vertex attribute.",119,null],[12,"base_type","","Type that this attribute is composed of.",119,null],[12,"container","","\"Scalarness\" of this attribute.",119,null],[3,"ConstVar","","A constant in the shader - a bit of data that doesn't vary",null,null],[12,"name","","Name of this constant.",120,null],[12,"location","","Location of this constant in the program. For constant buffer elements, it's the offset in bytes.",120,null],[12,"count","","Number of elements this constant represents.",120,null],[12,"base_type","","Type that this constant is composed of",120,null],[12,"container","","\"Scalarness\" of this constant.",120,null],[3,"ConstantBufferVar","","A constant buffer.",null,null],[12,"name","","Name of this constant buffer.",121,null],[12,"slot","","Slot of the constant buffer.",121,null],[12,"size","","Size (in bytes) of this buffer's data.",121,null],[12,"usage","","What program stage this buffer is used in.",121,null],[12,"elements","","List of individual elements in this buffer.",121,null],[3,"TextureVar","","Texture shader parameter.",null,null],[12,"name","","Name of this texture variable.",122,null],[12,"slot","","Slot of this texture variable.",122,null],[12,"base_type","","Base type for the texture.",122,null],[12,"ty","","Type of this texture.",122,null],[12,"usage","","What program stage this texture is used in.",122,null],[3,"UnorderedVar","","Unordered access shader parameter.",null,null],[12,"name","","Name of this unordered variable.",123,null],[12,"slot","","Slot of this unordered variable.",123,null],[12,"usage","","What program stage this UAV is used in.",123,null],[3,"SamplerVar","","Sampler shader parameter.",null,null],[12,"name","","Name of this sampler variable.",124,null],[12,"slot","","Slot of this sampler variable.",124,null],[12,"ty","","Type of this sampler.",124,null],[12,"usage","","What program stage this texture is used in.",124,null],[3,"OutputVar","","Target output variable.",null,null],[12,"name","","Name of this output variable.",125,null],[12,"slot","","Output color target index.",125,null],[12,"base_type","","Type of the output component.",125,null],[12,"container","","\"Scalarness\" of this output.",125,null],[3,"ProgramInfo","","Metadata about a program.",null,null],[12,"vertex_attributes","","Attributes in the program",62,null],[12,"globals","","Global constants in the program",62,null],[12,"constant_buffers","","Constant buffers in the program",62,null],[12,"textures","","Textures in the program",62,null],[12,"unordereds","","Unordered access resources in the program",62,null],[12,"samplers","","Samplers in the program",62,null],[12,"outputs","","Output targets in the program",62,null],[12,"output_depth","","A flag indicating that the pixel shader manually assigns the depth.",62,null],[12,"knows_outputs","","A hacky flag to make sure the clients know we are unable to actually get the output variable info",62,null],[3,"Program","","A program",null,null],[4,"CompatibilityError","","Error type for trying to store a UniformValue in a ConstVar.",null,null],[13,"ErrorArraySize","","Array sizes differ between the value and the var (trying to upload a vec2 as a vec4, etc)",126,null],[13,"ErrorBaseType","","Base types differ between the value and the var (trying to upload a f32 as a u16, etc)",126,null],[13,"ErrorContainer","","Container-ness differs between the value and the var (trying to upload a scalar as a vec4, etc)",126,null],[4,"CreateShaderError","","An error type for creating shaders.",null,null],[13,"ModelNotSupported","","The device does not support the requested shader model.",127,null],[13,"StageNotSupported","","The device does not support the shader stage.",127,null],[13,"CompilationFailed","","The shader failed to compile.",127,null],[3,"CreateProgramError","","An error type for creating programs.",null,null],[6,"ConstFormat","gfx::shade","Format of a shader constant.",null,null],[8,"Formatted","","A trait that statically links simple data types to constant formats.",null,null],[10,"get_format","","Get the associated constant format.",118,null],[3,"Usage","","Parameter usage flags.",null,null],[4,"ProgramError","","Program linking error",null,null],[13,"Vertex","","Unable to compile the vertex shader",128,null],[13,"Hull","","Unable to compile the hull shader",128,null],[13,"Domain","","Unable to compile the domain shader",128,null],[13,"Geometry","","Unable to compile the geometry shader",128,null],[13,"Pixel","","Unable to compile the pixel shader",128,null],[13,"Link","","Unable to link",128,null],[8,"ToUniform","","",null,null],[10,"convert","","",129,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"clone","","",128,{"i":[{"n":"self"}],"o":{"n":"programerror"}}],[11,"fmt","","",128,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",128,{"i":[{"n":"self"},{"n":"programerror"}],"o":{"n":"bool"}}],[11,"ne","","",128,{"i":[{"n":"self"},{"n":"programerror"}],"o":{"n":"bool"}}],[11,"fmt","","",128,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",128,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",128,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[0,"macros","gfx","Convenience macros Various helper macros.",null,null],[6,"CopyBufferResult","","Result type returned when copying a buffer into another buffer.",null,null],[6,"CopyBufferTextureResult","","Result type returned when copying buffer data into a texture.",null,null],[6,"CopyTextureBufferResult","","Result type returned when copying texture data into a buffer.",null,null],[8,"IntoIndexBuffer","","A helper trait to create `IndexBuffers` from different kinds of data.",null,null],[10,"into_index_buffer","","Turns self into an `IndexBuffer`.",130,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"indexbuffer"}}],[14,"gfx_pipeline_inner","","",null,null],[14,"gfx_pipeline_base","","",null,null],[14,"gfx_pipeline","","",null,null],[14,"gfx_impl_struct","","",null,null],[14,"gfx_impl_struct_meta","","",null,null],[14,"gfx_vertex_struct","","",null,null],[14,"gfx_vertex_struct_meta","","",null,null],[14,"gfx_constant_struct","","",null,null],[14,"gfx_constant_struct_meta","","",null,null],[14,"gfx_format","","",null,null],[14,"gfx_defines","","Defines vertex, constant and pipeline formats in one block.",null,null],[11,"bitxor","gfx::state","Returns the left flags, but with all the right flags toggled.",131,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"colormask"}}],[11,"bitxor","gfx","Returns the left flags, but with all the right flags toggled.",132,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"mirror"}}],[11,"fmt","gfx::state","",131,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"cmp","gfx::state","",5,{"i":[{"n":"self"},{"n":"comparison"}],"o":{"n":"ordering"}}],[11,"cmp","gfx","",132,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::state","",6,{"i":[{"n":"self"},{"n":"stencilop"}],"o":{"n":"ordering"}}],[11,"cmp","","",11,{"i":[{"n":"self"},{"n":"blendvalue"}],"o":{"n":"ordering"}}],[11,"cmp","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"ordering"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"frontface"}],"o":{"n":"ordering"}}],[11,"cmp","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"ordering"}}],[11,"cmp","","",2,{"i":[{"n":"self"},{"n":"cullface"}],"o":{"n":"ordering"}}],[11,"cmp","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"ordering"}}],[11,"cmp","","",133,{"i":[{"n":"self"},{"n":"multisample"}],"o":{"n":"ordering"}}],[11,"cmp","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"ordering"}}],[11,"cmp","","",10,{"i":[{"n":"self"},{"n":"equation"}],"o":{"n":"ordering"}}],[11,"cmp","","",131,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"ordering"}}],[11,"cmp","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",16,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",16,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"le","","",16,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"gt","","",16,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"ge","","",16,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",5,{"i":[{"n":"self"},{"n":"comparison"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx","",17,{"i":[{"n":"self"},{"n":"rect"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",17,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"le","","",17,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"gt","","",17,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"ge","","",17,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::state","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"le","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"gt","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"ge","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",10,{"i":[{"n":"self"},{"n":"equation"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",6,{"i":[{"n":"self"},{"n":"stencilop"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",131,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",131,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"le","","",131,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"gt","","",131,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"ge","","",131,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"cullface"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",11,{"i":[{"n":"self"},{"n":"blendvalue"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",3,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",3,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"le","","",3,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"gt","","",3,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"ge","","",3,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"le","","",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"gt","","",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"ge","","",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"frontface"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",4,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"le","","",4,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"gt","","",4,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"ge","","",4,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",133,{"i":[{"n":"self"},{"n":"multisample"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"le","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"gt","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"ge","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"le","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"gt","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"ge","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"le","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"gt","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"ge","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"le","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"gt","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"ge","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"offset"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",1,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"le","","",1,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"gt","","",1,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"ge","","",1,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx","",132,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",132,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"le","","",132,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"gt","","",132,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"ge","","",132,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::state","",14,{"i":[{"n":"self"},{"n":"blend"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",14,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"le","","",14,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"gt","","",14,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"ge","","",14,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"bitxor_assign","","Toggles the set of flags.",131,null],[11,"bitxor_assign","gfx","Toggles the set of flags.",132,null],[11,"not","","Returns the complement of this set of flags.",132,{"i":[{"n":"self"}],"o":{"n":"mirror"}}],[11,"not","gfx::state","Returns the complement of this set of flags.",131,{"i":[{"n":"self"}],"o":{"n":"colormask"}}],[11,"bitor_assign","","Adds the set of flags.",131,null],[11,"bitor_assign","gfx","Adds the set of flags.",132,null],[11,"from_iter","","",132,{"i":[{"n":"t"}],"o":{"n":"mirror"}}],[11,"from_iter","gfx::state","",131,{"i":[{"n":"t"}],"o":{"n":"colormask"}}],[11,"default","","",15,{"o":{"n":"color"}}],[11,"default","","",14,{"o":{"n":"blend"}}],[11,"default","","",7,{"o":{"n":"stencilside"}}],[11,"default","","",13,{"o":{"n":"blendchannel"}}],[11,"default","","",9,{"o":{"n":"depth"}}],[11,"default","","",8,{"o":{"n":"stencil"}}],[11,"default","","",16,{"o":{"n":"refvalues"}}],[11,"sub_assign","","Disables all flags enabled in the set.",131,null],[11,"sub_assign","gfx","Disables all flags enabled in the set.",132,null],[11,"bitand","gfx::state","Returns the intersection between the two sets of flags.",131,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"colormask"}}],[11,"bitand","gfx","Returns the intersection between the two sets of flags.",132,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"mirror"}}],[11,"fmt","gfx::state","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::state","",131,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::state","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",133,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::state","",131,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",131,null],[11,"bitand_assign","gfx","Disables all flags disabled in the set.",132,null],[11,"eq","gfx::state","",14,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"ne","","",14,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"ne","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"eq","gfx","",17,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"ne","","",17,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"eq","gfx::state","",131,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"ne","","",131,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"frontface"}],"o":{"n":"bool"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"eq","","",133,{"i":[{"n":"self"},{"n":"multisample"}],"o":{"n":"bool"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"ne","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"ne","","",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"stencilop"}],"o":{"n":"bool"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"equation"}],"o":{"n":"bool"}}],[11,"eq","gfx","",132,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"ne","","",132,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"eq","gfx::state","",1,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"comparison"}],"o":{"n":"bool"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"cullface"}],"o":{"n":"bool"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"blendvalue"}],"o":{"n":"bool"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"ne","","",16,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"extend","","",131,null],[11,"extend","gfx","",132,null],[11,"bitor","gfx::state","Returns the union of the two sets of flags.",131,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"colormask"}}],[11,"bitor","gfx","Returns the union of the two sets of flags.",132,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"mirror"}}],[11,"fmt","gfx::state","",131,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"sub","gfx::state","Returns the set difference of the two sets of flags.",131,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"colormask"}}],[11,"sub","gfx","Returns the set difference of the two sets of flags.",132,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"mirror"}}],[11,"clone","gfx::state","",15,{"i":[{"n":"self"}],"o":{"n":"color"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"cullface"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"comparison"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"blendchannel"}}],[11,"clone","gfx","",132,{"i":[{"n":"self"}],"o":{"n":"mirror"}}],[11,"clone","gfx::state","",4,{"i":[{"n":"self"}],"o":{"n":"rasterizer"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"stencilside"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"offset"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"refvalues"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"factor"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"frontface"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"stencil"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"equation"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"depth"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"blend"}}],[11,"clone","gfx","",17,{"i":[{"n":"self"}],"o":{"n":"rect"}}],[11,"clone","gfx::state","",11,{"i":[{"n":"self"}],"o":{"n":"blendvalue"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"stencilop"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"rastermethod"}}],[11,"clone","","",131,{"i":[{"n":"self"}],"o":{"n":"colormask"}}],[11,"clone","","",133,{"i":[{"n":"self"}],"o":{"n":"multisample"}}],[11,"fmt","gfx","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::state","",131,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"hash","","",7,null],[11,"hash","","",15,null],[11,"hash","","",11,null],[11,"hash","","",3,null],[11,"hash","","",9,null],[11,"hash","","",131,null],[11,"hash","","",4,null],[11,"hash","","",1,null],[11,"hash","","",10,null],[11,"hash","","",0,null],[11,"hash","","",133,null],[11,"hash","","",8,null],[11,"hash","","",12,null],[11,"hash","","",2,null],[11,"hash","","",14,null],[11,"hash","gfx","",132,null],[11,"hash","gfx::state","",13,null],[11,"hash","","",5,null],[11,"hash","","",6,null],[11,"hash","gfx","",17,null],[11,"from","gfx::format","",38,{"i":[{"n":"u16"}],"o":{"n":"f16"}}],[11,"from","gfx::texture","",43,{"i":[{"n":"u8"}],"o":{"n":"aamode"}}],[11,"from","gfx::format","",34,{"i":[{"n":"u8"}],"o":{"n":"u8norm"}}],[11,"from","gfx","",60,{"i":[{"n":"targetviewerror"}],"o":{"n":"combinederror"}}],[11,"from","","",60,{"i":[{"n":"resourceviewerror"}],"o":{"n":"combinederror"}}],[11,"from","gfx::format","",36,{"i":[{"n":"u16"}],"o":{"n":"u16norm"}}],[11,"from","gfx::shade::core","",134,{"i":[{"n":"s"}],"o":{"n":"createprogramerror"}}],[11,"from","gfx::shade","",135,{"i":[{"n":"stage"}],"o":{"n":"usage"}}],[11,"from","gfx::format","",37,{"i":[{"n":"i16"}],"o":{"n":"i16norm"}}],[11,"from","gfx::texture","",56,{"i":[{"n":"renderdesc"}],"o":{"n":"depthstencildesc"}}],[11,"from","gfx","",60,{"i":[{"n":"creationerror"}],"o":{"n":"combinederror"}}],[11,"from","gfx::texture","",136,{"i":[{"n":"f32"}],"o":{"n":"lod"}}],[11,"from","gfx::format","",35,{"i":[{"n":"i8"}],"o":{"n":"i8norm"}}],[11,"from","gfx::texture","",51,null],[11,"fmt","gfx","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",127,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::mapping","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",134,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",126,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::buffer","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",137,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",127,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",138,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",139,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",140,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::memory","",141,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",142,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",143,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",144,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",145,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",119,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::mapping","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",115,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",146,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",147,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",148,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::buffer","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",149,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",150,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",151,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",152,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",153,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",154,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",111,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",155,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::pso","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",134,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",109,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",156,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",157,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",158,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",126,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::pso::buffer","",76,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",159,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",160,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",161,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",121,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",162,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",163,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::pso","",164,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::mapping","",165,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",136,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",123,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",166,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",167,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",125,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",168,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",120,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",169,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",170,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",171,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",172,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",173,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::buffer","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",174,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",175,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",113,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",176,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::buffer","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::memory","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::mapping","",177,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",178,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",124,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",179,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",114,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade","",135,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",180,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",181,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",182,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",183,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",184,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",116,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",185,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",186,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",110,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",112,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",108,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",187,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade::core","",122,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",188,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",189,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",190,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",191,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::format","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::memory","",192,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::buffer","",193,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",194,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::handle","",195,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade","",135,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::memory","",141,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",192,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",158,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"bitand_assign","gfx::memory","Disables all flags disabled in the set.",192,null],[11,"bitand_assign","gfx::texture","Disables all flags disabled in the set.",158,null],[11,"bitand_assign","gfx::memory","Disables all flags disabled in the set.",141,null],[11,"bitand_assign","gfx::shade","Disables all flags disabled in the set.",135,null],[11,"get_surface_type","gfx::format","",162,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",176,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",184,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",175,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",179,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",191,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",155,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",144,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",153,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",188,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",190,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",186,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",183,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",161,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",137,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",173,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",189,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",154,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",172,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",182,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",143,{"o":{"n":"surfacetype"}}],[11,"get_surface_type","","",167,{"o":{"n":"surfacetype"}}],[11,"bitor","gfx::texture","Returns the union of the two sets of flags.",158,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"depthstencilflags"}}],[11,"bitor","gfx::memory","Returns the union of the two sets of flags.",192,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"access"}}],[11,"bitor","gfx::shade","Returns the union of the two sets of flags.",135,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"usage"}}],[11,"bitor","gfx::memory","Returns the union of the two sets of flags.",141,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bind"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",141,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bind"}}],[11,"bitxor","gfx::shade","Returns the left flags, but with all the right flags toggled.",135,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"usage"}}],[11,"bitxor","gfx::memory","Returns the left flags, but with all the right flags toggled.",192,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"access"}}],[11,"bitxor","gfx::texture","Returns the left flags, but with all the right flags toggled.",158,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"depthstencilflags"}}],[11,"not","gfx::memory","Returns the complement of this set of flags.",192,{"i":[{"n":"self"}],"o":{"n":"access"}}],[11,"not","","Returns the complement of this set of flags.",141,{"i":[{"n":"self"}],"o":{"n":"bind"}}],[11,"not","gfx::texture","Returns the complement of this set of flags.",158,{"i":[{"n":"self"}],"o":{"n":"depthstencilflags"}}],[11,"not","gfx::shade","Returns the complement of this set of flags.",135,{"i":[{"n":"self"}],"o":{"n":"usage"}}],[11,"description","gfx","",58,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",58,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"description","","",21,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","gfx::mapping","",39,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","gfx::shade::core","",126,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","gfx","",60,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",60,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"description","","",59,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",59,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"description","gfx::texture","",41,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","gfx::shade::core","",134,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","","",127,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","gfx::buffer","",25,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","gfx::texture","",42,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"extend","","",158,null],[11,"extend","gfx::shade","",135,null],[11,"extend","gfx::memory","",141,null],[11,"extend","","",192,null],[11,"sub","","Returns the set difference of the two sets of flags.",141,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bind"}}],[11,"sub","","Returns the set difference of the two sets of flags.",192,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"access"}}],[11,"sub","gfx::shade","Returns the set difference of the two sets of flags.",135,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"usage"}}],[11,"sub","gfx::texture","Returns the set difference of the two sets of flags.",158,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"depthstencilflags"}}],[11,"fmt","","",158,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::memory","",192,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",141,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade","",135,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"clone","gfx::pso","",164,{"i":[{"n":"self"}],"o":{"n":"accessinfo"}}],[11,"clone","gfx","",59,{"i":[{"n":"self"}],"o":{"n":"targetviewerror"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"shaderset"}}],[11,"clone","gfx::format","",191,{"i":[{"n":"self"}],"o":{"n":"r32_g32_b32_a32"}}],[11,"clone","gfx::shade::core","",111,{"i":[{"n":"self"}],"o":{"n":"matrixformat"}}],[11,"clone","gfx::format","",28,{"i":[{"n":"self"}],"o":{"n":"channelsource"}}],[11,"clone","","",180,{"i":[{"n":"self"}],"o":{"n":"unorm"}}],[11,"clone","gfx::shade::core","",122,{"i":[{"n":"self"}],"o":{"n":"texturevar"}}],[11,"clone","gfx::texture","",52,{"i":[{"n":"self"}],"o":{"n":"samplerinfo"}}],[11,"clone","gfx::handle","",157,{"i":[{"n":"self"}],"o":{"n":"shaderresourceview"}}],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"clone","gfx::memory","",192,{"i":[{"n":"self"}],"o":{"n":"access"}}],[11,"clone","gfx::format","",167,{"i":[{"n":"self"}],"o":{"n":"r11_g11_b10"}}],[11,"clone","gfx","",181,{"i":[{"n":"self"}],"o":{"n":"vertexshader"}}],[11,"clone","","",174,{"i":[{"n":"self"}],"o":{"n":"pixelshader"}}],[11,"clone","gfx::handle","",170,{"i":[{"n":"self"}],"o":{"n":"rawdepthstencilview"}}],[11,"clone","gfx::format","",183,{"i":[{"n":"self"}],"o":{"n":"r5_g5_b5_a1"}}],[11,"clone","gfx::shade::core","",109,{"i":[{"n":"self"}],"o":{"n":"ismultisample"}}],[11,"clone","gfx::format","",176,{"i":[{"n":"self"}],"o":{"n":"r32"}}],[11,"clone","gfx::shade::core","",62,{"i":[{"n":"self"}],"o":{"n":"programinfo"}}],[11,"clone","gfx::format","",37,{"i":[{"n":"self"}],"o":{"n":"i16norm"}}],[11,"clone","gfx::texture","",43,{"i":[{"n":"self"}],"o":{"n":"aamode"}}],[11,"clone","gfx::format","",190,{"i":[{"n":"self"}],"o":{"n":"r16_g16_b16_a16"}}],[11,"clone","gfx::texture","",136,{"i":[{"n":"self"}],"o":{"n":"lod"}}],[11,"clone","gfx::format","",34,{"i":[{"n":"self"}],"o":{"n":"u8norm"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"surfacetype"}}],[11,"clone","","",184,{"i":[{"n":"self"}],"o":{"n":"r8"}}],[11,"clone","gfx::pso::buffer","",76,{"i":[{"n":"self"}],"o":{"n":"element"}}],[11,"clone","gfx::shade::core","",121,{"i":[{"n":"self"}],"o":{"n":"constantbuffervar"}}],[11,"clone","gfx::handle","",149,{"i":[{"n":"self"}],"o":{"n":"rawtexture"}}],[11,"clone","gfx::shade::core","",125,{"i":[{"n":"self"}],"o":{"n":"outputvar"}}],[11,"clone","gfx::handle","",138,{"i":[{"n":"self"}],"o":{"n":"rawrendertargetview"}}],[11,"clone","gfx::shade::core","",124,{"i":[{"n":"self"}],"o":{"n":"samplervar"}}],[11,"clone","gfx","",146,{"i":[{"n":"self"}],"o":{"n":"geometryshader"}}],[11,"clone","gfx::shade::core","",115,{"i":[{"n":"self"}],"o":{"n":"containertype"}}],[11,"clone","gfx::handle","",145,{"i":[{"n":"self"}],"o":{"n":"program"}}],[11,"clone","gfx::format","",144,{"i":[{"n":"self"}],"o":{"n":"d24"}}],[11,"clone","","",188,{"i":[{"n":"self"}],"o":{"n":"b8_g8_r8_a8"}}],[11,"clone","gfx::shade::core","",112,{"i":[{"n":"self"}],"o":{"n":"texturetype"}}],[11,"clone","gfx::texture","",51,{"i":[{"n":"self"}],"o":{"n":"packedcolor"}}],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"resourcedesc"}}],[11,"clone","gfx::shade::core","",126,{"i":[{"n":"self"}],"o":{"n":"compatibilityerror"}}],[11,"clone","","",110,{"i":[{"n":"self"}],"o":{"n":"isrect"}}],[11,"clone","gfx::texture","",56,{"i":[{"n":"self"}],"o":{"n":"depthstencildesc"}}],[11,"clone","gfx::handle","",151,{"i":[{"n":"self"}],"o":{"n":"texture"}}],[11,"clone","gfx::shade::core","",123,{"i":[{"n":"self"}],"o":{"n":"unorderedvar"}}],[11,"clone","gfx::handle","",140,{"i":[{"n":"self"}],"o":{"n":"rawbuffer"}}],[11,"clone","gfx::shade","",135,{"i":[{"n":"self"}],"o":{"n":"usage"}}],[11,"clone","gfx::handle","",148,{"i":[{"n":"self"}],"o":{"n":"shader"}}],[11,"clone","gfx::memory","",141,{"i":[{"n":"self"}],"o":{"n":"bind"}}],[11,"clone","gfx::shade::core","",108,{"i":[{"n":"self"}],"o":{"n":"iscomparison"}}],[11,"clone","gfx","",19,{"i":[{"n":"self"}],"o":{"n":"primitive"}}],[11,"clone","gfx::format","",159,{"i":[{"n":"self"}],"o":{"n":"inorm"}}],[11,"clone","gfx::shade::core","",116,{"i":[{"n":"self"}],"o":{"n":"stage"}}],[11,"clone","gfx::handle","",171,{"i":[{"n":"self"}],"o":{"n":"fence"}}],[11,"clone","gfx::texture","",48,{"i":[{"n":"self"}],"o":{"n":"imageinfocommon"}}],[11,"clone","gfx::shade::core","",119,{"i":[{"n":"self"}],"o":{"n":"attributevar"}}],[11,"clone","gfx::buffer","",23,{"i":[{"n":"self"}],"o":{"n":"role"}}],[11,"clone","gfx::format","",162,{"i":[{"n":"self"}],"o":{"n":"r8_g8_b8_a8"}}],[11,"clone","gfx::memory","",40,{"i":[{"n":"self"}],"o":{"n":"usage"}}],[11,"clone","gfx::format","",182,{"i":[{"n":"self"}],"o":{"n":"r5_g6_b5"}}],[11,"clone","gfx::texture","",44,{"i":[{"n":"self"}],"o":{"n":"filtermethod"}}],[11,"clone","gfx::mapping","",39,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"clone","gfx::handle","",156,{"i":[{"n":"self"}],"o":{"n":"rendertargetview"}}],[11,"clone","","",147,{"i":[{"n":"self"}],"o":{"n":"depthstencilview"}}],[11,"clone","gfx::format","",154,{"i":[{"n":"self"}],"o":{"n":"r16"}}],[11,"clone","gfx","",58,{"i":[{"n":"self"}],"o":{"n":"resourceviewerror"}}],[11,"clone","gfx::texture","",55,{"i":[{"n":"self"}],"o":{"n":"renderdesc"}}],[11,"clone","gfx::format","",150,{"i":[{"n":"self"}],"o":{"n":"float"}}],[11,"clone","gfx::handle","",168,{"i":[{"n":"self"}],"o":{"n":"rawshaderresourceview"}}],[11,"clone","gfx::format","",137,{"i":[{"n":"self"}],"o":{"n":"d16"}}],[11,"clone","","",173,{"i":[{"n":"self"}],"o":{"n":"d24_s8"}}],[11,"clone","gfx::shade::core","",134,{"i":[{"n":"self"}],"o":{"n":"createprogramerror"}}],[11,"clone","gfx::texture","",46,{"i":[{"n":"self"}],"o":{"n":"kind"}}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"creationerror"}}],[11,"clone","gfx::format","",169,{"i":[{"n":"self"}],"o":{"n":"int"}}],[11,"clone","gfx::texture","",47,{"i":[{"n":"self"}],"o":{"n":"mipmap"}}],[11,"clone","gfx::handle","",187,{"i":[{"n":"self"}],"o":{"n":"sampler"}}],[11,"clone","gfx","",142,{"i":[{"n":"self"}],"o":{"n":"hullshader"}}],[11,"clone","gfx::shade::core","",113,{"i":[{"n":"self"}],"o":{"n":"samplertype"}}],[11,"clone","gfx::format","",161,{"i":[{"n":"self"}],"o":{"n":"r4_g4"}}],[11,"clone","gfx::handle","",163,{"i":[{"n":"self"}],"o":{"n":"rawpipelinestate"}}],[11,"clone","gfx::format","",139,{"i":[{"n":"self"}],"o":{"n":"uint"}}],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"f16"}}],[11,"clone","","",189,{"i":[{"n":"self"}],"o":{"n":"r10_g10_b10_a2"}}],[11,"clone","gfx::texture","",49,{"i":[{"n":"self"}],"o":{"n":"texturecopyregion"}}],[11,"clone","gfx","",60,{"i":[{"n":"self"}],"o":{"n":"combinederror"}}],[11,"clone","gfx::format","",30,{"i":[{"n":"self"}],"o":{"n":"format"}}],[11,"clone","gfx::texture","",53,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"clone","gfx::pso","",72,{"i":[{"n":"self"}],"o":{"n":"descriptor"}}],[11,"clone","gfx::buffer","",25,{"i":[{"n":"self"}],"o":{"n":"creationerror"}}],[11,"clone","gfx::texture","",158,{"i":[{"n":"self"}],"o":{"n":"depthstencilflags"}}],[11,"clone","gfx::format","",29,{"i":[{"n":"self"}],"o":{"n":"swizzle"}}],[11,"clone","gfx","",152,{"i":[{"n":"self"}],"o":{"n":"domainshader"}}],[11,"clone","gfx::format","",26,{"i":[{"n":"self"}],"o":{"n":"channeltype"}}],[11,"clone","gfx::texture","",42,{"i":[{"n":"self"}],"o":{"n":"layererror"}}],[11,"clone","gfx::shade::core","",63,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"clone","gfx::format","",166,{"i":[{"n":"self"}],"o":{"n":"srgb"}}],[11,"clone","","",153,{"i":[{"n":"self"}],"o":{"n":"r16_g16"}}],[11,"clone","","",172,{"i":[{"n":"self"}],"o":{"n":"r32_g32_b32"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"u16norm"}}],[11,"clone","gfx::texture","",50,{"i":[{"n":"self"}],"o":{"n":"wrapmode"}}],[11,"clone","gfx::format","",35,{"i":[{"n":"self"}],"o":{"n":"i8norm"}}],[11,"clone","","",143,{"i":[{"n":"self"}],"o":{"n":"r8_g8"}}],[11,"clone","gfx::shade::core","",120,{"i":[{"n":"self"}],"o":{"n":"constvar"}}],[11,"clone","gfx::buffer","",24,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"clone","gfx::format","",155,{"i":[{"n":"self"}],"o":{"n":"r32_g32"}}],[11,"clone","gfx::shade::core","",107,{"i":[{"n":"self"}],"o":{"n":"isarray"}}],[11,"clone","gfx::texture","",45,{"i":[{"n":"self"}],"o":{"n":"cubeface"}}],[11,"clone","gfx::shade::core","",127,{"i":[{"n":"self"}],"o":{"n":"createshadererror"}}],[11,"clone","","",114,{"i":[{"n":"self"}],"o":{"n":"basetype"}}],[11,"clone","gfx","",21,{"i":[{"n":"self"}],"o":{"n":"submissionerror"}}],[11,"clone","gfx::handle","",160,{"i":[{"n":"self"}],"o":{"n":"rawunorderedaccessview"}}],[11,"clone","gfx::format","",186,{"i":[{"n":"self"}],"o":{"n":"r4_g4_b4_a4"}}],[11,"clone","","",175,{"i":[{"n":"self"}],"o":{"n":"d32"}}],[11,"clone","","",179,{"i":[{"n":"self"}],"o":{"n":"r16_g16_b16"}}],[11,"clone","gfx::handle","",195,{"i":[{"n":"self"}],"o":{"n":"unorderedaccessview"}}],[11,"fmt","gfx::memory","",192,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade","",135,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",158,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::memory","",141,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",192,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",141,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::texture","",158,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx::shade","",135,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"cmp","gfx::format","",29,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"n":"ordering"}}],[11,"cmp","","",143,{"i":[{"n":"self"},{"n":"r8_g8"}],"o":{"n":"ordering"}}],[11,"cmp","","",173,{"i":[{"n":"self"},{"n":"d24_s8"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::memory","",141,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::format","",139,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"ordering"}}],[11,"cmp","","",172,{"i":[{"n":"self"},{"n":"r32_g32_b32"}],"o":{"n":"ordering"}}],[11,"cmp","","",166,{"i":[{"n":"self"},{"n":"srgb"}],"o":{"n":"ordering"}}],[11,"cmp","","",38,{"i":[{"n":"self"},{"n":"f16"}],"o":{"n":"ordering"}}],[11,"cmp","","",36,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::texture","",53,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::format","",34,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::texture","",54,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"n":"ordering"}}],[11,"cmp","","",49,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::shade","",135,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::format","",154,{"i":[{"n":"self"},{"n":"r16"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::texture","",44,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::format","",188,{"i":[{"n":"self"},{"n":"b8_g8_r8_a8"}],"o":{"n":"ordering"}}],[11,"cmp","","",169,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::memory","",192,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::format","",167,{"i":[{"n":"self"},{"n":"r11_g11_b10"}],"o":{"n":"ordering"}}],[11,"cmp","","",176,{"i":[{"n":"self"},{"n":"r32"}],"o":{"n":"ordering"}}],[11,"cmp","","",150,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::texture","",50,{"i":[{"n":"self"},{"n":"wrapmode"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::format","",137,{"i":[{"n":"self"},{"n":"d16"}],"o":{"n":"ordering"}}],[11,"cmp","","",159,{"i":[{"n":"self"},{"n":"inorm"}],"o":{"n":"ordering"}}],[11,"cmp","","",162,{"i":[{"n":"self"},{"n":"r8_g8_b8_a8"}],"o":{"n":"ordering"}}],[11,"cmp","","",184,{"i":[{"n":"self"},{"n":"r8"}],"o":{"n":"ordering"}}],[11,"cmp","","",153,{"i":[{"n":"self"},{"n":"r16_g16"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::texture","",46,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::format","",30,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"ordering"}}],[11,"cmp","","",155,{"i":[{"n":"self"},{"n":"r32_g32"}],"o":{"n":"ordering"}}],[11,"cmp","","",182,{"i":[{"n":"self"},{"n":"r5_g6_b5"}],"o":{"n":"ordering"}}],[11,"cmp","","",144,{"i":[{"n":"self"},{"n":"d24"}],"o":{"n":"ordering"}}],[11,"cmp","","",179,{"i":[{"n":"self"},{"n":"r16_g16_b16"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::texture","",48,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::format","",175,{"i":[{"n":"self"},{"n":"d32"}],"o":{"n":"ordering"}}],[11,"cmp","","",189,{"i":[{"n":"self"},{"n":"r10_g10_b10_a2"}],"o":{"n":"ordering"}}],[11,"cmp","","",27,{"i":[{"n":"self"},{"n":"surfacetype"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::texture","",45,{"i":[{"n":"self"},{"n":"cubeface"}],"o":{"n":"ordering"}}],[11,"cmp","","",56,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::format","",190,{"i":[{"n":"self"},{"n":"r16_g16_b16_a16"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::texture","",158,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::format","",180,{"i":[{"n":"self"},{"n":"unorm"}],"o":{"n":"ordering"}}],[11,"cmp","","",183,{"i":[{"n":"self"},{"n":"r5_g5_b5_a1"}],"o":{"n":"ordering"}}],[11,"cmp","","",186,{"i":[{"n":"self"},{"n":"r4_g4_b4_a4"}],"o":{"n":"ordering"}}],[11,"cmp","","",161,{"i":[{"n":"self"},{"n":"r4_g4"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::memory","",40,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::texture","",43,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::format","",35,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"n":"ordering"}}],[11,"cmp","","",37,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::texture","",47,{"i":[{"n":"self"},{"n":"mipmap"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::format","",26,{"i":[{"n":"self"},{"n":"channeltype"}],"o":{"n":"ordering"}}],[11,"cmp","","",28,{"i":[{"n":"self"},{"n":"channelsource"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::texture","",55,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"n":"ordering"}}],[11,"cmp","gfx::format","",191,{"i":[{"n":"self"},{"n":"r32_g32_b32_a32"}],"o":{"n":"ordering"}}],[11,"from_iter","gfx::shade","",135,{"i":[{"n":"t"}],"o":{"n":"usage"}}],[11,"from_iter","gfx::texture","",158,{"i":[{"n":"t"}],"o":{"n":"depthstencilflags"}}],[11,"from_iter","gfx::memory","",192,{"i":[{"n":"t"}],"o":{"n":"access"}}],[11,"from_iter","","",141,{"i":[{"n":"t"}],"o":{"n":"bind"}}],[11,"sub_assign","gfx::shade","Disables all flags enabled in the set.",135,null],[11,"sub_assign","gfx::memory","Disables all flags enabled in the set.",192,null],[11,"sub_assign","gfx::texture","Disables all flags enabled in the set.",158,null],[11,"sub_assign","gfx::memory","Disables all flags enabled in the set.",141,null],[11,"into","gfx::texture","",51,null],[11,"into","","",136,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"new","gfx::pso","Creates empty access informations",164,{"o":{"n":"accessinfo"}}],[11,"clear","","Clear access informations",164,null],[11,"buffer_read","","Register a buffer read access",164,null],[11,"buffer_write","","Register a buffer write access",164,null],[11,"mapped_reads","","Returns the mapped buffers that The GPU will read from",164,{"i":[{"n":"self"}],"o":{"g":["rawbuffer"],"n":"iter"}}],[11,"mapped_writes","","Returns the mapped buffers that The GPU will write to",164,{"i":[{"n":"self"}],"o":{"g":["rawbuffer"],"n":"iter"}}],[11,"has_mapped_reads","","Is there any mapped buffer reads ?",164,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"has_mapped_writes","","Is there any mapped buffer writes ?",164,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"take_accesses","","Takes all the accesses necessary for submission",164,{"i":[{"n":"self"}],"o":{"g":["accessguard","submissionerror"],"n":"result"}}],[11,"deref","gfx::mapping","",177,null],[11,"get_info","gfx::shade::core","Get program info",185,{"i":[{"n":"self"}],"o":{"n":"programinfo"}}],[11,"deref","gfx::handle","",145,null],[11,"deref","gfx::mapping","",165,null],[11,"get_info","gfx::texture","Get texture descriptor",194,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"deref","gfx::handle","",149,null],[11,"get_info","gfx::buffer","Get buffer info",193,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"is_mapped","","Is this buffer mapped ?",193,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"deref","gfx::handle","",140,null],[11,"partial_cmp","gfx::format","",34,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",34,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"n":"bool"}}],[11,"le","","",34,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"n":"bool"}}],[11,"gt","","",34,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"n":"bool"}}],[11,"ge","","",34,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::texture","",43,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",43,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"n":"bool"}}],[11,"le","","",43,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"n":"bool"}}],[11,"gt","","",43,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"n":"bool"}}],[11,"ge","","",43,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::format","",176,{"i":[{"n":"self"},{"n":"r32"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",155,{"i":[{"n":"self"},{"n":"r32_g32"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx::texture","",44,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",44,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"n":"bool"}}],[11,"le","","",44,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"n":"bool"}}],[11,"gt","","",44,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"n":"bool"}}],[11,"ge","","",44,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::format","",188,{"i":[{"n":"self"},{"n":"b8_g8_r8_a8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",150,{"i":[{"n":"self"},{"n":"float"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx::memory","",141,{"i":[{"n":"self"},{"n":"bind"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",141,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"le","","",141,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"gt","","",141,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"ge","","",141,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::texture","",46,{"i":[{"n":"self"},{"n":"kind"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",46,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"bool"}}],[11,"le","","",46,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"bool"}}],[11,"gt","","",46,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"bool"}}],[11,"ge","","",46,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::shade::core","",63,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",63,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"n":"bool"}}],[11,"le","","",63,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"n":"bool"}}],[11,"gt","","",63,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"n":"bool"}}],[11,"ge","","",63,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::format","",30,{"i":[{"n":"self"},{"n":"format"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",30,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"bool"}}],[11,"le","","",30,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"bool"}}],[11,"gt","","",30,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"bool"}}],[11,"ge","","",30,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",169,{"i":[{"n":"self"},{"n":"int"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",143,{"i":[{"n":"self"},{"n":"r8_g8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",173,{"i":[{"n":"self"},{"n":"d24_s8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",183,{"i":[{"n":"self"},{"n":"r5_g5_b5_a1"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx::texture","",51,{"i":[{"n":"self"},{"n":"packedcolor"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",51,{"i":[{"n":"self"},{"n":"packedcolor"}],"o":{"n":"bool"}}],[11,"le","","",51,{"i":[{"n":"self"},{"n":"packedcolor"}],"o":{"n":"bool"}}],[11,"gt","","",51,{"i":[{"n":"self"},{"n":"packedcolor"}],"o":{"n":"bool"}}],[11,"ge","","",51,{"i":[{"n":"self"},{"n":"packedcolor"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",47,{"i":[{"n":"self"},{"n":"mipmap"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx::format","",167,{"i":[{"n":"self"},{"n":"r11_g11_b10"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",27,{"i":[{"n":"self"},{"n":"surfacetype"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx::texture","",50,{"i":[{"n":"self"},{"n":"wrapmode"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx::format","",179,{"i":[{"n":"self"},{"n":"r16_g16_b16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx::texture","",55,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",55,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"n":"bool"}}],[11,"le","","",55,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"n":"bool"}}],[11,"gt","","",55,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"n":"bool"}}],[11,"ge","","",55,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",49,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",49,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"n":"bool"}}],[11,"le","","",49,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"n":"bool"}}],[11,"gt","","",49,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"n":"bool"}}],[11,"ge","","",49,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::format","",190,{"i":[{"n":"self"},{"n":"r16_g16_b16_a16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",162,{"i":[{"n":"self"},{"n":"r8_g8_b8_a8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",182,{"i":[{"n":"self"},{"n":"r5_g6_b5"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",184,{"i":[{"n":"self"},{"n":"r8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",180,{"i":[{"n":"self"},{"n":"unorm"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",189,{"i":[{"n":"self"},{"n":"r10_g10_b10_a2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",29,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",29,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"n":"bool"}}],[11,"le","","",29,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"n":"bool"}}],[11,"gt","","",29,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"n":"bool"}}],[11,"ge","","",29,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",175,{"i":[{"n":"self"},{"n":"d32"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",35,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",35,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"n":"bool"}}],[11,"le","","",35,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"n":"bool"}}],[11,"gt","","",35,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"n":"bool"}}],[11,"ge","","",35,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",139,{"i":[{"n":"self"},{"n":"uint"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx::texture","",52,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",52,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"bool"}}],[11,"le","","",52,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"bool"}}],[11,"gt","","",52,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"bool"}}],[11,"ge","","",52,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::shade","",135,{"i":[{"n":"self"},{"n":"usage"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",135,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"le","","",135,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"gt","","",135,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"ge","","",135,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::format","",37,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",37,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"n":"bool"}}],[11,"le","","",37,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"n":"bool"}}],[11,"gt","","",37,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"n":"bool"}}],[11,"ge","","",37,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::texture","",56,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",56,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"n":"bool"}}],[11,"le","","",56,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"n":"bool"}}],[11,"gt","","",56,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"n":"bool"}}],[11,"ge","","",56,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",53,{"i":[{"n":"self"},{"n":"info"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",53,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"le","","",53,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"gt","","",53,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"ge","","",53,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::format","",161,{"i":[{"n":"self"},{"n":"r4_g4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",144,{"i":[{"n":"self"},{"n":"d24"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",172,{"i":[{"n":"self"},{"n":"r32_g32_b32"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",191,{"i":[{"n":"self"},{"n":"r32_g32_b32_a32"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",137,{"i":[{"n":"self"},{"n":"d16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",38,{"i":[{"n":"self"},{"n":"f16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",38,{"i":[{"n":"self"},{"n":"f16"}],"o":{"n":"bool"}}],[11,"le","","",38,{"i":[{"n":"self"},{"n":"f16"}],"o":{"n":"bool"}}],[11,"gt","","",38,{"i":[{"n":"self"},{"n":"f16"}],"o":{"n":"bool"}}],[11,"ge","","",38,{"i":[{"n":"self"},{"n":"f16"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::memory","",192,{"i":[{"n":"self"},{"n":"access"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",192,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"le","","",192,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"gt","","",192,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"ge","","",192,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::texture","",158,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",158,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"le","","",158,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"gt","","",158,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"ge","","",158,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::format","",154,{"i":[{"n":"self"},{"n":"r16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",36,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",36,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"n":"bool"}}],[11,"le","","",36,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"n":"bool"}}],[11,"gt","","",36,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"n":"bool"}}],[11,"ge","","",36,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",28,{"i":[{"n":"self"},{"n":"channelsource"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx::texture","",136,{"i":[{"n":"self"},{"n":"lod"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",136,{"i":[{"n":"self"},{"n":"lod"}],"o":{"n":"bool"}}],[11,"le","","",136,{"i":[{"n":"self"},{"n":"lod"}],"o":{"n":"bool"}}],[11,"gt","","",136,{"i":[{"n":"self"},{"n":"lod"}],"o":{"n":"bool"}}],[11,"ge","","",136,{"i":[{"n":"self"},{"n":"lod"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::memory","",40,{"i":[{"n":"self"},{"n":"usage"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx::texture","",48,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",48,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"n":"bool"}}],[11,"le","","",48,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"n":"bool"}}],[11,"gt","","",48,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"n":"bool"}}],[11,"ge","","",48,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::format","",159,{"i":[{"n":"self"},{"n":"inorm"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",186,{"i":[{"n":"self"},{"n":"r4_g4_b4_a4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",153,{"i":[{"n":"self"},{"n":"r16_g16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx::texture","",54,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",54,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"n":"bool"}}],[11,"le","","",54,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"n":"bool"}}],[11,"gt","","",54,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"n":"bool"}}],[11,"ge","","",54,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx::format","",166,{"i":[{"n":"self"},{"n":"srgb"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx::texture","",45,{"i":[{"n":"self"},{"n":"cubeface"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx::format","",26,{"i":[{"n":"self"},{"n":"channeltype"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_channel_type","","",159,{"o":{"n":"channeltype"}}],[11,"get_channel_type","","",166,{"o":{"n":"channeltype"}}],[11,"get_channel_type","","",139,{"o":{"n":"channeltype"}}],[11,"get_channel_type","","",169,{"o":{"n":"channeltype"}}],[11,"get_channel_type","","",180,{"o":{"n":"channeltype"}}],[11,"get_channel_type","","",150,{"o":{"n":"channeltype"}}],[11,"bitxor_assign","gfx::memory","Toggles the set of flags.",192,null],[11,"bitxor_assign","gfx::texture","Toggles the set of flags.",158,null],[11,"bitxor_assign","gfx::memory","Toggles the set of flags.",141,null],[11,"bitxor_assign","gfx::shade","Toggles the set of flags.",135,null],[11,"bitor_assign","gfx::memory","Adds the set of flags.",192,null],[11,"bitor_assign","gfx::texture","Adds the set of flags.",158,null],[11,"bitor_assign","gfx::shade","Adds the set of flags.",135,null],[11,"bitor_assign","gfx::memory","Adds the set of flags.",141,null],[11,"bitand","","Returns the intersection between the two sets of flags.",141,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bind"}}],[11,"bitand","gfx::shade","Returns the intersection between the two sets of flags.",135,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"usage"}}],[11,"bitand","gfx::memory","Returns the intersection between the two sets of flags.",192,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"access"}}],[11,"bitand","gfx::texture","Returns the intersection between the two sets of flags.",158,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"depthstencilflags"}}],[11,"eq","gfx::shade","",135,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"ne","","",135,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",54,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"n":"bool"}}],[11,"ne","","",54,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",108,{"i":[{"n":"self"},{"n":"iscomparison"}],"o":{"n":"bool"}}],[11,"eq","gfx::mapping","",39,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"ne","","",39,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",30,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"bool"}}],[11,"ne","","",30,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",56,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"n":"bool"}}],[11,"ne","","",56,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",155,{"i":[{"n":"self"},{"n":"r32_g32"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",136,{"i":[{"n":"self"},{"n":"lod"}],"o":{"n":"bool"}}],[11,"ne","","",136,{"i":[{"n":"self"},{"n":"lod"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",168,{"i":[{"n":"self"},{"n":"rawshaderresourceview"}],"o":{"n":"bool"}}],[11,"ne","","",168,{"i":[{"n":"self"},{"n":"rawshaderresourceview"}],"o":{"n":"bool"}}],[11,"eq","gfx::buffer","",25,{"i":[{"n":"self"},{"n":"creationerror"}],"o":{"n":"bool"}}],[11,"ne","","",25,{"i":[{"n":"self"},{"n":"creationerror"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",47,{"i":[{"n":"self"},{"n":"mipmap"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",157,{"i":[{"n":"self"},{"n":"shaderresourceview"}],"o":{"n":"bool"}}],[11,"eq","gfx::memory","",40,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",172,{"i":[{"n":"self"},{"n":"r32_g32_b32"}],"o":{"n":"bool"}}],[11,"eq","gfx::memory","",192,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"ne","","",192,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",52,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"bool"}}],[11,"ne","","",52,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",191,{"i":[{"n":"self"},{"n":"r32_g32_b32_a32"}],"o":{"n":"bool"}}],[11,"eq","","",143,{"i":[{"n":"self"},{"n":"r8_g8"}],"o":{"n":"bool"}}],[11,"eq","","",186,{"i":[{"n":"self"},{"n":"r4_g4_b4_a4"}],"o":{"n":"bool"}}],[11,"eq","","",183,{"i":[{"n":"self"},{"n":"r5_g5_b5_a1"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",125,{"i":[{"n":"self"},{"n":"outputvar"}],"o":{"n":"bool"}}],[11,"ne","","",125,{"i":[{"n":"self"},{"n":"outputvar"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",159,{"i":[{"n":"self"},{"n":"inorm"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",111,{"i":[{"n":"self"},{"n":"matrixformat"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",45,{"i":[{"n":"self"},{"n":"cubeface"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",140,{"i":[{"n":"self"},{"n":"rawbuffer"}],"o":{"n":"bool"}}],[11,"ne","","",140,{"i":[{"n":"self"},{"n":"rawbuffer"}],"o":{"n":"bool"}}],[11,"eq","","",149,{"i":[{"n":"self"},{"n":"rawtexture"}],"o":{"n":"bool"}}],[11,"ne","","",149,{"i":[{"n":"self"},{"n":"rawtexture"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",173,{"i":[{"n":"self"},{"n":"d24_s8"}],"o":{"n":"bool"}}],[11,"eq","","",29,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"n":"bool"}}],[11,"ne","","",29,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"n":"bool"}}],[11,"eq","","",35,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"n":"bool"}}],[11,"ne","","",35,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"n":"bool"}}],[11,"eq","","",139,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"bool"}}],[11,"eq","","",189,{"i":[{"n":"self"},{"n":"r10_g10_b10_a2"}],"o":{"n":"bool"}}],[11,"eq","","",190,{"i":[{"n":"self"},{"n":"r16_g16_b16_a16"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",48,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"n":"bool"}}],[11,"ne","","",48,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"n":"bool"}}],[11,"eq","","",158,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"ne","","",158,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",171,{"i":[{"n":"self"},{"n":"fence"}],"o":{"n":"bool"}}],[11,"ne","","",171,{"i":[{"n":"self"},{"n":"fence"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",110,{"i":[{"n":"self"},{"n":"isrect"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",156,{"i":[{"n":"self"},{"n":"rendertargetview"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",126,{"i":[{"n":"self"},{"n":"compatibilityerror"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",147,{"i":[{"n":"self"},{"n":"depthstencilview"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",182,{"i":[{"n":"self"},{"n":"r5_g6_b5"}],"o":{"n":"bool"}}],[11,"eq","","",180,{"i":[{"n":"self"},{"n":"unorm"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",170,{"i":[{"n":"self"},{"n":"rawdepthstencilview"}],"o":{"n":"bool"}}],[11,"ne","","",170,{"i":[{"n":"self"},{"n":"rawdepthstencilview"}],"o":{"n":"bool"}}],[11,"eq","gfx::buffer","",193,{"i":[{"n":"self"},{"n":"raw"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",151,{"i":[{"n":"self"},{"n":"texture"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",38,{"i":[{"n":"self"},{"n":"f16"}],"o":{"n":"bool"}}],[11,"ne","","",38,{"i":[{"n":"self"},{"n":"f16"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",63,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"n":"bool"}}],[11,"ne","","",63,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"n":"bool"}}],[11,"eq","gfx","",60,{"i":[{"n":"self"},{"n":"combinederror"}],"o":{"n":"bool"}}],[11,"ne","","",60,{"i":[{"n":"self"},{"n":"combinederror"}],"o":{"n":"bool"}}],[11,"eq","","",152,{"i":[{"n":"self"},{"n":"domainshader"}],"o":{"n":"bool"}}],[11,"ne","","",152,{"i":[{"n":"self"},{"n":"domainshader"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",176,{"i":[{"n":"self"},{"n":"r32"}],"o":{"n":"bool"}}],[11,"eq","","",175,{"i":[{"n":"self"},{"n":"d32"}],"o":{"n":"bool"}}],[11,"eq","","",167,{"i":[{"n":"self"},{"n":"r11_g11_b10"}],"o":{"n":"bool"}}],[11,"eq","","",28,{"i":[{"n":"self"},{"n":"channelsource"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",62,{"i":[{"n":"self"},{"n":"programinfo"}],"o":{"n":"bool"}}],[11,"ne","","",62,{"i":[{"n":"self"},{"n":"programinfo"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",42,{"i":[{"n":"self"},{"n":"layererror"}],"o":{"n":"bool"}}],[11,"ne","","",42,{"i":[{"n":"self"},{"n":"layererror"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",184,{"i":[{"n":"self"},{"n":"r8"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",41,{"i":[{"n":"self"},{"n":"creationerror"}],"o":{"n":"bool"}}],[11,"ne","","",41,{"i":[{"n":"self"},{"n":"creationerror"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",27,{"i":[{"n":"self"},{"n":"surfacetype"}],"o":{"n":"bool"}}],[11,"eq","gfx","",22,{"i":[{"n":"self"},{"n":"shaderset"}],"o":{"n":"bool"}}],[11,"ne","","",22,{"i":[{"n":"self"},{"n":"shaderset"}],"o":{"n":"bool"}}],[11,"eq","","",181,{"i":[{"n":"self"},{"n":"vertexshader"}],"o":{"n":"bool"}}],[11,"ne","","",181,{"i":[{"n":"self"},{"n":"vertexshader"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",137,{"i":[{"n":"self"},{"n":"d16"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",51,{"i":[{"n":"self"},{"n":"packedcolor"}],"o":{"n":"bool"}}],[11,"ne","","",51,{"i":[{"n":"self"},{"n":"packedcolor"}],"o":{"n":"bool"}}],[11,"eq","gfx","",142,{"i":[{"n":"self"},{"n":"hullshader"}],"o":{"n":"bool"}}],[11,"ne","","",142,{"i":[{"n":"self"},{"n":"hullshader"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",179,{"i":[{"n":"self"},{"n":"r16_g16_b16"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",134,{"i":[{"n":"self"},{"n":"createprogramerror"}],"o":{"n":"bool"}}],[11,"ne","","",134,{"i":[{"n":"self"},{"n":"createprogramerror"}],"o":{"n":"bool"}}],[11,"eq","","",122,{"i":[{"n":"self"},{"n":"texturevar"}],"o":{"n":"bool"}}],[11,"ne","","",122,{"i":[{"n":"self"},{"n":"texturevar"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",44,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"n":"bool"}}],[11,"ne","","",44,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",145,{"i":[{"n":"self"},{"n":"program"}],"o":{"n":"bool"}}],[11,"ne","","",145,{"i":[{"n":"self"},{"n":"program"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",120,{"i":[{"n":"self"},{"n":"constvar"}],"o":{"n":"bool"}}],[11,"ne","","",120,{"i":[{"n":"self"},{"n":"constvar"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",160,{"i":[{"n":"self"},{"n":"rawunorderedaccessview"}],"o":{"n":"bool"}}],[11,"ne","","",160,{"i":[{"n":"self"},{"n":"rawunorderedaccessview"}],"o":{"n":"bool"}}],[11,"eq","gfx","",146,{"i":[{"n":"self"},{"n":"geometryshader"}],"o":{"n":"bool"}}],[11,"ne","","",146,{"i":[{"n":"self"},{"n":"geometryshader"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",119,{"i":[{"n":"self"},{"n":"attributevar"}],"o":{"n":"bool"}}],[11,"ne","","",119,{"i":[{"n":"self"},{"n":"attributevar"}],"o":{"n":"bool"}}],[11,"eq","","",107,{"i":[{"n":"self"},{"n":"isarray"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",166,{"i":[{"n":"self"},{"n":"srgb"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",121,{"i":[{"n":"self"},{"n":"constantbuffervar"}],"o":{"n":"bool"}}],[11,"ne","","",121,{"i":[{"n":"self"},{"n":"constantbuffervar"}],"o":{"n":"bool"}}],[11,"eq","gfx","",174,{"i":[{"n":"self"},{"n":"pixelshader"}],"o":{"n":"bool"}}],[11,"ne","","",174,{"i":[{"n":"self"},{"n":"pixelshader"}],"o":{"n":"bool"}}],[11,"eq","gfx::buffer","",23,{"i":[{"n":"self"},{"n":"role"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",127,{"i":[{"n":"self"},{"n":"createshadererror"}],"o":{"n":"bool"}}],[11,"ne","","",127,{"i":[{"n":"self"},{"n":"createshadererror"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",55,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"n":"bool"}}],[11,"ne","","",55,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"n":"bool"}}],[11,"eq","gfx","",58,{"i":[{"n":"self"},{"n":"resourceviewerror"}],"o":{"n":"bool"}}],[11,"ne","","",58,{"i":[{"n":"self"},{"n":"resourceviewerror"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",49,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"n":"bool"}}],[11,"ne","","",49,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"n":"bool"}}],[11,"eq","gfx::buffer","",24,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"ne","","",24,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"eq","gfx","",21,{"i":[{"n":"self"},{"n":"submissionerror"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",113,{"i":[{"n":"self"},{"n":"samplertype"}],"o":{"n":"bool"}}],[11,"ne","","",113,{"i":[{"n":"self"},{"n":"samplertype"}],"o":{"n":"bool"}}],[11,"eq","","",112,{"i":[{"n":"self"},{"n":"texturetype"}],"o":{"n":"bool"}}],[11,"ne","","",112,{"i":[{"n":"self"},{"n":"texturetype"}],"o":{"n":"bool"}}],[11,"eq","gfx::pso::buffer","",76,{"i":[{"n":"self"},{"n":"element"}],"o":{"n":"bool"}}],[11,"ne","","",76,{"i":[{"n":"self"},{"n":"element"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",188,{"i":[{"n":"self"},{"n":"b8_g8_r8_a8"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",114,{"i":[{"n":"self"},{"n":"basetype"}],"o":{"n":"bool"}}],[11,"eq","gfx::pso","",164,{"i":[{"n":"self"},{"n":"accessinfo"}],"o":{"n":"bool"}}],[11,"ne","","",164,{"i":[{"n":"self"},{"n":"accessinfo"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",154,{"i":[{"n":"self"},{"n":"r16"}],"o":{"n":"bool"}}],[11,"eq","gfx","",19,{"i":[{"n":"self"},{"n":"primitive"}],"o":{"n":"bool"}}],[11,"ne","","",19,{"i":[{"n":"self"},{"n":"primitive"}],"o":{"n":"bool"}}],[11,"eq","","",59,{"i":[{"n":"self"},{"n":"targetviewerror"}],"o":{"n":"bool"}}],[11,"ne","","",59,{"i":[{"n":"self"},{"n":"targetviewerror"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",53,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"ne","","",53,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",26,{"i":[{"n":"self"},{"n":"channeltype"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",123,{"i":[{"n":"self"},{"n":"unorderedvar"}],"o":{"n":"bool"}}],[11,"ne","","",123,{"i":[{"n":"self"},{"n":"unorderedvar"}],"o":{"n":"bool"}}],[11,"eq","","",116,{"i":[{"n":"self"},{"n":"stage"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",195,{"i":[{"n":"self"},{"n":"unorderedaccessview"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",115,{"i":[{"n":"self"},{"n":"containertype"}],"o":{"n":"bool"}}],[11,"ne","","",115,{"i":[{"n":"self"},{"n":"containertype"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",144,{"i":[{"n":"self"},{"n":"d24"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",187,{"i":[{"n":"self"},{"n":"sampler"}],"o":{"n":"bool"}}],[11,"ne","","",187,{"i":[{"n":"self"},{"n":"sampler"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",124,{"i":[{"n":"self"},{"n":"samplervar"}],"o":{"n":"bool"}}],[11,"ne","","",124,{"i":[{"n":"self"},{"n":"samplervar"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",71,{"i":[{"n":"self"},{"n":"buffer"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",150,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"bool"}}],[11,"eq","","",36,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"n":"bool"}}],[11,"ne","","",36,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",109,{"i":[{"n":"self"},{"n":"ismultisample"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",43,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"n":"bool"}}],[11,"ne","","",43,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",138,{"i":[{"n":"self"},{"n":"rawrendertargetview"}],"o":{"n":"bool"}}],[11,"ne","","",138,{"i":[{"n":"self"},{"n":"rawrendertargetview"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",194,{"i":[{"n":"self"},{"n":"raw"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",162,{"i":[{"n":"self"},{"n":"r8_g8_b8_a8"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",46,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"bool"}}],[11,"ne","","",46,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"bool"}}],[11,"eq","gfx::pso","",72,{"i":[{"n":"self"},{"n":"descriptor"}],"o":{"n":"bool"}}],[11,"ne","","",72,{"i":[{"n":"self"},{"n":"descriptor"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",34,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"n":"bool"}}],[11,"ne","","",34,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"n":"bool"}}],[11,"eq","","",37,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"n":"bool"}}],[11,"ne","","",37,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"n":"bool"}}],[11,"eq","gfx::shade::core","",185,{"i":[{"n":"self"},{"n":"program"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",153,{"i":[{"n":"self"},{"n":"r16_g16"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",148,{"i":[{"n":"self"},{"n":"shader"}],"o":{"n":"bool"}}],[11,"ne","","",148,{"i":[{"n":"self"},{"n":"shader"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",169,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"bool"}}],[11,"eq","gfx::memory","",141,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"ne","","",141,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"eq","gfx::texture","",50,{"i":[{"n":"self"},{"n":"wrapmode"}],"o":{"n":"bool"}}],[11,"eq","gfx::handle","",163,{"i":[{"n":"self"},{"n":"rawpipelinestate"}],"o":{"n":"bool"}}],[11,"ne","","",163,{"i":[{"n":"self"},{"n":"rawpipelinestate"}],"o":{"n":"bool"}}],[11,"eq","gfx::format","",161,{"i":[{"n":"self"},{"n":"r4_g4"}],"o":{"n":"bool"}}],[11,"deref_mut","gfx::mapping","",165,null],[11,"hash","gfx::handle","",170,null],[11,"hash","gfx::shade::core","",120,null],[11,"hash","gfx::texture","",49,null],[11,"hash","gfx","",146,null],[11,"hash","gfx::format","",28,null],[11,"hash","gfx::shade::core","",111,null],[11,"hash","gfx::memory","",141,null],[11,"hash","gfx::format","",180,null],[11,"hash","gfx::shade::core","",107,null],[11,"hash","gfx::handle","",138,null],[11,"hash","gfx::format","",159,null],[11,"hash","","",169,null],[11,"hash","gfx::shade::core","",122,null],[11,"hash","","",62,null],[11,"hash","","",108,null],[11,"hash","","",116,null],[11,"hash","gfx::texture","",51,null],[11,"hash","gfx::handle","",71,null],[11,"hash","gfx::buffer","",23,null],[11,"hash","gfx::texture","",55,null],[11,"hash","gfx::shade::core","",123,null],[11,"hash","gfx::format","",179,null],[11,"hash","gfx::shade::core","",112,null],[11,"hash","gfx::handle","",163,null],[11,"hash","gfx::format","",191,null],[11,"hash","","",37,null],[11,"hash","gfx::handle","",157,null],[11,"hash","","",148,null],[11,"hash","gfx","",142,null],[11,"hash","gfx::format","",144,null],[11,"hash","gfx::texture","",136,null],[11,"hash","gfx::format","",35,null],[11,"hash","gfx::memory","",40,null],[11,"hash","gfx","",181,null],[11,"hash","gfx::handle","",160,null],[11,"hash","gfx::format","",38,null],[11,"hash","gfx::shade::core","",114,null],[11,"hash","gfx","",22,null],[11,"hash","gfx::format","",173,null],[11,"hash","","",176,null],[11,"hash","gfx::handle","",195,null],[11,"hash","","",147,null],[11,"hash","gfx::pso","",72,null],[11,"hash","gfx::format","",143,null],[11,"hash","","",162,null],[11,"hash","gfx::handle","",149,null],[11,"hash","","",145,null],[11,"hash","gfx::format","",153,null],[11,"hash","gfx::buffer","",25,null],[11,"hash","gfx::format","",154,null],[11,"hash","gfx::shade::core","",125,null],[11,"hash","gfx::handle","",171,null],[11,"hash","gfx::memory","",192,null],[11,"hash","gfx::handle","",151,null],[11,"hash","gfx::format","",175,null],[11,"hash","gfx::texture","",54,null],[11,"hash","gfx::shade::core","",185,null],[11,"hash","","",115,null],[11,"hash","gfx","",152,null],[11,"hash","gfx::texture","",52,null],[11,"hash","gfx::format","",34,null],[11,"hash","gfx::texture","",43,null],[11,"hash","gfx","",19,null],[11,"hash","gfx::format","",182,null],[11,"hash","","",188,null],[11,"hash","","",186,null],[11,"hash","","",190,null],[11,"hash","gfx::buffer","",24,null],[11,"hash","gfx::format","",150,null],[11,"hash","","",161,null],[11,"hash","gfx::shade::core","",113,null],[11,"hash","gfx::pso::buffer","",76,null],[11,"hash","gfx::handle","",140,null],[11,"hash","","",156,null],[11,"hash","gfx::format","",137,null],[11,"hash","gfx::texture","",44,null],[11,"hash","gfx::format","",27,null],[11,"hash","gfx::texture","",158,null],[11,"hash","gfx::format","",26,null],[11,"hash","gfx::texture","",42,null],[11,"hash","gfx::format","",172,null],[11,"hash","gfx::texture","",194,null],[11,"hash","gfx::format","",189,null],[11,"hash","","",184,null],[11,"hash","","",36,null],[11,"hash","gfx::shade::core","",109,null],[11,"hash","gfx::format","",167,null],[11,"hash","gfx::texture","",45,null],[11,"hash","","",53,null],[11,"hash","gfx","",174,null],[11,"hash","gfx::shade::core","",110,null],[11,"hash","gfx::buffer","",193,null],[11,"hash","gfx::shade::core","",121,null],[11,"hash","gfx::mapping","",39,null],[11,"hash","gfx::texture","",46,null],[11,"hash","","",50,null],[11,"hash","gfx::handle","",187,null],[11,"hash","gfx::format","",183,null],[11,"hash","gfx::texture","",47,null],[11,"hash","gfx::handle","",168,null],[11,"hash","gfx::shade::core","",119,null],[11,"hash","gfx::texture","",48,null],[11,"hash","gfx::shade","",135,null],[11,"hash","gfx::format","",29,null],[11,"hash","gfx::texture","",56,null],[11,"hash","gfx::shade::core","",124,null],[11,"hash","gfx::format","",139,null],[11,"hash","","",166,null],[11,"hash","","",30,null],[11,"hash","","",155,null],[11,"new_fill","gfx::state","Create a new filling rasterizer.",4,{"o":{"n":"rasterizer"}}],[11,"with_cull_back","","Add back face culling.",4,{"i":[{"n":"self"}],"o":{"n":"rasterizer"}}],[11,"with_offset","","Add polygon offset.",4,{"i":[{"n":"self"},{"n":"f32"},{"n":"i32"}],"o":{"n":"rasterizer"}}],[11,"new","","Create a new stencil state with a given function.",8,null],[11,"new","","Create a new blend state with a given equation.",14,{"i":[{"n":"equation"},{"n":"factor"},{"n":"factor"}],"o":{"n":"blend"}}],[18,"RED","","",131,null],[18,"GREEN","","",131,null],[18,"BLUE","","",131,null],[18,"ALPHA","","",131,null],[11,"empty","","Returns an empty set of flags.",131,{"o":{"n":"colormask"}}],[11,"all","","Returns the set containing all flags.",131,{"o":{"n":"colormask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",131,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",131,{"i":[{"n":"u8"}],"o":{"g":["colormask"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",131,{"i":[{"n":"u8"}],"o":{"n":"colormask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",131,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",131,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",131,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",131,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",131,null],[11,"remove","","Removes the specified flags in-place.",131,null],[11,"toggle","","Toggles the specified flags in-place.",131,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",131,null],[18,"X","gfx","",132,null],[18,"Y","","",132,null],[11,"empty","","Returns an empty set of flags.",132,{"o":{"n":"mirror"}}],[11,"all","","Returns the set containing all flags.",132,{"o":{"n":"mirror"}}],[11,"bits","","Returns the raw value of the flags currently stored.",132,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",132,{"i":[{"n":"u8"}],"o":{"g":["mirror"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",132,{"i":[{"n":"u8"}],"o":{"n":"mirror"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",132,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",132,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",132,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",132,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",132,null],[11,"remove","","Removes the specified flags in-place.",132,null],[11,"toggle","","Toggles the specified flags in-place.",132,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",132,null],[11,"get_usage","","Return the aggregated stage usage for the set.",22,{"i":[{"n":"self"}],"o":{"n":"usage"}}],[11,"reference","","",181,null],[11,"reference","","",142,null],[11,"reference","","",152,null],[11,"reference","","",146,null],[11,"reference","","",174,null],[11,"get_total_bits","gfx::format","Return the total number of bits for this format.",27,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"get_alpha_stencil_bits","","Return the number of bits allocated for alpha and stencil.",27,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"new","","Create a new swizzle where each channel is unmapped.",29,{"o":{"n":"swizzle"}}],[11,"cast2","","Convert a 2-element slice.",34,null],[11,"cast3","","Convert a 3-element slice.",34,null],[11,"cast4","","Convert a 4-element slice.",34,null],[11,"cast_slice","","Convert a generic slice by transmutation.",34,null],[11,"cast2","","Convert a 2-element slice.",35,null],[11,"cast3","","Convert a 3-element slice.",35,null],[11,"cast4","","Convert a 4-element slice.",35,null],[11,"cast_slice","","Convert a generic slice by transmutation.",35,null],[11,"cast2","","Convert a 2-element slice.",36,null],[11,"cast3","","Convert a 3-element slice.",36,null],[11,"cast4","","Convert a 4-element slice.",36,null],[11,"cast_slice","","Convert a generic slice by transmutation.",36,null],[11,"cast2","","Convert a 2-element slice.",37,null],[11,"cast3","","Convert a 3-element slice.",37,null],[11,"cast4","","Convert a 4-element slice.",37,null],[11,"cast_slice","","Convert a generic slice by transmutation.",37,null],[11,"cast2","","Convert a 2-element slice.",38,null],[11,"cast3","","Convert a 3-element slice.",38,null],[11,"cast4","","Convert a 4-element slice.",38,null],[11,"cast_slice","","Convert a generic slice by transmutation.",38,null],[11,"get_info","gfx::handle","Get the associated information about the buffer",71,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"len","","Get the number of elements in the buffer.",71,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"get_info","","Get texture descriptor",151,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"get_dimensions","","Get target dimensions",138,null],[11,"get_texture","","Get the associated texture",138,{"i":[{"n":"self"}],"o":{"n":"rawtexture"}}],[11,"get_dimensions","","Get target dimensions",170,null],[11,"get_texture","","Get the associated texture",170,{"i":[{"n":"self"}],"o":{"n":"rawtexture"}}],[11,"get_dimensions","","Get target dimensions",156,null],[11,"get_dimensions","","Get target dimensions",147,null],[11,"get_info","","Get sampler info",187,{"i":[{"n":"self"}],"o":{"n":"samplerinfo"}}],[11,"new","","Create a new handle manager",178,{"o":{"n":"manager"}}],[11,"clear","","Clear all references",178,null],[11,"extend","","Extend with all references of another handle manager",178,null],[11,"count","","Count the total number of referenced resources",178,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"ref_buffer","","Reference a buffer",178,null],[11,"ref_shader","","Reference a shader",178,null],[11,"ref_program","","Reference a program",178,null],[11,"ref_pso","","Reference a pipeline state object",178,null],[11,"ref_texture","","Reference a texture",178,null],[11,"ref_srv","","Reference a shader resource view",178,null],[11,"ref_uav","","Reference an unordered access view",178,null],[11,"ref_rtv","","Reference an RTV",178,null],[11,"ref_dsv","","Reference a DSV",178,null],[11,"ref_sampler","","Reference a sampler",178,null],[11,"ref_fence","","Reference a fence",178,null],[18,"READ","gfx::memory","Read access",192,null],[18,"WRITE","","Write access",192,null],[18,"RW","","Full access",192,null],[11,"empty","","Returns an empty set of flags.",192,{"o":{"n":"access"}}],[11,"all","","Returns the set containing all flags.",192,{"o":{"n":"access"}}],[11,"bits","","Returns the raw value of the flags currently stored.",192,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",192,{"i":[{"n":"u8"}],"o":{"g":["access"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",192,{"i":[{"n":"u8"}],"o":{"n":"access"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",192,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",192,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",192,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",192,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",192,null],[11,"remove","","Removes the specified flags in-place.",192,null],[11,"toggle","","Toggles the specified flags in-place.",192,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",192,null],[11,"is_mutable","","Is this memory bound to be mutated ?",141,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[18,"RENDER_TARGET","","Can be rendered into.",141,null],[18,"DEPTH_STENCIL","","Can serve as a depth/stencil target.",141,null],[18,"SHADER_RESOURCE","","Can be bound to the shader for reading.",141,null],[18,"UNORDERED_ACCESS","","Can be bound to the shader for writing.",141,null],[18,"TRANSFER_SRC","","Can be transfered from.",141,null],[18,"TRANSFER_DST","","Can be transfered into.",141,null],[11,"empty","","Returns an empty set of flags.",141,{"o":{"n":"bind"}}],[11,"all","","Returns the set containing all flags.",141,{"o":{"n":"bind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",141,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",141,{"i":[{"n":"u8"}],"o":{"g":["bind"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",141,{"i":[{"n":"u8"}],"o":{"n":"bind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",141,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",141,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",141,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",141,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",141,null],[11,"remove","","Removes the specified flags in-place.",141,null],[11,"toggle","","Toggles the specified flags in-place.",141,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",141,null],[11,"get_num_fragments","gfx::texture","Return the number of actual data fragments stored per texel.",43,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"needs_resolve","","Return true if the surface has to be resolved before sampling.",43,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_dimensions","","Get texture dimensions, with 0 values where not applicable.",46,null],[11,"get_level_dimensions","","Get the dimensionality of a particular mipmap level.",46,null],[11,"get_num_levels","","Count the number of mipmap levels.",46,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"get_num_slices","","Return the number of slices for an array, or None for non-arrays.",46,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"is_cube","","Check if it's one of the cube kinds.",46,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_texel_count","","Get the total number of texels.",48,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"convert","","Convert into a differently typed format.",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"imageinfocommon"}}],[11,"is_inside","","Check if it fits inside given dimensions.",48,null],[11,"get_byte_count","","Get the total number of bytes.",48,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_texture","","Change the texture",49,{"i":[{"n":"self"},{"n":"u"}],"o":{"n":"texturecopyregion"}}],[11,"new","","Create a new sampler description with a given filter method and wrapping mode, using no LOD modifications.",52,{"i":[{"n":"filtermethod"},{"n":"wrapmode"}],"o":{"n":"samplerinfo"}}],[11,"to_image_info","","Get image info for a given mip.",53,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"imageinfocommon"}}],[11,"to_raw_image_info","","Get the raw image info for a given mip and a channel type.",53,{"i":[{"n":"self"},{"n":"channeltype"},{"n":"u8"}],"o":{"g":["format"],"n":"imageinfocommon"}}],[18,"RO_DEPTH","","Depth is read-only in the view.",158,null],[18,"RO_STENCIL","","Stencil is read-only in the view.",158,null],[18,"RO_DEPTH_STENCIL","","Both depth and stencil are read-only.",158,null],[11,"empty","","Returns an empty set of flags.",158,{"o":{"n":"depthstencilflags"}}],[11,"all","","Returns the set containing all flags.",158,{"o":{"n":"depthstencilflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",158,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",158,{"i":[{"n":"u8"}],"o":{"g":["depthstencilflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",158,{"i":[{"n":"u8"}],"o":{"n":"depthstencilflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",158,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",158,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",158,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",158,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",158,null],[11,"remove","","Removes the specified flags in-place.",158,null],[11,"toggle","","Toggles the specified flags in-place.",158,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",158,null],[11,"new","gfx::pso","Create a new empty PSO descriptor.",72,{"i":[{"n":"primitive"},{"n":"rasterizer"}],"o":{"n":"descriptor"}}],[11,"can_sample","gfx::shade::core","Check if this texture can be used with a sampler.",112,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[18,"VERTEX","gfx::shade","Used by the vertex shader",135,null],[18,"GEOMETRY","","Used by the geometry shader",135,null],[18,"PIXEL","","Used by the pixel shader",135,null],[18,"HULL","","Used by the hull shader",135,null],[18,"DOMAIN","","Used by the pixel shader",135,null],[11,"empty","","Returns an empty set of flags.",135,{"o":{"n":"usage"}}],[11,"all","","Returns the set containing all flags.",135,{"o":{"n":"usage"}}],[11,"bits","","Returns the raw value of the flags currently stored.",135,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",135,{"i":[{"n":"u8"}],"o":{"g":["usage"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",135,{"i":[{"n":"u8"}],"o":{"n":"usage"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",135,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",135,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",135,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",135,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",135,null],[11,"remove","","Removes the specified flags in-place.",135,null],[11,"toggle","","Toggles the specified flags in-place.",135,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",135,null],[11,"is_compatible","gfx::shade::core","Whether a value is compatible with this variable. That is, whether the value can be stored in this variable.",120,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"g":["compatibilityerror"],"n":"result"}}]],"paths":[[4,"FrontFace"],[3,"Offset"],[4,"CullFace"],[4,"RasterMethod"],[3,"Rasterizer"],[4,"Comparison"],[4,"StencilOp"],[3,"StencilSide"],[3,"Stencil"],[3,"Depth"],[4,"Equation"],[4,"BlendValue"],[4,"Factor"],[3,"BlendChannel"],[3,"Blend"],[3,"Color"],[3,"RefValues"],[3,"Rect"],[8,"Device"],[4,"Primitive"],[8,"Resources"],[4,"SubmissionError"],[4,"ShaderSet"],[4,"Role"],[3,"Info"],[4,"CreationError"],[4,"ChannelType"],[4,"SurfaceType"],[4,"ChannelSource"],[3,"Swizzle"],[3,"Format"],[8,"SurfaceTyped"],[8,"ChannelTyped"],[8,"Formatted"],[3,"U8Norm"],[3,"I8Norm"],[3,"U16Norm"],[3,"I16Norm"],[3,"F16"],[4,"Error"],[4,"Usage"],[4,"CreationError"],[4,"LayerError"],[4,"AaMode"],[4,"FilterMethod"],[4,"CubeFace"],[4,"Kind"],[4,"Mipmap"],[3,"ImageInfoCommon"],[3,"TextureCopyRegion"],[4,"WrapMode"],[3,"PackedColor"],[3,"SamplerInfo"],[3,"Info"],[3,"ResourceDesc"],[3,"RenderDesc"],[3,"DepthStencilDesc"],[8,"Factory"],[4,"ResourceViewError"],[4,"TargetViewError"],[4,"CombinedError"],[8,"CommandBuffer"],[3,"ProgramInfo"],[4,"UniformValue"],[3,"Slice"],[4,"CopyError"],[4,"UpdateError"],[4,"PipelineStateError"],[4,"IndexBuffer"],[8,"FactoryExt"],[3,"Encoder"],[3,"Buffer"],[3,"Descriptor"],[3,"RawDataSet"],[4,"ElementError"],[4,"InitError"],[3,"Element"],[8,"Structure"],[8,"ToInstanceRate"],[3,"VertexBufferCommon"],[6,"InstanceRate"],[4,"Instanced"],[4,"NonInstanced"],[3,"RawVertexBuffer"],[3,"ConstantBuffer"],[3,"RawConstantBuffer"],[3,"Global"],[3,"RawGlobal"],[3,"ShaderResource"],[3,"RawShaderResource"],[3,"UnorderedAccess"],[3,"Sampler"],[3,"TextureSampler"],[3,"RenderTarget"],[3,"BlendTarget"],[3,"RawRenderTarget"],[3,"DepthTarget"],[3,"StencilTarget"],[3,"DepthStencilTarget"],[3,"Scissor"],[3,"BlendRef"],[3,"Bundle"],[8,"PipelineInit"],[8,"PipelineData"],[8,"DataLink"],[8,"DataBind"],[3,"PipelineState"],[4,"IsArray"],[4,"IsComparison"],[4,"IsMultiSample"],[4,"IsRect"],[4,"MatrixFormat"],[4,"TextureType"],[3,"SamplerType"],[4,"BaseType"],[4,"ContainerType"],[4,"Stage"],[8,"BaseTyped"],[8,"Formatted"],[3,"AttributeVar"],[3,"ConstVar"],[3,"ConstantBufferVar"],[3,"TextureVar"],[3,"UnorderedVar"],[3,"SamplerVar"],[3,"OutputVar"],[4,"CompatibilityError"],[4,"CreateShaderError"],[4,"ProgramError"],[8,"ToUniform"],[8,"IntoIndexBuffer"],[3,"ColorMask"],[3,"Mirror"],[3,"MultiSample"],[3,"CreateProgramError"],[3,"Usage"],[3,"Lod"],[4,"D16"],[3,"RawRenderTargetView"],[4,"Uint"],[3,"RawBuffer"],[3,"Bind"],[3,"HullShader"],[4,"R8_G8"],[4,"D24"],[3,"Program"],[3,"GeometryShader"],[3,"DepthStencilView"],[3,"Shader"],[3,"RawTexture"],[4,"Float"],[3,"Texture"],[3,"DomainShader"],[4,"R16_G16"],[4,"R16"],[4,"R32_G32"],[3,"RenderTargetView"],[3,"ShaderResourceView"],[3,"DepthStencilFlags"],[4,"Inorm"],[3,"RawUnorderedAccessView"],[4,"R4_G4"],[4,"R8_G8_B8_A8"],[3,"RawPipelineState"],[3,"AccessInfo"],[3,"Writer"],[4,"Srgb"],[4,"R11_G11_B10"],[3,"RawShaderResourceView"],[4,"Int"],[3,"RawDepthStencilView"],[3,"Fence"],[4,"R32_G32_B32"],[4,"D24_S8"],[3,"PixelShader"],[4,"D32"],[4,"R32"],[3,"Reader"],[3,"Manager"],[4,"R16_G16_B16"],[4,"Unorm"],[3,"VertexShader"],[4,"R5_G6_B5"],[4,"R5_G5_B5_A1"],[4,"R8"],[3,"Program"],[4,"R4_G4_B4_A4"],[3,"Sampler"],[4,"B8_G8_R8_A8"],[4,"R10_G10_B10_A2"],[4,"R16_G16_B16_A16"],[4,"R32_G32_B32_A32"],[3,"Access"],[3,"Raw"],[3,"Raw"],[3,"UnorderedAccessView"]]};
searchIndex["gfx_core"] = {"doc":"Low-level graphics abstraction for Rust. Mostly operates on data, not types. Designed for use by libraries and higher-level abstractions only.","items":[[0,"state","gfx_core","Fixed-function hardware state.",null,null],[4,"FrontFace","gfx_core::state","The front face winding order of a set of vertices.",null,null],[13,"Clockwise","","Clockwise winding order.",0,null],[13,"CounterClockwise","","Counter-clockwise winding order.",0,null],[6,"LineWidth","","Width of a line. Could be f32 if not for Hash deriving issues.",null,null],[6,"OffsetSlope","","Slope depth offset factor Could be f32 if not for Hash deriving issues.",null,null],[6,"OffsetUnits","","Number of units to offset, where the unit is the minimal difference in the depth value dictated by the precision of the depth buffer.",null,null],[3,"Offset","","How to offset vertices in screen space, if at all.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[4,"CullFace","","Which face, if any, to cull.",null,null],[13,"Nothing","","",2,null],[13,"Front","","",2,null],[13,"Back","","",2,null],[4,"RasterMethod","","How to rasterize a primitive.",null,null],[13,"Point","","Rasterize as a point.",3,null],[13,"Line","","Rasterize as a line with the given width.",3,null],[13,"Fill","","Rasterize as a face.",3,null],[3,"MultiSample","","Multi-sampling rasterization mode",null,null],[3,"Rasterizer","","Primitive rasterization state. Note that GL allows different raster method to be used for front and back, while this abstraction does not.",null,null],[12,"front_face","","Which vertex winding is considered to be the front face for culling.",4,null],[12,"cull_face","","Which face should be culled.",4,null],[12,"method","","How to rasterize this primitive.",4,null],[12,"offset","","Any polygon offset to apply.",4,null],[12,"samples","","Multi-sampling mode.",4,null],[4,"Comparison","","A pixel-wise comparison function.",null,null],[13,"Never","","`false`",5,null],[13,"Less","","`x < y`",5,null],[13,"LessEqual","","`x <= y`",5,null],[13,"Equal","","`x == y`",5,null],[13,"GreaterEqual","","`x >= y`",5,null],[13,"Greater","","`x > y`",5,null],[13,"NotEqual","","`x != y`",5,null],[13,"Always","","`true`",5,null],[4,"StencilOp","","Stencil mask operation.",null,null],[13,"Keep","","Keep the current value in the stencil buffer (no change).",6,null],[13,"Zero","","Set the value in the stencil buffer to zero.",6,null],[13,"Replace","","Set the stencil buffer value to `value` from `StencilSide`",6,null],[13,"IncrementClamp","","Increment the stencil buffer value, clamping to its maximum value.",6,null],[13,"IncrementWrap","","Increment the stencil buffer value, wrapping around to 0 on overflow.",6,null],[13,"DecrementClamp","","Decrement the stencil buffer value, clamping to its minimum value.",6,null],[13,"DecrementWrap","","Decrement the stencil buffer value, wrapping around to the maximum value on overflow.",6,null],[13,"Invert","","Bitwise invert the current value in the stencil buffer.",6,null],[3,"StencilSide","","Complete stencil state for a given side of a face.",null,null],[12,"fun","","Comparison function to use to determine if the stencil test passes.",7,null],[12,"mask_read","","A mask that is ANDd with both the stencil buffer value and the reference value when they are read before doing the stencil test.",7,null],[12,"mask_write","","A mask that is ANDd with the stencil value before writing to the stencil buffer.",7,null],[12,"op_fail","","What operation to do if the stencil test fails.",7,null],[12,"op_depth_fail","","What operation to do if the stenil test passes but the depth test fails.",7,null],[12,"op_pass","","What operation to do if both the depth and stencil test pass.",7,null],[3,"Stencil","","Complete stencil state, specifying how to handle the front and back side of a face.",null,null],[12,"front","","",8,null],[12,"back","","",8,null],[3,"Depth","","Depth test state.",null,null],[12,"fun","","Comparison function to use.",9,null],[12,"write","","Specify whether to write to the depth buffer or not.",9,null],[4,"Equation","","",null,null],[13,"Add","","Adds source and destination. Source and destination are multiplied by blending parameters before addition.",10,null],[13,"Sub","","Subtracts destination from source. Source and destination are multiplied by blending parameters before subtraction.",10,null],[13,"RevSub","","Subtracts source from destination. Source and destination are multiplied by blending parameters before subtraction.",10,null],[13,"Min","","Component-wise minimum value of source and destination. Blending parameters are ignored.",10,null],[13,"Max","","Component-wise maximum value of source and destination. Blending parameters are ignored.",10,null],[4,"BlendValue","","",null,null],[13,"SourceColor","","",11,null],[13,"SourceAlpha","","",11,null],[13,"DestColor","","",11,null],[13,"DestAlpha","","",11,null],[13,"ConstColor","","",11,null],[13,"ConstAlpha","","",11,null],[4,"Factor","","",null,null],[13,"Zero","","",12,null],[13,"One","","",12,null],[13,"SourceAlphaSaturated","","",12,null],[13,"ZeroPlus","","",12,null],[13,"OneMinus","","",12,null],[3,"BlendChannel","","",null,null],[12,"equation","","",13,null],[12,"source","","",13,null],[12,"destination","","",13,null],[3,"Blend","","",null,null],[12,"color","","",14,null],[12,"alpha","","",14,null],[3,"ColorMask","","",null,null],[3,"Color","","The state of an active color render target",null,null],[12,"mask","","Color mask to use.",15,null],[12,"blend","","Optional blending.",15,null],[3,"RefValues","","The complete set of the rasterizer reference values. Switching these doesn't roll the hardware context.",null,null],[12,"stencil","","Stencil front and back values.",16,null],[12,"blend","","Constant blend color.",16,null],[0,"target","gfx_core","Render target specification.",null,null],[6,"Layer","gfx_core::target","A depth value, specifying which plane to select out of a 3D texture.",null,null],[6,"Level","","Mipmap level to select in a texture.",null,null],[6,"Depth","","A single depth value from a depth buffer.",null,null],[6,"Stencil","","A single value from a stencil stencstencil buffer.",null,null],[3,"Rect","","A screen space rectangle",null,null],[12,"x","","",17,null],[12,"y","","",17,null],[12,"w","","",17,null],[12,"h","","",17,null],[6,"ColorValue","","A color with floating-point components.",null,null],[3,"Mirror","","Mirroring flags, used for blitting",null,null],[3,"VertexShader","gfx_core","",null,null],[3,"HullShader","","",null,null],[3,"DomainShader","","",null,null],[3,"GeometryShader","","",null,null],[3,"PixelShader","","",null,null],[3,"Capabilities","","Features that the device supports.",null,null],[12,"max_vertex_count","","",18,null],[12,"max_index_count","","",18,null],[12,"max_texture_size","","",18,null],[12,"max_patch_size","","",18,null],[12,"instance_base_supported","","",18,null],[12,"instance_call_supported","","",18,null],[12,"instance_rate_supported","","",18,null],[12,"vertex_base_supported","","",18,null],[12,"srgb_color_supported","","",18,null],[12,"constant_buffer_supported","","",18,null],[12,"unordered_access_view_supported","","",18,null],[12,"separate_blending_slots_supported","","",18,null],[12,"copy_buffer_supported","","",18,null],[3,"AdapterInfo","","Information about a backend adapater.",null,null],[12,"name","","Adapter name",19,null],[12,"vendor","","Vendor PCI id of the adapter",19,null],[12,"device","","PCI id of the adapter",19,null],[12,"software_rendering","","The device is based on a software rasterizer",19,null],[3,"Frame","","Handle to a backbuffer of the swapchain.",null,null],[4,"ShaderSet","","A complete set of shaders to link a program.",null,null],[13,"Simple","","Simple program: Vs-Ps",20,null],[13,"Geometry","","Geometry shader programs: Vs-Gs-Ps",20,null],[13,"Tessellated","","Tessellated TODO: Tessellated, TessellatedGeometry, TransformFeedback",20,null],[4,"Primitive","","Describes what geometric primitives are created from vertex data.",null,null],[13,"PointList","","Each vertex represents a single point.",21,null],[13,"LineList","","Each pair of vertices represent a single line segment. For example, with `[a, b, c, d, e]`, `a` and `b` form a line, `c` and `d` form a line, and `e` is discarded.",21,null],[13,"LineStrip","","Every two consecutive vertices represent a single line segment. Visually forms a \"path\" of lines, as they are all connected. For example, with `[a, b, c]`, `a` and `b` form a line line, and `b` and `c` form a line.",21,null],[13,"TriangleList","","Each triplet of vertices represent a single triangle. For example, with `[a, b, c, d, e]`, `a`, `b`, and `c` form a triangle, `d` and `e` are discarded.",21,null],[13,"TriangleStrip","","Every three consecutive vertices represent a single triangle. For example, with `[a, b, c, d]`, `a`, `b`, and `c` form a triangle, and `b`, `c`, and `d` form a triangle.",21,null],[13,"LineListAdjacency","","Each quadtruplet of vertices represent a single line segment with adjacency information. For example, with `[a, b, c, d]`, `b` and `c` form a line, and `a` and `d` are the adjacent vertices.",21,null],[13,"LineStripAdjacency","","Every four consecutive vertices represent a single line segment with adjacency information. For example, with `[a, b, c, d, e]`, `[a, b, c, d]` form a line segment with adjacency, and `[b, c, d, e]` form a line segment with adjacency.",21,null],[13,"TriangleListAdjacency","","Each sextuplet of vertices represent a single traingle with adjacency information. For example, with `[a, b, c, d, e, f]`, `a`, `c`, and `e` form a traingle, and `b`, `d`, and `f` are the adjacent vertices, where `b` is adjacent to the edge formed by `a` and `c`, `d` is adjacent to the edge `c` and `e`, and `f` is adjacent to the edge `e` and `a`.",21,null],[13,"TriangleStripAdjacency","","Every even-numbered vertex (every other starting from the first) represents an additional vertex for the triangle strip, while odd-numbered vertices (every other starting from the second) represent adjacent vertices. For example, with `[a, b, c, d, e, f, g, h]`, `[a, c, e, g]` form a triangle strip, and `[b, d, f, h]` are the adjacent vertices, where `b`, `d`, and `f` are adjacent to the first triangle in the strip, and `d`, `f`, and `h` are adjacent to the second.",21,null],[13,"PatchList","","Patch list, used with shaders capable of producing primitives on their own (tessellation)",21,null],[4,"IndexType","","A type of each index value in the slice's index buffer",null,null],[13,"U16","","",22,null],[13,"U32","","",22,null],[4,"SubmissionError","","",null,null],[13,"AccessOverlap","","",23,null],[0,"buffer","","Memory buffers",null,null],[3,"Raw","gfx_core::buffer","Untyped buffer",null,null],[3,"Info","","An information block that is immutable and associated to each buffer.",null,null],[12,"role","","Role",24,null],[12,"usage","","Usage hint",24,null],[12,"bind","","Bind flags",24,null],[12,"size","","Size in bytes",24,null],[12,"stride","","Stride of a single element, in bytes. Only used for structured buffers that you use via shader resource / unordered access views.",24,null],[4,"Role","","Role of the memory buffer.",null,null],[13,"Vertex","","Generic vertex buffer",25,null],[13,"Index","","Index buffer",25,null],[13,"Constant","","Constant buffer",25,null],[13,"Staging","","Staging buffer",25,null],[4,"CreationError","","Error creating a buffer.",null,null],[13,"UnsupportedBind","","Some of the bind flags are not supported.",26,null],[13,"Other","","Unknown other error.",26,null],[13,"UnsupportedUsage","","Usage mode is not supported",26,null],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_info","","Get buffer info",27,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"is_mapped","","Is this buffer mapped ?",27,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",27,{"i":[{"n":"self"},{"n":"h"}]}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"role"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",25,null],[11,"eq","","",25,{"i":[{"n":"self"},{"n":"role"}],"o":{"n":"bool"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",24,null],[11,"eq","","",24,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"ne","","",24,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"creationerror"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",26,null],[11,"eq","","",26,{"i":[{"n":"self"},{"n":"creationerror"}],"o":{"n":"bool"}}],[11,"ne","","",26,{"i":[{"n":"self"},{"n":"creationerror"}],"o":{"n":"bool"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",26,{"i":[{"n":"self"}],"o":{"n":"str"}}],[0,"command","gfx_core","Command Buffer device interface",null,null],[3,"AccessInfo","gfx_core::command","Informations about what is accessed by a bunch of commands.",null,null],[3,"AccessGuard","","",null,null],[3,"AccessGuardBuffers","","",null,null],[3,"AccessGuardBuffersChain","","",null,null],[4,"ClearColor","","A universal clear color supporting integet formats as well as the standard floating-point.",null,null],[13,"Float","","Standard floating-point vec4 color",28,null],[13,"Int","","Integer vector to clear ivec4 targets.",28,null],[13,"Uint","","Unsigned int vector to clear uvec4 targets.",28,null],[6,"InstanceParams","","Optional instance parameters: (instance count, buffer offset)",null,null],[6,"AccessInfoBuffers","","",null,null],[8,"Buffer","","An interface of the abstract command buffer. It collects commands in an efficient API-specific manner, to be ready for execution on the device.",null,null],[10,"reset","","Reset the command buffer contents, retain the allocated storage",29,{"i":[{"n":"self"}]}],[10,"bind_pipeline_state","","Bind a pipeline state object",29,null],[10,"bind_vertex_buffers","","Bind a complete set of vertex buffers",29,{"i":[{"n":"self"},{"n":"vertexbufferset"}]}],[10,"bind_constant_buffers","","Bind a complete set of constant buffers",29,null],[10,"bind_global_constant","","Bind a global constant",29,{"i":[{"n":"self"},{"n":"location"},{"n":"uniformvalue"}]}],[10,"bind_resource_views","","Bind a complete set of shader resource views",29,null],[10,"bind_unordered_views","","Bind a complete set of unordered access views",29,null],[10,"bind_samplers","","Bind a complete set of samplers",29,null],[10,"bind_pixel_targets","","Bind a complete set of pixel targets, including multiple colors views and an optional depth/stencil view.",29,{"i":[{"n":"self"},{"n":"pixeltargetset"}]}],[10,"bind_index","","Bind an index buffer",29,null],[10,"set_scissor","","Set scissor rectangle",29,{"i":[{"n":"self"},{"n":"rect"}]}],[10,"set_ref_values","","Set reference values for the blending and stencil front/back",29,{"i":[{"n":"self"},{"n":"refvalues"}]}],[10,"copy_buffer","","Copy part of a buffer to another",29,null],[10,"copy_buffer_to_texture","","Copy part of a buffer to a texture",29,null],[10,"copy_texture_to_buffer","","Copy part of a texture to a buffer",29,null],[10,"copy_texture_to_texture","","Copy part of one texture into another",29,{"i":[{"n":"self"},{"n":"texturecopyregion"},{"n":"texturecopyregion"}]}],[10,"update_buffer","","Update a vertex/index/uniform buffer",29,null],[10,"update_texture","","Update a texture",29,null],[10,"generate_mipmap","","",29,null],[10,"clear_color","","Clear color target",29,null],[10,"clear_depth_stencil","","",29,null],[10,"call_draw","","Draw a primitive",29,{"i":[{"n":"self"},{"n":"vertexcount"},{"n":"vertexcount"},{"g":["instanceparams"],"n":"option"}]}],[10,"call_draw_indexed","","Draw a primitive with index buffer",29,{"i":[{"n":"self"},{"n":"vertexcount"},{"n":"vertexcount"},{"n":"vertexcount"},{"g":["instanceparams"],"n":"option"}]}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"clearcolor"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",28,{"i":[{"n":"self"},{"n":"clearcolor"}],"o":{"n":"bool"}}],[11,"ne","","",28,{"i":[{"n":"self"},{"n":"clearcolor"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",28,{"i":[{"n":"self"},{"n":"clearcolor"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",28,{"i":[{"n":"self"},{"n":"clearcolor"}],"o":{"n":"bool"}}],[11,"le","","",28,{"i":[{"n":"self"},{"n":"clearcolor"}],"o":{"n":"bool"}}],[11,"gt","","",28,{"i":[{"n":"self"},{"n":"clearcolor"}],"o":{"n":"bool"}}],[11,"ge","","",28,{"i":[{"n":"self"},{"n":"clearcolor"}],"o":{"n":"bool"}}],[11,"from","","",28,null],[11,"from","","",28,null],[11,"from","","",28,null],[11,"from","","",28,null],[11,"from","","",28,null],[11,"from","","",28,null],[11,"from","","",28,null],[11,"from","","",28,null],[11,"from","","",28,null],[11,"from","","",28,{"i":[{"n":"f32"}],"o":{"n":"clearcolor"}}],[11,"from","","",28,{"i":[{"n":"i32"}],"o":{"n":"clearcolor"}}],[11,"from","","",28,{"i":[{"n":"u32"}],"o":{"n":"clearcolor"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"accessinfo"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",30,{"i":[{"n":"self"},{"n":"accessinfo"}],"o":{"n":"bool"}}],[11,"ne","","",30,{"i":[{"n":"self"},{"n":"accessinfo"}],"o":{"n":"bool"}}],[11,"new","","Creates empty access informations",30,{"o":{"n":"self"}}],[11,"clear","","Clear access informations",30,{"i":[{"n":"self"}]}],[11,"buffer_read","","Register a buffer read access",30,{"i":[{"n":"self"},{"n":"rawbuffer"}]}],[11,"buffer_write","","Register a buffer write access",30,{"i":[{"n":"self"},{"n":"rawbuffer"}]}],[11,"mapped_reads","","Returns the mapped buffers that The GPU will read from",30,{"i":[{"n":"self"}],"o":{"n":"accessinfobuffers"}}],[11,"mapped_writes","","Returns the mapped buffers that The GPU will write to",30,{"i":[{"n":"self"}],"o":{"n":"accessinfobuffers"}}],[11,"has_mapped_reads","","Is there any mapped buffer reads ?",30,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"has_mapped_writes","","Is there any mapped buffer writes ?",30,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"take_accesses","","Takes all the accesses necessary for submission",30,{"i":[{"n":"self"}],"o":{"g":["accessguard"],"n":"submissionresult"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"access_mapped_reads","","Returns the mapped buffers that The GPU will read from, with exclusive acces to their mapping",31,{"i":[{"n":"self"}],"o":{"n":"accessguardbuffers"}}],[11,"access_mapped_writes","","Returns the mapped buffers that The GPU will write to, with exclusive acces to their mapping",31,{"i":[{"n":"self"}],"o":{"n":"accessguardbuffers"}}],[11,"access_mapped","","",31,{"i":[{"n":"self"}],"o":{"n":"accessguardbufferschain"}}],[11,"deref","","",31,null],[11,"drop","","",31,{"i":[{"n":"self"}]}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",32,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",33,{"i":[{"n":"self"}],"o":{"n":"option"}}],[0,"dummy","gfx_core","Dummy backend implementation to test the code for compile errors outside of the graphics development environment.",null,null],[3,"DummyDevice","gfx_core::dummy","Dummy device which does minimal work, just to allow testing gfx-rs apps for compilation.",null,null],[3,"DummyFence","","Dummy fence that does nothing.",null,null],[3,"DummyMapping","","Dummy mapping which will crash on use.",null,null],[3,"DummyCommandBuffer","","Dummy command buffer, which ignores all the calls.",null,null],[4,"DummyResources","","Dummy resources phantom type",null,null],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"dummyresources"}}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",34,null],[11,"eq","","",34,{"i":[{"n":"self"},{"n":"dummyresources"}],"o":{"n":"bool"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"dummyfence"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",35,null],[11,"eq","","",35,{"i":[{"n":"self"},{"n":"dummyfence"}],"o":{"n":"bool"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"dummymapping"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",36,null],[11,"eq","","",36,{"i":[{"n":"self"},{"n":"dummymapping"}],"o":{"n":"bool"}}],[11,"new","","Create a new dummy device",37,{"o":{"n":"dummydevice"}}],[11,"reset","","",38,{"i":[{"n":"self"}]}],[11,"bind_pipeline_state","","",38,null],[11,"bind_vertex_buffers","","",38,{"i":[{"n":"self"},{"g":["dummyresources"],"n":"vertexbufferset"}]}],[11,"bind_constant_buffers","","",38,null],[11,"bind_global_constant","","",38,{"i":[{"n":"self"},{"n":"location"},{"n":"uniformvalue"}]}],[11,"bind_resource_views","","",38,null],[11,"bind_unordered_views","","",38,null],[11,"bind_samplers","","",38,null],[11,"bind_pixel_targets","","",38,{"i":[{"n":"self"},{"g":["dummyresources"],"n":"pixeltargetset"}]}],[11,"bind_index","","",38,null],[11,"set_scissor","","",38,{"i":[{"n":"self"},{"n":"rect"}]}],[11,"set_ref_values","","",38,{"i":[{"n":"self"},{"n":"refvalues"}]}],[11,"copy_buffer","","",38,null],[11,"copy_buffer_to_texture","","",38,null],[11,"copy_texture_to_buffer","","",38,null],[11,"copy_texture_to_texture","","",38,{"i":[{"n":"self"},{"n":"texturecopyregion"},{"n":"texturecopyregion"}]}],[11,"update_buffer","","",38,null],[11,"update_texture","","",38,null],[11,"generate_mipmap","","",38,null],[11,"clear_color","","",38,null],[11,"clear_depth_stencil","","",38,null],[11,"call_draw","","",38,{"i":[{"n":"self"},{"n":"vertexcount"},{"n":"vertexcount"},{"g":["instanceparams"],"n":"option"}]}],[11,"call_draw_indexed","","",38,{"i":[{"n":"self"},{"n":"vertexcount"},{"n":"vertexcount"},{"n":"vertexcount"},{"g":["instanceparams"],"n":"option"}]}],[11,"get_capabilities","","",37,{"i":[{"n":"self"}],"o":{"n":"capabilities"}}],[11,"pin_submitted_resources","","",37,{"i":[{"n":"self"},{"n":"manager"}]}],[11,"submit","","",37,{"i":[{"n":"self"},{"n":"dummycommandbuffer"},{"n":"accessinfo"}],"o":{"n":"submissionresult"}}],[11,"fenced_submit","","",37,null],[11,"wait_fence","","",37,{"i":[{"n":"self"},{"n":"fence"}]}],[11,"cleanup","","",37,{"i":[{"n":"self"}]}],[0,"factory","gfx_core","Resource factory",null,null],[4,"ResourceViewError","gfx_core::factory","Error creating either a ShaderResourceView, or UnorderedAccessView.",null,null],[13,"NoBindFlag","","The corresponding bind flag is not present in the texture.",39,null],[13,"Channel","","Selected channel type is not supported for this texture.",39,null],[13,"Layer","","Selected layer can not be viewed for this texture.",39,null],[13,"Unsupported","","The backend was refused for some reason.",39,null],[4,"TargetViewError","","Error creating either a RenderTargetView, or DepthStencilView.",null,null],[13,"NoBindFlag","","The `RENDER_TARGET`/`DEPTH_STENCIL` flag is not present in the texture.",40,null],[13,"Level","","Selected mip level doesn't exist.",40,null],[13,"Layer","","Selected array layer doesn't exist.",40,null],[13,"Channel","","Selected channel type is not supported for this texture.",40,null],[13,"Unsupported","","The backend was refused for some reason.",40,null],[13,"NotDetached","","The RTV cannot be changed due to the references to it existing.",40,null],[4,"CombinedError","","An error from creating textures with views at the same time.",null,null],[13,"Texture","","Failed to create the raw texture.",41,null],[13,"Resource","","Failed to create SRV or UAV.",41,null],[13,"Target","","Failed to create RTV or DSV.",41,null],[8,"Factory","","Overview",null,null],[10,"get_capabilities","","Returns the capabilities of this `Factory`. This usually depends on the graphics API being used.",42,{"i":[{"n":"self"}],"o":{"n":"capabilities"}}],[10,"create_buffer_raw","","",42,{"i":[{"n":"self"},{"n":"info"}],"o":{"g":["rawbuffer","creationerror"],"n":"result"}}],[10,"create_buffer_immutable_raw","","",42,null],[11,"create_buffer_immutable","","",42,null],[11,"create_buffer","","",42,{"i":[{"n":"self"},{"n":"usize"},{"n":"role"},{"n":"usage"},{"n":"bind"}],"o":{"g":["buffer","creationerror"],"n":"result"}}],[10,"create_pipeline_state_raw","","Creates a new `RawPipelineState`. To create a safely typed `PipelineState`, see the `FactoryExt` trait and `pso` module, both in the `gfx` crate.",42,{"i":[{"n":"self"},{"n":"program"},{"n":"descriptor"}],"o":{"g":["rawpipelinestate","creationerror"],"n":"result"}}],[10,"create_program","","Creates a new shader `Program` for the supplied `ShaderSet`.",42,{"i":[{"n":"self"},{"n":"shaderset"}],"o":{"g":["program","createprogramerror"],"n":"result"}}],[10,"create_shader","","Compiles a shader source into a `Shader` object that can be used to create a shader `Program`.",42,null],[11,"create_shader_vertex","","Compiles a `VertexShader` from source.",42,null],[11,"create_shader_hull","","Compiles a `HullShader` from source.",42,null],[11,"create_shader_domain","","Compiles a `VertexShader` from source.",42,null],[11,"create_shader_geometry","","Compiles a `GeometryShader` from source.",42,null],[11,"create_shader_pixel","","Compiles a `PixelShader` from source. This is the same as what some APIs call a fragment shader.",42,null],[10,"create_sampler","","",42,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"sampler"}}],[10,"read_mapping","","Acquire a mapping Reader",42,{"i":[{"n":"self"},{"n":"buffer"}],"o":{"g":["reader","error"],"n":"result"}}],[10,"write_mapping","","Acquire a mapping Writer",42,{"i":[{"n":"self"},{"n":"buffer"}],"o":{"g":["writer","error"],"n":"result"}}],[10,"create_texture_raw","","Create a new empty raw texture with no data. The channel type parameter is a hint, required to assist backends that have no concept of typeless formats (OpenGL). The initial data, if given, has to be provided for all mip levels and slices: Slice0.Mip0, Slice0.Mip1, ..., Slice1.Mip0, ...",42,{"i":[{"n":"self"},{"n":"info"},{"g":["channeltype"],"n":"option"},{"n":"option"}],"o":{"g":["rawtexture","creationerror"],"n":"result"}}],[10,"view_buffer_as_shader_resource_raw","","",42,{"i":[{"n":"self"},{"n":"rawbuffer"},{"n":"format"}],"o":{"g":["rawshaderresourceview","resourceviewerror"],"n":"result"}}],[10,"view_buffer_as_unordered_access_raw","","",42,{"i":[{"n":"self"},{"n":"rawbuffer"}],"o":{"g":["rawunorderedaccessview","resourceviewerror"],"n":"result"}}],[10,"view_texture_as_shader_resource_raw","","",42,{"i":[{"n":"self"},{"n":"rawtexture"},{"n":"resourcedesc"}],"o":{"g":["rawshaderresourceview","resourceviewerror"],"n":"result"}}],[10,"view_texture_as_unordered_access_raw","","",42,{"i":[{"n":"self"},{"n":"rawtexture"}],"o":{"g":["rawunorderedaccessview","resourceviewerror"],"n":"result"}}],[10,"view_texture_as_render_target_raw","","",42,{"i":[{"n":"self"},{"n":"rawtexture"},{"n":"renderdesc"}],"o":{"g":["rawrendertargetview","targetviewerror"],"n":"result"}}],[10,"view_texture_as_depth_stencil_raw","","",42,{"i":[{"n":"self"},{"n":"rawtexture"},{"n":"depthstencildesc"}],"o":{"g":["rawdepthstencilview","targetviewerror"],"n":"result"}}],[11,"create_texture","","",42,{"i":[{"n":"self"},{"n":"kind"},{"n":"level"},{"n":"bind"},{"n":"usage"},{"g":["channeltype"],"n":"option"}],"o":{"g":["texture","creationerror"],"n":"result"}}],[11,"view_buffer_as_shader_resource","","",42,{"i":[{"n":"self"},{"n":"buffer"}],"o":{"g":["shaderresourceview","resourceviewerror"],"n":"result"}}],[11,"view_buffer_as_unordered_access","","",42,{"i":[{"n":"self"},{"n":"buffer"}],"o":{"g":["unorderedaccessview","resourceviewerror"],"n":"result"}}],[11,"view_texture_as_shader_resource","","",42,null],[11,"view_texture_as_unordered_access","","",42,{"i":[{"n":"self"},{"n":"texture"}],"o":{"g":["unorderedaccessview","resourceviewerror"],"n":"result"}}],[11,"view_texture_as_render_target","","",42,{"i":[{"n":"self"},{"n":"texture"},{"n":"level"},{"g":["layer"],"n":"option"}],"o":{"g":["rendertargetview","targetviewerror"],"n":"result"}}],[11,"view_texture_as_depth_stencil","","",42,{"i":[{"n":"self"},{"n":"texture"},{"n":"level"},{"g":["layer"],"n":"option"},{"n":"depthstencilflags"}],"o":{"g":["depthstencilview","targetviewerror"],"n":"result"}}],[11,"view_texture_as_depth_stencil_trivial","","",42,{"i":[{"n":"self"},{"n":"texture"}],"o":{"g":["depthstencilview","targetviewerror"],"n":"result"}}],[11,"create_texture_immutable_u8","","",42,null],[11,"create_texture_immutable","","",42,null],[11,"create_render_target","","",42,{"i":[{"n":"self"},{"n":"size"},{"n":"size"}],"o":{"g":["combinederror"],"n":"result"}}],[11,"create_depth_stencil","","",42,{"i":[{"n":"self"},{"n":"size"},{"n":"size"}],"o":{"g":["combinederror"],"n":"result"}}],[11,"create_depth_stencil_view_only","","",42,{"i":[{"n":"self"},{"n":"size"},{"n":"size"}],"o":{"g":["depthstencilview","combinederror"],"n":"result"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"resourceviewerror"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",39,{"i":[{"n":"self"},{"n":"resourceviewerror"}],"o":{"n":"bool"}}],[11,"ne","","",39,{"i":[{"n":"self"},{"n":"resourceviewerror"}],"o":{"n":"bool"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",39,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",39,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"targetviewerror"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",40,{"i":[{"n":"self"},{"n":"targetviewerror"}],"o":{"n":"bool"}}],[11,"ne","","",40,{"i":[{"n":"self"},{"n":"targetviewerror"}],"o":{"n":"bool"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",40,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",40,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"combinederror"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",41,{"i":[{"n":"self"},{"n":"combinederror"}],"o":{"n":"bool"}}],[11,"ne","","",41,{"i":[{"n":"self"},{"n":"combinederror"}],"o":{"n":"bool"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",41,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",41,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"from","","",41,{"i":[{"n":"creationerror"}],"o":{"n":"combinederror"}}],[11,"from","","",41,{"i":[{"n":"resourceviewerror"}],"o":{"n":"combinederror"}}],[11,"from","","",41,{"i":[{"n":"targetviewerror"}],"o":{"n":"combinederror"}}],[0,"format","gfx_core","Universal format specification. Applicable to textures, views, and vertex buffers.",null,null],[3,"Swizzle","gfx_core::format","Channel swizzle configuration for the resource views. Note: It's not currently mirrored at compile-time, thus providing less safety and convenience.",null,null],[12,"0","","",43,null],[12,"1","","",43,null],[12,"2","","",43,null],[12,"3","","",43,null],[3,"Format","","Complete run-time surface format.",null,null],[12,"0","","",44,null],[12,"1","","",44,null],[3,"U8Norm","","",null,null],[12,"0","","",45,null],[3,"I8Norm","","",null,null],[12,"0","","",46,null],[3,"U16Norm","","",null,null],[12,"0","","",47,null],[3,"I16Norm","","",null,null],[12,"0","","",48,null],[3,"F16","","",null,null],[12,"0","","",49,null],[4,"ChannelType","","Type of a surface channel. This is how we interpret the storage allocated with `SurfaceType`.",null,null],[13,"Int","","",50,null],[13,"Uint","","",50,null],[13,"Inorm","","",50,null],[13,"Unorm","","",50,null],[13,"Float","","",50,null],[13,"Srgb","","",50,null],[4,"Int","","",null,null],[4,"Uint","","",null,null],[4,"Inorm","","",null,null],[4,"Unorm","","",null,null],[4,"Float","","",null,null],[4,"Srgb","","",null,null],[4,"SurfaceType","","Type of the allocated texture surface. It is supposed to only carry information about the number of bits per each channel. The actual types are up to the views to decide and interpret. The actual components are up to the swizzle to define.",null,null],[13,"R4_G4","","",51,null],[13,"R4_G4_B4_A4","","",51,null],[13,"R5_G5_B5_A1","","",51,null],[13,"R5_G6_B5","","",51,null],[13,"R8","","",51,null],[13,"R8_G8","","",51,null],[13,"R8_G8_B8_A8","","",51,null],[13,"R10_G10_B10_A2","","",51,null],[13,"R11_G11_B10","","",51,null],[13,"R16","","",51,null],[13,"R16_G16","","",51,null],[13,"R16_G16_B16","","",51,null],[13,"R16_G16_B16_A16","","",51,null],[13,"R32","","",51,null],[13,"R32_G32","","",51,null],[13,"R32_G32_B32","","",51,null],[13,"R32_G32_B32_A32","","",51,null],[13,"B8_G8_R8_A8","","",51,null],[13,"D16","","",51,null],[13,"D24","","",51,null],[13,"D24_S8","","",51,null],[13,"D32","","",51,null],[4,"R4_G4","","",null,null],[4,"R4_G4_B4_A4","","",null,null],[4,"R5_G5_B5_A1","","",null,null],[4,"R5_G6_B5","","",null,null],[4,"R8","","",null,null],[4,"R8_G8","","",null,null],[4,"R8_G8_B8_A8","","",null,null],[4,"R10_G10_B10_A2","","",null,null],[4,"R11_G11_B10","","",null,null],[4,"R16","","",null,null],[4,"R16_G16","","",null,null],[4,"R16_G16_B16","","",null,null],[4,"R16_G16_B16_A16","","",null,null],[4,"R32","","",null,null],[4,"R32_G32","","",null,null],[4,"R32_G32_B32","","",null,null],[4,"R32_G32_B32_A32","","",null,null],[4,"B8_G8_R8_A8","","",null,null],[4,"D16","","",null,null],[4,"D24","","",null,null],[4,"D24_S8","","",null,null],[4,"D32","","",null,null],[4,"ChannelSource","","Source channel in a swizzle configuration. Some may redirect onto different physical channels, some may be hardcoded to 0 or 1.",null,null],[13,"Zero","","",52,null],[13,"One","","",52,null],[13,"X","","",52,null],[13,"Y","","",52,null],[13,"Z","","",52,null],[13,"W","","",52,null],[6,"Vec1","","Abstracted 1-element container for macro internal use",null,null],[6,"Vec2","","Abstracted 2-element container for macro internal use",null,null],[6,"Vec3","","Abstracted 3-element container for macro internal use",null,null],[6,"Vec4","","Abstracted 4-element container for macro internal use",null,null],[6,"Rgba8","","Standard 8bits RGBA format.",null,null],[6,"Srgba8","","Standard 8bit gamma transforming RGB format.",null,null],[6,"Rgb10a2F","","Standard HDR floating-point format with 10 bits for RGB components and 2 bits for the alpha.",null,null],[6,"Rgba16F","","Standard 16-bit floating-point RGBA format.",null,null],[6,"Rgba32F","","Standard 32-bit floating-point RGBA format.",null,null],[6,"Bgra8","","Standard 8bits BGRA format.",null,null],[6,"Depth","","Standard 24-bit depth format.",null,null],[6,"DepthStencil","","Standard 24-bit depth format with 8-bit stencil.",null,null],[6,"Depth32F","","Standard 32-bit floating-point depth format.",null,null],[8,"SurfaceTyped","","Compile-time surface type trait.",null,null],[16,"DataType","","The corresponding data type to be passed from CPU.",53,null],[10,"get_surface_type","","Return the run-time value of the type.",53,{"o":{"n":"surfacetype"}}],[8,"BufferSurface","","An ability of a surface type to be used for vertex buffers.",null,null],[8,"TextureSurface","","An ability of a surface type to be used for textures.",null,null],[8,"RenderSurface","","An ability of a surface type to be used for render targets.",null,null],[8,"DepthSurface","","An ability of a surface type to be used for depth targets.",null,null],[8,"StencilSurface","","An ability of a surface type to be used for stencil targets.",null,null],[8,"ChannelTyped","","Compile-time channel type trait.",null,null],[16,"ShaderType","","Shader-visible type that corresponds to this channel. For example, normalized integers are visible as floats.",54,null],[10,"get_channel_type","","Return the run-time value of the type.",54,{"o":{"n":"channeltype"}}],[8,"TextureChannel","","An ability of a channel type to be used for textures.",null,null],[8,"RenderChannel","","An ability of a channel type to be used for render targets.",null,null],[8,"BlendChannel","","An ability of a channel type to be used for blended render targets.",null,null],[8,"Formatted","","Compile-time full format trait.",null,null],[16,"Surface","","Associated surface type.",55,null],[16,"Channel","","Associated channel type.",55,null],[16,"View","","Shader view type of this format.",55,null],[11,"get_format","","Return the run-time value of the type.",55,{"o":{"n":"format"}}],[8,"BufferFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthFormat","","Ability to be used for depth targets.",null,null],[8,"StencilFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthStencilFormat","","Ability to be used for depth+stencil targets.",null,null],[8,"TextureFormat","","Ability to be used for textures.",null,null],[8,"RenderFormat","","Ability to be used for render targets.",null,null],[8,"BlendFormat","","Ability to be used for blended render targets.",null,null],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"channeltype"}}],[11,"fmt","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",50,null],[11,"cmp","","",50,{"i":[{"n":"self"},{"n":"channeltype"}],"o":{"n":"ordering"}}],[11,"eq","","",50,{"i":[{"n":"self"},{"n":"channeltype"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",50,{"i":[{"n":"self"},{"n":"channeltype"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"int"}}],[11,"fmt","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",56,null],[11,"cmp","","",56,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"ordering"}}],[11,"eq","","",56,{"i":[{"n":"self"},{"n":"int"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",56,{"i":[{"n":"self"},{"n":"int"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_channel_type","","",56,{"o":{"n":"channeltype"}}],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"uint"}}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",57,null],[11,"cmp","","",57,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"ordering"}}],[11,"eq","","",57,{"i":[{"n":"self"},{"n":"uint"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",57,{"i":[{"n":"self"},{"n":"uint"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_channel_type","","",57,{"o":{"n":"channeltype"}}],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"inorm"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",58,null],[11,"cmp","","",58,{"i":[{"n":"self"},{"n":"inorm"}],"o":{"n":"ordering"}}],[11,"eq","","",58,{"i":[{"n":"self"},{"n":"inorm"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",58,{"i":[{"n":"self"},{"n":"inorm"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_channel_type","","",58,{"o":{"n":"channeltype"}}],[11,"clone","","",59,{"i":[{"n":"self"}],"o":{"n":"unorm"}}],[11,"fmt","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",59,null],[11,"cmp","","",59,{"i":[{"n":"self"},{"n":"unorm"}],"o":{"n":"ordering"}}],[11,"eq","","",59,{"i":[{"n":"self"},{"n":"unorm"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",59,{"i":[{"n":"self"},{"n":"unorm"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_channel_type","","",59,{"o":{"n":"channeltype"}}],[11,"clone","","",60,{"i":[{"n":"self"}],"o":{"n":"float"}}],[11,"fmt","","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",60,null],[11,"cmp","","",60,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"ordering"}}],[11,"eq","","",60,{"i":[{"n":"self"},{"n":"float"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",60,{"i":[{"n":"self"},{"n":"float"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_channel_type","","",60,{"o":{"n":"channeltype"}}],[11,"clone","","",61,{"i":[{"n":"self"}],"o":{"n":"srgb"}}],[11,"fmt","","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",61,null],[11,"cmp","","",61,{"i":[{"n":"self"},{"n":"srgb"}],"o":{"n":"ordering"}}],[11,"eq","","",61,{"i":[{"n":"self"},{"n":"srgb"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",61,{"i":[{"n":"self"},{"n":"srgb"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_channel_type","","",61,{"o":{"n":"channeltype"}}],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"surfacetype"}}],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",51,null],[11,"cmp","","",51,{"i":[{"n":"self"},{"n":"surfacetype"}],"o":{"n":"ordering"}}],[11,"eq","","",51,{"i":[{"n":"self"},{"n":"surfacetype"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",51,{"i":[{"n":"self"},{"n":"surfacetype"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_total_bits","","Return the total number of bits for this format.",51,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"get_alpha_stencil_bits","","Return the number of bits allocated for alpha and stencil.",51,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"r4_g4"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",62,null],[11,"cmp","","",62,{"i":[{"n":"self"},{"n":"r4_g4"}],"o":{"n":"ordering"}}],[11,"eq","","",62,{"i":[{"n":"self"},{"n":"r4_g4"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",62,{"i":[{"n":"self"},{"n":"r4_g4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",62,{"o":{"n":"surfacetype"}}],[11,"clone","","",63,{"i":[{"n":"self"}],"o":{"n":"r4_g4_b4_a4"}}],[11,"fmt","","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",63,null],[11,"cmp","","",63,{"i":[{"n":"self"},{"n":"r4_g4_b4_a4"}],"o":{"n":"ordering"}}],[11,"eq","","",63,{"i":[{"n":"self"},{"n":"r4_g4_b4_a4"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",63,{"i":[{"n":"self"},{"n":"r4_g4_b4_a4"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",63,{"o":{"n":"surfacetype"}}],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"r5_g5_b5_a1"}}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",64,null],[11,"cmp","","",64,{"i":[{"n":"self"},{"n":"r5_g5_b5_a1"}],"o":{"n":"ordering"}}],[11,"eq","","",64,{"i":[{"n":"self"},{"n":"r5_g5_b5_a1"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",64,{"i":[{"n":"self"},{"n":"r5_g5_b5_a1"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",64,{"o":{"n":"surfacetype"}}],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"r5_g6_b5"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",65,null],[11,"cmp","","",65,{"i":[{"n":"self"},{"n":"r5_g6_b5"}],"o":{"n":"ordering"}}],[11,"eq","","",65,{"i":[{"n":"self"},{"n":"r5_g6_b5"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",65,{"i":[{"n":"self"},{"n":"r5_g6_b5"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",65,{"o":{"n":"surfacetype"}}],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"r8"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",66,null],[11,"cmp","","",66,{"i":[{"n":"self"},{"n":"r8"}],"o":{"n":"ordering"}}],[11,"eq","","",66,{"i":[{"n":"self"},{"n":"r8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",66,{"i":[{"n":"self"},{"n":"r8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",66,{"o":{"n":"surfacetype"}}],[11,"clone","","",67,{"i":[{"n":"self"}],"o":{"n":"r8_g8"}}],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",67,null],[11,"cmp","","",67,{"i":[{"n":"self"},{"n":"r8_g8"}],"o":{"n":"ordering"}}],[11,"eq","","",67,{"i":[{"n":"self"},{"n":"r8_g8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",67,{"i":[{"n":"self"},{"n":"r8_g8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",67,{"o":{"n":"surfacetype"}}],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"r8_g8_b8_a8"}}],[11,"fmt","","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",68,null],[11,"cmp","","",68,{"i":[{"n":"self"},{"n":"r8_g8_b8_a8"}],"o":{"n":"ordering"}}],[11,"eq","","",68,{"i":[{"n":"self"},{"n":"r8_g8_b8_a8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",68,{"i":[{"n":"self"},{"n":"r8_g8_b8_a8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",68,{"o":{"n":"surfacetype"}}],[11,"clone","","",69,{"i":[{"n":"self"}],"o":{"n":"r10_g10_b10_a2"}}],[11,"fmt","","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",69,null],[11,"cmp","","",69,{"i":[{"n":"self"},{"n":"r10_g10_b10_a2"}],"o":{"n":"ordering"}}],[11,"eq","","",69,{"i":[{"n":"self"},{"n":"r10_g10_b10_a2"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",69,{"i":[{"n":"self"},{"n":"r10_g10_b10_a2"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",69,{"o":{"n":"surfacetype"}}],[11,"clone","","",70,{"i":[{"n":"self"}],"o":{"n":"r11_g11_b10"}}],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",70,null],[11,"cmp","","",70,{"i":[{"n":"self"},{"n":"r11_g11_b10"}],"o":{"n":"ordering"}}],[11,"eq","","",70,{"i":[{"n":"self"},{"n":"r11_g11_b10"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",70,{"i":[{"n":"self"},{"n":"r11_g11_b10"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",70,{"o":{"n":"surfacetype"}}],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"r16"}}],[11,"fmt","","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",71,null],[11,"cmp","","",71,{"i":[{"n":"self"},{"n":"r16"}],"o":{"n":"ordering"}}],[11,"eq","","",71,{"i":[{"n":"self"},{"n":"r16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",71,{"i":[{"n":"self"},{"n":"r16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",71,{"o":{"n":"surfacetype"}}],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"r16_g16"}}],[11,"fmt","","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",72,null],[11,"cmp","","",72,{"i":[{"n":"self"},{"n":"r16_g16"}],"o":{"n":"ordering"}}],[11,"eq","","",72,{"i":[{"n":"self"},{"n":"r16_g16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",72,{"i":[{"n":"self"},{"n":"r16_g16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",72,{"o":{"n":"surfacetype"}}],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"r16_g16_b16"}}],[11,"fmt","","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",73,null],[11,"cmp","","",73,{"i":[{"n":"self"},{"n":"r16_g16_b16"}],"o":{"n":"ordering"}}],[11,"eq","","",73,{"i":[{"n":"self"},{"n":"r16_g16_b16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",73,{"i":[{"n":"self"},{"n":"r16_g16_b16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",73,{"o":{"n":"surfacetype"}}],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"r16_g16_b16_a16"}}],[11,"fmt","","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",74,null],[11,"cmp","","",74,{"i":[{"n":"self"},{"n":"r16_g16_b16_a16"}],"o":{"n":"ordering"}}],[11,"eq","","",74,{"i":[{"n":"self"},{"n":"r16_g16_b16_a16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",74,{"i":[{"n":"self"},{"n":"r16_g16_b16_a16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",74,{"o":{"n":"surfacetype"}}],[11,"clone","","",75,{"i":[{"n":"self"}],"o":{"n":"r32"}}],[11,"fmt","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",75,null],[11,"cmp","","",75,{"i":[{"n":"self"},{"n":"r32"}],"o":{"n":"ordering"}}],[11,"eq","","",75,{"i":[{"n":"self"},{"n":"r32"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",75,{"i":[{"n":"self"},{"n":"r32"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",75,{"o":{"n":"surfacetype"}}],[11,"clone","","",76,{"i":[{"n":"self"}],"o":{"n":"r32_g32"}}],[11,"fmt","","",76,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",76,null],[11,"cmp","","",76,{"i":[{"n":"self"},{"n":"r32_g32"}],"o":{"n":"ordering"}}],[11,"eq","","",76,{"i":[{"n":"self"},{"n":"r32_g32"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",76,{"i":[{"n":"self"},{"n":"r32_g32"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",76,{"o":{"n":"surfacetype"}}],[11,"clone","","",77,{"i":[{"n":"self"}],"o":{"n":"r32_g32_b32"}}],[11,"fmt","","",77,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",77,null],[11,"cmp","","",77,{"i":[{"n":"self"},{"n":"r32_g32_b32"}],"o":{"n":"ordering"}}],[11,"eq","","",77,{"i":[{"n":"self"},{"n":"r32_g32_b32"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",77,{"i":[{"n":"self"},{"n":"r32_g32_b32"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",77,{"o":{"n":"surfacetype"}}],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"r32_g32_b32_a32"}}],[11,"fmt","","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",78,null],[11,"cmp","","",78,{"i":[{"n":"self"},{"n":"r32_g32_b32_a32"}],"o":{"n":"ordering"}}],[11,"eq","","",78,{"i":[{"n":"self"},{"n":"r32_g32_b32_a32"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",78,{"i":[{"n":"self"},{"n":"r32_g32_b32_a32"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",78,{"o":{"n":"surfacetype"}}],[11,"clone","","",79,{"i":[{"n":"self"}],"o":{"n":"b8_g8_r8_a8"}}],[11,"fmt","","",79,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",79,null],[11,"cmp","","",79,{"i":[{"n":"self"},{"n":"b8_g8_r8_a8"}],"o":{"n":"ordering"}}],[11,"eq","","",79,{"i":[{"n":"self"},{"n":"b8_g8_r8_a8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",79,{"i":[{"n":"self"},{"n":"b8_g8_r8_a8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",79,{"o":{"n":"surfacetype"}}],[11,"clone","","",80,{"i":[{"n":"self"}],"o":{"n":"d16"}}],[11,"fmt","","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",80,null],[11,"cmp","","",80,{"i":[{"n":"self"},{"n":"d16"}],"o":{"n":"ordering"}}],[11,"eq","","",80,{"i":[{"n":"self"},{"n":"d16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",80,{"i":[{"n":"self"},{"n":"d16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",80,{"o":{"n":"surfacetype"}}],[11,"clone","","",81,{"i":[{"n":"self"}],"o":{"n":"d24"}}],[11,"fmt","","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",81,null],[11,"cmp","","",81,{"i":[{"n":"self"},{"n":"d24"}],"o":{"n":"ordering"}}],[11,"eq","","",81,{"i":[{"n":"self"},{"n":"d24"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",81,{"i":[{"n":"self"},{"n":"d24"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",81,{"o":{"n":"surfacetype"}}],[11,"clone","","",82,{"i":[{"n":"self"}],"o":{"n":"d24_s8"}}],[11,"fmt","","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",82,null],[11,"cmp","","",82,{"i":[{"n":"self"},{"n":"d24_s8"}],"o":{"n":"ordering"}}],[11,"eq","","",82,{"i":[{"n":"self"},{"n":"d24_s8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",82,{"i":[{"n":"self"},{"n":"d24_s8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",82,{"o":{"n":"surfacetype"}}],[11,"clone","","",83,{"i":[{"n":"self"}],"o":{"n":"d32"}}],[11,"fmt","","",83,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",83,null],[11,"cmp","","",83,{"i":[{"n":"self"},{"n":"d32"}],"o":{"n":"ordering"}}],[11,"eq","","",83,{"i":[{"n":"self"},{"n":"d32"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",83,{"i":[{"n":"self"},{"n":"d32"}],"o":{"g":["ordering"],"n":"option"}}],[11,"get_surface_type","","",83,{"o":{"n":"surfacetype"}}],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"channelsource"}}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",52,null],[11,"cmp","","",52,{"i":[{"n":"self"},{"n":"channelsource"}],"o":{"n":"ordering"}}],[11,"eq","","",52,{"i":[{"n":"self"},{"n":"channelsource"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",52,{"i":[{"n":"self"},{"n":"channelsource"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"swizzle"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",43,null],[11,"cmp","","",43,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"n":"ordering"}}],[11,"eq","","",43,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"n":"bool"}}],[11,"ne","","",43,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",43,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",43,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"n":"bool"}}],[11,"le","","",43,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"n":"bool"}}],[11,"gt","","",43,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"n":"bool"}}],[11,"ge","","",43,{"i":[{"n":"self"},{"n":"swizzle"}],"o":{"n":"bool"}}],[11,"new","","Create a new swizzle where each channel is unmapped.",43,{"o":{"n":"swizzle"}}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"format"}}],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",44,null],[11,"cmp","","",44,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"ordering"}}],[11,"eq","","",44,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"bool"}}],[11,"ne","","",44,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",44,{"i":[{"n":"self"},{"n":"format"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",44,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"bool"}}],[11,"le","","",44,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"bool"}}],[11,"gt","","",44,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"bool"}}],[11,"ge","","",44,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"bool"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"u8norm"}}],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",45,null],[11,"cmp","","",45,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"n":"ordering"}}],[11,"eq","","",45,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"n":"bool"}}],[11,"ne","","",45,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",45,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",45,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"n":"bool"}}],[11,"le","","",45,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"n":"bool"}}],[11,"gt","","",45,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"n":"bool"}}],[11,"ge","","",45,{"i":[{"n":"self"},{"n":"u8norm"}],"o":{"n":"bool"}}],[11,"from","","",45,{"i":[{"n":"u8"}],"o":{"n":"u8norm"}}],[11,"cast2","","Convert a 2-element slice.",45,null],[11,"cast3","","Convert a 3-element slice.",45,null],[11,"cast4","","Convert a 4-element slice.",45,null],[11,"cast_slice","","Convert a generic slice by transmutation.",45,null],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"i8norm"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",46,null],[11,"cmp","","",46,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"n":"ordering"}}],[11,"eq","","",46,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"n":"bool"}}],[11,"ne","","",46,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",46,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",46,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"n":"bool"}}],[11,"le","","",46,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"n":"bool"}}],[11,"gt","","",46,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"n":"bool"}}],[11,"ge","","",46,{"i":[{"n":"self"},{"n":"i8norm"}],"o":{"n":"bool"}}],[11,"from","","",46,{"i":[{"n":"i8"}],"o":{"n":"i8norm"}}],[11,"cast2","","Convert a 2-element slice.",46,null],[11,"cast3","","Convert a 3-element slice.",46,null],[11,"cast4","","Convert a 4-element slice.",46,null],[11,"cast_slice","","Convert a generic slice by transmutation.",46,null],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"u16norm"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",47,null],[11,"cmp","","",47,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"n":"ordering"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"n":"bool"}}],[11,"ne","","",47,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",47,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",47,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"n":"bool"}}],[11,"le","","",47,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"n":"bool"}}],[11,"gt","","",47,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"n":"bool"}}],[11,"ge","","",47,{"i":[{"n":"self"},{"n":"u16norm"}],"o":{"n":"bool"}}],[11,"from","","",47,{"i":[{"n":"u16"}],"o":{"n":"u16norm"}}],[11,"cast2","","Convert a 2-element slice.",47,null],[11,"cast3","","Convert a 3-element slice.",47,null],[11,"cast4","","Convert a 4-element slice.",47,null],[11,"cast_slice","","Convert a generic slice by transmutation.",47,null],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"i16norm"}}],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",48,null],[11,"cmp","","",48,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"n":"ordering"}}],[11,"eq","","",48,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"n":"bool"}}],[11,"ne","","",48,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",48,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",48,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"n":"bool"}}],[11,"le","","",48,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"n":"bool"}}],[11,"gt","","",48,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"n":"bool"}}],[11,"ge","","",48,{"i":[{"n":"self"},{"n":"i16norm"}],"o":{"n":"bool"}}],[11,"from","","",48,{"i":[{"n":"i16"}],"o":{"n":"i16norm"}}],[11,"cast2","","Convert a 2-element slice.",48,null],[11,"cast3","","Convert a 3-element slice.",48,null],[11,"cast4","","Convert a 4-element slice.",48,null],[11,"cast_slice","","Convert a generic slice by transmutation.",48,null],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"f16"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",49,null],[11,"cmp","","",49,{"i":[{"n":"self"},{"n":"f16"}],"o":{"n":"ordering"}}],[11,"eq","","",49,{"i":[{"n":"self"},{"n":"f16"}],"o":{"n":"bool"}}],[11,"ne","","",49,{"i":[{"n":"self"},{"n":"f16"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",49,{"i":[{"n":"self"},{"n":"f16"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",49,{"i":[{"n":"self"},{"n":"f16"}],"o":{"n":"bool"}}],[11,"le","","",49,{"i":[{"n":"self"},{"n":"f16"}],"o":{"n":"bool"}}],[11,"gt","","",49,{"i":[{"n":"self"},{"n":"f16"}],"o":{"n":"bool"}}],[11,"ge","","",49,{"i":[{"n":"self"},{"n":"f16"}],"o":{"n":"bool"}}],[11,"from","","",49,{"i":[{"n":"u16"}],"o":{"n":"f16"}}],[11,"cast2","","Convert a 2-element slice.",49,null],[11,"cast3","","Convert a 3-element slice.",49,null],[11,"cast4","","Convert a 4-element slice.",49,null],[11,"cast_slice","","Convert a generic slice by transmutation.",49,null],[0,"handle","gfx_core","Resource handles",null,null],[3,"RawBuffer","gfx_core::handle","Untyped buffer handle",null,null],[3,"Buffer","","Type-safe buffer handle",null,null],[3,"Shader","","Shader Handle",null,null],[3,"Program","","Program Handle",null,null],[3,"RawPipelineState","","Raw Pipeline State Handle",null,null],[3,"RawTexture","","Raw texture handle",null,null],[3,"Texture","","Typed texture object",null,null],[3,"RawShaderResourceView","","Raw Shader Resource View Handle",null,null],[3,"ShaderResourceView","","Type-safe Shader Resource View Handle",null,null],[3,"RawUnorderedAccessView","","Raw Unordered Access View Handle",null,null],[3,"UnorderedAccessView","","Type-safe Unordered Access View Handle",null,null],[3,"RawRenderTargetView","","Raw RTV",null,null],[3,"RawDepthStencilView","","Raw DSV",null,null],[3,"RenderTargetView","","Typed RTV",null,null],[3,"DepthStencilView","","Typed DSV",null,null],[3,"Sampler","","Sampler Handle",null,null],[3,"Fence","","Fence Handle",null,null],[3,"Manager","","Stores reference-counted resources used in a command buffer. Seals actual resource names behind the interface, automatically referencing them both by the Factory on resource creation and the Renderer during CommandBuffer population.",null,null],[11,"clone","","",84,{"i":[{"n":"self"}],"o":{"n":"rawbuffer"}}],[11,"fmt","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",84,null],[11,"eq","","",84,{"i":[{"n":"self"},{"n":"rawbuffer"}],"o":{"n":"bool"}}],[11,"ne","","",84,{"i":[{"n":"self"},{"n":"rawbuffer"}],"o":{"n":"bool"}}],[11,"deref","","",84,null],[11,"clone","","",85,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",85,{"i":[{"n":"self"},{"n":"__hrt"}]}],[11,"eq","","",85,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"get_info","","Get the associated information about the buffer",85,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"len","","Get the number of elements in the buffer.",85,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",86,{"i":[{"n":"self"}],"o":{"n":"shader"}}],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",86,null],[11,"eq","","",86,{"i":[{"n":"self"},{"n":"shader"}],"o":{"n":"bool"}}],[11,"ne","","",86,{"i":[{"n":"self"},{"n":"shader"}],"o":{"n":"bool"}}],[11,"clone","","",87,{"i":[{"n":"self"}],"o":{"n":"program"}}],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",87,null],[11,"eq","","",87,{"i":[{"n":"self"},{"n":"program"}],"o":{"n":"bool"}}],[11,"ne","","",87,{"i":[{"n":"self"},{"n":"program"}],"o":{"n":"bool"}}],[11,"deref","","",87,null],[11,"clone","","",88,{"i":[{"n":"self"}],"o":{"n":"rawpipelinestate"}}],[11,"fmt","","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",88,null],[11,"eq","","",88,{"i":[{"n":"self"},{"n":"rawpipelinestate"}],"o":{"n":"bool"}}],[11,"ne","","",88,{"i":[{"n":"self"},{"n":"rawpipelinestate"}],"o":{"n":"bool"}}],[11,"clone","","",89,{"i":[{"n":"self"}],"o":{"n":"rawtexture"}}],[11,"fmt","","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",89,null],[11,"eq","","",89,{"i":[{"n":"self"},{"n":"rawtexture"}],"o":{"n":"bool"}}],[11,"ne","","",89,{"i":[{"n":"self"},{"n":"rawtexture"}],"o":{"n":"bool"}}],[11,"deref","","",89,null],[11,"clone","","",90,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",90,{"i":[{"n":"self"},{"n":"__hrs"}]}],[11,"eq","","",90,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"get_info","","Get texture descriptor",90,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"clone","","",91,{"i":[{"n":"self"}],"o":{"n":"rawshaderresourceview"}}],[11,"fmt","","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",91,null],[11,"eq","","",91,{"i":[{"n":"self"},{"n":"rawshaderresourceview"}],"o":{"n":"bool"}}],[11,"ne","","",91,{"i":[{"n":"self"},{"n":"rawshaderresourceview"}],"o":{"n":"bool"}}],[11,"clone","","",92,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",92,{"i":[{"n":"self"},{"n":"__hrt"}]}],[11,"eq","","",92,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",93,{"i":[{"n":"self"}],"o":{"n":"rawunorderedaccessview"}}],[11,"fmt","","",93,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",93,null],[11,"eq","","",93,{"i":[{"n":"self"},{"n":"rawunorderedaccessview"}],"o":{"n":"bool"}}],[11,"ne","","",93,{"i":[{"n":"self"},{"n":"rawunorderedaccessview"}],"o":{"n":"bool"}}],[11,"clone","","",94,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",94,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",94,{"i":[{"n":"self"},{"n":"__hrt"}]}],[11,"eq","","",94,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",95,{"i":[{"n":"self"}],"o":{"n":"rawrendertargetview"}}],[11,"fmt","","",95,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",95,null],[11,"eq","","",95,{"i":[{"n":"self"},{"n":"rawrendertargetview"}],"o":{"n":"bool"}}],[11,"ne","","",95,{"i":[{"n":"self"},{"n":"rawrendertargetview"}],"o":{"n":"bool"}}],[11,"get_dimensions","","Get target dimensions",95,{"i":[{"n":"self"}],"o":{"n":"dimensions"}}],[11,"get_texture","","Get the associated texture",95,{"i":[{"n":"self"}],"o":{"n":"rawtexture"}}],[11,"clone","","",96,{"i":[{"n":"self"}],"o":{"n":"rawdepthstencilview"}}],[11,"fmt","","",96,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",96,null],[11,"eq","","",96,{"i":[{"n":"self"},{"n":"rawdepthstencilview"}],"o":{"n":"bool"}}],[11,"ne","","",96,{"i":[{"n":"self"},{"n":"rawdepthstencilview"}],"o":{"n":"bool"}}],[11,"get_dimensions","","Get target dimensions",96,{"i":[{"n":"self"}],"o":{"n":"dimensions"}}],[11,"get_texture","","Get the associated texture",96,{"i":[{"n":"self"}],"o":{"n":"rawtexture"}}],[11,"clone","","",97,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",97,{"i":[{"n":"self"},{"n":"__hrt"}]}],[11,"eq","","",97,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"get_dimensions","","Get target dimensions",97,{"i":[{"n":"self"}],"o":{"n":"dimensions"}}],[11,"clone","","",98,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",98,{"i":[{"n":"self"},{"n":"__hrt"}]}],[11,"eq","","",98,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"get_dimensions","","Get target dimensions",98,{"i":[{"n":"self"}],"o":{"n":"dimensions"}}],[11,"clone","","",99,{"i":[{"n":"self"}],"o":{"n":"sampler"}}],[11,"fmt","","",99,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",99,null],[11,"eq","","",99,{"i":[{"n":"self"},{"n":"sampler"}],"o":{"n":"bool"}}],[11,"ne","","",99,{"i":[{"n":"self"},{"n":"sampler"}],"o":{"n":"bool"}}],[11,"get_info","","Get sampler info",99,{"i":[{"n":"self"}],"o":{"n":"samplerinfo"}}],[11,"clone","","",100,{"i":[{"n":"self"}],"o":{"n":"fence"}}],[11,"fmt","","",100,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",100,null],[11,"eq","","",100,{"i":[{"n":"self"},{"n":"fence"}],"o":{"n":"bool"}}],[11,"ne","","",100,{"i":[{"n":"self"},{"n":"fence"}],"o":{"n":"bool"}}],[11,"fmt","","",101,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new handle manager",101,{"o":{"n":"manager"}}],[11,"clear","","Clear all references",101,{"i":[{"n":"self"}]}],[11,"extend","","Extend with all references of another handle manager",101,{"i":[{"n":"self"},{"n":"manager"}]}],[11,"count","","Count the total number of referenced resources",101,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"ref_buffer","","Reference a buffer",101,null],[11,"ref_shader","","Reference a shader",101,null],[11,"ref_program","","Reference a program",101,null],[11,"ref_pso","","Reference a pipeline state object",101,null],[11,"ref_texture","","Reference a texture",101,null],[11,"ref_srv","","Reference a shader resource view",101,null],[11,"ref_uav","","Reference an unordered access view",101,null],[11,"ref_rtv","","Reference an RTV",101,null],[11,"ref_dsv","","Reference a DSV",101,null],[11,"ref_sampler","","Reference a sampler",101,null],[11,"ref_fence","","Reference a fence",101,null],[0,"mapping","gfx_core","Memory mapping",null,null],[3,"Reader","gfx_core::mapping","Mapping reader",null,null],[3,"Writer","","Mapping writer. Currently is not possible to make write-only slice so while it is technically possible to read from Writer, it will lead to an undefined behavior. Please do not read from it.",null,null],[4,"Error","","Error accessing a mapping.",null,null],[13,"InvalidAccess","","The requested mapping access did not match the expected usage.",102,null],[13,"AccessOverlap","","The requested mapping access overlaps with another.",102,null],[11,"clone","","",102,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",102,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",102,null],[11,"eq","","",102,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"ne","","",102,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"fmt","","",102,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",102,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",103,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deref","","",103,null],[11,"fmt","","",104,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deref","","",104,null],[11,"deref_mut","","",104,null],[0,"memory","gfx_core","Types to describe the properties of memory allocated for gfx resources.",null,null],[3,"Access","gfx_core::memory","Flags providing information about the type of memory access to a resource.",null,null],[3,"Bind","","Flags providing information about the usage of a resource.",null,null],[4,"Usage","","How this memory will be used regarding GPU-CPU data flow.",null,null],[13,"Data","","Full speed GPU access. Optimal for render targets and resourced memory.",105,null],[13,"Dynamic","","CPU to GPU data flow with update commands. Used for dynamic buffer data, typically constant buffers.",105,null],[13,"Upload","","CPU to GPU data flow with mapping. Used for staging for upload to GPU.",105,null],[13,"Download","","GPU to CPU data flow with mapping. Used for staging for download from GPU.",105,null],[5,"cast_slice","","Cast a slice from one POD type to another.",null,null],[8,"Pod","","A trait for plain-old-data types.",null,null],[11,"clone","","",105,{"i":[{"n":"self"}],"o":{"n":"usage"}}],[11,"fmt","","",105,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",105,null],[11,"cmp","","",105,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"ordering"}}],[11,"eq","","",105,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",105,{"i":[{"n":"self"},{"n":"usage"}],"o":{"g":["ordering"],"n":"option"}}],[11,"eq","","",106,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"ne","","",106,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"clone","","",106,{"i":[{"n":"self"}],"o":{"n":"access"}}],[11,"partial_cmp","","",106,{"i":[{"n":"self"},{"n":"access"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",106,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"le","","",106,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"gt","","",106,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"ge","","",106,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"cmp","","",106,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"ordering"}}],[11,"hash","","",106,null],[11,"fmt","","",106,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",106,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",106,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",106,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",106,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"READ","","Read access",106,null],[18,"WRITE","","Write access",106,null],[18,"RW","","Full access",106,null],[11,"empty","","Returns an empty set of flags.",106,{"o":{"n":"access"}}],[11,"all","","Returns the set containing all flags.",106,{"o":{"n":"access"}}],[11,"bits","","Returns the raw value of the flags currently stored.",106,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",106,{"i":[{"n":"u8"}],"o":{"g":["access"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",106,{"i":[{"n":"u8"}],"o":{"n":"access"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",106,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",106,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",106,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",106,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",106,{"i":[{"n":"self"},{"n":"access"}]}],[11,"remove","","Removes the specified flags in-place.",106,{"i":[{"n":"self"},{"n":"access"}]}],[11,"toggle","","Toggles the specified flags in-place.",106,{"i":[{"n":"self"},{"n":"access"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",106,{"i":[{"n":"self"},{"n":"access"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",106,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"access"}}],[11,"bitor_assign","","Adds the set of flags.",106,{"i":[{"n":"self"},{"n":"access"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",106,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"access"}}],[11,"bitxor_assign","","Toggles the set of flags.",106,{"i":[{"n":"self"},{"n":"access"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",106,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"access"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",106,{"i":[{"n":"self"},{"n":"access"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",106,{"i":[{"n":"self"},{"n":"access"}],"o":{"n":"access"}}],[11,"sub_assign","","Disables all flags enabled in the set.",106,{"i":[{"n":"self"},{"n":"access"}]}],[11,"not","","Returns the complement of this set of flags.",106,{"i":[{"n":"self"}],"o":{"n":"access"}}],[11,"extend","","",106,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",106,{"i":[{"n":"t"}],"o":{"n":"access"}}],[11,"eq","","",107,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"ne","","",107,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"clone","","",107,{"i":[{"n":"self"}],"o":{"n":"bind"}}],[11,"partial_cmp","","",107,{"i":[{"n":"self"},{"n":"bind"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",107,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"le","","",107,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"gt","","",107,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"ge","","",107,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"cmp","","",107,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"ordering"}}],[11,"hash","","",107,null],[11,"fmt","","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"RENDER_TARGET","","Can be rendered into.",107,null],[18,"DEPTH_STENCIL","","Can serve as a depth/stencil target.",107,null],[18,"SHADER_RESOURCE","","Can be bound to the shader for reading.",107,null],[18,"UNORDERED_ACCESS","","Can be bound to the shader for writing.",107,null],[18,"TRANSFER_SRC","","Can be transfered from.",107,null],[18,"TRANSFER_DST","","Can be transfered into.",107,null],[11,"empty","","Returns an empty set of flags.",107,{"o":{"n":"bind"}}],[11,"all","","Returns the set containing all flags.",107,{"o":{"n":"bind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",107,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",107,{"i":[{"n":"u8"}],"o":{"g":["bind"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",107,{"i":[{"n":"u8"}],"o":{"n":"bind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",107,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",107,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",107,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",107,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",107,{"i":[{"n":"self"},{"n":"bind"}]}],[11,"remove","","Removes the specified flags in-place.",107,{"i":[{"n":"self"},{"n":"bind"}]}],[11,"toggle","","Toggles the specified flags in-place.",107,{"i":[{"n":"self"},{"n":"bind"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",107,{"i":[{"n":"self"},{"n":"bind"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",107,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bind"}}],[11,"bitor_assign","","Adds the set of flags.",107,{"i":[{"n":"self"},{"n":"bind"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",107,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bind"}}],[11,"bitxor_assign","","Toggles the set of flags.",107,{"i":[{"n":"self"},{"n":"bind"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",107,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bind"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",107,{"i":[{"n":"self"},{"n":"bind"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",107,{"i":[{"n":"self"},{"n":"bind"}],"o":{"n":"bind"}}],[11,"sub_assign","","Disables all flags enabled in the set.",107,{"i":[{"n":"self"},{"n":"bind"}]}],[11,"not","","Returns the complement of this set of flags.",107,{"i":[{"n":"self"}],"o":{"n":"bind"}}],[11,"extend","","",107,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",107,{"i":[{"n":"t"}],"o":{"n":"bind"}}],[11,"is_mutable","","Is this memory bound to be mutated ?",107,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[0,"pso","gfx_core","Raw Pipeline State Objects",null,null],[3,"CreationError","gfx_core::pso","Error types happening upon PSO creation on the device side.",null,null],[3,"ColorInfo","","Color output configuration of the PSO.",null,null],[12,"mask","","Color channel mask",108,null],[12,"color","","Optional color blending",108,null],[12,"alpha","","Optional alpha blending",108,null],[3,"DepthStencilInfo","","Depth and stencil state of the PSO.",null,null],[12,"depth","","Optional depth test configuration",109,null],[12,"front","","Optional stencil test on the front faces",109,null],[12,"back","","Optional stencil test on the back faces",109,null],[3,"Element","","A struct element descriptor.",null,null],[12,"format","","Element format",110,null],[12,"offset","","Offset from the beginning of the container, in bytes",110,null],[3,"VertexBufferDesc","","Vertex buffer descriptor",null,null],[12,"stride","","Total container size, in bytes",111,null],[12,"rate","","Rate of the input for the given buffer",111,null],[3,"Descriptor","","All the information surrounding a shader program that is required for PSO creation, including the formats of vertex buffers and pixel targets;",null,null],[12,"primitive","","Type of the primitive",112,null],[12,"rasterizer","","Rasterizer setup",112,null],[12,"scissor","","Enable scissor test",112,null],[12,"vertex_buffers","","Vertex buffers",112,null],[12,"attributes","","Vertex attributes",112,null],[12,"constant_buffers","","Constant buffers",112,null],[12,"resource_views","","Shader resource views",112,null],[12,"unordered_views","","Unordered access views",112,null],[12,"samplers","","Samplers",112,null],[12,"color_targets","","Render target views (RTV)",112,null],[12,"depth_stencil","","Depth stencil view (DSV)",112,null],[3,"VertexBufferSet","","A complete set of vertex buffers to be used for vertex import in PSO.",null,null],[12,"0","","Array of buffer handles with offsets in them",113,null],[3,"ConstantBufferParam","","A constant buffer run-time parameter for PSO.",null,null],[12,"0","","",114,null],[12,"1","","",114,null],[12,"2","","",114,null],[3,"ResourceViewParam","","A shader resource view (SRV) run-time parameter for PSO.",null,null],[12,"0","","",115,null],[12,"1","","",115,null],[12,"2","","",115,null],[3,"UnorderedViewParam","","An unordered access view (UAV) run-time parameter for PSO.",null,null],[12,"0","","",116,null],[12,"1","","",116,null],[12,"2","","",116,null],[3,"SamplerParam","","A sampler run-time parameter for PSO.",null,null],[12,"0","","",117,null],[12,"1","","",117,null],[12,"2","","",117,null],[3,"PixelTargetSet","","A complete set of render targets to be used for pixel export in PSO.",null,null],[12,"colors","","Array of color target views",118,null],[12,"depth","","Depth target view",118,null],[12,"stencil","","Stencil target view",118,null],[12,"dimensions","","Rendering dimensions",118,null],[6,"BufferOffset","","An offset inside a vertex buffer, in bytes.",null,null],[6,"BufferIndex","","Index of a vertex buffer.",null,null],[6,"ElemOffset","","Offset of an attribute from the start of the buffer, in bytes",null,null],[6,"ElemStride","","Offset between attribute values, in bytes",null,null],[6,"InstanceRate","","The number of instances between each subsequent attribute value",null,null],[6,"AttributeDesc","","PSO vertex attribute descriptor",null,null],[6,"ConstantBufferDesc","","PSO constant buffer descriptor",null,null],[6,"ResourceViewDesc","","PSO shader resource view descriptor",null,null],[6,"UnorderedViewDesc","","PSO unordered access view descriptor",null,null],[6,"SamplerDesc","","PSO sampler descriptor",null,null],[6,"ColorTargetDesc","","PSO color target descriptor",null,null],[6,"DepthStencilDesc","","PSO depth-stencil target descriptor",null,null],[17,"MAX_VERTEX_BUFFERS","","Maximum number of vertex buffers used in a PSO definition.",null,null],[11,"clone","","",119,{"i":[{"n":"self"}],"o":{"n":"creationerror"}}],[11,"fmt","","",119,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",119,{"i":[{"n":"self"},{"n":"creationerror"}],"o":{"n":"bool"}}],[11,"fmt","","",119,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",119,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",108,{"i":[{"n":"self"}],"o":{"n":"colorinfo"}}],[11,"fmt","","",108,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",108,null],[11,"eq","","",108,{"i":[{"n":"self"},{"n":"colorinfo"}],"o":{"n":"bool"}}],[11,"ne","","",108,{"i":[{"n":"self"},{"n":"colorinfo"}],"o":{"n":"bool"}}],[11,"from","","",108,{"i":[{"n":"colormask"}],"o":{"n":"colorinfo"}}],[11,"from","","",108,{"i":[{"n":"blend"}],"o":{"n":"colorinfo"}}],[11,"clone","","",109,{"i":[{"n":"self"}],"o":{"n":"depthstencilinfo"}}],[11,"fmt","","",109,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",109,null],[11,"eq","","",109,{"i":[{"n":"self"},{"n":"depthstencilinfo"}],"o":{"n":"bool"}}],[11,"ne","","",109,{"i":[{"n":"self"},{"n":"depthstencilinfo"}],"o":{"n":"bool"}}],[11,"from","","",109,{"i":[{"n":"depth"}],"o":{"n":"depthstencilinfo"}}],[11,"from","","",109,{"i":[{"n":"stencil"}],"o":{"n":"depthstencilinfo"}}],[11,"from","","",109,null],[11,"clone","","",110,{"i":[{"n":"self"}],"o":{"n":"element"}}],[11,"fmt","","",110,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",110,null],[11,"eq","","",110,{"i":[{"n":"self"},{"n":"element"}],"o":{"n":"bool"}}],[11,"ne","","",110,{"i":[{"n":"self"},{"n":"element"}],"o":{"n":"bool"}}],[11,"clone","","",111,{"i":[{"n":"self"}],"o":{"n":"vertexbufferdesc"}}],[11,"fmt","","",111,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",111,null],[11,"eq","","",111,{"i":[{"n":"self"},{"n":"vertexbufferdesc"}],"o":{"n":"bool"}}],[11,"ne","","",111,{"i":[{"n":"self"},{"n":"vertexbufferdesc"}],"o":{"n":"bool"}}],[11,"clone","","",112,{"i":[{"n":"self"}],"o":{"n":"descriptor"}}],[11,"fmt","","",112,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",112,null],[11,"eq","","",112,{"i":[{"n":"self"},{"n":"descriptor"}],"o":{"n":"bool"}}],[11,"ne","","",112,{"i":[{"n":"self"},{"n":"descriptor"}],"o":{"n":"bool"}}],[11,"new","","Create a new empty PSO descriptor.",112,{"i":[{"n":"primitive"},{"n":"rasterizer"}],"o":{"n":"descriptor"}}],[11,"clone","","",113,{"i":[{"n":"self"}],"o":{"n":"vertexbufferset"}}],[11,"fmt","","",113,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",113,null],[11,"eq","","",113,{"i":[{"n":"self"},{"n":"vertexbufferset"}],"o":{"n":"bool"}}],[11,"ne","","",113,{"i":[{"n":"self"},{"n":"vertexbufferset"}],"o":{"n":"bool"}}],[11,"new","","Create an empty set",113,{"o":{"n":"vertexbufferset"}}],[11,"clone","","",114,{"i":[{"n":"self"}],"o":{"n":"constantbufferparam"}}],[11,"fmt","","",114,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",114,null],[11,"eq","","",114,{"i":[{"n":"self"},{"n":"constantbufferparam"}],"o":{"n":"bool"}}],[11,"ne","","",114,{"i":[{"n":"self"},{"n":"constantbufferparam"}],"o":{"n":"bool"}}],[11,"clone","","",115,{"i":[{"n":"self"}],"o":{"n":"resourceviewparam"}}],[11,"fmt","","",115,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",115,null],[11,"eq","","",115,{"i":[{"n":"self"},{"n":"resourceviewparam"}],"o":{"n":"bool"}}],[11,"ne","","",115,{"i":[{"n":"self"},{"n":"resourceviewparam"}],"o":{"n":"bool"}}],[11,"clone","","",116,{"i":[{"n":"self"}],"o":{"n":"unorderedviewparam"}}],[11,"fmt","","",116,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",116,null],[11,"eq","","",116,{"i":[{"n":"self"},{"n":"unorderedviewparam"}],"o":{"n":"bool"}}],[11,"ne","","",116,{"i":[{"n":"self"},{"n":"unorderedviewparam"}],"o":{"n":"bool"}}],[11,"clone","","",117,{"i":[{"n":"self"}],"o":{"n":"samplerparam"}}],[11,"fmt","","",117,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",117,null],[11,"eq","","",117,{"i":[{"n":"self"},{"n":"samplerparam"}],"o":{"n":"bool"}}],[11,"ne","","",117,{"i":[{"n":"self"},{"n":"samplerparam"}],"o":{"n":"bool"}}],[11,"clone","","",118,{"i":[{"n":"self"}],"o":{"n":"pixeltargetset"}}],[11,"fmt","","",118,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",118,null],[11,"eq","","",118,{"i":[{"n":"self"},{"n":"pixeltargetset"}],"o":{"n":"bool"}}],[11,"ne","","",118,{"i":[{"n":"self"},{"n":"pixeltargetset"}],"o":{"n":"bool"}}],[11,"new","","Create an empty set",118,{"o":{"n":"pixeltargetset"}}],[11,"add_color","","Add a color view to the specified slot",118,null],[11,"add_depth_stencil","","Add a depth or stencil view to the specified slot",118,null],[11,"get_view","","Get the rendering view (returns values > 0)",118,null],[0,"shade","gfx_core","Shader handling.",null,null],[3,"SamplerType","gfx_core::shade","A type of the sampler variable.",null,null],[12,"0","","",120,null],[12,"1","","",120,null],[3,"Usage","","Parameter usage flags.",null,null],[3,"AttributeVar","","Vertex information that a shader takes as input.",null,null],[12,"name","","Name of this attribute.",121,null],[12,"slot","","Slot of the vertex attribute.",121,null],[12,"base_type","","Type that this attribute is composed of.",121,null],[12,"container","","\"Scalarness\" of this attribute.",121,null],[3,"ConstVar","","A constant in the shader - a bit of data that doesn't vary",null,null],[12,"name","","Name of this constant.",122,null],[12,"location","","Location of this constant in the program. For constant buffer elements, it's the offset in bytes.",122,null],[12,"count","","Number of elements this constant represents.",122,null],[12,"base_type","","Type that this constant is composed of",122,null],[12,"container","","\"Scalarness\" of this constant.",122,null],[3,"ConstantBufferVar","","A constant buffer.",null,null],[12,"name","","Name of this constant buffer.",123,null],[12,"slot","","Slot of the constant buffer.",123,null],[12,"size","","Size (in bytes) of this buffer's data.",123,null],[12,"usage","","What program stage this buffer is used in.",123,null],[12,"elements","","List of individual elements in this buffer.",123,null],[3,"TextureVar","","Texture shader parameter.",null,null],[12,"name","","Name of this texture variable.",124,null],[12,"slot","","Slot of this texture variable.",124,null],[12,"base_type","","Base type for the texture.",124,null],[12,"ty","","Type of this texture.",124,null],[12,"usage","","What program stage this texture is used in.",124,null],[3,"UnorderedVar","","Unordered access shader parameter.",null,null],[12,"name","","Name of this unordered variable.",125,null],[12,"slot","","Slot of this unordered variable.",125,null],[12,"usage","","What program stage this UAV is used in.",125,null],[3,"SamplerVar","","Sampler shader parameter.",null,null],[12,"name","","Name of this sampler variable.",126,null],[12,"slot","","Slot of this sampler variable.",126,null],[12,"ty","","Type of this sampler.",126,null],[12,"usage","","What program stage this texture is used in.",126,null],[3,"OutputVar","","Target output variable.",null,null],[12,"name","","Name of this output variable.",127,null],[12,"slot","","Output color target index.",127,null],[12,"base_type","","Type of the output component.",127,null],[12,"container","","\"Scalarness\" of this output.",127,null],[3,"ProgramInfo","","Metadata about a program.",null,null],[12,"vertex_attributes","","Attributes in the program",128,null],[12,"globals","","Global constants in the program",128,null],[12,"constant_buffers","","Constant buffers in the program",128,null],[12,"textures","","Textures in the program",128,null],[12,"unordereds","","Unordered access resources in the program",128,null],[12,"samplers","","Samplers in the program",128,null],[12,"outputs","","Output targets in the program",128,null],[12,"output_depth","","A flag indicating that the pixel shader manually assigns the depth.",128,null],[12,"knows_outputs","","A hacky flag to make sure the clients know we are unable to actually get the output variable info",128,null],[3,"Program","","A program",null,null],[3,"CreateProgramError","","An error type for creating programs.",null,null],[4,"IsArray","","Whether the sampler samples an array texture.",null,null],[13,"Array","","",129,null],[13,"NoArray","","",129,null],[4,"IsComparison","","Whether the sampler compares the depth value upon sampling.",null,null],[13,"Compare","","",130,null],[13,"NoCompare","","",130,null],[4,"IsMultiSample","","Whether the sampler samples a multisample texture.",null,null],[13,"MultiSample","","",131,null],[13,"NoMultiSample","","",131,null],[4,"IsRect","","Whether the sampler samples a rectangle texture.",null,null],[13,"Rect","","",132,null],[13,"NoRect","","",132,null],[4,"MatrixFormat","","Whether the matrix is column or row major.",null,null],[13,"ColumnMajor","","",133,null],[13,"RowMajor","","",133,null],[4,"TextureType","","A type of the texture variable. This has to match the actual data we bind to the shader.",null,null],[13,"Buffer","","Sample from a buffer.",134,null],[13,"D1","","Sample from a 1D texture",134,null],[13,"D2","","Sample from a 2D texture",134,null],[13,"D3","","Sample from a 3D texture",134,null],[13,"Cube","","Sample from a cubemap.",134,null],[4,"BaseType","","Base type of this shader parameter.",null,null],[13,"I32","","",135,null],[13,"U32","","",135,null],[13,"F32","","",135,null],[13,"F64","","",135,null],[13,"Bool","","",135,null],[4,"ContainerType","","Number of components this parameter represents.",null,null],[13,"Single","","Scalar value",136,null],[13,"Vector","","A vector with `Dimension` components.",136,null],[13,"Matrix","","A matrix.",136,null],[4,"Stage","","Which program stage this shader represents.",null,null],[13,"Vertex","","",137,null],[13,"Hull","","",137,null],[13,"Domain","","",137,null],[13,"Geometry","","",137,null],[13,"Pixel","","",137,null],[4,"UniformValue","","A value that can be uploaded to the device as a uniform.",null,null],[13,"I32","","",138,null],[13,"F32","","",138,null],[13,"I32Vector2","","",138,null],[13,"I32Vector3","","",138,null],[13,"I32Vector4","","",138,null],[13,"F32Vector2","","",138,null],[13,"F32Vector3","","",138,null],[13,"F32Vector4","","",138,null],[13,"F32Matrix2","","",138,null],[13,"F32Matrix3","","",138,null],[13,"F32Matrix4","","",138,null],[4,"CompatibilityError","","Error type for trying to store a UniformValue in a ConstVar.",null,null],[13,"ErrorArraySize","","Array sizes differ between the value and the var (trying to upload a vec2 as a vec4, etc)",139,null],[13,"ErrorBaseType","","Base types differ between the value and the var (trying to upload a f32 as a u16, etc)",139,null],[13,"ErrorContainer","","Container-ness differs between the value and the var (trying to upload a scalar as a vec4, etc)",139,null],[4,"CreateShaderError","","An error type for creating shaders.",null,null],[13,"ModelNotSupported","","The device does not support the requested shader model.",140,null],[13,"StageNotSupported","","The device does not support the shader stage.",140,null],[13,"CompilationFailed","","The shader failed to compile.",140,null],[6,"Dimension","","Number of components in a container type (vectors/matrices)",null,null],[6,"Location","","Location of a parameter in the program.",null,null],[6,"ConstFormat","","Format of a shader constant.",null,null],[17,"STAGES","","A constant static array of all shader stages.",null,null],[8,"BaseTyped","","A trait that statically links simple data types to base types of the shader constants.",null,null],[10,"get_base_type","","",141,{"o":{"n":"basetype"}}],[8,"Formatted","","A trait that statically links simple data types to constant formats.",null,null],[10,"get_format","","Get the associated constant format.",142,{"o":{"n":"constformat"}}],[11,"clone","","",129,{"i":[{"n":"self"}],"o":{"n":"isarray"}}],[11,"fmt","","",129,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",129,null],[11,"eq","","",129,{"i":[{"n":"self"},{"n":"isarray"}],"o":{"n":"bool"}}],[11,"clone","","",130,{"i":[{"n":"self"}],"o":{"n":"iscomparison"}}],[11,"fmt","","",130,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",130,null],[11,"eq","","",130,{"i":[{"n":"self"},{"n":"iscomparison"}],"o":{"n":"bool"}}],[11,"clone","","",131,{"i":[{"n":"self"}],"o":{"n":"ismultisample"}}],[11,"fmt","","",131,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",131,null],[11,"eq","","",131,{"i":[{"n":"self"},{"n":"ismultisample"}],"o":{"n":"bool"}}],[11,"clone","","",132,{"i":[{"n":"self"}],"o":{"n":"isrect"}}],[11,"fmt","","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",132,null],[11,"eq","","",132,{"i":[{"n":"self"},{"n":"isrect"}],"o":{"n":"bool"}}],[11,"clone","","",133,{"i":[{"n":"self"}],"o":{"n":"matrixformat"}}],[11,"fmt","","",133,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",133,null],[11,"eq","","",133,{"i":[{"n":"self"},{"n":"matrixformat"}],"o":{"n":"bool"}}],[11,"clone","","",134,{"i":[{"n":"self"}],"o":{"n":"texturetype"}}],[11,"fmt","","",134,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",134,null],[11,"eq","","",134,{"i":[{"n":"self"},{"n":"texturetype"}],"o":{"n":"bool"}}],[11,"ne","","",134,{"i":[{"n":"self"},{"n":"texturetype"}],"o":{"n":"bool"}}],[11,"can_sample","","Check if this texture can be used with a sampler.",134,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",120,{"i":[{"n":"self"}],"o":{"n":"samplertype"}}],[11,"fmt","","",120,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",120,null],[11,"eq","","",120,{"i":[{"n":"self"},{"n":"samplertype"}],"o":{"n":"bool"}}],[11,"ne","","",120,{"i":[{"n":"self"},{"n":"samplertype"}],"o":{"n":"bool"}}],[11,"clone","","",135,{"i":[{"n":"self"}],"o":{"n":"basetype"}}],[11,"fmt","","",135,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",135,null],[11,"eq","","",135,{"i":[{"n":"self"},{"n":"basetype"}],"o":{"n":"bool"}}],[11,"clone","","",136,{"i":[{"n":"self"}],"o":{"n":"containertype"}}],[11,"fmt","","",136,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",136,null],[11,"eq","","",136,{"i":[{"n":"self"},{"n":"containertype"}],"o":{"n":"bool"}}],[11,"ne","","",136,{"i":[{"n":"self"},{"n":"containertype"}],"o":{"n":"bool"}}],[11,"clone","","",137,{"i":[{"n":"self"}],"o":{"n":"stage"}}],[11,"fmt","","",137,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",137,null],[11,"eq","","",137,{"i":[{"n":"self"},{"n":"stage"}],"o":{"n":"bool"}}],[11,"clone","","",138,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"eq","","",138,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"n":"bool"}}],[11,"ne","","",138,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",138,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",138,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"n":"bool"}}],[11,"le","","",138,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"n":"bool"}}],[11,"gt","","",138,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"n":"bool"}}],[11,"ge","","",138,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"n":"bool"}}],[11,"fmt","","",138,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",143,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"ne","","",143,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"clone","","",143,{"i":[{"n":"self"}],"o":{"n":"usage"}}],[11,"partial_cmp","","",143,{"i":[{"n":"self"},{"n":"usage"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",143,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"le","","",143,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"gt","","",143,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"ge","","",143,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"cmp","","",143,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"ordering"}}],[11,"hash","","",143,null],[11,"fmt","","",143,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",143,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",143,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",143,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",143,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"VERTEX","","Used by the vertex shader",143,null],[18,"GEOMETRY","","Used by the geometry shader",143,null],[18,"PIXEL","","Used by the pixel shader",143,null],[18,"HULL","","Used by the hull shader",143,null],[18,"DOMAIN","","Used by the pixel shader",143,null],[11,"empty","","Returns an empty set of flags.",143,{"o":{"n":"usage"}}],[11,"all","","Returns the set containing all flags.",143,{"o":{"n":"usage"}}],[11,"bits","","Returns the raw value of the flags currently stored.",143,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",143,{"i":[{"n":"u8"}],"o":{"g":["usage"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",143,{"i":[{"n":"u8"}],"o":{"n":"usage"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",143,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",143,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",143,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",143,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",143,{"i":[{"n":"self"},{"n":"usage"}]}],[11,"remove","","Removes the specified flags in-place.",143,{"i":[{"n":"self"},{"n":"usage"}]}],[11,"toggle","","Toggles the specified flags in-place.",143,{"i":[{"n":"self"},{"n":"usage"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",143,{"i":[{"n":"self"},{"n":"usage"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",143,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"usage"}}],[11,"bitor_assign","","Adds the set of flags.",143,{"i":[{"n":"self"},{"n":"usage"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",143,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"usage"}}],[11,"bitxor_assign","","Toggles the set of flags.",143,{"i":[{"n":"self"},{"n":"usage"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",143,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"usage"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",143,{"i":[{"n":"self"},{"n":"usage"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",143,{"i":[{"n":"self"},{"n":"usage"}],"o":{"n":"usage"}}],[11,"sub_assign","","Disables all flags enabled in the set.",143,{"i":[{"n":"self"},{"n":"usage"}]}],[11,"not","","Returns the complement of this set of flags.",143,{"i":[{"n":"self"}],"o":{"n":"usage"}}],[11,"extend","","",143,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",143,{"i":[{"n":"t"}],"o":{"n":"usage"}}],[11,"from","","",143,{"i":[{"n":"stage"}],"o":{"n":"self"}}],[11,"clone","","",121,{"i":[{"n":"self"}],"o":{"n":"attributevar"}}],[11,"fmt","","",121,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",121,null],[11,"eq","","",121,{"i":[{"n":"self"},{"n":"attributevar"}],"o":{"n":"bool"}}],[11,"ne","","",121,{"i":[{"n":"self"},{"n":"attributevar"}],"o":{"n":"bool"}}],[11,"clone","","",122,{"i":[{"n":"self"}],"o":{"n":"constvar"}}],[11,"fmt","","",122,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",122,null],[11,"eq","","",122,{"i":[{"n":"self"},{"n":"constvar"}],"o":{"n":"bool"}}],[11,"ne","","",122,{"i":[{"n":"self"},{"n":"constvar"}],"o":{"n":"bool"}}],[11,"clone","","",123,{"i":[{"n":"self"}],"o":{"n":"constantbuffervar"}}],[11,"fmt","","",123,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",123,null],[11,"eq","","",123,{"i":[{"n":"self"},{"n":"constantbuffervar"}],"o":{"n":"bool"}}],[11,"ne","","",123,{"i":[{"n":"self"},{"n":"constantbuffervar"}],"o":{"n":"bool"}}],[11,"clone","","",124,{"i":[{"n":"self"}],"o":{"n":"texturevar"}}],[11,"fmt","","",124,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",124,null],[11,"eq","","",124,{"i":[{"n":"self"},{"n":"texturevar"}],"o":{"n":"bool"}}],[11,"ne","","",124,{"i":[{"n":"self"},{"n":"texturevar"}],"o":{"n":"bool"}}],[11,"clone","","",125,{"i":[{"n":"self"}],"o":{"n":"unorderedvar"}}],[11,"fmt","","",125,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",125,null],[11,"eq","","",125,{"i":[{"n":"self"},{"n":"unorderedvar"}],"o":{"n":"bool"}}],[11,"ne","","",125,{"i":[{"n":"self"},{"n":"unorderedvar"}],"o":{"n":"bool"}}],[11,"clone","","",126,{"i":[{"n":"self"}],"o":{"n":"samplervar"}}],[11,"fmt","","",126,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",126,null],[11,"eq","","",126,{"i":[{"n":"self"},{"n":"samplervar"}],"o":{"n":"bool"}}],[11,"ne","","",126,{"i":[{"n":"self"},{"n":"samplervar"}],"o":{"n":"bool"}}],[11,"clone","","",127,{"i":[{"n":"self"}],"o":{"n":"outputvar"}}],[11,"fmt","","",127,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",127,null],[11,"eq","","",127,{"i":[{"n":"self"},{"n":"outputvar"}],"o":{"n":"bool"}}],[11,"ne","","",127,{"i":[{"n":"self"},{"n":"outputvar"}],"o":{"n":"bool"}}],[11,"clone","","",128,{"i":[{"n":"self"}],"o":{"n":"programinfo"}}],[11,"fmt","","",128,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",128,null],[11,"eq","","",128,{"i":[{"n":"self"},{"n":"programinfo"}],"o":{"n":"bool"}}],[11,"ne","","",128,{"i":[{"n":"self"},{"n":"programinfo"}],"o":{"n":"bool"}}],[11,"fmt","","",144,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_info","","Get program info",144,{"i":[{"n":"self"}],"o":{"n":"programinfo"}}],[11,"eq","","",144,{"i":[{"n":"self"},{"n":"program"}],"o":{"n":"bool"}}],[11,"hash","","",144,{"i":[{"n":"self"},{"n":"h"}]}],[11,"clone","","",139,{"i":[{"n":"self"}],"o":{"n":"compatibilityerror"}}],[11,"fmt","","",139,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",139,{"i":[{"n":"self"},{"n":"compatibilityerror"}],"o":{"n":"bool"}}],[11,"fmt","","",139,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",139,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"is_compatible","","Whether a value is compatible with this variable. That is, whether the value can be stored in this variable.",122,{"i":[{"n":"self"},{"n":"uniformvalue"}],"o":{"g":["compatibilityerror"],"n":"result"}}],[11,"clone","","",140,{"i":[{"n":"self"}],"o":{"n":"createshadererror"}}],[11,"fmt","","",140,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",140,{"i":[{"n":"self"},{"n":"createshadererror"}],"o":{"n":"bool"}}],[11,"ne","","",140,{"i":[{"n":"self"},{"n":"createshadererror"}],"o":{"n":"bool"}}],[11,"fmt","","",140,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",140,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",145,{"i":[{"n":"self"}],"o":{"n":"createprogramerror"}}],[11,"fmt","","",145,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",145,{"i":[{"n":"self"},{"n":"createprogramerror"}],"o":{"n":"bool"}}],[11,"ne","","",145,{"i":[{"n":"self"},{"n":"createprogramerror"}],"o":{"n":"bool"}}],[11,"fmt","","",145,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",145,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from","","",145,{"i":[{"n":"s"}],"o":{"n":"createprogramerror"}}],[0,"texture","gfx_core","Texture creation and modification.",null,null],[6,"Layer","gfx_core::texture","A depth value, specifying which plane to select out of a 3D texture.",null,null],[6,"Level","","Mipmap level to select in a texture.",null,null],[3,"Raw","","Untyped texture",null,null],[3,"ImageInfoCommon","","Describes a subvolume of a texture, which image data can be uploaded into.",null,null],[12,"xoffset","","",146,null],[12,"yoffset","","",146,null],[12,"zoffset","","",146,null],[12,"width","","",146,null],[12,"height","","",146,null],[12,"depth","","",146,null],[12,"format","","Format of each texel.",146,null],[12,"mipmap","","Which mipmap to select.",146,null],[3,"TextureCopyRegion","","A texture region defined for copy operations",null,null],[12,"texture","","Raw texture",147,null],[12,"kind","","Texture kind",147,null],[12,"cube_face","","Optional cube face",147,null],[12,"info","","Dimensions, offsets, and format",147,null],[3,"Lod","","A wrapper for the LOD level of a texture.",null,null],[3,"PackedColor","","A wrapper for the 8bpp RGBA color, encoded as u32.",null,null],[12,"0","","",148,null],[3,"SamplerInfo","","Specifies how to sample from a texture.",null,null],[12,"filter","","Filter method to use.",149,null],[12,"wrap_mode","","Wrapping mode for each of the U, V, and W axis (S, T, and R in OpenGL speak).",149,null],[12,"lod_bias","","This bias is added to every computed mipmap level (N + lod_bias). For example, if it would select mipmap level 2 and lod_bias is 1, it will use mipmap level 3.",149,null],[12,"lod_range","","This range is used to clamp LOD level used for sampling.",149,null],[12,"comparison","","Comparison mode, used primary for a shadow map.",149,null],[12,"border","","Border color is used when one of the wrap modes is set to border.",149,null],[3,"Info","","Texture storage descriptor.",null,null],[12,"kind","","",150,null],[12,"levels","","",150,null],[12,"format","","",150,null],[12,"bind","","",150,null],[12,"usage","","",150,null],[3,"ResourceDesc","","Texture resource view descriptor.",null,null],[12,"channel","","",151,null],[12,"layer","","",151,null],[12,"min","","",151,null],[12,"max","","",151,null],[12,"swizzle","","",151,null],[3,"RenderDesc","","Texture render view descriptor.",null,null],[12,"channel","","",152,null],[12,"level","","",152,null],[12,"layer","","",152,null],[3,"DepthStencilFlags","","Depth-stencil read-only flags",null,null],[3,"DepthStencilDesc","","Texture depth-stencil view descriptor.",null,null],[12,"level","","",153,null],[12,"layer","","",153,null],[12,"flags","","",153,null],[4,"CreationError","","Pure texture object creation error.",null,null],[13,"Format","","Failed to map a given format to the device.",154,null],[13,"Kind","","The kind doesn't support a particular operation.",154,null],[13,"Samples","","Failed to map a given multisampled kind to the device.",154,null],[13,"Size","","Unsupported size in one of the dimensions.",154,null],[13,"Data","","The given data has a different size than the target texture slice.",154,null],[13,"Usage","","The mentioned usage mode is not supported",154,null],[13,"Mipmap","","The requested mipmap creation parameter is unsupported.",154,null],[13,"Level","","The requested mipmap level count does not match the provided data.",154,null],[4,"LayerError","","An error associated with selected texture layer.",null,null],[13,"NotExpected","","The source texture kind doesn't support array slices.",155,null],[13,"OutOfBounds","","Selected layer is outside of the provided range.",155,null],[4,"AaMode","","Describes the configuration of samples inside each texel.",null,null],[13,"Single","","No additional sample information",156,null],[13,"Multi","","MultiSampled Anti-Aliasing (MSAA)",156,null],[13,"Coverage","","Coverage Sampling Anti-Aliasing (CSAA/EQAA)",156,null],[4,"FilterMethod","","How to filter the texture when sampling. They correspond to increasing levels of quality, but also cost. They \"layer\" on top of each other: it is not possible to have bilinear filtering without mipmapping, for example.",null,null],[13,"Scale","","The dumbest filtering possible, nearest-neighbor interpolation.",157,null],[13,"Mipmap","","Add simple mipmapping.",157,null],[13,"Bilinear","","Sample multiple texels within a single mipmap level to increase quality.",157,null],[13,"Trilinear","","Sample multiple texels across two mipmap levels to increase quality.",157,null],[13,"Anisotropic","","Anisotropic filtering with a given \"max\", must be between 1 and 16, inclusive.",157,null],[4,"CubeFace","","The face of a cube texture to do an operation on.",null,null],[13,"PosX","","",158,null],[13,"NegX","","",158,null],[13,"PosY","","",158,null],[13,"NegY","","",158,null],[13,"PosZ","","",158,null],[13,"NegZ","","",158,null],[4,"Kind","","Specifies the kind of a texture storage to be allocated.",null,null],[13,"D1","","A single row of texels.",159,null],[13,"D1Array","","An array of rows of texels. Equivalent to Texture2D except that texels in a different row are not sampled.",159,null],[13,"D2","","A traditional 2D texture, with rows arranged contiguously.",159,null],[13,"D2Array","","An array of 2D textures. Equivalent to Texture3D except that texels in a different depth level are not sampled.",159,null],[13,"D3","","A volume texture, with each 2D layer arranged contiguously.",159,null],[13,"Cube","","A set of 6 2D textures, one for each face of a cube.",159,null],[13,"CubeArray","","An array of Cube textures.",159,null],[4,"Mipmap","","The marker for the texture initializer to generate extra space for the mipmap generation.",null,null],[13,"Provided","","The mipmap data is provided as a part of bitmap data.",160,null],[13,"Allocated","","The mipmap data is not provided, but the memory for it should be allocated for the later generation/",160,null],[4,"WrapMode","","Specifies how texture coordinates outside the range `[0, 1]` are handled.",null,null],[13,"Tile","","Tile the texture. That is, sample the coordinate modulo `1.0`. This is the default.",161,null],[13,"Mirror","","Mirror the texture. Like tile, but uses abs(coord) before the modulo.",161,null],[13,"Clamp","","Clamp the texture to the value at `0.0` or `1.0` respectively.",161,null],[13,"Border","","Use border color.",161,null],[6,"Size","","Dimension size",null,null],[6,"Bits","","Number of bits per component",null,null],[6,"NumSamples","","Number of MSAA samples",null,null],[6,"NumFragments","","Number of EQAA fragments",null,null],[6,"Dimensions","","Dimensions: width, height, depth, and samples.",null,null],[6,"RawImageInfo","","New raw image info based on the universal format spec.",null,null],[6,"NewImageInfo","","New image info based on the universal format spec. The format is suppsed to come from compile-time information as opposed to run-time enum values.",null,null],[17,"MAX_LEVEL","","Maximum accessible mipmap level of a texture.",null,null],[17,"CUBE_FACES","","A constant array of cube faces in the order they map to the hardware.",null,null],[11,"fmt","","",162,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_info","","Get texture descriptor",162,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"eq","","",162,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",162,{"i":[{"n":"self"},{"n":"h"}]}],[11,"clone","","",154,{"i":[{"n":"self"}],"o":{"n":"creationerror"}}],[11,"fmt","","",154,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",154,{"i":[{"n":"self"},{"n":"creationerror"}],"o":{"n":"bool"}}],[11,"ne","","",154,{"i":[{"n":"self"},{"n":"creationerror"}],"o":{"n":"bool"}}],[11,"fmt","","",154,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",154,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",155,{"i":[{"n":"self"}],"o":{"n":"layererror"}}],[11,"fmt","","",155,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",155,null],[11,"eq","","",155,{"i":[{"n":"self"},{"n":"layererror"}],"o":{"n":"bool"}}],[11,"ne","","",155,{"i":[{"n":"self"},{"n":"layererror"}],"o":{"n":"bool"}}],[11,"fmt","","",155,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",155,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",156,{"i":[{"n":"self"}],"o":{"n":"aamode"}}],[11,"fmt","","",156,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",156,null],[11,"cmp","","",156,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"n":"ordering"}}],[11,"eq","","",156,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"n":"bool"}}],[11,"ne","","",156,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",156,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",156,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"n":"bool"}}],[11,"le","","",156,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"n":"bool"}}],[11,"gt","","",156,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"n":"bool"}}],[11,"ge","","",156,{"i":[{"n":"self"},{"n":"aamode"}],"o":{"n":"bool"}}],[11,"from","","",156,{"i":[{"n":"numsamples"}],"o":{"n":"aamode"}}],[11,"get_num_fragments","","Return the number of actual data fragments stored per texel.",156,{"i":[{"n":"self"}],"o":{"n":"numfragments"}}],[11,"needs_resolve","","Return true if the surface has to be resolved before sampling.",156,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",157,{"i":[{"n":"self"}],"o":{"n":"filtermethod"}}],[11,"fmt","","",157,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",157,null],[11,"cmp","","",157,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"n":"ordering"}}],[11,"eq","","",157,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"n":"bool"}}],[11,"ne","","",157,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",157,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",157,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"n":"bool"}}],[11,"le","","",157,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"n":"bool"}}],[11,"gt","","",157,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"n":"bool"}}],[11,"ge","","",157,{"i":[{"n":"self"},{"n":"filtermethod"}],"o":{"n":"bool"}}],[11,"clone","","",158,{"i":[{"n":"self"}],"o":{"n":"cubeface"}}],[11,"fmt","","",158,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",158,null],[11,"cmp","","",158,{"i":[{"n":"self"},{"n":"cubeface"}],"o":{"n":"ordering"}}],[11,"eq","","",158,{"i":[{"n":"self"},{"n":"cubeface"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",158,{"i":[{"n":"self"},{"n":"cubeface"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",159,{"i":[{"n":"self"}],"o":{"n":"kind"}}],[11,"fmt","","",159,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",159,null],[11,"cmp","","",159,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"ordering"}}],[11,"eq","","",159,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"bool"}}],[11,"ne","","",159,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",159,{"i":[{"n":"self"},{"n":"kind"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",159,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"bool"}}],[11,"le","","",159,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"bool"}}],[11,"gt","","",159,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"bool"}}],[11,"ge","","",159,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"bool"}}],[11,"get_dimensions","","Get texture dimensions, with 0 values where not applicable.",159,{"i":[{"n":"self"}],"o":{"n":"dimensions"}}],[11,"get_level_dimensions","","Get the dimensionality of a particular mipmap level.",159,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"dimensions"}}],[11,"get_num_levels","","Count the number of mipmap levels.",159,{"i":[{"n":"self"}],"o":{"n":"level"}}],[11,"get_num_slices","","Return the number of slices for an array, or None for non-arrays.",159,{"i":[{"n":"self"}],"o":{"g":["layer"],"n":"option"}}],[11,"is_cube","","Check if it's one of the cube kinds.",159,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",160,{"i":[{"n":"self"}],"o":{"n":"mipmap"}}],[11,"fmt","","",160,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",160,null],[11,"cmp","","",160,{"i":[{"n":"self"},{"n":"mipmap"}],"o":{"n":"ordering"}}],[11,"eq","","",160,{"i":[{"n":"self"},{"n":"mipmap"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",160,{"i":[{"n":"self"},{"n":"mipmap"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",146,{"i":[{"n":"self"}],"o":{"n":"imageinfocommon"}}],[11,"fmt","","",146,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",146,null],[11,"cmp","","",146,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"n":"ordering"}}],[11,"eq","","",146,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"n":"bool"}}],[11,"ne","","",146,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",146,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",146,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"n":"bool"}}],[11,"le","","",146,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"n":"bool"}}],[11,"gt","","",146,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"n":"bool"}}],[11,"ge","","",146,{"i":[{"n":"self"},{"n":"imageinfocommon"}],"o":{"n":"bool"}}],[11,"get_texel_count","","Get the total number of texels.",146,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"convert","","Convert into a differently typed format.",146,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"imageinfocommon"}}],[11,"is_inside","","Check if it fits inside given dimensions.",146,{"i":[{"n":"self"},{"n":"dimensions"}],"o":{"n":"bool"}}],[11,"get_byte_count","","Get the total number of bytes.",163,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",147,{"i":[{"n":"self"}],"o":{"n":"texturecopyregion"}}],[11,"fmt","","",147,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",147,null],[11,"cmp","","",147,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"n":"ordering"}}],[11,"eq","","",147,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"n":"bool"}}],[11,"ne","","",147,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",147,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",147,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"n":"bool"}}],[11,"le","","",147,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"n":"bool"}}],[11,"gt","","",147,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"n":"bool"}}],[11,"ge","","",147,{"i":[{"n":"self"},{"n":"texturecopyregion"}],"o":{"n":"bool"}}],[11,"with_texture","","Change the texture",147,{"i":[{"n":"self"},{"n":"u"}],"o":{"n":"texturecopyregion"}}],[11,"clone","","",161,{"i":[{"n":"self"}],"o":{"n":"wrapmode"}}],[11,"fmt","","",161,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",161,null],[11,"cmp","","",161,{"i":[{"n":"self"},{"n":"wrapmode"}],"o":{"n":"ordering"}}],[11,"eq","","",161,{"i":[{"n":"self"},{"n":"wrapmode"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",161,{"i":[{"n":"self"},{"n":"wrapmode"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",164,{"i":[{"n":"self"}],"o":{"n":"lod"}}],[11,"fmt","","",164,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",164,null],[11,"eq","","",164,{"i":[{"n":"self"},{"n":"lod"}],"o":{"n":"bool"}}],[11,"ne","","",164,{"i":[{"n":"self"},{"n":"lod"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",164,{"i":[{"n":"self"},{"n":"lod"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",164,{"i":[{"n":"self"},{"n":"lod"}],"o":{"n":"bool"}}],[11,"le","","",164,{"i":[{"n":"self"},{"n":"lod"}],"o":{"n":"bool"}}],[11,"gt","","",164,{"i":[{"n":"self"},{"n":"lod"}],"o":{"n":"bool"}}],[11,"ge","","",164,{"i":[{"n":"self"},{"n":"lod"}],"o":{"n":"bool"}}],[11,"from","","",164,{"i":[{"n":"f32"}],"o":{"n":"lod"}}],[11,"into","","",164,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"clone","","",148,{"i":[{"n":"self"}],"o":{"n":"packedcolor"}}],[11,"fmt","","",148,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",148,null],[11,"eq","","",148,{"i":[{"n":"self"},{"n":"packedcolor"}],"o":{"n":"bool"}}],[11,"ne","","",148,{"i":[{"n":"self"},{"n":"packedcolor"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",148,{"i":[{"n":"self"},{"n":"packedcolor"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",148,{"i":[{"n":"self"},{"n":"packedcolor"}],"o":{"n":"bool"}}],[11,"le","","",148,{"i":[{"n":"self"},{"n":"packedcolor"}],"o":{"n":"bool"}}],[11,"gt","","",148,{"i":[{"n":"self"},{"n":"packedcolor"}],"o":{"n":"bool"}}],[11,"ge","","",148,{"i":[{"n":"self"},{"n":"packedcolor"}],"o":{"n":"bool"}}],[11,"from","","",148,null],[11,"into","","",148,null],[11,"clone","","",149,{"i":[{"n":"self"}],"o":{"n":"samplerinfo"}}],[11,"fmt","","",149,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",149,null],[11,"eq","","",149,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"bool"}}],[11,"ne","","",149,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",149,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",149,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"bool"}}],[11,"le","","",149,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"bool"}}],[11,"gt","","",149,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"bool"}}],[11,"ge","","",149,{"i":[{"n":"self"},{"n":"samplerinfo"}],"o":{"n":"bool"}}],[11,"new","","Create a new sampler description with a given filter method and wrapping mode, using no LOD modifications.",149,{"i":[{"n":"filtermethod"},{"n":"wrapmode"}],"o":{"n":"samplerinfo"}}],[11,"clone","","",150,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"fmt","","",150,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",150,null],[11,"cmp","","",150,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"ordering"}}],[11,"eq","","",150,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"ne","","",150,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",150,{"i":[{"n":"self"},{"n":"info"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",150,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"le","","",150,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"gt","","",150,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"ge","","",150,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"to_image_info","","Get image info for a given mip.",150,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"newimageinfo"}}],[11,"to_raw_image_info","","Get the raw image info for a given mip and a channel type.",150,{"i":[{"n":"self"},{"n":"channeltype"},{"n":"level"}],"o":{"n":"rawimageinfo"}}],[11,"clone","","",151,{"i":[{"n":"self"}],"o":{"n":"resourcedesc"}}],[11,"fmt","","",151,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",151,null],[11,"cmp","","",151,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"n":"ordering"}}],[11,"eq","","",151,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"n":"bool"}}],[11,"ne","","",151,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",151,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",151,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"n":"bool"}}],[11,"le","","",151,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"n":"bool"}}],[11,"gt","","",151,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"n":"bool"}}],[11,"ge","","",151,{"i":[{"n":"self"},{"n":"resourcedesc"}],"o":{"n":"bool"}}],[11,"clone","","",152,{"i":[{"n":"self"}],"o":{"n":"renderdesc"}}],[11,"fmt","","",152,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",152,null],[11,"cmp","","",152,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"n":"ordering"}}],[11,"eq","","",152,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"n":"bool"}}],[11,"ne","","",152,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",152,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",152,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"n":"bool"}}],[11,"le","","",152,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"n":"bool"}}],[11,"gt","","",152,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"n":"bool"}}],[11,"ge","","",152,{"i":[{"n":"self"},{"n":"renderdesc"}],"o":{"n":"bool"}}],[11,"eq","","",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"ne","","",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"clone","","",165,{"i":[{"n":"self"}],"o":{"n":"depthstencilflags"}}],[11,"partial_cmp","","",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"le","","",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"gt","","",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"ge","","",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"cmp","","",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"ordering"}}],[11,"hash","","",165,null],[11,"fmt","","",165,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",165,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",165,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",165,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",165,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"RO_DEPTH","","Depth is read-only in the view.",165,null],[18,"RO_STENCIL","","Stencil is read-only in the view.",165,null],[18,"RO_DEPTH_STENCIL","","Both depth and stencil are read-only.",165,null],[11,"empty","","Returns an empty set of flags.",165,{"o":{"n":"depthstencilflags"}}],[11,"all","","Returns the set containing all flags.",165,{"o":{"n":"depthstencilflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",165,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",165,{"i":[{"n":"u8"}],"o":{"g":["depthstencilflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",165,{"i":[{"n":"u8"}],"o":{"n":"depthstencilflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",165,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",165,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}]}],[11,"remove","","Removes the specified flags in-place.",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",165,{"i":[{"n":"self"},{"n":"depthstencilflags"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"depthstencilflags"}}],[11,"bitor_assign","","Adds the set of flags.",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"depthstencilflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"depthstencilflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}],"o":{"n":"depthstencilflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",165,{"i":[{"n":"self"},{"n":"depthstencilflags"}]}],[11,"not","","Returns the complement of this set of flags.",165,{"i":[{"n":"self"}],"o":{"n":"depthstencilflags"}}],[11,"extend","","",165,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",165,{"i":[{"n":"t"}],"o":{"n":"depthstencilflags"}}],[11,"clone","","",153,{"i":[{"n":"self"}],"o":{"n":"depthstencildesc"}}],[11,"fmt","","",153,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",153,null],[11,"cmp","","",153,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"n":"ordering"}}],[11,"eq","","",153,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"n":"bool"}}],[11,"ne","","",153,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",153,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",153,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"n":"bool"}}],[11,"le","","",153,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"n":"bool"}}],[11,"gt","","",153,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"n":"bool"}}],[11,"ge","","",153,{"i":[{"n":"self"},{"n":"depthstencildesc"}],"o":{"n":"bool"}}],[11,"from","","",153,{"i":[{"n":"renderdesc"}],"o":{"n":"depthstencildesc"}}],[6,"VertexCount","gfx_core","Draw vertex count.",null,null],[6,"InstanceCount","","Draw number of instances",null,null],[6,"PatchSize","","Number of vertices in a patch",null,null],[6,"AttributeSlot","","Slot for an attribute.",null,null],[6,"ConstantBufferSlot","","Slot for a constant buffer object.",null,null],[6,"ResourceViewSlot","","Slot for a shader resource view.",null,null],[6,"UnorderedViewSlot","","Slot for an unordered access object.",null,null],[6,"ColorSlot","","Slot for an active color buffer.",null,null],[6,"SamplerSlot","","Slot for a sampler.",null,null],[6,"SubmissionResult","","",null,null],[17,"MAX_VERTEX_ATTRIBUTES","","Compile-time maximum number of vertex attributes.",null,null],[17,"MAX_COLOR_TARGETS","","Compile-time maximum number of color targets.",null,null],[17,"MAX_CONSTANT_BUFFERS","","Compile-time maximum number of constant buffers.",null,null],[17,"MAX_RESOURCE_VIEWS","","Compile-time maximum number of shader resource views (SRV).",null,null],[17,"MAX_UNORDERED_VIEWS","","Compile-time maximum number of unordered access views (UAV).",null,null],[17,"MAX_SAMPLERS","","Compile-time maximum number of samplers.",null,null],[8,"Resources","","Different types of a specific API.",null,null],[16,"Buffer","","",166,null],[16,"Shader","","",166,null],[16,"Program","","",166,null],[16,"PipelineStateObject","","",166,null],[16,"Texture","","",166,null],[16,"ShaderResourceView","","",166,null],[16,"UnorderedAccessView","","",166,null],[16,"RenderTargetView","","",166,null],[16,"DepthStencilView","","",166,null],[16,"Sampler","","",166,null],[16,"Fence","","",166,null],[16,"Mapping","","",166,null],[8,"Device","","A `Device` is responsible for submitting `CommandBuffer`s to the GPU.",null,null],[16,"Resources","","Associated `Resources` type.",167,null],[16,"CommandBuffer","","Associated `CommandBuffer` type. Every `Device` type can only work with one `CommandBuffer` type.",167,null],[10,"get_capabilities","","Returns the capabilities of this `Device`.",167,{"i":[{"n":"self"}],"o":{"n":"capabilities"}}],[10,"pin_submitted_resources","","Pin everything from this handle manager to live for a frame.",167,{"i":[{"n":"self"},{"n":"manager"}]}],[10,"submit","","Submits a `CommandBuffer` to the GPU for execution.",167,null],[10,"fenced_submit","","Submits a `CommandBuffer` to the GPU for execution. returns a fence that is signaled after the GPU has executed all commands",167,null],[10,"wait_fence","","Stalls the current thread until the fence is satisfied",167,{"i":[{"n":"self"},{"n":"fence"}]}],[10,"cleanup","","Cleanup unused resources. This should be called between frames.",167,{"i":[{"n":"self"}]}],[8,"Adapter","","Represents a physical or virtual device, which is capable of running the backend.",null,null],[16,"CommandQueue","","Associated `CommandQueue` type.",168,null],[16,"Device","","Associated `Device` type.",168,null],[16,"QueueFamily","","Associated `QueueFamily` type.",168,null],[10,"enumerate_adapters","","Enumerate all available adapters supporting this backend",168,{"o":{"n":"vec"}}],[10,"open","","Create a new device and command queues.",168,null],[10,"get_info","","Get the `AdapterInfo` for this adapater.",168,{"i":[{"n":"self"}],"o":{"n":"adapterinfo"}}],[10,"get_queue_families","","Return the supported queue families for this adapter.",168,null],[8,"QueueFamily","","`QueueFamily` denotes a group of command queues provided by the backend with the same properties/type.",null,null],[16,"Surface","","Associated `Surface` type.",169,null],[10,"supports_present","","Check if the queue family supports presentation to a surface",169,null],[10,"num_queues","","Return the number of available queues of this family",169,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[8,"CommandQueue","","Dummy trait for command queues. CommandBuffers will be later submitted to command queues instead of the device.",null,null],[8,"Surface","","A `Surface` abstracts the surface of a native window, which will be presented",null,null],[16,"CommandQueue","","Associated `CommandQueue` type.",170,null],[16,"SwapChain","","Associated `SwapChain` type.",170,null],[16,"Window","","Associated native `Window` type.",170,null],[10,"from_window","","Create a new surface from a native window.",170,null],[10,"build_swapchain","","Create a new swapchain from the current surface with an associated present queue.",170,null],[8,"SwapChain","","The `SwapChain` is the backend representation of the surface. It consists of multiple buffers, which will be presented on the surface.",null,null],[10,"acquire_frame","","Acquire a new frame for rendering. This needs to be called before presenting.",171,{"i":[{"n":"self"}],"o":{"n":"frame"}}],[10,"present","","Present one acquired frame in FIFO order.",171,{"i":[{"n":"self"}]}],[11,"clone","","",172,{"i":[{"n":"self"}],"o":{"n":"vertexshader"}}],[11,"fmt","","",172,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",172,null],[11,"eq","","",172,{"i":[{"n":"self"},{"n":"vertexshader"}],"o":{"n":"bool"}}],[11,"ne","","",172,{"i":[{"n":"self"},{"n":"vertexshader"}],"o":{"n":"bool"}}],[11,"reference","","",172,null],[11,"clone","","",173,{"i":[{"n":"self"}],"o":{"n":"hullshader"}}],[11,"fmt","","",173,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",173,null],[11,"eq","","",173,{"i":[{"n":"self"},{"n":"hullshader"}],"o":{"n":"bool"}}],[11,"ne","","",173,{"i":[{"n":"self"},{"n":"hullshader"}],"o":{"n":"bool"}}],[11,"reference","","",173,null],[11,"clone","","",174,{"i":[{"n":"self"}],"o":{"n":"domainshader"}}],[11,"fmt","","",174,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",174,null],[11,"eq","","",174,{"i":[{"n":"self"},{"n":"domainshader"}],"o":{"n":"bool"}}],[11,"ne","","",174,{"i":[{"n":"self"},{"n":"domainshader"}],"o":{"n":"bool"}}],[11,"reference","","",174,null],[11,"clone","","",175,{"i":[{"n":"self"}],"o":{"n":"geometryshader"}}],[11,"fmt","","",175,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",175,null],[11,"eq","","",175,{"i":[{"n":"self"},{"n":"geometryshader"}],"o":{"n":"bool"}}],[11,"ne","","",175,{"i":[{"n":"self"},{"n":"geometryshader"}],"o":{"n":"bool"}}],[11,"reference","","",175,null],[11,"clone","","",176,{"i":[{"n":"self"}],"o":{"n":"pixelshader"}}],[11,"fmt","","",176,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",176,null],[11,"eq","","",176,{"i":[{"n":"self"},{"n":"pixelshader"}],"o":{"n":"bool"}}],[11,"ne","","",176,{"i":[{"n":"self"},{"n":"pixelshader"}],"o":{"n":"bool"}}],[11,"reference","","",176,null],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"shaderset"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",20,null],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"shaderset"}],"o":{"n":"bool"}}],[11,"ne","","",20,{"i":[{"n":"self"},{"n":"shaderset"}],"o":{"n":"bool"}}],[11,"get_usage","","Return the aggregated stage usage for the set.",20,{"i":[{"n":"self"}],"o":{"n":"usage"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"capabilities"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"capabilities"}],"o":{"n":"bool"}}],[11,"ne","","",18,{"i":[{"n":"self"},{"n":"capabilities"}],"o":{"n":"bool"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"primitive"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",21,null],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"primitive"}],"o":{"n":"bool"}}],[11,"ne","","",21,{"i":[{"n":"self"},{"n":"primitive"}],"o":{"n":"bool"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"indextype"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",22,null],[11,"cmp","","",22,{"i":[{"n":"self"},{"n":"indextype"}],"o":{"n":"ordering"}}],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"indextype"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",22,{"i":[{"n":"self"},{"n":"indextype"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"submissionerror"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",23,{"i":[{"n":"self"},{"n":"submissionerror"}],"o":{"n":"bool"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",23,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"adapterinfo"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"adapterinfo"}],"o":{"n":"bool"}}],[11,"ne","","",19,{"i":[{"n":"self"},{"n":"adapterinfo"}],"o":{"n":"bool"}}],[11,"clone","","",177,{"i":[{"n":"self"}],"o":{"n":"frame"}}],[11,"fmt","","",177,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"bitxor","gfx_core::state","Returns the left flags, but with all the right flags toggled.",178,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"colormask"}}],[11,"bitxor","gfx_core::target","Returns the left flags, but with all the right flags toggled.",179,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"mirror"}}],[11,"fmt","gfx_core::state","",178,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx_core::target","",179,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"cmp","gfx_core::state","",5,{"i":[{"n":"self"},{"n":"comparison"}],"o":{"n":"ordering"}}],[11,"cmp","gfx_core::target","",179,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"ordering"}}],[11,"cmp","gfx_core::state","",6,{"i":[{"n":"self"},{"n":"stencilop"}],"o":{"n":"ordering"}}],[11,"cmp","","",11,{"i":[{"n":"self"},{"n":"blendvalue"}],"o":{"n":"ordering"}}],[11,"cmp","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"ordering"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"frontface"}],"o":{"n":"ordering"}}],[11,"cmp","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"ordering"}}],[11,"cmp","","",2,{"i":[{"n":"self"},{"n":"cullface"}],"o":{"n":"ordering"}}],[11,"cmp","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"ordering"}}],[11,"cmp","","",180,{"i":[{"n":"self"},{"n":"multisample"}],"o":{"n":"ordering"}}],[11,"cmp","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"ordering"}}],[11,"cmp","","",10,{"i":[{"n":"self"},{"n":"equation"}],"o":{"n":"ordering"}}],[11,"cmp","","",178,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"ordering"}}],[11,"cmp","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",16,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",16,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"le","","",16,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"gt","","",16,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"ge","","",16,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",5,{"i":[{"n":"self"},{"n":"comparison"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","gfx_core::target","",17,{"i":[{"n":"self"},{"n":"rect"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",17,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"le","","",17,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"gt","","",17,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"ge","","",17,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx_core::state","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"le","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"gt","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"ge","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",10,{"i":[{"n":"self"},{"n":"equation"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",6,{"i":[{"n":"self"},{"n":"stencilop"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",178,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",178,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"le","","",178,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"gt","","",178,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"ge","","",178,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"cullface"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",11,{"i":[{"n":"self"},{"n":"blendvalue"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",3,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",3,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"le","","",3,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"gt","","",3,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"ge","","",3,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"le","","",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"gt","","",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"ge","","",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"frontface"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",4,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"le","","",4,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"gt","","",4,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"ge","","",4,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",180,{"i":[{"n":"self"},{"n":"multisample"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"le","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"gt","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"ge","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"le","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"gt","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"ge","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"le","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"gt","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"ge","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"le","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"gt","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"ge","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"offset"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",1,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"le","","",1,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"gt","","",1,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"ge","","",1,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx_core::target","",179,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",179,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"le","","",179,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"gt","","",179,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"ge","","",179,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"partial_cmp","gfx_core::state","",14,{"i":[{"n":"self"},{"n":"blend"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",14,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"le","","",14,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"gt","","",14,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"ge","","",14,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"bitxor_assign","","Toggles the set of flags.",178,null],[11,"bitxor_assign","gfx_core::target","Toggles the set of flags.",179,null],[11,"not","","Returns the complement of this set of flags.",179,{"i":[{"n":"self"}],"o":{"n":"mirror"}}],[11,"not","gfx_core::state","Returns the complement of this set of flags.",178,{"i":[{"n":"self"}],"o":{"n":"colormask"}}],[11,"bitor_assign","","Adds the set of flags.",178,null],[11,"bitor_assign","gfx_core::target","Adds the set of flags.",179,null],[11,"from_iter","","",179,{"i":[{"n":"t"}],"o":{"n":"mirror"}}],[11,"from_iter","gfx_core::state","",178,{"i":[{"n":"t"}],"o":{"n":"colormask"}}],[11,"default","","",15,{"o":{"n":"color"}}],[11,"default","","",14,{"o":{"n":"blend"}}],[11,"default","","",7,{"o":{"n":"stencilside"}}],[11,"default","","",13,{"o":{"n":"blendchannel"}}],[11,"default","","",9,{"o":{"n":"depth"}}],[11,"default","","",8,{"o":{"n":"stencil"}}],[11,"default","","",16,{"o":{"n":"refvalues"}}],[11,"sub_assign","","Disables all flags enabled in the set.",178,null],[11,"sub_assign","gfx_core::target","Disables all flags enabled in the set.",179,null],[11,"bitand","gfx_core::state","Returns the intersection between the two sets of flags.",178,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"colormask"}}],[11,"bitand","gfx_core::target","Returns the intersection between the two sets of flags.",179,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"mirror"}}],[11,"fmt","gfx_core::state","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx_core::target","",179,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx_core::state","",178,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx_core::target","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx_core::state","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",180,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx_core::target","",179,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx_core::state","",178,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",178,null],[11,"bitand_assign","gfx_core::target","Disables all flags disabled in the set.",179,null],[11,"eq","gfx_core::state","",14,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"ne","","",14,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"ne","","",12,{"i":[{"n":"self"},{"n":"factor"}],"o":{"n":"bool"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"eq","gfx_core::target","",17,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"ne","","",17,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"eq","gfx_core::state","",178,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"ne","","",178,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"frontface"}],"o":{"n":"bool"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"rasterizer"}],"o":{"n":"bool"}}],[11,"eq","","",180,{"i":[{"n":"self"},{"n":"multisample"}],"o":{"n":"bool"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"rastermethod"}],"o":{"n":"bool"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"ne","","",13,{"i":[{"n":"self"},{"n":"blendchannel"}],"o":{"n":"bool"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"ne","","",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"stencilop"}],"o":{"n":"bool"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"equation"}],"o":{"n":"bool"}}],[11,"eq","gfx_core::target","",179,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"ne","","",179,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"eq","gfx_core::state","",1,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"offset"}],"o":{"n":"bool"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"stencilside"}],"o":{"n":"bool"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"comparison"}],"o":{"n":"bool"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"cullface"}],"o":{"n":"bool"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"blendvalue"}],"o":{"n":"bool"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"ne","","",16,{"i":[{"n":"self"},{"n":"refvalues"}],"o":{"n":"bool"}}],[11,"extend","","",178,null],[11,"extend","gfx_core::target","",179,null],[11,"bitor","gfx_core::state","Returns the union of the two sets of flags.",178,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"colormask"}}],[11,"bitor","gfx_core::target","Returns the union of the two sets of flags.",179,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"mirror"}}],[11,"fmt","gfx_core::state","",178,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx_core::target","",179,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"sub","gfx_core::state","Returns the set difference of the two sets of flags.",178,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"colormask"}}],[11,"sub","gfx_core::target","Returns the set difference of the two sets of flags.",179,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"mirror"}}],[11,"clone","gfx_core::state","",15,{"i":[{"n":"self"}],"o":{"n":"color"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"cullface"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"comparison"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"blendchannel"}}],[11,"clone","gfx_core::target","",179,{"i":[{"n":"self"}],"o":{"n":"mirror"}}],[11,"clone","gfx_core::state","",4,{"i":[{"n":"self"}],"o":{"n":"rasterizer"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"stencilside"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"offset"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"refvalues"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"factor"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"frontface"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"stencil"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"equation"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"depth"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"blend"}}],[11,"clone","gfx_core::target","",17,{"i":[{"n":"self"}],"o":{"n":"rect"}}],[11,"clone","gfx_core::state","",11,{"i":[{"n":"self"}],"o":{"n":"blendvalue"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"stencilop"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"rastermethod"}}],[11,"clone","","",178,{"i":[{"n":"self"}],"o":{"n":"colormask"}}],[11,"clone","","",180,{"i":[{"n":"self"}],"o":{"n":"multisample"}}],[11,"fmt","gfx_core::target","",179,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","gfx_core::state","",178,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"hash","","",7,null],[11,"hash","","",15,null],[11,"hash","","",11,null],[11,"hash","","",3,null],[11,"hash","","",9,null],[11,"hash","","",178,null],[11,"hash","","",4,null],[11,"hash","","",1,null],[11,"hash","","",10,null],[11,"hash","","",0,null],[11,"hash","","",180,null],[11,"hash","","",8,null],[11,"hash","","",12,null],[11,"hash","","",2,null],[11,"hash","","",14,null],[11,"hash","gfx_core::target","",179,null],[11,"hash","gfx_core::state","",13,null],[11,"hash","","",5,null],[11,"hash","","",6,null],[11,"hash","gfx_core::target","",17,null],[11,"new_fill","gfx_core::state","Create a new filling rasterizer.",4,{"o":{"n":"rasterizer"}}],[11,"with_cull_back","","Add back face culling.",4,{"i":[{"n":"self"}],"o":{"n":"rasterizer"}}],[11,"with_offset","","Add polygon offset.",4,{"i":[{"n":"self"},{"n":"f32"},{"n":"i32"}],"o":{"n":"rasterizer"}}],[11,"new","","Create a new stencil state with a given function.",8,null],[11,"new","","Create a new blend state with a given equation.",14,{"i":[{"n":"equation"},{"n":"factor"},{"n":"factor"}],"o":{"n":"blend"}}],[18,"RED","","",178,null],[18,"GREEN","","",178,null],[18,"BLUE","","",178,null],[18,"ALPHA","","",178,null],[11,"empty","","Returns an empty set of flags.",178,{"o":{"n":"colormask"}}],[11,"all","","Returns the set containing all flags.",178,{"o":{"n":"colormask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",178,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",178,{"i":[{"n":"u8"}],"o":{"g":["colormask"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",178,{"i":[{"n":"u8"}],"o":{"n":"colormask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",178,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",178,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",178,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",178,{"i":[{"n":"self"},{"n":"colormask"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",178,null],[11,"remove","","Removes the specified flags in-place.",178,null],[11,"toggle","","Toggles the specified flags in-place.",178,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",178,null],[18,"X","gfx_core::target","",179,null],[18,"Y","","",179,null],[11,"empty","","Returns an empty set of flags.",179,{"o":{"n":"mirror"}}],[11,"all","","Returns the set containing all flags.",179,{"o":{"n":"mirror"}}],[11,"bits","","Returns the raw value of the flags currently stored.",179,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",179,{"i":[{"n":"u8"}],"o":{"g":["mirror"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",179,{"i":[{"n":"u8"}],"o":{"n":"mirror"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",179,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",179,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",179,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",179,{"i":[{"n":"self"},{"n":"mirror"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",179,null],[11,"remove","","Removes the specified flags in-place.",179,null],[11,"toggle","","Toggles the specified flags in-place.",179,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",179,null]],"paths":[[4,"FrontFace"],[3,"Offset"],[4,"CullFace"],[4,"RasterMethod"],[3,"Rasterizer"],[4,"Comparison"],[4,"StencilOp"],[3,"StencilSide"],[3,"Stencil"],[3,"Depth"],[4,"Equation"],[4,"BlendValue"],[4,"Factor"],[3,"BlendChannel"],[3,"Blend"],[3,"Color"],[3,"RefValues"],[3,"Rect"],[3,"Capabilities"],[3,"AdapterInfo"],[4,"ShaderSet"],[4,"Primitive"],[4,"IndexType"],[4,"SubmissionError"],[3,"Info"],[4,"Role"],[4,"CreationError"],[3,"Raw"],[4,"ClearColor"],[8,"Buffer"],[3,"AccessInfo"],[3,"AccessGuard"],[3,"AccessGuardBuffers"],[3,"AccessGuardBuffersChain"],[4,"DummyResources"],[3,"DummyFence"],[3,"DummyMapping"],[3,"DummyDevice"],[3,"DummyCommandBuffer"],[4,"ResourceViewError"],[4,"TargetViewError"],[4,"CombinedError"],[8,"Factory"],[3,"Swizzle"],[3,"Format"],[3,"U8Norm"],[3,"I8Norm"],[3,"U16Norm"],[3,"I16Norm"],[3,"F16"],[4,"ChannelType"],[4,"SurfaceType"],[4,"ChannelSource"],[8,"SurfaceTyped"],[8,"ChannelTyped"],[8,"Formatted"],[4,"Int"],[4,"Uint"],[4,"Inorm"],[4,"Unorm"],[4,"Float"],[4,"Srgb"],[4,"R4_G4"],[4,"R4_G4_B4_A4"],[4,"R5_G5_B5_A1"],[4,"R5_G6_B5"],[4,"R8"],[4,"R8_G8"],[4,"R8_G8_B8_A8"],[4,"R10_G10_B10_A2"],[4,"R11_G11_B10"],[4,"R16"],[4,"R16_G16"],[4,"R16_G16_B16"],[4,"R16_G16_B16_A16"],[4,"R32"],[4,"R32_G32"],[4,"R32_G32_B32"],[4,"R32_G32_B32_A32"],[4,"B8_G8_R8_A8"],[4,"D16"],[4,"D24"],[4,"D24_S8"],[4,"D32"],[3,"RawBuffer"],[3,"Buffer"],[3,"Shader"],[3,"Program"],[3,"RawPipelineState"],[3,"RawTexture"],[3,"Texture"],[3,"RawShaderResourceView"],[3,"ShaderResourceView"],[3,"RawUnorderedAccessView"],[3,"UnorderedAccessView"],[3,"RawRenderTargetView"],[3,"RawDepthStencilView"],[3,"RenderTargetView"],[3,"DepthStencilView"],[3,"Sampler"],[3,"Fence"],[3,"Manager"],[4,"Error"],[3,"Reader"],[3,"Writer"],[4,"Usage"],[3,"Access"],[3,"Bind"],[3,"ColorInfo"],[3,"DepthStencilInfo"],[3,"Element"],[3,"VertexBufferDesc"],[3,"Descriptor"],[3,"VertexBufferSet"],[3,"ConstantBufferParam"],[3,"ResourceViewParam"],[3,"UnorderedViewParam"],[3,"SamplerParam"],[3,"PixelTargetSet"],[3,"CreationError"],[3,"SamplerType"],[3,"AttributeVar"],[3,"ConstVar"],[3,"ConstantBufferVar"],[3,"TextureVar"],[3,"UnorderedVar"],[3,"SamplerVar"],[3,"OutputVar"],[3,"ProgramInfo"],[4,"IsArray"],[4,"IsComparison"],[4,"IsMultiSample"],[4,"IsRect"],[4,"MatrixFormat"],[4,"TextureType"],[4,"BaseType"],[4,"ContainerType"],[4,"Stage"],[4,"UniformValue"],[4,"CompatibilityError"],[4,"CreateShaderError"],[8,"BaseTyped"],[8,"Formatted"],[3,"Usage"],[3,"Program"],[3,"CreateProgramError"],[3,"ImageInfoCommon"],[3,"TextureCopyRegion"],[3,"PackedColor"],[3,"SamplerInfo"],[3,"Info"],[3,"ResourceDesc"],[3,"RenderDesc"],[3,"DepthStencilDesc"],[4,"CreationError"],[4,"LayerError"],[4,"AaMode"],[4,"FilterMethod"],[4,"CubeFace"],[4,"Kind"],[4,"Mipmap"],[4,"WrapMode"],[3,"Raw"],[6,"RawImageInfo"],[3,"Lod"],[3,"DepthStencilFlags"],[8,"Resources"],[8,"Device"],[8,"Adapter"],[8,"QueueFamily"],[8,"Surface"],[8,"SwapChain"],[3,"VertexShader"],[3,"HullShader"],[3,"DomainShader"],[3,"GeometryShader"],[3,"PixelShader"],[3,"Frame"],[3,"ColorMask"],[3,"Mirror"],[3,"MultiSample"]]};
searchIndex["glium"] = {"doc":"Easy-to-use, high-level, OpenGL3+ wrapper.","items":[[0,"os","glium::glutin","Contains traits with platform-specific methods in them.",null,null],[0,"unix","glium::glutin::os","",null,null],[4,"RawHandle","glium::glutin::os::unix","Context handles available on Unix-like platforms.",null,null],[13,"Glx","","",0,null],[13,"Egl","","",0,null],[6,"EGLContext","","",null,null],[8,"EventsLoopExt","","Additional methods on `EventsLoop` that are specific to Linux.",null,null],[10,"new_x11","","Builds a new `EventsLoop` that is forced to use X11.",1,{"o":{"g":["xnotsupported"],"n":"result"}}],[10,"new_wayland","","Builds a new `EventsLoop` that is forced to use Wayland.",1,{"o":{"n":"self"}}],[10,"is_wayland","","True if the `EventsLoop` uses Wayland.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_x11","","True if the `EventsLoop` uses X11.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"WindowBuilderExt","","Additional methods on `WindowBuilder` that are specific to Unix.",null,null],[10,"with_x11_visual","","",2,null],[10,"with_x11_screen","","",2,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"windowbuilder"}}],[8,"MonitorIdExt","","Additional methods on `MonitorId` that are specific to Linux.",null,null],[10,"native_id","","Returns the inner identifier of the monitor.",3,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[4,"XNotSupported","","Error returned if this system doesn't have XLib or can't create an X connection.",null,null],[13,"LibraryOpenError","","Failed to load one or several shared libraries.",4,null],[13,"XOpenDisplayFailed","","Connecting to the X server with `XOpenDisplay` failed.",4,null],[8,"WindowExt","","Additional methods on `Window` that are specific to Unix.",null,null],[10,"get_xlib_window","","Returns the ID of the `Window` xlib object that is used by this window.",5,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[10,"get_xlib_display","","Returns a pointer to the `Display` object of xlib that is used by this window.",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[10,"get_xlib_screen_id","","",5,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[10,"get_xlib_xconnection","","",5,{"i":[{"n":"self"}],"o":{"g":["arc"],"n":"option"}}],[10,"send_xim_spot","","",5,null],[10,"get_xcb_connection","","This function returns the underlying `xcb_connection_t` of an xlib `Display`.",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[10,"get_wayland_surface","","Returns a pointer to the `wl_surface` object of wayland that is used by this window.",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[10,"get_wayland_display","","Returns a pointer to the `wl_display` object of wayland that is used by this window.",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[10,"is_ready","","Check if the window is ready for drawing",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[6,"GLXContext","","",null,null],[8,"GlContextExt","glium::glutin::os","Platform-specific extensions for OpenGL contexts.",null,null],[16,"Handle","","Raw context handle.",6,null],[10,"raw_handle","","Returns the raw context handle.",6,null],[8,"GlContext","glium::glutin","A trait for types associated with a GL context.",null,null],[10,"make_current","","Sets the context as the current context.",7,{"i":[{"n":"self"}],"o":{"g":["contexterror"],"n":"result"}}],[10,"is_current","","Returns true if this context is the current one in this thread.",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"get_proc_address","","Returns the address of an OpenGL function.",7,null],[10,"swap_buffers","","Swaps the buffers in case of double or triple buffering.",7,{"i":[{"n":"self"}],"o":{"g":["contexterror"],"n":"result"}}],[10,"get_api","","Returns the OpenGL API being used.",7,{"i":[{"n":"self"}],"o":{"n":"api"}}],[10,"get_pixel_format","","Returns the pixel format of the main framebuffer of the context.",7,{"i":[{"n":"self"}],"o":{"n":"pixelformat"}}],[10,"resize","","Resize the GL context.",7,null],[3,"Context","","Represents an OpenGL context.",null,null],[3,"ContextBuilder","","Object that allows you to build `Context`s.",null,null],[12,"gl_attr","","The attributes to use to create the context.",8,null],[3,"GlWindow","","Represents an OpenGL context and a Window with which it is associated.",null,null],[4,"CreationError","","Error that can happen while creating a window or a headless renderer.",null,null],[13,"OsError","","",9,null],[13,"NotSupported","","TODO: remove this error",9,null],[13,"NoBackendAvailable","","",9,null],[13,"RobustnessNotSupported","","",9,null],[13,"OpenGlVersionNotSupported","","",9,null],[13,"NoAvailablePixelFormat","","",9,null],[13,"PlatformSpecific","","",9,null],[13,"Window","","",9,null],[4,"ContextError","","Error that can happen when manipulating an OpenGL context.",null,null],[13,"IoError","","",10,null],[13,"ContextLost","","",10,null],[4,"Api","","All APIs related to OpenGL that you can possibly get while using glutin.",null,null],[13,"OpenGl","","The classical OpenGL. Available on Windows, Linux, OS/X.",11,null],[13,"OpenGlEs","","OpenGL embedded system. Available on Linux, Android.",11,null],[13,"WebGl","","OpenGL for the web. Very similar to OpenGL ES.",11,null],[4,"GlProfile","","Describes the requested OpenGL context profiles.",null,null],[13,"Compatibility","","Include all the immediate more functions and definitions.",12,null],[13,"Core","","Include all the future-compatible functions and definitions.",12,null],[4,"GlRequest","","Describes the OpenGL API and version that are being requested when a context is created.",null,null],[13,"Latest","","Request the latest version of the \"best\" API of this platform.",13,null],[13,"Specific","","Request a specific version of a specific API.",13,null],[13,"GlThenGles","","If OpenGL is available, create an OpenGL context with the specified `opengl_version`. Else if OpenGL ES or WebGL is available, create a context with the specified `opengles_version`.",13,null],[12,"opengl_version","glium::glutin::GlRequest","The version to use for OpenGL.",13,null],[12,"opengles_version","","The version to use for OpenGL ES.",13,null],[7,"GL_CORE","glium::glutin","The minimum core profile GL context. Useful for getting the minimum required GL version while still running on OSX, which often forbids the compatibility profile features.",null,null],[4,"Robustness","","Specifies the tolerance of the OpenGL context to faults. If you accept raw OpenGL commands and/or raw shader code from an untrusted source, you should definitely care about this.",null,null],[13,"NotRobust","","Not everything is checked. Your application can crash if you do something wrong with your shaders.",14,null],[13,"NoError","","The driver doesn't check anything. This option is very dangerous. Please know what you're doing before using it. See the `GL_KHR_no_error` extension.",14,null],[13,"RobustNoResetNotification","","Everything is checked to avoid any crash. The driver will attempt to avoid any problem, but if a problem occurs the behavior is implementation-defined. You are just guaranteed not to get a crash.",14,null],[13,"TryRobustNoResetNotification","","Same as `RobustNoResetNotification` but the context creation doesn't fail if it's not supported.",14,null],[13,"RobustLoseContextOnReset","","Everything is checked to avoid any crash. If a problem occurs, the context will enter a \"context lost\" state. It must then be recreated. For the moment, glutin doesn't provide a way to recreate a context with the same window :-/",14,null],[13,"TryRobustLoseContextOnReset","","Same as `RobustLoseContextOnReset` but the context creation doesn't fail if it's not supported.",14,null],[4,"ReleaseBehavior","","The behavior of the driver when you change the current context.",null,null],[13,"None","","Doesn't do anything. Most notably doesn't flush.",15,null],[13,"Flush","","Flushes the context that was previously current as if `glFlush` was called.",15,null],[3,"PixelFormat","","Describes a possible format. Unused.",null,null],[12,"hardware_accelerated","","",16,null],[12,"color_bits","","",16,null],[12,"alpha_bits","","",16,null],[12,"depth_bits","","",16,null],[12,"stencil_bits","","",16,null],[12,"stereoscopy","","",16,null],[12,"double_buffer","","",16,null],[12,"multisampling","","",16,null],[12,"srgb","","",16,null],[3,"PixelFormatRequirements","","Describes how the backend should choose a pixel format.",null,null],[12,"hardware_accelerated","","If true, only hardware-accelerated formats will be considered. If false, only software renderers. `None` means \"don't care\". Default is `Some(true)`.",17,null],[12,"color_bits","","Minimum number of bits for the color buffer, excluding alpha. `None` means \"don't care\". The default is `Some(24)`.",17,null],[12,"float_color_buffer","","If true, the color buffer must be in a floating point format. Default is `false`.",17,null],[12,"alpha_bits","","Minimum number of bits for the alpha in the color buffer. `None` means \"don't care\". The default is `Some(8)`.",17,null],[12,"depth_bits","","Minimum number of bits for the depth buffer. `None` means \"don't care\". The default value is `Some(24)`.",17,null],[12,"stencil_bits","","Minimum number of bits for the depth buffer. `None` means \"don't care\". The default value is `Some(8)`.",17,null],[12,"double_buffer","","If true, only double-buffered formats will be considered. If false, only single-buffer formats. `None` means \"don't care\". The default is `Some(true)`.",17,null],[12,"multisampling","","Contains the minimum number of samples per pixel in the color, depth and stencil buffers. `None` means \"don't care\". Default is `None`. A value of `Some(0)` indicates that multisampling must not be enabled.",17,null],[12,"stereoscopy","","If true, only stereoscopic formats will be considered. If false, only non-stereoscopic formats. The default is `false`.",17,null],[12,"srgb","","If true, only sRGB-capable formats will be considered. If false, don't care. The default is `false`.",17,null],[12,"release_behavior","","The behavior when changing the current context. Default is `Flush`.",17,null],[3,"GlAttributes","","Attributes to use when creating an OpenGL context.",null,null],[12,"sharing","","An existing context to share the new the context with.",18,null],[12,"version","","Version to try create. See `GlRequest` for more infos.",18,null],[12,"profile","","OpenGL profile to use.",18,null],[12,"debug","","Whether to enable the `debug` flag of the context.",18,null],[12,"robustness","","How the OpenGL context should detect errors.",18,null],[12,"vsync","","Whether to use vsync. If vsync is enabled, calling `swap_buffers` will block until the screen refreshes. This is typically used to prevent screen tearing.",18,null],[6,"AxisId","","Identifier for a specific analog axis on some device.",null,null],[4,"Event","","Describes a generic event.",null,null],[13,"WindowEvent","","",19,null],[12,"window_id","glium::glutin::Event","",19,null],[12,"event","","",19,null],[13,"DeviceEvent","glium::glutin","",19,null],[12,"device_id","glium::glutin::Event","",19,null],[12,"event","","",19,null],[13,"Awakened","glium::glutin","",19,null],[13,"Suspended","","The application has been suspended or resumed.",19,null],[4,"MouseButton","","Describes a button of a mouse controller.",null,null],[13,"Left","","",20,null],[13,"Right","","",20,null],[13,"Middle","","",20,null],[13,"Other","","",20,null],[3,"KeyboardInput","","Describes a keyboard input event.",null,null],[12,"scancode","","Identifies the physical key pressed",21,null],[12,"state","","",21,null],[12,"virtual_keycode","","Identifies the semantic meaning of the key",21,null],[12,"modifiers","","Modifier keys active at the time of this input.",21,null],[3,"WindowAttributes","","Attributes to use when creating a window.",null,null],[12,"dimensions","","The dimensions of the window. If this is `None`, some platform-specific dimensions will be used.",22,null],[12,"min_dimensions","","The minimum dimensions a window can be, If this is `None`, the window will have no minimum dimensions (aside from reserved).",22,null],[12,"max_dimensions","","The maximum dimensions a window can be, If this is `None`, the maximum will have no maximum or will be set to the primary monitor's dimensions by the platform.",22,null],[12,"fullscreen","","Whether the window should be set as fullscreen upon creation.",22,null],[12,"title","","The title of the window in the title bar.",22,null],[12,"maximized","","Whether the window should be maximized upon creation.",22,null],[12,"visible","","Whether the window should be immediately visible upon creation.",22,null],[12,"transparent","","Whether the the window should be transparent. If this is true, writing colors with alpha values different than `1.0` will produce a transparent window.",22,null],[12,"decorations","","Whether the window should have borders and bars.",22,null],[12,"multitouch","","[iOS only] Enable multitouch, see multipleTouchEnabled",22,null],[4,"WindowCreationError","","Error that can happen while creating a window or a headless renderer.",null,null],[13,"OsError","","",23,null],[13,"NotSupported","","TODO: remove this error",23,null],[4,"ElementState","","Describes the input state of a key.",null,null],[13,"Pressed","","",24,null],[13,"Released","","",24,null],[3,"MonitorId","","Identifier for a monitor.",null,null],[3,"Touch","","Represents touch event",null,null],[12,"device_id","","",25,null],[12,"phase","","",25,null],[12,"location","","",25,null],[12,"id","","unique identifier of a finger.",25,null],[3,"EventsLoopProxy","","Used to wake up the `EventsLoop` from another thread.",null,null],[3,"AvailableMonitorsIter","","An iterator for the list of available monitors.",null,null],[3,"DeviceId","","Identifier of an input device.",null,null],[6,"ScanCode","","Hardware-dependent keyboard scan code.",null,null],[3,"EventsLoopClosed","","The error that is returned when an `EventsLoopProxy` attempts to wake up an `EventsLoop` that no longer exists.",null,null],[3,"Window","","Represents a window.",null,null],[3,"WindowId","","Identifier of a window. Unique for each window.",null,null],[4,"MouseScrollDelta","","Describes a difference in the mouse scroll wheel state.",null,null],[13,"LineDelta","","Amount in lines or rows to scroll in the horizontal and vertical directions.",26,null],[13,"PixelDelta","","Amount in pixels to scroll in the horizontal and vertical direction.",26,null],[4,"VirtualKeyCode","","Symbolic name for a keyboard key.",null,null],[13,"Key1","","The '1' key over the letters.",27,null],[13,"Key2","","The '2' key over the letters.",27,null],[13,"Key3","","The '3' key over the letters.",27,null],[13,"Key4","","The '4' key over the letters.",27,null],[13,"Key5","","The '5' key over the letters.",27,null],[13,"Key6","","The '6' key over the letters.",27,null],[13,"Key7","","The '7' key over the letters.",27,null],[13,"Key8","","The '8' key over the letters.",27,null],[13,"Key9","","The '9' key over the letters.",27,null],[13,"Key0","","The '0' key over the 'O' and 'P' keys.",27,null],[13,"A","","",27,null],[13,"B","","",27,null],[13,"C","","",27,null],[13,"D","","",27,null],[13,"E","","",27,null],[13,"F","","",27,null],[13,"G","","",27,null],[13,"H","","",27,null],[13,"I","","",27,null],[13,"J","","",27,null],[13,"K","","",27,null],[13,"L","","",27,null],[13,"M","","",27,null],[13,"N","","",27,null],[13,"O","","",27,null],[13,"P","","",27,null],[13,"Q","","",27,null],[13,"R","","",27,null],[13,"S","","",27,null],[13,"T","","",27,null],[13,"U","","",27,null],[13,"V","","",27,null],[13,"W","","",27,null],[13,"X","","",27,null],[13,"Y","","",27,null],[13,"Z","","",27,null],[13,"Escape","","The Escape key, next to F1.",27,null],[13,"F1","","",27,null],[13,"F2","","",27,null],[13,"F3","","",27,null],[13,"F4","","",27,null],[13,"F5","","",27,null],[13,"F6","","",27,null],[13,"F7","","",27,null],[13,"F8","","",27,null],[13,"F9","","",27,null],[13,"F10","","",27,null],[13,"F11","","",27,null],[13,"F12","","",27,null],[13,"F13","","",27,null],[13,"F14","","",27,null],[13,"F15","","",27,null],[13,"Snapshot","","Print Screen/SysRq.",27,null],[13,"Scroll","","Scroll Lock.",27,null],[13,"Pause","","Pause/Break key, next to Scroll lock.",27,null],[13,"Insert","","`Insert`, next to Backspace.",27,null],[13,"Home","","",27,null],[13,"Delete","","",27,null],[13,"End","","",27,null],[13,"PageDown","","",27,null],[13,"PageUp","","",27,null],[13,"Left","","",27,null],[13,"Up","","",27,null],[13,"Right","","",27,null],[13,"Down","","",27,null],[13,"Back","","The Backspace key, right over Enter.",27,null],[13,"Return","","The Enter key.",27,null],[13,"Space","","The space bar.",27,null],[13,"Compose","","The \"Compose\" key on Linux.",27,null],[13,"Caret","","",27,null],[13,"Numlock","","",27,null],[13,"Numpad0","","",27,null],[13,"Numpad1","","",27,null],[13,"Numpad2","","",27,null],[13,"Numpad3","","",27,null],[13,"Numpad4","","",27,null],[13,"Numpad5","","",27,null],[13,"Numpad6","","",27,null],[13,"Numpad7","","",27,null],[13,"Numpad8","","",27,null],[13,"Numpad9","","",27,null],[13,"AbntC1","","",27,null],[13,"AbntC2","","",27,null],[13,"Add","","",27,null],[13,"Apostrophe","","",27,null],[13,"Apps","","",27,null],[13,"At","","",27,null],[13,"Ax","","",27,null],[13,"Backslash","","",27,null],[13,"Calculator","","",27,null],[13,"Capital","","",27,null],[13,"Colon","","",27,null],[13,"Comma","","",27,null],[13,"Convert","","",27,null],[13,"Decimal","","",27,null],[13,"Divide","","",27,null],[13,"Equals","","",27,null],[13,"Grave","","",27,null],[13,"Kana","","",27,null],[13,"Kanji","","",27,null],[13,"LAlt","","",27,null],[13,"LBracket","","",27,null],[13,"LControl","","",27,null],[13,"LMenu","","",27,null],[13,"LShift","","",27,null],[13,"LWin","","",27,null],[13,"Mail","","",27,null],[13,"MediaSelect","","",27,null],[13,"MediaStop","","",27,null],[13,"Minus","","",27,null],[13,"Multiply","","",27,null],[13,"Mute","","",27,null],[13,"MyComputer","","",27,null],[13,"NavigateForward","","",27,null],[13,"NavigateBackward","","",27,null],[13,"NextTrack","","",27,null],[13,"NoConvert","","",27,null],[13,"NumpadComma","","",27,null],[13,"NumpadEnter","","",27,null],[13,"NumpadEquals","","",27,null],[13,"OEM102","","",27,null],[13,"Period","","",27,null],[13,"PlayPause","","",27,null],[13,"Power","","",27,null],[13,"PrevTrack","","",27,null],[13,"RAlt","","",27,null],[13,"RBracket","","",27,null],[13,"RControl","","",27,null],[13,"RMenu","","",27,null],[13,"RShift","","",27,null],[13,"RWin","","",27,null],[13,"Semicolon","","",27,null],[13,"Slash","","",27,null],[13,"Sleep","","",27,null],[13,"Stop","","",27,null],[13,"Subtract","","",27,null],[13,"Sysrq","","",27,null],[13,"Tab","","",27,null],[13,"Underline","","",27,null],[13,"Unlabeled","","",27,null],[13,"VolumeDown","","",27,null],[13,"VolumeUp","","",27,null],[13,"Wake","","",27,null],[13,"WebBack","","",27,null],[13,"WebFavorites","","",27,null],[13,"WebForward","","",27,null],[13,"WebHome","","",27,null],[13,"WebRefresh","","",27,null],[13,"WebSearch","","",27,null],[13,"WebStop","","",27,null],[13,"Yen","","",27,null],[4,"ControlFlow","","Returned by the user callback given to the `EventsLoop::run_forever` method.",null,null],[13,"Continue","","Continue looping and waiting for events.",28,null],[13,"Break","","Break from the event loop.",28,null],[4,"DeviceEvent","","Represents raw hardware events that are not associated with any particular window.",null,null],[13,"Added","","",29,null],[13,"Removed","","",29,null],[13,"MouseMotion","","Change in physical position of a pointing device.",29,null],[12,"delta","glium::glutin::DeviceEvent","(x, y) change in position in unspecified units.",29,null],[13,"MouseWheel","glium::glutin","Physical scroll event",29,null],[12,"delta","glium::glutin::DeviceEvent","",29,null],[13,"Motion","glium::glutin","Motion on some analog axis.  This event will be reported for all arbitrary input devices that winit supports on this platform, including mouse devices.  If the device is a mouse device then this will be reported alongside the MouseMotion event.",29,null],[12,"axis","glium::glutin::DeviceEvent","",29,null],[12,"value","","",29,null],[13,"Button","glium::glutin","",29,null],[12,"button","glium::glutin::DeviceEvent","",29,null],[12,"state","","",29,null],[13,"Key","glium::glutin","",29,null],[13,"Text","","",29,null],[12,"codepoint","glium::glutin::DeviceEvent","",29,null],[4,"WindowEvent","glium::glutin","Describes an event from a `Window`.",null,null],[13,"Resized","","The size of the window has changed.",30,null],[13,"Moved","","The position of the window has changed.",30,null],[13,"Closed","","The window has been closed.",30,null],[13,"DroppedFile","","A file has been dropped into the window.",30,null],[13,"HoveredFile","","A file is being hovered over the window.",30,null],[13,"HoveredFileCancelled","","A file was hovered, but has exited the window.",30,null],[13,"ReceivedCharacter","","The window received a unicode character.",30,null],[13,"Focused","","The window gained or lost focus.",30,null],[13,"KeyboardInput","","An event from the keyboard has been received.",30,null],[12,"device_id","glium::glutin::WindowEvent","",30,null],[12,"input","","",30,null],[13,"CursorMoved","glium::glutin","The cursor has moved on the window.",30,null],[12,"device_id","glium::glutin::WindowEvent","",30,null],[12,"position","","(x,y) coords in pixels relative to the top-left corner of the window. Because the range of this data is limited by the display area and it may have been transformed by the OS to implement effects such as cursor acceleration, it should not be used to implement non-cursor-like interactions such as 3D camera control.",30,null],[12,"modifiers","","",30,null],[13,"CursorEntered","glium::glutin","The cursor has entered the window.",30,null],[12,"device_id","glium::glutin::WindowEvent","",30,null],[13,"CursorLeft","glium::glutin","The cursor has left the window.",30,null],[12,"device_id","glium::glutin::WindowEvent","",30,null],[13,"MouseWheel","glium::glutin","A mouse wheel movement or touchpad scroll occurred.",30,null],[12,"device_id","glium::glutin::WindowEvent","",30,null],[12,"delta","","",30,null],[12,"phase","","",30,null],[12,"modifiers","","",30,null],[13,"MouseInput","glium::glutin","An mouse button press has been received.",30,null],[12,"device_id","glium::glutin::WindowEvent","",30,null],[12,"state","","",30,null],[12,"button","","",30,null],[12,"modifiers","","",30,null],[13,"TouchpadPressure","glium::glutin","Touchpad pressure event.",30,null],[12,"device_id","glium::glutin::WindowEvent","",30,null],[12,"pressure","","",30,null],[12,"stage","","",30,null],[13,"AxisMotion","glium::glutin","Motion on some analog axis. May report data redundant to other, more specific events.",30,null],[12,"device_id","glium::glutin::WindowEvent","",30,null],[12,"axis","","",30,null],[12,"value","","",30,null],[13,"Refresh","glium::glutin","The window needs to be redrawn.",30,null],[13,"Touch","","Touch event has been received",30,null],[13,"HiDPIFactorChanged","","DPI scaling factor of the window has changed.",30,null],[3,"HeadlessRendererBuilder","","Object that allows you to build headless contexts.",null,null],[12,"dimensions","","The dimensions to use.",31,null],[12,"opengl","","The OpenGL attributes to build the context with.",31,null],[3,"EventsLoop","","Provides a way to retreive events from the system and from the windows that were registered to the events loop.",null,null],[3,"ModifiersState","","Represents the current state of the keyboard modifiers",null,null],[12,"shift","","The \"shift\" key",32,null],[12,"ctrl","","The \"control\" key",32,null],[12,"alt","","The \"alt\" key",32,null],[12,"logo","","The \"logo\" key",32,null],[4,"TouchPhase","","Describes touch-screen input state.",null,null],[13,"Started","","",33,null],[13,"Moved","","",33,null],[13,"Ended","","",33,null],[13,"Cancelled","","",33,null],[6,"ButtonId","","Identifier for a specific button on some device.",null,null],[3,"HeadlessContext","","Represents a headless OpenGL context.",null,null],[4,"CursorState","","Describes how winit handles the cursor.",null,null],[13,"Normal","","Normal cursor behavior.",34,null],[13,"Hide","","The cursor will be invisible when over the window.",34,null],[13,"Grab","","Grabs the mouse cursor. The cursor's motion will be confined to this window and the window has exclusive access to further events regarding the cursor.",34,null],[4,"MouseCursor","","Describes the appearance of the mouse cursor.",null,null],[13,"Default","","The platform-dependent default cursor.",35,null],[13,"Crosshair","","A simple crosshair.",35,null],[13,"Hand","","A hand (often used to indicate links in web browsers).",35,null],[13,"Arrow","","Self explanatory.",35,null],[13,"Move","","Indicates something is to be moved.",35,null],[13,"Text","","Indicates text that may be selected or edited.",35,null],[13,"Wait","","Program busy indicator.",35,null],[13,"Help","","Help indicator (often rendered as a \"?\")",35,null],[13,"Progress","","Progress indicator. Shows that processing is being done. But in contrast with \"Wait\" the user may still interact with the program. Often rendered as a spinning beach ball, or an arrow with a watch or hourglass.",35,null],[13,"NotAllowed","","Cursor showing that something cannot be done.",35,null],[13,"ContextMenu","","",35,null],[13,"NoneCursor","","",35,null],[13,"Cell","","",35,null],[13,"VerticalText","","",35,null],[13,"Alias","","",35,null],[13,"Copy","","",35,null],[13,"NoDrop","","",35,null],[13,"Grab","","",35,null],[13,"Grabbing","","",35,null],[13,"AllScroll","","",35,null],[13,"ZoomIn","","",35,null],[13,"ZoomOut","","",35,null],[13,"EResize","","Indicate that some edge is to be moved. For example, the 'SeResize' cursor is used when the movement starts from the south-east corner of the box.",35,null],[13,"NResize","","",35,null],[13,"NeResize","","",35,null],[13,"NwResize","","",35,null],[13,"SResize","","",35,null],[13,"SeResize","","",35,null],[13,"SwResize","","",35,null],[13,"WResize","","",35,null],[13,"EwResize","","",35,null],[13,"NsResize","","",35,null],[13,"NeswResize","","",35,null],[13,"NwseResize","","",35,null],[13,"ColResize","","",35,null],[13,"RowResize","","",35,null],[3,"WindowBuilder","","Object that allows you to build windows.",null,null],[12,"window","","The attributes to use to create the window.",36,null],[3,"Blend","glium","Blend effect that the GPU will use for blending.",null,null],[12,"color","","The blending function for color channels.",37,null],[12,"alpha","","The blending function for alpha channels.",37,null],[12,"constant_value","","A constant color that can be used in the blending functions.",37,null],[3,"Depth","","Represents the depth parameters of a draw command.",null,null],[12,"test","","The function that the GPU will use to determine whether to write over an existing pixel on the target. Don't forget to set `depth_write` appropriately if you use a depth test.",38,null],[12,"write","","Sets whether the GPU will write the depth values on the depth buffer if they pass the depth test.",38,null],[12,"range","","The range of possible Z values in surface coordinates.",38,null],[12,"clamp","","Sets whether the depth values of samples should be clamped to `0.0` and `1.0`.",38,null],[3,"IndexBuffer","","A list of indices loaded in the graphics card's memory.",null,null],[3,"VertexBuffer","","A list of vertices loaded in the graphics card's memory.",null,null],[3,"Program","","A combination of shaders linked together.",null,null],[3,"LinearSyncFence","","Prototype for a `SyncFence`.",null,null],[3,"SyncFence","","Provides a way to wait for a server-side operation to be finished.",null,null],[3,"Version","","Describes a version.",null,null],[12,"0","","",39,null],[12,"1","","",39,null],[12,"2","","",39,null],[3,"Rect","","Area of a surface in pixels.",null,null],[12,"left","","Number of pixels between the left border of the surface and the left border of the rectangle.",40,null],[12,"bottom","","Number of pixels between the bottom border of the surface and the bottom border of the rectangle.",40,null],[12,"width","","Width of the area in pixels.",40,null],[12,"height","","Height of the area in pixels.",40,null],[3,"BlitTarget","","Area of a surface in pixels. Similar to a `Rect` except that dimensions can be negative.",null,null],[12,"left","","Number of pixels between the left border of the surface and the left border of the rectangle.",41,null],[12,"bottom","","Number of pixels between the bottom border of the surface and the bottom border of the rectangle.",41,null],[12,"width","","Width of the area in pixels. Can be negative.",41,null],[12,"height","","Height of the area in pixels. Can be negative.",41,null],[3,"Frame","","Implementation of `Surface`, targeting the default framebuffer.",null,null],[3,"IncompatibleOpenGl","","Returned during Context creation if the OpenGL implementation is too old.",null,null],[12,"0","","",42,null],[4,"Profile","","Describes the OpenGL context profile.",null,null],[13,"Core","","The context uses only future-compatible functions and definitions.",43,null],[13,"Compatibility","","The context includes all immediate mode functions and definitions.",43,null],[4,"BlendingFunction","","Function that the GPU will use for blending.",null,null],[13,"AlwaysReplace","","Simply overwrite the destination pixel with the source pixel.",44,null],[13,"Min","","For each individual component (red, green, blue, and alpha), the minimum value is chosen between the source and the destination.",44,null],[13,"Max","","For each individual component (red, green, blue, and alpha), the maximum value is chosen between the source and the destination.",44,null],[13,"Addition","","For each individual component (red, green, blue, and alpha), a weighted addition between the source and the destination.",44,null],[12,"source","glium::BlendingFunction","The factor to apply to the source pixel.",44,null],[12,"destination","","The factor to apply to the destination pixel.",44,null],[13,"Subtraction","glium","For each individual component (red, green, blue, and alpha), a weighted subtraction of the source by the destination.",44,null],[12,"source","glium::BlendingFunction","The factor to apply to the source pixel.",44,null],[12,"destination","","The factor to apply to the destination pixel.",44,null],[13,"ReverseSubtraction","glium","For each individual component (red, green, blue, and alpha), a weighted subtraction of the destination by the source.",44,null],[12,"source","glium::BlendingFunction","The factor to apply to the source pixel.",44,null],[12,"destination","","The factor to apply to the destination pixel.",44,null],[4,"LinearBlendingFactor","glium","Indicates which value to multiply each component with.",null,null],[13,"Zero","","Multiply the source or destination component by zero, which always gives `0.0`.",45,null],[13,"One","","Multiply the source or destination component by one, which always gives you the original value.",45,null],[13,"SourceColor","","Multiply the source or destination component by its corresponding value in the source.",45,null],[13,"OneMinusSourceColor","","Equivalent to `1 - SourceColor`.",45,null],[13,"DestinationColor","","Multiply the source or destination component by its corresponding value in the destination.",45,null],[13,"OneMinusDestinationColor","","Equivalent to `1 - DestinationColor`.",45,null],[13,"SourceAlpha","","Multiply the source or destination component by the alpha value of the source.",45,null],[13,"SourceAlphaSaturate","","Multiply the source or destination component by the smallest value of `SourceAlpha` and `1 - DestinationAlpha`.",45,null],[13,"OneMinusSourceAlpha","","Multiply the source or destination component by `1.0` minus the alpha value of the source.",45,null],[13,"DestinationAlpha","","Multiply the source or destination component by the alpha value of the destination.",45,null],[13,"OneMinusDestinationAlpha","","Multiply the source or destination component by `1.0` minus the alpha value of the destination.",45,null],[13,"ConstantColor","","Multiply the source or destination component by the corresponding value in `Blend::const_value`.",45,null],[13,"OneMinusConstantColor","","Multiply the source or destination component by `1.0` minus the corresponding value in `Blend::const_value`.",45,null],[13,"ConstantAlpha","","Multiply the source or destination component by the alpha value of `Blend::const_value`.",45,null],[13,"OneMinusConstantAlpha","","Multiply the source or destination component by `1.0` minus the alpha value of `Blend::const_value`.",45,null],[4,"DepthTest","","The function that the GPU will use to determine whether to write over an existing pixel on the target.",null,null],[13,"Ignore","","Never replace the target pixel.",46,null],[13,"Overwrite","","Always replace the target pixel.",46,null],[13,"IfEqual","","Replace if the z-value of the source is equal to the destination.",46,null],[13,"IfNotEqual","","Replace if the z-value of the source is different than the destination.",46,null],[13,"IfMore","","Replace if the z-value of the source is more than the destination.",46,null],[13,"IfMoreOrEqual","","Replace if the z-value of the source is more than, or equal to the destination.",46,null],[13,"IfLess","","Replace if the z-value of the source is less than the destination.",46,null],[13,"IfLessOrEqual","","Replace if the z-value of the source is less than, or equal to the destination.",46,null],[4,"StencilTest","","Specifies which comparison the GPU will do to determine whether a sample passes the stencil test. The general equation is `(ref & mask) CMP (stencil & mask)`, where `ref` is the reference value (`stencil_reference_value_clockwise` or `stencil_reference_value_counter_clockwise`), `CMP` is the comparison chosen, and `stencil` is the current value in the stencil buffer.",null,null],[13,"AlwaysPass","","The stencil test always passes.",47,null],[13,"AlwaysFail","","The stencil test always fails.",47,null],[13,"IfLess","","`(ref & mask) < (stencil & mask)`",47,null],[12,"mask","glium::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",47,null],[13,"IfLessOrEqual","glium","`(ref & mask) <= (stencil & mask)`",47,null],[12,"mask","glium::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",47,null],[13,"IfMore","glium","`(ref & mask) > (stencil & mask)`",47,null],[12,"mask","glium::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",47,null],[13,"IfMoreOrEqual","glium","`(ref & mask) >= (stencil & mask)`",47,null],[12,"mask","glium::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",47,null],[13,"IfEqual","glium","`(ref & mask) == (stencil & mask)`",47,null],[12,"mask","glium::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",47,null],[13,"IfNotEqual","glium","`(ref & mask) != (stencil & mask)`",47,null],[12,"mask","glium::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",47,null],[4,"StencilOperation","glium","Specificies which operation the GPU will do depending on the result of the stencil test.",null,null],[13,"Keep","","Keeps the value currently in the stencil buffer.",48,null],[13,"Zero","","Writes zero in the stencil buffer.",48,null],[13,"Replace","","Writes the reference value (`stencil_reference_value_clockwise` or `stencil_reference_value_counter_clockwise`) in the stencil buffer.",48,null],[13,"Increment","","Increments the value currently in the stencil buffer. If the value is the maximum, don't do anything.",48,null],[13,"IncrementWrap","","Increments the value currently in the stencil buffer. If the value is the maximum, wrap to `0`.",48,null],[13,"Decrement","","Decrements the value currently in the stencil buffer. If the value is `0`, don't do anything.",48,null],[13,"DecrementWrap","","Decrements the value currently in the stencil buffer. If the value is `0`, wrap to `-1`.",48,null],[13,"Invert","","Inverts each bit of the value.",48,null],[4,"Api","","Describes an OpenGL-related API.",null,null],[13,"Gl","","Regular OpenGL.",49,null],[13,"GlEs","","OpenGL embedded system.",49,null],[4,"Handle","","Handle to a shader or a program.",null,null],[13,"Id","","A numeric identifier.",50,null],[13,"Handle","","A `GLhandleARB`.",50,null],[4,"RawUniformValue","","A raw value of a uniform. \"Raw\" means that it's passed directly with `glUniform`. Textures for example are just passed as integers.",null,null],[13,"SignedInt","","",51,null],[13,"UnsignedInt","","",51,null],[13,"Float","","",51,null],[13,"Mat2","","2x2 column-major matrix.",51,null],[13,"Mat3","","3x3 column-major matrix.",51,null],[13,"Mat4","","4x4 column-major matrix.",51,null],[13,"Vec2","","",51,null],[13,"Vec3","","",51,null],[13,"Vec4","","",51,null],[13,"IntVec2","","",51,null],[13,"IntVec3","","",51,null],[13,"IntVec4","","",51,null],[13,"UnsignedIntVec2","","",51,null],[13,"UnsignedIntVec3","","",51,null],[13,"UnsignedIntVec4","","",51,null],[13,"Double","","",51,null],[13,"DoubleMat2","","",51,null],[13,"DoubleMat3","","",51,null],[13,"DoubleMat4","","",51,null],[13,"DoubleVec2","","",51,null],[13,"DoubleVec3","","",51,null],[13,"DoubleVec4","","",51,null],[13,"Int64","","",51,null],[13,"Int64Vec2","","",51,null],[13,"Int64Vec3","","",51,null],[13,"Int64Vec4","","",51,null],[13,"UnsignedInt64","","",51,null],[13,"UnsignedInt64Vec2","","",51,null],[13,"UnsignedInt64Vec3","","",51,null],[13,"UnsignedInt64Vec4","","",51,null],[4,"DrawError","","Error that can happen while drawing.",null,null],[13,"NoDepthBuffer","","A depth function has been requested but no depth buffer is available.",52,null],[13,"AttributeTypeMismatch","","The type of a vertex attribute in the vertices source doesn't match what the program requires.",52,null],[13,"AttributeMissing","","One of the attributes required by the program is missing from the vertex format.",52,null],[13,"ViewportTooLarge","","The viewport's dimensions are not supported by the backend.",52,null],[13,"InvalidDepthRange","","The depth range is outside of the `(0, 1)` range.",52,null],[13,"UniformTypeMismatch","","The type of a uniform doesn't match what the program requires.",52,null],[12,"name","glium::DrawError","Name of the uniform you are trying to bind.",52,null],[12,"expected","","The expected type.",52,null],[13,"UniformBufferToValue","glium","Tried to bind a uniform buffer to a single uniform value.",52,null],[12,"name","glium::DrawError","Name of the uniform you are trying to bind.",52,null],[13,"UniformValueToBlock","glium","Tried to bind a single uniform value to a uniform block.",52,null],[12,"name","glium::DrawError","Name of the uniform you are trying to bind.",52,null],[13,"UniformBlockLayoutMismatch","glium","The layout of the content of the uniform buffer does not match the layout of the block.",52,null],[12,"name","glium::DrawError","Name of the block you are trying to bind.",52,null],[12,"err","","The error giving more details about the mismatch.",52,null],[13,"SubroutineUniformToValue","glium","Tried to bind a subroutine uniform like a regular uniform value.",52,null],[12,"name","glium::DrawError","Name of the uniform you are trying to bind.",52,null],[13,"SubroutineUniformMissing","glium","Not all subroutine uniforms of a shader stage were set.",52,null],[12,"stage","glium::DrawError","Shader stage with missing bindings.",52,null],[12,"expected_count","","The expected number of bindings.",52,null],[12,"real_count","","The number of bindings defined by the user.",52,null],[13,"SubroutineNotFound","glium","A non-existent subroutine was referenced.",52,null],[12,"stage","glium::DrawError","The stage the subroutine was searched for.",52,null],[12,"name","","The invalid name of the subroutine.",52,null],[13,"UnsupportedVerticesPerPatch","glium","The number of vertices per patch that has been requested is not supported.",52,null],[13,"TessellationNotSupported","","Trying to use tessellation, but this is not supported by the underlying hardware.",52,null],[13,"TessellationWithoutPatches","","Using a program which contains tessellation shaders, but without submitting patches.",52,null],[13,"SamplersNotSupported","","Trying to use a sampler, but they are not supported by the backend.",52,null],[13,"InstancesCountMismatch","","When you use instancing, all vertices sources must have the same size.",52,null],[13,"VerticesSourcesLengthMismatch","","If you don't use indices, then all vertices sources must have the same size.",52,null],[13,"TransformFeedbackNotSupported","","You requested not to draw primitives, but this is not supported by the backend.",52,null],[13,"WrongQueryOperation","","See the documentation of the `draw_parameters` module for infos.",52,null],[13,"SmoothingNotSupported","","You requested smoothing, but this is not supported by the backend.",52,null],[13,"ProvokingVertexNotSupported","","The requested provoking vertex is not supported by the backend.",52,null],[13,"RasterizerDiscardNotSupported","","Discarding rasterizer output isn't supported by the backend.",52,null],[13,"DepthClampNotSupported","","Depth clamping isn't supported by the backend.",52,null],[13,"BlendingParameterNotSupported","","One of the blending parameters is not supported by the backend.",52,null],[13,"FixedIndexRestartingNotSupported","","Restarting indices (multiple objects per draw call) is not supported by the backend.",52,null],[13,"ClipPlaneIndexOutOfBounds","","Tried to enable a clip plane that does not exist.",52,null],[4,"SwapBuffersError","","Error that can happen when swapping buffers.",null,null],[13,"ContextLost","","The OpenGL context has been lost and needs to be recreated. The `Display` and all the objects associated to it (textures, buffers, programs, etc.) need to be recreated from scratch.",53,null],[13,"AlreadySwapped","","The buffers have already been swapped.",53,null],[5,"get_supported_glsl_version","","Given an API version, this function returns the GLSL version that the implementation is required to support.",null,{"i":[{"n":"version"}],"o":{"n":"version"}}],[0,"backend","","The `backend` module allows one to link between glium and the OpenGL context..",null,null],[3,"Context","glium::backend","Stores the state and information required for glium to execute commands. Most public glium functions require passing a `Rc<Context>`.",null,null],[4,"ReleaseBehavior","","Defines what happens when you change the current context.",null,null],[13,"None","","Nothing is done when using another context.",54,null],[13,"Flush","","The commands queue of the current context is flushed.",54,null],[0,"glutin","","Backend implementation for the glutin library",null,null],[3,"Display","glium::backend::glutin","A GL context combined with a facade for drawing upon.",null,null],[3,"GlutinBackend","","An implementation of the `Backend` trait for glutin.",null,null],[4,"DisplayCreationError","","Error that can happen while creating a glium display.",null,null],[13,"GlutinCreationError","","An error has happened while creating the backend.",55,null],[13,"IncompatibleOpenGl","","The OpenGL implementation is too old.",55,null],[0,"headless","","Backend implementation for a glutin headless renderer.",null,null],[3,"Headless","glium::backend::glutin::headless","A headless glutin context.",null,null],[3,"GlutinBackend","","An implementation of the `Backend` trait for a glutin headless context.",null,null],[11,"deref","","",56,{"i":[{"n":"self"}],"o":{"n":"context"}}],[11,"deref","","",57,{"i":[{"n":"self"}],"o":{"n":"headlesscontext"}}],[11,"swap_buffers","","",57,{"i":[{"n":"self"}],"o":{"g":["swapbufferserror"],"n":"result"}}],[11,"get_proc_address","","",57,null],[11,"get_framebuffer_dimensions","","",57,null],[11,"is_current","","",57,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"make_current","","",57,{"i":[{"n":"self"}]}],[11,"get_context","","",56,{"i":[{"n":"self"}],"o":{"n":"rc"}}],[11,"new","","Create a new glium `Headless` context.",56,{"i":[{"n":"headlesscontext"}],"o":{"g":["incompatibleopengl"],"n":"result"}}],[11,"unchecked","","Create a new glium `Headless` context.",56,{"i":[{"n":"headlesscontext"}],"o":{"g":["incompatibleopengl"],"n":"result"}}],[11,"with_debug","","The same as the `new` constructor, but allows for specifying debug callback behaviour.",56,{"i":[{"n":"headlesscontext"},{"n":"debugcallbackbehavior"}],"o":{"g":["incompatibleopengl"],"n":"result"}}],[11,"unchecked_with_debug","","The same as the `unchecked` constructor, but allows for specifying debug callback behaviour.",56,{"i":[{"n":"headlesscontext"},{"n":"debugcallbackbehavior"}],"o":{"g":["incompatibleopengl"],"n":"result"}}],[11,"draw","","Start drawing on the backbuffer.",56,{"i":[{"n":"self"}],"o":{"n":"frame"}}],[11,"clone","glium::backend::glutin","",58,{"i":[{"n":"self"}],"o":{"n":"display"}}],[11,"clone","","",59,{"i":[{"n":"self"}],"o":{"n":"glutinbackend"}}],[11,"fmt","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new glium `Display` from the given context and window builders.",58,{"i":[{"n":"windowbuilder"},{"n":"contextbuilder"},{"n":"eventsloop"}],"o":{"g":["displaycreationerror"],"n":"result"}}],[11,"from_gl_window","","Create a new glium `Display`.",58,{"i":[{"n":"glwindow"}],"o":{"g":["incompatibleopengl"],"n":"result"}}],[11,"unchecked","","Create a new glium `Display`.",58,{"i":[{"n":"glwindow"}],"o":{"g":["incompatibleopengl"],"n":"result"}}],[11,"with_debug","","The same as the `new` constructor, but allows for specifying debug callback behaviour.",58,{"i":[{"n":"glwindow"},{"n":"debugcallbackbehavior"}],"o":{"g":["incompatibleopengl"],"n":"result"}}],[11,"unchecked_with_debug","","The same as the `unchecked` constructor, but allows for specifying debug callback behaviour.",58,{"i":[{"n":"glwindow"},{"n":"debugcallbackbehavior"}],"o":{"g":["incompatibleopengl"],"n":"result"}}],[11,"rebuild","","Rebuilds the Display's `GlWindow` with the given window and context builders.",58,{"i":[{"n":"self"},{"n":"windowbuilder"},{"n":"contextbuilder"},{"n":"eventsloop"}],"o":{"g":["displaycreationerror"],"n":"result"}}],[11,"gl_window","","Borrow the inner glutin GlWindow.",58,{"i":[{"n":"self"}],"o":{"g":["glwindow"],"n":"ref"}}],[11,"draw","","Start drawing on the backbuffer.",58,{"i":[{"n":"self"}],"o":{"n":"frame"}}],[11,"fmt","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",55,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",55,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"from","","",55,{"i":[{"n":"creationerror"}],"o":{"n":"displaycreationerror"}}],[11,"from","","",55,{"i":[{"n":"incompatibleopengl"}],"o":{"n":"displaycreationerror"}}],[11,"deref","","",58,{"i":[{"n":"self"}],"o":{"n":"context"}}],[11,"get_context","","",58,{"i":[{"n":"self"}],"o":{"n":"rc"}}],[11,"deref","","",59,{"i":[{"n":"self"}],"o":{"n":"rc"}}],[11,"swap_buffers","","",59,{"i":[{"n":"self"}],"o":{"g":["swapbufferserror"],"n":"result"}}],[11,"get_proc_address","","",59,null],[11,"get_framebuffer_dimensions","","",59,null],[11,"is_current","","",59,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"make_current","","",59,{"i":[{"n":"self"}]}],[8,"Backend","glium::backend","Trait for types that can be used as a backend for a glium context.",null,null],[10,"swap_buffers","","Swaps buffers at the end of a frame.",60,{"i":[{"n":"self"}],"o":{"g":["swapbufferserror"],"n":"result"}}],[10,"get_proc_address","","Returns the address of an OpenGL function.",60,null],[10,"get_framebuffer_dimensions","","Returns the dimensions of the window, or screen, etc.",60,null],[10,"is_current","","Returns true if the OpenGL context is the current one in the thread.",60,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"make_current","","Makes the OpenGL context the current context in the current thread.",60,{"i":[{"n":"self"}]}],[8,"Facade","","Trait for types that provide a safe access for glium functions.",null,null],[10,"get_context","","Returns an opaque type that contains the OpenGL state, extensions, version, etc.",61,{"i":[{"n":"self"}],"o":{"n":"rc"}}],[0,"buffer","glium","A buffer is a memory location accessible to the video card.",null,null],[3,"Buffer","glium::buffer","Represents a view of a buffer.",null,null],[3,"BufferAny","","Represents a sub-part of a buffer.",null,null],[3,"BufferMutSlice","","Represents a sub-part of a buffer.",null,null],[3,"BufferSlice","","Represents a sub-part of a buffer.",null,null],[3,"BufferAnySlice","","Slice of a `Buffer` without any type info.",null,null],[3,"Mapping","","A mapping of a buffer for reading and writing.",null,null],[3,"WriteMapping","","A mapping of a buffer for write only.",null,null],[3,"ReadMapping","","A mapping of a buffer for reading.",null,null],[3,"Inserter","","Allows inserting a fence in the list.",null,null],[3,"BufferView","","Represents a view of a buffer.",null,null],[3,"BufferViewSlice","","Represents a sub-part of a buffer.",null,null],[3,"BufferViewMutSlice","","Represents a sub-part of a buffer.",null,null],[3,"BufferViewAny","","Represents a sub-part of a buffer.",null,null],[3,"BufferViewAnySlice","","Slice of a `Buffer` without any type info.",null,null],[4,"ReadError","","Error that can happen when reading from a buffer.",null,null],[13,"NotSupported","","The backend doesn't support reading from a buffer.",62,null],[13,"ContextLost","","The context has been lost. Reading from the buffer would return garbage data.",62,null],[4,"CopyError","","Error that can happen when copying data between buffers.",null,null],[13,"NotSupported","","The backend doesn't support copying between buffers.",63,null],[4,"BufferCreationError","","Error that can happen when creating a buffer.",null,null],[13,"OutOfMemory","","Not enough memory to create the buffer.",64,null],[13,"BufferTypeNotSupported","","This type of buffer is not supported.",64,null],[4,"BufferMode","","How the buffer is created.",null,null],[13,"Default","","This is the default mode suitable for any usage. Will never be slow, will never be fast either.",65,null],[13,"Dynamic","","The mode to use when you modify a buffer multiple times per frame. Similar to `Default` in that it is suitable for most usages.",65,null],[13,"Persistent","","Optimized for when you modify a buffer exactly once per frame. You can modify it more than once per frame, but if you modify it too often things will slow down.",65,null],[13,"Immutable","","Optimized when you will never touch the content of the buffer.",65,null],[4,"BufferType","","Type of a buffer.",null,null],[13,"ArrayBuffer","","",66,null],[13,"PixelPackBuffer","","",66,null],[13,"PixelUnpackBuffer","","",66,null],[13,"UniformBuffer","","",66,null],[13,"CopyReadBuffer","","",66,null],[13,"CopyWriteBuffer","","",66,null],[13,"AtomicCounterBuffer","","",66,null],[13,"DispatchIndirectBuffer","","",66,null],[13,"DrawIndirectBuffer","","",66,null],[13,"QueryBuffer","","",66,null],[13,"ShaderStorageBuffer","","",66,null],[13,"TextureBuffer","","",66,null],[13,"TransformFeedbackBuffer","","",66,null],[13,"ElementArrayBuffer","","",66,null],[5,"is_buffer_read_supported","","Returns true if reading from a buffer is supported by the backend.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"readerror"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",62,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",63,{"i":[{"n":"self"}],"o":{"n":"copyerror"}}],[11,"fmt","","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",63,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"deref","","",67,{"i":[{"n":"self"}],"o":{"n":"d"}}],[11,"deref_mut","","",67,{"i":[{"n":"self"}],"o":{"n":"d"}}],[11,"deref","","",68,{"i":[{"n":"self"}],"o":{"n":"d"}}],[11,"write","","Writes the whole content.",69,{"i":[{"n":"self"},{"n":"d"}]}],[11,"len","","Returns the length of the mapping.",69,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"set","","Changes an element of the mapping.",69,{"i":[{"n":"self"},{"n":"usize"},{"n":"d"}]}],[11,"insert","","Inserts a new fence.",70,{"i":[{"n":"self"},{"n":"commandcontext"}]}],[11,"get_id","","",71,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"new","","Builds a new buffer containing the given data. The size of the buffer is equal to the size of the data.",71,{"i":[{"n":"f"},{"n":"t"},{"n":"buffertype"},{"n":"buffermode"}],"o":{"g":["buffer","buffercreationerror"],"n":"result"}}],[11,"empty_unsized","","Builds a new buffer of the given size.",71,{"i":[{"n":"f"},{"n":"buffertype"},{"n":"usize"},{"n":"buffermode"}],"o":{"g":["buffer","buffercreationerror"],"n":"result"}}],[11,"get_context","","Returns the context corresponding to this buffer.",71,{"i":[{"n":"self"}],"o":{"n":"rc"}}],[11,"get_size","","Returns the size in bytes of this buffer.",71,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_persistent","","Returns true if this buffer uses persistent mapping.",71,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"write","","Uploads some data in this buffer.",71,{"i":[{"n":"self"},{"n":"t"}]}],[11,"invalidate","","Invalidates the content of the buffer. The data becomes undefined.",71,{"i":[{"n":"self"}]}],[11,"read","","Reads the content of the buffer.",71,{"i":[{"n":"self"}],"o":{"g":["readerror"],"n":"result"}}],[11,"map","","Maps the buffer in memory for both reading and writing.",71,{"i":[{"n":"self"}],"o":{"n":"mapping"}}],[11,"map_read","","Maps the buffer in memory for reading.",71,{"i":[{"n":"self"}],"o":{"n":"readmapping"}}],[11,"map_write","","Maps the buffer in memory for writing only.",71,{"i":[{"n":"self"}],"o":{"n":"writemapping"}}],[11,"copy_to","","Copies the content of the buffer to another buffer.",71,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["copyerror"],"n":"result"}}],[11,"slice_custom","","Builds a slice that contains an element from inside the buffer.",71,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"bufferslice"}}],[11,"slice_custom_mut","","Same as `slice_custom` but returns a mutable slice.",71,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"buffermutslice"}}],[11,"as_slice","","Builds a slice containing the whole subbuffer.",71,{"i":[{"n":"self"}],"o":{"n":"bufferslice"}}],[11,"as_mut_slice","","Builds a slice containing the whole subbuffer.",71,{"i":[{"n":"self"}],"o":{"n":"buffermutslice"}}],[11,"as_slice_any","","Builds a slice-any containing the whole subbuffer.",71,{"i":[{"n":"self"}],"o":{"n":"bufferanyslice"}}],[11,"empty","","Builds a new buffer of the given size.",71,{"i":[{"n":"f"},{"n":"buffertype"},{"n":"buffermode"}],"o":{"g":["buffer","buffercreationerror"],"n":"result"}}],[11,"empty_array","","Builds a new buffer of the given size.",71,{"i":[{"n":"f"},{"n":"buffertype"},{"n":"usize"},{"n":"buffermode"}],"o":{"g":["buffer","buffercreationerror"],"n":"result"}}],[11,"len","","Returns the number of elements in this buffer.",71,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"slice","","Builds a slice of this subbuffer. Returns `None` if out of range.",71,{"i":[{"n":"self"},{"n":"r"}],"o":{"g":["bufferslice"],"n":"option"}}],[11,"slice_mut","","Builds a slice of this subbuffer. Returns `None` if out of range.",71,{"i":[{"n":"self"},{"n":"r"}],"o":{"g":["buffermutslice"],"n":"option"}}],[11,"read_as_texture_1d","","Reads the content of the buffer.",71,{"i":[{"n":"self"}],"o":{"g":["readerror"],"n":"result"}}],[11,"fmt","","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"drop","","",71,{"i":[{"n":"self"}]}],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"bufferslice"}}],[11,"get_size","","Returns the size in bytes of this slice.",72,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"get_context","","Returns the context corresponding to this buffer.",72,{"i":[{"n":"self"}],"o":{"n":"rc"}}],[11,"write","","Uploads some data in this buffer.",72,{"i":[{"n":"self"},{"n":"t"}]}],[11,"invalidate","","Invalidates the content of the slice. The data becomes undefined.",72,{"i":[{"n":"self"}]}],[11,"read","","Reads the content of the buffer.",72,{"i":[{"n":"self"}],"o":{"g":["readerror"],"n":"result"}}],[11,"copy_to","","Copies the content of this slice to another slice.",72,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["copyerror"],"n":"result"}}],[11,"slice_custom","","Builds a slice that contains an element from inside the buffer.",72,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"bufferslice"}}],[11,"as_slice_any","","Builds a slice-any containing the whole subbuffer.",72,{"i":[{"n":"self"}],"o":{"n":"bufferanyslice"}}],[11,"len","","Returns the number of elements in this slice.",72,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"slice","","Builds a subslice of this slice. Returns `None` if out of range.",72,{"i":[{"n":"self"},{"n":"r"}],"o":{"g":["bufferslice"],"n":"option"}}],[11,"read_as_texture_1d","","Reads the content of the buffer.",72,{"i":[{"n":"self"}],"o":{"g":["readerror"],"n":"result"}}],[11,"fmt","","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"from","","",72,{"i":[{"n":"buffermutslice"}],"o":{"n":"bufferslice"}}],[11,"from","","",72,{"i":[{"n":"buffer"}],"o":{"n":"bufferslice"}}],[11,"from","","",72,{"i":[{"n":"buffer"}],"o":{"n":"bufferslice"}}],[11,"get_size","","Returns the size in bytes of this slice.",73,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"map","","Maps the buffer in memory for both reading and writing.",73,{"i":[{"n":"self"}],"o":{"n":"mapping"}}],[11,"map_read","","Maps the buffer in memory for reading.",73,{"i":[{"n":"self"}],"o":{"n":"readmapping"}}],[11,"map_write","","Maps the buffer in memory for writing only.",73,{"i":[{"n":"self"}],"o":{"n":"writemapping"}}],[11,"write","","Uploads some data in this buffer.",73,{"i":[{"n":"self"},{"n":"t"}]}],[11,"invalidate","","Invalidates the content of the slice. The data becomes undefined.",73,{"i":[{"n":"self"}]}],[11,"read","","Reads the content of the buffer.",73,{"i":[{"n":"self"}],"o":{"g":["readerror"],"n":"result"}}],[11,"copy_to","","Copies the content of this slice to another slice.",73,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["copyerror"],"n":"result"}}],[11,"slice_custom","","Builds a slice that contains an element from inside the buffer.",73,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"buffermutslice"}}],[11,"as_slice_any","","Builds a slice-any containing the whole subbuffer.",73,{"i":[{"n":"self"}],"o":{"n":"bufferanyslice"}}],[11,"len","","Returns the number of elements in this slice.",73,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"slice","","Builds a subslice of this slice. Returns `None` if out of range.",73,{"i":[{"n":"self"},{"n":"r"}],"o":{"g":["buffermutslice"],"n":"option"}}],[11,"read_as_texture_1d","","Reads the content of the buffer.",73,{"i":[{"n":"self"}],"o":{"g":["readerror"],"n":"result"}}],[11,"fmt","","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"from","","",73,{"i":[{"n":"buffer"}],"o":{"n":"buffermutslice"}}],[11,"as_slice_any","","Builds a slice-any containing the whole subbuffer.",74,{"i":[{"n":"self"}],"o":{"n":"bufferanyslice"}}],[11,"as_typed_slice_mut","","Builds a mutable typed slice containing the whole subbuffer, without checking the type.",74,{"i":[{"n":"self"}],"o":{"n":"buffermutslice"}}],[11,"as_typed_slice","","Builds a typed slice containing the whole subbuffer, without checking the type.",74,{"i":[{"n":"self"}],"o":{"n":"bufferslice"}}],[11,"get_elements_size","","Returns the size in bytes of each element in the buffer.",74,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"get_elements_count","","Returns the number of elements in the buffer.",74,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"get_context","","Returns the context corresponding to this buffer.",74,{"i":[{"n":"self"}],"o":{"n":"rc"}}],[11,"get_size","","Returns the number of bytes in this subbuffer.",74,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"invalidate","","Invalidates the content of the buffer. The data becomes undefined.",74,{"i":[{"n":"self"}]}],[11,"read","","UNSTABLE. This function can be removed at any moment without any further notice.",74,{"i":[{"n":"self"}],"o":{"g":["readerror"],"n":"result"}}],[11,"from","","",74,{"i":[{"n":"buffer"}],"o":{"n":"bufferany"}}],[11,"drop","","",74,{"i":[{"n":"self"}]}],[11,"fmt","","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"clone","","",75,{"i":[{"n":"self"}],"o":{"n":"bufferanyslice"}}],[11,"get_id","","",75,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"get_size","","Returns the number of bytes in this slice.",75,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"get_elements_size","","Returns the size in bytes of each element in the buffer.",75,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"get_elements_count","","Returns the number of elements in the buffer.",75,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"invalidate","","Invalidates the content of the slice. The data becomes undefined.",75,{"i":[{"n":"self"}]}],[11,"get_context","","Returns the context corresponding to this buffer.",75,{"i":[{"n":"self"}],"o":{"n":"rc"}}],[11,"fmt","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[8,"Content","","Trait for types of data that can be put inside buffers.",null,null],[16,"Owned","","A type that holds a sized version of the content.",76,null],[10,"read","","Prepares an output buffer, then turns this buffer into an `Owned`.",76,{"i":[{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"get_elements_size","","Returns the size of each element.",76,{"o":{"n":"usize"}}],[10,"to_void_ptr","","Produces a pointer to the data.",76,null],[10,"ref_from_ptr","","Builds a pointer to this type from a raw pointer.",76,null],[10,"is_size_suitable","","Returns true if the size is suitable to store a type like this.",76,{"i":[{"n":"usize"}],"o":{"n":"bool"}}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"buffercreationerror"}}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",64,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"buffermode"}}],[11,"eq","","",65,{"i":[{"n":"self"},{"n":"buffermode"}],"o":{"n":"bool"}}],[11,"default","","",65,{"o":{"n":"buffermode"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"buffertype"}}],[11,"eq","","",66,{"i":[{"n":"self"},{"n":"buffertype"}],"o":{"n":"bool"}}],[0,"debug","glium","",null,null],[3,"TimestampQuery","glium::debug","Allows you to obtain the timestamp inside the OpenGL commands queue.",null,null],[4,"DebugCallbackBehavior","","Describes the behavior that the debug output should have.",null,null],[13,"Ignore","","Don't do anything. This is the default behavior in release.",77,null],[13,"DebugMessageOnError","","Print a message on stdout on error, except in some circumstances like when compiling shaders. This is the default behavior in debug mode.",77,null],[13,"PrintAll","","Print every single output received by the driver.",77,null],[13,"Custom","","Use a custom callback.",77,null],[12,"callback","glium::debug::DebugCallbackBehavior","The function to be called.",77,null],[12,"synchronous","","Whether or not it should be called immediately (true) or asynchronously (false).",77,null],[4,"Severity","glium::debug","Severity of a debug message.",null,null],[13,"Notification","","Anything that isn't an error or performance issue.",78,null],[13,"Low","","Redundant state-change performance warning, or unimportant undefined behavior.",78,null],[13,"Medium","","Major performance warnings, shader compilation/linking warnings, or the use of deprecated functionality.",78,null],[13,"High","","All OpenGL Errors, shader compilation/linking errors, or highly-dangerous undefined behavior.",78,null],[4,"Source","","Source of a debug message.",null,null],[13,"Api","","Calls to the OpenGL API.",79,null],[13,"WindowSystem","","Calls to a window-system API.",79,null],[13,"ShaderCompiler","","A compiler for a shading language.",79,null],[13,"ThirdParty","","An application associated with Openctxt.gl.",79,null],[13,"Application","","Explicitly generated by Glium or the application.",79,null],[13,"OtherSource","","",79,null],[4,"MessageType","","Type of a debug message.",null,null],[13,"Error","","An error, typically from the API",80,null],[13,"DeprecatedBehavior","","Some behavior marked deprecated has been used",80,null],[13,"UndefinedBehavior","","Something has invoked undefined behavior",80,null],[13,"Portability","","Some functionality the user relies upon is not portable",80,null],[13,"Performance","","Code has triggered possible performance issues",80,null],[13,"Marker","","Command stream annotation",80,null],[13,"PushGroup","","Entering a debug group",80,null],[13,"PopGroup","","Leaving a debug group",80,null],[13,"Other","","Any other event",80,null],[6,"DebugCallback","","Represents a callback that can be used for the debug output feature of OpenGL.",null,null],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"severity"}}],[11,"fmt","","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",78,{"i":[{"n":"self"},{"n":"severity"}],"o":{"n":"bool"}}],[11,"clone","","",79,{"i":[{"n":"self"}],"o":{"n":"source"}}],[11,"fmt","","",79,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",80,{"i":[{"n":"self"}],"o":{"n":"messagetype"}}],[11,"fmt","","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new `TimestampQuery`. Returns `None` if the backend doesn't support it.",81,{"i":[{"n":"f"}],"o":{"g":["timestampquery"],"n":"option"}}],[11,"is_ready","","Queries the counter to see if the timestamp is already available.",81,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get","","Returns the value of the timestamp. Blocks until it is available.",81,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[0,"draw_parameters","glium","Describes miscellaneous parameters to be used when drawing.",null,null],[3,"Blend","glium::draw_parameters","Blend effect that the GPU will use for blending.",null,null],[12,"color","","The blending function for color channels.",37,null],[12,"alpha","","The blending function for alpha channels.",37,null],[12,"constant_value","","A constant color that can be used in the blending functions.",37,null],[3,"Depth","","Represents the depth parameters of a draw command.",null,null],[12,"test","","The function that the GPU will use to determine whether to write over an existing pixel on the target. Don't forget to set `depth_write` appropriately if you use a depth test.",38,null],[12,"write","","Sets whether the GPU will write the depth values on the depth buffer if they pass the depth test.",38,null],[12,"range","","The range of possible Z values in surface coordinates.",38,null],[12,"clamp","","Sets whether the depth values of samples should be clamped to `0.0` and `1.0`.",38,null],[3,"SamplesPassedQuery","","A query that allows you to know the number of samples written to the output during the draw operations where this query was active.",null,null],[3,"TimeElapsedQuery","","A query that allows you to know the number of nanoseconds that have elapsed during the draw operations.",null,null],[3,"PrimitivesGeneratedQuery","","Query that allows you to know the number of primitives generated by the geometry shader. Will stay at `0` if you use it without any active geometry shader.",null,null],[3,"AnySamplesPassedQuery","","A query type that allows you to know whether any sample has been written to the output during the operations executed with this query.",null,null],[3,"TransformFeedbackPrimitivesWrittenQuery","","Query that allows you to know the number of primitives generated by transform feedback.",null,null],[3,"Stencil","","Describes the parameters that must be used for the stencil operations when drawing.",null,null],[12,"test_clockwise","","A comparison against the existing value in the stencil buffer.",82,null],[12,"reference_value_clockwise","","Reference value that is used by `stencil_test_clockwise`, `stencil_fail_operation_clockwise`, `stencil_pass_depth_fail_operation_clockwise` and `stencil_depth_pass_operation_clockwise`.",82,null],[12,"write_mask_clockwise","","Allows specifying a mask when writing data on the stencil buffer.",82,null],[12,"fail_operation_clockwise","","Specifies the operation to do when a fragment fails the stencil test.",82,null],[12,"pass_depth_fail_operation_clockwise","","Specifies the operation to do when a fragment passes the stencil test but fails the depth test.",82,null],[12,"depth_pass_operation_clockwise","","Specifies the operation to do when a fragment passes both the stencil and depth tests.",82,null],[12,"test_counter_clockwise","","A comparaison against the existing value in the stencil buffer.",82,null],[12,"reference_value_counter_clockwise","","Reference value that is used by `stencil_test_counter_clockwise`, `stencil_fail_operation_counter_clockwise`, `stencil_pass_depth_fail_operation_counter_clockwise` and `stencil_depth_pass_operation_counter_clockwise`.",82,null],[12,"write_mask_counter_clockwise","","Allows specifying a mask when writing data on the stencil buffer.",82,null],[12,"fail_operation_counter_clockwise","","Specifies the operation to do when a fragment fails the stencil test.",82,null],[12,"pass_depth_fail_operation_counter_clockwise","","Specifies the operation to do when a fragment passes the stencil test but fails the depth test.",82,null],[12,"depth_pass_operation_counter_clockwise","","Specifies the operation to do when a fragment passes both the stencil and depth tests.",82,null],[3,"DrawParameters","","Represents the parameters to use when drawing.",null,null],[12,"depth","","How the fragment will interact with the depth buffer.",83,null],[12,"stencil","","How the fragment will interact with the stencil buffer.",83,null],[12,"blend","","The effect that the GPU will use to merge the existing pixel with the pixel that is being written.",83,null],[12,"color_mask","","Allows you to disable some color components.",83,null],[12,"line_width","","Width in pixels of the lines to draw when drawing lines.",83,null],[12,"point_size","","Diameter in pixels of the points to draw when drawing points.",83,null],[12,"clip_planes_bitmask","","If the bit corresponding to 2^i is 1 in the bitmask, then GL_CLIP_DISTANCEi is enabled.",83,null],[12,"backface_culling","","Whether or not the GPU should filter out some faces.",83,null],[12,"polygon_mode","","How to render polygons. The default value is `Fill`.",83,null],[12,"multisampling","","Whether multisample antialiasing (MSAA) should be used. Default value is `true`.",83,null],[12,"dithering","","Whether dithering is activated. Default value is `true`.",83,null],[12,"viewport","","The viewport to use when drawing.",83,null],[12,"scissor","","If specified, only pixels in this rect will be displayed. Default is `None`.",83,null],[12,"draw_primitives","","If `false`, the pipeline will stop after the primitives generation stage. The default value is `true`.",83,null],[12,"samples_passed_query","","If set, each sample (ie. usually each pixel) written to the output adds one to the counter of the `SamplesPassedQuery`.",83,null],[12,"time_elapsed_query","","If set, the time it took for the GPU to execute this draw command is added to the total stored inside the `TimeElapsedQuery`.",83,null],[12,"primitives_generated_query","","If set, the number of primitives generated is added to the total stored inside the query.",83,null],[12,"transform_feedback_primitives_written_query","","If set, the number of vertices written by transform feedback.",83,null],[12,"condition","","If set, the commands will only be executed if the specified query contains `true` or a number different than 0.",83,null],[12,"transform_feedback","","If set, then the generated primitives will be written back to a buffer.",83,null],[12,"smooth","","If set, then the generated primitives will be smoothed.",83,null],[12,"provoking_vertex","","In your vertex shader or geometry shader, you have the possibility to mark some output varyings as `flat`. If this is the case, the value of one of the vertices will be used for the whole primitive. This variable allows you to specify which vertex.",83,null],[12,"primitive_bounding_box","","Hint for the GPU of the bounding box of the geometry.",83,null],[12,"primitive_restart_index","","If enabled, will split the index buffer (if any is used in the draw call)  at the MAX value of the IndexType (u8::MAX, u16::MAX or u32::MAX) and start a new primitive of the same type (\"primitive restarting\"). Supported on > OpenGL 3.1 or OpenGL ES 3.0.  If the backend does not support GL_PRIMITIVE_RESTART_FIXED_INDEX, an Error  of type `FixedIndexRestartingNotSupported` will be returned.",83,null],[3,"ConditionalRendering","","Condition whether to render or not.",null,null],[12,"query","","The query to use.",84,null],[12,"wait","","If true, the GPU will wait until the query result has been obtained. If false, the GPU is free to ignore the query and draw anyway.",84,null],[12,"per_region","","If true, only samples that match those that were written with the query active will be drawn.",84,null],[4,"BlendingFunction","","Function that the GPU will use for blending.",null,null],[13,"AlwaysReplace","","Simply overwrite the destination pixel with the source pixel.",44,null],[13,"Min","","For each individual component (red, green, blue, and alpha), the minimum value is chosen between the source and the destination.",44,null],[13,"Max","","For each individual component (red, green, blue, and alpha), the maximum value is chosen between the source and the destination.",44,null],[13,"Addition","","For each individual component (red, green, blue, and alpha), a weighted addition between the source and the destination.",44,null],[12,"source","glium::draw_parameters::BlendingFunction","The factor to apply to the source pixel.",44,null],[12,"destination","","The factor to apply to the destination pixel.",44,null],[13,"Subtraction","glium::draw_parameters","For each individual component (red, green, blue, and alpha), a weighted subtraction of the source by the destination.",44,null],[12,"source","glium::draw_parameters::BlendingFunction","The factor to apply to the source pixel.",44,null],[12,"destination","","The factor to apply to the destination pixel.",44,null],[13,"ReverseSubtraction","glium::draw_parameters","For each individual component (red, green, blue, and alpha), a weighted subtraction of the destination by the source.",44,null],[12,"source","glium::draw_parameters::BlendingFunction","The factor to apply to the source pixel.",44,null],[12,"destination","","The factor to apply to the destination pixel.",44,null],[4,"LinearBlendingFactor","glium::draw_parameters","Indicates which value to multiply each component with.",null,null],[13,"Zero","","Multiply the source or destination component by zero, which always gives `0.0`.",45,null],[13,"One","","Multiply the source or destination component by one, which always gives you the original value.",45,null],[13,"SourceColor","","Multiply the source or destination component by its corresponding value in the source.",45,null],[13,"OneMinusSourceColor","","Equivalent to `1 - SourceColor`.",45,null],[13,"DestinationColor","","Multiply the source or destination component by its corresponding value in the destination.",45,null],[13,"OneMinusDestinationColor","","Equivalent to `1 - DestinationColor`.",45,null],[13,"SourceAlpha","","Multiply the source or destination component by the alpha value of the source.",45,null],[13,"SourceAlphaSaturate","","Multiply the source or destination component by the smallest value of `SourceAlpha` and `1 - DestinationAlpha`.",45,null],[13,"OneMinusSourceAlpha","","Multiply the source or destination component by `1.0` minus the alpha value of the source.",45,null],[13,"DestinationAlpha","","Multiply the source or destination component by the alpha value of the destination.",45,null],[13,"OneMinusDestinationAlpha","","Multiply the source or destination component by `1.0` minus the alpha value of the destination.",45,null],[13,"ConstantColor","","Multiply the source or destination component by the corresponding value in `Blend::const_value`.",45,null],[13,"OneMinusConstantColor","","Multiply the source or destination component by `1.0` minus the corresponding value in `Blend::const_value`.",45,null],[13,"ConstantAlpha","","Multiply the source or destination component by the alpha value of `Blend::const_value`.",45,null],[13,"OneMinusConstantAlpha","","Multiply the source or destination component by `1.0` minus the alpha value of `Blend::const_value`.",45,null],[4,"DepthTest","","The function that the GPU will use to determine whether to write over an existing pixel on the target.",null,null],[13,"Ignore","","Never replace the target pixel.",46,null],[13,"Overwrite","","Always replace the target pixel.",46,null],[13,"IfEqual","","Replace if the z-value of the source is equal to the destination.",46,null],[13,"IfNotEqual","","Replace if the z-value of the source is different than the destination.",46,null],[13,"IfMore","","Replace if the z-value of the source is more than the destination.",46,null],[13,"IfMoreOrEqual","","Replace if the z-value of the source is more than, or equal to the destination.",46,null],[13,"IfLess","","Replace if the z-value of the source is less than the destination.",46,null],[13,"IfLessOrEqual","","Replace if the z-value of the source is less than, or equal to the destination.",46,null],[4,"DepthClamp","","Specifies whether the depth value of samples should be clamped to `0.0` or `1.0`.",null,null],[13,"NoClamp","","Do not clamp. Samples with values outside of the `[0.0, 1.0]` range will be discarded.",85,null],[13,"Clamp","","Clamp the depth values. All samples will always be drawn.",85,null],[13,"ClampNear","","Depth values inferior to `0.0` will be clamped to `0.0`.",85,null],[13,"ClampFar","","Depth values superior to `1.0` will be clamped to `1.0`.",85,null],[4,"QueryCreationError","","Error that can happen when creating a query object.",null,null],[13,"NotSupported","","The given query type is not supported.",86,null],[4,"StencilTest","","Specifies which comparison the GPU will do to determine whether a sample passes the stencil test. The general equation is `(ref & mask) CMP (stencil & mask)`, where `ref` is the reference value (`stencil_reference_value_clockwise` or `stencil_reference_value_counter_clockwise`), `CMP` is the comparison chosen, and `stencil` is the current value in the stencil buffer.",null,null],[13,"AlwaysPass","","The stencil test always passes.",47,null],[13,"AlwaysFail","","The stencil test always fails.",47,null],[13,"IfLess","","`(ref & mask) < (stencil & mask)`",47,null],[12,"mask","glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",47,null],[13,"IfLessOrEqual","glium::draw_parameters","`(ref & mask) <= (stencil & mask)`",47,null],[12,"mask","glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",47,null],[13,"IfMore","glium::draw_parameters","`(ref & mask) > (stencil & mask)`",47,null],[12,"mask","glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",47,null],[13,"IfMoreOrEqual","glium::draw_parameters","`(ref & mask) >= (stencil & mask)`",47,null],[12,"mask","glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",47,null],[13,"IfEqual","glium::draw_parameters","`(ref & mask) == (stencil & mask)`",47,null],[12,"mask","glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",47,null],[13,"IfNotEqual","glium::draw_parameters","`(ref & mask) != (stencil & mask)`",47,null],[12,"mask","glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",47,null],[4,"StencilOperation","glium::draw_parameters","Specificies which operation the GPU will do depending on the result of the stencil test.",null,null],[13,"Keep","","Keeps the value currently in the stencil buffer.",48,null],[13,"Zero","","Writes zero in the stencil buffer.",48,null],[13,"Replace","","Writes the reference value (`stencil_reference_value_clockwise` or `stencil_reference_value_counter_clockwise`) in the stencil buffer.",48,null],[13,"Increment","","Increments the value currently in the stencil buffer. If the value is the maximum, don't do anything.",48,null],[13,"IncrementWrap","","Increments the value currently in the stencil buffer. If the value is the maximum, wrap to `0`.",48,null],[13,"Decrement","","Decrements the value currently in the stencil buffer. If the value is `0`, don't do anything.",48,null],[13,"DecrementWrap","","Decrements the value currently in the stencil buffer. If the value is `0`, wrap to `-1`.",48,null],[13,"Invert","","Inverts each bit of the value.",48,null],[4,"BackfaceCullingMode","","Describes how triangles should be filtered before the fragment processing. Backface culling is purely an optimization. If you don't know what this does, just use `CullingDisabled`.",null,null],[13,"CullingDisabled","","All triangles are always drawn.",87,null],[13,"CullCounterClockwise","","Triangles whose vertices are counterclockwise won't be drawn.",87,null],[13,"CullClockwise","","Triangles whose vertices are clockwise won't be drawn.",87,null],[4,"PolygonMode","","Defines how the device should render polygons.",null,null],[13,"Point","","Only draw a single point at each vertex.",88,null],[13,"Line","","Only draw a line in the boundaries of each polygon.",88,null],[13,"Fill","","Fill the content of the polygon. This is the default mode.",88,null],[4,"Smooth","","Specifies a hint for the smoothing.",null,null],[13,"Fastest","","The most efficient option should be chosen.",89,null],[13,"Nicest","","The most correct, or highest quality, option should be chosen.",89,null],[13,"DontCare","","No preference.",89,null],[4,"ProvokingVertex","","The vertex to use for flat shading.",null,null],[13,"LastVertex","","Use the last vertex of each primitive.",90,null],[13,"FirstVertex","","Use the first vertex of each primitive.",90,null],[4,"SamplesQueryParam","","The query to use for samples counting.",null,null],[13,"SamplesPassedQuery","","A `SamplesPassedQuery`.",91,null],[13,"AnySamplesPassedQuery","","A `AnySamplesPassedQuery`.",91,null],[5,"validate","","DEPRECATED. Checks parameters and returns an error if something is wrong.",null,{"i":[{"n":"context"},{"n":"drawparameters"}],"o":{"g":["drawerror"],"n":"result"}}],[11,"clone","glium","",37,{"i":[{"n":"self"}],"o":{"n":"blend"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",37,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"ne","","",37,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"alpha_blending","","Returns a blend effect to add transparent objects over others.",37,{"o":{"n":"blend"}}],[11,"default","","",37,{"o":{"n":"blend"}}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"blendingfunction"}}],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",44,{"i":[{"n":"self"},{"n":"blendingfunction"}],"o":{"n":"bool"}}],[11,"ne","","",44,{"i":[{"n":"self"},{"n":"blendingfunction"}],"o":{"n":"bool"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"linearblendingfactor"}}],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",45,{"i":[{"n":"self"},{"n":"linearblendingfactor"}],"o":{"n":"bool"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"depth"}}],[11,"default","","",38,{"o":{"n":"depth"}}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"depthtest"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",46,{"i":[{"n":"self"},{"n":"depthtest"}],"o":{"n":"bool"}}],[11,"requires_depth_buffer","","Returns true if the function requires a depth buffer to be used.",46,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","glium::draw_parameters","",85,{"i":[{"n":"self"}],"o":{"n":"depthclamp"}}],[11,"fmt","","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",85,{"i":[{"n":"self"},{"n":"depthclamp"}],"o":{"n":"bool"}}],[11,"clone","","",86,{"i":[{"n":"self"}],"o":{"n":"querycreationerror"}}],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",86,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Builds a new query.",92,{"i":[{"n":"f"}],"o":{"g":["samplespassedquery","querycreationerror"],"n":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",92,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",92,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",92,{"i":[{"n":"self"},{"g":["u32"],"n":"bufferslice"}],"o":{"g":["tobuffererror"],"n":"result"}}],[11,"get_id","","",92,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",93,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Builds a new query.",93,{"i":[{"n":"f"}],"o":{"g":["timeelapsedquery","querycreationerror"],"n":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",93,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",93,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",93,{"i":[{"n":"self"},{"g":["u32"],"n":"bufferslice"}],"o":{"g":["tobuffererror"],"n":"result"}}],[11,"get_id","","",93,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",94,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Builds a new query.",94,{"i":[{"n":"f"},{"n":"bool"}],"o":{"g":["anysamplespassedquery","querycreationerror"],"n":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",94,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",94,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",94,{"i":[{"n":"self"},{"g":["u32"],"n":"bufferslice"}],"o":{"g":["tobuffererror"],"n":"result"}}],[11,"get_id","","",94,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",95,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Builds a new query.",95,{"i":[{"n":"f"}],"o":{"g":["primitivesgeneratedquery","querycreationerror"],"n":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",95,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",95,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",95,{"i":[{"n":"self"},{"g":["u32"],"n":"bufferslice"}],"o":{"g":["tobuffererror"],"n":"result"}}],[11,"get_id","","",95,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",96,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Builds a new query.",96,{"i":[{"n":"f"}],"o":{"g":["transformfeedbackprimitiveswrittenquery","querycreationerror"],"n":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",96,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",96,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",96,{"i":[{"n":"self"},{"g":["u32"],"n":"bufferslice"}],"o":{"g":["tobuffererror"],"n":"result"}}],[11,"get_id","","",96,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"clone","","",82,{"i":[{"n":"self"}],"o":{"n":"stencil"}}],[11,"fmt","","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",82,{"o":{"n":"stencil"}}],[11,"clone","glium","",47,{"i":[{"n":"self"}],"o":{"n":"stenciltest"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"stenciltest"}],"o":{"n":"bool"}}],[11,"ne","","",47,{"i":[{"n":"self"},{"n":"stenciltest"}],"o":{"n":"bool"}}],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"stenciloperation"}}],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",48,{"i":[{"n":"self"},{"n":"stenciloperation"}],"o":{"n":"bool"}}],[11,"clone","glium::draw_parameters","",87,{"i":[{"n":"self"}],"o":{"n":"backfacecullingmode"}}],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",87,{"i":[{"n":"self"},{"n":"backfacecullingmode"}],"o":{"n":"bool"}}],[11,"clone","","",88,{"i":[{"n":"self"}],"o":{"n":"polygonmode"}}],[11,"fmt","","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",88,{"i":[{"n":"self"},{"n":"polygonmode"}],"o":{"n":"bool"}}],[11,"clone","","",89,{"i":[{"n":"self"}],"o":{"n":"smooth"}}],[11,"fmt","","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",89,{"i":[{"n":"self"},{"n":"smooth"}],"o":{"n":"bool"}}],[11,"clone","","",90,{"i":[{"n":"self"}],"o":{"n":"provokingvertex"}}],[11,"fmt","","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",90,{"i":[{"n":"self"},{"n":"provokingvertex"}],"o":{"n":"bool"}}],[11,"clone","","",83,{"i":[{"n":"self"}],"o":{"n":"drawparameters"}}],[11,"fmt","","",83,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",84,{"i":[{"n":"self"}],"o":{"n":"conditionalrendering"}}],[11,"fmt","","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",91,{"i":[{"n":"self"}],"o":{"n":"samplesqueryparam"}}],[11,"from","","",91,{"i":[{"n":"samplespassedquery"}],"o":{"n":"samplesqueryparam"}}],[11,"from","","",91,{"i":[{"n":"anysamplespassedquery"}],"o":{"n":"samplesqueryparam"}}],[11,"default","","",83,{"o":{"n":"drawparameters"}}],[0,"framebuffer","glium","Framebuffers allow you to customize the color, depth and stencil buffers you will draw on.",null,null],[3,"DefaultFramebuffer","glium::framebuffer","A framebuffer which has only one color attachment.",null,null],[3,"RenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target.",null,null],[3,"RenderBufferAny","","A RenderBuffer of indeterminate type.",null,null],[3,"DepthRenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target.",null,null],[3,"StencilRenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target.",null,null],[3,"DepthStencilRenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target.",null,null],[3,"SimpleFrameBuffer","","A framebuffer which has only one color attachment.",null,null],[3,"MultiOutputFrameBuffer","","This struct is useless for the moment.",null,null],[3,"EmptyFrameBuffer","","A framebuffer with no attachment at all.",null,null],[4,"DefaultFramebufferAttachment","","One of the color attachments on the default framebuffer.",null,null],[13,"BackLeft","","The backbuffer for the left eye. Equivalent to the backbuffer if stereoscopy is disabled.",97,null],[13,"BackRight","","The backbuffer for the right eye. May not be present.",97,null],[13,"FrontLeft","","The frontbuffer for the left eye. Equivalent to the frontbuffer if stereoscopy is disabled. May not be accessible.",97,null],[13,"FrontRight","","The frontbuffer for the right eye. May not be present or accessible.",97,null],[4,"RenderBufferCreationError","","Error while creating a render buffer.",null,null],[13,"FormatNotSupported","","The requested format is not supported.",98,null],[4,"ValidationError","","An error that can happen while validating attachments.",null,null],[13,"EmptyFramebufferObjectsNotSupported","","You requested an empty framebuffer object, but they are not supported.",99,null],[13,"EmptyFramebufferUnsupportedDimensions","","The requested characteristics of an empty framebuffer object are out of range.",99,null],[13,"DimensionsMismatchNotSupported","","The backend doesn't support attachments with various dimensions.",99,null],[13,"SamplesCountMismatch","","All attachments must have the same number of samples.",99,null],[13,"TooManyColorAttachments","","Backends only support a certain number of color attachments.",99,null],[12,"maximum","glium::framebuffer::ValidationError","Maximum number of attachments.",99,null],[12,"obtained","","Number of attachments that were given.",99,null],[4,"ColorAttachment","glium::framebuffer","Describes an attachment for a color buffer.",null,null],[13,"Texture","","A texture.",100,null],[13,"RenderBuffer","","A render buffer.",100,null],[4,"DepthAttachment","","Describes an attachment for a depth buffer.",null,null],[13,"Texture","","A texture.",101,null],[13,"RenderBuffer","","A render buffer.",101,null],[4,"StencilAttachment","","Describes an attachment for a stencil buffer.",null,null],[13,"Texture","","A texture.",102,null],[13,"RenderBuffer","","A render buffer.",102,null],[4,"DepthStencilAttachment","","Describes an attachment for a depth and stencil buffer.",null,null],[13,"Texture","","A texture.",103,null],[13,"RenderBuffer","","A render buffer.",103,null],[5,"is_dimensions_mismatch_supported","","Returns true if the backend supports attachments with varying dimensions.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[11,"clone","","",97,{"i":[{"n":"self"}],"o":{"n":"defaultframebufferattachment"}}],[11,"fmt","","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"back_left","","Creates a `DefaultFramebuffer` with the back left buffer.",104,{"i":[{"n":"f"}],"o":{"n":"defaultframebuffer"}}],[11,"clear","","",104,{"i":[{"n":"self"},{"g":["rect"],"n":"option"},{"n":"option"},{"n":"bool"},{"g":["f32"],"n":"option"},{"g":["i32"],"n":"option"}]}],[11,"get_dimensions","","",104,null],[11,"get_depth_buffer_bits","","",104,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"get_stencil_buffer_bits","","",104,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"draw","","",104,{"i":[{"n":"self"},{"n":"v"},{"n":"i"},{"n":"program"},{"n":"u"},{"n":"drawparameters"}],"o":{"g":["drawerror"],"n":"result"}}],[11,"blit_color","","",104,{"i":[{"n":"self"},{"n":"rect"},{"n":"s"},{"n":"blittarget"},{"n":"magnifysamplerfilter"}]}],[11,"blit_from_frame","","",104,{"i":[{"n":"self"},{"n":"rect"},{"n":"blittarget"},{"n":"magnifysamplerfilter"}]}],[11,"blit_from_simple_framebuffer","","",104,{"i":[{"n":"self"},{"n":"simpleframebuffer"},{"n":"rect"},{"n":"blittarget"},{"n":"magnifysamplerfilter"}]}],[11,"blit_from_multioutput_framebuffer","","",104,{"i":[{"n":"self"},{"n":"multioutputframebuffer"},{"n":"rect"},{"n":"blittarget"},{"n":"magnifysamplerfilter"}]}],[11,"clone","","",98,{"i":[{"n":"self"}],"o":{"n":"creationerror"}}],[11,"fmt","","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",98,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"new","","Builds a new render buffer.",105,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"u32"},{"n":"u32"}],"o":{"g":["renderbuffer","creationerror"],"n":"result"}}],[11,"deref","","",105,{"i":[{"n":"self"}],"o":{"n":"renderbufferany"}}],[11,"deref_mut","","",105,{"i":[{"n":"self"}],"o":{"n":"renderbufferany"}}],[11,"get_id","","",105,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"new","","Builds a new render buffer.",106,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthrenderbuffer","creationerror"],"n":"result"}}],[11,"deref","","",106,{"i":[{"n":"self"}],"o":{"n":"renderbufferany"}}],[11,"deref_mut","","",106,{"i":[{"n":"self"}],"o":{"n":"renderbufferany"}}],[11,"get_id","","",106,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"new","","Builds a new render buffer.",107,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stencilrenderbuffer","creationerror"],"n":"result"}}],[11,"deref","","",107,{"i":[{"n":"self"}],"o":{"n":"renderbufferany"}}],[11,"deref_mut","","",107,{"i":[{"n":"self"}],"o":{"n":"renderbufferany"}}],[11,"get_id","","",107,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"new","","Builds a new render buffer.",108,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstencilrenderbuffer","creationerror"],"n":"result"}}],[11,"deref","","",108,{"i":[{"n":"self"}],"o":{"n":"renderbufferany"}}],[11,"deref_mut","","",108,{"i":[{"n":"self"}],"o":{"n":"renderbufferany"}}],[11,"get_id","","",108,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"get_dimensions","","Returns the dimensions of the render buffer.",109,null],[11,"get_samples","","Returns the number of samples of the render buffer, or `None` if multisampling isn't enabled.",109,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"get_context","","Returns the context used to create this renderbuffer.",109,{"i":[{"n":"self"}],"o":{"n":"rc"}}],[11,"kind","","Returns the kind of renderbuffer.",109,{"i":[{"n":"self"}],"o":{"n":"texturekind"}}],[11,"drop","","",109,{"i":[{"n":"self"}]}],[11,"get_id","","",109,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[8,"ToColorAttachment","","Trait for objects that can be used as color attachments.",null,null],[10,"to_color_attachment","","Builds the `ColorAttachment`.",110,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[8,"ToDepthAttachment","","Trait for objects that can be used as depth attachments.",null,null],[10,"to_depth_attachment","","Builds the `DepthAttachment`.",111,{"i":[{"n":"self"}],"o":{"n":"depthattachment"}}],[8,"ToStencilAttachment","","Trait for objects that can be used as stencil attachments.",null,null],[10,"to_stencil_attachment","","Builds the `StencilAttachment`.",112,{"i":[{"n":"self"}],"o":{"n":"stencilattachment"}}],[8,"ToDepthStencilAttachment","","Trait for objects that can be used as depth and stencil attachments.",null,null],[10,"to_depth_stencil_attachment","","Builds the `DepthStencilAttachment`.",113,{"i":[{"n":"self"}],"o":{"n":"depthstencilattachment"}}],[11,"new","","Creates a `SimpleFrameBuffer` with a single color attachment and no depth nor stencil buffer.",114,{"i":[{"n":"f"},{"n":"c"}],"o":{"g":["simpleframebuffer","validationerror"],"n":"result"}}],[11,"with_depth_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a depth buffer, but no stencil buffer.",114,{"i":[{"n":"f"},{"n":"c"},{"n":"d"}],"o":{"g":["simpleframebuffer","validationerror"],"n":"result"}}],[11,"depth_only","","Creates a `SimpleFrameBuffer` with a single color attachment and no depth nor stencil buffer.",114,{"i":[{"n":"f"},{"n":"d"}],"o":{"g":["simpleframebuffer","validationerror"],"n":"result"}}],[11,"with_depth_and_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment, a depth buffer, and a stencil buffer.",114,{"i":[{"n":"f"},{"n":"c"},{"n":"d"},{"n":"s"}],"o":{"g":["simpleframebuffer","validationerror"],"n":"result"}}],[11,"depth_and_stencil_only","","Creates a `SimpleFrameBuffer` with a single color attachment and no depth nor stencil buffer.",114,{"i":[{"n":"f"},{"n":"d"},{"n":"s"}],"o":{"g":["simpleframebuffer","validationerror"],"n":"result"}}],[11,"with_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a stencil buffer, but no depth buffer.",114,{"i":[{"n":"f"},{"n":"c"},{"n":"s"}],"o":{"g":["simpleframebuffer","validationerror"],"n":"result"}}],[11,"stencil_only","","Creates a `SimpleFrameBuffer` with a single color attachment and a stencil buffer, but no depth buffer.",114,{"i":[{"n":"f"},{"n":"s"}],"o":{"g":["simpleframebuffer","validationerror"],"n":"result"}}],[11,"with_depth_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a depth-stencil buffer.",114,{"i":[{"n":"f"},{"n":"c"},{"n":"d"}],"o":{"g":["simpleframebuffer","validationerror"],"n":"result"}}],[11,"depth_stencil_only","","Creates a `SimpleFrameBuffer` with a single color attachment and a depth-stencil buffer.",114,{"i":[{"n":"f"},{"n":"d"}],"o":{"g":["simpleframebuffer","validationerror"],"n":"result"}}],[11,"clear","","",114,{"i":[{"n":"self"},{"g":["rect"],"n":"option"},{"n":"option"},{"n":"bool"},{"g":["f32"],"n":"option"},{"g":["i32"],"n":"option"}]}],[11,"get_dimensions","","",114,null],[11,"get_depth_buffer_bits","","",114,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"get_stencil_buffer_bits","","",114,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"draw","","",114,{"i":[{"n":"self"},{"n":"v"},{"n":"i"},{"n":"program"},{"n":"u"},{"n":"drawparameters"}],"o":{"g":["drawerror"],"n":"result"}}],[11,"blit_color","","",114,{"i":[{"n":"self"},{"n":"rect"},{"n":"s"},{"n":"blittarget"},{"n":"magnifysamplerfilter"}]}],[11,"blit_from_frame","","",114,{"i":[{"n":"self"},{"n":"rect"},{"n":"blittarget"},{"n":"magnifysamplerfilter"}]}],[11,"blit_from_simple_framebuffer","","",114,{"i":[{"n":"self"},{"n":"simpleframebuffer"},{"n":"rect"},{"n":"blittarget"},{"n":"magnifysamplerfilter"}]}],[11,"blit_from_multioutput_framebuffer","","",114,{"i":[{"n":"self"},{"n":"multioutputframebuffer"},{"n":"rect"},{"n":"blittarget"},{"n":"magnifysamplerfilter"}]}],[11,"new","","Creates a new `MultiOutputFrameBuffer`.",115,{"i":[{"n":"f"},{"n":"i"}],"o":{"g":["multioutputframebuffer","validationerror"],"n":"result"}}],[11,"with_depth_buffer","","Creates a `MultiOutputFrameBuffer` with a depth buffer.",115,{"i":[{"n":"f"},{"n":"i"},{"n":"d"}],"o":{"g":["multioutputframebuffer","validationerror"],"n":"result"}}],[11,"with_depth_and_stencil_buffer","","Creates a `MultiOutputFrameBuffer` with a depth buffer, and a stencil buffer.",115,{"i":[{"n":"f"},{"n":"i"},{"n":"d"},{"n":"s"}],"o":{"g":["multioutputframebuffer","validationerror"],"n":"result"}}],[11,"with_stencil_buffer","","Creates a `MultiOutputFrameBuffer` with a stencil buffer, but no depth buffer.",115,{"i":[{"n":"f"},{"n":"i"},{"n":"s"}],"o":{"g":["multioutputframebuffer","validationerror"],"n":"result"}}],[11,"with_depth_stencil_buffer","","Creates a `MultiOutputFrameBuffer` with a depth-stencil buffer.",115,{"i":[{"n":"f"},{"n":"i"},{"n":"d"}],"o":{"g":["multioutputframebuffer","validationerror"],"n":"result"}}],[11,"clear","","",115,{"i":[{"n":"self"},{"g":["rect"],"n":"option"},{"n":"option"},{"n":"bool"},{"g":["f32"],"n":"option"},{"g":["i32"],"n":"option"}]}],[11,"get_dimensions","","",115,null],[11,"get_depth_buffer_bits","","",115,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"get_stencil_buffer_bits","","",115,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"draw","","",115,{"i":[{"n":"self"},{"n":"v"},{"n":"i"},{"n":"program"},{"n":"u"},{"n":"drawparameters"}],"o":{"g":["drawerror"],"n":"result"}}],[11,"blit_color","","",115,{"i":[{"n":"self"},{"n":"rect"},{"n":"s"},{"n":"blittarget"},{"n":"magnifysamplerfilter"}]}],[11,"blit_from_frame","","",115,{"i":[{"n":"self"},{"n":"rect"},{"n":"blittarget"},{"n":"magnifysamplerfilter"}]}],[11,"blit_from_simple_framebuffer","","",115,{"i":[{"n":"self"},{"n":"simpleframebuffer"},{"n":"rect"},{"n":"blittarget"},{"n":"magnifysamplerfilter"}]}],[11,"blit_from_multioutput_framebuffer","","",115,{"i":[{"n":"self"},{"n":"multioutputframebuffer"},{"n":"rect"},{"n":"blittarget"},{"n":"magnifysamplerfilter"}]}],[11,"is_supported","","Returns true if empty framebuffers are supported by the backend.",116,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[11,"is_layered_supported","","Returns true if layered empty framebuffers are supported by the backend.",116,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[11,"get_max_supported_width","","Returns the maximum width of empty framebuffers that the backend supports, or `None` if empty framebuffers are not supported.",116,{"i":[{"n":"c"}],"o":{"g":["u32"],"n":"option"}}],[11,"get_max_supported_height","","Returns the maximum height of empty framebuffers that the backend supports, or `None` if empty framebuffers are not supported.",116,{"i":[{"n":"c"}],"o":{"g":["u32"],"n":"option"}}],[11,"get_max_supported_samples","","Returns the maximum number of samples of empty framebuffers that the backend supports, or `None` if empty framebuffers are not supported.",116,{"i":[{"n":"c"}],"o":{"g":["u32"],"n":"option"}}],[11,"get_max_supported_layers","","Returns the maximum number of layers of empty framebuffers that the backend supports, or `None` if layered empty framebuffers are not supported.",116,{"i":[{"n":"c"}],"o":{"g":["u32"],"n":"option"}}],[11,"new","","Creates a `EmptyFrameBuffer`.",116,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"g":["u32"],"n":"option"},{"g":["u32"],"n":"option"},{"n":"bool"}],"o":{"g":["emptyframebuffer","validationerror"],"n":"result"}}],[11,"clear","","",116,{"i":[{"n":"self"},{"g":["rect"],"n":"option"},{"n":"option"},{"n":"bool"},{"g":["f32"],"n":"option"},{"g":["i32"],"n":"option"}]}],[11,"get_dimensions","","",116,null],[11,"get_depth_buffer_bits","","",116,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"get_stencil_buffer_bits","","",116,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"draw","","",116,{"i":[{"n":"self"},{"n":"v"},{"n":"i"},{"n":"program"},{"n":"u"},{"n":"drawparameters"}],"o":{"g":["drawerror"],"n":"result"}}],[11,"blit_color","","",116,{"i":[{"n":"self"},{"n":"rect"},{"n":"s"},{"n":"blittarget"},{"n":"magnifysamplerfilter"}]}],[11,"blit_from_frame","","",116,{"i":[{"n":"self"},{"n":"rect"},{"n":"blittarget"},{"n":"magnifysamplerfilter"}]}],[11,"blit_from_simple_framebuffer","","",116,{"i":[{"n":"self"},{"n":"simpleframebuffer"},{"n":"rect"},{"n":"blittarget"},{"n":"magnifysamplerfilter"}]}],[11,"blit_from_multioutput_framebuffer","","",116,{"i":[{"n":"self"},{"n":"multioutputframebuffer"},{"n":"rect"},{"n":"blittarget"},{"n":"magnifysamplerfilter"}]}],[11,"clone","","",100,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"to_color_attachment","","",100,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[11,"clone","","",101,{"i":[{"n":"self"}],"o":{"n":"depthattachment"}}],[11,"to_depth_attachment","","",101,{"i":[{"n":"self"}],"o":{"n":"depthattachment"}}],[11,"clone","","",102,{"i":[{"n":"self"}],"o":{"n":"stencilattachment"}}],[11,"to_stencil_attachment","","",102,{"i":[{"n":"self"}],"o":{"n":"stencilattachment"}}],[11,"clone","","",103,{"i":[{"n":"self"}],"o":{"n":"depthstencilattachment"}}],[11,"to_depth_stencil_attachment","","",103,{"i":[{"n":"self"}],"o":{"n":"depthstencilattachment"}}],[0,"index","glium","In order to draw, you need to provide a way for the video card to know how to link primitives together.",null,null],[3,"IndexBuffer","glium::index","A list of indices loaded in the graphics card's memory.",null,null],[3,"IndexBufferSlice","","Slice of an `IndexBuffer`.",null,null],[3,"IndexBufferAny","","An `IndexBuffer` without any type information.",null,null],[3,"DrawCommandsNoIndicesBuffer","","A buffer containing a list of draw commands.",null,null],[3,"DrawCommandNoIndices","","Represents an element in a list of draw commands.",null,null],[12,"count","","Number of vertices to draw.",117,null],[12,"instance_count","","Number of instances to draw. If it's `0`, nothing will be drawn.",117,null],[12,"first_index","","First vertex to draw in the vertices source.",117,null],[12,"base_instance","","Numero of the first instance to draw.",117,null],[3,"DrawCommandsIndicesBuffer","","A buffer containing a list of draw commands.",null,null],[3,"DrawCommandIndices","","Represents an element in a list of draw commands.",null,null],[12,"count","","Number of indices to use in the index buffer.",118,null],[12,"instance_count","","Number of instances to draw. If it's `0`, nothing will be drawn.",118,null],[12,"first_index","","First index to draw in the index buffer.",118,null],[12,"base_vertex","","Value to add to each index.",118,null],[12,"base_instance","","Numero of the first instance to draw.",118,null],[3,"NoIndices","","Marker that can be used as an indices source when you don't need indices.",null,null],[12,"0","","",119,null],[4,"BufferCreationError","","Error that can happen while creating an index buffer.",null,null],[13,"IndexTypeNotSupported","","The type of index is not supported by the backend.",120,null],[13,"PrimitiveTypeNotSupported","","The type of primitives is not supported by the backend.",120,null],[13,"BufferCreationError","","An error happened while creating the buffer.",120,null],[4,"IndicesSource","","Describes a source of indices used for drawing.",null,null],[13,"IndexBuffer","","A buffer uploaded in video memory.",121,null],[12,"buffer","glium::index::IndicesSource","The buffer.",121,null],[12,"data_type","","Type of indices in the buffer.",121,null],[12,"primitives","","Type of primitives contained in the vertex source.",121,null],[13,"MultidrawArray","glium::index","Use a multidraw indirect buffer without indices.",121,null],[12,"buffer","glium::index::IndicesSource","The buffer.",121,null],[12,"primitives","","Type of primitives contained in the vertex source.",121,null],[13,"MultidrawElement","glium::index","Use a multidraw indirect buffer with indices.",121,null],[12,"commands","glium::index::IndicesSource","The buffer of the commands.",121,null],[12,"indices","","The buffer of the indices.",121,null],[12,"data_type","","Type of indices in the buffer.",121,null],[12,"primitives","","Type of primitives contained in the vertex source.",121,null],[13,"NoIndices","glium::index","Don't use indices. Assemble primitives by using the order in which the vertices are in the vertices source.",121,null],[12,"primitives","glium::index::IndicesSource","Type of primitives contained in the vertex source.",121,null],[4,"PrimitiveType","glium::index","List of available primitives.",null,null],[13,"Points","","Each vertex is an individual point.",122,null],[13,"LinesList","","Vertices are grouped by chunks of two vertices. Each chunk represents a line.",122,null],[13,"LinesListAdjacency","","Vertices are grouped by chunks of four vertices. The second and third vertices of each chunk represents the line.",122,null],[13,"LineStrip","","Each vertex (except the last one) forms a line with the next vertex.",122,null],[13,"LineStripAdjacency","","Similar to `LineStrip`, but with an additional vertex at the beginning and at the end that represent the vertices adjacent to the first and last ones.",122,null],[13,"LineLoop","","Each vertex forms a line with the next vertex. The last vertex form a line with the first one.",122,null],[13,"TrianglesList","","Vertices are grouped by chunks of three vertices. Each chunk represents a triangle.",122,null],[13,"TrianglesListAdjacency","","Vertices are grouped by chunks of six vertices. The first, third and fifth vertices represent a triangle.",122,null],[13,"TriangleStrip","","Each vertex (except the first one and the last one) forms a triangle with the previous and the next vertices.",122,null],[13,"TriangleStripAdjacency","","Each even vertex forms a triangle with vertices `n+2` and `n+4`.",122,null],[13,"TriangleFan","","Starting at the second vertex, each vertex forms a triangle with the next and the first vertices.",122,null],[13,"Patches","","Vertices are grouped by chunks of `vertices_per_patch` vertices.",122,null],[12,"vertices_per_patch","glium::index::PrimitiveType","Number of vertices per patch.",122,null],[4,"IndexType","glium::index","Type of the indices in an index source.",null,null],[13,"U8","","u8",123,null],[13,"U16","","u16",123,null],[13,"U32","","u32",123,null],[11,"fmt","","",120,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",120,{"i":[{"n":"self"}],"o":{"n":"creationerror"}}],[11,"fmt","","",120,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",120,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",120,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"from","","",120,{"i":[{"n":"buffercreationerror"}],"o":{"n":"creationerror"}}],[11,"fmt","glium","",124,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Builds a new index buffer from a list of indices and a primitive type.",124,null],[11,"dynamic","","Builds a new index buffer from a list of indices and a primitive type.",124,null],[11,"persistent","","Builds a new index buffer from a list of indices and a primitive type.",124,null],[11,"immutable","","Builds a new index buffer from a list of indices and a primitive type.",124,null],[11,"empty","","Builds a new empty index buffer.",124,{"i":[{"n":"f"},{"n":"primitivetype"},{"n":"usize"}],"o":{"g":["indexbuffer","creationerror"],"n":"result"}}],[11,"empty_dynamic","","Builds a new empty index buffer.",124,{"i":[{"n":"f"},{"n":"primitivetype"},{"n":"usize"}],"o":{"g":["indexbuffer","creationerror"],"n":"result"}}],[11,"empty_persistent","","Builds a new empty index buffer.",124,{"i":[{"n":"f"},{"n":"primitivetype"},{"n":"usize"}],"o":{"g":["indexbuffer","creationerror"],"n":"result"}}],[11,"empty_immutable","","Builds a new empty index buffer.",124,{"i":[{"n":"f"},{"n":"primitivetype"},{"n":"usize"}],"o":{"g":["indexbuffer","creationerror"],"n":"result"}}],[11,"get_primitives_type","","Returns the type of primitives associated with this index buffer.",124,{"i":[{"n":"self"}],"o":{"n":"primitivetype"}}],[11,"get_indices_type","","Returns the data type of the indices inside this index buffer.",124,{"i":[{"n":"self"}],"o":{"n":"indextype"}}],[11,"slice","","Returns `None` if out of range.",124,{"i":[{"n":"self"},{"n":"r"}],"o":{"g":["indexbufferslice"],"n":"option"}}],[11,"deref","","",124,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"deref_mut","","",124,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"from","glium::buffer","",72,{"i":[{"n":"indexbuffer"}],"o":{"n":"bufferslice"}}],[11,"from","","",73,{"i":[{"n":"indexbuffer"}],"o":{"n":"buffermutslice"}}],[11,"get_id","glium","",124,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"from","glium::index","",121,{"i":[{"n":"indexbuffer"}],"o":{"n":"indicessource"}}],[11,"fmt","","",125,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_primitives_type","","Returns the type of primitives associated with this index buffer.",125,{"i":[{"n":"self"}],"o":{"n":"primitivetype"}}],[11,"get_indices_type","","Returns the data type of the indices inside this index buffer.",125,{"i":[{"n":"self"}],"o":{"n":"indextype"}}],[11,"slice","","Returns `None` if out of range.",125,{"i":[{"n":"self"},{"n":"r"}],"o":{"g":["indexbufferslice"],"n":"option"}}],[11,"deref","","",125,{"i":[{"n":"self"}],"o":{"n":"bufferslice"}}],[11,"deref_mut","","",125,{"i":[{"n":"self"}],"o":{"n":"bufferslice"}}],[11,"from","glium::buffer","",72,{"i":[{"n":"indexbufferslice"}],"o":{"n":"bufferslice"}}],[11,"from","glium::index","",121,{"i":[{"n":"indexbufferslice"}],"o":{"n":"indicessource"}}],[11,"from","","",121,{"i":[{"n":"indexbufferslice"}],"o":{"n":"indicessource"}}],[11,"fmt","","",126,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_primitives_type","","Returns the type of primitives associated with this index buffer.",126,{"i":[{"n":"self"}],"o":{"n":"primitivetype"}}],[11,"get_indices_type","","Returns the data type of the indices inside this index buffer.",126,{"i":[{"n":"self"}],"o":{"n":"indextype"}}],[11,"deref","","",126,{"i":[{"n":"self"}],"o":{"n":"bufferany"}}],[11,"deref_mut","","",126,{"i":[{"n":"self"}],"o":{"n":"bufferany"}}],[11,"from","","",126,{"i":[{"n":"indexbuffer"}],"o":{"n":"indexbufferany"}}],[11,"from","","",121,{"i":[{"n":"indexbufferany"}],"o":{"n":"indicessource"}}],[11,"fmt","","",117,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",117,{"i":[{"n":"self"}],"o":{"n":"drawcommandnoindices"}}],[11,"matches","","",117,{"i":[{"n":"blocklayout"},{"n":"usize"}],"o":{"g":["layoutmismatcherror"],"n":"result"}}],[11,"build_layout","","",117,{"i":[{"n":"usize"}],"o":{"n":"blocklayout"}}],[11,"fmt","","",118,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",118,{"i":[{"n":"self"}],"o":{"n":"drawcommandindices"}}],[11,"matches","","",118,{"i":[{"n":"blocklayout"},{"n":"usize"}],"o":{"g":["layoutmismatcherror"],"n":"result"}}],[11,"build_layout","","",118,{"i":[{"n":"usize"}],"o":{"n":"blocklayout"}}],[11,"empty","","Builds an empty buffer.",127,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["drawcommandsnoindicesbuffer","buffercreationerror"],"n":"result"}}],[11,"empty_dynamic","","Builds an empty buffer.",127,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["drawcommandsnoindicesbuffer","buffercreationerror"],"n":"result"}}],[11,"empty_persistent","","Builds an empty buffer.",127,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["drawcommandsnoindicesbuffer","buffercreationerror"],"n":"result"}}],[11,"empty_immutable","","Builds an empty buffer.",127,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["drawcommandsnoindicesbuffer","buffercreationerror"],"n":"result"}}],[11,"with_primitive_type","","Builds an indices source from this buffer and a primitives type. This indices source can be passed to the `draw()` function.",127,{"i":[{"n":"self"},{"n":"primitivetype"}],"o":{"n":"indicessource"}}],[11,"deref","","",127,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"deref_mut","","",127,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"from","glium::buffer","",72,{"i":[{"n":"drawcommandsnoindicesbuffer"}],"o":{"n":"bufferslice"}}],[11,"from","","",73,{"i":[{"n":"drawcommandsnoindicesbuffer"}],"o":{"n":"buffermutslice"}}],[11,"empty","glium::index","Builds an empty buffer.",128,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["drawcommandsindicesbuffer","buffercreationerror"],"n":"result"}}],[11,"empty_dynamic","","Builds an empty buffer.",128,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["drawcommandsindicesbuffer","buffercreationerror"],"n":"result"}}],[11,"empty_persistent","","Builds an empty buffer.",128,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["drawcommandsindicesbuffer","buffercreationerror"],"n":"result"}}],[11,"empty_immutable","","Builds an empty buffer.",128,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["drawcommandsindicesbuffer","buffercreationerror"],"n":"result"}}],[11,"with_index_buffer","","Builds an indices source from this buffer and a primitives type. This indices source can be passed to the `draw()` function.",128,{"i":[{"n":"self"},{"n":"indexbuffer"}],"o":{"n":"indicessource"}}],[11,"deref","","",128,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"deref_mut","","",128,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"from","glium::buffer","",72,{"i":[{"n":"drawcommandsindicesbuffer"}],"o":{"n":"bufferslice"}}],[11,"from","","",73,{"i":[{"n":"drawcommandsindicesbuffer"}],"o":{"n":"buffermutslice"}}],[8,"Index","glium::index","An index from the index buffer.",null,null],[10,"get_type","","Returns the `IndexType` corresponding to this type.",129,{"o":{"n":"indextype"}}],[11,"is_supported","","Returns true if this type of index is supported by the backend.",129,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[11,"clone","","",121,{"i":[{"n":"self"}],"o":{"n":"indicessource"}}],[11,"get_primitives_type","","Returns the type of the primitives.",121,{"i":[{"n":"self"}],"o":{"n":"primitivetype"}}],[11,"fmt","","",122,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",122,{"i":[{"n":"self"}],"o":{"n":"primitivetype"}}],[11,"eq","","",122,{"i":[{"n":"self"},{"n":"primitivetype"}],"o":{"n":"bool"}}],[11,"ne","","",122,{"i":[{"n":"self"},{"n":"primitivetype"}],"o":{"n":"bool"}}],[11,"is_supported","","Returns true if the backend supports this type of primitives.",122,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"clone","","",119,{"i":[{"n":"self"}],"o":{"n":"noindices"}}],[11,"fmt","","",119,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",121,{"i":[{"n":"noindices"}],"o":{"n":"indicessource"}}],[11,"from","","",121,{"i":[{"n":"noindices"}],"o":{"n":"indicessource"}}],[11,"fmt","","",123,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",123,{"i":[{"n":"self"}],"o":{"n":"indextype"}}],[11,"eq","","",123,{"i":[{"n":"self"},{"n":"indextype"}],"o":{"n":"bool"}}],[11,"get_size","","Returns the size in bytes of each index of this type.",123,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_supported","","Returns true if the backend supports this type of index.",123,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[0,"pixel_buffer","glium","DEPRECATED. Moved to the `texture` module.",null,null],[0,"program","","Items related to creating an OpenGL program.",null,null],[3,"ComputeShader","glium::program","A combination of compute shaders linked together.",null,null],[3,"ComputeCommand","","Represents a compute shader command waiting to be dispatched.",null,null],[12,"num_groups_x","","Number of X groups.",130,null],[12,"num_groups_y","","Number of Y groups.",130,null],[12,"num_groups_z","","Number of Z groups.",130,null],[3,"Program","","A combination of shaders linked together.",null,null],[3,"Uniform","","Information about a uniform (except its name).",null,null],[12,"location","","The location of the uniform.",131,null],[12,"ty","","Type of the uniform.",131,null],[12,"size","","If it is an array, the number of elements.",131,null],[3,"UniformBlock","","Information about a uniform block (except its name).",null,null],[12,"id","","Identifier of the block.",132,null],[12,"initial_binding","","Initial bind point of the block.",132,null],[12,"size","","Size in bytes of the data in the block.",132,null],[12,"layout","","Layout of the block.",132,null],[3,"Attribute","","Information about an attribute of a program (except its name).",null,null],[12,"location","","The index of the uniform.",133,null],[12,"ty","","Type of the attribute.",133,null],[12,"size","","Number of elements of the attribute.",133,null],[3,"TransformFeedbackVarying","","Describes a varying that is being output with transform feedback.",null,null],[12,"name","","Name of the variable.",134,null],[12,"offset","","Number of bytes between the start of the first element and the start of this one.",134,null],[12,"size","","Size in bytes of this value.",134,null],[12,"ty","","Type of the value.",134,null],[3,"TransformFeedbackBuffer","","Describes the layout of a buffer that can receive transform feedback output.",null,null],[12,"id","","Slot of this buffer.",135,null],[12,"elements","","List of elements inside the buffer.",135,null],[12,"stride","","Size in bytes between two consecutive elements.",135,null],[3,"SubroutineData","","Contains all subroutine data of a program.",null,null],[12,"location_counts","","Number of subroutine uniform locations per shader stage. This is not equal to the number of subroutine uniforms per stage, because users can use `#layout(location=...)`.",136,null],[12,"subroutine_uniforms","","The list of all subroutine uniforms of the program stored in a structured way to enable fast lookups. A subroutine uniform is uniquely defined by a name and a shader stage.",136,null],[3,"SubroutineUniform","","Information about a Subroutine Uniform (except name)",null,null],[12,"index","","The index of the subroutine uniform. Needed to query information from the OpenGL backend.",137,null],[12,"location","","The location of the uniform. This is used to bind subroutines to this subroutine uniform.",137,null],[12,"size","","If the uniform is an array, the size of the array.",137,null],[12,"compatible_subroutines","","A list of subroutines that can potentially be used with this uniform.",137,null],[3,"SourceCode","","Represents the source code of a program.",null,null],[12,"vertex_shader","","Source code of the vertex shader.",138,null],[12,"tessellation_control_shader","","Source code of the optional tessellation control shader.",138,null],[12,"tessellation_evaluation_shader","","Source code of the optional tessellation evaluation shader.",138,null],[12,"geometry_shader","","Source code of the optional geometry shader.",138,null],[12,"fragment_shader","","Source code of the fragment shader.",138,null],[3,"Binary","","Represents the compiled binary data of a program.",null,null],[12,"format","","An implementation-defined format.",139,null],[12,"content","","The binary data.",139,null],[4,"BlockLayout","","Layout of a shader storage buffer or a uniform buffer.",null,null],[13,"Struct","","Multiple elements, each having a name.",140,null],[12,"members","glium::program::BlockLayout","The list of elements, with `name`/`layout` pairs.",140,null],[13,"BasicType","glium::program","A basic element.",140,null],[12,"ty","glium::program::BlockLayout","Type of data.",140,null],[12,"offset_in_buffer","","Offset of this element in bytes from the start of the buffer.",140,null],[13,"Array","glium::program","A fixed-size array.",140,null],[12,"content","glium::program::BlockLayout","Type of data of each element.",140,null],[12,"length","","Number of elements in the array.",140,null],[13,"DynamicSizedArray","glium::program","An array whose size isn't known at compile-time. Can only be used as the last element of a buffer.",140,null],[12,"content","glium::program::BlockLayout","Type of data of each element.",140,null],[4,"OutputPrimitives","glium::program","Type of primitives that is being output by transform feedback.",null,null],[13,"Points","","Points.",141,null],[13,"Lines","","Lines.",141,null],[13,"Triangles","","Triangles.",141,null],[13,"Quads","","Quads.",141,null],[4,"TransformFeedbackMode","","Type of transform feedback. Only used with the legacy interface.",null,null],[13,"Interleaved","","Each value is interleaved in the same buffer.",142,null],[13,"Separate","","Each value will go in a separate buffer.",142,null],[4,"ShaderStage","","The different stages of the program pipeline.",null,null],[13,"Vertex","","",143,null],[13,"Fragment","","",143,null],[13,"TessellationControl","","",143,null],[13,"TessellationEvaluation","","",143,null],[13,"Geometry","","",143,null],[4,"ProgramCreationError","","Error that can be triggered when creating a `Program`.",null,null],[13,"CompilationError","","Error while compiling one of the shaders.",144,null],[13,"LinkingError","","Error while linking the program.",144,null],[13,"ShaderTypeNotSupported","","One of the requested shader types is not supported by the backend.",144,null],[13,"CompilationNotSupported","","The OpenGL implementation doesn't provide a compiler.",144,null],[13,"TransformFeedbackNotSupported","","You have requested transform feedback varyings, but transform feedback is not supported by the backend.",144,null],[13,"PointSizeNotSupported","","You have requested point size setting from the shader, but it's not supported by the backend.",144,null],[13,"BinaryHeaderError","","The glium-specific binary header was not found or is corrupt.",144,null],[4,"ProgramChooserCreationError","","Error type that is returned by the `program!` macro.",null,null],[13,"NoVersion","","No available version has been found.",145,null],[13,"ProgramCreationError","","A version has been found but it triggered the given error.",145,null],[4,"GetBinaryError","","Error while retrieving the binary representation of a program.",null,null],[13,"NotSupported","","The backend doesn't support binary.",146,null],[13,"NoFormats","","The backend does not supply any binary formats.",146,null],[4,"ProgramCreationInput","","Input when creating a program.",null,null],[13,"SourceCode","","Use GLSL source code.",147,null],[12,"vertex_shader","glium::program::ProgramCreationInput","Source code of the vertex shader.",147,null],[12,"tessellation_control_shader","","Source code of the optional tessellation control shader.",147,null],[12,"tessellation_evaluation_shader","","Source code of the optional tessellation evaluation shader.",147,null],[12,"geometry_shader","","Source code of the optional geometry shader.",147,null],[12,"fragment_shader","","Source code of the fragment shader.",147,null],[12,"transform_feedback_varyings","","The list of variables and mode to use for transform feedback.",147,null],[12,"outputs_srgb","","Whether the fragment shader outputs colors in `sRGB` or `RGB`. This is false by default, meaning that the program outputs `RGB`.",147,null],[12,"uses_point_size","","Whether the shader uses point size.",147,null],[13,"Binary","glium::program","Use a precompiled binary.",147,null],[12,"data","glium::program::ProgramCreationInput","The data.",147,null],[12,"outputs_srgb","","See `SourceCode::outputs_srgb`.",147,null],[12,"uses_point_size","","Whether the shader uses point size.",147,null],[5,"is_geometry_shader_supported","glium::program","Returns true if the backend supports geometry shaders.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[5,"is_tessellation_shader_supported","","Returns true if the backend supports tessellation shaders.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[5,"is_binary_supported","","Returns true if the backend supports creating and retrieving binary format.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[5,"is_subroutine_supported","","Returns true if the backend supports shader subroutines.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[11,"is_supported","","Returns true if the backend supports compute shaders.",148,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[11,"from_source","","Builds a new compute shader from some source code.",148,{"i":[{"n":"f"},{"n":"str"}],"o":{"g":["computeshader","programcreationerror"],"n":"result"}}],[11,"from_binary","","Builds a new compute shader from some binary.",148,{"i":[{"n":"f"},{"n":"binary"}],"o":{"g":["computeshader","programcreationerror"],"n":"result"}}],[11,"execute","","Executes the compute shader.",148,{"i":[{"n":"self"},{"n":"u"},{"n":"u32"},{"n":"u32"},{"n":"u32"}]}],[11,"execute_indirect","","Executes the compute shader.",148,{"i":[{"n":"self"},{"n":"u"},{"g":["computecommand"],"n":"bufferslice"}]}],[11,"get_binary","","Returns the program's compiled binary.",148,{"i":[{"n":"self"}],"o":{"g":["binary","getbinaryerror"],"n":"result"}}],[11,"get_uniform","","Returns informations about a uniform variable, if it exists.",148,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["uniform"],"n":"option"}}],[11,"uniforms","","Returns an iterator to the list of uniforms.",148,{"i":[{"n":"self"}],"o":{"g":["string","uniform"],"n":"iter"}}],[11,"get_uniform_blocks","","Returns a list of uniform blocks.",148,{"i":[{"n":"self"}],"o":{"n":"hashmap"}}],[11,"get_shader_storage_blocks","","Returns the list of shader storage blocks.",148,{"i":[{"n":"self"}],"o":{"n":"hashmap"}}],[11,"fmt","","",148,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"get_id","","",148,{"i":[{"n":"self"}],"o":{"n":"handle"}}],[11,"fmt","","",130,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",130,{"i":[{"n":"self"}],"o":{"n":"computecommand"}}],[11,"matches","","",130,{"i":[{"n":"blocklayout"},{"n":"usize"}],"o":{"g":["layoutmismatcherror"],"n":"result"}}],[11,"build_layout","","",130,{"i":[{"n":"usize"}],"o":{"n":"blocklayout"}}],[11,"new","glium","Builds a new program.",149,{"i":[{"n":"f"},{"n":"i"}],"o":{"g":["program","programcreationerror"],"n":"result"}}],[11,"from_source","","Builds a new program from GLSL source code.",149,{"i":[{"n":"f"},{"n":"str"},{"n":"str"},{"g":["str"],"n":"option"}],"o":{"g":["program","programcreationerror"],"n":"result"}}],[11,"get_binary","","Returns the program's compiled binary.",149,{"i":[{"n":"self"}],"o":{"g":["binary","getbinaryerror"],"n":"result"}}],[11,"get_frag_data_location","","Returns the location of an output fragment, if it exists.",149,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["u32"],"n":"option"}}],[11,"get_uniform","","Returns informations about a uniform variable, if it exists.",149,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["uniform"],"n":"option"}}],[11,"uniforms","","Returns an iterator to the list of uniforms.",149,{"i":[{"n":"self"}],"o":{"g":["string","uniform"],"n":"iter"}}],[11,"get_uniform_blocks","","Returns a list of uniform blocks.",149,{"i":[{"n":"self"}],"o":{"n":"hashmap"}}],[11,"get_transform_feedback_buffers","","Returns the list of transform feedback varyings.",149,null],[11,"transform_feedback_matches","","True if the transform feedback output of this program matches the specified `VertexFormat` and `stride`.",149,{"i":[{"n":"self"},{"n":"vertexformat"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"get_output_primitives","","Returns the type of geometry that transform feedback would generate, or `None` if it depends on the vertex/index data passed when drawing.",149,{"i":[{"n":"self"}],"o":{"g":["outputprimitives"],"n":"option"}}],[11,"has_tessellation_shaders","","Returns true if the program contains a tessellation stage.",149,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"has_tessellation_control_shader","","Returns true if the program contains a tessellation control stage.",149,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"has_tessellation_evaluation_shader","","Returns true if the program contains a tessellation evaluation stage.",149,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"has_geometry_shader","","Returns true if the program contains a geometry shader.",149,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_attribute","","Returns informations about an attribute, if it exists.",149,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["attribute"],"n":"option"}}],[11,"attributes","","Returns an iterator to the list of attributes.",149,{"i":[{"n":"self"}],"o":{"g":["string","attribute"],"n":"iter"}}],[11,"has_srgb_output","","Returns true if the program has been configured to output sRGB instead of RGB.",149,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_shader_storage_blocks","","Returns the list of shader storage blocks.",149,{"i":[{"n":"self"}],"o":{"n":"hashmap"}}],[11,"get_subroutine_uniforms","","Returns the subroutine uniforms of this program.",149,{"i":[{"n":"self"}],"o":{"n":"hashmap"}}],[11,"uses_point_size","","Returns true if the program has been configured to use the `gl_PointSize` variable.",149,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fmt","","",149,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"get_id","","",149,{"i":[{"n":"self"}],"o":{"n":"handle"}}],[11,"fmt","glium::program","",131,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",131,{"i":[{"n":"self"}],"o":{"n":"uniform"}}],[11,"fmt","","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",132,{"i":[{"n":"self"}],"o":{"n":"uniformblock"}}],[11,"fmt","","",140,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",140,{"i":[{"n":"self"}],"o":{"n":"blocklayout"}}],[11,"eq","","",140,{"i":[{"n":"self"},{"n":"blocklayout"}],"o":{"n":"bool"}}],[11,"ne","","",140,{"i":[{"n":"self"},{"n":"blocklayout"}],"o":{"n":"bool"}}],[11,"fmt","","",133,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",133,{"i":[{"n":"self"}],"o":{"n":"attribute"}}],[11,"fmt","","",135,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",135,{"i":[{"n":"self"}],"o":{"n":"transformfeedbackbuffer"}}],[11,"eq","","",135,{"i":[{"n":"self"},{"n":"transformfeedbackbuffer"}],"o":{"n":"bool"}}],[11,"ne","","",135,{"i":[{"n":"self"},{"n":"transformfeedbackbuffer"}],"o":{"n":"bool"}}],[11,"fmt","","",134,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",134,{"i":[{"n":"self"}],"o":{"n":"transformfeedbackvarying"}}],[11,"eq","","",134,{"i":[{"n":"self"},{"n":"transformfeedbackvarying"}],"o":{"n":"bool"}}],[11,"ne","","",134,{"i":[{"n":"self"},{"n":"transformfeedbackvarying"}],"o":{"n":"bool"}}],[11,"fmt","","",142,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",142,{"i":[{"n":"self"}],"o":{"n":"transformfeedbackmode"}}],[11,"eq","","",142,{"i":[{"n":"self"},{"n":"transformfeedbackmode"}],"o":{"n":"bool"}}],[11,"fmt","","",141,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",141,{"i":[{"n":"self"}],"o":{"n":"outputprimitives"}}],[11,"eq","","",141,{"i":[{"n":"self"},{"n":"outputprimitives"}],"o":{"n":"bool"}}],[11,"fmt","","",136,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",136,{"i":[{"n":"self"}],"o":{"n":"subroutinedata"}}],[11,"fmt","","",137,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",137,{"i":[{"n":"self"}],"o":{"n":"subroutineuniform"}}],[11,"fmt","","",143,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",143,{"i":[{"n":"self"}],"o":{"n":"shaderstage"}}],[11,"eq","","",143,{"i":[{"n":"self"},{"n":"shaderstage"}],"o":{"n":"bool"}}],[11,"hash","","",143,null],[11,"to_gl_enum","","Converts the `ShaderStage` to its GLenum equivalent",143,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"clone","","",144,{"i":[{"n":"self"}],"o":{"n":"programcreationerror"}}],[11,"fmt","","",144,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",144,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",144,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",145,{"i":[{"n":"self"}],"o":{"n":"programchoosercreationerror"}}],[11,"fmt","","",145,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",145,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",145,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",145,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"from","","",145,{"i":[{"n":"programcreationerror"}],"o":{"n":"programchoosercreationerror"}}],[11,"clone","","",146,{"i":[{"n":"self"}],"o":{"n":"getbinaryerror"}}],[11,"fmt","","",146,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",146,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",146,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from","","",147,{"i":[{"n":"sourcecode"}],"o":{"n":"programcreationinput"}}],[11,"from","","",147,{"i":[{"n":"binary"}],"o":{"n":"programcreationinput"}}],[0,"uniforms","glium","A uniform is a global variable in your program. In order to draw something, you will need to give `glium` the values of all your uniforms. Objects that implement the `Uniform` trait are here to do that.",null,null],[3,"UniformBuffer","glium::uniforms","Buffer that contains a uniform block.",null,null],[3,"Sampler","","A sampler.",null,null],[12,"0","","",150,null],[12,"1","","",150,null],[3,"SamplerBehavior","","Behavior of a sampler.",null,null],[12,"wrap_function","","Functions to use for the X, Y, and Z coordinates.",151,null],[12,"minify_filter","","Filter to use when minifying the texture.",151,null],[12,"magnify_filter","","Filter to use when magnifying the texture.",151,null],[12,"max_anisotropy","","`1` means no anisotropic filtering, any value above `1` sets the max anisotropy.",151,null],[3,"EmptyUniforms","","Object that can be used when you don't have any uniforms.",null,null],[3,"UniformsStorage","","Stores uniforms.",null,null],[4,"SamplerWrapFunction","","Function to use for out-of-bounds samples.",null,null],[13,"Repeat","","Samples at coord `x + 1` map to coord `x`.",152,null],[13,"Mirror","","Samples at coord `x + 1` map to coord `1 - x`.",152,null],[13,"Clamp","","Samples at coord `x + 1` map to coord `1`.",152,null],[13,"MirrorClamp","","Same as Mirror, but only for one repetition,",152,null],[4,"MagnifySamplerFilter","","The function that the GPU will use when loading the value of a texel.",null,null],[13,"Nearest","","The nearest texel will be loaded.",153,null],[13,"Linear","","All nearby texels will be loaded and their values will be merged.",153,null],[4,"MinifySamplerFilter","","The function that the GPU will use when loading the value of a texel.",null,null],[13,"Nearest","","The nearest texel will be loaded.",154,null],[13,"Linear","","All nearby texels will be loaded and their values will be merged.",154,null],[13,"NearestMipmapNearest","","The nearest texel of the nearest mipmap will be loaded.",154,null],[13,"LinearMipmapNearest","","Takes the nearest texel from the two nearest mipmaps, and merges them.",154,null],[13,"NearestMipmapLinear","","Same as `Linear`, but from the nearest mipmap.",154,null],[13,"LinearMipmapLinear","","Same as `Linear`, but from the two nearest mipmaps.",154,null],[4,"UniformValue","","Represents a value to bind to a uniform.",null,null],[13,"Block","","Contains a handle to the buffer, and a function that indicates whether this buffer can be bound on a block with the given layout. The last parameter is a sender which must be used to send a `SyncFence` that expires when the buffer has finished being used.",155,null],[13,"Subroutine","","",155,null],[13,"SignedInt","","",155,null],[13,"UnsignedInt","","",155,null],[13,"Float","","",155,null],[13,"Mat2","","2x2 column-major matrix.",155,null],[13,"Mat3","","3x3 column-major matrix.",155,null],[13,"Mat4","","4x4 column-major matrix.",155,null],[13,"Vec2","","",155,null],[13,"Vec3","","",155,null],[13,"Vec4","","",155,null],[13,"IntVec2","","",155,null],[13,"IntVec3","","",155,null],[13,"IntVec4","","",155,null],[13,"UnsignedIntVec2","","",155,null],[13,"UnsignedIntVec3","","",155,null],[13,"UnsignedIntVec4","","",155,null],[13,"Bool","","",155,null],[13,"BoolVec2","","",155,null],[13,"BoolVec3","","",155,null],[13,"BoolVec4","","",155,null],[13,"Double","","",155,null],[13,"DoubleVec2","","",155,null],[13,"DoubleVec3","","",155,null],[13,"DoubleVec4","","",155,null],[13,"DoubleMat2","","",155,null],[13,"DoubleMat3","","",155,null],[13,"DoubleMat4","","",155,null],[13,"Int64","","",155,null],[13,"Int64Vec2","","",155,null],[13,"Int64Vec3","","",155,null],[13,"Int64Vec4","","",155,null],[13,"UnsignedInt64","","",155,null],[13,"UnsignedInt64Vec2","","",155,null],[13,"UnsignedInt64Vec3","","",155,null],[13,"UnsignedInt64Vec4","","",155,null],[13,"Texture1d","","",155,null],[13,"CompressedTexture1d","","",155,null],[13,"SrgbTexture1d","","",155,null],[13,"CompressedSrgbTexture1d","","",155,null],[13,"IntegralTexture1d","","",155,null],[13,"UnsignedTexture1d","","",155,null],[13,"DepthTexture1d","","",155,null],[13,"Texture2d","","",155,null],[13,"CompressedTexture2d","","",155,null],[13,"SrgbTexture2d","","",155,null],[13,"CompressedSrgbTexture2d","","",155,null],[13,"IntegralTexture2d","","",155,null],[13,"UnsignedTexture2d","","",155,null],[13,"DepthTexture2d","","",155,null],[13,"Texture2dMultisample","","",155,null],[13,"SrgbTexture2dMultisample","","",155,null],[13,"IntegralTexture2dMultisample","","",155,null],[13,"UnsignedTexture2dMultisample","","",155,null],[13,"DepthTexture2dMultisample","","",155,null],[13,"Texture3d","","",155,null],[13,"CompressedTexture3d","","",155,null],[13,"SrgbTexture3d","","",155,null],[13,"CompressedSrgbTexture3d","","",155,null],[13,"IntegralTexture3d","","",155,null],[13,"UnsignedTexture3d","","",155,null],[13,"DepthTexture3d","","",155,null],[13,"Texture1dArray","","",155,null],[13,"CompressedTexture1dArray","","",155,null],[13,"SrgbTexture1dArray","","",155,null],[13,"CompressedSrgbTexture1dArray","","",155,null],[13,"IntegralTexture1dArray","","",155,null],[13,"UnsignedTexture1dArray","","",155,null],[13,"DepthTexture1dArray","","",155,null],[13,"Texture2dArray","","",155,null],[13,"CompressedTexture2dArray","","",155,null],[13,"SrgbTexture2dArray","","",155,null],[13,"CompressedSrgbTexture2dArray","","",155,null],[13,"IntegralTexture2dArray","","",155,null],[13,"UnsignedTexture2dArray","","",155,null],[13,"DepthTexture2dArray","","",155,null],[13,"Texture2dMultisampleArray","","",155,null],[13,"SrgbTexture2dMultisampleArray","","",155,null],[13,"IntegralTexture2dMultisampleArray","","",155,null],[13,"UnsignedTexture2dMultisampleArray","","",155,null],[13,"DepthTexture2dMultisampleArray","","",155,null],[13,"Cubemap","","",155,null],[13,"CompressedCubemap","","",155,null],[13,"SrgbCubemap","","",155,null],[13,"CompressedSrgbCubemap","","",155,null],[13,"IntegralCubemap","","",155,null],[13,"UnsignedCubemap","","",155,null],[13,"DepthCubemap","","",155,null],[13,"CubemapArray","","",155,null],[13,"CompressedCubemapArray","","",155,null],[13,"SrgbCubemapArray","","",155,null],[13,"CompressedSrgbCubemapArray","","",155,null],[13,"IntegralCubemapArray","","",155,null],[13,"UnsignedCubemapArray","","",155,null],[13,"DepthCubemapArray","","",155,null],[13,"BufferTexture","","",155,null],[4,"UniformType","","Type of a uniform in a program.",null,null],[13,"Float","","",156,null],[13,"FloatVec2","","",156,null],[13,"FloatVec3","","",156,null],[13,"FloatVec4","","",156,null],[13,"Double","","",156,null],[13,"DoubleVec2","","",156,null],[13,"DoubleVec3","","",156,null],[13,"DoubleVec4","","",156,null],[13,"Int","","",156,null],[13,"IntVec2","","",156,null],[13,"IntVec3","","",156,null],[13,"IntVec4","","",156,null],[13,"UnsignedInt","","",156,null],[13,"UnsignedIntVec2","","",156,null],[13,"UnsignedIntVec3","","",156,null],[13,"UnsignedIntVec4","","",156,null],[13,"Int64","","",156,null],[13,"Int64Vec2","","",156,null],[13,"Int64Vec3","","",156,null],[13,"Int64Vec4","","",156,null],[13,"UnsignedInt64","","",156,null],[13,"UnsignedInt64Vec2","","",156,null],[13,"UnsignedInt64Vec3","","",156,null],[13,"UnsignedInt64Vec4","","",156,null],[13,"Bool","","",156,null],[13,"BoolVec2","","",156,null],[13,"BoolVec3","","",156,null],[13,"BoolVec4","","",156,null],[13,"FloatMat2","","",156,null],[13,"FloatMat3","","",156,null],[13,"FloatMat4","","",156,null],[13,"FloatMat2x3","","",156,null],[13,"FloatMat2x4","","",156,null],[13,"FloatMat3x2","","",156,null],[13,"FloatMat3x4","","",156,null],[13,"FloatMat4x2","","",156,null],[13,"FloatMat4x3","","",156,null],[13,"DoubleMat2","","",156,null],[13,"DoubleMat3","","",156,null],[13,"DoubleMat4","","",156,null],[13,"DoubleMat2x3","","",156,null],[13,"DoubleMat2x4","","",156,null],[13,"DoubleMat3x2","","",156,null],[13,"DoubleMat3x4","","",156,null],[13,"DoubleMat4x2","","",156,null],[13,"DoubleMat4x3","","",156,null],[13,"Sampler1d","","",156,null],[13,"ISampler1d","","",156,null],[13,"USampler1d","","",156,null],[13,"Sampler2d","","",156,null],[13,"ISampler2d","","",156,null],[13,"USampler2d","","",156,null],[13,"Sampler3d","","",156,null],[13,"ISampler3d","","",156,null],[13,"USampler3d","","",156,null],[13,"Sampler1dArray","","",156,null],[13,"ISampler1dArray","","",156,null],[13,"USampler1dArray","","",156,null],[13,"Sampler2dArray","","",156,null],[13,"ISampler2dArray","","",156,null],[13,"USampler2dArray","","",156,null],[13,"SamplerCube","","",156,null],[13,"ISamplerCube","","",156,null],[13,"USamplerCube","","",156,null],[13,"Sampler2dRect","","",156,null],[13,"ISampler2dRect","","",156,null],[13,"USampler2dRect","","",156,null],[13,"Sampler2dRectShadow","","",156,null],[13,"SamplerCubeArray","","",156,null],[13,"ISamplerCubeArray","","",156,null],[13,"USamplerCubeArray","","",156,null],[13,"SamplerBuffer","","",156,null],[13,"ISamplerBuffer","","",156,null],[13,"USamplerBuffer","","",156,null],[13,"Sampler2dMultisample","","",156,null],[13,"ISampler2dMultisample","","",156,null],[13,"USampler2dMultisample","","",156,null],[13,"Sampler2dMultisampleArray","","",156,null],[13,"ISampler2dMultisampleArray","","",156,null],[13,"USampler2dMultisampleArray","","",156,null],[13,"Sampler1dShadow","","",156,null],[13,"Sampler2dShadow","","",156,null],[13,"SamplerCubeShadow","","",156,null],[13,"Sampler1dArrayShadow","","",156,null],[13,"Sampler2dArrayShadow","","",156,null],[13,"SamplerCubeArrayShadow","","",156,null],[13,"Image1d","","",156,null],[13,"IImage1d","","",156,null],[13,"UImage1d","","",156,null],[13,"Image2d","","",156,null],[13,"IImage2d","","",156,null],[13,"UImage2d","","",156,null],[13,"Image3d","","",156,null],[13,"IImage3d","","",156,null],[13,"UImage3d","","",156,null],[13,"Image2dRect","","",156,null],[13,"IImage2dRect","","",156,null],[13,"UImage2dRect","","",156,null],[13,"ImageCube","","",156,null],[13,"IImageCube","","",156,null],[13,"UImageCube","","",156,null],[13,"ImageBuffer","","",156,null],[13,"IImageBuffer","","",156,null],[13,"UImageBuffer","","",156,null],[13,"Image1dArray","","",156,null],[13,"IImage1dArray","","",156,null],[13,"UImage1dArray","","",156,null],[13,"Image2dArray","","",156,null],[13,"IImage2dArray","","",156,null],[13,"UImage2dArray","","",156,null],[13,"Image2dMultisample","","",156,null],[13,"IImage2dMultisample","","",156,null],[13,"UImage2dMultisample","","",156,null],[13,"Image2dMultisampleArray","","",156,null],[13,"IImage2dMultisampleArray","","",156,null],[13,"UImage2dMultisampleArray","","",156,null],[13,"AtomicCounterUint","","",156,null],[4,"LayoutMismatchError","","Error about a block layout mismatch.",null,null],[13,"TypeMismatch","","There is a mismatch in the type of one element.",157,null],[12,"expected","glium::uniforms::LayoutMismatchError","Type expected by the shader.",157,null],[12,"obtained","","Type that you gave.",157,null],[13,"LayoutMismatch","glium::uniforms","The expected layout is totally different from what we have.",157,null],[12,"expected","glium::uniforms::LayoutMismatchError","Layout expected by the shader.",157,null],[12,"obtained","","Layout of the input.",157,null],[13,"OffsetMismatch","glium::uniforms","The type of data is good, but there is a misalignment.",157,null],[12,"expected","glium::uniforms::LayoutMismatchError","Expected offset of a member.",157,null],[12,"obtained","","Offset of the same member in the input.",157,null],[13,"MemberMismatch","glium::uniforms","There is a mismatch in a submember of this layout.",157,null],[12,"member","glium::uniforms::LayoutMismatchError","Name of the field.",157,null],[12,"err","","The sub-error.",157,null],[13,"MissingField","glium::uniforms","A field is missing in either the expected of the input data layout.",157,null],[12,"name","glium::uniforms::LayoutMismatchError","Name of the field.",157,null],[11,"fmt","glium::uniforms","",158,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_id","","",158,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"new","","Uploads data in the uniforms buffer.",158,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["uniformbuffer","buffercreationerror"],"n":"result"}}],[11,"dynamic","","Uploads data in the uniforms buffer.",158,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["uniformbuffer","buffercreationerror"],"n":"result"}}],[11,"persistent","","Uploads data in the uniforms buffer.",158,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["uniformbuffer","buffercreationerror"],"n":"result"}}],[11,"immutable","","Uploads data in the uniforms buffer.",158,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["uniformbuffer","buffercreationerror"],"n":"result"}}],[11,"empty","","Creates an empty buffer.",158,{"i":[{"n":"f"}],"o":{"g":["uniformbuffer","buffercreationerror"],"n":"result"}}],[11,"empty_dynamic","","Creates an empty buffer.",158,{"i":[{"n":"f"}],"o":{"g":["uniformbuffer","buffercreationerror"],"n":"result"}}],[11,"empty_persistent","","Creates an empty buffer.",158,{"i":[{"n":"f"}],"o":{"g":["uniformbuffer","buffercreationerror"],"n":"result"}}],[11,"empty_immutable","","Creates an empty buffer.",158,{"i":[{"n":"f"}],"o":{"g":["uniformbuffer","buffercreationerror"],"n":"result"}}],[11,"empty_unsized","","Creates an empty buffer.",158,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["uniformbuffer","buffercreationerror"],"n":"result"}}],[11,"empty_unsized_dynamic","","Creates an empty buffer.",158,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["uniformbuffer","buffercreationerror"],"n":"result"}}],[11,"empty_unsized_persistent","","Creates an empty buffer.",158,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["uniformbuffer","buffercreationerror"],"n":"result"}}],[11,"empty_unsized_immutable","","Creates an empty buffer.",158,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["uniformbuffer","buffercreationerror"],"n":"result"}}],[11,"deref","","",158,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"deref_mut","","",158,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"from","glium::buffer","",72,{"i":[{"n":"uniformbuffer"}],"o":{"n":"bufferslice"}}],[11,"from","","",73,{"i":[{"n":"uniformbuffer"}],"o":{"n":"buffermutslice"}}],[11,"fmt","glium::uniforms","",152,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",152,{"i":[{"n":"self"}],"o":{"n":"samplerwrapfunction"}}],[11,"hash","","",152,null],[11,"eq","","",152,{"i":[{"n":"self"},{"n":"samplerwrapfunction"}],"o":{"n":"bool"}}],[11,"fmt","","",153,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",153,{"i":[{"n":"self"}],"o":{"n":"magnifysamplerfilter"}}],[11,"hash","","",153,null],[11,"eq","","",153,{"i":[{"n":"self"},{"n":"magnifysamplerfilter"}],"o":{"n":"bool"}}],[11,"fmt","","",154,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",154,{"i":[{"n":"self"}],"o":{"n":"minifysamplerfilter"}}],[11,"hash","","",154,null],[11,"eq","","",154,{"i":[{"n":"self"},{"n":"minifysamplerfilter"}],"o":{"n":"bool"}}],[11,"fmt","","",150,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",150,null],[11,"eq","","",150,{"i":[{"n":"self"},{"n":"sampler"}],"o":{"n":"bool"}}],[11,"ne","","",150,{"i":[{"n":"self"},{"n":"sampler"}],"o":{"n":"bool"}}],[11,"new","","Builds a new `Sampler` with default parameters.",150,{"i":[{"n":"t"}],"o":{"n":"sampler"}}],[11,"wrap_function","","Changes the wrap functions of all three coordinates.",150,{"i":[{"n":"self"},{"n":"samplerwrapfunction"}],"o":{"n":"sampler"}}],[11,"minify_filter","","Changes the minifying filter of the sampler.",150,{"i":[{"n":"self"},{"n":"minifysamplerfilter"}],"o":{"n":"sampler"}}],[11,"magnify_filter","","Changes the magnifying filter of the sampler.",150,{"i":[{"n":"self"},{"n":"magnifysamplerfilter"}],"o":{"n":"sampler"}}],[11,"anisotropy","","Changes the magnifying filter of the sampler.",150,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"sampler"}}],[11,"clone","","",150,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",151,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",151,{"i":[{"n":"self"}],"o":{"n":"samplerbehavior"}}],[11,"hash","","",151,null],[11,"eq","","",151,{"i":[{"n":"self"},{"n":"samplerbehavior"}],"o":{"n":"bool"}}],[11,"ne","","",151,{"i":[{"n":"self"},{"n":"samplerbehavior"}],"o":{"n":"bool"}}],[11,"default","","",151,{"o":{"n":"samplerbehavior"}}],[11,"fmt","","",159,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",159,{"i":[{"n":"self"}],"o":{"n":"emptyuniforms"}}],[11,"visit_values","","",159,{"i":[{"n":"self"},{"n":"f"}]}],[11,"new","","Builds a new storage with a value.",160,{"i":[{"n":"str"},{"n":"t"}],"o":{"g":["emptyuniforms"],"n":"uniformsstorage"}}],[11,"add","","Adds a value to the storage.",160,{"i":[{"n":"self"},{"n":"str"},{"n":"u"}],"o":{"g":["uniformsstorage"],"n":"uniformsstorage"}}],[11,"visit_values","","",160,{"i":[{"n":"self"},{"n":"f"}]}],[11,"clone","","",156,{"i":[{"n":"self"}],"o":{"n":"uniformtype"}}],[11,"fmt","","",156,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",156,{"i":[{"n":"self"},{"n":"uniformtype"}],"o":{"n":"bool"}}],[11,"clone","","",155,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"is_usable_with","","Returns true if this value can be used with a uniform of the given type.",155,{"i":[{"n":"self"},{"n":"uniformtype"}],"o":{"n":"bool"}}],[8,"Uniforms","","Object that contains the values of all the uniforms to bind to a program.",null,null],[10,"visit_values","","Calls the parameter once with the name and value of each uniform.",161,{"i":[{"n":"self"},{"n":"f"}]}],[8,"AsUniformValue","","Value that can be used as the value of a uniform.",null,null],[10,"as_uniform_value","","Builds a `UniformValue`.",162,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[8,"UniformBlock","","Objects that are suitable for being inside a uniform block or a SSBO.",null,null],[10,"matches","","Checks whether the uniforms' layout matches the given block if `Self` starts at the given offset.",163,{"i":[{"n":"blocklayout"},{"n":"usize"}],"o":{"g":["layoutmismatcherror"],"n":"result"}}],[10,"build_layout","","Builds the `BlockLayout` corresponding to the current object.",163,{"i":[{"n":"usize"}],"o":{"n":"blocklayout"}}],[11,"clone","","",157,{"i":[{"n":"self"}],"o":{"n":"layoutmismatcherror"}}],[11,"fmt","","",157,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",157,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",157,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"fmt","","",157,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[0,"vertex","glium","Contains everything related to vertex sources.",null,null],[3,"VertexBuffer","glium::vertex","A list of vertices loaded in the graphics card's memory.",null,null],[3,"VertexBufferAny","","A list of vertices loaded in the graphics card's memory.",null,null],[3,"VertexBufferSlice","","Represents a slice of a `VertexBuffer`.",null,null],[3,"TransformFeedbackSession","","Transform feedback allows you to obtain in a buffer the list of the vertices generated by the vertex shader, geometry shader, or tessellation evaluation shader of your program. This is usually used to cache the result in order to draw the vertices multiple times with multiple different fragment shaders.",null,null],[3,"EmptyVertexAttributes","","Marker that can be passed instead of a buffer to indicate an empty list of buffers.",null,null],[12,"len","","Number of phantom vertices.",164,null],[3,"EmptyInstanceAttributes","","Marker that can be passed instead of a buffer to indicate an empty list of buffers.",null,null],[12,"len","","Number of phantom vertices.",165,null],[3,"PerInstance","","Marker that instructs glium that the buffer is to be used per instance.",null,null],[4,"BufferCreationError","","Error that can happen when creating a vertex buffer.",null,null],[13,"FormatNotSupported","","The vertex format is not supported by the backend.",166,null],[13,"BufferCreationError","","Error while creating the vertex buffer.",166,null],[4,"AttributeType","","",null,null],[13,"I8","","",167,null],[13,"I8I8","","",167,null],[13,"I8I8I8","","",167,null],[13,"I8I8I8I8","","",167,null],[13,"U8","","",167,null],[13,"U8U8","","",167,null],[13,"U8U8U8","","",167,null],[13,"U8U8U8U8","","",167,null],[13,"I16","","",167,null],[13,"I16I16","","",167,null],[13,"I16I16I16","","",167,null],[13,"I16I16I16I16","","",167,null],[13,"U16","","",167,null],[13,"U16U16","","",167,null],[13,"U16U16U16","","",167,null],[13,"U16U16U16U16","","",167,null],[13,"I32","","",167,null],[13,"I32I32","","",167,null],[13,"I32I32I32","","",167,null],[13,"I32I32I32I32","","",167,null],[13,"U32","","",167,null],[13,"U32U32","","",167,null],[13,"U32U32U32","","",167,null],[13,"U32U32U32U32","","",167,null],[13,"I64","","",167,null],[13,"I64I64","","",167,null],[13,"I64I64I64","","",167,null],[13,"I64I64I64I64","","",167,null],[13,"U64","","",167,null],[13,"U64U64","","",167,null],[13,"U64U64U64","","",167,null],[13,"U64U64U64U64","","",167,null],[13,"F16","","",167,null],[13,"F16F16","","",167,null],[13,"F16F16F16","","",167,null],[13,"F16F16F16F16","","",167,null],[13,"F16x2x2","","2x2 matrix of `f16`s",167,null],[13,"F16x2x3","","2x3 matrix of `f16`s",167,null],[13,"F16x2x4","","2x3 matrix of `f16`s",167,null],[13,"F16x3x2","","3x2 matrix of `f16`s",167,null],[13,"F16x3x3","","3x3 matrix of `f16`s",167,null],[13,"F16x3x4","","3x4 matrix of `f16`s",167,null],[13,"F16x4x2","","4x2 matrix of `f16`s",167,null],[13,"F16x4x3","","4x3 matrix of `f16`s",167,null],[13,"F16x4x4","","4x4 matrix of `f16`s",167,null],[13,"F32","","",167,null],[13,"F32F32","","",167,null],[13,"F32F32F32","","",167,null],[13,"F32F32F32F32","","",167,null],[13,"F32x2x2","","2x2 matrix of `f32`s",167,null],[13,"F32x2x3","","2x3 matrix of `f32`s",167,null],[13,"F32x2x4","","2x3 matrix of `f32`s",167,null],[13,"F32x3x2","","3x2 matrix of `f32`s",167,null],[13,"F32x3x3","","3x3 matrix of `f32`s",167,null],[13,"F32x3x4","","3x4 matrix of `f32`s",167,null],[13,"F32x4x2","","4x2 matrix of `f32`s",167,null],[13,"F32x4x3","","4x3 matrix of `f32`s",167,null],[13,"F32x4x4","","4x4 matrix of `f32`s",167,null],[13,"F64","","Warning: using `f64`s can be very slow.",167,null],[13,"F64F64","","Warning: using `f64`s can be very slow.",167,null],[13,"F64F64F64","","Warning: using `f64`s can be very slow.",167,null],[13,"F64F64F64F64","","Warning: using `f64`s can be very slow.",167,null],[13,"F64x2x2","","2x2 matrix of `f64`s Warning: using `f64`s can be very slow.",167,null],[13,"F64x2x3","","2x3 matrix of `f64`s Warning: using `f64`s can be very slow.",167,null],[13,"F64x2x4","","2x3 matrix of `f64`s Warning: using `f64`s can be very slow.",167,null],[13,"F64x3x2","","3x2 matrix of `f64`s Warning: using `f64`s can be very slow.",167,null],[13,"F64x3x3","","3x3 matrix of `f64`s Warning: using `f64`s can be very slow.",167,null],[13,"F64x3x4","","3x4 matrix of `f64`s Warning: using `f64`s can be very slow.",167,null],[13,"F64x4x2","","4x2 matrix of `f64`s Warning: using `f64`s can be very slow.",167,null],[13,"F64x4x3","","4x3 matrix of `f64`s Warning: using `f64`s can be very slow.",167,null],[13,"F64x4x4","","4x4 matrix of `f64`s Warning: using `f64`s can be very slow.",167,null],[13,"I2I10I10I10Reversed","","From MSB to LSB: two bits for the alpha, ten bits for the blue, ten bits for the green, ten bits for the red.",167,null],[13,"U2U10U10U10Reversed","","From MSB to LSB: two bits for the alpha, ten bits for the blue, ten bits for the green, ten bits for the red.",167,null],[13,"I10I10I10I2","","Corresponds to `GL_INT_10_10_10_2`.",167,null],[13,"U10U10U10U2","","Corresponds to `GL_UNSIGNED_INT_10_10_10_2`.",167,null],[13,"F10F11F11UnsignedIntReversed","","Three floating points values turned into unsigned integers./",167,null],[13,"FixedFloatI16U16","","Fixed floating points. A 16bits signed value followed by the 16bits unsigned exponent.",167,null],[4,"VerticesSource","","Describes the source to use for the vertices when drawing.",null,null],[13,"VertexBuffer","","A buffer uploaded in the video memory.",168,null],[13,"Marker","","A marker indicating a \"phantom list of attributes\".",168,null],[12,"len","glium::vertex::VerticesSource","Number of attributes.",168,null],[12,"per_instance","","Whether or not this buffer is \"per instance\" (true) or \"per vertex\" (false).",168,null],[5,"is_transform_feedback_supported","glium::vertex","Returns true if transform feedback is supported by the OpenGL implementation.",null,{"i":[{"n":"f"}],"o":{"n":"bool"}}],[11,"clone","","",166,{"i":[{"n":"self"}],"o":{"n":"creationerror"}}],[11,"fmt","","",166,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",166,{"i":[{"n":"buffercreationerror"}],"o":{"n":"creationerror"}}],[11,"fmt","","",166,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",166,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",166,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"get_id","glium","",169,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",169,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"per_instance","glium::vertex","Creates a marker that instructs glium to use multiple instances.",170,{"i":[{"n":"self"}],"o":{"g":["perinstance","instancingnotsupported"],"n":"result"}}],[11,"new","glium","Builds a new vertex buffer.",169,null],[11,"dynamic","","Builds a new vertex buffer.",169,null],[11,"persistent","","Builds a new vertex buffer.",169,null],[11,"immutable","","Builds a new vertex buffer.",169,null],[11,"empty","","Builds an empty vertex buffer.",169,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["vertexbuffer","creationerror"],"n":"result"}}],[11,"empty_dynamic","","Builds an empty vertex buffer.",169,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["vertexbuffer","creationerror"],"n":"result"}}],[11,"empty_persistent","","Builds an empty vertex buffer.",169,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["vertexbuffer","creationerror"],"n":"result"}}],[11,"empty_immutable","","Builds an empty vertex buffer.",169,{"i":[{"n":"f"},{"n":"usize"}],"o":{"g":["vertexbuffer","creationerror"],"n":"result"}}],[11,"new_raw","","Builds a new vertex buffer from an indeterminate data type and bindings.",169,null],[11,"new_raw_dynamic","","Dynamic version of `new_raw`.",169,null],[11,"slice","","Accesses a slice of the buffer.",169,{"i":[{"n":"self"},{"n":"r"}],"o":{"g":["vertexbufferslice"],"n":"option"}}],[11,"get_bindings","","Returns the associated `VertexFormat`.",169,{"i":[{"n":"self"}],"o":{"n":"vertexformat"}}],[11,"per_instance","","Creates a marker that instructs glium to use multiple instances.",169,{"i":[{"n":"self"}],"o":{"g":["perinstance","instancingnotsupported"],"n":"result"}}],[11,"into_vertex_buffer_any","","DEPRECATED: use `.into()` instead. Discard the type information and turn the vertex buffer into a `VertexBufferAny`.",169,{"i":[{"n":"self"}],"o":{"n":"vertexbufferany"}}],[11,"from","","",169,{"i":[{"n":"buffer"}],"o":{"n":"vertexbuffer"}}],[11,"deref","","",169,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"deref_mut","","",169,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"from","glium::buffer","",72,{"i":[{"n":"vertexbuffer"}],"o":{"n":"bufferslice"}}],[11,"from","","",73,{"i":[{"n":"vertexbuffer"}],"o":{"n":"buffermutslice"}}],[11,"deref","glium::vertex","",170,{"i":[{"n":"self"}],"o":{"n":"bufferslice"}}],[11,"deref_mut","","",170,{"i":[{"n":"self"}],"o":{"n":"bufferslice"}}],[11,"from","glium::buffer","",72,{"i":[{"n":"vertexbufferslice"}],"o":{"n":"bufferslice"}}],[11,"into","glium::vertex","",170,{"i":[{"n":"self"}],"o":{"n":"verticessource"}}],[11,"fmt","","",171,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_elements_size","","Returns the number of bytes between two consecutive elements in the buffer.",171,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"len","","Returns the number of elements in the buffer.",171,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"get_bindings","","Returns the associated `VertexFormat`.",171,{"i":[{"n":"self"}],"o":{"n":"vertexformat"}}],[11,"into_vertex_buffer","","Turns the vertex buffer into a `VertexBuffer` without checking the type.",171,{"i":[{"n":"self"}],"o":{"n":"vertexbuffer"}}],[11,"per_instance","","Creates a marker that instructs glium to use multiple instances.",171,{"i":[{"n":"self"}],"o":{"g":["perinstance","instancingnotsupported"],"n":"result"}}],[11,"from","","",171,{"i":[{"n":"vertexbuffer"}],"o":{"n":"vertexbufferany"}}],[11,"from","","",171,{"i":[{"n":"buffer"}],"o":{"n":"vertexbufferany"}}],[11,"deref","","",171,{"i":[{"n":"self"}],"o":{"n":"bufferany"}}],[11,"deref_mut","","",171,{"i":[{"n":"self"}],"o":{"n":"bufferany"}}],[11,"clone","","",167,{"i":[{"n":"self"}],"o":{"n":"attributetype"}}],[11,"fmt","","",167,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",167,{"i":[{"n":"self"},{"n":"attributetype"}],"o":{"n":"bool"}}],[11,"is_supported","","Returns true if the backend supports this type of attribute.",167,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"get_size_bytes","","Returns the size in bytes of a value of this type.",167,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"get_num_components","","Returns the number of values for this type.",167,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"fmt","","",172,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Builds a new transform feedback session.",172,{"i":[{"n":"f"},{"n":"program"},{"n":"buffer"}],"o":{"g":["transformfeedbacksession","transformfeedbacksessioncreationerror"],"n":"result"}}],[11,"drop","","",172,{"i":[{"n":"self"}]}],[6,"VertexFormat","","Describes the layout of each vertex in a vertex buffer.",null,null],[8,"MultiVerticesSource","","Objects that describe multiple vertex sources.",null,null],[16,"Iterator","","Iterator that enumerates each source.",173,null],[10,"iter","","Iterates over the `VerticesSource`.",173,null],[8,"Vertex","","Trait for structures that represent a vertex.",null,null],[10,"build_bindings","","Builds the `VertexFormat` representing the layout of this element.",174,{"o":{"n":"vertexformat"}}],[11,"is_supported","","Returns true if the backend supports this vertex format.",174,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[8,"Attribute","","Trait for types that can be used as vertex attributes.",null,null],[10,"get_type","","Get the type of data.",175,{"o":{"n":"attributetype"}}],[11,"is_supported","","Returns true if the backend supports this type of attribute.",175,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[11,"clone","","",168,{"i":[{"n":"self"}],"o":{"n":"verticessource"}}],[11,"into","","",164,{"i":[{"n":"self"}],"o":{"n":"verticessource"}}],[11,"into","","",165,{"i":[{"n":"self"}],"o":{"n":"verticessource"}}],[11,"into","","",176,{"i":[{"n":"self"}],"o":{"n":"verticessource"}}],[0,"texture","glium","A texture is an image loaded in video memory, which can be sampled in your shaders.",null,null],[3,"TextureAny","glium::texture","A texture whose type isn't fixed at compile-time.",null,null],[3,"TextureAnyMipmap","","Represents a specific mipmap of a texture.",null,null],[3,"TextureAnyLayer","","Represents a specific layer of an array texture and 3D textures.",null,null],[3,"TextureAnyLayerMipmap","","Represents a specific layer of a specific mipmap. This is the same as `TextureAnyImage`, except for 3D textures, cubemaps and cubemap arrays.",null,null],[3,"TextureAnyImage","","Represents a specific 2D image of a texture. 1D textures are considered as having a height of 1.",null,null],[3,"RawImage1d","","Represents raw data for a two-dimensional image.",null,null],[12,"data","","A contiguous array of pixel data.",177,null],[12,"width","","Number of pixels per column.",177,null],[12,"format","","Formats of the pixels.",177,null],[3,"RawImage2d","","Represents raw data for a two-dimensional image.",null,null],[12,"data","","A contiguous array of pixel data.",178,null],[12,"width","","Number of pixels per column.",178,null],[12,"height","","Number of pixels per row.",178,null],[12,"format","","Formats of the pixels.",178,null],[3,"RawImage3d","","Represents raw data for a two-dimensional image.",null,null],[12,"data","","A contiguous array of pixel data.",179,null],[12,"width","","Number of pixels per column.",179,null],[12,"height","","Number of pixels per row.",179,null],[12,"depth","","Number of pixels per depth.",179,null],[12,"format","","Formats of the pixels.",179,null],[4,"ClientFormat","","List of client-side pixel formats.",null,null],[13,"U8","","",180,null],[13,"U8U8","","",180,null],[13,"U8U8U8","","",180,null],[13,"U8U8U8U8","","",180,null],[13,"I8","","",180,null],[13,"I8I8","","",180,null],[13,"I8I8I8","","",180,null],[13,"I8I8I8I8","","",180,null],[13,"U16","","",180,null],[13,"U16U16","","",180,null],[13,"U16U16U16","","",180,null],[13,"U16U16U16U16","","",180,null],[13,"I16","","",180,null],[13,"I16I16","","",180,null],[13,"I16I16I16","","",180,null],[13,"I16I16I16I16","","",180,null],[13,"U32","","",180,null],[13,"U32U32","","",180,null],[13,"U32U32U32","","",180,null],[13,"U32U32U32U32","","",180,null],[13,"I32","","",180,null],[13,"I32I32","","",180,null],[13,"I32I32I32","","",180,null],[13,"I32I32I32I32","","",180,null],[13,"U3U3U2","","",180,null],[13,"U5U6U5","","",180,null],[13,"U4U4U4U4","","",180,null],[13,"U5U5U5U1","","",180,null],[13,"U10U10U10U2","","",180,null],[13,"F16","","",180,null],[13,"F16F16","","",180,null],[13,"F16F16F16","","",180,null],[13,"F16F16F16F16","","",180,null],[13,"F32","","",180,null],[13,"F32F32","","",180,null],[13,"F32F32F32","","",180,null],[13,"F32F32F32F32","","",180,null],[4,"TextureFormat","","Format of the internal representation of a texture.",null,null],[13,"UncompressedFloat","","",181,null],[13,"UncompressedIntegral","","",181,null],[13,"UncompressedUnsigned","","",181,null],[13,"Srgb","","",181,null],[13,"CompressedFormat","","",181,null],[13,"CompressedSrgbFormat","","",181,null],[13,"DepthFormat","","",181,null],[13,"StencilFormat","","",181,null],[13,"DepthStencilFormat","","",181,null],[4,"UncompressedFloatFormat","","List of uncompressed pixel formats that contain floating-point-like data.",null,null],[13,"U8","","Guaranteed to be supported for both textures and renderbuffers.",182,null],[13,"I8","","Guaranteed to be supported for textures.",182,null],[13,"U16","","Guaranteed to be supported for both textures and renderbuffers.",182,null],[13,"I16","","Guaranteed to be supported for textures.",182,null],[13,"U8U8","","Guaranteed to be supported for both textures and renderbuffers.",182,null],[13,"I8I8","","Guaranteed to be supported for textures.",182,null],[13,"U16U16","","Guaranteed to be supported for both textures and renderbuffers.",182,null],[13,"I16I16","","Guaranteed to be supported for textures.",182,null],[13,"U3U3U2","","",182,null],[13,"U4U4U4","","",182,null],[13,"U5U5U5","","",182,null],[13,"U8U8U8","","Guaranteed to be supported for textures.",182,null],[13,"I8I8I8","","Guaranteed to be supported for textures.",182,null],[13,"U10U10U10","","",182,null],[13,"U12U12U12","","",182,null],[13,"U16U16U16","","Guaranteed to be supported for both textures and renderbuffers.",182,null],[13,"I16I16I16","","Guaranteed to be supported for textures.",182,null],[13,"U2U2U2U2","","",182,null],[13,"U4U4U4U4","","",182,null],[13,"U5U5U5U1","","",182,null],[13,"U8U8U8U8","","Guaranteed to be supported for both textures and renderbuffers.",182,null],[13,"I8I8I8I8","","Guaranteed to be supported for textures.",182,null],[13,"U10U10U10U2","","Guaranteed to be supported for both textures and renderbuffers.",182,null],[13,"U12U12U12U12","","",182,null],[13,"U16U16U16U16","","Guaranteed to be supported for both textures and renderbuffers.",182,null],[13,"I16I16I16I16","","Guaranteed to be supported for both textures and renderbuffers.",182,null],[13,"F16","","Guaranteed to be supported for both textures and renderbuffers.",182,null],[13,"F16F16","","Guaranteed to be supported for both textures and renderbuffers.",182,null],[13,"F16F16F16","","Guaranteed to be supported for textures.",182,null],[13,"F16F16F16F16","","Guaranteed to be supported for both textures and renderbuffers.",182,null],[13,"F32","","Guaranteed to be supported for both textures and renderbuffers.",182,null],[13,"F32F32","","Guaranteed to be supported for both textures and renderbuffers.",182,null],[13,"F32F32F32","","Guaranteed to be supported for textures.",182,null],[13,"F32F32F32F32","","Guaranteed to be supported for both textures and renderbuffers.",182,null],[13,"F11F11F10","","Guaranteed to be supported for both textures and renderbuffers.",182,null],[13,"F9F9F9","","Uses three components of 9 bits of precision that all share the same exponent.",182,null],[4,"UncompressedIntFormat","","List of uncompressed pixel formats that contain signed integral data.",null,null],[13,"I8","","",183,null],[13,"I16","","",183,null],[13,"I32","","",183,null],[13,"I8I8","","",183,null],[13,"I16I16","","",183,null],[13,"I32I32","","",183,null],[13,"I8I8I8","","",183,null],[13,"I16I16I16","","May not be supported by renderbuffers.",183,null],[13,"I32I32I32","","May not be supported by renderbuffers.",183,null],[13,"I8I8I8I8","","May not be supported by renderbuffers.",183,null],[13,"I16I16I16I16","","",183,null],[13,"I32I32I32I32","","",183,null],[4,"UncompressedUintFormat","","List of uncompressed pixel formats that contain unsigned integral data.",null,null],[13,"U8","","",184,null],[13,"U16","","",184,null],[13,"U32","","",184,null],[13,"U8U8","","",184,null],[13,"U16U16","","",184,null],[13,"U32U32","","",184,null],[13,"U8U8U8","","",184,null],[13,"U16U16U16","","May not be supported by renderbuffers.",184,null],[13,"U32U32U32","","May not be supported by renderbuffers.",184,null],[13,"U8U8U8U8","","May not be supported by renderbuffers.",184,null],[13,"U16U16U16U16","","",184,null],[13,"U32U32U32U32","","",184,null],[13,"U10U10U10U2","","",184,null],[4,"CompressedFormat","","List of compressed texture formats.",null,null],[13,"RgtcFormatU","","Red/green compressed texture with one unsigned component.",185,null],[13,"RgtcFormatI","","Red/green compressed texture with one signed component.",185,null],[13,"RgtcFormatUU","","Red/green compressed texture with two unsigned components.",185,null],[13,"RgtcFormatII","","Red/green compressed texture with two signed components.",185,null],[13,"BptcUnorm4","","BPTC format with four components represented as integers.",185,null],[13,"BptcSignedFloat3","","BPTC format with three components (no alpha) represented as signed floats.",185,null],[13,"BptcUnsignedFloat3","","BPTC format with three components (no alpha) represented as unsigned floats.",185,null],[13,"S3tcDxt1NoAlpha","","S3TC DXT1 without alpha, see https://www.opengl.org/wiki/S3_Texture_Compression.",185,null],[13,"S3tcDxt1Alpha","","S3TC DXT1 with 1-bit alpha, see https://www.opengl.org/wiki/S3_Texture_Compression.",185,null],[13,"S3tcDxt3Alpha","","S3TC DXT3, see https://www.opengl.org/wiki/S3_Texture_Compression.",185,null],[13,"S3tcDxt5Alpha","","S3TC DXT5, see https://www.opengl.org/wiki/S3_Texture_Compression.",185,null],[4,"DepthFormat","","List of formats available for depth textures.",null,null],[13,"I16","","",186,null],[13,"I24","","",186,null],[13,"I32","","May not be supported by all hardware.",186,null],[13,"F32","","",186,null],[4,"DepthStencilFormat","","List of formats available for depth-stencil textures.",null,null],[13,"I24I8","","",187,null],[13,"F32I8","","",187,null],[4,"StencilFormat","","List of formats available for stencil textures.",null,null],[13,"I1","","",188,null],[13,"I4","","",188,null],[13,"I8","","",188,null],[13,"I16","","",188,null],[4,"CompressedSrgbFormat","","List of compressed pixel formats in the sRGB color space.",null,null],[13,"Bptc","","BPTC format. sRGB with alpha. Also called `BC7` by DirectX.",189,null],[13,"S3tcDxt1NoAlpha","","",189,null],[13,"S3tcDxt1Alpha","","",189,null],[13,"S3tcDxt3Alpha","","",189,null],[13,"S3tcDxt5Alpha","","",189,null],[4,"SrgbFormat","","List of uncompressed pixel formats that contain floating-point data in the sRGB color space.",null,null],[13,"U8U8U8","","",190,null],[13,"U8U8U8U8","","",190,null],[4,"Dimensions","","Type of a texture.",null,null],[13,"Texture1d","","",191,null],[12,"width","glium::texture::Dimensions","",191,null],[13,"Texture1dArray","glium::texture","",191,null],[12,"width","glium::texture::Dimensions","",191,null],[12,"array_size","","",191,null],[13,"Texture2d","glium::texture","",191,null],[12,"width","glium::texture::Dimensions","",191,null],[12,"height","","",191,null],[13,"Texture2dArray","glium::texture","",191,null],[12,"width","glium::texture::Dimensions","",191,null],[12,"height","","",191,null],[12,"array_size","","",191,null],[13,"Texture2dMultisample","glium::texture","",191,null],[12,"width","glium::texture::Dimensions","",191,null],[12,"height","","",191,null],[12,"samples","","",191,null],[13,"Texture2dMultisampleArray","glium::texture","",191,null],[12,"width","glium::texture::Dimensions","",191,null],[12,"height","","",191,null],[12,"array_size","","",191,null],[12,"samples","","",191,null],[13,"Texture3d","glium::texture","",191,null],[12,"width","glium::texture::Dimensions","",191,null],[12,"height","","",191,null],[12,"depth","","",191,null],[13,"Cubemap","glium::texture","",191,null],[12,"dimension","glium::texture::Dimensions","",191,null],[13,"CubemapArray","glium::texture","",191,null],[12,"dimension","glium::texture::Dimensions","",191,null],[12,"array_size","","",191,null],[4,"InternalFormat","glium::texture","Internal format of a texture.",null,null],[13,"OneComponent","","The format has one component.",192,null],[12,"ty1","glium::texture::InternalFormat","Type of the first component of the format.",192,null],[12,"bits1","","Number of bits of the first component.",192,null],[13,"TwoComponents","glium::texture","The format has two components.",192,null],[12,"ty1","glium::texture::InternalFormat","Type of the first component of the format.",192,null],[12,"bits1","","Number of bits of the first component.",192,null],[12,"ty2","","Type of the second component.",192,null],[12,"bits2","","Number of bits of the second component.",192,null],[13,"ThreeComponents","glium::texture","The format has three components.",192,null],[12,"ty1","glium::texture::InternalFormat","Type of the first component of the format.",192,null],[12,"bits1","","Number of bits of the first component.",192,null],[12,"ty2","","Type of the second component.",192,null],[12,"bits2","","Number of bits of the second component.",192,null],[12,"ty3","","Type of the third component.",192,null],[12,"bits3","","Number of bits of the third component.",192,null],[13,"FourComponents","glium::texture","The format has four components.",192,null],[12,"ty1","glium::texture::InternalFormat","Type of the first component of the format.",192,null],[12,"bits1","","Number of bits of the first component.",192,null],[12,"ty2","","Type of the second component.",192,null],[12,"bits2","","Number of bits of the second component.",192,null],[12,"ty3","","Type of the third component.",192,null],[12,"bits3","","Number of bits of the third component.",192,null],[12,"ty4","","Type of the fourth component.",192,null],[12,"bits4","","Number of bits of the fourth component.",192,null],[4,"InternalFormatType","glium::texture","Format of a component of an internal format.",null,null],[13,"SignedNormalized","","Floating point texture with signed components.",193,null],[13,"UnsignedNormalized","","Floating point texture with unsigned components.",193,null],[13,"Float","","Floating point texture with floats.",193,null],[13,"Int","","Integral texture.",193,null],[13,"UnsignedInt","","Unsigned texture.",193,null],[4,"GetFormatError","","Error that can happen when retrieving the internal format of a texture.",null,null],[13,"NotSupported","","The backend doesn't support retrieving the internal format.",194,null],[4,"CubeLayer","","Represents a layer of a cubemap.",null,null],[13,"PositiveX","","",195,null],[13,"NegativeX","","",195,null],[13,"PositiveY","","",195,null],[13,"NegativeY","","",195,null],[13,"PositiveZ","","",195,null],[13,"NegativeZ","","",195,null],[4,"TextureKind","","Represents a kind of texture.",null,null],[13,"Float","","",196,null],[13,"Integral","","",196,null],[13,"Unsigned","","",196,null],[13,"Depth","","",196,null],[13,"Stencil","","",196,null],[13,"DepthStencil","","",196,null],[4,"MipmapsOption","","Describes what to do about mipmaps during texture creation.",null,null],[13,"NoMipmap","","No mipmap will be allocated or generated.",197,null],[13,"EmptyMipmaps","","Allocates space for all the possible amount of mipmaps given the texture dimensions.",197,null],[13,"EmptyMipmapsMax","","Allocates space for the specified amount of mipmaps (excluding the top level) but does not generate mipmaps.",197,null],[13,"AutoGeneratedMipmaps","","Allocates and generates mipmaps for all the possible levels given the texture dimensions.",197,null],[13,"AutoGeneratedMipmapsMax","","Allocates and generates mipmaps for the specified amount of mipmaps (excluding the top level) the possible levels given the texture dimensions.",197,null],[4,"CompressedMipmapsOption","","Describes what to do about mipmaps during compressed texture creation.",null,null],[13,"NoMipmap","","No mipmaps will be allocated or generated.",198,null],[13,"EmptyMipmaps","","Allocates space for all the possible amount of mipmaps given the texture dimensions.",198,null],[13,"EmptyMipmapsMax","","Allocates space for the specified amount of mipmaps (excluding the top level) but does not generate mipmaps.",198,null],[4,"TextureCreationError","","Error that can happen when creating a texture.",null,null],[13,"FormatNotSupported","","The requested format is not supported by the backend.",199,null],[13,"DimensionsNotSupported","","The requested texture dimensions are not supported.",199,null],[13,"TypeNotSupported","","The texture format is not supported by the backend.",199,null],[5,"is_texture_1d_supported","","Returns true is one-dimensional textures are supported.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[5,"is_texture_2d_supported","","Returns true is two-dimensional textures are supported.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[5,"is_texture_3d_supported","","Returns true is three-dimensional textures are supported.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[5,"is_texture_1d_array_supported","","Returns true is one-dimensional texture arrays are supported.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[5,"is_texture_2d_array_supported","","Returns true is two-dimensional texture arrays are supported.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[5,"is_texture_2d_multisample_supported","","Returns true is two-dimensional multisample textures are supported.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[5,"is_texture_2d_multisample_array_supported","","Returns true is two-dimensional multisample texture arrays are supported.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[5,"is_cubemaps_supported","","Returns true is cubemaps are supported.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[5,"is_cubemap_arrays_supported","","Returns true is cubemap arrays are supported.",null,{"i":[{"n":"c"}],"o":{"n":"bool"}}],[0,"bindless","","Without bindless textures, using a texture in a shader requires binding the texture to a specific bind point before drawing. This not only slows down rendering, but may also prevent you from grouping multiple draw calls into one because of the limitation to the number of available texture units.",null,null],[3,"ResidentTexture","glium::texture::bindless","A texture that is resident in video memory. This allows you to use bindless textures in your shaders.",null,null],[3,"TextureHandle","","Represents a handle to a texture. Contains a raw pointer to a texture that is hidden from you.",null,null],[3,"BindlessTexturesNotSupportedError","","Bindless textures are not supported.",null,null],[11,"new","","Takes ownership of the given texture and makes it resident.",200,{"i":[{"n":"textureany"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"into_inner","","Unwraps the texture and restores it.",200,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref","","",200,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"deref_mut","","",200,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"drop","","",200,{"i":[{"n":"self"}]}],[11,"clone","","",201,{"i":[{"n":"self"}],"o":{"n":"texturehandle"}}],[11,"new","","Builds a new handle.",201,{"i":[{"n":"residenttexture"},{"n":"samplerbehavior"}],"o":{"n":"texturehandle"}}],[11,"set","","Sets the value to the given texture.",201,{"i":[{"n":"self"},{"n":"residenttexture"},{"n":"samplerbehavior"}]}],[11,"as_uniform_value","","",201,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"matches","","",201,{"i":[{"n":"blocklayout"},{"n":"usize"}],"o":{"g":["layoutmismatcherror"],"n":"result"}}],[11,"build_layout","","",201,{"i":[{"n":"usize"}],"o":{"n":"blocklayout"}}],[11,"fmt","","",202,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",202,{"i":[{"n":"self"}],"o":{"n":"bindlesstexturesnotsupportederror"}}],[0,"buffer_texture","glium::texture","A `BufferTexture` is a special kind of one-dimensional texture that gets its data from a buffer. Buffer textures have very limited capabilities compared to other texture types.",null,null],[3,"BufferTexture","glium::texture::buffer_texture","A one-dimensional texture that gets its data from a buffer.",null,null],[3,"BufferTextureRef","","Holds a reference to a `BufferTexture`.",null,null],[4,"TextureCreationError","","Error that can happen while building the texture part of a buffer texture.",null,null],[13,"NotSupported","","Buffer textures are not supported at all.",203,null],[13,"FormatNotSupported","","The requested format is not supported in combination with the given texture buffer type.",203,null],[13,"TooLarge","","The size of the buffer that you are trying to bind exceeds `GL_MAX_TEXTURE_BUFFER_SIZE`.",203,null],[4,"CreationError","","Error that can happen while building a buffer texture.",null,null],[13,"BufferCreationError","","Failed to create the buffer.",204,null],[13,"TextureCreationError","","Failed to create the texture.",204,null],[4,"BufferTextureType","","Type of a buffer texture.",null,null],[13,"Float","","The texture will behave as if it contained floating-point data. It can be sampled with a `samplerBuffer` in your GLSL code.",205,null],[13,"Integral","","The texture will behave as if it contained signed integral data. It can be sampled with a `isamplerBuffer` in your GLSL code.",205,null],[13,"Unsigned","","The texture will behave as if it contained unsigned integral data. It can be sampled with a `usamplerBuffer` in your GLSL code.",205,null],[4,"TextureBufferContentType","","Note that some three-component types are missing. This is not a mistake. OpenGL doesn't support them.",null,null],[13,"U8","","",206,null],[13,"I8","","",206,null],[13,"U16","","",206,null],[13,"I16","","",206,null],[13,"U32","","",206,null],[13,"I32","","",206,null],[13,"U8U8","","",206,null],[13,"I8I8","","",206,null],[13,"U16U16","","",206,null],[13,"I16I16","","",206,null],[13,"U32U32","","",206,null],[13,"I32I32","","",206,null],[13,"U32U32U32","","",206,null],[13,"I32I32I32","","",206,null],[13,"U8U8U8U8","","",206,null],[13,"I8I8I8I8","","",206,null],[13,"U16U16U16U16","","",206,null],[13,"I16I16I16I16","","",206,null],[13,"U32U32U32U32","","",206,null],[13,"I32I32I32I32","","",206,null],[13,"F16","","",206,null],[13,"F32","","",206,null],[13,"F16F16","","",206,null],[13,"F32F32","","",206,null],[13,"F32F32F32","","",206,null],[13,"F16F16F16F16","","",206,null],[13,"F32F32F32F32","","",206,null],[8,"TextureBufferContent","","Trait for data types that can be interpreted by a buffer texture.",null,null],[10,"get_type","","Returns the enumeration corresponding to elements of this data type.",207,{"o":{"n":"texturebuffercontenttype"}}],[11,"clone","","",203,{"i":[{"n":"self"}],"o":{"n":"texturecreationerror"}}],[11,"fmt","","",203,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",203,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",203,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",204,{"i":[{"n":"self"}],"o":{"n":"creationerror"}}],[11,"fmt","","",204,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",204,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",204,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",204,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"from","","",204,{"i":[{"n":"buffercreationerror"}],"o":{"n":"creationerror"}}],[11,"from","","",204,{"i":[{"n":"texturecreationerror"}],"o":{"n":"creationerror"}}],[11,"clone","","",205,{"i":[{"n":"self"}],"o":{"n":"buffertexturetype"}}],[11,"fmt","","",205,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",205,{"i":[{"n":"self"},{"n":"buffertexturetype"}],"o":{"n":"bool"}}],[11,"new","","Builds a new texture buffer from data.",208,null],[11,"dynamic","","Builds a new texture buffer from data.",208,null],[11,"persistent","","Builds a new texture buffer from data.",208,null],[11,"immutable","","Builds a new texture buffer from data.",208,null],[11,"empty","","Builds a new empty buffer buffer.",208,{"i":[{"n":"f"},{"n":"usize"},{"n":"buffertexturetype"}],"o":{"g":["buffertexture","creationerror"],"n":"result"}}],[11,"empty_dynamic","","Builds a new empty buffer buffer.",208,{"i":[{"n":"f"},{"n":"usize"},{"n":"buffertexturetype"}],"o":{"g":["buffertexture","creationerror"],"n":"result"}}],[11,"empty_persistent","","Builds a new empty buffer buffer.",208,{"i":[{"n":"f"},{"n":"usize"},{"n":"buffertexturetype"}],"o":{"g":["buffertexture","creationerror"],"n":"result"}}],[11,"empty_immutable","","Builds a new empty buffer buffer.",208,{"i":[{"n":"f"},{"n":"usize"},{"n":"buffertexturetype"}],"o":{"g":["buffertexture","creationerror"],"n":"result"}}],[11,"from_buffer","","Builds a new buffer texture by taking ownership of a buffer.",208,{"i":[{"n":"f"},{"n":"buffer"},{"n":"buffertexturetype"}],"o":{"g":["buffertexture"],"n":"result"}}],[11,"deref","","",208,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"deref_mut","","",208,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"drop","","",208,{"i":[{"n":"self"}]}],[11,"as_buffer_texture_ref","","Builds a `BufferTextureRef`.",208,{"i":[{"n":"self"}],"o":{"n":"buffertextureref"}}],[11,"as_uniform_value","","",208,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"clone","","",209,{"i":[{"n":"self"}],"o":{"n":"buffertextureref"}}],[11,"get_texture_type","","Return the type of the texture.",209,{"i":[{"n":"self"}],"o":{"n":"buffertexturetype"}}],[0,"pixel_buffer","glium::texture","Pixel buffers are buffers that contain two-dimensional texture data.",null,null],[3,"PixelBuffer","glium::texture::pixel_buffer","Buffer that stores the content of a texture.",null,null],[11,"new_empty","","Builds a new buffer with an uninitialized content.",210,{"i":[{"n":"f"},{"n":"usize"}],"o":{"n":"pixelbuffer"}}],[11,"read_as_texture_2d","","Reads the content of the pixel buffer.",210,{"i":[{"n":"self"}],"o":{"g":["readerror"],"n":"result"}}],[11,"deref","","",210,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"deref_mut","","",210,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"get_id","","",210,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"clone","glium::texture","",191,{"i":[{"n":"self"}],"o":{"n":"dimensions"}}],[11,"fmt","","",191,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",191,{"i":[{"n":"self"},{"n":"dimensions"}],"o":{"n":"bool"}}],[11,"ne","","",191,{"i":[{"n":"self"},{"n":"dimensions"}],"o":{"n":"bool"}}],[11,"get_width","","Returns the width of the texture.",211,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_height","","Returns the height of the texture.",211,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"get_depth","","Returns the depth of the texture.",211,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"kind","","Returns the kind of texture.",211,{"i":[{"n":"self"}],"o":{"n":"texturekind"}}],[11,"dimensions","","Returns the dimensions of the texture.",211,{"i":[{"n":"self"}],"o":{"n":"dimensions"}}],[11,"get_array_size","","Returns the array size of the texture.",211,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"get_samples","","Returns the number of samples of the texture if it is a multisampling texture.",211,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"first_layer","","Returns a structure that represents the first layer of the texture. All textures have a first layer.",211,{"i":[{"n":"self"}],"o":{"n":"textureanylayer"}}],[11,"layer","","Returns a structure that represents a specific layer of the texture.",211,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["textureanylayer"],"n":"option"}}],[11,"get_texture_type","","Returns the type of the texture (1D, 2D, 3D, etc.).",211,{"i":[{"n":"self"}],"o":{"n":"dimensions"}}],[11,"get_internal_format","","Determines the internal format of this texture.",211,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",211,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"main_level","","Returns a structure that represents the main mipmap level of the texture.",211,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"mipmap","","Returns a structure that represents a specific mipmap of the texture.",211,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["textureanymipmap"],"n":"option"}}],[11,"generate_mipmaps","","Binds this texture and generates mipmaps.",211,{"i":[{"n":"self"}]}],[11,"get_id","","",211,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",211,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"drop","","",211,{"i":[{"n":"self"}]}],[11,"clone","","",212,{"i":[{"n":"self"}],"o":{"n":"textureanylayer"}}],[11,"get_texture","","Returns the texture.",212,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"get_samples","","Returns the number of samples of the texture.",212,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"get_layer","","Returns the layer of the texture.",212,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"main_level","","Returns a structure that represents the main mipmap level of this layer of the texture.",212,{"i":[{"n":"self"}],"o":{"n":"textureanylayermipmap"}}],[11,"mipmap","","Returns a structure that represents a specific mipmap of this layer of the texture.",212,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["textureanylayermipmap"],"n":"option"}}],[11,"clone","","",213,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"get_width","","Returns the width of the mipmap.",213,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_height","","Returns the height of the mipmap.",213,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"get_depth","","Returns the depth of the mipmap.",213,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"get_samples","","Returns the number of samples of the texture.",213,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"get_texture","","Returns the texture.",213,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"get_level","","Returns the level of the texture.",213,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Returns a structure that represents the first layer of this mipmap of the texture. All textures have a first layer.",213,{"i":[{"n":"self"}],"o":{"n":"textureanylayermipmap"}}],[11,"layer","","Returns a structure that represents a specific layer of this mipmap of the texture.",213,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["textureanylayermipmap"],"n":"option"}}],[11,"get_array_size","","Returns the array size of the texture.",213,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"raw_upload_from_pixel_buffer","","Uploads data to the texture from a buffer.",213,{"i":[{"n":"self"},{"n":"bufferslice"},{"g":["u32"],"n":"range"},{"g":["u32"],"n":"range"},{"g":["u32"],"n":"range"}]}],[11,"raw_upload_from_pixel_buffer_inverted","","Uploads data to the texture from a buffer. The R, G and B components are flipped.",213,{"i":[{"n":"self"},{"n":"bufferslice"},{"g":["u32"],"n":"range"},{"g":["u32"],"n":"range"},{"g":["u32"],"n":"range"}]}],[11,"clone","","",214,{"i":[{"n":"self"}],"o":{"n":"textureanylayermipmap"}}],[11,"get_texture","","Returns the texture.",214,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"get_level","","Returns the level of the texture.",214,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_layer","","Returns the layer of the texture.",214,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_width","","Returns the width of this texture slice.",214,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_height","","Returns the height of this texture slice.",214,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"get_samples","","Returns the number of samples of the texture.",214,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"into_image","","Turns this into an image.",214,{"i":[{"n":"self"},{"g":["cubelayer"],"n":"option"}],"o":{"g":["textureanyimage"],"n":"option"}}],[11,"clone","","",215,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"get_texture","","Returns the texture.",215,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"get_level","","Returns the level of the texture.",215,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_layer","","Returns the layer of the texture.",215,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_cubemap_layer","","Returns the cubemap layer of this image, or `None` if the texture is not a cubemap.",215,{"i":[{"n":"self"}],"o":{"g":["cubelayer"],"n":"option"}}],[11,"get_width","","Returns the width of this texture slice.",215,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_height","","Returns the height of this texture slice.",215,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"get_samples","","Returns the number of samples of the texture.",215,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"raw_read","","Reads the content of the image.",215,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"t"}}],[11,"raw_read_to_pixel_buffer","","Reads the content of the image to a pixel buffer.",215,{"i":[{"n":"self"},{"n":"rect"},{"n":"pixelbuffer"}]}],[11,"raw_clear_buffer","","Clears the content of the texture to a specific value.",215,{"i":[{"n":"self"},{"n":"d"}]}],[11,"clone","","",194,{"i":[{"n":"self"}],"o":{"n":"getformaterror"}}],[11,"fmt","","",194,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",194,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",194,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",192,{"i":[{"n":"self"}],"o":{"n":"internalformat"}}],[11,"fmt","","",192,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",192,{"i":[{"n":"self"},{"n":"internalformat"}],"o":{"n":"bool"}}],[11,"ne","","",192,{"i":[{"n":"self"},{"n":"internalformat"}],"o":{"n":"bool"}}],[11,"get_total_bits","","Returns the total number of bits of this format.",192,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",193,{"i":[{"n":"self"}],"o":{"n":"internalformattype"}}],[11,"fmt","","",193,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",193,{"i":[{"n":"self"},{"n":"internalformattype"}],"o":{"n":"bool"}}],[0,"texture1d","","Contains the implementation of `Texture1d`.",null,null],[3,"Texture1d","glium::texture::texture1d","A one-dimensional texture  containing floating-point data.",null,null],[3,"Texture1dMipmap","","Represents a single mipmap level of a `Texture1d`.",null,null],[11,"get_id","","",216,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",216,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",216,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::texture1d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",216,{"i":[{"n":"self"}],"o":{"g":["texture1d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",216,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",216,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["texture1d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",216,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["texture1d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",216,{"i":[{"n":"f"},{"n":"t"},{"n":"uncompressedfloatformat"},{"n":"mipmapsoption"}],"o":{"g":["texture1d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",216,{"i":[{"n":"f"},{"n":"u32"}],"o":{"g":["texture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",216,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["texture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",216,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["texture1d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",216,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"texture1d"}}],[11,"width","","Returns the width of that image.",216,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",216,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",216,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",216,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture1dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",216,{"i":[{"n":"self"}],"o":{"n":"texture1dmipmap"}}],[11,"clone","","",217,{"i":[{"n":"self"}],"o":{"n":"texture1dmipmap"}}],[11,"deref","","",217,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",217,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",217,{"i":[{"n":"self"}],"o":{"n":"texture1d"}}],[11,"get_level","","Returns the texture level.",217,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",217,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",217,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"compressed_texture1d","glium::texture","Contains the implementation of `CompressedTexture1d`.",null,null],[3,"CompressedTexture1d","glium::texture::compressed_texture1d","A compressed one-dimensional texture  containing floating-point data.",null,null],[3,"CompressedTexture1dMipmap","","Represents a single mipmap level of a `CompressedTexture1d`.",null,null],[11,"get_id","","",218,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",218,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",218,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_texture1d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",218,{"i":[{"n":"self"}],"o":{"g":["compressedtexture1d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",218,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",218,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["compressedtexture1d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",218,{"i":[{"n":"f"},{"n":"t"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedtexture1d","texturecreationerror"],"n":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",218,null],[11,"with_format","","Builds a new texture with a specific format.",218,{"i":[{"n":"f"},{"n":"t"},{"n":"compressedformat"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedtexture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",218,{"i":[{"n":"f"},{"n":"compressedformat"},{"n":"compressedmipmapsoption"},{"n":"u32"}],"o":{"g":["compressedtexture1d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",218,{"i":[{"n":"f"},{"n":"compressedformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"compressedtexture1d"}}],[11,"width","","Returns the width of that image.",218,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",218,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",218,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",218,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",218,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedtexture1dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",218,{"i":[{"n":"self"}],"o":{"n":"compressedtexture1dmipmap"}}],[11,"clone","","",219,{"i":[{"n":"self"}],"o":{"n":"compressedtexture1dmipmap"}}],[11,"deref","","",219,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",219,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",219,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_texture","","Returns the corresponding texture.",219,{"i":[{"n":"self"}],"o":{"n":"compressedtexture1d"}}],[11,"get_level","","Returns the texture level.",219,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",219,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[0,"srgb_texture1d","glium::texture","Contains the implementation of `SrgbTexture1d`.",null,null],[3,"SrgbTexture1d","glium::texture::srgb_texture1d","A one-dimensional texture  containing sRGB floating-point data.",null,null],[3,"SrgbTexture1dMipmap","","Represents a single mipmap level of a `SrgbTexture1d`.",null,null],[11,"get_id","","",220,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",220,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",220,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture1d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",220,{"i":[{"n":"self"}],"o":{"g":["srgbtexture1d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",220,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",220,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["srgbtexture1d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",220,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["srgbtexture1d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",220,{"i":[{"n":"f"},{"n":"t"},{"n":"srgbformat"},{"n":"mipmapsoption"}],"o":{"g":["srgbtexture1d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",220,{"i":[{"n":"f"},{"n":"u32"}],"o":{"g":["srgbtexture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",220,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["srgbtexture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",220,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["srgbtexture1d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",220,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"srgbtexture1d"}}],[11,"width","","Returns the width of that image.",220,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",220,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",220,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",220,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture1dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",220,{"i":[{"n":"self"}],"o":{"n":"srgbtexture1dmipmap"}}],[11,"clone","","",221,{"i":[{"n":"self"}],"o":{"n":"srgbtexture1dmipmap"}}],[11,"deref","","",221,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",221,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",221,{"i":[{"n":"self"}],"o":{"n":"srgbtexture1d"}}],[11,"get_level","","Returns the texture level.",221,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",221,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",221,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"compressed_srgb_texture1d","glium::texture","Contains the implementation of `CompressedSrgbTexture1d`.",null,null],[3,"CompressedSrgbTexture1d","glium::texture::compressed_srgb_texture1d","A compressed one-dimensional texture  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture1dMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture1d`.",null,null],[11,"get_id","","",222,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",222,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",222,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_texture1d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",222,{"i":[{"n":"self"}],"o":{"g":["compressedsrgbtexture1d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",222,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",222,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["compressedsrgbtexture1d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",222,{"i":[{"n":"f"},{"n":"t"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedsrgbtexture1d","texturecreationerror"],"n":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",222,null],[11,"with_format","","Builds a new texture with a specific format.",222,{"i":[{"n":"f"},{"n":"t"},{"n":"compressedsrgbformat"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedsrgbtexture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",222,{"i":[{"n":"f"},{"n":"compressedsrgbformat"},{"n":"compressedmipmapsoption"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture1d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",222,{"i":[{"n":"f"},{"n":"compressedsrgbformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"compressedsrgbtexture1d"}}],[11,"width","","Returns the width of that image.",222,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",222,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",222,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",222,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",222,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture1dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",222,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture1dmipmap"}}],[11,"clone","","",223,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture1dmipmap"}}],[11,"deref","","",223,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",223,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",223,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_texture","","Returns the corresponding texture.",223,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture1d"}}],[11,"get_level","","Returns the texture level.",223,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",223,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[0,"integral_texture1d","glium::texture","Contains the implementation of `IntegralTexture1d`.",null,null],[3,"IntegralTexture1d","glium::texture::integral_texture1d","A one-dimensional texture  containing signed integral data.",null,null],[3,"IntegralTexture1dMipmap","","Represents a single mipmap level of a `IntegralTexture1d`.",null,null],[11,"get_id","","",224,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",224,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",224,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture1d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",224,{"i":[{"n":"self"}],"o":{"g":["integraltexture1d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",224,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",224,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["integraltexture1d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",224,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["integraltexture1d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",224,{"i":[{"n":"f"},{"n":"t"},{"n":"uncompressedintformat"},{"n":"mipmapsoption"}],"o":{"g":["integraltexture1d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",224,{"i":[{"n":"f"},{"n":"u32"}],"o":{"g":["integraltexture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",224,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["integraltexture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",224,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["integraltexture1d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",224,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"integraltexture1d"}}],[11,"width","","Returns the width of that image.",224,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",224,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",224,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",224,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture1dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",224,{"i":[{"n":"self"}],"o":{"n":"integraltexture1dmipmap"}}],[11,"clone","","",225,{"i":[{"n":"self"}],"o":{"n":"integraltexture1dmipmap"}}],[11,"deref","","",225,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",225,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",225,{"i":[{"n":"self"}],"o":{"n":"integraltexture1d"}}],[11,"get_level","","Returns the texture level.",225,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",225,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",225,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"unsigned_texture1d","glium::texture","Contains the implementation of `UnsignedTexture1d`.",null,null],[3,"UnsignedTexture1d","glium::texture::unsigned_texture1d","A one-dimensional texture  containing unsigned integral data.",null,null],[3,"UnsignedTexture1dMipmap","","Represents a single mipmap level of a `UnsignedTexture1d`.",null,null],[11,"get_id","","",226,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",226,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",226,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture1d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",226,{"i":[{"n":"self"}],"o":{"g":["unsignedtexture1d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",226,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",226,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["unsignedtexture1d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",226,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["unsignedtexture1d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",226,{"i":[{"n":"f"},{"n":"t"},{"n":"uncompresseduintformat"},{"n":"mipmapsoption"}],"o":{"g":["unsignedtexture1d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",226,{"i":[{"n":"f"},{"n":"u32"}],"o":{"g":["unsignedtexture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",226,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["unsignedtexture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",226,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["unsignedtexture1d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",226,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"unsignedtexture1d"}}],[11,"width","","Returns the width of that image.",226,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",226,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",226,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",226,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture1dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",226,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture1dmipmap"}}],[11,"clone","","",227,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture1dmipmap"}}],[11,"deref","","",227,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",227,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",227,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture1d"}}],[11,"get_level","","Returns the texture level.",227,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",227,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",227,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"depth_texture1d","glium::texture","Contains the implementation of `DepthTexture1d`.",null,null],[3,"DepthTexture1d","glium::texture::depth_texture1d","A one-dimensional texture  containing depth data.",null,null],[3,"DepthTexture1dMipmap","","Represents a single mipmap level of a `DepthTexture1d`.",null,null],[11,"get_id","","",228,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",228,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",228,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture1d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",228,{"i":[{"n":"self"}],"o":{"g":["depthtexture1d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",228,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",228,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["depthtexture1d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",228,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["depthtexture1d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",228,{"i":[{"n":"f"},{"n":"t"},{"n":"depthformat"},{"n":"mipmapsoption"}],"o":{"g":["depthtexture1d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",228,{"i":[{"n":"f"},{"n":"u32"}],"o":{"g":["depthtexture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",228,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["depthtexture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",228,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["depthtexture1d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",228,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthtexture1d"}}],[11,"width","","Returns the width of that image.",228,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",228,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",228,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",228,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture1dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",228,{"i":[{"n":"self"}],"o":{"n":"depthtexture1dmipmap"}}],[11,"clone","","",229,{"i":[{"n":"self"}],"o":{"n":"depthtexture1dmipmap"}}],[11,"deref","","",229,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",229,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",229,{"i":[{"n":"self"}],"o":{"n":"depthtexture1d"}}],[11,"get_level","","Returns the texture level.",229,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",229,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_depth_attachment","","",229,{"i":[{"n":"self"}],"o":{"n":"depthattachment"}}],[0,"stencil_texture1d","glium::texture","Contains the implementation of `StencilTexture1d`.",null,null],[3,"StencilTexture1d","glium::texture::stencil_texture1d","A one-dimensional texture  containing stencil data.",null,null],[3,"StencilTexture1dMipmap","","Represents a single mipmap level of a `StencilTexture1d`.",null,null],[11,"get_id","","",230,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",230,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",230,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",230,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",230,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["stenciltexture1d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",230,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["stenciltexture1d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",230,{"i":[{"n":"f"},{"n":"t"},{"n":"stencilformat"},{"n":"mipmapsoption"}],"o":{"g":["stenciltexture1d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",230,{"i":[{"n":"f"},{"n":"u32"}],"o":{"g":["stenciltexture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",230,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["stenciltexture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",230,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["stenciltexture1d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",230,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"stenciltexture1d"}}],[11,"width","","Returns the width of that image.",230,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",230,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",230,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",230,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture1dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",230,{"i":[{"n":"self"}],"o":{"n":"stenciltexture1dmipmap"}}],[11,"clone","","",231,{"i":[{"n":"self"}],"o":{"n":"stenciltexture1dmipmap"}}],[11,"deref","","",231,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",231,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",231,{"i":[{"n":"self"}],"o":{"n":"stenciltexture1d"}}],[11,"get_level","","Returns the texture level.",231,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",231,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_stencil_attachment","","",231,{"i":[{"n":"self"}],"o":{"n":"stencilattachment"}}],[0,"depth_stencil_texture1d","glium::texture","Contains the implementation of `DepthStencilTexture1d`.",null,null],[3,"DepthStencilTexture1d","glium::texture::depth_stencil_texture1d","A one-dimensional texture  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture1dMipmap","","Represents a single mipmap level of a `DepthStencilTexture1d`.",null,null],[11,"get_id","","",232,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",232,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",232,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",232,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",232,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["depthstenciltexture1d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",232,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["depthstenciltexture1d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",232,{"i":[{"n":"f"},{"n":"t"},{"n":"depthstencilformat"},{"n":"mipmapsoption"}],"o":{"g":["depthstenciltexture1d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",232,{"i":[{"n":"f"},{"n":"u32"}],"o":{"g":["depthstenciltexture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",232,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["depthstenciltexture1d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",232,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["depthstenciltexture1d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",232,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthstenciltexture1d"}}],[11,"width","","Returns the width of that image.",232,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",232,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",232,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",232,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture1dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",232,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture1dmipmap"}}],[11,"clone","","",233,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture1dmipmap"}}],[11,"deref","","",233,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",233,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",233,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture1d"}}],[11,"get_level","","Returns the texture level.",233,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",233,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",233,{"i":[{"n":"self"}],"o":{"n":"depthstencilattachment"}}],[0,"texture2d","glium::texture","Contains the implementation of `Texture2d`.",null,null],[3,"Texture2d","glium::texture::texture2d","A two-dimensional texture  containing floating-point data.",null,null],[3,"Texture2dMipmap","","Represents a single mipmap level of a `Texture2d`.",null,null],[11,"get_id","","",234,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",234,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",234,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::texture2d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",234,{"i":[{"n":"self"}],"o":{"g":["texture2d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",234,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",234,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["texture2d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",234,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["texture2d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",234,{"i":[{"n":"f"},{"n":"t"},{"n":"uncompressedfloatformat"},{"n":"mipmapsoption"}],"o":{"g":["texture2d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",234,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",234,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",234,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture2d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",234,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"texture2d"}}],[11,"width","","Returns the width of that image.",234,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",234,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",234,null],[11,"as_surface","","Starts drawing on the texture.",234,{"i":[{"n":"self"}],"o":{"n":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",234,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read","","Reads the content of the texture to RAM. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",234,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",234,{"i":[{"n":"self"}],"o":{"n":"pixelbuffer"}}],[11,"unchecked_read","","Unsafely reads the content of the texture to RAM in the specified pixel format. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",234,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"unchecked_read_to_pixel_buffer","","Unsafely reads the content of the texture into a buffer in video memory. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",234,{"i":[{"n":"self"}],"o":{"n":"pixelbuffer"}}],[11,"write","","Uploads some data in the texture.",234,{"i":[{"n":"self"},{"n":"rect"},{"n":"t"}]}],[11,"resident","","Turns the texture into a `ResidentTexture`.",234,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",234,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture2dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",234,{"i":[{"n":"self"}],"o":{"n":"texture2dmipmap"}}],[11,"clone","","",235,{"i":[{"n":"self"}],"o":{"n":"texture2dmipmap"}}],[11,"deref","","",235,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",235,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",235,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",235,null],[11,"write","","Uploads some data in the texture level.",235,{"i":[{"n":"self"},{"n":"rect"},{"n":"t"}]}],[11,"get_texture","","Returns the corresponding texture.",235,{"i":[{"n":"self"}],"o":{"n":"texture2d"}}],[11,"get_level","","Returns the texture level.",235,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",235,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",235,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"compressed_texture2d","glium::texture","Contains the implementation of `CompressedTexture2d`.",null,null],[3,"CompressedTexture2d","glium::texture::compressed_texture2d","A compressed two-dimensional texture  containing floating-point data.",null,null],[3,"CompressedTexture2dMipmap","","Represents a single mipmap level of a `CompressedTexture2d`.",null,null],[11,"get_id","","",236,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",236,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",236,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_texture2d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",236,{"i":[{"n":"self"}],"o":{"g":["compressedtexture2d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",236,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",236,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["compressedtexture2d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",236,{"i":[{"n":"f"},{"n":"t"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedtexture2d","texturecreationerror"],"n":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",236,null],[11,"with_format","","Builds a new texture with a specific format.",236,{"i":[{"n":"f"},{"n":"t"},{"n":"compressedformat"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedtexture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",236,{"i":[{"n":"f"},{"n":"compressedformat"},{"n":"compressedmipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["compressedtexture2d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",236,{"i":[{"n":"f"},{"n":"compressedformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"compressedtexture2d"}}],[11,"width","","Returns the width of that image.",236,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",236,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",236,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",236,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read","","Reads the content of the texture to RAM. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",236,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",236,{"i":[{"n":"self"}],"o":{"n":"pixelbuffer"}}],[11,"unchecked_read","","Unsafely reads the content of the texture to RAM in the specified pixel format. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",236,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"unchecked_read_to_pixel_buffer","","Unsafely reads the content of the texture into a buffer in video memory. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",236,{"i":[{"n":"self"}],"o":{"n":"pixelbuffer"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",236,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"write","","Uploads some data in the texture.",236,{"i":[{"n":"self"},{"n":"rect"},{"n":"t"}]}],[11,"write_compressed_data","","Uploads some data in the texture by using a compressed format as input.",236,null],[11,"resident","","Turns the texture into a `ResidentTexture`.",236,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",236,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedtexture2dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",236,{"i":[{"n":"self"}],"o":{"n":"compressedtexture2dmipmap"}}],[11,"clone","","",237,{"i":[{"n":"self"}],"o":{"n":"compressedtexture2dmipmap"}}],[11,"deref","","",237,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",237,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",237,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",237,null],[11,"write","","Uploads some data in the texture level.",237,{"i":[{"n":"self"},{"n":"rect"},{"n":"t"}]}],[11,"write_compressed_data","","Uploads some data in the texture level by using a compressed format as input.",237,null],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",237,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_texture","","Returns the corresponding texture.",237,{"i":[{"n":"self"}],"o":{"n":"compressedtexture2d"}}],[11,"get_level","","Returns the texture level.",237,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",237,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[0,"srgb_texture2d","glium::texture","Contains the implementation of `SrgbTexture2d`.",null,null],[3,"SrgbTexture2d","glium::texture::srgb_texture2d","A two-dimensional texture  containing sRGB floating-point data.",null,null],[3,"SrgbTexture2dMipmap","","Represents a single mipmap level of a `SrgbTexture2d`.",null,null],[11,"get_id","","",238,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",238,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",238,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture2d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",238,{"i":[{"n":"self"}],"o":{"g":["srgbtexture2d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",238,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",238,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["srgbtexture2d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",238,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["srgbtexture2d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",238,{"i":[{"n":"f"},{"n":"t"},{"n":"srgbformat"},{"n":"mipmapsoption"}],"o":{"g":["srgbtexture2d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",238,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",238,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",238,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture2d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",238,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"srgbtexture2d"}}],[11,"width","","Returns the width of that image.",238,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",238,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",238,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",238,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read","","Reads the content of the texture to RAM. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",238,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",238,{"i":[{"n":"self"}],"o":{"n":"pixelbuffer"}}],[11,"unchecked_read","","Unsafely reads the content of the texture to RAM in the specified pixel format. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",238,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"unchecked_read_to_pixel_buffer","","Unsafely reads the content of the texture into a buffer in video memory. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",238,{"i":[{"n":"self"}],"o":{"n":"pixelbuffer"}}],[11,"write","","Uploads some data in the texture.",238,{"i":[{"n":"self"},{"n":"rect"},{"n":"t"}]}],[11,"resident","","Turns the texture into a `ResidentTexture`.",238,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",238,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture2dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",238,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2dmipmap"}}],[11,"clone","","",239,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2dmipmap"}}],[11,"deref","","",239,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",239,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",239,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",239,null],[11,"write","","Uploads some data in the texture level.",239,{"i":[{"n":"self"},{"n":"rect"},{"n":"t"}]}],[11,"get_texture","","Returns the corresponding texture.",239,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2d"}}],[11,"get_level","","Returns the texture level.",239,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",239,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",239,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"compressed_srgb_texture2d","glium::texture","Contains the implementation of `CompressedSrgbTexture2d`.",null,null],[3,"CompressedSrgbTexture2d","glium::texture::compressed_srgb_texture2d","A compressed two-dimensional texture  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture2dMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture2d`.",null,null],[11,"get_id","","",240,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",240,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",240,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_texture2d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",240,{"i":[{"n":"self"}],"o":{"g":["compressedsrgbtexture2d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",240,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",240,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["compressedsrgbtexture2d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",240,{"i":[{"n":"f"},{"n":"t"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedsrgbtexture2d","texturecreationerror"],"n":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",240,null],[11,"with_format","","Builds a new texture with a specific format.",240,{"i":[{"n":"f"},{"n":"t"},{"n":"compressedsrgbformat"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedsrgbtexture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",240,{"i":[{"n":"f"},{"n":"compressedsrgbformat"},{"n":"compressedmipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture2d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",240,{"i":[{"n":"f"},{"n":"compressedsrgbformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"compressedsrgbtexture2d"}}],[11,"width","","Returns the width of that image.",240,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",240,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",240,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",240,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read","","Reads the content of the texture to RAM. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",240,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",240,{"i":[{"n":"self"}],"o":{"n":"pixelbuffer"}}],[11,"unchecked_read","","Unsafely reads the content of the texture to RAM in the specified pixel format. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",240,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"unchecked_read_to_pixel_buffer","","Unsafely reads the content of the texture into a buffer in video memory. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",240,{"i":[{"n":"self"}],"o":{"n":"pixelbuffer"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",240,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"write","","Uploads some data in the texture.",240,{"i":[{"n":"self"},{"n":"rect"},{"n":"t"}]}],[11,"write_compressed_data","","Uploads some data in the texture by using a compressed format as input.",240,null],[11,"resident","","Turns the texture into a `ResidentTexture`.",240,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",240,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture2dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",240,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture2dmipmap"}}],[11,"clone","","",241,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture2dmipmap"}}],[11,"deref","","",241,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",241,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",241,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",241,null],[11,"write","","Uploads some data in the texture level.",241,{"i":[{"n":"self"},{"n":"rect"},{"n":"t"}]}],[11,"write_compressed_data","","Uploads some data in the texture level by using a compressed format as input.",241,null],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",241,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_texture","","Returns the corresponding texture.",241,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture2d"}}],[11,"get_level","","Returns the texture level.",241,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",241,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[0,"integral_texture2d","glium::texture","Contains the implementation of `IntegralTexture2d`.",null,null],[3,"IntegralTexture2d","glium::texture::integral_texture2d","A two-dimensional texture  containing signed integral data.",null,null],[3,"IntegralTexture2dMipmap","","Represents a single mipmap level of a `IntegralTexture2d`.",null,null],[11,"get_id","","",242,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",242,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",242,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture2d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",242,{"i":[{"n":"self"}],"o":{"g":["integraltexture2d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",242,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",242,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["integraltexture2d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",242,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["integraltexture2d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",242,{"i":[{"n":"f"},{"n":"t"},{"n":"uncompressedintformat"},{"n":"mipmapsoption"}],"o":{"g":["integraltexture2d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",242,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",242,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",242,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture2d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",242,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"integraltexture2d"}}],[11,"width","","Returns the width of that image.",242,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",242,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",242,null],[11,"as_surface","","Starts drawing on the texture.",242,{"i":[{"n":"self"}],"o":{"n":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",242,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",242,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",242,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture2dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",242,{"i":[{"n":"self"}],"o":{"n":"integraltexture2dmipmap"}}],[11,"clone","","",243,{"i":[{"n":"self"}],"o":{"n":"integraltexture2dmipmap"}}],[11,"deref","","",243,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",243,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",243,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",243,null],[11,"get_texture","","Returns the corresponding texture.",243,{"i":[{"n":"self"}],"o":{"n":"integraltexture2d"}}],[11,"get_level","","Returns the texture level.",243,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",243,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",243,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"unsigned_texture2d","glium::texture","Contains the implementation of `UnsignedTexture2d`.",null,null],[3,"UnsignedTexture2d","glium::texture::unsigned_texture2d","A two-dimensional texture  containing unsigned integral data.",null,null],[3,"UnsignedTexture2dMipmap","","Represents a single mipmap level of a `UnsignedTexture2d`.",null,null],[11,"get_id","","",244,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",244,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",244,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture2d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",244,{"i":[{"n":"self"}],"o":{"g":["unsignedtexture2d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",244,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",244,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["unsignedtexture2d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",244,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["unsignedtexture2d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",244,{"i":[{"n":"f"},{"n":"t"},{"n":"uncompresseduintformat"},{"n":"mipmapsoption"}],"o":{"g":["unsignedtexture2d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",244,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",244,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",244,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture2d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",244,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"unsignedtexture2d"}}],[11,"width","","Returns the width of that image.",244,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",244,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",244,null],[11,"as_surface","","Starts drawing on the texture.",244,{"i":[{"n":"self"}],"o":{"n":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",244,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",244,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",244,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture2dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",244,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2dmipmap"}}],[11,"clone","","",245,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2dmipmap"}}],[11,"deref","","",245,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",245,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",245,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",245,null],[11,"get_texture","","Returns the corresponding texture.",245,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2d"}}],[11,"get_level","","Returns the texture level.",245,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",245,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",245,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"depth_texture2d","glium::texture","Contains the implementation of `DepthTexture2d`.",null,null],[3,"DepthTexture2d","glium::texture::depth_texture2d","A two-dimensional texture  containing depth data.",null,null],[3,"DepthTexture2dMipmap","","Represents a single mipmap level of a `DepthTexture2d`.",null,null],[11,"get_id","","",246,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",246,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",246,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture2d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",246,{"i":[{"n":"self"}],"o":{"g":["depthtexture2d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",246,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",246,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["depthtexture2d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",246,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["depthtexture2d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",246,{"i":[{"n":"f"},{"n":"t"},{"n":"depthformat"},{"n":"mipmapsoption"}],"o":{"g":["depthtexture2d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",246,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",246,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",246,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture2d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",246,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthtexture2d"}}],[11,"width","","Returns the width of that image.",246,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",246,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",246,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",246,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",246,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",246,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture2dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",246,{"i":[{"n":"self"}],"o":{"n":"depthtexture2dmipmap"}}],[11,"clone","","",247,{"i":[{"n":"self"}],"o":{"n":"depthtexture2dmipmap"}}],[11,"deref","","",247,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",247,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",247,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",247,null],[11,"get_texture","","Returns the corresponding texture.",247,{"i":[{"n":"self"}],"o":{"n":"depthtexture2d"}}],[11,"get_level","","Returns the texture level.",247,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",247,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_depth_attachment","","",247,{"i":[{"n":"self"}],"o":{"n":"depthattachment"}}],[0,"stencil_texture2d","glium::texture","Contains the implementation of `StencilTexture2d`.",null,null],[3,"StencilTexture2d","glium::texture::stencil_texture2d","A two-dimensional texture  containing stencil data.",null,null],[3,"StencilTexture2dMipmap","","Represents a single mipmap level of a `StencilTexture2d`.",null,null],[11,"get_id","","",248,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",248,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",248,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",248,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",248,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["stenciltexture2d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",248,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["stenciltexture2d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",248,{"i":[{"n":"f"},{"n":"t"},{"n":"stencilformat"},{"n":"mipmapsoption"}],"o":{"g":["stenciltexture2d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",248,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",248,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",248,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture2d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",248,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"stenciltexture2d"}}],[11,"width","","Returns the width of that image.",248,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",248,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",248,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",248,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",248,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",248,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture2dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",248,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2dmipmap"}}],[11,"clone","","",249,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2dmipmap"}}],[11,"deref","","",249,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",249,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",249,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",249,null],[11,"get_texture","","Returns the corresponding texture.",249,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2d"}}],[11,"get_level","","Returns the texture level.",249,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",249,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_stencil_attachment","","",249,{"i":[{"n":"self"}],"o":{"n":"stencilattachment"}}],[0,"depth_stencil_texture2d","glium::texture","Contains the implementation of `DepthStencilTexture2d`.",null,null],[3,"DepthStencilTexture2d","glium::texture::depth_stencil_texture2d","A two-dimensional texture  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture2dMipmap","","Represents a single mipmap level of a `DepthStencilTexture2d`.",null,null],[11,"get_id","","",250,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",250,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",250,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",250,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",250,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["depthstenciltexture2d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",250,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["depthstenciltexture2d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",250,{"i":[{"n":"f"},{"n":"t"},{"n":"depthstencilformat"},{"n":"mipmapsoption"}],"o":{"g":["depthstenciltexture2d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",250,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",250,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture2d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",250,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture2d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",250,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthstenciltexture2d"}}],[11,"width","","Returns the width of that image.",250,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",250,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",250,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",250,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",250,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",250,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture2dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",250,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2dmipmap"}}],[11,"clone","","",251,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2dmipmap"}}],[11,"deref","","",251,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",251,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",251,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",251,null],[11,"get_texture","","Returns the corresponding texture.",251,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2d"}}],[11,"get_level","","Returns the texture level.",251,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",251,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",251,{"i":[{"n":"self"}],"o":{"n":"depthstencilattachment"}}],[0,"texture2d_multisample","glium::texture","Contains the implementation of `Texture2dMultisample`.",null,null],[3,"Texture2dMultisample","glium::texture::texture2d_multisample","A two-dimensional texture  containing floating-point data.",null,null],[3,"Texture2dMultisampleMipmap","","Represents a single mipmap level of a `Texture2dMultisample`.",null,null],[11,"get_id","","",252,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",252,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",252,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",252,{"i":[{"n":"self"}],"o":{"g":["texture2dmultisample"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",252,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",252,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",252,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",252,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",252,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"texture2dmultisample"}}],[11,"width","","Returns the width of that image.",252,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",252,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",252,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",252,null],[11,"as_surface","","Starts drawing on the texture.",252,{"i":[{"n":"self"}],"o":{"n":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",252,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",252,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",252,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture2dmultisamplemipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",252,{"i":[{"n":"self"}],"o":{"n":"texture2dmultisamplemipmap"}}],[11,"clone","","",253,{"i":[{"n":"self"}],"o":{"n":"texture2dmultisamplemipmap"}}],[11,"deref","","",253,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",253,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",253,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",253,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",253,null],[11,"get_texture","","Returns the corresponding texture.",253,{"i":[{"n":"self"}],"o":{"n":"texture2dmultisample"}}],[11,"get_level","","Returns the texture level.",253,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",253,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",253,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"integral_texture2d_multisample","glium::texture","Contains the implementation of `IntegralTexture2dMultisample`.",null,null],[3,"IntegralTexture2dMultisample","glium::texture::integral_texture2d_multisample","A two-dimensional texture  containing signed integral data.",null,null],[3,"IntegralTexture2dMultisampleMipmap","","Represents a single mipmap level of a `IntegralTexture2dMultisample`.",null,null],[11,"get_id","","",254,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",254,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",254,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",254,{"i":[{"n":"self"}],"o":{"g":["integraltexture2dmultisample"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",254,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",254,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",254,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",254,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",254,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"integraltexture2dmultisample"}}],[11,"width","","Returns the width of that image.",254,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",254,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",254,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",254,null],[11,"as_surface","","Starts drawing on the texture.",254,{"i":[{"n":"self"}],"o":{"n":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",254,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",254,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",254,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture2dmultisamplemipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",254,{"i":[{"n":"self"}],"o":{"n":"integraltexture2dmultisamplemipmap"}}],[11,"clone","","",255,{"i":[{"n":"self"}],"o":{"n":"integraltexture2dmultisamplemipmap"}}],[11,"deref","","",255,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",255,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",255,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",255,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",255,null],[11,"get_texture","","Returns the corresponding texture.",255,{"i":[{"n":"self"}],"o":{"n":"integraltexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",255,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",255,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",255,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"srgb_texture2d_multisample","glium::texture","Contains the implementation of `SrgbTexture2dMultisample`.",null,null],[3,"SrgbTexture2dMultisample","glium::texture::srgb_texture2d_multisample","A two-dimensional texture  containing sRGB floating-point data.",null,null],[3,"SrgbTexture2dMultisampleMipmap","","Represents a single mipmap level of a `SrgbTexture2dMultisample`.",null,null],[11,"get_id","","",256,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",256,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",256,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",256,{"i":[{"n":"self"}],"o":{"g":["srgbtexture2dmultisample"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",256,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",256,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",256,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",256,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",256,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"srgbtexture2dmultisample"}}],[11,"width","","Returns the width of that image.",256,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",256,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",256,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",256,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",256,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",256,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",256,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture2dmultisamplemipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",256,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2dmultisamplemipmap"}}],[11,"clone","","",257,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2dmultisamplemipmap"}}],[11,"deref","","",257,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",257,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",257,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",257,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",257,null],[11,"get_texture","","Returns the corresponding texture.",257,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",257,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",257,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",257,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"unsigned_texture2d_multisample","glium::texture","Contains the implementation of `UnsignedTexture2dMultisample`.",null,null],[3,"UnsignedTexture2dMultisample","glium::texture::unsigned_texture2d_multisample","A two-dimensional texture  containing unsigned integral data.",null,null],[3,"UnsignedTexture2dMultisampleMipmap","","Represents a single mipmap level of a `UnsignedTexture2dMultisample`.",null,null],[11,"get_id","","",258,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",258,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",258,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",258,{"i":[{"n":"self"}],"o":{"g":["unsignedtexture2dmultisample"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",258,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",258,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",258,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",258,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",258,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"unsignedtexture2dmultisample"}}],[11,"width","","Returns the width of that image.",258,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",258,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",258,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",258,null],[11,"as_surface","","Starts drawing on the texture.",258,{"i":[{"n":"self"}],"o":{"n":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",258,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",258,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",258,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture2dmultisamplemipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",258,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2dmultisamplemipmap"}}],[11,"clone","","",259,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2dmultisamplemipmap"}}],[11,"deref","","",259,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",259,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",259,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",259,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",259,null],[11,"get_texture","","Returns the corresponding texture.",259,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",259,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",259,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",259,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"depth_texture2d_multisample","glium::texture","Contains the implementation of `DepthTexture2dMultisample`.",null,null],[3,"DepthTexture2dMultisample","glium::texture::depth_texture2d_multisample","A two-dimensional texture  containing depth data.",null,null],[3,"DepthTexture2dMultisampleMipmap","","Represents a single mipmap level of a `DepthTexture2dMultisample`.",null,null],[11,"get_id","","",260,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",260,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",260,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",260,{"i":[{"n":"self"}],"o":{"g":["depthtexture2dmultisample"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",260,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",260,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",260,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",260,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",260,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthtexture2dmultisample"}}],[11,"width","","Returns the width of that image.",260,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",260,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",260,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",260,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",260,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",260,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",260,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture2dmultisamplemipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",260,{"i":[{"n":"self"}],"o":{"n":"depthtexture2dmultisamplemipmap"}}],[11,"clone","","",261,{"i":[{"n":"self"}],"o":{"n":"depthtexture2dmultisamplemipmap"}}],[11,"deref","","",261,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",261,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",261,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",261,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",261,null],[11,"get_texture","","Returns the corresponding texture.",261,{"i":[{"n":"self"}],"o":{"n":"depthtexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",261,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",261,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_depth_attachment","","",261,{"i":[{"n":"self"}],"o":{"n":"depthattachment"}}],[0,"stencil_texture2d_multisample","glium::texture","Contains the implementation of `StencilTexture2dMultisample`.",null,null],[3,"StencilTexture2dMultisample","glium::texture::stencil_texture2d_multisample","A two-dimensional texture  containing stencil data.",null,null],[3,"StencilTexture2dMultisampleMipmap","","Represents a single mipmap level of a `StencilTexture2dMultisample`.",null,null],[11,"get_id","","",262,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",262,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",262,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",262,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",262,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",262,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",262,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",262,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"stenciltexture2dmultisample"}}],[11,"width","","Returns the width of that image.",262,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",262,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",262,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",262,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",262,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",262,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",262,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture2dmultisamplemipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",262,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2dmultisamplemipmap"}}],[11,"clone","","",263,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2dmultisamplemipmap"}}],[11,"deref","","",263,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",263,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",263,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",263,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",263,null],[11,"get_texture","","Returns the corresponding texture.",263,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",263,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",263,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_stencil_attachment","","",263,{"i":[{"n":"self"}],"o":{"n":"stencilattachment"}}],[0,"depth_stencil_texture2d_multisample","glium::texture","Contains the implementation of `DepthStencilTexture2dMultisample`.",null,null],[3,"DepthStencilTexture2dMultisample","glium::texture::depth_stencil_texture2d_multisample","A two-dimensional texture  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture2dMultisampleMipmap","","Represents a single mipmap level of a `DepthStencilTexture2dMultisample`.",null,null],[11,"get_id","","",264,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",264,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",264,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",264,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",264,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",264,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",264,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture2dmultisample","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",264,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthstenciltexture2dmultisample"}}],[11,"width","","Returns the width of that image.",264,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",264,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",264,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",264,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",264,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",264,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",264,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture2dmultisamplemipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",264,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2dmultisamplemipmap"}}],[11,"clone","","",265,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2dmultisamplemipmap"}}],[11,"deref","","",265,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",265,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",265,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",265,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",265,null],[11,"get_texture","","Returns the corresponding texture.",265,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",265,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",265,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",265,{"i":[{"n":"self"}],"o":{"n":"depthstencilattachment"}}],[0,"texture3d","glium::texture","Contains the implementation of `Texture3d`.",null,null],[3,"Texture3d","glium::texture::texture3d","A three-dimensional texture  containing floating-point data.",null,null],[3,"Texture3dMipmap","","Represents a single mipmap level of a `Texture3d`.",null,null],[11,"get_id","","",266,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",266,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",266,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::texture3d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",266,{"i":[{"n":"self"}],"o":{"g":["texture3d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",266,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",266,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["texture3d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",266,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["texture3d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",266,{"i":[{"n":"f"},{"n":"t"},{"n":"uncompressedfloatformat"},{"n":"mipmapsoption"}],"o":{"g":["texture3d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",266,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture3d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",266,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture3d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",266,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture3d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",266,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"texture3d"}}],[11,"width","","Returns the width of that image.",266,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",266,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",266,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",266,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",266,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",266,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",266,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture3dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",266,{"i":[{"n":"self"}],"o":{"n":"texture3dmipmap"}}],[11,"clone","","",267,{"i":[{"n":"self"}],"o":{"n":"texture3dmipmap"}}],[11,"deref","","",267,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",267,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",267,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",267,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",267,null],[11,"get_texture","","Returns the corresponding texture.",267,{"i":[{"n":"self"}],"o":{"n":"texture3d"}}],[11,"get_level","","Returns the texture level.",267,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",267,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",267,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"compressed_texture3d","glium::texture","Contains the implementation of `CompressedTexture3d`.",null,null],[3,"CompressedTexture3d","glium::texture::compressed_texture3d","A compressed three-dimensional texture  containing floating-point data.",null,null],[3,"CompressedTexture3dMipmap","","Represents a single mipmap level of a `CompressedTexture3d`.",null,null],[11,"get_id","","",268,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",268,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",268,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_texture3d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",268,{"i":[{"n":"self"}],"o":{"g":["compressedtexture3d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",268,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",268,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["compressedtexture3d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",268,{"i":[{"n":"f"},{"n":"t"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedtexture3d","texturecreationerror"],"n":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",268,null],[11,"with_format","","Builds a new texture with a specific format.",268,{"i":[{"n":"f"},{"n":"t"},{"n":"compressedformat"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedtexture3d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",268,{"i":[{"n":"f"},{"n":"compressedformat"},{"n":"compressedmipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["compressedtexture3d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",268,{"i":[{"n":"f"},{"n":"compressedformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"compressedtexture3d"}}],[11,"width","","Returns the width of that image.",268,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",268,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",268,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",268,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",268,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",268,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",268,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",268,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedtexture3dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",268,{"i":[{"n":"self"}],"o":{"n":"compressedtexture3dmipmap"}}],[11,"clone","","",269,{"i":[{"n":"self"}],"o":{"n":"compressedtexture3dmipmap"}}],[11,"deref","","",269,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",269,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",269,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",269,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",269,null],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",269,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_texture","","Returns the corresponding texture.",269,{"i":[{"n":"self"}],"o":{"n":"compressedtexture3d"}}],[11,"get_level","","Returns the texture level.",269,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",269,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[0,"srgb_texture3d","glium::texture","Contains the implementation of `SrgbTexture3d`.",null,null],[3,"SrgbTexture3d","glium::texture::srgb_texture3d","A three-dimensional texture  containing sRGB floating-point data.",null,null],[3,"SrgbTexture3dMipmap","","Represents a single mipmap level of a `SrgbTexture3d`.",null,null],[11,"get_id","","",270,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",270,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",270,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture3d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",270,{"i":[{"n":"self"}],"o":{"g":["srgbtexture3d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",270,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",270,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["srgbtexture3d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",270,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["srgbtexture3d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",270,{"i":[{"n":"f"},{"n":"t"},{"n":"srgbformat"},{"n":"mipmapsoption"}],"o":{"g":["srgbtexture3d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",270,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture3d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",270,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture3d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",270,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture3d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",270,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"srgbtexture3d"}}],[11,"width","","Returns the width of that image.",270,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",270,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",270,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",270,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",270,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",270,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",270,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture3dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",270,{"i":[{"n":"self"}],"o":{"n":"srgbtexture3dmipmap"}}],[11,"clone","","",271,{"i":[{"n":"self"}],"o":{"n":"srgbtexture3dmipmap"}}],[11,"deref","","",271,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",271,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",271,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",271,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",271,null],[11,"get_texture","","Returns the corresponding texture.",271,{"i":[{"n":"self"}],"o":{"n":"srgbtexture3d"}}],[11,"get_level","","Returns the texture level.",271,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",271,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",271,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"compressed_srgb_texture3d","glium::texture","Contains the implementation of `CompressedSrgbTexture3d`.",null,null],[3,"CompressedSrgbTexture3d","glium::texture::compressed_srgb_texture3d","A compressed three-dimensional texture  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture3dMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture3d`.",null,null],[11,"get_id","","",272,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",272,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",272,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_texture3d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",272,{"i":[{"n":"self"}],"o":{"g":["compressedsrgbtexture3d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",272,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",272,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["compressedsrgbtexture3d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",272,{"i":[{"n":"f"},{"n":"t"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedsrgbtexture3d","texturecreationerror"],"n":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",272,null],[11,"with_format","","Builds a new texture with a specific format.",272,{"i":[{"n":"f"},{"n":"t"},{"n":"compressedsrgbformat"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedsrgbtexture3d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",272,{"i":[{"n":"f"},{"n":"compressedsrgbformat"},{"n":"compressedmipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture3d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",272,{"i":[{"n":"f"},{"n":"compressedsrgbformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"compressedsrgbtexture3d"}}],[11,"width","","Returns the width of that image.",272,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",272,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",272,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",272,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",272,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",272,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",272,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",272,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture3dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",272,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture3dmipmap"}}],[11,"clone","","",273,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture3dmipmap"}}],[11,"deref","","",273,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",273,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",273,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",273,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",273,null],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",273,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_texture","","Returns the corresponding texture.",273,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture3d"}}],[11,"get_level","","Returns the texture level.",273,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",273,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[0,"integral_texture3d","glium::texture","Contains the implementation of `IntegralTexture3d`.",null,null],[3,"IntegralTexture3d","glium::texture::integral_texture3d","A three-dimensional texture  containing signed integral data.",null,null],[3,"IntegralTexture3dMipmap","","Represents a single mipmap level of a `IntegralTexture3d`.",null,null],[11,"get_id","","",274,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",274,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",274,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture3d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",274,{"i":[{"n":"self"}],"o":{"g":["integraltexture3d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",274,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",274,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["integraltexture3d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",274,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["integraltexture3d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",274,{"i":[{"n":"f"},{"n":"t"},{"n":"uncompressedintformat"},{"n":"mipmapsoption"}],"o":{"g":["integraltexture3d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",274,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture3d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",274,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture3d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",274,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture3d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",274,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"integraltexture3d"}}],[11,"width","","Returns the width of that image.",274,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",274,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",274,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",274,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",274,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",274,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",274,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture3dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",274,{"i":[{"n":"self"}],"o":{"n":"integraltexture3dmipmap"}}],[11,"clone","","",275,{"i":[{"n":"self"}],"o":{"n":"integraltexture3dmipmap"}}],[11,"deref","","",275,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",275,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",275,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",275,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",275,null],[11,"get_texture","","Returns the corresponding texture.",275,{"i":[{"n":"self"}],"o":{"n":"integraltexture3d"}}],[11,"get_level","","Returns the texture level.",275,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",275,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",275,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"unsigned_texture3d","glium::texture","Contains the implementation of `UnsignedTexture3d`.",null,null],[3,"UnsignedTexture3d","glium::texture::unsigned_texture3d","A three-dimensional texture  containing unsigned integral data.",null,null],[3,"UnsignedTexture3dMipmap","","Represents a single mipmap level of a `UnsignedTexture3d`.",null,null],[11,"get_id","","",276,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",276,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",276,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture3d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",276,{"i":[{"n":"self"}],"o":{"g":["unsignedtexture3d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",276,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",276,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["unsignedtexture3d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",276,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["unsignedtexture3d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",276,{"i":[{"n":"f"},{"n":"t"},{"n":"uncompresseduintformat"},{"n":"mipmapsoption"}],"o":{"g":["unsignedtexture3d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",276,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture3d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",276,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture3d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",276,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture3d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",276,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"unsignedtexture3d"}}],[11,"width","","Returns the width of that image.",276,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",276,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",276,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",276,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",276,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",276,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",276,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture3dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",276,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture3dmipmap"}}],[11,"clone","","",277,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture3dmipmap"}}],[11,"deref","","",277,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",277,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",277,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",277,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",277,null],[11,"get_texture","","Returns the corresponding texture.",277,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture3d"}}],[11,"get_level","","Returns the texture level.",277,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",277,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",277,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"depth_texture3d","glium::texture","Contains the implementation of `DepthTexture3d`.",null,null],[3,"DepthTexture3d","glium::texture::depth_texture3d","A three-dimensional texture  containing depth data.",null,null],[3,"DepthTexture3dMipmap","","Represents a single mipmap level of a `DepthTexture3d`.",null,null],[11,"get_id","","",278,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",278,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",278,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture3d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",278,{"i":[{"n":"self"}],"o":{"g":["depthtexture3d"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",278,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",278,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["depthtexture3d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",278,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["depthtexture3d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",278,{"i":[{"n":"f"},{"n":"t"},{"n":"depthformat"},{"n":"mipmapsoption"}],"o":{"g":["depthtexture3d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",278,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture3d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",278,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture3d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",278,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture3d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",278,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthtexture3d"}}],[11,"width","","Returns the width of that image.",278,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",278,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",278,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",278,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",278,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",278,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",278,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture3dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",278,{"i":[{"n":"self"}],"o":{"n":"depthtexture3dmipmap"}}],[11,"clone","","",279,{"i":[{"n":"self"}],"o":{"n":"depthtexture3dmipmap"}}],[11,"deref","","",279,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",279,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",279,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",279,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",279,null],[11,"get_texture","","Returns the corresponding texture.",279,{"i":[{"n":"self"}],"o":{"n":"depthtexture3d"}}],[11,"get_level","","Returns the texture level.",279,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",279,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_depth_attachment","","",279,{"i":[{"n":"self"}],"o":{"n":"depthattachment"}}],[0,"depth_stencil_texture3d","glium::texture","Contains the implementation of `DepthStencilTexture3d`.",null,null],[3,"DepthStencilTexture3d","glium::texture::depth_stencil_texture3d","A three-dimensional texture  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture3dMipmap","","Represents a single mipmap level of a `DepthStencilTexture3d`.",null,null],[11,"get_id","","",280,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",280,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",280,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",280,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",280,{"i":[{"n":"f"},{"n":"t"}],"o":{"g":["depthstenciltexture3d","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",280,{"i":[{"n":"f"},{"n":"t"},{"n":"mipmapsoption"}],"o":{"g":["depthstenciltexture3d","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",280,{"i":[{"n":"f"},{"n":"t"},{"n":"depthstencilformat"},{"n":"mipmapsoption"}],"o":{"g":["depthstenciltexture3d","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",280,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture3d","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",280,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture3d","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",280,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture3d","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",280,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthstenciltexture3d"}}],[11,"width","","Returns the width of that image.",280,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",280,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",280,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",280,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",280,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",280,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",280,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture3dmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",280,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture3dmipmap"}}],[11,"clone","","",281,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture3dmipmap"}}],[11,"deref","","",281,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",281,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",281,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"depth","","Returns the depth of that image.",281,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",281,null],[11,"get_texture","","Returns the corresponding texture.",281,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture3d"}}],[11,"get_level","","Returns the texture level.",281,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",281,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",281,{"i":[{"n":"self"}],"o":{"n":"depthstencilattachment"}}],[0,"texture1d_array","glium::texture","Contains the implementation of `Texture1dArray`.",null,null],[3,"Texture1dArray","glium::texture::texture1d_array","An array of one-dimensional textures  containing floating-point data.",null,null],[3,"Texture1dArrayLayer","","Represents a single layer of a `Texture1dArray`.",null,null],[3,"Texture1dArrayMipmap","","Represents a single mipmap level of a `Texture1dArray`.",null,null],[3,"Texture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `Texture1dArray`.",null,null],[11,"get_id","","",282,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",282,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",282,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::texture1d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",282,{"i":[{"n":"self"}],"o":{"g":["texture1darray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",282,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",282,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["texture1darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",282,{"i":[{"n":"f"},{"n":"vec"},{"n":"mipmapsoption"}],"o":{"g":["texture1darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",282,{"i":[{"n":"f"},{"n":"vec"},{"n":"uncompressedfloatformat"},{"n":"mipmapsoption"}],"o":{"g":["texture1darray","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",282,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",282,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",282,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture1darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",282,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"texture1darray"}}],[11,"width","","Returns the width of that image.",282,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",282,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",282,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",282,{"i":[{"n":"self"}],"o":{"n":"texture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",282,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture1darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",282,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture1darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",282,{"i":[{"n":"self"}],"o":{"n":"texture1darraymipmap"}}],[11,"clone","","",283,{"i":[{"n":"self"}],"o":{"n":"texture1darraylayer"}}],[11,"width","","Returns the width of that image.",283,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",283,{"i":[{"n":"self"}],"o":{"n":"texture1darray"}}],[11,"get_layer","","Returns the layer index.",283,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",283,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",283,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture1darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",283,{"i":[{"n":"self"}],"o":{"n":"texture1darraylayermipmap"}}],[11,"clone","","",284,{"i":[{"n":"self"}],"o":{"n":"texture1darraymipmap"}}],[11,"deref","","",284,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",284,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",284,{"i":[{"n":"self"}],"o":{"n":"texture1darray"}}],[11,"get_level","","Returns the texture level.",284,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",284,{"i":[{"n":"self"}],"o":{"n":"texture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",284,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture1darraylayermipmap"],"n":"option"}}],[11,"clone","","",285,{"i":[{"n":"self"}],"o":{"n":"texture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",285,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",285,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",285,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"compressed_texture1d_array","glium::texture","Contains the implementation of `CompressedTexture1dArray`.",null,null],[3,"CompressedTexture1dArray","glium::texture::compressed_texture1d_array","An array of compressed one-dimensional textures  containing floating-point data.",null,null],[3,"CompressedTexture1dArrayLayer","","Represents a single layer of a `CompressedTexture1dArray`.",null,null],[3,"CompressedTexture1dArrayMipmap","","Represents a single mipmap level of a `CompressedTexture1dArray`.",null,null],[3,"CompressedTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedTexture1dArray`.",null,null],[11,"get_id","","",286,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",286,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",286,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_texture1d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",286,{"i":[{"n":"self"}],"o":{"g":["compressedtexture1darray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",286,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",286,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["compressedtexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",286,{"i":[{"n":"f"},{"n":"vec"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedtexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",286,{"i":[{"n":"f"},{"n":"vec"},{"n":"u32"},{"n":"u32"},{"n":"compressedformat"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedtexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",286,{"i":[{"n":"f"},{"n":"vec"},{"n":"compressedformat"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedtexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",286,{"i":[{"n":"f"},{"n":"compressedformat"},{"n":"compressedmipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["compressedtexture1darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",286,{"i":[{"n":"f"},{"n":"compressedformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"compressedtexture1darray"}}],[11,"width","","Returns the width of that image.",286,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",286,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",286,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",286,{"i":[{"n":"self"}],"o":{"n":"compressedtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",286,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedtexture1darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",286,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedtexture1darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",286,{"i":[{"n":"self"}],"o":{"n":"compressedtexture1darraymipmap"}}],[11,"clone","","",287,{"i":[{"n":"self"}],"o":{"n":"compressedtexture1darraylayer"}}],[11,"width","","Returns the width of that image.",287,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",287,{"i":[{"n":"self"}],"o":{"n":"compressedtexture1darray"}}],[11,"get_layer","","Returns the layer index.",287,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",287,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",287,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedtexture1darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",287,{"i":[{"n":"self"}],"o":{"n":"compressedtexture1darraylayermipmap"}}],[11,"clone","","",288,{"i":[{"n":"self"}],"o":{"n":"compressedtexture1darraymipmap"}}],[11,"deref","","",288,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",288,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",288,{"i":[{"n":"self"}],"o":{"n":"compressedtexture1darray"}}],[11,"get_level","","Returns the texture level.",288,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",288,{"i":[{"n":"self"}],"o":{"n":"compressedtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",288,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedtexture1darraylayermipmap"],"n":"option"}}],[11,"clone","","",289,{"i":[{"n":"self"}],"o":{"n":"compressedtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",289,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",289,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[0,"srgb_texture1d_array","glium::texture","Contains the implementation of `SrgbTexture1dArray`.",null,null],[3,"SrgbTexture1dArray","glium::texture::srgb_texture1d_array","An array of one-dimensional textures  containing sRGB floating-point data.",null,null],[3,"SrgbTexture1dArrayLayer","","Represents a single layer of a `SrgbTexture1dArray`.",null,null],[3,"SrgbTexture1dArrayMipmap","","Represents a single mipmap level of a `SrgbTexture1dArray`.",null,null],[3,"SrgbTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `SrgbTexture1dArray`.",null,null],[11,"get_id","","",290,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",290,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",290,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture1d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",290,{"i":[{"n":"self"}],"o":{"g":["srgbtexture1darray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",290,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",290,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["srgbtexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",290,{"i":[{"n":"f"},{"n":"vec"},{"n":"mipmapsoption"}],"o":{"g":["srgbtexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",290,{"i":[{"n":"f"},{"n":"vec"},{"n":"srgbformat"},{"n":"mipmapsoption"}],"o":{"g":["srgbtexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",290,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",290,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",290,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture1darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",290,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"srgbtexture1darray"}}],[11,"width","","Returns the width of that image.",290,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",290,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",290,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",290,{"i":[{"n":"self"}],"o":{"n":"srgbtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",290,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture1darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",290,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture1darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",290,{"i":[{"n":"self"}],"o":{"n":"srgbtexture1darraymipmap"}}],[11,"clone","","",291,{"i":[{"n":"self"}],"o":{"n":"srgbtexture1darraylayer"}}],[11,"width","","Returns the width of that image.",291,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",291,{"i":[{"n":"self"}],"o":{"n":"srgbtexture1darray"}}],[11,"get_layer","","Returns the layer index.",291,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",291,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",291,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture1darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",291,{"i":[{"n":"self"}],"o":{"n":"srgbtexture1darraylayermipmap"}}],[11,"clone","","",292,{"i":[{"n":"self"}],"o":{"n":"srgbtexture1darraymipmap"}}],[11,"deref","","",292,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",292,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",292,{"i":[{"n":"self"}],"o":{"n":"srgbtexture1darray"}}],[11,"get_level","","Returns the texture level.",292,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",292,{"i":[{"n":"self"}],"o":{"n":"srgbtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",292,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture1darraylayermipmap"],"n":"option"}}],[11,"clone","","",293,{"i":[{"n":"self"}],"o":{"n":"srgbtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",293,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",293,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",293,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"compressed_srgb_texture1d_array","glium::texture","Contains the implementation of `CompressedSrgbTexture1dArray`.",null,null],[3,"CompressedSrgbTexture1dArray","glium::texture::compressed_srgb_texture1d_array","An array of compressed one-dimensional textures  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture1dArrayLayer","","Represents a single layer of a `CompressedSrgbTexture1dArray`.",null,null],[3,"CompressedSrgbTexture1dArrayMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture1dArray`.",null,null],[3,"CompressedSrgbTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedSrgbTexture1dArray`.",null,null],[11,"get_id","","",294,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",294,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",294,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_texture1d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",294,{"i":[{"n":"self"}],"o":{"g":["compressedsrgbtexture1darray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",294,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",294,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["compressedsrgbtexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",294,{"i":[{"n":"f"},{"n":"vec"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedsrgbtexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",294,{"i":[{"n":"f"},{"n":"vec"},{"n":"u32"},{"n":"u32"},{"n":"compressedsrgbformat"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedsrgbtexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",294,{"i":[{"n":"f"},{"n":"vec"},{"n":"compressedsrgbformat"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedsrgbtexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",294,{"i":[{"n":"f"},{"n":"compressedsrgbformat"},{"n":"compressedmipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture1darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",294,{"i":[{"n":"f"},{"n":"compressedsrgbformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"compressedsrgbtexture1darray"}}],[11,"width","","Returns the width of that image.",294,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",294,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",294,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",294,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",294,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture1darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",294,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture1darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",294,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture1darraymipmap"}}],[11,"clone","","",295,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture1darraylayer"}}],[11,"width","","Returns the width of that image.",295,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",295,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture1darray"}}],[11,"get_layer","","Returns the layer index.",295,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",295,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",295,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture1darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",295,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture1darraylayermipmap"}}],[11,"clone","","",296,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture1darraymipmap"}}],[11,"deref","","",296,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",296,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",296,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture1darray"}}],[11,"get_level","","Returns the texture level.",296,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",296,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",296,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture1darraylayermipmap"],"n":"option"}}],[11,"clone","","",297,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",297,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",297,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[0,"integral_texture1d_array","glium::texture","Contains the implementation of `IntegralTexture1dArray`.",null,null],[3,"IntegralTexture1dArray","glium::texture::integral_texture1d_array","An array of one-dimensional textures  containing signed integral data.",null,null],[3,"IntegralTexture1dArrayLayer","","Represents a single layer of a `IntegralTexture1dArray`.",null,null],[3,"IntegralTexture1dArrayMipmap","","Represents a single mipmap level of a `IntegralTexture1dArray`.",null,null],[3,"IntegralTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `IntegralTexture1dArray`.",null,null],[11,"get_id","","",298,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",298,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",298,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture1d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",298,{"i":[{"n":"self"}],"o":{"g":["integraltexture1darray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",298,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",298,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["integraltexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",298,{"i":[{"n":"f"},{"n":"vec"},{"n":"mipmapsoption"}],"o":{"g":["integraltexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",298,{"i":[{"n":"f"},{"n":"vec"},{"n":"uncompressedintformat"},{"n":"mipmapsoption"}],"o":{"g":["integraltexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",298,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",298,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",298,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture1darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",298,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"integraltexture1darray"}}],[11,"width","","Returns the width of that image.",298,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",298,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",298,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",298,{"i":[{"n":"self"}],"o":{"n":"integraltexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",298,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture1darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",298,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture1darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",298,{"i":[{"n":"self"}],"o":{"n":"integraltexture1darraymipmap"}}],[11,"clone","","",299,{"i":[{"n":"self"}],"o":{"n":"integraltexture1darraylayer"}}],[11,"width","","Returns the width of that image.",299,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",299,{"i":[{"n":"self"}],"o":{"n":"integraltexture1darray"}}],[11,"get_layer","","Returns the layer index.",299,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",299,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",299,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture1darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",299,{"i":[{"n":"self"}],"o":{"n":"integraltexture1darraylayermipmap"}}],[11,"clone","","",300,{"i":[{"n":"self"}],"o":{"n":"integraltexture1darraymipmap"}}],[11,"deref","","",300,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",300,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",300,{"i":[{"n":"self"}],"o":{"n":"integraltexture1darray"}}],[11,"get_level","","Returns the texture level.",300,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",300,{"i":[{"n":"self"}],"o":{"n":"integraltexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",300,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture1darraylayermipmap"],"n":"option"}}],[11,"clone","","",301,{"i":[{"n":"self"}],"o":{"n":"integraltexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",301,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",301,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",301,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"unsigned_texture1d_array","glium::texture","Contains the implementation of `UnsignedTexture1dArray`.",null,null],[3,"UnsignedTexture1dArray","glium::texture::unsigned_texture1d_array","An array of one-dimensional textures  containing unsigned integral data.",null,null],[3,"UnsignedTexture1dArrayLayer","","Represents a single layer of a `UnsignedTexture1dArray`.",null,null],[3,"UnsignedTexture1dArrayMipmap","","Represents a single mipmap level of a `UnsignedTexture1dArray`.",null,null],[3,"UnsignedTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `UnsignedTexture1dArray`.",null,null],[11,"get_id","","",302,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",302,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",302,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture1d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",302,{"i":[{"n":"self"}],"o":{"g":["unsignedtexture1darray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",302,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",302,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["unsignedtexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",302,{"i":[{"n":"f"},{"n":"vec"},{"n":"mipmapsoption"}],"o":{"g":["unsignedtexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",302,{"i":[{"n":"f"},{"n":"vec"},{"n":"uncompresseduintformat"},{"n":"mipmapsoption"}],"o":{"g":["unsignedtexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",302,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",302,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",302,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture1darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",302,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"unsignedtexture1darray"}}],[11,"width","","Returns the width of that image.",302,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",302,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",302,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",302,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",302,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture1darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",302,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture1darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",302,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture1darraymipmap"}}],[11,"clone","","",303,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture1darraylayer"}}],[11,"width","","Returns the width of that image.",303,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",303,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture1darray"}}],[11,"get_layer","","Returns the layer index.",303,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",303,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",303,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture1darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",303,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture1darraylayermipmap"}}],[11,"clone","","",304,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture1darraymipmap"}}],[11,"deref","","",304,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",304,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",304,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture1darray"}}],[11,"get_level","","Returns the texture level.",304,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",304,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",304,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture1darraylayermipmap"],"n":"option"}}],[11,"clone","","",305,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",305,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",305,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",305,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"depth_texture1d_array","glium::texture","Contains the implementation of `DepthTexture1dArray`.",null,null],[3,"DepthTexture1dArray","glium::texture::depth_texture1d_array","An array of one-dimensional textures  containing depth data.",null,null],[3,"DepthTexture1dArrayLayer","","Represents a single layer of a `DepthTexture1dArray`.",null,null],[3,"DepthTexture1dArrayMipmap","","Represents a single mipmap level of a `DepthTexture1dArray`.",null,null],[3,"DepthTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthTexture1dArray`.",null,null],[11,"get_id","","",306,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",306,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",306,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture1d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",306,{"i":[{"n":"self"}],"o":{"g":["depthtexture1darray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",306,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",306,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["depthtexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",306,{"i":[{"n":"f"},{"n":"vec"},{"n":"mipmapsoption"}],"o":{"g":["depthtexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",306,{"i":[{"n":"f"},{"n":"vec"},{"n":"depthformat"},{"n":"mipmapsoption"}],"o":{"g":["depthtexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",306,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",306,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",306,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture1darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",306,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthtexture1darray"}}],[11,"width","","Returns the width of that image.",306,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",306,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",306,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",306,{"i":[{"n":"self"}],"o":{"n":"depthtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",306,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture1darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",306,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture1darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",306,{"i":[{"n":"self"}],"o":{"n":"depthtexture1darraymipmap"}}],[11,"clone","","",307,{"i":[{"n":"self"}],"o":{"n":"depthtexture1darraylayer"}}],[11,"width","","Returns the width of that image.",307,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",307,{"i":[{"n":"self"}],"o":{"n":"depthtexture1darray"}}],[11,"get_layer","","Returns the layer index.",307,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",307,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",307,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture1darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",307,{"i":[{"n":"self"}],"o":{"n":"depthtexture1darraylayermipmap"}}],[11,"clone","","",308,{"i":[{"n":"self"}],"o":{"n":"depthtexture1darraymipmap"}}],[11,"deref","","",308,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",308,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",308,{"i":[{"n":"self"}],"o":{"n":"depthtexture1darray"}}],[11,"get_level","","Returns the texture level.",308,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",308,{"i":[{"n":"self"}],"o":{"n":"depthtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",308,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture1darraylayermipmap"],"n":"option"}}],[11,"clone","","",309,{"i":[{"n":"self"}],"o":{"n":"depthtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",309,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",309,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_depth_attachment","","",309,{"i":[{"n":"self"}],"o":{"n":"depthattachment"}}],[0,"stencil_texture1d_array","glium::texture","Contains the implementation of `StencilTexture1dArray`.",null,null],[3,"StencilTexture1dArray","glium::texture::stencil_texture1d_array","An array of one-dimensional textures  containing stencil data.",null,null],[3,"StencilTexture1dArrayLayer","","Represents a single layer of a `StencilTexture1dArray`.",null,null],[3,"StencilTexture1dArrayMipmap","","Represents a single mipmap level of a `StencilTexture1dArray`.",null,null],[3,"StencilTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `StencilTexture1dArray`.",null,null],[11,"get_id","","",310,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",310,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",310,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",310,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",310,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["stenciltexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",310,{"i":[{"n":"f"},{"n":"vec"},{"n":"mipmapsoption"}],"o":{"g":["stenciltexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",310,{"i":[{"n":"f"},{"n":"vec"},{"n":"stencilformat"},{"n":"mipmapsoption"}],"o":{"g":["stenciltexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",310,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",310,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",310,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture1darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",310,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"stenciltexture1darray"}}],[11,"width","","Returns the width of that image.",310,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",310,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",310,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",310,{"i":[{"n":"self"}],"o":{"n":"stenciltexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",310,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture1darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",310,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture1darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",310,{"i":[{"n":"self"}],"o":{"n":"stenciltexture1darraymipmap"}}],[11,"clone","","",311,{"i":[{"n":"self"}],"o":{"n":"stenciltexture1darraylayer"}}],[11,"width","","Returns the width of that image.",311,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",311,{"i":[{"n":"self"}],"o":{"n":"stenciltexture1darray"}}],[11,"get_layer","","Returns the layer index.",311,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",311,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",311,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture1darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",311,{"i":[{"n":"self"}],"o":{"n":"stenciltexture1darraylayermipmap"}}],[11,"clone","","",312,{"i":[{"n":"self"}],"o":{"n":"stenciltexture1darraymipmap"}}],[11,"deref","","",312,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",312,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",312,{"i":[{"n":"self"}],"o":{"n":"stenciltexture1darray"}}],[11,"get_level","","Returns the texture level.",312,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",312,{"i":[{"n":"self"}],"o":{"n":"stenciltexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",312,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture1darraylayermipmap"],"n":"option"}}],[11,"clone","","",313,{"i":[{"n":"self"}],"o":{"n":"stenciltexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",313,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",313,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_stencil_attachment","","",313,{"i":[{"n":"self"}],"o":{"n":"stencilattachment"}}],[0,"depth_stencil_texture1d_array","glium::texture","Contains the implementation of `DepthStencilTexture1dArray`.",null,null],[3,"DepthStencilTexture1dArray","glium::texture::depth_stencil_texture1d_array","An array of one-dimensional textures  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture1dArrayLayer","","Represents a single layer of a `DepthStencilTexture1dArray`.",null,null],[3,"DepthStencilTexture1dArrayMipmap","","Represents a single mipmap level of a `DepthStencilTexture1dArray`.",null,null],[3,"DepthStencilTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthStencilTexture1dArray`.",null,null],[11,"get_id","","",314,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",314,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",314,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",314,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",314,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["depthstenciltexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",314,{"i":[{"n":"f"},{"n":"vec"},{"n":"mipmapsoption"}],"o":{"g":["depthstenciltexture1darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",314,{"i":[{"n":"f"},{"n":"vec"},{"n":"depthstencilformat"},{"n":"mipmapsoption"}],"o":{"g":["depthstenciltexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",314,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",314,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture1darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",314,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture1darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",314,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthstenciltexture1darray"}}],[11,"width","","Returns the width of that image.",314,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",314,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",314,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",314,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",314,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture1darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",314,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture1darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",314,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture1darraymipmap"}}],[11,"clone","","",315,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture1darraylayer"}}],[11,"width","","Returns the width of that image.",315,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",315,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture1darray"}}],[11,"get_layer","","Returns the layer index.",315,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",315,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",315,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture1darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",315,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture1darraylayermipmap"}}],[11,"clone","","",316,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture1darraymipmap"}}],[11,"deref","","",316,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",316,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",316,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture1darray"}}],[11,"get_level","","Returns the texture level.",316,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",316,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",316,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture1darraylayermipmap"],"n":"option"}}],[11,"clone","","",317,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",317,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",317,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",317,{"i":[{"n":"self"}],"o":{"n":"depthstencilattachment"}}],[0,"texture2d_array","glium::texture","Contains the implementation of `Texture2dArray`.",null,null],[3,"Texture2dArray","glium::texture::texture2d_array","An array of two-dimensional textures  containing floating-point data.",null,null],[3,"Texture2dArrayLayer","","Represents a single layer of a `Texture2dArray`.",null,null],[3,"Texture2dArrayMipmap","","Represents a single mipmap level of a `Texture2dArray`.",null,null],[3,"Texture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `Texture2dArray`.",null,null],[11,"get_id","","",318,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",318,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",318,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::texture2d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",318,{"i":[{"n":"self"}],"o":{"g":["texture2darray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",318,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",318,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["texture2darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",318,{"i":[{"n":"f"},{"n":"vec"},{"n":"mipmapsoption"}],"o":{"g":["texture2darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",318,{"i":[{"n":"f"},{"n":"vec"},{"n":"uncompressedfloatformat"},{"n":"mipmapsoption"}],"o":{"g":["texture2darray","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",318,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",318,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",318,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture2darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",318,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"texture2darray"}}],[11,"width","","Returns the width of that image.",318,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",318,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",318,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",318,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",318,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",318,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",318,{"i":[{"n":"self"}],"o":{"n":"texture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",318,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture2darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",318,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture2darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",318,{"i":[{"n":"self"}],"o":{"n":"texture2darraymipmap"}}],[11,"clone","","",319,{"i":[{"n":"self"}],"o":{"n":"texture2darraylayer"}}],[11,"width","","Returns the width of that image.",319,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",319,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",319,null],[11,"get_texture","","Returns the corresponding texture.",319,{"i":[{"n":"self"}],"o":{"n":"texture2darray"}}],[11,"get_layer","","Returns the layer index.",319,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",319,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",319,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture2darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",319,{"i":[{"n":"self"}],"o":{"n":"texture2darraylayermipmap"}}],[11,"clone","","",320,{"i":[{"n":"self"}],"o":{"n":"texture2darraymipmap"}}],[11,"deref","","",320,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",320,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",320,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",320,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",320,null],[11,"get_texture","","Returns the corresponding texture.",320,{"i":[{"n":"self"}],"o":{"n":"texture2darray"}}],[11,"get_level","","Returns the texture level.",320,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",320,{"i":[{"n":"self"}],"o":{"n":"texture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",320,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture2darraylayermipmap"],"n":"option"}}],[11,"clone","","",321,{"i":[{"n":"self"}],"o":{"n":"texture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",321,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",321,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",321,null],[11,"into","","",321,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",321,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"compressed_texture2d_array","glium::texture","Contains the implementation of `CompressedTexture2dArray`.",null,null],[3,"CompressedTexture2dArray","glium::texture::compressed_texture2d_array","An array of compressed two-dimensional textures  containing floating-point data.",null,null],[3,"CompressedTexture2dArrayLayer","","Represents a single layer of a `CompressedTexture2dArray`.",null,null],[3,"CompressedTexture2dArrayMipmap","","Represents a single mipmap level of a `CompressedTexture2dArray`.",null,null],[3,"CompressedTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedTexture2dArray`.",null,null],[11,"get_id","","",322,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",322,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",322,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_texture2d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",322,{"i":[{"n":"self"}],"o":{"g":["compressedtexture2darray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",322,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",322,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["compressedtexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",322,{"i":[{"n":"f"},{"n":"vec"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedtexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",322,{"i":[{"n":"f"},{"n":"vec"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"compressedformat"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedtexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",322,{"i":[{"n":"f"},{"n":"vec"},{"n":"compressedformat"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedtexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",322,{"i":[{"n":"f"},{"n":"compressedformat"},{"n":"compressedmipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["compressedtexture2darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",322,{"i":[{"n":"f"},{"n":"compressedformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"compressedtexture2darray"}}],[11,"width","","Returns the width of that image.",322,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",322,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",322,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",322,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",322,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",322,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",322,{"i":[{"n":"self"}],"o":{"n":"compressedtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",322,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedtexture2darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",322,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedtexture2darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",322,{"i":[{"n":"self"}],"o":{"n":"compressedtexture2darraymipmap"}}],[11,"clone","","",323,{"i":[{"n":"self"}],"o":{"n":"compressedtexture2darraylayer"}}],[11,"width","","Returns the width of that image.",323,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",323,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",323,null],[11,"get_texture","","Returns the corresponding texture.",323,{"i":[{"n":"self"}],"o":{"n":"compressedtexture2darray"}}],[11,"get_layer","","Returns the layer index.",323,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",323,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",323,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedtexture2darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",323,{"i":[{"n":"self"}],"o":{"n":"compressedtexture2darraylayermipmap"}}],[11,"clone","","",324,{"i":[{"n":"self"}],"o":{"n":"compressedtexture2darraymipmap"}}],[11,"deref","","",324,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",324,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",324,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",324,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",324,null],[11,"get_texture","","Returns the corresponding texture.",324,{"i":[{"n":"self"}],"o":{"n":"compressedtexture2darray"}}],[11,"get_level","","Returns the texture level.",324,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",324,{"i":[{"n":"self"}],"o":{"n":"compressedtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",324,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedtexture2darraylayermipmap"],"n":"option"}}],[11,"clone","","",325,{"i":[{"n":"self"}],"o":{"n":"compressedtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",325,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",325,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",325,null],[11,"into","","",325,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[0,"srgb_texture2d_array","glium::texture","Contains the implementation of `SrgbTexture2dArray`.",null,null],[3,"SrgbTexture2dArray","glium::texture::srgb_texture2d_array","An array of two-dimensional textures  containing sRGB floating-point data.",null,null],[3,"SrgbTexture2dArrayLayer","","Represents a single layer of a `SrgbTexture2dArray`.",null,null],[3,"SrgbTexture2dArrayMipmap","","Represents a single mipmap level of a `SrgbTexture2dArray`.",null,null],[3,"SrgbTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `SrgbTexture2dArray`.",null,null],[11,"get_id","","",326,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",326,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",326,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture2d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",326,{"i":[{"n":"self"}],"o":{"g":["srgbtexture2darray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",326,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",326,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["srgbtexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",326,{"i":[{"n":"f"},{"n":"vec"},{"n":"mipmapsoption"}],"o":{"g":["srgbtexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",326,{"i":[{"n":"f"},{"n":"vec"},{"n":"srgbformat"},{"n":"mipmapsoption"}],"o":{"g":["srgbtexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",326,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",326,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",326,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture2darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",326,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"srgbtexture2darray"}}],[11,"width","","Returns the width of that image.",326,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",326,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",326,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",326,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",326,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",326,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",326,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",326,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture2darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",326,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture2darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",326,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2darraymipmap"}}],[11,"clone","","",327,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2darraylayer"}}],[11,"width","","Returns the width of that image.",327,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",327,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",327,null],[11,"get_texture","","Returns the corresponding texture.",327,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2darray"}}],[11,"get_layer","","Returns the layer index.",327,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",327,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",327,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture2darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",327,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2darraylayermipmap"}}],[11,"clone","","",328,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2darraymipmap"}}],[11,"deref","","",328,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",328,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",328,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",328,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",328,null],[11,"get_texture","","Returns the corresponding texture.",328,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2darray"}}],[11,"get_level","","Returns the texture level.",328,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",328,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",328,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture2darraylayermipmap"],"n":"option"}}],[11,"clone","","",329,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",329,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",329,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",329,null],[11,"into","","",329,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",329,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"compressed_srgb_texture2d_array","glium::texture","Contains the implementation of `CompressedSrgbTexture2dArray`.",null,null],[3,"CompressedSrgbTexture2dArray","glium::texture::compressed_srgb_texture2d_array","An array of compressed two-dimensional textures  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture2dArrayLayer","","Represents a single layer of a `CompressedSrgbTexture2dArray`.",null,null],[3,"CompressedSrgbTexture2dArrayMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture2dArray`.",null,null],[3,"CompressedSrgbTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedSrgbTexture2dArray`.",null,null],[11,"get_id","","",330,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",330,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",330,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_texture2d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",330,{"i":[{"n":"self"}],"o":{"g":["compressedsrgbtexture2darray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",330,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",330,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["compressedsrgbtexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",330,{"i":[{"n":"f"},{"n":"vec"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedsrgbtexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",330,{"i":[{"n":"f"},{"n":"vec"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"compressedsrgbformat"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedsrgbtexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",330,{"i":[{"n":"f"},{"n":"vec"},{"n":"compressedsrgbformat"},{"n":"compressedmipmapsoption"}],"o":{"g":["compressedsrgbtexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",330,{"i":[{"n":"f"},{"n":"compressedsrgbformat"},{"n":"compressedmipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture2darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",330,{"i":[{"n":"f"},{"n":"compressedsrgbformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"compressedsrgbtexture2darray"}}],[11,"width","","Returns the width of that image.",330,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",330,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",330,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",330,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",330,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",330,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",330,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",330,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture2darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",330,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture2darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",330,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture2darraymipmap"}}],[11,"clone","","",331,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture2darraylayer"}}],[11,"width","","Returns the width of that image.",331,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",331,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",331,null],[11,"get_texture","","Returns the corresponding texture.",331,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture2darray"}}],[11,"get_layer","","Returns the layer index.",331,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",331,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",331,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture2darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",331,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture2darraylayermipmap"}}],[11,"clone","","",332,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture2darraymipmap"}}],[11,"deref","","",332,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",332,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",332,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",332,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",332,null],[11,"get_texture","","Returns the corresponding texture.",332,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture2darray"}}],[11,"get_level","","Returns the texture level.",332,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",332,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",332,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbtexture2darraylayermipmap"],"n":"option"}}],[11,"clone","","",333,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",333,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",333,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",333,null],[11,"into","","",333,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[0,"integral_texture2d_array","glium::texture","Contains the implementation of `IntegralTexture2dArray`.",null,null],[3,"IntegralTexture2dArray","glium::texture::integral_texture2d_array","An array of two-dimensional textures  containing signed integral data.",null,null],[3,"IntegralTexture2dArrayLayer","","Represents a single layer of a `IntegralTexture2dArray`.",null,null],[3,"IntegralTexture2dArrayMipmap","","Represents a single mipmap level of a `IntegralTexture2dArray`.",null,null],[3,"IntegralTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `IntegralTexture2dArray`.",null,null],[11,"get_id","","",334,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",334,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",334,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture2d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",334,{"i":[{"n":"self"}],"o":{"g":["integraltexture2darray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",334,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",334,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["integraltexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",334,{"i":[{"n":"f"},{"n":"vec"},{"n":"mipmapsoption"}],"o":{"g":["integraltexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",334,{"i":[{"n":"f"},{"n":"vec"},{"n":"uncompressedintformat"},{"n":"mipmapsoption"}],"o":{"g":["integraltexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",334,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",334,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",334,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture2darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",334,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"integraltexture2darray"}}],[11,"width","","Returns the width of that image.",334,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",334,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",334,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",334,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",334,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",334,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",334,{"i":[{"n":"self"}],"o":{"n":"integraltexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",334,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture2darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",334,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture2darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",334,{"i":[{"n":"self"}],"o":{"n":"integraltexture2darraymipmap"}}],[11,"clone","","",335,{"i":[{"n":"self"}],"o":{"n":"integraltexture2darraylayer"}}],[11,"width","","Returns the width of that image.",335,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",335,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",335,null],[11,"get_texture","","Returns the corresponding texture.",335,{"i":[{"n":"self"}],"o":{"n":"integraltexture2darray"}}],[11,"get_layer","","Returns the layer index.",335,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",335,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",335,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture2darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",335,{"i":[{"n":"self"}],"o":{"n":"integraltexture2darraylayermipmap"}}],[11,"clone","","",336,{"i":[{"n":"self"}],"o":{"n":"integraltexture2darraymipmap"}}],[11,"deref","","",336,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",336,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",336,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",336,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",336,null],[11,"get_texture","","Returns the corresponding texture.",336,{"i":[{"n":"self"}],"o":{"n":"integraltexture2darray"}}],[11,"get_level","","Returns the texture level.",336,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",336,{"i":[{"n":"self"}],"o":{"n":"integraltexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",336,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture2darraylayermipmap"],"n":"option"}}],[11,"clone","","",337,{"i":[{"n":"self"}],"o":{"n":"integraltexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",337,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",337,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",337,null],[11,"into","","",337,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",337,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"unsigned_texture2d_array","glium::texture","Contains the implementation of `UnsignedTexture2dArray`.",null,null],[3,"UnsignedTexture2dArray","glium::texture::unsigned_texture2d_array","An array of two-dimensional textures  containing unsigned integral data.",null,null],[3,"UnsignedTexture2dArrayLayer","","Represents a single layer of a `UnsignedTexture2dArray`.",null,null],[3,"UnsignedTexture2dArrayMipmap","","Represents a single mipmap level of a `UnsignedTexture2dArray`.",null,null],[3,"UnsignedTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `UnsignedTexture2dArray`.",null,null],[11,"get_id","","",338,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",338,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",338,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture2d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",338,{"i":[{"n":"self"}],"o":{"g":["unsignedtexture2darray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",338,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",338,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["unsignedtexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",338,{"i":[{"n":"f"},{"n":"vec"},{"n":"mipmapsoption"}],"o":{"g":["unsignedtexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",338,{"i":[{"n":"f"},{"n":"vec"},{"n":"uncompresseduintformat"},{"n":"mipmapsoption"}],"o":{"g":["unsignedtexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",338,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",338,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",338,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture2darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",338,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"unsignedtexture2darray"}}],[11,"width","","Returns the width of that image.",338,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",338,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",338,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",338,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",338,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",338,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",338,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",338,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture2darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",338,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture2darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",338,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2darraymipmap"}}],[11,"clone","","",339,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2darraylayer"}}],[11,"width","","Returns the width of that image.",339,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",339,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",339,null],[11,"get_texture","","Returns the corresponding texture.",339,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2darray"}}],[11,"get_layer","","Returns the layer index.",339,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",339,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",339,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture2darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",339,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2darraylayermipmap"}}],[11,"clone","","",340,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2darraymipmap"}}],[11,"deref","","",340,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",340,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",340,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",340,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",340,null],[11,"get_texture","","Returns the corresponding texture.",340,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2darray"}}],[11,"get_level","","Returns the texture level.",340,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",340,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",340,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture2darraylayermipmap"],"n":"option"}}],[11,"clone","","",341,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",341,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",341,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",341,null],[11,"into","","",341,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",341,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"depth_texture2d_array","glium::texture","Contains the implementation of `DepthTexture2dArray`.",null,null],[3,"DepthTexture2dArray","glium::texture::depth_texture2d_array","An array of two-dimensional textures  containing depth data.",null,null],[3,"DepthTexture2dArrayLayer","","Represents a single layer of a `DepthTexture2dArray`.",null,null],[3,"DepthTexture2dArrayMipmap","","Represents a single mipmap level of a `DepthTexture2dArray`.",null,null],[3,"DepthTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthTexture2dArray`.",null,null],[11,"get_id","","",342,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",342,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",342,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture2d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",342,{"i":[{"n":"self"}],"o":{"g":["depthtexture2darray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",342,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",342,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["depthtexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",342,{"i":[{"n":"f"},{"n":"vec"},{"n":"mipmapsoption"}],"o":{"g":["depthtexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",342,{"i":[{"n":"f"},{"n":"vec"},{"n":"depthformat"},{"n":"mipmapsoption"}],"o":{"g":["depthtexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",342,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",342,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",342,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture2darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",342,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthtexture2darray"}}],[11,"width","","Returns the width of that image.",342,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",342,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",342,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",342,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",342,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",342,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",342,{"i":[{"n":"self"}],"o":{"n":"depthtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",342,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture2darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",342,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture2darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",342,{"i":[{"n":"self"}],"o":{"n":"depthtexture2darraymipmap"}}],[11,"clone","","",343,{"i":[{"n":"self"}],"o":{"n":"depthtexture2darraylayer"}}],[11,"width","","Returns the width of that image.",343,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",343,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",343,null],[11,"get_texture","","Returns the corresponding texture.",343,{"i":[{"n":"self"}],"o":{"n":"depthtexture2darray"}}],[11,"get_layer","","Returns the layer index.",343,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",343,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",343,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture2darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",343,{"i":[{"n":"self"}],"o":{"n":"depthtexture2darraylayermipmap"}}],[11,"clone","","",344,{"i":[{"n":"self"}],"o":{"n":"depthtexture2darraymipmap"}}],[11,"deref","","",344,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",344,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",344,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",344,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",344,null],[11,"get_texture","","Returns the corresponding texture.",344,{"i":[{"n":"self"}],"o":{"n":"depthtexture2darray"}}],[11,"get_level","","Returns the texture level.",344,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",344,{"i":[{"n":"self"}],"o":{"n":"depthtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",344,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture2darraylayermipmap"],"n":"option"}}],[11,"clone","","",345,{"i":[{"n":"self"}],"o":{"n":"depthtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",345,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",345,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",345,null],[11,"into","","",345,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_depth_attachment","","",345,{"i":[{"n":"self"}],"o":{"n":"depthattachment"}}],[0,"stencil_texture2d_array","glium::texture","Contains the implementation of `StencilTexture2dArray`.",null,null],[3,"StencilTexture2dArray","glium::texture::stencil_texture2d_array","An array of two-dimensional textures  containing stencil data.",null,null],[3,"StencilTexture2dArrayLayer","","Represents a single layer of a `StencilTexture2dArray`.",null,null],[3,"StencilTexture2dArrayMipmap","","Represents a single mipmap level of a `StencilTexture2dArray`.",null,null],[3,"StencilTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `StencilTexture2dArray`.",null,null],[11,"get_id","","",346,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",346,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",346,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",346,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",346,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["stenciltexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",346,{"i":[{"n":"f"},{"n":"vec"},{"n":"mipmapsoption"}],"o":{"g":["stenciltexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",346,{"i":[{"n":"f"},{"n":"vec"},{"n":"stencilformat"},{"n":"mipmapsoption"}],"o":{"g":["stenciltexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",346,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",346,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",346,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture2darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",346,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"stenciltexture2darray"}}],[11,"width","","Returns the width of that image.",346,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",346,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",346,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",346,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",346,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",346,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",346,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",346,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture2darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",346,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture2darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",346,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2darraymipmap"}}],[11,"clone","","",347,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2darraylayer"}}],[11,"width","","Returns the width of that image.",347,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",347,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",347,null],[11,"get_texture","","Returns the corresponding texture.",347,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2darray"}}],[11,"get_layer","","Returns the layer index.",347,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",347,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",347,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture2darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",347,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2darraylayermipmap"}}],[11,"clone","","",348,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2darraymipmap"}}],[11,"deref","","",348,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",348,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",348,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",348,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",348,null],[11,"get_texture","","Returns the corresponding texture.",348,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2darray"}}],[11,"get_level","","Returns the texture level.",348,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",348,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",348,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture2darraylayermipmap"],"n":"option"}}],[11,"clone","","",349,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",349,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",349,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",349,null],[11,"into","","",349,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_stencil_attachment","","",349,{"i":[{"n":"self"}],"o":{"n":"stencilattachment"}}],[0,"depth_stencil_texture2d_array","glium::texture","Contains the implementation of `DepthStencilTexture2dArray`.",null,null],[3,"DepthStencilTexture2dArray","glium::texture::depth_stencil_texture2d_array","An array of two-dimensional textures  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture2dArrayLayer","","Represents a single layer of a `DepthStencilTexture2dArray`.",null,null],[3,"DepthStencilTexture2dArrayMipmap","","Represents a single mipmap level of a `DepthStencilTexture2dArray`.",null,null],[3,"DepthStencilTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthStencilTexture2dArray`.",null,null],[11,"get_id","","",350,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",350,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",350,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",350,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"new","","Builds a new texture by uploading data.",350,{"i":[{"n":"f"},{"n":"vec"}],"o":{"g":["depthstenciltexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",350,{"i":[{"n":"f"},{"n":"vec"},{"n":"mipmapsoption"}],"o":{"g":["depthstenciltexture2darray","texturecreationerror"],"n":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",350,{"i":[{"n":"f"},{"n":"vec"},{"n":"depthstencilformat"},{"n":"mipmapsoption"}],"o":{"g":["depthstenciltexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",350,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",350,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture2darray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",350,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture2darray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",350,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthstenciltexture2darray"}}],[11,"width","","Returns the width of that image.",350,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",350,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",350,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",350,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",350,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",350,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",350,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",350,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture2darraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",350,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture2darraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",350,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2darraymipmap"}}],[11,"clone","","",351,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2darraylayer"}}],[11,"width","","Returns the width of that image.",351,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",351,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",351,null],[11,"get_texture","","Returns the corresponding texture.",351,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2darray"}}],[11,"get_layer","","Returns the layer index.",351,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",351,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",351,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture2darraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",351,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2darraylayermipmap"}}],[11,"clone","","",352,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2darraymipmap"}}],[11,"deref","","",352,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",352,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",352,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",352,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",352,null],[11,"get_texture","","Returns the corresponding texture.",352,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2darray"}}],[11,"get_level","","Returns the texture level.",352,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",352,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",352,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture2darraylayermipmap"],"n":"option"}}],[11,"clone","","",353,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",353,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",353,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",353,null],[11,"into","","",353,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",353,{"i":[{"n":"self"}],"o":{"n":"depthstencilattachment"}}],[0,"texture2d_multisample_array","glium::texture","Contains the implementation of `Texture2dMultisampleArray`.",null,null],[3,"Texture2dMultisampleArray","glium::texture::texture2d_multisample_array","An array of two-dimensional textures  containing floating-point data.",null,null],[3,"Texture2dMultisampleArrayLayer","","Represents a single layer of a `Texture2dMultisampleArray`.",null,null],[3,"Texture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `Texture2dMultisampleArray`.",null,null],[3,"Texture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `Texture2dMultisampleArray`.",null,null],[11,"get_id","","",354,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",354,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",354,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",354,{"i":[{"n":"self"}],"o":{"g":["texture2dmultisamplearray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",354,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",354,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",354,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",354,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["texture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",354,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"texture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",354,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",354,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",354,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",354,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",354,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",354,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",354,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",354,{"i":[{"n":"self"}],"o":{"n":"texture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",354,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture2dmultisamplearraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",354,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture2dmultisamplearraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",354,{"i":[{"n":"self"}],"o":{"n":"texture2dmultisamplearraymipmap"}}],[11,"clone","","",355,{"i":[{"n":"self"}],"o":{"n":"texture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",355,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",355,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",355,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",355,null],[11,"get_texture","","Returns the corresponding texture.",355,{"i":[{"n":"self"}],"o":{"n":"texture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",355,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",355,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",355,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture2dmultisamplearraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",355,{"i":[{"n":"self"}],"o":{"n":"texture2dmultisamplearraylayermipmap"}}],[11,"clone","","",356,{"i":[{"n":"self"}],"o":{"n":"texture2dmultisamplearraymipmap"}}],[11,"deref","","",356,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",356,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",356,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",356,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",356,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",356,null],[11,"get_texture","","Returns the corresponding texture.",356,{"i":[{"n":"self"}],"o":{"n":"texture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",356,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",356,{"i":[{"n":"self"}],"o":{"n":"texture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",356,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["texture2dmultisamplearraylayermipmap"],"n":"option"}}],[11,"clone","","",357,{"i":[{"n":"self"}],"o":{"n":"texture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",357,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",357,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",357,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",357,null],[11,"into","","",357,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",357,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"srgb_texture2d_multisample_array","glium::texture","Contains the implementation of `SrgbTexture2dMultisampleArray`.",null,null],[3,"SrgbTexture2dMultisampleArray","glium::texture::srgb_texture2d_multisample_array","An array of two-dimensional textures  containing sRGB floating-point data.",null,null],[3,"SrgbTexture2dMultisampleArrayLayer","","Represents a single layer of a `SrgbTexture2dMultisampleArray`.",null,null],[3,"SrgbTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `SrgbTexture2dMultisampleArray`.",null,null],[3,"SrgbTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `SrgbTexture2dMultisampleArray`.",null,null],[11,"get_id","","",358,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",358,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",358,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",358,{"i":[{"n":"self"}],"o":{"g":["srgbtexture2dmultisamplearray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",358,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",358,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",358,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",358,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbtexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",358,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"srgbtexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",358,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",358,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",358,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",358,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",358,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",358,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",358,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",358,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",358,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture2dmultisamplearraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",358,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture2dmultisamplearraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",358,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2dmultisamplearraymipmap"}}],[11,"clone","","",359,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",359,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",359,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",359,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",359,null],[11,"get_texture","","Returns the corresponding texture.",359,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",359,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",359,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",359,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture2dmultisamplearraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",359,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",360,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2dmultisamplearraymipmap"}}],[11,"deref","","",360,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",360,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",360,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",360,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",360,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",360,null],[11,"get_texture","","Returns the corresponding texture.",360,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",360,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",360,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",360,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbtexture2dmultisamplearraylayermipmap"],"n":"option"}}],[11,"clone","","",361,{"i":[{"n":"self"}],"o":{"n":"srgbtexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",361,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",361,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",361,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",361,null],[11,"into","","",361,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",361,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"integral_texture2d_multisample_array","glium::texture","Contains the implementation of `IntegralTexture2dMultisampleArray`.",null,null],[3,"IntegralTexture2dMultisampleArray","glium::texture::integral_texture2d_multisample_array","An array of two-dimensional textures  containing signed integral data.",null,null],[3,"IntegralTexture2dMultisampleArrayLayer","","Represents a single layer of a `IntegralTexture2dMultisampleArray`.",null,null],[3,"IntegralTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `IntegralTexture2dMultisampleArray`.",null,null],[3,"IntegralTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `IntegralTexture2dMultisampleArray`.",null,null],[11,"get_id","","",362,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",362,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",362,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",362,{"i":[{"n":"self"}],"o":{"g":["integraltexture2dmultisamplearray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",362,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",362,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",362,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",362,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integraltexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",362,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"integraltexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",362,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",362,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",362,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",362,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",362,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",362,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",362,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",362,{"i":[{"n":"self"}],"o":{"n":"integraltexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",362,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture2dmultisamplearraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",362,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture2dmultisamplearraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",362,{"i":[{"n":"self"}],"o":{"n":"integraltexture2dmultisamplearraymipmap"}}],[11,"clone","","",363,{"i":[{"n":"self"}],"o":{"n":"integraltexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",363,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",363,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",363,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",363,null],[11,"get_texture","","Returns the corresponding texture.",363,{"i":[{"n":"self"}],"o":{"n":"integraltexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",363,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",363,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",363,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture2dmultisamplearraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",363,{"i":[{"n":"self"}],"o":{"n":"integraltexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",364,{"i":[{"n":"self"}],"o":{"n":"integraltexture2dmultisamplearraymipmap"}}],[11,"deref","","",364,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",364,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",364,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",364,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",364,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",364,null],[11,"get_texture","","Returns the corresponding texture.",364,{"i":[{"n":"self"}],"o":{"n":"integraltexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",364,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",364,{"i":[{"n":"self"}],"o":{"n":"integraltexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",364,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integraltexture2dmultisamplearraylayermipmap"],"n":"option"}}],[11,"clone","","",365,{"i":[{"n":"self"}],"o":{"n":"integraltexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",365,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",365,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",365,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",365,null],[11,"into","","",365,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",365,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"unsigned_texture2d_multisample_array","glium::texture","Contains the implementation of `UnsignedTexture2dMultisampleArray`.",null,null],[3,"UnsignedTexture2dMultisampleArray","glium::texture::unsigned_texture2d_multisample_array","An array of two-dimensional textures  containing unsigned integral data.",null,null],[3,"UnsignedTexture2dMultisampleArrayLayer","","Represents a single layer of a `UnsignedTexture2dMultisampleArray`.",null,null],[3,"UnsignedTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `UnsignedTexture2dMultisampleArray`.",null,null],[3,"UnsignedTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `UnsignedTexture2dMultisampleArray`.",null,null],[11,"get_id","","",366,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",366,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",366,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",366,{"i":[{"n":"self"}],"o":{"g":["unsignedtexture2dmultisamplearray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",366,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",366,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",366,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",366,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedtexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",366,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"unsignedtexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",366,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",366,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",366,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",366,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",366,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",366,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",366,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",366,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",366,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture2dmultisamplearraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",366,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture2dmultisamplearraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",366,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2dmultisamplearraymipmap"}}],[11,"clone","","",367,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",367,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",367,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",367,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",367,null],[11,"get_texture","","Returns the corresponding texture.",367,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",367,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",367,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",367,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture2dmultisamplearraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",367,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",368,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2dmultisamplearraymipmap"}}],[11,"deref","","",368,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",368,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",368,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",368,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",368,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",368,null],[11,"get_texture","","Returns the corresponding texture.",368,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",368,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",368,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",368,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedtexture2dmultisamplearraylayermipmap"],"n":"option"}}],[11,"clone","","",369,{"i":[{"n":"self"}],"o":{"n":"unsignedtexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",369,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",369,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",369,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",369,null],[11,"into","","",369,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",369,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"depth_texture2d_multisample_array","glium::texture","Contains the implementation of `DepthTexture2dMultisampleArray`.",null,null],[3,"DepthTexture2dMultisampleArray","glium::texture::depth_texture2d_multisample_array","An array of two-dimensional textures  containing depth data.",null,null],[3,"DepthTexture2dMultisampleArrayLayer","","Represents a single layer of a `DepthTexture2dMultisampleArray`.",null,null],[3,"DepthTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `DepthTexture2dMultisampleArray`.",null,null],[3,"DepthTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthTexture2dMultisampleArray`.",null,null],[11,"get_id","","",370,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",370,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",370,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",370,{"i":[{"n":"self"}],"o":{"g":["depthtexture2dmultisamplearray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",370,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",370,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",370,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",370,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthtexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",370,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthtexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",370,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",370,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",370,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",370,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",370,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",370,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",370,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",370,{"i":[{"n":"self"}],"o":{"n":"depthtexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",370,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture2dmultisamplearraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",370,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture2dmultisamplearraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",370,{"i":[{"n":"self"}],"o":{"n":"depthtexture2dmultisamplearraymipmap"}}],[11,"clone","","",371,{"i":[{"n":"self"}],"o":{"n":"depthtexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",371,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",371,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",371,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",371,null],[11,"get_texture","","Returns the corresponding texture.",371,{"i":[{"n":"self"}],"o":{"n":"depthtexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",371,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",371,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",371,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture2dmultisamplearraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",371,{"i":[{"n":"self"}],"o":{"n":"depthtexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",372,{"i":[{"n":"self"}],"o":{"n":"depthtexture2dmultisamplearraymipmap"}}],[11,"deref","","",372,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",372,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",372,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",372,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",372,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",372,null],[11,"get_texture","","Returns the corresponding texture.",372,{"i":[{"n":"self"}],"o":{"n":"depthtexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",372,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",372,{"i":[{"n":"self"}],"o":{"n":"depthtexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",372,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthtexture2dmultisamplearraylayermipmap"],"n":"option"}}],[11,"clone","","",373,{"i":[{"n":"self"}],"o":{"n":"depthtexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",373,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",373,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",373,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",373,null],[11,"into","","",373,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_depth_attachment","","",373,{"i":[{"n":"self"}],"o":{"n":"depthattachment"}}],[0,"stencil_texture2d_multisample_array","glium::texture","Contains the implementation of `StencilTexture2dMultisampleArray`.",null,null],[3,"StencilTexture2dMultisampleArray","glium::texture::stencil_texture2d_multisample_array","An array of two-dimensional textures  containing stencil data.",null,null],[3,"StencilTexture2dMultisampleArrayLayer","","Represents a single layer of a `StencilTexture2dMultisampleArray`.",null,null],[3,"StencilTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `StencilTexture2dMultisampleArray`.",null,null],[3,"StencilTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `StencilTexture2dMultisampleArray`.",null,null],[11,"get_id","","",374,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",374,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",374,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",374,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",374,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",374,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",374,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stenciltexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",374,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"stenciltexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",374,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",374,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",374,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",374,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",374,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",374,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",374,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",374,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",374,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture2dmultisamplearraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",374,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture2dmultisamplearraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",374,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2dmultisamplearraymipmap"}}],[11,"clone","","",375,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",375,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",375,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",375,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",375,null],[11,"get_texture","","Returns the corresponding texture.",375,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",375,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",375,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",375,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture2dmultisamplearraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",375,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",376,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2dmultisamplearraymipmap"}}],[11,"deref","","",376,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",376,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",376,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",376,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",376,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",376,null],[11,"get_texture","","Returns the corresponding texture.",376,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",376,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",376,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",376,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stenciltexture2dmultisamplearraylayermipmap"],"n":"option"}}],[11,"clone","","",377,{"i":[{"n":"self"}],"o":{"n":"stenciltexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",377,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",377,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",377,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",377,null],[11,"into","","",377,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_stencil_attachment","","",377,{"i":[{"n":"self"}],"o":{"n":"stencilattachment"}}],[0,"depth_stencil_texture2d_multisample_array","glium::texture","Contains the implementation of `DepthStencilTexture2dMultisampleArray`.",null,null],[3,"DepthStencilTexture2dMultisampleArray","glium::texture::depth_stencil_texture2d_multisample_array","An array of two-dimensional textures  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture2dMultisampleArrayLayer","","Represents a single layer of a `DepthStencilTexture2dMultisampleArray`.",null,null],[3,"DepthStencilTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `DepthStencilTexture2dMultisampleArray`.",null,null],[3,"DepthStencilTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthStencilTexture2dMultisampleArray`.",null,null],[11,"get_id","","",378,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",378,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",378,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",378,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",378,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",378,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",378,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstenciltexture2dmultisamplearray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",378,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthstenciltexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",378,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",378,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",378,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",378,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",378,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",378,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",378,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",378,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",378,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture2dmultisamplearraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",378,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture2dmultisamplearraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",378,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2dmultisamplearraymipmap"}}],[11,"clone","","",379,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",379,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",379,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",379,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",379,null],[11,"get_texture","","Returns the corresponding texture.",379,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",379,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",379,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",379,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture2dmultisamplearraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",379,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",380,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2dmultisamplearraymipmap"}}],[11,"deref","","",380,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",380,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",380,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",380,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",380,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",380,null],[11,"get_texture","","Returns the corresponding texture.",380,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",380,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",380,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",380,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstenciltexture2dmultisamplearraylayermipmap"],"n":"option"}}],[11,"clone","","",381,{"i":[{"n":"self"}],"o":{"n":"depthstenciltexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",381,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",381,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"samples","","Returns the number of samples of that image.",381,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",381,null],[11,"into","","",381,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",381,{"i":[{"n":"self"}],"o":{"n":"depthstencilattachment"}}],[0,"cubemap","glium::texture","Contains the implementation of `Cubemap`.",null,null],[3,"Cubemap","glium::texture::cubemap","A cube texture  containing floating-point data.",null,null],[3,"CubemapMipmap","","Represents a single mipmap level of a `Cubemap`.",null,null],[3,"CubemapImage","","Represents a single image of a mipmap level of a layer of `Cubemap`.",null,null],[11,"get_id","","",382,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",382,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",382,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::cubemap","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",382,{"i":[{"n":"self"}],"o":{"g":["cubemap"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",382,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",382,{"i":[{"n":"f"},{"n":"u32"}],"o":{"g":["cubemap","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",382,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["cubemap","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",382,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["cubemap","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",382,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"cubemap"}}],[11,"width","","Returns the width of that image.",382,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",382,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",382,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",382,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",382,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",382,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["cubemapmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",382,{"i":[{"n":"self"}],"o":{"n":"cubemapmipmap"}}],[11,"clone","","",383,{"i":[{"n":"self"}],"o":{"n":"cubemapmipmap"}}],[11,"deref","","",383,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",383,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",383,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",383,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",383,{"i":[{"n":"self"}],"o":{"n":"cubemap"}}],[11,"get_level","","Returns the texture level.",383,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",383,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"cubemapimage"}}],[11,"clone","","",384,{"i":[{"n":"self"}],"o":{"n":"cubemapimage"}}],[11,"width","","Returns the width of that image.",384,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",384,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",384,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",384,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",384,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"compressed_cubemap","glium::texture","Contains the implementation of `CompressedCubemap`.",null,null],[3,"CompressedCubemap","glium::texture::compressed_cubemap","A compressed cube texture  containing floating-point data.",null,null],[3,"CompressedCubemapMipmap","","Represents a single mipmap level of a `CompressedCubemap`.",null,null],[3,"CompressedCubemapImage","","Represents a single image of a mipmap level of a layer of `CompressedCubemap`.",null,null],[11,"get_id","","",385,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",385,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",385,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_cubemap","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",385,{"i":[{"n":"self"}],"o":{"g":["compressedcubemap"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",385,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",385,{"i":[{"n":"f"},{"n":"compressedformat"},{"n":"compressedmipmapsoption"},{"n":"u32"}],"o":{"g":["compressedcubemap","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",385,{"i":[{"n":"f"},{"n":"compressedformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"compressedcubemap"}}],[11,"width","","Returns the width of that image.",385,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",385,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",385,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",385,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",385,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",385,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",385,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedcubemapmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",385,{"i":[{"n":"self"}],"o":{"n":"compressedcubemapmipmap"}}],[11,"clone","","",386,{"i":[{"n":"self"}],"o":{"n":"compressedcubemapmipmap"}}],[11,"deref","","",386,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",386,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",386,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",386,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",386,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_texture","","Returns the corresponding texture.",386,{"i":[{"n":"self"}],"o":{"n":"compressedcubemap"}}],[11,"get_level","","Returns the texture level.",386,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",386,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"compressedcubemapimage"}}],[11,"clone","","",387,{"i":[{"n":"self"}],"o":{"n":"compressedcubemapimage"}}],[11,"width","","Returns the width of that image.",387,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",387,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",387,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",387,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[0,"srgb_cubemap","glium::texture","Contains the implementation of `SrgbCubemap`.",null,null],[3,"SrgbCubemap","glium::texture::srgb_cubemap","A cube texture  containing sRGB floating-point data.",null,null],[3,"SrgbCubemapMipmap","","Represents a single mipmap level of a `SrgbCubemap`.",null,null],[3,"SrgbCubemapImage","","Represents a single image of a mipmap level of a layer of `SrgbCubemap`.",null,null],[11,"get_id","","",388,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",388,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",388,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_cubemap","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",388,{"i":[{"n":"self"}],"o":{"g":["srgbcubemap"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",388,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",388,{"i":[{"n":"f"},{"n":"u32"}],"o":{"g":["srgbcubemap","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",388,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["srgbcubemap","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",388,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["srgbcubemap","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",388,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"srgbcubemap"}}],[11,"width","","Returns the width of that image.",388,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",388,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",388,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",388,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",388,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",388,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbcubemapmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",388,{"i":[{"n":"self"}],"o":{"n":"srgbcubemapmipmap"}}],[11,"clone","","",389,{"i":[{"n":"self"}],"o":{"n":"srgbcubemapmipmap"}}],[11,"deref","","",389,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",389,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",389,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",389,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",389,{"i":[{"n":"self"}],"o":{"n":"srgbcubemap"}}],[11,"get_level","","Returns the texture level.",389,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",389,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"srgbcubemapimage"}}],[11,"clone","","",390,{"i":[{"n":"self"}],"o":{"n":"srgbcubemapimage"}}],[11,"width","","Returns the width of that image.",390,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",390,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",390,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",390,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",390,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"compressed_srgb_cubemap","glium::texture","Contains the implementation of `CompressedSrgbCubemap`.",null,null],[3,"CompressedSrgbCubemap","glium::texture::compressed_srgb_cubemap","A compressed cube texture  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbCubemapMipmap","","Represents a single mipmap level of a `CompressedSrgbCubemap`.",null,null],[3,"CompressedSrgbCubemapImage","","Represents a single image of a mipmap level of a layer of `CompressedSrgbCubemap`.",null,null],[11,"get_id","","",391,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",391,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",391,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_cubemap","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",391,{"i":[{"n":"self"}],"o":{"g":["compressedsrgbcubemap"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",391,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",391,{"i":[{"n":"f"},{"n":"compressedsrgbformat"},{"n":"compressedmipmapsoption"},{"n":"u32"}],"o":{"g":["compressedsrgbcubemap","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",391,{"i":[{"n":"f"},{"n":"compressedsrgbformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"compressedsrgbcubemap"}}],[11,"width","","Returns the width of that image.",391,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",391,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",391,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",391,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",391,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",391,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",391,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbcubemapmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",391,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbcubemapmipmap"}}],[11,"clone","","",392,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbcubemapmipmap"}}],[11,"deref","","",392,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",392,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",392,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",392,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",392,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_texture","","Returns the corresponding texture.",392,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbcubemap"}}],[11,"get_level","","Returns the texture level.",392,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",392,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"compressedsrgbcubemapimage"}}],[11,"clone","","",393,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbcubemapimage"}}],[11,"width","","Returns the width of that image.",393,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",393,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",393,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",393,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[0,"integral_cubemap","glium::texture","Contains the implementation of `IntegralCubemap`.",null,null],[3,"IntegralCubemap","glium::texture::integral_cubemap","A cube texture  containing signed integral data.",null,null],[3,"IntegralCubemapMipmap","","Represents a single mipmap level of a `IntegralCubemap`.",null,null],[3,"IntegralCubemapImage","","Represents a single image of a mipmap level of a layer of `IntegralCubemap`.",null,null],[11,"get_id","","",394,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",394,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",394,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::integral_cubemap","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",394,{"i":[{"n":"self"}],"o":{"g":["integralcubemap"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",394,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",394,{"i":[{"n":"f"},{"n":"u32"}],"o":{"g":["integralcubemap","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",394,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["integralcubemap","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",394,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["integralcubemap","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",394,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"integralcubemap"}}],[11,"width","","Returns the width of that image.",394,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",394,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",394,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",394,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",394,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",394,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integralcubemapmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",394,{"i":[{"n":"self"}],"o":{"n":"integralcubemapmipmap"}}],[11,"clone","","",395,{"i":[{"n":"self"}],"o":{"n":"integralcubemapmipmap"}}],[11,"deref","","",395,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",395,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",395,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",395,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",395,{"i":[{"n":"self"}],"o":{"n":"integralcubemap"}}],[11,"get_level","","Returns the texture level.",395,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",395,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"integralcubemapimage"}}],[11,"clone","","",396,{"i":[{"n":"self"}],"o":{"n":"integralcubemapimage"}}],[11,"width","","Returns the width of that image.",396,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",396,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",396,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",396,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",396,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"unsigned_cubemap","glium::texture","Contains the implementation of `UnsignedCubemap`.",null,null],[3,"UnsignedCubemap","glium::texture::unsigned_cubemap","A cube texture  containing unsigned integral data.",null,null],[3,"UnsignedCubemapMipmap","","Represents a single mipmap level of a `UnsignedCubemap`.",null,null],[3,"UnsignedCubemapImage","","Represents a single image of a mipmap level of a layer of `UnsignedCubemap`.",null,null],[11,"get_id","","",397,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",397,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",397,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_cubemap","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",397,{"i":[{"n":"self"}],"o":{"g":["unsignedcubemap"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",397,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",397,{"i":[{"n":"f"},{"n":"u32"}],"o":{"g":["unsignedcubemap","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",397,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["unsignedcubemap","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",397,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["unsignedcubemap","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",397,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"unsignedcubemap"}}],[11,"width","","Returns the width of that image.",397,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",397,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",397,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",397,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",397,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",397,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedcubemapmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",397,{"i":[{"n":"self"}],"o":{"n":"unsignedcubemapmipmap"}}],[11,"clone","","",398,{"i":[{"n":"self"}],"o":{"n":"unsignedcubemapmipmap"}}],[11,"deref","","",398,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",398,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",398,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",398,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",398,{"i":[{"n":"self"}],"o":{"n":"unsignedcubemap"}}],[11,"get_level","","Returns the texture level.",398,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",398,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"unsignedcubemapimage"}}],[11,"clone","","",399,{"i":[{"n":"self"}],"o":{"n":"unsignedcubemapimage"}}],[11,"width","","Returns the width of that image.",399,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",399,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",399,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",399,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",399,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"depth_cubemap","glium::texture","Contains the implementation of `DepthCubemap`.",null,null],[3,"DepthCubemap","glium::texture::depth_cubemap","A cube texture  containing depth data.",null,null],[3,"DepthCubemapMipmap","","Represents a single mipmap level of a `DepthCubemap`.",null,null],[3,"DepthCubemapImage","","Represents a single image of a mipmap level of a layer of `DepthCubemap`.",null,null],[11,"get_id","","",400,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",400,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",400,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::depth_cubemap","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",400,{"i":[{"n":"self"}],"o":{"g":["depthcubemap"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",400,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",400,{"i":[{"n":"f"},{"n":"u32"}],"o":{"g":["depthcubemap","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",400,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["depthcubemap","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",400,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["depthcubemap","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",400,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthcubemap"}}],[11,"width","","Returns the width of that image.",400,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",400,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",400,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",400,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",400,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",400,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthcubemapmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",400,{"i":[{"n":"self"}],"o":{"n":"depthcubemapmipmap"}}],[11,"clone","","",401,{"i":[{"n":"self"}],"o":{"n":"depthcubemapmipmap"}}],[11,"deref","","",401,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",401,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",401,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",401,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",401,{"i":[{"n":"self"}],"o":{"n":"depthcubemap"}}],[11,"get_level","","Returns the texture level.",401,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",401,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"depthcubemapimage"}}],[11,"clone","","",402,{"i":[{"n":"self"}],"o":{"n":"depthcubemapimage"}}],[11,"width","","Returns the width of that image.",402,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",402,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",402,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",402,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_depth_attachment","","",402,{"i":[{"n":"self"}],"o":{"n":"depthattachment"}}],[0,"stencil_cubemap","glium::texture","Contains the implementation of `StencilCubemap`.",null,null],[3,"StencilCubemap","glium::texture::stencil_cubemap","A cube texture  containing stencil data.",null,null],[3,"StencilCubemapMipmap","","Represents a single mipmap level of a `StencilCubemap`.",null,null],[3,"StencilCubemapImage","","Represents a single image of a mipmap level of a layer of `StencilCubemap`.",null,null],[11,"get_id","","",403,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",403,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",403,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",403,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",403,{"i":[{"n":"f"},{"n":"u32"}],"o":{"g":["stencilcubemap","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",403,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["stencilcubemap","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",403,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["stencilcubemap","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",403,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"stencilcubemap"}}],[11,"width","","Returns the width of that image.",403,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",403,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",403,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",403,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",403,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",403,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stencilcubemapmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",403,{"i":[{"n":"self"}],"o":{"n":"stencilcubemapmipmap"}}],[11,"clone","","",404,{"i":[{"n":"self"}],"o":{"n":"stencilcubemapmipmap"}}],[11,"deref","","",404,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",404,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",404,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",404,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",404,{"i":[{"n":"self"}],"o":{"n":"stencilcubemap"}}],[11,"get_level","","Returns the texture level.",404,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",404,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"stencilcubemapimage"}}],[11,"clone","","",405,{"i":[{"n":"self"}],"o":{"n":"stencilcubemapimage"}}],[11,"width","","Returns the width of that image.",405,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",405,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",405,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",405,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_stencil_attachment","","",405,{"i":[{"n":"self"}],"o":{"n":"stencilattachment"}}],[0,"depth_stencil_cubemap","glium::texture","Contains the implementation of `DepthStencilCubemap`.",null,null],[3,"DepthStencilCubemap","glium::texture::depth_stencil_cubemap","A cube texture  containing both depth and stencil data.",null,null],[3,"DepthStencilCubemapMipmap","","Represents a single mipmap level of a `DepthStencilCubemap`.",null,null],[3,"DepthStencilCubemapImage","","Represents a single image of a mipmap level of a layer of `DepthStencilCubemap`.",null,null],[11,"get_id","","",406,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",406,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",406,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",406,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",406,{"i":[{"n":"f"},{"n":"u32"}],"o":{"g":["depthstencilcubemap","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",406,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["depthstencilcubemap","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",406,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"}],"o":{"g":["depthstencilcubemap","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",406,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthstencilcubemap"}}],[11,"width","","Returns the width of that image.",406,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",406,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",406,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",406,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",406,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",406,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstencilcubemapmipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",406,{"i":[{"n":"self"}],"o":{"n":"depthstencilcubemapmipmap"}}],[11,"clone","","",407,{"i":[{"n":"self"}],"o":{"n":"depthstencilcubemapmipmap"}}],[11,"deref","","",407,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",407,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",407,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",407,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",407,{"i":[{"n":"self"}],"o":{"n":"depthstencilcubemap"}}],[11,"get_level","","Returns the texture level.",407,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",407,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"depthstencilcubemapimage"}}],[11,"clone","","",408,{"i":[{"n":"self"}],"o":{"n":"depthstencilcubemapimage"}}],[11,"width","","Returns the width of that image.",408,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",408,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",408,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",408,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",408,{"i":[{"n":"self"}],"o":{"n":"depthstencilattachment"}}],[0,"cubemap_array","glium::texture","Contains the implementation of `CubemapArray`.",null,null],[3,"CubemapArray","glium::texture::cubemap_array","An array of cube textures  containing floating-point data.",null,null],[3,"CubemapArrayLayer","","Represents a single layer of a `CubemapArray`.",null,null],[3,"CubemapArrayMipmap","","Represents a single mipmap level of a `CubemapArray`.",null,null],[3,"CubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CubemapArray`.",null,null],[3,"CubemapArrayImage","","Represents a single image of a mipmap level of a layer of `CubemapArray`.",null,null],[11,"get_id","","",409,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",409,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",409,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::cubemap_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",409,{"i":[{"n":"self"}],"o":{"g":["cubemaparray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",409,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",409,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["cubemaparray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",409,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["cubemaparray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",409,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["cubemaparray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",409,{"i":[{"n":"f"},{"n":"uncompressedfloatformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"cubemaparray"}}],[11,"width","","Returns the width of that image.",409,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",409,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",409,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",409,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",409,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",409,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",409,{"i":[{"n":"self"}],"o":{"n":"cubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",409,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["cubemaparraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",409,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["cubemaparraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",409,{"i":[{"n":"self"}],"o":{"n":"cubemaparraymipmap"}}],[11,"clone","","",410,{"i":[{"n":"self"}],"o":{"n":"cubemaparraylayer"}}],[11,"width","","Returns the width of that image.",410,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",410,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",410,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",410,{"i":[{"n":"self"}],"o":{"n":"cubemaparray"}}],[11,"get_layer","","Returns the layer index.",410,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",410,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",410,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["cubemaparraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",410,{"i":[{"n":"self"}],"o":{"n":"cubemaparraylayermipmap"}}],[11,"clone","","",411,{"i":[{"n":"self"}],"o":{"n":"cubemaparraymipmap"}}],[11,"deref","","",411,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",411,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",411,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",411,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",411,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",411,{"i":[{"n":"self"}],"o":{"n":"cubemaparray"}}],[11,"get_level","","Returns the texture level.",411,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",411,{"i":[{"n":"self"}],"o":{"n":"cubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",411,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["cubemaparraylayermipmap"],"n":"option"}}],[11,"clone","","",412,{"i":[{"n":"self"}],"o":{"n":"cubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",412,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",412,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",412,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",412,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"cubemaparrayimage"}}],[11,"clone","","",413,{"i":[{"n":"self"}],"o":{"n":"cubemaparrayimage"}}],[11,"width","","Returns the width of that image.",413,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",413,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",413,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",413,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",413,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"compressed_cubemap_array","glium::texture","Contains the implementation of `CompressedCubemapArray`.",null,null],[3,"CompressedCubemapArray","glium::texture::compressed_cubemap_array","An array of compressed cube textures  containing floating-point data.",null,null],[3,"CompressedCubemapArrayLayer","","Represents a single layer of a `CompressedCubemapArray`.",null,null],[3,"CompressedCubemapArrayMipmap","","Represents a single mipmap level of a `CompressedCubemapArray`.",null,null],[3,"CompressedCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedCubemapArray`.",null,null],[3,"CompressedCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `CompressedCubemapArray`.",null,null],[11,"get_id","","",414,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",414,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",414,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_cubemap_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",414,{"i":[{"n":"self"}],"o":{"g":["compressedcubemaparray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",414,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",414,{"i":[{"n":"f"},{"n":"compressedformat"},{"n":"compressedmipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["compressedcubemaparray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",414,{"i":[{"n":"f"},{"n":"compressedformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"compressedcubemaparray"}}],[11,"width","","Returns the width of that image.",414,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",414,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",414,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",414,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",414,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",414,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",414,{"i":[{"n":"self"}],"o":{"n":"compressedcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",414,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedcubemaparraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",414,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedcubemaparraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",414,{"i":[{"n":"self"}],"o":{"n":"compressedcubemaparraymipmap"}}],[11,"clone","","",415,{"i":[{"n":"self"}],"o":{"n":"compressedcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",415,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",415,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",415,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",415,{"i":[{"n":"self"}],"o":{"n":"compressedcubemaparray"}}],[11,"get_layer","","Returns the layer index.",415,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",415,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",415,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedcubemaparraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",415,{"i":[{"n":"self"}],"o":{"n":"compressedcubemaparraylayermipmap"}}],[11,"clone","","",416,{"i":[{"n":"self"}],"o":{"n":"compressedcubemaparraymipmap"}}],[11,"deref","","",416,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",416,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",416,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",416,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",416,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",416,{"i":[{"n":"self"}],"o":{"n":"compressedcubemaparray"}}],[11,"get_level","","Returns the texture level.",416,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",416,{"i":[{"n":"self"}],"o":{"n":"compressedcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",416,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedcubemaparraylayermipmap"],"n":"option"}}],[11,"clone","","",417,{"i":[{"n":"self"}],"o":{"n":"compressedcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",417,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",417,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",417,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",417,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"compressedcubemaparrayimage"}}],[11,"clone","","",418,{"i":[{"n":"self"}],"o":{"n":"compressedcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",418,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",418,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",418,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",418,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[0,"srgb_cubemap_array","glium::texture","Contains the implementation of `SrgbCubemapArray`.",null,null],[3,"SrgbCubemapArray","glium::texture::srgb_cubemap_array","An array of cube textures  containing sRGB floating-point data.",null,null],[3,"SrgbCubemapArrayLayer","","Represents a single layer of a `SrgbCubemapArray`.",null,null],[3,"SrgbCubemapArrayMipmap","","Represents a single mipmap level of a `SrgbCubemapArray`.",null,null],[3,"SrgbCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `SrgbCubemapArray`.",null,null],[3,"SrgbCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `SrgbCubemapArray`.",null,null],[11,"get_id","","",419,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",419,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",419,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_cubemap_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",419,{"i":[{"n":"self"}],"o":{"g":["srgbcubemaparray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",419,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",419,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbcubemaparray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",419,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbcubemaparray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",419,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["srgbcubemaparray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",419,{"i":[{"n":"f"},{"n":"srgbformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"srgbcubemaparray"}}],[11,"width","","Returns the width of that image.",419,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",419,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",419,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",419,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",419,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",419,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",419,{"i":[{"n":"self"}],"o":{"n":"srgbcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",419,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbcubemaparraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",419,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbcubemaparraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",419,{"i":[{"n":"self"}],"o":{"n":"srgbcubemaparraymipmap"}}],[11,"clone","","",420,{"i":[{"n":"self"}],"o":{"n":"srgbcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",420,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",420,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",420,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",420,{"i":[{"n":"self"}],"o":{"n":"srgbcubemaparray"}}],[11,"get_layer","","Returns the layer index.",420,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",420,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",420,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbcubemaparraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",420,{"i":[{"n":"self"}],"o":{"n":"srgbcubemaparraylayermipmap"}}],[11,"clone","","",421,{"i":[{"n":"self"}],"o":{"n":"srgbcubemaparraymipmap"}}],[11,"deref","","",421,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",421,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",421,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",421,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",421,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",421,{"i":[{"n":"self"}],"o":{"n":"srgbcubemaparray"}}],[11,"get_level","","Returns the texture level.",421,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",421,{"i":[{"n":"self"}],"o":{"n":"srgbcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",421,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["srgbcubemaparraylayermipmap"],"n":"option"}}],[11,"clone","","",422,{"i":[{"n":"self"}],"o":{"n":"srgbcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",422,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",422,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",422,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",422,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"srgbcubemaparrayimage"}}],[11,"clone","","",423,{"i":[{"n":"self"}],"o":{"n":"srgbcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",423,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",423,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",423,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",423,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",423,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"compressed_srgb_cubemap_array","glium::texture","Contains the implementation of `CompressedSrgbCubemapArray`.",null,null],[3,"CompressedSrgbCubemapArray","glium::texture::compressed_srgb_cubemap_array","An array of compressed cube textures  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbCubemapArrayLayer","","Represents a single layer of a `CompressedSrgbCubemapArray`.",null,null],[3,"CompressedSrgbCubemapArrayMipmap","","Represents a single mipmap level of a `CompressedSrgbCubemapArray`.",null,null],[3,"CompressedSrgbCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedSrgbCubemapArray`.",null,null],[3,"CompressedSrgbCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `CompressedSrgbCubemapArray`.",null,null],[11,"get_id","","",424,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",424,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",424,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_cubemap_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",424,{"i":[{"n":"self"}],"o":{"g":["compressedsrgbcubemaparray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",424,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",424,{"i":[{"n":"f"},{"n":"compressedsrgbformat"},{"n":"compressedmipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["compressedsrgbcubemaparray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",424,{"i":[{"n":"f"},{"n":"compressedsrgbformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"compressedsrgbcubemaparray"}}],[11,"width","","Returns the width of that image.",424,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",424,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",424,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",424,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",424,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",424,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",424,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",424,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbcubemaparraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",424,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbcubemaparraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",424,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbcubemaparraymipmap"}}],[11,"clone","","",425,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",425,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",425,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",425,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",425,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbcubemaparray"}}],[11,"get_layer","","Returns the layer index.",425,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",425,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",425,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbcubemaparraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",425,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbcubemaparraylayermipmap"}}],[11,"clone","","",426,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbcubemaparraymipmap"}}],[11,"deref","","",426,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",426,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",426,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",426,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",426,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",426,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbcubemaparray"}}],[11,"get_level","","Returns the texture level.",426,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",426,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",426,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["compressedsrgbcubemaparraylayermipmap"],"n":"option"}}],[11,"clone","","",427,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",427,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",427,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",427,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",427,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"compressedsrgbcubemaparrayimage"}}],[11,"clone","","",428,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",428,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",428,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",428,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",428,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[0,"integral_cubemap_array","glium::texture","Contains the implementation of `IntegralCubemapArray`.",null,null],[3,"IntegralCubemapArray","glium::texture::integral_cubemap_array","An array of cube textures  containing signed integral data.",null,null],[3,"IntegralCubemapArrayLayer","","Represents a single layer of a `IntegralCubemapArray`.",null,null],[3,"IntegralCubemapArrayMipmap","","Represents a single mipmap level of a `IntegralCubemapArray`.",null,null],[3,"IntegralCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `IntegralCubemapArray`.",null,null],[3,"IntegralCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `IntegralCubemapArray`.",null,null],[11,"get_id","","",429,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",429,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",429,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::integral_cubemap_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",429,{"i":[{"n":"self"}],"o":{"g":["integralcubemaparray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",429,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",429,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integralcubemaparray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",429,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integralcubemaparray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",429,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["integralcubemaparray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",429,{"i":[{"n":"f"},{"n":"uncompressedintformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"integralcubemaparray"}}],[11,"width","","Returns the width of that image.",429,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",429,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",429,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",429,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",429,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",429,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",429,{"i":[{"n":"self"}],"o":{"n":"integralcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",429,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integralcubemaparraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",429,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integralcubemaparraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",429,{"i":[{"n":"self"}],"o":{"n":"integralcubemaparraymipmap"}}],[11,"clone","","",430,{"i":[{"n":"self"}],"o":{"n":"integralcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",430,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",430,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",430,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",430,{"i":[{"n":"self"}],"o":{"n":"integralcubemaparray"}}],[11,"get_layer","","Returns the layer index.",430,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",430,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",430,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integralcubemaparraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",430,{"i":[{"n":"self"}],"o":{"n":"integralcubemaparraylayermipmap"}}],[11,"clone","","",431,{"i":[{"n":"self"}],"o":{"n":"integralcubemaparraymipmap"}}],[11,"deref","","",431,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",431,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",431,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",431,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",431,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",431,{"i":[{"n":"self"}],"o":{"n":"integralcubemaparray"}}],[11,"get_level","","Returns the texture level.",431,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",431,{"i":[{"n":"self"}],"o":{"n":"integralcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",431,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["integralcubemaparraylayermipmap"],"n":"option"}}],[11,"clone","","",432,{"i":[{"n":"self"}],"o":{"n":"integralcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",432,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",432,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",432,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",432,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"integralcubemaparrayimage"}}],[11,"clone","","",433,{"i":[{"n":"self"}],"o":{"n":"integralcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",433,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",433,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",433,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",433,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",433,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"unsigned_cubemap_array","glium::texture","Contains the implementation of `UnsignedCubemapArray`.",null,null],[3,"UnsignedCubemapArray","glium::texture::unsigned_cubemap_array","An array of cube textures  containing unsigned integral data.",null,null],[3,"UnsignedCubemapArrayLayer","","Represents a single layer of a `UnsignedCubemapArray`.",null,null],[3,"UnsignedCubemapArrayMipmap","","Represents a single mipmap level of a `UnsignedCubemapArray`.",null,null],[3,"UnsignedCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `UnsignedCubemapArray`.",null,null],[3,"UnsignedCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `UnsignedCubemapArray`.",null,null],[11,"get_id","","",434,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",434,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",434,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_cubemap_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",434,{"i":[{"n":"self"}],"o":{"g":["unsignedcubemaparray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",434,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",434,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedcubemaparray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",434,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedcubemaparray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",434,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["unsignedcubemaparray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",434,{"i":[{"n":"f"},{"n":"uncompresseduintformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"unsignedcubemaparray"}}],[11,"width","","Returns the width of that image.",434,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",434,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",434,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",434,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",434,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",434,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",434,{"i":[{"n":"self"}],"o":{"n":"unsignedcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",434,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedcubemaparraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",434,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedcubemaparraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",434,{"i":[{"n":"self"}],"o":{"n":"unsignedcubemaparraymipmap"}}],[11,"clone","","",435,{"i":[{"n":"self"}],"o":{"n":"unsignedcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",435,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",435,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",435,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",435,{"i":[{"n":"self"}],"o":{"n":"unsignedcubemaparray"}}],[11,"get_layer","","Returns the layer index.",435,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",435,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",435,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedcubemaparraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",435,{"i":[{"n":"self"}],"o":{"n":"unsignedcubemaparraylayermipmap"}}],[11,"clone","","",436,{"i":[{"n":"self"}],"o":{"n":"unsignedcubemaparraymipmap"}}],[11,"deref","","",436,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",436,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",436,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",436,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",436,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",436,{"i":[{"n":"self"}],"o":{"n":"unsignedcubemaparray"}}],[11,"get_level","","Returns the texture level.",436,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",436,{"i":[{"n":"self"}],"o":{"n":"unsignedcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",436,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["unsignedcubemaparraylayermipmap"],"n":"option"}}],[11,"clone","","",437,{"i":[{"n":"self"}],"o":{"n":"unsignedcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",437,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",437,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",437,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",437,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"unsignedcubemaparrayimage"}}],[11,"clone","","",438,{"i":[{"n":"self"}],"o":{"n":"unsignedcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",438,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",438,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",438,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",438,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_color_attachment","","",438,{"i":[{"n":"self"}],"o":{"n":"colorattachment"}}],[0,"depth_cubemap_array","glium::texture","Contains the implementation of `DepthCubemapArray`.",null,null],[3,"DepthCubemapArray","glium::texture::depth_cubemap_array","An array of cube textures  containing depth data.",null,null],[3,"DepthCubemapArrayLayer","","Represents a single layer of a `DepthCubemapArray`.",null,null],[3,"DepthCubemapArrayMipmap","","Represents a single mipmap level of a `DepthCubemapArray`.",null,null],[3,"DepthCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthCubemapArray`.",null,null],[3,"DepthCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `DepthCubemapArray`.",null,null],[11,"get_id","","",439,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",439,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",439,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"i":[{"n":"self"}],"o":{"n":"uniformvalue"}}],[11,"sampled","glium::texture::depth_cubemap_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",439,{"i":[{"n":"self"}],"o":{"g":["depthcubemaparray"],"n":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",439,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",439,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthcubemaparray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",439,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthcubemaparray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",439,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthcubemaparray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",439,{"i":[{"n":"f"},{"n":"depthformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthcubemaparray"}}],[11,"width","","Returns the width of that image.",439,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",439,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",439,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",439,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",439,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",439,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",439,{"i":[{"n":"self"}],"o":{"n":"depthcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",439,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthcubemaparraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",439,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthcubemaparraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",439,{"i":[{"n":"self"}],"o":{"n":"depthcubemaparraymipmap"}}],[11,"clone","","",440,{"i":[{"n":"self"}],"o":{"n":"depthcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",440,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",440,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",440,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",440,{"i":[{"n":"self"}],"o":{"n":"depthcubemaparray"}}],[11,"get_layer","","Returns the layer index.",440,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",440,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",440,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthcubemaparraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",440,{"i":[{"n":"self"}],"o":{"n":"depthcubemaparraylayermipmap"}}],[11,"clone","","",441,{"i":[{"n":"self"}],"o":{"n":"depthcubemaparraymipmap"}}],[11,"deref","","",441,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",441,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",441,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",441,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",441,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",441,{"i":[{"n":"self"}],"o":{"n":"depthcubemaparray"}}],[11,"get_level","","Returns the texture level.",441,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",441,{"i":[{"n":"self"}],"o":{"n":"depthcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",441,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthcubemaparraylayermipmap"],"n":"option"}}],[11,"clone","","",442,{"i":[{"n":"self"}],"o":{"n":"depthcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",442,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",442,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",442,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",442,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"depthcubemaparrayimage"}}],[11,"clone","","",443,{"i":[{"n":"self"}],"o":{"n":"depthcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",443,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",443,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",443,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",443,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_depth_attachment","","",443,{"i":[{"n":"self"}],"o":{"n":"depthattachment"}}],[0,"stencil_cubemap_array","glium::texture","Contains the implementation of `StencilCubemapArray`.",null,null],[3,"StencilCubemapArray","glium::texture::stencil_cubemap_array","An array of cube textures  containing stencil data.",null,null],[3,"StencilCubemapArrayLayer","","Represents a single layer of a `StencilCubemapArray`.",null,null],[3,"StencilCubemapArrayMipmap","","Represents a single mipmap level of a `StencilCubemapArray`.",null,null],[3,"StencilCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `StencilCubemapArray`.",null,null],[3,"StencilCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `StencilCubemapArray`.",null,null],[11,"get_id","","",444,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",444,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",444,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",444,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",444,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stencilcubemaparray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",444,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stencilcubemaparray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",444,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["stencilcubemaparray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",444,{"i":[{"n":"f"},{"n":"stencilformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"stencilcubemaparray"}}],[11,"width","","Returns the width of that image.",444,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",444,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",444,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",444,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",444,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",444,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",444,{"i":[{"n":"self"}],"o":{"n":"stencilcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",444,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stencilcubemaparraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",444,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stencilcubemaparraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",444,{"i":[{"n":"self"}],"o":{"n":"stencilcubemaparraymipmap"}}],[11,"clone","","",445,{"i":[{"n":"self"}],"o":{"n":"stencilcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",445,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",445,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",445,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",445,{"i":[{"n":"self"}],"o":{"n":"stencilcubemaparray"}}],[11,"get_layer","","Returns the layer index.",445,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",445,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",445,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stencilcubemaparraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",445,{"i":[{"n":"self"}],"o":{"n":"stencilcubemaparraylayermipmap"}}],[11,"clone","","",446,{"i":[{"n":"self"}],"o":{"n":"stencilcubemaparraymipmap"}}],[11,"deref","","",446,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",446,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",446,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",446,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",446,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",446,{"i":[{"n":"self"}],"o":{"n":"stencilcubemaparray"}}],[11,"get_level","","Returns the texture level.",446,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",446,{"i":[{"n":"self"}],"o":{"n":"stencilcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",446,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["stencilcubemaparraylayermipmap"],"n":"option"}}],[11,"clone","","",447,{"i":[{"n":"self"}],"o":{"n":"stencilcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",447,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",447,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",447,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",447,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"stencilcubemaparrayimage"}}],[11,"clone","","",448,{"i":[{"n":"self"}],"o":{"n":"stencilcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",448,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",448,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",448,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",448,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_stencil_attachment","","",448,{"i":[{"n":"self"}],"o":{"n":"stencilattachment"}}],[0,"depth_stencil_cubemap_array","glium::texture","Contains the implementation of `DepthStencilCubemapArray`.",null,null],[3,"DepthStencilCubemapArray","glium::texture::depth_stencil_cubemap_array","An array of cube textures  containing both depth and stencil data.",null,null],[3,"DepthStencilCubemapArrayLayer","","Represents a single layer of a `DepthStencilCubemapArray`.",null,null],[3,"DepthStencilCubemapArrayMipmap","","Represents a single mipmap level of a `DepthStencilCubemapArray`.",null,null],[3,"DepthStencilCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthStencilCubemapArray`.",null,null],[3,"DepthStencilCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `DepthStencilCubemapArray`.",null,null],[11,"get_id","","",449,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"fmt","","",449,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","","",449,{"i":[{"n":"self"}],"o":{"n":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",449,{"i":[{"n":"self"}],"o":{"g":["internalformat","getformaterror"],"n":"result"}}],[11,"empty","","Creates an empty texture.",449,{"i":[{"n":"f"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstencilcubemaparray","texturecreationerror"],"n":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",449,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstencilcubemaparray","texturecreationerror"],"n":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",449,{"i":[{"n":"f"},{"n":"mipmapsoption"},{"n":"u32"},{"n":"u32"}],"o":{"g":["depthstencilcubemaparray","texturecreationerror"],"n":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",449,{"i":[{"n":"f"},{"n":"depthstencilformat"},{"n":"c_uint"},{"n":"bool"},{"n":"mipmapsoption"},{"n":"dimensions"}],"o":{"n":"depthstencilcubemaparray"}}],[11,"width","","Returns the width of that image.",449,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",449,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",449,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",449,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",449,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",449,{"i":[{"n":"self"}],"o":{"g":["residenttexture","bindlesstexturesnotsupportederror"],"n":"result"}}],[11,"first_layer","","Access the first layer of this texture.",449,{"i":[{"n":"self"}],"o":{"n":"depthstencilcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",449,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstencilcubemaparraylayer"],"n":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",449,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstencilcubemaparraymipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",449,{"i":[{"n":"self"}],"o":{"n":"depthstencilcubemaparraymipmap"}}],[11,"clone","","",450,{"i":[{"n":"self"}],"o":{"n":"depthstencilcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",450,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",450,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",450,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",450,{"i":[{"n":"self"}],"o":{"n":"depthstencilcubemaparray"}}],[11,"get_layer","","Returns the layer index.",450,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",450,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",450,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstencilcubemaparraylayermipmap"],"n":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",450,{"i":[{"n":"self"}],"o":{"n":"depthstencilcubemaparraylayermipmap"}}],[11,"clone","","",451,{"i":[{"n":"self"}],"o":{"n":"depthstencilcubemaparraymipmap"}}],[11,"deref","","",451,{"i":[{"n":"self"}],"o":{"n":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",451,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",451,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"array_size","","Returns the number of array layers.",451,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",451,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",451,{"i":[{"n":"self"}],"o":{"n":"depthstencilcubemaparray"}}],[11,"get_level","","Returns the texture level.",451,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",451,{"i":[{"n":"self"}],"o":{"n":"depthstencilcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",451,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["depthstencilcubemaparraylayermipmap"],"n":"option"}}],[11,"clone","","",452,{"i":[{"n":"self"}],"o":{"n":"depthstencilcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",452,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",452,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",452,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",452,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"depthstencilcubemaparrayimage"}}],[11,"clone","","",453,{"i":[{"n":"self"}],"o":{"n":"depthstencilcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",453,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"height","","Returns the height of that image.",453,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",453,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"into","","",453,{"i":[{"n":"self"}],"o":{"n":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",453,{"i":[{"n":"self"}],"o":{"n":"depthstencilattachment"}}],[8,"PixelValue","glium::texture","A trait that must be implemented for any type that can represent the value of a pixel.",null,null],[10,"get_format","","Returns corresponding client format.",454,{"o":{"n":"clientformat"}}],[8,"Texture1dDataSource","","Trait that describes data for a one-dimensional texture.",null,null],[16,"Data","","The type of each pixel.",455,null],[10,"into_raw","","Returns the raw representation of the data.",455,{"i":[{"n":"self"}],"o":{"n":"rawimage1d"}}],[8,"Texture1dDataSink","","Trait that describes types that can be built from one-dimensional texture data.",null,null],[10,"from_raw","","Builds a new object from raw data.",456,{"i":[{"n":"cow"},{"n":"u32"}],"o":{"n":"self"}}],[8,"Texture2dDataSource","","Trait that describes data for a two-dimensional texture.",null,null],[16,"Data","","The type of each pixel.",457,null],[10,"into_raw","","Returns the raw representation of the data.",457,{"i":[{"n":"self"}],"o":{"n":"rawimage2d"}}],[8,"Texture2dDataSink","","Trait that describes types that can be built from two-dimensional texture data.",null,null],[10,"from_raw","","Builds a new object from raw data.",458,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[8,"ToClientFormat","","",null,null],[10,"rgb_format","","",459,{"o":{"n":"clientformat"}}],[10,"rgba_format","","",459,{"o":{"n":"clientformat"}}],[8,"Texture3dDataSource","","Trait that describes data for a two-dimensional texture.",null,null],[16,"Data","","The type of each pixel.",460,null],[10,"into_raw","","Returns the raw representation of the data.",460,{"i":[{"n":"self"}],"o":{"n":"rawimage3d"}}],[8,"Texture3dDataSink","","Trait that describes types that can be built from one-dimensional texture data.",null,null],[10,"from_raw","","Builds a new object from raw data.",461,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"clone","","",195,{"i":[{"n":"self"}],"o":{"n":"cubelayer"}}],[11,"fmt","","",195,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",195,{"i":[{"n":"self"},{"n":"cubelayer"}],"o":{"n":"bool"}}],[11,"hash","","",195,null],[11,"get_layer_index","","In some situations whole cubemaps can be bound at once. If this is the case, each layer of the cubemap has a specific index.",195,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",196,{"i":[{"n":"self"}],"o":{"n":"texturekind"}}],[11,"fmt","","",196,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",196,{"i":[{"n":"self"},{"n":"texturekind"}],"o":{"n":"bool"}}],[11,"hash","","",196,null],[11,"fmt","","",197,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",197,{"i":[{"n":"self"}],"o":{"n":"mipmapsoption"}}],[11,"eq","","",197,{"i":[{"n":"self"},{"n":"mipmapsoption"}],"o":{"n":"bool"}}],[11,"ne","","",197,{"i":[{"n":"self"},{"n":"mipmapsoption"}],"o":{"n":"bool"}}],[11,"from","","",197,{"i":[{"n":"compressedmipmapsoption"}],"o":{"n":"mipmapsoption"}}],[11,"fmt","","",198,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",198,{"i":[{"n":"self"}],"o":{"n":"compressedmipmapsoption"}}],[11,"eq","","",198,{"i":[{"n":"self"},{"n":"compressedmipmapsoption"}],"o":{"n":"bool"}}],[11,"ne","","",198,{"i":[{"n":"self"},{"n":"compressedmipmapsoption"}],"o":{"n":"bool"}}],[11,"into_raw","","",177,{"i":[{"n":"self"}],"o":{"n":"rawimage1d"}}],[11,"from_raw_rgb","","Builds a raw image from a vector of interleaved RGB values.",178,null],[11,"from_raw_rgba","","Builds a raw image from a vector of interleaved RGBA values.",178,null],[11,"from_raw_rgb_reversed","","Builds a raw image from a vector of interleaved RGB values, flipping it vertically.",178,null],[11,"from_raw_rgba_reversed","","Builds a raw image from a vector of interleaved RGBA values, flipping it vertically.",178,null],[11,"from_vec_raw1d","","Transforms a Vec into a RawImage2d",178,{"i":[{"n":"vec"}],"o":{"n":"rawimage2d"}}],[11,"into_raw","","",178,{"i":[{"n":"self"}],"o":{"n":"rawimage2d"}}],[11,"from_raw","","",178,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"from_raw","","",178,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"from_raw","","",178,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"from_raw","","",178,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"from_raw","","",178,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"from_raw","","",178,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"from_raw","","",178,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"from_raw","","",178,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"from_raw","","",178,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"from_raw","","",178,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"from_raw","","",178,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"from_raw","","",178,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"from_raw","","",178,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"from_raw","","",178,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"from_raw","","",178,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"from_raw","","",178,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"from_raw","","",178,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"from_raw","","",178,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"from_raw","","",178,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"from_raw","","",178,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"from_raw","","",178,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"from_raw","","",178,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"from_raw","","",178,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"from_raw","","",178,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"from_raw","","",178,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"from_raw","","",178,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"from_raw","","",178,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"from_raw","","",178,{"i":[{"n":"cow"},{"n":"u32"},{"n":"u32"}],"o":{"n":"self"}}],[11,"from_vec_raw2d","","Transforms a Vec into a RawImage3d",179,{"i":[{"n":"vec"}],"o":{"n":"rawimage3d"}}],[11,"into_raw","","",179,{"i":[{"n":"self"}],"o":{"n":"rawimage3d"}}],[11,"fmt","","",199,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",199,{"i":[{"n":"self"}],"o":{"n":"texturecreationerror"}}],[11,"eq","","",199,{"i":[{"n":"self"},{"n":"texturecreationerror"}],"o":{"n":"bool"}}],[11,"fmt","","",199,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",199,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","glium","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"profile"}}],[11,"clone","glium::backend","",54,{"i":[{"n":"self"}],"o":{"n":"releasebehavior"}}],[11,"fmt","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",54,{"i":[{"n":"self"},{"n":"releasebehavior"}],"o":{"n":"bool"}}],[11,"new","","Builds a new context.",462,{"i":[{"n":"b"},{"n":"bool"},{"n":"debugcallbackbehavior"}],"o":{"g":["rc","incompatibleopengl"],"n":"result"}}],[11,"get_framebuffer_dimensions","","Calls `get_framebuffer_dimensions` on the backend object stored by this context.",462,null],[11,"rebuild","","Changes the OpenGL context associated with this context.",462,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["incompatibleopengl"],"n":"result"}}],[11,"swap_buffers","","Swaps the buffers in the backend.",462,{"i":[{"n":"self"}],"o":{"g":["swapbufferserror"],"n":"result"}}],[11,"get_version","","DEPRECATED. Use `get_opengl_version` instead.",462,{"i":[{"n":"self"}],"o":{"n":"version"}}],[11,"get_opengl_version","","Returns the OpenGL version detected by this context.",462,{"i":[{"n":"self"}],"o":{"n":"version"}}],[11,"get_supported_glsl_version","","Returns the GLSL version guaranteed to be supported.",462,{"i":[{"n":"self"}],"o":{"n":"version"}}],[11,"is_glsl_version_supported","","Returns true if the given GLSL version is supported.",462,{"i":[{"n":"self"},{"n":"version"}],"o":{"n":"bool"}}],[11,"get_opengl_version_string","","Returns a string containing this GL version or release number used by this context.",462,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"get_opengl_vendor_string","","Returns a string containing the company responsible for this GL implementation.",462,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"get_opengl_renderer_string","","Returns a string containing the name of the GL renderer used by this context.",462,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"is_debug","","Returns true if the context is in debug mode.",462,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_forward_compatible","","Returns true if the context is in \"forward-compatible\" mode.",462,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_opengl_profile","","Returns this context's OpenGL profile if available.",462,{"i":[{"n":"self"}],"o":{"g":["profile"],"n":"option"}}],[11,"is_robust","","Returns true if out-of-bound buffer access from the GPU side (inside a program) cannot result in a crash.",462,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_context_loss_possible","","Returns true if a context loss is possible.",462,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_context_lost","","Returns true if the context has been lost and needs to be recreated.",462,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_release_behavior","","Returns the behavior when the current OpenGL context is changed.",462,{"i":[{"n":"self"}],"o":{"n":"releasebehavior"}}],[11,"get_max_anisotropy_support","","Returns the maximum value that can be used for anisotropic filtering, or `None` if the hardware doesn't support it.",462,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"get_max_viewport_dimensions","","Returns the maximum dimensions of the viewport.",462,null],[11,"release_shader_compiler","","Releases the shader compiler, indicating that no new programs will be created for a while.",462,{"i":[{"n":"self"}]}],[11,"get_free_video_memory","","Returns an estimate of the amount of video memory available in bytes.",462,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"read_front_buffer","","Reads the content of the front buffer.",462,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"exec_in_context","","Execute an arbitrary closure with the OpenGL context active. Useful if another component needs to directly manipulate OpenGL state.",462,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"t"}}],[11,"assert_no_error","","Asserts that there are no OpenGL errors pending.",462,{"i":[{"n":"self"},{"g":["str"],"n":"option"}]}],[11,"synchronize","","DEPRECATED. Renamed `finish`.",462,{"i":[{"n":"self"}]}],[11,"finish","","Calls `glFinish()`. This waits until all the previously issued commands have finished being executed.",462,{"i":[{"n":"self"}]}],[11,"flush","","Calls `glFlush()`. This starts executing the commands that you have issued if it is not yet the case.",462,{"i":[{"n":"self"}]}],[11,"insert_debug_marker","","Inserts a debugging string in the commands queue. If you use an OpenGL debugger, you will be able to see that string.",462,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"debug_insert_debug_marker","","Same as `insert_debug_marker`, except that if you don't compile with `debug_assertions` it is a no-op and returns `Ok`.",462,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"get_version","","",462,{"i":[{"n":"self"}],"o":{"n":"version"}}],[11,"get_extensions","","",462,{"i":[{"n":"self"}],"o":{"n":"extensionslist"}}],[11,"get_capabilities","","",462,{"i":[{"n":"self"}],"o":{"n":"capabilities"}}],[11,"drop","","",462,{"i":[{"n":"self"}]}],[11,"default","glium::debug","",77,{"o":{"n":"debugcallbackbehavior"}}],[11,"clone","glium::framebuffer","",99,{"i":[{"n":"self"}],"o":{"n":"validationerror"}}],[11,"fmt","","",99,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",99,{"i":[{"n":"self"},{"n":"validationerror"}],"o":{"n":"bool"}}],[11,"ne","","",99,{"i":[{"n":"self"},{"n":"validationerror"}],"o":{"n":"bool"}}],[11,"fmt","","",99,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",99,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","glium::texture","",180,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",180,{"i":[{"n":"self"}],"o":{"n":"clientformat"}}],[11,"eq","","",180,{"i":[{"n":"self"},{"n":"clientformat"}],"o":{"n":"bool"}}],[11,"get_size","","Returns the size in bytes of a pixel of this type.",180,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"get_num_components","","Returns the number of components of this client format.",180,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"fmt","","",182,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",182,{"i":[{"n":"self"}],"o":{"n":"uncompressedfloatformat"}}],[11,"hash","","",182,null],[11,"eq","","",182,{"i":[{"n":"self"},{"n":"uncompressedfloatformat"}],"o":{"n":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",182,{"o":{"g":["uncompressedfloatformat"],"n":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",182,{"i":[{"n":"self"}],"o":{"n":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",182,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"is_color_renderable","","Returns true if a texture or renderbuffer with this format can be used as a framebuffer attachment.",182,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"fmt","","",190,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",190,{"i":[{"n":"self"}],"o":{"n":"srgbformat"}}],[11,"hash","","",190,null],[11,"eq","","",190,{"i":[{"n":"self"},{"n":"srgbformat"}],"o":{"n":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",190,{"o":{"g":["srgbformat"],"n":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",190,{"i":[{"n":"self"}],"o":{"n":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",190,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"is_color_renderable","","Returns true if a texture or renderbuffer with this format can be used as a framebuffer attachment.",190,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"fmt","","",183,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",183,{"i":[{"n":"self"}],"o":{"n":"uncompressedintformat"}}],[11,"hash","","",183,null],[11,"eq","","",183,{"i":[{"n":"self"},{"n":"uncompressedintformat"}],"o":{"n":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",183,{"o":{"g":["uncompressedintformat"],"n":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",183,{"i":[{"n":"self"}],"o":{"n":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",183,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"is_color_renderable","","Returns true if a texture or renderbuffer with this format can be used as a framebuffer attachment.",183,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"fmt","","",184,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",184,{"i":[{"n":"self"}],"o":{"n":"uncompresseduintformat"}}],[11,"hash","","",184,null],[11,"eq","","",184,{"i":[{"n":"self"},{"n":"uncompresseduintformat"}],"o":{"n":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",184,{"o":{"g":["uncompresseduintformat"],"n":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",184,{"i":[{"n":"self"}],"o":{"n":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",184,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"is_color_renderable","","Returns true if a texture or renderbuffer with this format can be used as a framebuffer attachment.",184,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"fmt","","",185,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",185,{"i":[{"n":"self"}],"o":{"n":"compressedformat"}}],[11,"hash","","",185,null],[11,"eq","","",185,{"i":[{"n":"self"},{"n":"compressedformat"}],"o":{"n":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",185,{"o":{"g":["compressedformat"],"n":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",185,{"i":[{"n":"self"}],"o":{"n":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",185,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"fmt","","",189,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",189,{"i":[{"n":"self"}],"o":{"n":"compressedsrgbformat"}}],[11,"hash","","",189,null],[11,"eq","","",189,{"i":[{"n":"self"},{"n":"compressedsrgbformat"}],"o":{"n":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",189,{"o":{"g":["compressedsrgbformat"],"n":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",189,{"i":[{"n":"self"}],"o":{"n":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",189,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"fmt","","",186,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",186,{"i":[{"n":"self"}],"o":{"n":"depthformat"}}],[11,"hash","","",186,null],[11,"eq","","",186,{"i":[{"n":"self"},{"n":"depthformat"}],"o":{"n":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",186,{"o":{"g":["depthformat"],"n":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",186,{"i":[{"n":"self"}],"o":{"n":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",186,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"fmt","","",187,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",187,{"i":[{"n":"self"}],"o":{"n":"depthstencilformat"}}],[11,"hash","","",187,null],[11,"eq","","",187,{"i":[{"n":"self"},{"n":"depthstencilformat"}],"o":{"n":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",187,{"o":{"g":["depthstencilformat"],"n":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",187,{"i":[{"n":"self"}],"o":{"n":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",187,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"fmt","","",188,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",188,{"i":[{"n":"self"}],"o":{"n":"stencilformat"}}],[11,"hash","","",188,null],[11,"eq","","",188,{"i":[{"n":"self"},{"n":"stencilformat"}],"o":{"n":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",188,{"o":{"g":["stencilformat"],"n":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",188,{"i":[{"n":"self"}],"o":{"n":"textureformat"}}],[11,"is_supported_for_textures","","Returns true if this format is supported by the backend for textures.",188,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"is_supported_for_renderbuffers","","Returns true if this format is supported by the backend for renderbuffers.",188,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"fmt","","",181,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",181,{"i":[{"n":"self"}],"o":{"n":"textureformat"}}],[11,"hash","","",181,null],[11,"eq","","",181,{"i":[{"n":"self"},{"n":"textureformat"}],"o":{"n":"bool"}}],[11,"ne","","",181,{"i":[{"n":"self"},{"n":"textureformat"}],"o":{"n":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",181,{"o":{"g":["textureformat"],"n":"vec"}}],[11,"is_supported_for_textures","","Returns true if this format is supported by the backend for textures.",181,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"is_supported_for_renderbuffers","","Returns true if this format is supported by the backend for renderbuffers.",181,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"is_renderable","","Returns true if the format is color-renderable, depth-renderable, depth-stencil-renderable or stencil-renderable.",181,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"bool"}}],[11,"new","glium","Builds a new `SyncFence` that is injected in the server.",463,{"i":[{"n":"f"}],"o":{"g":["syncfence","syncnotsupportederror"],"n":"result"}}],[11,"wait","","Blocks until the operation has finished on the server.",463,{"i":[{"n":"self"}]}],[11,"drop","","",463,{"i":[{"n":"self"}]}],[11,"into_sync_fence","","Turns the prototype into a real fence.",464,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"syncfence"}}],[11,"drop","","",464,{"i":[{"n":"self"}]}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"version"}}],[11,"eq","","",39,{"i":[{"n":"self"},{"n":"version"}],"o":{"n":"bool"}}],[11,"ne","","",39,{"i":[{"n":"self"},{"n":"version"}],"o":{"n":"bool"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"api"}}],[11,"eq","","",49,{"i":[{"n":"self"},{"n":"api"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",39,{"i":[{"n":"self"},{"n":"version"}],"o":{"g":["ordering"],"n":"option"}}],[6,"VertexFormat","","Describes the layout of each vertex in a vertex buffer.",null,null],[8,"CapabilitiesSource","","Trait for objects that describe the capabilities of an OpenGL backend.",null,null],[10,"get_version","","Returns the version of the backend.",465,{"i":[{"n":"self"}],"o":{"n":"version"}}],[10,"get_extensions","","Returns the list of extensions that are supported.",465,{"i":[{"n":"self"}],"o":{"n":"extensionslist"}}],[10,"get_capabilities","","Returns the capabilities of the backend.",465,{"i":[{"n":"self"}],"o":{"n":"capabilities"}}],[8,"GlObject","","Trait for objects that are OpenGL objects.",null,null],[16,"Id","","The type of identifier for this object.",466,null],[10,"get_id","","Returns the id of the object.",466,null],[8,"Surface","","Object that can be drawn upon.",null,null],[10,"clear","","Clears some attachments of the target.",467,{"i":[{"n":"self"},{"g":["rect"],"n":"option"},{"n":"option"},{"n":"bool"},{"g":["f32"],"n":"option"},{"g":["i32"],"n":"option"}]}],[11,"clear_color","","Clears the color attachment of the target.",467,{"i":[{"n":"self"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"}]}],[11,"clear_color_srgb","","Clears the color attachment of the target. The color is in sRGB format.",467,{"i":[{"n":"self"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"}]}],[11,"clear_depth","","Clears the depth attachment of the target.",467,{"i":[{"n":"self"},{"n":"f32"}]}],[11,"clear_stencil","","Clears the stencil attachment of the target.",467,{"i":[{"n":"self"},{"n":"i32"}]}],[11,"clear_color_and_depth","","Clears the color and depth attachments of the target.",467,null],[11,"clear_color_srgb_and_depth","","Clears the color and depth attachments of the target. The color is in sRGB format.",467,null],[11,"clear_color_and_stencil","","Clears the color and stencil attachments of the target.",467,null],[11,"clear_color_srgb_and_stencil","","Clears the color and stencil attachments of the target. The color is in sRGB format.",467,null],[11,"clear_depth_and_stencil","","Clears the depth and stencil attachments of the target.",467,{"i":[{"n":"self"},{"n":"f32"},{"n":"i32"}]}],[11,"clear_all","","Clears the color, depth and stencil attachments of the target.",467,null],[11,"clear_all_srgb","","Clears the color, depth and stencil attachments of the target. The color is in sRGB format.",467,null],[10,"get_dimensions","","Returns the dimensions in pixels of the target.",467,null],[10,"get_depth_buffer_bits","","Returns the number of bits of each pixel of the depth buffer.",467,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"has_depth_buffer","","Returns true if the surface has a depth buffer available.",467,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"get_stencil_buffer_bits","","Returns the number of bits of each pixel of the stencil buffer.",467,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"has_stencil_buffer","","Returns true if the surface has a stencil buffer available.",467,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"draw","","Draws.",467,{"i":[{"n":"self"},{"n":"v"},{"n":"i"},{"n":"program"},{"n":"u"},{"n":"drawparameters"}],"o":{"g":["drawerror"],"n":"result"}}],[10,"blit_from_frame","","Blits from the default framebuffer.",467,{"i":[{"n":"self"},{"n":"rect"},{"n":"blittarget"},{"n":"magnifysamplerfilter"}]}],[10,"blit_from_simple_framebuffer","","Blits from a simple framebuffer.",467,{"i":[{"n":"self"},{"n":"simpleframebuffer"},{"n":"rect"},{"n":"blittarget"},{"n":"magnifysamplerfilter"}]}],[10,"blit_from_multioutput_framebuffer","","Blits from a multi-output framebuffer.",467,{"i":[{"n":"self"},{"n":"multioutputframebuffer"},{"n":"rect"},{"n":"blittarget"},{"n":"magnifysamplerfilter"}]}],[10,"blit_color","","Copies a rectangle of pixels from this surface to another surface.",467,{"i":[{"n":"self"},{"n":"rect"},{"n":"s"},{"n":"blittarget"},{"n":"magnifysamplerfilter"}]}],[11,"blit_whole_color_to","","Copies the entire surface to a target surface. See `blit_color`.",467,{"i":[{"n":"self"},{"n":"s"},{"n":"blittarget"},{"n":"magnifysamplerfilter"}]}],[11,"fill","","Copies the entire surface to the entire target. See `blit_color`.",467,{"i":[{"n":"self"},{"n":"s"},{"n":"magnifysamplerfilter"}]}],[11,"eq","","",50,{"i":[{"n":"self"},{"n":"handle"}],"o":{"n":"bool"}}],[11,"ne","","",50,{"i":[{"n":"self"},{"n":"handle"}],"o":{"n":"bool"}}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"handle"}}],[11,"fmt","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",50,null],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"rawuniformvalue"}}],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"rect"}}],[11,"default","","",40,{"o":{"n":"rect"}}],[11,"eq","","",40,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"ne","","",40,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"blittarget"}}],[11,"default","","",41,{"o":{"n":"blittarget"}}],[11,"eq","","",41,{"i":[{"n":"self"},{"n":"blittarget"}],"o":{"n":"bool"}}],[11,"ne","","",41,{"i":[{"n":"self"},{"n":"blittarget"}],"o":{"n":"bool"}}],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"drawerror"}}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",52,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",52,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"swapbufferserror"}}],[11,"eq","","",53,{"i":[{"n":"self"},{"n":"swapbufferserror"}],"o":{"n":"bool"}}],[11,"description","","",53,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"new","","Builds a new `Frame`. Use the `draw` function on `Display` instead of this function.",468,null],[11,"finish","","Stop drawing, swap the buffers, and consume the Frame.",468,{"i":[{"n":"self"}],"o":{"g":["swapbufferserror"],"n":"result"}}],[11,"set_finish","","Stop drawing, swap the buffers.",468,{"i":[{"n":"self"}],"o":{"g":["swapbufferserror"],"n":"result"}}],[11,"clear","","",468,{"i":[{"n":"self"},{"g":["rect"],"n":"option"},{"n":"option"},{"n":"bool"},{"g":["f32"],"n":"option"},{"g":["i32"],"n":"option"}]}],[11,"get_dimensions","","",468,null],[11,"get_depth_buffer_bits","","",468,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"get_stencil_buffer_bits","","",468,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"draw","","",468,{"i":[{"n":"self"},{"n":"v"},{"n":"i"},{"n":"program"},{"n":"u"},{"n":"drawparameters"}],"o":{"g":["drawerror"],"n":"result"}}],[11,"blit_color","","",468,{"i":[{"n":"self"},{"n":"rect"},{"n":"s"},{"n":"blittarget"},{"n":"magnifysamplerfilter"}]}],[11,"blit_from_frame","","",468,{"i":[{"n":"self"},{"n":"rect"},{"n":"blittarget"},{"n":"magnifysamplerfilter"}]}],[11,"blit_from_simple_framebuffer","","",468,{"i":[{"n":"self"},{"n":"simpleframebuffer"},{"n":"rect"},{"n":"blittarget"},{"n":"magnifysamplerfilter"}]}],[11,"blit_from_multioutput_framebuffer","","",468,{"i":[{"n":"self"},{"n":"multioutputframebuffer"},{"n":"rect"},{"n":"blittarget"},{"n":"magnifysamplerfilter"}]}],[11,"drop","","",468,{"i":[{"n":"self"}]}],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"incompatibleopengl"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",42,{"i":[{"n":"self"},{"n":"incompatibleopengl"}],"o":{"n":"bool"}}],[11,"ne","","",42,{"i":[{"n":"self"},{"n":"incompatibleopengl"}],"o":{"n":"bool"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",42,{"i":[{"n":"self"}],"o":{"n":"str"}}],[14,"assert_no_gl_error","","Calls the `assert_no_error` method on a `glium::Display` instance with file and line number information.",null,null],[14,"uniform","","Returns an implementation-defined type which implements the `Uniform` trait.",null,null],[14,"implement_vertex","","Implements the `glium::vertex::Vertex` trait for the given type.",null,null],[14,"implement_buffer_content","","Implements the `glium::buffer::Content` trait for the given type.",null,null],[14,"implement_uniform_block","","Implements the `glium::uniforms::UniformBlock` trait for the given type.",null,null],[14,"program","","Builds a program depending on the GLSL version supported by the backend.",null,null],[11,"new","glium::glutin","Creates a new Window for platforms where this is appropriate.",469,{"i":[{"n":"eventsloop"}],"o":{"g":["window","creationerror"],"n":"result"}}],[11,"set_title","","Modifies the title of the window.",469,null],[11,"show","","Shows the window if it was hidden.",469,null],[11,"hide","","Hides the window if it was visible.",469,null],[11,"get_position","","Returns the position of the top-left hand corner of the window relative to the  top-left hand corner of the desktop.",469,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"set_position","","Modifies the position of the window.",469,null],[11,"get_inner_size","","Returns the size in pixels of the client area of the window.",469,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_inner_size_points","","Returns the size in points of the client area of the window.",469,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_inner_size_pixels","","Returns the size in pixels of the client area of the window.",469,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_outer_size","","Returns the size in pixels of the window.",469,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"set_inner_size","","Modifies the inner size of the window.",469,null],[11,"set_min_dimensions","","Sets a minimum dimension size for the window.",469,null],[11,"set_max_dimensions","","Sets a maximum dimension size for the window.",469,null],[11,"platform_display","","DEPRECATED. Gets the native platform specific display for this window. This is typically only required when integrating with other libraries that need this information.",469,null],[11,"platform_window","","DEPRECATED. Gets the native platform specific window handle. This is typically only required when integrating with other libraries that need this information.",469,null],[11,"set_cursor","","Modifies the mouse cursor of the window. Has no effect on Android.",469,null],[11,"hidpi_factor","","Returns the ratio between the backing framebuffer resolution and the window size in screen pixels. This is typically one for a normal display and two for a retina display.",469,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"set_cursor_position","","Changes the position of the cursor in window coordinates.",469,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"}],"o":{"n":"result"}}],[11,"set_cursor_state","","Sets how winit handles the cursor. See the documentation of `CursorState` for details.",469,{"i":[{"n":"self"},{"n":"cursorstate"}],"o":{"g":["string"],"n":"result"}}],[11,"set_maximized","","Sets the window to maximized or back",469,null],[11,"set_fullscreen","","Sets the window to fullscreen or back",469,null],[11,"set_decorations","","Turn window decorations on or off.",469,null],[11,"get_current_monitor","","Returns the current monitor the window is on or the primary monitor is nothing matches",469,{"i":[{"n":"self"}],"o":{"n":"monitorid"}}],[11,"id","","",469,{"i":[{"n":"self"}],"o":{"n":"windowid"}}],[11,"deref","","",470,null],[11,"from","","",9,{"i":[{"n":"creationerror"}],"o":{"n":"creationerror"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"default","","",17,{"o":{"n":"pixelformatrequirements"}}],[11,"default","","",18,{"o":{"n":"glattributes"}}],[11,"fmt","glium::glutin::os::unix","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","glium::glutin","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"make_current","","",471,{"i":[{"n":"self"}],"o":{"g":["contexterror"],"n":"result"}}],[11,"is_current","","",471,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_proc_address","","",471,null],[11,"swap_buffers","","",471,{"i":[{"n":"self"}],"o":{"g":["contexterror"],"n":"result"}}],[11,"get_api","","",471,{"i":[{"n":"self"}],"o":{"n":"api"}}],[11,"get_pixel_format","","",471,{"i":[{"n":"self"}],"o":{"n":"pixelformat"}}],[11,"resize","","",471,null],[11,"make_current","","",470,{"i":[{"n":"self"}],"o":{"g":["contexterror"],"n":"result"}}],[11,"is_current","","",470,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_proc_address","","",470,null],[11,"swap_buffers","","",470,{"i":[{"n":"self"}],"o":{"g":["contexterror"],"n":"result"}}],[11,"get_api","","",470,{"i":[{"n":"self"}],"o":{"n":"api"}}],[11,"get_pixel_format","","",470,{"i":[{"n":"self"}],"o":{"n":"pixelformat"}}],[11,"resize","","",470,null],[11,"make_current","","Creates a new OpenGL context Sets the context as the current context.",472,{"i":[{"n":"self"}],"o":{"g":["contexterror"],"n":"result"}}],[11,"is_current","","Returns true if this context is the current one in this thread.",472,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_proc_address","","Returns the address of an OpenGL function.",472,null],[11,"get_api","","Returns the API that is currently provided by this window.",472,{"i":[{"n":"self"}],"o":{"n":"api"}}],[11,"swap_buffers","","",472,{"i":[{"n":"self"}],"o":{"g":["contexterror"],"n":"result"}}],[11,"get_pixel_format","","",472,{"i":[{"n":"self"}],"o":{"n":"pixelformat"}}],[11,"resize","","",472,null],[11,"description","","",10,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","","",9,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",9,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"raw_handle","","",471,null],[11,"raw_handle","","",472,null],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"robustness"}],"o":{"n":"bool"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"api"}],"o":{"n":"bool"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"releasebehavior"}],"o":{"n":"bool"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"glprofile"}],"o":{"n":"bool"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"headlessrendererbuilder"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"robustness"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"releasebehavior"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"glrequest"}}],[11,"clone","glium::glutin::os::unix","",0,{"i":[{"n":"self"}],"o":{"n":"rawhandle"}}],[11,"clone","glium::glutin","",16,{"i":[{"n":"self"}],"o":{"n":"pixelformat"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"pixelformatrequirements"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"api"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"glattributes"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"glprofile"}}],[11,"cmp","","",473,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"n":"ordering"}}],[11,"cmp","","",474,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",474,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",474,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"bool"}}],[11,"le","","",474,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"bool"}}],[11,"gt","","",474,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"bool"}}],[11,"ge","","",474,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",473,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",473,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"n":"bool"}}],[11,"le","","",473,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"n":"bool"}}],[11,"gt","","",473,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"n":"bool"}}],[11,"ge","","",473,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"n":"bool"}}],[11,"new_x11","","",475,{"o":{"g":["eventsloop","xnotsupported"],"n":"result"}}],[11,"new_wayland","","",475,{"o":{"n":"eventsloop"}}],[11,"is_wayland","","",475,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_x11","","",475,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_xlib_xconnection","","",475,{"i":[{"n":"self"}],"o":{"g":["arc"],"n":"option"}}],[11,"from","","",32,{"i":[{"n":"ximodifierstate"}],"o":{"n":"modifiersstate"}}],[11,"from","glium::glutin::os::unix","",4,{"i":[{"n":"openerror"}],"o":{"n":"xnotsupported"}}],[11,"next","glium::glutin","",476,{"i":[{"n":"self"}],"o":{"g":["monitorid"],"n":"option"}}],[11,"size_hint","","",476,null],[11,"fmt","","",477,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","glium::glutin::os::unix","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"default","glium::glutin","",32,{"o":{"n":"modifiersstate"}}],[11,"default","","",22,{"o":{"n":"windowattributes"}}],[11,"fmt","","",477,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","glium::glutin::os::unix","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","glium::glutin","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",474,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",473,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",23,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","","",477,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","glium::glutin::os::unix","",4,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",4,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"eq","glium::glutin","",24,{"i":[{"n":"self"},{"n":"elementstate"}],"o":{"n":"bool"}}],[11,"eq","","",34,{"i":[{"n":"self"},{"n":"cursorstate"}],"o":{"n":"bool"}}],[11,"eq","","",474,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"bool"}}],[11,"ne","","",474,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"bool"}}],[11,"eq","","",26,{"i":[{"n":"self"},{"n":"mousescrolldelta"}],"o":{"n":"bool"}}],[11,"ne","","",26,{"i":[{"n":"self"},{"n":"mousescrolldelta"}],"o":{"n":"bool"}}],[11,"eq","","",35,{"i":[{"n":"self"},{"n":"mousecursor"}],"o":{"n":"bool"}}],[11,"eq","","",473,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"n":"bool"}}],[11,"ne","","",473,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"n":"bool"}}],[11,"eq","","",477,{"i":[{"n":"self"},{"n":"eventsloopclosed"}],"o":{"n":"bool"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"virtualkeycode"}],"o":{"n":"bool"}}],[11,"eq","","",33,{"i":[{"n":"self"},{"n":"touchphase"}],"o":{"n":"bool"}}],[11,"eq","","",32,{"i":[{"n":"self"},{"n":"modifiersstate"}],"o":{"n":"bool"}}],[11,"ne","","",32,{"i":[{"n":"self"},{"n":"modifiersstate"}],"o":{"n":"bool"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"mousebutton"}],"o":{"n":"bool"}}],[11,"ne","","",20,{"i":[{"n":"self"},{"n":"mousebutton"}],"o":{"n":"bool"}}],[11,"eq","","",28,{"i":[{"n":"self"},{"n":"controlflow"}],"o":{"n":"bool"}}],[11,"native_id","","",478,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"with_x11_visual","","",36,null],[11,"with_x11_screen","","",36,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"windowbuilder"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"mousebutton"}}],[11,"clone","","",473,{"i":[{"n":"self"}],"o":{"n":"windowid"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"keyboardinput"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"cursorstate"}}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"touchphase"}}],[11,"clone","","",478,{"i":[{"n":"self"}],"o":{"n":"monitorid"}}],[11,"clone","","",479,{"i":[{"n":"self"}],"o":{"n":"eventsloopproxy"}}],[11,"clone","","",474,{"i":[{"n":"self"}],"o":{"n":"deviceid"}}],[11,"clone","glium::glutin::os::unix","",4,{"i":[{"n":"self"}],"o":{"n":"xnotsupported"}}],[11,"clone","glium::glutin","",24,{"i":[{"n":"self"}],"o":{"n":"elementstate"}}],[11,"clone","","",477,{"i":[{"n":"self"}],"o":{"n":"eventsloopclosed"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"event"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"mousescrolldelta"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"windowbuilder"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"mousecursor"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"windowevent"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"windowattributes"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"creationerror"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"touch"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"deviceevent"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"controlflow"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"modifiersstate"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"virtualkeycode"}}],[11,"hash","","",24,null],[11,"hash","","",474,null],[11,"hash","","",33,null],[11,"hash","","",477,null],[11,"hash","","",32,null],[11,"hash","","",473,null],[11,"hash","","",27,null],[11,"hash","","",20,null],[11,"get_xlib_window","","",469,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"get_xlib_display","","",469,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_xlib_screen_id","","",469,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[11,"get_xlib_xconnection","","",469,{"i":[{"n":"self"}],"o":{"g":["arc"],"n":"option"}}],[11,"get_xcb_connection","","",469,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"send_xim_spot","","",469,null],[11,"get_wayland_surface","","",469,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_wayland_display","","",469,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"is_ready","","",469,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"new","","Initializes a new `ContextBuilder` with default values.",8,{"o":{"n":"contextbuilder"}}],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",8,{"i":[{"n":"self"},{"n":"glrequest"}],"o":{"n":"contextbuilder"}}],[11,"with_gl_profile","","Sets the desired OpenGL context profile.",8,{"i":[{"n":"self"},{"n":"glprofile"}],"o":{"n":"contextbuilder"}}],[11,"with_gl_debug_flag","","Sets the debug flag for the OpenGL context.",8,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"contextbuilder"}}],[11,"with_gl_robustness","","Sets the robustness of the OpenGL context. See the docs of `Robustness`.",8,{"i":[{"n":"self"},{"n":"robustness"}],"o":{"n":"contextbuilder"}}],[11,"with_vsync","","Requests that the window has vsync enabled.",8,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"contextbuilder"}}],[11,"with_shared_lists","","Share the display lists with the given `Context`.",8,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"contextbuilder"}}],[11,"with_multisampling","","Sets the multisampling level to request. A value of `0` indicates that multisampling must not be enabled.",8,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"contextbuilder"}}],[11,"with_depth_buffer","","Sets the number of bits in the depth buffer.",8,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"contextbuilder"}}],[11,"with_stencil_buffer","","Sets the number of bits in the stencil buffer.",8,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"contextbuilder"}}],[11,"with_pixel_format","","Sets the number of bits in the color buffer.",8,{"i":[{"n":"self"},{"n":"u8"},{"n":"u8"}],"o":{"n":"contextbuilder"}}],[11,"with_stereoscopy","","Request the backend to be stereoscopic.",8,{"i":[{"n":"self"}],"o":{"n":"contextbuilder"}}],[11,"with_srgb","","Sets whether sRGB should be enabled on the window.",8,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"contextbuilder"}}],[11,"new","","Builds the given window along with the associated GL context, returning the pair as a `GlWindow`.",470,{"i":[{"n":"windowbuilder"},{"n":"contextbuilder"},{"n":"eventsloop"}],"o":{"g":["glwindow","creationerror"],"n":"result"}}],[11,"window","","Borrow the inner `Window`.",470,{"i":[{"n":"self"}],"o":{"n":"window"}}],[11,"context","","Borrow the inner GL `Context`.",470,{"i":[{"n":"self"}],"o":{"n":"context"}}],[11,"to_gl_version","","Extract the desktop GL version, if any.",13,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"map_sharing","","Turns the `sharing` parameter into another type by calling a closure.",18,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"glattributes"}}],[11,"get_name","","Returns a human-readable name of the monitor.",478,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}],[11,"get_dimensions","","Returns the number of pixels currently displayed on the monitor.",478,null],[11,"get_position","","Returns the top-left corner position of the monitor relative to the larger full screen area.",478,null],[11,"get_hidpi_factor","","Returns the ratio between the monitor's physical pixels and logical pixels.",478,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"wakeup","","Wake up the `EventsLoop` from which this proxy was created.",479,{"i":[{"n":"self"}],"o":{"g":["eventsloopclosed"],"n":"result"}}],[11,"new","","Initializes a new `HeadlessRendererBuilder` with default values.",31,{"i":[{"n":"u32"},{"n":"u32"}],"o":{"n":"headlessrendererbuilder"}}],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",31,{"i":[{"n":"self"},{"n":"glrequest"}],"o":{"n":"headlessrendererbuilder"}}],[11,"with_gl_profile","","Sets the desired OpenGL context profile.",31,{"i":[{"n":"self"},{"n":"glprofile"}],"o":{"n":"headlessrendererbuilder"}}],[11,"with_gl_debug_flag","","Sets the debug flag for the OpenGL context.",31,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"headlessrendererbuilder"}}],[11,"with_gl_robustness","","Sets the robustness of the OpenGL context. See the docs of `Robustness`.",31,{"i":[{"n":"self"},{"n":"robustness"}],"o":{"n":"headlessrendererbuilder"}}],[11,"build","","Builds the headless context.",31,{"i":[{"n":"self"}],"o":{"g":["headlesscontext","creationerror"],"n":"result"}}],[11,"build_strict","","Builds the headless context.",31,{"i":[{"n":"self"}],"o":{"g":["headlesscontext","creationerror"],"n":"result"}}],[11,"new","","Builds a new events loop.",475,{"o":{"n":"eventsloop"}}],[11,"get_available_monitors","","Returns the list of all the monitors available on the system.",475,{"i":[{"n":"self"}],"o":{"n":"availablemonitorsiter"}}],[11,"get_primary_monitor","","Returns the primary monitor of the system.",475,{"i":[{"n":"self"}],"o":{"n":"monitorid"}}],[11,"poll_events","","Fetches all the events that are pending, calls the callback function for each of them, and returns.",475,null],[11,"run_forever","","Calls `callback` every time an event is received. If no event is available, sleeps the current thread and waits for an event. If the callback returns `ControlFlow::Break` then `run_forever` will immediately return.",475,null],[11,"create_proxy","","Creates an `EventsLoopProxy` that can be used to wake up the `EventsLoop` from another thread.",475,{"i":[{"n":"self"}],"o":{"n":"eventsloopproxy"}}],[11,"new","","Initializes a new `WindowBuilder` with default values.",36,{"o":{"n":"windowbuilder"}}],[11,"with_dimensions","","Requests the window to be of specific dimensions.",36,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"n":"windowbuilder"}}],[11,"with_min_dimensions","","Sets a minimum dimension size for the window",36,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"n":"windowbuilder"}}],[11,"with_max_dimensions","","Sets a maximum dimension size for the window",36,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"n":"windowbuilder"}}],[11,"with_title","","Requests a specific title for the window.",36,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"windowbuilder"}}],[11,"with_fullscreen","","Sets the window fullscreen state. None means a normal window, Some(MonitorId) means a fullscreen window on that specific monitor",36,{"i":[{"n":"self"},{"g":["monitorid"],"n":"option"}],"o":{"n":"windowbuilder"}}],[11,"with_maximized","","Requests maximized mode.",36,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"windowbuilder"}}],[11,"with_visibility","","Sets whether the window will be initially hidden or visible.",36,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"windowbuilder"}}],[11,"with_transparency","","Sets whether the background of the window should be transparent.",36,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"windowbuilder"}}],[11,"with_decorations","","Sets whether the window should have a border, a title bar, etc.",36,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"windowbuilder"}}],[11,"with_multitouch","","Enables multitouch.",36,{"i":[{"n":"self"}],"o":{"n":"windowbuilder"}}],[11,"build","","Builds the window.",36,{"i":[{"n":"self"},{"n":"eventsloop"}],"o":{"g":["window","creationerror"],"n":"result"}}]],"paths":[[4,"RawHandle"],[8,"EventsLoopExt"],[8,"WindowBuilderExt"],[8,"MonitorIdExt"],[4,"XNotSupported"],[8,"WindowExt"],[8,"GlContextExt"],[8,"GlContext"],[3,"ContextBuilder"],[4,"CreationError"],[4,"ContextError"],[4,"Api"],[4,"GlProfile"],[4,"GlRequest"],[4,"Robustness"],[4,"ReleaseBehavior"],[3,"PixelFormat"],[3,"PixelFormatRequirements"],[3,"GlAttributes"],[4,"Event"],[4,"MouseButton"],[3,"KeyboardInput"],[3,"WindowAttributes"],[4,"WindowCreationError"],[4,"ElementState"],[3,"Touch"],[4,"MouseScrollDelta"],[4,"VirtualKeyCode"],[4,"ControlFlow"],[4,"DeviceEvent"],[4,"WindowEvent"],[3,"HeadlessRendererBuilder"],[3,"ModifiersState"],[4,"TouchPhase"],[4,"CursorState"],[4,"MouseCursor"],[3,"WindowBuilder"],[3,"Blend"],[3,"Depth"],[3,"Version"],[3,"Rect"],[3,"BlitTarget"],[3,"IncompatibleOpenGl"],[4,"Profile"],[4,"BlendingFunction"],[4,"LinearBlendingFactor"],[4,"DepthTest"],[4,"StencilTest"],[4,"StencilOperation"],[4,"Api"],[4,"Handle"],[4,"RawUniformValue"],[4,"DrawError"],[4,"SwapBuffersError"],[4,"ReleaseBehavior"],[4,"DisplayCreationError"],[3,"Headless"],[3,"GlutinBackend"],[3,"Display"],[3,"GlutinBackend"],[8,"Backend"],[8,"Facade"],[4,"ReadError"],[4,"CopyError"],[4,"BufferCreationError"],[4,"BufferMode"],[4,"BufferType"],[3,"Mapping"],[3,"ReadMapping"],[3,"WriteMapping"],[3,"Inserter"],[3,"Buffer"],[3,"BufferSlice"],[3,"BufferMutSlice"],[3,"BufferAny"],[3,"BufferAnySlice"],[8,"Content"],[4,"DebugCallbackBehavior"],[4,"Severity"],[4,"Source"],[4,"MessageType"],[3,"TimestampQuery"],[3,"Stencil"],[3,"DrawParameters"],[3,"ConditionalRendering"],[4,"DepthClamp"],[4,"QueryCreationError"],[4,"BackfaceCullingMode"],[4,"PolygonMode"],[4,"Smooth"],[4,"ProvokingVertex"],[4,"SamplesQueryParam"],[3,"SamplesPassedQuery"],[3,"TimeElapsedQuery"],[3,"AnySamplesPassedQuery"],[3,"PrimitivesGeneratedQuery"],[3,"TransformFeedbackPrimitivesWrittenQuery"],[4,"DefaultFramebufferAttachment"],[4,"RenderBufferCreationError"],[4,"ValidationError"],[4,"ColorAttachment"],[4,"DepthAttachment"],[4,"StencilAttachment"],[4,"DepthStencilAttachment"],[3,"DefaultFramebuffer"],[3,"RenderBuffer"],[3,"DepthRenderBuffer"],[3,"StencilRenderBuffer"],[3,"DepthStencilRenderBuffer"],[3,"RenderBufferAny"],[8,"ToColorAttachment"],[8,"ToDepthAttachment"],[8,"ToStencilAttachment"],[8,"ToDepthStencilAttachment"],[3,"SimpleFrameBuffer"],[3,"MultiOutputFrameBuffer"],[3,"EmptyFrameBuffer"],[3,"DrawCommandNoIndices"],[3,"DrawCommandIndices"],[3,"NoIndices"],[4,"BufferCreationError"],[4,"IndicesSource"],[4,"PrimitiveType"],[4,"IndexType"],[3,"IndexBuffer"],[3,"IndexBufferSlice"],[3,"IndexBufferAny"],[3,"DrawCommandsNoIndicesBuffer"],[3,"DrawCommandsIndicesBuffer"],[8,"Index"],[3,"ComputeCommand"],[3,"Uniform"],[3,"UniformBlock"],[3,"Attribute"],[3,"TransformFeedbackVarying"],[3,"TransformFeedbackBuffer"],[3,"SubroutineData"],[3,"SubroutineUniform"],[3,"SourceCode"],[3,"Binary"],[4,"BlockLayout"],[4,"OutputPrimitives"],[4,"TransformFeedbackMode"],[4,"ShaderStage"],[4,"ProgramCreationError"],[4,"ProgramChooserCreationError"],[4,"GetBinaryError"],[4,"ProgramCreationInput"],[3,"ComputeShader"],[3,"Program"],[3,"Sampler"],[3,"SamplerBehavior"],[4,"SamplerWrapFunction"],[4,"MagnifySamplerFilter"],[4,"MinifySamplerFilter"],[4,"UniformValue"],[4,"UniformType"],[4,"LayoutMismatchError"],[3,"UniformBuffer"],[3,"EmptyUniforms"],[3,"UniformsStorage"],[8,"Uniforms"],[8,"AsUniformValue"],[8,"UniformBlock"],[3,"EmptyVertexAttributes"],[3,"EmptyInstanceAttributes"],[4,"BufferCreationError"],[4,"AttributeType"],[4,"VerticesSource"],[3,"VertexBuffer"],[3,"VertexBufferSlice"],[3,"VertexBufferAny"],[3,"TransformFeedbackSession"],[8,"MultiVerticesSource"],[8,"Vertex"],[8,"Attribute"],[3,"PerInstance"],[3,"RawImage1d"],[3,"RawImage2d"],[3,"RawImage3d"],[4,"ClientFormat"],[4,"TextureFormat"],[4,"UncompressedFloatFormat"],[4,"UncompressedIntFormat"],[4,"UncompressedUintFormat"],[4,"CompressedFormat"],[4,"DepthFormat"],[4,"DepthStencilFormat"],[4,"StencilFormat"],[4,"CompressedSrgbFormat"],[4,"SrgbFormat"],[4,"Dimensions"],[4,"InternalFormat"],[4,"InternalFormatType"],[4,"GetFormatError"],[4,"CubeLayer"],[4,"TextureKind"],[4,"MipmapsOption"],[4,"CompressedMipmapsOption"],[4,"TextureCreationError"],[3,"ResidentTexture"],[3,"TextureHandle"],[3,"BindlessTexturesNotSupportedError"],[4,"TextureCreationError"],[4,"CreationError"],[4,"BufferTextureType"],[4,"TextureBufferContentType"],[8,"TextureBufferContent"],[3,"BufferTexture"],[3,"BufferTextureRef"],[3,"PixelBuffer"],[3,"TextureAny"],[3,"TextureAnyLayer"],[3,"TextureAnyMipmap"],[3,"TextureAnyLayerMipmap"],[3,"TextureAnyImage"],[3,"Texture1d"],[3,"Texture1dMipmap"],[3,"CompressedTexture1d"],[3,"CompressedTexture1dMipmap"],[3,"SrgbTexture1d"],[3,"SrgbTexture1dMipmap"],[3,"CompressedSrgbTexture1d"],[3,"CompressedSrgbTexture1dMipmap"],[3,"IntegralTexture1d"],[3,"IntegralTexture1dMipmap"],[3,"UnsignedTexture1d"],[3,"UnsignedTexture1dMipmap"],[3,"DepthTexture1d"],[3,"DepthTexture1dMipmap"],[3,"StencilTexture1d"],[3,"StencilTexture1dMipmap"],[3,"DepthStencilTexture1d"],[3,"DepthStencilTexture1dMipmap"],[3,"Texture2d"],[3,"Texture2dMipmap"],[3,"CompressedTexture2d"],[3,"CompressedTexture2dMipmap"],[3,"SrgbTexture2d"],[3,"SrgbTexture2dMipmap"],[3,"CompressedSrgbTexture2d"],[3,"CompressedSrgbTexture2dMipmap"],[3,"IntegralTexture2d"],[3,"IntegralTexture2dMipmap"],[3,"UnsignedTexture2d"],[3,"UnsignedTexture2dMipmap"],[3,"DepthTexture2d"],[3,"DepthTexture2dMipmap"],[3,"StencilTexture2d"],[3,"StencilTexture2dMipmap"],[3,"DepthStencilTexture2d"],[3,"DepthStencilTexture2dMipmap"],[3,"Texture2dMultisample"],[3,"Texture2dMultisampleMipmap"],[3,"IntegralTexture2dMultisample"],[3,"IntegralTexture2dMultisampleMipmap"],[3,"SrgbTexture2dMultisample"],[3,"SrgbTexture2dMultisampleMipmap"],[3,"UnsignedTexture2dMultisample"],[3,"UnsignedTexture2dMultisampleMipmap"],[3,"DepthTexture2dMultisample"],[3,"DepthTexture2dMultisampleMipmap"],[3,"StencilTexture2dMultisample"],[3,"StencilTexture2dMultisampleMipmap"],[3,"DepthStencilTexture2dMultisample"],[3,"DepthStencilTexture2dMultisampleMipmap"],[3,"Texture3d"],[3,"Texture3dMipmap"],[3,"CompressedTexture3d"],[3,"CompressedTexture3dMipmap"],[3,"SrgbTexture3d"],[3,"SrgbTexture3dMipmap"],[3,"CompressedSrgbTexture3d"],[3,"CompressedSrgbTexture3dMipmap"],[3,"IntegralTexture3d"],[3,"IntegralTexture3dMipmap"],[3,"UnsignedTexture3d"],[3,"UnsignedTexture3dMipmap"],[3,"DepthTexture3d"],[3,"DepthTexture3dMipmap"],[3,"DepthStencilTexture3d"],[3,"DepthStencilTexture3dMipmap"],[3,"Texture1dArray"],[3,"Texture1dArrayLayer"],[3,"Texture1dArrayMipmap"],[3,"Texture1dArrayLayerMipmap"],[3,"CompressedTexture1dArray"],[3,"CompressedTexture1dArrayLayer"],[3,"CompressedTexture1dArrayMipmap"],[3,"CompressedTexture1dArrayLayerMipmap"],[3,"SrgbTexture1dArray"],[3,"SrgbTexture1dArrayLayer"],[3,"SrgbTexture1dArrayMipmap"],[3,"SrgbTexture1dArrayLayerMipmap"],[3,"CompressedSrgbTexture1dArray"],[3,"CompressedSrgbTexture1dArrayLayer"],[3,"CompressedSrgbTexture1dArrayMipmap"],[3,"CompressedSrgbTexture1dArrayLayerMipmap"],[3,"IntegralTexture1dArray"],[3,"IntegralTexture1dArrayLayer"],[3,"IntegralTexture1dArrayMipmap"],[3,"IntegralTexture1dArrayLayerMipmap"],[3,"UnsignedTexture1dArray"],[3,"UnsignedTexture1dArrayLayer"],[3,"UnsignedTexture1dArrayMipmap"],[3,"UnsignedTexture1dArrayLayerMipmap"],[3,"DepthTexture1dArray"],[3,"DepthTexture1dArrayLayer"],[3,"DepthTexture1dArrayMipmap"],[3,"DepthTexture1dArrayLayerMipmap"],[3,"StencilTexture1dArray"],[3,"StencilTexture1dArrayLayer"],[3,"StencilTexture1dArrayMipmap"],[3,"StencilTexture1dArrayLayerMipmap"],[3,"DepthStencilTexture1dArray"],[3,"DepthStencilTexture1dArrayLayer"],[3,"DepthStencilTexture1dArrayMipmap"],[3,"DepthStencilTexture1dArrayLayerMipmap"],[3,"Texture2dArray"],[3,"Texture2dArrayLayer"],[3,"Texture2dArrayMipmap"],[3,"Texture2dArrayLayerMipmap"],[3,"CompressedTexture2dArray"],[3,"CompressedTexture2dArrayLayer"],[3,"CompressedTexture2dArrayMipmap"],[3,"CompressedTexture2dArrayLayerMipmap"],[3,"SrgbTexture2dArray"],[3,"SrgbTexture2dArrayLayer"],[3,"SrgbTexture2dArrayMipmap"],[3,"SrgbTexture2dArrayLayerMipmap"],[3,"CompressedSrgbTexture2dArray"],[3,"CompressedSrgbTexture2dArrayLayer"],[3,"CompressedSrgbTexture2dArrayMipmap"],[3,"CompressedSrgbTexture2dArrayLayerMipmap"],[3,"IntegralTexture2dArray"],[3,"IntegralTexture2dArrayLayer"],[3,"IntegralTexture2dArrayMipmap"],[3,"IntegralTexture2dArrayLayerMipmap"],[3,"UnsignedTexture2dArray"],[3,"UnsignedTexture2dArrayLayer"],[3,"UnsignedTexture2dArrayMipmap"],[3,"UnsignedTexture2dArrayLayerMipmap"],[3,"DepthTexture2dArray"],[3,"DepthTexture2dArrayLayer"],[3,"DepthTexture2dArrayMipmap"],[3,"DepthTexture2dArrayLayerMipmap"],[3,"StencilTexture2dArray"],[3,"StencilTexture2dArrayLayer"],[3,"StencilTexture2dArrayMipmap"],[3,"StencilTexture2dArrayLayerMipmap"],[3,"DepthStencilTexture2dArray"],[3,"DepthStencilTexture2dArrayLayer"],[3,"DepthStencilTexture2dArrayMipmap"],[3,"DepthStencilTexture2dArrayLayerMipmap"],[3,"Texture2dMultisampleArray"],[3,"Texture2dMultisampleArrayLayer"],[3,"Texture2dMultisampleArrayMipmap"],[3,"Texture2dMultisampleArrayLayerMipmap"],[3,"SrgbTexture2dMultisampleArray"],[3,"SrgbTexture2dMultisampleArrayLayer"],[3,"SrgbTexture2dMultisampleArrayMipmap"],[3,"SrgbTexture2dMultisampleArrayLayerMipmap"],[3,"IntegralTexture2dMultisampleArray"],[3,"IntegralTexture2dMultisampleArrayLayer"],[3,"IntegralTexture2dMultisampleArrayMipmap"],[3,"IntegralTexture2dMultisampleArrayLayerMipmap"],[3,"UnsignedTexture2dMultisampleArray"],[3,"UnsignedTexture2dMultisampleArrayLayer"],[3,"UnsignedTexture2dMultisampleArrayMipmap"],[3,"UnsignedTexture2dMultisampleArrayLayerMipmap"],[3,"DepthTexture2dMultisampleArray"],[3,"DepthTexture2dMultisampleArrayLayer"],[3,"DepthTexture2dMultisampleArrayMipmap"],[3,"DepthTexture2dMultisampleArrayLayerMipmap"],[3,"StencilTexture2dMultisampleArray"],[3,"StencilTexture2dMultisampleArrayLayer"],[3,"StencilTexture2dMultisampleArrayMipmap"],[3,"StencilTexture2dMultisampleArrayLayerMipmap"],[3,"DepthStencilTexture2dMultisampleArray"],[3,"DepthStencilTexture2dMultisampleArrayLayer"],[3,"DepthStencilTexture2dMultisampleArrayMipmap"],[3,"DepthStencilTexture2dMultisampleArrayLayerMipmap"],[3,"Cubemap"],[3,"CubemapMipmap"],[3,"CubemapImage"],[3,"CompressedCubemap"],[3,"CompressedCubemapMipmap"],[3,"CompressedCubemapImage"],[3,"SrgbCubemap"],[3,"SrgbCubemapMipmap"],[3,"SrgbCubemapImage"],[3,"CompressedSrgbCubemap"],[3,"CompressedSrgbCubemapMipmap"],[3,"CompressedSrgbCubemapImage"],[3,"IntegralCubemap"],[3,"IntegralCubemapMipmap"],[3,"IntegralCubemapImage"],[3,"UnsignedCubemap"],[3,"UnsignedCubemapMipmap"],[3,"UnsignedCubemapImage"],[3,"DepthCubemap"],[3,"DepthCubemapMipmap"],[3,"DepthCubemapImage"],[3,"StencilCubemap"],[3,"StencilCubemapMipmap"],[3,"StencilCubemapImage"],[3,"DepthStencilCubemap"],[3,"DepthStencilCubemapMipmap"],[3,"DepthStencilCubemapImage"],[3,"CubemapArray"],[3,"CubemapArrayLayer"],[3,"CubemapArrayMipmap"],[3,"CubemapArrayLayerMipmap"],[3,"CubemapArrayImage"],[3,"CompressedCubemapArray"],[3,"CompressedCubemapArrayLayer"],[3,"CompressedCubemapArrayMipmap"],[3,"CompressedCubemapArrayLayerMipmap"],[3,"CompressedCubemapArrayImage"],[3,"SrgbCubemapArray"],[3,"SrgbCubemapArrayLayer"],[3,"SrgbCubemapArrayMipmap"],[3,"SrgbCubemapArrayLayerMipmap"],[3,"SrgbCubemapArrayImage"],[3,"CompressedSrgbCubemapArray"],[3,"CompressedSrgbCubemapArrayLayer"],[3,"CompressedSrgbCubemapArrayMipmap"],[3,"CompressedSrgbCubemapArrayLayerMipmap"],[3,"CompressedSrgbCubemapArrayImage"],[3,"IntegralCubemapArray"],[3,"IntegralCubemapArrayLayer"],[3,"IntegralCubemapArrayMipmap"],[3,"IntegralCubemapArrayLayerMipmap"],[3,"IntegralCubemapArrayImage"],[3,"UnsignedCubemapArray"],[3,"UnsignedCubemapArrayLayer"],[3,"UnsignedCubemapArrayMipmap"],[3,"UnsignedCubemapArrayLayerMipmap"],[3,"UnsignedCubemapArrayImage"],[3,"DepthCubemapArray"],[3,"DepthCubemapArrayLayer"],[3,"DepthCubemapArrayMipmap"],[3,"DepthCubemapArrayLayerMipmap"],[3,"DepthCubemapArrayImage"],[3,"StencilCubemapArray"],[3,"StencilCubemapArrayLayer"],[3,"StencilCubemapArrayMipmap"],[3,"StencilCubemapArrayLayerMipmap"],[3,"StencilCubemapArrayImage"],[3,"DepthStencilCubemapArray"],[3,"DepthStencilCubemapArrayLayer"],[3,"DepthStencilCubemapArrayMipmap"],[3,"DepthStencilCubemapArrayLayerMipmap"],[3,"DepthStencilCubemapArrayImage"],[8,"PixelValue"],[8,"Texture1dDataSource"],[8,"Texture1dDataSink"],[8,"Texture2dDataSource"],[8,"Texture2dDataSink"],[8,"ToClientFormat"],[8,"Texture3dDataSource"],[8,"Texture3dDataSink"],[3,"Context"],[3,"SyncFence"],[3,"LinearSyncFence"],[8,"CapabilitiesSource"],[8,"GlObject"],[8,"Surface"],[3,"Frame"],[3,"Window"],[3,"GlWindow"],[3,"Context"],[3,"HeadlessContext"],[3,"WindowId"],[3,"DeviceId"],[3,"EventsLoop"],[3,"AvailableMonitorsIter"],[3,"EventsLoopClosed"],[3,"MonitorId"],[3,"EventsLoopProxy"]]};
searchIndex["glutin"] = {"doc":"The purpose of this library is to provide an OpenGL context on as many platforms as possible.","items":[[3,"AvailableMonitorsIter","glutin","An iterator for the list of available monitors.",null,null],[6,"AxisId","","Identifier for a specific analog axis on some device.",null,null],[6,"ButtonId","","Identifier for a specific button on some device.",null,null],[4,"ControlFlow","","Returned by the user callback given to the `EventsLoop::run_forever` method.",null,null],[13,"Continue","","Continue looping and waiting for events.",0,null],[13,"Break","","Break from the event loop.",0,null],[4,"WindowCreationError","","Error that can happen while creating a window or a headless renderer.",null,null],[13,"OsError","","",1,null],[13,"NotSupported","","TODO: remove this error",1,null],[4,"CursorState","","Describes how winit handles the cursor.",null,null],[13,"Normal","","Normal cursor behavior.",2,null],[13,"Hide","","The cursor will be invisible when over the window.",2,null],[13,"Grab","","Grabs the mouse cursor. The cursor's motion will be confined to this window and the window has exclusive access to further events regarding the cursor.",2,null],[4,"DeviceEvent","","Represents raw hardware events that are not associated with any particular window.",null,null],[13,"Added","","",3,null],[13,"Removed","","",3,null],[13,"MouseMotion","","Change in physical position of a pointing device.",3,null],[12,"delta","glutin::DeviceEvent","(x, y) change in position in unspecified units.",3,null],[13,"MouseWheel","glutin","Physical scroll event",3,null],[12,"delta","glutin::DeviceEvent","",3,null],[13,"Motion","glutin","Motion on some analog axis.  This event will be reported for all arbitrary input devices that winit supports on this platform, including mouse devices.  If the device is a mouse device then this will be reported alongside the MouseMotion event.",3,null],[12,"axis","glutin::DeviceEvent","",3,null],[12,"value","","",3,null],[13,"Button","glutin","",3,null],[12,"button","glutin::DeviceEvent","",3,null],[12,"state","","",3,null],[13,"Key","glutin","",3,null],[13,"Text","","",3,null],[12,"codepoint","glutin::DeviceEvent","",3,null],[3,"DeviceId","glutin","Identifier of an input device.",null,null],[4,"ElementState","","Describes the input state of a key.",null,null],[13,"Pressed","","",4,null],[13,"Released","","",4,null],[4,"Event","","Describes a generic event.",null,null],[13,"WindowEvent","","",5,null],[12,"window_id","glutin::Event","",5,null],[12,"event","","",5,null],[13,"DeviceEvent","glutin","",5,null],[12,"device_id","glutin::Event","",5,null],[12,"event","","",5,null],[13,"Awakened","glutin","",5,null],[13,"Suspended","","The application has been suspended or resumed.",5,null],[3,"EventsLoop","","Provides a way to retreive events from the system and from the windows that were registered to the events loop.",null,null],[3,"EventsLoopClosed","","The error that is returned when an `EventsLoopProxy` attempts to wake up an `EventsLoop` that no longer exists.",null,null],[3,"EventsLoopProxy","","Used to wake up the `EventsLoop` from another thread.",null,null],[3,"KeyboardInput","","Describes a keyboard input event.",null,null],[12,"scancode","","Identifies the physical key pressed",6,null],[12,"state","","",6,null],[12,"virtual_keycode","","Identifies the semantic meaning of the key",6,null],[12,"modifiers","","Modifier keys active at the time of this input.",6,null],[3,"ModifiersState","","Represents the current state of the keyboard modifiers",null,null],[12,"shift","","The \"shift\" key",7,null],[12,"ctrl","","The \"control\" key",7,null],[12,"alt","","The \"alt\" key",7,null],[12,"logo","","The \"logo\" key",7,null],[3,"MonitorId","","Identifier for a monitor.",null,null],[4,"MouseButton","","Describes a button of a mouse controller.",null,null],[13,"Left","","",8,null],[13,"Right","","",8,null],[13,"Middle","","",8,null],[13,"Other","","",8,null],[4,"MouseCursor","","Describes the appearance of the mouse cursor.",null,null],[13,"Default","","The platform-dependent default cursor.",9,null],[13,"Crosshair","","A simple crosshair.",9,null],[13,"Hand","","A hand (often used to indicate links in web browsers).",9,null],[13,"Arrow","","Self explanatory.",9,null],[13,"Move","","Indicates something is to be moved.",9,null],[13,"Text","","Indicates text that may be selected or edited.",9,null],[13,"Wait","","Program busy indicator.",9,null],[13,"Help","","Help indicator (often rendered as a \"?\")",9,null],[13,"Progress","","Progress indicator. Shows that processing is being done. But in contrast with \"Wait\" the user may still interact with the program. Often rendered as a spinning beach ball, or an arrow with a watch or hourglass.",9,null],[13,"NotAllowed","","Cursor showing that something cannot be done.",9,null],[13,"ContextMenu","","",9,null],[13,"NoneCursor","","",9,null],[13,"Cell","","",9,null],[13,"VerticalText","","",9,null],[13,"Alias","","",9,null],[13,"Copy","","",9,null],[13,"NoDrop","","",9,null],[13,"Grab","","",9,null],[13,"Grabbing","","",9,null],[13,"AllScroll","","",9,null],[13,"ZoomIn","","",9,null],[13,"ZoomOut","","",9,null],[13,"EResize","","Indicate that some edge is to be moved. For example, the 'SeResize' cursor is used when the movement starts from the south-east corner of the box.",9,null],[13,"NResize","","",9,null],[13,"NeResize","","",9,null],[13,"NwResize","","",9,null],[13,"SResize","","",9,null],[13,"SeResize","","",9,null],[13,"SwResize","","",9,null],[13,"WResize","","",9,null],[13,"EwResize","","",9,null],[13,"NsResize","","",9,null],[13,"NeswResize","","",9,null],[13,"NwseResize","","",9,null],[13,"ColResize","","",9,null],[13,"RowResize","","",9,null],[4,"MouseScrollDelta","","Describes a difference in the mouse scroll wheel state.",null,null],[13,"LineDelta","","Amount in lines or rows to scroll in the horizontal and vertical directions.",10,null],[13,"PixelDelta","","Amount in pixels to scroll in the horizontal and vertical direction.",10,null],[6,"ScanCode","","Hardware-dependent keyboard scan code.",null,null],[3,"Touch","","Represents touch event",null,null],[12,"device_id","","",11,null],[12,"phase","","",11,null],[12,"location","","",11,null],[12,"id","","unique identifier of a finger.",11,null],[4,"TouchPhase","","Describes touch-screen input state.",null,null],[13,"Started","","",12,null],[13,"Moved","","",12,null],[13,"Ended","","",12,null],[13,"Cancelled","","",12,null],[4,"VirtualKeyCode","","Symbolic name for a keyboard key.",null,null],[13,"Key1","","The '1' key over the letters.",13,null],[13,"Key2","","The '2' key over the letters.",13,null],[13,"Key3","","The '3' key over the letters.",13,null],[13,"Key4","","The '4' key over the letters.",13,null],[13,"Key5","","The '5' key over the letters.",13,null],[13,"Key6","","The '6' key over the letters.",13,null],[13,"Key7","","The '7' key over the letters.",13,null],[13,"Key8","","The '8' key over the letters.",13,null],[13,"Key9","","The '9' key over the letters.",13,null],[13,"Key0","","The '0' key over the 'O' and 'P' keys.",13,null],[13,"A","","",13,null],[13,"B","","",13,null],[13,"C","","",13,null],[13,"D","","",13,null],[13,"E","","",13,null],[13,"F","","",13,null],[13,"G","","",13,null],[13,"H","","",13,null],[13,"I","","",13,null],[13,"J","","",13,null],[13,"K","","",13,null],[13,"L","","",13,null],[13,"M","","",13,null],[13,"N","","",13,null],[13,"O","","",13,null],[13,"P","","",13,null],[13,"Q","","",13,null],[13,"R","","",13,null],[13,"S","","",13,null],[13,"T","","",13,null],[13,"U","","",13,null],[13,"V","","",13,null],[13,"W","","",13,null],[13,"X","","",13,null],[13,"Y","","",13,null],[13,"Z","","",13,null],[13,"Escape","","The Escape key, next to F1.",13,null],[13,"F1","","",13,null],[13,"F2","","",13,null],[13,"F3","","",13,null],[13,"F4","","",13,null],[13,"F5","","",13,null],[13,"F6","","",13,null],[13,"F7","","",13,null],[13,"F8","","",13,null],[13,"F9","","",13,null],[13,"F10","","",13,null],[13,"F11","","",13,null],[13,"F12","","",13,null],[13,"F13","","",13,null],[13,"F14","","",13,null],[13,"F15","","",13,null],[13,"Snapshot","","Print Screen/SysRq.",13,null],[13,"Scroll","","Scroll Lock.",13,null],[13,"Pause","","Pause/Break key, next to Scroll lock.",13,null],[13,"Insert","","`Insert`, next to Backspace.",13,null],[13,"Home","","",13,null],[13,"Delete","","",13,null],[13,"End","","",13,null],[13,"PageDown","","",13,null],[13,"PageUp","","",13,null],[13,"Left","","",13,null],[13,"Up","","",13,null],[13,"Right","","",13,null],[13,"Down","","",13,null],[13,"Back","","The Backspace key, right over Enter.",13,null],[13,"Return","","The Enter key.",13,null],[13,"Space","","The space bar.",13,null],[13,"Compose","","The \"Compose\" key on Linux.",13,null],[13,"Caret","","",13,null],[13,"Numlock","","",13,null],[13,"Numpad0","","",13,null],[13,"Numpad1","","",13,null],[13,"Numpad2","","",13,null],[13,"Numpad3","","",13,null],[13,"Numpad4","","",13,null],[13,"Numpad5","","",13,null],[13,"Numpad6","","",13,null],[13,"Numpad7","","",13,null],[13,"Numpad8","","",13,null],[13,"Numpad9","","",13,null],[13,"AbntC1","","",13,null],[13,"AbntC2","","",13,null],[13,"Add","","",13,null],[13,"Apostrophe","","",13,null],[13,"Apps","","",13,null],[13,"At","","",13,null],[13,"Ax","","",13,null],[13,"Backslash","","",13,null],[13,"Calculator","","",13,null],[13,"Capital","","",13,null],[13,"Colon","","",13,null],[13,"Comma","","",13,null],[13,"Convert","","",13,null],[13,"Decimal","","",13,null],[13,"Divide","","",13,null],[13,"Equals","","",13,null],[13,"Grave","","",13,null],[13,"Kana","","",13,null],[13,"Kanji","","",13,null],[13,"LAlt","","",13,null],[13,"LBracket","","",13,null],[13,"LControl","","",13,null],[13,"LMenu","","",13,null],[13,"LShift","","",13,null],[13,"LWin","","",13,null],[13,"Mail","","",13,null],[13,"MediaSelect","","",13,null],[13,"MediaStop","","",13,null],[13,"Minus","","",13,null],[13,"Multiply","","",13,null],[13,"Mute","","",13,null],[13,"MyComputer","","",13,null],[13,"NavigateForward","","",13,null],[13,"NavigateBackward","","",13,null],[13,"NextTrack","","",13,null],[13,"NoConvert","","",13,null],[13,"NumpadComma","","",13,null],[13,"NumpadEnter","","",13,null],[13,"NumpadEquals","","",13,null],[13,"OEM102","","",13,null],[13,"Period","","",13,null],[13,"PlayPause","","",13,null],[13,"Power","","",13,null],[13,"PrevTrack","","",13,null],[13,"RAlt","","",13,null],[13,"RBracket","","",13,null],[13,"RControl","","",13,null],[13,"RMenu","","",13,null],[13,"RShift","","",13,null],[13,"RWin","","",13,null],[13,"Semicolon","","",13,null],[13,"Slash","","",13,null],[13,"Sleep","","",13,null],[13,"Stop","","",13,null],[13,"Subtract","","",13,null],[13,"Sysrq","","",13,null],[13,"Tab","","",13,null],[13,"Underline","","",13,null],[13,"Unlabeled","","",13,null],[13,"VolumeDown","","",13,null],[13,"VolumeUp","","",13,null],[13,"Wake","","",13,null],[13,"WebBack","","",13,null],[13,"WebFavorites","","",13,null],[13,"WebForward","","",13,null],[13,"WebHome","","",13,null],[13,"WebRefresh","","",13,null],[13,"WebSearch","","",13,null],[13,"WebStop","","",13,null],[13,"Yen","","",13,null],[3,"Window","","Represents a window.",null,null],[3,"WindowAttributes","","Attributes to use when creating a window.",null,null],[12,"dimensions","","The dimensions of the window. If this is `None`, some platform-specific dimensions will be used.",14,null],[12,"min_dimensions","","The minimum dimensions a window can be, If this is `None`, the window will have no minimum dimensions (aside from reserved).",14,null],[12,"max_dimensions","","The maximum dimensions a window can be, If this is `None`, the maximum will have no maximum or will be set to the primary monitor's dimensions by the platform.",14,null],[12,"fullscreen","","Whether the window should be set as fullscreen upon creation.",14,null],[12,"title","","The title of the window in the title bar.",14,null],[12,"maximized","","Whether the window should be maximized upon creation.",14,null],[12,"visible","","Whether the window should be immediately visible upon creation.",14,null],[12,"transparent","","Whether the the window should be transparent. If this is true, writing colors with alpha values different than `1.0` will produce a transparent window.",14,null],[12,"decorations","","Whether the window should have borders and bars.",14,null],[12,"multitouch","","[iOS only] Enable multitouch, see multipleTouchEnabled",14,null],[3,"WindowBuilder","","Object that allows you to build windows.",null,null],[12,"window","","The attributes to use to create the window.",15,null],[4,"WindowEvent","","Describes an event from a `Window`.",null,null],[13,"Resized","","The size of the window has changed.",16,null],[13,"Moved","","The position of the window has changed.",16,null],[13,"Closed","","The window has been closed.",16,null],[13,"DroppedFile","","A file has been dropped into the window.",16,null],[13,"HoveredFile","","A file is being hovered over the window.",16,null],[13,"HoveredFileCancelled","","A file was hovered, but has exited the window.",16,null],[13,"ReceivedCharacter","","The window received a unicode character.",16,null],[13,"Focused","","The window gained or lost focus.",16,null],[13,"KeyboardInput","","An event from the keyboard has been received.",16,null],[12,"device_id","glutin::WindowEvent","",16,null],[12,"input","","",16,null],[13,"CursorMoved","glutin","The cursor has moved on the window.",16,null],[12,"device_id","glutin::WindowEvent","",16,null],[12,"position","","(x,y) coords in pixels relative to the top-left corner of the window. Because the range of this data is limited by the display area and it may have been transformed by the OS to implement effects such as cursor acceleration, it should not be used to implement non-cursor-like interactions such as 3D camera control.",16,null],[12,"modifiers","","",16,null],[13,"CursorEntered","glutin","The cursor has entered the window.",16,null],[12,"device_id","glutin::WindowEvent","",16,null],[13,"CursorLeft","glutin","The cursor has left the window.",16,null],[12,"device_id","glutin::WindowEvent","",16,null],[13,"MouseWheel","glutin","A mouse wheel movement or touchpad scroll occurred.",16,null],[12,"device_id","glutin::WindowEvent","",16,null],[12,"delta","","",16,null],[12,"phase","","",16,null],[12,"modifiers","","",16,null],[13,"MouseInput","glutin","An mouse button press has been received.",16,null],[12,"device_id","glutin::WindowEvent","",16,null],[12,"state","","",16,null],[12,"button","","",16,null],[12,"modifiers","","",16,null],[13,"TouchpadPressure","glutin","Touchpad pressure event.",16,null],[12,"device_id","glutin::WindowEvent","",16,null],[12,"pressure","","",16,null],[12,"stage","","",16,null],[13,"AxisMotion","glutin","Motion on some analog axis. May report data redundant to other, more specific events.",16,null],[12,"device_id","glutin::WindowEvent","",16,null],[12,"axis","","",16,null],[12,"value","","",16,null],[13,"Refresh","glutin","The window needs to be redrawn.",16,null],[13,"Touch","","Touch event has been received",16,null],[13,"HiDPIFactorChanged","","DPI scaling factor of the window has changed.",16,null],[3,"WindowId","","Identifier of a window. Unique for each window.",null,null],[3,"HeadlessRendererBuilder","","Object that allows you to build headless contexts.",null,null],[12,"dimensions","","The dimensions to use.",17,null],[12,"opengl","","The OpenGL attributes to build the context with.",17,null],[3,"HeadlessContext","","Represents a headless OpenGL context.",null,null],[3,"Context","","Represents an OpenGL context.",null,null],[3,"ContextBuilder","","Object that allows you to build `Context`s.",null,null],[12,"gl_attr","","The attributes to use to create the context.",18,null],[3,"GlWindow","","Represents an OpenGL context and a Window with which it is associated.",null,null],[3,"PixelFormat","","Describes a possible format. Unused.",null,null],[12,"hardware_accelerated","","",19,null],[12,"color_bits","","",19,null],[12,"alpha_bits","","",19,null],[12,"depth_bits","","",19,null],[12,"stencil_bits","","",19,null],[12,"stereoscopy","","",19,null],[12,"double_buffer","","",19,null],[12,"multisampling","","",19,null],[12,"srgb","","",19,null],[3,"PixelFormatRequirements","","Describes how the backend should choose a pixel format.",null,null],[12,"hardware_accelerated","","If true, only hardware-accelerated formats will be considered. If false, only software renderers. `None` means \"don't care\". Default is `Some(true)`.",20,null],[12,"color_bits","","Minimum number of bits for the color buffer, excluding alpha. `None` means \"don't care\". The default is `Some(24)`.",20,null],[12,"float_color_buffer","","If true, the color buffer must be in a floating point format. Default is `false`.",20,null],[12,"alpha_bits","","Minimum number of bits for the alpha in the color buffer. `None` means \"don't care\". The default is `Some(8)`.",20,null],[12,"depth_bits","","Minimum number of bits for the depth buffer. `None` means \"don't care\". The default value is `Some(24)`.",20,null],[12,"stencil_bits","","Minimum number of bits for the depth buffer. `None` means \"don't care\". The default value is `Some(8)`.",20,null],[12,"double_buffer","","If true, only double-buffered formats will be considered. If false, only single-buffer formats. `None` means \"don't care\". The default is `Some(true)`.",20,null],[12,"multisampling","","Contains the minimum number of samples per pixel in the color, depth and stencil buffers. `None` means \"don't care\". Default is `None`. A value of `Some(0)` indicates that multisampling must not be enabled.",20,null],[12,"stereoscopy","","If true, only stereoscopic formats will be considered. If false, only non-stereoscopic formats. The default is `false`.",20,null],[12,"srgb","","If true, only sRGB-capable formats will be considered. If false, don't care. The default is `false`.",20,null],[12,"release_behavior","","The behavior when changing the current context. Default is `Flush`.",20,null],[3,"GlAttributes","","Attributes to use when creating an OpenGL context.",null,null],[12,"sharing","","An existing context to share the new the context with.",21,null],[12,"version","","Version to try create. See `GlRequest` for more infos.",21,null],[12,"profile","","OpenGL profile to use.",21,null],[12,"debug","","Whether to enable the `debug` flag of the context.",21,null],[12,"robustness","","How the OpenGL context should detect errors.",21,null],[12,"vsync","","Whether to use vsync. If vsync is enabled, calling `swap_buffers` will block until the screen refreshes. This is typically used to prevent screen tearing.",21,null],[4,"CreationError","","Error that can happen while creating a window or a headless renderer.",null,null],[13,"OsError","","",22,null],[13,"NotSupported","","TODO: remove this error",22,null],[13,"NoBackendAvailable","","",22,null],[13,"RobustnessNotSupported","","",22,null],[13,"OpenGlVersionNotSupported","","",22,null],[13,"NoAvailablePixelFormat","","",22,null],[13,"PlatformSpecific","","",22,null],[13,"Window","","",22,null],[4,"ContextError","","Error that can happen when manipulating an OpenGL context.",null,null],[13,"IoError","","",23,null],[13,"ContextLost","","",23,null],[4,"Api","","All APIs related to OpenGL that you can possibly get while using glutin.",null,null],[13,"OpenGl","","The classical OpenGL. Available on Windows, Linux, OS/X.",24,null],[13,"OpenGlEs","","OpenGL embedded system. Available on Linux, Android.",24,null],[13,"WebGl","","OpenGL for the web. Very similar to OpenGL ES.",24,null],[4,"GlProfile","","Describes the requested OpenGL context profiles.",null,null],[13,"Compatibility","","Include all the immediate more functions and definitions.",25,null],[13,"Core","","Include all the future-compatible functions and definitions.",25,null],[4,"GlRequest","","Describes the OpenGL API and version that are being requested when a context is created.",null,null],[13,"Latest","","Request the latest version of the \"best\" API of this platform.",26,null],[13,"Specific","","Request a specific version of a specific API.",26,null],[13,"GlThenGles","","If OpenGL is available, create an OpenGL context with the specified `opengl_version`. Else if OpenGL ES or WebGL is available, create a context with the specified `opengles_version`.",26,null],[12,"opengl_version","glutin::GlRequest","The version to use for OpenGL.",26,null],[12,"opengles_version","","The version to use for OpenGL ES.",26,null],[4,"Robustness","glutin","Specifies the tolerance of the OpenGL context to faults. If you accept raw OpenGL commands and/or raw shader code from an untrusted source, you should definitely care about this.",null,null],[13,"NotRobust","","Not everything is checked. Your application can crash if you do something wrong with your shaders.",27,null],[13,"NoError","","The driver doesn't check anything. This option is very dangerous. Please know what you're doing before using it. See the `GL_KHR_no_error` extension.",27,null],[13,"RobustNoResetNotification","","Everything is checked to avoid any crash. The driver will attempt to avoid any problem, but if a problem occurs the behavior is implementation-defined. You are just guaranteed not to get a crash.",27,null],[13,"TryRobustNoResetNotification","","Same as `RobustNoResetNotification` but the context creation doesn't fail if it's not supported.",27,null],[13,"RobustLoseContextOnReset","","Everything is checked to avoid any crash. If a problem occurs, the context will enter a \"context lost\" state. It must then be recreated. For the moment, glutin doesn't provide a way to recreate a context with the same window :-/",27,null],[13,"TryRobustLoseContextOnReset","","Same as `RobustLoseContextOnReset` but the context creation doesn't fail if it's not supported.",27,null],[4,"ReleaseBehavior","","The behavior of the driver when you change the current context.",null,null],[13,"None","","Doesn't do anything. Most notably doesn't flush.",28,null],[13,"Flush","","Flushes the context that was previously current as if `glFlush` was called.",28,null],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"headlessrendererbuilder"}}],[11,"new","","Initializes a new `HeadlessRendererBuilder` with default values.",17,{"i":[{"n":"u32"},{"n":"u32"}],"o":{"n":"headlessrendererbuilder"}}],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",17,{"i":[{"n":"self"},{"n":"glrequest"}],"o":{"n":"headlessrendererbuilder"}}],[11,"with_gl_profile","","Sets the desired OpenGL context profile.",17,{"i":[{"n":"self"},{"n":"glprofile"}],"o":{"n":"headlessrendererbuilder"}}],[11,"with_gl_debug_flag","","Sets the debug flag for the OpenGL context.",17,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"headlessrendererbuilder"}}],[11,"with_gl_robustness","","Sets the robustness of the OpenGL context. See the docs of `Robustness`.",17,{"i":[{"n":"self"},{"n":"robustness"}],"o":{"n":"headlessrendererbuilder"}}],[11,"build","","Builds the headless context.",17,{"i":[{"n":"self"}],"o":{"g":["headlesscontext","creationerror"],"n":"result"}}],[11,"build_strict","","Builds the headless context.",17,{"i":[{"n":"self"}],"o":{"g":["headlesscontext","creationerror"],"n":"result"}}],[11,"make_current","","Creates a new OpenGL context Sets the context as the current context.",29,{"i":[{"n":"self"}],"o":{"g":["contexterror"],"n":"result"}}],[11,"is_current","","Returns true if this context is the current one in this thread.",29,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_proc_address","","Returns the address of an OpenGL function.",29,null],[11,"get_api","","Returns the API that is currently provided by this window.",29,{"i":[{"n":"self"}],"o":{"n":"api"}}],[11,"swap_buffers","","",29,{"i":[{"n":"self"}],"o":{"g":["contexterror"],"n":"result"}}],[11,"get_pixel_format","","",29,{"i":[{"n":"self"}],"o":{"n":"pixelformat"}}],[11,"resize","","",29,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}]}],[0,"os","","Contains traits with platform-specific methods in them.",null,null],[0,"unix","glutin::os","",null,null],[4,"XNotSupported","glutin::os::unix","Error returned if this system doesn't have XLib or can't create an X connection.",null,null],[13,"LibraryOpenError","","Failed to load one or several shared libraries.",30,null],[13,"XOpenDisplayFailed","","Connecting to the X server with `XOpenDisplay` failed.",30,null],[8,"EventsLoopExt","","Additional methods on `EventsLoop` that are specific to Linux.",null,null],[10,"new_x11","","Builds a new `EventsLoop` that is forced to use X11.",31,{"o":{"g":["xnotsupported"],"n":"result"}}],[10,"new_wayland","","Builds a new `EventsLoop` that is forced to use Wayland.",31,{"o":{"n":"self"}}],[10,"is_wayland","","True if the `EventsLoop` uses Wayland.",31,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_x11","","True if the `EventsLoop` uses X11.",31,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"MonitorIdExt","","Additional methods on `MonitorId` that are specific to Linux.",null,null],[10,"native_id","","Returns the inner identifier of the monitor.",32,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[8,"WindowBuilderExt","","Additional methods on `WindowBuilder` that are specific to Unix.",null,null],[10,"with_x11_visual","","",33,null],[10,"with_x11_screen","","",33,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"windowbuilder"}}],[8,"WindowExt","","Additional methods on `Window` that are specific to Unix.",null,null],[10,"get_xlib_window","","Returns the ID of the `Window` xlib object that is used by this window.",34,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[10,"get_xlib_display","","Returns a pointer to the `Display` object of xlib that is used by this window.",34,{"i":[{"n":"self"}],"o":{"n":"option"}}],[10,"get_xlib_screen_id","","",34,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[10,"get_xlib_xconnection","","",34,{"i":[{"n":"self"}],"o":{"g":["arc"],"n":"option"}}],[10,"send_xim_spot","","",34,null],[10,"get_xcb_connection","","This function returns the underlying `xcb_connection_t` of an xlib `Display`.",34,{"i":[{"n":"self"}],"o":{"n":"option"}}],[10,"get_wayland_surface","","Returns a pointer to the `wl_surface` object of wayland that is used by this window.",34,{"i":[{"n":"self"}],"o":{"n":"option"}}],[10,"get_wayland_display","","Returns a pointer to the `wl_display` object of wayland that is used by this window.",34,{"i":[{"n":"self"}],"o":{"n":"option"}}],[10,"is_ready","","Check if the window is ready for drawing",34,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[4,"RawHandle","","Context handles available on Unix-like platforms.",null,null],[13,"Glx","","",35,null],[13,"Egl","","",35,null],[6,"EGLContext","","",null,null],[6,"GLXContext","","",null,null],[11,"raw_handle","glutin","",36,null],[11,"raw_handle","","",29,null],[8,"GlContextExt","glutin::os","Platform-specific extensions for OpenGL contexts.",null,null],[16,"Handle","","Raw context handle.",37,null],[10,"raw_handle","","Returns the raw context handle.",37,null],[7,"GL_CORE","glutin","The minimum core profile GL context. Useful for getting the minimum required GL version while still running on OSX, which often forbids the compatibility profile features.",null,null],[8,"GlContext","","A trait for types associated with a GL context.",null,null],[10,"make_current","","Sets the context as the current context.",38,{"i":[{"n":"self"}],"o":{"g":["contexterror"],"n":"result"}}],[10,"is_current","","Returns true if this context is the current one in this thread.",38,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"get_proc_address","","Returns the address of an OpenGL function.",38,null],[10,"swap_buffers","","Swaps the buffers in case of double or triple buffering.",38,{"i":[{"n":"self"}],"o":{"g":["contexterror"],"n":"result"}}],[10,"get_api","","Returns the OpenGL API being used.",38,{"i":[{"n":"self"}],"o":{"n":"api"}}],[10,"get_pixel_format","","Returns the pixel format of the main framebuffer of the context.",38,{"i":[{"n":"self"}],"o":{"n":"pixelformat"}}],[10,"resize","","Resize the GL context.",38,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}]}],[11,"new","","Initializes a new `ContextBuilder` with default values.",18,{"o":{"n":"self"}}],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",18,{"i":[{"n":"self"},{"n":"glrequest"}],"o":{"n":"self"}}],[11,"with_gl_profile","","Sets the desired OpenGL context profile.",18,{"i":[{"n":"self"},{"n":"glprofile"}],"o":{"n":"self"}}],[11,"with_gl_debug_flag","","Sets the debug flag for the OpenGL context.",18,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"with_gl_robustness","","Sets the robustness of the OpenGL context. See the docs of `Robustness`.",18,{"i":[{"n":"self"},{"n":"robustness"}],"o":{"n":"self"}}],[11,"with_vsync","","Requests that the window has vsync enabled.",18,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"with_shared_lists","","Share the display lists with the given `Context`.",18,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"self"}}],[11,"with_multisampling","","Sets the multisampling level to request. A value of `0` indicates that multisampling must not be enabled.",18,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"self"}}],[11,"with_depth_buffer","","Sets the number of bits in the depth buffer.",18,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"self"}}],[11,"with_stencil_buffer","","Sets the number of bits in the stencil buffer.",18,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"self"}}],[11,"with_pixel_format","","Sets the number of bits in the color buffer.",18,{"i":[{"n":"self"},{"n":"u8"},{"n":"u8"}],"o":{"n":"self"}}],[11,"with_stereoscopy","","Request the backend to be stereoscopic.",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"with_srgb","","Sets whether sRGB should be enabled on the window.",18,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"new","","Builds the given window along with the associated GL context, returning the pair as a `GlWindow`.",39,{"i":[{"n":"windowbuilder"},{"n":"contextbuilder"},{"n":"eventsloop"}],"o":{"g":["creationerror"],"n":"result"}}],[11,"window","","Borrow the inner `Window`.",39,{"i":[{"n":"self"}],"o":{"n":"window"}}],[11,"context","","Borrow the inner GL `Context`.",39,{"i":[{"n":"self"}],"o":{"n":"context"}}],[11,"make_current","","",36,{"i":[{"n":"self"}],"o":{"g":["contexterror"],"n":"result"}}],[11,"is_current","","",36,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_proc_address","","",36,null],[11,"swap_buffers","","",36,{"i":[{"n":"self"}],"o":{"g":["contexterror"],"n":"result"}}],[11,"get_api","","",36,{"i":[{"n":"self"}],"o":{"n":"api"}}],[11,"get_pixel_format","","",36,{"i":[{"n":"self"}],"o":{"n":"pixelformat"}}],[11,"resize","","",36,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}]}],[11,"make_current","","",39,{"i":[{"n":"self"}],"o":{"g":["contexterror"],"n":"result"}}],[11,"is_current","","",39,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_proc_address","","",39,null],[11,"swap_buffers","","",39,{"i":[{"n":"self"}],"o":{"g":["contexterror"],"n":"result"}}],[11,"get_api","","",39,{"i":[{"n":"self"}],"o":{"n":"api"}}],[11,"get_pixel_format","","",39,{"i":[{"n":"self"}],"o":{"n":"pixelformat"}}],[11,"resize","","",39,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}]}],[11,"deref","","",39,null],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",22,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",22,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"from","","",22,{"i":[{"n":"windowcreationerror"}],"o":{"n":"self"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",23,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"api"}}],[11,"eq","","",24,{"i":[{"n":"self"},{"n":"api"}],"o":{"n":"bool"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"glprofile"}}],[11,"eq","","",25,{"i":[{"n":"self"},{"n":"glprofile"}],"o":{"n":"bool"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"glrequest"}}],[11,"to_gl_version","","Extract the desktop GL version, if any.",26,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"robustness"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"robustness"}],"o":{"n":"bool"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"releasebehavior"}}],[11,"eq","","",28,{"i":[{"n":"self"},{"n":"releasebehavior"}],"o":{"n":"bool"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"pixelformat"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"pixelformatrequirements"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",20,{"o":{"n":"pixelformatrequirements"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"glattributes"}}],[11,"map_sharing","","Turns the `sharing` parameter into another type by calling a closure.",21,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"glattributes"}}],[11,"default","","",21,{"o":{"n":"glattributes"}}],[11,"cmp","","",40,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"n":"ordering"}}],[11,"cmp","","",41,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",41,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",41,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"bool"}}],[11,"le","","",41,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"bool"}}],[11,"gt","","",41,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"bool"}}],[11,"ge","","",41,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",40,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",40,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"n":"bool"}}],[11,"le","","",40,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"n":"bool"}}],[11,"gt","","",40,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"n":"bool"}}],[11,"ge","","",40,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"n":"bool"}}],[11,"new_x11","","",42,{"o":{"g":["eventsloop","xnotsupported"],"n":"result"}}],[11,"new_wayland","","",42,{"o":{"n":"eventsloop"}}],[11,"is_wayland","","",42,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_x11","","",42,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_xlib_xconnection","","",42,{"i":[{"n":"self"}],"o":{"g":["arc"],"n":"option"}}],[11,"from","","",7,{"i":[{"n":"ximodifierstate"}],"o":{"n":"modifiersstate"}}],[11,"from","glutin::os::unix","",30,{"i":[{"n":"openerror"}],"o":{"n":"xnotsupported"}}],[11,"next","glutin","",43,{"i":[{"n":"self"}],"o":{"g":["monitorid"],"n":"option"}}],[11,"size_hint","","",43,null],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","glutin::os::unix","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"default","glutin","",7,{"o":{"n":"modifiersstate"}}],[11,"default","","",14,{"o":{"n":"windowattributes"}}],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","glutin::os::unix","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","glutin","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","","",44,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","glutin::os::unix","",30,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",30,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"eq","glutin","",4,{"i":[{"n":"self"},{"n":"elementstate"}],"o":{"n":"bool"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"cursorstate"}],"o":{"n":"bool"}}],[11,"eq","","",41,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"bool"}}],[11,"ne","","",41,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"bool"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"mousescrolldelta"}],"o":{"n":"bool"}}],[11,"ne","","",10,{"i":[{"n":"self"},{"n":"mousescrolldelta"}],"o":{"n":"bool"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"mousecursor"}],"o":{"n":"bool"}}],[11,"eq","","",40,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"n":"bool"}}],[11,"ne","","",40,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"n":"bool"}}],[11,"eq","","",44,{"i":[{"n":"self"},{"n":"eventsloopclosed"}],"o":{"n":"bool"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"virtualkeycode"}],"o":{"n":"bool"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"touchphase"}],"o":{"n":"bool"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"modifiersstate"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"modifiersstate"}],"o":{"n":"bool"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"mousebutton"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"mousebutton"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"controlflow"}],"o":{"n":"bool"}}],[11,"native_id","","",45,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"with_x11_visual","","",15,null],[11,"with_x11_screen","","",15,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"windowbuilder"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"mousebutton"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"windowid"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"keyboardinput"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"cursorstate"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"touchphase"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"monitorid"}}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"eventsloopproxy"}}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"deviceid"}}],[11,"clone","glutin::os::unix","",30,{"i":[{"n":"self"}],"o":{"n":"xnotsupported"}}],[11,"clone","glutin","",4,{"i":[{"n":"self"}],"o":{"n":"elementstate"}}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"eventsloopclosed"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"event"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"mousescrolldelta"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"windowbuilder"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"mousecursor"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"windowevent"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"windowattributes"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"creationerror"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"touch"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"deviceevent"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"controlflow"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"modifiersstate"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"virtualkeycode"}}],[11,"hash","","",4,null],[11,"hash","","",41,null],[11,"hash","","",12,null],[11,"hash","","",44,null],[11,"hash","","",7,null],[11,"hash","","",40,null],[11,"hash","","",13,null],[11,"hash","","",8,null],[11,"get_xlib_window","","",47,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"get_xlib_display","","",47,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_xlib_screen_id","","",47,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[11,"get_xlib_xconnection","","",47,{"i":[{"n":"self"}],"o":{"g":["arc"],"n":"option"}}],[11,"get_xcb_connection","","",47,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"send_xim_spot","","",47,null],[11,"get_wayland_surface","","",47,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_wayland_display","","",47,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"is_ready","","",47,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"new","","Builds a new events loop.",42,{"o":{"n":"eventsloop"}}],[11,"get_available_monitors","","Returns the list of all the monitors available on the system.",42,{"i":[{"n":"self"}],"o":{"n":"availablemonitorsiter"}}],[11,"get_primary_monitor","","Returns the primary monitor of the system.",42,{"i":[{"n":"self"}],"o":{"n":"monitorid"}}],[11,"poll_events","","Fetches all the events that are pending, calls the callback function for each of them, and returns.",42,null],[11,"run_forever","","Calls `callback` every time an event is received. If no event is available, sleeps the current thread and waits for an event. If the callback returns `ControlFlow::Break` then `run_forever` will immediately return.",42,null],[11,"create_proxy","","Creates an `EventsLoopProxy` that can be used to wake up the `EventsLoop` from another thread.",42,{"i":[{"n":"self"}],"o":{"n":"eventsloopproxy"}}],[11,"wakeup","","Wake up the `EventsLoop` from which this proxy was created.",46,{"i":[{"n":"self"}],"o":{"g":["eventsloopclosed"],"n":"result"}}],[11,"get_name","","Returns a human-readable name of the monitor.",45,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}],[11,"get_dimensions","","Returns the number of pixels currently displayed on the monitor.",45,null],[11,"get_position","","Returns the top-left corner position of the monitor relative to the larger full screen area.",45,null],[11,"get_hidpi_factor","","Returns the ratio between the monitor's physical pixels and logical pixels.",45,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"new","","Creates a new Window for platforms where this is appropriate.",47,{"i":[{"n":"eventsloop"}],"o":{"g":["window","creationerror"],"n":"result"}}],[11,"set_title","","Modifies the title of the window.",47,null],[11,"show","","Shows the window if it was hidden.",47,null],[11,"hide","","Hides the window if it was visible.",47,null],[11,"get_position","","Returns the position of the top-left hand corner of the window relative to the  top-left hand corner of the desktop.",47,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"set_position","","Modifies the position of the window.",47,null],[11,"get_inner_size","","Returns the size in pixels of the client area of the window.",47,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_inner_size_points","","Returns the size in points of the client area of the window.",47,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_inner_size_pixels","","Returns the size in pixels of the client area of the window.",47,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_outer_size","","Returns the size in pixels of the window.",47,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"set_inner_size","","Modifies the inner size of the window.",47,null],[11,"set_min_dimensions","","Sets a minimum dimension size for the window.",47,null],[11,"set_max_dimensions","","Sets a maximum dimension size for the window.",47,null],[11,"platform_display","","DEPRECATED. Gets the native platform specific display for this window. This is typically only required when integrating with other libraries that need this information.",47,null],[11,"platform_window","","DEPRECATED. Gets the native platform specific window handle. This is typically only required when integrating with other libraries that need this information.",47,null],[11,"set_cursor","","Modifies the mouse cursor of the window. Has no effect on Android.",47,null],[11,"hidpi_factor","","Returns the ratio between the backing framebuffer resolution and the window size in screen pixels. This is typically one for a normal display and two for a retina display.",47,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"set_cursor_position","","Changes the position of the cursor in window coordinates.",47,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"}],"o":{"n":"result"}}],[11,"set_cursor_state","","Sets how winit handles the cursor. See the documentation of `CursorState` for details.",47,{"i":[{"n":"self"},{"n":"cursorstate"}],"o":{"g":["string"],"n":"result"}}],[11,"set_maximized","","Sets the window to maximized or back",47,null],[11,"set_fullscreen","","Sets the window to fullscreen or back",47,null],[11,"set_decorations","","Turn window decorations on or off.",47,null],[11,"get_current_monitor","","Returns the current monitor the window is on or the primary monitor is nothing matches",47,{"i":[{"n":"self"}],"o":{"n":"monitorid"}}],[11,"id","","",47,{"i":[{"n":"self"}],"o":{"n":"windowid"}}],[11,"new","","Initializes a new `WindowBuilder` with default values.",15,{"o":{"n":"windowbuilder"}}],[11,"with_dimensions","","Requests the window to be of specific dimensions.",15,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"n":"windowbuilder"}}],[11,"with_min_dimensions","","Sets a minimum dimension size for the window",15,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"n":"windowbuilder"}}],[11,"with_max_dimensions","","Sets a maximum dimension size for the window",15,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"n":"windowbuilder"}}],[11,"with_title","","Requests a specific title for the window.",15,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"windowbuilder"}}],[11,"with_fullscreen","","Sets the window fullscreen state. None means a normal window, Some(MonitorId) means a fullscreen window on that specific monitor",15,{"i":[{"n":"self"},{"g":["monitorid"],"n":"option"}],"o":{"n":"windowbuilder"}}],[11,"with_maximized","","Requests maximized mode.",15,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"windowbuilder"}}],[11,"with_visibility","","Sets whether the window will be initially hidden or visible.",15,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"windowbuilder"}}],[11,"with_transparency","","Sets whether the background of the window should be transparent.",15,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"windowbuilder"}}],[11,"with_decorations","","Sets whether the window should have a border, a title bar, etc.",15,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"windowbuilder"}}],[11,"with_multitouch","","Enables multitouch.",15,{"i":[{"n":"self"}],"o":{"n":"windowbuilder"}}],[11,"build","","Builds the window.",15,{"i":[{"n":"self"},{"n":"eventsloop"}],"o":{"g":["window","creationerror"],"n":"result"}}],[11,"clone","glutin::os::unix","",35,{"i":[{"n":"self"}],"o":{"n":"rawhandle"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[4,"ControlFlow"],[4,"WindowCreationError"],[4,"CursorState"],[4,"DeviceEvent"],[4,"ElementState"],[4,"Event"],[3,"KeyboardInput"],[3,"ModifiersState"],[4,"MouseButton"],[4,"MouseCursor"],[4,"MouseScrollDelta"],[3,"Touch"],[4,"TouchPhase"],[4,"VirtualKeyCode"],[3,"WindowAttributes"],[3,"WindowBuilder"],[4,"WindowEvent"],[3,"HeadlessRendererBuilder"],[3,"ContextBuilder"],[3,"PixelFormat"],[3,"PixelFormatRequirements"],[3,"GlAttributes"],[4,"CreationError"],[4,"ContextError"],[4,"Api"],[4,"GlProfile"],[4,"GlRequest"],[4,"Robustness"],[4,"ReleaseBehavior"],[3,"HeadlessContext"],[4,"XNotSupported"],[8,"EventsLoopExt"],[8,"MonitorIdExt"],[8,"WindowBuilderExt"],[8,"WindowExt"],[4,"RawHandle"],[3,"Context"],[8,"GlContextExt"],[8,"GlContext"],[3,"GlWindow"],[3,"WindowId"],[3,"DeviceId"],[3,"EventsLoop"],[3,"AvailableMonitorsIter"],[3,"EventsLoopClosed"],[3,"MonitorId"],[3,"EventsLoopProxy"],[3,"Window"]]};
searchIndex["graphics"] = {"doc":"A library for 2D graphics that works with multiple back-ends.","items":[[8,"ImageSize","graphics","Implemented by all images to be used with generic algorithms.",null,null],[10,"get_size","","Get the image size.",0,null],[11,"get_width","","Gets the image width.",0,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_height","","Gets the image height.",0,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[3,"Viewport","","Stores viewport information.",null,null],[12,"rect","","Viewport in pixels. `[x, y, width height]` where `(x, y)` is lower left corner.",1,null],[12,"draw_size","","The size of frame buffer in pixels.",1,null],[12,"window_size","","The size of window in points.",1,null],[5,"clear","","Clears the screen.",null,{"i":[{"n":"color"},{"n":"g"}]}],[5,"image","","Draws image.",null,null],[5,"ellipse","","Draws ellipse.",null,{"i":[{"n":"color"},{"n":"r"},{"n":"matrix2d"},{"n":"g"}]}],[5,"circle_arc","","Draws arc",null,{"i":[{"n":"color"},{"n":"radius"},{"n":"scalar"},{"n":"scalar"},{"n":"r"},{"n":"matrix2d"},{"n":"g"}]}],[5,"rectangle","","Draws rectangle.",null,{"i":[{"n":"color"},{"n":"r"},{"n":"matrix2d"},{"n":"g"}]}],[5,"polygon","","Draws polygon.",null,{"i":[{"n":"color"},{"n":"polygon"},{"n":"matrix2d"},{"n":"g"}]}],[5,"line","","Draws line.",null,{"i":[{"n":"color"},{"n":"radius"},{"n":"l"},{"n":"matrix2d"},{"n":"g"}]}],[5,"text","","Draws text.",null,{"i":[{"n":"color"},{"n":"fontsize"},{"n":"str"},{"n":"c"},{"n":"matrix2d"},{"n":"g"}],"o":{"n":"result"}}],[0,"draw_state","","Graphics draw state.",null,null],[3,"DrawState","graphics::draw_state","Graphics draw state used for blending, clipping and stencil rendering.",null,null],[12,"scissor","","Scissor mask to use. If set, no pixel outside of this rectangle (in screen space) will be written to as a result of rendering.",2,null],[12,"stencil","","Stencil test to use. If None, no stencil testing is done.",2,null],[12,"blend","","Blend function to use. If None, blending is disabled.",2,null],[4,"Blend","","The blend setting to use when drawing.",null,null],[13,"Alpha","","Alpha blending (allows semi-transparent pixels).",3,null],[13,"Add","","Additive blending.",3,null],[13,"Multiply","","Multiply color components.",3,null],[13,"Invert","","Invert colors when rendering a white shape.",3,null],[4,"Stencil","","Stencil buffer settings.",null,null],[13,"Clip","","Draw to stencil buffer.",4,null],[13,"Inside","","Draw pixels that have stencil value.",4,null],[13,"Outside","","Draw pixels that does not have stencil value.",4,null],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"drawstate"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"drawstate"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"drawstate"}],"o":{"n":"bool"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"drawstate"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",2,{"i":[{"n":"self"},{"n":"drawstate"}],"o":{"n":"bool"}}],[11,"le","","",2,{"i":[{"n":"self"},{"n":"drawstate"}],"o":{"n":"bool"}}],[11,"gt","","",2,{"i":[{"n":"self"},{"n":"drawstate"}],"o":{"n":"bool"}}],[11,"ge","","",2,{"i":[{"n":"self"},{"n":"drawstate"}],"o":{"n":"bool"}}],[11,"default","","",2,{"o":{"n":"self"}}],[11,"new_alpha","","Uses alpha blending.",2,{"o":{"n":"drawstate"}}],[11,"new_clip","","Draws to stencil buffer with value 255. This can be used for clipping.",2,{"o":{"n":"drawstate"}}],[11,"new_inside","","Tests against stencil buffer with value 255. Draws inside the shape defined by stencil buffer.",2,{"o":{"n":"drawstate"}}],[11,"new_outside","","Tests against stencil buffer with value 255. Draws outside the shape defined by stencil buffer.",2,{"o":{"n":"drawstate"}}],[11,"blend","","Sets blending.",2,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"drawstate"}}],[11,"scissor","","Sets scissor `[x, y, w, h]`.",2,null],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"blend"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"blend"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",3,{"i":[{"n":"self"},{"n":"blend"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"stencil"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",4,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"le","","",4,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"gt","","",4,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[11,"ge","","",4,{"i":[{"n":"self"},{"n":"stencil"}],"o":{"n":"bool"}}],[0,"character","graphics","A text character",null,null],[3,"Character","graphics::character","Holds rendered character data.",null,null],[12,"offset","","The offset of character.",5,null],[12,"size","","The size of character, including space.",5,null],[12,"texture","","The texture of the character.",5,null],[8,"CharacterCache","","Stores characters in a buffer and loads them by demand.",null,null],[16,"Texture","","The texture type associated with the character cache.",6,null],[16,"Error","","The error type associated with the character cache.",6,null],[10,"character","","Get reference to character.",6,{"i":[{"n":"self"},{"n":"fontsize"},{"n":"char"}],"o":{"g":["character"],"n":"result"}}],[11,"width","","Return the width for some given text.",6,{"i":[{"n":"self"},{"n":"fontsize"},{"n":"str"}],"o":{"g":["scalar"],"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"character"}}],[11,"left","","The left offset.",5,{"i":[{"n":"self"}],"o":{"n":"scalar"}}],[11,"top","","The top offset.",5,{"i":[{"n":"self"}],"o":{"n":"scalar"}}],[11,"width","","Gets width of character, including space to the next one.",5,{"i":[{"n":"self"}],"o":{"n":"scalar"}}],[11,"height","","Sets height of character, including space to the next one.",5,{"i":[{"n":"self"}],"o":{"n":"scalar"}}],[0,"context","graphics","Transformation context",null,null],[3,"Context","graphics::context","Drawing 2d context.",null,null],[12,"viewport","","Viewport information.",7,null],[12,"view","","View transformation.",7,null],[12,"transform","","Current transformation.",7,null],[12,"draw_state","","Current draw state settings.",7,null],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"context"}}],[11,"new","","Creates a new drawing context.",7,{"o":{"n":"context"}}],[11,"new_viewport","","Creates a new context with absolute transform in point coordinates.",7,{"i":[{"n":"viewport"}],"o":{"n":"context"}}],[11,"new_abs","","Creates a new drawing context in absolute coordinates.",7,{"i":[{"n":"scalar"},{"n":"scalar"}],"o":{"n":"context"}}],[11,"view","","Moves the current transform to the view coordinate system.",7,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"reset","","Moves the current transform to the default coordinate system.",7,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"store_view","","Stores the current transform as new view.",7,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"get_view_size","","Computes the current view size.",7,{"i":[{"n":"self"}],"o":{"n":"vec2d"}}],[0,"color","graphics","Helper methods for colors",null,null],[5,"grey","graphics::color","Returns a grey color",null,{"i":[{"n":"colorcomponent"}],"o":{"n":"color"}}],[5,"alpha","","Returns a semi-transparent white color",null,{"i":[{"n":"colorcomponent"}],"o":{"n":"color"}}],[5,"hex","","Converts from hexadecimal color format",null,{"i":[{"n":"str"}],"o":{"n":"color"}}],[5,"gamma_srgb_to_linear","","Converts gamma (brightness) from sRGB to linear color space.",null,{"i":[{"n":"color"}],"o":{"n":"color"}}],[5,"gamma_linear_to_srgb","","Converts gamma (brightness) of a color from linear color space to sRGB.",null,{"i":[{"n":"color"}],"o":{"n":"color"}}],[17,"WHITE","","White color.",null,null],[17,"BLACK","","Black color.",null,null],[17,"TRANSPARENT","","Transparent color.",null,null],[0,"polygon","graphics","Draw polygon",null,null],[3,"Polygon","graphics::polygon","A polygon",null,null],[12,"color","","The color of the polygon",8,null],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"polygon"}}],[11,"new","","Creates new polygon",8,{"i":[{"n":"color"}],"o":{"n":"polygon"}}],[11,"color","","Sets color.",8,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"draw","","Draws polygon using the default method.",8,{"i":[{"n":"self"},{"n":"polygon"},{"n":"drawstate"},{"n":"matrix2d"},{"n":"g"}]}],[11,"draw_tri","","Draws polygon using triangulation.",8,{"i":[{"n":"self"},{"n":"polygon"},{"n":"drawstate"},{"n":"matrix2d"},{"n":"g"}]}],[11,"draw_tween_lerp","","Draws tweened polygon with linear interpolation, using default method.",8,{"i":[{"n":"self"},{"n":"polygons"},{"n":"scalar"},{"n":"drawstate"},{"n":"matrix2d"},{"n":"g"}]}],[11,"draw_tween_lerp_tri","","Draws tweened polygon with linear interpolation, using triangulation.",8,{"i":[{"n":"self"},{"n":"polygons"},{"n":"scalar"},{"n":"drawstate"},{"n":"matrix2d"},{"n":"g"}]}],[0,"line","graphics","Draw Line",null,null],[3,"Line","graphics::line","A colored line with a default border radius",null,null],[12,"color","","The line color",9,null],[12,"radius","","The line radius",9,null],[12,"shape","","The line shape",9,null],[4,"Shape","","The shape of the line",null,null],[13,"Square","","Square edges",10,null],[13,"Round","","Round edges",10,null],[13,"Bevel","","Bevel edges",10,null],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"shape"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"line"}}],[11,"new","","Creates a new line",9,{"i":[{"n":"color"},{"n":"radius"}],"o":{"n":"line"}}],[11,"new_round","","Creates a new line",9,{"i":[{"n":"color"},{"n":"radius"}],"o":{"n":"line"}}],[11,"color","","Sets color.",9,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"radius","","Sets radius.",9,{"i":[{"n":"self"},{"n":"radius"}],"o":{"n":"self"}}],[11,"width","","Sets width.",9,{"i":[{"n":"self"},{"n":"width"}],"o":{"n":"self"}}],[11,"shape","","Sets shape.",9,{"i":[{"n":"self"},{"n":"shape"}],"o":{"n":"self"}}],[11,"draw","","Draws line using default method.",9,{"i":[{"n":"self"},{"n":"l"},{"n":"drawstate"},{"n":"matrix2d"},{"n":"g"}]}],[11,"draw_tri","","Draws line using triangulation.",9,{"i":[{"n":"self"},{"n":"l"},{"n":"drawstate"},{"n":"matrix2d"},{"n":"g"}]}],[11,"draw_arrow","","Draws an arrow",9,{"i":[{"n":"self"},{"n":"l"},{"n":"scalar"},{"n":"drawstate"},{"n":"matrix2d"},{"n":"g"}]}],[0,"circle_arc","graphics","Draw an arc",null,null],[3,"CircleArc","graphics::circle_arc","A curved line",null,null],[12,"color","","The arcs color",11,null],[12,"radius","","The radius of the arc (Thickness of the drawing, not the radius of the circle)",11,null],[12,"start","","The start of the arc in radians",11,null],[12,"end","","The end of the arc in radians",11,null],[12,"resolution","","The resolution for the arc.",11,null],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"circlearc"}}],[11,"new","","Creates a new arc",11,{"i":[{"n":"color"},{"n":"radius"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"circlearc"}}],[11,"color","","Sets the arcs color.",11,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"radius","","Sets the radius of the arc (Thickness of the arc, not the radius of the circle it wraps)",11,{"i":[{"n":"self"},{"n":"radius"}],"o":{"n":"self"}}],[11,"start","","Sets the start of the arc (in radians).",11,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"end","","Sets the end of the arc (in radians).",11,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"resolution","","Sets the resolution of the arcs smoothness.",11,{"i":[{"n":"self"},{"n":"resolution"}],"o":{"n":"self"}}],[11,"draw","","Draws circle arc using default method.",11,{"i":[{"n":"self"},{"n":"r"},{"n":"drawstate"},{"n":"matrix2d"},{"n":"g"}]}],[11,"draw_tri","","Draws circle arc using triangulation.",11,{"i":[{"n":"self"},{"n":"r"},{"n":"drawstate"},{"n":"matrix2d"},{"n":"g"}]}],[0,"ellipse","graphics","Draw ellipse",null,null],[3,"Border","graphics::ellipse","Ellipse border",null,null],[12,"color","","The border color",12,null],[12,"radius","","The border radius",12,null],[3,"Ellipse","","An ellipse with filled color",null,null],[12,"color","","The ellipse color",13,null],[12,"border","","The ellipse border",13,null],[12,"resolution","","The resolution for the shape, 360 degrees.",13,null],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"border"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"ellipse"}}],[11,"new","","Creates a new ellipse",13,{"i":[{"n":"color"}],"o":{"n":"ellipse"}}],[11,"new_border","","Creates a new ellipse border",13,{"i":[{"n":"color"},{"n":"radius"}],"o":{"n":"ellipse"}}],[11,"color","","Sets ellipse color.",13,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"border","","Sets ellipse border.",13,{"i":[{"n":"self"},{"n":"border"}],"o":{"n":"self"}}],[11,"maybe_border","","Sets optional ellipse border.",13,{"i":[{"n":"self"},{"g":["border"],"n":"option"}],"o":{"n":"self"}}],[11,"resolution","","Sets resolution of the ellipse smoothness.",13,{"i":[{"n":"self"},{"n":"resolution"}],"o":{"n":"self"}}],[11,"draw","","Draws ellipse using default method.",13,{"i":[{"n":"self"},{"n":"r"},{"n":"drawstate"},{"n":"matrix2d"},{"n":"g"}]}],[11,"draw_tri","","Draws ellipse using triangulation.",13,{"i":[{"n":"self"},{"n":"r"},{"n":"drawstate"},{"n":"matrix2d"},{"n":"g"}]}],[0,"rectangle","graphics","Draw rectangle",null,null],[3,"Border","graphics::rectangle","The border of the rectangle",null,null],[12,"color","","The color of the border",14,null],[12,"radius","","The radius of the border. The half-width of the line by which border is drawn.",14,null],[3,"Rectangle","","A filled rectangle",null,null],[12,"color","","The rectangle color",15,null],[12,"shape","","The roundness of the rectangle",15,null],[12,"border","","The border",15,null],[4,"Shape","","The shape of the rectangle corners",null,null],[13,"Square","","Square corners",16,null],[13,"Round","","Round corners, with resolution per corner.",16,null],[13,"Bevel","","Bevel corners",16,null],[5,"rectangle_by_corners","","Create `types::Rectangle` by the two opposite corners.",null,{"i":[{"n":"scalar"},{"n":"scalar"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"rectangle"}}],[5,"centered","","Use x, y, half-width, half-height",null,{"i":[{"n":"rectangle"}],"o":{"n":"rectangle"}}],[5,"centered_square","","Create `types::Rectangle` for a square with a center in (`x`, `y`) and side `2 * radius`.",null,{"i":[{"n":"scalar"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"rectangle"}}],[5,"square","","Create `types::Rectangle` for a square with a top-left corner in (`x`, `y`) and side `size`.",null,{"i":[{"n":"scalar"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"rectangle"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"shape"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"border"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"rectangle"}}],[11,"new","","Creates a new rectangle.",15,{"i":[{"n":"color"}],"o":{"n":"rectangle"}}],[11,"new_round","","Creates a new rectangle with rounded corners.",15,{"i":[{"n":"color"},{"n":"radius"}],"o":{"n":"rectangle"}}],[11,"new_border","","Creates a new rectangle border.",15,{"i":[{"n":"color"},{"n":"radius"}],"o":{"n":"rectangle"}}],[11,"new_round_border","","Creates a new rectangle border with rounded corners.",15,{"i":[{"n":"color"},{"n":"radius"},{"n":"radius"}],"o":{"n":"rectangle"}}],[11,"color","","Sets color.",15,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"shape","","Sets shape of the corners.",15,{"i":[{"n":"self"},{"n":"shape"}],"o":{"n":"self"}}],[11,"border","","Sets border properties.",15,{"i":[{"n":"self"},{"n":"border"}],"o":{"n":"self"}}],[11,"maybe_border","","Sets optional border.",15,{"i":[{"n":"self"},{"g":["border"],"n":"option"}],"o":{"n":"self"}}],[11,"draw","","Draws the rectangle using the default method.",15,{"i":[{"n":"self"},{"n":"r"},{"n":"drawstate"},{"n":"matrix2d"},{"n":"g"}]}],[11,"draw_tri","","Draws the rectangle using triangulation.",15,{"i":[{"n":"self"},{"n":"r"},{"n":"drawstate"},{"n":"matrix2d"},{"n":"g"}]}],[0,"image","graphics","Draw an image",null,null],[3,"Image","graphics::image","An image",null,null],[12,"color","","The color",17,null],[12,"rectangle","","The rectangle to draw image inside",17,null],[12,"source_rectangle","","The image source rectangle",17,null],[5,"draw_many","","Draws many images.",null,null],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"image"}}],[11,"new","","Creates a new image",17,{"o":{"n":"image"}}],[11,"new_color","","Creates a new colored image",17,{"i":[{"n":"color"}],"o":{"n":"image"}}],[11,"color","","Sets color.",17,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"self"}}],[11,"maybe_color","","Sets optional color.",17,{"i":[{"n":"self"},{"g":["color"],"n":"option"}],"o":{"n":"self"}}],[11,"rect","","Sets rectangle.",17,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"self"}}],[11,"maybe_rect","","Sets optional rectangle.",17,{"i":[{"n":"self"},{"n":"option"}],"o":{"n":"self"}}],[11,"src_rect","","Sets source rectangle.",17,{"i":[{"n":"self"},{"n":"sourcerectangle"}],"o":{"n":"self"}}],[11,"maybe_src_rect","","Sets optional source rectangle.",17,{"i":[{"n":"self"},{"g":["sourcerectangle"],"n":"option"}],"o":{"n":"self"}}],[11,"draw","","Draws image using default method.",17,null],[11,"draw_tri","","Draws image using triangulation.",17,null],[0,"types","graphics","Contains type aliases used in this library",null,null],[6,"Area","graphics::types","The type used for area.",null,null],[6,"Color","","[red, green, blue, alpha]",null,null],[6,"ColorComponent","","The type used for color component.",null,null],[6,"Line","","[x1, y1, x2, y2]",null,null],[6,"SourceRectangle","","[x, y, w, h]",null,null],[6,"Polygon","","[p0, p1, ...]",null,null],[6,"Polygons","","A slice of polygons.",null,null],[6,"Radius","","The type used for radius.",null,null],[6,"Resolution","","The type used for resolution.",null,null],[6,"Ray","","[x, y, dir_x, dir_y]",null,null],[6,"Rectangle","","Rectangle dimensions: [x, y, w, h]",null,null],[6,"Triangle","","[x1, y1, x2, y2, x3, y3]",null,null],[6,"Width","","The type used for width.",null,null],[6,"FontSize","","The type used for font size.",null,null],[0,"modular_index","graphics","Helper functions for computing modular index safely.",null,null],[5,"offset","graphics::modular_index","Computes modular offset safely for indices.",null,{"i":[{"n":"usize"},{"n":"usize"},{"n":"isize"}],"o":{"n":"usize"}}],[5,"previous","","Computes previous modular index safely.",null,{"i":[{"n":"usize"},{"n":"usize"}],"o":{"n":"usize"}}],[5,"next","","Computes next modular index safely.",null,{"i":[{"n":"usize"},{"n":"usize"}],"o":{"n":"usize"}}],[0,"text","graphics","Draw text",null,null],[3,"Text","graphics::text","Renders text",null,null],[12,"color","","The color",18,null],[12,"font_size","","The font size",18,null],[12,"round","","Whether or not the text's position should be rounded (to a signed distance field).",18,null],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"text"}}],[11,"new","","Creates a new text with black color",18,{"i":[{"n":"fontsize"}],"o":{"n":"text"}}],[11,"new_color","","Creates a new colored text",18,{"i":[{"n":"color"},{"n":"fontsize"}],"o":{"n":"text"}}],[11,"round","","A builder method indicating that the Text's position should be rounded upon drawing.",18,{"i":[{"n":"self"}],"o":{"n":"text"}}],[11,"draw","","Draws text with a character cache",18,{"i":[{"n":"self"},{"n":"str"},{"n":"c"},{"n":"drawstate"},{"n":"matrix2d"},{"n":"g"}],"o":{"n":"result"}}],[0,"triangulation","graphics","Methods for converting shapes into triangles.",null,null],[5,"tx","graphics::triangulation","Transformed x coordinate as f32.",null,{"i":[{"n":"matrix2d"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"f32"}}],[5,"ty","","Transformed y coordinate as f32.",null,{"i":[{"n":"matrix2d"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"f32"}}],[5,"with_lerp_polygons_tri_list","","Streams tweened polygons using linear interpolation.",null,{"i":[{"n":"matrix2d"},{"n":"polygons"},{"n":"scalar"},{"n":"f"}]}],[5,"with_ellipse_tri_list","","Streams an ellipse specified by a resolution.",null,{"i":[{"n":"resolution"},{"n":"matrix2d"},{"n":"rectangle"},{"n":"f"}]}],[5,"with_round_border_line_tri_list","","Streams a round border line.",null,{"i":[{"n":"resolution"},{"n":"matrix2d"},{"n":"line"},{"n":"radius"},{"n":"f"}]}],[5,"with_round_rectangle_tri_list","","Streams a round rectangle.",null,{"i":[{"n":"resolution"},{"n":"matrix2d"},{"n":"rectangle"},{"n":"radius"},{"n":"f"}]}],[5,"stream_polygon_tri_list","","Streams a polygon into tri list. Uses buffers that fit inside L1 cache.",null,{"i":[{"n":"matrix2d"},{"n":"e"},{"n":"f"}]}],[5,"with_ellipse_border_tri_list","","Streams an ellipse border specified by a resolution.",null,{"i":[{"n":"resolution"},{"n":"matrix2d"},{"n":"rectangle"},{"n":"radius"},{"n":"f"}]}],[5,"with_arc_tri_list","","Streams an arc between the two radian boundaries.",null,{"i":[{"n":"scalar"},{"n":"scalar"},{"n":"resolution"},{"n":"matrix2d"},{"n":"rectangle"},{"n":"radius"},{"n":"f"}]}],[5,"with_round_rectangle_border_tri_list","","Streams a round rectangle border.",null,{"i":[{"n":"resolution"},{"n":"matrix2d"},{"n":"rectangle"},{"n":"radius"},{"n":"radius"},{"n":"f"}]}],[5,"stream_quad_tri_list","","Streams a quad into tri list.",null,{"i":[{"n":"matrix2d"},{"n":"e"},{"n":"f"}]}],[5,"with_polygon_tri_list","","Splits polygon into convex segments. Create a buffer that fits into L1 cache with 1KB overhead.",null,{"i":[{"n":"matrix2d"},{"n":"polygon"},{"n":"f"}]}],[5,"rect_tri_list_xy","","Creates triangle list vertices from rectangle.",null,null],[5,"rect_border_tri_list_xy","","Creates triangle list vertices from rectangle.",null,null],[5,"rect_tri_list_uv","","Creates triangle list texture coords from image.",null,null],[0,"math","graphics","Various methods for computing with vectors.",null,null],[5,"multiply","graphics::math","Multiplies two matrices.",null,null],[5,"dot","","Computes the dot product.",null,null],[5,"cross","","Computes the cross product.",null,null],[5,"add","","Adds two vectors.",null,null],[5,"sub","","Subtracts 'b' from 'a'.",null,null],[5,"cast","","Converts to another vector type.",null,null],[5,"mul","","Multiplies two vectors component wise.",null,null],[5,"mul_scalar","","Multiplies the vector with a scalar.",null,null],[5,"square_len","","Computes the square length of a vector.",null,null],[5,"transform_pos","","Transforms a 2D position through matrix.",null,null],[5,"transform_vec","","Transforms a 2D vector through matrix.",null,null],[5,"perp","","Creates a perpendicular vector.",null,null],[5,"abs_transform","","Transforms from normalized to absolute coordinates.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"matrix2d"}}],[5,"translate","","Creates a translation matrix.",null,{"i":[{"n":"vec2d"}],"o":{"n":"matrix2d"}}],[5,"rotate_radians","","Creates a rotation matrix.",null,{"i":[{"n":"t"}],"o":{"n":"matrix2d"}}],[5,"orient","","Orients x axis to look at point.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"matrix2d"}}],[5,"scale","","Create a scale matrix.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"matrix2d"}}],[5,"shear","","Create a shear matrix.",null,{"i":[{"n":"vec2d"}],"o":{"n":"matrix2d"}}],[5,"identity","","Create an identity matrix.",null,{"o":{"n":"matrix2d"}}],[5,"get_scale","","Extract scale information from matrix.",null,{"i":[{"n":"matrix2d"}],"o":{"n":"vec2d"}}],[5,"separation","","Compute the shortest vector from point to ray. A ray stores starting point and directional vector.",null,{"i":[{"n":"ray"},{"n":"vec2d"}],"o":{"n":"vec2d"}}],[5,"least_separation_4","","Returns the least separation out of four. Each seperation can be computed using `separation` function. The separation returned can be used to solve collision of rectangles.",null,{"i":[{"n":"vec2d"},{"n":"vec2d"},{"n":"vec2d"},{"n":"vec2d"}],"o":{"n":"vec2d"}}],[5,"margin_rectangle","","Shrinks a rectangle by a factor on all sides.",null,{"i":[{"n":"rectangle"},{"n":"t"}],"o":{"n":"rectangle"}}],[5,"relative_rectangle","","Computes a relative rectangle using the rectangle as a tile.",null,{"i":[{"n":"rectangle"},{"n":"vec2d"}],"o":{"n":"rectangle"}}],[5,"overlap_rectangle","","Computes overlap between two rectangles. The area of the overlapping rectangle is positive. A shared edge or corner is not considered overlap.",null,{"i":[{"n":"rectangle"},{"n":"rectangle"}],"o":{"g":["rectangle"],"n":"option"}}],[5,"relative_source_rectangle","","Computes a relative source rectangle using the source rectangle as a tile.",null,{"i":[{"n":"sourcerectangle"},{"n":"t"},{"n":"t"}],"o":{"n":"sourcerectangle"}}],[5,"modular_offset","","Computes modular offset safely for numbers.",null,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"area_centroid","","Computes the area and centroid of a simple polygon.",null,null],[5,"area","","Computes area of a simple polygon.",null,{"i":[{"n":"polygon"}],"o":{"n":"t"}}],[5,"centroid","","Computes centroid of a simple polygon.",null,{"i":[{"n":"polygon"}],"o":{"n":"vec2d"}}],[5,"line_side","","Returns a number that tells which side it is relative to a line.",null,{"i":[{"n":"line"},{"n":"vec2d"}],"o":{"n":"t"}}],[5,"inside_triangle","","Returns true if point is inside triangle.",null,{"i":[{"n":"triangle"},{"n":"vec2d"}],"o":{"n":"bool"}}],[5,"triangle_face","","Returns true if triangle is clockwise.",null,{"i":[{"n":"triangle"}],"o":{"n":"bool"}}],[5,"to_barycentric","","Transforms from cartesian coordinates to barycentric.",null,{"i":[{"n":"triangle"},{"n":"vec2d"}],"o":{"n":"vec3d"}}],[5,"from_barycentric","","Transforms from barycentric coordinates to cartesian.",null,{"i":[{"n":"triangle"},{"n":"vec3d"}],"o":{"n":"vec2d"}}],[5,"hsv","","Transform color with hue, saturation and value.",null,{"i":[{"n":"color"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"color"}}],[6,"Scalar","","The type used for scalars.",null,null],[6,"Matrix2d","","The type used for matrices.",null,null],[6,"Vec2d","","The type used for 2D vectors.",null,null],[6,"Vec3d","","The type used for 3D vectors.",null,null],[0,"deform","graphics","Least square deforming of a 2D grid.",null,null],[3,"DeformGrid","graphics::deform","Represents a deformed grid.",null,null],[12,"cols","","The number of columns in the grid.",19,null],[12,"rows","","The number of rows in the grid.",19,null],[12,"rect","","The grid undeformed, which is a plain rectangle.",19,null],[12,"vertices","","The vertices, deformed.",19,null],[12,"indices","","The triangle indices.",19,null],[12,"texture_coords","","The texture coordinates.",19,null],[12,"ps","","Initial position of control points.",19,null],[12,"qs","","The current position of control points.",19,null],[12,"wis","","A weight computation buffer, one for each control point.",19,null],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"deformgrid"}}],[11,"new","","Creates a new DeformGrid.",19,{"i":[{"n":"rectangle"},{"n":"usize"},{"n":"usize"}],"o":{"n":"deformgrid"}}],[11,"set_current","","Sets current control position.",19,{"i":[{"n":"self"},{"n":"usize"},{"n":"vec2d"}]}],[11,"set_original","","Sets original control position.",19,{"i":[{"n":"self"},{"n":"usize"},{"n":"vec2d"}]}],[11,"reset_control_points","","Removes all control points.",19,{"i":[{"n":"self"}]}],[11,"reset_vertices_and_texture_coords","","Sets vertices and texture coords back to default.",19,{"i":[{"n":"self"}]}],[11,"hit","","Finds original coordinate. If the deformed grid is overlapping itself, multiple hits might occur. Returns the first hit it finds.",19,{"i":[{"n":"self"},{"n":"vec2d"}],"o":{"g":["vec2d"],"n":"option"}}],[11,"draw_image","","Draws deformed image using default method.",19,null],[11,"draw_image_tri","","Draws deformed image using triangulation.",19,null],[11,"add_control_point","","Adds a control point, in original coordinates.",19,{"i":[{"n":"self"},{"n":"vec2d"}]}],[11,"draw_vertical_lines","","Draw vertical grid lines.",19,{"i":[{"n":"self"},{"n":"line"},{"n":"drawstate"},{"n":"matrix2d"},{"n":"g"}]}],[11,"draw_horizontal_lines","","Draw horizontal grid lines.",19,{"i":[{"n":"self"},{"n":"line"},{"n":"drawstate"},{"n":"matrix2d"},{"n":"g"}]}],[11,"update","","Updates the grid, by deforming the vertices.",19,{"i":[{"n":"self"}]}],[0,"grid","graphics","A flat grid with square cells.",null,null],[3,"Grid","graphics::grid","Represents a flat grid with square cells.",null,null],[12,"cols","","Number of columns.",20,null],[12,"rows","","Number of rows.",20,null],[12,"units","","The width and height of each grid cell.",20,null],[3,"GridCells","","Iterates through the cells of a grid as (u32, u32).",null,null],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"grid"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"gridcells"}}],[11,"draw","","Draws the grid.",20,{"i":[{"n":"self"},{"n":"line"},{"n":"drawstate"},{"n":"matrix2d"},{"n":"g"}]}],[11,"cells","","Get a GridIterator for the grid",20,{"i":[{"n":"self"}],"o":{"n":"gridcells"}}],[11,"cell_position","","Get on-screen position of a grid cell",20,null],[11,"x_pos","","Get on-screen x position of a grid cell",20,null],[11,"y_pos","","Get on-screen y position of a grid cell",20,null],[11,"next","","",21,{"i":[{"n":"self"}],"o":{"n":"option"}}],[0,"glyph_cache","graphics","Implementations of the `CharacterCache` trait.",null,null],[0,"rusttype","graphics::glyph_cache","Glyph caching using the RustType library.",null,null],[3,"GlyphCache","graphics::glyph_cache::rusttype","A struct used for caching rendered font.",null,null],[12,"font","","The font.",22,null],[12,"factory","","The factory used to create textures.",22,null],[11,"from_font","","Constructs a GlyphCache from a Font.",22,{"i":[{"n":"font"},{"n":"f"},{"n":"texturesettings"}],"o":{"n":"self"}}],[11,"new","","Constructor for a GlyphCache.",22,{"i":[{"n":"p"},{"n":"f"},{"n":"texturesettings"}],"o":{"g":["glyphcache"],"n":"result"}}],[11,"from_bytes","","Creates a GlyphCache for a font stored in memory.",22,null],[11,"preload_chars","","Load all characters in the `chars` iterator for `size`",22,{"i":[{"n":"self"},{"n":"fontsize"},{"n":"i"}],"o":{"n":"result"}}],[11,"preload_printable_ascii","","Load all the printable ASCII characters for `size`. Includes space.",22,{"i":[{"n":"self"},{"n":"fontsize"}],"o":{"n":"result"}}],[11,"opt_character","","Return `ch` for `size` if it's already cached. Don't load. See the `preload_*` functions.",22,{"i":[{"n":"self"},{"n":"fontsize"},{"n":"char"}],"o":{"g":["character"],"n":"option"}}],[11,"character","","",22,{"i":[{"n":"self"},{"n":"fontsize"},{"n":"char"}],"o":{"g":["character"],"n":"result"}}],[0,"radians","graphics","Reexport radians helper trait from vecmath",null,null],[8,"Radians","graphics::radians","Useful constants for radians.",null,null],[10,"_90","","Returns radians corresponding to 90 degrees.",23,{"o":{"n":"self"}}],[10,"_180","","Returns radians corresponding to 180 degrees.",23,{"o":{"n":"self"}}],[10,"_360","","Returns radians corresponding to 360 degrees.",23,{"o":{"n":"self"}}],[10,"deg_to_rad","","Convert a value to radians from degrees. Equivalent to `value * (π / 180)`.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"rad_to_deg","","Convert a value to degrees from radians. Equivalent to `value * (180 / π)`.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[17,"BACK_END_MAX_VERTEX_COUNT","graphics","Any triangulation method called on the back-end never exceeds this number of vertices. This can be used to initialize buffers that fit the chunk size.",null,null],[8,"Graphics","","Implemented by all graphics back-ends.",null,null],[16,"Texture","","The texture type associated with the back-end.",24,null],[10,"clear_color","","Clears background with a color.",24,{"i":[{"n":"self"},{"n":"color"}]}],[10,"clear_stencil","","Clears stencil buffer with a value, usually 0.",24,{"i":[{"n":"self"},{"n":"u8"}]}],[10,"tri_list","","Renders list of 2d triangles using a solid color.",24,null],[10,"tri_list_uv","","Renders list of 2d triangles using a color and a texture.",24,null],[11,"rectangle","","Draws a rectangle.",24,{"i":[{"n":"self"},{"n":"rectangle"},{"n":"r"},{"n":"drawstate"},{"n":"matrix2d"}]}],[11,"polygon","","Draws a polygon.",24,{"i":[{"n":"self"},{"n":"polygon"},{"n":"polygon"},{"n":"drawstate"},{"n":"matrix2d"}]}],[11,"polygon_tween_lerp","","Draws a tweened polygon using linear interpolation.",24,{"i":[{"n":"self"},{"n":"polygon"},{"n":"polygons"},{"n":"scalar"},{"n":"drawstate"},{"n":"matrix2d"}]}],[11,"image","","Draws image.",24,null],[11,"ellipse","","Draws ellipse.",24,{"i":[{"n":"self"},{"n":"ellipse"},{"n":"r"},{"n":"drawstate"},{"n":"matrix2d"}]}],[11,"line","","Draws line.",24,{"i":[{"n":"self"},{"n":"line"},{"n":"l"},{"n":"drawstate"},{"n":"matrix2d"}]}],[11,"circle_arc","","Draws circle arc.",24,{"i":[{"n":"self"},{"n":"circlearc"},{"n":"r"},{"n":"drawstate"},{"n":"matrix2d"}]}],[11,"deform_image","","Draws deformed image.",24,null],[8,"SourceRectangled","","Should be implemented by contexts that have source rectangle information.",null,null],[10,"src_rect","","Adds a source rectangle.",25,{"i":[{"n":"self"},{"n":"scalar"},{"n":"scalar"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"self"}}],[10,"src_rel","","Moves to a relative source rectangle using the current source rectangle as tile.",25,{"i":[{"n":"self"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"self"}}],[10,"src_flip_h","","Flips the source rectangle horizontally.",25,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"src_flip_v","","Flips the source rectangle vertically.",25,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"src_flip_hv","","Flips the source rectangle horizontally and vertically.",25,{"i":[{"n":"self"}],"o":{"n":"self"}}],[8,"Rectangled","","Should be implemented by contexts that have rectangle information.",null,null],[10,"margin","","Shrinks the current rectangle equally by all sides.",26,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"expand","","Expands the current rectangle equally by all sides.",26,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[10,"rel","","Moves to a relative rectangle using the current rectangle as tile.",26,{"i":[{"n":"self"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"self"}}],[8,"Transformed","","Implemented by contexts that can transform.",null,null],[10,"append_transform","","Appends transform to the current one.",27,{"i":[{"n":"self"},{"n":"matrix2d"}],"o":{"n":"self"}}],[10,"prepend_transform","","Prepends transform to the current one.",27,{"i":[{"n":"self"},{"n":"matrix2d"}],"o":{"n":"self"}}],[10,"trans","","Translate x and y in local coordinates.",27,{"i":[{"n":"self"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"rot_deg","","Rotates degrees in local coordinates.",27,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[10,"rot_rad","","Rotate radians in local coordinates.",27,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[10,"orient","","Orients x axis to look at point locally.",27,{"i":[{"n":"self"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"self"}}],[10,"scale","","Scales in local coordinates.",27,{"i":[{"n":"self"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"zoom","","Scales in both directions in local coordinates.",27,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"flip_v","","Flips vertically in local coordinates.",27,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"flip_h","","Flips horizontally in local coordinates.",27,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"flip_hv","","Flips horizontally and vertically in local coordinates.",27,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"shear","","Shears in local coordinates.",27,{"i":[{"n":"self"},{"n":"vec2d"}],"o":{"n":"self"}}],[8,"Colored","","Implemented by contexts that contains color.",null,null],[10,"mul_rgba","","Multiplies with red, green, blue and alpha values.",28,{"i":[{"n":"self"},{"n":"colorcomponent"},{"n":"colorcomponent"},{"n":"colorcomponent"},{"n":"colorcomponent"}],"o":{"n":"self"}}],[11,"tint","","Mixes the current color with white.",28,{"i":[{"n":"self"},{"n":"colorcomponent"}],"o":{"n":"self"}}],[11,"shade","","Mixes the current color with black.",28,{"i":[{"n":"self"},{"n":"colorcomponent"}],"o":{"n":"self"}}],[11,"hue_deg","","Rotates hue by degrees.",28,{"i":[{"n":"self"},{"n":"colorcomponent"}],"o":{"n":"self"}}],[10,"hue_rad","","Rotates hue by radians.",28,{"i":[{"n":"self"},{"n":"colorcomponent"}],"o":{"n":"self"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"viewport"}}],[11,"abs_transform","","Computes absolute transform for 2D graphics, which uses a row major 2x3 matrix. The origin is in the upper left corner of the viewport rectangle. The x axis points to the right, and the y axis points down. The units are in points (window coordinates).",1,null],[11,"rectangle","","Draws a rectangle.",24,{"i":[{"n":"self"},{"n":"rectangle"},{"n":"r"},{"n":"drawstate"},{"n":"matrix2d"}]}],[11,"polygon","","Draws a polygon.",24,{"i":[{"n":"self"},{"n":"polygon"},{"n":"polygon"},{"n":"drawstate"},{"n":"matrix2d"}]}],[11,"polygon_tween_lerp","","Draws a tweened polygon using linear interpolation.",24,{"i":[{"n":"self"},{"n":"polygon"},{"n":"polygons"},{"n":"scalar"},{"n":"drawstate"},{"n":"matrix2d"}]}],[11,"image","","Draws image.",24,null],[11,"ellipse","","Draws ellipse.",24,{"i":[{"n":"self"},{"n":"ellipse"},{"n":"r"},{"n":"drawstate"},{"n":"matrix2d"}]}],[11,"line","","Draws line.",24,{"i":[{"n":"self"},{"n":"line"},{"n":"l"},{"n":"drawstate"},{"n":"matrix2d"}]}],[11,"circle_arc","","Draws circle arc.",24,{"i":[{"n":"self"},{"n":"circlearc"},{"n":"r"},{"n":"drawstate"},{"n":"matrix2d"}]}],[11,"deform_image","","Draws deformed image.",24,null],[11,"src_rect","graphics::types","",29,{"i":[{"n":"self"},{"n":"scalar"},{"n":"scalar"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"src_rel","","",29,{"i":[{"n":"self"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"src_flip_h","","",29,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"src_flip_v","","",29,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"src_flip_hv","","",29,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"expand","graphics","Expands the current rectangle equally by all sides.",26,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"margin","graphics::types","",30,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"rel","","",30,{"i":[{"n":"self"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"rot_deg","graphics","Rotates degrees in local coordinates.",27,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"zoom","","Scales in both directions in local coordinates.",27,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"flip_v","","Flips vertically in local coordinates.",27,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"flip_h","","Flips horizontally in local coordinates.",27,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"flip_hv","","Flips horizontally and vertically in local coordinates.",27,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"append_transform","graphics::math","",31,{"i":[{"n":"self"},{"n":"matrix2d"}],"o":{"n":"self"}}],[11,"prepend_transform","","",31,{"i":[{"n":"self"},{"n":"matrix2d"}],"o":{"n":"self"}}],[11,"trans","","",31,{"i":[{"n":"self"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"rot_rad","","",31,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"orient","","",31,{"i":[{"n":"self"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"scale","","",31,{"i":[{"n":"self"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"shear","","",31,{"i":[{"n":"self"},{"n":"vec2d"}],"o":{"n":"self"}}],[11,"append_transform","graphics::context","",7,{"i":[{"n":"self"},{"n":"matrix2d"}],"o":{"n":"self"}}],[11,"prepend_transform","","",7,{"i":[{"n":"self"},{"n":"matrix2d"}],"o":{"n":"self"}}],[11,"trans","","",7,{"i":[{"n":"self"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"rot_rad","","",7,{"i":[{"n":"self"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"orient","","",7,{"i":[{"n":"self"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"scale","","",7,{"i":[{"n":"self"},{"n":"scalar"},{"n":"scalar"}],"o":{"n":"self"}}],[11,"shear","","",7,{"i":[{"n":"self"},{"n":"vec2d"}],"o":{"n":"self"}}],[11,"tint","graphics","Mixes the current color with white.",28,{"i":[{"n":"self"},{"n":"colorcomponent"}],"o":{"n":"self"}}],[11,"shade","","Mixes the current color with black.",28,{"i":[{"n":"self"},{"n":"colorcomponent"}],"o":{"n":"self"}}],[11,"hue_deg","","Rotates hue by degrees.",28,{"i":[{"n":"self"},{"n":"colorcomponent"}],"o":{"n":"self"}}],[11,"mul_rgba","graphics::types","",32,{"i":[{"n":"self"},{"n":"colorcomponent"},{"n":"colorcomponent"},{"n":"colorcomponent"},{"n":"colorcomponent"}],"o":{"n":"self"}}],[11,"hue_rad","","",32,{"i":[{"n":"self"},{"n":"colorcomponent"}],"o":{"n":"self"}}],[11,"mul_rgba","graphics::line","",9,{"i":[{"n":"self"},{"n":"colorcomponent"},{"n":"colorcomponent"},{"n":"colorcomponent"},{"n":"colorcomponent"}],"o":{"n":"self"}}],[11,"hue_rad","","",9,{"i":[{"n":"self"},{"n":"colorcomponent"}],"o":{"n":"self"}}],[11,"mul_rgba","graphics::ellipse","",13,{"i":[{"n":"self"},{"n":"colorcomponent"},{"n":"colorcomponent"},{"n":"colorcomponent"},{"n":"colorcomponent"}],"o":{"n":"self"}}],[11,"hue_rad","","",13,{"i":[{"n":"self"},{"n":"colorcomponent"}],"o":{"n":"self"}}],[11,"mul_rgba","graphics::rectangle","",15,{"i":[{"n":"self"},{"n":"colorcomponent"},{"n":"colorcomponent"},{"n":"colorcomponent"},{"n":"colorcomponent"}],"o":{"n":"self"}}],[11,"hue_rad","","",15,{"i":[{"n":"self"},{"n":"colorcomponent"}],"o":{"n":"self"}}]],"paths":[[8,"ImageSize"],[3,"Viewport"],[3,"DrawState"],[4,"Blend"],[4,"Stencil"],[3,"Character"],[8,"CharacterCache"],[3,"Context"],[3,"Polygon"],[3,"Line"],[4,"Shape"],[3,"CircleArc"],[3,"Border"],[3,"Ellipse"],[3,"Border"],[3,"Rectangle"],[4,"Shape"],[3,"Image"],[3,"Text"],[3,"DeformGrid"],[3,"Grid"],[3,"GridCells"],[3,"GlyphCache"],[8,"Radians"],[8,"Graphics"],[8,"SourceRectangled"],[8,"Rectangled"],[8,"Transformed"],[8,"Colored"],[6,"SourceRectangle"],[6,"Rectangle"],[6,"Matrix2d"],[6,"Color"]]};
searchIndex["input"] = {"doc":"A flexible structure for user interactions to be used in window frameworks and widgets libraries.","items":[[3,"AfterRenderArgs","input","After render arguments.",null,null],[3,"CloseArgs","","Close arguments.",null,null],[3,"IdleArgs","","Idle arguments, such as expected idle time in seconds.",null,null],[12,"dt","","Expected idle time in seconds.",0,null],[3,"ButtonArgs","","Button arguments",null,null],[12,"state","","New state of the button.",1,null],[12,"button","","The button that changed state.",1,null],[12,"scancode","","An optional scancode that tells the physical layout of a keyboard key. For other devices than keyboard, this is set to `None`.",1,null],[3,"RenderArgs","","Render arguments",null,null],[12,"ext_dt","","Extrapolated time in seconds, used to do smooth animation.",2,null],[12,"width","","The width of rendered area in points.",2,null],[12,"height","","The height of rendered area in points.",2,null],[12,"draw_width","","The width of rendered area in pixels.",2,null],[12,"draw_height","","The height of rendered area in pixels.",2,null],[3,"TouchArgs","","Touch arguments",null,null],[12,"device","","A unique identifier for touch device.",3,null],[12,"id","","A unique identifier for touch event.",3,null],[12,"x","","The x coordinate of the touch position, normalized 0..1.",3,null],[12,"y","","The y coordinate of the touch position, normalized 0..1.",3,null],[12,"z","","The z coordinate of the touch position, normalized 0..1.",3,null],[12,"px","","The x coordinate of the touch pressure direction.",3,null],[12,"py","","The y coordinate of the touch pressure direction.",3,null],[12,"pz","","The z coordinate of the touch pressure direction.",3,null],[12,"is_3d","","Whether the touch is in 3D.",3,null],[12,"touch","","The touch state.",3,null],[3,"UpdateArgs","","Update arguments, such as delta time in seconds",null,null],[12,"dt","","Delta time in seconds.",4,null],[3,"EventId","","Used to identify events arguments provided by traits.",null,null],[12,"0","","",5,null],[4,"ButtonState","","Stores button state.",null,null],[13,"Press","","Button was pressed.",6,null],[13,"Release","","Button was released.",6,null],[4,"Touch","","Stores the touch state.",null,null],[13,"Start","","The start of touch, for example a finger pressed down on a touch screen.",7,null],[13,"Move","","The move of touch, for example a finger moving while touching a touch screen.",7,null],[13,"End","","The end of touch, for example taking a finger away from a touch screen.",7,null],[13,"Cancel","","The cancel of touch, for example the window loses focus.",7,null],[4,"Button","","Models different kinds of buttons.",null,null],[13,"Keyboard","","A keyboard button.",8,null],[13,"Mouse","","A mouse button.",8,null],[13,"Controller","","A controller button.",8,null],[13,"Hat","","A controller hat (d-Pad)",8,null],[4,"Motion","","Models different kinds of motion.",null,null],[13,"MouseCursor","","x and y in window coordinates.",9,null],[13,"MouseRelative","","x and y in relative coordinates.",9,null],[13,"MouseScroll","","x and y in scroll ticks.",9,null],[13,"ControllerAxis","","controller axis move event.",9,null],[13,"Touch","","touch event.",9,null],[4,"HatState","","",null,null],[13,"Centered","","",10,null],[13,"Up","","",10,null],[13,"Right","","",10,null],[13,"Down","","",10,null],[13,"Left","","",10,null],[13,"RightUp","","",10,null],[13,"RightDown","","",10,null],[13,"LeftUp","","",10,null],[13,"LeftDown","","",10,null],[4,"Input","","Models input events.",null,null],[13,"Button","","Changed button state.",11,null],[13,"Move","","Moved mouse cursor.",11,null],[13,"Text","","Text (usually from keyboard).",11,null],[13,"Resize","","Window got resized.",11,null],[13,"Focus","","Window gained or lost focus.",11,null],[13,"Cursor","","Window gained or lost cursor.",11,null],[13,"Close","","Window closed.",11,null],[4,"Loop","","Models loop events.",null,null],[13,"Render","","Render graphics.",12,null],[13,"AfterRender","","After rendering and swapping buffers.",12,null],[13,"Update","","Update the state of the application.",12,null],[13,"Idle","","Do background tasks that can be done incrementally.",12,null],[4,"Event","","Models all events.",null,null],[13,"Input","","Input events.",13,null],[13,"Loop","","Events that commonly used by event loops.",13,null],[13,"Custom","","Custom event.",13,null],[0,"controller","","Back-end agnostic controller events.",null,null],[3,"ControllerButton","input::controller","Components of a controller button event. Not guaranteed consistent across backends.",null,null],[12,"id","","Which controller was the button on.",14,null],[12,"button","","Which button was pressed.",14,null],[3,"ControllerHat","","Components of a controller hat move event (d-Pad).",null,null],[12,"id","","Which Controller was the button on.",15,null],[12,"state","","Which button was pressed.",15,null],[12,"which","","Which hat on the controller was changed",15,null],[3,"ControllerAxisArgs","","Components of a controller axis move event. Not guaranteed consistent across backends.",null,null],[12,"id","","Which controller moved.",16,null],[12,"axis","","The axis that moved.",16,null],[12,"position","","Position of the controller. Usually [-1.0, 1.0], though backends may use a different range for various devices.",16,null],[8,"ControllerAxisEvent","","The position of a controller axis changed.",null,null],[10,"from_controller_axis_args","","Creates a controller axis event.",17,{"i":[{"n":"controlleraxisargs"},{"n":"self"}],"o":{"n":"option"}}],[10,"controller_axis","","Calls closure if this is a controller axis event.",17,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"controller_axis_args","","Returns controller axis arguments.",17,{"i":[{"n":"self"}],"o":{"g":["controlleraxisargs"],"n":"option"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"controllerbutton"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"controllerbutton"}],"o":{"n":"bool"}}],[11,"ne","","",14,{"i":[{"n":"self"},{"n":"controllerbutton"}],"o":{"n":"bool"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",14,null],[11,"new","","Create a new ControllerButton object. Intended for use by backends when emitting events.",14,{"i":[{"n":"i32"},{"n":"u8"}],"o":{"n":"self"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"controllerhat"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"controllerhat"}],"o":{"n":"bool"}}],[11,"ne","","",15,{"i":[{"n":"self"},{"n":"controllerhat"}],"o":{"n":"bool"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",15,null],[11,"new","","Create a new ControllerButton object. Intended for use by backends when emitting events.",15,{"i":[{"n":"i32"},{"n":"u8"},{"n":"hatstate"}],"o":{"n":"self"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"controlleraxisargs"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"controlleraxisargs"}],"o":{"n":"bool"}}],[11,"ne","","",16,{"i":[{"n":"self"},{"n":"controlleraxisargs"}],"o":{"n":"bool"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new ControllerAxisArgs object. Intended for use by backends when emitting events.",16,{"i":[{"n":"i32"},{"n":"u8"},{"n":"f64"}],"o":{"n":"self"}}],[11,"from_controller_axis_args","input","",13,{"i":[{"n":"controlleraxisargs"},{"n":"self"}],"o":{"n":"option"}}],[11,"controller_axis","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[0,"keyboard","","Back-end agnostic keyboard keys.",null,null],[3,"ModifierKey","input::keyboard","",null,null],[4,"Key","","Represent a keyboard key. Keycodes follows SDL http://wiki.libsdl.org/SDLKeycodeLookup",null,null],[13,"Unknown","","",18,null],[13,"Backspace","","",18,null],[13,"Tab","","",18,null],[13,"Return","","",18,null],[13,"Escape","","",18,null],[13,"Space","","",18,null],[13,"Exclaim","","",18,null],[13,"Quotedbl","","",18,null],[13,"Hash","","",18,null],[13,"Dollar","","",18,null],[13,"Percent","","",18,null],[13,"Ampersand","","",18,null],[13,"Quote","","",18,null],[13,"LeftParen","","",18,null],[13,"RightParen","","",18,null],[13,"Asterisk","","",18,null],[13,"Plus","","",18,null],[13,"Comma","","",18,null],[13,"Minus","","",18,null],[13,"Period","","",18,null],[13,"Slash","","",18,null],[13,"D0","","",18,null],[13,"D1","","",18,null],[13,"D2","","",18,null],[13,"D3","","",18,null],[13,"D4","","",18,null],[13,"D5","","",18,null],[13,"D6","","",18,null],[13,"D7","","",18,null],[13,"D8","","",18,null],[13,"D9","","",18,null],[13,"Colon","","",18,null],[13,"Semicolon","","",18,null],[13,"Less","","",18,null],[13,"Equals","","",18,null],[13,"Greater","","",18,null],[13,"Question","","",18,null],[13,"At","","",18,null],[13,"LeftBracket","","",18,null],[13,"Backslash","","",18,null],[13,"RightBracket","","",18,null],[13,"Caret","","",18,null],[13,"Underscore","","",18,null],[13,"Backquote","","",18,null],[13,"A","","",18,null],[13,"B","","",18,null],[13,"C","","",18,null],[13,"D","","",18,null],[13,"E","","",18,null],[13,"F","","",18,null],[13,"G","","",18,null],[13,"H","","",18,null],[13,"I","","",18,null],[13,"J","","",18,null],[13,"K","","",18,null],[13,"L","","",18,null],[13,"M","","",18,null],[13,"N","","",18,null],[13,"O","","",18,null],[13,"P","","",18,null],[13,"Q","","",18,null],[13,"R","","",18,null],[13,"S","","",18,null],[13,"T","","",18,null],[13,"U","","",18,null],[13,"V","","",18,null],[13,"W","","",18,null],[13,"X","","",18,null],[13,"Y","","",18,null],[13,"Z","","",18,null],[13,"Delete","","",18,null],[13,"CapsLock","","",18,null],[13,"F1","","",18,null],[13,"F2","","",18,null],[13,"F3","","",18,null],[13,"F4","","",18,null],[13,"F5","","",18,null],[13,"F6","","",18,null],[13,"F7","","",18,null],[13,"F8","","",18,null],[13,"F9","","",18,null],[13,"F10","","",18,null],[13,"F11","","",18,null],[13,"F12","","",18,null],[13,"PrintScreen","","",18,null],[13,"ScrollLock","","",18,null],[13,"Pause","","",18,null],[13,"Insert","","",18,null],[13,"Home","","",18,null],[13,"PageUp","","",18,null],[13,"End","","",18,null],[13,"PageDown","","",18,null],[13,"Right","","",18,null],[13,"Left","","",18,null],[13,"Down","","",18,null],[13,"Up","","",18,null],[13,"NumLockClear","","",18,null],[13,"NumPadDivide","","",18,null],[13,"NumPadMultiply","","",18,null],[13,"NumPadMinus","","",18,null],[13,"NumPadPlus","","",18,null],[13,"NumPadEnter","","",18,null],[13,"NumPad1","","",18,null],[13,"NumPad2","","",18,null],[13,"NumPad3","","",18,null],[13,"NumPad4","","",18,null],[13,"NumPad5","","",18,null],[13,"NumPad6","","",18,null],[13,"NumPad7","","",18,null],[13,"NumPad8","","",18,null],[13,"NumPad9","","",18,null],[13,"NumPad0","","",18,null],[13,"NumPadPeriod","","",18,null],[13,"Application","","",18,null],[13,"Power","","",18,null],[13,"NumPadEquals","","",18,null],[13,"F13","","",18,null],[13,"F14","","",18,null],[13,"F15","","",18,null],[13,"F16","","",18,null],[13,"F17","","",18,null],[13,"F18","","",18,null],[13,"F19","","",18,null],[13,"F20","","",18,null],[13,"F21","","",18,null],[13,"F22","","",18,null],[13,"F23","","",18,null],[13,"F24","","",18,null],[13,"Execute","","",18,null],[13,"Help","","",18,null],[13,"Menu","","",18,null],[13,"Select","","",18,null],[13,"Stop","","",18,null],[13,"Again","","",18,null],[13,"Undo","","",18,null],[13,"Cut","","",18,null],[13,"Copy","","",18,null],[13,"Paste","","",18,null],[13,"Find","","",18,null],[13,"Mute","","",18,null],[13,"VolumeUp","","",18,null],[13,"VolumeDown","","",18,null],[13,"NumPadComma","","",18,null],[13,"NumPadEqualsAS400","","",18,null],[13,"AltErase","","",18,null],[13,"Sysreq","","",18,null],[13,"Cancel","","",18,null],[13,"Clear","","",18,null],[13,"Prior","","",18,null],[13,"Return2","","",18,null],[13,"Separator","","",18,null],[13,"Out","","",18,null],[13,"Oper","","",18,null],[13,"ClearAgain","","",18,null],[13,"CrSel","","",18,null],[13,"ExSel","","",18,null],[13,"NumPad00","","",18,null],[13,"NumPad000","","",18,null],[13,"ThousandsSeparator","","",18,null],[13,"DecimalSeparator","","",18,null],[13,"CurrencyUnit","","",18,null],[13,"CurrencySubUnit","","",18,null],[13,"NumPadLeftParen","","",18,null],[13,"NumPadRightParen","","",18,null],[13,"NumPadLeftBrace","","",18,null],[13,"NumPadRightBrace","","",18,null],[13,"NumPadTab","","",18,null],[13,"NumPadBackspace","","",18,null],[13,"NumPadA","","",18,null],[13,"NumPadB","","",18,null],[13,"NumPadC","","",18,null],[13,"NumPadD","","",18,null],[13,"NumPadE","","",18,null],[13,"NumPadF","","",18,null],[13,"NumPadXor","","",18,null],[13,"NumPadPower","","",18,null],[13,"NumPadPercent","","",18,null],[13,"NumPadLess","","",18,null],[13,"NumPadGreater","","",18,null],[13,"NumPadAmpersand","","",18,null],[13,"NumPadDblAmpersand","","",18,null],[13,"NumPadVerticalBar","","",18,null],[13,"NumPadDblVerticalBar","","",18,null],[13,"NumPadColon","","",18,null],[13,"NumPadHash","","",18,null],[13,"NumPadSpace","","",18,null],[13,"NumPadAt","","",18,null],[13,"NumPadExclam","","",18,null],[13,"NumPadMemStore","","",18,null],[13,"NumPadMemRecall","","",18,null],[13,"NumPadMemClear","","",18,null],[13,"NumPadMemAdd","","",18,null],[13,"NumPadMemSubtract","","",18,null],[13,"NumPadMemMultiply","","",18,null],[13,"NumPadMemDivide","","",18,null],[13,"NumPadPlusMinus","","",18,null],[13,"NumPadClear","","",18,null],[13,"NumPadClearEntry","","",18,null],[13,"NumPadBinary","","",18,null],[13,"NumPadOctal","","",18,null],[13,"NumPadDecimal","","",18,null],[13,"NumPadHexadecimal","","",18,null],[13,"LCtrl","","",18,null],[13,"LShift","","",18,null],[13,"LAlt","","",18,null],[13,"LGui","","",18,null],[13,"RCtrl","","",18,null],[13,"RShift","","",18,null],[13,"RAlt","","",18,null],[13,"RGui","","",18,null],[13,"Mode","","",18,null],[13,"AudioNext","","",18,null],[13,"AudioPrev","","",18,null],[13,"AudioStop","","",18,null],[13,"AudioPlay","","",18,null],[13,"AudioMute","","",18,null],[13,"MediaSelect","","",18,null],[13,"Www","","",18,null],[13,"Mail","","",18,null],[13,"Calculator","","",18,null],[13,"Computer","","",18,null],[13,"AcSearch","","",18,null],[13,"AcHome","","",18,null],[13,"AcBack","","",18,null],[13,"AcForward","","",18,null],[13,"AcStop","","",18,null],[13,"AcRefresh","","",18,null],[13,"AcBookmarks","","",18,null],[13,"BrightnessDown","","",18,null],[13,"BrightnessUp","","",18,null],[13,"DisplaySwitch","","",18,null],[13,"KbdIllumToggle","","",18,null],[13,"KbdIllumDown","","",18,null],[13,"KbdIllumUp","","",18,null],[13,"Eject","","",18,null],[13,"Sleep","","",18,null],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"ne","","",19,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"modifierkey"}}],[11,"partial_cmp","","",19,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",19,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"le","","",19,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"gt","","",19,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"ge","","",19,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"cmp","","",19,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"ordering"}}],[11,"hash","","",19,null],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"NO_MODIFIER","","No modifier.",19,null],[18,"CTRL","","Ctrl.",19,null],[18,"SHIFT","","Shift.",19,null],[18,"ALT","","Alt.",19,null],[18,"GUI","","Gui.",19,null],[18,"CTRL_SHIFT","","Ctrl + Shift.",19,null],[18,"CTRL_ALT","","Ctrl + Alt.",19,null],[18,"CTRL_GUI","","Ctrl + Gui.",19,null],[18,"CTRL_SHIFT_ALT","","Ctrl + Shift + Alt.",19,null],[18,"CTRL_SHIFT_GUI","","Ctrl + Shift + Gui.",19,null],[18,"CTRL_SHIFT_ALT_GUI","","Ctrl + Shift + Alt + Gui.",19,null],[18,"SHIFT_ALT","","Shift + Alt.",19,null],[18,"SHIFT_GUI","","Shift + Gui.",19,null],[18,"SHIFT_ALT_GUI","","Shift + Alt + Gui.",19,null],[18,"ALT_GUI","","Alt + Gui.",19,null],[11,"empty","","Returns an empty set of flags.",19,{"o":{"n":"modifierkey"}}],[11,"all","","Returns the set containing all flags.",19,{"o":{"n":"modifierkey"}}],[11,"bits","","Returns the raw value of the flags currently stored.",19,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",19,{"i":[{"n":"u8"}],"o":{"g":["modifierkey"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",19,{"i":[{"n":"u8"}],"o":{"n":"modifierkey"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",19,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",19,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",19,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",19,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",19,{"i":[{"n":"self"},{"n":"modifierkey"}]}],[11,"remove","","Removes the specified flags in-place.",19,{"i":[{"n":"self"},{"n":"modifierkey"}]}],[11,"toggle","","Toggles the specified flags in-place.",19,{"i":[{"n":"self"},{"n":"modifierkey"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",19,{"i":[{"n":"self"},{"n":"modifierkey"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",19,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"modifierkey"}}],[11,"bitor_assign","","Adds the set of flags.",19,{"i":[{"n":"self"},{"n":"modifierkey"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",19,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"modifierkey"}}],[11,"bitxor_assign","","Toggles the set of flags.",19,{"i":[{"n":"self"},{"n":"modifierkey"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",19,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"modifierkey"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",19,{"i":[{"n":"self"},{"n":"modifierkey"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",19,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"modifierkey"}}],[11,"sub_assign","","Disables all flags enabled in the set.",19,{"i":[{"n":"self"},{"n":"modifierkey"}]}],[11,"not","","Returns the complement of this set of flags.",19,{"i":[{"n":"self"}],"o":{"n":"modifierkey"}}],[11,"extend","","",19,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",19,{"i":[{"n":"t"}],"o":{"n":"modifierkey"}}],[11,"event","","Change modifier key state depending on input.",19,{"i":[{"n":"self"},{"n":"e"}]}],[11,"default","","",19,{"o":{"n":"modifierkey"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"key"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",18,null],[11,"from","","",18,{"i":[{"n":"u32"}],"o":{"n":"key"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"key"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",18,{"i":[{"n":"self"},{"n":"key"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",18,{"i":[{"n":"self"},{"n":"key"}],"o":{"n":"ordering"}}],[11,"code","","Returns an id of the key",18,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[0,"mouse","input","Back-end agnostic mouse buttons.",null,null],[4,"MouseButton","input::mouse","Represent a mouse button.",null,null],[13,"Unknown","","Unknown mouse button.",20,null],[13,"Left","","Left mouse button.",20,null],[13,"Right","","Right mouse button.",20,null],[13,"Middle","","Middle mouse button.",20,null],[13,"X1","","Extra mouse button number 1.",20,null],[13,"X2","","Extra mouse button number 2.",20,null],[13,"Button6","","Mouse button number 6.",20,null],[13,"Button7","","Mouse button number 7.",20,null],[13,"Button8","","Mouse button number 8.",20,null],[8,"MouseCursorEvent","","The position of the mouse cursor",null,null],[10,"from_xy","","Creates a mouse cursor event.",21,{"i":[{"n":"f64"},{"n":"f64"},{"n":"self"}],"o":{"n":"option"}}],[10,"mouse_cursor","","Calls closure if this is a mouse cursor event.",21,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"mouse_cursor_args","","Returns mouse cursor arguments.",21,{"i":[{"n":"self"}],"o":{"n":"option"}}],[8,"MouseRelativeEvent","","The relative movement of mouse cursor",null,null],[10,"from_xy","","Creates a mouse relative event.",22,{"i":[{"n":"f64"},{"n":"f64"},{"n":"self"}],"o":{"n":"option"}}],[10,"mouse_relative","","Calls closure if this is a mouse relative event.",22,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"mouse_relative_args","","Returns mouse relative arguments.",22,{"i":[{"n":"self"}],"o":{"n":"option"}}],[8,"MouseScrollEvent","","The scroll of the mouse wheel",null,null],[10,"from_xy","","Creates a mouse scroll event.",23,{"i":[{"n":"f64"},{"n":"f64"},{"n":"self"}],"o":{"n":"option"}}],[10,"mouse_scroll","","Calls a closure if this is a mouse scroll event.",23,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"mouse_scroll_args","","Returns mouse scroll arguments.",23,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"mousebutton"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"mousebutton"}],"o":{"n":"bool"}}],[11,"cmp","","",20,{"i":[{"n":"self"},{"n":"mousebutton"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",20,{"i":[{"n":"self"},{"n":"mousebutton"}],"o":{"g":["ordering"],"n":"option"}}],[11,"hash","","",20,null],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",20,{"i":[{"n":"u32"}],"o":{"n":"mousebutton"}}],[11,"from_xy","input","",13,{"i":[{"n":"f64"},{"n":"f64"},{"n":"self"}],"o":{"n":"option"}}],[11,"mouse_cursor","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"from_xy","","",13,{"i":[{"n":"f64"},{"n":"f64"},{"n":"self"}],"o":{"n":"option"}}],[11,"mouse_relative","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"from_xy","","",13,{"i":[{"n":"f64"},{"n":"f64"},{"n":"self"}],"o":{"n":"option"}}],[11,"mouse_scroll","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[0,"generic_event","","Trait for generic events",null,null],[8,"GenericEvent","input::generic_event","Implemented by all events",null,null],[10,"event_id","","The id of this event.",24,{"i":[{"n":"self"}],"o":{"n":"eventid"}}],[10,"with_args","","Calls closure with arguments",24,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"u"}}],[11,"event_id","input","",13,{"i":[{"n":"self"}],"o":{"n":"eventid"}}],[11,"with_args","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"u"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"afterrenderargs"}}],[11,"eq","","",25,{"i":[{"n":"self"},{"n":"afterrenderargs"}],"o":{"n":"bool"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_after_render_args","","",13,{"i":[{"n":"afterrenderargs"},{"n":"self"}],"o":{"n":"option"}}],[11,"after_render","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"buttonstate"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"buttonstate"}],"o":{"n":"bool"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"buttonargs"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"buttonargs"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"buttonargs"}],"o":{"n":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_button_args","","",13,{"i":[{"n":"buttonargs"},{"n":"self"}],"o":{"n":"option"}}],[11,"button","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"closeargs"}}],[11,"eq","","",26,{"i":[{"n":"self"},{"n":"closeargs"}],"o":{"n":"bool"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_close_args","","",13,{"i":[{"n":"closeargs"},{"n":"self"}],"o":{"n":"option"}}],[11,"close","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"from_cursor","","",13,{"i":[{"n":"bool"},{"n":"self"}],"o":{"n":"option"}}],[11,"cursor","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"from_focused","","",13,{"i":[{"n":"bool"},{"n":"self"}],"o":{"n":"option"}}],[11,"focus","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"idleargs"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"idleargs"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"idleargs"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_idle_args","","",13,{"i":[{"n":"idleargs"},{"n":"self"}],"o":{"n":"option"}}],[11,"idle","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"renderargs"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"renderargs"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"renderargs"}],"o":{"n":"bool"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"viewport","","Returns viewport information filling entire render area.",2,{"i":[{"n":"self"}],"o":{"n":"viewport"}}],[11,"from_render_args","","",13,{"i":[{"n":"renderargs"},{"n":"self"}],"o":{"n":"option"}}],[11,"render","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"from_width_height","","",13,{"i":[{"n":"u32"},{"n":"u32"},{"n":"self"}],"o":{"n":"option"}}],[11,"resize","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"from_text","","",13,{"i":[{"n":"str"},{"n":"self"}],"o":{"n":"option"}}],[11,"text","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"touch"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"touch"}],"o":{"n":"bool"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"touchargs"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"touchargs"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"touchargs"}],"o":{"n":"bool"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates arguments for 2D touch.",3,null],[11,"new_3d","","Creates arguments for 3D touch.",3,null],[11,"position","","The position of the touch in 2D.",3,null],[11,"position_3d","","The position of the touch in 3D.",3,null],[11,"pressure","","The pressure magnitude, normalized 0..1.",3,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"pressure_3d","","The pressure vector in 3D.",3,null],[11,"from_touch_args","","",13,{"i":[{"n":"touchargs"},{"n":"self"}],"o":{"n":"option"}}],[11,"touch","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"updateargs"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"updateargs"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"updateargs"}],"o":{"n":"bool"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_update_args","","",13,{"i":[{"n":"updateargs"},{"n":"self"}],"o":{"n":"option"}}],[11,"update","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[8,"AfterRenderEvent","","After rendering and buffers are swapped.",null,null],[10,"from_after_render_args","","Creates an after render event.",27,{"i":[{"n":"afterrenderargs"},{"n":"self"}],"o":{"n":"option"}}],[10,"after_render","","Calls closure if this is an after render event.",27,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"after_render_args","","Returns after render arguments.",27,{"i":[{"n":"self"}],"o":{"g":["afterrenderargs"],"n":"option"}}],[8,"CloseEvent","","Window is closing.",null,null],[10,"from_close_args","","Creates a close event from arguments.",28,{"i":[{"n":"closeargs"},{"n":"self"}],"o":{"n":"option"}}],[10,"close","","Calls closure if this is a close event.",28,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"close_args","","Returns close arguments.",28,{"i":[{"n":"self"}],"o":{"g":["closeargs"],"n":"option"}}],[8,"CursorEvent","","When window gets or loses cursor",null,null],[10,"from_cursor","","Creates a cursor event.",29,{"i":[{"n":"bool"},{"n":"self"}],"o":{"n":"option"}}],[10,"cursor","","Calls closure if this is a cursor event.",29,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"cursor_args","","Returns cursor arguments.",29,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"option"}}],[8,"FocusEvent","","When window gets or loses focus",null,null],[10,"from_focused","","Creates a focus event.",30,{"i":[{"n":"bool"},{"n":"self"}],"o":{"n":"option"}}],[10,"focus","","Calls closure if this is a focus event.",30,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"focus_args","","Returns focus arguments.",30,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"option"}}],[8,"IdleEvent","","When background tasks should be performed",null,null],[10,"from_idle_args","","Creates an idle event.",31,{"i":[{"n":"idleargs"},{"n":"self"}],"o":{"n":"option"}}],[11,"from_dt","","Creates an update event with delta time.",31,{"i":[{"n":"f64"},{"n":"self"}],"o":{"n":"option"}}],[10,"idle","","Calls closure if this is an idle event.",31,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"idle_args","","Returns idle arguments.",31,{"i":[{"n":"self"}],"o":{"g":["idleargs"],"n":"option"}}],[8,"ButtonEvent","","Changed button state.",null,null],[10,"from_button_args","","Creates a button event.",32,{"i":[{"n":"buttonargs"},{"n":"self"}],"o":{"n":"option"}}],[10,"button","","Calls closure if this is a button event.",32,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"button_args","","Returns button arguments.",32,{"i":[{"n":"self"}],"o":{"g":["buttonargs"],"n":"option"}}],[8,"PressEvent","","The press of a button",null,null],[10,"from_button","","Creates a press event.",33,{"i":[{"n":"button"},{"n":"self"}],"o":{"n":"option"}}],[10,"press","","Calls closure if this is a press event.",33,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"press_args","","Returns press arguments.",33,{"i":[{"n":"self"}],"o":{"g":["button"],"n":"option"}}],[8,"ReleaseEvent","","The release of a button",null,null],[10,"from_button","","Creates a release event.",34,{"i":[{"n":"button"},{"n":"self"}],"o":{"n":"option"}}],[10,"release","","Calls closure if this is a release event.",34,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"release_args","","Returns release arguments.",34,{"i":[{"n":"self"}],"o":{"g":["button"],"n":"option"}}],[8,"ResizeEvent","","When the window is resized",null,null],[10,"from_width_height","","Creates a resize event.",35,{"i":[{"n":"u32"},{"n":"u32"},{"n":"self"}],"o":{"n":"option"}}],[10,"resize","","Calls closure if this is a resize event.",35,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"resize_args","","Returns resize arguments.",35,{"i":[{"n":"self"}],"o":{"n":"option"}}],[8,"RenderEvent","","When the next frame should be rendered",null,null],[10,"from_render_args","","Creates a render event.",36,{"i":[{"n":"renderargs"},{"n":"self"}],"o":{"n":"option"}}],[10,"render","","Calls closure if this is a render event.",36,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"render_args","","Returns render arguments.",36,{"i":[{"n":"self"}],"o":{"g":["renderargs"],"n":"option"}}],[8,"TextEvent","","When receiving text from user, such as typing a character",null,null],[10,"from_text","","Creates a text event.",37,{"i":[{"n":"str"},{"n":"self"}],"o":{"n":"option"}}],[10,"text","","Calls closure if this is a text event.",37,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"text_args","","Returns text arguments.",37,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}],[8,"TouchEvent","","When a touch is started, moved, ended or cancelled.",null,null],[10,"from_touch_args","","Creates a touch event.",38,{"i":[{"n":"touchargs"},{"n":"self"}],"o":{"n":"option"}}],[10,"touch","","Calls closure if this is a touch event.",38,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"touch_args","","Returns touch arguments.",38,{"i":[{"n":"self"}],"o":{"g":["touchargs"],"n":"option"}}],[8,"UpdateEvent","","When the application state should be updated",null,null],[10,"from_update_args","","Creates an update event.",39,{"i":[{"n":"updateargs"},{"n":"self"}],"o":{"n":"option"}}],[11,"from_dt","","Creates an update event with delta time.",39,{"i":[{"n":"f64"},{"n":"self"}],"o":{"n":"option"}}],[10,"update","","Calls closure if this is an update event.",39,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"update_args","","Returns update arguments.",39,{"i":[{"n":"self"}],"o":{"g":["updateargs"],"n":"option"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"eventid"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"eventid"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"eventid"}],"o":{"n":"bool"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"button"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"button"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"button"}],"o":{"n":"bool"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"motion"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"motion"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"motion"}],"o":{"n":"bool"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"hatstate"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"hatstate"}],"o":{"n":"bool"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",10,null],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"input"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"input"}],"o":{"n":"bool"}}],[11,"ne","","",11,{"i":[{"n":"self"},{"n":"input"}],"o":{"n":"bool"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"loop"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"loop"}],"o":{"n":"bool"}}],[11,"ne","","",12,{"i":[{"n":"self"},{"n":"loop"}],"o":{"n":"bool"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"event"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"event"}],"o":{"n":"bool"}}],[11,"from","","",8,{"i":[{"n":"key"}],"o":{"n":"self"}}],[11,"from","","",8,{"i":[{"n":"mousebutton"}],"o":{"n":"self"}}],[11,"from","","",8,{"i":[{"n":"controllerbutton"}],"o":{"n":"self"}}],[11,"from","","",11,{"i":[{"n":"buttonargs"}],"o":{"n":"self"}}],[11,"from","","",9,{"i":[{"n":"controlleraxisargs"}],"o":{"n":"self"}}],[11,"from","","",11,{"i":[{"n":"controlleraxisargs"}],"o":{"n":"self"}}],[11,"from","","",9,{"i":[{"n":"touchargs"}],"o":{"n":"self"}}],[11,"from","","",11,{"i":[{"n":"touchargs"}],"o":{"n":"self"}}],[11,"from","","",11,{"i":[{"n":"motion"}],"o":{"n":"self"}}],[11,"from","","",12,{"i":[{"n":"renderargs"}],"o":{"n":"self"}}],[11,"from","","",13,{"i":[{"n":"renderargs"}],"o":{"n":"self"}}],[11,"from","","",12,{"i":[{"n":"afterrenderargs"}],"o":{"n":"self"}}],[11,"from","","",13,{"i":[{"n":"afterrenderargs"}],"o":{"n":"self"}}],[11,"from","","",12,{"i":[{"n":"updateargs"}],"o":{"n":"self"}}],[11,"from","","",13,{"i":[{"n":"updateargs"}],"o":{"n":"self"}}],[11,"from","","",12,{"i":[{"n":"idleargs"}],"o":{"n":"self"}}],[11,"from","","",13,{"i":[{"n":"idleargs"}],"o":{"n":"self"}}],[11,"from","","",11,{"i":[{"n":"closeargs"}],"o":{"n":"self"}}],[11,"from","","",13,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"from","","",13,{"i":[{"n":"loop"}],"o":{"n":"self"}}],[11,"into","","",13,{"i":[{"n":"self"}],"o":{"g":["input"],"n":"option"}}],[11,"into","","",13,{"i":[{"n":"self"}],"o":{"g":["loop"],"n":"option"}}],[11,"after_render_args","","Returns after render arguments.",27,{"i":[{"n":"self"}],"o":{"g":["afterrenderargs"],"n":"option"}}],[11,"button_args","","Returns button arguments.",32,{"i":[{"n":"self"}],"o":{"g":["buttonargs"],"n":"option"}}],[11,"press_args","","Returns press arguments.",33,{"i":[{"n":"self"}],"o":{"g":["button"],"n":"option"}}],[11,"release_args","","Returns release arguments.",34,{"i":[{"n":"self"}],"o":{"g":["button"],"n":"option"}}],[11,"close_args","","Returns close arguments.",28,{"i":[{"n":"self"}],"o":{"g":["closeargs"],"n":"option"}}],[11,"cursor_args","","Returns cursor arguments.",29,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"option"}}],[11,"focus_args","","Returns focus arguments.",30,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"option"}}],[11,"from_dt","","Creates an update event with delta time.",31,{"i":[{"n":"f64"},{"n":"self"}],"o":{"n":"option"}}],[11,"idle_args","","Returns idle arguments.",31,{"i":[{"n":"self"}],"o":{"g":["idleargs"],"n":"option"}}],[11,"render_args","","Returns render arguments.",36,{"i":[{"n":"self"}],"o":{"g":["renderargs"],"n":"option"}}],[11,"resize_args","","Returns resize arguments.",35,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"text_args","","Returns text arguments.",37,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}],[11,"touch_args","","Returns touch arguments.",38,{"i":[{"n":"self"}],"o":{"g":["touchargs"],"n":"option"}}],[11,"from_dt","","Creates an update event with delta time.",39,{"i":[{"n":"f64"},{"n":"self"}],"o":{"n":"option"}}],[11,"update_args","","Returns update arguments.",39,{"i":[{"n":"self"}],"o":{"g":["updateargs"],"n":"option"}}]],"paths":[[3,"IdleArgs"],[3,"ButtonArgs"],[3,"RenderArgs"],[3,"TouchArgs"],[3,"UpdateArgs"],[3,"EventId"],[4,"ButtonState"],[4,"Touch"],[4,"Button"],[4,"Motion"],[4,"HatState"],[4,"Input"],[4,"Loop"],[4,"Event"],[3,"ControllerButton"],[3,"ControllerHat"],[3,"ControllerAxisArgs"],[8,"ControllerAxisEvent"],[4,"Key"],[3,"ModifierKey"],[4,"MouseButton"],[8,"MouseCursorEvent"],[8,"MouseRelativeEvent"],[8,"MouseScrollEvent"],[8,"GenericEvent"],[3,"AfterRenderArgs"],[3,"CloseArgs"],[8,"AfterRenderEvent"],[8,"CloseEvent"],[8,"CursorEvent"],[8,"FocusEvent"],[8,"IdleEvent"],[8,"ButtonEvent"],[8,"PressEvent"],[8,"ReleaseEvent"],[8,"ResizeEvent"],[8,"RenderEvent"],[8,"TextEvent"],[8,"TouchEvent"],[8,"UpdateEvent"]]};
searchIndex["interpolation"] = {"doc":"Interpolation algorithms.","items":[[4,"EaseFunction","interpolation","",null,null],[13,"QuadraticIn","","",0,null],[13,"QuadraticOut","","",0,null],[13,"QuadraticInOut","","",0,null],[13,"CubicIn","","",0,null],[13,"CubicOut","","",0,null],[13,"CubicInOut","","",0,null],[13,"QuarticIn","","",0,null],[13,"QuarticOut","","",0,null],[13,"QuarticInOut","","",0,null],[13,"QuinticIn","","",0,null],[13,"QuinticOut","","",0,null],[13,"QuinticInOut","","",0,null],[13,"SineIn","","",0,null],[13,"SineOut","","",0,null],[13,"SineInOut","","",0,null],[13,"CircularIn","","",0,null],[13,"CircularOut","","",0,null],[13,"CircularInOut","","",0,null],[13,"ExponentialIn","","",0,null],[13,"ExponentialOut","","",0,null],[13,"ExponentialInOut","","",0,null],[13,"ElasticIn","","",0,null],[13,"ElasticOut","","",0,null],[13,"ElasticInOut","","",0,null],[13,"BackIn","","",0,null],[13,"BackOut","","",0,null],[13,"BackInOut","","",0,null],[13,"BounceIn","","",0,null],[13,"BounceOut","","",0,null],[13,"BounceInOut","","",0,null],[5,"lerp","","Performs linear interpolation. A linear interpolation consists of two states 'a' and 'b'. The 't' variable is a factor between 0 and 1 that gives weight to 'a' or 'b'. When 't' is zero then 'a' has full weight. When 't' is one then 'b' has full weight.",null,null],[5,"quad_bez","","Performs quadratic beziér interpolation. This is done by nesting linear interpolations. For more information, see:",null,null],[5,"cub_bez","","Performs cubic beziér interpolation. This is done by interpolation between two quadratic beziér. For more information, see:",null,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"easefunction"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"easefunction"}],"o":{"n":"bool"}}],[8,"Ease","","",null,null],[10,"calc","","Calculate the eased value, normalized",1,{"i":[{"n":"self"},{"n":"easefunction"}],"o":{"n":"self"}}],[10,"quadratic_in","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"quadratic_out","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"quadratic_in_out","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cubic_in","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cubic_out","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cubic_in_out","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"quartic_in","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"quartic_out","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"quartic_in_out","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"quintic_in","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"quintic_out","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"quintic_in_out","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sine_in","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sine_out","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sine_in_out","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"circular_in","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"circular_out","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"circular_in_out","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exponential_in","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exponential_out","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exponential_in_out","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"elastic_in","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"elastic_out","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"elastic_in_out","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"back_in","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"back_out","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"back_in_out","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"bounce_in","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"bounce_out","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"bounce_in_out","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[8,"Spatial","","Used for interpolation over spatial structures.",null,null],[16,"Scalar","","The scalar type.",2,null],[10,"add","","Add",2,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sub","","Subtract",2,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"scale","","Scales with a scalar.",2,null]],"paths":[[4,"EaseFunction"],[8,"Ease"],[8,"Spatial"]]};
searchIndex["itertools"] = {"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[4,"Either","itertools","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[4,"Diff","","A type returned by the `diff_with` function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator's remaining elements starting with the first mis-match.",1,null],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",1,null],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",1,null],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for more detail.",null,null],[13,"NoElements","","Empty iterator",2,null],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",2,null],[13,"MinMax","","More than one element in the iterator, the first element is not larger than the second",2,null],[4,"Position","","A value yielded by `WithPosition`. Indicates the position of this element in the iterator results.",null,null],[13,"First","","This is the first element.",3,null],[13,"Middle","","This is neither the first nor the last element.",3,null],[13,"Last","","This is the last element.",3,null],[13,"Only","","This is the only element.",3,null],[4,"EitherOrBoth","","A value yielded by `ZipLongest`. Contains one or two values, depending on which of the input iterators are exhausted.",null,null],[13,"Both","","Neither input iterator is exhausted yet, yielding two values.",4,null],[13,"Left","","The parameter iterator of `.zip_longest()` is exhausted, only yielding a value from the `self` iterator.",4,null],[13,"Right","","The `self` iterator of `.zip_longest()` is exhausted, only yielding a value from the parameter iterator.",4,null],[4,"FoldWhile","","An enum used for controlling the execution of `.fold_while()`.",null,null],[13,"Continue","","Continue folding with this value",5,null],[13,"Done","","Fold is complete and will return this value",5,null],[5,"cons_tuples","","Create an iterator that maps for example iterators of `((A, B), C)` to `(A, B, C)`.",null,{"i":[{"n":"i"}],"o":{"n":"constuples"}}],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and returns a `Diff` which describes how `j` differs from `i`.",null,{"i":[{"n":"i"},{"n":"j"},{"n":"f"}],"o":{"g":["diff"],"n":"option"}}],[5,"kmerge_by","","Create an iterator that merges elements of the contained iterators.",null,{"i":[{"n":"i"},{"n":"f"}],"o":{"n":"kmergeby"}}],[5,"repeat_n","","Create an iterator that produces `n` repetitions of `element`.",null,{"i":[{"n":"a"},{"n":"usize"}],"o":{"n":"repeatn"}}],[5,"repeat_call","","An iterator source that produces elements indefinitely by calling a given closure.",null,{"i":[{"n":"f"}],"o":{"n":"repeatcall"}}],[5,"unfold","","Creates a new unfold source with the specified closure as the \"iterator function\" and an initial state to eventually pass to the closure",null,{"i":[{"n":"st"},{"n":"f"}],"o":{"n":"unfold"}}],[5,"iterate","","Creates a new iterator that infinitely applies function to value and yields results.",null,{"i":[{"n":"st"},{"n":"f"}],"o":{"n":"iterate"}}],[5,"multizip","","An iterator that generalizes .zip() and allows running multiple iterators in lockstep.",null,{"i":[{"n":"u"}],"o":{"n":"zip"}}],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",null,{"i":[{"n":"i"},{"n":"j"}],"o":{"n":"interleave"}}],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",null,{"i":[{"n":"i"},{"n":"j"}],"o":{"n":"merge"}}],[5,"put_back","","Create an iterator where you can put back a single item",null,{"i":[{"n":"i"}],"o":{"n":"putback"}}],[5,"put_back_n","","Create an iterator where you can put back multiple values to the front of the iteration.",null,{"i":[{"n":"i"}],"o":{"n":"putbackn"}}],[5,"multipeek","","An iterator adaptor that allows the user to peek at multiple `.next()` values without advancing the base iterator.",null,{"i":[{"n":"i"}],"o":{"n":"multipeek"}}],[5,"kmerge","","Create an iterator that merges elements of the contained iterators using the ordering function.",null,{"i":[{"n":"i"}],"o":{"n":"kmerge"}}],[5,"zip_eq","","Iterate `i` and `j` in lock step.",null,{"i":[{"n":"i"},{"n":"j"}],"o":{"n":"zipeq"}}],[5,"rciter","","Return an iterator inside a `Rc<RefCell<_>>` wrapper.",null,{"i":[{"n":"i"}],"o":{"n":"rciter"}}],[5,"enumerate","","Iterate `iterable` with a running index.",null,{"i":[{"n":"i"}],"o":{"n":"enumerate"}}],[5,"rev","","Iterate `iterable` in reverse.",null,{"i":[{"n":"i"}],"o":{"n":"rev"}}],[5,"zip","","Iterate `i` and `j` in lock step.",null,{"i":[{"n":"i"},{"n":"j"}],"o":{"n":"zip"}}],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",null,{"i":[{"n":"i"},{"n":"j"}],"o":{"n":"chain"}}],[5,"cloned","","Create an iterator that clones each element from &T to T",null,{"i":[{"n":"i"}],"o":{"n":"cloned"}}],[5,"fold","","Perform a fold operation over the iterable.",null,{"i":[{"n":"i"},{"n":"b"},{"n":"f"}],"o":{"n":"b"}}],[5,"all","","Test whether the predicate holds for all elements in the iterable.",null,{"i":[{"n":"i"},{"n":"f"}],"o":{"n":"bool"}}],[5,"any","","Test whether the predicate holds for any elements in the iterable.",null,{"i":[{"n":"i"},{"n":"f"}],"o":{"n":"bool"}}],[5,"max","","Return the maximum value of the iterable.",null,{"i":[{"n":"i"}],"o":{"n":"option"}}],[5,"min","","Return the minimum value of the iterable.",null,{"i":[{"n":"i"}],"o":{"n":"option"}}],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",null,{"i":[{"n":"i"},{"n":"str"}],"o":{"n":"string"}}],[5,"sorted","","Collect all the iterable's elements into a sorted vector in ascending order.",null,{"i":[{"n":"i"}],"o":{"n":"vec"}}],[5,"equal","","Return `true` if both iterators produce equal sequences (elements pairwise equal and sequences of the same length), `false` otherwise.",null,{"i":[{"n":"i"},{"n":"j"}],"o":{"n":"bool"}}],[5,"assert_equal","","Assert that two iterators produce equal sequences, with the same semantics as equal(a, b).",null,{"i":[{"n":"i"},{"n":"j"}]}],[5,"partition","","Partition a sequence using predicate `pred` so that elements that map to `true` are placed before elements which map to `false`.",null,{"i":[{"n":"i"},{"n":"f"}],"o":{"n":"usize"}}],[0,"structs","","The concrete iterator types.",null,null],[3,"Dedup","itertools::structs","An iterator adaptor that removes repeated duplicates.",null,null],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both run out.",null,null],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until one of them runs out.",null,null],[3,"Product","","An iterator adaptor that iterates over the cartesian product of the element sets of two iterators `I` and `J`.",null,null],[3,"PutBack","","An iterator adaptor that allows putting back a single item to the front of the iterator.",null,null],[3,"PutBackN","","An iterator adaptor that allows putting multiple items in front of the iterator.",null,null],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",null,null],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator for each iteration.",null,null],[3,"MapResults","","An iterator adapter to apply a transformation within a nested `Result`.",null,null],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MultiPeek","","See `multipeek()` for more information.",null,null],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate returns `true`.",null,null],[3,"WhileSome","","An iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",null,null],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",null,null],[3,"TupleCombinations","","An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples of a specific size.",null,null],[3,"Combinations","","An iterator to iterate through all the `n`-length combinations in an iterator.",null,null],[3,"Unique","","An iterator adapter to filter out duplicate elements.",null,null],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",null,null],[3,"Flatten","","An iterator adapter to simply flatten a structure.",null,null],[3,"ConsTuples","","An iterator that maps an iterator of tuples like `((A, B), C)` to an iterator of `(A, B, C)`.",null,null],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"FormatWith","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"IntoChunks","","`ChunkLazy` is the storage for a lazy chunking operation.",null,null],[3,"Chunk","","An iterator for the elements in a single chunk.",null,null],[3,"Chunks","","An iterator that yields the Chunk iterators.",null,null],[3,"GroupBy","","`GroupBy` is the storage for the lazy grouping operation.",null,null],[3,"Group","","An iterator for the elements in a single group.",null,null],[3,"Groups","","An iterator that yields the Group iterators.",null,null],[3,"Intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",null,null],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base iterators in ascending order. If all base iterators are sorted (ascending), the result is sorted.",null,null],[3,"KMergeBy","","An iterator adaptor that merges an abitrary number of base iterators according to an ordering function.",null,null],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling missing elements using a closure.",null,null],[3,"PeekingTakeWhile","","An iterator adaptor that takes items while a closure returns `true`.",null,null],[3,"RcIter","","A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.",null,null],[12,"rciter","","The boxed iterator.",6,null],[3,"RepeatN","","An iterator that produces n repetitions of an element.",null,null],[3,"RepeatCall","","See `repeat_call` for more information.",null,null],[3,"Unfold","","See `unfold` for more information.",null,null],[12,"state","","Internal state that will be passed to the closure on the next iteration",7,null],[3,"Iterate","","An iterator that infinitely applies function to value and yields results.",null,null],[3,"Tee","","One half of an iterator pair where both return the same elements.",null,null],[3,"TupleBuffer","","An iterator over a incomplete tuple.",null,null],[3,"TupleWindows","","An iterator over all contiguous windows that produces tuples of a specific size.",null,null],[3,"Tuples","","An iterator that groups the items in tuples of a specific size.",null,null],[3,"WithPosition","","An iterator adaptor that wraps each element in an `Position`.",null,null],[3,"ZipEq","","An iterator which iterates two other iterators simultaneously",null,null],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",null,null],[3,"Zip","","See `multizip` for more information.",null,null],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"multipeek"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"reset_peek","","Reset the peeking “cursor”",8,{"i":[{"n":"self"}]}],[11,"peek","","Works exactly like `.next()` with the only difference that it doesn't advance itself. `.peek()` can be called multiple times, to peek further ahead.",8,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",8,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",8,null],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"interleave"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",9,null],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"interleaveshortest"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",10,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",10,null],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"putback"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"with_value","","put back value `value` (builder method)",11,null],[11,"into_parts","","Split the `PutBack` into its parts.",11,null],[11,"put_back","","Put back a single value to the front of the iterator.",11,null],[11,"next","","",11,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",11,null],[11,"all","","",11,{"i":[{"n":"self"},{"n":"g"}],"o":{"n":"bool"}}],[11,"fold","","",11,{"i":[{"n":"self"},{"n":"acc"},{"n":"g"}],"o":{"n":"acc"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"putbackn"}}],[11,"put_back","","Puts x in front of the iterator. The values are yielded in order of the most recently put back values first.",12,null],[11,"next","","",12,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",12,null],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"product"}}],[11,"next","","",13,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",13,null],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"batching"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",14,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",14,null],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"step"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",15,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",15,null],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",16,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",16,null],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"next","","",17,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",17,null],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",18,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",18,null],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",19,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",19,null],[11,"fold","","",19,{"i":[{"n":"self"},{"n":"acc"},{"n":"g"}],"o":{"n":"acc"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",20,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",20,null],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"whilesome"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",21,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",21,null],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",22,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",23,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"uniqueby"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",24,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",24,null],[11,"next","","",25,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",25,null],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"unique"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"flatten"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",26,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fold","","",26,{"i":[{"n":"self"},{"n":"acc"},{"n":"g"}],"o":{"n":"acc"}}],[11,"next_back","","",26,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",27,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",27,null],[11,"next","","",28,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",28,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",28,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",28,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",28,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",28,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"format"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",31,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"drop","","",32,{"i":[{"n":"self"}]}],[11,"next","","",32,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",33,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"drop","","",34,{"i":[{"n":"self"}]}],[11,"next","","",34,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"intersperse"}}],[11,"next","","",35,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",35,null],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"kmerge"}}],[11,"next","","",36,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",36,null],[11,"next","","",37,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",37,null],[11,"clone","itertools","",2,{"i":[{"n":"self"}],"o":{"n":"minmaxresult"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"minmaxresult"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"minmaxresult"}],"o":{"n":"bool"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The returned `Option` has variant `None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`. If the `MinMaxResult` has variant `OneElement(x)`, performing this operation will make one clone of `x`.",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","itertools::structs","",38,{"i":[{"n":"self"}],"o":{"n":"padusing"}}],[11,"next","","",38,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",38,null],[11,"next_back","","",38,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"peeking_next","","",11,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"peeking_next","","",12,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"next","","",39,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",39,null],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"rciter"}}],[11,"next","","",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"new","","",40,{"i":[{"n":"a"},{"n":"usize"}],"o":{"n":"self"}}],[11,"next","","",40,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",40,null],[11,"next_back","","",40,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",41,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",41,null],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"unfold"}}],[11,"next","","",7,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",7,null],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"iterate"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",42,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",42,null],[11,"next","","",43,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",43,null],[11,"next","","",44,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",44,null],[11,"next","","",45,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"into_buffer","","Return a buffer with the produced items that was not enough to be grouped in a tuple.",45,{"i":[{"n":"self"}],"o":{"n":"tuplebuffer"}}],[11,"next","","",46,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","itertools","",3,{"i":[{"n":"self"}],"o":{"n":"position"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"position"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"position"}],"o":{"n":"bool"}}],[11,"into_inner","","Return the inner value.",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"next","itertools::structs","",47,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",47,null],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"zipeq"}}],[11,"next","","",48,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",48,null],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"ziplongest"}}],[11,"next","","",49,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",49,null],[11,"next_back","","",49,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","itertools","",4,{"i":[{"n":"self"}],"o":{"n":"eitherorboth"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"eitherorboth"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"eitherorboth"}],"o":{"n":"bool"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","itertools::structs","",50,{"i":[{"n":"self"}],"o":{"n":"zip"}}],[11,"new","","Deprecated: renamed to multizip",50,{"i":[{"n":"u"}],"o":{"n":"zip"}}],[11,"from","","",50,null],[11,"next","","",50,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",50,null],[8,"PeekingNext","itertools","An iterator that allows peeking at an element before deciding to accept it.",null,null],[10,"peeking_next","","Pass a reference to the next iterator element to the closure `accept`; if `accept` returns true, return it as the next element, else None.",51,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both run out.",52,{"i":[{"n":"self"},{"n":"j"}],"o":{"n":"interleave"}}],[11,"interleave_shortest","","Alternate elements from two iterators until one of them runs out.",52,{"i":[{"n":"self"},{"n":"j"}],"o":{"n":"interleaveshortest"}}],[11,"intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",52,null],[11,"zip_longest","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of two optional elements.",52,{"i":[{"n":"self"},{"n":"j"}],"o":{"n":"ziplongest"}}],[11,"zip_eq","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of elements.",52,{"i":[{"n":"self"},{"n":"j"}],"o":{"n":"zipeq"}}],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",52,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"batching"}}],[11,"group_by","","Return an iterable that can group iterator elements. Consecutive elements that map to the same key (“runs”), are assigned to the same group.",52,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"groupby"}}],[11,"group_by_lazy","","",52,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"groupby"}}],[11,"chunks","","Return an iterable that can chunk the iterator.",52,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"intochunks"}}],[11,"chunks_lazy","","",52,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"intochunks"}}],[11,"tuple_windows","","Return an iterator over all contiguous windows producing tuples of a specific size (up to 4).",52,{"i":[{"n":"self"}],"o":{"n":"tuplewindows"}}],[11,"tuples","","Return an iterator that groups the items in tuples of a specific size (up to 4).",52,{"i":[{"n":"self"}],"o":{"n":"tuples"}}],[11,"tee","","Split into an iterator pair that both yield all elements from the original iterator.",52,null],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator for each iteration.",52,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"step"}}],[11,"map_results","","Return an iterator adaptor that applies the provided closure to every `Result::Ok` value. `Result::Err` values are unchanged.",52,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"mapresults"}}],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.  If both base iterators are sorted (ascending), the result is sorted.",52,{"i":[{"n":"self"},{"n":"j"}],"o":{"n":"merge"}}],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order. This is much like `.merge()` but allows for a custom ordering.",52,{"i":[{"n":"self"},{"n":"j"},{"n":"f"}],"o":{"n":"mergeby"}}],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by merging them in ascending order.",52,{"i":[{"n":"self"}],"o":{"n":"kmerge"}}],[11,"kmerge_by","","Return an iterator adaptor that flattens an iterator of iterators by merging them according to the given closure.",52,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"kmergeby"}}],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of the element sets of two iterators `self` and `J`.",52,{"i":[{"n":"self"},{"n":"j"}],"o":{"n":"product"}}],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to optionally merge together consecutive elements.",52,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"coalesce"}}],[11,"dedup","","Remove duplicates from sections of consecutive identical elements. If the iterator is sorted, all elements will be unique.",52,{"i":[{"n":"self"}],"o":{"n":"dedup"}}],[11,"unique","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration. Duplicates are detected using hash and equality.",52,{"i":[{"n":"self"}],"o":{"n":"unique"}}],[11,"unique_by","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration.",52,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"uniqueby"}}],[11,"peeking_take_while","","Return an iterator adaptor that borrows from this iterator and  takes items while the closure `accept` returns `true`.",52,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"peekingtakewhile"}}],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate `accept` returns `true`.",52,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"takewhileref"}}],[11,"while_some","","Return an iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",52,{"i":[{"n":"self"}],"o":{"n":"whilesome"}}],[11,"tuple_combinations","","Return an iterator adaptor that iterates over the combinations of the elements from an iterator.",52,{"i":[{"n":"self"}],"o":{"n":"tuplecombinations"}}],[11,"combinations","","Return an iterator adaptor that iterates over the `n`-length combinations of the elements from an iterator.",52,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"combinations"}}],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of `min` by filling missing elements using a closure `f`.",52,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"padusing"}}],[11,"flatten","","Unravel a nested iterator.",52,{"i":[{"n":"self"}],"o":{"n":"flatten"}}],[11,"with_position","","Return an iterator adaptor that wraps each element in a `Position` to ease special-case handling of the first or last elements.",52,{"i":[{"n":"self"}],"o":{"n":"withposition"}}],[11,"next_tuple","","Advances the iterator and returns the next items grouped in a tuple of a specific size (up to 4).",52,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",52,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"option"}}],[11,"dropping","","Consume the first `n` elements from the iterator eagerly, and return the same iterator again.",52,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly, and return the same iterator again.",52,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",52,{"i":[{"n":"self"},{"n":"f"}]}],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`, for convenience.",52,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"set_from","","Assign to each reference in `self` from the `from` iterator, stopping at the shortest of the two iterators.",52,{"i":[{"n":"self"},{"n":"j"}],"o":{"n":"usize"}}],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",52,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"string"}}],[11,"format","","Format all iterator elements, separated by `sep`.",52,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"format"}}],[11,"format_default","","",52,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"format"}}],[11,"format_with","","Format all iterator elements, separated by `sep`.",52,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"formatwith"}}],[11,"fold_results","","Fold `Result` values from an iterator.",52,{"i":[{"n":"self"},{"n":"b"},{"n":"f"}],"o":{"n":"result"}}],[11,"fold_options","","Fold `Option` values from an iterator.",52,{"i":[{"n":"self"},{"n":"b"},{"n":"f"}],"o":{"n":"option"}}],[11,"fold1","","Accumulator of the elements in the iterator.",52,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"fold_while","","An iterator method that applies a function, producing a single, final value.",52,{"i":[{"n":"self"},{"n":"b"},{"n":"f"}],"o":{"n":"b"}}],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",52,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",52,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"vec"}}],[11,"partition_map","","Collect all iterator elements into one of two partitions. Unlike `Iterator::partition`, each partition may have a distinct type.",52,null],[11,"minmax","","Return the minimum and maximum elements in the iterator.",52,{"i":[{"n":"self"}],"o":{"n":"minmaxresult"}}],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as determined by the specified function.",52,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"minmaxresult"}}],[11,"minmax_by","","Return the minimum and maximum element of an iterator, as determined by the specified comparison function.",52,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"minmaxresult"}}],[14,"iproduct","","Create an iterator over the “cartesian product” of iterators.",null,null],[14,"izip","","Create an iterator running multiple iterators in lockstep.",null,null],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"i":[{"n":"self"},{"n":"f"},{"n":"g"}],"o":{"n":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"i":[{"n":"self"},{"n":"ctx"},{"n":"f"},{"n":"g"}],"o":{"n":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"extend","","",0,null],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"as_ref","","",0,{"i":[{"n":"self"}],"o":{"n":"target"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"from","","",0,{"i":[{"n":"result"}],"o":{"n":"either"}}],[11,"next","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"i":[{"n":"self"},{"n":"acc"},{"n":"g"}],"o":{"n":"acc"}}],[11,"count","","",0,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"last","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"nth","","",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"collect","","",0,{"i":[{"n":"self"}],"o":{"n":"b"}}],[11,"all","","",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"ordering"}}],[11,"deref","","",0,null],[11,"as_mut","","",0,{"i":[{"n":"self"}],"o":{"n":"target"}}],[11,"next_back","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"into","","",0,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"deref_mut","","",0,null]],"paths":[[4,"Either"],[4,"Diff"],[4,"MinMaxResult"],[4,"Position"],[4,"EitherOrBoth"],[4,"FoldWhile"],[3,"RcIter"],[3,"Unfold"],[3,"MultiPeek"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"PutBackN"],[3,"Product"],[3,"Batching"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"Coalesce"],[3,"Dedup"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"TupleCombinations"],[3,"Combinations"],[3,"UniqueBy"],[3,"Unique"],[3,"Flatten"],[3,"MapResults"],[3,"ConsTuples"],[3,"Format"],[3,"FormatWith"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"KMerge"],[3,"KMergeBy"],[3,"PadUsing"],[3,"PeekingTakeWhile"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Iterate"],[3,"Tee"],[3,"TupleBuffer"],[3,"Tuples"],[3,"TupleWindows"],[3,"WithPosition"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"],[8,"PeekingNext"],[8,"Itertools"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"i":[{"n":"t"}]}],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",null,null],[14,"lazy_static","","",null,null]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",21,null],[12,"sin_port","","",21,null],[12,"sin_addr","","",21,null],[12,"sin_zero","","",21,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",22,null],[12,"sin6_port","","",22,null],[12,"sin6_flowinfo","","",22,null],[12,"sin6_addr","","",22,null],[12,"sin6_scope_id","","",22,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",23,null],[12,"sun_path","","",23,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",24,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",25,null],[12,"ai_family","","",25,null],[12,"ai_socktype","","",25,null],[12,"ai_protocol","","",25,null],[12,"ai_addrlen","","",25,null],[12,"ai_addr","","",25,null],[12,"ai_canonname","","",25,null],[12,"ai_next","","",25,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",26,null],[12,"nl_pid","","",26,null],[12,"nl_groups","","",26,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",27,null],[12,"sll_protocol","","",27,null],[12,"sll_ifindex","","",27,null],[12,"sll_hatype","","",27,null],[12,"sll_pkttype","","",27,null],[12,"sll_halen","","",27,null],[12,"sll_addr","","",27,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",28,null],[12,"tm_min","","",28,null],[12,"tm_hour","","",28,null],[12,"tm_mday","","",28,null],[12,"tm_mon","","",28,null],[12,"tm_year","","",28,null],[12,"tm_wday","","",28,null],[12,"tm_yday","","",28,null],[12,"tm_isdst","","",28,null],[12,"tm_gmtoff","","",28,null],[12,"tm_zone","","",28,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",29,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",30,null],[12,"dli_fbase","","",30,null],[12,"dli_sname","","",30,null],[12,"dli_saddr","","",30,null],[3,"epoll_event","","",null,null],[12,"events","","",31,null],[12,"u64","","",31,null],[3,"utsname","","",null,null],[12,"sysname","","",32,null],[12,"nodename","","",32,null],[12,"release","","",32,null],[12,"version","","",32,null],[12,"machine","","",32,null],[12,"domainname","","",32,null],[3,"lconv","","",null,null],[12,"decimal_point","","",33,null],[12,"thousands_sep","","",33,null],[12,"grouping","","",33,null],[12,"int_curr_symbol","","",33,null],[12,"currency_symbol","","",33,null],[12,"mon_decimal_point","","",33,null],[12,"mon_thousands_sep","","",33,null],[12,"mon_grouping","","",33,null],[12,"positive_sign","","",33,null],[12,"negative_sign","","",33,null],[12,"int_frac_digits","","",33,null],[12,"frac_digits","","",33,null],[12,"p_cs_precedes","","",33,null],[12,"p_sep_by_space","","",33,null],[12,"n_cs_precedes","","",33,null],[12,"n_sep_by_space","","",33,null],[12,"p_sign_posn","","",33,null],[12,"n_sign_posn","","",33,null],[12,"int_p_cs_precedes","","",33,null],[12,"int_p_sep_by_space","","",33,null],[12,"int_n_cs_precedes","","",33,null],[12,"int_n_sep_by_space","","",33,null],[12,"int_p_sign_posn","","",33,null],[12,"int_n_sign_posn","","",33,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",34,null],[12,"sigev_signo","","",34,null],[12,"sigev_notify","","",34,null],[12,"sigev_notify_thread_id","","",34,null],[3,"in_pktinfo","","",null,null],[12,"ipi_ifindex","","",35,null],[12,"ipi_spec_dst","","",35,null],[12,"ipi_addr","","",35,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",36,null],[12,"ifa_name","","",36,null],[12,"ifa_flags","","",36,null],[12,"ifa_addr","","",36,null],[12,"ifa_netmask","","",36,null],[12,"ifa_ifu","","",36,null],[12,"ifa_data","","",36,null],[3,"in6_rtmsg","","",null,null],[3,"dirent","","",null,null],[12,"d_ino","","",37,null],[12,"d_off","","",37,null],[12,"d_reclen","","",37,null],[12,"d_type","","",37,null],[12,"d_name","","",37,null],[3,"dirent64","","",null,null],[12,"d_ino","","",38,null],[12,"d_off","","",38,null],[12,"d_reclen","","",38,null],[12,"d_type","","",38,null],[12,"d_name","","",38,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",39,null],[12,"rlim_max","","",39,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",40,null],[12,"gl_pathv","","",40,null],[12,"gl_offs","","",40,null],[12,"gl_flags","","",40,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",41,null],[12,"pw_passwd","","",41,null],[12,"pw_uid","","",41,null],[12,"pw_gid","","",41,null],[12,"pw_gecos","","",41,null],[12,"pw_dir","","",41,null],[12,"pw_shell","","",41,null],[3,"spwd","","",null,null],[12,"sp_namp","","",42,null],[12,"sp_pwdp","","",42,null],[12,"sp_lstchg","","",42,null],[12,"sp_min","","",42,null],[12,"sp_max","","",42,null],[12,"sp_warn","","",42,null],[12,"sp_inact","","",42,null],[12,"sp_expire","","",42,null],[12,"sp_flag","","",42,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",43,null],[12,"dqb_bsoftlimit","","",43,null],[12,"dqb_curspace","","",43,null],[12,"dqb_ihardlimit","","",43,null],[12,"dqb_isoftlimit","","",43,null],[12,"dqb_curinodes","","",43,null],[12,"dqb_btime","","",43,null],[12,"dqb_itime","","",43,null],[12,"dqb_valid","","",43,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",44,null],[12,"ssi_errno","","",44,null],[12,"ssi_code","","",44,null],[12,"ssi_pid","","",44,null],[12,"ssi_uid","","",44,null],[12,"ssi_fd","","",44,null],[12,"ssi_tid","","",44,null],[12,"ssi_band","","",44,null],[12,"ssi_overrun","","",44,null],[12,"ssi_trapno","","",44,null],[12,"ssi_status","","",44,null],[12,"ssi_int","","",44,null],[12,"ssi_ptr","","",44,null],[12,"ssi_utime","","",44,null],[12,"ssi_stime","","",44,null],[12,"ssi_addr","","",44,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",45,null],[12,"it_value","","",45,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",46,null],[12,"mq_maxmsg","","",46,null],[12,"mq_msgsize","","",46,null],[12,"mq_curmsgs","","",46,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",47,null],[12,"if_name","","",47,null],[3,"msginfo","","",null,null],[12,"msgpool","","",48,null],[12,"msgmap","","",48,null],[12,"msgmax","","",48,null],[12,"msgmnb","","",48,null],[12,"msgmni","","",48,null],[12,"msgssz","","",48,null],[12,"msgtql","","",48,null],[12,"msgseg","","",48,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",49,null],[12,"msg_len","","",49,null],[3,"sembuf","","",null,null],[12,"sem_num","","",50,null],[12,"sem_op","","",50,null],[12,"sem_flg","","",50,null],[3,"input_event","","",null,null],[12,"time","","",51,null],[12,"type_","","",51,null],[12,"code","","",51,null],[12,"value","","",51,null],[3,"input_id","","",null,null],[12,"bustype","","",52,null],[12,"vendor","","",52,null],[12,"product","","",52,null],[12,"version","","",52,null],[3,"input_absinfo","","",null,null],[12,"value","","",53,null],[12,"minimum","","",53,null],[12,"maximum","","",53,null],[12,"fuzz","","",53,null],[12,"flat","","",53,null],[12,"resolution","","",53,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",54,null],[12,"len","","",54,null],[12,"index","","",54,null],[12,"keycode","","",54,null],[12,"scancode","","",54,null],[3,"input_mask","","",null,null],[12,"type_","","",55,null],[12,"codes_size","","",55,null],[12,"codes_ptr","","",55,null],[3,"ff_replay","","",null,null],[12,"length","","",56,null],[12,"delay","","",56,null],[3,"ff_trigger","","",null,null],[12,"button","","",57,null],[12,"interval","","",57,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",58,null],[12,"attack_level","","",58,null],[12,"fade_length","","",58,null],[12,"fade_level","","",58,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",59,null],[12,"envelope","","",59,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",60,null],[12,"end_level","","",60,null],[12,"envelope","","",60,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",61,null],[12,"left_saturation","","",61,null],[12,"right_coeff","","",61,null],[12,"left_coeff","","",61,null],[12,"deadband","","",61,null],[12,"center","","",61,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",62,null],[12,"period","","",62,null],[12,"magnitude","","",62,null],[12,"offset","","",62,null],[12,"phase","","",62,null],[12,"envelope","","",62,null],[12,"custom_len","","",62,null],[12,"custom_data","","",62,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",63,null],[12,"weak_magnitude","","",63,null],[3,"ff_effect","","",null,null],[12,"type_","","",64,null],[12,"id","","",64,null],[12,"direction","","",64,null],[12,"trigger","","",64,null],[12,"replay","","",64,null],[12,"u","","",64,null],[3,"dl_phdr_info","","",null,null],[12,"dlpi_addr","","",65,null],[12,"dlpi_name","","",65,null],[12,"dlpi_phdr","","",65,null],[12,"dlpi_phnum","","",65,null],[12,"dlpi_adds","","",65,null],[12,"dlpi_subs","","",65,null],[12,"dlpi_tls_modid","","",65,null],[12,"dlpi_tls_data","","",65,null],[3,"Elf32_Phdr","","",null,null],[12,"p_type","","",66,null],[12,"p_offset","","",66,null],[12,"p_vaddr","","",66,null],[12,"p_paddr","","",66,null],[12,"p_filesz","","",66,null],[12,"p_memsz","","",66,null],[12,"p_flags","","",66,null],[12,"p_align","","",66,null],[3,"Elf64_Phdr","","",null,null],[12,"p_type","","",67,null],[12,"p_flags","","",67,null],[12,"p_offset","","",67,null],[12,"p_vaddr","","",67,null],[12,"p_paddr","","",67,null],[12,"p_filesz","","",67,null],[12,"p_memsz","","",67,null],[12,"p_align","","",67,null],[3,"ucred","","",null,null],[12,"pid","","",68,null],[12,"uid","","",68,null],[12,"gid","","",68,null],[3,"mntent","","",null,null],[12,"mnt_fsname","","",69,null],[12,"mnt_dir","","",69,null],[12,"mnt_type","","",69,null],[12,"mnt_opts","","",69,null],[12,"mnt_freq","","",69,null],[12,"mnt_passno","","",69,null],[3,"posix_spawn_file_actions_t","","",null,null],[3,"posix_spawnattr_t","","",null,null],[3,"genlmsghdr","","",null,null],[12,"cmd","","",70,null],[12,"version","","",70,null],[12,"reserved","","",70,null],[3,"in6_pktinfo","","",null,null],[12,"ipi6_addr","","",71,null],[12,"ipi6_ifindex","","",71,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",72,null],[12,"aio_lio_opcode","","",72,null],[12,"aio_reqprio","","",72,null],[12,"aio_buf","","",72,null],[12,"aio_nbytes","","",72,null],[12,"aio_sigevent","","",72,null],[12,"aio_offset","","",72,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",73,null],[12,"e_exit","","",73,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",74,null],[12,"tv_usec","","",74,null],[3,"utmpx","","",null,null],[12,"ut_type","","",75,null],[12,"ut_pid","","",75,null],[12,"ut_line","","",75,null],[12,"ut_id","","",75,null],[12,"ut_user","","",75,null],[12,"ut_host","","",75,null],[12,"ut_exit","","",75,null],[12,"ut_session","","",75,null],[12,"ut_tv","","",75,null],[12,"ut_addr_v6","","",75,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",76,null],[12,"sa_mask","","",76,null],[12,"sa_flags","","",76,null],[12,"sa_restorer","","",76,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",77,null],[12,"ss_flags","","",77,null],[12,"ss_size","","",77,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",78,null],[12,"si_errno","","",78,null],[12,"si_code","","",78,null],[12,"_pad","","",78,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",79,null],[12,"gl_pathv","","",79,null],[12,"gl_offs","","",79,null],[12,"gl_flags","","",79,null],[3,"statfs","","",null,null],[12,"f_type","","",80,null],[12,"f_bsize","","",80,null],[12,"f_blocks","","",80,null],[12,"f_bfree","","",80,null],[12,"f_bavail","","",80,null],[12,"f_files","","",80,null],[12,"f_ffree","","",80,null],[12,"f_fsid","","",80,null],[12,"f_namelen","","",80,null],[12,"f_frsize","","",80,null],[3,"msghdr","","",null,null],[12,"msg_name","","",81,null],[12,"msg_namelen","","",81,null],[12,"msg_iov","","",81,null],[12,"msg_iovlen","","",81,null],[12,"msg_control","","",81,null],[12,"msg_controllen","","",81,null],[12,"msg_flags","","",81,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",82,null],[12,"cmsg_level","","",82,null],[12,"cmsg_type","","",82,null],[3,"termios","","",null,null],[12,"c_iflag","","",83,null],[12,"c_oflag","","",83,null],[12,"c_cflag","","",83,null],[12,"c_lflag","","",83,null],[12,"c_line","","",83,null],[12,"c_cc","","",83,null],[12,"c_ispeed","","",83,null],[12,"c_ospeed","","",83,null],[3,"flock","","",null,null],[12,"l_type","","",84,null],[12,"l_whence","","",84,null],[12,"l_start","","",84,null],[12,"l_len","","",84,null],[12,"l_pid","","",84,null],[3,"sem_t","","",null,null],[3,"mallinfo","","",null,null],[12,"arena","","",85,null],[12,"ordblks","","",85,null],[12,"smblks","","",85,null],[12,"hblks","","",85,null],[12,"hblkhd","","",85,null],[12,"usmblks","","",85,null],[12,"fsmblks","","",85,null],[12,"uordblks","","",85,null],[12,"fordblks","","",85,null],[12,"keepcost","","",85,null],[3,"nlmsghdr","","",null,null],[12,"nlmsg_len","","",86,null],[12,"nlmsg_type","","",86,null],[12,"nlmsg_flags","","",86,null],[12,"nlmsg_seq","","",86,null],[12,"nlmsg_pid","","",86,null],[3,"nlmsgerr","","",null,null],[12,"error","","",87,null],[12,"msg","","",87,null],[3,"nl_pktinfo","","",null,null],[12,"group","","",88,null],[3,"nl_mmap_req","","",null,null],[12,"nm_block_size","","",89,null],[12,"nm_block_nr","","",89,null],[12,"nm_frame_size","","",89,null],[12,"nm_frame_nr","","",89,null],[3,"nl_mmap_hdr","","",null,null],[12,"nm_status","","",90,null],[12,"nm_len","","",90,null],[12,"nm_group","","",90,null],[12,"nm_pid","","",90,null],[12,"nm_uid","","",90,null],[12,"nm_gid","","",90,null],[3,"nlattr","","",null,null],[12,"nla_len","","",91,null],[12,"nla_type","","",91,null],[3,"rtentry","","",null,null],[12,"rt_pad1","","",92,null],[12,"rt_dst","","",92,null],[12,"rt_gateway","","",92,null],[12,"rt_genmask","","",92,null],[12,"rt_flags","","",92,null],[12,"rt_pad2","","",92,null],[12,"rt_pad3","","",92,null],[12,"rt_tos","","",92,null],[12,"rt_class","","",92,null],[12,"rt_pad4","","",92,null],[12,"rt_metric","","",92,null],[12,"rt_dev","","",92,null],[12,"rt_mtu","","",92,null],[12,"rt_window","","",92,null],[12,"rt_irtt","","",92,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",93,null],[12,"loads","","",93,null],[12,"totalram","","",93,null],[12,"freeram","","",93,null],[12,"sharedram","","",93,null],[12,"bufferram","","",93,null],[12,"totalswap","","",93,null],[12,"freeswap","","",93,null],[12,"procs","","",93,null],[12,"pad","","",93,null],[12,"totalhigh","","",93,null],[12,"freehigh","","",93,null],[12,"mem_unit","","",93,null],[12,"_f","","",93,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",94,null],[12,"msg_stime","","",94,null],[12,"msg_rtime","","",94,null],[12,"msg_ctime","","",94,null],[12,"msg_qnum","","",94,null],[12,"msg_qbytes","","",94,null],[12,"msg_lspid","","",94,null],[12,"msg_lrpid","","",94,null],[3,"stat","","",null,null],[12,"st_dev","","",95,null],[12,"st_ino","","",95,null],[12,"st_nlink","","",95,null],[12,"st_mode","","",95,null],[12,"st_uid","","",95,null],[12,"st_gid","","",95,null],[12,"st_rdev","","",95,null],[12,"st_size","","",95,null],[12,"st_blksize","","",95,null],[12,"st_blocks","","",95,null],[12,"st_atime","","",95,null],[12,"st_atime_nsec","","",95,null],[12,"st_mtime","","",95,null],[12,"st_mtime_nsec","","",95,null],[12,"st_ctime","","",95,null],[12,"st_ctime_nsec","","",95,null],[3,"stat64","","",null,null],[12,"st_dev","","",96,null],[12,"st_ino","","",96,null],[12,"st_nlink","","",96,null],[12,"st_mode","","",96,null],[12,"st_uid","","",96,null],[12,"st_gid","","",96,null],[12,"st_rdev","","",96,null],[12,"st_size","","",96,null],[12,"st_blksize","","",96,null],[12,"st_blocks","","",96,null],[12,"st_atime","","",96,null],[12,"st_atime_nsec","","",96,null],[12,"st_mtime","","",96,null],[12,"st_mtime_nsec","","",96,null],[12,"st_ctime","","",96,null],[12,"st_ctime_nsec","","",96,null],[3,"statfs64","","",null,null],[12,"f_type","","",97,null],[12,"f_bsize","","",97,null],[12,"f_blocks","","",97,null],[12,"f_bfree","","",97,null],[12,"f_bavail","","",97,null],[12,"f_files","","",97,null],[12,"f_ffree","","",97,null],[12,"f_fsid","","",97,null],[12,"f_namelen","","",97,null],[12,"f_frsize","","",97,null],[12,"f_flags","","",97,null],[12,"f_spare","","",97,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",98,null],[12,"f_frsize","","",98,null],[12,"f_blocks","","",98,null],[12,"f_bfree","","",98,null],[12,"f_bavail","","",98,null],[12,"f_files","","",98,null],[12,"f_ffree","","",98,null],[12,"f_favail","","",98,null],[12,"f_fsid","","",98,null],[12,"f_flag","","",98,null],[12,"f_namemax","","",98,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",99,null],[12,"exponent","","",99,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",100,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",101,null],[12,"swd","","",101,null],[12,"ftw","","",101,null],[12,"fop","","",101,null],[12,"rip","","",101,null],[12,"rdp","","",101,null],[12,"mxcsr","","",101,null],[12,"mxcr_mask","","",101,null],[12,"_st","","",101,null],[12,"_xmm","","",101,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",102,null],[12,"swd","","",102,null],[12,"ftw","","",102,null],[12,"fop","","",102,null],[12,"rip","","",102,null],[12,"rdp","","",102,null],[12,"mxcsr","","",102,null],[12,"mxcr_mask","","",102,null],[12,"st_space","","",102,null],[12,"xmm_space","","",102,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",103,null],[12,"r14","","",103,null],[12,"r13","","",103,null],[12,"r12","","",103,null],[12,"rbp","","",103,null],[12,"rbx","","",103,null],[12,"r11","","",103,null],[12,"r10","","",103,null],[12,"r9","","",103,null],[12,"r8","","",103,null],[12,"rax","","",103,null],[12,"rcx","","",103,null],[12,"rdx","","",103,null],[12,"rsi","","",103,null],[12,"rdi","","",103,null],[12,"orig_rax","","",103,null],[12,"rip","","",103,null],[12,"cs","","",103,null],[12,"eflags","","",103,null],[12,"rsp","","",103,null],[12,"ss","","",103,null],[12,"fs_base","","",103,null],[12,"gs_base","","",103,null],[12,"ds","","",103,null],[12,"es","","",103,null],[12,"fs","","",103,null],[12,"gs","","",103,null],[3,"user","","",null,null],[12,"regs","","",104,null],[12,"u_fpvalid","","",104,null],[12,"i387","","",104,null],[12,"u_tsize","","",104,null],[12,"u_dsize","","",104,null],[12,"u_ssize","","",104,null],[12,"start_code","","",104,null],[12,"start_stack","","",104,null],[12,"signal","","",104,null],[12,"u_ar0","","",104,null],[12,"u_fpstate","","",104,null],[12,"magic","","",104,null],[12,"u_comm","","",104,null],[12,"u_debugreg","","",104,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",105,null],[12,"fpregs","","",105,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",106,null],[12,"uc_link","","",106,null],[12,"uc_stack","","",106,null],[12,"uc_mcontext","","",106,null],[12,"uc_sigmask","","",106,null],[3,"ipc_perm","","",null,null],[12,"__key","","",107,null],[12,"uid","","",107,null],[12,"gid","","",107,null],[12,"cuid","","",107,null],[12,"cgid","","",107,null],[12,"mode","","",107,null],[12,"__seq","","",107,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",108,null],[12,"shm_segsz","","",108,null],[12,"shm_atime","","",108,null],[12,"shm_dtime","","",108,null],[12,"shm_ctime","","",108,null],[12,"shm_cpid","","",108,null],[12,"shm_lpid","","",108,null],[12,"shm_nattch","","",108,null],[3,"termios2","","",null,null],[12,"c_iflag","","",109,null],[12,"c_oflag","","",109,null],[12,"c_cflag","","",109,null],[12,"c_lflag","","",109,null],[12,"c_line","","",109,null],[12,"c_cc","","",109,null],[12,"c_ispeed","","",109,null],[12,"c_ospeed","","",109,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",110,null],[12,"f_frsize","","",110,null],[12,"f_blocks","","",110,null],[12,"f_bfree","","",110,null],[12,"f_bavail","","",110,null],[12,"f_files","","",110,null],[12,"f_ffree","","",110,null],[12,"f_favail","","",110,null],[12,"f_fsid","","",110,null],[12,"f_flag","","",110,null],[12,"f_namemax","","",110,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"WSTOPSIG","","",null,{"i":[{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"WIFCONTINUED","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"WIFSIGNALED","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"WTERMSIG","","",null,{"i":[{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"WIFEXITED","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"WEXITSTATUS","","",null,{"i":[{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"WCOREDUMP","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"QCMD","","",null,{"i":[{"n":"c_int"},{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"IPOPT_COPIED","","",null,{"i":[{"n":"u8"}],"o":{"n":"u8"}}],[5,"IPOPT_CLASS","","",null,{"i":[{"n":"u8"}],"o":{"n":"u8"}}],[5,"IPOPT_NUMBER","","",null,{"i":[{"n":"u8"}],"o":{"n":"u8"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"i":[{"n":"usize"},{"n":"cpu_set_t"}],"o":{"n":"bool"}}],[5,"CPU_EQUAL","","",null,{"i":[{"n":"cpu_set_t"},{"n":"cpu_set_t"}],"o":{"n":"bool"}}],[5,"major","","",null,{"i":[{"n":"dev_t"}],"o":{"n":"c_uint"}}],[5,"minor","","",null,{"i":[{"n":"dev_t"}],"o":{"n":"c_uint"}}],[5,"makedev","","",null,{"i":[{"n":"c_uint"},{"n":"c_uint"}],"o":{"n":"dev_t"}}],[5,"IPTOS_TOS","","",null,{"i":[{"n":"u8"}],"o":{"n":"u8"}}],[5,"IPTOS_PREC","","",null,{"i":[{"n":"u8"}],"o":{"n":"u8"}}],[5,"RT_TOS","","",null,{"i":[{"n":"u8"}],"o":{"n":"u8"}}],[5,"RT_ADDRCLASS","","",null,{"i":[{"n":"u32"}],"o":{"n":"u32"}}],[5,"RT_LOCALADDR","","",null,{"i":[{"n":"u32"}],"o":{"n":"bool"}}],[5,"NLA_ALIGN","","",null,{"i":[{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"killpg","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"difftime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"openpty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setgrent","","",null,null],[5,"endgrent","","",null,null],[5,"getgrent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"remap_file_pages","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sem_getvalue","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"dl_iterate_phdr","","",null,null],[5,"setmntent","","",null,null],[5,"getmntent","","",null,null],[5,"addmntent","","",null,null],[5,"endmntent","","",null,null],[5,"hasmntopt","","",null,null],[5,"posix_spawn","","",null,null],[5,"posix_spawnp","","",null,null],[5,"posix_spawnattr_init","","",null,null],[5,"posix_spawnattr_destroy","","",null,null],[5,"posix_spawnattr_getsigdefault","","",null,null],[5,"posix_spawnattr_setsigdefault","","",null,null],[5,"posix_spawnattr_getsigmask","","",null,null],[5,"posix_spawnattr_setsigmask","","",null,null],[5,"posix_spawnattr_getflags","","",null,null],[5,"posix_spawnattr_setflags","","",null,null],[5,"posix_spawnattr_getpgroup","","",null,null],[5,"posix_spawnattr_setpgroup","","",null,null],[5,"posix_spawnattr_getschedpolicy","","",null,null],[5,"posix_spawnattr_setschedpolicy","","",null,null],[5,"posix_spawnattr_getschedparam","","",null,null],[5,"posix_spawnattr_setschedparam","","",null,null],[5,"posix_spawn_file_actions_init","","",null,null],[5,"posix_spawn_file_actions_destroy","","",null,null],[5,"posix_spawn_file_actions_addopen","","",null,null],[5,"posix_spawn_file_actions_addclose","","",null,null],[5,"posix_spawn_file_actions_adddup2","","",null,null],[5,"fread_unlocked","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"mallinfo","","",null,null],[5,"malloc_usable_size","","",null,null],[5,"getauxval","","",null,null],[5,"getpwent_r","","",null,null],[5,"getgrent_r","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[5,"sysctl","","",null,null],[11,"clone","","",95,{"i":[{"n":"self"}],"o":{"n":"stat"}}],[11,"clone","","",96,{"i":[{"n":"self"}],"o":{"n":"stat64"}}],[11,"clone","","",97,{"i":[{"n":"self"}],"o":{"n":"statfs64"}}],[11,"clone","","",98,{"i":[{"n":"self"}],"o":{"n":"statvfs64"}}],[11,"clone","","",111,{"i":[{"n":"self"}],"o":{"n":"pthread_attr_t"}}],[11,"clone","","",99,{"i":[{"n":"self"}],"o":{"n":"_libc_fpxreg"}}],[11,"clone","","",100,{"i":[{"n":"self"}],"o":{"n":"_libc_xmmreg"}}],[11,"clone","","",101,{"i":[{"n":"self"}],"o":{"n":"_libc_fpstate"}}],[11,"clone","","",102,{"i":[{"n":"self"}],"o":{"n":"user_fpregs_struct"}}],[11,"clone","","",103,{"i":[{"n":"self"}],"o":{"n":"user_regs_struct"}}],[11,"clone","","",104,{"i":[{"n":"self"}],"o":{"n":"user"}}],[11,"clone","","",105,{"i":[{"n":"self"}],"o":{"n":"mcontext_t"}}],[11,"clone","","",106,{"i":[{"n":"self"}],"o":{"n":"ucontext_t"}}],[11,"clone","","",107,{"i":[{"n":"self"}],"o":{"n":"ipc_perm"}}],[11,"clone","","",108,{"i":[{"n":"self"}],"o":{"n":"shmid_ds"}}],[11,"clone","","",109,{"i":[{"n":"self"}],"o":{"n":"termios2"}}],[11,"clone","","",110,{"i":[{"n":"self"}],"o":{"n":"statvfs"}}],[11,"clone","","",112,{"i":[{"n":"self"}],"o":{"n":"sigset_t"}}],[11,"clone","","",93,{"i":[{"n":"self"}],"o":{"n":"sysinfo"}}],[11,"clone","","",94,{"i":[{"n":"self"}],"o":{"n":"msqid_ds"}}],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"aiocb"}}],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"__exit_status"}}],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"__timeval"}}],[11,"clone","","",75,{"i":[{"n":"self"}],"o":{"n":"utmpx"}}],[11,"clone","","",76,{"i":[{"n":"self"}],"o":{"n":"sigaction"}}],[11,"clone","","",77,{"i":[{"n":"self"}],"o":{"n":"stack_t"}}],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"siginfo_t"}}],[11,"clone","","",79,{"i":[{"n":"self"}],"o":{"n":"glob64_t"}}],[11,"clone","","",80,{"i":[{"n":"self"}],"o":{"n":"statfs"}}],[11,"clone","","",81,{"i":[{"n":"self"}],"o":{"n":"msghdr"}}],[11,"clone","","",82,{"i":[{"n":"self"}],"o":{"n":"cmsghdr"}}],[11,"clone","","",83,{"i":[{"n":"self"}],"o":{"n":"termios"}}],[11,"clone","","",84,{"i":[{"n":"self"}],"o":{"n":"flock"}}],[11,"clone","","",113,{"i":[{"n":"self"}],"o":{"n":"sem_t"}}],[11,"clone","","",85,{"i":[{"n":"self"}],"o":{"n":"mallinfo"}}],[11,"clone","","",86,{"i":[{"n":"self"}],"o":{"n":"nlmsghdr"}}],[11,"clone","","",87,{"i":[{"n":"self"}],"o":{"n":"nlmsgerr"}}],[11,"clone","","",88,{"i":[{"n":"self"}],"o":{"n":"nl_pktinfo"}}],[11,"clone","","",89,{"i":[{"n":"self"}],"o":{"n":"nl_mmap_req"}}],[11,"clone","","",90,{"i":[{"n":"self"}],"o":{"n":"nl_mmap_hdr"}}],[11,"clone","","",91,{"i":[{"n":"self"}],"o":{"n":"nlattr"}}],[11,"clone","","",92,{"i":[{"n":"self"}],"o":{"n":"rtentry"}}],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"dirent"}}],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"dirent64"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"rlimit64"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"glob_t"}}],[11,"clone","","",114,{"i":[{"n":"self"}],"o":{"n":"pthread_mutex_t"}}],[11,"clone","","",115,{"i":[{"n":"self"}],"o":{"n":"pthread_rwlock_t"}}],[11,"clone","","",116,{"i":[{"n":"self"}],"o":{"n":"pthread_mutexattr_t"}}],[11,"clone","","",117,{"i":[{"n":"self"}],"o":{"n":"pthread_rwlockattr_t"}}],[11,"clone","","",118,{"i":[{"n":"self"}],"o":{"n":"pthread_cond_t"}}],[11,"clone","","",119,{"i":[{"n":"self"}],"o":{"n":"pthread_condattr_t"}}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"passwd"}}],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"spwd"}}],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"dqblk"}}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"signalfd_siginfo"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"itimerspec"}}],[11,"clone","","",120,{"i":[{"n":"self"}],"o":{"n":"fsid_t"}}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"mq_attr"}}],[11,"clone","","",121,{"i":[{"n":"self"}],"o":{"n":"cpu_set_t"}}],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"if_nameindex"}}],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"msginfo"}}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"mmsghdr"}}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"sembuf"}}],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"input_event"}}],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"input_id"}}],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"input_absinfo"}}],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"input_keymap_entry"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"input_mask"}}],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"ff_replay"}}],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"ff_trigger"}}],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"ff_envelope"}}],[11,"clone","","",59,{"i":[{"n":"self"}],"o":{"n":"ff_constant_effect"}}],[11,"clone","","",60,{"i":[{"n":"self"}],"o":{"n":"ff_ramp_effect"}}],[11,"clone","","",61,{"i":[{"n":"self"}],"o":{"n":"ff_condition_effect"}}],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"ff_periodic_effect"}}],[11,"clone","","",63,{"i":[{"n":"self"}],"o":{"n":"ff_rumble_effect"}}],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"ff_effect"}}],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"dl_phdr_info"}}],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"elf32_phdr"}}],[11,"clone","","",67,{"i":[{"n":"self"}],"o":{"n":"elf64_phdr"}}],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"ucred"}}],[11,"clone","","",69,{"i":[{"n":"self"}],"o":{"n":"mntent"}}],[11,"clone","","",122,{"i":[{"n":"self"}],"o":{"n":"posix_spawn_file_actions_t"}}],[11,"clone","","",123,{"i":[{"n":"self"}],"o":{"n":"posix_spawnattr_t"}}],[11,"clone","","",70,{"i":[{"n":"self"}],"o":{"n":"genlmsghdr"}}],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"in6_pktinfo"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"sockaddr"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"sockaddr_in"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"sockaddr_in6"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"sockaddr_un"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"sockaddr_storage"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"addrinfo"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"sockaddr_nl"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"sockaddr_ll"}}],[11,"clone","","",124,{"i":[{"n":"self"}],"o":{"n":"fd_set"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"tm"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"sched_param"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"dl_info"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"epoll_event"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"utsname"}}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"lconv"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"sigevent"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"in_pktinfo"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"ifaddrs"}}],[11,"clone","","",125,{"i":[{"n":"self"}],"o":{"n":"in6_rtmsg"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"group"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"utimbuf"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"timeval"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"timespec"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"rlimit"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"rusage"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"in_addr"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"in6_addr"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"ip_mreq"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"ipv6_mreq"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"hostent"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"iovec"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"pollfd"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"winsize"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"linger"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"sigval"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"itimerval"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"tms"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"servent"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"protoent"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"Elf32_Half","","",null,null],[6,"Elf32_Word","","",null,null],[6,"Elf32_Off","","",null,null],[6,"Elf32_Addr","","",null,null],[6,"Elf64_Half","","",null,null],[6,"Elf64_Word","","",null,null],[6,"Elf64_Off","","",null,null],[6,"Elf64_Addr","","",null,null],[6,"Elf64_Xword","","",null,null],[6,"__priority_which_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"INT_MIN","","",null,null],[17,"INT_MAX","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_UNKNOWN","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_PKTINFO","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_UNICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_IF","","",null,null],[17,"IPV6_MULTICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"IPV6_RECVPKTINFO","","",null,null],[17,"IPV6_PKTINFO","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"IPTOS_LOWDELAY","","",null,null],[17,"IPTOS_THROUGHPUT","","",null,null],[17,"IPTOS_RELIABILITY","","",null,null],[17,"IPTOS_MINCOST","","",null,null],[17,"IPTOS_PREC_NETCONTROL","","",null,null],[17,"IPTOS_PREC_INTERNETCONTROL","","",null,null],[17,"IPTOS_PREC_CRITIC_ECP","","",null,null],[17,"IPTOS_PREC_FLASHOVERRIDE","","",null,null],[17,"IPTOS_PREC_FLASH","","",null,null],[17,"IPTOS_PREC_IMMEDIATE","","",null,null],[17,"IPTOS_PREC_PRIORITY","","",null,null],[17,"IPTOS_PREC_ROUTINE","","",null,null],[17,"IPOPT_COPY","","",null,null],[17,"IPOPT_CLASS_MASK","","",null,null],[17,"IPOPT_NUMBER_MASK","","",null,null],[17,"IPOPT_CONTROL","","",null,null],[17,"IPOPT_RESERVED1","","",null,null],[17,"IPOPT_MEASUREMENT","","",null,null],[17,"IPOPT_RESERVED2","","",null,null],[17,"IPOPT_END","","",null,null],[17,"IPOPT_NOOP","","",null,null],[17,"IPOPT_SEC","","",null,null],[17,"IPOPT_LSRR","","",null,null],[17,"IPOPT_TIMESTAMP","","",null,null],[17,"IPOPT_RR","","",null,null],[17,"IPOPT_SID","","",null,null],[17,"IPOPT_SSRR","","",null,null],[17,"IPOPT_RA","","",null,null],[17,"IPVERSION","","",null,null],[17,"MAXTTL","","",null,null],[17,"IPDEFTTL","","",null,null],[17,"IPOPT_OPTVAL","","",null,null],[17,"IPOPT_OLEN","","",null,null],[17,"IPOPT_OFFSET","","",null,null],[17,"IPOPT_MINOFF","","",null,null],[17,"MAX_IPOPTLEN","","",null,null],[17,"IPOPT_NOP","","",null,null],[17,"IPOPT_EOL","","",null,null],[17,"IPOPT_TS","","",null,null],[17,"IPOPT_TS_TSONLY","","",null,null],[17,"IPOPT_TS_TSANDADDR","","",null,null],[17,"IPOPT_TS_PRESPEC","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"IFF_TUN","","",null,null],[17,"IFF_TAP","","",null,null],[17,"IFF_NO_PI","","",null,null],[17,"TUN_READQ_SIZE","","",null,null],[17,"TUN_TUN_DEV","","",null,null],[17,"TUN_TAP_DEV","","",null,null],[17,"TUN_TYPE_MASK","","",null,null],[17,"IFF_ONE_QUEUE","","",null,null],[17,"IFF_VNET_HDR","","",null,null],[17,"IFF_TUN_EXCL","","",null,null],[17,"IFF_MULTI_QUEUE","","",null,null],[17,"IFF_ATTACH_QUEUE","","",null,null],[17,"IFF_DETACH_QUEUE","","",null,null],[17,"IFF_PERSIST","","",null,null],[17,"IFF_NOFILTER","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"RENAME_NOREPLACE","","",null,null],[17,"RENAME_EXCHANGE","","",null,null],[17,"RENAME_WHITEOUT","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_NODATA","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"GRND_NONBLOCK","","",null,null],[17,"GRND_RANDOM","","",null,null],[17,"SECCOMP_MODE_DISABLED","","",null,null],[17,"SECCOMP_MODE_STRICT","","",null,null],[17,"SECCOMP_MODE_FILTER","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[17,"PT_NULL","","",null,null],[17,"PT_LOAD","","",null,null],[17,"PT_DYNAMIC","","",null,null],[17,"PT_INTERP","","",null,null],[17,"PT_NOTE","","",null,null],[17,"PT_SHLIB","","",null,null],[17,"PT_PHDR","","",null,null],[17,"PT_TLS","","",null,null],[17,"PT_NUM","","",null,null],[17,"PT_LOOS","","",null,null],[17,"PT_GNU_EH_FRAME","","",null,null],[17,"PT_GNU_STACK","","",null,null],[17,"PT_GNU_RELRO","","",null,null],[17,"ETH_ALEN","","",null,null],[17,"ETH_HLEN","","",null,null],[17,"ETH_ZLEN","","",null,null],[17,"ETH_DATA_LEN","","",null,null],[17,"ETH_FRAME_LEN","","",null,null],[17,"ETH_FCS_LEN","","",null,null],[17,"ETH_P_LOOP","","",null,null],[17,"ETH_P_PUP","","",null,null],[17,"ETH_P_PUPAT","","",null,null],[17,"ETH_P_IP","","",null,null],[17,"ETH_P_X25","","",null,null],[17,"ETH_P_ARP","","",null,null],[17,"ETH_P_BPQ","","",null,null],[17,"ETH_P_IEEEPUP","","",null,null],[17,"ETH_P_IEEEPUPAT","","",null,null],[17,"ETH_P_BATMAN","","",null,null],[17,"ETH_P_DEC","","",null,null],[17,"ETH_P_DNA_DL","","",null,null],[17,"ETH_P_DNA_RC","","",null,null],[17,"ETH_P_DNA_RT","","",null,null],[17,"ETH_P_LAT","","",null,null],[17,"ETH_P_DIAG","","",null,null],[17,"ETH_P_CUST","","",null,null],[17,"ETH_P_SCA","","",null,null],[17,"ETH_P_TEB","","",null,null],[17,"ETH_P_RARP","","",null,null],[17,"ETH_P_ATALK","","",null,null],[17,"ETH_P_AARP","","",null,null],[17,"ETH_P_8021Q","","",null,null],[17,"ETH_P_IPX","","",null,null],[17,"ETH_P_IPV6","","",null,null],[17,"ETH_P_PAUSE","","",null,null],[17,"ETH_P_SLOW","","",null,null],[17,"ETH_P_WCCP","","",null,null],[17,"ETH_P_MPLS_UC","","",null,null],[17,"ETH_P_MPLS_MC","","",null,null],[17,"ETH_P_ATMMPOA","","",null,null],[17,"ETH_P_PPP_DISC","","",null,null],[17,"ETH_P_PPP_SES","","",null,null],[17,"ETH_P_LINK_CTL","","",null,null],[17,"ETH_P_ATMFATE","","",null,null],[17,"ETH_P_PAE","","",null,null],[17,"ETH_P_AOE","","",null,null],[17,"ETH_P_8021AD","","",null,null],[17,"ETH_P_802_EX1","","",null,null],[17,"ETH_P_TIPC","","",null,null],[17,"ETH_P_MACSEC","","",null,null],[17,"ETH_P_8021AH","","",null,null],[17,"ETH_P_MVRP","","",null,null],[17,"ETH_P_1588","","",null,null],[17,"ETH_P_PRP","","",null,null],[17,"ETH_P_FCOE","","",null,null],[17,"ETH_P_TDLS","","",null,null],[17,"ETH_P_FIP","","",null,null],[17,"ETH_P_80221","","",null,null],[17,"ETH_P_LOOPBACK","","",null,null],[17,"ETH_P_QINQ1","","",null,null],[17,"ETH_P_QINQ2","","",null,null],[17,"ETH_P_QINQ3","","",null,null],[17,"ETH_P_EDSA","","",null,null],[17,"ETH_P_AF_IUCV","","",null,null],[17,"ETH_P_802_3_MIN","","",null,null],[17,"ETH_P_802_3","","",null,null],[17,"ETH_P_AX25","","",null,null],[17,"ETH_P_ALL","","",null,null],[17,"ETH_P_802_2","","",null,null],[17,"ETH_P_SNAP","","",null,null],[17,"ETH_P_DDCMP","","",null,null],[17,"ETH_P_WAN_PPP","","",null,null],[17,"ETH_P_PPP_MP","","",null,null],[17,"ETH_P_LOCALTALK","","",null,null],[17,"ETH_P_CANFD","","",null,null],[17,"ETH_P_PPPTALK","","",null,null],[17,"ETH_P_TR_802_2","","",null,null],[17,"ETH_P_MOBITEX","","",null,null],[17,"ETH_P_CONTROL","","",null,null],[17,"ETH_P_IRDA","","",null,null],[17,"ETH_P_ECONET","","",null,null],[17,"ETH_P_HDLC","","",null,null],[17,"ETH_P_ARCNET","","",null,null],[17,"ETH_P_DSA","","",null,null],[17,"ETH_P_TRAILER","","",null,null],[17,"ETH_P_PHONET","","",null,null],[17,"ETH_P_IEEE802154","","",null,null],[17,"ETH_P_CAIF","","",null,null],[17,"POSIX_SPAWN_RESETIDS","","",null,null],[17,"POSIX_SPAWN_SETPGROUP","","",null,null],[17,"POSIX_SPAWN_SETSIGDEF","","",null,null],[17,"POSIX_SPAWN_SETSIGMASK","","",null,null],[17,"POSIX_SPAWN_SETSCHEDPARAM","","",null,null],[17,"POSIX_SPAWN_SETSCHEDULER","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"GENL_NAMSIZ","","",null,null],[17,"GENL_MIN_ID","","",null,null],[17,"GENL_MAX_ID","","",null,null],[17,"GENL_ADMIN_PERM","","",null,null],[17,"GENL_CMD_CAP_DO","","",null,null],[17,"GENL_CMD_CAP_DUMP","","",null,null],[17,"GENL_CMD_CAP_HASPOL","","",null,null],[17,"GENL_ID_CTRL","","",null,null],[17,"CTRL_CMD_UNSPEC","","",null,null],[17,"CTRL_CMD_NEWFAMILY","","",null,null],[17,"CTRL_CMD_DELFAMILY","","",null,null],[17,"CTRL_CMD_GETFAMILY","","",null,null],[17,"CTRL_CMD_NEWOPS","","",null,null],[17,"CTRL_CMD_DELOPS","","",null,null],[17,"CTRL_CMD_GETOPS","","",null,null],[17,"CTRL_CMD_NEWMCAST_GRP","","",null,null],[17,"CTRL_CMD_DELMCAST_GRP","","",null,null],[17,"CTRL_CMD_GETMCAST_GRP","","",null,null],[17,"CTRL_ATTR_UNSPEC","","",null,null],[17,"CTRL_ATTR_FAMILY_ID","","",null,null],[17,"CTRL_ATTR_FAMILY_NAME","","",null,null],[17,"CTRL_ATTR_VERSION","","",null,null],[17,"CTRL_ATTR_HDRSIZE","","",null,null],[17,"CTRL_ATTR_MAXATTR","","",null,null],[17,"CTRL_ATTR_OPS","","",null,null],[17,"CTRL_ATTR_MCAST_GROUPS","","",null,null],[17,"CTRL_ATTR_OP_UNSPEC","","",null,null],[17,"CTRL_ATTR_OP_ID","","",null,null],[17,"CTRL_ATTR_OP_FLAGS","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_UNSPEC","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_NAME","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_ID","","",null,null],[17,"NF_DROP","","",null,null],[17,"NF_ACCEPT","","",null,null],[17,"NF_STOLEN","","",null,null],[17,"NF_QUEUE","","",null,null],[17,"NF_REPEAT","","",null,null],[17,"NF_STOP","","",null,null],[17,"NF_MAX_VERDICT","","",null,null],[17,"NF_VERDICT_MASK","","",null,null],[17,"NF_VERDICT_FLAG_QUEUE_BYPASS","","",null,null],[17,"NF_VERDICT_QMASK","","",null,null],[17,"NF_VERDICT_QBITS","","",null,null],[17,"NF_VERDICT_BITS","","",null,null],[17,"NF_INET_PRE_ROUTING","","",null,null],[17,"NF_INET_LOCAL_IN","","",null,null],[17,"NF_INET_FORWARD","","",null,null],[17,"NF_INET_LOCAL_OUT","","",null,null],[17,"NF_INET_POST_ROUTING","","",null,null],[17,"NF_INET_NUMHOOKS","","",null,null],[17,"NFPROTO_UNSPEC","","",null,null],[17,"NFPROTO_IPV4","","",null,null],[17,"NFPROTO_ARP","","",null,null],[17,"NFPROTO_BRIDGE","","",null,null],[17,"NFPROTO_IPV6","","",null,null],[17,"NFPROTO_DECNET","","",null,null],[17,"NFPROTO_NUMPROTO","","",null,null],[17,"NF_IP_PRE_ROUTING","","",null,null],[17,"NF_IP_LOCAL_IN","","",null,null],[17,"NF_IP_FORWARD","","",null,null],[17,"NF_IP_LOCAL_OUT","","",null,null],[17,"NF_IP_POST_ROUTING","","",null,null],[17,"NF_IP_NUMHOOKS","","",null,null],[17,"NF_IP_PRI_FIRST","","",null,null],[17,"NF_IP_PRI_CONNTRACK_DEFRAG","","",null,null],[17,"NF_IP_PRI_RAW","","",null,null],[17,"NF_IP_PRI_SELINUX_FIRST","","",null,null],[17,"NF_IP_PRI_CONNTRACK","","",null,null],[17,"NF_IP_PRI_MANGLE","","",null,null],[17,"NF_IP_PRI_NAT_DST","","",null,null],[17,"NF_IP_PRI_FILTER","","",null,null],[17,"NF_IP_PRI_SECURITY","","",null,null],[17,"NF_IP_PRI_NAT_SRC","","",null,null],[17,"NF_IP_PRI_SELINUX_LAST","","",null,null],[17,"NF_IP_PRI_CONNTRACK_HELPER","","",null,null],[17,"NF_IP_PRI_CONNTRACK_CONFIRM","","",null,null],[17,"NF_IP_PRI_LAST","","",null,null],[17,"NF_IP6_PRE_ROUTING","","",null,null],[17,"NF_IP6_LOCAL_IN","","",null,null],[17,"NF_IP6_FORWARD","","",null,null],[17,"NF_IP6_LOCAL_OUT","","",null,null],[17,"NF_IP6_POST_ROUTING","","",null,null],[17,"NF_IP6_NUMHOOKS","","",null,null],[17,"NF_IP6_PRI_FIRST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK_DEFRAG","","",null,null],[17,"NF_IP6_PRI_RAW","","",null,null],[17,"NF_IP6_PRI_SELINUX_FIRST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK","","",null,null],[17,"NF_IP6_PRI_MANGLE","","",null,null],[17,"NF_IP6_PRI_NAT_DST","","",null,null],[17,"NF_IP6_PRI_FILTER","","",null,null],[17,"NF_IP6_PRI_SECURITY","","",null,null],[17,"NF_IP6_PRI_NAT_SRC","","",null,null],[17,"NF_IP6_PRI_SELINUX_LAST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK_HELPER","","",null,null],[17,"NF_IP6_PRI_LAST","","",null,null],[17,"SIOCADDRT","","",null,null],[17,"SIOCDELRT","","",null,null],[17,"SIOCGIFNAME","","",null,null],[17,"SIOCSIFLINK","","",null,null],[17,"SIOCGIFCONF","","",null,null],[17,"SIOCGIFFLAGS","","",null,null],[17,"SIOCSIFFLAGS","","",null,null],[17,"SIOCGIFADDR","","",null,null],[17,"SIOCSIFADDR","","",null,null],[17,"SIOCGIFDSTADDR","","",null,null],[17,"SIOCSIFDSTADDR","","",null,null],[17,"SIOCGIFBRDADDR","","",null,null],[17,"SIOCSIFBRDADDR","","",null,null],[17,"SIOCGIFNETMASK","","",null,null],[17,"SIOCSIFNETMASK","","",null,null],[17,"SIOCGIFMETRIC","","",null,null],[17,"SIOCSIFMETRIC","","",null,null],[17,"SIOCGIFMEM","","",null,null],[17,"SIOCSIFMEM","","",null,null],[17,"SIOCGIFMTU","","",null,null],[17,"SIOCSIFMTU","","",null,null],[17,"SIOCSIFHWADDR","","",null,null],[17,"SIOCGIFENCAP","","",null,null],[17,"SIOCSIFENCAP","","",null,null],[17,"SIOCGIFHWADDR","","",null,null],[17,"SIOCGIFSLAVE","","",null,null],[17,"SIOCSIFSLAVE","","",null,null],[17,"SIOCADDMULTI","","",null,null],[17,"SIOCDELMULTI","","",null,null],[17,"SIOCDARP","","",null,null],[17,"SIOCGARP","","",null,null],[17,"SIOCSARP","","",null,null],[17,"SIOCDRARP","","",null,null],[17,"SIOCGRARP","","",null,null],[17,"SIOCSRARP","","",null,null],[17,"SIOCGIFMAP","","",null,null],[17,"SIOCSIFMAP","","",null,null],[17,"IPTOS_TOS_MASK","","",null,null],[17,"IPTOS_PREC_MASK","","",null,null],[17,"RTF_UP","","",null,null],[17,"RTF_GATEWAY","","",null,null],[17,"RTF_HOST","","",null,null],[17,"RTF_REINSTATE","","",null,null],[17,"RTF_DYNAMIC","","",null,null],[17,"RTF_MODIFIED","","",null,null],[17,"RTF_MTU","","",null,null],[17,"RTF_MSS","","",null,null],[17,"RTF_WINDOW","","",null,null],[17,"RTF_IRTT","","",null,null],[17,"RTF_REJECT","","",null,null],[17,"RTF_STATIC","","",null,null],[17,"RTF_XRESOLVE","","",null,null],[17,"RTF_NOFORWARD","","",null,null],[17,"RTF_THROW","","",null,null],[17,"RTF_NOPMTUDISC","","",null,null],[17,"RTF_DEFAULT","","",null,null],[17,"RTF_ALLONLINK","","",null,null],[17,"RTF_ADDRCONF","","",null,null],[17,"RTF_LINKRT","","",null,null],[17,"RTF_NONEXTHOP","","",null,null],[17,"RTF_CACHE","","",null,null],[17,"RTF_FLOW","","",null,null],[17,"RTF_POLICY","","",null,null],[17,"RTCF_VALVE","","",null,null],[17,"RTCF_MASQ","","",null,null],[17,"RTCF_NAT","","",null,null],[17,"RTCF_DOREDIRECT","","",null,null],[17,"RTCF_LOG","","",null,null],[17,"RTCF_DIRECTSRC","","",null,null],[17,"RTF_LOCAL","","",null,null],[17,"RTF_INTERFACE","","",null,null],[17,"RTF_MULTICAST","","",null,null],[17,"RTF_BROADCAST","","",null,null],[17,"RTF_NAT","","",null,null],[17,"RTF_ADDRCLASSMASK","","",null,null],[17,"RT_CLASS_UNSPEC","","",null,null],[17,"RT_CLASS_DEFAULT","","",null,null],[17,"RT_CLASS_MAIN","","",null,null],[17,"RT_CLASS_LOCAL","","",null,null],[17,"RT_CLASS_MAX","","",null,null],[17,"RTMSG_OVERRUN","","",null,null],[17,"RTMSG_NEWDEVICE","","",null,null],[17,"RTMSG_DELDEVICE","","",null,null],[17,"RTMSG_NEWROUTE","","",null,null],[17,"RTMSG_DELROUTE","","",null,null],[17,"RTMSG_NEWRULE","","",null,null],[17,"RTMSG_DELRULE","","",null,null],[17,"RTMSG_CONTROL","","",null,null],[17,"RTMSG_AR_FAILED","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"NLA_ALIGNTO","","",null,null],[17,"GENL_UNS_ADMIN_PERM","","",null,null],[17,"GENL_ID_VFS_DQUOT","","",null,null],[17,"GENL_ID_PMCRAID","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"NF_NETDEV_INGRESS","","",null,null],[17,"NF_NETDEV_NUMHOOKS","","",null,null],[17,"NFPROTO_INET","","",null,null],[17,"NFPROTO_NETDEV","","",null,null],[17,"NFT_TABLE_MAXNAMELEN","","",null,null],[17,"NFT_CHAIN_MAXNAMELEN","","",null,null],[17,"NFT_SET_MAXNAMELEN","","",null,null],[17,"NFT_OBJ_MAXNAMELEN","","",null,null],[17,"NFT_USERDATA_MAXLEN","","",null,null],[17,"NFT_REG_VERDICT","","",null,null],[17,"NFT_REG_1","","",null,null],[17,"NFT_REG_2","","",null,null],[17,"NFT_REG_3","","",null,null],[17,"NFT_REG_4","","",null,null],[17,"__NFT_REG_MAX","","",null,null],[17,"NFT_REG32_00","","",null,null],[17,"NFT_REG32_01","","",null,null],[17,"NFT_REG32_02","","",null,null],[17,"NFT_REG32_03","","",null,null],[17,"NFT_REG32_04","","",null,null],[17,"NFT_REG32_05","","",null,null],[17,"NFT_REG32_06","","",null,null],[17,"NFT_REG32_07","","",null,null],[17,"NFT_REG32_08","","",null,null],[17,"NFT_REG32_09","","",null,null],[17,"NFT_REG32_10","","",null,null],[17,"NFT_REG32_11","","",null,null],[17,"NFT_REG32_12","","",null,null],[17,"NFT_REG32_13","","",null,null],[17,"NFT_REG32_14","","",null,null],[17,"NFT_REG32_15","","",null,null],[17,"NFT_REG_SIZE","","",null,null],[17,"NFT_REG32_SIZE","","",null,null],[17,"NFT_CONTINUE","","",null,null],[17,"NFT_BREAK","","",null,null],[17,"NFT_JUMP","","",null,null],[17,"NFT_GOTO","","",null,null],[17,"NFT_RETURN","","",null,null],[17,"NFT_MSG_NEWTABLE","","",null,null],[17,"NFT_MSG_GETTABLE","","",null,null],[17,"NFT_MSG_DELTABLE","","",null,null],[17,"NFT_MSG_NEWCHAIN","","",null,null],[17,"NFT_MSG_GETCHAIN","","",null,null],[17,"NFT_MSG_DELCHAIN","","",null,null],[17,"NFT_MSG_NEWRULE","","",null,null],[17,"NFT_MSG_GETRULE","","",null,null],[17,"NFT_MSG_DELRULE","","",null,null],[17,"NFT_MSG_NEWSET","","",null,null],[17,"NFT_MSG_GETSET","","",null,null],[17,"NFT_MSG_DELSET","","",null,null],[17,"NFT_MSG_NEWSETELEM","","",null,null],[17,"NFT_MSG_GETSETELEM","","",null,null],[17,"NFT_MSG_DELSETELEM","","",null,null],[17,"NFT_MSG_NEWGEN","","",null,null],[17,"NFT_MSG_GETGEN","","",null,null],[17,"NFT_MSG_TRACE","","",null,null],[17,"NFT_MSG_NEWOBJ","","",null,null],[17,"NFT_MSG_GETOBJ","","",null,null],[17,"NFT_MSG_DELOBJ","","",null,null],[17,"NFT_MSG_GETOBJ_RESET","","",null,null],[17,"NFT_MSG_MAX","","",null,null],[17,"NFT_SET_ANONYMOUS","","",null,null],[17,"NFT_SET_CONSTANT","","",null,null],[17,"NFT_SET_INTERVAL","","",null,null],[17,"NFT_SET_MAP","","",null,null],[17,"NFT_SET_TIMEOUT","","",null,null],[17,"NFT_SET_EVAL","","",null,null],[17,"NFT_SET_POL_PERFORMANCE","","",null,null],[17,"NFT_SET_POL_MEMORY","","",null,null],[17,"NFT_SET_ELEM_INTERVAL_END","","",null,null],[17,"NFT_DATA_VALUE","","",null,null],[17,"NFT_DATA_VERDICT","","",null,null],[17,"NFT_DATA_RESERVED_MASK","","",null,null],[17,"NFT_DATA_VALUE_MAXLEN","","",null,null],[17,"NFT_BYTEORDER_NTOH","","",null,null],[17,"NFT_BYTEORDER_HTON","","",null,null],[17,"NFT_CMP_EQ","","",null,null],[17,"NFT_CMP_NEQ","","",null,null],[17,"NFT_CMP_LT","","",null,null],[17,"NFT_CMP_LTE","","",null,null],[17,"NFT_CMP_GT","","",null,null],[17,"NFT_CMP_GTE","","",null,null],[17,"NFT_RANGE_EQ","","",null,null],[17,"NFT_RANGE_NEQ","","",null,null],[17,"NFT_LOOKUP_F_INV","","",null,null],[17,"NFT_DYNSET_OP_ADD","","",null,null],[17,"NFT_DYNSET_OP_UPDATE","","",null,null],[17,"NFT_DYNSET_F_INV","","",null,null],[17,"NFT_PAYLOAD_LL_HEADER","","",null,null],[17,"NFT_PAYLOAD_NETWORK_HEADER","","",null,null],[17,"NFT_PAYLOAD_TRANSPORT_HEADER","","",null,null],[17,"NFT_PAYLOAD_CSUM_NONE","","",null,null],[17,"NFT_PAYLOAD_CSUM_INET","","",null,null],[17,"NFT_META_LEN","","",null,null],[17,"NFT_META_PROTOCOL","","",null,null],[17,"NFT_META_PRIORITY","","",null,null],[17,"NFT_META_MARK","","",null,null],[17,"NFT_META_IIF","","",null,null],[17,"NFT_META_OIF","","",null,null],[17,"NFT_META_IIFNAME","","",null,null],[17,"NFT_META_OIFNAME","","",null,null],[17,"NFT_META_IIFTYPE","","",null,null],[17,"NFT_META_OIFTYPE","","",null,null],[17,"NFT_META_SKUID","","",null,null],[17,"NFT_META_SKGID","","",null,null],[17,"NFT_META_NFTRACE","","",null,null],[17,"NFT_META_RTCLASSID","","",null,null],[17,"NFT_META_SECMARK","","",null,null],[17,"NFT_META_NFPROTO","","",null,null],[17,"NFT_META_L4PROTO","","",null,null],[17,"NFT_META_BRI_IIFNAME","","",null,null],[17,"NFT_META_BRI_OIFNAME","","",null,null],[17,"NFT_META_PKTTYPE","","",null,null],[17,"NFT_META_CPU","","",null,null],[17,"NFT_META_IIFGROUP","","",null,null],[17,"NFT_META_OIFGROUP","","",null,null],[17,"NFT_META_CGROUP","","",null,null],[17,"NFT_META_PRANDOM","","",null,null],[17,"NFT_CT_STATE","","",null,null],[17,"NFT_CT_DIRECTION","","",null,null],[17,"NFT_CT_STATUS","","",null,null],[17,"NFT_CT_MARK","","",null,null],[17,"NFT_CT_SECMARK","","",null,null],[17,"NFT_CT_EXPIRATION","","",null,null],[17,"NFT_CT_HELPER","","",null,null],[17,"NFT_CT_L3PROTOCOL","","",null,null],[17,"NFT_CT_SRC","","",null,null],[17,"NFT_CT_DST","","",null,null],[17,"NFT_CT_PROTOCOL","","",null,null],[17,"NFT_CT_PROTO_SRC","","",null,null],[17,"NFT_CT_PROTO_DST","","",null,null],[17,"NFT_CT_LABELS","","",null,null],[17,"NFT_CT_PKTS","","",null,null],[17,"NFT_CT_BYTES","","",null,null],[17,"NFT_LIMIT_PKTS","","",null,null],[17,"NFT_LIMIT_PKT_BYTES","","",null,null],[17,"NFT_LIMIT_F_INV","","",null,null],[17,"NFT_QUEUE_FLAG_BYPASS","","",null,null],[17,"NFT_QUEUE_FLAG_CPU_FANOUT","","",null,null],[17,"NFT_QUEUE_FLAG_MASK","","",null,null],[17,"NFT_QUOTA_F_INV","","",null,null],[17,"NFT_REJECT_ICMP_UNREACH","","",null,null],[17,"NFT_REJECT_TCP_RST","","",null,null],[17,"NFT_REJECT_ICMPX_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_NO_ROUTE","","",null,null],[17,"NFT_REJECT_ICMPX_PORT_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_HOST_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_ADMIN_PROHIBITED","","",null,null],[17,"NFT_NAT_SNAT","","",null,null],[17,"NFT_NAT_DNAT","","",null,null],[17,"NFT_TRACETYPE_UNSPEC","","",null,null],[17,"NFT_TRACETYPE_POLICY","","",null,null],[17,"NFT_TRACETYPE_RETURN","","",null,null],[17,"NFT_TRACETYPE_RULE","","",null,null],[17,"NFT_NG_INCREMENTAL","","",null,null],[17,"NFT_NG_RANDOM","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"PTHREAD_MUTEX_ADAPTIVE_NP","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"F_RDLCK","","",null,null],[17,"F_WRLCK","","",null,null],[17,"F_UNLCK","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"BOTHER","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","","",null,null],[17,"PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","","",null,null],[17,"PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"in_pktinfo"],[3,"ifaddrs"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"passwd"],[3,"spwd"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"genlmsghdr"],[3,"in6_pktinfo"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"mallinfo"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"nlattr"],[3,"rtentry"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"statvfs"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"fd_set"],[3,"in6_rtmsg"]]};
searchIndex["libloading"] = {"doc":"A memory-safer wrapper around system dynamic library loading primitives.","items":[[3,"Library","libloading","A loaded dynamic library.",null,null],[3,"Symbol","","Symbol from a library.",null,null],[0,"os","","Unsafe, platform specific bindings to dynamic library loading facilities.",null,null],[0,"unix","libloading::os","UNIX implementation of dynamic library loading.",null,null],[3,"Library","libloading::os::unix","A platform-specific equivalent of the cross-platform `Library`.",null,null],[3,"Symbol","","Symbol from a library.",null,null],[11,"new","","Find and load a shared library (module).",0,{"i":[{"n":"p"}],"o":{"g":["library"],"n":"result"}}],[11,"this","","Load the dynamic libraries linked into main program.",0,{"o":{"n":"library"}}],[11,"open","","Find and load a shared library (module).",0,{"i":[{"n":"option"},{"n":"c_int"}],"o":{"g":["library"],"n":"result"}}],[11,"get","","Get a pointer to function or static variable by symbol name.",0,null],[11,"drop","","",0,{"i":[{"n":"self"}]}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"lift_option","","Lift Option out of the symbol.",1,{"i":[{"n":"self"}],"o":{"g":["symbol"],"n":"option"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"symbol"}}],[11,"deref","","",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"windows","libloading::os","Windows implementation of dynamic library loading.",null,null],[0,"changelog","libloading","Project changelog",null,null],[0,"r0_5_0","libloading::changelog","Release 0.5.0 (2018-01-11)",null,null],[0,"r0_4_3","","Release 0.4.3 (2017-12-07)",null,null],[0,"r0_4_2","","Release 0.4.2 (2017-09-24)",null,null],[0,"r0_4_1","","Release 0.4.1 (2017-08-29)",null,null],[0,"r0_4_0","","Release 0.4.0 (2017-05-01)",null,null],[0,"r0_3_4","","Release 0.3.4 (2017-03-25)",null,null],[0,"r0_3_3","","Release 0.3.3 (2017-03-25)",null,null],[0,"r0_3_2","","Release 0.3.2 (2017-02-10)",null,null],[0,"r0_3_1","","Release 0.3.1 (2016-10-01)",null,null],[0,"r0_3_0","","Release 0.3.0 (2016-07-27)",null,null],[6,"Result","libloading","",null,null],[11,"new","","Find and load a dynamic library.",2,{"i":[{"n":"p"}],"o":{"g":["library"],"n":"result"}}],[11,"get","","Get a pointer to function or static variable by symbol name.",2,null],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",2,{"i":[{"n":"library"}],"o":{"n":"library"}}],[11,"from","libloading::os::unix","",0,{"i":[{"n":"library"}],"o":{"n":"library"}}],[11,"into_raw","libloading","Extract the wrapped `os::platform::Symbol`.",3,{"i":[{"n":"self"}],"o":{"n":"symbol"}}],[11,"from_raw","","Wrap the `os::platform::Symbol` into this safe wrapper.",3,{"i":[{"n":"symbol"},{"n":"l"}],"o":{"n":"symbol"}}],[11,"lift_option","","Lift Option out of the symbol.",3,{"i":[{"n":"self"}],"o":{"g":["symbol"],"n":"option"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"symbol"}}],[11,"deref","","",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"Library"],[3,"Symbol"],[3,"Library"],[3,"Symbol"]]};
searchIndex["linked_hash_map"] = {"doc":"A `HashMap` wrapper that holds key-value pairs in insertion order.","items":[[3,"LinkedHashMap","linked_hash_map","A linked hash map.",null,null],[3,"Iter","","An insertion-order iterator over a `LinkedHashMap`'s entries, with immutable references to the values.",null,null],[3,"IterMut","","An insertion-order iterator over a `LinkedHashMap`'s entries, with mutable references to the values.",null,null],[3,"IntoIter","","A consuming insertion-order iterator over a `LinkedHashMap`'s entries.",null,null],[3,"Entries","","An insertion-order iterator over a `LinkedHashMap`'s entries represented as an `OccupiedEntry`.",null,null],[3,"Keys","","An insertion-order iterator over a `LinkedHashMap`'s keys.",null,null],[3,"Values","","An insertion-order iterator over a `LinkedHashMap`'s values.",null,null],[3,"OccupiedEntry","","A view into a single occupied location in a `LinkedHashMap`.",null,null],[3,"VacantEntry","","A view into a single empty location in a `LinkedHashMap`.",null,null],[4,"Entry","","A view into a single location in a map, which may be vacant or occupied.",null,null],[13,"Occupied","","An occupied Entry.",0,null],[13,"Vacant","","A vacant Entry.",0,null],[11,"new","","Creates a linked hash map.",1,{"o":{"n":"self"}}],[11,"with_capacity","","Creates an empty linked hash map with the given initial capacity.",1,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"with_hasher","","Creates an empty linked hash map with the given initial hash builder.",1,{"i":[{"n":"s"}],"o":{"n":"self"}}],[11,"with_capacity_and_hasher","","Creates an empty linked hash map with the given initial capacity and hash builder.",1,{"i":[{"n":"usize"},{"n":"s"}],"o":{"n":"self"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted into the map. The map may reserve more space to avoid frequent allocations.",1,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",1,{"i":[{"n":"self"}]}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"entry"}}],[11,"entries","","Returns an iterator visiting all entries in insertion order. Iterator element type is `OccupiedEntry<K, V, S>`. Allows for removal as well as replacing the entry.",1,{"i":[{"n":"self"}],"o":{"n":"entries"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already existed, the old value is returned.",1,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"option"}}],[11,"contains_key","","Checks if the map contains the given key.",1,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"bool"}}],[11,"get","","Returns the value corresponding to the key in the map.",1,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"option"}}],[11,"get_mut","","Returns the mutable reference corresponding to the key in the map.",1,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"option"}}],[11,"get_refresh","","Returns the value corresponding to the key in the map.",1,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"option"}}],[11,"remove","","Removes and returns the value corresponding to the key from the map.",1,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"option"}}],[11,"capacity","","Returns the maximum number of key-value pairs the map can hold without reallocating.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"pop_front","","Removes the first entry.",1,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"front","","Gets the first entry.",1,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"pop_back","","Removes the last entry.",1,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"back","","Gets the last entry.",1,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","Returns the number of key-value pairs in the map.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns whether the map is currently empty.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"hasher","","Returns a reference to the map's hasher.",1,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"clear","","Clears the map of all key-value pairs.",1,{"i":[{"n":"self"}]}],[11,"iter","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a V)`",1,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"iter_mut","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a mut V)` # Examples ``` use linked_hash_map::LinkedHashMap;",1,{"i":[{"n":"self"}],"o":{"n":"itermut"}}],[11,"keys","","Returns a double-ended iterator visiting all key in order of insertion.",1,{"i":[{"n":"self"}],"o":{"n":"keys"}}],[11,"values","","Returns a double-ended iterator visiting all values in order of insertion.",1,{"i":[{"n":"self"}],"o":{"n":"values"}}],[11,"index","","",1,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"v"}}],[11,"index_mut","","",1,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"v"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",1,{"o":{"n":"self"}}],[11,"extend","","",1,{"i":[{"n":"self"},{"n":"i"}]}],[11,"extend","","",1,{"i":[{"n":"self"},{"n":"i"}]}],[11,"from_iter","","",1,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"fmt","","Returns a string that lists the key-value pairs in insertion order.",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"le","","",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"ge","","",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"gt","","",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"ordering"}}],[11,"hash","","",1,{"i":[{"n":"self"},{"n":"h"}]}],[11,"drop","","",1,{"i":[{"n":"self"}]}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",2,null],[11,"next","","",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",4,null],[11,"next","","",3,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",3,null],[11,"next","","",5,{"i":[{"n":"self"}],"o":{"g":["occupiedentry"],"n":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next_back","","",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next_back","","",3,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",2,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"len","","",4,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"len","","",3,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"drop","","",3,{"i":[{"n":"self"}]}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"next","","",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",6,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"next","","",7,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",7,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"into_iter","","",1,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"key","","Returns the entry key",0,{"i":[{"n":"self"}],"o":{"n":"k"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"v"}}],[11,"key","","Gets a reference to the entry key",8,{"i":[{"n":"self"}],"o":{"n":"k"}}],[11,"get","","Gets a reference to the value in the entry.",8,{"i":[{"n":"self"}],"o":{"n":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",8,{"i":[{"n":"self"}],"o":{"n":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry with a lifetime bound to the map itself",8,{"i":[{"n":"self"}],"o":{"n":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",8,{"i":[{"n":"self"}],"o":{"n":"v"}}],[11,"key","","Gets a reference to the entry key",9,{"i":[{"n":"self"}],"o":{"n":"k"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"v"}}]],"paths":[[4,"Entry"],[3,"LinkedHashMap"],[3,"Iter"],[3,"IntoIter"],[3,"IterMut"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"OccupiedEntry"],[3,"VacantEntry"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"Record","log","The \"payload\" of a log message.",null,null],[3,"RecordBuilder","","Builder for `Record`.",null,null],[3,"Metadata","","Metadata about a log message.",null,null],[3,"MetadataBuilder","","Builder for `Metadata`.",null,null],[3,"SetLoggerError","","The type returned by [`set_logger`] if [`set_logger`] has already been called.",null,null],[3,"ParseLevelError","","The type returned by [`from_str`] when the string doesn't match any of the log levels.",null,null],[4,"Level","","An enum representing the available verbosity levels of the logger.",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LevelFilter","","An enum representing the available verbosity level filters of the logger.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"set_max_level","","Sets the global maximum log level.",null,{"i":[{"n":"levelfilter"}]}],[5,"max_level","","Returns the current maximum log level.",null,{"o":{"n":"levelfilter"}}],[5,"set_logger","","Sets the global logger to a `&'static Log`.",null,{"i":[{"n":"log"}],"o":{"g":["setloggererror"],"n":"result"}}],[5,"logger","","Returns a reference to the logger.",null,{"o":{"n":"log"}}],[17,"STATIC_MAX_LEVEL","","The statically resolved maximum log level.",null,null],[8,"Log","","A trait encapsulating the operations required of a logger.",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,{"i":[{"n":"self"},{"n":"metadata"}],"o":{"n":"bool"}}],[10,"log","","Logs the `Record`.",2,{"i":[{"n":"self"},{"n":"record"}]}],[10,"flush","","Flushes any buffered records.",2,{"i":[{"n":"self"}]}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"level"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"levelfilter"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"level"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"levelfilter"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"levelfilter"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"levelfilter"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"levelfilter"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"levelfilter"}],"o":{"n":"bool"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"ordering"}}],[11,"from_str","","",0,{"i":[{"n":"str"}],"o":{"g":["level"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"o":{"n":"level"}}],[11,"to_level_filter","","Converts the `Level` to the equivalent `LevelFilter`.",0,{"i":[{"n":"self"}],"o":{"n":"levelfilter"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"levelfilter"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"levelfilter"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"levelfilter"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",1,{"i":[{"n":"self"},{"n":"levelfilter"}],"o":{"n":"bool"}}],[11,"le","","",1,{"i":[{"n":"self"},{"n":"levelfilter"}],"o":{"n":"bool"}}],[11,"gt","","",1,{"i":[{"n":"self"},{"n":"levelfilter"}],"o":{"n":"bool"}}],[11,"ge","","",1,{"i":[{"n":"self"},{"n":"levelfilter"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"level"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",1,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"le","","",1,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"gt","","",1,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"ge","","",1,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"levelfilter"}],"o":{"n":"ordering"}}],[11,"from_str","","",1,{"i":[{"n":"str"}],"o":{"g":["levelfilter"],"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"o":{"n":"levelfilter"}}],[11,"to_level","","Converts `self` to the equivalent `Level`.",1,{"i":[{"n":"self"}],"o":{"g":["level"],"n":"option"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"record"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"builder","","Returns a new builder.",3,{"o":{"n":"recordbuilder"}}],[11,"args","","The message body.",3,{"i":[{"n":"self"}],"o":{"n":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"i":[{"n":"self"}],"o":{"n":"metadata"}}],[11,"level","","The verbosity level of the message.",3,{"i":[{"n":"self"}],"o":{"n":"level"}}],[11,"target","","The name of the target of the directive.",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"module_path","","The module path of the message.",3,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"file","","The source file containing the message.",3,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"line","","The line containing the message.",3,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct new `RecordBuilder`.",4,{"o":{"n":"recordbuilder"}}],[11,"args","","Set `args`.",4,{"i":[{"n":"self"},{"n":"arguments"}],"o":{"n":"recordbuilder"}}],[11,"metadata","","Set `metadata`. Construct a `Metadata` object with `MetadataBuilder`.",4,{"i":[{"n":"self"},{"n":"metadata"}],"o":{"n":"recordbuilder"}}],[11,"level","","Set `Metadata::level`.",4,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"recordbuilder"}}],[11,"target","","Set `Metadata::target`",4,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"recordbuilder"}}],[11,"module_path","","Set `module_path`",4,{"i":[{"n":"self"},{"g":["str"],"n":"option"}],"o":{"n":"recordbuilder"}}],[11,"file","","Set `file`",4,{"i":[{"n":"self"},{"g":["str"],"n":"option"}],"o":{"n":"recordbuilder"}}],[11,"line","","Set `line`",4,{"i":[{"n":"self"},{"g":["u32"],"n":"option"}],"o":{"n":"recordbuilder"}}],[11,"build","","Invoke the builder and return a `Record`",4,{"i":[{"n":"self"}],"o":{"n":"record"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"metadata"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"metadata"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"metadata"}],"o":{"n":"bool"}}],[11,"cmp","","",5,{"i":[{"n":"self"},{"n":"metadata"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",5,{"i":[{"n":"self"},{"n":"metadata"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",5,{"i":[{"n":"self"},{"n":"metadata"}],"o":{"n":"bool"}}],[11,"le","","",5,{"i":[{"n":"self"},{"n":"metadata"}],"o":{"n":"bool"}}],[11,"gt","","",5,{"i":[{"n":"self"},{"n":"metadata"}],"o":{"n":"bool"}}],[11,"ge","","",5,{"i":[{"n":"self"},{"n":"metadata"}],"o":{"n":"bool"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"builder","","Returns a new builder.",5,{"o":{"n":"metadatabuilder"}}],[11,"level","","The verbosity level of the message.",5,{"i":[{"n":"self"}],"o":{"n":"level"}}],[11,"target","","The name of the target of the directive.",5,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"metadatabuilder"}],"o":{"n":"bool"}}],[11,"ne","","",6,{"i":[{"n":"self"},{"n":"metadatabuilder"}],"o":{"n":"bool"}}],[11,"cmp","","",6,{"i":[{"n":"self"},{"n":"metadatabuilder"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",6,{"i":[{"n":"self"},{"n":"metadatabuilder"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",6,{"i":[{"n":"self"},{"n":"metadatabuilder"}],"o":{"n":"bool"}}],[11,"le","","",6,{"i":[{"n":"self"},{"n":"metadatabuilder"}],"o":{"n":"bool"}}],[11,"gt","","",6,{"i":[{"n":"self"},{"n":"metadatabuilder"}],"o":{"n":"bool"}}],[11,"ge","","",6,{"i":[{"n":"self"},{"n":"metadatabuilder"}],"o":{"n":"bool"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `MetadataBuilder`.",6,{"o":{"n":"metadatabuilder"}}],[11,"level","","Setter for `level`.",6,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"metadatabuilder"}}],[11,"target","","Setter for `target`.",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"metadatabuilder"}}],[11,"build","","Returns a `Metadata` object.",6,{"i":[{"n":"self"}],"o":{"n":"metadata"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"parselevelerror"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"parselevelerror"}],"o":{"n":"bool"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",null,null]],"paths":[[4,"Level"],[4,"LevelFilter"],[8,"Log"],[3,"Record"],[3,"RecordBuilder"],[3,"Metadata"],[3,"MetadataBuilder"],[3,"SetLoggerError"],[3,"ParseLevelError"]]};
searchIndex["memmap"] = {"doc":"A cross-platform Rust API for memory mapped buffers.","items":[[3,"MmapOptions","memmap","A memory map builder, providing advanced options and flags for specifying memory map behavior.",null,null],[3,"Mmap","","An immutable memory mapped buffer.",null,null],[3,"MmapMut","","A mutable memory mapped buffer.",null,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"mmapoptions"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",0,{"o":{"n":"mmapoptions"}}],[11,"new","","Creates a new set of options for configuring and creating a memory map.",0,{"o":{"n":"mmapoptions"}}],[11,"offset","","Configures the memory map to start at byte `offset` from the beginning of the file.",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"len","","Configures the created memory mapped buffer to be `len` bytes long.",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"stack","","Configures the anonymous memory map to be suitable for a process or thread stack.",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"map","","Creates a read-only memory map backed by a file.",0,{"i":[{"n":"self"},{"n":"file"}],"o":{"g":["mmap"],"n":"result"}}],[11,"map_exec","","Creates a readable and executable memory map backed by a file.",0,{"i":[{"n":"self"},{"n":"file"}],"o":{"g":["mmap"],"n":"result"}}],[11,"map_mut","","Creates a writeable memory map backed by a file.",0,{"i":[{"n":"self"},{"n":"file"}],"o":{"g":["mmapmut"],"n":"result"}}],[11,"map_copy","","Creates a copy-on-write memory map backed by a file.",0,{"i":[{"n":"self"},{"n":"file"}],"o":{"g":["mmapmut"],"n":"result"}}],[11,"map_anon","","Creates an anonymous memory map.",0,{"i":[{"n":"self"}],"o":{"g":["mmapmut"],"n":"result"}}],[11,"map","","Creates a read-only memory map backed by a file.",1,{"i":[{"n":"file"}],"o":{"g":["mmap"],"n":"result"}}],[11,"make_mut","","Transition the memory map to be writable.",1,{"i":[{"n":"self"}],"o":{"g":["mmapmut"],"n":"result"}}],[11,"deref","","",1,null],[11,"as_ref","","",1,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"map_mut","","Creates a writeable memory map backed by a file.",2,{"i":[{"n":"file"}],"o":{"g":["mmapmut"],"n":"result"}}],[11,"map_anon","","Creates an anonymous memory map.",2,{"i":[{"n":"usize"}],"o":{"g":["mmapmut"],"n":"result"}}],[11,"flush","","Flushes outstanding memory map modifications to disk.",2,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"flush_async","","Asynchronously flushes outstanding memory map modifications to disk.",2,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"flush_range","","Flushes outstanding memory map modifications in the range to disk.",2,{"i":[{"n":"self"},{"n":"usize"},{"n":"usize"}],"o":{"n":"result"}}],[11,"flush_async_range","","Asynchronously flushes outstanding memory map modifications in the range to disk.",2,{"i":[{"n":"self"},{"n":"usize"},{"n":"usize"}],"o":{"n":"result"}}],[11,"make_read_only","","Returns an immutable version of this memory mapped buffer.",2,{"i":[{"n":"self"}],"o":{"g":["mmap"],"n":"result"}}],[11,"make_exec","","Transition the memory map to be readable and executable.",2,{"i":[{"n":"self"}],"o":{"g":["mmap"],"n":"result"}}],[11,"deref","","",2,null],[11,"deref_mut","","",2,null],[11,"as_ref","","",2,null],[11,"as_mut","","",2,null],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"MmapOptions"],[3,"Mmap"],[3,"MmapMut"]]};
searchIndex["nodrop"] = {"doc":"The nodrop crate has the following cargo feature flags:","items":[[3,"NoDrop","nodrop","A type holding T that will not call its destructor on drop",null,null],[11,"new","","Create a new NoDrop.",0,{"i":[{"n":"t"}],"o":{"n":"nodrop"}}],[11,"into_inner","","Extract the inner value.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"drop","","",0,{"i":[{"n":"self"}]}],[11,"deref","","",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref_mut","","",0,{"i":[{"n":"self"}],"o":{"n":"t"}}]],"paths":[[3,"NoDrop"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[3,"BigInt","num","A big signed integer type.",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[3,"Complex","","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"i":[{"n":"a"},{"n":"a"}],"o":{"n":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"i":[{"n":"a"},{"n":"a"}],"o":{"n":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"i":[{"n":"a"},{"n":"a"},{"n":"a"}],"o":{"n":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"i":[{"n":"a"},{"n":"a"},{"n":"a"}],"o":{"n":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",2,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,{"i":[{"n":"str"},{"n":"u32"}],"o":{"n":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"o":{"n":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"o":{"n":"self"}}],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",5,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",5,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns the sign of the number.",5,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",6,{"o":{"n":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",6,{"o":{"n":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"o":{"n":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"o":{"n":"t"}}],[5,"abs","","Computes the absolute value.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",7,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",7,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",8,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",9,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",10,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",11,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",13,{"o":{"n":"self"}}],[10,"infinity","","Returns the infinite value.",13,{"o":{"n":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",13,{"o":{"n":"self"}}],[10,"neg_zero","","Returns `-0.0`.",13,{"o":{"n":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",13,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",13,{"o":{"n":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",13,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",13,{"o":{"n":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",13,{"i":[{"n":"self"}],"o":{"n":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"trunc","","Return the integer part of a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"fract","","Returns the fractional part of a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",13,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"powi","","Raise a number to an integer power.",13,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"powf","","Raise a number to a floating point power.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sqrt","","Take the square root of a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp2","","Returns `2^(self)`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_degrees","","Converts radians to degrees.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_radians","","Converts degrees to radians.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"max","","Returns the maximum of the two numbers.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"min","","Returns the minimum of the two numbers.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"cbrt","","Take the cubic root of a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",13,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Hyperbolic sine function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Hyperbolic cosine function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Hyperbolic tangent function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",13,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_i128","","Converts the value of `self` to an `i128`.",14,{"i":[{"n":"self"}],"o":{"g":["i128"],"n":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_u128","","Converts the value of `self` to an `u128`.",14,{"i":[{"n":"self"}],"o":{"g":["u128"],"n":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"isize"}],"o":{"n":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i8"}],"o":{"n":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i16"}],"o":{"n":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i32"}],"o":{"n":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i128"}],"o":{"n":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"usize"}],"o":{"n":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u8"}],"o":{"n":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u16"}],"o":{"n":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u32"}],"o":{"n":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u128"}],"o":{"n":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"i":[{"n":"t"}],"o":{"n":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_i128","","Converts the value of `self` to an `i128`.",14,{"i":[{"n":"self"}],"o":{"g":["i128"],"n":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_u128","","Converts the value of `self` to an `u128`.",14,{"i":[{"n":"self"}],"o":{"g":["u128"],"n":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"isize"}],"o":{"n":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i8"}],"o":{"n":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i16"}],"o":{"n":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i32"}],"o":{"n":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i128"}],"o":{"n":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"usize"}],"o":{"n":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u8"}],"o":{"n":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u16"}],"o":{"n":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u32"}],"o":{"n":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u128"}],"o":{"n":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"i":[{"n":"t"}],"o":{"n":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"i":[{"n":"t"}],"o":{"n":"option"}}],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",17,{"i":[{"n":"self"}],"o":{"n":"t"}}],[5,"cast","num","Cast from one machine scalar to another.",null,{"i":[{"n":"t"}],"o":{"n":"option"}}],[0,"pow","","",null,null],[8,"Pow","num::pow","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",18,null],[10,"pow","","Returns `self` to the power `rhs`.",18,null],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"option"}}],[5,"pow","num","Raises a value to the power of exp, using exponentiation by squaring.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"option"}}],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[0,"bigint","","",null,null],[4,"ParseBigIntError","num::bigint","",null,null],[13,"ParseInt","","",19,null],[13,"Other","","",19,null],[0,"big_digit","","",null,null],[6,"BigDigit","num::bigint::big_digit","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[5,"from_doublebigdigit","","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"i":[{"n":"u32"},{"n":"u32"}],"o":{"n":"u64"}}],[8,"ToBigInt","num::bigint","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",20,{"i":[{"n":"self"}],"o":{"g":["bigint"],"n":"option"}}],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",21,null],[13,"NoSign","","",21,null],[13,"Plus","","",21,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",22,{"i":[{"n":"self"}],"o":{"g":["biguint"],"n":"option"}}],[3,"BigInt","","A big signed integer type.",null,null],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",23,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",23,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails when the bound is zero.",23,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",23,{"i":[{"n":"self"},{"n":"biguint"},{"n":"biguint"}],"o":{"n":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",23,{"i":[{"n":"self"},{"n":"bigint"},{"n":"bigint"}],"o":{"n":"bigint"}}],[3,"BigUint","","A big unsigned integer type.",null,null],[0,"complex","num","",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[3,"ParseComplexError","","",null,null],[0,"integer","num","",null,null],[8,"Integer","num::integer","",null,null],[10,"div_floor","","Floored integer division.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[3,"IterBinomial","","An iterator over binomial coefficients.",null,null],[5,"binomial","","Calculate the binomial coefficient.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"multinomial","","Calculate the multinomial coefficient.",null,null],[5,"sqrt","","Returns the truncated principal square root of an integer -- see Roots::sqrt.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"cbrt","","Returns the truncated principal cube root of an integer -- see Roots::cbrt.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[8,"Roots","","Provides methods to compute an integer's square root, cube root, and arbitrary `n`th root.",null,null],[10,"nth_root","","Returns the truncated principal `n`th root of an integer -- `if x >= 0 { ⌊ⁿ√x⌋ } else { ⌈ⁿ√x⌉ }`",24,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[5,"nth_root","","Returns the truncated principal `n`th root of an integer -- see Roots::nth_root.",null,{"i":[{"n":"t"},{"n":"u32"}],"o":{"n":"t"}}],[0,"iter","num","",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"i":[{"n":"a"},{"n":"a"}],"o":{"n":"range"}}],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"i":[{"n":"a"},{"n":"a"}],"o":{"n":"rangeinclusive"}}],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"i":[{"n":"a"},{"n":"a"},{"n":"a"}],"o":{"n":"rangestep"}}],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"i":[{"n":"a"},{"n":"a"},{"n":"a"}],"o":{"n":"rangestepinclusive"}}],[0,"traits","num","",null,null],[0,"identities","num::traits","",null,null],[8,"Zero","num::traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"o":{"n":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"o":{"n":"self"}}],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"o":{"n":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"o":{"n":"t"}}],[0,"sign","num::traits","",null,null],[8,"Signed","num::traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",5,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",5,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns the sign of the number.",5,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[5,"abs","","Computes the absolute value.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num::traits","",null,null],[0,"saturating","num::traits::ops","",null,null],[8,"Saturating","num::traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",7,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",7,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[0,"checked","num::traits::ops","",null,null],[8,"CheckedAdd","num::traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",8,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",9,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",10,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",11,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",25,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedNeg","","Performs negation that returns `None` if the result can't be represented.",null,null],[10,"checked_neg","","Negates a number, returning `None` for results that can't be represented, like signed `MIN` values that can't be positive, or non-zero unsigned values that can't be negative.",26,{"i":[{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",27,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",28,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[0,"wrapping","num::traits::ops","",null,null],[8,"WrappingAdd","num::traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",29,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",30,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",31,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[0,"inv","num::traits::ops","",null,null],[8,"Inv","num::traits::ops::inv","Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.",null,null],[16,"Output","","The result after applying the operator.",32,null],[10,"inv","","Returns the multiplicative inverse of `self`.",32,null],[0,"mul_add","num::traits::ops","",null,null],[8,"MulAdd","num::traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",33,null],[10,"mul_add","","Performs the fused multiply-add operation.",33,null],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",34,null],[0,"bounds","num::traits","",null,null],[8,"Bounded","num::traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",6,{"o":{"n":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",6,{"o":{"n":"self"}}],[0,"float","num::traits","",null,null],[8,"FloatCore","num::traits::float","Generic trait for floating point numbers that works with `no_std`.",null,null],[10,"infinity","","Returns positive infinity.",35,{"o":{"n":"self"}}],[10,"neg_infinity","","Returns negative infinity.",35,{"o":{"n":"self"}}],[10,"nan","","Returns NaN.",35,{"o":{"n":"self"}}],[10,"neg_zero","","Returns `-0.0`.",35,{"o":{"n":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",35,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",35,{"o":{"n":"self"}}],[10,"epsilon","","Returns epsilon, a small positive value.",35,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",35,{"o":{"n":"self"}}],[11,"is_nan","","Returns `true` if the number is NaN.",35,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_infinite","","Returns `true` if the number is infinite.",35,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",35,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_normal","","Returns `true` if the number is neither zero, infinite, subnormal or NaN.",35,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",35,{"i":[{"n":"self"}],"o":{"n":"fpcategory"}}],[11,"floor","","Returns the largest integer less than or equal to a number.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"ceil","","Returns the smallest integer greater than or equal to a number.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"trunc","","Return the integer part of a number.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fract","","Returns the fractional part of a number.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"abs","","Computes the absolute value of `self`. Returns `FloatCore::nan()` if the number is `FloatCore::nan()`.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"signum","","Returns a number that represents the sign of `self`.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `FloatCore::infinity()`, and since Rust 1.20 also `FloatCore::nan()`.",35,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `FloatCore::neg_infinity()`, and since Rust 1.20 also `-FloatCore::nan()`.",35,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"min","","Returns the minimum of the two numbers.",35,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"max","","Returns the maximum of the two numbers.",35,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the number.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"powi","","Raise a number to an integer power.",35,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",35,null],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",13,{"o":{"n":"self"}}],[10,"infinity","","Returns the infinite value.",13,{"o":{"n":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",13,{"o":{"n":"self"}}],[10,"neg_zero","","Returns `-0.0`.",13,{"o":{"n":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",13,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",13,{"o":{"n":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",13,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",13,{"o":{"n":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",13,{"i":[{"n":"self"}],"o":{"n":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"trunc","","Return the integer part of a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"fract","","Returns the fractional part of a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",13,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"powi","","Raise a number to an integer power.",13,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"powf","","Raise a number to a floating point power.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sqrt","","Take the square root of a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp2","","Returns `2^(self)`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_degrees","","Converts radians to degrees.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_radians","","Converts degrees to radians.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"max","","Returns the maximum of the two numbers.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"min","","Returns the minimum of the two numbers.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"cbrt","","Take the cubic root of a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",13,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Hyperbolic sine function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Hyperbolic cosine function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Hyperbolic tangent function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",13,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",36,{"o":{"n":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",36,{"o":{"n":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",36,{"o":{"n":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",36,{"o":{"n":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",36,{"o":{"n":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",36,{"o":{"n":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",36,{"o":{"n":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",36,{"o":{"n":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",36,{"o":{"n":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",36,{"o":{"n":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",36,{"o":{"n":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",36,{"o":{"n":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",36,{"o":{"n":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",36,{"o":{"n":"self"}}],[10,"PI","","Return Archimedes’ constant.",36,{"o":{"n":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",36,{"o":{"n":"self"}}],[0,"real","num::traits","",null,null],[8,"Real","num::traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",null,null],[10,"min_value","","Returns the smallest finite value that this type can represent.",37,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",37,{"o":{"n":"self"}}],[10,"epsilon","","Returns epsilon, a small positive value.",37,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",37,{"o":{"n":"self"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"trunc","","Return the integer part of a number.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"fract","","Returns the fractional part of a number.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",37,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",37,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",37,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"powi","","Raise a number to an integer power.",37,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"powf","","Raise a number to a real number power.",37,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sqrt","","Take the square root of a number.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp2","","Returns `2^(self)`.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",37,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_degrees","","Converts radians to degrees.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_radians","","Converts degrees to radians.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"max","","Returns the maximum of the two numbers.",37,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"min","","Returns the minimum of the two numbers.",37,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",37,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"cbrt","","Take the cubic root of a number.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",37,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",37,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",37,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Hyperbolic sine function.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Hyperbolic cosine function.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Hyperbolic tangent function.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[0,"cast","num::traits","",null,null],[8,"ToPrimitive","num::traits::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_i128","","Converts the value of `self` to an `i128`.",14,{"i":[{"n":"self"}],"o":{"g":["i128"],"n":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_u128","","Converts the value of `self` to an `u128`.",14,{"i":[{"n":"self"}],"o":{"g":["u128"],"n":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"isize"}],"o":{"n":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i8"}],"o":{"n":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i16"}],"o":{"n":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i32"}],"o":{"n":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i128"}],"o":{"n":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"usize"}],"o":{"n":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u8"}],"o":{"n":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u16"}],"o":{"n":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u32"}],"o":{"n":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u128"}],"o":{"n":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"i":[{"n":"t"}],"o":{"n":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"i":[{"n":"t"}],"o":{"n":"option"}}],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",17,{"i":[{"n":"self"}],"o":{"n":"t"}}],[0,"int","num::traits","",null,null],[8,"PrimInt","num::traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[0,"pow","num::traits","",null,null],[8,"Pow","num::traits::pow","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",18,null],[10,"pow","","Returns `self` to the power `rhs`.",18,null],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"option"}}],[8,"Num","num::traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",2,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,{"i":[{"n":"str"},{"n":"u32"}],"o":{"n":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",38,null],[13,"Invalid","","",38,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",39,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[0,"rational","num","",null,null],[3,"Ratio","num::rational","Represents the ratio between 2 numbers.",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[3,"ParseRatioError","","",null,null],[11,"new","num::bigint","Creates and initializes a BigInt.",40,{"i":[{"n":"sign"},{"g":["u32"],"n":"vec"}],"o":{"n":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",40,{"i":[{"n":"sign"},{"n":"biguint"}],"o":{"n":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",40,null],[11,"assign_from_slice","","Reinitializes a `BigInt`.",40,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",40,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",40,null],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes in two's complement binary representation.",40,null],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes in two's complement.",40,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",40,null],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",40,null],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",40,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",40,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",40,null],[11,"to_signed_bytes_be","","Returns the two's complement byte representation of the `BigInt` in big-endian byte order.",40,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_signed_bytes_le","","Returns the two's complement byte representation of the `BigInt` in little-endian byte order.",40,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",40,null],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",40,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",40,{"i":[{"n":"self"}],"o":{"n":"sign"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",40,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",40,{"i":[{"n":"self"}],"o":{"g":["biguint"],"n":"option"}}],[11,"checked_add","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_sub","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_mul","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_div","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",40,{"i":[{"n":"self"},{"n":"bigint"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"fmt","num::traits","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"next","num::integer","",41,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","num::iter","",42,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",42,null],[11,"next","","",43,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",44,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",44,null],[11,"next","","",45,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next_back","","",42,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next_back","","",44,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"rangestep"}}],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"rangestepinclusive"}}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"rangeinclusive"}}],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"range"}}],[11,"rem_assign","num::complex","",0,null],[11,"rem_assign","","",0,null],[11,"rem_assign","","",0,null],[11,"rem_assign","","",0,null],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"encode","","",0,{"i":[{"n":"self"},{"n":"__st"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"add_assign","","",0,null],[11,"add_assign","","",0,null],[11,"add_assign","","",0,null],[11,"add_assign","","",0,null],[11,"from","","",0,{"i":[{"n":"t"}],"o":{"n":"complex"}}],[11,"from","","",0,{"i":[{"n":"t"}],"o":{"n":"complex"}}],[11,"one","","",0,{"o":{"n":"complex"}}],[11,"mul_assign","","",0,null],[11,"mul_assign","","",0,null],[11,"mul_assign","","",0,null],[11,"mul_assign","","",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"sub_assign","","",0,null],[11,"sub_assign","","",0,null],[11,"sub_assign","","",0,null],[11,"sub_assign","","",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"i":[{"n":"str"},{"n":"u32"}],"o":{"g":["complex"],"n":"result"}}],[11,"decode","","",0,{"i":[{"n":"__dt"}],"o":{"g":["complex"],"n":"result"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"i":[{"n":"str"}],"o":{"g":["complex"],"n":"result"}}],[11,"div_assign","","",0,null],[11,"div_assign","","",0,null],[11,"div_assign","","",0,null],[11,"div_assign","","",0,null],[11,"div","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"default","","",0,{"o":{"n":"complex"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",46,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"neg","","",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"bool"}}],[11,"eq","","",46,{"i":[{"n":"self"},{"n":"parsecomplexerror"}],"o":{"n":"bool"}}],[11,"ne","","",46,{"i":[{"n":"self"},{"n":"parsecomplexerror"}],"o":{"n":"bool"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"zero","","",0,{"o":{"n":"complex"}}],[11,"is_zero","","",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fmt","num::bigint","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"checked_div","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_div","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["biguint"],"n":"option"}}],[11,"to_bigint","","",47,{"i":[{"n":"self"}],"o":{"g":["bigint"],"n":"option"}}],[11,"to_bigint","","",40,{"i":[{"n":"self"}],"o":{"g":["bigint"],"n":"option"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"mul","","",21,{"i":[{"n":"self"},{"n":"sign"}],"o":{"n":"sign"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"rem_assign","","",47,null],[11,"rem_assign","","",47,null],[11,"rem_assign","","",47,null],[11,"rem_assign","","",47,null],[11,"rem_assign","","",47,null],[11,"rem_assign","","",47,null],[11,"rem_assign","","",47,null],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"to_i64","","",47,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_u64","","",47,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_f32","","",47,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","",47,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[11,"to_i64","","",40,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_u64","","",40,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_f32","","",40,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","",40,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[11,"abs","","",40,{"i":[{"n":"self"}],"o":{"n":"bigint"}}],[11,"abs_sub","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"signum","","",40,{"i":[{"n":"self"}],"o":{"n":"bigint"}}],[11,"is_positive","","",40,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_negative","","",40,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"cmp","","",21,{"i":[{"n":"self"},{"n":"sign"}],"o":{"n":"ordering"}}],[11,"cmp","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"ordering"}}],[11,"cmp","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"ordering"}}],[11,"checked_add","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["biguint"],"n":"option"}}],[11,"checked_add","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"from","","",19,{"i":[{"n":"parseinterror"}],"o":{"n":"parsebiginterror"}}],[11,"from","","",40,{"i":[{"n":"i16"}],"o":{"n":"bigint"}}],[11,"from","","",47,{"i":[{"n":"u8"}],"o":{"n":"biguint"}}],[11,"from","","",47,{"i":[{"n":"u16"}],"o":{"n":"biguint"}}],[11,"from","","",47,{"i":[{"n":"u64"}],"o":{"n":"biguint"}}],[11,"from","","",47,{"i":[{"n":"u32"}],"o":{"n":"biguint"}}],[11,"from","","",40,{"i":[{"n":"u16"}],"o":{"n":"bigint"}}],[11,"from","","",40,{"i":[{"n":"i32"}],"o":{"n":"bigint"}}],[11,"from","","",40,{"i":[{"n":"usize"}],"o":{"n":"bigint"}}],[11,"from","","",40,{"i":[{"n":"u8"}],"o":{"n":"bigint"}}],[11,"from","","",40,{"i":[{"n":"isize"}],"o":{"n":"bigint"}}],[11,"from","","",40,{"i":[{"n":"u64"}],"o":{"n":"bigint"}}],[11,"from","","",47,{"i":[{"n":"usize"}],"o":{"n":"biguint"}}],[11,"from","","",40,{"i":[{"n":"u32"}],"o":{"n":"bigint"}}],[11,"from","","",40,{"i":[{"n":"biguint"}],"o":{"n":"bigint"}}],[11,"from","","",40,{"i":[{"n":"i8"}],"o":{"n":"bigint"}}],[11,"from","","",40,{"i":[{"n":"i64"}],"o":{"n":"bigint"}}],[11,"shl","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"shl","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"from_i64","","",40,{"i":[{"n":"i64"}],"o":{"g":["bigint"],"n":"option"}}],[11,"from_u64","","",40,{"i":[{"n":"u64"}],"o":{"g":["bigint"],"n":"option"}}],[11,"from_f64","","",40,{"i":[{"n":"f64"}],"o":{"g":["bigint"],"n":"option"}}],[11,"from_i64","","",47,{"i":[{"n":"i64"}],"o":{"g":["biguint"],"n":"option"}}],[11,"from_u64","","",47,{"i":[{"n":"u64"}],"o":{"g":["biguint"],"n":"option"}}],[11,"from_f64","","",47,{"i":[{"n":"f64"}],"o":{"g":["biguint"],"n":"option"}}],[11,"add_assign","","",47,null],[11,"add_assign","","",47,null],[11,"add_assign","","",47,null],[11,"add_assign","","",47,null],[11,"add_assign","","",47,null],[11,"add_assign","","",47,null],[11,"add_assign","","",47,null],[11,"mul_assign","","",47,null],[11,"mul_assign","","",47,null],[11,"mul_assign","","",47,null],[11,"mul_assign","","",47,null],[11,"mul_assign","","",47,null],[11,"mul_assign","","",47,null],[11,"mul_assign","","",47,null],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"sub_assign","","",47,null],[11,"sub_assign","","",47,null],[11,"sub_assign","","",47,null],[11,"sub_assign","","",47,null],[11,"sub_assign","","",47,null],[11,"sub_assign","","",47,null],[11,"sub_assign","","",47,null],[11,"add","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"checked_mul","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_mul","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["biguint"],"n":"option"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"bitand_assign","","",47,null],[11,"bitand_assign","","",47,null],[11,"shr_assign","","",47,null],[11,"bitor","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"bitor","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"from_str","","",47,{"i":[{"n":"str"}],"o":{"g":["biguint","parsebiginterror"],"n":"result"}}],[11,"from_str","","",40,{"i":[{"n":"str"}],"o":{"g":["bigint","parsebiginterror"],"n":"result"}}],[11,"div_rem","","",40,null],[11,"div_floor","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mod_floor","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div_mod_floor","","",40,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",40,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",40,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"div_rem","","",47,null],[11,"div_floor","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mod_floor","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div_mod_floor","","",47,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",47,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",47,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"bitxor","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"bitxor","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div_assign","","",47,null],[11,"div_assign","","",47,null],[11,"div_assign","","",47,null],[11,"div_assign","","",47,null],[11,"div_assign","","",47,null],[11,"div_assign","","",47,null],[11,"div_assign","","",47,null],[11,"one","","",47,{"o":{"n":"biguint"}}],[11,"one","","",40,{"o":{"n":"bigint"}}],[11,"partial_cmp","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",21,{"i":[{"n":"self"},{"n":"sign"}],"o":{"g":["ordering"],"n":"option"}}],[11,"to_biguint","","",47,{"i":[{"n":"self"}],"o":{"g":["biguint"],"n":"option"}}],[11,"to_biguint","","",40,{"i":[{"n":"self"}],"o":{"g":["biguint"],"n":"option"}}],[11,"checked_sub","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_sub","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["biguint"],"n":"option"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"bitxor_assign","","",47,null],[11,"bitxor_assign","","",47,null],[11,"zero","","",40,{"o":{"n":"bigint"}}],[11,"is_zero","","",40,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",47,{"o":{"n":"biguint"}}],[11,"is_zero","","",47,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"bitor_assign","","",47,null],[11,"bitor_assign","","",47,null],[11,"default","","",47,{"o":{"n":"biguint"}}],[11,"default","","",40,{"o":{"n":"bigint"}}],[11,"shl_assign","","",47,null],[11,"bitand","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"bitand","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"description","","",19,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",40,{"i":[{"n":"str"},{"n":"u32"}],"o":{"g":["bigint","parsebiginterror"],"n":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",47,{"i":[{"n":"str"},{"n":"u32"}],"o":{"g":["biguint","parsebiginterror"],"n":"result"}}],[11,"neg","","Negate Sign value.",21,{"i":[{"n":"self"}],"o":{"n":"sign"}}],[11,"neg","","",40,{"i":[{"n":"self"}],"o":{"n":"bigint"}}],[11,"neg","","",47,{"i":[{"n":"self"}],"o":{"n":"biguint"}}],[11,"encode","","",47,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"encode","","",40,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"encode","","",21,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"eq","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bool"}}],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"parsebiginterror"}],"o":{"n":"bool"}}],[11,"ne","","",19,{"i":[{"n":"self"},{"n":"parsebiginterror"}],"o":{"n":"bool"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"bool"}}],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"sign"}],"o":{"n":"bool"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"decode","","",21,{"i":[{"n":"__d"}],"o":{"g":["sign"],"n":"result"}}],[11,"decode","","",40,{"i":[{"n":"__d"}],"o":{"g":["bigint"],"n":"result"}}],[11,"decode","","",47,{"i":[{"n":"__d"}],"o":{"g":["biguint"],"n":"result"}}],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"biguint"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"sign"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"bigint"}}],[11,"shr","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"shr","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"hash","","",21,null],[11,"hash","","",40,null],[11,"hash","","",47,null],[11,"rem_assign","num::rational","",48,null],[11,"rem_assign","","",48,null],[11,"rem_assign","","",48,null],[11,"rem_assign","","",48,null],[11,"mul","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"mul","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"mul","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"mul","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"cmp","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ordering"}}],[11,"zero","","",48,{"o":{"n":"ratio"}}],[11,"is_zero","","",48,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"add_assign","","",48,null],[11,"add_assign","","",48,null],[11,"add_assign","","",48,null],[11,"add_assign","","",48,null],[11,"from","","",48,{"i":[{"n":"t"}],"o":{"n":"ratio"}}],[11,"from","","",48,null],[11,"one","","",48,{"o":{"n":"ratio"}}],[11,"mul_assign","","",48,null],[11,"mul_assign","","",48,null],[11,"mul_assign","","",48,null],[11,"mul_assign","","",48,null],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"sub_assign","","",48,null],[11,"sub_assign","","",48,null],[11,"sub_assign","","",48,null],[11,"sub_assign","","",48,null],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"add","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"add","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"add","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"add","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"decode","","",48,{"i":[{"n":"__dt"}],"o":{"g":["ratio"],"n":"result"}}],[11,"encode","","",48,{"i":[{"n":"self"},{"n":"__st"}],"o":{"n":"result"}}],[11,"checked_sub","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"g":["ratio"],"n":"option"}}],[11,"rem","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"rem","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"rem","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"rem","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"into","","",48,null],[11,"from_str","","Parses `numer/denom` or just `numer`.",48,{"i":[{"n":"str"}],"o":{"g":["ratio","parseratioerror"],"n":"result"}}],[11,"div_assign","","",48,null],[11,"div_assign","","",48,null],[11,"div_assign","","",48,null],[11,"div_assign","","",48,null],[11,"partial_cmp","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"g":["ordering"],"n":"option"}}],[11,"div","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"div","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"div","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"div","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"checked_add","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"g":["ratio"],"n":"option"}}],[11,"checked_mul","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"g":["ratio"],"n":"option"}}],[11,"checked_div","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"g":["ratio"],"n":"option"}}],[11,"description","","",49,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"neg","","",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"eq","","",49,{"i":[{"n":"self"},{"n":"parseratioerror"}],"o":{"n":"bool"}}],[11,"ne","","",49,{"i":[{"n":"self"},{"n":"parseratioerror"}],"o":{"n":"bool"}}],[11,"eq","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"bool"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"sub","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"sub","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"sub","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"sub","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"parseratioerror"}}],[11,"hash","","",48,null],[11,"abs","","",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"abs_sub","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"signum","","",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"is_positive","","",48,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_negative","","",48,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",48,{"i":[{"n":"str"},{"n":"u32"}],"o":{"g":["ratio","parseratioerror"],"n":"result"}}],[11,"new","num::bigint","Creates and initializes a `BigUint`.",47,{"i":[{"g":["u32"],"n":"vec"}],"o":{"n":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",47,null],[11,"assign_from_slice","","Assign a value to a `BigUint`.",47,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",47,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",47,null],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must contain ascii/utf8 characters in [0-9a-zA-Z]. `radix` must be in the range `2...36`.",47,null],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",47,null],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",47,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",47,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",47,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["u8"],"n":"vec"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",47,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",47,{"i":[{"n":"self"},{"n":"biguint"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"new","num::complex","Create a new Complex",0,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"complex"}}],[11,"i","","Returns imaginary unit",0,{"o":{"n":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"inv","","Returns `1/self`",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"norm","","Calculate |self|",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"new","num::integer","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",41,{"i":[{"n":"t"}],"o":{"n":"iterbinomial"}}],[11,"new","num::rational","Creates a new `Ratio`. Fails if `denom` is zero.",48,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",48,{"i":[{"n":"t"}],"o":{"n":"ratio"}}],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",48,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"to_integer","","Converts to an integer, rounding towards zero.",48,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",48,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",48,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",48,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"reduced","","Returns a reduced copy of self.",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"recip","","Returns the reciprocal.",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"trunc","","Rounds towards zero.",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"pow","","Raises the `Ratio` to the power of an exponent.",48,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",48,{"i":[{"n":"t"}],"o":{"g":["ratio"],"n":"option"}}],[11,"approximate_float","","",48,{"i":[{"n":"f"}],"o":{"g":["ratio"],"n":"option"}}]],"paths":[[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"Pow"],[4,"ParseBigIntError"],[8,"ToBigInt"],[4,"Sign"],[8,"ToBigUint"],[8,"RandBigInt"],[8,"Roots"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"FloatCore"],[8,"FloatConst"],[8,"Real"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[3,"BigInt"],[3,"IterBinomial"],[3,"Range"],[3,"RangeStepInclusive"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"ParseComplexError"],[3,"BigUint"],[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_bigint"] = {"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"BigUint","num_bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",0,null],[13,"Other","","",0,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",1,null],[13,"NoSign","","",1,null],[13,"Plus","","",1,null],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"biguint"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",2,null],[11,"encode","","",2,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"decode","","",2,{"i":[{"n":"__d"}],"o":{"g":["biguint"],"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"ordering"}}],[11,"default","","",2,{"o":{"n":"biguint"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",2,{"i":[{"n":"str"}],"o":{"g":["biguint","parsebiginterror"],"n":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",2,{"i":[{"n":"str"},{"n":"u32"}],"o":{"g":["biguint","parsebiginterror"],"n":"result"}}],[11,"bitand","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"bitand_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"bitand","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"bitand_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"bitor","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"bitor_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"bitor","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"bitor_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"bitxor","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"bitxor_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"bitxor","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"bitxor_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"shl","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"shl_assign","","",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"shr_assign","","",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"zero","","",2,{"o":{"n":"biguint"}}],[11,"is_zero","","",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",2,{"o":{"n":"biguint"}}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"add_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"add_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"add_assign","","",2,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"add_assign","","",2,{"i":[{"n":"self"},{"n":"u16"}]}],[11,"add_assign","","",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"add_assign","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}]}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"add_assign","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}]}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"sub_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"sub_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"sub_assign","","",2,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"sub_assign","","",2,{"i":[{"n":"self"},{"n":"u16"}]}],[11,"sub_assign","","",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"sub_assign","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}]}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"sub_assign","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}]}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mul_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"mul_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"mul_assign","","",2,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"mul_assign","","",2,{"i":[{"n":"self"},{"n":"u16"}]}],[11,"mul_assign","","",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"mul_assign","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}]}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"mul_assign","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}]}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"div_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"div_assign","","",2,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"div_assign","","",2,{"i":[{"n":"self"},{"n":"u16"}]}],[11,"div_assign","","",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"div_assign","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}]}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"div_assign","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}]}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"rem_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"rem_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"rem_assign","","",2,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"rem_assign","","",2,{"i":[{"n":"self"},{"n":"u16"}]}],[11,"rem_assign","","",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"rem_assign","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}]}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"rem_assign","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}]}],[11,"neg","","",2,{"i":[{"n":"self"}],"o":{"n":"biguint"}}],[11,"checked_add","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["biguint"],"n":"option"}}],[11,"checked_sub","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["biguint"],"n":"option"}}],[11,"checked_mul","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["biguint"],"n":"option"}}],[11,"checked_div","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["biguint"],"n":"option"}}],[11,"div_rem","","",2,null],[11,"div_floor","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mod_floor","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div_mod_floor","","",2,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",2,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"to_i64","","",2,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_u64","","",2,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_f32","","",2,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","",2,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[11,"from_i64","","",2,{"i":[{"n":"i64"}],"o":{"g":["biguint"],"n":"option"}}],[11,"from_u64","","",2,{"i":[{"n":"u64"}],"o":{"g":["biguint"],"n":"option"}}],[11,"from_f64","","",2,{"i":[{"n":"f64"}],"o":{"g":["biguint"],"n":"option"}}],[11,"from","","",2,{"i":[{"n":"u64"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"u8"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"u16"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"u32"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"to_biguint","","",2,{"i":[{"n":"self"}],"o":{"g":["biguint"],"n":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",2,{"i":[{"g":["bigdigit"],"n":"vec"}],"o":{"n":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",2,null],[11,"assign_from_slice","","Assign a value to a `BigUint`.",2,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",2,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",2,null],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must contain ascii/utf8 characters in [0-9a-zA-Z]. `radix` must be in the range `2...36`.",2,null],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",2,null],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",2,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",2,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",2,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",2,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",2,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",2,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["u8"],"n":"vec"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",2,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",2,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"sign"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"sign"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"sign"}],"o":{"n":"ordering"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"sign"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",1,null],[11,"encode","","",1,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"decode","","",1,{"i":[{"n":"__d"}],"o":{"g":["sign"],"n":"result"}}],[11,"neg","","Negate Sign value.",1,{"i":[{"n":"self"}],"o":{"n":"sign"}}],[11,"mul","","",1,{"i":[{"n":"self"},{"n":"sign"}],"o":{"n":"sign"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"bigint"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",3,null],[11,"encode","","",3,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"decode","","",3,{"i":[{"n":"__d"}],"o":{"g":["bigint"],"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"ordering"}}],[11,"default","","",3,{"o":{"n":"bigint"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",3,{"i":[{"n":"str"}],"o":{"g":["bigint","parsebiginterror"],"n":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",3,{"i":[{"n":"str"},{"n":"u32"}],"o":{"g":["bigint","parsebiginterror"],"n":"result"}}],[11,"shl","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"shr","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"zero","","",3,{"o":{"n":"bigint"}}],[11,"is_zero","","",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",3,{"o":{"n":"bigint"}}],[11,"abs","","",3,{"i":[{"n":"self"}],"o":{"n":"bigint"}}],[11,"abs_sub","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"signum","","",3,{"i":[{"n":"self"}],"o":{"n":"bigint"}}],[11,"is_positive","","",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_negative","","",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"neg","","",3,{"i":[{"n":"self"}],"o":{"n":"bigint"}}],[11,"checked_add","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_sub","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_mul","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_div","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"div_rem","","",3,null],[11,"div_floor","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mod_floor","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div_mod_floor","","",3,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"to_i64","","",3,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_u64","","",3,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_f32","","",3,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","",3,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[11,"from_i64","","",3,{"i":[{"n":"i64"}],"o":{"g":["bigint"],"n":"option"}}],[11,"from_u64","","",3,{"i":[{"n":"u64"}],"o":{"g":["bigint"],"n":"option"}}],[11,"from_f64","","",3,{"i":[{"n":"f64"}],"o":{"g":["bigint"],"n":"option"}}],[11,"from","","",3,{"i":[{"n":"i64"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"i8"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"i16"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"i32"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"isize"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"u64"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"u8"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"u16"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"u32"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"biguint"}],"o":{"n":"self"}}],[11,"to_bigint","","",3,{"i":[{"n":"self"}],"o":{"g":["bigint"],"n":"option"}}],[11,"to_bigint","","",2,{"i":[{"n":"self"}],"o":{"g":["bigint"],"n":"option"}}],[11,"to_biguint","","",3,{"i":[{"n":"self"}],"o":{"g":["biguint"],"n":"option"}}],[11,"new","","Creates and initializes a BigInt.",3,{"i":[{"n":"sign"},{"g":["bigdigit"],"n":"vec"}],"o":{"n":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",3,{"i":[{"n":"sign"},{"n":"biguint"}],"o":{"n":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",3,null],[11,"assign_from_slice","","Reinitializes a `BigInt`.",3,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",3,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",3,null],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes in two's complement binary representation.",3,null],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes in two's complement.",3,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",3,null],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",3,null],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",3,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",3,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",3,null],[11,"to_signed_bytes_be","","Returns the two's complement byte representation of the `BigInt` in big-endian byte order.",3,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_signed_bytes_le","","Returns the two's complement byte representation of the `BigInt` in little-endian byte order.",3,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",3,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",3,null],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",3,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",3,{"i":[{"n":"self"}],"o":{"n":"sign"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",3,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",3,{"i":[{"n":"self"}],"o":{"g":["biguint"],"n":"option"}}],[11,"checked_add","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_sub","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_mul","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_div","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",3,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num_bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"i":[{"n":"bigdigit"},{"n":"bigdigit"}],"o":{"n":"doublebigdigit"}}],[6,"BigDigit","","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num_bigint","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",4,{"i":[{"n":"self"}],"o":{"g":["biguint"],"n":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",5,{"i":[{"n":"self"}],"o":{"g":["bigint"],"n":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",6,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",6,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails when the bound is zero.",6,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"i":[{"n":"self"},{"n":"biguint"},{"n":"biguint"}],"o":{"n":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"i":[{"n":"self"},{"n":"bigint"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"parsebiginterror"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"parsebiginterror"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from","","",0,{"i":[{"n":"parseinterror"}],"o":{"n":"parsebiginterror"}}],[11,"add","num_bigint::big_digit","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"add","","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"add","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"add","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"sub","","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"sub","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"sub","","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"sub","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mul","","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mul","","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mul","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mul","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div","","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div","","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"rem","","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"rem","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"rem","","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"rem","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"add","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"add","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"add","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"add","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"sub","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"sub","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"sub","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"sub","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mul","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mul","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mul","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mul","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"rem","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"rem","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"rem","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"rem","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}]],"paths":[[4,"ParseBigIntError"],[4,"Sign"],[3,"BigUint"],[3,"BigInt"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[6,"BigDigit"],[6,"DoubleBigDigit"]]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[3,"ParseComplexError","","",null,null],[11,"add_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"sub_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"mul_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"div_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"rem_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"add_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"sub_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"mul_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"div_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"rem_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"add_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"add_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"sub_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"sub_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"mul_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"mul_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"div_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"div_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"rem_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"rem_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",0,{"o":{"n":"complex"}}],[11,"encode","","",0,{"i":[{"n":"self"},{"n":"__st"}],"o":{"n":"result"}}],[11,"decode","","",0,{"i":[{"n":"__dt"}],"o":{"g":["complex"],"n":"result"}}],[11,"new","","Create a new Complex",0,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"complex"}}],[11,"i","","Returns imaginary unit",0,{"o":{"n":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"inv","","Returns `1/self`",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"norm","","Calculate |self|",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from","","",0,{"i":[{"n":"t"}],"o":{"n":"complex"}}],[11,"from","","",0,{"i":[{"n":"t"}],"o":{"n":"complex"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"self"}}],[11,"neg","","",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"zero","","",0,{"o":{"n":"complex"}}],[11,"is_zero","","",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",0,{"o":{"n":"complex"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"i":[{"n":"str"},{"n":"u32"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"parsecomplexerror"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"parsecomplexerror"}],"o":{"n":"bool"}}],[11,"description","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"Complex"],[3,"ParseComplexError"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",null,null],[5,"sqrt","","Returns the truncated principal square root of an integer -- see Roots::sqrt.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"cbrt","","Returns the truncated principal cube root of an integer -- see Roots::cbrt.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"nth_root","","Returns the truncated principal `n`th root of an integer -- see Roots::nth_root.",null,{"i":[{"n":"t"},{"n":"u32"}],"o":{"n":"t"}}],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"binomial","","Calculate the binomial coefficient.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"multinomial","","Calculate the multinomial coefficient.",null,null],[8,"Roots","","Provides methods to compute an integer's square root, cube root, and arbitrary `n`th root.",null,null],[10,"nth_root","","Returns the truncated principal `n`th root of an integer -- `if x >= 0 { ⌊ⁿ√x⌋ } else { ⌈ⁿ√x⌉ }`",0,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",2,{"i":[{"n":"t"}],"o":{"n":"iterbinomial"}}],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",0,{"i":[{"n":"self"}],"o":{"n":"self"}}]],"paths":[[8,"Roots"],[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"i":[{"n":"a"},{"n":"a"}],"o":{"n":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"i":[{"n":"a"},{"n":"a"}],"o":{"n":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"i":[{"n":"a"},{"n":"a"},{"n":"a"}],"o":{"n":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"i":[{"n":"a"},{"n":"a"},{"n":"a"}],"o":{"n":"rangestepinclusive"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"range"}}],[11,"next","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"rangeinclusive"}}],[11,"next","","",1,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"rangestep"}}],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"rangestepinclusive"}}],[11,"next","","",3,{"i":[{"n":"self"}],"o":{"n":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[11,"add_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"div_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"mul_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"rem_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"sub_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"add_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"div_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"mul_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"rem_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"sub_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"add_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"add_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"div_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"div_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"mul_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"mul_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"rem_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"rem_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"sub_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"sub_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"encode","","",0,{"i":[{"n":"self"},{"n":"__st"}],"o":{"n":"result"}}],[11,"decode","","",0,{"i":[{"n":"__dt"}],"o":{"g":["ratio"],"n":"result"}}],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,{"i":[{"n":"t"}],"o":{"n":"ratio"}}],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",0,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"reduced","","Returns a reduced copy of self.",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"recip","","Returns the reciprocal.",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"trunc","","Rounds towards zero.",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",0,{"i":[{"n":"t"}],"o":{"g":["bigrational"],"n":"option"}}],[11,"from","","",0,{"i":[{"n":"t"}],"o":{"n":"ratio"}}],[11,"from","","",0,null],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"g":["ordering"],"n":"option"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",0,{"i":[{"n":"self"},{"n":"h"}]}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"checked_mul","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"g":["ratio"],"n":"option"}}],[11,"checked_div","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"g":["ratio"],"n":"option"}}],[11,"checked_add","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"g":["ratio"],"n":"option"}}],[11,"checked_sub","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"g":["ratio"],"n":"option"}}],[11,"neg","","",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"zero","","",0,{"o":{"n":"ratio"}}],[11,"is_zero","","",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",0,{"o":{"n":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,{"i":[{"n":"str"},{"n":"u32"}],"o":{"g":["ratio","parseratioerror"],"n":"result"}}],[11,"abs","","",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"abs_sub","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"signum","","",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"is_positive","","",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_negative","","",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,{"i":[{"n":"str"}],"o":{"g":["ratio","parseratioerror"],"n":"result"}}],[11,"into","","",0,null],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"parseratioerror"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"parseratioerror"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"parseratioerror"}],"o":{"n":"bool"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"approximate_float","","",0,{"i":[{"n":"f"}],"o":{"g":["ratio"],"n":"option"}}]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[8,"Bounded","num_traits","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",0,{"o":{"n":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",0,{"o":{"n":"self"}}],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",1,{"o":{"n":"self"}}],[10,"infinity","","Returns the infinite value.",1,{"o":{"n":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",1,{"o":{"n":"self"}}],[10,"neg_zero","","Returns `-0.0`.",1,{"o":{"n":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,{"o":{"n":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",1,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",1,{"o":{"n":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,{"i":[{"n":"self"}],"o":{"n":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"trunc","","Return the integer part of a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"fract","","Returns the fractional part of a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",1,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"powi","","Raise a number to an integer power.",1,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"powf","","Raise a number to a floating point power.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sqrt","","Take the square root of a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp2","","Returns `2^(self)`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_degrees","","Converts radians to degrees.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_radians","","Converts degrees to radians.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"max","","Returns the maximum of the two numbers.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"min","","Returns the minimum of the two numbers.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"cbrt","","Take the cubic root of a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Hyperbolic sine function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Hyperbolic cosine function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Hyperbolic tangent function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",2,{"o":{"n":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,{"o":{"n":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,{"o":{"n":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,{"o":{"n":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,{"o":{"n":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",2,{"o":{"n":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",2,{"o":{"n":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",2,{"o":{"n":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",2,{"o":{"n":"self"}}],[10,"PI","","Return Archimedes’ constant.",2,{"o":{"n":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,{"o":{"n":"self"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"o":{"n":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"o":{"n":"self"}}],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"o":{"n":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"o":{"n":"t"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[8,"WrappingAdd","","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",15,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",15,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns the sign of the number.",15,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[5,"abs","","Computes the absolute value.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",16,{"i":[{"n":"self"}],"o":{"n":"t"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"isize"}],"o":{"n":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i8"}],"o":{"n":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i16"}],"o":{"n":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i32"}],"o":{"n":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i128"}],"o":{"n":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"usize"}],"o":{"n":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u8"}],"o":{"n":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u16"}],"o":{"n":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u32"}],"o":{"n":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u128"}],"o":{"n":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_i128","","Converts the value of `self` to an `i128`.",18,{"i":[{"n":"self"}],"o":{"g":["i128"],"n":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_u128","","Converts the value of `self` to an `u128`.",18,{"i":[{"n":"self"}],"o":{"g":["u128"],"n":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,{"i":[{"n":"t"}],"o":{"n":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"i":[{"n":"t"}],"o":{"n":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"option"}}],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",21,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",21,{"i":[{"n":"str"},{"n":"u32"}],"o":{"n":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",22,null],[13,"Invalid","","",22,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",23,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[0,"identities","","",null,null],[8,"Zero","num_traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"o":{"n":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"o":{"n":"self"}}],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"o":{"n":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"o":{"n":"t"}}],[0,"sign","num_traits","",null,null],[8,"Signed","num_traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",15,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",15,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns the sign of the number.",15,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[5,"abs","","Computes the absolute value.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",0,{"o":{"n":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",0,{"o":{"n":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",1,{"o":{"n":"self"}}],[10,"infinity","","Returns the infinite value.",1,{"o":{"n":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",1,{"o":{"n":"self"}}],[10,"neg_zero","","Returns `-0.0`.",1,{"o":{"n":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,{"o":{"n":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",1,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",1,{"o":{"n":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,{"i":[{"n":"self"}],"o":{"n":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"trunc","","Return the integer part of a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"fract","","Returns the fractional part of a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",1,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"powi","","Raise a number to an integer power.",1,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"powf","","Raise a number to a floating point power.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sqrt","","Take the square root of a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp2","","Returns `2^(self)`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_degrees","","Converts radians to degrees.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_radians","","Converts degrees to radians.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"max","","Returns the maximum of the two numbers.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"min","","Returns the minimum of the two numbers.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"cbrt","","Take the cubic root of a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Hyperbolic sine function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Hyperbolic cosine function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Hyperbolic tangent function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",2,{"o":{"n":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,{"o":{"n":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,{"o":{"n":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,{"o":{"n":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,{"o":{"n":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",2,{"o":{"n":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",2,{"o":{"n":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",2,{"o":{"n":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",2,{"o":{"n":"self"}}],[10,"PI","","Return Archimedes’ constant.",2,{"o":{"n":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,{"o":{"n":"self"}}],[0,"real","num_traits","",null,null],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",null,null],[10,"min_value","","Returns the smallest finite value that this type can represent.",24,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",24,{"o":{"n":"self"}}],[10,"epsilon","","Returns epsilon, a small positive value.",24,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",24,{"o":{"n":"self"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"trunc","","Return the integer part of a number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"fract","","Returns the fractional part of a number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",24,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",24,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",24,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"powi","","Raise a number to an integer power.",24,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"powf","","Raise a number to a real number power.",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sqrt","","Take the square root of a number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp2","","Returns `2^(self)`.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_degrees","","Converts radians to degrees.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_radians","","Converts degrees to radians.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"max","","Returns the maximum of the two numbers.",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"min","","Returns the minimum of the two numbers.",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"cbrt","","Take the cubic root of a number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",24,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Hyperbolic sine function.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Hyperbolic cosine function.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Hyperbolic tangent function.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[0,"cast","num_traits","",null,null],[8,"AsPrimitive","num_traits::cast","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",16,{"i":[{"n":"self"}],"o":{"n":"t"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"isize"}],"o":{"n":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i8"}],"o":{"n":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i16"}],"o":{"n":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i32"}],"o":{"n":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i128"}],"o":{"n":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"usize"}],"o":{"n":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u8"}],"o":{"n":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u16"}],"o":{"n":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u32"}],"o":{"n":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u128"}],"o":{"n":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_i128","","Converts the value of `self` to an `i128`.",18,{"i":[{"n":"self"}],"o":{"g":["i128"],"n":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_u128","","Converts the value of `self` to an `u128`.",18,{"i":[{"n":"self"}],"o":{"g":["u128"],"n":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,{"i":[{"n":"t"}],"o":{"n":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"i":[{"n":"t"}],"o":{"n":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"option"}}],[11,"fmt","num_traits","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}]],"paths":[[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingSub"],[8,"Saturating"],[8,"Signed"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"ToPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"Real"]]};
searchIndex["ordered_float"] = {"doc":"Wrappers for total order on Floats.","items":[[3,"OrderedFloat","ordered_float","A wrapper around Floats providing an implementation of Ord and Hash.",null,null],[12,"0","","",0,null],[3,"NotNaN","","A wrapper around Floats providing an implementation of Ord and Hash.",null,null],[3,"FloatIsNaN","","An error indicating an attempt to construct NotNaN from a NaN",null,null],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"orderedfloat"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"orderedfloat"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"orderedfloat"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"orderedfloat"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"orderedfloat"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",0,{"o":{"n":"orderedfloat"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"orderedfloat"}}],[11,"into_inner","","Get the value out.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"as_ref","","",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"as_mut","","",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"orderedfloat"}],"o":{"n":"ordering"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"orderedfloat"}],"o":{"n":"bool"}}],[11,"hash","","",0,{"i":[{"n":"self"},{"n":"h"}]}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into","","",0,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"into","","",0,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"from","","",0,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"notnan"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",1,{"i":[{"n":"self"},{"n":"notnan"}],"o":{"n":"bool"}}],[11,"le","","",1,{"i":[{"n":"self"},{"n":"notnan"}],"o":{"n":"bool"}}],[11,"gt","","",1,{"i":[{"n":"self"},{"n":"notnan"}],"o":{"n":"bool"}}],[11,"ge","","",1,{"i":[{"n":"self"},{"n":"notnan"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"notnan"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"notnan"}],"o":{"n":"bool"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",1,{"o":{"n":"notnan"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"notnan"}}],[11,"new","","Create a NotNaN value.",1,{"i":[{"n":"t"}],"o":{"g":["floatisnan"],"n":"result"}}],[11,"unchecked_new","","Create a NotNaN value from a value that is guaranteed to not be NaN",1,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"into_inner","","Get the value out.",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"as_ref","","",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"notnan"}],"o":{"n":"ordering"}}],[11,"hash","","",1,{"i":[{"n":"self"},{"n":"h"}]}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into","","",1,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"into","","",1,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"from","","",1,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"deref","","",1,null],[11,"add","","",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"add","","",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"self"}}],[11,"add_assign","","",1,{"i":[{"n":"self"},{"n":"self"}]}],[11,"add_assign","","",1,{"i":[{"n":"self"},{"n":"self"}]}],[11,"add_assign","","",1,{"i":[{"n":"self"},{"n":"f64"}]}],[11,"add_assign","","",1,{"i":[{"n":"self"},{"n":"f32"}]}],[11,"sub","","",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"sub","","",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"self"}}],[11,"sub_assign","","",1,{"i":[{"n":"self"},{"n":"self"}]}],[11,"sub_assign","","",1,{"i":[{"n":"self"},{"n":"self"}]}],[11,"sub_assign","","",1,{"i":[{"n":"self"},{"n":"f64"}]}],[11,"sub_assign","","",1,{"i":[{"n":"self"},{"n":"f32"}]}],[11,"mul","","",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"mul","","",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"self"}}],[11,"mul_assign","","",1,{"i":[{"n":"self"},{"n":"self"}]}],[11,"mul_assign","","",1,{"i":[{"n":"self"},{"n":"self"}]}],[11,"mul_assign","","",1,{"i":[{"n":"self"},{"n":"f64"}]}],[11,"mul_assign","","",1,{"i":[{"n":"self"},{"n":"f32"}]}],[11,"div","","",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"div","","",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"self"}}],[11,"div_assign","","",1,{"i":[{"n":"self"},{"n":"self"}]}],[11,"div_assign","","",1,{"i":[{"n":"self"},{"n":"self"}]}],[11,"div_assign","","",1,{"i":[{"n":"self"},{"n":"f64"}]}],[11,"div_assign","","",1,{"i":[{"n":"self"},{"n":"f32"}]}],[11,"rem","","",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"rem","","",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"self"}}],[11,"rem_assign","","",1,{"i":[{"n":"self"},{"n":"self"}]}],[11,"rem_assign","","",1,{"i":[{"n":"self"},{"n":"self"}]}],[11,"rem_assign","","",1,{"i":[{"n":"self"},{"n":"f64"}]}],[11,"rem_assign","","",1,{"i":[{"n":"self"},{"n":"f32"}]}],[11,"neg","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"floatisnan"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"floatisnan"}],"o":{"n":"bool"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",2,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into","","",2,{"i":[{"n":"self"}],"o":{"n":"error"}}]],"paths":[[3,"OrderedFloat"],[3,"NotNaN"],[3,"FloatIsNaN"]]};
searchIndex["ordermap"] = {"doc":"[`OrderMap`] is a hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.","items":[[3,"OrderMap","ordermap","A hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.",null,null],[3,"OccupiedEntry","","",null,null],[3,"VacantEntry","","",null,null],[3,"Keys","","",null,null],[3,"Values","","",null,null],[3,"ValuesMut","","",null,null],[3,"Iter","","",null,null],[3,"IterMut","","",null,null],[3,"IntoIter","","",null,null],[3,"Drain","","",null,null],[4,"Entry","","Entry for an existing key-value pair or a vacant location to insert one.",null,null],[13,"Occupied","","Existing slot with equivalent key.",0,null],[13,"Vacant","","Vacant slot (no equivalent key in the map).",0,null],[11,"get_full_mut2","","",1,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"option"}}],[11,"retain2","","",1,{"i":[{"n":"self"},{"n":"f"}]}],[11,"__private_marker","","",1,{"i":[{"n":"self"}],"o":{"n":"privatemarker"}}],[0,"set","","A hash set implemented using `OrderMap`",null,null],[3,"OrderSet","ordermap::set","A hash set where the iteration order of the values is independent of their hash values.",null,null],[3,"IntoIter","","",null,null],[3,"Iter","","",null,null],[3,"Drain","","",null,null],[3,"Difference","","",null,null],[3,"Intersection","","",null,null],[3,"SymmetricDifference","","",null,null],[3,"Union","","",null,null],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"orderset"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new set. (Does not allocate.)",2,{"o":{"n":"self"}}],[11,"with_capacity","","Create a new set with capacity for `n` elements. (Does not allocate if `n` is zero.)",2,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"with_capacity_and_hasher","","Create a new set with capacity for `n` elements. (Does not allocate if `n` is zero.)",2,{"i":[{"n":"usize"},{"n":"s"}],"o":{"n":"self"}}],[11,"len","","Return the number of elements in the set.",2,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"with_hasher","","Create a new set with `hash_builder`",2,{"i":[{"n":"s"}],"o":{"n":"self"}}],[11,"hasher","","Return a reference to the set's `BuildHasher`.",2,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"capacity","","Computes in O(1) time.",2,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clear","","Remove all elements in the set, while preserving its capacity.",2,{"i":[{"n":"self"}]}],[11,"reserve","","FIXME Not implemented fully yet",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"insert","","Insert the value into the set.",2,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"iter","","Return an iterator over the values of the set, in their order",2,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"difference","","Return an iterator over the values that are in `self` but not `other`.",2,{"i":[{"n":"self"},{"n":"orderset"}],"o":{"n":"difference"}}],[11,"symmetric_difference","","Return an iterator over the values that are in `self` or `other`, but not in both.",2,{"i":[{"n":"self"},{"n":"orderset"}],"o":{"n":"symmetricdifference"}}],[11,"intersection","","Return an iterator over the values that are in both `self` and `other`.",2,{"i":[{"n":"self"},{"n":"orderset"}],"o":{"n":"intersection"}}],[11,"union","","Return an iterator over all values that are in `self` or `other`.",2,{"i":[{"n":"self"},{"n":"orderset"}],"o":{"n":"union"}}],[11,"contains","","Return `true` if an equivalent to `value` exists in the set.",2,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"bool"}}],[11,"get","","Return a reference to the value stored in the set, if it is present, else `None`.",2,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"option"}}],[11,"get_full","","Return item index and value",2,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"option"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",2,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"option"}}],[11,"remove","","FIXME Same as .swap_remove",2,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"bool"}}],[11,"swap_remove","","Remove the value from the set, and return `true` if it was present.",2,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"bool"}}],[11,"take","","FIXME Same as .swap_take",2,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"option"}}],[11,"swap_take","","Removes and returns the value in the set, if any, that is equal to the given one.",2,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"option"}}],[11,"swap_remove_full","","Remove the value from the set return it and the index it had.",2,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"option"}}],[11,"pop","","Remove the last value",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"retain","","Scan through each value in the set and keep those where the closure `keep` returns `true`.",2,{"i":[{"n":"self"},{"n":"f"}]}],[11,"sort","","Sort the set’s values by their default ordering.",2,{"i":[{"n":"self"}]}],[11,"sort_by","","Sort the set’s values in place using the comparison function `compare`.",2,{"i":[{"n":"self"},{"n":"f"}]}],[11,"sorted_by","","Sort the values of the set and return a by value iterator of the values with the result.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"intoiter"}}],[11,"drain","","Clears the `OrderSet`, returning all values as a drain iterator. Keeps the allocated memory for reuse.",2,{"i":[{"n":"self"},{"n":"rangefull"}],"o":{"n":"drain"}}],[11,"get_index","","Get a value by index",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"swap_remove_index","","Remove the key-value pair by index",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"next","","",3,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",3,null],[11,"count","","",3,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"nth","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"last","","",3,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"collect","","",3,{"i":[{"n":"self"}],"o":{"n":"c"}}],[11,"next_back","","",3,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",3,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",4,null],[11,"count","","",4,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"nth","","",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"last","","",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"collect","","",4,{"i":[{"n":"self"}],"o":{"n":"c"}}],[11,"next_back","","",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",4,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",5,null],[11,"count","","",5,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"nth","","",5,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"last","","",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"collect","","",5,{"i":[{"n":"self"}],"o":{"n":"c"}}],[11,"next_back","","",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"into_iter","","",2,null],[11,"from_iter","","",2,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"extend","","",2,{"i":[{"n":"self"},{"n":"i"}]}],[11,"extend","","",2,{"i":[{"n":"self"},{"n":"i"}]}],[11,"default","","Return an empty `OrderSet`",2,{"o":{"n":"self"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"orderset"}],"o":{"n":"bool"}}],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`.",2,{"i":[{"n":"self"},{"n":"orderset"}],"o":{"n":"bool"}}],[11,"is_subset","","Returns `true` if all elements of `self` are contained in `other`.",2,{"i":[{"n":"self"},{"n":"orderset"}],"o":{"n":"bool"}}],[11,"is_superset","","Returns `true` if all elements of `other` are contained in `self`.",2,{"i":[{"n":"self"},{"n":"orderset"}],"o":{"n":"bool"}}],[11,"next","","",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",7,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",8,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",8,null],[11,"fold","","",8,{"i":[{"n":"self"},{"n":"b"},{"n":"f"}],"o":{"n":"b"}}],[11,"next_back","","",8,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",9,null],[11,"fold","","",9,{"i":[{"n":"self"},{"n":"b"},{"n":"f"}],"o":{"n":"b"}}],[11,"next_back","","",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[8,"Equivalent","ordermap","Key equivalence trait.",null,null],[10,"equivalent","","Compare self to `key` and return `true` if they are equal.",10,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"bool"}}],[8,"MutableKeys","","Opt-in mutable access to keys.",null,null],[16,"Key","","",11,null],[16,"Value","","",11,null],[10,"get_full_mut2","","Return item index, mutable reference to key and value",11,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"option"}}],[10,"retain2","","Scan through each key-value pair in the map and keep those where the closure `keep` returns `true`.",11,{"i":[{"n":"self"},{"n":"f"}]}],[10,"__private_marker","","This method is not useful in itself – it is there to “seal” the trait for external implementation, so that we can add methods without causing breaking changes.",11,{"i":[{"n":"self"}],"o":{"n":"privatemarker"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"ordermap"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new map. (Does not allocate.)",1,{"o":{"n":"self"}}],[11,"with_capacity","","Create a new map with capacity for `n` key-value pairs. (Does not allocate if `n` is zero.)",1,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"with_capacity_and_hasher","","Create a new map with capacity for `n` key-value pairs. (Does not allocate if `n` is zero.)",1,{"i":[{"n":"usize"},{"n":"s"}],"o":{"n":"self"}}],[11,"len","","Return the number of key-value pairs in the map.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"with_hasher","","Create a new map with `hash_builder`",1,{"i":[{"n":"s"}],"o":{"n":"self"}}],[11,"hasher","","Return a reference to the map's `BuildHasher`.",1,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"capacity","","Computes in O(1) time.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"or_insert","","Computes in O(1) time (amortized average).",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"v"}}],[11,"or_insert_with","","Computes in O(1) time (amortized average).",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"v"}}],[11,"key","","",0,{"i":[{"n":"self"}],"o":{"n":"k"}}],[11,"index","","Return the index where the key-value pair exists or will be inserted.",0,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"key","","",12,{"i":[{"n":"self"}],"o":{"n":"k"}}],[11,"get","","",12,{"i":[{"n":"self"}],"o":{"n":"v"}}],[11,"get_mut","","",12,{"i":[{"n":"self"}],"o":{"n":"v"}}],[11,"index","","Return the index of the key-value pair",12,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"into_mut","","",12,{"i":[{"n":"self"}],"o":{"n":"v"}}],[11,"insert","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"v"}}],[11,"remove","","",12,{"i":[{"n":"self"}],"o":{"n":"v"}}],[11,"remove_entry","","Remove and return the key, value pair stored in the map for this entry",12,null],[11,"key","","",13,{"i":[{"n":"self"}],"o":{"n":"k"}}],[11,"into_key","","",13,{"i":[{"n":"self"}],"o":{"n":"k"}}],[11,"index","","Return the index where the key-value pair will be inserted.",13,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"insert","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"v"}}],[11,"clear","","Remove all key-value pairs in the map, while preserving its capacity.",1,{"i":[{"n":"self"}]}],[11,"reserve","","Reserve capacity for `additional` more key-value pairs.",1,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"insert","","Insert a key-value pair in the map.",1,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"option"}}],[11,"entry","","Get the given key’s corresponding entry in the map for insertion and/or in-place manipulation.",1,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"entry"}}],[11,"iter","","Return an iterator over the key-value pairs of the map, in their order",1,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"iter_mut","","Return an iterator over the key-value pairs of the map, in their order",1,{"i":[{"n":"self"}],"o":{"n":"itermut"}}],[11,"keys","","Return an iterator over the keys of the map, in their order",1,{"i":[{"n":"self"}],"o":{"n":"keys"}}],[11,"values","","Return an iterator over the values of the map, in their order",1,{"i":[{"n":"self"}],"o":{"n":"values"}}],[11,"values_mut","","Return an iterator over mutable references to the the values of the map, in their order",1,{"i":[{"n":"self"}],"o":{"n":"valuesmut"}}],[11,"contains_key","","Return `true` if and equivalent to `key` exists in the map.",1,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"bool"}}],[11,"get","","Return a reference to the value stored for `key`, if it is present, else `None`.",1,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"option"}}],[11,"get_full","","Return item index, key and value",1,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"option"}}],[11,"get_mut","","",1,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"option"}}],[11,"get_full_mut","","",1,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"option"}}],[11,"remove","","NOTE: Same as .swap_remove",1,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"option"}}],[11,"swap_remove","","Remove the key-value pair equivalent to `key` and return its value.",1,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"option"}}],[11,"swap_remove_full","","Remove the key-value pair equivalent to `key` and return it and the index it had.",1,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"option"}}],[11,"pop","","Remove the last key-value pair",1,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"retain","","Scan through each key-value pair in the map and keep those where the closure `keep` returns `true`.",1,{"i":[{"n":"self"},{"n":"f"}]}],[11,"sort_keys","","Sort the map’s key-value pairs by the default ordering of the keys.",1,{"i":[{"n":"self"}]}],[11,"sort_by","","Sort the map’s key-value pairs in place using the comparison function `compare`.",1,{"i":[{"n":"self"},{"n":"f"}]}],[11,"sorted_by","","Sort the key-value pairs of the map and return a by value iterator of the key-value pairs with the result.",1,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"intoiter"}}],[11,"drain","","Clears the `OrderMap`, returning all key-value pairs as a drain iterator. Keeps the allocated memory for reuse.",1,{"i":[{"n":"self"},{"n":"rangefull"}],"o":{"n":"drain"}}],[11,"get_index","","Get a key-value pair by index",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"get_index_mut","","Get a key-value pair by index",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"swap_remove_index","","Remove the key-value pair by index",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"next","","",14,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",14,null],[11,"count","","",14,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"nth","","",14,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"last","","",14,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"collect","","",14,{"i":[{"n":"self"}],"o":{"n":"c"}}],[11,"next_back","","",14,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",14,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",15,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",15,null],[11,"count","","",15,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"nth","","",15,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"last","","",15,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"collect","","",15,{"i":[{"n":"self"}],"o":{"n":"c"}}],[11,"next_back","","",15,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",15,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",16,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",16,null],[11,"count","","",16,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"nth","","",16,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"last","","",16,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"collect","","",16,{"i":[{"n":"self"}],"o":{"n":"c"}}],[11,"next_back","","",16,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",16,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",17,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",17,null],[11,"count","","",17,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"nth","","",17,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"last","","",17,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"collect","","",17,{"i":[{"n":"self"}],"o":{"n":"c"}}],[11,"next_back","","",17,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",17,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",18,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",18,null],[11,"count","","",18,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"nth","","",18,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"last","","",18,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"collect","","",18,{"i":[{"n":"self"}],"o":{"n":"c"}}],[11,"next_back","","",18,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",18,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",19,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",19,null],[11,"count","","",19,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"nth","","",19,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"last","","",19,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"collect","","",19,{"i":[{"n":"self"}],"o":{"n":"c"}}],[11,"next_back","","",19,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",19,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",20,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",20,null],[11,"count","","",20,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"nth","","",20,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"last","","",20,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"collect","","",20,{"i":[{"n":"self"}],"o":{"n":"c"}}],[11,"next_back","","",20,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"into_iter","","",1,null],[11,"index","","Panics if `key` is not present in the map.",1,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"v"}}],[11,"index_mut","","Panics if `key` is not present in the map.",1,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"v"}}],[11,"from_iter","","Create an `OrderMap` from the sequence of key-value pairs in the iterable.",1,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"extend","","Extend the map with all key-value pairs in the iterable.",1,{"i":[{"n":"self"},{"n":"i"}]}],[11,"extend","","Extend the map with all key-value pairs in the iterable.",1,{"i":[{"n":"self"},{"n":"i"}]}],[11,"default","","Return an empty `OrderMap`",1,{"o":{"n":"self"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"ordermap"}],"o":{"n":"bool"}}],[14,"ordermap","","Create an `OrderMap` from a list of key-value pairs",null,null],[14,"orderset","","Create an `OrderSet` from a list of values",null,null]],"paths":[[4,"Entry"],[3,"OrderMap"],[3,"OrderSet"],[3,"IntoIter"],[3,"Iter"],[3,"Drain"],[3,"Difference"],[3,"Intersection"],[3,"SymmetricDifference"],[3,"Union"],[8,"Equivalent"],[8,"MutableKeys"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["osmesa_sys"] = {"doc":"","items":[[3,"OsMesa","osmesa_sys","Symbols loaded from a shared library.",null,null],[12,"OSMesaColorClamp","","",0,null],[12,"OSMesaCreateContext","","",0,null],[12,"OSMesaCreateContextExt","","",0,null],[12,"OSMesaCreateContextAttribs","","",0,null],[12,"OSMesaDestroyContext","","",0,null],[12,"OSMesaGetColorBuffer","","",0,null],[12,"OSMesaGetCurrentContext","","",0,null],[12,"OSMesaGetDepthBuffer","","",0,null],[12,"OSMesaGetIntegerv","","",0,null],[12,"OSMesaGetProcAddress","","",0,null],[12,"OSMesaMakeCurrent","","",0,null],[12,"OSMesaPixelStore","","",0,null],[3,"osmesa_context","","",null,null],[5,"OSMesaColorClamp","","",null,null],[5,"OSMesaCreateContext","","",null,{"i":[{"n":"c_uint"},{"n":"osmesacontext"}],"o":{"n":"osmesacontext"}}],[5,"OSMesaCreateContextExt","","",null,{"i":[{"n":"c_uint"},{"n":"c_int"},{"n":"c_int"},{"n":"c_int"},{"n":"osmesacontext"}],"o":{"n":"osmesacontext"}}],[5,"OSMesaCreateContextAttribs","","",null,null],[5,"OSMesaDestroyContext","","",null,null],[5,"OSMesaGetColorBuffer","","",null,null],[5,"OSMesaGetCurrentContext","","",null,{"o":{"n":"osmesacontext"}}],[5,"OSMesaGetDepthBuffer","","",null,null],[5,"OSMesaGetIntegerv","","",null,null],[5,"OSMesaGetProcAddress","","",null,null],[5,"OSMesaMakeCurrent","","",null,null],[5,"OSMesaPixelStore","","",null,null],[6,"OSMesaContext","","",null,null],[6,"OSMESAproc","","",null,null],[17,"OSMESA_BGRA","","",null,null],[17,"OSMESA_ARGB","","",null,null],[17,"OSMESA_BGR","","",null,null],[17,"OSMESA_RGB_565","","",null,null],[17,"OSMESA_COLOR_INDEX","","",null,null],[17,"OSMESA_RGB","","",null,null],[17,"OSMESA_RGBA","","",null,null],[17,"OSMESA_WIDTH","","",null,null],[17,"OSMESA_HEIGHT","","",null,null],[17,"OSMESA_FORMAT","","",null,null],[17,"OSMESA_TYPE","","",null,null],[17,"OSMESA_MAX_WIDTH","","",null,null],[17,"OSMESA_MAX_HEIGHT","","",null,null],[17,"OSMESA_ROW_LENGTH","","",null,null],[17,"OSMESA_Y_UP","","",null,null],[17,"OSMESA_DEPTH_BITS","","",null,null],[17,"OSMESA_STENCIL_BITS","","",null,null],[17,"OSMESA_ACCUM_BITS","","",null,null],[17,"OSMESA_PROFILE","","",null,null],[17,"OSMESA_CORE_PROFILE","","",null,null],[17,"OSMESA_COMPAT_PROFILE","","",null,null],[17,"OSMESA_CONTEXT_MAJOR_VERSION","","",null,null],[17,"OSMESA_CONTEXT_MINOR_VERSION","","",null,null],[11,"open","","Tries to open the dynamic library.",0,{"i":[{"n":"path"}],"o":{"g":["osmesa","loadingerror"],"n":"result"}}],[11,"try_loading","","Try loading the static symbols linked to this library.",0,{"o":{"g":["osmesa","loadingerror"],"n":"result"}}]],"paths":[[3,"OsMesa"]]};
searchIndex["percent_encoding"] = {"doc":"URLs use special chacters to indicate the parts of the request.  For example, a forward slash indicates a path.  In order for that charcter to exist outside of a path separator, that charcter would need to be encoded.","items":[[3,"SIMPLE_ENCODE_SET","percent_encoding","This encode set is used for the path of cannot-be-a-base URLs.",null,null],[3,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",null,null],[3,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",null,null],[3,"PATH_SEGMENT_ENCODE_SET","","This encode set is used for on '/'-separated path segment",null,null],[3,"USERINFO_ENCODE_SET","","This encode set is used for username and password.",null,null],[3,"PercentEncode","","The return type of `percent_encode()` and `utf8_percent_encode()`.",null,null],[3,"PercentDecode","","The return type of `percent_decode()`.",null,null],[5,"percent_encode_byte","","Return the percent-encoding of the given bytes.",null,{"i":[{"n":"u8"}],"o":{"n":"str"}}],[5,"percent_encode","","Percent-encode the given bytes with the given encode set.",null,null],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",null,{"i":[{"n":"str"},{"n":"e"}],"o":{"n":"percentencode"}}],[5,"percent_decode","","Percent-decode the given bytes.",null,null],[8,"EncodeSet","","Represents a set of characters / bytes that should be percent-encoded.",null,null],[10,"contains","","Called with UTF-8 bytes rather than code points. Should return true for all non-ASCII bytes.",0,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"simple_encode_set"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"contains","","",1,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"query_encode_set"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"contains","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"default_encode_set"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"contains","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"path_segment_encode_set"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"contains","","",4,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"userinfo_encode_set"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"contains","","",5,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"percentencode"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",6,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"size_hint","","",6,null],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"percentdecode"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",7,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"option"}}],[11,"size_hint","","",7,null],[11,"if_any","","If the percent-decoding is different from the input, return it as a new bytes vector.",7,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"option"}}],[11,"decode_utf8","","Decode the result of percent-decoding as UTF-8.",7,{"i":[{"n":"self"}],"o":{"g":["cow","utf8error"],"n":"result"}}],[11,"decode_utf8_lossy","","Decode the result of percent-decoding as UTF-8, lossily.",7,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"cow"}}],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",null,null]],"paths":[[8,"EncodeSet"],[3,"SIMPLE_ENCODE_SET"],[3,"QUERY_ENCODE_SET"],[3,"DEFAULT_ENCODE_SET"],[3,"PATH_SEGMENT_ENCODE_SET"],[3,"USERINFO_ENCODE_SET"],[3,"PercentEncode"],[3,"PercentDecode"]]};
searchIndex["petgraph"] = {"doc":"petgraph is a graph data structure library.","items":[[4,"Direction","petgraph","Edge direction.",null,null],[13,"Outgoing","","An `Outgoing` edge is an outward edge from the current node.",0,null],[13,"Incoming","","An `Incoming` edge is an inbound edge to the current node.",0,null],[4,"Directed","","Marker type for a directed graph.",null,null],[4,"Undirected","","Marker type for an undirected graph.",null,null],[0,"visit","","Graph traits and graph traversals.",null,null],[3,"NodeFiltered","petgraph::visit","A node-filtering graph adaptor.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[3,"NodeFilteredNeighbors","","A filtered neighbors iterator.",null,null],[3,"NodeFilteredNodes","","A filtered node references iterator.",null,null],[3,"NodeFilteredEdgeReferences","","A filtered edges iterator.",null,null],[3,"NodeFilteredEdges","","A filtered edges iterator.",null,null],[3,"EdgeFiltered","","An edge-filtering graph adaptor.",null,null],[12,"0","","",2,null],[12,"1","","",2,null],[3,"EdgeFilteredNeighbors","","A filtered neighbors iterator.",null,null],[3,"EdgeFilteredEdges","","A filtered edges iterator.",null,null],[3,"Reversed","","An edge-reversing graph adaptor.",null,null],[12,"0","","",3,null],[3,"ReversedEdgeReference","","A reversed edge reference",null,null],[3,"ReversedEdgeReferences","","A reversed edge references iterator.",null,null],[3,"Time","","Strictly monotonically increasing event time for a depth first search.",null,null],[12,"0","","",4,null],[3,"Dfs","","Visit nodes of a graph in a depth-first-search (DFS) emitting nodes in preorder (when they are first discovered).",null,null],[12,"stack","","The stack of nodes to visit",5,null],[12,"discovered","","The map of discovered nodes",5,null],[3,"DfsPostOrder","","Visit nodes in a depth-first-search (DFS) emitting nodes in postorder (each node after all its descendants have been emitted).",null,null],[12,"stack","","The stack of nodes to visit",6,null],[12,"discovered","","The map of discovered nodes",6,null],[12,"finished","","The map of finished nodes",6,null],[3,"Bfs","","A breadth first search (BFS) of a graph.",null,null],[12,"stack","","The queue of nodes to visit",7,null],[12,"discovered","","The map of discovered nodes",7,null],[3,"Topo","","A topological order traversal for a graph.",null,null],[3,"WalkerIter","","A walker and its context wrapped into an iterator.",null,null],[4,"DfsEvent","","A depth first search (DFS) visitor event.",null,null],[13,"Discover","","",8,null],[13,"TreeEdge","","An edge of the tree formed by the traversal.",8,null],[13,"BackEdge","","An edge to an already visited node.",8,null],[13,"CrossForwardEdge","","A cross or forward edge.",8,null],[13,"Finish","","",8,null],[4,"Control","","Control flow for callbacks.",null,null],[13,"Continue","","",9,null],[13,"Break","","",9,null],[5,"depth_first_search","","A recursive depth first search.",null,{"i":[{"n":"g"},{"n":"i"},{"n":"f"}],"o":{"n":"c"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"time"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"time"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"time"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"time"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",4,{"i":[{"n":"self"},{"n":"time"}],"o":{"n":"bool"}}],[11,"le","","",4,{"i":[{"n":"self"},{"n":"time"}],"o":{"n":"bool"}}],[11,"gt","","",4,{"i":[{"n":"self"},{"n":"time"}],"o":{"n":"bool"}}],[11,"ge","","",4,{"i":[{"n":"self"},{"n":"time"}],"o":{"n":"bool"}}],[11,"cmp","","",4,{"i":[{"n":"self"},{"n":"time"}],"o":{"n":"ordering"}}],[11,"default","","",4,{"o":{"n":"time"}}],[11,"hash","","",4,null],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"dfsevent"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"control"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"breaking","","",9,{"o":{"n":"control"}}],[11,"break_value","","Get the value in `Control::Break(_)`, if present.",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"continuing","","",9,{"o":{"n":"self"}}],[11,"should_break","","",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"default","","",9,{"o":{"n":"self"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"dfs"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new Dfs, using the graph's visitor map, and put start in the stack of nodes to visit.",5,{"i":[{"n":"g"},{"n":"n"}],"o":{"n":"self"}}],[11,"from_parts","","Create a `Dfs` from a vector and a visit map",5,{"i":[{"n":"vec"},{"n":"vm"}],"o":{"n":"self"}}],[11,"reset","","Clear the visit state",5,{"i":[{"n":"self"},{"n":"g"}]}],[11,"empty","","Create a new Dfs using the graph's visitor map, and no stack.",5,{"i":[{"n":"g"}],"o":{"n":"self"}}],[11,"move_to","","Keep the discovered map, but clear the visit stack and restart the dfs from a particular node.",5,{"i":[{"n":"self"},{"n":"n"}]}],[11,"next","","Return the next node in the dfs, or None if the traversal is done.",5,{"i":[{"n":"self"},{"n":"g"}],"o":{"n":"option"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"dfspostorder"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `DfsPostOrder` using the graph's visitor map, and put `start` in the stack of nodes to visit.",6,{"i":[{"n":"g"},{"n":"n"}],"o":{"n":"self"}}],[11,"empty","","Create a new `DfsPostOrder` using the graph's visitor map, and no stack.",6,{"i":[{"n":"g"}],"o":{"n":"self"}}],[11,"reset","","Clear the visit state",6,{"i":[{"n":"self"},{"n":"g"}]}],[11,"move_to","","Keep the discovered and finished map, but clear the visit stack and restart the dfs from a particular node.",6,{"i":[{"n":"self"},{"n":"n"}]}],[11,"next","","Return the next node in the traversal, or `None` if the traversal is done.",6,{"i":[{"n":"self"},{"n":"g"}],"o":{"n":"option"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"bfs"}}],[11,"new","","Create a new Bfs, using the graph's visitor map, and put start in the stack of nodes to visit.",7,{"i":[{"n":"g"},{"n":"n"}],"o":{"n":"self"}}],[11,"next","","Return the next node in the bfs, or None if the traversal is done.",7,{"i":[{"n":"self"},{"n":"g"}],"o":{"n":"option"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"topo"}}],[11,"new","","Create a new `Topo`, using the graph's visitor map, and put all initial nodes in the to visit list.",10,{"i":[{"n":"g"}],"o":{"n":"self"}}],[11,"reset","","Clear visited state, and put all initial nodes in the to visit list.",10,{"i":[{"n":"self"},{"n":"g"}]}],[11,"next","","Return the next node in the current topological order traversal, or `None` if the traversal is at the end.",10,{"i":[{"n":"self"},{"n":"g"}],"o":{"n":"option"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"walkeriter"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"context","","",11,{"i":[{"n":"self"}],"o":{"n":"c"}}],[11,"inner_ref","","",11,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"inner_mut","","",11,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"next","","",11,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"walk_next","","",5,{"i":[{"n":"self"},{"n":"g"}],"o":{"n":"option"}}],[11,"walk_next","","",6,{"i":[{"n":"self"},{"n":"g"}],"o":{"n":"option"}}],[11,"walk_next","","",7,{"i":[{"n":"self"},{"n":"g"}],"o":{"n":"option"}}],[11,"walk_next","","",10,{"i":[{"n":"self"},{"n":"g"}],"o":{"n":"option"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"nodefiltered"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_fn","","Create an `NodeFiltered` adaptor from the closure `filter`.",1,{"i":[{"n":"g"},{"n":"f"}],"o":{"n":"self"}}],[11,"next","","",12,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",13,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",14,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",15,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"node_weight","","",1,null],[11,"edge_weight","","",1,null],[11,"node_bound","","",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"to_index","","",1,null],[11,"from_index","","",1,null],[11,"visit_map","","",1,null],[11,"reset_map","","",1,null],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"edgefiltered"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_fn","","Create an `EdgeFiltered` adaptor from the closure `filter`.",2,{"i":[{"n":"g"},{"n":"f"}],"o":{"n":"self"}}],[11,"next","","",16,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",17,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"node_count","","",2,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"node_bound","","",2,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"to_index","","",2,null],[11,"from_index","","",2,null],[11,"visit_map","","",2,null],[11,"reset_map","","",2,null],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"reversed"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"neighbors","","",3,null],[11,"neighbors_directed","","",3,null],[11,"visit_map","","",3,null],[11,"reset_map","","",3,null],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"reversededgereference"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"source","","",18,null],[11,"target","","",18,null],[11,"weight","","",18,null],[11,"id","","",18,null],[11,"edge_references","","",3,null],[11,"next","","",19,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"node_bound","","",3,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"to_index","","",3,null],[11,"from_index","","",3,null],[11,"node_identifiers","","",3,null],[11,"node_references","","",3,null],[11,"node_count","","",3,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[8,"FilterNode","","A graph filter for nodes.",null,null],[10,"include_node","","Return true to have the node be part of the graph",20,{"i":[{"n":"self"},{"n":"n"}],"o":{"n":"bool"}}],[8,"FilterEdge","","A graph filter for edges",null,null],[10,"include_edge","","Return true to have the edge be part of the graph",21,{"i":[{"n":"self"},{"n":"edge"}],"o":{"n":"bool"}}],[8,"ControlFlow","","Control flow for callbacks.",null,null],[10,"continuing","","",22,{"o":{"n":"self"}}],[10,"should_break","","",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Walker","","A walker is a traversal state, but where part of the traversal information is supplied manually to each next call.",null,null],[16,"Item","","",23,null],[10,"walk_next","","Advance to the next item",23,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"option"}}],[11,"iter","","Create an iterator out of the walker and given `context`.",23,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"walkeriter"}}],[8,"GraphBase","","Base graph trait: defines the associated node identifier and edge identifier types.",null,null],[16,"EdgeId","","edge identifier",24,null],[16,"NodeId","","node identifier",24,null],[8,"GraphRef","","A copyable reference to a graph.",null,null],[8,"IntoNeighbors","","Access to the neighbors of each node",null,null],[16,"Neighbors","","",25,null],[10,"neighbors","","Return an iterator of the neighbors of node `a`.",25,null],[8,"IntoNeighborsDirected","","Access to the neighbors of each node, through incoming or outgoing edges.",null,null],[16,"NeighborsDirected","","",26,null],[10,"neighbors_directed","","",26,null],[8,"IntoEdges","","Access to the edges of each node.",null,null],[16,"Edges","","",27,null],[10,"edges","","",27,null],[8,"IntoEdgesDirected","","Access to all edges of each node, in the specified direction.",null,null],[16,"EdgesDirected","","",28,null],[10,"edges_directed","","",28,null],[8,"IntoNodeIdentifiers","","Access to the sequence of the graph’s `NodeId`s.",null,null],[16,"NodeIdentifiers","","",29,null],[10,"node_identifiers","","",29,null],[8,"Data","","Define associated data for nodes and edges",null,null],[16,"NodeWeight","","",30,null],[16,"EdgeWeight","","",30,null],[8,"EdgeRef","","An edge reference.",null,null],[16,"NodeId","","",31,null],[16,"EdgeId","","",31,null],[16,"Weight","","",31,null],[10,"source","","The source node of the edge.",31,null],[10,"target","","The target node of the edge.",31,null],[10,"weight","","A reference to the weight of the edge.",31,null],[10,"id","","The edge’s identifier.",31,null],[8,"NodeRef","","A node reference.",null,null],[16,"NodeId","","",32,null],[16,"Weight","","",32,null],[10,"id","","",32,null],[10,"weight","","",32,null],[8,"IntoNodeReferences","","Access to the sequence of the graph’s nodes",null,null],[16,"NodeRef","","",33,null],[16,"NodeReferences","","",33,null],[10,"node_references","","",33,null],[8,"IntoEdgeReferences","","Access to the sequence of the graph’s edges",null,null],[16,"EdgeRef","","",34,null],[16,"EdgeReferences","","",34,null],[10,"edge_references","","",34,null],[8,"GraphProp","","Edge kind property (directed or undirected edges)",null,null],[16,"EdgeType","","The kind edges in the graph.",35,null],[11,"is_directed","","",35,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"NodeIndexable","","The graph’s `NodeId`s map to indices",null,null],[10,"node_bound","","Return an upper bound of the node indices in the graph (suitable for the size of a bitmap).",36,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"to_index","","Convert `a` to an integer index.",36,null],[10,"from_index","","Convert `i` to a node index",36,null],[8,"NodeCount","","A graph with a known node count.",null,null],[10,"node_count","","",37,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[8,"NodeCompactIndexable","","The graph’s `NodeId`s map to indices, in a range without holes.",null,null],[8,"VisitMap","","A mapping for storing the visited status for NodeId `N`.",null,null],[10,"visit","","Mark `a` as visited.",38,{"i":[{"n":"self"},{"n":"n"}],"o":{"n":"bool"}}],[10,"is_visited","","Return whether `a` has been visited before.",38,{"i":[{"n":"self"},{"n":"n"}],"o":{"n":"bool"}}],[8,"Visitable","","A graph that can create a map that tracks the visited status of its nodes.",null,null],[16,"Map","","The associated map type",39,null],[10,"visit_map","","Create a new visitor map",39,null],[10,"reset_map","","Reset the visitor map (and resize to new size of graph if needed)",39,null],[8,"GetAdjacencyMatrix","","Create or access the adjacency matrix of a graph.",null,null],[16,"AdjMatrix","","The associated adjacency matrix type",40,null],[10,"adjacency_matrix","","Create the adjacency matrix",40,null],[10,"is_adjacent","","Return true if there is an edge from `a` to `b`, false otherwise.",40,null],[0,"data","petgraph","Graph traits for associated data and graph construction.",null,null],[3,"FilterElements","petgraph::data","An iterator that filters graph elements.",null,null],[4,"Element","","A graph element.",null,null],[13,"Node","","A graph node.",41,null],[12,"weight","petgraph::data::Element","",41,null],[13,"Edge","petgraph::data","A graph edge.",41,null],[12,"source","petgraph::data::Element","",41,null],[12,"target","","",41,null],[12,"weight","","",41,null],[8,"DataMap","petgraph::data","Access node and edge weights (associated data).",null,null],[10,"node_weight","","",42,null],[10,"edge_weight","","",42,null],[8,"DataMapMut","","Access node and edge weights mutably.",null,null],[10,"node_weight_mut","","",43,null],[10,"edge_weight_mut","","",43,null],[8,"Build","","A graph that can be extended with further nodes and edges",null,null],[10,"add_node","","",44,null],[11,"add_edge","","Add a new edge. If parallel edges (duplicate) are not allowed and the edge already exists, return `None`.",44,null],[10,"update_edge","","Add or update the edge from `a` to `b`. Return the id of the affected edge.",44,null],[8,"Create","","A graph that can be created",null,null],[10,"with_capacity","","",45,{"i":[{"n":"usize"},{"n":"usize"}],"o":{"n":"self"}}],[8,"FromElements","","Create a graph from an iterator of elements.",null,null],[11,"from_elements","","",46,{"i":[{"n":"i"}],"o":{"n":"self"}}],[8,"ElementIterator","","Iterator adaptors for iterators of `Element`.",null,null],[11,"filter_elements","","Create an iterator adaptor that filters graph elements.",47,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"filterelements"}}],[11,"node_weight","petgraph::visit","",3,null],[11,"edge_weight","","",3,null],[11,"node_weight_mut","","",3,null],[11,"edge_weight_mut","","",3,null],[11,"clone","petgraph::data","",41,{"i":[{"n":"self"}],"o":{"n":"element"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",41,{"i":[{"n":"self"},{"n":"element"}],"o":{"n":"bool"}}],[11,"ne","","",41,{"i":[{"n":"self"},{"n":"element"}],"o":{"n":"bool"}}],[11,"next","","",48,{"i":[{"n":"self"}],"o":{"n":"option"}}],[0,"algo","petgraph","Graph algorithms.",null,null],[3,"DfsSpace","petgraph::algo","Workspace for a graph traversal.",null,null],[3,"MinSpanningTree","","An iterator producing a minimum spanning forest of a graph.",null,null],[3,"Cycle","","An algorithm error: a cycle was found in the graph.",null,null],[3,"NegativeCycle","","An algorithm error: a cycle of negative weights was found in the graph.",null,null],[5,"is_isomorphic","","[Graph] Return `true` if the graphs `g0` and `g1` are isomorphic.",null,{"i":[{"n":"graph"},{"n":"graph"}],"o":{"n":"bool"}}],[5,"is_isomorphic_matching","","[Graph] Return `true` if the graphs `g0` and `g1` are isomorphic.",null,{"i":[{"n":"graph"},{"n":"graph"},{"n":"f"},{"n":"g"}],"o":{"n":"bool"}}],[5,"dijkstra","","[Generic] Dijkstra's shortest path algorithm.",null,null],[5,"astar","","[Generic] A* shortest path algorithm.",null,null],[5,"connected_components","","[Generic] Return the number of connected components of the graph.",null,{"i":[{"n":"g"}],"o":{"n":"usize"}}],[5,"is_cyclic_undirected","","[Generic] Return `true` if the input graph contains a cycle.",null,{"i":[{"n":"g"}],"o":{"n":"bool"}}],[5,"toposort","","[Generic] Perform a topological sort of a directed graph.",null,{"i":[{"n":"g"},{"g":["dfsspace"],"n":"option"}],"o":{"g":["vec","cycle"],"n":"result"}}],[5,"is_cyclic_directed","","[Generic] Return `true` if the input directed graph contains a cycle.",null,{"i":[{"n":"g"}],"o":{"n":"bool"}}],[5,"has_path_connecting","","[Generic] Check if there exists a path starting at `from` and reaching `to`.",null,null],[5,"scc","","Renamed to `kosaraju_scc`.",null,{"i":[{"n":"g"}],"o":{"g":["vec"],"n":"vec"}}],[5,"kosaraju_scc","","[Generic] Compute the strongly connected components using [Kosaraju's algorithm][1].",null,{"i":[{"n":"g"}],"o":{"g":["vec"],"n":"vec"}}],[5,"tarjan_scc","","[Generic] Compute the strongly connected components using [Tarjan's algorithm][1].",null,{"i":[{"n":"g"}],"o":{"g":["vec"],"n":"vec"}}],[5,"condensation","","[Graph] Condense every strongly connected component into a single node and return the result.",null,{"i":[{"n":"graph"},{"n":"bool"}],"o":{"g":["vec"],"n":"graph"}}],[5,"min_spanning_tree","","[Generic] Compute a minimum spanning tree of a graph.",null,{"i":[{"n":"g"}],"o":{"n":"minspanningtree"}}],[5,"bellman_ford","","[Generic] Compute shortest paths from node `source` to all other.",null,null],[0,"dominators","","Compute dominators of a control-flow graph.",null,null],[3,"Dominators","petgraph::algo::dominators","The dominance relation for some graph and root.",null,null],[3,"DominatorsIter","","Iterator for a node's dominators.",null,null],[5,"simple_fast","","This is an implementation of the engineered [\"Simple, Fast Dominance Algorithm\"][0] discovered by Cooper et al.",null,null],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"dominators"}}],[11,"root","","Get the root node used to construct these dominance relations.",49,{"i":[{"n":"self"}],"o":{"n":"n"}}],[11,"immediate_dominator","","Get the immediate dominator of the given node.",49,{"i":[{"n":"self"},{"n":"n"}],"o":{"n":"option"}}],[11,"strict_dominators","","Iterate over the given node's that strict dominators.",49,{"i":[{"n":"self"},{"n":"n"}],"o":{"g":["dominatorsiter"],"n":"option"}}],[11,"dominators","","Iterate over all of the given node's dominators (including the given node itself).",49,{"i":[{"n":"self"},{"n":"n"}],"o":{"g":["dominatorsiter"],"n":"option"}}],[11,"next","","",50,{"i":[{"n":"self"}],"o":{"n":"option"}}],[8,"Measure","petgraph::algo","Associated data that can be used for measures (such as length).",null,null],[8,"FloatMeasure","","A floating-point measure.",null,null],[10,"zero","","",51,{"o":{"n":"self"}}],[10,"infinite","","",51,{"o":{"n":"self"}}],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"dfsspace"}}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",52,{"i":[{"n":"g"}],"o":{"n":"self"}}],[11,"default","","",52,{"o":{"n":"self"}}],[11,"next","","",53,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"cycle"}}],[11,"fmt","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",54,{"i":[{"n":"self"},{"n":"cycle"}],"o":{"n":"bool"}}],[11,"ne","","",54,{"i":[{"n":"self"},{"n":"cycle"}],"o":{"n":"bool"}}],[11,"node_id","","Return a node id that participates in the cycle",54,{"i":[{"n":"self"}],"o":{"n":"n"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"negativecycle"}}],[11,"fmt","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",55,{"i":[{"n":"self"},{"n":"negativecycle"}],"o":{"n":"bool"}}],[11,"ne","","",55,{"i":[{"n":"self"},{"n":"negativecycle"}],"o":{"n":"bool"}}],[0,"graphmap","petgraph","`GraphMap<N, E, Ty>` is a graph datastructure where node values are mapping keys.",null,null],[3,"GraphMap","petgraph::graphmap","`GraphMap<N, E, Ty>` is a graph datastructure using an associative array of its node weights `N`.",null,null],[3,"Nodes","","",null,null],[3,"Neighbors","","",null,null],[3,"NeighborsDirected","","",null,null],[3,"Edges","","",null,null],[3,"AllEdges","","",null,null],[3,"AllEdgesMut","","",null,null],[3,"Ptr","","A reference that is hashed and compared by its pointer value.",null,null],[12,"0","","",56,null],[3,"NodeIdentifiers","","",null,null],[3,"NodeReferences","","",null,null],[6,"UnGraphMap","","A `GraphMap` with undirected edges.",null,null],[6,"DiGraphMap","","A `GraphMap` with directed edges.",null,null],[8,"NodeTrait","","A trait group for `GraphMap`'s node identifier.",null,null],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"graphmap"}}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `GraphMap`",57,{"o":{"n":"self"}}],[11,"with_capacity","","Create a new `GraphMap` with estimated capacity.",57,{"i":[{"n":"usize"},{"n":"usize"}],"o":{"n":"self"}}],[11,"capacity","","Return the current node and edge capacity of the graph.",57,null],[11,"is_directed","","Whether the graph has directed edges.",57,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from_edges","","Create a new `GraphMap` from an iterable of edges.",57,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"node_count","","Return the number of nodes in the graph.",57,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"edge_count","","Return the number of edges in the graph.",57,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clear","","Remove all nodes and edges",57,{"i":[{"n":"self"}]}],[11,"add_node","","Add node `n` to the graph.",57,{"i":[{"n":"self"},{"n":"n"}],"o":{"n":"n"}}],[11,"remove_node","","Return `true` if node `n` was removed.",57,{"i":[{"n":"self"},{"n":"n"}],"o":{"n":"bool"}}],[11,"contains_node","","Return `true` if the node is contained in the graph.",57,{"i":[{"n":"self"},{"n":"n"}],"o":{"n":"bool"}}],[11,"add_edge","","Add an edge connecting `a` and `b` to the graph, with associated data `weight`. For a directed graph, the edge is directed from `a` to `b`.",57,{"i":[{"n":"self"},{"n":"n"},{"n":"n"},{"n":"e"}],"o":{"n":"option"}}],[11,"remove_edge","","Remove edge from `a` to `b` from the graph and return the edge weight.",57,{"i":[{"n":"self"},{"n":"n"},{"n":"n"}],"o":{"n":"option"}}],[11,"contains_edge","","Return `true` if the edge connecting `a` with `b` is contained in the graph.",57,{"i":[{"n":"self"},{"n":"n"},{"n":"n"}],"o":{"n":"bool"}}],[11,"nodes","","Return an iterator over the nodes of the graph.",57,{"i":[{"n":"self"}],"o":{"n":"nodes"}}],[11,"neighbors","","Return an iterator of all nodes with an edge starting from `a`.",57,{"i":[{"n":"self"},{"n":"n"}],"o":{"n":"neighbors"}}],[11,"neighbors_directed","","Return an iterator of all neighbors that have an edge between them and `a`, in the specified direction. If the graph's edges are undirected, this is equivalent to .neighbors(a).",57,{"i":[{"n":"self"},{"n":"n"},{"n":"direction"}],"o":{"n":"neighborsdirected"}}],[11,"edges","","Return an iterator of target nodes with an edge starting from `a`, paired with their respective edge weights.",57,{"i":[{"n":"self"},{"n":"n"}],"o":{"n":"edges"}}],[11,"edge_weight","","Return a reference to the edge weight connecting `a` with `b`, or `None` if the edge does not exist in the graph.",57,{"i":[{"n":"self"},{"n":"n"},{"n":"n"}],"o":{"n":"option"}}],[11,"edge_weight_mut","","Return a mutable reference to the edge weight connecting `a` with `b`, or `None` if the edge does not exist in the graph.",57,{"i":[{"n":"self"},{"n":"n"},{"n":"n"}],"o":{"n":"option"}}],[11,"all_edges","","Return an iterator over all edges of the graph with their weight in arbitrary order.",57,{"i":[{"n":"self"}],"o":{"n":"alledges"}}],[11,"all_edges_mut","","Return an iterator over all edges of the graph in arbitrary order, with a mutable reference to their weight.",57,{"i":[{"n":"self"}],"o":{"n":"alledgesmut"}}],[11,"into_graph","","Return a `Graph` that corresponds to this `GraphMap`.",57,{"i":[{"n":"self"}],"o":{"n":"graph"}}],[11,"from_iter","","",57,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"extend","","",57,{"i":[{"n":"self"},{"n":"i"}]}],[11,"next","","",58,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",58,null],[11,"next","","",59,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",60,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",61,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",62,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",62,null],[11,"count","","",62,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"nth","","",62,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"last","","",62,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next_back","","",62,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",63,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",63,null],[11,"count","","",63,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"nth","","",63,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"last","","",63,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next_back","","",63,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"index","","",57,null],[11,"index_mut","","",57,null],[11,"default","","",57,{"o":{"n":"self"}}],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"eq","","Ptr compares by pointer equality, i.e if they point to the same value",56,{"i":[{"n":"self"},{"n":"ptr"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",56,{"i":[{"n":"self"},{"n":"ptr"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","Ptr is ordered by pointer value, i.e. an arbitrary but stable and total order.",56,{"i":[{"n":"self"},{"n":"ptr"}],"o":{"n":"ordering"}}],[11,"deref","","",56,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"hash","","",56,{"i":[{"n":"self"},{"n":"h"}]}],[11,"fmt","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"node_count","","",57,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",64,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",65,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"node_bound","","",57,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"to_index","","",57,null],[11,"from_index","","",57,null],[0,"dot","petgraph","Simple graphviz dot file format output.",null,null],[3,"Dot","petgraph::dot","`Dot` implements output to graphviz .dot format for a graph.",null,null],[4,"Config","","`Dot` configuration.",null,null],[13,"NodeIndexLabel","","Use indices for node labels.",66,null],[13,"EdgeIndexLabel","","Use indices for edge labels.",66,null],[13,"EdgeNoLabel","","Use no edge labels.",66,null],[11,"new","","Create a `Dot` formatting wrapper with default configuration.",67,{"i":[{"n":"g"}],"o":{"n":"self"}}],[11,"with_config","","Create a `Dot` formatting wrapper with custom configuration.",67,null],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",66,{"i":[{"n":"self"},{"n":"config"}],"o":{"n":"bool"}}],[11,"ne","","",66,{"i":[{"n":"self"},{"n":"config"}],"o":{"n":"bool"}}],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"unionfind","petgraph","`UnionFind<K>` is a disjoint-set data structure.",null,null],[3,"UnionFind","petgraph::unionfind","`UnionFind<K>` is a disjoint-set data structure. It tracks set membership of n elements indexed from 0 to n - 1. The scalar type is `K` which must be an unsigned integer type.",null,null],[11,"fmt","","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"unionfind"}}],[11,"new","","Create a new `UnionFind` of `n` disjoint sets.",68,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"find","","Return the representative for `x`.",68,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"k"}}],[11,"find_mut","","Return the representative for `x`.",68,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"k"}}],[11,"union","","Unify the two sets containing `x` and `y`.",68,{"i":[{"n":"self"},{"n":"k"},{"n":"k"}],"o":{"n":"bool"}}],[11,"into_labeling","","Return a vector mapping each element to its representative.",68,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[0,"csr","petgraph","Compressed Sparse Row (CSR) is a sparse adjacency matrix graph.",null,null],[3,"Csr","petgraph::csr","Compressed Sparse Row (CSR) is a sparse adjacency matrix graph.",null,null],[3,"EdgesNotSorted","","Csr creation error: edges were not in sorted order.",null,null],[3,"Edges","","",null,null],[3,"EdgeReference","","",null,null],[3,"EdgeReferences","","",null,null],[3,"Neighbors","","",null,null],[3,"NodeIdentifiers","","",null,null],[6,"NodeIndex","","Csr node index type, a plain integer.",null,null],[6,"EdgeIndex","","Csr edge index type, a plain integer.",null,null],[11,"fmt","","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",69,{"o":{"n":"self"}}],[11,"clone","","",69,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"new","","Create an empty `Csr`.",69,{"o":{"n":"self"}}],[11,"with_nodes","","Create a new `Csr` with `n` nodes.",69,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"clone","","",70,{"i":[{"n":"self"}],"o":{"n":"edgesnotsorted"}}],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_sorted_edges","","Create a new `Csr` from a sorted sequence of edges",69,null],[11,"node_count","","",69,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"edge_count","","",69,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_directed","","",69,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clear_edges","","Remove all edges",69,{"i":[{"n":"self"}]}],[11,"add_node","","Adds a new node with the given weight, returning the corresponding node index.",69,{"i":[{"n":"self"},{"n":"n"}],"o":{"n":"nodeindex"}}],[11,"add_edge","","Return `true` if the edge was added",69,{"i":[{"n":"self"},{"n":"nodeindex"},{"n":"nodeindex"},{"n":"e"}],"o":{"n":"bool"}}],[11,"contains_edge","","Computes in O(log |V|) time.",69,{"i":[{"n":"self"},{"n":"nodeindex"},{"n":"nodeindex"}],"o":{"n":"bool"}}],[11,"out_degree","","Computes in O(1) time.",69,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"usize"}}],[11,"neighbors_slice","","Computes in O(1) time.",69,null],[11,"edges_slice","","Computes in O(1) time.",69,null],[11,"edges","","Return an iterator of all edges of `a`.",69,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"edges"}}],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"edges"}}],[11,"fmt","","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"weight","","Access the edge’s weight.",72,{"i":[{"n":"self"}],"o":{"n":"e"}}],[11,"source","","",72,null],[11,"target","","",72,null],[11,"weight","","",72,{"i":[{"n":"self"}],"o":{"n":"e"}}],[11,"id","","",72,null],[11,"next","","",71,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",73,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"visit_map","","",69,{"i":[{"n":"self"}],"o":{"n":"fixedbitset"}}],[11,"reset_map","","",69,null],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"neighbors"}}],[11,"fmt","","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",74,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",74,null],[11,"node_bound","","",69,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"to_index","","",69,null],[11,"from_index","","",69,null],[11,"index","","",69,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"n"}}],[11,"index_mut","","",69,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"n"}}],[11,"next","","",75,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",75,null],[11,"node_count","","",69,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[0,"prelude","petgraph","Commonly used items.",null,null],[0,"graph","","`Graph<N, E, Ty, Ix>` is a graph datastructure using an adjacency list representation.",null,null],[3,"Edge","petgraph::graph","The graph's edge type.",null,null],[12,"weight","","Associated edge data.",76,null],[3,"EdgeIndex","","Edge identifier.",null,null],[3,"EdgeIndices","","Iterator over the edge indices of a graph.",null,null],[3,"EdgeReference","","Reference to a `Graph` edge.",null,null],[3,"EdgeReferences","","Iterator over all edges of a graph.",null,null],[3,"EdgeWeightsMut","","Iterator yielding mutable access to all edge weights.",null,null],[3,"Edges","","Iterator over the edges of from or to a node",null,null],[3,"Externals","","An iterator over either the nodes without edges to them or from them.",null,null],[3,"Frozen","","`Frozen` is a graph wrapper.",null,null],[3,"Graph","","`Graph<N, E, Ty, Ix>` is a graph datastructure using an adjacency list representation.",null,null],[3,"Neighbors","","Iterator over the neighbors of a node.",null,null],[3,"Node","","The graph's node type.",null,null],[12,"weight","","Associated node data.",77,null],[3,"NodeIndex","","Node identifier.",null,null],[3,"NodeIndices","","Iterator over the node indices of a graph.",null,null],[3,"NodeWeightsMut","","Iterator yielding mutable access to all node weights.",null,null],[3,"NodeReferences","","Iterator over all nodes of a graph.",null,null],[3,"WalkNeighbors","","A “walker” object that can be used to step through the edge list of a node.",null,null],[5,"edge_index","","Short version of `EdgeIndex::new`",null,{"i":[{"n":"usize"}],"o":{"n":"edgeindex"}}],[5,"node_index","","Short version of `NodeIndex::new`",null,{"i":[{"n":"usize"}],"o":{"n":"nodeindex"}}],[6,"DefaultIx","","The default integer type for graph indices. `u32` is the default to reduce the size of the graph's data and improve performance in the common case.",null,null],[6,"DiGraph","","A `Graph` with directed edges.",null,null],[6,"UnGraph","","A `Graph` with undirected edges.",null,null],[8,"GraphIndex","","A  `GraphIndex` is a node or edge index.",null,null],[8,"IndexType","","Trait for the unsigned integer type used for node and edge indices.",null,null],[10,"new","","",78,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[10,"index","","",78,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"max","","",78,{"o":{"n":"self"}}],[0,"stable_graph","petgraph","`StableGraph` keeps indices stable across removals.",null,null],[3,"StableGraph","petgraph::stable_graph","`StableGraph<N, E, Ty, Ix>` is a graph datastructure using an adjacency list representation.",null,null],[3,"NodeReferences","","Iterator over all nodes of a graph.",null,null],[3,"EdgeReference","","Reference to a `StableGraph` edge.",null,null],[3,"Edges","","Iterator over the edges of from or to a node",null,null],[3,"EdgeReferences","","Iterator over all edges of a graph.",null,null],[3,"Neighbors","","Iterator over the neighbors of a node.",null,null],[3,"WalkNeighbors","","A “walker” object that can be used to step through the edge list of a node.",null,null],[3,"NodeIndices","","Iterator over the node indices of a graph.",null,null],[3,"EdgeIndices","","Iterator over the edge indices of a graph.",null,null],[6,"StableDiGraph","","A `StableGraph` with directed edges.",null,null],[6,"StableUnGraph","","A `StableGraph` with undirected edges.",null,null],[8,"EdgeType","petgraph","A graph's edge type determines whether is has directed edges or not.",null,null],[10,"is_directed","","",79,{"o":{"n":"bool"}}],[8,"IntoWeightedEdge","","Convert an element like `(i, j)` or `(i, j, w)` into a triple of source, target, edge weight.",null,null],[16,"NodeId","","",80,null],[10,"into_weighted_edge","","",80,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"direction"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"direction"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"direction"}],"o":{"n":"ordering"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"opposite","","Return the opposite `Direction`.",0,{"i":[{"n":"self"}],"o":{"n":"direction"}}],[11,"index","","Return `0` for `Outgoing` and `1` for `Incoming`.",0,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"fmt","","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",81,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",82,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"is_directed","","",81,{"o":{"n":"bool"}}],[11,"is_directed","","",82,{"o":{"n":"bool"}}],[11,"iter","petgraph::visit","Create an iterator out of the walker and given `context`.",23,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"walkeriter"}}],[11,"node_count","petgraph::graph","",83,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"node_count","petgraph::stable_graph","",84,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"node_bound","petgraph::graph","",83,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"to_index","","",83,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"usize"}}],[11,"from_index","","",83,null],[11,"visit_map","","",83,{"i":[{"n":"self"}],"o":{"n":"fixedbitset"}}],[11,"reset_map","","",83,null],[11,"visit_map","petgraph::stable_graph","",84,{"i":[{"n":"self"}],"o":{"n":"fixedbitset"}}],[11,"reset_map","","",84,null],[11,"visit_map","petgraph::graphmap","",57,{"i":[{"n":"self"}],"o":{"n":"hashset"}}],[11,"reset_map","","",57,null],[11,"adjacency_matrix","","",57,{"i":[{"n":"self"}]}],[11,"is_adjacent","","",57,null],[11,"node_weight","petgraph::graph","",83,null],[11,"edge_weight","","",83,null],[11,"node_weight_mut","","",83,null],[11,"edge_weight_mut","","",83,null],[11,"node_weight","petgraph::stable_graph","",84,null],[11,"edge_weight","","",84,null],[11,"node_weight_mut","","",84,null],[11,"edge_weight_mut","","",84,null],[11,"add_node","petgraph::graph","",83,null],[11,"add_edge","","",83,null],[11,"update_edge","","",83,null],[11,"add_node","petgraph::stable_graph","",84,null],[11,"add_edge","","",84,null],[11,"update_edge","","",84,null],[11,"add_node","petgraph::graphmap","",57,null],[11,"add_edge","","",57,null],[11,"update_edge","","",57,null],[11,"with_capacity","petgraph::graph","",83,{"i":[{"n":"usize"},{"n":"usize"}],"o":{"n":"self"}}],[11,"with_capacity","petgraph::stable_graph","",84,{"i":[{"n":"usize"},{"n":"usize"}],"o":{"n":"self"}}],[11,"with_capacity","petgraph::graphmap","",57,{"i":[{"n":"usize"},{"n":"usize"}],"o":{"n":"self"}}],[11,"from_elements","petgraph::graph","",83,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"from_elements","petgraph::stable_graph","",84,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"from_elements","petgraph::graphmap","",57,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"fmt","petgraph::stable_graph","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `StableGraph` with directed edges.",84,{"o":{"n":"self"}}],[11,"with_capacity","","Create a new `StableGraph` with estimated capacity.",84,{"i":[{"n":"usize"},{"n":"usize"}],"o":{"n":"self"}}],[11,"capacity","","Return the current node and edge capacity of the graph.",84,null],[11,"clear","","Remove all nodes and edges",84,{"i":[{"n":"self"}]}],[11,"clear_edges","","Remove all edges",84,{"i":[{"n":"self"}]}],[11,"node_count","","Return the number of nodes (vertices) in the graph.",84,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"edge_count","","Return the number of edges in the graph.",84,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_directed","","Whether the graph has directed edges or not.",84,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"add_node","","Add a node (also called vertex) with associated data `weight` to the graph.",84,{"i":[{"n":"self"},{"n":"n"}],"o":{"n":"nodeindex"}}],[11,"remove_node","","Remove `a` from the graph if it exists, and return its weight. If it doesn't exist in the graph, return `None`.",84,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"option"}}],[11,"contains_node","","",84,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"bool"}}],[11,"add_edge","","Add an edge from `a` to `b` to the graph, with its associated data `weight`.",84,{"i":[{"n":"self"},{"n":"nodeindex"},{"n":"nodeindex"},{"n":"e"}],"o":{"n":"edgeindex"}}],[11,"update_edge","","Add or update an edge from `a` to `b`. If the edge already exists, its weight is updated.",84,{"i":[{"n":"self"},{"n":"nodeindex"},{"n":"nodeindex"},{"n":"e"}],"o":{"n":"edgeindex"}}],[11,"remove_edge","","Remove an edge and return its edge weight, or `None` if it didn't exist.",84,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"option"}}],[11,"node_weight","","Access the weight for node `a`.",84,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"option"}}],[11,"node_weight_mut","","Access the weight for node `a`, mutably.",84,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"option"}}],[11,"node_indices","","Return an iterator over the node indices of the graph",84,{"i":[{"n":"self"}],"o":{"n":"nodeindices"}}],[11,"edge_weight","","Access the weight for edge `e`.",84,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"option"}}],[11,"edge_weight_mut","","Access the weight for edge `e`, mutably",84,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"option"}}],[11,"edge_endpoints","","Access the source and target nodes for `e`.",84,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"option"}}],[11,"edge_indices","","Return an iterator over the node indices of the graph",84,{"i":[{"n":"self"}],"o":{"n":"edgeindices"}}],[11,"find_edge","","Lookup an edge from `a` to `b`.",84,{"i":[{"n":"self"},{"n":"nodeindex"},{"n":"nodeindex"}],"o":{"g":["edgeindex"],"n":"option"}}],[11,"find_edge_undirected","","Lookup an edge between `a` and `b`, in either direction.",84,{"i":[{"n":"self"},{"n":"nodeindex"},{"n":"nodeindex"}],"o":{"n":"option"}}],[11,"neighbors","","Return an iterator of all nodes with an edge starting from `a`.",84,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"neighbors"}}],[11,"neighbors_directed","","Return an iterator of all neighbors that have an edge between them and `a`, in the specified direction. If the graph's edges are undirected, this is equivalent to .neighbors(a).",84,{"i":[{"n":"self"},{"n":"nodeindex"},{"n":"direction"}],"o":{"n":"neighbors"}}],[11,"neighbors_undirected","","Return an iterator of all neighbors that have an edge between them and `a`, in either direction. If the graph's edges are undirected, this is equivalent to .neighbors(a).",84,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"neighbors"}}],[11,"edges","","Return an iterator of all edges of `a`.",84,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"edges"}}],[11,"edges_directed","","Return an iterator of all edges of `a`, in the specified direction.",84,{"i":[{"n":"self"},{"n":"nodeindex"},{"n":"direction"}],"o":{"n":"edges"}}],[11,"index_twice_mut","","Index the `StableGraph` by two indices, any combination of node or edge indices is fine.",84,null],[11,"retain_nodes","","Keep all nodes that return `true` from the `visit` closure, remove the others.",84,{"i":[{"n":"self"},{"n":"f"}]}],[11,"retain_edges","","Keep all edges that return `true` from the `visit` closure, remove the others.",84,{"i":[{"n":"self"},{"n":"f"}]}],[11,"from_edges","","Create a new `StableGraph` from an iterable of edges.",84,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"map","","Create a new `StableGraph` by mapping node and edge weights to new values.",84,{"i":[{"n":"self"},{"n":"f"},{"n":"g"}],"o":{"n":"stablegraph"}}],[11,"filter_map","","Create a new `StableGraph` by mapping nodes and edges. A node or edge may be mapped to `None` to exclude it from the resulting graph.",84,{"i":[{"n":"self"},{"n":"f"},{"n":"g"}],"o":{"n":"stablegraph"}}],[11,"extend_with_edges","","Extend the graph from an iterable of edges.",84,{"i":[{"n":"self"},{"n":"i"}]}],[11,"clone","","",84,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"clone_from","","",84,{"i":[{"n":"self"},{"n":"self"}]}],[11,"index","","",84,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"n"}}],[11,"index_mut","","",84,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"n"}}],[11,"index","","",84,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"e"}}],[11,"index_mut","","",84,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"e"}}],[11,"default","","",84,{"o":{"n":"self"}}],[11,"from","","",84,{"i":[{"n":"graph"}],"o":{"n":"self"}}],[11,"from","petgraph::graph","",83,{"i":[{"n":"stablegraph"}],"o":{"n":"self"}}],[11,"next","petgraph::stable_graph","",85,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",85,null],[11,"next_back","","",85,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",86,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"eq","","",86,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"weight","","Access the edge’s weight.",86,{"i":[{"n":"self"}],"o":{"n":"e"}}],[11,"source","","",86,null],[11,"target","","",86,null],[11,"weight","","",86,{"i":[{"n":"self"}],"o":{"n":"e"}}],[11,"id","","",86,null],[11,"next","","",87,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",88,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next_back","","",88,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"detach","","Return a “walker” object that can be used to step through the neighbors and edges from the origin node.",89,{"i":[{"n":"self"}],"o":{"n":"walkneighbors"}}],[11,"next","","",89,{"i":[{"n":"self"}],"o":{"g":["nodeindex"],"n":"option"}}],[11,"clone","","",90,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"next","","Step to the next edge and its endpoint node in the walk for graph `g`.",90,{"i":[{"n":"self"},{"n":"stablegraph"}],"o":{"n":"option"}}],[11,"next_node","","",90,{"i":[{"n":"self"},{"n":"stablegraph"}],"o":{"g":["nodeindex"],"n":"option"}}],[11,"next_edge","","",90,{"i":[{"n":"self"},{"n":"stablegraph"}],"o":{"g":["edgeindex"],"n":"option"}}],[11,"next","","",91,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",91,null],[11,"next_back","","",91,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"node_bound","","Return an upper bound of the node indices in the graph",84,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"to_index","","",84,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"usize"}}],[11,"from_index","","",84,null],[11,"next","","",92,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",92,null],[11,"next_back","","",92,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"new","petgraph::graph","Create a new `Frozen` from a mutable reference to a graph.",93,{"i":[{"n":"g"}],"o":{"n":"self"}}],[11,"deref","","",93,{"i":[{"n":"self"}],"o":{"n":"g"}}],[11,"index","","",93,null],[11,"index_mut","","",93,null],[11,"index_twice_mut","","Index the `Graph` by two indices, any combination of node or edge indices is fine.",93,null],[11,"node_weight","","",93,null],[11,"edge_weight","","",93,null],[11,"node_weight_mut","","",93,null],[11,"edge_weight_mut","","",93,null],[11,"adjacency_matrix","","",93,null],[11,"is_adjacent","","",93,null],[11,"node_count","","",93,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"node_bound","","",93,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"to_index","","",93,null],[11,"from_index","","",93,null],[11,"visit_map","","",93,null],[11,"reset_map","","",93,null],[11,"clone","","",94,{"i":[{"n":"self"}],"o":{"n":"nodeindex"}}],[11,"default","","",94,{"o":{"n":"nodeindex"}}],[11,"eq","","",94,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"bool"}}],[11,"ne","","",94,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",94,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",94,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"bool"}}],[11,"le","","",94,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"bool"}}],[11,"gt","","",94,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"bool"}}],[11,"ge","","",94,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"bool"}}],[11,"cmp","","",94,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"ordering"}}],[11,"hash","","",94,null],[11,"new","","",94,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"index","","",94,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"end","","",94,{"o":{"n":"self"}}],[11,"from","","",94,{"i":[{"n":"ix"}],"o":{"n":"self"}}],[11,"fmt","","",94,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",95,{"i":[{"n":"self"}],"o":{"n":"edgeindex"}}],[11,"default","","",95,{"o":{"n":"edgeindex"}}],[11,"eq","","",95,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"bool"}}],[11,"ne","","",95,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",95,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",95,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"bool"}}],[11,"le","","",95,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"bool"}}],[11,"gt","","",95,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"bool"}}],[11,"ge","","",95,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"bool"}}],[11,"cmp","","",95,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"ordering"}}],[11,"hash","","",95,null],[11,"new","","",95,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"index","","",95,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"end","","An invalid `EdgeIndex` used to denote absence of an edge, for example to end an adjacency list.",95,{"o":{"n":"self"}}],[11,"fmt","","",95,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",77,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",77,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"next_edge","","Accessor for data structure internals: the first edge in the given direction.",77,{"i":[{"n":"self"},{"n":"direction"}],"o":{"n":"edgeindex"}}],[11,"fmt","","",76,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",76,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"next_edge","","Accessor for data structure internals: the next edge for the given direction.",76,{"i":[{"n":"self"},{"n":"direction"}],"o":{"n":"edgeindex"}}],[11,"source","","Return the source node index.",76,{"i":[{"n":"self"}],"o":{"n":"nodeindex"}}],[11,"target","","Return the target node index.",76,{"i":[{"n":"self"}],"o":{"n":"nodeindex"}}],[11,"clone","","",83,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"clone_from","","",83,{"i":[{"n":"self"},{"n":"self"}]}],[11,"fmt","","",83,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `Graph` with directed edges.",83,{"o":{"n":"self"}}],[11,"new_undirected","","Create a new `Graph` with undirected edges.",83,{"o":{"n":"self"}}],[11,"with_capacity","","Create a new `Graph` with estimated capacity.",83,{"i":[{"n":"usize"},{"n":"usize"}],"o":{"n":"self"}}],[11,"node_count","","Return the number of nodes (vertices) in the graph.",83,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"edge_count","","Return the number of edges in the graph.",83,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_directed","","Whether the graph has directed edges or not.",83,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"add_node","","Add a node (also called vertex) with associated data `weight` to the graph.",83,{"i":[{"n":"self"},{"n":"n"}],"o":{"n":"nodeindex"}}],[11,"node_weight","","Access the weight for node `a`.",83,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"option"}}],[11,"node_weight_mut","","Access the weight for node `a`, mutably.",83,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"option"}}],[11,"add_edge","","Add an edge from `a` to `b` to the graph, with its associated data `weight`.",83,{"i":[{"n":"self"},{"n":"nodeindex"},{"n":"nodeindex"},{"n":"e"}],"o":{"n":"edgeindex"}}],[11,"update_edge","","Add or update an edge from `a` to `b`. If the edge already exists, its weight is updated.",83,{"i":[{"n":"self"},{"n":"nodeindex"},{"n":"nodeindex"},{"n":"e"}],"o":{"n":"edgeindex"}}],[11,"edge_weight","","Access the weight for edge `e`.",83,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"option"}}],[11,"edge_weight_mut","","Access the weight for edge `e`, mutably.",83,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"option"}}],[11,"edge_endpoints","","Access the source and target nodes for `e`.",83,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"option"}}],[11,"remove_node","","Remove `a` from the graph if it exists, and return its weight. If it doesn't exist in the graph, return `None`.",83,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"option"}}],[11,"remove_edge","","Remove an edge and return its edge weight, or `None` if it didn't exist.",83,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"option"}}],[11,"neighbors","","Return an iterator of all nodes with an edge starting from `a`.",83,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"neighbors"}}],[11,"neighbors_directed","","Return an iterator of all neighbors that have an edge between them and `a`, in the specified direction. If the graph's edges are undirected, this is equivalent to .neighbors(a).",83,{"i":[{"n":"self"},{"n":"nodeindex"},{"n":"direction"}],"o":{"n":"neighbors"}}],[11,"neighbors_undirected","","Return an iterator of all neighbors that have an edge between them and `a`, in either direction. If the graph's edges are undirected, this is equivalent to .neighbors(a).",83,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"neighbors"}}],[11,"edges","","Return an iterator of all edges of `a`.",83,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"edges"}}],[11,"edges_directed","","Return an iterator of all edges of `a`, in the specified direction.",83,{"i":[{"n":"self"},{"n":"nodeindex"},{"n":"direction"}],"o":{"n":"edges"}}],[11,"contains_edge","","Lookup if there is an edge from `a` to `b`.",83,{"i":[{"n":"self"},{"n":"nodeindex"},{"n":"nodeindex"}],"o":{"n":"bool"}}],[11,"find_edge","","Lookup an edge from `a` to `b`.",83,{"i":[{"n":"self"},{"n":"nodeindex"},{"n":"nodeindex"}],"o":{"g":["edgeindex"],"n":"option"}}],[11,"find_edge_undirected","","Lookup an edge between `a` and `b`, in either direction.",83,{"i":[{"n":"self"},{"n":"nodeindex"},{"n":"nodeindex"}],"o":{"n":"option"}}],[11,"externals","","Return an iterator over either the nodes without edges to them (`Incoming`) or from them (`Outgoing`).",83,{"i":[{"n":"self"},{"n":"direction"}],"o":{"n":"externals"}}],[11,"node_indices","","Return an iterator over the node indices of the graph",83,{"i":[{"n":"self"}],"o":{"n":"nodeindices"}}],[11,"node_weights_mut","","Return an iterator yielding mutable access to all node weights.",83,{"i":[{"n":"self"}],"o":{"n":"nodeweightsmut"}}],[11,"edge_indices","","Return an iterator over the edge indices of the graph",83,{"i":[{"n":"self"}],"o":{"n":"edgeindices"}}],[11,"edge_references","","Create an iterator over all edges, in indexed order.",83,{"i":[{"n":"self"}],"o":{"n":"edgereferences"}}],[11,"edge_weights_mut","","Return an iterator yielding mutable access to all edge weights.",83,{"i":[{"n":"self"}],"o":{"n":"edgeweightsmut"}}],[11,"raw_nodes","","Access the internal node array.",83,null],[11,"raw_edges","","Access the internal edge array.",83,null],[11,"into_nodes_edges","","Convert the graph into a vector of Nodes and a vector of Edges",83,null],[11,"first_edge","","Accessor for data structure internals: the first edge in the given direction.",83,{"i":[{"n":"self"},{"n":"nodeindex"},{"n":"direction"}],"o":{"g":["edgeindex"],"n":"option"}}],[11,"next_edge","","Accessor for data structure internals: the next edge for the given direction.",83,{"i":[{"n":"self"},{"n":"edgeindex"},{"n":"direction"}],"o":{"g":["edgeindex"],"n":"option"}}],[11,"index_twice_mut","","Index the `Graph` by two indices, any combination of node or edge indices is fine.",83,null],[11,"reverse","","Reverse the direction of all edges",83,{"i":[{"n":"self"}]}],[11,"clear","","Remove all nodes and edges",83,{"i":[{"n":"self"}]}],[11,"clear_edges","","Remove all edges",83,{"i":[{"n":"self"}]}],[11,"capacity","","Return the current node and edge capacity of the graph.",83,null],[11,"reserve_nodes","","Reserves capacity for at least `additional` more nodes to be inserted in the graph. Graph may reserve more space to avoid frequent reallocations.",83,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"reserve_edges","","Reserves capacity for at least `additional` more edges to be inserted in the graph. Graph may reserve more space to avoid frequent reallocations.",83,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"reserve_exact_nodes","","Reserves the minimum capacity for exactly `additional` more nodes to be inserted in the graph. Does nothing if the capacity is already sufficient.",83,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"reserve_exact_edges","","Reserves the minimum capacity for exactly `additional` more edges to be inserted in the graph. Does nothing if the capacity is already sufficient.",83,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shrink_to_fit_nodes","","Shrinks the capacity of the underlying nodes collection as much as possible.",83,{"i":[{"n":"self"}]}],[11,"shrink_to_fit_edges","","Shrinks the capacity of the underlying edges collection as much as possible.",83,{"i":[{"n":"self"}]}],[11,"shrink_to_fit","","Shrinks the capacity of the graph as much as possible.",83,{"i":[{"n":"self"}]}],[11,"retain_nodes","","Keep all nodes that return `true` from the `visit` closure, remove the others.",83,{"i":[{"n":"self"},{"n":"f"}]}],[11,"retain_edges","","Keep all edges that return `true` from the `visit` closure, remove the others.",83,{"i":[{"n":"self"},{"n":"f"}]}],[11,"from_edges","","Create a new `Graph` from an iterable of edges.",83,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"extend_with_edges","","Extend the graph from an iterable of edges.",83,{"i":[{"n":"self"},{"n":"i"}]}],[11,"map","","Create a new `Graph` by mapping node and edge weights to new values.",83,{"i":[{"n":"self"},{"n":"f"},{"n":"g"}],"o":{"n":"graph"}}],[11,"filter_map","","Create a new `Graph` by mapping nodes and edges. A node or edge may be mapped to `None` to exclude it from the resulting graph.",83,{"i":[{"n":"self"},{"n":"f"},{"n":"g"}],"o":{"n":"graph"}}],[11,"into_edge_type","","Convert the graph into either undirected or directed. No edge adjustments are done, so you may want to go over the result to remove or add edges.",83,{"i":[{"n":"self"}],"o":{"n":"graph"}}],[11,"next","","",96,{"i":[{"n":"self"}],"o":{"g":["nodeindex"],"n":"option"}}],[11,"next","","",97,{"i":[{"n":"self"}],"o":{"g":["nodeindex"],"n":"option"}}],[11,"clone","","",97,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"detach","","Return a “walker” object that can be used to step through the neighbors and edges from the origin node.",97,{"i":[{"n":"self"}],"o":{"n":"walkneighbors"}}],[11,"next","","",98,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",98,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"next","","",99,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",99,null],[11,"next","","",100,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",100,null],[11,"index","","",83,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"n"}}],[11,"index_mut","","",83,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"n"}}],[11,"index","","",83,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"e"}}],[11,"index_mut","","",83,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"e"}}],[11,"default","","",83,{"o":{"n":"self"}}],[11,"index","","",94,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_node_index","","",94,{"o":{"n":"bool"}}],[11,"index","","",95,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_node_index","","",95,{"o":{"n":"bool"}}],[11,"clone","","",101,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"next","","Step to the next edge and its endpoint node in the walk for graph `g`.",101,{"i":[{"n":"self"},{"n":"graph"}],"o":{"n":"option"}}],[11,"next_node","","",101,{"i":[{"n":"self"},{"n":"graph"}],"o":{"g":["nodeindex"],"n":"option"}}],[11,"next_edge","","",101,{"i":[{"n":"self"},{"n":"graph"}],"o":{"g":["edgeindex"],"n":"option"}}],[11,"clone","","",102,{"i":[{"n":"self"}],"o":{"n":"nodeindices"}}],[11,"fmt","","",102,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",102,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",102,null],[11,"next_back","","",102,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",103,{"i":[{"n":"self"}],"o":{"n":"edgeindices"}}],[11,"fmt","","",103,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",103,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",103,null],[11,"next_back","","",103,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fmt","","",104,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",104,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"eq","","",104,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"next","","",105,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",105,null],[11,"next_back","","",105,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"weight","","Access the edge’s weight.",104,{"i":[{"n":"self"}],"o":{"n":"e"}}],[11,"source","","",104,null],[11,"target","","",104,null],[11,"weight","","",104,{"i":[{"n":"self"}],"o":{"n":"e"}}],[11,"id","","",104,null],[11,"next","","",106,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",106,null],[11,"next_back","","",106,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"adjacency_matrix","","",83,{"i":[{"n":"self"}],"o":{"n":"fixedbitset"}}],[11,"is_adjacent","","",83,{"i":[{"n":"self"},{"n":"fixedbitset"},{"n":"nodeindex"},{"n":"nodeindex"}],"o":{"n":"bool"}}],[11,"adjacency_matrix","petgraph::stable_graph","",84,{"i":[{"n":"self"}],"o":{"n":"fixedbitset"}}],[11,"is_adjacent","","",84,{"i":[{"n":"self"},{"n":"fixedbitset"},{"n":"nodeindex"},{"n":"nodeindex"}],"o":{"n":"bool"}}]],"paths":[[4,"Direction"],[3,"NodeFiltered"],[3,"EdgeFiltered"],[3,"Reversed"],[3,"Time"],[3,"Dfs"],[3,"DfsPostOrder"],[3,"Bfs"],[4,"DfsEvent"],[4,"Control"],[3,"Topo"],[3,"WalkerIter"],[3,"NodeFilteredNeighbors"],[3,"NodeFilteredNodes"],[3,"NodeFilteredEdgeReferences"],[3,"NodeFilteredEdges"],[3,"EdgeFilteredNeighbors"],[3,"EdgeFilteredEdges"],[3,"ReversedEdgeReference"],[3,"ReversedEdgeReferences"],[8,"FilterNode"],[8,"FilterEdge"],[8,"ControlFlow"],[8,"Walker"],[8,"GraphBase"],[8,"IntoNeighbors"],[8,"IntoNeighborsDirected"],[8,"IntoEdges"],[8,"IntoEdgesDirected"],[8,"IntoNodeIdentifiers"],[8,"Data"],[8,"EdgeRef"],[8,"NodeRef"],[8,"IntoNodeReferences"],[8,"IntoEdgeReferences"],[8,"GraphProp"],[8,"NodeIndexable"],[8,"NodeCount"],[8,"VisitMap"],[8,"Visitable"],[8,"GetAdjacencyMatrix"],[4,"Element"],[8,"DataMap"],[8,"DataMapMut"],[8,"Build"],[8,"Create"],[8,"FromElements"],[8,"ElementIterator"],[3,"FilterElements"],[3,"Dominators"],[3,"DominatorsIter"],[8,"FloatMeasure"],[3,"DfsSpace"],[3,"MinSpanningTree"],[3,"Cycle"],[3,"NegativeCycle"],[3,"Ptr"],[3,"GraphMap"],[3,"Nodes"],[3,"Neighbors"],[3,"NeighborsDirected"],[3,"Edges"],[3,"AllEdges"],[3,"AllEdgesMut"],[3,"NodeIdentifiers"],[3,"NodeReferences"],[4,"Config"],[3,"Dot"],[3,"UnionFind"],[3,"Csr"],[3,"EdgesNotSorted"],[3,"Edges"],[3,"EdgeReference"],[3,"EdgeReferences"],[3,"Neighbors"],[3,"NodeIdentifiers"],[3,"Edge"],[3,"Node"],[8,"IndexType"],[8,"EdgeType"],[8,"IntoWeightedEdge"],[4,"Directed"],[4,"Undirected"],[3,"Graph"],[3,"StableGraph"],[3,"NodeReferences"],[3,"EdgeReference"],[3,"Edges"],[3,"EdgeReferences"],[3,"Neighbors"],[3,"WalkNeighbors"],[3,"NodeIndices"],[3,"EdgeIndices"],[3,"Frozen"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Externals"],[3,"Neighbors"],[3,"Edges"],[3,"NodeWeightsMut"],[3,"EdgeWeightsMut"],[3,"WalkNeighbors"],[3,"NodeIndices"],[3,"EdgeIndices"],[3,"EdgeReference"],[3,"NodeReferences"],[3,"EdgeReferences"]]};
searchIndex["proc_macro2"] = {"doc":"A \"shim crate\" intended to multiplex the [`proc_macro`] API on to stable Rust.","items":[[3,"TokenStream","proc_macro2","",null,null],[3,"LexError","","",null,null],[3,"Span","","",null,null],[3,"Group","","",null,null],[3,"Op","","",null,null],[3,"Term","","",null,null],[3,"Literal","","",null,null],[4,"TokenTree","","",null,null],[13,"Group","","",0,null],[13,"Term","","",0,null],[13,"Op","","",0,null],[13,"Literal","","",0,null],[4,"Delimiter","","",null,null],[13,"Parenthesis","","",1,null],[13,"Brace","","",1,null],[13,"Bracket","","",1,null],[13,"None","","",1,null],[4,"Spacing","","",null,null],[13,"Alone","","",2,null],[13,"Joint","","",2,null],[0,"token_stream","","",null,null],[3,"IntoIter","proc_macro2::token_stream","",null,null],[11,"next","","",3,{"i":[{"n":"self"}],"o":{"g":["tokentree"],"n":"option"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into_iter","proc_macro2","",4,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"empty","","",4,{"o":{"n":"tokenstream"}}],[11,"is_empty","","",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from_str","","",4,{"i":[{"n":"str"}],"o":{"g":["tokenstream","lexerror"],"n":"result"}}],[11,"from","","",4,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}],[11,"from_iter","","",4,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"call_site","","",6,{"o":{"n":"span"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"tokentree"}}],[11,"span","","",0,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",0,{"i":[{"n":"self"},{"n":"span"}]}],[11,"from","","",0,{"i":[{"n":"group"}],"o":{"n":"tokentree"}}],[11,"from","","",0,{"i":[{"n":"term"}],"o":{"n":"tokentree"}}],[11,"from","","",0,{"i":[{"n":"op"}],"o":{"n":"tokentree"}}],[11,"from","","",0,{"i":[{"n":"literal"}],"o":{"n":"tokentree"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"group"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"delimiter"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"delimiter"}],"o":{"n":"bool"}}],[11,"new","","",7,{"i":[{"n":"delimiter"},{"n":"tokenstream"}],"o":{"n":"group"}}],[11,"delimiter","","",7,{"i":[{"n":"self"}],"o":{"n":"delimiter"}}],[11,"stream","","",7,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"span","","",7,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",7,{"i":[{"n":"self"},{"n":"span"}]}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"op"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"spacing"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"spacing"}],"o":{"n":"bool"}}],[11,"new","","",8,{"i":[{"n":"char"},{"n":"spacing"}],"o":{"n":"op"}}],[11,"op","","",8,{"i":[{"n":"self"}],"o":{"n":"char"}}],[11,"spacing","","",8,{"i":[{"n":"self"}],"o":{"n":"spacing"}}],[11,"span","","",8,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",8,{"i":[{"n":"self"},{"n":"span"}]}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"term"}}],[11,"new","","",9,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"term"}}],[11,"as_str","","",9,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"span","","",9,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",9,{"i":[{"n":"self"},{"n":"span"}]}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"literal"}}],[11,"u8_suffixed","","",10,{"i":[{"n":"u8"}],"o":{"n":"literal"}}],[11,"u16_suffixed","","",10,{"i":[{"n":"u16"}],"o":{"n":"literal"}}],[11,"u32_suffixed","","",10,{"i":[{"n":"u32"}],"o":{"n":"literal"}}],[11,"u64_suffixed","","",10,{"i":[{"n":"u64"}],"o":{"n":"literal"}}],[11,"usize_suffixed","","",10,{"i":[{"n":"usize"}],"o":{"n":"literal"}}],[11,"i8_suffixed","","",10,{"i":[{"n":"i8"}],"o":{"n":"literal"}}],[11,"i16_suffixed","","",10,{"i":[{"n":"i16"}],"o":{"n":"literal"}}],[11,"i32_suffixed","","",10,{"i":[{"n":"i32"}],"o":{"n":"literal"}}],[11,"i64_suffixed","","",10,{"i":[{"n":"i64"}],"o":{"n":"literal"}}],[11,"isize_suffixed","","",10,{"i":[{"n":"isize"}],"o":{"n":"literal"}}],[11,"u8_unsuffixed","","",10,{"i":[{"n":"u8"}],"o":{"n":"literal"}}],[11,"u16_unsuffixed","","",10,{"i":[{"n":"u16"}],"o":{"n":"literal"}}],[11,"u32_unsuffixed","","",10,{"i":[{"n":"u32"}],"o":{"n":"literal"}}],[11,"u64_unsuffixed","","",10,{"i":[{"n":"u64"}],"o":{"n":"literal"}}],[11,"usize_unsuffixed","","",10,{"i":[{"n":"usize"}],"o":{"n":"literal"}}],[11,"i8_unsuffixed","","",10,{"i":[{"n":"i8"}],"o":{"n":"literal"}}],[11,"i16_unsuffixed","","",10,{"i":[{"n":"i16"}],"o":{"n":"literal"}}],[11,"i32_unsuffixed","","",10,{"i":[{"n":"i32"}],"o":{"n":"literal"}}],[11,"i64_unsuffixed","","",10,{"i":[{"n":"i64"}],"o":{"n":"literal"}}],[11,"isize_unsuffixed","","",10,{"i":[{"n":"isize"}],"o":{"n":"literal"}}],[11,"f64_unsuffixed","","",10,{"i":[{"n":"f64"}],"o":{"n":"literal"}}],[11,"f64_suffixed","","",10,{"i":[{"n":"f64"}],"o":{"n":"literal"}}],[11,"f32_unsuffixed","","",10,{"i":[{"n":"f32"}],"o":{"n":"literal"}}],[11,"f32_suffixed","","",10,{"i":[{"n":"f32"}],"o":{"n":"literal"}}],[11,"string","","",10,{"i":[{"n":"str"}],"o":{"n":"literal"}}],[11,"character","","",10,{"i":[{"n":"char"}],"o":{"n":"literal"}}],[11,"byte_string","","",10,null],[11,"span","","",10,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",10,{"i":[{"n":"self"},{"n":"span"}]}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"IntoIter"],[3,"TokenStream"],[3,"LexError"],[3,"Span"],[3,"Group"],[3,"Op"],[3,"Term"],[3,"Literal"]]};
searchIndex["quote"] = {"doc":"This crate provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code.","items":[[8,"TokenStreamExt","quote","TokenStream extension trait with methods for appending tokens.",null,null],[10,"append","","",0,{"i":[{"n":"self"},{"n":"u"}]}],[10,"append_all","","",0,{"i":[{"n":"self"},{"n":"i"}]}],[10,"append_separated","","",0,{"i":[{"n":"self"},{"n":"i"},{"n":"u"}]}],[10,"append_terminated","","",0,{"i":[{"n":"self"},{"n":"i"},{"n":"u"}]}],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",null,null],[10,"to_tokens","","Write `self` to the given `TokenStream`.",1,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[14,"quote","","The whole point.",null,null],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",null,null],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}]],"paths":[[8,"TokenStreamExt"],[8,"ToTokens"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"IsaacRng","rand","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[3,"ChaChaRng","","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Generator","","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"o":{"n":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"o":{"n":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"o":{"n":"t"}}],[5,"sample","","DEPRECATED: use `seq::sample_iter` instead.",null,{"i":[{"n":"r"},{"n":"i"},{"n":"usize"}],"o":{"n":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",3,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",3,{"i":[{"n":"range"},{"n":"r"}],"o":{"n":"self"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"range"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",4,{"i":[{"n":"x"},{"n":"x"}],"o":{"n":"range"}}],[11,"sample","","",4,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"sup"}}],[11,"ind_sample","","",4,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"gamma"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",5,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"gamma"}}],[11,"sample","","",5,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",5,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"chisquared"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",6,{"i":[{"n":"f64"}],"o":{"n":"chisquared"}}],[11,"sample","","",6,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",6,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"fisherf"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",7,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"fisherf"}}],[11,"sample","","",7,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",7,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"studentt"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",8,{"i":[{"n":"f64"}],"o":{"n":"studentt"}}],[11,"sample","","",8,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",8,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"standardnormal"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"rand","","",9,{"i":[{"n":"r"}],"o":{"n":"standardnormal"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"normal"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",10,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"normal"}}],[11,"sample","","",10,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",10,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"lognormal"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",11,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"lognormal"}}],[11,"sample","","",11,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",11,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"exp1"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"rand","","",12,{"i":[{"n":"r"}],"o":{"n":"exp1"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"exp"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",13,{"i":[{"n":"f64"}],"o":{"n":"exp"}}],[11,"sample","","",13,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",13,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",14,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"support"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"sample","","",16,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"sup"}}],[11,"ind_sample","","",16,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"sup"}}],[11,"new","","",16,{"o":{"n":"randsample"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"weighted"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"t"}}],[11,"ind_sample","","",17,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"t"}}],[0,"jitter","rand","Non-physical true random number generator based on timing jitter.",null,null],[3,"JitterRng","rand::jitter","A true random number generator based on jitter in the CPU execution time, and jitter in memory access time.",null,null],[4,"TimerError","","An error that can occur when `test_timer` fails.",null,null],[13,"NoTimer","","No timer available.",18,null],[13,"CoarseTimer","","Timer too coarse to use as an entropy source.",18,null],[13,"NotMonotonic","","Timer is not monotonically increasing.",18,null],[13,"TinyVariantions","","Variations of deltas of time too small.",18,null],[13,"TooManyStuck","","Too many stuck results (indicating no added entropy).",18,null],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"timererror"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"timererror"}],"o":{"n":"bool"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",18,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"new","","Create a new `JitterRng`. Makes use of `std::time` for a timer.",19,{"o":{"g":["jitterrng","timererror"],"n":"result"}}],[11,"new_with_timer","","Create a new `JitterRng`. A custom timer can be supplied, making it possible to use `JitterRng` in `no_std` environments.",19,null],[11,"set_rounds","","Configures how many rounds are used to generate each 64-bit value. This must be greater than zero, and has a big impact on performance and output quality.",19,{"i":[{"n":"self"},{"n":"u32"}]}],[11,"test_timer","","Basic quality tests on the timer, by measuring CPU timing jitter a few hundred times.",19,{"i":[{"n":"self"}],"o":{"g":["u32","timererror"],"n":"result"}}],[11,"timer_stats","","Statistical test: return the timer delta of one normal run of the `JitterEntropy` entropy collector.",19,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"i64"}}],[11,"next_u32","","",19,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",19,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",19,null],[0,"os","rand","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",20,{"o":{"g":["osrng"],"n":"result"}}],[11,"next_u32","","",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",20,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",20,null],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `ReadRng` from a `Read`.",21,{"i":[{"n":"r"}],"o":{"n":"readrng"}}],[11,"next_u32","","",21,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",21,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",21,null],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",22,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",23,{"i":[{"n":"self"},{"n":"r"}]}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",22,{"i":[{"n":"r"},{"n":"u64"},{"n":"rsdr"}],"o":{"n":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",22,{"i":[{"n":"self"}]}],[11,"next_u32","","",22,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",22,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",22,null],[11,"reseed","","",22,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",22,null],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"reseedwithdefault"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"reseed","","",24,{"i":[{"n":"self"},{"n":"r"}]}],[11,"default","","",24,{"o":{"n":"reseedwithdefault"}}],[0,"seq","rand","Functions for randomly accessing and sampling sequences.",null,null],[5,"sample_iter","rand::seq","Randomly sample `amount` elements from a finite iterator.",null,{"i":[{"n":"r"},{"n":"i"},{"n":"usize"}],"o":{"g":["vec","vec"],"n":"result"}}],[5,"sample_slice","","Randomly sample exactly `amount` values from `slice`.",null,null],[5,"sample_slice_ref","","Randomly sample exactly `amount` references from `slice`.",null,null],[5,"sample_indices","","Randomly sample exactly `amount` indices from `0..length`.",null,{"i":[{"n":"r"},{"n":"usize"},{"n":"usize"}],"o":{"g":["usize"],"n":"vec"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[11,"rand","rand","",0,{"i":[{"n":"r"}],"o":{"g":["f64"],"n":"open01"}}],[11,"rand","","",1,{"i":[{"n":"r"}],"o":{"g":["f64"],"n":"closed01"}}],[11,"rand","","",0,{"i":[{"n":"r"}],"o":{"g":["f32"],"n":"open01"}}],[11,"rand","","",1,{"i":[{"n":"r"}],"o":{"g":["f32"],"n":"closed01"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"chacharng"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",25,{"o":{"n":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",25,{"i":[{"n":"self"},{"n":"u64"},{"n":"u64"}]}],[11,"next_u32","","",25,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"reseed","","",25,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",25,null],[11,"rand","","",25,{"i":[{"n":"r"}],"o":{"n":"chacharng"}}],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",26,{"o":{"n":"isaacrng"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"isaacrng"}}],[11,"next_u32","","",26,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"reseed","","",26,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",26,null],[11,"rand","","",26,{"i":[{"n":"r"}],"o":{"n":"isaacrng"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",27,{"o":{"n":"isaac64rng"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"isaac64rng"}}],[11,"next_u32","","",27,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",27,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"reseed","","",27,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",27,null],[11,"rand","","",27,{"i":[{"n":"r"}],"o":{"n":"isaac64rng"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"xorshiftrng"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",28,{"o":{"n":"xorshiftrng"}}],[11,"next_u32","","",28,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",28,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",28,null],[11,"rand","","",28,{"i":[{"n":"r"}],"o":{"n":"xorshiftrng"}}],[8,"Rand","","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",29,{"i":[{"n":"r"}],"o":{"n":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",30,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","Return the next random u64.",30,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",30,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",30,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",30,null],[11,"gen","","Return a random value of a `Rand` type.",30,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",30,{"i":[{"n":"self"}],"o":{"n":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",30,{"i":[{"n":"self"},{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",30,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",30,{"i":[{"n":"self"}],"o":{"n":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",30,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",30,null],[11,"shuffle","","Shuffle a mutable slice in place.",30,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",31,{"i":[{"n":"self"},{"n":"seed"}]}],[10,"from_seed","","Create a new RNG with the given seed.",31,{"i":[{"n":"seed"}],"o":{"n":"self"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",32,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",33,{"i":[{"n":"self"}],"o":{"g":["char"],"n":"option"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"stdrng"}}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"o":{"g":["stdrng"],"n":"result"}}],[11,"next_u32","","",34,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",34,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"threadrng"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next_u32","","",35,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",35,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",35,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[4,"TimerError"],[3,"JitterRng"],[3,"OsRng"],[3,"ReadRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"ChaChaRng"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"XorShiftRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["read_color"] = {"doc":"A simple library for reading hex colors.","items":[[5,"char_to_hex","read_color","Converts a character into a u8 value.",null,{"i":[{"n":"char"}],"o":{"g":["u8"],"n":"option"}}],[5,"hex","","Reads a hex value from an iterator of characters.",null,{"i":[{"n":"chars"}],"o":{"g":["u8"],"n":"option"}}],[5,"hex_pair","","Reads a pair of hex values, joining them in value range 0-255.",null,{"i":[{"n":"chars"}],"o":{"g":["u8"],"n":"option"}}],[5,"rgb","","Reads RGB colors from iterator of characters.",null,{"i":[{"n":"chars"}],"o":{"n":"option"}}],[5,"rgba","","Reads RGBA colors from iterator of characters.",null,{"i":[{"n":"chars"}],"o":{"n":"option"}}],[5,"rgb_maybe_a","","Reads RGB with optional alpha from iterator of characters.",null,{"i":[{"n":"chars"}],"o":{"n":"option"}}]],"paths":[]};
searchIndex["remove_dir_all"] = {"doc":"","items":[[5,"remove_dir_all","remove_dir_all","Removes a directory at this path, after removing all its contents. Use carefully!",null,{"i":[{"n":"p"}],"o":{"g":["error"],"n":"result"}}]],"paths":[]};
searchIndex["rustc_demangle"] = {"doc":"Demangle Rust compiler symbol names.","items":[[3,"Demangle","rustc_demangle","Representation of a demangled symbol name.",null,null],[3,"TryDemangleError","","Error returned from the `try_demangle` function below when demangling fails.",null,null],[5,"demangle","","De-mangles a Rust symbol into a more readable version",null,{"i":[{"n":"str"}],"o":{"n":"demangle"}}],[5,"try_demangle","","The same as `demangle`, except return an `Err` if the string does not appear to be a Rust symbol, rather than \"demangling\" the given string as a no-op.",null,{"i":[{"n":"str"}],"o":{"g":["demangle","trydemangleerror"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"trydemangleerror"}}],[11,"as_str","","Returns the underlying string that's being demangled.",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"TryDemangleError"],[3,"Demangle"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified format configuration, returning the owned string.",4,{"i":[{"n":"self"},{"n":"config"}],"o":{"n":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into an owned vector of bytes, returning the vector.",5,{"i":[{"n":"self"}],"o":{"g":["vec","frombase64error"],"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"characterset"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"newline"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"config"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"frombase64error"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",7,{"i":[{"n":"self"}],"o":{"n":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",8,{"i":[{"n":"self"}],"o":{"g":["vec","fromhexerror"],"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"fromhexerror"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",6,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack. For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"i":[{"n":"errorcode"}],"o":{"n":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"i":[{"n":"str"}],"o":{"n":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"i":[{"n":"t"}],"o":{"g":["string"],"n":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"i":[{"n":"t"}],"o":{"n":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"i":[{"n":"t"}],"o":{"n":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,{"i":[{"n":"self"}],"o":{"n":"json"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"json"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",9,{"i":[{"n":"self"},{"n":"json"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",9,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"le","","",9,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"gt","","",9,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"ge","","",9,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"errorcode"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"errorcode"}],"o":{"n":"bool"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"parsererror"}],"o":{"n":"bool"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"decodererror"}],"o":{"n":"bool"}}],[11,"ne","","",12,{"i":[{"n":"self"},{"n":"decodererror"}],"o":{"n":"bool"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"encodererror"}],"o":{"n":"bool"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",12,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",12,{"i":[{"n":"self"}],"o":{"g":["stderror"],"n":"option"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",12,{"i":[{"n":"parsererror"}],"o":{"n":"decodererror"}}],[11,"description","","",11,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",11,{"i":[{"n":"error"}],"o":{"n":"parsererror"}}],[11,"description","","",13,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",13,{"i":[{"n":"error"}],"o":{"n":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable JSON to the specified writer",17,{"i":[{"n":"write"}],"o":{"n":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact JSON to the specified writer",17,{"i":[{"n":"write"}],"o":{"n":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",17,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"emit_nil","","",17,{"i":[{"n":"self"}],"o":{"n":"encoderesult"}}],[11,"emit_usize","","",17,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"encoderesult"}}],[11,"emit_u64","","",17,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"encoderesult"}}],[11,"emit_u32","","",17,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"encoderesult"}}],[11,"emit_u16","","",17,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"encoderesult"}}],[11,"emit_u8","","",17,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"encoderesult"}}],[11,"emit_isize","","",17,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"encoderesult"}}],[11,"emit_i64","","",17,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"encoderesult"}}],[11,"emit_i32","","",17,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"encoderesult"}}],[11,"emit_i16","","",17,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"encoderesult"}}],[11,"emit_i8","","",17,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"encoderesult"}}],[11,"emit_bool","","",17,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"encoderesult"}}],[11,"emit_f64","","",17,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"encoderesult"}}],[11,"emit_f32","","",17,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"encoderesult"}}],[11,"emit_char","","",17,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"encoderesult"}}],[11,"emit_str","","",17,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"encoderesult"}}],[11,"emit_enum","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_enum_variant","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_enum_variant_arg","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_enum_struct_variant","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_struct","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_struct_field","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_tuple","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_tuple_arg","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_tuple_struct","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_option","","",17,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_option_none","","",17,{"i":[{"n":"self"}],"o":{"n":"encoderesult"}}],[11,"emit_option_some","","",17,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_seq","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_seq_elt","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_map","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_map_elt_key","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_map_elt_val","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"encode","","",9,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",9,{"i":[{"n":"read"}],"o":{"g":["buildererror"],"n":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"i":[{"n":"str"}],"o":{"g":["buildererror"],"n":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",9,{"i":[{"n":"self"}],"o":{"n":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["json"],"n":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",9,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["json"],"n":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["object"],"n":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["object"],"n":"option"}}],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["object"],"n":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["array"],"n":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["array"],"n":"option"}}],[11,"into_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["array"],"n":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"index","","",9,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"json"}}],[11,"index","","",9,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"json"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"jsonevent"}],"o":{"n":"bool"}}],[11,"ne","","",14,{"i":[{"n":"self"},{"n":"jsonevent"}],"o":{"n":"bool"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"stackelement"}],"o":{"n":"bool"}}],[11,"ne","","",15,{"i":[{"n":"self"},{"n":"stackelement"}],"o":{"n":"bool"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"stackelement"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",18,{"o":{"n":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",18,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",18,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,{"i":[{"n":"self"}],"o":{"g":["stackelement"],"n":"option"}}],[11,"next","","",19,{"i":[{"n":"self"}],"o":{"g":["jsonevent"],"n":"option"}}],[11,"new","","Creates the JSON parser.",19,{"i":[{"n":"t"}],"o":{"n":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",19,{"i":[{"n":"self"}],"o":{"n":"stack"}}],[11,"new","","Create a JSON Builder.",20,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"build","","",20,{"i":[{"n":"self"}],"o":{"g":["json","buildererror"],"n":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"i":[{"n":"json"}],"o":{"n":"decoder"}}],[11,"read_nil","","",21,{"i":[{"n":"self"}],"o":{"n":"decoderesult"}}],[11,"read_usize","","",21,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"decoderesult"}}],[11,"read_u8","","",21,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"decoderesult"}}],[11,"read_u16","","",21,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"decoderesult"}}],[11,"read_u32","","",21,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"decoderesult"}}],[11,"read_u64","","",21,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"decoderesult"}}],[11,"read_isize","","",21,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"decoderesult"}}],[11,"read_i8","","",21,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"decoderesult"}}],[11,"read_i16","","",21,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"decoderesult"}}],[11,"read_i32","","",21,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"decoderesult"}}],[11,"read_i64","","",21,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"decoderesult"}}],[11,"read_f32","","",21,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"decoderesult"}}],[11,"read_f64","","",21,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"decoderesult"}}],[11,"read_bool","","",21,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"decoderesult"}}],[11,"read_char","","",21,{"i":[{"n":"self"}],"o":{"g":["char"],"n":"decoderesult"}}],[11,"read_str","","",21,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"decoderesult"}}],[11,"read_enum","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_struct","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_struct_field","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_tuple","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_tuple_arg","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_tuple_struct","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_tuple_struct_arg","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_option","","",21,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_seq","","",21,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_seq_elt","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_map","","",21,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_map_elt_key","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_map_elt_val","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"error","","",21,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"decodererror"}}],[11,"to_json","","",9,{"i":[{"n":"self"}],"o":{"n":"json"}}],[11,"fmt","","Encodes a json value into a string",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","Encodes a json value into a string",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","Encodes a json value into a string",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",24,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",9,{"i":[{"n":"str"}],"o":{"g":["json","parsererror"],"n":"result"}}],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",null,null],[16,"Error","","The error type for method results.",25,null],[10,"read_nil","","Read a nil value.",25,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"read_usize","","Read a usize value.",25,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"result"}}],[10,"read_u64","","Read a u64 value.",25,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"result"}}],[10,"read_u32","","Read a u32 value.",25,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[10,"read_u16","","Read a u16 value.",25,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"result"}}],[10,"read_u8","","Read a u8 value.",25,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"result"}}],[10,"read_isize","","Read a isize value.",25,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"result"}}],[10,"read_i64","","Read a i64 value.",25,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"result"}}],[10,"read_i32","","Read a i32 value.",25,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"result"}}],[10,"read_i16","","Read a i16 value.",25,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"result"}}],[10,"read_i8","","Read a i8 value.",25,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"result"}}],[10,"read_bool","","Read a bool value.",25,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[10,"read_f64","","Read a f64 value.",25,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"result"}}],[10,"read_f32","","Read a f32 value.",25,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"result"}}],[10,"read_char","","Read a char value.",25,{"i":[{"n":"self"}],"o":{"g":["char"],"n":"result"}}],[10,"read_str","","Read a string value.",25,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"result"}}],[10,"read_enum","","Read an enumeration value.",25,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_enum_variant","","Read an enumeration value.",25,null],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_enum_struct_variant","","Read an enumeration value.",25,null],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_struct","","Read an struct value.",25,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_struct_field","","Read a field for a struct value.",25,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_tuple","","Read a tuple value.",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_tuple_arg","","Read a data item for a tuple.",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_tuple_struct","","Read a tuple struct value.",25,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_option","","Read an optional value.",25,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_seq","","Read a sequence of values.",25,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_seq_elt","","Read an element in the sequence.",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_map","","Read an associative container (map).",25,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"error","","Record a decoding error.",25,null],[8,"Encoder","","Trait for writing out an encoding when serializing.",null,null],[16,"Error","","The error type for method results.",26,null],[10,"emit_nil","","Emit a nil value.",26,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"emit_usize","","Emit a usize value.",26,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"result"}}],[10,"emit_u64","","Emit a u64 value.",26,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[10,"emit_u32","","Emit a u32 value.",26,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[10,"emit_u16","","Emit a u16 value.",26,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[10,"emit_u8","","Emit a u8 value.",26,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[10,"emit_isize","","Emit a isize value.",26,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"result"}}],[10,"emit_i64","","Emit a i64 value.",26,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[10,"emit_i32","","Emit a i32 value.",26,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[10,"emit_i16","","Emit a i16 value.",26,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[10,"emit_i8","","Emit a i8 value.",26,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[10,"emit_bool","","Emit a bool value.",26,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"emit_f64","","Emit a f64 value.",26,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[10,"emit_f32","","Emit a f32 value.",26,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[10,"emit_char","","Emit a char value.",26,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"result"}}],[10,"emit_str","","Emit a string value.",26,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"emit_enum","","Emit an enumeration value.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_struct","","Emit a struct value.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_struct_field","","Emit a field item for a struct.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_tuple","","Emit a tuple value.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_option","","Emit an optional value.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_option_none","","Emit the `None` optional value.",26,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_seq","","Emit a sequence of values.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_seq_elt","","Emit an element in a sequence.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_map","","Emit an associative container (map).",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[8,"Decodable","","Trait for deserializing a type.",null,null],[10,"decode","","Deserialize a value using a `Decoder`.",27,{"i":[{"n":"d"}],"o":{"n":"result"}}],[8,"Encodable","","Trait for serializing a type.",null,null],[10,"encode","","Serialize a value using an `Encoder`.",28,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",null,null],[10,"read_to_vec","","Read a sequence into a vector.",29,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["vec"],"n":"result"}}],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",null,null],[10,"emit_from_vec","","Emit a vector as a sequence.",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["rusttype"] = {"doc":"RustType is a pure Rust alternative to libraries like FreeType.","items":[[3,"Curve","rusttype","A quadratic Bezier curve, starting at `p[0]`, ending at `p[2]`, with control point `p[1]`.",null,null],[12,"p","","",0,null],[3,"Line","","A straight line between two points, `p[0]` and `p[1]`",null,null],[12,"p","","",1,null],[3,"Point","","A point in 2-dimensional space, with each dimension of type `N`.",null,null],[12,"x","","",2,null],[12,"y","","",2,null],[3,"Rect","","A rectangle, with top-left corner at `min`, and bottom-right corner at `max`.",null,null],[12,"min","","",3,null],[12,"max","","",3,null],[3,"Vector","","A vector in 2-dimensional space, with each dimension of type `N`.",null,null],[12,"x","","",4,null],[12,"y","","",4,null],[3,"FontCollection","","A collection of fonts read straight from a font file's data. The data in the collection is not validated. This structure may or may not own the font data.",null,null],[3,"Font","","A single font. This may or may not own the font data.",null,null],[3,"Codepoint","","Represents a Unicode code point.",null,null],[12,"0","","",5,null],[3,"GlyphId","","Represents a glyph identifier for a particular font. This identifier will not necessarily correspond to the correct glyph in a font other than the one that it was obtained from.",null,null],[12,"0","","",6,null],[3,"Glyph","","A single glyph of a font. this may either be a thin wrapper referring to the font and the glyph id, or it may be a standalone glyph that owns the data needed by it.",null,null],[3,"SharedGlyphData","","",null,null],[12,"id","","",7,null],[12,"extents","","",7,null],[12,"scale_for_1_pixel","","",7,null],[12,"unit_h_metrics","","",7,null],[12,"shape","","",7,null],[3,"HMetrics","","The \"horizontal metrics\" of a glyph. This is useful for calculating the horizontal offset of a glyph from the previous one in a string when laying a string out horizontally.",null,null],[12,"advance_width","","The horizontal offset that the origin of the next glyph should be from the origin of this glyph.",8,null],[12,"left_side_bearing","","The horizontal offset between the origin of this glyph and the leftmost edge/point of the glyph.",8,null],[3,"VMetrics","","The \"vertical metrics\" of a font at a particular scale. This is useful for calculating the amount of vertical space to give a line of text, and for computing the vertical offset between successive lines.",null,null],[12,"ascent","","The highest point that any glyph in the font extends to above the baseline. Typically positive.",9,null],[12,"descent","","The lowest point that any glyph in the font extends to below the baseline. Typically negative.",9,null],[12,"line_gap","","The gap to leave between the descent of one line and the ascent of the next. This is of course only a guideline given by the font's designers.",9,null],[3,"ScaledGlyph","","A glyph augmented with scaling information. You can query such a glyph for information that depends on the scale of the glyph.",null,null],[3,"PositionedGlyph","","A glyph augmented with positioning and scaling information. You can query such a glyph for information that depends on the scale and position of the glyph.",null,null],[3,"Scale","","Defines the size of a rendered face of a font, in pixels, horizontally and vertically. A vertical scale of `y` pixels means that the distance betwen the ascent and descent lines (see `VMetrics`) of the face will be `y` pixels. If `x` and `y` are equal the scaling is uniform. Non-uniform scaling by a factor f in the horizontal direction is achieved by setting `x` equal to f times `y`.",null,null],[12,"x","","Horizontal scale, in pixels.",10,null],[12,"y","","Vertical scale, in pixels.",10,null],[3,"IntoFontsIter","","",null,null],[3,"GlyphIter","","",null,null],[3,"LayoutIter","","",null,null],[3,"Contour","","A closed loop consisting of a sequence of `Segment`s.",null,null],[12,"segments","","",11,null],[4,"SharedBytes","","`SharedBytes` handles the lifetime of font data used in RustType. The data is either a shared reference to externally owned data, or managed by reference counting. `SharedBytes` can be conveniently used with `From` and `Into`, and dereferences to the contained bytes.",null,null],[13,"ByRef","","",12,null],[13,"ByArc","","",12,null],[4,"Segment","","Part of a `Contour`, either a `Line` or a `Curve`.",null,null],[13,"Line","","",13,null],[13,"Curve","","",13,null],[4,"Error","","The type for errors returned by rusttype.",null,null],[13,"UnrecognizedFormat","","Font data presented to rusttype is not in a format that the library recognizes.",14,null],[13,"IllFormed","","Font data presented to rusttype was ill-formed (lacking necessary tables, for example).",14,null],[13,"CollectionIndexOutOfBounds","","The caller tried to access the `i`'th font from a `FontCollection`, but the collection doesn't contain that many fonts.",14,null],[13,"CollectionContainsMultipleFonts","","The caller tried to convert a `FontCollection` into a font via `into_font`, but the `FontCollection` contains more than one font.",14,null],[5,"point","","A convenience function for generating `Point`s.",null,{"i":[{"n":"n"},{"n":"n"}],"o":{"n":"point"}}],[5,"vector","","A convenience function for generating `Vector`s.",null,{"i":[{"n":"n"},{"n":"n"}],"o":{"n":"vector"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"point"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"point"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",2,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"bool"}}],[11,"le","","",2,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"bool"}}],[11,"gt","","",2,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"bool"}}],[11,"ge","","",2,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"bool"}}],[11,"cmp","","",2,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"ordering"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"bool"}}],[11,"hash","","",2,null],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"vector"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"vector"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",4,{"i":[{"n":"self"},{"n":"vector"}],"o":{"n":"bool"}}],[11,"le","","",4,{"i":[{"n":"self"},{"n":"vector"}],"o":{"n":"bool"}}],[11,"gt","","",4,{"i":[{"n":"self"},{"n":"vector"}],"o":{"n":"bool"}}],[11,"ge","","",4,{"i":[{"n":"self"},{"n":"vector"}],"o":{"n":"bool"}}],[11,"cmp","","",4,{"i":[{"n":"self"},{"n":"vector"}],"o":{"n":"ordering"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"vector"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"vector"}],"o":{"n":"bool"}}],[11,"hash","","",4,null],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"vector"}}],[11,"add","","",4,{"i":[{"n":"self"},{"n":"vector"}],"o":{"n":"vector"}}],[11,"sub","","",4,{"i":[{"n":"self"},{"n":"vector"}],"o":{"n":"vector"}}],[11,"mul","","",4,{"i":[{"n":"self"},{"n":"f32"}],"o":{"g":["f32"],"n":"vector"}}],[11,"mul","","",4,{"i":[{"n":"self"},{"n":"f64"}],"o":{"g":["f64"],"n":"vector"}}],[11,"div","","",4,{"i":[{"n":"self"},{"n":"f32"}],"o":{"g":["f32"],"n":"vector"}}],[11,"div","","",4,{"i":[{"n":"self"},{"n":"f64"}],"o":{"g":["f64"],"n":"vector"}}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"vector"}],"o":{"n":"point"}}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"vector"}],"o":{"n":"point"}}],[11,"add","","",4,{"i":[{"n":"self"},{"n":"point"}],"o":{"n":"point"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"line"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"line"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"line"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"line"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",1,{"i":[{"n":"self"},{"n":"line"}],"o":{"n":"bool"}}],[11,"le","","",1,{"i":[{"n":"self"},{"n":"line"}],"o":{"n":"bool"}}],[11,"gt","","",1,{"i":[{"n":"self"},{"n":"line"}],"o":{"n":"bool"}}],[11,"ge","","",1,{"i":[{"n":"self"},{"n":"line"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"curve"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"curve"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"curve"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"curve"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"curve"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"curve"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"curve"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"curve"}],"o":{"n":"bool"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"rect"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"hash","","",3,null],[11,"partial_cmp","","",3,{"i":[{"n":"self"},{"n":"rect"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",3,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"le","","",3,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"gt","","",3,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"ge","","",3,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"bool"}}],[11,"cmp","","",3,{"i":[{"n":"self"},{"n":"rect"}],"o":{"n":"ordering"}}],[11,"width","","",3,{"i":[{"n":"self"}],"o":{"n":"n"}}],[11,"height","","",3,{"i":[{"n":"self"}],"o":{"n":"n"}}],[0,"gpu_cache","","This module provides capabilities for managing a cache of rendered glyphs in GPU memory, with the goal of minimisng the size and frequency of glyph uploads to GPU memory from the CPU.",null,null],[3,"Cache","rusttype::gpu_cache","An implementation of a dynamic GPU glyph cache. See the module documentation for more information.",null,null],[3,"CacheBuilder","","Builder for a `Cache`.",null,null],[12,"width","","Along with `height` specifies the dimensions of the 2D texture that will hold the cache contents on the GPU.",15,null],[12,"height","","Along with `width` specifies the dimensions of the 2D texture that will hold the cache contents on the GPU.",15,null],[12,"scale_tolerance","","Specifies the tolerances (maximum allowed difference) for judging whether an existing glyph in the cache is close enough to the requested glyph in scale to be used in its place. Due to floating point inaccuracies that can affect user code it is not recommended to set these parameters too close to zero as effectively identical glyphs could end up duplicated in the cache.",15,null],[12,"position_tolerance","","Specifies the tolerances (maximum allowed difference) for judging whether an existing glyph in the cache is close enough to the requested glyph in subpixel offset to be used in its place. Due to floating point inaccuracies that can affect user code it is not recommended to set these parameters too close to zero as effectively identical glyphs could end up duplicated in the cache.",15,null],[12,"pad_glyphs","","Pack glyphs in texture with a padding of a single zero alpha pixel to avoid bleeding from interpolated shader texture lookups near edges.",15,null],[4,"CacheReadErr","","Returned from `Cache::rect_for`.",null,null],[13,"GlyphNotCached","","Indicates that the requested glyph is not present in the cache",16,null],[4,"CacheWriteErr","","Returned from `Cache::cache_queued`.",null,null],[13,"GlyphTooLarge","","At least one of the queued glyphs is too big to fit into the cache, even if all other glyphs are removed.",17,null],[13,"NoRoomForWholeQueue","","Not all of the requested glyphs can fit into the cache, even if the cache is completely cleared before the attempt.",17,null],[6,"TextureCoords","","Texture coordinates (floating point) of the quad for a glyph in the cache, as well as the pixel-space (integer) coordinates that this region should be drawn at.",null,null],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"cachebuilder"}}],[11,"default","","",15,{"o":{"n":"self"}}],[11,"build","","Constructs a new cache. Note that this is just the CPU side of the cache. The GPU texture is managed by the user.",15,{"i":[{"n":"self"}],"o":{"n":"cache"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"cachereaderr"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"cachereaderr"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",16,{"i":[{"n":"self"},{"n":"cachereaderr"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",16,{"i":[{"n":"self"},{"n":"cachereaderr"}],"o":{"n":"ordering"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",16,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"cachewriteerr"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",17,{"i":[{"n":"self"},{"n":"cachewriteerr"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",17,{"i":[{"n":"self"},{"n":"cachewriteerr"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",17,{"i":[{"n":"self"},{"n":"cachewriteerr"}],"o":{"n":"ordering"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",17,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"new","","Legacy `Cache` construction, use `CacheBuilder` for more options.",18,{"i":[{"n":"u32"},{"n":"u32"},{"n":"f32"},{"n":"f32"}],"o":{"n":"cache"}}],[11,"set_scale_tolerance","","Sets the scale tolerance for the cache. See the documentation for `CacheBuilder` for more information.",18,{"i":[{"n":"self"},{"n":"f32"}]}],[11,"scale_tolerance","","Returns the current scale tolerance for the cache.",18,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"set_position_tolerance","","Sets the subpixel position tolerance for the cache. See the documentation for `CacheBuilder` for more information.",18,{"i":[{"n":"self"},{"n":"f32"}]}],[11,"position_tolerance","","Returns the current subpixel position tolerance for the cache.",18,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"dimensions","","Returns the cache texture dimensions assumed by the cache. For proper operation this should match the dimensions of the used GPU texture.",18,null],[11,"queue_glyph","","Queue a glyph for caching by the next call to `cache_queued`. `font_id` is used to disambiguate glyphs from different fonts. The user should ensure that `font_id` is unique to the font the glyph is from.",18,{"i":[{"n":"self"},{"n":"usize"},{"n":"positionedglyph"}]}],[11,"clear","","Clears the cache. Does not affect the glyph queue.",18,{"i":[{"n":"self"}]}],[11,"clear_queue","","Clears the glyph queue.",18,{"i":[{"n":"self"}]}],[11,"cache_queued","","Caches the queued glyphs. If this is unsuccessful, the queue is untouched. Any glyphs cached by previous calls to this function may be removed from the cache to make room for the newly queued glyphs. Thus if you want to ensure that a glyph is in the cache, the most recently cached queue must have contained that glyph.",18,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["cachewriteerr"],"n":"result"}}],[11,"rect_for","","Retrieves the (floating point) texture coordinates of the quad for a glyph in the cache, as well as the pixel-space (integer) coordinates that this region should be drawn at. In the majority of cases these pixel-space coordinates should be identical to the bounding box of the input glyph. They only differ if the cache has returned a substitute glyph that is deemed close enough to the requested glyph as specified by the cache tolerance parameters.",18,{"i":[{"n":"self"},{"n":"usize"},{"n":"positionedglyph"}],"o":{"g":["option","cachereaderr"],"n":"result"}}],[8,"IntoGlyphId","rusttype","A trait for types that can be converted into a `GlyphId`, in the context of a specific font.",null,null],[10,"into_glyph_id","","Convert `self` into a `GlyphId`, consulting the index map of `font` if necessary.",19,{"i":[{"n":"self"},{"n":"font"}],"o":{"n":"glyphid"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"fontcollection"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"font"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"sharedbytes"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deref","","",12,null],[11,"from","","",12,null],[11,"from","","",12,{"i":[{"n":"arc"}],"o":{"n":"sharedbytes"}}],[11,"from","","",12,{"i":[{"n":"box"}],"o":{"n":"sharedbytes"}}],[11,"from","","",12,{"i":[{"g":["u8"],"n":"vec"}],"o":{"n":"sharedbytes"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"codepoint"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"codepoint"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"codepoint"}],"o":{"n":"bool"}}],[11,"hash","","",5,null],[11,"partial_cmp","","",5,{"i":[{"n":"self"},{"n":"codepoint"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",5,{"i":[{"n":"self"},{"n":"codepoint"}],"o":{"n":"bool"}}],[11,"le","","",5,{"i":[{"n":"self"},{"n":"codepoint"}],"o":{"n":"bool"}}],[11,"gt","","",5,{"i":[{"n":"self"},{"n":"codepoint"}],"o":{"n":"bool"}}],[11,"ge","","",5,{"i":[{"n":"self"},{"n":"codepoint"}],"o":{"n":"bool"}}],[11,"cmp","","",5,{"i":[{"n":"self"},{"n":"codepoint"}],"o":{"n":"ordering"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"glyphid"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"glyphid"}],"o":{"n":"bool"}}],[11,"ne","","",6,{"i":[{"n":"self"},{"n":"glyphid"}],"o":{"n":"bool"}}],[11,"hash","","",6,null],[11,"partial_cmp","","",6,{"i":[{"n":"self"},{"n":"glyphid"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",6,{"i":[{"n":"self"},{"n":"glyphid"}],"o":{"n":"bool"}}],[11,"le","","",6,{"i":[{"n":"self"},{"n":"glyphid"}],"o":{"n":"bool"}}],[11,"gt","","",6,{"i":[{"n":"self"},{"n":"glyphid"}],"o":{"n":"bool"}}],[11,"ge","","",6,{"i":[{"n":"self"},{"n":"glyphid"}],"o":{"n":"bool"}}],[11,"cmp","","",6,{"i":[{"n":"self"},{"n":"glyphid"}],"o":{"n":"ordering"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"glyph"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"hmetrics"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"hmetrics"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"hmetrics"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",8,{"i":[{"n":"self"},{"n":"hmetrics"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",8,{"i":[{"n":"self"},{"n":"hmetrics"}],"o":{"n":"bool"}}],[11,"le","","",8,{"i":[{"n":"self"},{"n":"hmetrics"}],"o":{"n":"bool"}}],[11,"gt","","",8,{"i":[{"n":"self"},{"n":"hmetrics"}],"o":{"n":"bool"}}],[11,"ge","","",8,{"i":[{"n":"self"},{"n":"hmetrics"}],"o":{"n":"bool"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"vmetrics"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"vmetrics"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"vmetrics"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",9,{"i":[{"n":"self"},{"n":"vmetrics"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",9,{"i":[{"n":"self"},{"n":"vmetrics"}],"o":{"n":"bool"}}],[11,"le","","",9,{"i":[{"n":"self"},{"n":"vmetrics"}],"o":{"n":"bool"}}],[11,"gt","","",9,{"i":[{"n":"self"},{"n":"vmetrics"}],"o":{"n":"bool"}}],[11,"ge","","",9,{"i":[{"n":"self"},{"n":"vmetrics"}],"o":{"n":"bool"}}],[11,"from","","",9,{"i":[{"n":"vmetrics"}],"o":{"n":"self"}}],[11,"mul","","",9,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"self"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"scaledglyph"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"positionedglyph"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"scale"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"scale"}],"o":{"n":"bool"}}],[11,"ne","","",10,{"i":[{"n":"self"},{"n":"scale"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",10,{"i":[{"n":"self"},{"n":"scale"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",10,{"i":[{"n":"self"},{"n":"scale"}],"o":{"n":"bool"}}],[11,"le","","",10,{"i":[{"n":"self"},{"n":"scale"}],"o":{"n":"bool"}}],[11,"gt","","",10,{"i":[{"n":"self"},{"n":"scale"}],"o":{"n":"bool"}}],[11,"ge","","",10,{"i":[{"n":"self"},{"n":"scale"}],"o":{"n":"bool"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"uniform","","Uniform scaling, equivalent to `Scale { x: s, y: s }`.",10,{"i":[{"n":"f32"}],"o":{"n":"scale"}}],[11,"into_glyph_id","","",5,{"i":[{"n":"self"},{"n":"font"}],"o":{"n":"glyphid"}}],[11,"into_glyph_id","","",6,{"i":[{"n":"self"},{"n":"font"}],"o":{"n":"glyphid"}}],[11,"from_bytes","","Constructs a font collection from an array of bytes, typically loaded from a font file, which may be a single font or a TrueType Collection holding a number of fonts. This array may be owned (e.g. `Vec<u8>`), or borrowed (`&[u8]`). As long as `From<T>` is implemented for `Bytes` for some type `T`, `T` can be used as input.",20,{"i":[{"n":"b"}],"o":{"g":["fontcollection","error"],"n":"result"}}],[11,"into_font","","If this `FontCollection` holds a single font, or a TrueType Collection containing only one font, return that as a `Font`. The `FontCollection` is consumed.",20,{"i":[{"n":"self"}],"o":{"g":["font","error"],"n":"result"}}],[11,"font_at","","Gets the font at index `i` in the font collection, if it exists and is valid. The produced font borrows the font data that is either borrowed or owned by this font collection.",20,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["font","error"],"n":"result"}}],[11,"into_fonts","","Converts `self` into an `Iterator` yielding each `Font` that exists within the collection.",20,{"i":[{"n":"self"}],"o":{"n":"intofontsiter"}}],[11,"next","","",25,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"from_bytes","","Constructs a font from an array of bytes, this is a shortcut for `FontCollection::from_bytes` for collections comprised of a single font.",21,{"i":[{"n":"b"}],"o":{"g":["font","error"],"n":"result"}}],[11,"v_metrics","","The \"vertical metrics\" for this font at a given scale. These metrics are shared by all of the glyphs in the font. See `VMetrics` for more detail.",21,{"i":[{"n":"self"},{"n":"scale"}],"o":{"n":"vmetrics"}}],[11,"v_metrics_unscaled","","Get the unscaled VMetrics for this font, shared by all glyphs. See `VMetrics` for more detail.",21,{"i":[{"n":"self"}],"o":{"n":"vmetrics"}}],[11,"units_per_em","","Returns the units per EM square of this font",21,{"i":[{"n":"self"}],"o":{"n":"u16"}}],[11,"glyph_count","","The number of glyphs present in this font. Glyph identifiers for this font will always be in the range `0..self.glyph_count()`",21,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"glyph","","Returns the corresponding glyph for a Unicode code point or a glyph id for this font.",21,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"glyph"}}],[11,"glyphs_for","","A convenience function.",21,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"glyphiter"}}],[11,"font_name_strings","","Returns an iterator over the names for this font.",21,{"i":[{"n":"self"}],"o":{"g":["sharedbytes"],"n":"fontnameiter"}}],[11,"layout","","A convenience function for laying out glyphs for a string horizontally. It does not take control characters like line breaks into account, as treatment of these is likely to depend on the application.",21,{"i":[{"n":"self"},{"n":"str"},{"n":"scale"},{"g":["f32"],"n":"point"}],"o":{"n":"layoutiter"}}],[11,"pair_kerning","","Returns additional kerning to apply as well as that given by HMetrics for a particular pair of glyphs.",21,{"i":[{"n":"self"},{"n":"scale"},{"n":"a"},{"n":"b"}],"o":{"n":"f32"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"glyphiter"}}],[11,"next","","",26,{"i":[{"n":"self"}],"o":{"g":["glyph"],"n":"option"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"layoutiter"}}],[11,"next","","",27,{"i":[{"n":"self"}],"o":{"g":["positionedglyph"],"n":"option"}}],[11,"font","","The font to which this glyph belongs. If the glyph is a standalone glyph that owns its resources, it no longer has a reference to the font which it was created from (using `standalone()`). In which case, `None` is returned.",22,{"i":[{"n":"self"}],"o":{"g":["font"],"n":"option"}}],[11,"id","","The glyph identifier for this glyph.",22,{"i":[{"n":"self"}],"o":{"n":"glyphid"}}],[11,"scaled","","Augments this glyph with scaling information, making methods that depend on the scale of the glyph available.",22,{"i":[{"n":"self"},{"n":"scale"}],"o":{"n":"scaledglyph"}}],[11,"standalone","","Turns a `Glyph<'a>` into a `Glyph<'static>`. This produces a glyph that owns its resources, extracted from the font. This glyph can outlive the font that it comes from.",22,{"i":[{"n":"self"}],"o":{"n":"glyph"}}],[11,"get_data","","Get the data from this glyph (such as width, extents, vertices, etc.). Only possible if the glyph is a shared glyph.",22,{"i":[{"n":"self"}],"o":{"g":["arc"],"n":"option"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"segment"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"contour"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"id","","The glyph identifier for this glyph.",23,{"i":[{"n":"self"}],"o":{"n":"glyphid"}}],[11,"font","","The font to which this glyph belongs. If the glyph is a standalone glyph that owns its resources, it no longer has a reference to the font which it was created from (using `standalone()`). In which case, `None` is returned.",23,{"i":[{"n":"self"}],"o":{"g":["font"],"n":"option"}}],[11,"into_unscaled","","A reference to this glyph without the scaling",23,{"i":[{"n":"self"}],"o":{"n":"glyph"}}],[11,"unscaled","","Removes the scaling from this glyph",23,{"i":[{"n":"self"}],"o":{"n":"glyph"}}],[11,"positioned","","Augments this glyph with positioning information, making methods that depend on the position of the glyph available.",23,{"i":[{"n":"self"},{"g":["f32"],"n":"point"}],"o":{"n":"positionedglyph"}}],[11,"scale","","",23,{"i":[{"n":"self"}],"o":{"n":"scale"}}],[11,"h_metrics","","Retrieves the \"horizontal metrics\" of this glyph. See `HMetrics` for more detail.",23,{"i":[{"n":"self"}],"o":{"n":"hmetrics"}}],[11,"shape","","Produces a list of the contours that make up the shape of this glyph. Each contour consists of a sequence of segments. Each segment is either a straight `Line` or a `Curve`.",23,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"option"}}],[11,"exact_bounding_box","","The bounding box of the shape of this glyph, not to be confused with `pixel_bounding_box`, the conservative pixel-boundary bounding box. The coordinates are relative to the glyph's origin.",23,{"i":[{"n":"self"}],"o":{"g":["rect"],"n":"option"}}],[11,"standalone","","Constructs a glyph that owns its data from this glyph. This is similar to `Glyph::standalone`. See that function for more details.",23,{"i":[{"n":"self"}],"o":{"n":"scaledglyph"}}],[11,"id","","The glyph identifier for this glyph.",24,{"i":[{"n":"self"}],"o":{"n":"glyphid"}}],[11,"font","","The font to which this glyph belongs. If the glyph is a standalone glyph that owns its resources, it no longer has a reference to the font which it was created from (using `standalone()`). In which case, `None` is returned.",24,{"i":[{"n":"self"}],"o":{"g":["font"],"n":"option"}}],[11,"unpositioned","","A reference to this glyph without positioning",24,{"i":[{"n":"self"}],"o":{"n":"scaledglyph"}}],[11,"into_unpositioned","","Removes the positioning from this glyph",24,{"i":[{"n":"self"}],"o":{"n":"scaledglyph"}}],[11,"pixel_bounding_box","","The conservative pixel-boundary bounding box for this glyph. This is the smallest rectangle aligned to pixel boundaries that encloses the shape of this glyph at this position.",24,{"i":[{"n":"self"}],"o":{"g":["rect"],"n":"option"}}],[11,"shape","","Similar to `ScaledGlyph::shape()`, but with the position of the glyph taken into account.",24,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"option"}}],[11,"scale","","",24,{"i":[{"n":"self"}],"o":{"n":"scale"}}],[11,"position","","",24,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"point"}}],[11,"draw","","Rasterises this glyph. For each pixel in the rect given by `pixel_bounding_box()`, `o` is called:",24,{"i":[{"n":"self"},{"n":"o"}]}],[11,"standalone","","Constructs a glyph that owns its data from this glyph. This is similar to `Glyph::standalone`. See that function for more details.",24,{"i":[{"n":"self"}],"o":{"n":"positionedglyph"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",14,{"i":[{"n":"self"}],"o":{"n":"str"}}]],"paths":[[3,"Curve"],[3,"Line"],[3,"Point"],[3,"Rect"],[3,"Vector"],[3,"Codepoint"],[3,"GlyphId"],[3,"SharedGlyphData"],[3,"HMetrics"],[3,"VMetrics"],[3,"Scale"],[3,"Contour"],[4,"SharedBytes"],[4,"Segment"],[4,"Error"],[3,"CacheBuilder"],[4,"CacheReadErr"],[4,"CacheWriteErr"],[3,"Cache"],[8,"IntoGlyphId"],[3,"FontCollection"],[3,"Font"],[3,"Glyph"],[3,"ScaledGlyph"],[3,"PositionedGlyph"],[3,"IntoFontsIter"],[3,"GlyphIter"],[3,"LayoutIter"]]};
searchIndex["serde"] = {"doc":"Serde","items":[[0,"de","serde","Generic data structure deserialization framework.",null,null],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",null,null],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",0,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",0,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",0,null],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",0,null],[13,"Char","","The input contained a `char` that was not expected.",0,null],[13,"Str","","The input contained a `&str` or `String` that was not expected.",0,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",0,null],[13,"Unit","","The input contained a unit `()` that was not expected.",0,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",0,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",0,null],[13,"Seq","","The input contained a sequence that was not expected.",0,null],[13,"Map","","The input contained a map that was not expected.",0,null],[13,"Enum","","The input contained an enum that was not expected.",0,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",0,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",0,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",0,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",0,null],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",0,null],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",null,null],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",null,null],[3,"UnitDeserializer","","A deserializer holding a `()`.",null,null],[3,"BoolDeserializer","","A deserializer holding a `bool`.",null,null],[3,"I8Deserializer","","A deserializer holding an `i8`.",null,null],[3,"I16Deserializer","","A deserializer holding an `i16`.",null,null],[3,"I32Deserializer","","A deserializer holding an `i32`.",null,null],[3,"I64Deserializer","","A deserializer holding an `i64`.",null,null],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",null,null],[3,"U8Deserializer","","A deserializer holding a `u8`.",null,null],[3,"U16Deserializer","","A deserializer holding a `u16`.",null,null],[3,"U64Deserializer","","A deserializer holding a `u64`.",null,null],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",null,null],[3,"F32Deserializer","","A deserializer holding an `f32`.",null,null],[3,"F64Deserializer","","A deserializer holding an `f64`.",null,null],[3,"CharDeserializer","","A deserializer holding a `char`.",null,null],[3,"I128Deserializer","","A deserializer holding an `i128`.",null,null],[3,"U128Deserializer","","A deserializer holding a `u128`.",null,null],[3,"U32Deserializer","","A deserializer holding a `u32`.",null,null],[3,"StrDeserializer","","A deserializer holding a `&str`.",null,null],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",null,null],[3,"StringDeserializer","","A deserializer holding a `String`.",null,null],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",null,null],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",null,null],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",null,null],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",null,null],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"custom","","",1,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"custom","","",1,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",2,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",2,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",2,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",2,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",2,null],[11,"deserialize_enum","","",2,null],[11,"deserialize_identifier","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",3,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",3,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",3,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",3,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",3,null],[11,"deserialize_enum","","",3,null],[11,"deserialize_identifier","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",4,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",4,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",4,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",4,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",4,null],[11,"deserialize_enum","","",4,null],[11,"deserialize_identifier","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",5,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",5,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",5,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",5,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",5,null],[11,"deserialize_enum","","",5,null],[11,"deserialize_identifier","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",6,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",6,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",6,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",6,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",6,null],[11,"deserialize_enum","","",6,null],[11,"deserialize_identifier","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",7,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",7,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",7,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",7,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",7,null],[11,"deserialize_enum","","",7,null],[11,"deserialize_identifier","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",8,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",8,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",8,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",8,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",8,null],[11,"deserialize_enum","","",8,null],[11,"deserialize_identifier","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",9,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",9,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",9,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",9,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",9,null],[11,"deserialize_enum","","",9,null],[11,"deserialize_identifier","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",10,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",10,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",10,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",10,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",10,null],[11,"deserialize_enum","","",10,null],[11,"deserialize_identifier","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",11,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",11,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",11,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",11,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",11,null],[11,"deserialize_enum","","",11,null],[11,"deserialize_identifier","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",12,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",12,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",12,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",12,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",12,null],[11,"deserialize_enum","","",12,null],[11,"deserialize_identifier","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",13,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",13,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",13,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",13,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",13,null],[11,"deserialize_enum","","",13,null],[11,"deserialize_identifier","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",14,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",14,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",14,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",14,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",14,null],[11,"deserialize_enum","","",14,null],[11,"deserialize_identifier","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",15,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",15,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",15,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",15,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",15,null],[11,"deserialize_enum","","",15,null],[11,"deserialize_identifier","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",16,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",16,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",16,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",16,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",16,null],[11,"deserialize_enum","","",16,null],[11,"deserialize_identifier","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",17,null],[11,"deserialize_enum","","",17,null],[11,"deserialize_identifier","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",18,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",18,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",18,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",18,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",18,null],[11,"deserialize_identifier","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",18,null],[11,"variant_seed","","",18,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_any","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",19,null],[11,"deserialize_bool","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",19,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",19,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",19,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",19,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",19,null],[11,"deserialize_identifier","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"variant_seed","","",19,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"new","","Create a new borrowed deserializer from the given string.",20,{"i":[{"n":"str"}],"o":{"n":"borrowedstrdeserializer"}}],[11,"deserialize_any","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",20,null],[11,"deserialize_bool","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",20,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",20,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",20,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",20,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",20,null],[11,"deserialize_identifier","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"variant_seed","","",20,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_any","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",21,null],[11,"deserialize_bool","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",21,null],[11,"deserialize_identifier","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"variant_seed","","",21,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_any","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",22,null],[11,"deserialize_bool","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",22,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",22,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",22,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",22,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",22,null],[11,"deserialize_identifier","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"variant_seed","","",22,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"new","","Create a new borrowed deserializer from the given byte slice.",23,null],[11,"deserialize_any","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",23,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",23,null],[11,"deserialize_identifier","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",23,null],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"seqdeserializer"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",24,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",24,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"deserialize_any","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",24,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",24,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",24,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",24,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",24,null],[11,"deserialize_enum","","",24,null],[11,"deserialize_identifier","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"next_element_seed","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["option"],"n":"result"}}],[11,"size_hint","","",24,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"seqaccessdeserializer"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",25,{"i":[{"n":"a"}],"o":{"n":"self"}}],[11,"deserialize_any","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",25,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",25,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",25,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",25,null],[11,"deserialize_enum","","",25,null],[11,"deserialize_identifier","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"new","","Construct a new `MapDeserializer<I, E>`.",26,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",26,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"deserialize_any","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",26,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",26,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",26,null],[11,"deserialize_enum","","",26,null],[11,"deserialize_identifier","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"next_key_seed","","",26,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["option"],"n":"result"}}],[11,"next_value_seed","","",26,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"next_entry_seed","","",26,{"i":[{"n":"self"},{"n":"tk"},{"n":"tv"}],"o":{"g":["option"],"n":"result"}}],[11,"size_hint","","",26,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"next_element_seed","","",26,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["option"],"n":"result"}}],[11,"size_hint","","",26,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"mapaccessdeserializer"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",27,{"i":[{"n":"a"}],"o":{"n":"self"}}],[11,"deserialize_any","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",27,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",27,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",27,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",27,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",27,null],[11,"deserialize_enum","","",27,null],[11,"deserialize_identifier","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"clone","serde::de","",28,{"i":[{"n":"self"}],"o":{"n":"ignoredany"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",28,{"o":{"n":"ignoredany"}}],[11,"expecting","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"visit_bool","","",28,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"visit_i64","","",28,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"visit_u64","","",28,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"visit_f64","","",28,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[11,"visit_str","","",28,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"visit_none","","",28,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"visit_some","","",28,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"result"}}],[11,"visit_newtype_struct","","",28,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"result"}}],[11,"visit_unit","","",28,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"visit_seq","","",28,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"result"}}],[11,"visit_map","","",28,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"result"}}],[11,"visit_bytes","","",28,null],[11,"deserialize","","",28,{"i":[{"n":"d"}],"o":{"g":["ignoredany"],"n":"result"}}],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",29,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",29,{"i":[{"n":"unexpected"},{"n":"expected"}],"o":{"n":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",29,{"i":[{"n":"unexpected"},{"n":"expected"}],"o":{"n":"self"}}],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",29,{"i":[{"n":"usize"},{"n":"expected"}],"o":{"n":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",29,null],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",29,null],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",29,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",29,{"i":[{"n":"str"}],"o":{"n":"self"}}],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",null,null],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,{"i":[{"n":"d"}],"o":{"n":"result"}}],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",null,null],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",null,null],[16,"Value","","The type produced by using this seed.",32,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",32,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",34,null],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"visit_bool","","The input contains a boolean.",34,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"visit_i8","","The input contains an `i8`.",34,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[11,"visit_i16","","The input contains an `i16`.",34,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[11,"visit_i32","","The input contains an `i32`.",34,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[11,"visit_i64","","The input contains an `i64`.",34,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"visit_i128","","The input contains a `i128`.",34,{"i":[{"n":"self"},{"n":"i128"}],"o":{"n":"result"}}],[11,"visit_u8","","The input contains a `u8`.",34,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[11,"visit_u16","","The input contains a `u16`.",34,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[11,"visit_u32","","The input contains a `u32`.",34,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"visit_u64","","The input contains a `u64`.",34,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"visit_u128","","The input contains a `u128`.",34,{"i":[{"n":"self"},{"n":"u128"}],"o":{"n":"result"}}],[11,"visit_f32","","The input contains an `f32`.",34,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[11,"visit_f64","","The input contains an `f64`.",34,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[11,"visit_char","","The input contains a `char`.",34,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"result"}}],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",34,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",34,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",34,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"result"}}],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",34,null],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",34,null],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",34,{"i":[{"n":"self"},{"g":["u8"],"n":"vec"}],"o":{"n":"result"}}],[11,"visit_none","","The input contains an optional that is absent.",34,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"visit_some","","The input contains an optional that is present.",34,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"result"}}],[11,"visit_unit","","The input contains a unit `()`.",34,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"visit_newtype_struct","","The input contains a newtype struct.",34,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"result"}}],[11,"visit_seq","","The input contains a sequence of elements.",34,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"result"}}],[11,"visit_map","","The input contains a key-value map.",34,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"result"}}],[11,"visit_enum","","The input contains an enum.",34,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"result"}}],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",35,null],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["option"],"n":"result"}}],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",35,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",36,null],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,{"i":[{"n":"self"},{"n":"k"}],"o":{"g":["option"],"n":"result"}}],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",36,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"g":["option"],"n":"result"}}],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",36,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",36,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",37,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",37,null],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",37,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"variant","","`variant` is called to identify which variant to deserialize.",37,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",38,null],[10,"unit_variant","","Called when deserializing a variant with no values.",38,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",38,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"newtype_variant","","Called when deserializing a variant with a single value.",38,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",38,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[10,"struct_variant","","Called when deserializing a struct-like variant.",38,null],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",39,null],[10,"into_deserializer","","Convert this value into a deserializer.",39,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"unexpected"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"unexpected"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"unexpected"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",null,null],[11,"serialize_element","","",40,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",40,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_element","","",40,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",40,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_field","","",40,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",40,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_field","","",40,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",40,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_key","","",40,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"serialize_value","","",40,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",40,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_field","","",40,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",40,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_field","","",40,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",40,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",null,null],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",41,{"i":[{"n":"t"}],"o":{"n":"self"}}],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",42,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,null],[16,"Error","","The error type when some error occurs during serialization.",43,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,null],[10,"serialize_bool","","Serialize a `bool` value.",43,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",43,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",43,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",43,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",43,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"serialize_i128","","Serialize an `i128` value.",43,{"i":[{"n":"self"},{"n":"i128"}],"o":{"n":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",43,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",43,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",43,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",43,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"serialize_u128","","Serialize a `u128` value.",43,{"i":[{"n":"self"},{"n":"u128"}],"o":{"n":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",43,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",43,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[10,"serialize_char","","Serialize a character.",43,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"result"}}],[10,"serialize_str","","Serialize a `&str`.",43,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,null],[10,"serialize_none","","Serialize a [`None`] value.",43,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",43,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,{"i":[{"n":"self"},{"g":["usize"],"n":"option"}],"o":{"n":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,{"i":[{"n":"self"},{"g":["usize"],"n":"option"}],"o":{"n":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",43,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"result"}}],[11,"collect_map","","Collect an iterator as a map.",43,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",44,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",44,null],[10,"serialize_element","","Serialize a sequence element.",44,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a sequence.",44,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",45,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",45,null],[10,"serialize_element","","Serialize a tuple element.",45,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a tuple.",45,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",46,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",46,null],[10,"serialize_field","","Serialize a tuple struct field.",46,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a tuple struct.",46,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",47,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",47,null],[10,"serialize_field","","Serialize a tuple variant field.",47,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a tuple variant.",47,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",48,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",48,null],[10,"serialize_key","","Serialize a map key.",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_value","","Serialize a map value.",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",48,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a map.",48,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",49,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",49,null],[10,"serialize_field","","Serialize a struct field.",49,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[11,"skip_field","","Indicate that a struct field has been skipped.",49,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a struct.",49,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",50,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",50,null],[10,"serialize_field","","Serialize a struct variant field.",50,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[11,"skip_field","","Indicate that a struct variant field has been skipped.",50,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a struct variant.",50,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"Deserialize","serde","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,{"i":[{"n":"d"}],"o":{"n":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",42,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,null],[16,"Error","","The error type when some error occurs during serialization.",43,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,null],[10,"serialize_bool","","Serialize a `bool` value.",43,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",43,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",43,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",43,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",43,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"serialize_i128","","Serialize an `i128` value.",43,{"i":[{"n":"self"},{"n":"i128"}],"o":{"n":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",43,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",43,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",43,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",43,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"serialize_u128","","Serialize a `u128` value.",43,{"i":[{"n":"self"},{"n":"u128"}],"o":{"n":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",43,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",43,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[10,"serialize_char","","Serialize a character.",43,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"result"}}],[10,"serialize_str","","Serialize a `&str`.",43,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,null],[10,"serialize_none","","Serialize a [`None`] value.",43,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",43,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,{"i":[{"n":"self"},{"g":["usize"],"n":"option"}],"o":{"n":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,{"i":[{"n":"self"},{"g":["usize"],"n":"option"}],"o":{"n":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",43,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"result"}}],[11,"collect_map","","Collect an iterator as a map.",43,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",null,null],[14,"serde_if_integer128","","Conditional compilation depending on whether Serde is built with support for 128-bit integers.",null,null]],"paths":[[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"]]};
searchIndex["serde_derive"] = {"doc":"This crate provides Serde's two derive macros.","items":[[5,"derive_serialize","serde_derive","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}],[5,"derive_deserialize","","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}]],"paths":[]};
searchIndex["shared_library"] = {"doc":"","items":[[4,"LoadingError","shared_library","Error that can happen while loading the shared library.",null,null],[13,"LibraryNotFound","","",0,null],[12,"descr","shared_library::LoadingError","",0,null],[13,"SymbolNotFound","shared_library","One of the symbols could not be found in the library.",0,null],[12,"symbol","shared_library::LoadingError","The symbol.",0,null],[0,"dynamic_library","shared_library","Dynamic library facilities.",null,null],[3,"DynamicLibrary","shared_library::dynamic_library","",null,null],[11,"drop","","",1,{"i":[{"n":"self"}]}],[11,"open","","Lazily open a dynamic library. When passed None it gives a handle to the calling process",1,{"i":[{"g":["path"],"n":"option"}],"o":{"g":["dynamiclibrary","string"],"n":"result"}}],[11,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",1,{"i":[{"n":"path"}]}],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an environment variable for this platforms dylib search path.",1,null],[11,"envvar","","Returns the environment variable for this process's dynamic library search path",1,{"o":{"n":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this process",1,{"o":{"g":["pathbuf"],"n":"vec"}}],[11,"symbol","","Access the value at the symbol of the dynamic library",1,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["string"],"n":"result"}}],[11,"fmt","shared_library","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"loadingerror"}}],[14,"shared_library","","",null,null]],"paths":[[4,"LoadingError"],[3,"DynamicLibrary"]]};
searchIndex["smallvec"] = {"doc":"Small vectors in various sizes. These store a certain number of elements inline, and fall back to the heap for larger allocations.  This can be a useful optimization for improving cache locality and reducing allocator traffic for workloads that fit within the inline buffer.","items":[[3,"Drain","smallvec","An iterator that removes the items from a `SmallVec` and yields them by value.",null,null],[3,"SmallVec","","A `Vec`-like container that can store a small number of elements inline.",null,null],[3,"IntoIter","","An iterator that consumes a `SmallVec` and yields its items by value.",null,null],[8,"VecLike","","Common operations implemented by both `Vec` and `SmallVec`.",null,null],[10,"push","","Append an element to the vector.",0,{"i":[{"n":"self"},{"n":"t"}]}],[8,"ExtendFromSlice","","Trait to be implemented by a collection that can be extended from a slice",null,null],[10,"extend_from_slice","","Extends a collection from a slice of its element type",1,null],[8,"Array","","Types that can be used as the backing store for a SmallVec",null,null],[16,"Item","","The type of the array's elements.",2,null],[10,"size","","Returns the number of items the array can hold.",2,{"o":{"n":"usize"}}],[10,"ptr","","Returns a pointer to the first element of the array.",2,null],[10,"ptr_mut","","Returns a mutable pointer to the first element of the array.",2,null],[11,"next","","",3,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"drop","","",3,{"i":[{"n":"self"}]}],[11,"new","","Construct an empty vector",4,{"o":{"n":"smallvec"}}],[11,"with_capacity","","Construct an empty vector with enough capacity pre-allocated to store at least `n` elements.",4,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"from_vec","","Construct a new `SmallVec` from a `Vec<A::Item>` without copying elements.",4,{"i":[{"n":"vec"}],"o":{"n":"smallvec"}}],[11,"from_buf","","Constructs a new `SmallVec` on the stack from an `A` without copying elements.",4,{"i":[{"n":"a"}],"o":{"n":"smallvec"}}],[11,"set_len","","Sets the length of a vector.",4,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"inline_size","","The maximum number of elements this vector can hold inline",4,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"len","","The number of elements stored in the vector",4,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns `true` if the vector is empty",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"capacity","","The number of items the vector can hold without reallocating",4,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"spilled","","Returns `true` if the data has spilled into a separate heap-allocated buffer.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"drain","","Empty the vector and return an iterator over its former contents.",4,{"i":[{"n":"self"}],"o":{"n":"drain"}}],[11,"push","","Append an item to the vector.",4,null],[11,"pop","","Remove an item from the end of the vector and return it, or None if empty.",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"grow","","Re-allocate to set the capacity to `new_cap`.",4,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"reserve","","Reserve capacity for `additional` more elements to be inserted.",4,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"reserve_exact","","Reserve the minumum capacity for `additional` more elements to be inserted.",4,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shrink_to_fit","","Shrink the capacity of the vector as much as possible.",4,{"i":[{"n":"self"}]}],[11,"truncate","","Shorten the vector, keeping the first `len` elements and dropping the rest.",4,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"as_slice","","Extracts a slice containing the entire vector.",4,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",4,null],[11,"swap_remove","","Remove the element at position `index`, replacing it with the last element.",4,null],[11,"clear","","Remove all elements from the vector.",4,{"i":[{"n":"self"}]}],[11,"remove","","Remove and return the element at position `index`, shifting all elements after it to the left.",4,null],[11,"insert","","Insert an element at position `index`, shifting all elements after it to the right.",4,null],[11,"insert_many","","Insert multiple elements at position `index`, shifting all following elements toward the back.",4,{"i":[{"n":"self"},{"n":"usize"},{"n":"i"}]}],[11,"into_vec","","Convert a SmallVec to a Vec, without reallocating if the SmallVec has already spilled onto the heap.",4,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"retain","","Retains only the elements specified by the predicate.",4,{"i":[{"n":"self"},{"n":"f"}]}],[11,"dedup","","Removes consecutive duplicate elements.",4,{"i":[{"n":"self"}]}],[11,"dedup_by","","Removes consecutive duplicate elements using the given equality relation.",4,{"i":[{"n":"self"},{"n":"f"}]}],[11,"dedup_by_key","","Removes consecutive elements that map to the same key.",4,{"i":[{"n":"self"},{"n":"f"}]}],[11,"from_slice","","Copy the elements from a slice into a new `SmallVec`.",4,null],[11,"insert_from_slice","","Copy elements from a slice into the vector at position `index`, shifting any following elements toward the back.",4,null],[11,"extend_from_slice","","Copy elements from a slice and append them to the vector.",4,null],[11,"resize","","Resizes the vector so that its length is equal to `len`.",4,null],[11,"from_elem","","Creates a `SmallVec` with `n` copies of `elem`. ``` use smallvec::SmallVec;",4,null],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"borrow","","",4,null],[11,"borrow_mut","","",4,null],[11,"write","","",4,null],[11,"write_all","","",4,null],[11,"flush","","",4,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"from","","",4,null],[11,"from","","",4,{"i":[{"n":"vec"}],"o":{"n":"smallvec"}}],[11,"from","","",4,{"i":[{"n":"a"}],"o":{"n":"smallvec"}}],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"extend_from_slice","","",4,null],[11,"push","","",4,null],[11,"from_iter","","",4,{"i":[{"n":"i"}],"o":{"n":"smallvec"}}],[11,"extend","","",4,{"i":[{"n":"self"},{"n":"i"}]}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",4,{"o":{"n":"smallvec"}}],[11,"drop","","",4,{"i":[{"n":"self"}]}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"smallvec"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"smallvec"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"smallvec"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"smallvec"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",4,{"i":[{"n":"self"},{"n":"smallvec"}],"o":{"n":"ordering"}}],[11,"hash","","",4,{"i":[{"n":"self"},{"n":"h"}]}],[11,"drop","","",5,{"i":[{"n":"self"}]}],[11,"next","","",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"into_iter","","",4,null],[14,"smallvec","","Creates a [`SmallVec`] containing the arguments.",null,null]],"paths":[[8,"VecLike"],[8,"ExtendFromSlice"],[8,"Array"],[3,"Drain"],[3,"SmallVec"],[3,"IntoIter"]]};
searchIndex["stb_truetype"] = {"doc":"","items":[[3,"FontInfo","stb_truetype","",null,null],[3,"Vertex","","",null,null],[12,"x","","",0,null],[12,"y","","",0,null],[12,"cx","","",0,null],[12,"cy","","",0,null],[3,"Rect","","",null,null],[12,"x0","","",1,null],[12,"y0","","",1,null],[12,"x1","","",1,null],[12,"y1","","",1,null],[3,"HMetrics","","",null,null],[12,"advance_width","","",2,null],[12,"left_side_bearing","","",2,null],[3,"VMetrics","","",null,null],[12,"ascent","","",3,null],[12,"descent","","",3,null],[12,"line_gap","","",3,null],[3,"FontNameIter","","",null,null],[4,"VertexType","","",null,null],[13,"MoveTo","","",4,null],[13,"LineTo","","",4,null],[13,"CurveTo","","",4,null],[4,"PlatformId","","",null,null],[13,"Unicode","","",5,null],[13,"Mac","","",5,null],[13,"Iso","","",5,null],[13,"Microsoft","","",5,null],[4,"UnicodeEid","","",null,null],[13,"Unicode_1_0","","",6,null],[13,"Unicode_1_1","","",6,null],[13,"Iso_10646","","",6,null],[13,"Unicode_2_0_Bmp","","",6,null],[13,"Unicode_2_0_Full","","",6,null],[4,"MicrosoftEid","","",null,null],[13,"Symbol","","",7,null],[13,"UnicodeBMP","","",7,null],[13,"Shiftjis","","",7,null],[13,"UnicodeFull","","",7,null],[4,"MacEid","","",null,null],[13,"Roman","","",8,null],[13,"Arabic","","",8,null],[13,"Japanese","","",8,null],[13,"Hebrew","","",8,null],[13,"ChineseTrad","","",8,null],[13,"Greek","","",8,null],[13,"Korean","","",8,null],[13,"Russian","","",8,null],[4,"MicrosoftLang","","",null,null],[13,"English","","",9,null],[13,"Italian","","",9,null],[13,"Chinese","","",9,null],[13,"Japanese","","",9,null],[13,"Dutch","","",9,null],[13,"Korean","","",9,null],[13,"French","","",9,null],[13,"Russian","","",9,null],[13,"German","","",9,null],[13,"Hebrew","","",9,null],[13,"Swedish","","",9,null],[4,"MacLang","","",null,null],[13,"English","","",10,null],[13,"Japanese","","",10,null],[13,"Arabic","","",10,null],[13,"Korean","","",10,null],[13,"Dutch","","",10,null],[13,"Russian","","",10,null],[13,"French","","",10,null],[13,"Spanish","","",10,null],[13,"German","","",10,null],[13,"Swedish","","",10,null],[13,"Hebrew","","",10,null],[13,"ChineseSimplified","","",10,null],[13,"Italian","","",10,null],[13,"ChineseTrad","","",10,null],[4,"PlatformEncodingLanguageId","","",null,null],[13,"Unicode","","",11,null],[13,"Mac","","",11,null],[13,"Iso","","",11,null],[13,"Microsoft","","",11,null],[5,"is_font","","",null,null],[5,"get_font_offset_for_index","","Each .ttf/.ttc file may have more than one font. Each font has a sequential index number starting from 0. Call this function to get the font offset for a given index; it returns None if the index is out of range. A regular .ttf file will only define one font and it always be at offset 0, so it will return Some(0) for index 0, and None for all other indices. You can just skip this step if you know it's that kind of font.",null,null],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"fontinfo"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"vertex"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"vertex_type","","",0,{"i":[{"n":"self"}],"o":{"n":"vertextype"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"vertextype"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"rect"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"hmetrics"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"vmetrics"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"platformid"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"platformid"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",5,{"i":[{"n":"self"},{"n":"platformid"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",5,{"i":[{"n":"self"},{"n":"platformid"}],"o":{"n":"ordering"}}],[11,"hash","","",5,null],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"unicodeeid"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"unicodeeid"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",6,{"i":[{"n":"self"},{"n":"unicodeeid"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",6,{"i":[{"n":"self"},{"n":"unicodeeid"}],"o":{"n":"ordering"}}],[11,"hash","","",6,null],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"microsofteid"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"microsofteid"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",7,{"i":[{"n":"self"},{"n":"microsofteid"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",7,{"i":[{"n":"self"},{"n":"microsofteid"}],"o":{"n":"ordering"}}],[11,"hash","","",7,null],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"maceid"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"maceid"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",8,{"i":[{"n":"self"},{"n":"maceid"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",8,{"i":[{"n":"self"},{"n":"maceid"}],"o":{"n":"ordering"}}],[11,"hash","","",8,null],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"microsoftlang"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"microsoftlang"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",9,{"i":[{"n":"self"},{"n":"microsoftlang"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",9,{"i":[{"n":"self"},{"n":"microsoftlang"}],"o":{"n":"ordering"}}],[11,"hash","","",9,null],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"maclang"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"maclang"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",10,{"i":[{"n":"self"},{"n":"maclang"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",10,{"i":[{"n":"self"},{"n":"maclang"}],"o":{"n":"ordering"}}],[11,"hash","","",10,null],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"platformencodinglanguageid"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"platformencodinglanguageid"}],"o":{"n":"bool"}}],[11,"ne","","",11,{"i":[{"n":"self"},{"n":"platformencodinglanguageid"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",11,{"i":[{"n":"self"},{"n":"platformencodinglanguageid"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",11,{"i":[{"n":"self"},{"n":"platformencodinglanguageid"}],"o":{"n":"bool"}}],[11,"le","","",11,{"i":[{"n":"self"},{"n":"platformencodinglanguageid"}],"o":{"n":"bool"}}],[11,"gt","","",11,{"i":[{"n":"self"},{"n":"platformencodinglanguageid"}],"o":{"n":"bool"}}],[11,"ge","","",11,{"i":[{"n":"self"},{"n":"platformencodinglanguageid"}],"o":{"n":"bool"}}],[11,"cmp","","",11,{"i":[{"n":"self"},{"n":"platformencodinglanguageid"}],"o":{"n":"ordering"}}],[11,"hash","","",11,null],[11,"new","","Given an offset into the file that defines a font, this function builds the necessary cached info for the rest of the system.",12,{"i":[{"n":"data"},{"n":"usize"}],"o":{"g":["fontinfo"],"n":"option"}}],[11,"get_num_glyphs","","",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"find_glyph_index","","If you're going to perform multiple operations on the same character and you want a speed-up, call this function with the character you're going to process, then use glyph-based functions instead of the codepoint-based functions.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"u32"}}],[11,"get_codepoint_shape","","Returns the series of vertices encoding the shape of the glyph for this codepoint.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["vec"],"n":"option"}}],[11,"get_glyph_box","","Like `get_codepoint_box`, but takes a glyph index. Use this if you have cached the glyph index for a codepoint.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["rect"],"n":"option"}}],[11,"get_codepoint_box","","Gets the bounding box of the visible part of the glyph, in unscaled coordinates",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["rect"],"n":"option"}}],[11,"is_glyph_empty","","returns true if nothing is drawn for this glyph",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bool"}}],[11,"get_glyph_shape","","Like `get_codepoint_shape`, but takes a glyph index instead. Use this if you have cached the glyph index for a codepoint.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["vec"],"n":"option"}}],[11,"get_glyph_h_metrics","","like `get_codepoint_h_metrics`, but takes a glyph index instead. Use this if you have cached the glyph index for a codepoint.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"hmetrics"}}],[11,"get_glyph_kern_advance","","like `get_codepoint_kern_advance`, but takes glyph indices instead. Use this if you have cached the glyph indices for the codepoints.",12,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"n":"i32"}}],[11,"get_codepoint_kern_advance","","an additional amount to add to the 'advance' value between cp1 and cp2",12,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"n":"i32"}}],[11,"get_codepoint_h_metrics","","`left_side_bearing` is the offset from the current horizontal position to the left edge of the character `advance_width` is the offset from the current horizontal position to the next horizontal position these are expressed in unscaled coordinates",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"hmetrics"}}],[11,"get_v_metrics","","`ascent` is the coordinate above the baseline the font extends; descent is the coordinate below the baseline the font extends (i.e. it is typically negative) `line_gap` is the spacing between one row's descent and the next row's ascent... so you should advance the vertical position by `ascent - descent + line_gap` these are expressed in unscaled coordinates, so you must multiply by the scale factor for a given size",12,{"i":[{"n":"self"}],"o":{"n":"vmetrics"}}],[11,"get_bounding_box","","the bounding box around all possible characters",12,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"rect"}}],[11,"scale_for_pixel_height","","computes a scale factor to produce a font whose \"height\" is 'pixels' tall. Height is measured as the distance from the highest ascender to the lowest descender; in other words, it's equivalent to calling GetFontVMetrics and computing:       scale = pixels / (ascent - descent) so if you prefer to measure height by the ascent only, use a similar calculation.",12,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"f32"}}],[11,"units_per_em","","Returns the units per EM square of this font.",12,{"i":[{"n":"self"}],"o":{"n":"u16"}}],[11,"scale_for_mapping_em_to_pixels","","computes a scale factor to produce a font whose EM size is mapped to `pixels` tall. This is probably what traditional APIs compute, but I'm not positive.",12,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"f32"}}],[11,"get_glyph_bitmap_box_subpixel","","like `get_codepoint_bitmap_box_subpixel`, but takes a glyph index instead of a codepoint.",12,{"i":[{"n":"self"},{"n":"u32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"g":["rect"],"n":"option"}}],[11,"get_glyph_bitmap_box","","like `get_codepoint_bitmap_box`, but takes a glyph index instead of a codepoint.",12,{"i":[{"n":"self"},{"n":"u32"},{"n":"f32"},{"n":"f32"}],"o":{"g":["rect"],"n":"option"}}],[11,"get_codepoint_bitmap_box_subpixel","","same as get_codepoint_bitmap_box, but you can specify a subpixel shift for the character",12,{"i":[{"n":"self"},{"n":"u32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"g":["rect"],"n":"option"}}],[11,"get_codepoint_bitmap_box","","get the bounding box of the bitmap centered around the glyph origin; so the bitmap width is x1-x0, height is y1-y0, and location to place the bitmap top left is (left_side_bearing*scale, y0). (Note that the bitmap uses y-increases-down, but the shape uses y-increases-up, so CodepointBitmapBox and CodepointBox are inverted.)",12,{"i":[{"n":"self"},{"n":"u32"},{"n":"f32"},{"n":"f32"}],"o":{"g":["rect"],"n":"option"}}],[11,"get_font_name_strings","","",12,{"i":[{"n":"self"}],"o":{"n":"fontnameiter"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"fontnameiter"}}],[11,"next","","",13,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",13,null],[11,"count","","",13,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"last","","",13,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"nth","","",13,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}]],"paths":[[3,"Vertex"],[3,"Rect"],[3,"HMetrics"],[3,"VMetrics"],[4,"VertexType"],[4,"PlatformId"],[4,"UnicodeEid"],[4,"MicrosoftEid"],[4,"MacEid"],[4,"MicrosoftLang"],[4,"MacLang"],[4,"PlatformEncodingLanguageId"],[3,"FontInfo"],[3,"FontNameIter"]]};
searchIndex["syn"] = {"doc":"Syn is a parsing library for parsing a stream of Rust tokens into a syntax tree of Rust source code.","items":[[3,"Ident","syn","A word of Rust code, which may be a keyword or legal variable name.",null,null],[3,"Attribute","","An attribute like `#[repr(transparent)]`.",null,null],[12,"pound_token","","",0,null],[12,"style","","",0,null],[12,"bracket_token","","",0,null],[12,"path","","",0,null],[12,"tts","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",null,null],[12,"ident","","",1,null],[12,"paren_token","","",1,null],[12,"nested","","",1,null],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",null,null],[12,"ident","","",2,null],[12,"eq_token","","",2,null],[12,"lit","","",2,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"attrs","","Attributes tagged on the field.",3,null],[12,"vis","","Visibility of the field.",3,null],[12,"ident","","Name of the field, if any.",3,null],[12,"colon_token","","",3,null],[12,"ty","","Type of the field.",3,null],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",null,null],[12,"brace_token","","",4,null],[12,"named","","",4,null],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",null,null],[12,"paren_token","","",5,null],[12,"unnamed","","",5,null],[3,"Variant","","An enum variant.",null,null],[12,"attrs","","Attributes tagged on the variant.",6,null],[12,"ident","","Name of the variant.",6,null],[12,"fields","","Content stored in the variant.",6,null],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,null],[3,"VisCrate","","A crate-level visibility: `crate`.",null,null],[12,"crate_token","","",7,null],[3,"VisPublic","","A public visibility level: `pub`.",null,null],[12,"pub_token","","",8,null],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",null,null],[12,"pub_token","","",9,null],[12,"paren_token","","",9,null],[12,"in_token","","",9,null],[12,"path","","",9,null],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",null,null],[3,"ExprAssign","","An assignment expression: `a = compute()`.",null,null],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",null,null],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",null,null],[12,"attrs","","",10,null],[12,"left","","",10,null],[12,"op","","",10,null],[12,"right","","",10,null],[3,"ExprBlock","","A blocked scope: `{ ... }`.",null,null],[3,"ExprBox","","A box expression: `box f`.",null,null],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",null,null],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",null,null],[12,"attrs","","",11,null],[12,"func","","",11,null],[12,"paren_token","","",11,null],[12,"args","","",11,null],[3,"ExprCast","","A cast expression: `foo as f64`.",null,null],[12,"attrs","","",12,null],[12,"expr","","",12,null],[12,"as_token","","",12,null],[12,"ty","","",12,null],[3,"ExprCatch","","A catch expression: `do catch { ... }`.",null,null],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",null,null],[3,"ExprContinue","","A `continue`, with an optional label.",null,null],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",null,null],[12,"attrs","","",13,null],[12,"base","","",13,null],[12,"dot_token","","",13,null],[12,"member","","",13,null],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",null,null],[3,"ExprGroup","","An expression contained within invisible delimiters.",null,null],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",null,null],[3,"ExprIfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",null,null],[3,"ExprInPlace","","A placement expression: `place <- value`.",null,null],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",null,null],[12,"attrs","","",14,null],[12,"expr","","",14,null],[12,"bracket_token","","",14,null],[12,"index","","",14,null],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",null,null],[12,"attrs","","",15,null],[12,"lit","","",15,null],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",null,null],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",null,null],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",null,null],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",null,null],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",null,null],[12,"attrs","","",16,null],[12,"paren_token","","",16,null],[12,"expr","","",16,null],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",null,null],[12,"attrs","","",17,null],[12,"qself","","",17,null],[12,"path","","",17,null],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",null,null],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",null,null],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",null,null],[3,"ExprReturn","","A `return`, with an optional value to be returned.",null,null],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",null,null],[3,"ExprTry","","A try-expression: `expr?`.",null,null],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",null,null],[3,"ExprType","","A type ascription expression: `foo: f64`.",null,null],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",null,null],[12,"attrs","","",18,null],[12,"op","","",18,null],[12,"expr","","",18,null],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",null,null],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",null,null],[12,"tts","","",19,null],[3,"ExprWhile","","A while loop: `while expr { ... }`.",null,null],[3,"ExprWhileLet","","A while-let loop: `while let pat = expr { ... }`.",null,null],[3,"ExprYield","","A yield expression: `yield expr`.",null,null],[3,"Index","","The index of an unnamed tuple struct field.",null,null],[12,"index","","",20,null],[12,"span","","",20,null],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",null,null],[12,"for_token","","",21,null],[12,"lt_token","","",21,null],[12,"lifetimes","","",21,null],[12,"gt_token","","",21,null],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",null,null],[12,"attrs","","",22,null],[12,"const_token","","",22,null],[12,"ident","","",22,null],[12,"colon_token","","",22,null],[12,"ty","","",22,null],[12,"eq_token","","",22,null],[12,"default","","",22,null],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lt_token","","",23,null],[12,"params","","",23,null],[12,"gt_token","","",23,null],[12,"where_clause","","",23,null],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",null,null],[12,"attrs","","",24,null],[12,"lifetime","","",24,null],[12,"colon_token","","",24,null],[12,"bounds","","",24,null],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",null,null],[12,"lhs_ty","","",25,null],[12,"eq_token","","",25,null],[12,"rhs_ty","","",25,null],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",null,null],[12,"lifetime","","",26,null],[12,"colon_token","","",26,null],[12,"bounds","","",26,null],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",null,null],[12,"lifetimes","","Any lifetimes from a `for` binding",27,null],[12,"bounded_ty","","The type being bounded",27,null],[12,"colon_token","","",27,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",27,null],[3,"TraitBound","","A trait used as a bound on a type parameter.",null,null],[12,"paren_token","","",28,null],[12,"modifier","","",28,null],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",28,null],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",28,null],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",null,null],[12,"attrs","","",29,null],[12,"ident","","",29,null],[12,"colon_token","","",29,null],[12,"bounds","","",29,null],[12,"eq_token","","",29,null],[12,"default","","",29,null],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",null,null],[12,"where_token","","",30,null],[12,"predicates","","",30,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",null,null],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Lifetime","","A Rust lifetime: `'a`.",null,null],[12,"apostrophe","","",31,null],[12,"ident","","",31,null],[3,"LitBool","","A boolean literal: `true` or `false`.",null,null],[12,"value","","",32,null],[12,"span","","",32,null],[3,"LitByte","","A byte literal: `b'f'`.",null,null],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",null,null],[3,"LitChar","","A character literal: `'a'`.",null,null],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",null,null],[3,"LitInt","","An integer literal: `1` or `1u16`.",null,null],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",null,null],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",null,null],[12,"token","","",33,null],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",null,null],[12,"path","","",34,null],[12,"bang_token","","",34,null],[12,"delimiter","","",34,null],[12,"tts","","",34,null],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",null,null],[12,"enum_token","","",35,null],[12,"brace_token","","",35,null],[12,"variants","","",35,null],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",null,null],[12,"struct_token","","",36,null],[12,"fields","","",36,null],[12,"semi_token","","",36,null],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",null,null],[12,"union_token","","",37,null],[12,"fields","","",37,null],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",null,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",38,null],[12,"vis","","Visibility of the struct or enum.",38,null],[12,"ident","","Name of the struct or enum.",38,null],[12,"generics","","Generics required to complete the definition.",38,null],[12,"data","","Data within the struct or enum.",38,null],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",null,null],[12,"extern_token","","",39,null],[12,"name","","",39,null],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",null,null],[12,"name","","",40,null],[12,"ty","","",40,null],[3,"TypeArray","","A fixed size array type: `[T; n]`.",null,null],[12,"bracket_token","","",41,null],[12,"elem","","",41,null],[12,"semi_token","","",41,null],[12,"len","","",41,null],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",null,null],[12,"unsafety","","",42,null],[12,"abi","","",42,null],[12,"fn_token","","",42,null],[12,"lifetimes","","",42,null],[12,"paren_token","","",42,null],[12,"inputs","","",42,null],[12,"variadic","","",42,null],[12,"output","","",42,null],[3,"TypeGroup","","A type contained within invisible delimiters.",null,null],[12,"group_token","","",43,null],[12,"elem","","",43,null],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",null,null],[12,"impl_token","","",44,null],[12,"bounds","","",44,null],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",null,null],[12,"underscore_token","","",45,null],[3,"TypeMacro","","A macro in the type position.",null,null],[12,"mac","","",46,null],[3,"TypeNever","","The never type: `!`.",null,null],[12,"bang_token","","",47,null],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",null,null],[12,"paren_token","","",48,null],[12,"elem","","",48,null],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",null,null],[12,"qself","","",49,null],[12,"path","","",49,null],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",null,null],[12,"star_token","","",50,null],[12,"const_token","","",50,null],[12,"mutability","","",50,null],[12,"elem","","",50,null],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",null,null],[12,"and_token","","",51,null],[12,"lifetime","","",51,null],[12,"mutability","","",51,null],[12,"elem","","",51,null],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",null,null],[12,"bracket_token","","",52,null],[12,"elem","","",52,null],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",null,null],[12,"dyn_token","","",53,null],[12,"bounds","","",53,null],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",null,null],[12,"paren_token","","",54,null],[12,"elems","","",54,null],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",null,null],[12,"tts","","",55,null],[3,"PathTokens","","A helper for printing a self-type qualified path as tokens.",null,null],[12,"0","","",56,null],[12,"1","","",56,null],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",null,null],[12,"colon2_token","","",57,null],[12,"lt_token","","",57,null],[12,"args","","",57,null],[12,"gt_token","","",57,null],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",null,null],[12,"ident","","",58,null],[12,"eq_token","","",58,null],[12,"ty","","",58,null],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",null,null],[12,"paren_token","","",59,null],[12,"inputs","","`(A, B)`",59,null],[12,"output","","`C`",59,null],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",null,null],[12,"leading_colon","","",60,null],[12,"segments","","",60,null],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",null,null],[12,"ident","","",61,null],[12,"arguments","","",61,null],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",null,null],[12,"lt_token","","",62,null],[12,"ty","","",62,null],[12,"position","","",62,null],[12,"as_token","","",62,null],[12,"gt_token","","",62,null],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",null,null],[13,"Outer","","",63,null],[13,"Inner","","",63,null],[4,"Meta","","Content of a compile-time structured attribute.",null,null],[13,"Word","","",64,null],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",64,null],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",64,null],[4,"NestedMeta","","Element of a compile-time attribute list.",null,null],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",65,null],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",65,null],[4,"Fields","","Data stored within an enum variant or struct.",null,null],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",66,null],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",66,null],[13,"Unit","","Unit struct or unit variant such as `None`.",66,null],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",null,null],[13,"Public","","A public visibility level: `pub`.",67,null],[13,"Crate","","A crate-level visibility: `crate`.",67,null],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",67,null],[13,"Inherited","","An inherited visibility, which usually means private.",67,null],[4,"Expr","","A Rust expression.",null,null],[13,"Box","","A box expression: `box f`.",68,null],[13,"InPlace","","A placement expression: `place <- value`.",68,null],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",68,null],[13,"Call","","A function call expression: `invoke(a, b)`.",68,null],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",68,null],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",68,null],[13,"Binary","","A binary operation: `a + b`, `a * b`.",68,null],[13,"Unary","","A unary operation: `!x`, `*x`.",68,null],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",68,null],[13,"Cast","","A cast expression: `foo as f64`.",68,null],[13,"Type","","A type ascription expression: `foo: f64`.",68,null],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",68,null],[13,"IfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",68,null],[13,"While","","A while loop: `while expr { ... }`.",68,null],[13,"WhileLet","","A while-let loop: `while let pat = expr { ... }`.",68,null],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",68,null],[13,"Loop","","Conditionless loop: `loop { ... }`.",68,null],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",68,null],[13,"Closure","","A closure expression: `|a, b| a + b`.",68,null],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",68,null],[13,"Block","","A blocked scope: `{ ... }`.",68,null],[13,"Assign","","An assignment expression: `a = compute()`.",68,null],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",68,null],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",68,null],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",68,null],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",68,null],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",68,null],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",68,null],[13,"Break","","A `break`, with an optional label to break and an optional expression.",68,null],[13,"Continue","","A `continue`, with an optional label.",68,null],[13,"Return","","A `return`, with an optional value to be returned.",68,null],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",68,null],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",68,null],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",68,null],[13,"Paren","","A parenthesized expression: `(a + b)`.",68,null],[13,"Group","","An expression contained within invisible delimiters.",68,null],[13,"Try","","A try-expression: `expr?`.",68,null],[13,"Catch","","A catch expression: `do catch { ... }`.",68,null],[13,"Yield","","A yield expression: `yield expr`.",68,null],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",68,null],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",null,null],[13,"Named","","A named field like `self.x`.",69,null],[13,"Unnamed","","An unnamed field like `self.0`.",69,null],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",null,null],[13,"Type","","A generic type parameter: `T: Into<String>`.",70,null],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",70,null],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",70,null],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",null,null],[13,"None","","",71,null],[13,"Maybe","","",71,null],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",null,null],[13,"Trait","","",72,null],[13,"Lifetime","","",72,null],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",null,null],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",73,null],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",73,null],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",73,null],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",null,null],[13,"F32","","",74,null],[13,"F64","","",74,null],[13,"None","","",74,null],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",null,null],[13,"I8","","",75,null],[13,"I16","","",75,null],[13,"I32","","",75,null],[13,"I64","","",75,null],[13,"I128","","",75,null],[13,"Isize","","",75,null],[13,"U8","","",75,null],[13,"U16","","",75,null],[13,"U32","","",75,null],[13,"U64","","",75,null],[13,"U128","","",75,null],[13,"Usize","","",75,null],[13,"None","","",75,null],[4,"Lit","","A Rust literal such as a string or integer or boolean.",null,null],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",76,null],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",76,null],[13,"Byte","","A byte literal: `b'f'`.",76,null],[13,"Char","","A character literal: `'a'`.",76,null],[13,"Int","","An integer literal: `1` or `1u16`.",76,null],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",76,null],[13,"Bool","","A boolean literal: `true` or `false`.",76,null],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",76,null],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",null,null],[13,"Cooked","","An ordinary string like `\"data\"`.",77,null],[13,"Raw","","A raw string like `r##\"data\"##`.",77,null],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",null,null],[13,"Paren","","",78,null],[13,"Brace","","",78,null],[13,"Bracket","","",78,null],[4,"Data","","The storage of a struct, enum or union data structure.",null,null],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",79,null],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",79,null],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",79,null],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",null,null],[13,"Add","","The `+` operator (addition)",80,null],[13,"Sub","","The `-` operator (subtraction)",80,null],[13,"Mul","","The `*` operator (multiplication)",80,null],[13,"Div","","The `/` operator (division)",80,null],[13,"Rem","","The `%` operator (modulus)",80,null],[13,"And","","The `&&` operator (logical and)",80,null],[13,"Or","","The `||` operator (logical or)",80,null],[13,"BitXor","","The `^` operator (bitwise xor)",80,null],[13,"BitAnd","","The `&` operator (bitwise and)",80,null],[13,"BitOr","","The `|` operator (bitwise or)",80,null],[13,"Shl","","The `<<` operator (shift left)",80,null],[13,"Shr","","The `>>` operator (shift right)",80,null],[13,"Eq","","The `==` operator (equality)",80,null],[13,"Lt","","The `<` operator (less than)",80,null],[13,"Le","","The `<=` operator (less than or equal to)",80,null],[13,"Ne","","The `!=` operator (not equal to)",80,null],[13,"Ge","","The `>=` operator (greater than or equal to)",80,null],[13,"Gt","","The `>` operator (greater than)",80,null],[13,"AddEq","","The `+=` operator",80,null],[13,"SubEq","","The `-=` operator",80,null],[13,"MulEq","","The `*=` operator",80,null],[13,"DivEq","","The `/=` operator",80,null],[13,"RemEq","","The `%=` operator",80,null],[13,"BitXorEq","","The `^=` operator",80,null],[13,"BitAndEq","","The `&=` operator",80,null],[13,"BitOrEq","","The `|=` operator",80,null],[13,"ShlEq","","The `<<=` operator",80,null],[13,"ShrEq","","The `>>=` operator",80,null],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",null,null],[13,"Deref","","The `*` operator for dereferencing",81,null],[13,"Not","","The `!` operator for logical inversion",81,null],[13,"Neg","","The `-` operator for negation",81,null],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",null,null],[13,"Named","","Argument given a name.",82,null],[13,"Wild","","Argument not given a name, matched with `_`.",82,null],[4,"ReturnType","","Return type of a function signature.",null,null],[13,"Default","","Return type is not specified.",83,null],[13,"Type","","A particular type is returned.",83,null],[4,"Type","","The possible types that a Rust value could have.",null,null],[13,"Slice","","A dynamically sized slice type: `[T]`.",84,null],[13,"Array","","A fixed size array type: `[T; n]`.",84,null],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",84,null],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",84,null],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",84,null],[13,"Never","","The never type: `!`.",84,null],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",84,null],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",84,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",84,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",84,null],[13,"Paren","","A parenthesized type equivalent to the inner type.",84,null],[13,"Group","","A type contained within invisible delimiters.",84,null],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",84,null],[13,"Macro","","A macro in the type position.",84,null],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",84,null],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",null,null],[13,"Lifetime","","A lifetime argument.",85,null],[13,"Type","","A type argument.",85,null],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",85,null],[13,"Const","","A const expression. Must be inside of a block.",85,null],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",null,null],[13,"None","","",86,null],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",86,null],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",86,null],[5,"parse","","Parse tokens of source code into the chosen syntax tree node.",null,{"i":[{"n":"tokenstream"}],"o":{"g":["parseerror"],"n":"result"}}],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",null,{"i":[{"n":"tokenstream"}],"o":{"g":["parseerror"],"n":"result"}}],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",null,{"i":[{"n":"str"}],"o":{"g":["parseerror"],"n":"result"}}],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",null,null],[3,"Underscore","syn::token","`_`",null,null],[12,"0","","",87,null],[3,"Apostrophe","","`'`",null,null],[12,"0","","",88,null],[3,"Add","","`+`",null,null],[12,"0","","",89,null],[3,"AddEq","","`+=`",null,null],[12,"0","","",90,null],[3,"And","","`&`",null,null],[12,"0","","",91,null],[3,"AndAnd","","`&&`",null,null],[12,"0","","",92,null],[3,"AndEq","","`&=`",null,null],[12,"0","","",93,null],[3,"At","","`@`",null,null],[12,"0","","",94,null],[3,"Bang","","`!`",null,null],[12,"0","","",95,null],[3,"Caret","","`^`",null,null],[12,"0","","",96,null],[3,"CaretEq","","`^=`",null,null],[12,"0","","",97,null],[3,"Colon","","`:`",null,null],[12,"0","","",98,null],[3,"Colon2","","`::`",null,null],[12,"0","","",99,null],[3,"Comma","","`,`",null,null],[12,"0","","",100,null],[3,"Div","","`/`",null,null],[12,"0","","",101,null],[3,"DivEq","","`/=`",null,null],[12,"0","","",102,null],[3,"Dollar","","`$`",null,null],[12,"0","","",103,null],[3,"Dot","","`.`",null,null],[12,"0","","",104,null],[3,"Dot2","","`..`",null,null],[12,"0","","",105,null],[3,"Dot3","","`...`",null,null],[12,"0","","",106,null],[3,"DotDotEq","","`..=`",null,null],[12,"0","","",107,null],[3,"Eq","","`=`",null,null],[12,"0","","",108,null],[3,"EqEq","","`==`",null,null],[12,"0","","",109,null],[3,"Ge","","`>=`",null,null],[12,"0","","",110,null],[3,"Gt","","`>`",null,null],[12,"0","","",111,null],[3,"Le","","`<=`",null,null],[12,"0","","",112,null],[3,"Lt","","`<`",null,null],[12,"0","","",113,null],[3,"MulEq","","`*=`",null,null],[12,"0","","",114,null],[3,"Ne","","`!=`",null,null],[12,"0","","",115,null],[3,"Or","","`|`",null,null],[12,"0","","",116,null],[3,"OrEq","","`|=`",null,null],[12,"0","","",117,null],[3,"OrOr","","`||`",null,null],[12,"0","","",118,null],[3,"Pound","","`#`",null,null],[12,"0","","",119,null],[3,"Question","","`?`",null,null],[12,"0","","",120,null],[3,"RArrow","","`->`",null,null],[12,"0","","",121,null],[3,"LArrow","","`<-`",null,null],[12,"0","","",122,null],[3,"Rem","","`%`",null,null],[12,"0","","",123,null],[3,"RemEq","","`%=`",null,null],[12,"0","","",124,null],[3,"FatArrow","","`=>`",null,null],[12,"0","","",125,null],[3,"Semi","","`;`",null,null],[12,"0","","",126,null],[3,"Shl","","`<<`",null,null],[12,"0","","",127,null],[3,"ShlEq","","`<<=`",null,null],[12,"0","","",128,null],[3,"Shr","","`>>`",null,null],[12,"0","","",129,null],[3,"ShrEq","","`>>=`",null,null],[12,"0","","",130,null],[3,"Star","","`*`",null,null],[12,"0","","",131,null],[3,"Sub","","`-`",null,null],[12,"0","","",132,null],[3,"SubEq","","`-=`",null,null],[12,"0","","",133,null],[3,"Brace","","`{...}`",null,null],[12,"0","","",134,null],[3,"Bracket","","`[...]`",null,null],[12,"0","","",135,null],[3,"Paren","","`(...)`",null,null],[12,"0","","",136,null],[3,"Group","","None-delimited group",null,null],[12,"0","","",137,null],[3,"As","","`as`",null,null],[12,"0","","",138,null],[3,"Auto","","`auto`",null,null],[12,"0","","",139,null],[3,"Box","","`box`",null,null],[12,"0","","",140,null],[3,"Break","","`break`",null,null],[12,"0","","",141,null],[3,"CapSelf","","`Self`",null,null],[12,"0","","",142,null],[3,"Catch","","`catch`",null,null],[12,"0","","",143,null],[3,"Const","","`const`",null,null],[12,"0","","",144,null],[3,"Continue","","`continue`",null,null],[12,"0","","",145,null],[3,"Crate","","`crate`",null,null],[12,"0","","",146,null],[3,"Default","","`default`",null,null],[12,"0","","",147,null],[3,"Do","","`do`",null,null],[12,"0","","",148,null],[3,"Dyn","","`dyn`",null,null],[12,"0","","",149,null],[3,"Else","","`else`",null,null],[12,"0","","",150,null],[3,"Enum","","`enum`",null,null],[12,"0","","",151,null],[3,"Extern","","`extern`",null,null],[12,"0","","",152,null],[3,"Fn","","`fn`",null,null],[12,"0","","",153,null],[3,"For","","`for`",null,null],[12,"0","","",154,null],[3,"If","","`if`",null,null],[12,"0","","",155,null],[3,"Impl","","`impl`",null,null],[12,"0","","",156,null],[3,"In","","`in`",null,null],[12,"0","","",157,null],[3,"Let","","`let`",null,null],[12,"0","","",158,null],[3,"Loop","","`loop`",null,null],[12,"0","","",159,null],[3,"Macro","","`macro`",null,null],[12,"0","","",160,null],[3,"Match","","`match`",null,null],[12,"0","","",161,null],[3,"Mod","","`mod`",null,null],[12,"0","","",162,null],[3,"Move","","`move`",null,null],[12,"0","","",163,null],[3,"Mut","","`mut`",null,null],[12,"0","","",164,null],[3,"Pub","","`pub`",null,null],[12,"0","","",165,null],[3,"Ref","","`ref`",null,null],[12,"0","","",166,null],[3,"Return","","`return`",null,null],[12,"0","","",167,null],[3,"Self_","","`self`",null,null],[12,"0","","",168,null],[3,"Static","","`static`",null,null],[12,"0","","",169,null],[3,"Struct","","`struct`",null,null],[12,"0","","",170,null],[3,"Super","","`super`",null,null],[12,"0","","",171,null],[3,"Trait","","`trait`",null,null],[12,"0","","",172,null],[3,"Type","","`type`",null,null],[12,"0","","",173,null],[3,"Union","","`union`",null,null],[12,"0","","",174,null],[3,"Unsafe","","`unsafe`",null,null],[12,"0","","",175,null],[3,"Use","","`use`",null,null],[12,"0","","",176,null],[3,"Where","","`where`",null,null],[12,"0","","",177,null],[3,"While","","`while`",null,null],[12,"0","","",178,null],[3,"Yield","","`yield`",null,null],[12,"0","","",179,null],[11,"clone","","",87,{"i":[{"n":"self"}],"o":{"n":"underscore"}}],[11,"new","","",87,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",87,{"o":{"n":"self"}}],[11,"from","","",87,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"to_tokens","","",87,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",87,{"i":[{"n":"cursor"}],"o":{"g":["underscore"],"n":"presult"}}],[11,"description","","",87,{"o":{"g":["str"],"n":"option"}}],[11,"clone","","",88,{"i":[{"n":"self"}],"o":{"n":"apostrophe"}}],[11,"new","","",88,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",88,{"o":{"n":"self"}}],[11,"from","","",88,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"to_tokens","","",88,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",88,{"i":[{"n":"cursor"}],"o":{"g":["apostrophe"],"n":"presult"}}],[11,"description","","",88,{"o":{"g":["str"],"n":"option"}}],[11,"clone","","",89,{"i":[{"n":"self"}],"o":{"n":"add"}}],[11,"new","","",89,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",89,{"o":{"n":"self"}}],[11,"from","","",89,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",90,{"i":[{"n":"self"}],"o":{"n":"addeq"}}],[11,"new","","",90,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",90,{"o":{"n":"self"}}],[11,"from","","",90,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",91,{"i":[{"n":"self"}],"o":{"n":"and"}}],[11,"new","","",91,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",91,{"o":{"n":"self"}}],[11,"from","","",91,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",92,{"i":[{"n":"self"}],"o":{"n":"andand"}}],[11,"new","","",92,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",92,{"o":{"n":"self"}}],[11,"from","","",92,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",93,{"i":[{"n":"self"}],"o":{"n":"andeq"}}],[11,"new","","",93,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",93,{"o":{"n":"self"}}],[11,"from","","",93,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",94,{"i":[{"n":"self"}],"o":{"n":"at"}}],[11,"new","","",94,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",94,{"o":{"n":"self"}}],[11,"from","","",94,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",95,{"i":[{"n":"self"}],"o":{"n":"bang"}}],[11,"new","","",95,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",95,{"o":{"n":"self"}}],[11,"from","","",95,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",96,{"i":[{"n":"self"}],"o":{"n":"caret"}}],[11,"new","","",96,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",96,{"o":{"n":"self"}}],[11,"from","","",96,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",97,{"i":[{"n":"self"}],"o":{"n":"careteq"}}],[11,"new","","",97,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",97,{"o":{"n":"self"}}],[11,"from","","",97,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",98,{"i":[{"n":"self"}],"o":{"n":"colon"}}],[11,"new","","",98,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",98,{"o":{"n":"self"}}],[11,"from","","",98,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",99,{"i":[{"n":"self"}],"o":{"n":"colon2"}}],[11,"new","","",99,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",99,{"o":{"n":"self"}}],[11,"from","","",99,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",100,{"i":[{"n":"self"}],"o":{"n":"comma"}}],[11,"new","","",100,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",100,{"o":{"n":"self"}}],[11,"from","","",100,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",101,{"i":[{"n":"self"}],"o":{"n":"div"}}],[11,"new","","",101,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",101,{"o":{"n":"self"}}],[11,"from","","",101,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",102,{"i":[{"n":"self"}],"o":{"n":"diveq"}}],[11,"new","","",102,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",102,{"o":{"n":"self"}}],[11,"from","","",102,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",103,{"i":[{"n":"self"}],"o":{"n":"dollar"}}],[11,"new","","",103,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",103,{"o":{"n":"self"}}],[11,"from","","",103,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",104,{"i":[{"n":"self"}],"o":{"n":"dot"}}],[11,"new","","",104,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",104,{"o":{"n":"self"}}],[11,"from","","",104,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",105,{"i":[{"n":"self"}],"o":{"n":"dot2"}}],[11,"new","","",105,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",105,{"o":{"n":"self"}}],[11,"from","","",105,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",106,{"i":[{"n":"self"}],"o":{"n":"dot3"}}],[11,"new","","",106,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",106,{"o":{"n":"self"}}],[11,"from","","",106,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",107,{"i":[{"n":"self"}],"o":{"n":"dotdoteq"}}],[11,"new","","",107,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",107,{"o":{"n":"self"}}],[11,"from","","",107,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",108,{"i":[{"n":"self"}],"o":{"n":"eq"}}],[11,"new","","",108,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",108,{"o":{"n":"self"}}],[11,"from","","",108,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",109,{"i":[{"n":"self"}],"o":{"n":"eqeq"}}],[11,"new","","",109,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",109,{"o":{"n":"self"}}],[11,"from","","",109,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",110,{"i":[{"n":"self"}],"o":{"n":"ge"}}],[11,"new","","",110,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",110,{"o":{"n":"self"}}],[11,"from","","",110,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",111,{"i":[{"n":"self"}],"o":{"n":"gt"}}],[11,"new","","",111,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",111,{"o":{"n":"self"}}],[11,"from","","",111,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",112,{"i":[{"n":"self"}],"o":{"n":"le"}}],[11,"new","","",112,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",112,{"o":{"n":"self"}}],[11,"from","","",112,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",113,{"i":[{"n":"self"}],"o":{"n":"lt"}}],[11,"new","","",113,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",113,{"o":{"n":"self"}}],[11,"from","","",113,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",114,{"i":[{"n":"self"}],"o":{"n":"muleq"}}],[11,"new","","",114,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",114,{"o":{"n":"self"}}],[11,"from","","",114,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",115,{"i":[{"n":"self"}],"o":{"n":"ne"}}],[11,"new","","",115,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",115,{"o":{"n":"self"}}],[11,"from","","",115,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",116,{"i":[{"n":"self"}],"o":{"n":"or"}}],[11,"new","","",116,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",116,{"o":{"n":"self"}}],[11,"from","","",116,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",117,{"i":[{"n":"self"}],"o":{"n":"oreq"}}],[11,"new","","",117,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",117,{"o":{"n":"self"}}],[11,"from","","",117,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",118,{"i":[{"n":"self"}],"o":{"n":"oror"}}],[11,"new","","",118,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",118,{"o":{"n":"self"}}],[11,"from","","",118,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",119,{"i":[{"n":"self"}],"o":{"n":"pound"}}],[11,"new","","",119,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",119,{"o":{"n":"self"}}],[11,"from","","",119,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",120,{"i":[{"n":"self"}],"o":{"n":"question"}}],[11,"new","","",120,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",120,{"o":{"n":"self"}}],[11,"from","","",120,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",121,{"i":[{"n":"self"}],"o":{"n":"rarrow"}}],[11,"new","","",121,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",121,{"o":{"n":"self"}}],[11,"from","","",121,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",122,{"i":[{"n":"self"}],"o":{"n":"larrow"}}],[11,"new","","",122,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",122,{"o":{"n":"self"}}],[11,"from","","",122,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",123,{"i":[{"n":"self"}],"o":{"n":"rem"}}],[11,"new","","",123,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",123,{"o":{"n":"self"}}],[11,"from","","",123,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",124,{"i":[{"n":"self"}],"o":{"n":"remeq"}}],[11,"new","","",124,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",124,{"o":{"n":"self"}}],[11,"from","","",124,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",125,{"i":[{"n":"self"}],"o":{"n":"fatarrow"}}],[11,"new","","",125,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",125,{"o":{"n":"self"}}],[11,"from","","",125,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",126,{"i":[{"n":"self"}],"o":{"n":"semi"}}],[11,"new","","",126,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",126,{"o":{"n":"self"}}],[11,"from","","",126,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",127,{"i":[{"n":"self"}],"o":{"n":"shl"}}],[11,"new","","",127,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",127,{"o":{"n":"self"}}],[11,"from","","",127,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",128,{"i":[{"n":"self"}],"o":{"n":"shleq"}}],[11,"new","","",128,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",128,{"o":{"n":"self"}}],[11,"from","","",128,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",129,{"i":[{"n":"self"}],"o":{"n":"shr"}}],[11,"new","","",129,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",129,{"o":{"n":"self"}}],[11,"from","","",129,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",130,{"i":[{"n":"self"}],"o":{"n":"shreq"}}],[11,"new","","",130,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",130,{"o":{"n":"self"}}],[11,"from","","",130,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",131,{"i":[{"n":"self"}],"o":{"n":"star"}}],[11,"new","","",131,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",131,{"o":{"n":"self"}}],[11,"from","","",131,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",132,{"i":[{"n":"self"}],"o":{"n":"sub"}}],[11,"new","","",132,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",132,{"o":{"n":"self"}}],[11,"from","","",132,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",133,{"i":[{"n":"self"}],"o":{"n":"subeq"}}],[11,"new","","",133,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",133,{"o":{"n":"self"}}],[11,"from","","",133,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"to_tokens","","",89,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",89,{"i":[{"n":"cursor"}],"o":{"g":["add"],"n":"presult"}}],[11,"description","","",89,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",90,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",90,{"i":[{"n":"cursor"}],"o":{"g":["addeq"],"n":"presult"}}],[11,"description","","",90,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",91,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",91,{"i":[{"n":"cursor"}],"o":{"g":["and"],"n":"presult"}}],[11,"description","","",91,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",92,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",92,{"i":[{"n":"cursor"}],"o":{"g":["andand"],"n":"presult"}}],[11,"description","","",92,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",93,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",93,{"i":[{"n":"cursor"}],"o":{"g":["andeq"],"n":"presult"}}],[11,"description","","",93,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",94,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",94,{"i":[{"n":"cursor"}],"o":{"g":["at"],"n":"presult"}}],[11,"description","","",94,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",95,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",95,{"i":[{"n":"cursor"}],"o":{"g":["bang"],"n":"presult"}}],[11,"description","","",95,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",96,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",96,{"i":[{"n":"cursor"}],"o":{"g":["caret"],"n":"presult"}}],[11,"description","","",96,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",97,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",97,{"i":[{"n":"cursor"}],"o":{"g":["careteq"],"n":"presult"}}],[11,"description","","",97,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",98,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",98,{"i":[{"n":"cursor"}],"o":{"g":["colon"],"n":"presult"}}],[11,"description","","",98,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",99,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",99,{"i":[{"n":"cursor"}],"o":{"g":["colon2"],"n":"presult"}}],[11,"description","","",99,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",100,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",100,{"i":[{"n":"cursor"}],"o":{"g":["comma"],"n":"presult"}}],[11,"description","","",100,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",101,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",101,{"i":[{"n":"cursor"}],"o":{"g":["div"],"n":"presult"}}],[11,"description","","",101,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",102,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",102,{"i":[{"n":"cursor"}],"o":{"g":["diveq"],"n":"presult"}}],[11,"description","","",102,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",103,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",103,{"i":[{"n":"cursor"}],"o":{"g":["dollar"],"n":"presult"}}],[11,"description","","",103,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",104,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",104,{"i":[{"n":"cursor"}],"o":{"g":["dot"],"n":"presult"}}],[11,"description","","",104,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",105,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",105,{"i":[{"n":"cursor"}],"o":{"g":["dot2"],"n":"presult"}}],[11,"description","","",105,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",106,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",106,{"i":[{"n":"cursor"}],"o":{"g":["dot3"],"n":"presult"}}],[11,"description","","",106,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",107,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",107,{"i":[{"n":"cursor"}],"o":{"g":["dotdoteq"],"n":"presult"}}],[11,"description","","",107,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",108,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",108,{"i":[{"n":"cursor"}],"o":{"g":["eq"],"n":"presult"}}],[11,"description","","",108,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",109,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",109,{"i":[{"n":"cursor"}],"o":{"g":["eqeq"],"n":"presult"}}],[11,"description","","",109,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",110,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",110,{"i":[{"n":"cursor"}],"o":{"g":["ge"],"n":"presult"}}],[11,"description","","",110,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",111,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",111,{"i":[{"n":"cursor"}],"o":{"g":["gt"],"n":"presult"}}],[11,"description","","",111,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",112,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",112,{"i":[{"n":"cursor"}],"o":{"g":["le"],"n":"presult"}}],[11,"description","","",112,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",113,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",113,{"i":[{"n":"cursor"}],"o":{"g":["lt"],"n":"presult"}}],[11,"description","","",113,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",114,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",114,{"i":[{"n":"cursor"}],"o":{"g":["muleq"],"n":"presult"}}],[11,"description","","",114,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",115,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",115,{"i":[{"n":"cursor"}],"o":{"g":["ne"],"n":"presult"}}],[11,"description","","",115,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",116,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",116,{"i":[{"n":"cursor"}],"o":{"g":["or"],"n":"presult"}}],[11,"description","","",116,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",117,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",117,{"i":[{"n":"cursor"}],"o":{"g":["oreq"],"n":"presult"}}],[11,"description","","",117,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",118,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",118,{"i":[{"n":"cursor"}],"o":{"g":["oror"],"n":"presult"}}],[11,"description","","",118,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",119,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",119,{"i":[{"n":"cursor"}],"o":{"g":["pound"],"n":"presult"}}],[11,"description","","",119,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",120,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",120,{"i":[{"n":"cursor"}],"o":{"g":["question"],"n":"presult"}}],[11,"description","","",120,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",121,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",121,{"i":[{"n":"cursor"}],"o":{"g":["rarrow"],"n":"presult"}}],[11,"description","","",121,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",122,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",122,{"i":[{"n":"cursor"}],"o":{"g":["larrow"],"n":"presult"}}],[11,"description","","",122,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",123,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",123,{"i":[{"n":"cursor"}],"o":{"g":["rem"],"n":"presult"}}],[11,"description","","",123,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",124,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",124,{"i":[{"n":"cursor"}],"o":{"g":["remeq"],"n":"presult"}}],[11,"description","","",124,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",125,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",125,{"i":[{"n":"cursor"}],"o":{"g":["fatarrow"],"n":"presult"}}],[11,"description","","",125,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",126,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",126,{"i":[{"n":"cursor"}],"o":{"g":["semi"],"n":"presult"}}],[11,"description","","",126,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",127,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",127,{"i":[{"n":"cursor"}],"o":{"g":["shl"],"n":"presult"}}],[11,"description","","",127,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",128,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",128,{"i":[{"n":"cursor"}],"o":{"g":["shleq"],"n":"presult"}}],[11,"description","","",128,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",129,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",129,{"i":[{"n":"cursor"}],"o":{"g":["shr"],"n":"presult"}}],[11,"description","","",129,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",130,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",130,{"i":[{"n":"cursor"}],"o":{"g":["shreq"],"n":"presult"}}],[11,"description","","",130,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",131,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",131,{"i":[{"n":"cursor"}],"o":{"g":["star"],"n":"presult"}}],[11,"description","","",131,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",132,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",132,{"i":[{"n":"cursor"}],"o":{"g":["sub"],"n":"presult"}}],[11,"description","","",132,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",133,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",133,{"i":[{"n":"cursor"}],"o":{"g":["subeq"],"n":"presult"}}],[11,"description","","",133,{"o":{"g":["str"],"n":"option"}}],[11,"clone","","",134,{"i":[{"n":"self"}],"o":{"n":"brace"}}],[11,"default","","",134,{"o":{"n":"self"}}],[11,"surround","","",134,{"i":[{"n":"self"},{"n":"tokenstream"},{"n":"f"}]}],[11,"parse","","",134,{"i":[{"n":"cursor"},{"n":"f"}],"o":{"n":"presult"}}],[11,"from","","",134,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",135,{"i":[{"n":"self"}],"o":{"n":"bracket"}}],[11,"default","","",135,{"o":{"n":"self"}}],[11,"surround","","",135,{"i":[{"n":"self"},{"n":"tokenstream"},{"n":"f"}]}],[11,"parse","","",135,{"i":[{"n":"cursor"},{"n":"f"}],"o":{"n":"presult"}}],[11,"from","","",135,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",136,{"i":[{"n":"self"}],"o":{"n":"paren"}}],[11,"default","","",136,{"o":{"n":"self"}}],[11,"surround","","",136,{"i":[{"n":"self"},{"n":"tokenstream"},{"n":"f"}]}],[11,"parse","","",136,{"i":[{"n":"cursor"},{"n":"f"}],"o":{"n":"presult"}}],[11,"from","","",136,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",137,{"i":[{"n":"self"}],"o":{"n":"group"}}],[11,"default","","",137,{"o":{"n":"self"}}],[11,"surround","","",137,{"i":[{"n":"self"},{"n":"tokenstream"},{"n":"f"}]}],[11,"parse","","",137,{"i":[{"n":"cursor"},{"n":"f"}],"o":{"n":"presult"}}],[11,"from","","",137,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",138,{"i":[{"n":"self"}],"o":{"n":"as"}}],[11,"default","","",138,{"o":{"n":"self"}}],[11,"to_tokens","","",138,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",138,{"i":[{"n":"cursor"}],"o":{"g":["as"],"n":"presult"}}],[11,"description","","",138,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",138,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",139,{"i":[{"n":"self"}],"o":{"n":"auto"}}],[11,"default","","",139,{"o":{"n":"self"}}],[11,"to_tokens","","",139,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",139,{"i":[{"n":"cursor"}],"o":{"g":["auto"],"n":"presult"}}],[11,"description","","",139,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",139,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",140,{"i":[{"n":"self"}],"o":{"n":"box"}}],[11,"default","","",140,{"o":{"n":"self"}}],[11,"to_tokens","","",140,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",140,{"i":[{"n":"cursor"}],"o":{"g":["box"],"n":"presult"}}],[11,"description","","",140,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",140,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",141,{"i":[{"n":"self"}],"o":{"n":"break"}}],[11,"default","","",141,{"o":{"n":"self"}}],[11,"to_tokens","","",141,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",141,{"i":[{"n":"cursor"}],"o":{"g":["break"],"n":"presult"}}],[11,"description","","",141,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",141,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",142,{"i":[{"n":"self"}],"o":{"n":"capself"}}],[11,"default","","",142,{"o":{"n":"self"}}],[11,"to_tokens","","",142,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",142,{"i":[{"n":"cursor"}],"o":{"g":["capself"],"n":"presult"}}],[11,"description","","",142,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",142,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",143,{"i":[{"n":"self"}],"o":{"n":"catch"}}],[11,"default","","",143,{"o":{"n":"self"}}],[11,"to_tokens","","",143,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",143,{"i":[{"n":"cursor"}],"o":{"g":["catch"],"n":"presult"}}],[11,"description","","",143,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",143,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",144,{"i":[{"n":"self"}],"o":{"n":"const"}}],[11,"default","","",144,{"o":{"n":"self"}}],[11,"to_tokens","","",144,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",144,{"i":[{"n":"cursor"}],"o":{"g":["const"],"n":"presult"}}],[11,"description","","",144,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",144,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",145,{"i":[{"n":"self"}],"o":{"n":"continue"}}],[11,"default","","",145,{"o":{"n":"self"}}],[11,"to_tokens","","",145,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",145,{"i":[{"n":"cursor"}],"o":{"g":["continue"],"n":"presult"}}],[11,"description","","",145,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",145,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",146,{"i":[{"n":"self"}],"o":{"n":"crate"}}],[11,"default","","",146,{"o":{"n":"self"}}],[11,"to_tokens","","",146,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",146,{"i":[{"n":"cursor"}],"o":{"g":["crate"],"n":"presult"}}],[11,"description","","",146,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",146,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",147,{"i":[{"n":"self"}],"o":{"n":"default"}}],[11,"default","","",147,{"o":{"n":"self"}}],[11,"to_tokens","","",147,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",147,{"i":[{"n":"cursor"}],"o":{"g":["default"],"n":"presult"}}],[11,"description","","",147,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",147,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",148,{"i":[{"n":"self"}],"o":{"n":"do"}}],[11,"default","","",148,{"o":{"n":"self"}}],[11,"to_tokens","","",148,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",148,{"i":[{"n":"cursor"}],"o":{"g":["do"],"n":"presult"}}],[11,"description","","",148,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",148,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",149,{"i":[{"n":"self"}],"o":{"n":"dyn"}}],[11,"default","","",149,{"o":{"n":"self"}}],[11,"to_tokens","","",149,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",149,{"i":[{"n":"cursor"}],"o":{"g":["dyn"],"n":"presult"}}],[11,"description","","",149,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",149,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",150,{"i":[{"n":"self"}],"o":{"n":"else"}}],[11,"default","","",150,{"o":{"n":"self"}}],[11,"to_tokens","","",150,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",150,{"i":[{"n":"cursor"}],"o":{"g":["else"],"n":"presult"}}],[11,"description","","",150,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",150,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",151,{"i":[{"n":"self"}],"o":{"n":"enum"}}],[11,"default","","",151,{"o":{"n":"self"}}],[11,"to_tokens","","",151,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",151,{"i":[{"n":"cursor"}],"o":{"g":["enum"],"n":"presult"}}],[11,"description","","",151,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",151,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",152,{"i":[{"n":"self"}],"o":{"n":"extern"}}],[11,"default","","",152,{"o":{"n":"self"}}],[11,"to_tokens","","",152,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",152,{"i":[{"n":"cursor"}],"o":{"g":["extern"],"n":"presult"}}],[11,"description","","",152,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",152,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",153,{"i":[{"n":"self"}],"o":{"n":"fn"}}],[11,"default","","",153,{"o":{"n":"self"}}],[11,"to_tokens","","",153,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",153,{"i":[{"n":"cursor"}],"o":{"g":["fn"],"n":"presult"}}],[11,"description","","",153,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",153,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",154,{"i":[{"n":"self"}],"o":{"n":"for"}}],[11,"default","","",154,{"o":{"n":"self"}}],[11,"to_tokens","","",154,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",154,{"i":[{"n":"cursor"}],"o":{"g":["for"],"n":"presult"}}],[11,"description","","",154,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",154,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",155,{"i":[{"n":"self"}],"o":{"n":"if"}}],[11,"default","","",155,{"o":{"n":"self"}}],[11,"to_tokens","","",155,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",155,{"i":[{"n":"cursor"}],"o":{"g":["if"],"n":"presult"}}],[11,"description","","",155,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",155,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",156,{"i":[{"n":"self"}],"o":{"n":"impl"}}],[11,"default","","",156,{"o":{"n":"self"}}],[11,"to_tokens","","",156,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",156,{"i":[{"n":"cursor"}],"o":{"g":["impl"],"n":"presult"}}],[11,"description","","",156,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",156,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",157,{"i":[{"n":"self"}],"o":{"n":"in"}}],[11,"default","","",157,{"o":{"n":"self"}}],[11,"to_tokens","","",157,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",157,{"i":[{"n":"cursor"}],"o":{"g":["in"],"n":"presult"}}],[11,"description","","",157,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",157,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",158,{"i":[{"n":"self"}],"o":{"n":"let"}}],[11,"default","","",158,{"o":{"n":"self"}}],[11,"to_tokens","","",158,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",158,{"i":[{"n":"cursor"}],"o":{"g":["let"],"n":"presult"}}],[11,"description","","",158,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",158,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",159,{"i":[{"n":"self"}],"o":{"n":"loop"}}],[11,"default","","",159,{"o":{"n":"self"}}],[11,"to_tokens","","",159,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",159,{"i":[{"n":"cursor"}],"o":{"g":["loop"],"n":"presult"}}],[11,"description","","",159,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",159,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",160,{"i":[{"n":"self"}],"o":{"n":"macro"}}],[11,"default","","",160,{"o":{"n":"self"}}],[11,"to_tokens","","",160,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",160,{"i":[{"n":"cursor"}],"o":{"g":["macro"],"n":"presult"}}],[11,"description","","",160,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",160,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",161,{"i":[{"n":"self"}],"o":{"n":"match"}}],[11,"default","","",161,{"o":{"n":"self"}}],[11,"to_tokens","","",161,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",161,{"i":[{"n":"cursor"}],"o":{"g":["match"],"n":"presult"}}],[11,"description","","",161,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",161,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",162,{"i":[{"n":"self"}],"o":{"n":"mod"}}],[11,"default","","",162,{"o":{"n":"self"}}],[11,"to_tokens","","",162,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",162,{"i":[{"n":"cursor"}],"o":{"g":["mod"],"n":"presult"}}],[11,"description","","",162,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",162,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",163,{"i":[{"n":"self"}],"o":{"n":"move"}}],[11,"default","","",163,{"o":{"n":"self"}}],[11,"to_tokens","","",163,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",163,{"i":[{"n":"cursor"}],"o":{"g":["move"],"n":"presult"}}],[11,"description","","",163,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",163,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",164,{"i":[{"n":"self"}],"o":{"n":"mut"}}],[11,"default","","",164,{"o":{"n":"self"}}],[11,"to_tokens","","",164,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",164,{"i":[{"n":"cursor"}],"o":{"g":["mut"],"n":"presult"}}],[11,"description","","",164,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",164,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",165,{"i":[{"n":"self"}],"o":{"n":"pub"}}],[11,"default","","",165,{"o":{"n":"self"}}],[11,"to_tokens","","",165,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",165,{"i":[{"n":"cursor"}],"o":{"g":["pub"],"n":"presult"}}],[11,"description","","",165,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",165,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",166,{"i":[{"n":"self"}],"o":{"n":"ref"}}],[11,"default","","",166,{"o":{"n":"self"}}],[11,"to_tokens","","",166,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",166,{"i":[{"n":"cursor"}],"o":{"g":["ref"],"n":"presult"}}],[11,"description","","",166,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",166,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",167,{"i":[{"n":"self"}],"o":{"n":"return"}}],[11,"default","","",167,{"o":{"n":"self"}}],[11,"to_tokens","","",167,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",167,{"i":[{"n":"cursor"}],"o":{"g":["return"],"n":"presult"}}],[11,"description","","",167,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",167,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",168,{"i":[{"n":"self"}],"o":{"n":"self_"}}],[11,"default","","",168,{"o":{"n":"self"}}],[11,"to_tokens","","",168,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",168,{"i":[{"n":"cursor"}],"o":{"g":["self_"],"n":"presult"}}],[11,"description","","",168,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",168,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",169,{"i":[{"n":"self"}],"o":{"n":"static"}}],[11,"default","","",169,{"o":{"n":"self"}}],[11,"to_tokens","","",169,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",169,{"i":[{"n":"cursor"}],"o":{"g":["static"],"n":"presult"}}],[11,"description","","",169,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",169,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",170,{"i":[{"n":"self"}],"o":{"n":"struct"}}],[11,"default","","",170,{"o":{"n":"self"}}],[11,"to_tokens","","",170,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",170,{"i":[{"n":"cursor"}],"o":{"g":["struct"],"n":"presult"}}],[11,"description","","",170,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",170,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",171,{"i":[{"n":"self"}],"o":{"n":"super"}}],[11,"default","","",171,{"o":{"n":"self"}}],[11,"to_tokens","","",171,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",171,{"i":[{"n":"cursor"}],"o":{"g":["super"],"n":"presult"}}],[11,"description","","",171,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",171,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",172,{"i":[{"n":"self"}],"o":{"n":"trait"}}],[11,"default","","",172,{"o":{"n":"self"}}],[11,"to_tokens","","",172,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",172,{"i":[{"n":"cursor"}],"o":{"g":["trait"],"n":"presult"}}],[11,"description","","",172,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",172,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",173,{"i":[{"n":"self"}],"o":{"n":"type"}}],[11,"default","","",173,{"o":{"n":"self"}}],[11,"to_tokens","","",173,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",173,{"i":[{"n":"cursor"}],"o":{"g":["type"],"n":"presult"}}],[11,"description","","",173,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",173,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",174,{"i":[{"n":"self"}],"o":{"n":"union"}}],[11,"default","","",174,{"o":{"n":"self"}}],[11,"to_tokens","","",174,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",174,{"i":[{"n":"cursor"}],"o":{"g":["union"],"n":"presult"}}],[11,"description","","",174,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",174,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",175,{"i":[{"n":"self"}],"o":{"n":"unsafe"}}],[11,"default","","",175,{"o":{"n":"self"}}],[11,"to_tokens","","",175,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",175,{"i":[{"n":"cursor"}],"o":{"g":["unsafe"],"n":"presult"}}],[11,"description","","",175,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",175,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",176,{"i":[{"n":"self"}],"o":{"n":"use"}}],[11,"default","","",176,{"o":{"n":"self"}}],[11,"to_tokens","","",176,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",176,{"i":[{"n":"cursor"}],"o":{"g":["use"],"n":"presult"}}],[11,"description","","",176,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",176,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",177,{"i":[{"n":"self"}],"o":{"n":"where"}}],[11,"default","","",177,{"o":{"n":"self"}}],[11,"to_tokens","","",177,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",177,{"i":[{"n":"cursor"}],"o":{"g":["where"],"n":"presult"}}],[11,"description","","",177,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",177,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",178,{"i":[{"n":"self"}],"o":{"n":"while"}}],[11,"default","","",178,{"o":{"n":"self"}}],[11,"to_tokens","","",178,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",178,{"i":[{"n":"cursor"}],"o":{"g":["while"],"n":"presult"}}],[11,"description","","",178,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",178,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",179,{"i":[{"n":"self"}],"o":{"n":"yield"}}],[11,"default","","",179,{"o":{"n":"self"}}],[11,"to_tokens","","",179,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",179,{"i":[{"n":"cursor"}],"o":{"g":["yield"],"n":"presult"}}],[11,"description","","",179,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",179,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"from","syn","",180,{"i":[{"n":"self_"}],"o":{"n":"ident"}}],[11,"from","","",180,{"i":[{"n":"capself"}],"o":{"n":"ident"}}],[11,"from","","",180,{"i":[{"n":"super"}],"o":{"n":"ident"}}],[11,"from","","",180,{"i":[{"n":"crate"}],"o":{"n":"ident"}}],[11,"parse_inner","","",0,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_outer","","",0,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"to_tokens","","",0,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",1,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",2,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"attribute"}}],[11,"interpret_meta","","Parses the tokens after the path as a `Meta` if possible.",0,{"i":[{"n":"self"}],"o":{"g":["meta"],"n":"option"}}],[11,"clone","","",63,{"i":[{"n":"self"}],"o":{"n":"attrstyle"}}],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"meta"}}],[11,"from","","",64,{"i":[{"n":"ident"}],"o":{"n":"meta"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"metalist"}}],[11,"from","","",64,{"i":[{"n":"metalist"}],"o":{"n":"meta"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"metanamevalue"}}],[11,"from","","",64,{"i":[{"n":"metanamevalue"}],"o":{"n":"meta"}}],[11,"to_tokens","","",64,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"name","","Returns the identifier that begins this structured meta item.",64,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"nestedmeta"}}],[11,"from","","",65,{"i":[{"n":"meta"}],"o":{"n":"nestedmeta"}}],[11,"from","","",65,{"i":[{"n":"lit"}],"o":{"n":"nestedmeta"}}],[11,"to_tokens","","",65,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",6,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",6,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",4,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",4,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",5,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",5,{"o":{"g":["str"],"n":"option"}}],[11,"parse_named","","",3,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_unnamed","","",3,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",67,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",67,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",6,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",4,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",5,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",3,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",8,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",7,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",9,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"variant"}}],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"fields"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"fieldsnamed"}}],[11,"from","","",66,{"i":[{"n":"fieldsnamed"}],"o":{"n":"fields"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"fieldsunnamed"}}],[11,"from","","",66,{"i":[{"n":"fieldsunnamed"}],"o":{"n":"fields"}}],[11,"to_tokens","","",66,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"iter","","Get an iterator over the [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",66,{"i":[{"n":"self"}],"o":{"g":["field"],"n":"iter"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"field"}}],[11,"clone","","",67,{"i":[{"n":"self"}],"o":{"n":"visibility"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"vispublic"}}],[11,"from","","",67,{"i":[{"n":"vispublic"}],"o":{"n":"visibility"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"viscrate"}}],[11,"from","","",67,{"i":[{"n":"viscrate"}],"o":{"n":"visibility"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"visrestricted"}}],[11,"from","","",67,{"i":[{"n":"visrestricted"}],"o":{"n":"visibility"}}],[11,"to_tokens","","",67,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",68,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",68,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",15,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",15,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",16,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",16,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",17,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",17,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",69,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",69,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",20,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",20,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",11,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",10,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",18,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",15,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",12,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",13,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",69,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",20,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",14,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",17,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",16,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",19,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"expr"}}],[11,"clone","","",181,{"i":[{"n":"self"}],"o":{"n":"exprbox"}}],[11,"from","","",68,{"i":[{"n":"exprbox"}],"o":{"n":"expr"}}],[11,"clone","","",182,{"i":[{"n":"self"}],"o":{"n":"exprinplace"}}],[11,"from","","",68,{"i":[{"n":"exprinplace"}],"o":{"n":"expr"}}],[11,"clone","","",183,{"i":[{"n":"self"}],"o":{"n":"exprarray"}}],[11,"from","","",68,{"i":[{"n":"exprarray"}],"o":{"n":"expr"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"exprcall"}}],[11,"from","","",68,{"i":[{"n":"exprcall"}],"o":{"n":"expr"}}],[11,"clone","","",184,{"i":[{"n":"self"}],"o":{"n":"exprmethodcall"}}],[11,"from","","",68,{"i":[{"n":"exprmethodcall"}],"o":{"n":"expr"}}],[11,"clone","","",185,{"i":[{"n":"self"}],"o":{"n":"exprtuple"}}],[11,"from","","",68,{"i":[{"n":"exprtuple"}],"o":{"n":"expr"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"exprbinary"}}],[11,"from","","",68,{"i":[{"n":"exprbinary"}],"o":{"n":"expr"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"exprunary"}}],[11,"from","","",68,{"i":[{"n":"exprunary"}],"o":{"n":"expr"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"exprlit"}}],[11,"from","","",68,{"i":[{"n":"exprlit"}],"o":{"n":"expr"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"exprcast"}}],[11,"from","","",68,{"i":[{"n":"exprcast"}],"o":{"n":"expr"}}],[11,"clone","","",186,{"i":[{"n":"self"}],"o":{"n":"exprtype"}}],[11,"from","","",68,{"i":[{"n":"exprtype"}],"o":{"n":"expr"}}],[11,"clone","","",187,{"i":[{"n":"self"}],"o":{"n":"exprif"}}],[11,"from","","",68,{"i":[{"n":"exprif"}],"o":{"n":"expr"}}],[11,"clone","","",188,{"i":[{"n":"self"}],"o":{"n":"expriflet"}}],[11,"from","","",68,{"i":[{"n":"expriflet"}],"o":{"n":"expr"}}],[11,"clone","","",189,{"i":[{"n":"self"}],"o":{"n":"exprwhile"}}],[11,"from","","",68,{"i":[{"n":"exprwhile"}],"o":{"n":"expr"}}],[11,"clone","","",190,{"i":[{"n":"self"}],"o":{"n":"exprwhilelet"}}],[11,"from","","",68,{"i":[{"n":"exprwhilelet"}],"o":{"n":"expr"}}],[11,"clone","","",191,{"i":[{"n":"self"}],"o":{"n":"exprforloop"}}],[11,"from","","",68,{"i":[{"n":"exprforloop"}],"o":{"n":"expr"}}],[11,"clone","","",192,{"i":[{"n":"self"}],"o":{"n":"exprloop"}}],[11,"from","","",68,{"i":[{"n":"exprloop"}],"o":{"n":"expr"}}],[11,"clone","","",193,{"i":[{"n":"self"}],"o":{"n":"exprmatch"}}],[11,"from","","",68,{"i":[{"n":"exprmatch"}],"o":{"n":"expr"}}],[11,"clone","","",194,{"i":[{"n":"self"}],"o":{"n":"exprclosure"}}],[11,"from","","",68,{"i":[{"n":"exprclosure"}],"o":{"n":"expr"}}],[11,"clone","","",195,{"i":[{"n":"self"}],"o":{"n":"exprunsafe"}}],[11,"from","","",68,{"i":[{"n":"exprunsafe"}],"o":{"n":"expr"}}],[11,"clone","","",196,{"i":[{"n":"self"}],"o":{"n":"exprblock"}}],[11,"from","","",68,{"i":[{"n":"exprblock"}],"o":{"n":"expr"}}],[11,"clone","","",197,{"i":[{"n":"self"}],"o":{"n":"exprassign"}}],[11,"from","","",68,{"i":[{"n":"exprassign"}],"o":{"n":"expr"}}],[11,"clone","","",198,{"i":[{"n":"self"}],"o":{"n":"exprassignop"}}],[11,"from","","",68,{"i":[{"n":"exprassignop"}],"o":{"n":"expr"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"exprfield"}}],[11,"from","","",68,{"i":[{"n":"exprfield"}],"o":{"n":"expr"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"exprindex"}}],[11,"from","","",68,{"i":[{"n":"exprindex"}],"o":{"n":"expr"}}],[11,"clone","","",199,{"i":[{"n":"self"}],"o":{"n":"exprrange"}}],[11,"from","","",68,{"i":[{"n":"exprrange"}],"o":{"n":"expr"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"exprpath"}}],[11,"from","","",68,{"i":[{"n":"exprpath"}],"o":{"n":"expr"}}],[11,"clone","","",200,{"i":[{"n":"self"}],"o":{"n":"exprreference"}}],[11,"from","","",68,{"i":[{"n":"exprreference"}],"o":{"n":"expr"}}],[11,"clone","","",201,{"i":[{"n":"self"}],"o":{"n":"exprbreak"}}],[11,"from","","",68,{"i":[{"n":"exprbreak"}],"o":{"n":"expr"}}],[11,"clone","","",202,{"i":[{"n":"self"}],"o":{"n":"exprcontinue"}}],[11,"from","","",68,{"i":[{"n":"exprcontinue"}],"o":{"n":"expr"}}],[11,"clone","","",203,{"i":[{"n":"self"}],"o":{"n":"exprreturn"}}],[11,"from","","",68,{"i":[{"n":"exprreturn"}],"o":{"n":"expr"}}],[11,"clone","","",204,{"i":[{"n":"self"}],"o":{"n":"exprmacro"}}],[11,"from","","",68,{"i":[{"n":"exprmacro"}],"o":{"n":"expr"}}],[11,"clone","","",205,{"i":[{"n":"self"}],"o":{"n":"exprstruct"}}],[11,"from","","",68,{"i":[{"n":"exprstruct"}],"o":{"n":"expr"}}],[11,"clone","","",206,{"i":[{"n":"self"}],"o":{"n":"exprrepeat"}}],[11,"from","","",68,{"i":[{"n":"exprrepeat"}],"o":{"n":"expr"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"exprparen"}}],[11,"from","","",68,{"i":[{"n":"exprparen"}],"o":{"n":"expr"}}],[11,"clone","","",207,{"i":[{"n":"self"}],"o":{"n":"exprgroup"}}],[11,"from","","",68,{"i":[{"n":"exprgroup"}],"o":{"n":"expr"}}],[11,"clone","","",208,{"i":[{"n":"self"}],"o":{"n":"exprtry"}}],[11,"from","","",68,{"i":[{"n":"exprtry"}],"o":{"n":"expr"}}],[11,"clone","","",209,{"i":[{"n":"self"}],"o":{"n":"exprcatch"}}],[11,"from","","",68,{"i":[{"n":"exprcatch"}],"o":{"n":"expr"}}],[11,"clone","","",210,{"i":[{"n":"self"}],"o":{"n":"expryield"}}],[11,"from","","",68,{"i":[{"n":"expryield"}],"o":{"n":"expr"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"exprverbatim"}}],[11,"from","","",68,{"i":[{"n":"exprverbatim"}],"o":{"n":"expr"}}],[11,"to_tokens","","",68,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",69,{"i":[{"n":"self"}],"o":{"n":"member"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"index"}}],[11,"from","","",20,{"i":[{"n":"usize"}],"o":{"n":"index"}}],[11,"parse","","",23,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",23,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",70,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",70,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",24,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",24,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",21,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",21,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",29,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",29,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",72,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",72,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",28,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",28,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",71,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",71,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",22,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",22,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",30,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",30,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",73,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",73,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",23,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",211,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",212,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",213,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",21,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",24,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",29,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",28,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",71,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",22,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",30,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",27,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",26,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",25,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"default","","",23,{"o":{"n":"generics"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"generics"}}],[11,"clone","","",70,{"i":[{"n":"self"}],"o":{"n":"genericparam"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"typeparam"}}],[11,"from","","",70,{"i":[{"n":"typeparam"}],"o":{"n":"genericparam"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"lifetimedef"}}],[11,"from","","",70,{"i":[{"n":"lifetimedef"}],"o":{"n":"genericparam"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"constparam"}}],[11,"from","","",70,{"i":[{"n":"constparam"}],"o":{"n":"genericparam"}}],[11,"to_tokens","","",70,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",23,{"i":[{"n":"self"}],"o":{"n":"typeparams"}}],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",23,{"i":[{"n":"self"}],"o":{"n":"typeparamsmut"}}],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",23,{"i":[{"n":"self"}],"o":{"n":"lifetimes"}}],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",23,{"i":[{"n":"self"}],"o":{"n":"lifetimesmut"}}],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",23,{"i":[{"n":"self"}],"o":{"n":"constparams"}}],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",23,{"i":[{"n":"self"}],"o":{"n":"constparamsmut"}}],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one present already.",23,{"i":[{"n":"self"}],"o":{"n":"whereclause"}}],[11,"clone","","",211,{"i":[{"n":"self"}],"o":{"n":"implgenerics"}}],[11,"clone","","",212,{"i":[{"n":"self"}],"o":{"n":"typegenerics"}}],[11,"clone","","",213,{"i":[{"n":"self"}],"o":{"n":"turbofish"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",23,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",212,{"i":[{"n":"self"}],"o":{"n":"turbofish"}}],[11,"default","","",21,{"o":{"n":"boundlifetimes"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"boundlifetimes"}}],[11,"new","","",24,{"i":[{"n":"lifetime"}],"o":{"n":"self"}}],[11,"from","","",29,{"i":[{"n":"ident"}],"o":{"n":"self"}}],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"typeparambound"}}],[11,"from","","",72,{"i":[{"n":"traitbound"}],"o":{"n":"typeparambound"}}],[11,"from","","",72,{"i":[{"n":"lifetime"}],"o":{"n":"typeparambound"}}],[11,"to_tokens","","",72,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"traitbound"}}],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"traitboundmodifier"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"whereclause"}}],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"wherepredicate"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"predicatetype"}}],[11,"from","","",73,{"i":[{"n":"predicatetype"}],"o":{"n":"wherepredicate"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"predicatelifetime"}}],[11,"from","","",73,{"i":[{"n":"predicatelifetime"}],"o":{"n":"wherepredicate"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"predicateeq"}}],[11,"from","","",73,{"i":[{"n":"predicateeq"}],"o":{"n":"wherepredicate"}}],[11,"to_tokens","","",73,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",31,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",31,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",31,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"lifetime"}}],[11,"new","","",31,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"self"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",31,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",31,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",31,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"n":"ordering"}}],[11,"hash","","",31,{"i":[{"n":"self"},{"n":"h"}]}],[11,"parse","","",76,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",76,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",214,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",214,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",215,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",215,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",216,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",216,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",217,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",217,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",218,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",218,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",219,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",219,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",32,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",32,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",214,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",215,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",216,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",217,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",218,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",219,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",32,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",33,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",76,{"i":[{"n":"literal"}],"o":{"n":"self"}}],[11,"clone","","",76,{"i":[{"n":"self"}],"o":{"n":"lit"}}],[11,"clone","","",214,{"i":[{"n":"self"}],"o":{"n":"litstr"}}],[11,"from","","",76,{"i":[{"n":"litstr"}],"o":{"n":"lit"}}],[11,"clone","","",215,{"i":[{"n":"self"}],"o":{"n":"litbytestr"}}],[11,"from","","",76,{"i":[{"n":"litbytestr"}],"o":{"n":"lit"}}],[11,"clone","","",216,{"i":[{"n":"self"}],"o":{"n":"litbyte"}}],[11,"from","","",76,{"i":[{"n":"litbyte"}],"o":{"n":"lit"}}],[11,"clone","","",217,{"i":[{"n":"self"}],"o":{"n":"litchar"}}],[11,"from","","",76,{"i":[{"n":"litchar"}],"o":{"n":"lit"}}],[11,"clone","","",218,{"i":[{"n":"self"}],"o":{"n":"litint"}}],[11,"from","","",76,{"i":[{"n":"litint"}],"o":{"n":"lit"}}],[11,"clone","","",219,{"i":[{"n":"self"}],"o":{"n":"litfloat"}}],[11,"from","","",76,{"i":[{"n":"litfloat"}],"o":{"n":"lit"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"litbool"}}],[11,"from","","",76,{"i":[{"n":"litbool"}],"o":{"n":"lit"}}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"litverbatim"}}],[11,"from","","",76,{"i":[{"n":"litverbatim"}],"o":{"n":"lit"}}],[11,"to_tokens","","",76,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"new","","",214,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",214,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"parse","","Parse a syntax tree node from the content of this string literal.",214,{"i":[{"n":"self"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"span","","",214,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",214,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",215,null],[11,"value","","",215,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"span","","",215,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",215,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",216,{"i":[{"n":"u8"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",216,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"span","","",216,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",216,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",217,{"i":[{"n":"char"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",217,{"i":[{"n":"self"}],"o":{"n":"char"}}],[11,"span","","",217,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",217,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",218,{"i":[{"n":"u64"},{"n":"intsuffix"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",218,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"suffix","","",218,{"i":[{"n":"self"}],"o":{"n":"intsuffix"}}],[11,"span","","",218,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",218,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",219,{"i":[{"n":"f64"},{"n":"floatsuffix"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",219,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"suffix","","",219,{"i":[{"n":"self"}],"o":{"n":"floatsuffix"}}],[11,"span","","",219,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",219,{"i":[{"n":"self"},{"n":"span"}]}],[11,"span","","",33,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",33,{"i":[{"n":"self"},{"n":"span"}]}],[11,"clone","","",77,{"i":[{"n":"self"}],"o":{"n":"strstyle"}}],[11,"clone","","",75,{"i":[{"n":"self"}],"o":{"n":"intsuffix"}}],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"floatsuffix"}}],[11,"parse","","",34,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",34,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",34,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"macro"}}],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"macrodelimiter"}}],[11,"parse","","",38,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",38,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",38,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"deriveinput"}}],[11,"clone","","",79,{"i":[{"n":"self"}],"o":{"n":"data"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"datastruct"}}],[11,"from","","",79,{"i":[{"n":"datastruct"}],"o":{"n":"data"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"dataenum"}}],[11,"from","","",79,{"i":[{"n":"dataenum"}],"o":{"n":"data"}}],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"dataunion"}}],[11,"from","","",79,{"i":[{"n":"dataunion"}],"o":{"n":"data"}}],[11,"parse_binop","","",80,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",81,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",81,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",80,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",81,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",80,{"i":[{"n":"self"}],"o":{"n":"binop"}}],[11,"clone","","",81,{"i":[{"n":"self"}],"o":{"n":"unop"}}],[11,"parse","","",84,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",84,{"o":{"g":["str"],"n":"option"}}],[11,"without_plus","","",84,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",52,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",52,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",41,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",41,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",50,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",50,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",51,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",51,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",42,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",42,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",47,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",47,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",45,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",45,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",54,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",54,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",46,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",46,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",49,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",49,{"o":{"g":["str"],"n":"option"}}],[11,"without_plus","","",83,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",83,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",83,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",53,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",53,{"o":{"g":["str"],"n":"option"}}],[11,"without_plus","","",53,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",44,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",44,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",43,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",43,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",48,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",48,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",40,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",40,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",82,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",82,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",39,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",39,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",52,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",41,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",50,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",51,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",42,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",47,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",54,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",49,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",53,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",44,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",43,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",48,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",45,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",46,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",55,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",83,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",40,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",82,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",39,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",84,{"i":[{"n":"self"}],"o":{"n":"type"}}],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"typeslice"}}],[11,"from","","",84,{"i":[{"n":"typeslice"}],"o":{"n":"type"}}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"typearray"}}],[11,"from","","",84,{"i":[{"n":"typearray"}],"o":{"n":"type"}}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"typeptr"}}],[11,"from","","",84,{"i":[{"n":"typeptr"}],"o":{"n":"type"}}],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"typereference"}}],[11,"from","","",84,{"i":[{"n":"typereference"}],"o":{"n":"type"}}],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"typebarefn"}}],[11,"from","","",84,{"i":[{"n":"typebarefn"}],"o":{"n":"type"}}],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"typenever"}}],[11,"from","","",84,{"i":[{"n":"typenever"}],"o":{"n":"type"}}],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"typetuple"}}],[11,"from","","",84,{"i":[{"n":"typetuple"}],"o":{"n":"type"}}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"typepath"}}],[11,"from","","",84,{"i":[{"n":"typepath"}],"o":{"n":"type"}}],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"typetraitobject"}}],[11,"from","","",84,{"i":[{"n":"typetraitobject"}],"o":{"n":"type"}}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"typeimpltrait"}}],[11,"from","","",84,{"i":[{"n":"typeimpltrait"}],"o":{"n":"type"}}],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"typeparen"}}],[11,"from","","",84,{"i":[{"n":"typeparen"}],"o":{"n":"type"}}],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"typegroup"}}],[11,"from","","",84,{"i":[{"n":"typegroup"}],"o":{"n":"type"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"typeinfer"}}],[11,"from","","",84,{"i":[{"n":"typeinfer"}],"o":{"n":"type"}}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"typemacro"}}],[11,"from","","",84,{"i":[{"n":"typemacro"}],"o":{"n":"type"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"typeverbatim"}}],[11,"from","","",84,{"i":[{"n":"typeverbatim"}],"o":{"n":"type"}}],[11,"to_tokens","","",84,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"abi"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"barefnarg"}}],[11,"clone","","",82,{"i":[{"n":"self"}],"o":{"n":"barefnargname"}}],[11,"clone","","",83,{"i":[{"n":"self"}],"o":{"n":"returntype"}}],[11,"parse","","",60,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",60,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",85,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",57,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",57,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",59,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",59,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",61,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",61,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",58,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",58,{"o":{"g":["str"],"n":"option"}}],[11,"parse_mod_style","","",60,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"to_tokens","","",60,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",61,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",86,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",85,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",57,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",58,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",59,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",56,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",60,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"global","","",60,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"pathtokens"}}],[11,"from","","",60,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"clone","","",61,{"i":[{"n":"self"}],"o":{"n":"pathsegment"}}],[11,"from","","",61,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"clone","","",86,{"i":[{"n":"self"}],"o":{"n":"patharguments"}}],[11,"default","","",86,{"o":{"n":"self"}}],[11,"is_empty","","",86,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",85,{"i":[{"n":"self"}],"o":{"n":"genericargument"}}],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"anglebracketedgenericarguments"}}],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"binding"}}],[11,"clone","","",59,{"i":[{"n":"self"}],"o":{"n":"parenthesizedgenericarguments"}}],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"qself"}}],[0,"buffer","","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",null,null],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",null,null],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",null,null],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",220,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenbuffer"}}],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",220,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenbuffer"}}],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",220,{"i":[{"n":"self"}],"o":{"n":"cursor"}}],[11,"clone","","",221,{"i":[{"n":"self"}],"o":{"n":"cursor"}}],[11,"eq","","",221,{"i":[{"n":"self"},{"n":"cursor"}],"o":{"n":"bool"}}],[11,"ne","","",221,{"i":[{"n":"self"},{"n":"cursor"}],"o":{"n":"bool"}}],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",221,{"o":{"n":"self"}}],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",221,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",221,{"i":[{"n":"self"},{"n":"delimiter"}],"o":{"n":"option"}}],[11,"ident","","If the cursor is pointing at a `Ident`, returns it along with a cursor pointing at the next `TokenTree`.",221,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"punct","","If the cursor is pointing at an `Punct`, returns it along with a cursor pointing at the next `TokenTree`.",221,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",221,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",221,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",221,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",221,{"i":[{"n":"self"}],"o":{"n":"span"}}],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by punctuation.",null,null],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",null,null],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",null,null],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",null,null],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",null,null],[3,"IntoIter","","An iterator over owned values of type `T`.",null,null],[3,"Iter","","An iterator over borrowed values of type `&T`.",null,null],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",null,null],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",null,null],[13,"Punctuated","","",222,null],[13,"End","","",222,null],[11,"to_tokens","","",223,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",222,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",223,{"i":[{"n":"self"}],"o":{"n":"punctuated"}}],[11,"new","","Creates an empty punctuated sequence.",223,{"o":{"n":"punctuated"}}],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",223,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",223,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"first","","Borrows the first punctuated pair in this sequence.",223,{"i":[{"n":"self"}],"o":{"g":["pair"],"n":"option"}}],[11,"last","","Borrows the last punctuated pair in this sequence.",223,{"i":[{"n":"self"}],"o":{"g":["pair"],"n":"option"}}],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",223,{"i":[{"n":"self"}],"o":{"g":["pair"],"n":"option"}}],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",223,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",223,{"i":[{"n":"self"}],"o":{"n":"itermut"}}],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",223,{"i":[{"n":"self"}],"o":{"n":"pairs"}}],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",223,{"i":[{"n":"self"}],"o":{"n":"pairsmut"}}],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",223,{"i":[{"n":"self"}],"o":{"n":"intopairs"}}],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",223,{"i":[{"n":"self"},{"n":"t"}]}],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",223,{"i":[{"n":"self"},{"n":"p"}]}],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",223,{"i":[{"n":"self"}],"o":{"g":["pair"],"n":"option"}}],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",223,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",223,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",223,{"i":[{"n":"self"},{"n":"t"}]}],[11,"insert","","Inserts an element at position `index`.",223,{"i":[{"n":"self"},{"n":"usize"},{"n":"t"}]}],[11,"from_iter","","",223,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"extend","","",223,{"i":[{"n":"self"},{"n":"i"}]}],[11,"from_iter","","",223,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"extend","","",223,{"i":[{"n":"self"},{"n":"i"}]}],[11,"into_iter","","",223,null],[11,"default","","",223,{"o":{"n":"self"}}],[11,"next","","",224,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",224,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",225,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",225,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",226,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",226,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",227,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",227,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",228,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",228,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",229,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",229,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",222,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"value","","Borrows the syntax tree node from this punctuated pair.",222,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",222,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",222,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",222,{"i":[{"n":"t"},{"n":"option"}],"o":{"n":"self"}}],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",222,null],[11,"index","","",223,null],[11,"index_mut","","",223,null],[11,"parse_separated","","Parse zero or more syntax tree nodes with punctuation in between and no trailing punctuation.",223,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_separated_nonempty","","Parse one or more syntax tree nodes with punctuation in bewteen and no trailing punctuation. allowing trailing punctuation.",223,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_terminated","","Parse zero or more syntax tree nodes with punctuation in between and optional trailing punctuation.",223,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_terminated_nonempty","","Parse one or more syntax tree nodes with punctuation in between and optional trailing punctuation.",223,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_separated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",223,null],[11,"parse_separated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",223,null],[11,"parse_terminated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",223,null],[11,"parse_terminated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",223,null],[0,"synom","syn","Parsing interface for parsing a token stream into a syntax tree node.",null,null],[3,"ParseError","syn::synom","Error returned when a `Synom` parser cannot parse the input tokens.",null,null],[0,"ext","","Extension traits that are made available within the `call!` parser.",null,null],[8,"IdentExt","syn::synom::ext","Additional parsing methods for `Ident`.",null,null],[10,"parse_any","","Parses any identifier including keywords.",230,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_any","syn","",180,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[6,"PResult","syn::synom","The result of a `Synom` parser.",null,null],[8,"Synom","","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",null,null],[10,"parse","","",231,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","A short name of the type being parsed.",231,{"o":{"g":["str"],"n":"option"}}],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",null,null],[16,"Output","","",232,null],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",232,{"i":[{"n":"self"},{"n":"tokenstream"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",232,{"i":[{"n":"self"},{"n":"tokenstream"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",232,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse","syn","",180,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",180,{"o":{"g":["str"],"n":"option"}}],[0,"spanned","","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",233,{"i":[{"n":"self"}],"o":{"n":"span"}}],[0,"visit","syn","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[5,"visit_abi","syn::visit","",null,{"i":[{"n":"v"},{"n":"abi"}]}],[5,"visit_angle_bracketed_generic_arguments","","",null,{"i":[{"n":"v"},{"n":"anglebracketedgenericarguments"}]}],[5,"visit_attr_style","","",null,{"i":[{"n":"v"},{"n":"attrstyle"}]}],[5,"visit_attribute","","",null,{"i":[{"n":"v"},{"n":"attribute"}]}],[5,"visit_bare_fn_arg","","",null,{"i":[{"n":"v"},{"n":"barefnarg"}]}],[5,"visit_bare_fn_arg_name","","",null,{"i":[{"n":"v"},{"n":"barefnargname"}]}],[5,"visit_bin_op","","",null,{"i":[{"n":"v"},{"n":"binop"}]}],[5,"visit_binding","","",null,{"i":[{"n":"v"},{"n":"binding"}]}],[5,"visit_bound_lifetimes","","",null,{"i":[{"n":"v"},{"n":"boundlifetimes"}]}],[5,"visit_const_param","","",null,{"i":[{"n":"v"},{"n":"constparam"}]}],[5,"visit_data","","",null,{"i":[{"n":"v"},{"n":"data"}]}],[5,"visit_data_enum","","",null,{"i":[{"n":"v"},{"n":"dataenum"}]}],[5,"visit_data_struct","","",null,{"i":[{"n":"v"},{"n":"datastruct"}]}],[5,"visit_data_union","","",null,{"i":[{"n":"v"},{"n":"dataunion"}]}],[5,"visit_derive_input","","",null,{"i":[{"n":"v"},{"n":"deriveinput"}]}],[5,"visit_expr","","",null,{"i":[{"n":"v"},{"n":"expr"}]}],[5,"visit_expr_binary","","",null,{"i":[{"n":"v"},{"n":"exprbinary"}]}],[5,"visit_expr_call","","",null,{"i":[{"n":"v"},{"n":"exprcall"}]}],[5,"visit_expr_cast","","",null,{"i":[{"n":"v"},{"n":"exprcast"}]}],[5,"visit_expr_field","","",null,{"i":[{"n":"v"},{"n":"exprfield"}]}],[5,"visit_expr_index","","",null,{"i":[{"n":"v"},{"n":"exprindex"}]}],[5,"visit_expr_lit","","",null,{"i":[{"n":"v"},{"n":"exprlit"}]}],[5,"visit_expr_paren","","",null,{"i":[{"n":"v"},{"n":"exprparen"}]}],[5,"visit_expr_path","","",null,{"i":[{"n":"v"},{"n":"exprpath"}]}],[5,"visit_expr_unary","","",null,{"i":[{"n":"v"},{"n":"exprunary"}]}],[5,"visit_expr_verbatim","","",null,{"i":[{"n":"v"},{"n":"exprverbatim"}]}],[5,"visit_field","","",null,{"i":[{"n":"v"},{"n":"field"}]}],[5,"visit_fields","","",null,{"i":[{"n":"v"},{"n":"fields"}]}],[5,"visit_fields_named","","",null,{"i":[{"n":"v"},{"n":"fieldsnamed"}]}],[5,"visit_fields_unnamed","","",null,{"i":[{"n":"v"},{"n":"fieldsunnamed"}]}],[5,"visit_generic_argument","","",null,{"i":[{"n":"v"},{"n":"genericargument"}]}],[5,"visit_generic_param","","",null,{"i":[{"n":"v"},{"n":"genericparam"}]}],[5,"visit_generics","","",null,{"i":[{"n":"v"},{"n":"generics"}]}],[5,"visit_ident","","",null,{"i":[{"n":"v"},{"n":"ident"}]}],[5,"visit_index","","",null,{"i":[{"n":"v"},{"n":"index"}]}],[5,"visit_lifetime","","",null,{"i":[{"n":"v"},{"n":"lifetime"}]}],[5,"visit_lifetime_def","","",null,{"i":[{"n":"v"},{"n":"lifetimedef"}]}],[5,"visit_lit","","",null,{"i":[{"n":"v"},{"n":"lit"}]}],[5,"visit_lit_bool","","",null,{"i":[{"n":"v"},{"n":"litbool"}]}],[5,"visit_lit_byte","","",null,{"i":[{"n":"v"},{"n":"litbyte"}]}],[5,"visit_lit_byte_str","","",null,{"i":[{"n":"v"},{"n":"litbytestr"}]}],[5,"visit_lit_char","","",null,{"i":[{"n":"v"},{"n":"litchar"}]}],[5,"visit_lit_float","","",null,{"i":[{"n":"v"},{"n":"litfloat"}]}],[5,"visit_lit_int","","",null,{"i":[{"n":"v"},{"n":"litint"}]}],[5,"visit_lit_str","","",null,{"i":[{"n":"v"},{"n":"litstr"}]}],[5,"visit_lit_verbatim","","",null,{"i":[{"n":"v"},{"n":"litverbatim"}]}],[5,"visit_macro","","",null,{"i":[{"n":"v"},{"n":"macro"}]}],[5,"visit_macro_delimiter","","",null,{"i":[{"n":"v"},{"n":"macrodelimiter"}]}],[5,"visit_member","","",null,{"i":[{"n":"v"},{"n":"member"}]}],[5,"visit_meta","","",null,{"i":[{"n":"v"},{"n":"meta"}]}],[5,"visit_meta_list","","",null,{"i":[{"n":"v"},{"n":"metalist"}]}],[5,"visit_meta_name_value","","",null,{"i":[{"n":"v"},{"n":"metanamevalue"}]}],[5,"visit_nested_meta","","",null,{"i":[{"n":"v"},{"n":"nestedmeta"}]}],[5,"visit_parenthesized_generic_arguments","","",null,{"i":[{"n":"v"},{"n":"parenthesizedgenericarguments"}]}],[5,"visit_path","","",null,{"i":[{"n":"v"},{"n":"path"}]}],[5,"visit_path_arguments","","",null,{"i":[{"n":"v"},{"n":"patharguments"}]}],[5,"visit_path_segment","","",null,{"i":[{"n":"v"},{"n":"pathsegment"}]}],[5,"visit_predicate_eq","","",null,{"i":[{"n":"v"},{"n":"predicateeq"}]}],[5,"visit_predicate_lifetime","","",null,{"i":[{"n":"v"},{"n":"predicatelifetime"}]}],[5,"visit_predicate_type","","",null,{"i":[{"n":"v"},{"n":"predicatetype"}]}],[5,"visit_qself","","",null,{"i":[{"n":"v"},{"n":"qself"}]}],[5,"visit_return_type","","",null,{"i":[{"n":"v"},{"n":"returntype"}]}],[5,"visit_span","","",null,{"i":[{"n":"v"},{"n":"span"}]}],[5,"visit_trait_bound","","",null,{"i":[{"n":"v"},{"n":"traitbound"}]}],[5,"visit_trait_bound_modifier","","",null,{"i":[{"n":"v"},{"n":"traitboundmodifier"}]}],[5,"visit_type","","",null,{"i":[{"n":"v"},{"n":"type"}]}],[5,"visit_type_array","","",null,{"i":[{"n":"v"},{"n":"typearray"}]}],[5,"visit_type_bare_fn","","",null,{"i":[{"n":"v"},{"n":"typebarefn"}]}],[5,"visit_type_group","","",null,{"i":[{"n":"v"},{"n":"typegroup"}]}],[5,"visit_type_impl_trait","","",null,{"i":[{"n":"v"},{"n":"typeimpltrait"}]}],[5,"visit_type_infer","","",null,{"i":[{"n":"v"},{"n":"typeinfer"}]}],[5,"visit_type_macro","","",null,{"i":[{"n":"v"},{"n":"typemacro"}]}],[5,"visit_type_never","","",null,{"i":[{"n":"v"},{"n":"typenever"}]}],[5,"visit_type_param","","",null,{"i":[{"n":"v"},{"n":"typeparam"}]}],[5,"visit_type_param_bound","","",null,{"i":[{"n":"v"},{"n":"typeparambound"}]}],[5,"visit_type_paren","","",null,{"i":[{"n":"v"},{"n":"typeparen"}]}],[5,"visit_type_path","","",null,{"i":[{"n":"v"},{"n":"typepath"}]}],[5,"visit_type_ptr","","",null,{"i":[{"n":"v"},{"n":"typeptr"}]}],[5,"visit_type_reference","","",null,{"i":[{"n":"v"},{"n":"typereference"}]}],[5,"visit_type_slice","","",null,{"i":[{"n":"v"},{"n":"typeslice"}]}],[5,"visit_type_trait_object","","",null,{"i":[{"n":"v"},{"n":"typetraitobject"}]}],[5,"visit_type_tuple","","",null,{"i":[{"n":"v"},{"n":"typetuple"}]}],[5,"visit_type_verbatim","","",null,{"i":[{"n":"v"},{"n":"typeverbatim"}]}],[5,"visit_un_op","","",null,{"i":[{"n":"v"},{"n":"unop"}]}],[5,"visit_variant","","",null,{"i":[{"n":"v"},{"n":"variant"}]}],[5,"visit_vis_crate","","",null,{"i":[{"n":"v"},{"n":"viscrate"}]}],[5,"visit_vis_public","","",null,{"i":[{"n":"v"},{"n":"vispublic"}]}],[5,"visit_vis_restricted","","",null,{"i":[{"n":"v"},{"n":"visrestricted"}]}],[5,"visit_visibility","","",null,{"i":[{"n":"v"},{"n":"visibility"}]}],[5,"visit_where_clause","","",null,{"i":[{"n":"v"},{"n":"whereclause"}]}],[5,"visit_where_predicate","","",null,{"i":[{"n":"v"},{"n":"wherepredicate"}]}],[8,"Visit","","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[11,"visit_abi","","",234,{"i":[{"n":"self"},{"n":"abi"}]}],[11,"visit_angle_bracketed_generic_arguments","","",234,{"i":[{"n":"self"},{"n":"anglebracketedgenericarguments"}]}],[11,"visit_attr_style","","",234,{"i":[{"n":"self"},{"n":"attrstyle"}]}],[11,"visit_attribute","","",234,{"i":[{"n":"self"},{"n":"attribute"}]}],[11,"visit_bare_fn_arg","","",234,{"i":[{"n":"self"},{"n":"barefnarg"}]}],[11,"visit_bare_fn_arg_name","","",234,{"i":[{"n":"self"},{"n":"barefnargname"}]}],[11,"visit_bin_op","","",234,{"i":[{"n":"self"},{"n":"binop"}]}],[11,"visit_binding","","",234,{"i":[{"n":"self"},{"n":"binding"}]}],[11,"visit_bound_lifetimes","","",234,{"i":[{"n":"self"},{"n":"boundlifetimes"}]}],[11,"visit_const_param","","",234,{"i":[{"n":"self"},{"n":"constparam"}]}],[11,"visit_data","","",234,{"i":[{"n":"self"},{"n":"data"}]}],[11,"visit_data_enum","","",234,{"i":[{"n":"self"},{"n":"dataenum"}]}],[11,"visit_data_struct","","",234,{"i":[{"n":"self"},{"n":"datastruct"}]}],[11,"visit_data_union","","",234,{"i":[{"n":"self"},{"n":"dataunion"}]}],[11,"visit_derive_input","","",234,{"i":[{"n":"self"},{"n":"deriveinput"}]}],[11,"visit_expr","","",234,{"i":[{"n":"self"},{"n":"expr"}]}],[11,"visit_expr_binary","","",234,{"i":[{"n":"self"},{"n":"exprbinary"}]}],[11,"visit_expr_call","","",234,{"i":[{"n":"self"},{"n":"exprcall"}]}],[11,"visit_expr_cast","","",234,{"i":[{"n":"self"},{"n":"exprcast"}]}],[11,"visit_expr_field","","",234,{"i":[{"n":"self"},{"n":"exprfield"}]}],[11,"visit_expr_index","","",234,{"i":[{"n":"self"},{"n":"exprindex"}]}],[11,"visit_expr_lit","","",234,{"i":[{"n":"self"},{"n":"exprlit"}]}],[11,"visit_expr_paren","","",234,{"i":[{"n":"self"},{"n":"exprparen"}]}],[11,"visit_expr_path","","",234,{"i":[{"n":"self"},{"n":"exprpath"}]}],[11,"visit_expr_unary","","",234,{"i":[{"n":"self"},{"n":"exprunary"}]}],[11,"visit_expr_verbatim","","",234,{"i":[{"n":"self"},{"n":"exprverbatim"}]}],[11,"visit_field","","",234,{"i":[{"n":"self"},{"n":"field"}]}],[11,"visit_fields","","",234,{"i":[{"n":"self"},{"n":"fields"}]}],[11,"visit_fields_named","","",234,{"i":[{"n":"self"},{"n":"fieldsnamed"}]}],[11,"visit_fields_unnamed","","",234,{"i":[{"n":"self"},{"n":"fieldsunnamed"}]}],[11,"visit_generic_argument","","",234,{"i":[{"n":"self"},{"n":"genericargument"}]}],[11,"visit_generic_param","","",234,{"i":[{"n":"self"},{"n":"genericparam"}]}],[11,"visit_generics","","",234,{"i":[{"n":"self"},{"n":"generics"}]}],[11,"visit_ident","","",234,{"i":[{"n":"self"},{"n":"ident"}]}],[11,"visit_index","","",234,{"i":[{"n":"self"},{"n":"index"}]}],[11,"visit_lifetime","","",234,{"i":[{"n":"self"},{"n":"lifetime"}]}],[11,"visit_lifetime_def","","",234,{"i":[{"n":"self"},{"n":"lifetimedef"}]}],[11,"visit_lit","","",234,{"i":[{"n":"self"},{"n":"lit"}]}],[11,"visit_lit_bool","","",234,{"i":[{"n":"self"},{"n":"litbool"}]}],[11,"visit_lit_byte","","",234,{"i":[{"n":"self"},{"n":"litbyte"}]}],[11,"visit_lit_byte_str","","",234,{"i":[{"n":"self"},{"n":"litbytestr"}]}],[11,"visit_lit_char","","",234,{"i":[{"n":"self"},{"n":"litchar"}]}],[11,"visit_lit_float","","",234,{"i":[{"n":"self"},{"n":"litfloat"}]}],[11,"visit_lit_int","","",234,{"i":[{"n":"self"},{"n":"litint"}]}],[11,"visit_lit_str","","",234,{"i":[{"n":"self"},{"n":"litstr"}]}],[11,"visit_lit_verbatim","","",234,{"i":[{"n":"self"},{"n":"litverbatim"}]}],[11,"visit_macro","","",234,{"i":[{"n":"self"},{"n":"macro"}]}],[11,"visit_macro_delimiter","","",234,{"i":[{"n":"self"},{"n":"macrodelimiter"}]}],[11,"visit_member","","",234,{"i":[{"n":"self"},{"n":"member"}]}],[11,"visit_meta","","",234,{"i":[{"n":"self"},{"n":"meta"}]}],[11,"visit_meta_list","","",234,{"i":[{"n":"self"},{"n":"metalist"}]}],[11,"visit_meta_name_value","","",234,{"i":[{"n":"self"},{"n":"metanamevalue"}]}],[11,"visit_nested_meta","","",234,{"i":[{"n":"self"},{"n":"nestedmeta"}]}],[11,"visit_parenthesized_generic_arguments","","",234,{"i":[{"n":"self"},{"n":"parenthesizedgenericarguments"}]}],[11,"visit_path","","",234,{"i":[{"n":"self"},{"n":"path"}]}],[11,"visit_path_arguments","","",234,{"i":[{"n":"self"},{"n":"patharguments"}]}],[11,"visit_path_segment","","",234,{"i":[{"n":"self"},{"n":"pathsegment"}]}],[11,"visit_predicate_eq","","",234,{"i":[{"n":"self"},{"n":"predicateeq"}]}],[11,"visit_predicate_lifetime","","",234,{"i":[{"n":"self"},{"n":"predicatelifetime"}]}],[11,"visit_predicate_type","","",234,{"i":[{"n":"self"},{"n":"predicatetype"}]}],[11,"visit_qself","","",234,{"i":[{"n":"self"},{"n":"qself"}]}],[11,"visit_return_type","","",234,{"i":[{"n":"self"},{"n":"returntype"}]}],[11,"visit_span","","",234,{"i":[{"n":"self"},{"n":"span"}]}],[11,"visit_trait_bound","","",234,{"i":[{"n":"self"},{"n":"traitbound"}]}],[11,"visit_trait_bound_modifier","","",234,{"i":[{"n":"self"},{"n":"traitboundmodifier"}]}],[11,"visit_type","","",234,{"i":[{"n":"self"},{"n":"type"}]}],[11,"visit_type_array","","",234,{"i":[{"n":"self"},{"n":"typearray"}]}],[11,"visit_type_bare_fn","","",234,{"i":[{"n":"self"},{"n":"typebarefn"}]}],[11,"visit_type_group","","",234,{"i":[{"n":"self"},{"n":"typegroup"}]}],[11,"visit_type_impl_trait","","",234,{"i":[{"n":"self"},{"n":"typeimpltrait"}]}],[11,"visit_type_infer","","",234,{"i":[{"n":"self"},{"n":"typeinfer"}]}],[11,"visit_type_macro","","",234,{"i":[{"n":"self"},{"n":"typemacro"}]}],[11,"visit_type_never","","",234,{"i":[{"n":"self"},{"n":"typenever"}]}],[11,"visit_type_param","","",234,{"i":[{"n":"self"},{"n":"typeparam"}]}],[11,"visit_type_param_bound","","",234,{"i":[{"n":"self"},{"n":"typeparambound"}]}],[11,"visit_type_paren","","",234,{"i":[{"n":"self"},{"n":"typeparen"}]}],[11,"visit_type_path","","",234,{"i":[{"n":"self"},{"n":"typepath"}]}],[11,"visit_type_ptr","","",234,{"i":[{"n":"self"},{"n":"typeptr"}]}],[11,"visit_type_reference","","",234,{"i":[{"n":"self"},{"n":"typereference"}]}],[11,"visit_type_slice","","",234,{"i":[{"n":"self"},{"n":"typeslice"}]}],[11,"visit_type_trait_object","","",234,{"i":[{"n":"self"},{"n":"typetraitobject"}]}],[11,"visit_type_tuple","","",234,{"i":[{"n":"self"},{"n":"typetuple"}]}],[11,"visit_type_verbatim","","",234,{"i":[{"n":"self"},{"n":"typeverbatim"}]}],[11,"visit_un_op","","",234,{"i":[{"n":"self"},{"n":"unop"}]}],[11,"visit_variant","","",234,{"i":[{"n":"self"},{"n":"variant"}]}],[11,"visit_vis_crate","","",234,{"i":[{"n":"self"},{"n":"viscrate"}]}],[11,"visit_vis_public","","",234,{"i":[{"n":"self"},{"n":"vispublic"}]}],[11,"visit_vis_restricted","","",234,{"i":[{"n":"self"},{"n":"visrestricted"}]}],[11,"visit_visibility","","",234,{"i":[{"n":"self"},{"n":"visibility"}]}],[11,"visit_where_clause","","",234,{"i":[{"n":"self"},{"n":"whereclause"}]}],[11,"visit_where_predicate","","",234,{"i":[{"n":"self"},{"n":"wherepredicate"}]}],[11,"fmt","syn::synom","",235,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",235,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",235,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[14,"named","syn","Define a parser function with the signature expected by syn parser combinators.",null,null],[14,"call","","Invoke the given parser function with zero or more arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Invert the result of a parser by parsing successfully if the given parser fails to parse and vice versa.",null,null],[14,"cond","","Execute a parser only if a condition is met, otherwise return None.",null,null],[14,"cond_reduce","","Execute a parser only if a condition is met, otherwise fail to parse.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything.",null,null],[14,"reject","","Unconditionally fail to parse anything.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, optionally naming each intermediate result, followed by a step to combine the intermediate results.",null,null],[14,"input_end","","Parse nothing and succeed only if the end of the enclosing block has been reached.",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"syn","","Parse any type that implements the `Synom` trait.",null,null],[14,"custom_keyword","","Parse the given word as a keyword.",null,null],[14,"parens","","Parse inside of `(` `)` parentheses.",null,null],[14,"brackets","","Parse inside of `[` `]` square brackets.",null,null],[14,"braces","","Parse inside of `{` `}` curly braces.",null,null],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",null,null],[14,"punct","","Parse a single Rust punctuation token.",null,null],[14,"keyword","","Parse a single Rust keyword token.",null,null],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",null,null],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",180,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"ident"}}],[11,"span","","Returns the span of this `Ident`.",180,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",180,null],[11,"cmp","","",180,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",180,{"i":[{"n":"self"},{"n":"ident"}],"o":{"g":["ordering"],"n":"option"}}],[11,"fmt","","",180,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",180,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","","",180,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"eq","","",180,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"bool"}}],[11,"clone","","",180,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"hash","","",180,null],[11,"to_tokens","","",180,null],[11,"visit_abi","syn::visit","",234,{"i":[{"n":"self"},{"n":"abi"}]}],[11,"visit_angle_bracketed_generic_arguments","","",234,{"i":[{"n":"self"},{"n":"anglebracketedgenericarguments"}]}],[11,"visit_attr_style","","",234,{"i":[{"n":"self"},{"n":"attrstyle"}]}],[11,"visit_attribute","","",234,{"i":[{"n":"self"},{"n":"attribute"}]}],[11,"visit_bare_fn_arg","","",234,{"i":[{"n":"self"},{"n":"barefnarg"}]}],[11,"visit_bare_fn_arg_name","","",234,{"i":[{"n":"self"},{"n":"barefnargname"}]}],[11,"visit_bin_op","","",234,{"i":[{"n":"self"},{"n":"binop"}]}],[11,"visit_binding","","",234,{"i":[{"n":"self"},{"n":"binding"}]}],[11,"visit_bound_lifetimes","","",234,{"i":[{"n":"self"},{"n":"boundlifetimes"}]}],[11,"visit_const_param","","",234,{"i":[{"n":"self"},{"n":"constparam"}]}],[11,"visit_data","","",234,{"i":[{"n":"self"},{"n":"data"}]}],[11,"visit_data_enum","","",234,{"i":[{"n":"self"},{"n":"dataenum"}]}],[11,"visit_data_struct","","",234,{"i":[{"n":"self"},{"n":"datastruct"}]}],[11,"visit_data_union","","",234,{"i":[{"n":"self"},{"n":"dataunion"}]}],[11,"visit_derive_input","","",234,{"i":[{"n":"self"},{"n":"deriveinput"}]}],[11,"visit_expr","","",234,{"i":[{"n":"self"},{"n":"expr"}]}],[11,"visit_expr_binary","","",234,{"i":[{"n":"self"},{"n":"exprbinary"}]}],[11,"visit_expr_call","","",234,{"i":[{"n":"self"},{"n":"exprcall"}]}],[11,"visit_expr_cast","","",234,{"i":[{"n":"self"},{"n":"exprcast"}]}],[11,"visit_expr_field","","",234,{"i":[{"n":"self"},{"n":"exprfield"}]}],[11,"visit_expr_index","","",234,{"i":[{"n":"self"},{"n":"exprindex"}]}],[11,"visit_expr_lit","","",234,{"i":[{"n":"self"},{"n":"exprlit"}]}],[11,"visit_expr_paren","","",234,{"i":[{"n":"self"},{"n":"exprparen"}]}],[11,"visit_expr_path","","",234,{"i":[{"n":"self"},{"n":"exprpath"}]}],[11,"visit_expr_unary","","",234,{"i":[{"n":"self"},{"n":"exprunary"}]}],[11,"visit_expr_verbatim","","",234,{"i":[{"n":"self"},{"n":"exprverbatim"}]}],[11,"visit_field","","",234,{"i":[{"n":"self"},{"n":"field"}]}],[11,"visit_fields","","",234,{"i":[{"n":"self"},{"n":"fields"}]}],[11,"visit_fields_named","","",234,{"i":[{"n":"self"},{"n":"fieldsnamed"}]}],[11,"visit_fields_unnamed","","",234,{"i":[{"n":"self"},{"n":"fieldsunnamed"}]}],[11,"visit_generic_argument","","",234,{"i":[{"n":"self"},{"n":"genericargument"}]}],[11,"visit_generic_param","","",234,{"i":[{"n":"self"},{"n":"genericparam"}]}],[11,"visit_generics","","",234,{"i":[{"n":"self"},{"n":"generics"}]}],[11,"visit_ident","","",234,{"i":[{"n":"self"},{"n":"ident"}]}],[11,"visit_index","","",234,{"i":[{"n":"self"},{"n":"index"}]}],[11,"visit_lifetime","","",234,{"i":[{"n":"self"},{"n":"lifetime"}]}],[11,"visit_lifetime_def","","",234,{"i":[{"n":"self"},{"n":"lifetimedef"}]}],[11,"visit_lit","","",234,{"i":[{"n":"self"},{"n":"lit"}]}],[11,"visit_lit_bool","","",234,{"i":[{"n":"self"},{"n":"litbool"}]}],[11,"visit_lit_byte","","",234,{"i":[{"n":"self"},{"n":"litbyte"}]}],[11,"visit_lit_byte_str","","",234,{"i":[{"n":"self"},{"n":"litbytestr"}]}],[11,"visit_lit_char","","",234,{"i":[{"n":"self"},{"n":"litchar"}]}],[11,"visit_lit_float","","",234,{"i":[{"n":"self"},{"n":"litfloat"}]}],[11,"visit_lit_int","","",234,{"i":[{"n":"self"},{"n":"litint"}]}],[11,"visit_lit_str","","",234,{"i":[{"n":"self"},{"n":"litstr"}]}],[11,"visit_lit_verbatim","","",234,{"i":[{"n":"self"},{"n":"litverbatim"}]}],[11,"visit_macro","","",234,{"i":[{"n":"self"},{"n":"macro"}]}],[11,"visit_macro_delimiter","","",234,{"i":[{"n":"self"},{"n":"macrodelimiter"}]}],[11,"visit_member","","",234,{"i":[{"n":"self"},{"n":"member"}]}],[11,"visit_meta","","",234,{"i":[{"n":"self"},{"n":"meta"}]}],[11,"visit_meta_list","","",234,{"i":[{"n":"self"},{"n":"metalist"}]}],[11,"visit_meta_name_value","","",234,{"i":[{"n":"self"},{"n":"metanamevalue"}]}],[11,"visit_nested_meta","","",234,{"i":[{"n":"self"},{"n":"nestedmeta"}]}],[11,"visit_parenthesized_generic_arguments","","",234,{"i":[{"n":"self"},{"n":"parenthesizedgenericarguments"}]}],[11,"visit_path","","",234,{"i":[{"n":"self"},{"n":"path"}]}],[11,"visit_path_arguments","","",234,{"i":[{"n":"self"},{"n":"patharguments"}]}],[11,"visit_path_segment","","",234,{"i":[{"n":"self"},{"n":"pathsegment"}]}],[11,"visit_predicate_eq","","",234,{"i":[{"n":"self"},{"n":"predicateeq"}]}],[11,"visit_predicate_lifetime","","",234,{"i":[{"n":"self"},{"n":"predicatelifetime"}]}],[11,"visit_predicate_type","","",234,{"i":[{"n":"self"},{"n":"predicatetype"}]}],[11,"visit_qself","","",234,{"i":[{"n":"self"},{"n":"qself"}]}],[11,"visit_return_type","","",234,{"i":[{"n":"self"},{"n":"returntype"}]}],[11,"visit_span","","",234,{"i":[{"n":"self"},{"n":"span"}]}],[11,"visit_trait_bound","","",234,{"i":[{"n":"self"},{"n":"traitbound"}]}],[11,"visit_trait_bound_modifier","","",234,{"i":[{"n":"self"},{"n":"traitboundmodifier"}]}],[11,"visit_type","","",234,{"i":[{"n":"self"},{"n":"type"}]}],[11,"visit_type_array","","",234,{"i":[{"n":"self"},{"n":"typearray"}]}],[11,"visit_type_bare_fn","","",234,{"i":[{"n":"self"},{"n":"typebarefn"}]}],[11,"visit_type_group","","",234,{"i":[{"n":"self"},{"n":"typegroup"}]}],[11,"visit_type_impl_trait","","",234,{"i":[{"n":"self"},{"n":"typeimpltrait"}]}],[11,"visit_type_infer","","",234,{"i":[{"n":"self"},{"n":"typeinfer"}]}],[11,"visit_type_macro","","",234,{"i":[{"n":"self"},{"n":"typemacro"}]}],[11,"visit_type_never","","",234,{"i":[{"n":"self"},{"n":"typenever"}]}],[11,"visit_type_param","","",234,{"i":[{"n":"self"},{"n":"typeparam"}]}],[11,"visit_type_param_bound","","",234,{"i":[{"n":"self"},{"n":"typeparambound"}]}],[11,"visit_type_paren","","",234,{"i":[{"n":"self"},{"n":"typeparen"}]}],[11,"visit_type_path","","",234,{"i":[{"n":"self"},{"n":"typepath"}]}],[11,"visit_type_ptr","","",234,{"i":[{"n":"self"},{"n":"typeptr"}]}],[11,"visit_type_reference","","",234,{"i":[{"n":"self"},{"n":"typereference"}]}],[11,"visit_type_slice","","",234,{"i":[{"n":"self"},{"n":"typeslice"}]}],[11,"visit_type_trait_object","","",234,{"i":[{"n":"self"},{"n":"typetraitobject"}]}],[11,"visit_type_tuple","","",234,{"i":[{"n":"self"},{"n":"typetuple"}]}],[11,"visit_type_verbatim","","",234,{"i":[{"n":"self"},{"n":"typeverbatim"}]}],[11,"visit_un_op","","",234,{"i":[{"n":"self"},{"n":"unop"}]}],[11,"visit_variant","","",234,{"i":[{"n":"self"},{"n":"variant"}]}],[11,"visit_vis_crate","","",234,{"i":[{"n":"self"},{"n":"viscrate"}]}],[11,"visit_vis_public","","",234,{"i":[{"n":"self"},{"n":"vispublic"}]}],[11,"visit_vis_restricted","","",234,{"i":[{"n":"self"},{"n":"visrestricted"}]}],[11,"visit_visibility","","",234,{"i":[{"n":"self"},{"n":"visibility"}]}],[11,"visit_where_clause","","",234,{"i":[{"n":"self"},{"n":"whereclause"}]}],[11,"visit_where_predicate","","",234,{"i":[{"n":"self"},{"n":"wherepredicate"}]}]],"paths":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprBinary"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprField"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[3,"ExprVerbatim"],[3,"Index"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"Lifetime"],[3,"LitBool"],[3,"LitVerbatim"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"PathTokens"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Underscore"],[3,"Apostrophe"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"As"],[3,"Auto"],[3,"Box"],[3,"Break"],[3,"CapSelf"],[3,"Catch"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Self_"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Type"],[3,"Union"],[3,"Unsafe"],[3,"Use"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Ident"],[3,"ExprBox"],[3,"ExprInPlace"],[3,"ExprArray"],[3,"ExprMethodCall"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprIf"],[3,"ExprIfLet"],[3,"ExprWhile"],[3,"ExprWhileLet"],[3,"ExprForLoop"],[3,"ExprLoop"],[3,"ExprMatch"],[3,"ExprClosure"],[3,"ExprUnsafe"],[3,"ExprBlock"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprBreak"],[3,"ExprContinue"],[3,"ExprReturn"],[3,"ExprMacro"],[3,"ExprStruct"],[3,"ExprRepeat"],[3,"ExprGroup"],[3,"ExprTry"],[3,"ExprCatch"],[3,"ExprYield"],[3,"ImplGenerics"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Pair"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"IdentExt"],[8,"Synom"],[8,"Parser"],[8,"Spanned"],[8,"Visit"],[3,"ParseError"]]};
searchIndex["tempfile"] = {"doc":"Temporary files and directories.","items":[[3,"TempDir","tempfile","A directory in the filesystem that is automatically deleted when it goes out of scope.",null,null],[3,"NamedTempFile","","A named temporary file.",null,null],[3,"PersistError","","Error returned when persisting a temporary file fails.",null,null],[12,"error","","The underlying IO error.",0,null],[12,"file","","The temporary file that couldn't be persisted.",0,null],[3,"TempPath","","A path to a named temporary file without an open file handle.",null,null],[3,"Builder","","Create a new temporary file or directory with custom parameters.",null,null],[5,"tempdir","","Create a new temporary directory.",null,{"o":{"g":["tempdir"],"n":"result"}}],[5,"tempdir_in","","Create a new temporary directory.",null,{"i":[{"n":"p"}],"o":{"g":["tempdir"],"n":"result"}}],[5,"tempfile","","Create a new temporary file.",null,{"o":{"g":["file"],"n":"result"}}],[5,"tempfile_in","","Create a new temporary file in the specified directory.",null,{"i":[{"n":"p"}],"o":{"g":["file"],"n":"result"}}],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()`.",1,{"o":{"g":["tempdir"],"n":"result"}}],[11,"new_in","","Attempts to make a temporary directory inside of `tmpdir` whose name will have the prefix `prefix`. The directory and everything inside it will be automatically deleted once the returned `TempDir` is destroyed.",1,{"i":[{"n":"p"}],"o":{"g":["tempdir"],"n":"result"}}],[11,"path","","Accesses the [`Path`] to the temporary directory.",1,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"into_path","","Persist the temporary directory to disk, returning the [`PathBuf`] where it is located.",1,{"i":[{"n":"self"}],"o":{"n":"pathbuf"}}],[11,"close","","Closes and removes the temporary directory, returing a `Result`.",1,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"as_ref","","",1,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drop","","",1,{"i":[{"n":"self"}]}],[11,"close","","Close and remove the temporary file.",2,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"persist","","Persist the temporary file at the target path.",2,{"i":[{"n":"self"},{"n":"p"}],"o":{"g":["pathpersisterror"],"n":"result"}}],[11,"persist_noclobber","","Persist the temporary file at the target path iff no file exists there.",2,{"i":[{"n":"self"},{"n":"p"}],"o":{"g":["pathpersisterror"],"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drop","","",2,{"i":[{"n":"self"}]}],[11,"deref","","",2,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"as_ref","","",2,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"as_ref","","",2,{"i":[{"n":"self"}],"o":{"n":"osstr"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"as_ref","","",3,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",3,{"i":[{"n":"persisterror"}],"o":{"n":"namedtempfile"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",0,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"new","","Create a new named temporary file.",3,{"o":{"g":["namedtempfile"],"n":"result"}}],[11,"new_in","","Create a new named temporary file in the specified directory.",3,{"i":[{"n":"p"}],"o":{"g":["namedtempfile"],"n":"result"}}],[11,"path","","Get the temporary file's path.",3,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"close","","Close and remove the temporary file.",3,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"persist","","Persist the temporary file at the target path.",3,{"i":[{"n":"self"},{"n":"p"}],"o":{"g":["file","persisterror"],"n":"result"}}],[11,"persist_noclobber","","Persist the temporary file at the target path iff no file exists there.",3,{"i":[{"n":"self"},{"n":"p"}],"o":{"g":["file","persisterror"],"n":"result"}}],[11,"reopen","","Reopen the temporary file.",3,{"i":[{"n":"self"}],"o":{"g":["file"],"n":"result"}}],[11,"as_file","","Get a reference to the underlying file.",3,{"i":[{"n":"self"}],"o":{"n":"file"}}],[11,"as_file_mut","","Get a mutable reference to the underlying file.",3,{"i":[{"n":"self"}],"o":{"n":"file"}}],[11,"into_file","","Convert the temporary file into a `std::fs::File`.",3,{"i":[{"n":"self"}],"o":{"n":"file"}}],[11,"into_temp_path","","Closes the file, leaving only the temporary file path.",3,{"i":[{"n":"self"}],"o":{"n":"temppath"}}],[11,"read","","",3,null],[11,"write","","",3,null],[11,"flush","","",3,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"seek","","",3,{"i":[{"n":"self"},{"n":"seekfrom"}],"o":{"g":["u64"],"n":"result"}}],[11,"as_raw_fd","","",3,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"builder"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"builder"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"builder"}],"o":{"n":"bool"}}],[11,"default","","",4,{"o":{"n":"self"}}],[11,"new","","Create a new `Builder`.",4,{"o":{"n":"self"}}],[11,"prefix","","Set a custom filename prefix.",4,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"suffix","","Set a custom filename suffix.",4,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"rand_bytes","","Set the number of random bytes.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"tempfile","","Create the named temporary file.",4,{"i":[{"n":"self"}],"o":{"g":["namedtempfile"],"n":"result"}}],[11,"tempfile_in","","Create the named temporary file in the specified directory.",4,{"i":[{"n":"self"},{"n":"p"}],"o":{"g":["namedtempfile"],"n":"result"}}],[11,"tempdir","","Attempts to make a temporary directory inside of `env::temp_dir()` whose name will have the prefix, `prefix`. The directory and everything inside it will be automatically deleted once the returned `TempDir` is destroyed.",4,{"i":[{"n":"self"}],"o":{"g":["tempdir"],"n":"result"}}],[11,"tempdir_in","","Attempts to make a temporary directory inside of `dir`. The directory and everything inside it will be automatically deleted once the returned `TempDir` is destroyed.",4,{"i":[{"n":"self"},{"n":"p"}],"o":{"g":["tempdir"],"n":"result"}}]],"paths":[[3,"PersistError"],[3,"TempDir"],[3,"TempPath"],[3,"NamedTempFile"],[3,"Builder"]]};
searchIndex["texture"] = {"doc":"A generic library for textures.","items":[[3,"TextureSettings","texture","Texture creation parameters.",null,null],[4,"Format","","Texture format.",null,null],[13,"Rgba8","","`(red, green, blue, alpha)` with values 0-255.",0,null],[4,"Filter","","Sampling filter",null,null],[13,"Linear","","A Weighted Linear Blend",1,null],[13,"Nearest","","Nearest Texel",1,null],[0,"ops","","Image operations for textures.",null,null],[5,"flip_vertical","texture::ops","Flips the image vertically.",null,null],[5,"alpha_to_rgba8","","Converts from alpha to rgba8.",null,null],[8,"ImageSize","texture","Implemented by all images to be used with generic algorithms.",null,null],[10,"get_size","","Get the image size.",2,null],[11,"get_width","","Gets the image width.",2,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_height","","Gets the image height.",2,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[8,"CreateTexture","","Implemented by textures for creation.",null,null],[16,"Error","","The error when creating texture.",3,null],[10,"create","","Create texture from memory.",3,null],[8,"UpdateTexture","","Implemented by textures for updating.",null,null],[16,"Error","","The error when updating texture.",4,null],[10,"update","","Update the texture.",4,null],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"texturesettings"}}],[11,"new","","Create default settings.",5,{"o":{"n":"texturesettings"}}],[11,"get_convert_gamma","","Gets whether to convert gamma, treated as sRGB color space.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_convert_gamma","","Sets convert gamma.",5,{"i":[{"n":"self"},{"n":"bool"}]}],[11,"convert_gamma","","Sets convert gamma.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"get_compress","","Gets wheter compress on the GPU.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_compress","","Sets compress.",5,{"i":[{"n":"self"},{"n":"bool"}]}],[11,"compress","","Sets compress.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"get_generate_mipmap","","Gets generate mipmap.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_generate_mipmap","","Sets generate mipmap.",5,{"i":[{"n":"self"},{"n":"bool"}]}],[11,"generate_mipmap","","Sets generate mipmap.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"get_min","","Gets minify filter.",5,{"i":[{"n":"self"}],"o":{"n":"filter"}}],[11,"set_min","","Sets minify filter.",5,{"i":[{"n":"self"},{"n":"filter"}]}],[11,"min","","Sets minify filter.",5,{"i":[{"n":"self"},{"n":"filter"}],"o":{"n":"self"}}],[11,"get_mag","","Gets magnify filter",5,{"i":[{"n":"self"}],"o":{"n":"filter"}}],[11,"set_mag","","Sets magnify filter",5,{"i":[{"n":"self"},{"n":"filter"}]}],[11,"mag","","Sets magnify filter",5,{"i":[{"n":"self"},{"n":"filter"}],"o":{"n":"self"}}],[11,"get_mipmap","","Gets minify mipmap filter",5,{"i":[{"n":"self"}],"o":{"n":"filter"}}],[11,"set_mipmap","","Sets magnify mipmap filter, and sets generate_mipmap to true.",5,{"i":[{"n":"self"},{"n":"filter"}]}],[11,"mipmap","","Sets magnify mipmap filter, and sets generate_mipmap to true",5,{"i":[{"n":"self"},{"n":"filter"}],"o":{"n":"self"}}],[11,"get_filter","","Returns the min and mag filter",5,null],[11,"set_filter","","Sets the min and mag filter",5,{"i":[{"n":"self"},{"n":"filter"}]}],[11,"filter","","Sets the min and mag filter",5,{"i":[{"n":"self"},{"n":"filter"}],"o":{"n":"self"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"format"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"filter"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[4,"Format"],[4,"Filter"],[8,"ImageSize"],[8,"CreateTexture"],[8,"UpdateTexture"],[3,"TextureSettings"]]};
searchIndex["token_store"] = {"doc":"Token Store","items":[[3,"Store","token_store","A token store",null,null],[3,"Token","","A token for accessing the store contents",null,null],[3,"StoreProxy","","A Proxy representing a `Store` with ongoing borrows",null,null],[11,"valid","","Check wether this token is still valid",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"token"}}],[11,"new","","Create a new store",1,{"o":{"n":"store"}}],[11,"insert","","Insert a new value in this store",1,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"token"}}],[11,"get","","Access value previously inserted in this store",1,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"v"}}],[11,"get_mut","","Mutably access value previously inserted in this store",1,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"v"}}],[11,"remove","","Remove a value previously inserted in this store",1,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"v"}}],[11,"with_value","","Create a sub-scope with access to a value",1,{"i":[{"n":"self"},{"n":"token"},{"n":"f"}],"o":{"n":"t"}}],[11,"as_proxy","","See this `Store` as a `StoreProxy` with no ongoing borrow",1,{"i":[{"n":"self"}],"o":{"n":"storeproxy"}}],[11,"from","","",2,{"i":[{"n":"store"}],"o":{"n":"storeproxy"}}],[11,"from","","",2,{"i":[{"n":"storeproxy"}],"o":{"n":"storeproxy"}}],[11,"insert","","Insert a new value in the proxified store",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"token"}}],[11,"get","","Access value previously inserted in the proxified store",2,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"v"}}],[11,"get_mut","","Mutably access value previously inserted in the proxified store",2,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"v"}}],[11,"remove","","Remove a value previously inserted in the proxified store",2,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"v"}}],[11,"with_value","","Create a sub-scope with access to a value",2,{"i":[{"n":"self"},{"n":"token"},{"n":"f"}],"o":{"n":"t"}}]],"paths":[[3,"Token"],[3,"Store"],[3,"StoreProxy"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"] = {"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",null,null],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,{"i":[{"n":"self"}]}],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,{"i":[{"n":"self"}],"o":{"n":"e"}}]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["vecmath"] = {"doc":"A simple and generic library for vector math.","items":[[5,"col_mat3x2_mul_col","vecmath","Computes column vector in column matrix product.",null,{"i":[{"n":"matrix3x2"},{"n":"matrix3x2"},{"n":"usize"}],"o":{"n":"vector2"}}],[5,"col_mat3_mul_col","","Computes column vector in column matrix product.",null,{"i":[{"n":"matrix3"},{"n":"matrix3"},{"n":"usize"}],"o":{"n":"vector3"}}],[5,"col_mat4x3_mul_col","","Computes column vector in column matrix product.",null,{"i":[{"n":"matrix4x3"},{"n":"matrix4x3"},{"n":"usize"}],"o":{"n":"vector3"}}],[5,"col_mat4_mul_col","","Computes column vector in column matrix product.",null,{"i":[{"n":"matrix4"},{"n":"matrix4"},{"n":"usize"}],"o":{"n":"vector4"}}],[5,"row_mat2x3_mul_row","","Computes row vector in row matrix product.",null,{"i":[{"n":"matrix2x3"},{"n":"matrix2x3"},{"n":"usize"}],"o":{"n":"vector3"}}],[5,"row_mat3_mul_row","","Computes row vector in row matrix product.",null,{"i":[{"n":"matrix3"},{"n":"matrix3"},{"n":"usize"}],"o":{"n":"vector3"}}],[5,"row_mat3x4_mul_row","","Computes row vector in row matrix product.",null,{"i":[{"n":"matrix3x4"},{"n":"matrix3x4"},{"n":"usize"}],"o":{"n":"vector4"}}],[5,"row_mat4_mul_row","","Computes row vector in row matrix product.",null,{"i":[{"n":"matrix4"},{"n":"matrix4"},{"n":"usize"}],"o":{"n":"vector4"}}],[5,"col_mat3x2_mul","","Multiplies two matrices.",null,{"i":[{"n":"matrix3x2"},{"n":"matrix3x2"}],"o":{"n":"matrix3x2"}}],[5,"col_mat3_mul","","Multiplies two matrices.",null,{"i":[{"n":"matrix3"},{"n":"matrix3"}],"o":{"n":"matrix3"}}],[5,"col_mat4x3_mul","","Multiplies two matrices.",null,{"i":[{"n":"matrix4x3"},{"n":"matrix4x3"}],"o":{"n":"matrix4x3"}}],[5,"col_mat4_mul","","Multiplies two matrices.",null,{"i":[{"n":"matrix4"},{"n":"matrix4"}],"o":{"n":"matrix4"}}],[5,"row_mat2x3_mul","","Multiplies two matrices.",null,{"i":[{"n":"matrix2x3"},{"n":"matrix2x3"}],"o":{"n":"matrix2x3"}}],[5,"row_mat3_mul","","Multiplies two matrices.",null,{"i":[{"n":"matrix3"},{"n":"matrix3"}],"o":{"n":"matrix3"}}],[5,"row_mat3x4_mul","","Multiplies two matrices.",null,{"i":[{"n":"matrix3x4"},{"n":"matrix3x4"}],"o":{"n":"matrix3x4"}}],[5,"row_mat4_mul","","Multiplies two matrices.",null,{"i":[{"n":"matrix4"},{"n":"matrix4"}],"o":{"n":"matrix4"}}],[5,"mat2x3_id","","Constructs identity matrix.",null,{"o":{"n":"matrix2x3"}}],[5,"mat3x2_id","","Constructs identity matrix.",null,{"o":{"n":"matrix3x2"}}],[5,"mat3_id","","Constructs identity matrix.",null,{"o":{"n":"matrix3"}}],[5,"mat3x4_id","","Constructs identity matrix.",null,{"o":{"n":"matrix3x4"}}],[5,"mat4x3_id","","Constructs identity matrix.",null,{"o":{"n":"matrix4x3"}}],[5,"mat4_id","","Constructs identity matrix.",null,{"o":{"n":"matrix4"}}],[5,"vec2_cast","","Converts to another vector type.",null,{"i":[{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"vec3_cast","","Converts to another vector type.",null,{"i":[{"n":"vector3"}],"o":{"n":"vector3"}}],[5,"vec4_cast","","Converts to another vector type.",null,{"i":[{"n":"vector4"}],"o":{"n":"vector4"}}],[5,"mat2x3_cast","","Converts to another matrix type.",null,{"i":[{"n":"matrix2x3"}],"o":{"n":"matrix2x3"}}],[5,"mat3x2_cast","","Converts to another matrix type.",null,{"i":[{"n":"matrix3x2"}],"o":{"n":"matrix3x2"}}],[5,"mat3_cast","","Converts to another matrix type.",null,{"i":[{"n":"matrix3"}],"o":{"n":"matrix3"}}],[5,"mat3x4_cast","","Converts to another matrix type.",null,{"i":[{"n":"matrix3x4"}],"o":{"n":"matrix3x4"}}],[5,"mat4x3_cast","","Converts to another matrix type.",null,{"i":[{"n":"matrix4x3"}],"o":{"n":"matrix4x3"}}],[5,"mat4_cast","","Converts to another matrix type.",null,{"i":[{"n":"matrix4"}],"o":{"n":"matrix4"}}],[5,"vec2_sub","","Subtracts 'b' from 'a'.",null,{"i":[{"n":"vector2"},{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"vec3_sub","","Subtracts 'b' from 'a'.",null,{"i":[{"n":"vector3"},{"n":"vector3"}],"o":{"n":"vector3"}}],[5,"vec4_sub","","Subtracts 'b' from 'a'.",null,{"i":[{"n":"vector4"},{"n":"vector4"}],"o":{"n":"vector4"}}],[5,"mat2x3_sub","","Subtracts 'b' from 'a'.",null,{"i":[{"n":"matrix2x3"},{"n":"matrix2x3"}],"o":{"n":"matrix2x3"}}],[5,"mat3x2_sub","","Subtracts 'b' from 'a'.",null,{"i":[{"n":"matrix3x2"},{"n":"matrix3x2"}],"o":{"n":"matrix3x2"}}],[5,"mat3_sub","","Subtracts 'b' from 'a'.",null,{"i":[{"n":"matrix3"},{"n":"matrix3"}],"o":{"n":"matrix3"}}],[5,"mat3x4_sub","","Subtracts 'b' from 'a'.",null,{"i":[{"n":"matrix3x4"},{"n":"matrix3x4"}],"o":{"n":"matrix3x4"}}],[5,"mat4x3_sub","","Subtracts 'b' from 'a'.",null,{"i":[{"n":"matrix4x3"},{"n":"matrix4x3"}],"o":{"n":"matrix4x3"}}],[5,"mat4_sub","","Subtracts 'b' from 'a'.",null,{"i":[{"n":"matrix4"},{"n":"matrix4"}],"o":{"n":"matrix4"}}],[5,"vec2_add","","Adds two vectors.",null,{"i":[{"n":"vector2"},{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"vec3_add","","Adds two vectors.",null,{"i":[{"n":"vector3"},{"n":"vector3"}],"o":{"n":"vector3"}}],[5,"vec4_add","","Adds two vectors.",null,{"i":[{"n":"vector4"},{"n":"vector4"}],"o":{"n":"vector4"}}],[5,"mat2x3_add","","Adds two matrices.",null,{"i":[{"n":"matrix2x3"},{"n":"matrix2x3"}],"o":{"n":"matrix2x3"}}],[5,"mat3x2_add","","Adds two matrices.",null,{"i":[{"n":"matrix3x2"},{"n":"matrix3x2"}],"o":{"n":"matrix3x2"}}],[5,"mat3_add","","Adds two matrices.",null,{"i":[{"n":"matrix3"},{"n":"matrix3"}],"o":{"n":"matrix3"}}],[5,"mat3x4_add","","Adds two matrices.",null,{"i":[{"n":"matrix3x4"},{"n":"matrix3x4"}],"o":{"n":"matrix3x4"}}],[5,"mat4x3_add","","Adds two matrices.",null,{"i":[{"n":"matrix4x3"},{"n":"matrix4x3"}],"o":{"n":"matrix4x3"}}],[5,"mat4_add","","Adds two matrices.",null,{"i":[{"n":"matrix4"},{"n":"matrix4"}],"o":{"n":"matrix4"}}],[5,"vec2_mul","","Multiplies two vectors component wise.",null,{"i":[{"n":"vector2"},{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"vec3_mul","","Multiplies two vectors component wise.",null,{"i":[{"n":"vector3"},{"n":"vector3"}],"o":{"n":"vector3"}}],[5,"vec4_mul","","Multiplies two vectors component wise.",null,{"i":[{"n":"vector4"},{"n":"vector4"}],"o":{"n":"vector4"}}],[5,"vec2_dot","","Computes the dot product.",null,{"i":[{"n":"vector2"},{"n":"vector2"}],"o":{"n":"t"}}],[5,"vec3_dot","","Computes the dot product.",null,{"i":[{"n":"vector3"},{"n":"vector3"}],"o":{"n":"t"}}],[5,"vec4_dot","","Computes the dot product.",null,{"i":[{"n":"vector4"},{"n":"vector4"}],"o":{"n":"t"}}],[5,"vec2_square_len","","Computes the square length of a vector.",null,{"i":[{"n":"vector2"}],"o":{"n":"t"}}],[5,"vec3_square_len","","Computes the square length of a vector.",null,{"i":[{"n":"vector3"}],"o":{"n":"t"}}],[5,"vec4_square_len","","Computes the square length of a vector.",null,{"i":[{"n":"vector4"}],"o":{"n":"t"}}],[5,"vec2_cross","","Computes the cross product.",null,{"i":[{"n":"vector2"},{"n":"vector2"}],"o":{"n":"t"}}],[5,"vec3_cross","","Computes the cross product.",null,{"i":[{"n":"vector3"},{"n":"vector3"}],"o":{"n":"vector3"}}],[5,"vec2_scale","","Multiplies the vector with a scalar.",null,{"i":[{"n":"vector2"},{"n":"t"}],"o":{"n":"vector2"}}],[5,"vec3_scale","","Multiplies the vector with a scalar.",null,{"i":[{"n":"vector3"},{"n":"t"}],"o":{"n":"vector3"}}],[5,"vec4_scale","","Multiplies the vector with a scalar.",null,{"i":[{"n":"vector4"},{"n":"t"}],"o":{"n":"vector4"}}],[5,"vec2_neg","","Negates the vector.",null,{"i":[{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"vec3_neg","","Negates the vector.",null,{"i":[{"n":"vector3"}],"o":{"n":"vector3"}}],[5,"vec4_neg","","Negates the vector.",null,{"i":[{"n":"vector4"}],"o":{"n":"vector4"}}],[5,"vec2_len","","Computes the length of vector.",null,{"i":[{"n":"vector2"}],"o":{"n":"t"}}],[5,"vec3_len","","Computes the length of vector.",null,{"i":[{"n":"vector3"}],"o":{"n":"t"}}],[5,"vec4_len","","Computes the length of vector.",null,{"i":[{"n":"vector4"}],"o":{"n":"t"}}],[5,"vec2_inv_len","","Computes the inverse length of a vector.",null,{"i":[{"n":"vector2"}],"o":{"n":"t"}}],[5,"vec3_inv_len","","Computes the inverse length of a vector.",null,{"i":[{"n":"vector3"}],"o":{"n":"t"}}],[5,"vec4_inv_len","","Computes the inverse length of a vector.",null,{"i":[{"n":"vector4"}],"o":{"n":"t"}}],[5,"vec2_normalized","","Computes the normalized.",null,{"i":[{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"vec3_normalized","","Computes the normalized.",null,{"i":[{"n":"vector3"}],"o":{"n":"vector3"}}],[5,"vec4_normalized","","Computes the normalized.",null,{"i":[{"n":"vector4"}],"o":{"n":"vector4"}}],[5,"vec2_normalized_sub","","Computes the normalized difference between two vectors.",null,{"i":[{"n":"vector2"},{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"vec3_normalized_sub","","Computes the normalized difference between two vectors.",null,{"i":[{"n":"vector3"},{"n":"vector3"}],"o":{"n":"vector3"}}],[5,"vec4_normalized_sub","","Computes the normalized difference between two vectors.",null,{"i":[{"n":"vector4"},{"n":"vector4"}],"o":{"n":"vector4"}}],[5,"vec3_dot_vec2","","Computes transformed vector component.",null,{"i":[{"n":"vector3"},{"n":"vector2"}],"o":{"n":"t"}}],[5,"vec4_dot_vec3","","Computes transformed vector component.",null,{"i":[{"n":"vector4"},{"n":"vector3"}],"o":{"n":"t"}}],[5,"vec3_dot_pos2","","Computes transformed position component.",null,{"i":[{"n":"vector3"},{"n":"vector2"}],"o":{"n":"t"}}],[5,"vec4_dot_pos3","","Computes transformed position component.",null,{"i":[{"n":"vector4"},{"n":"vector3"}],"o":{"n":"t"}}],[5,"row_mat2x3_col","","Returns a column vector of a row matrix.",null,{"i":[{"n":"matrix2x3"},{"n":"usize"}],"o":{"n":"vector2"}}],[5,"col_mat2x3_row","","Returns a row vector of a column matrix.",null,{"i":[{"n":"matrix2x3"},{"n":"usize"}],"o":{"n":"vector2"}}],[5,"row_mat3x2_col","","Returns a column vector of a row matrix.",null,{"i":[{"n":"matrix3x2"},{"n":"usize"}],"o":{"n":"vector3"}}],[5,"col_mat3x2_row","","Returns a row vector of a column matrix.",null,{"i":[{"n":"matrix3x2"},{"n":"usize"}],"o":{"n":"vector3"}}],[5,"row_mat3_col","","Returns a column vector of a row matrix.",null,{"i":[{"n":"matrix3"},{"n":"usize"}],"o":{"n":"vector3"}}],[5,"col_mat3_row","","Returns a row vector of a column matrix.",null,{"i":[{"n":"matrix3"},{"n":"usize"}],"o":{"n":"vector3"}}],[5,"row_mat3x4_col","","Returns a column vector of a row matrix.",null,{"i":[{"n":"matrix3x4"},{"n":"usize"}],"o":{"n":"vector3"}}],[5,"col_mat3x4_row","","Returns a row vector of a column matrix.",null,{"i":[{"n":"matrix3x4"},{"n":"usize"}],"o":{"n":"vector3"}}],[5,"row_mat4x3_col","","Returns a column vector of a row matrix.",null,{"i":[{"n":"matrix4x3"},{"n":"usize"}],"o":{"n":"vector4"}}],[5,"col_mat4x3_row","","Returns a column vector of a row matrix.",null,{"i":[{"n":"matrix4x3"},{"n":"usize"}],"o":{"n":"vector4"}}],[5,"row_mat4_col","","Returns a column vector of a row matrix.",null,{"i":[{"n":"matrix4"},{"n":"usize"}],"o":{"n":"vector4"}}],[5,"col_mat4_row","","Returns a row vector of a column matrix.",null,{"i":[{"n":"matrix4"},{"n":"usize"}],"o":{"n":"vector4"}}],[5,"mat2x3_transposed","","Constructs the transpose of a matrix.",null,{"i":[{"n":"matrix2x3"}],"o":{"n":"matrix3x2"}}],[5,"mat3x2_transposed","","Constructs the transpose of a matrix.",null,{"i":[{"n":"matrix3x2"}],"o":{"n":"matrix2x3"}}],[5,"mat3_transposed","","Constructs the transpose of a matrix.",null,{"i":[{"n":"matrix3"}],"o":{"n":"matrix3"}}],[5,"mat3x4_transposed","","Constructs the transpose of a matrix.",null,{"i":[{"n":"matrix3x4"}],"o":{"n":"matrix4x3"}}],[5,"mat4x3_transposed","","Constructs the transpose of a matrix.",null,{"i":[{"n":"matrix4x3"}],"o":{"n":"matrix3x4"}}],[5,"mat4_transposed","","Constructs the transpose of a matrix.",null,{"i":[{"n":"matrix4"}],"o":{"n":"matrix4"}}],[5,"col_mat3_transform","","Transforms a 3D vector through a matrix.",null,{"i":[{"n":"matrix3"},{"n":"vector3"}],"o":{"n":"vector3"}}],[5,"col_mat4_transform","","Transforms a 4D vector through a matrix.",null,{"i":[{"n":"matrix4"},{"n":"vector4"}],"o":{"n":"vector4"}}],[5,"row_mat3_transform","","Transforms a 3D vector through a matrix.",null,{"i":[{"n":"matrix3"},{"n":"vector3"}],"o":{"n":"vector3"}}],[5,"row_mat4_transform","","Transforms a 4D vector through a matrix.",null,{"i":[{"n":"matrix4"},{"n":"vector4"}],"o":{"n":"vector4"}}],[5,"row_mat2x3_transform_pos2","","Transforms a 2D position through matrix.",null,{"i":[{"n":"matrix2x3"},{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"col_mat3x2_transform_pos2","","Transforms a 2D position through matrix.",null,{"i":[{"n":"matrix3x2"},{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"row_mat3_transform_pos2","","Transforms a 2D position through row matrix.",null,{"i":[{"n":"matrix3"},{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"col_mat3_transform_pos2","","Transforms a 2D position through column matrix.",null,{"i":[{"n":"matrix3"},{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"row_mat3x4_transform_pos3","","Transforms a 3D position through matrix.",null,{"i":[{"n":"matrix3x4"},{"n":"vector3"}],"o":{"n":"vector3"}}],[5,"col_mat4x3_transform_pos3","","Transforms a 3D position through matrix.",null,{"i":[{"n":"matrix4x3"},{"n":"vector3"}],"o":{"n":"vector3"}}],[5,"row_mat2x3_transform_vec2","","Transforms a 2D vector through matrix.",null,{"i":[{"n":"matrix2x3"},{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"col_mat3x2_transform_vec2","","Transforms a 2D vector through matrix.",null,{"i":[{"n":"matrix3x2"},{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"row_mat3_transform_vec2","","Transforms a 2D vector through row matrix.",null,{"i":[{"n":"matrix3"},{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"col_mat3_transform_vec2","","Transforms a 2D vector through column matrix.",null,{"i":[{"n":"matrix3"},{"n":"vector2"}],"o":{"n":"vector2"}}],[5,"row_mat3x4_transform_vec3","","Transforms a 3D vector through matrix.",null,{"i":[{"n":"matrix3x4"},{"n":"vector3"}],"o":{"n":"vector3"}}],[5,"col_mat4x3_transform_vec3","","Transforms a 3D vector through matrix.",null,{"i":[{"n":"matrix4x3"},{"n":"vector3"}],"o":{"n":"vector3"}}],[5,"mat2x3_det","","Computes the determinant of a matrix.",null,{"i":[{"n":"matrix2x3"}],"o":{"n":"t"}}],[5,"mat3x2_det","","Computes the determinant of a matrix.",null,{"i":[{"n":"matrix3x2"}],"o":{"n":"t"}}],[5,"mat3_det","","Computes the determinant of a matrix.",null,{"i":[{"n":"matrix3"}],"o":{"n":"t"}}],[5,"mat3x4_det","","Computes the determinant of a matrix.",null,{"i":[{"n":"matrix3x4"}],"o":{"n":"t"}}],[5,"mat4x3_det","","Computes the determinant of a matrix.",null,{"i":[{"n":"matrix4x3"}],"o":{"n":"t"}}],[5,"mat4_det","","Computes the determinant of a 4x4 matrix.",null,{"i":[{"n":"matrix4"}],"o":{"n":"t"}}],[5,"mat2x3_inv_det","","Computes inverse determinant of a 2x3 matrix.",null,{"i":[{"n":"matrix2x3"}],"o":{"n":"t"}}],[5,"mat3x2_inv_det","","Computes inverse determinant of a 3x2 matrix.",null,{"i":[{"n":"matrix3x2"}],"o":{"n":"t"}}],[5,"mat3_inv_det","","Computes inverse determinant of a 3x3 matrix.",null,{"i":[{"n":"matrix3"}],"o":{"n":"t"}}],[5,"mat3x4_inv_det","","Computes inverse determinant of a 3x4 matrix.",null,{"i":[{"n":"matrix3x4"}],"o":{"n":"t"}}],[5,"mat4x3_inv_det","","Computes inverse determinant of a 4x3 matrix.",null,{"i":[{"n":"matrix4x3"}],"o":{"n":"t"}}],[5,"mat4_inv_det","","Computes the inverse determinant of a 4x4 matrix.",null,{"i":[{"n":"matrix4"}],"o":{"n":"t"}}],[5,"mat2x3_inv","","Computes the inverse of a 2x3 matrix.",null,{"i":[{"n":"matrix2x3"}],"o":{"n":"matrix2x3"}}],[5,"mat3x2_inv","","Computes the inverse of a 3x2 matrix.",null,{"i":[{"n":"matrix3x2"}],"o":{"n":"matrix3x2"}}],[5,"mat3_inv","","Computes the inverse of a 3x3 matrix.",null,{"i":[{"n":"matrix3"}],"o":{"n":"matrix3"}}],[5,"mat3x4_inv","","Computes the inverse of a 3x4 matrix.",null,{"i":[{"n":"matrix3x4"}],"o":{"n":"matrix3x4"}}],[5,"mat4x3_inv","","Computes the inverse of a 4x3 matrix.",null,{"i":[{"n":"matrix4x3"}],"o":{"n":"matrix4x3"}}],[5,"mat4_inv","","Computes the inverse of a 4x4 matrix.",null,{"i":[{"n":"matrix4"}],"o":{"n":"matrix4"}}],[0,"traits","","Various useful traits",null,null],[8,"Float","vecmath::traits","Convenience trait for floats.",null,null],[8,"Min","","Minimum value.",null,null],[10,"min","","Returns the minimum value of self or other.",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"Max","","Maximum value.",null,null],[10,"max","","Returns the maximum value of self or other.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"Signum","","The sign of the number.",null,null],[10,"signum","","Returns number representing the sign of self",2,{"i":[{"n":"self"}],"o":{"n":"self"}}],[8,"Powf","","Floating number power.",null,null],[10,"powf","","Returns floating power of the number.",3,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"Radians","","Useful constants for radians.",null,null],[10,"_90","","Returns radians corresponding to 90 degrees.",4,{"o":{"n":"self"}}],[10,"_180","","Returns radians corresponding to 180 degrees.",4,{"o":{"n":"self"}}],[10,"_360","","Returns radians corresponding to 360 degrees.",4,{"o":{"n":"self"}}],[10,"deg_to_rad","","Convert a value to radians from degrees. Equivalent to `value * (π / 180)`.",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"rad_to_deg","","Convert a value to degrees from radians. Equivalent to `value * (180 / π)`.",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[8,"One","","Number 1.",null,null],[10,"one","","Returns 1.",5,{"o":{"n":"self"}}],[8,"Zero","","Number 0.",null,null],[10,"zero","","Returns 0.",6,{"o":{"n":"self"}}],[8,"Sqrt","","Square root.",null,null],[10,"sqrt","","Returns square root.",7,{"i":[{"n":"self"}],"o":{"n":"self"}}],[8,"Trig","","Basic trigonometry functions",null,null],[10,"sin","","Returns sine of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Returns cosine of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Returns tangent of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Returns inverse sine of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Returns inverse cosine of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Returns inverse tangent of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Returns the four quadrant arctangent of self (y) and other (x).",8,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Returns hyperbolic sine of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Returns hyperbolic cosine of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Returns hyperbolic tangent of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Returns inverse hyperbolic sine of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Returns inverse hyperbolic cosine of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Returns inverse hyperbolic tangent of self.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[8,"Cast","","Casts into another type.",null,null],[10,"cast","","Casts into other type.",9,{"i":[{"n":"self"}],"o":{"n":"t"}}],[8,"FromPrimitive","","Trait for converting from different numeric types",null,null],[10,"from_f64","","from a f64",10,{"i":[{"n":"f64"}],"o":{"n":"self"}}],[10,"from_f32","","from a f32",10,{"i":[{"n":"f32"}],"o":{"n":"self"}}],[10,"from_isize","","from a isze",10,{"i":[{"n":"isize"}],"o":{"n":"self"}}],[10,"from_u32","","from a u32",10,{"i":[{"n":"u32"}],"o":{"n":"self"}}],[10,"from_i32","","from a i32",10,{"i":[{"n":"i32"}],"o":{"n":"self"}}],[6,"Vector2","vecmath","A 2D vector.",null,null],[6,"Vector3","","A 3D vector.",null,null],[6,"Vector4","","A 4D vector.",null,null],[6,"Matrix2x3","","A 2x3 matrix.",null,null],[6,"Matrix3x2","","A 3x2 matrix.",null,null],[6,"Matrix3","","A 3x3 matrix.",null,null],[6,"Matrix3x4","","A 3x4 matrix.",null,null],[6,"Matrix4x3","","A 4x3 matrix.",null,null],[6,"Matrix4","","A 4x4 matrix.",null,null]],"paths":[[8,"Min"],[8,"Max"],[8,"Signum"],[8,"Powf"],[8,"Radians"],[8,"One"],[8,"Zero"],[8,"Sqrt"],[8,"Trig"],[8,"Cast"],[8,"FromPrimitive"]]};
searchIndex["viewport"] = {"doc":"A library for storing viewport information","items":[[3,"Viewport","viewport","Stores viewport information.",null,null],[12,"rect","","Viewport in pixels. `[x, y, width height]` where `(x, y)` is lower left corner.",0,null],[12,"draw_size","","The size of frame buffer in pixels.",0,null],[12,"window_size","","The size of window in points.",0,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"viewport"}}],[11,"abs_transform","","Computes absolute transform for 2D graphics, which uses a row major 2x3 matrix. The origin is in the upper left corner of the viewport rectangle. The x axis points to the right, and the y axis points down. The units are in points (window coordinates).",0,null]],"paths":[[3,"Viewport"]]};
searchIndex["void"] = {"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,null],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,{"i":[{"n":"self"}],"o":{"n":"e"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"void"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["ordering"],"n":"option"}}]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["wayland_client"] = {"doc":"Client-side Wayland connector","items":[[3,"State","wayland_client","A token store",null,null],[3,"StateProxy","","A Proxy representing a `Store` with ongoing borrows",null,null],[3,"StateToken","","A token for accessing the store contents",null,null],[3,"EnvHandler","","Utility type to handle the registry and global objects",null,null],[3,"EnvNotify","","An implementation to receive globals notifications for the EnvHandler",null,null],[12,"new_global","","A new global was advertized by the server",0,null],[12,"del_global","","A global was removed by the server",0,null],[12,"ready","","The EnvHandler is ready",0,null],[3,"EventQueue","","An event queue managing wayland events",null,null],[3,"EventQueueHandle","","Handle to an event queue",null,null],[3,"ReadEventsGuard","","A guard over a read intention.",null,null],[4,"ConnectError","","Enum representing the possible reasons why connecting to the wayland server failed",null,null],[13,"NoWaylandLib","","The library was compiled with the `dlopen` feature, and the `libwayland-client.so` library could not be found at runtime",1,null],[13,"NoCompositorListening","","Any needed library was found, but the listening socket of the server could not be found.",1,null],[4,"FatalError","","Enum representing possible errors fatal to a wayland session",null,null],[13,"Io","","Session aborted after an I/O error",2,null],[13,"Protocol","","Session aborted after a protocol error",2,null],[12,"interface","wayland_client::FatalError","name of the interface of the proxy that generated this error",2,null],[12,"proxy_id","","internal id of the proxy that generated this error",2,null],[12,"error_code","","code of the error, as defined by the `Error` enum of the interface of the proxy. It can directly be fed to the `from_raw` static method of this enum.",2,null],[4,"RegisterStatus","wayland_client","Status of a registration attempt of a proxy.",null,null],[13,"Registered","","The proxy was properly registered to this event queue & handler.",3,null],[13,"Unmanaged","","The proxy was not registered because it is not managed by `wayland-client`.",3,null],[13,"Dead","","The proxy was not registered because it is already destroyed.",3,null],[4,"RequestResult","","Possible outcome of the call of a request on a proxy",null,null],[13,"Sent","","Message has been buffered and will be sent to server",4,null],[13,"Destroyed","","This proxy is already destroyed, request has been ignored",4,null],[4,"Liveness","","Represents the state of liveness of a wayland object",null,null],[13,"Alive","","This object is alive and its requests can be called",5,null],[13,"Dead","","This object is dead, calling its requests will do nothing and return and error.",5,null],[13,"Unmanaged","","This object is not managed by `wayland-client`, you can call its methods but this might crash the program if it was actually dead.",5,null],[5,"connect_to","","Connect to the compositor socket",null,{"i":[{"n":"osstr"}],"o":{"g":["connecterror"],"n":"result"}}],[5,"default_connect","","Connect to the compositor socket",null,{"o":{"g":["connecterror"],"n":"result"}}],[0,"protocol","","The wayland core protocol",null,null],[0,"wl_display","wayland_client::protocol","core global object",null,null],[3,"WlDisplay","wayland_client::protocol::wl_display","",null,null],[4,"Error","","global error values",null,null],[13,"InvalidObject","","server couldn't find object",6,null],[13,"InvalidMethod","","method doesn't exist on the specified interface",6,null],[13,"NoMemory","","server is out of memory",6,null],[0,"wl_registry","wayland_client::protocol","global registry object",null,null],[3,"WlRegistry","wayland_client::protocol::wl_registry","",null,null],[3,"Implementation","","",null,null],[12,"global","","announce global object",7,null],[12,"global_remove","","announce removal of global object",7,null],[0,"wl_callback","wayland_client::protocol","callback object",null,null],[3,"WlCallback","wayland_client::protocol::wl_callback","",null,null],[3,"Implementation","","",null,null],[12,"done","","done event",8,null],[0,"wl_compositor","wayland_client::protocol","the compositor singleton",null,null],[3,"WlCompositor","wayland_client::protocol::wl_compositor","",null,null],[0,"wl_shm_pool","wayland_client::protocol","a shared memory pool",null,null],[3,"WlShmPool","wayland_client::protocol::wl_shm_pool","",null,null],[0,"wl_shm","wayland_client::protocol","shared memory support",null,null],[3,"WlShm","wayland_client::protocol::wl_shm","",null,null],[3,"Implementation","","",null,null],[12,"format","","pixel format description",9,null],[4,"Error","","wl_shm error values",null,null],[13,"InvalidFormat","","buffer format is not known",10,null],[13,"InvalidStride","","invalid size or stride during pool or buffer creation",10,null],[13,"InvalidFd","","mmapping the file descriptor failed",10,null],[4,"Format","","pixel formats",null,null],[13,"Argb8888","","32-bit ARGB format, [31:0] A:R:G:B 8:8:8:8 little endian",11,null],[13,"Xrgb8888","","32-bit RGB format, [31:0] x:R:G:B 8:8:8:8 little endian",11,null],[13,"C8","","8-bit color index format, [7:0] C",11,null],[13,"Rgb332","","8-bit RGB format, [7:0] R:G:B 3:3:2",11,null],[13,"Bgr233","","8-bit BGR format, [7:0] B:G:R 2:3:3",11,null],[13,"Xrgb4444","","16-bit xRGB format, [15:0] x:R:G:B 4:4:4:4 little endian",11,null],[13,"Xbgr4444","","16-bit xBGR format, [15:0] x:B:G:R 4:4:4:4 little endian",11,null],[13,"Rgbx4444","","16-bit RGBx format, [15:0] R:G:B:x 4:4:4:4 little endian",11,null],[13,"Bgrx4444","","16-bit BGRx format, [15:0] B:G:R:x 4:4:4:4 little endian",11,null],[13,"Argb4444","","16-bit ARGB format, [15:0] A:R:G:B 4:4:4:4 little endian",11,null],[13,"Abgr4444","","16-bit ABGR format, [15:0] A:B:G:R 4:4:4:4 little endian",11,null],[13,"Rgba4444","","16-bit RBGA format, [15:0] R:G:B:A 4:4:4:4 little endian",11,null],[13,"Bgra4444","","16-bit BGRA format, [15:0] B:G:R:A 4:4:4:4 little endian",11,null],[13,"Xrgb1555","","16-bit xRGB format, [15:0] x:R:G:B 1:5:5:5 little endian",11,null],[13,"Xbgr1555","","16-bit xBGR 1555 format, [15:0] x:B:G:R 1:5:5:5 little endian",11,null],[13,"Rgbx5551","","16-bit RGBx 5551 format, [15:0] R:G:B:x 5:5:5:1 little endian",11,null],[13,"Bgrx5551","","16-bit BGRx 5551 format, [15:0] B:G:R:x 5:5:5:1 little endian",11,null],[13,"Argb1555","","16-bit ARGB 1555 format, [15:0] A:R:G:B 1:5:5:5 little endian",11,null],[13,"Abgr1555","","16-bit ABGR 1555 format, [15:0] A:B:G:R 1:5:5:5 little endian",11,null],[13,"Rgba5551","","16-bit RGBA 5551 format, [15:0] R:G:B:A 5:5:5:1 little endian",11,null],[13,"Bgra5551","","16-bit BGRA 5551 format, [15:0] B:G:R:A 5:5:5:1 little endian",11,null],[13,"Rgb565","","16-bit RGB 565 format, [15:0] R:G:B 5:6:5 little endian",11,null],[13,"Bgr565","","16-bit BGR 565 format, [15:0] B:G:R 5:6:5 little endian",11,null],[13,"Rgb888","","24-bit RGB format, [23:0] R:G:B little endian",11,null],[13,"Bgr888","","24-bit BGR format, [23:0] B:G:R little endian",11,null],[13,"Xbgr8888","","32-bit xBGR format, [31:0] x:B:G:R 8:8:8:8 little endian",11,null],[13,"Rgbx8888","","32-bit RGBx format, [31:0] R:G:B:x 8:8:8:8 little endian",11,null],[13,"Bgrx8888","","32-bit BGRx format, [31:0] B:G:R:x 8:8:8:8 little endian",11,null],[13,"Abgr8888","","32-bit ABGR format, [31:0] A:B:G:R 8:8:8:8 little endian",11,null],[13,"Rgba8888","","32-bit RGBA format, [31:0] R:G:B:A 8:8:8:8 little endian",11,null],[13,"Bgra8888","","32-bit BGRA format, [31:0] B:G:R:A 8:8:8:8 little endian",11,null],[13,"Xrgb2101010","","32-bit xRGB format, [31:0] x:R:G:B 2:10:10:10 little endian",11,null],[13,"Xbgr2101010","","32-bit xBGR format, [31:0] x:B:G:R 2:10:10:10 little endian",11,null],[13,"Rgbx1010102","","32-bit RGBx format, [31:0] R:G:B:x 10:10:10:2 little endian",11,null],[13,"Bgrx1010102","","32-bit BGRx format, [31:0] B:G:R:x 10:10:10:2 little endian",11,null],[13,"Argb2101010","","32-bit ARGB format, [31:0] A:R:G:B 2:10:10:10 little endian",11,null],[13,"Abgr2101010","","32-bit ABGR format, [31:0] A:B:G:R 2:10:10:10 little endian",11,null],[13,"Rgba1010102","","32-bit RGBA format, [31:0] R:G:B:A 10:10:10:2 little endian",11,null],[13,"Bgra1010102","","32-bit BGRA format, [31:0] B:G:R:A 10:10:10:2 little endian",11,null],[13,"Yuyv","","packed YCbCr format, [31:0] Cr0:Y1:Cb0:Y0 8:8:8:8 little endian",11,null],[13,"Yvyu","","packed YCbCr format, [31:0] Cb0:Y1:Cr0:Y0 8:8:8:8 little endian",11,null],[13,"Uyvy","","packed YCbCr format, [31:0] Y1:Cr0:Y0:Cb0 8:8:8:8 little endian",11,null],[13,"Vyuy","","packed YCbCr format, [31:0] Y1:Cb0:Y0:Cr0 8:8:8:8 little endian",11,null],[13,"Ayuv","","packed AYCbCr format, [31:0] A:Y:Cb:Cr 8:8:8:8 little endian",11,null],[13,"Nv12","","2 plane YCbCr Cr:Cb format, 2x2 subsampled Cr:Cb plane",11,null],[13,"Nv21","","2 plane YCbCr Cb:Cr format, 2x2 subsampled Cb:Cr plane",11,null],[13,"Nv16","","2 plane YCbCr Cr:Cb format, 2x1 subsampled Cr:Cb plane",11,null],[13,"Nv61","","2 plane YCbCr Cb:Cr format, 2x1 subsampled Cb:Cr plane",11,null],[13,"Yuv410","","3 plane YCbCr format, 4x4 subsampled Cb (1) and Cr (2) planes",11,null],[13,"Yvu410","","3 plane YCbCr format, 4x4 subsampled Cr (1) and Cb (2) planes",11,null],[13,"Yuv411","","3 plane YCbCr format, 4x1 subsampled Cb (1) and Cr (2) planes",11,null],[13,"Yvu411","","3 plane YCbCr format, 4x1 subsampled Cr (1) and Cb (2) planes",11,null],[13,"Yuv420","","3 plane YCbCr format, 2x2 subsampled Cb (1) and Cr (2) planes",11,null],[13,"Yvu420","","3 plane YCbCr format, 2x2 subsampled Cr (1) and Cb (2) planes",11,null],[13,"Yuv422","","3 plane YCbCr format, 2x1 subsampled Cb (1) and Cr (2) planes",11,null],[13,"Yvu422","","3 plane YCbCr format, 2x1 subsampled Cr (1) and Cb (2) planes",11,null],[13,"Yuv444","","3 plane YCbCr format, non-subsampled Cb (1) and Cr (2) planes",11,null],[13,"Yvu444","","3 plane YCbCr format, non-subsampled Cr (1) and Cb (2) planes",11,null],[0,"wl_buffer","wayland_client::protocol","content for a wl_surface",null,null],[3,"WlBuffer","wayland_client::protocol::wl_buffer","",null,null],[3,"Implementation","","",null,null],[12,"release","","compositor releases buffer",12,null],[0,"wl_data_offer","wayland_client::protocol","offer to transfer data",null,null],[3,"WlDataOffer","wayland_client::protocol::wl_data_offer","",null,null],[3,"Implementation","","",null,null],[12,"offer","","advertise offered mime type",13,null],[12,"source_actions","","notify the source-side available actions",13,null],[12,"action","","notify the selected action",13,null],[4,"Error","","",null,null],[13,"InvalidFinish","","finish request was called untimely",14,null],[13,"InvalidActionMask","","action mask contains invalid values",14,null],[13,"InvalidAction","","action argument has an invalid value",14,null],[13,"InvalidOffer","","offer doesn't accept this request",14,null],[0,"wl_data_source","wayland_client::protocol","offer to transfer data",null,null],[3,"WlDataSource","wayland_client::protocol::wl_data_source","",null,null],[3,"Implementation","","",null,null],[12,"target","","a target accepts an offered mime type",15,null],[12,"send","","send the data",15,null],[12,"cancelled","","selection was cancelled",15,null],[12,"dnd_drop_performed","","the drag-and-drop operation physically finished",15,null],[12,"dnd_finished","","the drag-and-drop operation concluded",15,null],[12,"action","","notify the selected action",15,null],[4,"Error","","",null,null],[13,"InvalidActionMask","","action mask contains invalid values",16,null],[13,"InvalidSource","","source doesn't accept this request",16,null],[0,"wl_data_device","wayland_client::protocol","data transfer device",null,null],[3,"WlDataDevice","wayland_client::protocol::wl_data_device","",null,null],[3,"Implementation","","",null,null],[12,"data_offer","","introduce a new wl_data_offer",17,null],[12,"enter","","initiate drag-and-drop session",17,null],[12,"leave","","end drag-and-drop session",17,null],[12,"motion","","drag-and-drop session motion",17,null],[12,"drop","","end drag-and-drop session successfully",17,null],[12,"selection","","advertise new selection",17,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",18,null],[0,"wl_data_device_manager","wayland_client::protocol","data transfer interface",null,null],[3,"WlDataDeviceManager","wayland_client::protocol::wl_data_device_manager","",null,null],[3,"DndAction","","drag and drop actions",null,null],[0,"wl_shell","wayland_client::protocol","create desktop-style surfaces",null,null],[3,"WlShell","wayland_client::protocol::wl_shell","",null,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",19,null],[0,"wl_shell_surface","wayland_client::protocol","desktop-style metadata interface",null,null],[3,"WlShellSurface","wayland_client::protocol::wl_shell_surface","",null,null],[3,"Resize","","edge values for resizing",null,null],[3,"Transient","","details of transient behaviour",null,null],[3,"Implementation","","",null,null],[12,"ping","","ping client",20,null],[12,"configure","","suggest resize",20,null],[12,"popup_done","","popup interaction is done",20,null],[4,"FullscreenMethod","","different method to set the surface fullscreen",null,null],[13,"Default","","no preference, apply default policy",21,null],[13,"Scale","","scale, preserve the surface's aspect ratio and center on output",21,null],[13,"Driver","","switch output mode to the smallest mode that can fit the surface, add black borders to compensate size mismatch",21,null],[13,"Fill","","no upscaling, center on output and add black borders to compensate size mismatch",21,null],[0,"wl_surface","wayland_client::protocol","an onscreen surface",null,null],[3,"WlSurface","wayland_client::protocol::wl_surface","",null,null],[3,"Implementation","","",null,null],[12,"enter","","surface enters an output",22,null],[12,"leave","","surface leaves an output",22,null],[4,"Error","","wl_surface error values",null,null],[13,"InvalidScale","","buffer scale value is invalid",23,null],[13,"InvalidTransform","","buffer transform value is invalid",23,null],[0,"wl_seat","wayland_client::protocol","group of input devices",null,null],[3,"WlSeat","wayland_client::protocol::wl_seat","",null,null],[3,"Capability","","seat capability bitmask",null,null],[3,"Implementation","","",null,null],[12,"capabilities","","seat capabilities changed",24,null],[12,"name","","unique identifier for this seat",24,null],[0,"wl_pointer","wayland_client::protocol","pointer input device",null,null],[3,"WlPointer","wayland_client::protocol::wl_pointer","",null,null],[3,"Implementation","","",null,null],[12,"enter","","enter event",25,null],[12,"leave","","leave event",25,null],[12,"motion","","pointer motion event",25,null],[12,"button","","pointer button event",25,null],[12,"axis","","axis event",25,null],[12,"frame","","end of a pointer event sequence",25,null],[12,"axis_source","","axis source event",25,null],[12,"axis_stop","","axis stop event",25,null],[12,"axis_discrete","","axis click event",25,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",26,null],[4,"ButtonState","","physical button state",null,null],[13,"Released","","the button is not pressed",27,null],[13,"Pressed","","the button is pressed",27,null],[4,"Axis","","axis types",null,null],[13,"VerticalScroll","","vertical axis",28,null],[13,"HorizontalScroll","","horizontal axis",28,null],[4,"AxisSource","","axis source types",null,null],[13,"Wheel","","a physical wheel",29,null],[13,"Finger","","finger on a touch surface",29,null],[13,"Continuous","","continuous coordinate space",29,null],[0,"wl_keyboard","wayland_client::protocol","keyboard input device",null,null],[3,"WlKeyboard","wayland_client::protocol::wl_keyboard","",null,null],[3,"Implementation","","",null,null],[12,"keymap","","keyboard mapping",30,null],[12,"enter","","enter event",30,null],[12,"leave","","leave event",30,null],[12,"key","","key event",30,null],[12,"modifiers","","modifier and group state",30,null],[12,"repeat_info","","repeat rate and delay",30,null],[4,"KeymapFormat","","keyboard mapping format",null,null],[13,"NoKeymap","","no keymap; client must understand how to interpret the raw keycode",31,null],[13,"XkbV1","","libxkbcommon compatible; to determine the xkb keycode, clients must add 8 to the key event keycode",31,null],[4,"KeyState","","physical key state",null,null],[13,"Released","","key is not pressed",32,null],[13,"Pressed","","key is pressed",32,null],[0,"wl_touch","wayland_client::protocol","touchscreen input device",null,null],[3,"WlTouch","wayland_client::protocol::wl_touch","",null,null],[3,"Implementation","","",null,null],[12,"down","","touch down event and beginning of a touch sequence",33,null],[12,"up","","end of a touch event sequence",33,null],[12,"motion","","update of touch point coordinates",33,null],[12,"frame","","end of touch frame event",33,null],[12,"cancel","","touch session cancelled",33,null],[0,"wl_output","wayland_client::protocol","compositor output region",null,null],[3,"WlOutput","wayland_client::protocol::wl_output","",null,null],[3,"Mode","","mode information",null,null],[3,"Implementation","","",null,null],[12,"geometry","","properties of the output",34,null],[12,"mode","","advertise available modes for the output",34,null],[12,"done","","sent all information about output",34,null],[12,"scale","","output scaling properties",34,null],[4,"Subpixel","","subpixel geometry information",null,null],[13,"Unknown","","unknown geometry",35,null],[13,"None","","no geometry",35,null],[13,"HorizontalRgb","","horizontal RGB",35,null],[13,"HorizontalBgr","","horizontal BGR",35,null],[13,"VerticalRgb","","vertical RGB",35,null],[13,"VerticalBgr","","vertical BGR",35,null],[4,"Transform","","transform from framebuffer to output",null,null],[13,"Normal","","no transform",36,null],[13,"_90","","90 degrees counter-clockwise",36,null],[13,"_180","","180 degrees counter-clockwise",36,null],[13,"_270","","270 degrees counter-clockwise",36,null],[13,"Flipped","","180 degree flip around a vertical axis",36,null],[13,"Flipped90","","flip and rotate 90 degrees counter-clockwise",36,null],[13,"Flipped180","","flip and rotate 180 degrees counter-clockwise",36,null],[13,"Flipped270","","flip and rotate 270 degrees counter-clockwise",36,null],[0,"wl_region","wayland_client::protocol","region interface",null,null],[3,"WlRegion","wayland_client::protocol::wl_region","",null,null],[0,"wl_subcompositor","wayland_client::protocol","sub-surface compositing",null,null],[3,"WlSubcompositor","wayland_client::protocol::wl_subcompositor","",null,null],[4,"Error","","",null,null],[13,"BadSurface","","the to-be sub-surface is invalid",37,null],[0,"wl_subsurface","wayland_client::protocol","sub-surface interface to a wl_surface",null,null],[3,"WlSubsurface","wayland_client::protocol::wl_subsurface","",null,null],[4,"Error","","",null,null],[13,"BadSurface","","wl_surface is not a sibling or the parent",38,null],[0,"protocol_interfaces","wayland_client","Interfaces for the core protocol",null,null],[7,"wl_display_requests","wayland_client::protocol_interfaces","",null,null],[7,"wl_display_events","","",null,null],[7,"wl_display_interface","","",null,null],[7,"wl_registry_requests","","",null,null],[7,"wl_registry_events","","",null,null],[7,"wl_registry_interface","","",null,null],[7,"wl_callback_events","","",null,null],[7,"wl_callback_interface","","",null,null],[7,"wl_compositor_requests","","",null,null],[7,"wl_compositor_interface","","",null,null],[7,"wl_shm_pool_requests","","",null,null],[7,"wl_shm_pool_interface","","",null,null],[7,"wl_shm_requests","","",null,null],[7,"wl_shm_events","","",null,null],[7,"wl_shm_interface","","",null,null],[7,"wl_buffer_requests","","",null,null],[7,"wl_buffer_events","","",null,null],[7,"wl_buffer_interface","","",null,null],[7,"wl_data_offer_requests","","",null,null],[7,"wl_data_offer_events","","",null,null],[7,"wl_data_offer_interface","","",null,null],[7,"wl_data_source_requests","","",null,null],[7,"wl_data_source_events","","",null,null],[7,"wl_data_source_interface","","",null,null],[7,"wl_data_device_requests","","",null,null],[7,"wl_data_device_events","","",null,null],[7,"wl_data_device_interface","","",null,null],[7,"wl_data_device_manager_requests","","",null,null],[7,"wl_data_device_manager_interface","","",null,null],[7,"wl_shell_requests","","",null,null],[7,"wl_shell_interface","","",null,null],[7,"wl_shell_surface_requests","","",null,null],[7,"wl_shell_surface_events","","",null,null],[7,"wl_shell_surface_interface","","",null,null],[7,"wl_surface_requests","","",null,null],[7,"wl_surface_events","","",null,null],[7,"wl_surface_interface","","",null,null],[7,"wl_seat_requests","","",null,null],[7,"wl_seat_events","","",null,null],[7,"wl_seat_interface","","",null,null],[7,"wl_pointer_requests","","",null,null],[7,"wl_pointer_events","","",null,null],[7,"wl_pointer_interface","","",null,null],[7,"wl_keyboard_requests","","",null,null],[7,"wl_keyboard_events","","",null,null],[7,"wl_keyboard_interface","","",null,null],[7,"wl_touch_requests","","",null,null],[7,"wl_touch_events","","",null,null],[7,"wl_touch_interface","","",null,null],[7,"wl_output_requests","","",null,null],[7,"wl_output_events","","",null,null],[7,"wl_output_interface","","",null,null],[7,"wl_region_requests","","",null,null],[7,"wl_region_interface","","",null,null],[7,"wl_subcompositor_requests","","",null,null],[7,"wl_subcompositor_interface","","",null,null],[7,"wl_subsurface_requests","","",null,null],[7,"wl_subsurface_interface","","",null,null],[11,"fmt","wayland_client","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"flush","wayland_client::protocol::wl_display","Non-blocking write to the server",39,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"result"}}],[11,"create_event_queue","","Create a new EventQueue",39,{"i":[{"n":"self"}],"o":{"n":"eventqueue"}}],[11,"last_error","","Get the last error that occured on the session",39,{"i":[{"n":"self"}],"o":{"g":["fatalerror"],"n":"option"}}],[11,"get_fd","","Get the raw File Descriptor associated with the connection",39,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"disconnect","","Close the wayland connection",39,{"i":[{"n":"self"}]}],[11,"register","wayland_client","Register a proxy to this event queue.",40,null],[11,"state","","Get a handle to the internal state",40,{"i":[{"n":"self"}],"o":{"n":"state"}}],[11,"dispatch","","Dispatches events from the internal buffer.",41,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"ioresult"}}],[11,"dispatch_pending","","Dispatches pending events from the internal buffer.",41,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"ioresult"}}],[11,"sync_roundtrip","","Synchronous roundtrip",41,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"ioresult"}}],[11,"prepare_read","","Prepare an conccurent read",41,{"i":[{"n":"self"}],"o":{"g":["readeventsguard"],"n":"option"}}],[11,"deref","","",41,{"i":[{"n":"self"}],"o":{"n":"eventqueuehandle"}}],[11,"deref_mut","","",41,{"i":[{"n":"self"}],"o":{"n":"eventqueuehandle"}}],[11,"read_events","","Read events",42,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"ioresult"}}],[11,"cancel","","Cancel the read",42,{"i":[{"n":"self"}]}],[11,"drop","","",42,{"i":[{"n":"self"}]}],[11,"init","","Insert a new EnvHandler in this event queue and register the registry to it",43,{"i":[{"n":"eventqueuehandle"},{"n":"wlregistry"}],"o":{"g":["envhandler"],"n":"statetoken"}}],[11,"init_with_notify","","Insert a new EnvHandler in this event queue with a notify implementation",43,{"i":[{"n":"eventqueuehandle"},{"n":"wlregistry"},{"n":"envnotify"},{"n":"id"}],"o":{"g":["envhandler"],"n":"statetoken"}}],[11,"ready","","Is the handler ready",43,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"globals","","List of advertised globals",43,null],[11,"clone_inner","","Retrieve an owned copy of the environment",43,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"deref","","",43,{"i":[{"n":"self"}],"o":{"n":"h"}}],[0,"egl","","EGL utilities",null,null],[3,"WlEglSurface","wayland_client::egl","EGL surface",null,null],[5,"is_available","","Checks if the wayland-egl lib is available and can be used",null,{"o":{"n":"bool"}}],[11,"new","","Create an EGL surface from a wayland surface",44,{"i":[{"n":"wlsurface"},{"n":"i32"},{"n":"i32"}],"o":{"n":"wleglsurface"}}],[11,"new_from_raw","","Create an EGL surface from a raw pointer to a wayland surface",44,null],[11,"get_size","","Fetch current size of the EGL surface",44,null],[11,"resize","","Resize the EGL surface",44,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"}]}],[11,"ptr","","Raw pointer to the EGL surface",44,null],[11,"drop","","",44,{"i":[{"n":"self"}]}],[0,"cursor","wayland_client","Cursor utilities",null,null],[3,"CursorTheme","wayland_client::cursor","Represents a cursor theme loaded from the system.",null,null],[3,"Cursor","","A cursor from a theme. Can contain several images if animated.",null,null],[3,"CursorImageBuffer","","A buffer containing a cursor image.",null,null],[5,"is_available","","Checks if the wayland-cursor lib is available and can be used",null,{"o":{"n":"bool"}}],[5,"load_theme","","Attempts to load a cursor theme from given name.",null,{"i":[{"g":["str"],"n":"option"},{"n":"u32"},{"n":"wlshm"}],"o":{"n":"cursortheme"}}],[11,"get_cursor","","Retrieve a cursor from the theme.",45,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["cursor"],"n":"option"}}],[11,"drop","","",45,{"i":[{"n":"self"}]}],[11,"name","","Retrieve the name of this cursor.",46,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"image_count","","Retrieve the number of images contained in this animated cursor",46,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"frame","","Retrieve the image number of cursor animation.",46,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"usize"}}],[11,"frame_and_duration","","Retrieve the image number and its duration.",46,null],[11,"frame_buffer","","Retrieve a `CursorImageBuffer` containing the given image of an animation.",46,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["cursorimagebuffer"],"n":"option"}}],[11,"frame_info","","Retrive the metadate associated with given frame of the animation.",46,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"deref","","",47,{"i":[{"n":"self"}],"o":{"n":"wlbuffer"}}],[11,"ptr","wayland_client::protocol::wl_display","",39,null],[11,"from_ptr_new","","",39,null],[11,"from_ptr_initialized","","",39,null],[11,"interface_ptr","","",39,null],[11,"interface_name","","",39,{"o":{"n":"str"}}],[11,"supported_version","","",39,{"o":{"n":"u32"}}],[11,"version","","",39,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",39,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",39,{"i":[{"n":"self"},{"n":"wldisplay"}],"o":{"n":"bool"}}],[11,"set_user_data","","",39,null],[11,"get_user_data","","",39,null],[11,"clone_unchecked","","",39,{"i":[{"n":"self"}],"o":{"n":"wldisplay"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_raw","","",6,{"i":[{"n":"u32"}],"o":{"g":["error"],"n":"option"}}],[11,"to_raw","","",6,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"sync","","asynchronous roundtrip",39,{"i":[{"n":"self"}],"o":{"n":"wlcallback"}}],[11,"get_registry","","get global registry object",39,{"i":[{"n":"self"}],"o":{"n":"wlregistry"}}],[11,"ptr","wayland_client::protocol::wl_registry","",48,null],[11,"from_ptr_new","","",48,null],[11,"from_ptr_initialized","","",48,null],[11,"interface_ptr","","",48,null],[11,"interface_name","","",48,{"o":{"n":"str"}}],[11,"supported_version","","",48,{"o":{"n":"u32"}}],[11,"version","","",48,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",48,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",48,{"i":[{"n":"self"},{"n":"wlregistry"}],"o":{"n":"bool"}}],[11,"set_user_data","","",48,null],[11,"get_user_data","","",48,null],[11,"clone_unchecked","","",48,{"i":[{"n":"self"}],"o":{"n":"wlregistry"}}],[11,"__dispatch_msg","","",48,null],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"bind","","bind an object to the display",48,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"n":"t"}}],[11,"ptr","wayland_client::protocol::wl_callback","",49,null],[11,"from_ptr_new","","",49,null],[11,"from_ptr_initialized","","",49,null],[11,"interface_ptr","","",49,null],[11,"interface_name","","",49,{"o":{"n":"str"}}],[11,"supported_version","","",49,{"o":{"n":"u32"}}],[11,"version","","",49,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",49,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",49,{"i":[{"n":"self"},{"n":"wlcallback"}],"o":{"n":"bool"}}],[11,"set_user_data","","",49,null],[11,"get_user_data","","",49,null],[11,"clone_unchecked","","",49,{"i":[{"n":"self"}],"o":{"n":"wlcallback"}}],[11,"__dispatch_msg","","",49,null],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"ptr","wayland_client::protocol::wl_compositor","",50,null],[11,"from_ptr_new","","",50,null],[11,"from_ptr_initialized","","",50,null],[11,"interface_ptr","","",50,null],[11,"interface_name","","",50,{"o":{"n":"str"}}],[11,"supported_version","","",50,{"o":{"n":"u32"}}],[11,"version","","",50,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",50,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",50,{"i":[{"n":"self"},{"n":"wlcompositor"}],"o":{"n":"bool"}}],[11,"set_user_data","","",50,null],[11,"get_user_data","","",50,null],[11,"clone_unchecked","","",50,{"i":[{"n":"self"}],"o":{"n":"wlcompositor"}}],[11,"create_surface","","create new surface",50,{"i":[{"n":"self"}],"o":{"n":"wlsurface"}}],[11,"create_region","","create new region",50,{"i":[{"n":"self"}],"o":{"n":"wlregion"}}],[11,"ptr","wayland_client::protocol::wl_shm_pool","",51,null],[11,"from_ptr_new","","",51,null],[11,"from_ptr_initialized","","",51,null],[11,"interface_ptr","","",51,null],[11,"interface_name","","",51,{"o":{"n":"str"}}],[11,"supported_version","","",51,{"o":{"n":"u32"}}],[11,"version","","",51,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",51,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",51,{"i":[{"n":"self"},{"n":"wlshmpool"}],"o":{"n":"bool"}}],[11,"set_user_data","","",51,null],[11,"get_user_data","","",51,null],[11,"clone_unchecked","","",51,{"i":[{"n":"self"}],"o":{"n":"wlshmpool"}}],[11,"create_buffer","","create a buffer from the pool",51,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"format"}],"o":{"g":["wlbuffer"],"n":"requestresult"}}],[11,"destroy","","destroy the pool",51,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"resize","","change the size of the pool mapping",51,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_client::protocol::wl_shm","",52,null],[11,"from_ptr_new","","",52,null],[11,"from_ptr_initialized","","",52,null],[11,"interface_ptr","","",52,null],[11,"interface_name","","",52,{"o":{"n":"str"}}],[11,"supported_version","","",52,{"o":{"n":"u32"}}],[11,"version","","",52,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",52,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",52,{"i":[{"n":"self"},{"n":"wlshm"}],"o":{"n":"bool"}}],[11,"set_user_data","","",52,null],[11,"get_user_data","","",52,null],[11,"clone_unchecked","","",52,{"i":[{"n":"self"}],"o":{"n":"wlshm"}}],[11,"__dispatch_msg","","",52,null],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_raw","","",10,{"i":[{"n":"u32"}],"o":{"g":["error"],"n":"option"}}],[11,"to_raw","","",10,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"format"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"format"}],"o":{"n":"bool"}}],[11,"from_raw","","",11,{"i":[{"n":"u32"}],"o":{"g":["format"],"n":"option"}}],[11,"to_raw","","",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"create_pool","","create a shm pool",52,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"i32"}],"o":{"n":"wlshmpool"}}],[11,"ptr","wayland_client::protocol::wl_buffer","",53,null],[11,"from_ptr_new","","",53,null],[11,"from_ptr_initialized","","",53,null],[11,"interface_ptr","","",53,null],[11,"interface_name","","",53,{"o":{"n":"str"}}],[11,"supported_version","","",53,{"o":{"n":"u32"}}],[11,"version","","",53,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",53,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",53,{"i":[{"n":"self"},{"n":"wlbuffer"}],"o":{"n":"bool"}}],[11,"set_user_data","","",53,null],[11,"get_user_data","","",53,null],[11,"clone_unchecked","","",53,{"i":[{"n":"self"}],"o":{"n":"wlbuffer"}}],[11,"__dispatch_msg","","",53,null],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","destroy a buffer",53,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_client::protocol::wl_data_offer","",54,null],[11,"from_ptr_new","","",54,null],[11,"from_ptr_initialized","","",54,null],[11,"interface_ptr","","",54,null],[11,"interface_name","","",54,{"o":{"n":"str"}}],[11,"supported_version","","",54,{"o":{"n":"u32"}}],[11,"version","","",54,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",54,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",54,{"i":[{"n":"self"},{"n":"wldataoffer"}],"o":{"n":"bool"}}],[11,"set_user_data","","",54,null],[11,"get_user_data","","",54,null],[11,"clone_unchecked","","",54,{"i":[{"n":"self"}],"o":{"n":"wldataoffer"}}],[11,"__dispatch_msg","","",54,null],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_raw","","",14,{"i":[{"n":"u32"}],"o":{"g":["error"],"n":"option"}}],[11,"to_raw","","",14,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"accept","","accept one of the offered mime types",54,{"i":[{"n":"self"},{"n":"u32"},{"g":["string"],"n":"option"}],"o":{"n":"requestresult"}}],[11,"receive","","request that the data is transferred",54,{"i":[{"n":"self"},{"n":"string"},{"n":"rawfd"}],"o":{"n":"requestresult"}}],[11,"destroy","","destroy data offer",54,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"finish","","the offer will no longer be used",54,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"set_actions","","set the available/preferred drag-and-drop actions",54,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_client::protocol::wl_data_source","",55,null],[11,"from_ptr_new","","",55,null],[11,"from_ptr_initialized","","",55,null],[11,"interface_ptr","","",55,null],[11,"interface_name","","",55,{"o":{"n":"str"}}],[11,"supported_version","","",55,{"o":{"n":"u32"}}],[11,"version","","",55,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",55,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",55,{"i":[{"n":"self"},{"n":"wldatasource"}],"o":{"n":"bool"}}],[11,"set_user_data","","",55,null],[11,"get_user_data","","",55,null],[11,"clone_unchecked","","",55,{"i":[{"n":"self"}],"o":{"n":"wldatasource"}}],[11,"__dispatch_msg","","",55,null],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_raw","","",16,{"i":[{"n":"u32"}],"o":{"g":["error"],"n":"option"}}],[11,"to_raw","","",16,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"offer","","add an offered mime type",55,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"requestresult"}}],[11,"destroy","","destroy the data source",55,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"set_actions","","set the available drag-and-drop actions",55,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_client::protocol::wl_data_device","",56,null],[11,"from_ptr_new","","",56,null],[11,"from_ptr_initialized","","",56,null],[11,"interface_ptr","","",56,null],[11,"interface_name","","",56,{"o":{"n":"str"}}],[11,"supported_version","","",56,{"o":{"n":"u32"}}],[11,"version","","",56,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",56,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",56,{"i":[{"n":"self"},{"n":"wldatadevice"}],"o":{"n":"bool"}}],[11,"set_user_data","","",56,null],[11,"get_user_data","","",56,null],[11,"clone_unchecked","","",56,{"i":[{"n":"self"}],"o":{"n":"wldatadevice"}}],[11,"__dispatch_msg","","",56,null],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_raw","","",18,{"i":[{"n":"u32"}],"o":{"g":["error"],"n":"option"}}],[11,"to_raw","","",18,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",17,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"start_drag","","start drag-and-drop operation",56,{"i":[{"n":"self"},{"g":["wldatasource"],"n":"option"},{"n":"wlsurface"},{"g":["wlsurface"],"n":"option"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"set_selection","","copy data to the selection",56,{"i":[{"n":"self"},{"g":["wldatasource"],"n":"option"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"release","","destroy data device",56,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_client::protocol::wl_data_device_manager","",57,null],[11,"from_ptr_new","","",57,null],[11,"from_ptr_initialized","","",57,null],[11,"interface_ptr","","",57,null],[11,"interface_name","","",57,{"o":{"n":"str"}}],[11,"supported_version","","",57,{"o":{"n":"u32"}}],[11,"version","","",57,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",57,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",57,{"i":[{"n":"self"},{"n":"wldatadevicemanager"}],"o":{"n":"bool"}}],[11,"set_user_data","","",57,null],[11,"get_user_data","","",57,null],[11,"clone_unchecked","","",57,{"i":[{"n":"self"}],"o":{"n":"wldatadevicemanager"}}],[11,"eq","","",58,{"i":[{"n":"self"},{"n":"dndaction"}],"o":{"n":"bool"}}],[11,"ne","","",58,{"i":[{"n":"self"},{"n":"dndaction"}],"o":{"n":"bool"}}],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"dndaction"}}],[11,"partial_cmp","","",58,{"i":[{"n":"self"},{"n":"dndaction"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",58,{"i":[{"n":"self"},{"n":"dndaction"}],"o":{"n":"bool"}}],[11,"le","","",58,{"i":[{"n":"self"},{"n":"dndaction"}],"o":{"n":"bool"}}],[11,"gt","","",58,{"i":[{"n":"self"},{"n":"dndaction"}],"o":{"n":"bool"}}],[11,"ge","","",58,{"i":[{"n":"self"},{"n":"dndaction"}],"o":{"n":"bool"}}],[11,"cmp","","",58,{"i":[{"n":"self"},{"n":"dndaction"}],"o":{"n":"ordering"}}],[11,"hash","","",58,null],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"None","","no action",58,null],[18,"Copy","","copy action",58,null],[18,"Move","","move action",58,null],[18,"Ask","","ask action",58,null],[11,"empty","","Returns an empty set of flags.",58,{"o":{"n":"dndaction"}}],[11,"all","","Returns the set containing all flags.",58,{"o":{"n":"dndaction"}}],[11,"bits","","Returns the raw value of the flags currently stored.",58,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",58,{"i":[{"n":"u32"}],"o":{"g":["dndaction"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",58,{"i":[{"n":"u32"}],"o":{"n":"dndaction"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",58,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",58,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",58,{"i":[{"n":"self"},{"n":"dndaction"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",58,{"i":[{"n":"self"},{"n":"dndaction"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",58,{"i":[{"n":"self"},{"n":"dndaction"}]}],[11,"remove","","Removes the specified flags in-place.",58,{"i":[{"n":"self"},{"n":"dndaction"}]}],[11,"toggle","","Toggles the specified flags in-place.",58,{"i":[{"n":"self"},{"n":"dndaction"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",58,{"i":[{"n":"self"},{"n":"dndaction"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",58,{"i":[{"n":"self"},{"n":"dndaction"}],"o":{"n":"dndaction"}}],[11,"bitor_assign","","Adds the set of flags.",58,{"i":[{"n":"self"},{"n":"dndaction"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",58,{"i":[{"n":"self"},{"n":"dndaction"}],"o":{"n":"dndaction"}}],[11,"bitxor_assign","","Toggles the set of flags.",58,{"i":[{"n":"self"},{"n":"dndaction"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",58,{"i":[{"n":"self"},{"n":"dndaction"}],"o":{"n":"dndaction"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",58,{"i":[{"n":"self"},{"n":"dndaction"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",58,{"i":[{"n":"self"},{"n":"dndaction"}],"o":{"n":"dndaction"}}],[11,"sub_assign","","Disables all flags enabled in the set.",58,{"i":[{"n":"self"},{"n":"dndaction"}]}],[11,"not","","Returns the complement of this set of flags.",58,{"i":[{"n":"self"}],"o":{"n":"dndaction"}}],[11,"extend","","",58,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",58,{"i":[{"n":"t"}],"o":{"n":"dndaction"}}],[11,"from_raw","","",58,{"i":[{"n":"u32"}],"o":{"g":["dndaction"],"n":"option"}}],[11,"to_raw","","",58,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"create_data_source","","create a new data source",57,{"i":[{"n":"self"}],"o":{"n":"wldatasource"}}],[11,"get_data_device","","create a new data device",57,{"i":[{"n":"self"},{"n":"wlseat"}],"o":{"n":"wldatadevice"}}],[11,"ptr","wayland_client::protocol::wl_shell","",59,null],[11,"from_ptr_new","","",59,null],[11,"from_ptr_initialized","","",59,null],[11,"interface_ptr","","",59,null],[11,"interface_name","","",59,{"o":{"n":"str"}}],[11,"supported_version","","",59,{"o":{"n":"u32"}}],[11,"version","","",59,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",59,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",59,{"i":[{"n":"self"},{"n":"wlshell"}],"o":{"n":"bool"}}],[11,"set_user_data","","",59,null],[11,"get_user_data","","",59,null],[11,"clone_unchecked","","",59,{"i":[{"n":"self"}],"o":{"n":"wlshell"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_raw","","",19,{"i":[{"n":"u32"}],"o":{"g":["error"],"n":"option"}}],[11,"to_raw","","",19,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_shell_surface","","create a shell surface from a surface",59,{"i":[{"n":"self"},{"n":"wlsurface"}],"o":{"n":"wlshellsurface"}}],[11,"ptr","wayland_client::protocol::wl_shell_surface","",60,null],[11,"from_ptr_new","","",60,null],[11,"from_ptr_initialized","","",60,null],[11,"interface_ptr","","",60,null],[11,"interface_name","","",60,{"o":{"n":"str"}}],[11,"supported_version","","",60,{"o":{"n":"u32"}}],[11,"version","","",60,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",60,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",60,{"i":[{"n":"self"},{"n":"wlshellsurface"}],"o":{"n":"bool"}}],[11,"set_user_data","","",60,null],[11,"get_user_data","","",60,null],[11,"clone_unchecked","","",60,{"i":[{"n":"self"}],"o":{"n":"wlshellsurface"}}],[11,"__dispatch_msg","","",60,null],[11,"eq","","",61,{"i":[{"n":"self"},{"n":"resize"}],"o":{"n":"bool"}}],[11,"ne","","",61,{"i":[{"n":"self"},{"n":"resize"}],"o":{"n":"bool"}}],[11,"clone","","",61,{"i":[{"n":"self"}],"o":{"n":"resize"}}],[11,"partial_cmp","","",61,{"i":[{"n":"self"},{"n":"resize"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",61,{"i":[{"n":"self"},{"n":"resize"}],"o":{"n":"bool"}}],[11,"le","","",61,{"i":[{"n":"self"},{"n":"resize"}],"o":{"n":"bool"}}],[11,"gt","","",61,{"i":[{"n":"self"},{"n":"resize"}],"o":{"n":"bool"}}],[11,"ge","","",61,{"i":[{"n":"self"},{"n":"resize"}],"o":{"n":"bool"}}],[11,"cmp","","",61,{"i":[{"n":"self"},{"n":"resize"}],"o":{"n":"ordering"}}],[11,"hash","","",61,null],[11,"fmt","","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"None","","no edge",61,null],[18,"Top","","top edge",61,null],[18,"Bottom","","bottom edge",61,null],[18,"Left","","left edge",61,null],[18,"TopLeft","","top and left edges",61,null],[18,"BottomLeft","","bottom and left edges",61,null],[18,"Right","","right edge",61,null],[18,"TopRight","","top and right edges",61,null],[18,"BottomRight","","bottom and right edges",61,null],[11,"empty","","Returns an empty set of flags.",61,{"o":{"n":"resize"}}],[11,"all","","Returns the set containing all flags.",61,{"o":{"n":"resize"}}],[11,"bits","","Returns the raw value of the flags currently stored.",61,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",61,{"i":[{"n":"u32"}],"o":{"g":["resize"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",61,{"i":[{"n":"u32"}],"o":{"n":"resize"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",61,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",61,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",61,{"i":[{"n":"self"},{"n":"resize"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",61,{"i":[{"n":"self"},{"n":"resize"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",61,{"i":[{"n":"self"},{"n":"resize"}]}],[11,"remove","","Removes the specified flags in-place.",61,{"i":[{"n":"self"},{"n":"resize"}]}],[11,"toggle","","Toggles the specified flags in-place.",61,{"i":[{"n":"self"},{"n":"resize"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",61,{"i":[{"n":"self"},{"n":"resize"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",61,{"i":[{"n":"self"},{"n":"resize"}],"o":{"n":"resize"}}],[11,"bitor_assign","","Adds the set of flags.",61,{"i":[{"n":"self"},{"n":"resize"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",61,{"i":[{"n":"self"},{"n":"resize"}],"o":{"n":"resize"}}],[11,"bitxor_assign","","Toggles the set of flags.",61,{"i":[{"n":"self"},{"n":"resize"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",61,{"i":[{"n":"self"},{"n":"resize"}],"o":{"n":"resize"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",61,{"i":[{"n":"self"},{"n":"resize"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",61,{"i":[{"n":"self"},{"n":"resize"}],"o":{"n":"resize"}}],[11,"sub_assign","","Disables all flags enabled in the set.",61,{"i":[{"n":"self"},{"n":"resize"}]}],[11,"not","","Returns the complement of this set of flags.",61,{"i":[{"n":"self"}],"o":{"n":"resize"}}],[11,"extend","","",61,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",61,{"i":[{"n":"t"}],"o":{"n":"resize"}}],[11,"from_raw","","",61,{"i":[{"n":"u32"}],"o":{"g":["resize"],"n":"option"}}],[11,"to_raw","","",61,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"eq","","",62,{"i":[{"n":"self"},{"n":"transient"}],"o":{"n":"bool"}}],[11,"ne","","",62,{"i":[{"n":"self"},{"n":"transient"}],"o":{"n":"bool"}}],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"transient"}}],[11,"partial_cmp","","",62,{"i":[{"n":"self"},{"n":"transient"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",62,{"i":[{"n":"self"},{"n":"transient"}],"o":{"n":"bool"}}],[11,"le","","",62,{"i":[{"n":"self"},{"n":"transient"}],"o":{"n":"bool"}}],[11,"gt","","",62,{"i":[{"n":"self"},{"n":"transient"}],"o":{"n":"bool"}}],[11,"ge","","",62,{"i":[{"n":"self"},{"n":"transient"}],"o":{"n":"bool"}}],[11,"cmp","","",62,{"i":[{"n":"self"},{"n":"transient"}],"o":{"n":"ordering"}}],[11,"hash","","",62,null],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"Inactive","","do not set keyboard focus",62,null],[11,"empty","","Returns an empty set of flags.",62,{"o":{"n":"transient"}}],[11,"all","","Returns the set containing all flags.",62,{"o":{"n":"transient"}}],[11,"bits","","Returns the raw value of the flags currently stored.",62,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",62,{"i":[{"n":"u32"}],"o":{"g":["transient"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",62,{"i":[{"n":"u32"}],"o":{"n":"transient"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",62,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",62,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",62,{"i":[{"n":"self"},{"n":"transient"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",62,{"i":[{"n":"self"},{"n":"transient"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",62,{"i":[{"n":"self"},{"n":"transient"}]}],[11,"remove","","Removes the specified flags in-place.",62,{"i":[{"n":"self"},{"n":"transient"}]}],[11,"toggle","","Toggles the specified flags in-place.",62,{"i":[{"n":"self"},{"n":"transient"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",62,{"i":[{"n":"self"},{"n":"transient"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",62,{"i":[{"n":"self"},{"n":"transient"}],"o":{"n":"transient"}}],[11,"bitor_assign","","Adds the set of flags.",62,{"i":[{"n":"self"},{"n":"transient"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",62,{"i":[{"n":"self"},{"n":"transient"}],"o":{"n":"transient"}}],[11,"bitxor_assign","","Toggles the set of flags.",62,{"i":[{"n":"self"},{"n":"transient"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",62,{"i":[{"n":"self"},{"n":"transient"}],"o":{"n":"transient"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",62,{"i":[{"n":"self"},{"n":"transient"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",62,{"i":[{"n":"self"},{"n":"transient"}],"o":{"n":"transient"}}],[11,"sub_assign","","Disables all flags enabled in the set.",62,{"i":[{"n":"self"},{"n":"transient"}]}],[11,"not","","Returns the complement of this set of flags.",62,{"i":[{"n":"self"}],"o":{"n":"transient"}}],[11,"extend","","",62,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",62,{"i":[{"n":"t"}],"o":{"n":"transient"}}],[11,"from_raw","","",62,{"i":[{"n":"u32"}],"o":{"g":["transient"],"n":"option"}}],[11,"to_raw","","",62,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"fullscreenmethod"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"fullscreenmethod"}],"o":{"n":"bool"}}],[11,"from_raw","","",21,{"i":[{"n":"u32"}],"o":{"g":["fullscreenmethod"],"n":"option"}}],[11,"to_raw","","",21,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"pong","","respond to a ping event",60,null],[11,"_move","","start an interactive move",60,null],[11,"resize","","start an interactive resize",60,null],[11,"set_toplevel","","make the surface a toplevel surface",60,null],[11,"set_transient","","make the surface a transient surface",60,null],[11,"set_fullscreen","","make the surface a fullscreen surface",60,null],[11,"set_popup","","make the surface a popup surface",60,null],[11,"set_maximized","","make the surface a maximized surface",60,null],[11,"set_title","","set surface title",60,null],[11,"set_class","","set surface class",60,null],[11,"ptr","wayland_client::protocol::wl_surface","",63,null],[11,"from_ptr_new","","",63,null],[11,"from_ptr_initialized","","",63,null],[11,"interface_ptr","","",63,null],[11,"interface_name","","",63,{"o":{"n":"str"}}],[11,"supported_version","","",63,{"o":{"n":"u32"}}],[11,"version","","",63,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",63,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",63,{"i":[{"n":"self"},{"n":"wlsurface"}],"o":{"n":"bool"}}],[11,"set_user_data","","",63,null],[11,"get_user_data","","",63,null],[11,"clone_unchecked","","",63,{"i":[{"n":"self"}],"o":{"n":"wlsurface"}}],[11,"__dispatch_msg","","",63,null],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",23,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_raw","","",23,{"i":[{"n":"u32"}],"o":{"g":["error"],"n":"option"}}],[11,"to_raw","","",23,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","delete surface",63,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"attach","","set the surface contents",63,{"i":[{"n":"self"},{"g":["wlbuffer"],"n":"option"},{"n":"i32"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"damage","","mark part of the surface damaged",63,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"frame","","request a frame throttling hint",63,{"i":[{"n":"self"}],"o":{"g":["wlcallback"],"n":"requestresult"}}],[11,"set_opaque_region","","set opaque region",63,{"i":[{"n":"self"},{"g":["wlregion"],"n":"option"}],"o":{"n":"requestresult"}}],[11,"set_input_region","","set input region",63,{"i":[{"n":"self"},{"g":["wlregion"],"n":"option"}],"o":{"n":"requestresult"}}],[11,"commit","","commit pending surface state",63,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"set_buffer_transform","","sets the buffer transformation",63,{"i":[{"n":"self"},{"n":"transform"}],"o":{"n":"requestresult"}}],[11,"set_buffer_scale","","sets the buffer scaling factor",63,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"damage_buffer","","mark part of the surface damaged using buffer coordinates",63,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_client::protocol::wl_seat","",64,null],[11,"from_ptr_new","","",64,null],[11,"from_ptr_initialized","","",64,null],[11,"interface_ptr","","",64,null],[11,"interface_name","","",64,{"o":{"n":"str"}}],[11,"supported_version","","",64,{"o":{"n":"u32"}}],[11,"version","","",64,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",64,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",64,{"i":[{"n":"self"},{"n":"wlseat"}],"o":{"n":"bool"}}],[11,"set_user_data","","",64,null],[11,"get_user_data","","",64,null],[11,"clone_unchecked","","",64,{"i":[{"n":"self"}],"o":{"n":"wlseat"}}],[11,"__dispatch_msg","","",64,null],[11,"eq","","",65,{"i":[{"n":"self"},{"n":"capability"}],"o":{"n":"bool"}}],[11,"ne","","",65,{"i":[{"n":"self"},{"n":"capability"}],"o":{"n":"bool"}}],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"capability"}}],[11,"partial_cmp","","",65,{"i":[{"n":"self"},{"n":"capability"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",65,{"i":[{"n":"self"},{"n":"capability"}],"o":{"n":"bool"}}],[11,"le","","",65,{"i":[{"n":"self"},{"n":"capability"}],"o":{"n":"bool"}}],[11,"gt","","",65,{"i":[{"n":"self"},{"n":"capability"}],"o":{"n":"bool"}}],[11,"ge","","",65,{"i":[{"n":"self"},{"n":"capability"}],"o":{"n":"bool"}}],[11,"cmp","","",65,{"i":[{"n":"self"},{"n":"capability"}],"o":{"n":"ordering"}}],[11,"hash","","",65,null],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"Pointer","","the seat has pointer devices",65,null],[18,"Keyboard","","the seat has one or more keyboards",65,null],[18,"Touch","","the seat has touch devices",65,null],[11,"empty","","Returns an empty set of flags.",65,{"o":{"n":"capability"}}],[11,"all","","Returns the set containing all flags.",65,{"o":{"n":"capability"}}],[11,"bits","","Returns the raw value of the flags currently stored.",65,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",65,{"i":[{"n":"u32"}],"o":{"g":["capability"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",65,{"i":[{"n":"u32"}],"o":{"n":"capability"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",65,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",65,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",65,{"i":[{"n":"self"},{"n":"capability"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",65,{"i":[{"n":"self"},{"n":"capability"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",65,{"i":[{"n":"self"},{"n":"capability"}]}],[11,"remove","","Removes the specified flags in-place.",65,{"i":[{"n":"self"},{"n":"capability"}]}],[11,"toggle","","Toggles the specified flags in-place.",65,{"i":[{"n":"self"},{"n":"capability"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",65,{"i":[{"n":"self"},{"n":"capability"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",65,{"i":[{"n":"self"},{"n":"capability"}],"o":{"n":"capability"}}],[11,"bitor_assign","","Adds the set of flags.",65,{"i":[{"n":"self"},{"n":"capability"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",65,{"i":[{"n":"self"},{"n":"capability"}],"o":{"n":"capability"}}],[11,"bitxor_assign","","Toggles the set of flags.",65,{"i":[{"n":"self"},{"n":"capability"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",65,{"i":[{"n":"self"},{"n":"capability"}],"o":{"n":"capability"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",65,{"i":[{"n":"self"},{"n":"capability"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",65,{"i":[{"n":"self"},{"n":"capability"}],"o":{"n":"capability"}}],[11,"sub_assign","","Disables all flags enabled in the set.",65,{"i":[{"n":"self"},{"n":"capability"}]}],[11,"not","","Returns the complement of this set of flags.",65,{"i":[{"n":"self"}],"o":{"n":"capability"}}],[11,"extend","","",65,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",65,{"i":[{"n":"t"}],"o":{"n":"capability"}}],[11,"from_raw","","",65,{"i":[{"n":"u32"}],"o":{"g":["capability"],"n":"option"}}],[11,"to_raw","","",65,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",24,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"get_pointer","","return pointer object",64,{"i":[{"n":"self"}],"o":{"g":["wlpointer"],"n":"requestresult"}}],[11,"get_keyboard","","return keyboard object",64,{"i":[{"n":"self"}],"o":{"g":["wlkeyboard"],"n":"requestresult"}}],[11,"get_touch","","return touch object",64,{"i":[{"n":"self"}],"o":{"g":["wltouch"],"n":"requestresult"}}],[11,"release","","release the seat object",64,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_client::protocol::wl_pointer","",66,null],[11,"from_ptr_new","","",66,null],[11,"from_ptr_initialized","","",66,null],[11,"interface_ptr","","",66,null],[11,"interface_name","","",66,{"o":{"n":"str"}}],[11,"supported_version","","",66,{"o":{"n":"u32"}}],[11,"version","","",66,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",66,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",66,{"i":[{"n":"self"},{"n":"wlpointer"}],"o":{"n":"bool"}}],[11,"set_user_data","","",66,null],[11,"get_user_data","","",66,null],[11,"clone_unchecked","","",66,{"i":[{"n":"self"}],"o":{"n":"wlpointer"}}],[11,"__dispatch_msg","","",66,null],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",26,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_raw","","",26,{"i":[{"n":"u32"}],"o":{"g":["error"],"n":"option"}}],[11,"to_raw","","",26,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"buttonstate"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"buttonstate"}],"o":{"n":"bool"}}],[11,"from_raw","","",27,{"i":[{"n":"u32"}],"o":{"g":["buttonstate"],"n":"option"}}],[11,"to_raw","","",27,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"axis"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",28,{"i":[{"n":"self"},{"n":"axis"}],"o":{"n":"bool"}}],[11,"from_raw","","",28,{"i":[{"n":"u32"}],"o":{"g":["axis"],"n":"option"}}],[11,"to_raw","","",28,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"axissource"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",29,{"i":[{"n":"self"},{"n":"axissource"}],"o":{"n":"bool"}}],[11,"from_raw","","",29,{"i":[{"n":"u32"}],"o":{"g":["axissource"],"n":"option"}}],[11,"to_raw","","",29,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",25,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"set_cursor","","set the pointer surface",66,{"i":[{"n":"self"},{"n":"u32"},{"g":["wlsurface"],"n":"option"},{"n":"i32"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"release","","release the pointer object",66,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_client::protocol::wl_keyboard","",67,null],[11,"from_ptr_new","","",67,null],[11,"from_ptr_initialized","","",67,null],[11,"interface_ptr","","",67,null],[11,"interface_name","","",67,{"o":{"n":"str"}}],[11,"supported_version","","",67,{"o":{"n":"u32"}}],[11,"version","","",67,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",67,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",67,{"i":[{"n":"self"},{"n":"wlkeyboard"}],"o":{"n":"bool"}}],[11,"set_user_data","","",67,null],[11,"get_user_data","","",67,null],[11,"clone_unchecked","","",67,{"i":[{"n":"self"}],"o":{"n":"wlkeyboard"}}],[11,"__dispatch_msg","","",67,null],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"keymapformat"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",31,{"i":[{"n":"self"},{"n":"keymapformat"}],"o":{"n":"bool"}}],[11,"from_raw","","",31,{"i":[{"n":"u32"}],"o":{"g":["keymapformat"],"n":"option"}}],[11,"to_raw","","",31,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"keystate"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",32,{"i":[{"n":"self"},{"n":"keystate"}],"o":{"n":"bool"}}],[11,"from_raw","","",32,{"i":[{"n":"u32"}],"o":{"g":["keystate"],"n":"option"}}],[11,"to_raw","","",32,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",30,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"release","","release the keyboard object",67,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_client::protocol::wl_touch","",68,null],[11,"from_ptr_new","","",68,null],[11,"from_ptr_initialized","","",68,null],[11,"interface_ptr","","",68,null],[11,"interface_name","","",68,{"o":{"n":"str"}}],[11,"supported_version","","",68,{"o":{"n":"u32"}}],[11,"version","","",68,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",68,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",68,{"i":[{"n":"self"},{"n":"wltouch"}],"o":{"n":"bool"}}],[11,"set_user_data","","",68,null],[11,"get_user_data","","",68,null],[11,"clone_unchecked","","",68,{"i":[{"n":"self"}],"o":{"n":"wltouch"}}],[11,"__dispatch_msg","","",68,null],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",33,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"release","","release the touch object",68,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_client::protocol::wl_output","",69,null],[11,"from_ptr_new","","",69,null],[11,"from_ptr_initialized","","",69,null],[11,"interface_ptr","","",69,null],[11,"interface_name","","",69,{"o":{"n":"str"}}],[11,"supported_version","","",69,{"o":{"n":"u32"}}],[11,"version","","",69,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",69,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",69,{"i":[{"n":"self"},{"n":"wloutput"}],"o":{"n":"bool"}}],[11,"set_user_data","","",69,null],[11,"get_user_data","","",69,null],[11,"clone_unchecked","","",69,{"i":[{"n":"self"}],"o":{"n":"wloutput"}}],[11,"__dispatch_msg","","",69,null],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"subpixel"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",35,{"i":[{"n":"self"},{"n":"subpixel"}],"o":{"n":"bool"}}],[11,"from_raw","","",35,{"i":[{"n":"u32"}],"o":{"g":["subpixel"],"n":"option"}}],[11,"to_raw","","",35,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"transform"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",36,{"i":[{"n":"self"},{"n":"transform"}],"o":{"n":"bool"}}],[11,"from_raw","","",36,{"i":[{"n":"u32"}],"o":{"g":["transform"],"n":"option"}}],[11,"to_raw","","",36,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"eq","","",70,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"bool"}}],[11,"ne","","",70,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"bool"}}],[11,"clone","","",70,{"i":[{"n":"self"}],"o":{"n":"mode"}}],[11,"partial_cmp","","",70,{"i":[{"n":"self"},{"n":"mode"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",70,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"bool"}}],[11,"le","","",70,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"bool"}}],[11,"gt","","",70,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"bool"}}],[11,"ge","","",70,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"bool"}}],[11,"cmp","","",70,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"ordering"}}],[11,"hash","","",70,null],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"Current","","indicates this is the current mode",70,null],[18,"Preferred","","indicates this is the preferred mode",70,null],[11,"empty","","Returns an empty set of flags.",70,{"o":{"n":"mode"}}],[11,"all","","Returns the set containing all flags.",70,{"o":{"n":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",70,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",70,{"i":[{"n":"u32"}],"o":{"g":["mode"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",70,{"i":[{"n":"u32"}],"o":{"n":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",70,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",70,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",70,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",70,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",70,{"i":[{"n":"self"},{"n":"mode"}]}],[11,"remove","","Removes the specified flags in-place.",70,{"i":[{"n":"self"},{"n":"mode"}]}],[11,"toggle","","Toggles the specified flags in-place.",70,{"i":[{"n":"self"},{"n":"mode"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",70,{"i":[{"n":"self"},{"n":"mode"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",70,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"mode"}}],[11,"bitor_assign","","Adds the set of flags.",70,{"i":[{"n":"self"},{"n":"mode"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",70,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"mode"}}],[11,"bitxor_assign","","Toggles the set of flags.",70,{"i":[{"n":"self"},{"n":"mode"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",70,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"mode"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",70,{"i":[{"n":"self"},{"n":"mode"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",70,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"mode"}}],[11,"sub_assign","","Disables all flags enabled in the set.",70,{"i":[{"n":"self"},{"n":"mode"}]}],[11,"not","","Returns the complement of this set of flags.",70,{"i":[{"n":"self"}],"o":{"n":"mode"}}],[11,"extend","","",70,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",70,{"i":[{"n":"t"}],"o":{"n":"mode"}}],[11,"from_raw","","",70,{"i":[{"n":"u32"}],"o":{"g":["mode"],"n":"option"}}],[11,"to_raw","","",70,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",34,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"release","","release the output object",69,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_client::protocol::wl_region","",71,null],[11,"from_ptr_new","","",71,null],[11,"from_ptr_initialized","","",71,null],[11,"interface_ptr","","",71,null],[11,"interface_name","","",71,{"o":{"n":"str"}}],[11,"supported_version","","",71,{"o":{"n":"u32"}}],[11,"version","","",71,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",71,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",71,{"i":[{"n":"self"},{"n":"wlregion"}],"o":{"n":"bool"}}],[11,"set_user_data","","",71,null],[11,"get_user_data","","",71,null],[11,"clone_unchecked","","",71,{"i":[{"n":"self"}],"o":{"n":"wlregion"}}],[11,"destroy","","destroy region",71,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"add","","add rectangle to region",71,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"subtract","","subtract rectangle from region",71,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_client::protocol::wl_subcompositor","",72,null],[11,"from_ptr_new","","",72,null],[11,"from_ptr_initialized","","",72,null],[11,"interface_ptr","","",72,null],[11,"interface_name","","",72,{"o":{"n":"str"}}],[11,"supported_version","","",72,{"o":{"n":"u32"}}],[11,"version","","",72,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",72,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",72,{"i":[{"n":"self"},{"n":"wlsubcompositor"}],"o":{"n":"bool"}}],[11,"set_user_data","","",72,null],[11,"get_user_data","","",72,null],[11,"clone_unchecked","","",72,{"i":[{"n":"self"}],"o":{"n":"wlsubcompositor"}}],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",37,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_raw","","",37,{"i":[{"n":"u32"}],"o":{"g":["error"],"n":"option"}}],[11,"to_raw","","",37,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"destroy","","unbind from the subcompositor interface",72,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"get_subsurface","","give a surface the role sub-surface",72,{"i":[{"n":"self"},{"n":"wlsurface"},{"n":"wlsurface"}],"o":{"g":["wlsubsurface"],"n":"requestresult"}}],[11,"ptr","wayland_client::protocol::wl_subsurface","",73,null],[11,"from_ptr_new","","",73,null],[11,"from_ptr_initialized","","",73,null],[11,"interface_ptr","","",73,null],[11,"interface_name","","",73,{"o":{"n":"str"}}],[11,"supported_version","","",73,{"o":{"n":"u32"}}],[11,"version","","",73,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",73,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",73,{"i":[{"n":"self"},{"n":"wlsubsurface"}],"o":{"n":"bool"}}],[11,"set_user_data","","",73,null],[11,"get_user_data","","",73,null],[11,"clone_unchecked","","",73,{"i":[{"n":"self"}],"o":{"n":"wlsubsurface"}}],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",38,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_raw","","",38,{"i":[{"n":"u32"}],"o":{"g":["error"],"n":"option"}}],[11,"to_raw","","",38,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"destroy","","remove sub-surface interface",73,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"set_position","","reposition the sub-surface",73,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"place_above","","restack the sub-surface",73,{"i":[{"n":"self"},{"n":"wlsurface"}],"o":{"n":"requestresult"}}],[11,"place_below","","restack the sub-surface",73,{"i":[{"n":"self"},{"n":"wlsurface"}],"o":{"n":"requestresult"}}],[11,"set_sync","","set sub-surface to synchronized mode",73,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"set_desync","","set sub-surface to desynchronized mode",73,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[0,"sys","wayland_client","Reexports of types and objects from wayland-sys",null,null],[4,"wl_proxy","wayland_client::sys","",null,null],[4,"wl_display","","",null,null],[4,"wl_event_queue","","",null,null],[3,"WaylandClient","","",null,null],[12,"wl_display_connect_to_fd","","",74,null],[12,"wl_display_connect","","",74,null],[12,"wl_display_disconnect","","",74,null],[12,"wl_display_get_fd","","",74,null],[12,"wl_display_roundtrip","","",74,null],[12,"wl_display_read_events","","",74,null],[12,"wl_display_prepare_read","","",74,null],[12,"wl_display_cancel_read","","",74,null],[12,"wl_display_dispatch","","",74,null],[12,"wl_display_dispatch_pending","","",74,null],[12,"wl_display_get_error","","",74,null],[12,"wl_display_get_protocol_error","","",74,null],[12,"wl_display_flush","","",74,null],[12,"wl_event_queue_destroy","","",74,null],[12,"wl_display_create_queue","","",74,null],[12,"wl_display_roundtrip_queue","","",74,null],[12,"wl_display_prepare_read_queue","","",74,null],[12,"wl_display_dispatch_queue","","",74,null],[12,"wl_display_dispatch_queue_pending","","",74,null],[12,"wl_proxy_create","","",74,null],[12,"wl_proxy_destroy","","",74,null],[12,"wl_proxy_add_listener","","",74,null],[12,"wl_proxy_get_listener","","",74,null],[12,"wl_proxy_add_dispatcher","","",74,null],[12,"wl_proxy_marshal_array_constructor","","",74,null],[12,"wl_proxy_marshal_array_constructor_versioned","","",74,null],[12,"wl_proxy_marshal_array","","",74,null],[12,"wl_proxy_set_user_data","","",74,null],[12,"wl_proxy_get_user_data","","",74,null],[12,"wl_proxy_get_id","","",74,null],[12,"wl_proxy_get_class","","",74,null],[12,"wl_proxy_set_queue","","",74,null],[12,"wl_proxy_get_version","","",74,null],[12,"wl_log_set_handler_client","","",74,null],[12,"wl_list_init","","",74,null],[12,"wl_list_insert","","",74,null],[12,"wl_list_remove","","",74,null],[12,"wl_list_length","","",74,null],[12,"wl_list_empty","","",74,null],[12,"wl_list_insert_list","","",74,null],[12,"wl_array_init","","",74,null],[12,"wl_array_release","","",74,null],[12,"wl_array_add","","",74,null],[12,"wl_array_copy","","",74,null],[12,"wl_proxy_marshal_constructor","","",74,null],[12,"wl_proxy_marshal_constructor_versioned","","",74,null],[12,"wl_proxy_marshal","","",74,null],[3,"WAYLAND_CLIENT_OPTION","","",null,null],[3,"WAYLAND_CLIENT_HANDLE","","",null,null],[5,"is_lib_available","","",null,{"o":{"n":"bool"}}],[3,"wl_message","","",null,null],[12,"name","","",75,null],[12,"signature","","",75,null],[12,"types","","",75,null],[3,"wl_interface","","",null,null],[12,"name","","",76,null],[12,"version","","",76,null],[12,"request_count","","",76,null],[12,"requests","","",76,null],[12,"event_count","","",76,null],[12,"events","","",76,null],[3,"wl_list","","",null,null],[12,"prev","","",77,null],[12,"next","","",77,null],[3,"wl_array","","",null,null],[12,"size","","",78,null],[12,"alloc","","",78,null],[12,"data","","",78,null],[6,"wl_fixed_t","","",null,null],[5,"wl_fixed_to_double","","",null,{"i":[{"n":"i32"}],"o":{"n":"f64"}}],[5,"wl_fixed_from_double","","",null,{"i":[{"n":"f64"}],"o":{"n":"i32"}}],[5,"wl_fixed_to_int","","",null,{"i":[{"n":"i32"}],"o":{"n":"i32"}}],[5,"wl_fixed_from_int","","",null,{"i":[{"n":"i32"}],"o":{"n":"i32"}}],[3,"wl_argument","","",null,null],[6,"wl_dispatcher_func_t","","",null,null],[6,"wl_log_func_t","","",null,null],[8,"Proxy","wayland_client","Common routines for wayland proxy objects.",null,null],[10,"ptr","","Pointer to the underlying wayland proxy object",79,null],[10,"from_ptr_new","","Create an instance from a wayland pointer",79,null],[10,"from_ptr_initialized","","Create an instance from a wayland pointer",79,null],[10,"interface_ptr","","Pointer to the interface representation",79,null],[10,"interface_name","","Internal wayland name of this interface",79,{"o":{"n":"str"}}],[10,"supported_version","","Max version of this interface supported",79,{"o":{"n":"u32"}}],[10,"version","","Current version of the interface this proxy is instantiated with",79,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"status","","Check if the proxy behind this handle is actually still alive",79,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[10,"equals","","Check of two handles are actually the same wayland object",79,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[10,"set_user_data","","Set a pointer associated as user data on this proxy",79,null],[10,"get_user_data","","Get the pointer associated as user data on this proxy",79,null],[11,"clone","","Clone this proxy handle",79,{"i":[{"n":"self"}],"o":{"n":"option"}}],[10,"clone_unchecked","","Unsafely clone this proxy handle",79,{"i":[{"n":"self"}],"o":{"n":"self"}}],[8,"Implementable","","Common trait for wayland objects that can be registered to an EventQueue",null,null],[16,"Implementation","","The type containing the implementation for the event callbacks",80,null],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"expect","","Assert that result is successfull and extract the value.",4,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"t"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"liveness"}],"o":{"n":"bool"}}],[14,"wayland_env","","Create an environment handling struct",null,null],[11,"new","","Create a new store",81,{"o":{"n":"store"}}],[11,"insert","","Insert a new value in this store",81,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"token"}}],[11,"get","","Access value previously inserted in this store",81,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"v"}}],[11,"get_mut","","Mutably access value previously inserted in this store",81,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"v"}}],[11,"remove","","Remove a value previously inserted in this store",81,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"v"}}],[11,"with_value","","Create a sub-scope with access to a value",81,{"i":[{"n":"self"},{"n":"token"},{"n":"f"}],"o":{"n":"t"}}],[11,"as_proxy","","See this `Store` as a `StoreProxy` with no ongoing borrow",81,{"i":[{"n":"self"}],"o":{"n":"storeproxy"}}],[11,"from","","",82,{"i":[{"n":"storeproxy"}],"o":{"n":"storeproxy"}}],[11,"from","","",82,{"i":[{"n":"store"}],"o":{"n":"storeproxy"}}],[11,"clone","","",83,{"i":[{"n":"self"}],"o":{"n":"token"}}],[11,"deref","wayland_client::sys","",84,{"i":[{"n":"self"}],"o":{"n":"waylandclient"}}],[11,"deref","","",85,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"initialize","","",85,null],[11,"initialize","","",84,null],[11,"insert","wayland_client","Insert a new value in the proxified store",82,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"token"}}],[11,"get","","Access value previously inserted in the proxified store",82,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"v"}}],[11,"get_mut","","Mutably access value previously inserted in the proxified store",82,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"v"}}],[11,"remove","","Remove a value previously inserted in the proxified store",82,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"v"}}],[11,"with_value","","Create a sub-scope with access to a value",82,{"i":[{"n":"self"},{"n":"token"},{"n":"f"}],"o":{"n":"t"}}],[11,"valid","","Check wether this token is still valid",83,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"open","wayland_client::sys","",74,{"i":[{"n":"str"}],"o":{"g":["waylandclient","dlerror"],"n":"result"}}]],"paths":[[3,"EnvNotify"],[4,"ConnectError"],[4,"FatalError"],[4,"RegisterStatus"],[4,"RequestResult"],[4,"Liveness"],[4,"Error"],[3,"Implementation"],[3,"Implementation"],[3,"Implementation"],[4,"Error"],[4,"Format"],[3,"Implementation"],[3,"Implementation"],[4,"Error"],[3,"Implementation"],[4,"Error"],[3,"Implementation"],[4,"Error"],[4,"Error"],[3,"Implementation"],[4,"FullscreenMethod"],[3,"Implementation"],[4,"Error"],[3,"Implementation"],[3,"Implementation"],[4,"Error"],[4,"ButtonState"],[4,"Axis"],[4,"AxisSource"],[3,"Implementation"],[4,"KeymapFormat"],[4,"KeyState"],[3,"Implementation"],[3,"Implementation"],[4,"Subpixel"],[4,"Transform"],[4,"Error"],[4,"Error"],[3,"WlDisplay"],[3,"EventQueueHandle"],[3,"EventQueue"],[3,"ReadEventsGuard"],[3,"EnvHandler"],[3,"WlEglSurface"],[3,"CursorTheme"],[3,"Cursor"],[3,"CursorImageBuffer"],[3,"WlRegistry"],[3,"WlCallback"],[3,"WlCompositor"],[3,"WlShmPool"],[3,"WlShm"],[3,"WlBuffer"],[3,"WlDataOffer"],[3,"WlDataSource"],[3,"WlDataDevice"],[3,"WlDataDeviceManager"],[3,"DndAction"],[3,"WlShell"],[3,"WlShellSurface"],[3,"Resize"],[3,"Transient"],[3,"WlSurface"],[3,"WlSeat"],[3,"Capability"],[3,"WlPointer"],[3,"WlKeyboard"],[3,"WlTouch"],[3,"WlOutput"],[3,"Mode"],[3,"WlRegion"],[3,"WlSubcompositor"],[3,"WlSubsurface"],[3,"WaylandClient"],[3,"wl_message"],[3,"wl_interface"],[3,"wl_list"],[3,"wl_array"],[8,"Proxy"],[8,"Implementable"],[3,"State"],[3,"StateProxy"],[3,"StateToken"],[3,"WAYLAND_CLIENT_HANDLE"],[3,"WAYLAND_CLIENT_OPTION"]]};
searchIndex["wayland_kbd"] = {"doc":"Keyboard mapping utility for `wayland-client` using libxkbcommon.","items":[[3,"MappedKeyboardImplementation","wayland_kbd","",null,null],[12,"enter","","",0,null],[12,"leave","","",0,null],[12,"key","","",0,null],[12,"repeat_info","","",0,null],[3,"ModifiersState","","Represents the current state of the keyboard modifiers",null,null],[12,"ctrl","","The \"control\" key",1,null],[12,"alt","","The \"alt\" key",1,null],[12,"shift","","The \"shift\" key",1,null],[12,"caps_lock","","The \"Caps lock\" key",1,null],[12,"logo","","The \"logo\" key",1,null],[12,"num_lock","","The \"Num lock\" key",1,null],[3,"RMLVO","","The RMLVO description of a keymap",null,null],[12,"rules","","The rules file to use",2,null],[12,"model","","The keyboard model by which to interpret keycodes and LEDs",2,null],[12,"layout","","A comma seperated list of layouts (languages) to include in the keymap",2,null],[12,"variant","","A comma seperated list of variants, one per layout, which may modify or augment the respective layout in various ways",2,null],[12,"options","","A comma seprated list of options, through which the user specifies non-layout related preferences, like which key combinations are used for switching layouts, or which key is the Compose key.",2,null],[4,"MappedKeyboardError","","An error that occured while trying to initialize a mapped keyboard",null,null],[13,"XKBNotFound","","libxkbcommon is not available",3,null],[13,"BadNames","","Provided RMLVO sepcified a keymap that would not be loaded",3,null],[5,"register_kbd","","Register a keyboard with the implementation provided by this crate",null,{"i":[{"n":"eventqueuehandle"},{"n":"wlkeyboard"},{"n":"mappedkeyboardimplementation"},{"n":"id"}],"o":{"g":["mappedkeyboarderror"],"n":"result"}}],[5,"register_kbd_from_rmlvo","","Register a keyboard with the implementation provided by this crate",null,{"i":[{"n":"eventqueuehandle"},{"n":"wlkeyboard"},{"n":"mappedkeyboardimplementation"},{"n":"id"},{"n":"rmlvo"}],"o":{"g":["mappedkeyboarderror"],"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"modifiersstate"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"keysyms","","",null,null],[17,"XKB_KEY_VoidSymbol","wayland_kbd::keysyms","",null,null],[17,"XKB_KEY_BackSpace","","",null,null],[17,"XKB_KEY_Tab","","",null,null],[17,"XKB_KEY_Linefeed","","",null,null],[17,"XKB_KEY_Clear","","",null,null],[17,"XKB_KEY_Return","","",null,null],[17,"XKB_KEY_Pause","","",null,null],[17,"XKB_KEY_Scroll_Lock","","",null,null],[17,"XKB_KEY_Sys_Req","","",null,null],[17,"XKB_KEY_Escape","","",null,null],[17,"XKB_KEY_Delete","","",null,null],[17,"XKB_KEY_Multi_key","","",null,null],[17,"XKB_KEY_Codeinput","","",null,null],[17,"XKB_KEY_SingleCandidate","","",null,null],[17,"XKB_KEY_MultipleCandidate","","",null,null],[17,"XKB_KEY_PreviousCandidate","","",null,null],[17,"XKB_KEY_Kanji","","",null,null],[17,"XKB_KEY_Muhenkan","","",null,null],[17,"XKB_KEY_Henkan_Mode","","",null,null],[17,"XKB_KEY_Henkan","","",null,null],[17,"XKB_KEY_Romaji","","",null,null],[17,"XKB_KEY_Hiragana","","",null,null],[17,"XKB_KEY_Katakana","","",null,null],[17,"XKB_KEY_Hiragana_Katakana","","",null,null],[17,"XKB_KEY_Zenkaku","","",null,null],[17,"XKB_KEY_Hankaku","","",null,null],[17,"XKB_KEY_Zenkaku_Hankaku","","",null,null],[17,"XKB_KEY_Touroku","","",null,null],[17,"XKB_KEY_Massyo","","",null,null],[17,"XKB_KEY_Kana_Lock","","",null,null],[17,"XKB_KEY_Kana_Shift","","",null,null],[17,"XKB_KEY_Eisu_Shift","","",null,null],[17,"XKB_KEY_Eisu_toggle","","",null,null],[17,"XKB_KEY_Kanji_Bangou","","",null,null],[17,"XKB_KEY_Zen_Koho","","",null,null],[17,"XKB_KEY_Mae_Koho","","",null,null],[17,"XKB_KEY_Home","","",null,null],[17,"XKB_KEY_Left","","",null,null],[17,"XKB_KEY_Up","","",null,null],[17,"XKB_KEY_Right","","",null,null],[17,"XKB_KEY_Down","","",null,null],[17,"XKB_KEY_Prior","","",null,null],[17,"XKB_KEY_Page_Up","","",null,null],[17,"XKB_KEY_Next","","",null,null],[17,"XKB_KEY_Page_Down","","",null,null],[17,"XKB_KEY_End","","",null,null],[17,"XKB_KEY_Begin","","",null,null],[17,"XKB_KEY_Select","","",null,null],[17,"XKB_KEY_Print","","",null,null],[17,"XKB_KEY_Execute","","",null,null],[17,"XKB_KEY_Insert","","",null,null],[17,"XKB_KEY_Undo","","",null,null],[17,"XKB_KEY_Redo","","",null,null],[17,"XKB_KEY_Menu","","",null,null],[17,"XKB_KEY_Find","","",null,null],[17,"XKB_KEY_Cancel","","",null,null],[17,"XKB_KEY_Help","","",null,null],[17,"XKB_KEY_Break","","",null,null],[17,"XKB_KEY_Mode_switch","","",null,null],[17,"XKB_KEY_script_switch","","",null,null],[17,"XKB_KEY_Num_Lock","","",null,null],[17,"XKB_KEY_KP_Space","","",null,null],[17,"XKB_KEY_KP_Tab","","",null,null],[17,"XKB_KEY_KP_Enter","","",null,null],[17,"XKB_KEY_KP_F1","","",null,null],[17,"XKB_KEY_KP_F2","","",null,null],[17,"XKB_KEY_KP_F3","","",null,null],[17,"XKB_KEY_KP_F4","","",null,null],[17,"XKB_KEY_KP_Home","","",null,null],[17,"XKB_KEY_KP_Left","","",null,null],[17,"XKB_KEY_KP_Up","","",null,null],[17,"XKB_KEY_KP_Right","","",null,null],[17,"XKB_KEY_KP_Down","","",null,null],[17,"XKB_KEY_KP_Prior","","",null,null],[17,"XKB_KEY_KP_Page_Up","","",null,null],[17,"XKB_KEY_KP_Next","","",null,null],[17,"XKB_KEY_KP_Page_Down","","",null,null],[17,"XKB_KEY_KP_End","","",null,null],[17,"XKB_KEY_KP_Begin","","",null,null],[17,"XKB_KEY_KP_Insert","","",null,null],[17,"XKB_KEY_KP_Delete","","",null,null],[17,"XKB_KEY_KP_Equal","","",null,null],[17,"XKB_KEY_KP_Multiply","","",null,null],[17,"XKB_KEY_KP_Add","","",null,null],[17,"XKB_KEY_KP_Separator","","",null,null],[17,"XKB_KEY_KP_Subtract","","",null,null],[17,"XKB_KEY_KP_Decimal","","",null,null],[17,"XKB_KEY_KP_Divide","","",null,null],[17,"XKB_KEY_KP_0","","",null,null],[17,"XKB_KEY_KP_1","","",null,null],[17,"XKB_KEY_KP_2","","",null,null],[17,"XKB_KEY_KP_3","","",null,null],[17,"XKB_KEY_KP_4","","",null,null],[17,"XKB_KEY_KP_5","","",null,null],[17,"XKB_KEY_KP_6","","",null,null],[17,"XKB_KEY_KP_7","","",null,null],[17,"XKB_KEY_KP_8","","",null,null],[17,"XKB_KEY_KP_9","","",null,null],[17,"XKB_KEY_F1","","",null,null],[17,"XKB_KEY_F2","","",null,null],[17,"XKB_KEY_F3","","",null,null],[17,"XKB_KEY_F4","","",null,null],[17,"XKB_KEY_F5","","",null,null],[17,"XKB_KEY_F6","","",null,null],[17,"XKB_KEY_F7","","",null,null],[17,"XKB_KEY_F8","","",null,null],[17,"XKB_KEY_F9","","",null,null],[17,"XKB_KEY_F10","","",null,null],[17,"XKB_KEY_F11","","",null,null],[17,"XKB_KEY_L1","","",null,null],[17,"XKB_KEY_F12","","",null,null],[17,"XKB_KEY_L2","","",null,null],[17,"XKB_KEY_F13","","",null,null],[17,"XKB_KEY_L3","","",null,null],[17,"XKB_KEY_F14","","",null,null],[17,"XKB_KEY_L4","","",null,null],[17,"XKB_KEY_F15","","",null,null],[17,"XKB_KEY_L5","","",null,null],[17,"XKB_KEY_F16","","",null,null],[17,"XKB_KEY_L6","","",null,null],[17,"XKB_KEY_F17","","",null,null],[17,"XKB_KEY_L7","","",null,null],[17,"XKB_KEY_F18","","",null,null],[17,"XKB_KEY_L8","","",null,null],[17,"XKB_KEY_F19","","",null,null],[17,"XKB_KEY_L9","","",null,null],[17,"XKB_KEY_F20","","",null,null],[17,"XKB_KEY_L10","","",null,null],[17,"XKB_KEY_F21","","",null,null],[17,"XKB_KEY_R1","","",null,null],[17,"XKB_KEY_F22","","",null,null],[17,"XKB_KEY_R2","","",null,null],[17,"XKB_KEY_F23","","",null,null],[17,"XKB_KEY_R3","","",null,null],[17,"XKB_KEY_F24","","",null,null],[17,"XKB_KEY_R4","","",null,null],[17,"XKB_KEY_F25","","",null,null],[17,"XKB_KEY_R5","","",null,null],[17,"XKB_KEY_F26","","",null,null],[17,"XKB_KEY_R6","","",null,null],[17,"XKB_KEY_F27","","",null,null],[17,"XKB_KEY_R7","","",null,null],[17,"XKB_KEY_F28","","",null,null],[17,"XKB_KEY_R8","","",null,null],[17,"XKB_KEY_F29","","",null,null],[17,"XKB_KEY_R9","","",null,null],[17,"XKB_KEY_F30","","",null,null],[17,"XKB_KEY_R10","","",null,null],[17,"XKB_KEY_F31","","",null,null],[17,"XKB_KEY_R11","","",null,null],[17,"XKB_KEY_F32","","",null,null],[17,"XKB_KEY_R12","","",null,null],[17,"XKB_KEY_F33","","",null,null],[17,"XKB_KEY_R13","","",null,null],[17,"XKB_KEY_F34","","",null,null],[17,"XKB_KEY_R14","","",null,null],[17,"XKB_KEY_F35","","",null,null],[17,"XKB_KEY_R15","","",null,null],[17,"XKB_KEY_Shift_L","","",null,null],[17,"XKB_KEY_Shift_R","","",null,null],[17,"XKB_KEY_Control_L","","",null,null],[17,"XKB_KEY_Control_R","","",null,null],[17,"XKB_KEY_Caps_Lock","","",null,null],[17,"XKB_KEY_Shift_Lock","","",null,null],[17,"XKB_KEY_Meta_L","","",null,null],[17,"XKB_KEY_Meta_R","","",null,null],[17,"XKB_KEY_Alt_L","","",null,null],[17,"XKB_KEY_Alt_R","","",null,null],[17,"XKB_KEY_Super_L","","",null,null],[17,"XKB_KEY_Super_R","","",null,null],[17,"XKB_KEY_Hyper_L","","",null,null],[17,"XKB_KEY_Hyper_R","","",null,null],[17,"XKB_KEY_ISO_Lock","","",null,null],[17,"XKB_KEY_ISO_Level2_Latch","","",null,null],[17,"XKB_KEY_ISO_Level3_Shift","","",null,null],[17,"XKB_KEY_ISO_Level3_Latch","","",null,null],[17,"XKB_KEY_ISO_Level3_Lock","","",null,null],[17,"XKB_KEY_ISO_Level5_Shift","","",null,null],[17,"XKB_KEY_ISO_Level5_Latch","","",null,null],[17,"XKB_KEY_ISO_Level5_Lock","","",null,null],[17,"XKB_KEY_ISO_Group_Shift","","",null,null],[17,"XKB_KEY_ISO_Group_Latch","","",null,null],[17,"XKB_KEY_ISO_Group_Lock","","",null,null],[17,"XKB_KEY_ISO_Next_Group","","",null,null],[17,"XKB_KEY_ISO_Next_Group_Lock","","",null,null],[17,"XKB_KEY_ISO_Prev_Group","","",null,null],[17,"XKB_KEY_ISO_Prev_Group_Lock","","",null,null],[17,"XKB_KEY_ISO_First_Group","","",null,null],[17,"XKB_KEY_ISO_First_Group_Lock","","",null,null],[17,"XKB_KEY_ISO_Last_Group","","",null,null],[17,"XKB_KEY_ISO_Last_Group_Lock","","",null,null],[17,"XKB_KEY_ISO_Left_Tab","","",null,null],[17,"XKB_KEY_ISO_Move_Line_Up","","",null,null],[17,"XKB_KEY_ISO_Move_Line_Down","","",null,null],[17,"XKB_KEY_ISO_Partial_Line_Up","","",null,null],[17,"XKB_KEY_ISO_Partial_Line_Down","","",null,null],[17,"XKB_KEY_ISO_Partial_Space_Left","","",null,null],[17,"XKB_KEY_ISO_Partial_Space_Right","","",null,null],[17,"XKB_KEY_ISO_Set_Margin_Left","","",null,null],[17,"XKB_KEY_ISO_Set_Margin_Right","","",null,null],[17,"XKB_KEY_ISO_Release_Margin_Left","","",null,null],[17,"XKB_KEY_ISO_Release_Margin_Right","","",null,null],[17,"XKB_KEY_ISO_Release_Both_Margins","","",null,null],[17,"XKB_KEY_ISO_Fast_Cursor_Left","","",null,null],[17,"XKB_KEY_ISO_Fast_Cursor_Right","","",null,null],[17,"XKB_KEY_ISO_Fast_Cursor_Up","","",null,null],[17,"XKB_KEY_ISO_Fast_Cursor_Down","","",null,null],[17,"XKB_KEY_ISO_Continuous_Underline","","",null,null],[17,"XKB_KEY_ISO_Discontinuous_Underline","","",null,null],[17,"XKB_KEY_ISO_Emphasize","","",null,null],[17,"XKB_KEY_ISO_Center_Object","","",null,null],[17,"XKB_KEY_ISO_Enter","","",null,null],[17,"XKB_KEY_dead_grave","","",null,null],[17,"XKB_KEY_dead_acute","","",null,null],[17,"XKB_KEY_dead_circumflex","","",null,null],[17,"XKB_KEY_dead_tilde","","",null,null],[17,"XKB_KEY_dead_perispomeni","","",null,null],[17,"XKB_KEY_dead_macron","","",null,null],[17,"XKB_KEY_dead_breve","","",null,null],[17,"XKB_KEY_dead_abovedot","","",null,null],[17,"XKB_KEY_dead_diaeresis","","",null,null],[17,"XKB_KEY_dead_abovering","","",null,null],[17,"XKB_KEY_dead_doubleacute","","",null,null],[17,"XKB_KEY_dead_caron","","",null,null],[17,"XKB_KEY_dead_cedilla","","",null,null],[17,"XKB_KEY_dead_ogonek","","",null,null],[17,"XKB_KEY_dead_iota","","",null,null],[17,"XKB_KEY_dead_voiced_sound","","",null,null],[17,"XKB_KEY_dead_semivoiced_sound","","",null,null],[17,"XKB_KEY_dead_belowdot","","",null,null],[17,"XKB_KEY_dead_hook","","",null,null],[17,"XKB_KEY_dead_horn","","",null,null],[17,"XKB_KEY_dead_stroke","","",null,null],[17,"XKB_KEY_dead_abovecomma","","",null,null],[17,"XKB_KEY_dead_psili","","",null,null],[17,"XKB_KEY_dead_abovereversedcomma","","",null,null],[17,"XKB_KEY_dead_dasia","","",null,null],[17,"XKB_KEY_dead_doublegrave","","",null,null],[17,"XKB_KEY_dead_belowring","","",null,null],[17,"XKB_KEY_dead_belowmacron","","",null,null],[17,"XKB_KEY_dead_belowcircumflex","","",null,null],[17,"XKB_KEY_dead_belowtilde","","",null,null],[17,"XKB_KEY_dead_belowbreve","","",null,null],[17,"XKB_KEY_dead_belowdiaeresis","","",null,null],[17,"XKB_KEY_dead_invertedbreve","","",null,null],[17,"XKB_KEY_dead_belowcomma","","",null,null],[17,"XKB_KEY_dead_currency","","",null,null],[17,"XKB_KEY_dead_lowline","","",null,null],[17,"XKB_KEY_dead_aboveverticalline","","",null,null],[17,"XKB_KEY_dead_belowverticalline","","",null,null],[17,"XKB_KEY_dead_longsolidusoverlay","","",null,null],[17,"XKB_KEY_dead_a","","",null,null],[17,"XKB_KEY_dead_A","","",null,null],[17,"XKB_KEY_dead_e","","",null,null],[17,"XKB_KEY_dead_E","","",null,null],[17,"XKB_KEY_dead_i","","",null,null],[17,"XKB_KEY_dead_I","","",null,null],[17,"XKB_KEY_dead_o","","",null,null],[17,"XKB_KEY_dead_O","","",null,null],[17,"XKB_KEY_dead_u","","",null,null],[17,"XKB_KEY_dead_U","","",null,null],[17,"XKB_KEY_dead_small_schwa","","",null,null],[17,"XKB_KEY_dead_capital_schwa","","",null,null],[17,"XKB_KEY_dead_greek","","",null,null],[17,"XKB_KEY_First_Virtual_Screen","","",null,null],[17,"XKB_KEY_Prev_Virtual_Screen","","",null,null],[17,"XKB_KEY_Next_Virtual_Screen","","",null,null],[17,"XKB_KEY_Last_Virtual_Screen","","",null,null],[17,"XKB_KEY_Terminate_Server","","",null,null],[17,"XKB_KEY_AccessX_Enable","","",null,null],[17,"XKB_KEY_AccessX_Feedback_Enable","","",null,null],[17,"XKB_KEY_RepeatKeys_Enable","","",null,null],[17,"XKB_KEY_SlowKeys_Enable","","",null,null],[17,"XKB_KEY_BounceKeys_Enable","","",null,null],[17,"XKB_KEY_StickyKeys_Enable","","",null,null],[17,"XKB_KEY_MouseKeys_Enable","","",null,null],[17,"XKB_KEY_MouseKeys_Accel_Enable","","",null,null],[17,"XKB_KEY_Overlay1_Enable","","",null,null],[17,"XKB_KEY_Overlay2_Enable","","",null,null],[17,"XKB_KEY_AudibleBell_Enable","","",null,null],[17,"XKB_KEY_Pointer_Left","","",null,null],[17,"XKB_KEY_Pointer_Right","","",null,null],[17,"XKB_KEY_Pointer_Up","","",null,null],[17,"XKB_KEY_Pointer_Down","","",null,null],[17,"XKB_KEY_Pointer_UpLeft","","",null,null],[17,"XKB_KEY_Pointer_UpRight","","",null,null],[17,"XKB_KEY_Pointer_DownLeft","","",null,null],[17,"XKB_KEY_Pointer_DownRight","","",null,null],[17,"XKB_KEY_Pointer_Button_Dflt","","",null,null],[17,"XKB_KEY_Pointer_Button1","","",null,null],[17,"XKB_KEY_Pointer_Button2","","",null,null],[17,"XKB_KEY_Pointer_Button3","","",null,null],[17,"XKB_KEY_Pointer_Button4","","",null,null],[17,"XKB_KEY_Pointer_Button5","","",null,null],[17,"XKB_KEY_Pointer_DblClick_Dflt","","",null,null],[17,"XKB_KEY_Pointer_DblClick1","","",null,null],[17,"XKB_KEY_Pointer_DblClick2","","",null,null],[17,"XKB_KEY_Pointer_DblClick3","","",null,null],[17,"XKB_KEY_Pointer_DblClick4","","",null,null],[17,"XKB_KEY_Pointer_DblClick5","","",null,null],[17,"XKB_KEY_Pointer_Drag_Dflt","","",null,null],[17,"XKB_KEY_Pointer_Drag1","","",null,null],[17,"XKB_KEY_Pointer_Drag2","","",null,null],[17,"XKB_KEY_Pointer_Drag3","","",null,null],[17,"XKB_KEY_Pointer_Drag4","","",null,null],[17,"XKB_KEY_Pointer_Drag5","","",null,null],[17,"XKB_KEY_Pointer_EnableKeys","","",null,null],[17,"XKB_KEY_Pointer_Accelerate","","",null,null],[17,"XKB_KEY_Pointer_DfltBtnNext","","",null,null],[17,"XKB_KEY_Pointer_DfltBtnPrev","","",null,null],[17,"XKB_KEY_ch","","",null,null],[17,"XKB_KEY_Ch","","",null,null],[17,"XKB_KEY_CH","","",null,null],[17,"XKB_KEY_c_h","","",null,null],[17,"XKB_KEY_C_h","","",null,null],[17,"XKB_KEY_C_H","","",null,null],[17,"XKB_KEY_3270_Duplicate","","",null,null],[17,"XKB_KEY_3270_FieldMark","","",null,null],[17,"XKB_KEY_3270_Right2","","",null,null],[17,"XKB_KEY_3270_Left2","","",null,null],[17,"XKB_KEY_3270_BackTab","","",null,null],[17,"XKB_KEY_3270_EraseEOF","","",null,null],[17,"XKB_KEY_3270_EraseInput","","",null,null],[17,"XKB_KEY_3270_Reset","","",null,null],[17,"XKB_KEY_3270_Quit","","",null,null],[17,"XKB_KEY_3270_PA1","","",null,null],[17,"XKB_KEY_3270_PA2","","",null,null],[17,"XKB_KEY_3270_PA3","","",null,null],[17,"XKB_KEY_3270_Test","","",null,null],[17,"XKB_KEY_3270_Attn","","",null,null],[17,"XKB_KEY_3270_CursorBlink","","",null,null],[17,"XKB_KEY_3270_AltCursor","","",null,null],[17,"XKB_KEY_3270_KeyClick","","",null,null],[17,"XKB_KEY_3270_Jump","","",null,null],[17,"XKB_KEY_3270_Ident","","",null,null],[17,"XKB_KEY_3270_Rule","","",null,null],[17,"XKB_KEY_3270_Copy","","",null,null],[17,"XKB_KEY_3270_Play","","",null,null],[17,"XKB_KEY_3270_Setup","","",null,null],[17,"XKB_KEY_3270_Record","","",null,null],[17,"XKB_KEY_3270_ChangeScreen","","",null,null],[17,"XKB_KEY_3270_DeleteWord","","",null,null],[17,"XKB_KEY_3270_ExSelect","","",null,null],[17,"XKB_KEY_3270_CursorSelect","","",null,null],[17,"XKB_KEY_3270_PrintScreen","","",null,null],[17,"XKB_KEY_3270_Enter","","",null,null],[17,"XKB_KEY_space","","",null,null],[17,"XKB_KEY_exclam","","",null,null],[17,"XKB_KEY_quotedbl","","",null,null],[17,"XKB_KEY_numbersign","","",null,null],[17,"XKB_KEY_dollar","","",null,null],[17,"XKB_KEY_percent","","",null,null],[17,"XKB_KEY_ampersand","","",null,null],[17,"XKB_KEY_apostrophe","","",null,null],[17,"XKB_KEY_quoteright","","",null,null],[17,"XKB_KEY_parenleft","","",null,null],[17,"XKB_KEY_parenright","","",null,null],[17,"XKB_KEY_asterisk","","",null,null],[17,"XKB_KEY_plus","","",null,null],[17,"XKB_KEY_comma","","",null,null],[17,"XKB_KEY_minus","","",null,null],[17,"XKB_KEY_period","","",null,null],[17,"XKB_KEY_slash","","",null,null],[17,"XKB_KEY_0","","",null,null],[17,"XKB_KEY_1","","",null,null],[17,"XKB_KEY_2","","",null,null],[17,"XKB_KEY_3","","",null,null],[17,"XKB_KEY_4","","",null,null],[17,"XKB_KEY_5","","",null,null],[17,"XKB_KEY_6","","",null,null],[17,"XKB_KEY_7","","",null,null],[17,"XKB_KEY_8","","",null,null],[17,"XKB_KEY_9","","",null,null],[17,"XKB_KEY_colon","","",null,null],[17,"XKB_KEY_semicolon","","",null,null],[17,"XKB_KEY_less","","",null,null],[17,"XKB_KEY_equal","","",null,null],[17,"XKB_KEY_greater","","",null,null],[17,"XKB_KEY_question","","",null,null],[17,"XKB_KEY_at","","",null,null],[17,"XKB_KEY_A","","",null,null],[17,"XKB_KEY_B","","",null,null],[17,"XKB_KEY_C","","",null,null],[17,"XKB_KEY_D","","",null,null],[17,"XKB_KEY_E","","",null,null],[17,"XKB_KEY_F","","",null,null],[17,"XKB_KEY_G","","",null,null],[17,"XKB_KEY_H","","",null,null],[17,"XKB_KEY_I","","",null,null],[17,"XKB_KEY_J","","",null,null],[17,"XKB_KEY_K","","",null,null],[17,"XKB_KEY_L","","",null,null],[17,"XKB_KEY_M","","",null,null],[17,"XKB_KEY_N","","",null,null],[17,"XKB_KEY_O","","",null,null],[17,"XKB_KEY_P","","",null,null],[17,"XKB_KEY_Q","","",null,null],[17,"XKB_KEY_R","","",null,null],[17,"XKB_KEY_S","","",null,null],[17,"XKB_KEY_T","","",null,null],[17,"XKB_KEY_U","","",null,null],[17,"XKB_KEY_V","","",null,null],[17,"XKB_KEY_W","","",null,null],[17,"XKB_KEY_X","","",null,null],[17,"XKB_KEY_Y","","",null,null],[17,"XKB_KEY_Z","","",null,null],[17,"XKB_KEY_bracketleft","","",null,null],[17,"XKB_KEY_backslash","","",null,null],[17,"XKB_KEY_bracketright","","",null,null],[17,"XKB_KEY_asciicircum","","",null,null],[17,"XKB_KEY_underscore","","",null,null],[17,"XKB_KEY_grave","","",null,null],[17,"XKB_KEY_quoteleft","","",null,null],[17,"XKB_KEY_a","","",null,null],[17,"XKB_KEY_b","","",null,null],[17,"XKB_KEY_c","","",null,null],[17,"XKB_KEY_d","","",null,null],[17,"XKB_KEY_e","","",null,null],[17,"XKB_KEY_f","","",null,null],[17,"XKB_KEY_g","","",null,null],[17,"XKB_KEY_h","","",null,null],[17,"XKB_KEY_i","","",null,null],[17,"XKB_KEY_j","","",null,null],[17,"XKB_KEY_k","","",null,null],[17,"XKB_KEY_l","","",null,null],[17,"XKB_KEY_m","","",null,null],[17,"XKB_KEY_n","","",null,null],[17,"XKB_KEY_o","","",null,null],[17,"XKB_KEY_p","","",null,null],[17,"XKB_KEY_q","","",null,null],[17,"XKB_KEY_r","","",null,null],[17,"XKB_KEY_s","","",null,null],[17,"XKB_KEY_t","","",null,null],[17,"XKB_KEY_u","","",null,null],[17,"XKB_KEY_v","","",null,null],[17,"XKB_KEY_w","","",null,null],[17,"XKB_KEY_x","","",null,null],[17,"XKB_KEY_y","","",null,null],[17,"XKB_KEY_z","","",null,null],[17,"XKB_KEY_braceleft","","",null,null],[17,"XKB_KEY_bar","","",null,null],[17,"XKB_KEY_braceright","","",null,null],[17,"XKB_KEY_asciitilde","","",null,null],[17,"XKB_KEY_nobreakspace","","",null,null],[17,"XKB_KEY_exclamdown","","",null,null],[17,"XKB_KEY_cent","","",null,null],[17,"XKB_KEY_sterling","","",null,null],[17,"XKB_KEY_currency","","",null,null],[17,"XKB_KEY_yen","","",null,null],[17,"XKB_KEY_brokenbar","","",null,null],[17,"XKB_KEY_section","","",null,null],[17,"XKB_KEY_diaeresis","","",null,null],[17,"XKB_KEY_copyright","","",null,null],[17,"XKB_KEY_ordfeminine","","",null,null],[17,"XKB_KEY_guillemotleft","","",null,null],[17,"XKB_KEY_notsign","","",null,null],[17,"XKB_KEY_hyphen","","",null,null],[17,"XKB_KEY_registered","","",null,null],[17,"XKB_KEY_macron","","",null,null],[17,"XKB_KEY_degree","","",null,null],[17,"XKB_KEY_plusminus","","",null,null],[17,"XKB_KEY_twosuperior","","",null,null],[17,"XKB_KEY_threesuperior","","",null,null],[17,"XKB_KEY_acute","","",null,null],[17,"XKB_KEY_mu","","",null,null],[17,"XKB_KEY_paragraph","","",null,null],[17,"XKB_KEY_periodcentered","","",null,null],[17,"XKB_KEY_cedilla","","",null,null],[17,"XKB_KEY_onesuperior","","",null,null],[17,"XKB_KEY_masculine","","",null,null],[17,"XKB_KEY_guillemotright","","",null,null],[17,"XKB_KEY_onequarter","","",null,null],[17,"XKB_KEY_onehalf","","",null,null],[17,"XKB_KEY_threequarters","","",null,null],[17,"XKB_KEY_questiondown","","",null,null],[17,"XKB_KEY_Agrave","","",null,null],[17,"XKB_KEY_Aacute","","",null,null],[17,"XKB_KEY_Acircumflex","","",null,null],[17,"XKB_KEY_Atilde","","",null,null],[17,"XKB_KEY_Adiaeresis","","",null,null],[17,"XKB_KEY_Aring","","",null,null],[17,"XKB_KEY_AE","","",null,null],[17,"XKB_KEY_Ccedilla","","",null,null],[17,"XKB_KEY_Egrave","","",null,null],[17,"XKB_KEY_Eacute","","",null,null],[17,"XKB_KEY_Ecircumflex","","",null,null],[17,"XKB_KEY_Ediaeresis","","",null,null],[17,"XKB_KEY_Igrave","","",null,null],[17,"XKB_KEY_Iacute","","",null,null],[17,"XKB_KEY_Icircumflex","","",null,null],[17,"XKB_KEY_Idiaeresis","","",null,null],[17,"XKB_KEY_ETH","","",null,null],[17,"XKB_KEY_Eth","","",null,null],[17,"XKB_KEY_Ntilde","","",null,null],[17,"XKB_KEY_Ograve","","",null,null],[17,"XKB_KEY_Oacute","","",null,null],[17,"XKB_KEY_Ocircumflex","","",null,null],[17,"XKB_KEY_Otilde","","",null,null],[17,"XKB_KEY_Odiaeresis","","",null,null],[17,"XKB_KEY_multiply","","",null,null],[17,"XKB_KEY_Oslash","","",null,null],[17,"XKB_KEY_Ooblique","","",null,null],[17,"XKB_KEY_Ugrave","","",null,null],[17,"XKB_KEY_Uacute","","",null,null],[17,"XKB_KEY_Ucircumflex","","",null,null],[17,"XKB_KEY_Udiaeresis","","",null,null],[17,"XKB_KEY_Yacute","","",null,null],[17,"XKB_KEY_THORN","","",null,null],[17,"XKB_KEY_Thorn","","",null,null],[17,"XKB_KEY_ssharp","","",null,null],[17,"XKB_KEY_agrave","","",null,null],[17,"XKB_KEY_aacute","","",null,null],[17,"XKB_KEY_acircumflex","","",null,null],[17,"XKB_KEY_atilde","","",null,null],[17,"XKB_KEY_adiaeresis","","",null,null],[17,"XKB_KEY_aring","","",null,null],[17,"XKB_KEY_ae","","",null,null],[17,"XKB_KEY_ccedilla","","",null,null],[17,"XKB_KEY_egrave","","",null,null],[17,"XKB_KEY_eacute","","",null,null],[17,"XKB_KEY_ecircumflex","","",null,null],[17,"XKB_KEY_ediaeresis","","",null,null],[17,"XKB_KEY_igrave","","",null,null],[17,"XKB_KEY_iacute","","",null,null],[17,"XKB_KEY_icircumflex","","",null,null],[17,"XKB_KEY_idiaeresis","","",null,null],[17,"XKB_KEY_eth","","",null,null],[17,"XKB_KEY_ntilde","","",null,null],[17,"XKB_KEY_ograve","","",null,null],[17,"XKB_KEY_oacute","","",null,null],[17,"XKB_KEY_ocircumflex","","",null,null],[17,"XKB_KEY_otilde","","",null,null],[17,"XKB_KEY_odiaeresis","","",null,null],[17,"XKB_KEY_division","","",null,null],[17,"XKB_KEY_oslash","","",null,null],[17,"XKB_KEY_ooblique","","",null,null],[17,"XKB_KEY_ugrave","","",null,null],[17,"XKB_KEY_uacute","","",null,null],[17,"XKB_KEY_ucircumflex","","",null,null],[17,"XKB_KEY_udiaeresis","","",null,null],[17,"XKB_KEY_yacute","","",null,null],[17,"XKB_KEY_thorn","","",null,null],[17,"XKB_KEY_ydiaeresis","","",null,null],[17,"XKB_KEY_Aogonek","","",null,null],[17,"XKB_KEY_breve","","",null,null],[17,"XKB_KEY_Lstroke","","",null,null],[17,"XKB_KEY_Lcaron","","",null,null],[17,"XKB_KEY_Sacute","","",null,null],[17,"XKB_KEY_Scaron","","",null,null],[17,"XKB_KEY_Scedilla","","",null,null],[17,"XKB_KEY_Tcaron","","",null,null],[17,"XKB_KEY_Zacute","","",null,null],[17,"XKB_KEY_Zcaron","","",null,null],[17,"XKB_KEY_Zabovedot","","",null,null],[17,"XKB_KEY_aogonek","","",null,null],[17,"XKB_KEY_ogonek","","",null,null],[17,"XKB_KEY_lstroke","","",null,null],[17,"XKB_KEY_lcaron","","",null,null],[17,"XKB_KEY_sacute","","",null,null],[17,"XKB_KEY_caron","","",null,null],[17,"XKB_KEY_scaron","","",null,null],[17,"XKB_KEY_scedilla","","",null,null],[17,"XKB_KEY_tcaron","","",null,null],[17,"XKB_KEY_zacute","","",null,null],[17,"XKB_KEY_doubleacute","","",null,null],[17,"XKB_KEY_zcaron","","",null,null],[17,"XKB_KEY_zabovedot","","",null,null],[17,"XKB_KEY_Racute","","",null,null],[17,"XKB_KEY_Abreve","","",null,null],[17,"XKB_KEY_Lacute","","",null,null],[17,"XKB_KEY_Cacute","","",null,null],[17,"XKB_KEY_Ccaron","","",null,null],[17,"XKB_KEY_Eogonek","","",null,null],[17,"XKB_KEY_Ecaron","","",null,null],[17,"XKB_KEY_Dcaron","","",null,null],[17,"XKB_KEY_Dstroke","","",null,null],[17,"XKB_KEY_Nacute","","",null,null],[17,"XKB_KEY_Ncaron","","",null,null],[17,"XKB_KEY_Odoubleacute","","",null,null],[17,"XKB_KEY_Rcaron","","",null,null],[17,"XKB_KEY_Uring","","",null,null],[17,"XKB_KEY_Udoubleacute","","",null,null],[17,"XKB_KEY_Tcedilla","","",null,null],[17,"XKB_KEY_racute","","",null,null],[17,"XKB_KEY_abreve","","",null,null],[17,"XKB_KEY_lacute","","",null,null],[17,"XKB_KEY_cacute","","",null,null],[17,"XKB_KEY_ccaron","","",null,null],[17,"XKB_KEY_eogonek","","",null,null],[17,"XKB_KEY_ecaron","","",null,null],[17,"XKB_KEY_dcaron","","",null,null],[17,"XKB_KEY_dstroke","","",null,null],[17,"XKB_KEY_nacute","","",null,null],[17,"XKB_KEY_ncaron","","",null,null],[17,"XKB_KEY_odoubleacute","","",null,null],[17,"XKB_KEY_rcaron","","",null,null],[17,"XKB_KEY_uring","","",null,null],[17,"XKB_KEY_udoubleacute","","",null,null],[17,"XKB_KEY_tcedilla","","",null,null],[17,"XKB_KEY_abovedot","","",null,null],[17,"XKB_KEY_Hstroke","","",null,null],[17,"XKB_KEY_Hcircumflex","","",null,null],[17,"XKB_KEY_Iabovedot","","",null,null],[17,"XKB_KEY_Gbreve","","",null,null],[17,"XKB_KEY_Jcircumflex","","",null,null],[17,"XKB_KEY_hstroke","","",null,null],[17,"XKB_KEY_hcircumflex","","",null,null],[17,"XKB_KEY_idotless","","",null,null],[17,"XKB_KEY_gbreve","","",null,null],[17,"XKB_KEY_jcircumflex","","",null,null],[17,"XKB_KEY_Cabovedot","","",null,null],[17,"XKB_KEY_Ccircumflex","","",null,null],[17,"XKB_KEY_Gabovedot","","",null,null],[17,"XKB_KEY_Gcircumflex","","",null,null],[17,"XKB_KEY_Ubreve","","",null,null],[17,"XKB_KEY_Scircumflex","","",null,null],[17,"XKB_KEY_cabovedot","","",null,null],[17,"XKB_KEY_ccircumflex","","",null,null],[17,"XKB_KEY_gabovedot","","",null,null],[17,"XKB_KEY_gcircumflex","","",null,null],[17,"XKB_KEY_ubreve","","",null,null],[17,"XKB_KEY_scircumflex","","",null,null],[17,"XKB_KEY_kra","","",null,null],[17,"XKB_KEY_kappa","","",null,null],[17,"XKB_KEY_Rcedilla","","",null,null],[17,"XKB_KEY_Itilde","","",null,null],[17,"XKB_KEY_Lcedilla","","",null,null],[17,"XKB_KEY_Emacron","","",null,null],[17,"XKB_KEY_Gcedilla","","",null,null],[17,"XKB_KEY_Tslash","","",null,null],[17,"XKB_KEY_rcedilla","","",null,null],[17,"XKB_KEY_itilde","","",null,null],[17,"XKB_KEY_lcedilla","","",null,null],[17,"XKB_KEY_emacron","","",null,null],[17,"XKB_KEY_gcedilla","","",null,null],[17,"XKB_KEY_tslash","","",null,null],[17,"XKB_KEY_ENG","","",null,null],[17,"XKB_KEY_eng","","",null,null],[17,"XKB_KEY_Amacron","","",null,null],[17,"XKB_KEY_Iogonek","","",null,null],[17,"XKB_KEY_Eabovedot","","",null,null],[17,"XKB_KEY_Imacron","","",null,null],[17,"XKB_KEY_Ncedilla","","",null,null],[17,"XKB_KEY_Omacron","","",null,null],[17,"XKB_KEY_Kcedilla","","",null,null],[17,"XKB_KEY_Uogonek","","",null,null],[17,"XKB_KEY_Utilde","","",null,null],[17,"XKB_KEY_Umacron","","",null,null],[17,"XKB_KEY_amacron","","",null,null],[17,"XKB_KEY_iogonek","","",null,null],[17,"XKB_KEY_eabovedot","","",null,null],[17,"XKB_KEY_imacron","","",null,null],[17,"XKB_KEY_ncedilla","","",null,null],[17,"XKB_KEY_omacron","","",null,null],[17,"XKB_KEY_kcedilla","","",null,null],[17,"XKB_KEY_uogonek","","",null,null],[17,"XKB_KEY_utilde","","",null,null],[17,"XKB_KEY_umacron","","",null,null],[17,"XKB_KEY_Wcircumflex","","",null,null],[17,"XKB_KEY_wcircumflex","","",null,null],[17,"XKB_KEY_Ycircumflex","","",null,null],[17,"XKB_KEY_ycircumflex","","",null,null],[17,"XKB_KEY_Babovedot","","",null,null],[17,"XKB_KEY_babovedot","","",null,null],[17,"XKB_KEY_Dabovedot","","",null,null],[17,"XKB_KEY_dabovedot","","",null,null],[17,"XKB_KEY_Fabovedot","","",null,null],[17,"XKB_KEY_fabovedot","","",null,null],[17,"XKB_KEY_Mabovedot","","",null,null],[17,"XKB_KEY_mabovedot","","",null,null],[17,"XKB_KEY_Pabovedot","","",null,null],[17,"XKB_KEY_pabovedot","","",null,null],[17,"XKB_KEY_Sabovedot","","",null,null],[17,"XKB_KEY_sabovedot","","",null,null],[17,"XKB_KEY_Tabovedot","","",null,null],[17,"XKB_KEY_tabovedot","","",null,null],[17,"XKB_KEY_Wgrave","","",null,null],[17,"XKB_KEY_wgrave","","",null,null],[17,"XKB_KEY_Wacute","","",null,null],[17,"XKB_KEY_wacute","","",null,null],[17,"XKB_KEY_Wdiaeresis","","",null,null],[17,"XKB_KEY_wdiaeresis","","",null,null],[17,"XKB_KEY_Ygrave","","",null,null],[17,"XKB_KEY_ygrave","","",null,null],[17,"XKB_KEY_OE","","",null,null],[17,"XKB_KEY_oe","","",null,null],[17,"XKB_KEY_Ydiaeresis","","",null,null],[17,"XKB_KEY_overline","","",null,null],[17,"XKB_KEY_kana_fullstop","","",null,null],[17,"XKB_KEY_kana_openingbracket","","",null,null],[17,"XKB_KEY_kana_closingbracket","","",null,null],[17,"XKB_KEY_kana_comma","","",null,null],[17,"XKB_KEY_kana_conjunctive","","",null,null],[17,"XKB_KEY_kana_middledot","","",null,null],[17,"XKB_KEY_kana_WO","","",null,null],[17,"XKB_KEY_kana_a","","",null,null],[17,"XKB_KEY_kana_i","","",null,null],[17,"XKB_KEY_kana_u","","",null,null],[17,"XKB_KEY_kana_e","","",null,null],[17,"XKB_KEY_kana_o","","",null,null],[17,"XKB_KEY_kana_ya","","",null,null],[17,"XKB_KEY_kana_yu","","",null,null],[17,"XKB_KEY_kana_yo","","",null,null],[17,"XKB_KEY_kana_tsu","","",null,null],[17,"XKB_KEY_kana_tu","","",null,null],[17,"XKB_KEY_prolongedsound","","",null,null],[17,"XKB_KEY_kana_A","","",null,null],[17,"XKB_KEY_kana_I","","",null,null],[17,"XKB_KEY_kana_U","","",null,null],[17,"XKB_KEY_kana_E","","",null,null],[17,"XKB_KEY_kana_O","","",null,null],[17,"XKB_KEY_kana_KA","","",null,null],[17,"XKB_KEY_kana_KI","","",null,null],[17,"XKB_KEY_kana_KU","","",null,null],[17,"XKB_KEY_kana_KE","","",null,null],[17,"XKB_KEY_kana_KO","","",null,null],[17,"XKB_KEY_kana_SA","","",null,null],[17,"XKB_KEY_kana_SHI","","",null,null],[17,"XKB_KEY_kana_SU","","",null,null],[17,"XKB_KEY_kana_SE","","",null,null],[17,"XKB_KEY_kana_SO","","",null,null],[17,"XKB_KEY_kana_TA","","",null,null],[17,"XKB_KEY_kana_CHI","","",null,null],[17,"XKB_KEY_kana_TI","","",null,null],[17,"XKB_KEY_kana_TSU","","",null,null],[17,"XKB_KEY_kana_TU","","",null,null],[17,"XKB_KEY_kana_TE","","",null,null],[17,"XKB_KEY_kana_TO","","",null,null],[17,"XKB_KEY_kana_NA","","",null,null],[17,"XKB_KEY_kana_NI","","",null,null],[17,"XKB_KEY_kana_NU","","",null,null],[17,"XKB_KEY_kana_NE","","",null,null],[17,"XKB_KEY_kana_NO","","",null,null],[17,"XKB_KEY_kana_HA","","",null,null],[17,"XKB_KEY_kana_HI","","",null,null],[17,"XKB_KEY_kana_FU","","",null,null],[17,"XKB_KEY_kana_HU","","",null,null],[17,"XKB_KEY_kana_HE","","",null,null],[17,"XKB_KEY_kana_HO","","",null,null],[17,"XKB_KEY_kana_MA","","",null,null],[17,"XKB_KEY_kana_MI","","",null,null],[17,"XKB_KEY_kana_MU","","",null,null],[17,"XKB_KEY_kana_ME","","",null,null],[17,"XKB_KEY_kana_MO","","",null,null],[17,"XKB_KEY_kana_YA","","",null,null],[17,"XKB_KEY_kana_YU","","",null,null],[17,"XKB_KEY_kana_YO","","",null,null],[17,"XKB_KEY_kana_RA","","",null,null],[17,"XKB_KEY_kana_RI","","",null,null],[17,"XKB_KEY_kana_RU","","",null,null],[17,"XKB_KEY_kana_RE","","",null,null],[17,"XKB_KEY_kana_RO","","",null,null],[17,"XKB_KEY_kana_WA","","",null,null],[17,"XKB_KEY_kana_N","","",null,null],[17,"XKB_KEY_voicedsound","","",null,null],[17,"XKB_KEY_semivoicedsound","","",null,null],[17,"XKB_KEY_kana_switch","","",null,null],[17,"XKB_KEY_Farsi_0","","",null,null],[17,"XKB_KEY_Farsi_1","","",null,null],[17,"XKB_KEY_Farsi_2","","",null,null],[17,"XKB_KEY_Farsi_3","","",null,null],[17,"XKB_KEY_Farsi_4","","",null,null],[17,"XKB_KEY_Farsi_5","","",null,null],[17,"XKB_KEY_Farsi_6","","",null,null],[17,"XKB_KEY_Farsi_7","","",null,null],[17,"XKB_KEY_Farsi_8","","",null,null],[17,"XKB_KEY_Farsi_9","","",null,null],[17,"XKB_KEY_Arabic_percent","","",null,null],[17,"XKB_KEY_Arabic_superscript_alef","","",null,null],[17,"XKB_KEY_Arabic_tteh","","",null,null],[17,"XKB_KEY_Arabic_peh","","",null,null],[17,"XKB_KEY_Arabic_tcheh","","",null,null],[17,"XKB_KEY_Arabic_ddal","","",null,null],[17,"XKB_KEY_Arabic_rreh","","",null,null],[17,"XKB_KEY_Arabic_comma","","",null,null],[17,"XKB_KEY_Arabic_fullstop","","",null,null],[17,"XKB_KEY_Arabic_0","","",null,null],[17,"XKB_KEY_Arabic_1","","",null,null],[17,"XKB_KEY_Arabic_2","","",null,null],[17,"XKB_KEY_Arabic_3","","",null,null],[17,"XKB_KEY_Arabic_4","","",null,null],[17,"XKB_KEY_Arabic_5","","",null,null],[17,"XKB_KEY_Arabic_6","","",null,null],[17,"XKB_KEY_Arabic_7","","",null,null],[17,"XKB_KEY_Arabic_8","","",null,null],[17,"XKB_KEY_Arabic_9","","",null,null],[17,"XKB_KEY_Arabic_semicolon","","",null,null],[17,"XKB_KEY_Arabic_question_mark","","",null,null],[17,"XKB_KEY_Arabic_hamza","","",null,null],[17,"XKB_KEY_Arabic_maddaonalef","","",null,null],[17,"XKB_KEY_Arabic_hamzaonalef","","",null,null],[17,"XKB_KEY_Arabic_hamzaonwaw","","",null,null],[17,"XKB_KEY_Arabic_hamzaunderalef","","",null,null],[17,"XKB_KEY_Arabic_hamzaonyeh","","",null,null],[17,"XKB_KEY_Arabic_alef","","",null,null],[17,"XKB_KEY_Arabic_beh","","",null,null],[17,"XKB_KEY_Arabic_tehmarbuta","","",null,null],[17,"XKB_KEY_Arabic_teh","","",null,null],[17,"XKB_KEY_Arabic_theh","","",null,null],[17,"XKB_KEY_Arabic_jeem","","",null,null],[17,"XKB_KEY_Arabic_hah","","",null,null],[17,"XKB_KEY_Arabic_khah","","",null,null],[17,"XKB_KEY_Arabic_dal","","",null,null],[17,"XKB_KEY_Arabic_thal","","",null,null],[17,"XKB_KEY_Arabic_ra","","",null,null],[17,"XKB_KEY_Arabic_zain","","",null,null],[17,"XKB_KEY_Arabic_seen","","",null,null],[17,"XKB_KEY_Arabic_sheen","","",null,null],[17,"XKB_KEY_Arabic_sad","","",null,null],[17,"XKB_KEY_Arabic_dad","","",null,null],[17,"XKB_KEY_Arabic_tah","","",null,null],[17,"XKB_KEY_Arabic_zah","","",null,null],[17,"XKB_KEY_Arabic_ain","","",null,null],[17,"XKB_KEY_Arabic_ghain","","",null,null],[17,"XKB_KEY_Arabic_tatweel","","",null,null],[17,"XKB_KEY_Arabic_feh","","",null,null],[17,"XKB_KEY_Arabic_qaf","","",null,null],[17,"XKB_KEY_Arabic_kaf","","",null,null],[17,"XKB_KEY_Arabic_lam","","",null,null],[17,"XKB_KEY_Arabic_meem","","",null,null],[17,"XKB_KEY_Arabic_noon","","",null,null],[17,"XKB_KEY_Arabic_ha","","",null,null],[17,"XKB_KEY_Arabic_heh","","",null,null],[17,"XKB_KEY_Arabic_waw","","",null,null],[17,"XKB_KEY_Arabic_alefmaksura","","",null,null],[17,"XKB_KEY_Arabic_yeh","","",null,null],[17,"XKB_KEY_Arabic_fathatan","","",null,null],[17,"XKB_KEY_Arabic_dammatan","","",null,null],[17,"XKB_KEY_Arabic_kasratan","","",null,null],[17,"XKB_KEY_Arabic_fatha","","",null,null],[17,"XKB_KEY_Arabic_damma","","",null,null],[17,"XKB_KEY_Arabic_kasra","","",null,null],[17,"XKB_KEY_Arabic_shadda","","",null,null],[17,"XKB_KEY_Arabic_sukun","","",null,null],[17,"XKB_KEY_Arabic_madda_above","","",null,null],[17,"XKB_KEY_Arabic_hamza_above","","",null,null],[17,"XKB_KEY_Arabic_hamza_below","","",null,null],[17,"XKB_KEY_Arabic_jeh","","",null,null],[17,"XKB_KEY_Arabic_veh","","",null,null],[17,"XKB_KEY_Arabic_keheh","","",null,null],[17,"XKB_KEY_Arabic_gaf","","",null,null],[17,"XKB_KEY_Arabic_noon_ghunna","","",null,null],[17,"XKB_KEY_Arabic_heh_doachashmee","","",null,null],[17,"XKB_KEY_Farsi_yeh","","",null,null],[17,"XKB_KEY_Arabic_farsi_yeh","","",null,null],[17,"XKB_KEY_Arabic_yeh_baree","","",null,null],[17,"XKB_KEY_Arabic_heh_goal","","",null,null],[17,"XKB_KEY_Arabic_switch","","",null,null],[17,"XKB_KEY_Cyrillic_GHE_bar","","",null,null],[17,"XKB_KEY_Cyrillic_ghe_bar","","",null,null],[17,"XKB_KEY_Cyrillic_ZHE_descender","","",null,null],[17,"XKB_KEY_Cyrillic_zhe_descender","","",null,null],[17,"XKB_KEY_Cyrillic_KA_descender","","",null,null],[17,"XKB_KEY_Cyrillic_ka_descender","","",null,null],[17,"XKB_KEY_Cyrillic_KA_vertstroke","","",null,null],[17,"XKB_KEY_Cyrillic_ka_vertstroke","","",null,null],[17,"XKB_KEY_Cyrillic_EN_descender","","",null,null],[17,"XKB_KEY_Cyrillic_en_descender","","",null,null],[17,"XKB_KEY_Cyrillic_U_straight","","",null,null],[17,"XKB_KEY_Cyrillic_u_straight","","",null,null],[17,"XKB_KEY_Cyrillic_U_straight_bar","","",null,null],[17,"XKB_KEY_Cyrillic_u_straight_bar","","",null,null],[17,"XKB_KEY_Cyrillic_HA_descender","","",null,null],[17,"XKB_KEY_Cyrillic_ha_descender","","",null,null],[17,"XKB_KEY_Cyrillic_CHE_descender","","",null,null],[17,"XKB_KEY_Cyrillic_che_descender","","",null,null],[17,"XKB_KEY_Cyrillic_CHE_vertstroke","","",null,null],[17,"XKB_KEY_Cyrillic_che_vertstroke","","",null,null],[17,"XKB_KEY_Cyrillic_SHHA","","",null,null],[17,"XKB_KEY_Cyrillic_shha","","",null,null],[17,"XKB_KEY_Cyrillic_SCHWA","","",null,null],[17,"XKB_KEY_Cyrillic_schwa","","",null,null],[17,"XKB_KEY_Cyrillic_I_macron","","",null,null],[17,"XKB_KEY_Cyrillic_i_macron","","",null,null],[17,"XKB_KEY_Cyrillic_O_bar","","",null,null],[17,"XKB_KEY_Cyrillic_o_bar","","",null,null],[17,"XKB_KEY_Cyrillic_U_macron","","",null,null],[17,"XKB_KEY_Cyrillic_u_macron","","",null,null],[17,"XKB_KEY_Serbian_dje","","",null,null],[17,"XKB_KEY_Macedonia_gje","","",null,null],[17,"XKB_KEY_Cyrillic_io","","",null,null],[17,"XKB_KEY_Ukrainian_ie","","",null,null],[17,"XKB_KEY_Ukranian_je","","",null,null],[17,"XKB_KEY_Macedonia_dse","","",null,null],[17,"XKB_KEY_Ukrainian_i","","",null,null],[17,"XKB_KEY_Ukranian_i","","",null,null],[17,"XKB_KEY_Ukrainian_yi","","",null,null],[17,"XKB_KEY_Ukranian_yi","","",null,null],[17,"XKB_KEY_Cyrillic_je","","",null,null],[17,"XKB_KEY_Serbian_je","","",null,null],[17,"XKB_KEY_Cyrillic_lje","","",null,null],[17,"XKB_KEY_Serbian_lje","","",null,null],[17,"XKB_KEY_Cyrillic_nje","","",null,null],[17,"XKB_KEY_Serbian_nje","","",null,null],[17,"XKB_KEY_Serbian_tshe","","",null,null],[17,"XKB_KEY_Macedonia_kje","","",null,null],[17,"XKB_KEY_Ukrainian_ghe_with_upturn","","",null,null],[17,"XKB_KEY_Byelorussian_shortu","","",null,null],[17,"XKB_KEY_Cyrillic_dzhe","","",null,null],[17,"XKB_KEY_Serbian_dze","","",null,null],[17,"XKB_KEY_numerosign","","",null,null],[17,"XKB_KEY_Serbian_DJE","","",null,null],[17,"XKB_KEY_Macedonia_GJE","","",null,null],[17,"XKB_KEY_Cyrillic_IO","","",null,null],[17,"XKB_KEY_Ukrainian_IE","","",null,null],[17,"XKB_KEY_Ukranian_JE","","",null,null],[17,"XKB_KEY_Macedonia_DSE","","",null,null],[17,"XKB_KEY_Ukrainian_I","","",null,null],[17,"XKB_KEY_Ukranian_I","","",null,null],[17,"XKB_KEY_Ukrainian_YI","","",null,null],[17,"XKB_KEY_Ukranian_YI","","",null,null],[17,"XKB_KEY_Cyrillic_JE","","",null,null],[17,"XKB_KEY_Serbian_JE","","",null,null],[17,"XKB_KEY_Cyrillic_LJE","","",null,null],[17,"XKB_KEY_Serbian_LJE","","",null,null],[17,"XKB_KEY_Cyrillic_NJE","","",null,null],[17,"XKB_KEY_Serbian_NJE","","",null,null],[17,"XKB_KEY_Serbian_TSHE","","",null,null],[17,"XKB_KEY_Macedonia_KJE","","",null,null],[17,"XKB_KEY_Ukrainian_GHE_WITH_UPTURN","","",null,null],[17,"XKB_KEY_Byelorussian_SHORTU","","",null,null],[17,"XKB_KEY_Cyrillic_DZHE","","",null,null],[17,"XKB_KEY_Serbian_DZE","","",null,null],[17,"XKB_KEY_Cyrillic_yu","","",null,null],[17,"XKB_KEY_Cyrillic_a","","",null,null],[17,"XKB_KEY_Cyrillic_be","","",null,null],[17,"XKB_KEY_Cyrillic_tse","","",null,null],[17,"XKB_KEY_Cyrillic_de","","",null,null],[17,"XKB_KEY_Cyrillic_ie","","",null,null],[17,"XKB_KEY_Cyrillic_ef","","",null,null],[17,"XKB_KEY_Cyrillic_ghe","","",null,null],[17,"XKB_KEY_Cyrillic_ha","","",null,null],[17,"XKB_KEY_Cyrillic_i","","",null,null],[17,"XKB_KEY_Cyrillic_shorti","","",null,null],[17,"XKB_KEY_Cyrillic_ka","","",null,null],[17,"XKB_KEY_Cyrillic_el","","",null,null],[17,"XKB_KEY_Cyrillic_em","","",null,null],[17,"XKB_KEY_Cyrillic_en","","",null,null],[17,"XKB_KEY_Cyrillic_o","","",null,null],[17,"XKB_KEY_Cyrillic_pe","","",null,null],[17,"XKB_KEY_Cyrillic_ya","","",null,null],[17,"XKB_KEY_Cyrillic_er","","",null,null],[17,"XKB_KEY_Cyrillic_es","","",null,null],[17,"XKB_KEY_Cyrillic_te","","",null,null],[17,"XKB_KEY_Cyrillic_u","","",null,null],[17,"XKB_KEY_Cyrillic_zhe","","",null,null],[17,"XKB_KEY_Cyrillic_ve","","",null,null],[17,"XKB_KEY_Cyrillic_softsign","","",null,null],[17,"XKB_KEY_Cyrillic_yeru","","",null,null],[17,"XKB_KEY_Cyrillic_ze","","",null,null],[17,"XKB_KEY_Cyrillic_sha","","",null,null],[17,"XKB_KEY_Cyrillic_e","","",null,null],[17,"XKB_KEY_Cyrillic_shcha","","",null,null],[17,"XKB_KEY_Cyrillic_che","","",null,null],[17,"XKB_KEY_Cyrillic_hardsign","","",null,null],[17,"XKB_KEY_Cyrillic_YU","","",null,null],[17,"XKB_KEY_Cyrillic_A","","",null,null],[17,"XKB_KEY_Cyrillic_BE","","",null,null],[17,"XKB_KEY_Cyrillic_TSE","","",null,null],[17,"XKB_KEY_Cyrillic_DE","","",null,null],[17,"XKB_KEY_Cyrillic_IE","","",null,null],[17,"XKB_KEY_Cyrillic_EF","","",null,null],[17,"XKB_KEY_Cyrillic_GHE","","",null,null],[17,"XKB_KEY_Cyrillic_HA","","",null,null],[17,"XKB_KEY_Cyrillic_I","","",null,null],[17,"XKB_KEY_Cyrillic_SHORTI","","",null,null],[17,"XKB_KEY_Cyrillic_KA","","",null,null],[17,"XKB_KEY_Cyrillic_EL","","",null,null],[17,"XKB_KEY_Cyrillic_EM","","",null,null],[17,"XKB_KEY_Cyrillic_EN","","",null,null],[17,"XKB_KEY_Cyrillic_O","","",null,null],[17,"XKB_KEY_Cyrillic_PE","","",null,null],[17,"XKB_KEY_Cyrillic_YA","","",null,null],[17,"XKB_KEY_Cyrillic_ER","","",null,null],[17,"XKB_KEY_Cyrillic_ES","","",null,null],[17,"XKB_KEY_Cyrillic_TE","","",null,null],[17,"XKB_KEY_Cyrillic_U","","",null,null],[17,"XKB_KEY_Cyrillic_ZHE","","",null,null],[17,"XKB_KEY_Cyrillic_VE","","",null,null],[17,"XKB_KEY_Cyrillic_SOFTSIGN","","",null,null],[17,"XKB_KEY_Cyrillic_YERU","","",null,null],[17,"XKB_KEY_Cyrillic_ZE","","",null,null],[17,"XKB_KEY_Cyrillic_SHA","","",null,null],[17,"XKB_KEY_Cyrillic_E","","",null,null],[17,"XKB_KEY_Cyrillic_SHCHA","","",null,null],[17,"XKB_KEY_Cyrillic_CHE","","",null,null],[17,"XKB_KEY_Cyrillic_HARDSIGN","","",null,null],[17,"XKB_KEY_Greek_ALPHAaccent","","",null,null],[17,"XKB_KEY_Greek_EPSILONaccent","","",null,null],[17,"XKB_KEY_Greek_ETAaccent","","",null,null],[17,"XKB_KEY_Greek_IOTAaccent","","",null,null],[17,"XKB_KEY_Greek_IOTAdieresis","","",null,null],[17,"XKB_KEY_Greek_IOTAdiaeresis","","",null,null],[17,"XKB_KEY_Greek_OMICRONaccent","","",null,null],[17,"XKB_KEY_Greek_UPSILONaccent","","",null,null],[17,"XKB_KEY_Greek_UPSILONdieresis","","",null,null],[17,"XKB_KEY_Greek_OMEGAaccent","","",null,null],[17,"XKB_KEY_Greek_accentdieresis","","",null,null],[17,"XKB_KEY_Greek_horizbar","","",null,null],[17,"XKB_KEY_Greek_alphaaccent","","",null,null],[17,"XKB_KEY_Greek_epsilonaccent","","",null,null],[17,"XKB_KEY_Greek_etaaccent","","",null,null],[17,"XKB_KEY_Greek_iotaaccent","","",null,null],[17,"XKB_KEY_Greek_iotadieresis","","",null,null],[17,"XKB_KEY_Greek_iotaaccentdieresis","","",null,null],[17,"XKB_KEY_Greek_omicronaccent","","",null,null],[17,"XKB_KEY_Greek_upsilonaccent","","",null,null],[17,"XKB_KEY_Greek_upsilondieresis","","",null,null],[17,"XKB_KEY_Greek_upsilonaccentdieresis","","",null,null],[17,"XKB_KEY_Greek_omegaaccent","","",null,null],[17,"XKB_KEY_Greek_ALPHA","","",null,null],[17,"XKB_KEY_Greek_BETA","","",null,null],[17,"XKB_KEY_Greek_GAMMA","","",null,null],[17,"XKB_KEY_Greek_DELTA","","",null,null],[17,"XKB_KEY_Greek_EPSILON","","",null,null],[17,"XKB_KEY_Greek_ZETA","","",null,null],[17,"XKB_KEY_Greek_ETA","","",null,null],[17,"XKB_KEY_Greek_THETA","","",null,null],[17,"XKB_KEY_Greek_IOTA","","",null,null],[17,"XKB_KEY_Greek_KAPPA","","",null,null],[17,"XKB_KEY_Greek_LAMDA","","",null,null],[17,"XKB_KEY_Greek_LAMBDA","","",null,null],[17,"XKB_KEY_Greek_MU","","",null,null],[17,"XKB_KEY_Greek_NU","","",null,null],[17,"XKB_KEY_Greek_XI","","",null,null],[17,"XKB_KEY_Greek_OMICRON","","",null,null],[17,"XKB_KEY_Greek_PI","","",null,null],[17,"XKB_KEY_Greek_RHO","","",null,null],[17,"XKB_KEY_Greek_SIGMA","","",null,null],[17,"XKB_KEY_Greek_TAU","","",null,null],[17,"XKB_KEY_Greek_UPSILON","","",null,null],[17,"XKB_KEY_Greek_PHI","","",null,null],[17,"XKB_KEY_Greek_CHI","","",null,null],[17,"XKB_KEY_Greek_PSI","","",null,null],[17,"XKB_KEY_Greek_OMEGA","","",null,null],[17,"XKB_KEY_Greek_alpha","","",null,null],[17,"XKB_KEY_Greek_beta","","",null,null],[17,"XKB_KEY_Greek_gamma","","",null,null],[17,"XKB_KEY_Greek_delta","","",null,null],[17,"XKB_KEY_Greek_epsilon","","",null,null],[17,"XKB_KEY_Greek_zeta","","",null,null],[17,"XKB_KEY_Greek_eta","","",null,null],[17,"XKB_KEY_Greek_theta","","",null,null],[17,"XKB_KEY_Greek_iota","","",null,null],[17,"XKB_KEY_Greek_kappa","","",null,null],[17,"XKB_KEY_Greek_lamda","","",null,null],[17,"XKB_KEY_Greek_lambda","","",null,null],[17,"XKB_KEY_Greek_mu","","",null,null],[17,"XKB_KEY_Greek_nu","","",null,null],[17,"XKB_KEY_Greek_xi","","",null,null],[17,"XKB_KEY_Greek_omicron","","",null,null],[17,"XKB_KEY_Greek_pi","","",null,null],[17,"XKB_KEY_Greek_rho","","",null,null],[17,"XKB_KEY_Greek_sigma","","",null,null],[17,"XKB_KEY_Greek_finalsmallsigma","","",null,null],[17,"XKB_KEY_Greek_tau","","",null,null],[17,"XKB_KEY_Greek_upsilon","","",null,null],[17,"XKB_KEY_Greek_phi","","",null,null],[17,"XKB_KEY_Greek_chi","","",null,null],[17,"XKB_KEY_Greek_psi","","",null,null],[17,"XKB_KEY_Greek_omega","","",null,null],[17,"XKB_KEY_Greek_switch","","",null,null],[17,"XKB_KEY_leftradical","","",null,null],[17,"XKB_KEY_topleftradical","","",null,null],[17,"XKB_KEY_horizconnector","","",null,null],[17,"XKB_KEY_topintegral","","",null,null],[17,"XKB_KEY_botintegral","","",null,null],[17,"XKB_KEY_vertconnector","","",null,null],[17,"XKB_KEY_topleftsqbracket","","",null,null],[17,"XKB_KEY_botleftsqbracket","","",null,null],[17,"XKB_KEY_toprightsqbracket","","",null,null],[17,"XKB_KEY_botrightsqbracket","","",null,null],[17,"XKB_KEY_topleftparens","","",null,null],[17,"XKB_KEY_botleftparens","","",null,null],[17,"XKB_KEY_toprightparens","","",null,null],[17,"XKB_KEY_botrightparens","","",null,null],[17,"XKB_KEY_leftmiddlecurlybrace","","",null,null],[17,"XKB_KEY_rightmiddlecurlybrace","","",null,null],[17,"XKB_KEY_topleftsummation","","",null,null],[17,"XKB_KEY_botleftsummation","","",null,null],[17,"XKB_KEY_topvertsummationconnector","","",null,null],[17,"XKB_KEY_botvertsummationconnector","","",null,null],[17,"XKB_KEY_toprightsummation","","",null,null],[17,"XKB_KEY_botrightsummation","","",null,null],[17,"XKB_KEY_rightmiddlesummation","","",null,null],[17,"XKB_KEY_lessthanequal","","",null,null],[17,"XKB_KEY_notequal","","",null,null],[17,"XKB_KEY_greaterthanequal","","",null,null],[17,"XKB_KEY_integral","","",null,null],[17,"XKB_KEY_therefore","","",null,null],[17,"XKB_KEY_variation","","",null,null],[17,"XKB_KEY_infinity","","",null,null],[17,"XKB_KEY_nabla","","",null,null],[17,"XKB_KEY_approximate","","",null,null],[17,"XKB_KEY_similarequal","","",null,null],[17,"XKB_KEY_ifonlyif","","",null,null],[17,"XKB_KEY_implies","","",null,null],[17,"XKB_KEY_identical","","",null,null],[17,"XKB_KEY_radical","","",null,null],[17,"XKB_KEY_includedin","","",null,null],[17,"XKB_KEY_includes","","",null,null],[17,"XKB_KEY_intersection","","",null,null],[17,"XKB_KEY_union","","",null,null],[17,"XKB_KEY_logicaland","","",null,null],[17,"XKB_KEY_logicalor","","",null,null],[17,"XKB_KEY_partialderivative","","",null,null],[17,"XKB_KEY_function","","",null,null],[17,"XKB_KEY_leftarrow","","",null,null],[17,"XKB_KEY_uparrow","","",null,null],[17,"XKB_KEY_rightarrow","","",null,null],[17,"XKB_KEY_downarrow","","",null,null],[17,"XKB_KEY_blank","","",null,null],[17,"XKB_KEY_soliddiamond","","",null,null],[17,"XKB_KEY_checkerboard","","",null,null],[17,"XKB_KEY_ht","","",null,null],[17,"XKB_KEY_ff","","",null,null],[17,"XKB_KEY_cr","","",null,null],[17,"XKB_KEY_lf","","",null,null],[17,"XKB_KEY_nl","","",null,null],[17,"XKB_KEY_vt","","",null,null],[17,"XKB_KEY_lowrightcorner","","",null,null],[17,"XKB_KEY_uprightcorner","","",null,null],[17,"XKB_KEY_upleftcorner","","",null,null],[17,"XKB_KEY_lowleftcorner","","",null,null],[17,"XKB_KEY_crossinglines","","",null,null],[17,"XKB_KEY_horizlinescan1","","",null,null],[17,"XKB_KEY_horizlinescan3","","",null,null],[17,"XKB_KEY_horizlinescan5","","",null,null],[17,"XKB_KEY_horizlinescan7","","",null,null],[17,"XKB_KEY_horizlinescan9","","",null,null],[17,"XKB_KEY_leftt","","",null,null],[17,"XKB_KEY_rightt","","",null,null],[17,"XKB_KEY_bott","","",null,null],[17,"XKB_KEY_topt","","",null,null],[17,"XKB_KEY_vertbar","","",null,null],[17,"XKB_KEY_emspace","","",null,null],[17,"XKB_KEY_enspace","","",null,null],[17,"XKB_KEY_em3space","","",null,null],[17,"XKB_KEY_em4space","","",null,null],[17,"XKB_KEY_digitspace","","",null,null],[17,"XKB_KEY_punctspace","","",null,null],[17,"XKB_KEY_thinspace","","",null,null],[17,"XKB_KEY_hairspace","","",null,null],[17,"XKB_KEY_emdash","","",null,null],[17,"XKB_KEY_endash","","",null,null],[17,"XKB_KEY_signifblank","","",null,null],[17,"XKB_KEY_ellipsis","","",null,null],[17,"XKB_KEY_doubbaselinedot","","",null,null],[17,"XKB_KEY_onethird","","",null,null],[17,"XKB_KEY_twothirds","","",null,null],[17,"XKB_KEY_onefifth","","",null,null],[17,"XKB_KEY_twofifths","","",null,null],[17,"XKB_KEY_threefifths","","",null,null],[17,"XKB_KEY_fourfifths","","",null,null],[17,"XKB_KEY_onesixth","","",null,null],[17,"XKB_KEY_fivesixths","","",null,null],[17,"XKB_KEY_careof","","",null,null],[17,"XKB_KEY_figdash","","",null,null],[17,"XKB_KEY_leftanglebracket","","",null,null],[17,"XKB_KEY_decimalpoint","","",null,null],[17,"XKB_KEY_rightanglebracket","","",null,null],[17,"XKB_KEY_marker","","",null,null],[17,"XKB_KEY_oneeighth","","",null,null],[17,"XKB_KEY_threeeighths","","",null,null],[17,"XKB_KEY_fiveeighths","","",null,null],[17,"XKB_KEY_seveneighths","","",null,null],[17,"XKB_KEY_trademark","","",null,null],[17,"XKB_KEY_signaturemark","","",null,null],[17,"XKB_KEY_trademarkincircle","","",null,null],[17,"XKB_KEY_leftopentriangle","","",null,null],[17,"XKB_KEY_rightopentriangle","","",null,null],[17,"XKB_KEY_emopencircle","","",null,null],[17,"XKB_KEY_emopenrectangle","","",null,null],[17,"XKB_KEY_leftsinglequotemark","","",null,null],[17,"XKB_KEY_rightsinglequotemark","","",null,null],[17,"XKB_KEY_leftdoublequotemark","","",null,null],[17,"XKB_KEY_rightdoublequotemark","","",null,null],[17,"XKB_KEY_prescription","","",null,null],[17,"XKB_KEY_permille","","",null,null],[17,"XKB_KEY_minutes","","",null,null],[17,"XKB_KEY_seconds","","",null,null],[17,"XKB_KEY_latincross","","",null,null],[17,"XKB_KEY_hexagram","","",null,null],[17,"XKB_KEY_filledrectbullet","","",null,null],[17,"XKB_KEY_filledlefttribullet","","",null,null],[17,"XKB_KEY_filledrighttribullet","","",null,null],[17,"XKB_KEY_emfilledcircle","","",null,null],[17,"XKB_KEY_emfilledrect","","",null,null],[17,"XKB_KEY_enopencircbullet","","",null,null],[17,"XKB_KEY_enopensquarebullet","","",null,null],[17,"XKB_KEY_openrectbullet","","",null,null],[17,"XKB_KEY_opentribulletup","","",null,null],[17,"XKB_KEY_opentribulletdown","","",null,null],[17,"XKB_KEY_openstar","","",null,null],[17,"XKB_KEY_enfilledcircbullet","","",null,null],[17,"XKB_KEY_enfilledsqbullet","","",null,null],[17,"XKB_KEY_filledtribulletup","","",null,null],[17,"XKB_KEY_filledtribulletdown","","",null,null],[17,"XKB_KEY_leftpointer","","",null,null],[17,"XKB_KEY_rightpointer","","",null,null],[17,"XKB_KEY_club","","",null,null],[17,"XKB_KEY_diamond","","",null,null],[17,"XKB_KEY_heart","","",null,null],[17,"XKB_KEY_maltesecross","","",null,null],[17,"XKB_KEY_dagger","","",null,null],[17,"XKB_KEY_doubledagger","","",null,null],[17,"XKB_KEY_checkmark","","",null,null],[17,"XKB_KEY_ballotcross","","",null,null],[17,"XKB_KEY_musicalsharp","","",null,null],[17,"XKB_KEY_musicalflat","","",null,null],[17,"XKB_KEY_malesymbol","","",null,null],[17,"XKB_KEY_femalesymbol","","",null,null],[17,"XKB_KEY_telephone","","",null,null],[17,"XKB_KEY_telephonerecorder","","",null,null],[17,"XKB_KEY_phonographcopyright","","",null,null],[17,"XKB_KEY_caret","","",null,null],[17,"XKB_KEY_singlelowquotemark","","",null,null],[17,"XKB_KEY_doublelowquotemark","","",null,null],[17,"XKB_KEY_cursor","","",null,null],[17,"XKB_KEY_leftcaret","","",null,null],[17,"XKB_KEY_rightcaret","","",null,null],[17,"XKB_KEY_downcaret","","",null,null],[17,"XKB_KEY_upcaret","","",null,null],[17,"XKB_KEY_overbar","","",null,null],[17,"XKB_KEY_downtack","","",null,null],[17,"XKB_KEY_upshoe","","",null,null],[17,"XKB_KEY_downstile","","",null,null],[17,"XKB_KEY_underbar","","",null,null],[17,"XKB_KEY_jot","","",null,null],[17,"XKB_KEY_quad","","",null,null],[17,"XKB_KEY_uptack","","",null,null],[17,"XKB_KEY_circle","","",null,null],[17,"XKB_KEY_upstile","","",null,null],[17,"XKB_KEY_downshoe","","",null,null],[17,"XKB_KEY_rightshoe","","",null,null],[17,"XKB_KEY_leftshoe","","",null,null],[17,"XKB_KEY_lefttack","","",null,null],[17,"XKB_KEY_righttack","","",null,null],[17,"XKB_KEY_hebrew_doublelowline","","",null,null],[17,"XKB_KEY_hebrew_aleph","","",null,null],[17,"XKB_KEY_hebrew_bet","","",null,null],[17,"XKB_KEY_hebrew_beth","","",null,null],[17,"XKB_KEY_hebrew_gimel","","",null,null],[17,"XKB_KEY_hebrew_gimmel","","",null,null],[17,"XKB_KEY_hebrew_dalet","","",null,null],[17,"XKB_KEY_hebrew_daleth","","",null,null],[17,"XKB_KEY_hebrew_he","","",null,null],[17,"XKB_KEY_hebrew_waw","","",null,null],[17,"XKB_KEY_hebrew_zain","","",null,null],[17,"XKB_KEY_hebrew_zayin","","",null,null],[17,"XKB_KEY_hebrew_chet","","",null,null],[17,"XKB_KEY_hebrew_het","","",null,null],[17,"XKB_KEY_hebrew_tet","","",null,null],[17,"XKB_KEY_hebrew_teth","","",null,null],[17,"XKB_KEY_hebrew_yod","","",null,null],[17,"XKB_KEY_hebrew_finalkaph","","",null,null],[17,"XKB_KEY_hebrew_kaph","","",null,null],[17,"XKB_KEY_hebrew_lamed","","",null,null],[17,"XKB_KEY_hebrew_finalmem","","",null,null],[17,"XKB_KEY_hebrew_mem","","",null,null],[17,"XKB_KEY_hebrew_finalnun","","",null,null],[17,"XKB_KEY_hebrew_nun","","",null,null],[17,"XKB_KEY_hebrew_samech","","",null,null],[17,"XKB_KEY_hebrew_samekh","","",null,null],[17,"XKB_KEY_hebrew_ayin","","",null,null],[17,"XKB_KEY_hebrew_finalpe","","",null,null],[17,"XKB_KEY_hebrew_pe","","",null,null],[17,"XKB_KEY_hebrew_finalzade","","",null,null],[17,"XKB_KEY_hebrew_finalzadi","","",null,null],[17,"XKB_KEY_hebrew_zade","","",null,null],[17,"XKB_KEY_hebrew_zadi","","",null,null],[17,"XKB_KEY_hebrew_qoph","","",null,null],[17,"XKB_KEY_hebrew_kuf","","",null,null],[17,"XKB_KEY_hebrew_resh","","",null,null],[17,"XKB_KEY_hebrew_shin","","",null,null],[17,"XKB_KEY_hebrew_taw","","",null,null],[17,"XKB_KEY_hebrew_taf","","",null,null],[17,"XKB_KEY_Hebrew_switch","","",null,null],[17,"XKB_KEY_Thai_kokai","","",null,null],[17,"XKB_KEY_Thai_khokhai","","",null,null],[17,"XKB_KEY_Thai_khokhuat","","",null,null],[17,"XKB_KEY_Thai_khokhwai","","",null,null],[17,"XKB_KEY_Thai_khokhon","","",null,null],[17,"XKB_KEY_Thai_khorakhang","","",null,null],[17,"XKB_KEY_Thai_ngongu","","",null,null],[17,"XKB_KEY_Thai_chochan","","",null,null],[17,"XKB_KEY_Thai_choching","","",null,null],[17,"XKB_KEY_Thai_chochang","","",null,null],[17,"XKB_KEY_Thai_soso","","",null,null],[17,"XKB_KEY_Thai_chochoe","","",null,null],[17,"XKB_KEY_Thai_yoying","","",null,null],[17,"XKB_KEY_Thai_dochada","","",null,null],[17,"XKB_KEY_Thai_topatak","","",null,null],[17,"XKB_KEY_Thai_thothan","","",null,null],[17,"XKB_KEY_Thai_thonangmontho","","",null,null],[17,"XKB_KEY_Thai_thophuthao","","",null,null],[17,"XKB_KEY_Thai_nonen","","",null,null],[17,"XKB_KEY_Thai_dodek","","",null,null],[17,"XKB_KEY_Thai_totao","","",null,null],[17,"XKB_KEY_Thai_thothung","","",null,null],[17,"XKB_KEY_Thai_thothahan","","",null,null],[17,"XKB_KEY_Thai_thothong","","",null,null],[17,"XKB_KEY_Thai_nonu","","",null,null],[17,"XKB_KEY_Thai_bobaimai","","",null,null],[17,"XKB_KEY_Thai_popla","","",null,null],[17,"XKB_KEY_Thai_phophung","","",null,null],[17,"XKB_KEY_Thai_fofa","","",null,null],[17,"XKB_KEY_Thai_phophan","","",null,null],[17,"XKB_KEY_Thai_fofan","","",null,null],[17,"XKB_KEY_Thai_phosamphao","","",null,null],[17,"XKB_KEY_Thai_moma","","",null,null],[17,"XKB_KEY_Thai_yoyak","","",null,null],[17,"XKB_KEY_Thai_rorua","","",null,null],[17,"XKB_KEY_Thai_ru","","",null,null],[17,"XKB_KEY_Thai_loling","","",null,null],[17,"XKB_KEY_Thai_lu","","",null,null],[17,"XKB_KEY_Thai_wowaen","","",null,null],[17,"XKB_KEY_Thai_sosala","","",null,null],[17,"XKB_KEY_Thai_sorusi","","",null,null],[17,"XKB_KEY_Thai_sosua","","",null,null],[17,"XKB_KEY_Thai_hohip","","",null,null],[17,"XKB_KEY_Thai_lochula","","",null,null],[17,"XKB_KEY_Thai_oang","","",null,null],[17,"XKB_KEY_Thai_honokhuk","","",null,null],[17,"XKB_KEY_Thai_paiyannoi","","",null,null],[17,"XKB_KEY_Thai_saraa","","",null,null],[17,"XKB_KEY_Thai_maihanakat","","",null,null],[17,"XKB_KEY_Thai_saraaa","","",null,null],[17,"XKB_KEY_Thai_saraam","","",null,null],[17,"XKB_KEY_Thai_sarai","","",null,null],[17,"XKB_KEY_Thai_saraii","","",null,null],[17,"XKB_KEY_Thai_saraue","","",null,null],[17,"XKB_KEY_Thai_sarauee","","",null,null],[17,"XKB_KEY_Thai_sarau","","",null,null],[17,"XKB_KEY_Thai_sarauu","","",null,null],[17,"XKB_KEY_Thai_phinthu","","",null,null],[17,"XKB_KEY_Thai_maihanakat_maitho","","",null,null],[17,"XKB_KEY_Thai_baht","","",null,null],[17,"XKB_KEY_Thai_sarae","","",null,null],[17,"XKB_KEY_Thai_saraae","","",null,null],[17,"XKB_KEY_Thai_sarao","","",null,null],[17,"XKB_KEY_Thai_saraaimaimuan","","",null,null],[17,"XKB_KEY_Thai_saraaimaimalai","","",null,null],[17,"XKB_KEY_Thai_lakkhangyao","","",null,null],[17,"XKB_KEY_Thai_maiyamok","","",null,null],[17,"XKB_KEY_Thai_maitaikhu","","",null,null],[17,"XKB_KEY_Thai_maiek","","",null,null],[17,"XKB_KEY_Thai_maitho","","",null,null],[17,"XKB_KEY_Thai_maitri","","",null,null],[17,"XKB_KEY_Thai_maichattawa","","",null,null],[17,"XKB_KEY_Thai_thanthakhat","","",null,null],[17,"XKB_KEY_Thai_nikhahit","","",null,null],[17,"XKB_KEY_Thai_leksun","","",null,null],[17,"XKB_KEY_Thai_leknung","","",null,null],[17,"XKB_KEY_Thai_leksong","","",null,null],[17,"XKB_KEY_Thai_leksam","","",null,null],[17,"XKB_KEY_Thai_leksi","","",null,null],[17,"XKB_KEY_Thai_lekha","","",null,null],[17,"XKB_KEY_Thai_lekhok","","",null,null],[17,"XKB_KEY_Thai_lekchet","","",null,null],[17,"XKB_KEY_Thai_lekpaet","","",null,null],[17,"XKB_KEY_Thai_lekkao","","",null,null],[17,"XKB_KEY_Hangul","","",null,null],[17,"XKB_KEY_Hangul_Start","","",null,null],[17,"XKB_KEY_Hangul_End","","",null,null],[17,"XKB_KEY_Hangul_Hanja","","",null,null],[17,"XKB_KEY_Hangul_Jamo","","",null,null],[17,"XKB_KEY_Hangul_Romaja","","",null,null],[17,"XKB_KEY_Hangul_Codeinput","","",null,null],[17,"XKB_KEY_Hangul_Jeonja","","",null,null],[17,"XKB_KEY_Hangul_Banja","","",null,null],[17,"XKB_KEY_Hangul_PreHanja","","",null,null],[17,"XKB_KEY_Hangul_PostHanja","","",null,null],[17,"XKB_KEY_Hangul_SingleCandidate","","",null,null],[17,"XKB_KEY_Hangul_MultipleCandidate","","",null,null],[17,"XKB_KEY_Hangul_PreviousCandidate","","",null,null],[17,"XKB_KEY_Hangul_Special","","",null,null],[17,"XKB_KEY_Hangul_switch","","",null,null],[17,"XKB_KEY_Hangul_Kiyeog","","",null,null],[17,"XKB_KEY_Hangul_SsangKiyeog","","",null,null],[17,"XKB_KEY_Hangul_KiyeogSios","","",null,null],[17,"XKB_KEY_Hangul_Nieun","","",null,null],[17,"XKB_KEY_Hangul_NieunJieuj","","",null,null],[17,"XKB_KEY_Hangul_NieunHieuh","","",null,null],[17,"XKB_KEY_Hangul_Dikeud","","",null,null],[17,"XKB_KEY_Hangul_SsangDikeud","","",null,null],[17,"XKB_KEY_Hangul_Rieul","","",null,null],[17,"XKB_KEY_Hangul_RieulKiyeog","","",null,null],[17,"XKB_KEY_Hangul_RieulMieum","","",null,null],[17,"XKB_KEY_Hangul_RieulPieub","","",null,null],[17,"XKB_KEY_Hangul_RieulSios","","",null,null],[17,"XKB_KEY_Hangul_RieulTieut","","",null,null],[17,"XKB_KEY_Hangul_RieulPhieuf","","",null,null],[17,"XKB_KEY_Hangul_RieulHieuh","","",null,null],[17,"XKB_KEY_Hangul_Mieum","","",null,null],[17,"XKB_KEY_Hangul_Pieub","","",null,null],[17,"XKB_KEY_Hangul_SsangPieub","","",null,null],[17,"XKB_KEY_Hangul_PieubSios","","",null,null],[17,"XKB_KEY_Hangul_Sios","","",null,null],[17,"XKB_KEY_Hangul_SsangSios","","",null,null],[17,"XKB_KEY_Hangul_Ieung","","",null,null],[17,"XKB_KEY_Hangul_Jieuj","","",null,null],[17,"XKB_KEY_Hangul_SsangJieuj","","",null,null],[17,"XKB_KEY_Hangul_Cieuc","","",null,null],[17,"XKB_KEY_Hangul_Khieuq","","",null,null],[17,"XKB_KEY_Hangul_Tieut","","",null,null],[17,"XKB_KEY_Hangul_Phieuf","","",null,null],[17,"XKB_KEY_Hangul_Hieuh","","",null,null],[17,"XKB_KEY_Hangul_A","","",null,null],[17,"XKB_KEY_Hangul_AE","","",null,null],[17,"XKB_KEY_Hangul_YA","","",null,null],[17,"XKB_KEY_Hangul_YAE","","",null,null],[17,"XKB_KEY_Hangul_EO","","",null,null],[17,"XKB_KEY_Hangul_E","","",null,null],[17,"XKB_KEY_Hangul_YEO","","",null,null],[17,"XKB_KEY_Hangul_YE","","",null,null],[17,"XKB_KEY_Hangul_O","","",null,null],[17,"XKB_KEY_Hangul_WA","","",null,null],[17,"XKB_KEY_Hangul_WAE","","",null,null],[17,"XKB_KEY_Hangul_OE","","",null,null],[17,"XKB_KEY_Hangul_YO","","",null,null],[17,"XKB_KEY_Hangul_U","","",null,null],[17,"XKB_KEY_Hangul_WEO","","",null,null],[17,"XKB_KEY_Hangul_WE","","",null,null],[17,"XKB_KEY_Hangul_WI","","",null,null],[17,"XKB_KEY_Hangul_YU","","",null,null],[17,"XKB_KEY_Hangul_EU","","",null,null],[17,"XKB_KEY_Hangul_YI","","",null,null],[17,"XKB_KEY_Hangul_I","","",null,null],[17,"XKB_KEY_Hangul_J_Kiyeog","","",null,null],[17,"XKB_KEY_Hangul_J_SsangKiyeog","","",null,null],[17,"XKB_KEY_Hangul_J_KiyeogSios","","",null,null],[17,"XKB_KEY_Hangul_J_Nieun","","",null,null],[17,"XKB_KEY_Hangul_J_NieunJieuj","","",null,null],[17,"XKB_KEY_Hangul_J_NieunHieuh","","",null,null],[17,"XKB_KEY_Hangul_J_Dikeud","","",null,null],[17,"XKB_KEY_Hangul_J_Rieul","","",null,null],[17,"XKB_KEY_Hangul_J_RieulKiyeog","","",null,null],[17,"XKB_KEY_Hangul_J_RieulMieum","","",null,null],[17,"XKB_KEY_Hangul_J_RieulPieub","","",null,null],[17,"XKB_KEY_Hangul_J_RieulSios","","",null,null],[17,"XKB_KEY_Hangul_J_RieulTieut","","",null,null],[17,"XKB_KEY_Hangul_J_RieulPhieuf","","",null,null],[17,"XKB_KEY_Hangul_J_RieulHieuh","","",null,null],[17,"XKB_KEY_Hangul_J_Mieum","","",null,null],[17,"XKB_KEY_Hangul_J_Pieub","","",null,null],[17,"XKB_KEY_Hangul_J_PieubSios","","",null,null],[17,"XKB_KEY_Hangul_J_Sios","","",null,null],[17,"XKB_KEY_Hangul_J_SsangSios","","",null,null],[17,"XKB_KEY_Hangul_J_Ieung","","",null,null],[17,"XKB_KEY_Hangul_J_Jieuj","","",null,null],[17,"XKB_KEY_Hangul_J_Cieuc","","",null,null],[17,"XKB_KEY_Hangul_J_Khieuq","","",null,null],[17,"XKB_KEY_Hangul_J_Tieut","","",null,null],[17,"XKB_KEY_Hangul_J_Phieuf","","",null,null],[17,"XKB_KEY_Hangul_J_Hieuh","","",null,null],[17,"XKB_KEY_Hangul_RieulYeorinHieuh","","",null,null],[17,"XKB_KEY_Hangul_SunkyeongeumMieum","","",null,null],[17,"XKB_KEY_Hangul_SunkyeongeumPieub","","",null,null],[17,"XKB_KEY_Hangul_PanSios","","",null,null],[17,"XKB_KEY_Hangul_KkogjiDalrinIeung","","",null,null],[17,"XKB_KEY_Hangul_SunkyeongeumPhieuf","","",null,null],[17,"XKB_KEY_Hangul_YeorinHieuh","","",null,null],[17,"XKB_KEY_Hangul_AraeA","","",null,null],[17,"XKB_KEY_Hangul_AraeAE","","",null,null],[17,"XKB_KEY_Hangul_J_PanSios","","",null,null],[17,"XKB_KEY_Hangul_J_KkogjiDalrinIeung","","",null,null],[17,"XKB_KEY_Hangul_J_YeorinHieuh","","",null,null],[17,"XKB_KEY_Korean_Won","","",null,null],[17,"XKB_KEY_Armenian_ligature_ew","","",null,null],[17,"XKB_KEY_Armenian_full_stop","","",null,null],[17,"XKB_KEY_Armenian_verjaket","","",null,null],[17,"XKB_KEY_Armenian_separation_mark","","",null,null],[17,"XKB_KEY_Armenian_but","","",null,null],[17,"XKB_KEY_Armenian_hyphen","","",null,null],[17,"XKB_KEY_Armenian_yentamna","","",null,null],[17,"XKB_KEY_Armenian_exclam","","",null,null],[17,"XKB_KEY_Armenian_amanak","","",null,null],[17,"XKB_KEY_Armenian_accent","","",null,null],[17,"XKB_KEY_Armenian_shesht","","",null,null],[17,"XKB_KEY_Armenian_question","","",null,null],[17,"XKB_KEY_Armenian_paruyk","","",null,null],[17,"XKB_KEY_Armenian_AYB","","",null,null],[17,"XKB_KEY_Armenian_ayb","","",null,null],[17,"XKB_KEY_Armenian_BEN","","",null,null],[17,"XKB_KEY_Armenian_ben","","",null,null],[17,"XKB_KEY_Armenian_GIM","","",null,null],[17,"XKB_KEY_Armenian_gim","","",null,null],[17,"XKB_KEY_Armenian_DA","","",null,null],[17,"XKB_KEY_Armenian_da","","",null,null],[17,"XKB_KEY_Armenian_YECH","","",null,null],[17,"XKB_KEY_Armenian_yech","","",null,null],[17,"XKB_KEY_Armenian_ZA","","",null,null],[17,"XKB_KEY_Armenian_za","","",null,null],[17,"XKB_KEY_Armenian_E","","",null,null],[17,"XKB_KEY_Armenian_e","","",null,null],[17,"XKB_KEY_Armenian_AT","","",null,null],[17,"XKB_KEY_Armenian_at","","",null,null],[17,"XKB_KEY_Armenian_TO","","",null,null],[17,"XKB_KEY_Armenian_to","","",null,null],[17,"XKB_KEY_Armenian_ZHE","","",null,null],[17,"XKB_KEY_Armenian_zhe","","",null,null],[17,"XKB_KEY_Armenian_INI","","",null,null],[17,"XKB_KEY_Armenian_ini","","",null,null],[17,"XKB_KEY_Armenian_LYUN","","",null,null],[17,"XKB_KEY_Armenian_lyun","","",null,null],[17,"XKB_KEY_Armenian_KHE","","",null,null],[17,"XKB_KEY_Armenian_khe","","",null,null],[17,"XKB_KEY_Armenian_TSA","","",null,null],[17,"XKB_KEY_Armenian_tsa","","",null,null],[17,"XKB_KEY_Armenian_KEN","","",null,null],[17,"XKB_KEY_Armenian_ken","","",null,null],[17,"XKB_KEY_Armenian_HO","","",null,null],[17,"XKB_KEY_Armenian_ho","","",null,null],[17,"XKB_KEY_Armenian_DZA","","",null,null],[17,"XKB_KEY_Armenian_dza","","",null,null],[17,"XKB_KEY_Armenian_GHAT","","",null,null],[17,"XKB_KEY_Armenian_ghat","","",null,null],[17,"XKB_KEY_Armenian_TCHE","","",null,null],[17,"XKB_KEY_Armenian_tche","","",null,null],[17,"XKB_KEY_Armenian_MEN","","",null,null],[17,"XKB_KEY_Armenian_men","","",null,null],[17,"XKB_KEY_Armenian_HI","","",null,null],[17,"XKB_KEY_Armenian_hi","","",null,null],[17,"XKB_KEY_Armenian_NU","","",null,null],[17,"XKB_KEY_Armenian_nu","","",null,null],[17,"XKB_KEY_Armenian_SHA","","",null,null],[17,"XKB_KEY_Armenian_sha","","",null,null],[17,"XKB_KEY_Armenian_VO","","",null,null],[17,"XKB_KEY_Armenian_vo","","",null,null],[17,"XKB_KEY_Armenian_CHA","","",null,null],[17,"XKB_KEY_Armenian_cha","","",null,null],[17,"XKB_KEY_Armenian_PE","","",null,null],[17,"XKB_KEY_Armenian_pe","","",null,null],[17,"XKB_KEY_Armenian_JE","","",null,null],[17,"XKB_KEY_Armenian_je","","",null,null],[17,"XKB_KEY_Armenian_RA","","",null,null],[17,"XKB_KEY_Armenian_ra","","",null,null],[17,"XKB_KEY_Armenian_SE","","",null,null],[17,"XKB_KEY_Armenian_se","","",null,null],[17,"XKB_KEY_Armenian_VEV","","",null,null],[17,"XKB_KEY_Armenian_vev","","",null,null],[17,"XKB_KEY_Armenian_TYUN","","",null,null],[17,"XKB_KEY_Armenian_tyun","","",null,null],[17,"XKB_KEY_Armenian_RE","","",null,null],[17,"XKB_KEY_Armenian_re","","",null,null],[17,"XKB_KEY_Armenian_TSO","","",null,null],[17,"XKB_KEY_Armenian_tso","","",null,null],[17,"XKB_KEY_Armenian_VYUN","","",null,null],[17,"XKB_KEY_Armenian_vyun","","",null,null],[17,"XKB_KEY_Armenian_PYUR","","",null,null],[17,"XKB_KEY_Armenian_pyur","","",null,null],[17,"XKB_KEY_Armenian_KE","","",null,null],[17,"XKB_KEY_Armenian_ke","","",null,null],[17,"XKB_KEY_Armenian_O","","",null,null],[17,"XKB_KEY_Armenian_o","","",null,null],[17,"XKB_KEY_Armenian_FE","","",null,null],[17,"XKB_KEY_Armenian_fe","","",null,null],[17,"XKB_KEY_Armenian_apostrophe","","",null,null],[17,"XKB_KEY_Georgian_an","","",null,null],[17,"XKB_KEY_Georgian_ban","","",null,null],[17,"XKB_KEY_Georgian_gan","","",null,null],[17,"XKB_KEY_Georgian_don","","",null,null],[17,"XKB_KEY_Georgian_en","","",null,null],[17,"XKB_KEY_Georgian_vin","","",null,null],[17,"XKB_KEY_Georgian_zen","","",null,null],[17,"XKB_KEY_Georgian_tan","","",null,null],[17,"XKB_KEY_Georgian_in","","",null,null],[17,"XKB_KEY_Georgian_kan","","",null,null],[17,"XKB_KEY_Georgian_las","","",null,null],[17,"XKB_KEY_Georgian_man","","",null,null],[17,"XKB_KEY_Georgian_nar","","",null,null],[17,"XKB_KEY_Georgian_on","","",null,null],[17,"XKB_KEY_Georgian_par","","",null,null],[17,"XKB_KEY_Georgian_zhar","","",null,null],[17,"XKB_KEY_Georgian_rae","","",null,null],[17,"XKB_KEY_Georgian_san","","",null,null],[17,"XKB_KEY_Georgian_tar","","",null,null],[17,"XKB_KEY_Georgian_un","","",null,null],[17,"XKB_KEY_Georgian_phar","","",null,null],[17,"XKB_KEY_Georgian_khar","","",null,null],[17,"XKB_KEY_Georgian_ghan","","",null,null],[17,"XKB_KEY_Georgian_qar","","",null,null],[17,"XKB_KEY_Georgian_shin","","",null,null],[17,"XKB_KEY_Georgian_chin","","",null,null],[17,"XKB_KEY_Georgian_can","","",null,null],[17,"XKB_KEY_Georgian_jil","","",null,null],[17,"XKB_KEY_Georgian_cil","","",null,null],[17,"XKB_KEY_Georgian_char","","",null,null],[17,"XKB_KEY_Georgian_xan","","",null,null],[17,"XKB_KEY_Georgian_jhan","","",null,null],[17,"XKB_KEY_Georgian_hae","","",null,null],[17,"XKB_KEY_Georgian_he","","",null,null],[17,"XKB_KEY_Georgian_hie","","",null,null],[17,"XKB_KEY_Georgian_we","","",null,null],[17,"XKB_KEY_Georgian_har","","",null,null],[17,"XKB_KEY_Georgian_hoe","","",null,null],[17,"XKB_KEY_Georgian_fi","","",null,null],[17,"XKB_KEY_Xabovedot","","",null,null],[17,"XKB_KEY_Ibreve","","",null,null],[17,"XKB_KEY_Zstroke","","",null,null],[17,"XKB_KEY_Gcaron","","",null,null],[17,"XKB_KEY_Ocaron","","",null,null],[17,"XKB_KEY_Obarred","","",null,null],[17,"XKB_KEY_xabovedot","","",null,null],[17,"XKB_KEY_ibreve","","",null,null],[17,"XKB_KEY_zstroke","","",null,null],[17,"XKB_KEY_gcaron","","",null,null],[17,"XKB_KEY_ocaron","","",null,null],[17,"XKB_KEY_obarred","","",null,null],[17,"XKB_KEY_SCHWA","","",null,null],[17,"XKB_KEY_schwa","","",null,null],[17,"XKB_KEY_EZH","","",null,null],[17,"XKB_KEY_ezh","","",null,null],[17,"XKB_KEY_Lbelowdot","","",null,null],[17,"XKB_KEY_lbelowdot","","",null,null],[17,"XKB_KEY_Abelowdot","","",null,null],[17,"XKB_KEY_abelowdot","","",null,null],[17,"XKB_KEY_Ahook","","",null,null],[17,"XKB_KEY_ahook","","",null,null],[17,"XKB_KEY_Acircumflexacute","","",null,null],[17,"XKB_KEY_acircumflexacute","","",null,null],[17,"XKB_KEY_Acircumflexgrave","","",null,null],[17,"XKB_KEY_acircumflexgrave","","",null,null],[17,"XKB_KEY_Acircumflexhook","","",null,null],[17,"XKB_KEY_acircumflexhook","","",null,null],[17,"XKB_KEY_Acircumflextilde","","",null,null],[17,"XKB_KEY_acircumflextilde","","",null,null],[17,"XKB_KEY_Acircumflexbelowdot","","",null,null],[17,"XKB_KEY_acircumflexbelowdot","","",null,null],[17,"XKB_KEY_Abreveacute","","",null,null],[17,"XKB_KEY_abreveacute","","",null,null],[17,"XKB_KEY_Abrevegrave","","",null,null],[17,"XKB_KEY_abrevegrave","","",null,null],[17,"XKB_KEY_Abrevehook","","",null,null],[17,"XKB_KEY_abrevehook","","",null,null],[17,"XKB_KEY_Abrevetilde","","",null,null],[17,"XKB_KEY_abrevetilde","","",null,null],[17,"XKB_KEY_Abrevebelowdot","","",null,null],[17,"XKB_KEY_abrevebelowdot","","",null,null],[17,"XKB_KEY_Ebelowdot","","",null,null],[17,"XKB_KEY_ebelowdot","","",null,null],[17,"XKB_KEY_Ehook","","",null,null],[17,"XKB_KEY_ehook","","",null,null],[17,"XKB_KEY_Etilde","","",null,null],[17,"XKB_KEY_etilde","","",null,null],[17,"XKB_KEY_Ecircumflexacute","","",null,null],[17,"XKB_KEY_ecircumflexacute","","",null,null],[17,"XKB_KEY_Ecircumflexgrave","","",null,null],[17,"XKB_KEY_ecircumflexgrave","","",null,null],[17,"XKB_KEY_Ecircumflexhook","","",null,null],[17,"XKB_KEY_ecircumflexhook","","",null,null],[17,"XKB_KEY_Ecircumflextilde","","",null,null],[17,"XKB_KEY_ecircumflextilde","","",null,null],[17,"XKB_KEY_Ecircumflexbelowdot","","",null,null],[17,"XKB_KEY_ecircumflexbelowdot","","",null,null],[17,"XKB_KEY_Ihook","","",null,null],[17,"XKB_KEY_ihook","","",null,null],[17,"XKB_KEY_Ibelowdot","","",null,null],[17,"XKB_KEY_ibelowdot","","",null,null],[17,"XKB_KEY_Obelowdot","","",null,null],[17,"XKB_KEY_obelowdot","","",null,null],[17,"XKB_KEY_Ohook","","",null,null],[17,"XKB_KEY_ohook","","",null,null],[17,"XKB_KEY_Ocircumflexacute","","",null,null],[17,"XKB_KEY_ocircumflexacute","","",null,null],[17,"XKB_KEY_Ocircumflexgrave","","",null,null],[17,"XKB_KEY_ocircumflexgrave","","",null,null],[17,"XKB_KEY_Ocircumflexhook","","",null,null],[17,"XKB_KEY_ocircumflexhook","","",null,null],[17,"XKB_KEY_Ocircumflextilde","","",null,null],[17,"XKB_KEY_ocircumflextilde","","",null,null],[17,"XKB_KEY_Ocircumflexbelowdot","","",null,null],[17,"XKB_KEY_ocircumflexbelowdot","","",null,null],[17,"XKB_KEY_Ohornacute","","",null,null],[17,"XKB_KEY_ohornacute","","",null,null],[17,"XKB_KEY_Ohorngrave","","",null,null],[17,"XKB_KEY_ohorngrave","","",null,null],[17,"XKB_KEY_Ohornhook","","",null,null],[17,"XKB_KEY_ohornhook","","",null,null],[17,"XKB_KEY_Ohorntilde","","",null,null],[17,"XKB_KEY_ohorntilde","","",null,null],[17,"XKB_KEY_Ohornbelowdot","","",null,null],[17,"XKB_KEY_ohornbelowdot","","",null,null],[17,"XKB_KEY_Ubelowdot","","",null,null],[17,"XKB_KEY_ubelowdot","","",null,null],[17,"XKB_KEY_Uhook","","",null,null],[17,"XKB_KEY_uhook","","",null,null],[17,"XKB_KEY_Uhornacute","","",null,null],[17,"XKB_KEY_uhornacute","","",null,null],[17,"XKB_KEY_Uhorngrave","","",null,null],[17,"XKB_KEY_uhorngrave","","",null,null],[17,"XKB_KEY_Uhornhook","","",null,null],[17,"XKB_KEY_uhornhook","","",null,null],[17,"XKB_KEY_Uhorntilde","","",null,null],[17,"XKB_KEY_uhorntilde","","",null,null],[17,"XKB_KEY_Uhornbelowdot","","",null,null],[17,"XKB_KEY_uhornbelowdot","","",null,null],[17,"XKB_KEY_Ybelowdot","","",null,null],[17,"XKB_KEY_ybelowdot","","",null,null],[17,"XKB_KEY_Yhook","","",null,null],[17,"XKB_KEY_yhook","","",null,null],[17,"XKB_KEY_Ytilde","","",null,null],[17,"XKB_KEY_ytilde","","",null,null],[17,"XKB_KEY_Ohorn","","",null,null],[17,"XKB_KEY_ohorn","","",null,null],[17,"XKB_KEY_Uhorn","","",null,null],[17,"XKB_KEY_uhorn","","",null,null],[17,"XKB_KEY_EcuSign","","",null,null],[17,"XKB_KEY_ColonSign","","",null,null],[17,"XKB_KEY_CruzeiroSign","","",null,null],[17,"XKB_KEY_FFrancSign","","",null,null],[17,"XKB_KEY_LiraSign","","",null,null],[17,"XKB_KEY_MillSign","","",null,null],[17,"XKB_KEY_NairaSign","","",null,null],[17,"XKB_KEY_PesetaSign","","",null,null],[17,"XKB_KEY_RupeeSign","","",null,null],[17,"XKB_KEY_WonSign","","",null,null],[17,"XKB_KEY_NewSheqelSign","","",null,null],[17,"XKB_KEY_DongSign","","",null,null],[17,"XKB_KEY_EuroSign","","",null,null],[17,"XKB_KEY_zerosuperior","","",null,null],[17,"XKB_KEY_foursuperior","","",null,null],[17,"XKB_KEY_fivesuperior","","",null,null],[17,"XKB_KEY_sixsuperior","","",null,null],[17,"XKB_KEY_sevensuperior","","",null,null],[17,"XKB_KEY_eightsuperior","","",null,null],[17,"XKB_KEY_ninesuperior","","",null,null],[17,"XKB_KEY_zerosubscript","","",null,null],[17,"XKB_KEY_onesubscript","","",null,null],[17,"XKB_KEY_twosubscript","","",null,null],[17,"XKB_KEY_threesubscript","","",null,null],[17,"XKB_KEY_foursubscript","","",null,null],[17,"XKB_KEY_fivesubscript","","",null,null],[17,"XKB_KEY_sixsubscript","","",null,null],[17,"XKB_KEY_sevensubscript","","",null,null],[17,"XKB_KEY_eightsubscript","","",null,null],[17,"XKB_KEY_ninesubscript","","",null,null],[17,"XKB_KEY_partdifferential","","",null,null],[17,"XKB_KEY_emptyset","","",null,null],[17,"XKB_KEY_elementof","","",null,null],[17,"XKB_KEY_notelementof","","",null,null],[17,"XKB_KEY_containsas","","",null,null],[17,"XKB_KEY_squareroot","","",null,null],[17,"XKB_KEY_cuberoot","","",null,null],[17,"XKB_KEY_fourthroot","","",null,null],[17,"XKB_KEY_dintegral","","",null,null],[17,"XKB_KEY_tintegral","","",null,null],[17,"XKB_KEY_because","","",null,null],[17,"XKB_KEY_approxeq","","",null,null],[17,"XKB_KEY_notapproxeq","","",null,null],[17,"XKB_KEY_notidentical","","",null,null],[17,"XKB_KEY_stricteq","","",null,null],[17,"XKB_KEY_braille_dot_1","","",null,null],[17,"XKB_KEY_braille_dot_2","","",null,null],[17,"XKB_KEY_braille_dot_3","","",null,null],[17,"XKB_KEY_braille_dot_4","","",null,null],[17,"XKB_KEY_braille_dot_5","","",null,null],[17,"XKB_KEY_braille_dot_6","","",null,null],[17,"XKB_KEY_braille_dot_7","","",null,null],[17,"XKB_KEY_braille_dot_8","","",null,null],[17,"XKB_KEY_braille_dot_9","","",null,null],[17,"XKB_KEY_braille_dot_10","","",null,null],[17,"XKB_KEY_braille_blank","","",null,null],[17,"XKB_KEY_braille_dots_1","","",null,null],[17,"XKB_KEY_braille_dots_2","","",null,null],[17,"XKB_KEY_braille_dots_12","","",null,null],[17,"XKB_KEY_braille_dots_3","","",null,null],[17,"XKB_KEY_braille_dots_13","","",null,null],[17,"XKB_KEY_braille_dots_23","","",null,null],[17,"XKB_KEY_braille_dots_123","","",null,null],[17,"XKB_KEY_braille_dots_4","","",null,null],[17,"XKB_KEY_braille_dots_14","","",null,null],[17,"XKB_KEY_braille_dots_24","","",null,null],[17,"XKB_KEY_braille_dots_124","","",null,null],[17,"XKB_KEY_braille_dots_34","","",null,null],[17,"XKB_KEY_braille_dots_134","","",null,null],[17,"XKB_KEY_braille_dots_234","","",null,null],[17,"XKB_KEY_braille_dots_1234","","",null,null],[17,"XKB_KEY_braille_dots_5","","",null,null],[17,"XKB_KEY_braille_dots_15","","",null,null],[17,"XKB_KEY_braille_dots_25","","",null,null],[17,"XKB_KEY_braille_dots_125","","",null,null],[17,"XKB_KEY_braille_dots_35","","",null,null],[17,"XKB_KEY_braille_dots_135","","",null,null],[17,"XKB_KEY_braille_dots_235","","",null,null],[17,"XKB_KEY_braille_dots_1235","","",null,null],[17,"XKB_KEY_braille_dots_45","","",null,null],[17,"XKB_KEY_braille_dots_145","","",null,null],[17,"XKB_KEY_braille_dots_245","","",null,null],[17,"XKB_KEY_braille_dots_1245","","",null,null],[17,"XKB_KEY_braille_dots_345","","",null,null],[17,"XKB_KEY_braille_dots_1345","","",null,null],[17,"XKB_KEY_braille_dots_2345","","",null,null],[17,"XKB_KEY_braille_dots_12345","","",null,null],[17,"XKB_KEY_braille_dots_6","","",null,null],[17,"XKB_KEY_braille_dots_16","","",null,null],[17,"XKB_KEY_braille_dots_26","","",null,null],[17,"XKB_KEY_braille_dots_126","","",null,null],[17,"XKB_KEY_braille_dots_36","","",null,null],[17,"XKB_KEY_braille_dots_136","","",null,null],[17,"XKB_KEY_braille_dots_236","","",null,null],[17,"XKB_KEY_braille_dots_1236","","",null,null],[17,"XKB_KEY_braille_dots_46","","",null,null],[17,"XKB_KEY_braille_dots_146","","",null,null],[17,"XKB_KEY_braille_dots_246","","",null,null],[17,"XKB_KEY_braille_dots_1246","","",null,null],[17,"XKB_KEY_braille_dots_346","","",null,null],[17,"XKB_KEY_braille_dots_1346","","",null,null],[17,"XKB_KEY_braille_dots_2346","","",null,null],[17,"XKB_KEY_braille_dots_12346","","",null,null],[17,"XKB_KEY_braille_dots_56","","",null,null],[17,"XKB_KEY_braille_dots_156","","",null,null],[17,"XKB_KEY_braille_dots_256","","",null,null],[17,"XKB_KEY_braille_dots_1256","","",null,null],[17,"XKB_KEY_braille_dots_356","","",null,null],[17,"XKB_KEY_braille_dots_1356","","",null,null],[17,"XKB_KEY_braille_dots_2356","","",null,null],[17,"XKB_KEY_braille_dots_12356","","",null,null],[17,"XKB_KEY_braille_dots_456","","",null,null],[17,"XKB_KEY_braille_dots_1456","","",null,null],[17,"XKB_KEY_braille_dots_2456","","",null,null],[17,"XKB_KEY_braille_dots_12456","","",null,null],[17,"XKB_KEY_braille_dots_3456","","",null,null],[17,"XKB_KEY_braille_dots_13456","","",null,null],[17,"XKB_KEY_braille_dots_23456","","",null,null],[17,"XKB_KEY_braille_dots_123456","","",null,null],[17,"XKB_KEY_braille_dots_7","","",null,null],[17,"XKB_KEY_braille_dots_17","","",null,null],[17,"XKB_KEY_braille_dots_27","","",null,null],[17,"XKB_KEY_braille_dots_127","","",null,null],[17,"XKB_KEY_braille_dots_37","","",null,null],[17,"XKB_KEY_braille_dots_137","","",null,null],[17,"XKB_KEY_braille_dots_237","","",null,null],[17,"XKB_KEY_braille_dots_1237","","",null,null],[17,"XKB_KEY_braille_dots_47","","",null,null],[17,"XKB_KEY_braille_dots_147","","",null,null],[17,"XKB_KEY_braille_dots_247","","",null,null],[17,"XKB_KEY_braille_dots_1247","","",null,null],[17,"XKB_KEY_braille_dots_347","","",null,null],[17,"XKB_KEY_braille_dots_1347","","",null,null],[17,"XKB_KEY_braille_dots_2347","","",null,null],[17,"XKB_KEY_braille_dots_12347","","",null,null],[17,"XKB_KEY_braille_dots_57","","",null,null],[17,"XKB_KEY_braille_dots_157","","",null,null],[17,"XKB_KEY_braille_dots_257","","",null,null],[17,"XKB_KEY_braille_dots_1257","","",null,null],[17,"XKB_KEY_braille_dots_357","","",null,null],[17,"XKB_KEY_braille_dots_1357","","",null,null],[17,"XKB_KEY_braille_dots_2357","","",null,null],[17,"XKB_KEY_braille_dots_12357","","",null,null],[17,"XKB_KEY_braille_dots_457","","",null,null],[17,"XKB_KEY_braille_dots_1457","","",null,null],[17,"XKB_KEY_braille_dots_2457","","",null,null],[17,"XKB_KEY_braille_dots_12457","","",null,null],[17,"XKB_KEY_braille_dots_3457","","",null,null],[17,"XKB_KEY_braille_dots_13457","","",null,null],[17,"XKB_KEY_braille_dots_23457","","",null,null],[17,"XKB_KEY_braille_dots_123457","","",null,null],[17,"XKB_KEY_braille_dots_67","","",null,null],[17,"XKB_KEY_braille_dots_167","","",null,null],[17,"XKB_KEY_braille_dots_267","","",null,null],[17,"XKB_KEY_braille_dots_1267","","",null,null],[17,"XKB_KEY_braille_dots_367","","",null,null],[17,"XKB_KEY_braille_dots_1367","","",null,null],[17,"XKB_KEY_braille_dots_2367","","",null,null],[17,"XKB_KEY_braille_dots_12367","","",null,null],[17,"XKB_KEY_braille_dots_467","","",null,null],[17,"XKB_KEY_braille_dots_1467","","",null,null],[17,"XKB_KEY_braille_dots_2467","","",null,null],[17,"XKB_KEY_braille_dots_12467","","",null,null],[17,"XKB_KEY_braille_dots_3467","","",null,null],[17,"XKB_KEY_braille_dots_13467","","",null,null],[17,"XKB_KEY_braille_dots_23467","","",null,null],[17,"XKB_KEY_braille_dots_123467","","",null,null],[17,"XKB_KEY_braille_dots_567","","",null,null],[17,"XKB_KEY_braille_dots_1567","","",null,null],[17,"XKB_KEY_braille_dots_2567","","",null,null],[17,"XKB_KEY_braille_dots_12567","","",null,null],[17,"XKB_KEY_braille_dots_3567","","",null,null],[17,"XKB_KEY_braille_dots_13567","","",null,null],[17,"XKB_KEY_braille_dots_23567","","",null,null],[17,"XKB_KEY_braille_dots_123567","","",null,null],[17,"XKB_KEY_braille_dots_4567","","",null,null],[17,"XKB_KEY_braille_dots_14567","","",null,null],[17,"XKB_KEY_braille_dots_24567","","",null,null],[17,"XKB_KEY_braille_dots_124567","","",null,null],[17,"XKB_KEY_braille_dots_34567","","",null,null],[17,"XKB_KEY_braille_dots_134567","","",null,null],[17,"XKB_KEY_braille_dots_234567","","",null,null],[17,"XKB_KEY_braille_dots_1234567","","",null,null],[17,"XKB_KEY_braille_dots_8","","",null,null],[17,"XKB_KEY_braille_dots_18","","",null,null],[17,"XKB_KEY_braille_dots_28","","",null,null],[17,"XKB_KEY_braille_dots_128","","",null,null],[17,"XKB_KEY_braille_dots_38","","",null,null],[17,"XKB_KEY_braille_dots_138","","",null,null],[17,"XKB_KEY_braille_dots_238","","",null,null],[17,"XKB_KEY_braille_dots_1238","","",null,null],[17,"XKB_KEY_braille_dots_48","","",null,null],[17,"XKB_KEY_braille_dots_148","","",null,null],[17,"XKB_KEY_braille_dots_248","","",null,null],[17,"XKB_KEY_braille_dots_1248","","",null,null],[17,"XKB_KEY_braille_dots_348","","",null,null],[17,"XKB_KEY_braille_dots_1348","","",null,null],[17,"XKB_KEY_braille_dots_2348","","",null,null],[17,"XKB_KEY_braille_dots_12348","","",null,null],[17,"XKB_KEY_braille_dots_58","","",null,null],[17,"XKB_KEY_braille_dots_158","","",null,null],[17,"XKB_KEY_braille_dots_258","","",null,null],[17,"XKB_KEY_braille_dots_1258","","",null,null],[17,"XKB_KEY_braille_dots_358","","",null,null],[17,"XKB_KEY_braille_dots_1358","","",null,null],[17,"XKB_KEY_braille_dots_2358","","",null,null],[17,"XKB_KEY_braille_dots_12358","","",null,null],[17,"XKB_KEY_braille_dots_458","","",null,null],[17,"XKB_KEY_braille_dots_1458","","",null,null],[17,"XKB_KEY_braille_dots_2458","","",null,null],[17,"XKB_KEY_braille_dots_12458","","",null,null],[17,"XKB_KEY_braille_dots_3458","","",null,null],[17,"XKB_KEY_braille_dots_13458","","",null,null],[17,"XKB_KEY_braille_dots_23458","","",null,null],[17,"XKB_KEY_braille_dots_123458","","",null,null],[17,"XKB_KEY_braille_dots_68","","",null,null],[17,"XKB_KEY_braille_dots_168","","",null,null],[17,"XKB_KEY_braille_dots_268","","",null,null],[17,"XKB_KEY_braille_dots_1268","","",null,null],[17,"XKB_KEY_braille_dots_368","","",null,null],[17,"XKB_KEY_braille_dots_1368","","",null,null],[17,"XKB_KEY_braille_dots_2368","","",null,null],[17,"XKB_KEY_braille_dots_12368","","",null,null],[17,"XKB_KEY_braille_dots_468","","",null,null],[17,"XKB_KEY_braille_dots_1468","","",null,null],[17,"XKB_KEY_braille_dots_2468","","",null,null],[17,"XKB_KEY_braille_dots_12468","","",null,null],[17,"XKB_KEY_braille_dots_3468","","",null,null],[17,"XKB_KEY_braille_dots_13468","","",null,null],[17,"XKB_KEY_braille_dots_23468","","",null,null],[17,"XKB_KEY_braille_dots_123468","","",null,null],[17,"XKB_KEY_braille_dots_568","","",null,null],[17,"XKB_KEY_braille_dots_1568","","",null,null],[17,"XKB_KEY_braille_dots_2568","","",null,null],[17,"XKB_KEY_braille_dots_12568","","",null,null],[17,"XKB_KEY_braille_dots_3568","","",null,null],[17,"XKB_KEY_braille_dots_13568","","",null,null],[17,"XKB_KEY_braille_dots_23568","","",null,null],[17,"XKB_KEY_braille_dots_123568","","",null,null],[17,"XKB_KEY_braille_dots_4568","","",null,null],[17,"XKB_KEY_braille_dots_14568","","",null,null],[17,"XKB_KEY_braille_dots_24568","","",null,null],[17,"XKB_KEY_braille_dots_124568","","",null,null],[17,"XKB_KEY_braille_dots_34568","","",null,null],[17,"XKB_KEY_braille_dots_134568","","",null,null],[17,"XKB_KEY_braille_dots_234568","","",null,null],[17,"XKB_KEY_braille_dots_1234568","","",null,null],[17,"XKB_KEY_braille_dots_78","","",null,null],[17,"XKB_KEY_braille_dots_178","","",null,null],[17,"XKB_KEY_braille_dots_278","","",null,null],[17,"XKB_KEY_braille_dots_1278","","",null,null],[17,"XKB_KEY_braille_dots_378","","",null,null],[17,"XKB_KEY_braille_dots_1378","","",null,null],[17,"XKB_KEY_braille_dots_2378","","",null,null],[17,"XKB_KEY_braille_dots_12378","","",null,null],[17,"XKB_KEY_braille_dots_478","","",null,null],[17,"XKB_KEY_braille_dots_1478","","",null,null],[17,"XKB_KEY_braille_dots_2478","","",null,null],[17,"XKB_KEY_braille_dots_12478","","",null,null],[17,"XKB_KEY_braille_dots_3478","","",null,null],[17,"XKB_KEY_braille_dots_13478","","",null,null],[17,"XKB_KEY_braille_dots_23478","","",null,null],[17,"XKB_KEY_braille_dots_123478","","",null,null],[17,"XKB_KEY_braille_dots_578","","",null,null],[17,"XKB_KEY_braille_dots_1578","","",null,null],[17,"XKB_KEY_braille_dots_2578","","",null,null],[17,"XKB_KEY_braille_dots_12578","","",null,null],[17,"XKB_KEY_braille_dots_3578","","",null,null],[17,"XKB_KEY_braille_dots_13578","","",null,null],[17,"XKB_KEY_braille_dots_23578","","",null,null],[17,"XKB_KEY_braille_dots_123578","","",null,null],[17,"XKB_KEY_braille_dots_4578","","",null,null],[17,"XKB_KEY_braille_dots_14578","","",null,null],[17,"XKB_KEY_braille_dots_24578","","",null,null],[17,"XKB_KEY_braille_dots_124578","","",null,null],[17,"XKB_KEY_braille_dots_34578","","",null,null],[17,"XKB_KEY_braille_dots_134578","","",null,null],[17,"XKB_KEY_braille_dots_234578","","",null,null],[17,"XKB_KEY_braille_dots_1234578","","",null,null],[17,"XKB_KEY_braille_dots_678","","",null,null],[17,"XKB_KEY_braille_dots_1678","","",null,null],[17,"XKB_KEY_braille_dots_2678","","",null,null],[17,"XKB_KEY_braille_dots_12678","","",null,null],[17,"XKB_KEY_braille_dots_3678","","",null,null],[17,"XKB_KEY_braille_dots_13678","","",null,null],[17,"XKB_KEY_braille_dots_23678","","",null,null],[17,"XKB_KEY_braille_dots_123678","","",null,null],[17,"XKB_KEY_braille_dots_4678","","",null,null],[17,"XKB_KEY_braille_dots_14678","","",null,null],[17,"XKB_KEY_braille_dots_24678","","",null,null],[17,"XKB_KEY_braille_dots_124678","","",null,null],[17,"XKB_KEY_braille_dots_34678","","",null,null],[17,"XKB_KEY_braille_dots_134678","","",null,null],[17,"XKB_KEY_braille_dots_234678","","",null,null],[17,"XKB_KEY_braille_dots_1234678","","",null,null],[17,"XKB_KEY_braille_dots_5678","","",null,null],[17,"XKB_KEY_braille_dots_15678","","",null,null],[17,"XKB_KEY_braille_dots_25678","","",null,null],[17,"XKB_KEY_braille_dots_125678","","",null,null],[17,"XKB_KEY_braille_dots_35678","","",null,null],[17,"XKB_KEY_braille_dots_135678","","",null,null],[17,"XKB_KEY_braille_dots_235678","","",null,null],[17,"XKB_KEY_braille_dots_1235678","","",null,null],[17,"XKB_KEY_braille_dots_45678","","",null,null],[17,"XKB_KEY_braille_dots_145678","","",null,null],[17,"XKB_KEY_braille_dots_245678","","",null,null],[17,"XKB_KEY_braille_dots_1245678","","",null,null],[17,"XKB_KEY_braille_dots_345678","","",null,null],[17,"XKB_KEY_braille_dots_1345678","","",null,null],[17,"XKB_KEY_braille_dots_2345678","","",null,null],[17,"XKB_KEY_braille_dots_12345678","","",null,null],[17,"XKB_KEY_Sinh_ng","","",null,null],[17,"XKB_KEY_Sinh_h2","","",null,null],[17,"XKB_KEY_Sinh_a","","",null,null],[17,"XKB_KEY_Sinh_aa","","",null,null],[17,"XKB_KEY_Sinh_ae","","",null,null],[17,"XKB_KEY_Sinh_aee","","",null,null],[17,"XKB_KEY_Sinh_i","","",null,null],[17,"XKB_KEY_Sinh_ii","","",null,null],[17,"XKB_KEY_Sinh_u","","",null,null],[17,"XKB_KEY_Sinh_uu","","",null,null],[17,"XKB_KEY_Sinh_ri","","",null,null],[17,"XKB_KEY_Sinh_rii","","",null,null],[17,"XKB_KEY_Sinh_lu","","",null,null],[17,"XKB_KEY_Sinh_luu","","",null,null],[17,"XKB_KEY_Sinh_e","","",null,null],[17,"XKB_KEY_Sinh_ee","","",null,null],[17,"XKB_KEY_Sinh_ai","","",null,null],[17,"XKB_KEY_Sinh_o","","",null,null],[17,"XKB_KEY_Sinh_oo","","",null,null],[17,"XKB_KEY_Sinh_au","","",null,null],[17,"XKB_KEY_Sinh_ka","","",null,null],[17,"XKB_KEY_Sinh_kha","","",null,null],[17,"XKB_KEY_Sinh_ga","","",null,null],[17,"XKB_KEY_Sinh_gha","","",null,null],[17,"XKB_KEY_Sinh_ng2","","",null,null],[17,"XKB_KEY_Sinh_nga","","",null,null],[17,"XKB_KEY_Sinh_ca","","",null,null],[17,"XKB_KEY_Sinh_cha","","",null,null],[17,"XKB_KEY_Sinh_ja","","",null,null],[17,"XKB_KEY_Sinh_jha","","",null,null],[17,"XKB_KEY_Sinh_nya","","",null,null],[17,"XKB_KEY_Sinh_jnya","","",null,null],[17,"XKB_KEY_Sinh_nja","","",null,null],[17,"XKB_KEY_Sinh_tta","","",null,null],[17,"XKB_KEY_Sinh_ttha","","",null,null],[17,"XKB_KEY_Sinh_dda","","",null,null],[17,"XKB_KEY_Sinh_ddha","","",null,null],[17,"XKB_KEY_Sinh_nna","","",null,null],[17,"XKB_KEY_Sinh_ndda","","",null,null],[17,"XKB_KEY_Sinh_tha","","",null,null],[17,"XKB_KEY_Sinh_thha","","",null,null],[17,"XKB_KEY_Sinh_dha","","",null,null],[17,"XKB_KEY_Sinh_dhha","","",null,null],[17,"XKB_KEY_Sinh_na","","",null,null],[17,"XKB_KEY_Sinh_ndha","","",null,null],[17,"XKB_KEY_Sinh_pa","","",null,null],[17,"XKB_KEY_Sinh_pha","","",null,null],[17,"XKB_KEY_Sinh_ba","","",null,null],[17,"XKB_KEY_Sinh_bha","","",null,null],[17,"XKB_KEY_Sinh_ma","","",null,null],[17,"XKB_KEY_Sinh_mba","","",null,null],[17,"XKB_KEY_Sinh_ya","","",null,null],[17,"XKB_KEY_Sinh_ra","","",null,null],[17,"XKB_KEY_Sinh_la","","",null,null],[17,"XKB_KEY_Sinh_va","","",null,null],[17,"XKB_KEY_Sinh_sha","","",null,null],[17,"XKB_KEY_Sinh_ssha","","",null,null],[17,"XKB_KEY_Sinh_sa","","",null,null],[17,"XKB_KEY_Sinh_ha","","",null,null],[17,"XKB_KEY_Sinh_lla","","",null,null],[17,"XKB_KEY_Sinh_fa","","",null,null],[17,"XKB_KEY_Sinh_al","","",null,null],[17,"XKB_KEY_Sinh_aa2","","",null,null],[17,"XKB_KEY_Sinh_ae2","","",null,null],[17,"XKB_KEY_Sinh_aee2","","",null,null],[17,"XKB_KEY_Sinh_i2","","",null,null],[17,"XKB_KEY_Sinh_ii2","","",null,null],[17,"XKB_KEY_Sinh_u2","","",null,null],[17,"XKB_KEY_Sinh_uu2","","",null,null],[17,"XKB_KEY_Sinh_ru2","","",null,null],[17,"XKB_KEY_Sinh_e2","","",null,null],[17,"XKB_KEY_Sinh_ee2","","",null,null],[17,"XKB_KEY_Sinh_ai2","","",null,null],[17,"XKB_KEY_Sinh_o2","","",null,null],[17,"XKB_KEY_Sinh_oo2","","",null,null],[17,"XKB_KEY_Sinh_au2","","",null,null],[17,"XKB_KEY_Sinh_lu2","","",null,null],[17,"XKB_KEY_Sinh_ruu2","","",null,null],[17,"XKB_KEY_Sinh_luu2","","",null,null],[17,"XKB_KEY_Sinh_kunddaliya","","",null,null],[17,"XKB_KEY_XF86ModeLock","","",null,null],[17,"XKB_KEY_XF86MonBrightnessUp","","",null,null],[17,"XKB_KEY_XF86MonBrightnessDown","","",null,null],[17,"XKB_KEY_XF86KbdLightOnOff","","",null,null],[17,"XKB_KEY_XF86KbdBrightnessUp","","",null,null],[17,"XKB_KEY_XF86KbdBrightnessDown","","",null,null],[17,"XKB_KEY_XF86Standby","","",null,null],[17,"XKB_KEY_XF86AudioLowerVolume","","",null,null],[17,"XKB_KEY_XF86AudioMute","","",null,null],[17,"XKB_KEY_XF86AudioRaiseVolume","","",null,null],[17,"XKB_KEY_XF86AudioPlay","","",null,null],[17,"XKB_KEY_XF86AudioStop","","",null,null],[17,"XKB_KEY_XF86AudioPrev","","",null,null],[17,"XKB_KEY_XF86AudioNext","","",null,null],[17,"XKB_KEY_XF86HomePage","","",null,null],[17,"XKB_KEY_XF86Mail","","",null,null],[17,"XKB_KEY_XF86Start","","",null,null],[17,"XKB_KEY_XF86Search","","",null,null],[17,"XKB_KEY_XF86AudioRecord","","",null,null],[17,"XKB_KEY_XF86Calculator","","",null,null],[17,"XKB_KEY_XF86Memo","","",null,null],[17,"XKB_KEY_XF86ToDoList","","",null,null],[17,"XKB_KEY_XF86Calendar","","",null,null],[17,"XKB_KEY_XF86PowerDown","","",null,null],[17,"XKB_KEY_XF86ContrastAdjust","","",null,null],[17,"XKB_KEY_XF86RockerUp","","",null,null],[17,"XKB_KEY_XF86RockerDown","","",null,null],[17,"XKB_KEY_XF86RockerEnter","","",null,null],[17,"XKB_KEY_XF86Back","","",null,null],[17,"XKB_KEY_XF86Forward","","",null,null],[17,"XKB_KEY_XF86Stop","","",null,null],[17,"XKB_KEY_XF86Refresh","","",null,null],[17,"XKB_KEY_XF86PowerOff","","",null,null],[17,"XKB_KEY_XF86WakeUp","","",null,null],[17,"XKB_KEY_XF86Eject","","",null,null],[17,"XKB_KEY_XF86ScreenSaver","","",null,null],[17,"XKB_KEY_XF86WWW","","",null,null],[17,"XKB_KEY_XF86Sleep","","",null,null],[17,"XKB_KEY_XF86Favorites","","",null,null],[17,"XKB_KEY_XF86AudioPause","","",null,null],[17,"XKB_KEY_XF86AudioMedia","","",null,null],[17,"XKB_KEY_XF86MyComputer","","",null,null],[17,"XKB_KEY_XF86VendorHome","","",null,null],[17,"XKB_KEY_XF86LightBulb","","",null,null],[17,"XKB_KEY_XF86Shop","","",null,null],[17,"XKB_KEY_XF86History","","",null,null],[17,"XKB_KEY_XF86OpenURL","","",null,null],[17,"XKB_KEY_XF86AddFavorite","","",null,null],[17,"XKB_KEY_XF86HotLinks","","",null,null],[17,"XKB_KEY_XF86BrightnessAdjust","","",null,null],[17,"XKB_KEY_XF86Finance","","",null,null],[17,"XKB_KEY_XF86Community","","",null,null],[17,"XKB_KEY_XF86AudioRewind","","",null,null],[17,"XKB_KEY_XF86BackForward","","",null,null],[17,"XKB_KEY_XF86Launch0","","",null,null],[17,"XKB_KEY_XF86Launch1","","",null,null],[17,"XKB_KEY_XF86Launch2","","",null,null],[17,"XKB_KEY_XF86Launch3","","",null,null],[17,"XKB_KEY_XF86Launch4","","",null,null],[17,"XKB_KEY_XF86Launch5","","",null,null],[17,"XKB_KEY_XF86Launch6","","",null,null],[17,"XKB_KEY_XF86Launch7","","",null,null],[17,"XKB_KEY_XF86Launch8","","",null,null],[17,"XKB_KEY_XF86Launch9","","",null,null],[17,"XKB_KEY_XF86LaunchA","","",null,null],[17,"XKB_KEY_XF86LaunchB","","",null,null],[17,"XKB_KEY_XF86LaunchC","","",null,null],[17,"XKB_KEY_XF86LaunchD","","",null,null],[17,"XKB_KEY_XF86LaunchE","","",null,null],[17,"XKB_KEY_XF86LaunchF","","",null,null],[17,"XKB_KEY_XF86ApplicationLeft","","",null,null],[17,"XKB_KEY_XF86ApplicationRight","","",null,null],[17,"XKB_KEY_XF86Book","","",null,null],[17,"XKB_KEY_XF86CD","","",null,null],[17,"XKB_KEY_XF86Calculater","","",null,null],[17,"XKB_KEY_XF86Clear","","",null,null],[17,"XKB_KEY_XF86Close","","",null,null],[17,"XKB_KEY_XF86Copy","","",null,null],[17,"XKB_KEY_XF86Cut","","",null,null],[17,"XKB_KEY_XF86Display","","",null,null],[17,"XKB_KEY_XF86DOS","","",null,null],[17,"XKB_KEY_XF86Documents","","",null,null],[17,"XKB_KEY_XF86Excel","","",null,null],[17,"XKB_KEY_XF86Explorer","","",null,null],[17,"XKB_KEY_XF86Game","","",null,null],[17,"XKB_KEY_XF86Go","","",null,null],[17,"XKB_KEY_XF86iTouch","","",null,null],[17,"XKB_KEY_XF86LogOff","","",null,null],[17,"XKB_KEY_XF86Market","","",null,null],[17,"XKB_KEY_XF86Meeting","","",null,null],[17,"XKB_KEY_XF86MenuKB","","",null,null],[17,"XKB_KEY_XF86MenuPB","","",null,null],[17,"XKB_KEY_XF86MySites","","",null,null],[17,"XKB_KEY_XF86New","","",null,null],[17,"XKB_KEY_XF86News","","",null,null],[17,"XKB_KEY_XF86OfficeHome","","",null,null],[17,"XKB_KEY_XF86Open","","",null,null],[17,"XKB_KEY_XF86Option","","",null,null],[17,"XKB_KEY_XF86Paste","","",null,null],[17,"XKB_KEY_XF86Phone","","",null,null],[17,"XKB_KEY_XF86Q","","",null,null],[17,"XKB_KEY_XF86Reply","","",null,null],[17,"XKB_KEY_XF86Reload","","",null,null],[17,"XKB_KEY_XF86RotateWindows","","",null,null],[17,"XKB_KEY_XF86RotationPB","","",null,null],[17,"XKB_KEY_XF86RotationKB","","",null,null],[17,"XKB_KEY_XF86Save","","",null,null],[17,"XKB_KEY_XF86ScrollUp","","",null,null],[17,"XKB_KEY_XF86ScrollDown","","",null,null],[17,"XKB_KEY_XF86ScrollClick","","",null,null],[17,"XKB_KEY_XF86Send","","",null,null],[17,"XKB_KEY_XF86Spell","","",null,null],[17,"XKB_KEY_XF86SplitScreen","","",null,null],[17,"XKB_KEY_XF86Support","","",null,null],[17,"XKB_KEY_XF86TaskPane","","",null,null],[17,"XKB_KEY_XF86Terminal","","",null,null],[17,"XKB_KEY_XF86Tools","","",null,null],[17,"XKB_KEY_XF86Travel","","",null,null],[17,"XKB_KEY_XF86UserPB","","",null,null],[17,"XKB_KEY_XF86User1KB","","",null,null],[17,"XKB_KEY_XF86User2KB","","",null,null],[17,"XKB_KEY_XF86Video","","",null,null],[17,"XKB_KEY_XF86WheelButton","","",null,null],[17,"XKB_KEY_XF86Word","","",null,null],[17,"XKB_KEY_XF86Xfer","","",null,null],[17,"XKB_KEY_XF86ZoomIn","","",null,null],[17,"XKB_KEY_XF86ZoomOut","","",null,null],[17,"XKB_KEY_XF86Away","","",null,null],[17,"XKB_KEY_XF86Messenger","","",null,null],[17,"XKB_KEY_XF86WebCam","","",null,null],[17,"XKB_KEY_XF86MailForward","","",null,null],[17,"XKB_KEY_XF86Pictures","","",null,null],[17,"XKB_KEY_XF86Music","","",null,null],[17,"XKB_KEY_XF86Battery","","",null,null],[17,"XKB_KEY_XF86Bluetooth","","",null,null],[17,"XKB_KEY_XF86WLAN","","",null,null],[17,"XKB_KEY_XF86UWB","","",null,null],[17,"XKB_KEY_XF86AudioForward","","",null,null],[17,"XKB_KEY_XF86AudioRepeat","","",null,null],[17,"XKB_KEY_XF86AudioRandomPlay","","",null,null],[17,"XKB_KEY_XF86Subtitle","","",null,null],[17,"XKB_KEY_XF86AudioCycleTrack","","",null,null],[17,"XKB_KEY_XF86CycleAngle","","",null,null],[17,"XKB_KEY_XF86FrameBack","","",null,null],[17,"XKB_KEY_XF86FrameForward","","",null,null],[17,"XKB_KEY_XF86Time","","",null,null],[17,"XKB_KEY_XF86Select","","",null,null],[17,"XKB_KEY_XF86View","","",null,null],[17,"XKB_KEY_XF86TopMenu","","",null,null],[17,"XKB_KEY_XF86Red","","",null,null],[17,"XKB_KEY_XF86Green","","",null,null],[17,"XKB_KEY_XF86Yellow","","",null,null],[17,"XKB_KEY_XF86Blue","","",null,null],[17,"XKB_KEY_XF86Suspend","","",null,null],[17,"XKB_KEY_XF86Hibernate","","",null,null],[17,"XKB_KEY_XF86TouchpadToggle","","",null,null],[17,"XKB_KEY_XF86TouchpadOn","","",null,null],[17,"XKB_KEY_XF86TouchpadOff","","",null,null],[17,"XKB_KEY_XF86AudioMicMute","","",null,null],[17,"XKB_KEY_XF86Switch_VT_1","","",null,null],[17,"XKB_KEY_XF86Switch_VT_2","","",null,null],[17,"XKB_KEY_XF86Switch_VT_3","","",null,null],[17,"XKB_KEY_XF86Switch_VT_4","","",null,null],[17,"XKB_KEY_XF86Switch_VT_5","","",null,null],[17,"XKB_KEY_XF86Switch_VT_6","","",null,null],[17,"XKB_KEY_XF86Switch_VT_7","","",null,null],[17,"XKB_KEY_XF86Switch_VT_8","","",null,null],[17,"XKB_KEY_XF86Switch_VT_9","","",null,null],[17,"XKB_KEY_XF86Switch_VT_10","","",null,null],[17,"XKB_KEY_XF86Switch_VT_11","","",null,null],[17,"XKB_KEY_XF86Switch_VT_12","","",null,null],[17,"XKB_KEY_XF86Ungrab","","",null,null],[17,"XKB_KEY_XF86ClearGrab","","",null,null],[17,"XKB_KEY_XF86Next_VMode","","",null,null],[17,"XKB_KEY_XF86Prev_VMode","","",null,null],[17,"XKB_KEY_XF86LogWindowTree","","",null,null],[17,"XKB_KEY_XF86LogGrabInfo","","",null,null],[17,"XKB_KEY_SunFA_Grave","","",null,null],[17,"XKB_KEY_SunFA_Circum","","",null,null],[17,"XKB_KEY_SunFA_Tilde","","",null,null],[17,"XKB_KEY_SunFA_Acute","","",null,null],[17,"XKB_KEY_SunFA_Diaeresis","","",null,null],[17,"XKB_KEY_SunFA_Cedilla","","",null,null],[17,"XKB_KEY_SunF36","","",null,null],[17,"XKB_KEY_SunF37","","",null,null],[17,"XKB_KEY_SunSys_Req","","",null,null],[17,"XKB_KEY_SunPrint_Screen","","",null,null],[17,"XKB_KEY_SunCompose","","",null,null],[17,"XKB_KEY_SunAltGraph","","",null,null],[17,"XKB_KEY_SunPageUp","","",null,null],[17,"XKB_KEY_SunPageDown","","",null,null],[17,"XKB_KEY_SunUndo","","",null,null],[17,"XKB_KEY_SunAgain","","",null,null],[17,"XKB_KEY_SunFind","","",null,null],[17,"XKB_KEY_SunStop","","",null,null],[17,"XKB_KEY_SunProps","","",null,null],[17,"XKB_KEY_SunFront","","",null,null],[17,"XKB_KEY_SunCopy","","",null,null],[17,"XKB_KEY_SunOpen","","",null,null],[17,"XKB_KEY_SunPaste","","",null,null],[17,"XKB_KEY_SunCut","","",null,null],[17,"XKB_KEY_SunPowerSwitch","","",null,null],[17,"XKB_KEY_SunAudioLowerVolume","","",null,null],[17,"XKB_KEY_SunAudioMute","","",null,null],[17,"XKB_KEY_SunAudioRaiseVolume","","",null,null],[17,"XKB_KEY_SunVideoDegauss","","",null,null],[17,"XKB_KEY_SunVideoLowerBrightness","","",null,null],[17,"XKB_KEY_SunVideoRaiseBrightness","","",null,null],[17,"XKB_KEY_SunPowerSwitchShift","","",null,null],[17,"XKB_KEY_Dring_accent","","",null,null],[17,"XKB_KEY_Dcircumflex_accent","","",null,null],[17,"XKB_KEY_Dcedilla_accent","","",null,null],[17,"XKB_KEY_Dacute_accent","","",null,null],[17,"XKB_KEY_Dgrave_accent","","",null,null],[17,"XKB_KEY_Dtilde","","",null,null],[17,"XKB_KEY_Ddiaeresis","","",null,null],[17,"XKB_KEY_DRemove","","",null,null],[17,"XKB_KEY_hpClearLine","","",null,null],[17,"XKB_KEY_hpInsertLine","","",null,null],[17,"XKB_KEY_hpDeleteLine","","",null,null],[17,"XKB_KEY_hpInsertChar","","",null,null],[17,"XKB_KEY_hpDeleteChar","","",null,null],[17,"XKB_KEY_hpBackTab","","",null,null],[17,"XKB_KEY_hpKP_BackTab","","",null,null],[17,"XKB_KEY_hpModelock1","","",null,null],[17,"XKB_KEY_hpModelock2","","",null,null],[17,"XKB_KEY_hpReset","","",null,null],[17,"XKB_KEY_hpSystem","","",null,null],[17,"XKB_KEY_hpUser","","",null,null],[17,"XKB_KEY_hpmute_acute","","",null,null],[17,"XKB_KEY_hpmute_grave","","",null,null],[17,"XKB_KEY_hpmute_asciicircum","","",null,null],[17,"XKB_KEY_hpmute_diaeresis","","",null,null],[17,"XKB_KEY_hpmute_asciitilde","","",null,null],[17,"XKB_KEY_hplira","","",null,null],[17,"XKB_KEY_hpguilder","","",null,null],[17,"XKB_KEY_hpYdiaeresis","","",null,null],[17,"XKB_KEY_hpIO","","",null,null],[17,"XKB_KEY_hplongminus","","",null,null],[17,"XKB_KEY_hpblock","","",null,null],[17,"XKB_KEY_osfCopy","","",null,null],[17,"XKB_KEY_osfCut","","",null,null],[17,"XKB_KEY_osfPaste","","",null,null],[17,"XKB_KEY_osfBackTab","","",null,null],[17,"XKB_KEY_osfBackSpace","","",null,null],[17,"XKB_KEY_osfClear","","",null,null],[17,"XKB_KEY_osfEscape","","",null,null],[17,"XKB_KEY_osfAddMode","","",null,null],[17,"XKB_KEY_osfPrimaryPaste","","",null,null],[17,"XKB_KEY_osfQuickPaste","","",null,null],[17,"XKB_KEY_osfPageLeft","","",null,null],[17,"XKB_KEY_osfPageUp","","",null,null],[17,"XKB_KEY_osfPageDown","","",null,null],[17,"XKB_KEY_osfPageRight","","",null,null],[17,"XKB_KEY_osfActivate","","",null,null],[17,"XKB_KEY_osfMenuBar","","",null,null],[17,"XKB_KEY_osfLeft","","",null,null],[17,"XKB_KEY_osfUp","","",null,null],[17,"XKB_KEY_osfRight","","",null,null],[17,"XKB_KEY_osfDown","","",null,null],[17,"XKB_KEY_osfEndLine","","",null,null],[17,"XKB_KEY_osfBeginLine","","",null,null],[17,"XKB_KEY_osfEndData","","",null,null],[17,"XKB_KEY_osfBeginData","","",null,null],[17,"XKB_KEY_osfPrevMenu","","",null,null],[17,"XKB_KEY_osfNextMenu","","",null,null],[17,"XKB_KEY_osfPrevField","","",null,null],[17,"XKB_KEY_osfNextField","","",null,null],[17,"XKB_KEY_osfSelect","","",null,null],[17,"XKB_KEY_osfInsert","","",null,null],[17,"XKB_KEY_osfUndo","","",null,null],[17,"XKB_KEY_osfMenu","","",null,null],[17,"XKB_KEY_osfCancel","","",null,null],[17,"XKB_KEY_osfHelp","","",null,null],[17,"XKB_KEY_osfSelectAll","","",null,null],[17,"XKB_KEY_osfDeselectAll","","",null,null],[17,"XKB_KEY_osfReselect","","",null,null],[17,"XKB_KEY_osfExtend","","",null,null],[17,"XKB_KEY_osfRestore","","",null,null],[17,"XKB_KEY_osfDelete","","",null,null],[17,"XKB_KEY_Reset","","",null,null],[17,"XKB_KEY_System","","",null,null],[17,"XKB_KEY_User","","",null,null],[17,"XKB_KEY_ClearLine","","",null,null],[17,"XKB_KEY_InsertLine","","",null,null],[17,"XKB_KEY_DeleteLine","","",null,null],[17,"XKB_KEY_InsertChar","","",null,null],[17,"XKB_KEY_DeleteChar","","",null,null],[17,"XKB_KEY_BackTab","","",null,null],[17,"XKB_KEY_KP_BackTab","","",null,null],[17,"XKB_KEY_Ext16bit_L","","",null,null],[17,"XKB_KEY_Ext16bit_R","","",null,null],[17,"XKB_KEY_mute_acute","","",null,null],[17,"XKB_KEY_mute_grave","","",null,null],[17,"XKB_KEY_mute_asciicircum","","",null,null],[17,"XKB_KEY_mute_diaeresis","","",null,null],[17,"XKB_KEY_mute_asciitilde","","",null,null],[17,"XKB_KEY_lira","","",null,null],[17,"XKB_KEY_guilder","","",null,null],[17,"XKB_KEY_IO","","",null,null],[17,"XKB_KEY_longminus","","",null,null],[17,"XKB_KEY_block","","",null,null]],"paths":[[3,"MappedKeyboardImplementation"],[3,"ModifiersState"],[3,"RMLVO"],[4,"MappedKeyboardError"]]};
searchIndex["wayland_protocols"] = {"doc":"This crate provides bindings to the official wayland protocol extensions provided in https://cgit.freedesktop.org/wayland/wayland-protocols","items":[[0,"unstable","wayland_protocols","Unstable protocols from wayland-protocols",null,null],[0,"fullscreen_shell","wayland_protocols::unstable","Fullscreen shell protocol",null,null],[0,"v1","wayland_protocols::unstable::fullscreen_shell","",null,null],[0,"client","wayland_protocols::unstable::fullscreen_shell::v1","Client-side API of this protocol",null,null],[0,"zwp_fullscreen_shell_v1","wayland_protocols::unstable::fullscreen_shell::v1::client","displays a single surface per output",null,null],[3,"ZwpFullscreenShellV1","wayland_protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","",null,null],[3,"Implementation","","",null,null],[12,"capability","","advertises a capability of the compositor",0,null],[4,"Capability","","capabilities advertised by the compositor",null,null],[13,"ArbitraryModes","","compositor is capable of almost any output mode",1,null],[13,"CursorPlane","","compositor has a separate cursor plane",1,null],[4,"PresentMethod","","different method to set the surface fullscreen",null,null],[13,"Default","","no preference, apply default policy",2,null],[13,"Center","","center the surface on the output",2,null],[13,"Zoom","","scale the surface, preserving aspect ratio, to the largest size that will fit on the output",2,null],[13,"ZoomCrop","","scale the surface, preserving aspect ratio, to fully fill the output cropping if needed",2,null],[13,"Stretch","","scale the surface to the size of the output ignoring aspect ratio",2,null],[4,"Error","","wl_fullscreen_shell error values",null,null],[13,"InvalidMethod","","present_method is not known",3,null],[0,"zwp_fullscreen_shell_mode_feedback_v1","wayland_protocols::unstable::fullscreen_shell::v1::client","",null,null],[3,"ZwpFullscreenShellModeFeedbackV1","wayland_protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_mode_feedback_v1","",null,null],[3,"Implementation","","",null,null],[12,"mode_successful","","mode switch succeeded",4,null],[12,"mode_failed","","mode switch failed",4,null],[12,"present_cancelled","","mode switch cancelled",4,null],[11,"ptr","wayland_protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","",5,null],[11,"from_ptr_new","","",5,null],[11,"from_ptr_initialized","","",5,null],[11,"interface_ptr","","",5,null],[11,"interface_name","","",5,{"o":{"n":"str"}}],[11,"supported_version","","",5,{"o":{"n":"u32"}}],[11,"version","","",5,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",5,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",5,{"i":[{"n":"self"},{"n":"zwpfullscreenshellv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",5,null],[11,"get_user_data","","",5,null],[11,"clone_unchecked","","",5,{"i":[{"n":"self"}],"o":{"n":"zwpfullscreenshellv1"}}],[11,"__dispatch_msg","","",5,null],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"capability"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"capability"}],"o":{"n":"bool"}}],[11,"from_raw","","",1,{"i":[{"n":"u32"}],"o":{"g":["capability"],"n":"option"}}],[11,"to_raw","","",1,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"presentmethod"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"presentmethod"}],"o":{"n":"bool"}}],[11,"from_raw","","",2,{"i":[{"n":"u32"}],"o":{"g":["presentmethod"],"n":"option"}}],[11,"to_raw","","",2,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_raw","","",3,{"i":[{"n":"u32"}],"o":{"g":["error"],"n":"option"}}],[11,"to_raw","","",3,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"release","","release the wl_fullscreen_shell interface",5,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"present_surface","","present surface for display",5,{"i":[{"n":"self"},{"g":["wlsurface"],"n":"option"},{"n":"u32"},{"g":["wloutput"],"n":"option"}],"o":{"n":"requestresult"}}],[11,"present_surface_for_mode","","present surface for display at a particular mode",5,{"i":[{"n":"self"},{"n":"wlsurface"},{"n":"wloutput"},{"n":"i32"}],"o":{"g":["zwpfullscreenshellmodefeedbackv1"],"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_mode_feedback_v1","",6,null],[11,"from_ptr_new","","",6,null],[11,"from_ptr_initialized","","",6,null],[11,"interface_ptr","","",6,null],[11,"interface_name","","",6,{"o":{"n":"str"}}],[11,"supported_version","","",6,{"o":{"n":"u32"}}],[11,"version","","",6,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",6,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",6,{"i":[{"n":"self"},{"n":"zwpfullscreenshellmodefeedbackv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",6,null],[11,"get_user_data","","",6,null],[11,"clone_unchecked","","",6,{"i":[{"n":"self"}],"o":{"n":"zwpfullscreenshellmodefeedbackv1"}}],[11,"__dispatch_msg","","",6,null],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[0,"idle_inhibit","wayland_protocols::unstable","Screensaver inhibition protocol",null,null],[0,"v1","wayland_protocols::unstable::idle_inhibit","",null,null],[0,"client","wayland_protocols::unstable::idle_inhibit::v1","Client-side API of this protocol",null,null],[0,"zwp_idle_inhibit_manager_v1","wayland_protocols::unstable::idle_inhibit::v1::client","control behavior when display idles",null,null],[3,"ZwpIdleInhibitManagerV1","wayland_protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibit_manager_v1","",null,null],[0,"zwp_idle_inhibitor_v1","wayland_protocols::unstable::idle_inhibit::v1::client","context object for inhibiting idle behavior",null,null],[3,"ZwpIdleInhibitorV1","wayland_protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibitor_v1","",null,null],[11,"ptr","wayland_protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibit_manager_v1","",7,null],[11,"from_ptr_new","","",7,null],[11,"from_ptr_initialized","","",7,null],[11,"interface_ptr","","",7,null],[11,"interface_name","","",7,{"o":{"n":"str"}}],[11,"supported_version","","",7,{"o":{"n":"u32"}}],[11,"version","","",7,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",7,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",7,{"i":[{"n":"self"},{"n":"zwpidleinhibitmanagerv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",7,null],[11,"get_user_data","","",7,null],[11,"clone_unchecked","","",7,{"i":[{"n":"self"}],"o":{"n":"zwpidleinhibitmanagerv1"}}],[11,"destroy","","destroy the idle inhibitor object",7,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"create_inhibitor","","create a new inhibitor object",7,{"i":[{"n":"self"},{"n":"wlsurface"}],"o":{"g":["zwpidleinhibitorv1"],"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibitor_v1","",8,null],[11,"from_ptr_new","","",8,null],[11,"from_ptr_initialized","","",8,null],[11,"interface_ptr","","",8,null],[11,"interface_name","","",8,{"o":{"n":"str"}}],[11,"supported_version","","",8,{"o":{"n":"u32"}}],[11,"version","","",8,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",8,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",8,{"i":[{"n":"self"},{"n":"zwpidleinhibitorv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",8,null],[11,"get_user_data","","",8,null],[11,"clone_unchecked","","",8,{"i":[{"n":"self"}],"o":{"n":"zwpidleinhibitorv1"}}],[11,"destroy","","destroy the idle inhibitor object",8,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[0,"input_method","wayland_protocols::unstable","Input method protocol",null,null],[0,"v1","wayland_protocols::unstable::input_method","",null,null],[0,"client","wayland_protocols::unstable::input_method::v1","Client-side API of this protocol",null,null],[0,"zwp_input_method_context_v1","wayland_protocols::unstable::input_method::v1::client","input method context",null,null],[3,"ZwpInputMethodContextV1","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",null,null],[3,"Implementation","","",null,null],[12,"surrounding_text","","surrounding text event",9,null],[12,"reset","","Arguments: event_queue_handle, interface_data, zwp_input_method_context_v1",9,null],[12,"content_type","","Arguments: event_queue_handle, interface_data, zwp_input_method_context_v1, hint, purpose",9,null],[12,"invoke_action","","Arguments: event_queue_handle, interface_data, zwp_input_method_context_v1, button, index",9,null],[12,"commit_state","","Arguments: event_queue_handle, interface_data, zwp_input_method_context_v1, serial",9,null],[12,"preferred_language","","Arguments: event_queue_handle, interface_data, zwp_input_method_context_v1, language",9,null],[0,"zwp_input_method_v1","wayland_protocols::unstable::input_method::v1::client","input method",null,null],[3,"ZwpInputMethodV1","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_v1","",null,null],[3,"Implementation","","",null,null],[12,"activate","","activate event",10,null],[12,"deactivate","","deactivate event",10,null],[0,"zwp_input_panel_v1","wayland_protocols::unstable::input_method::v1::client","interface for implementing keyboards",null,null],[3,"ZwpInputPanelV1","wayland_protocols::unstable::input_method::v1::client::zwp_input_panel_v1","",null,null],[0,"zwp_input_panel_surface_v1","wayland_protocols::unstable::input_method::v1::client","",null,null],[3,"ZwpInputPanelSurfaceV1","wayland_protocols::unstable::input_method::v1::client::zwp_input_panel_surface_v1","",null,null],[4,"Position","","",null,null],[13,"CenterBottom","","",11,null],[11,"ptr","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",12,null],[11,"from_ptr_new","","",12,null],[11,"from_ptr_initialized","","",12,null],[11,"interface_ptr","","",12,null],[11,"interface_name","","",12,{"o":{"n":"str"}}],[11,"supported_version","","",12,{"o":{"n":"u32"}}],[11,"version","","",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",12,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",12,{"i":[{"n":"self"},{"n":"zwpinputmethodcontextv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",12,null],[11,"get_user_data","","",12,null],[11,"clone_unchecked","","",12,{"i":[{"n":"self"}],"o":{"n":"zwpinputmethodcontextv1"}}],[11,"__dispatch_msg","","",12,null],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","This is a destructor, you cannot send requests to this object once this method is called.",12,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"commit_string","","commit string",12,{"i":[{"n":"self"},{"n":"u32"},{"n":"string"}],"o":{"n":"requestresult"}}],[11,"preedit_string","","pre-edit string",12,{"i":[{"n":"self"},{"n":"u32"},{"n":"string"},{"n":"string"}],"o":{"n":"requestresult"}}],[11,"preedit_styling","","pre-edit styling",12,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"preedit_cursor","","pre-edit cursor",12,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"delete_surrounding_text","","delete text",12,{"i":[{"n":"self"},{"n":"i32"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"cursor_position","","set cursor to a new position",12,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"modifiers_map","","",12,{"i":[{"n":"self"},{"g":["u8"],"n":"vec"}],"o":{"n":"requestresult"}}],[11,"keysym","","keysym",12,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"grab_keyboard","","grab hardware keyboard",12,{"i":[{"n":"self"}],"o":{"g":["wlkeyboard"],"n":"requestresult"}}],[11,"key","","forward key event",12,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"modifiers","","forward modifiers event",12,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"language","","",12,{"i":[{"n":"self"},{"n":"u32"},{"n":"string"}],"o":{"n":"requestresult"}}],[11,"text_direction","","",12,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_v1","",13,null],[11,"from_ptr_new","","",13,null],[11,"from_ptr_initialized","","",13,null],[11,"interface_ptr","","",13,null],[11,"interface_name","","",13,{"o":{"n":"str"}}],[11,"supported_version","","",13,{"o":{"n":"u32"}}],[11,"version","","",13,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",13,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",13,{"i":[{"n":"self"},{"n":"zwpinputmethodv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",13,null],[11,"get_user_data","","",13,null],[11,"clone_unchecked","","",13,{"i":[{"n":"self"}],"o":{"n":"zwpinputmethodv1"}}],[11,"__dispatch_msg","","",13,null],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"ptr","wayland_protocols::unstable::input_method::v1::client::zwp_input_panel_v1","",14,null],[11,"from_ptr_new","","",14,null],[11,"from_ptr_initialized","","",14,null],[11,"interface_ptr","","",14,null],[11,"interface_name","","",14,{"o":{"n":"str"}}],[11,"supported_version","","",14,{"o":{"n":"u32"}}],[11,"version","","",14,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",14,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",14,{"i":[{"n":"self"},{"n":"zwpinputpanelv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",14,null],[11,"get_user_data","","",14,null],[11,"clone_unchecked","","",14,{"i":[{"n":"self"}],"o":{"n":"zwpinputpanelv1"}}],[11,"get_input_panel_surface","","",14,{"i":[{"n":"self"},{"n":"wlsurface"}],"o":{"n":"zwpinputpanelsurfacev1"}}],[11,"ptr","wayland_protocols::unstable::input_method::v1::client::zwp_input_panel_surface_v1","",15,null],[11,"from_ptr_new","","",15,null],[11,"from_ptr_initialized","","",15,null],[11,"interface_ptr","","",15,null],[11,"interface_name","","",15,{"o":{"n":"str"}}],[11,"supported_version","","",15,{"o":{"n":"u32"}}],[11,"version","","",15,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",15,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",15,{"i":[{"n":"self"},{"n":"zwpinputpanelsurfacev1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",15,null],[11,"get_user_data","","",15,null],[11,"clone_unchecked","","",15,{"i":[{"n":"self"}],"o":{"n":"zwpinputpanelsurfacev1"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"position"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"position"}],"o":{"n":"bool"}}],[11,"from_raw","","",11,{"i":[{"n":"u32"}],"o":{"g":["position"],"n":"option"}}],[11,"to_raw","","",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"set_toplevel","","set the surface type as a keyboard",15,null],[11,"set_overlay_panel","","set the surface type as an overlay panel",15,null],[0,"keyboard_shortcuts_inhibit","wayland_protocols::unstable","Protocol for inhibiting the compositor keyboard shortcuts",null,null],[0,"v1","wayland_protocols::unstable::keyboard_shortcuts_inhibit","",null,null],[0,"client","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1","Client-side API of this protocol",null,null],[0,"zwp_keyboard_shortcuts_inhibit_manager_v1","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::client","context object for keyboard grab_manager",null,null],[3,"ZwpKeyboardShortcutsInhibitManagerV1","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibit_manager_v1","",null,null],[4,"Error","","",null,null],[13,"AlreadyInhibited","","the shortcuts are already inhibited for this surface",16,null],[0,"zwp_keyboard_shortcuts_inhibitor_v1","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::client","context object for keyboard shortcuts inhibitor",null,null],[3,"ZwpKeyboardShortcutsInhibitorV1","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibitor_v1","",null,null],[3,"Implementation","","",null,null],[12,"active","","shortcuts are inhibited",17,null],[12,"inactive","","shortcuts are restored",17,null],[11,"ptr","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibit_manager_v1","",18,null],[11,"from_ptr_new","","",18,null],[11,"from_ptr_initialized","","",18,null],[11,"interface_ptr","","",18,null],[11,"interface_name","","",18,{"o":{"n":"str"}}],[11,"supported_version","","",18,{"o":{"n":"u32"}}],[11,"version","","",18,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",18,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",18,{"i":[{"n":"self"},{"n":"zwpkeyboardshortcutsinhibitmanagerv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",18,null],[11,"get_user_data","","",18,null],[11,"clone_unchecked","","",18,{"i":[{"n":"self"}],"o":{"n":"zwpkeyboardshortcutsinhibitmanagerv1"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_raw","","",16,{"i":[{"n":"u32"}],"o":{"g":["error"],"n":"option"}}],[11,"to_raw","","",16,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"destroy","","destroy the keyboard shortcuts inhibitor object",18,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"inhibit_shortcuts","","create a new keyboard shortcuts inhibitor object",18,{"i":[{"n":"self"},{"n":"wlsurface"},{"n":"wlseat"}],"o":{"g":["zwpkeyboardshortcutsinhibitorv1"],"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibitor_v1","",19,null],[11,"from_ptr_new","","",19,null],[11,"from_ptr_initialized","","",19,null],[11,"interface_ptr","","",19,null],[11,"interface_name","","",19,{"o":{"n":"str"}}],[11,"supported_version","","",19,{"o":{"n":"u32"}}],[11,"version","","",19,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",19,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",19,{"i":[{"n":"self"},{"n":"zwpkeyboardshortcutsinhibitorv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",19,null],[11,"get_user_data","","",19,null],[11,"clone_unchecked","","",19,{"i":[{"n":"self"}],"o":{"n":"zwpkeyboardshortcutsinhibitorv1"}}],[11,"__dispatch_msg","","",19,null],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",17,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","destroy the keyboard shortcuts inhibitor object",19,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[0,"linux_dmabuf","wayland_protocols::unstable","Linux DMA-BUF protocol",null,null],[0,"v1","wayland_protocols::unstable::linux_dmabuf","",null,null],[0,"client","wayland_protocols::unstable::linux_dmabuf::v1","Client-side API of this protocol",null,null],[0,"zwp_linux_dmabuf_v1","wayland_protocols::unstable::linux_dmabuf::v1::client","factory for creating dmabuf-based wl_buffers",null,null],[3,"ZwpLinuxDmabufV1","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1","",null,null],[3,"Implementation","","",null,null],[12,"format","","supported buffer format",20,null],[12,"modifier","","supported buffer format modifier",20,null],[0,"zwp_linux_buffer_params_v1","wayland_protocols::unstable::linux_dmabuf::v1::client","parameters for creating a dmabuf-based wl_buffer",null,null],[3,"ZwpLinuxBufferParamsV1","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","",null,null],[3,"Implementation","","",null,null],[12,"created","","buffer creation succeeded",21,null],[12,"failed","","buffer creation failed",21,null],[4,"Error","","",null,null],[13,"AlreadyUsed","","the dmabuf_batch object has already been used to create a wl_buffer",22,null],[13,"PlaneIdx","","plane index out of bounds",22,null],[13,"PlaneSet","","the plane index was already set",22,null],[13,"Incomplete","","missing or too many planes to create a buffer",22,null],[13,"InvalidFormat","","format not supported",22,null],[13,"InvalidDimensions","","invalid width or height",22,null],[13,"OutOfBounds","","offset + stride * height goes out of dmabuf bounds",22,null],[13,"InvalidWlBuffer","","invalid wl_buffer resulted from importing dmabufs via the create_immed request on given buffer_params",22,null],[4,"Flags","","",null,null],[13,"YInvert","","contents are y-inverted",23,null],[13,"Interlaced","","content is interlaced",23,null],[13,"BottomFirst","","bottom field first",23,null],[11,"ptr","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1","",24,null],[11,"from_ptr_new","","",24,null],[11,"from_ptr_initialized","","",24,null],[11,"interface_ptr","","",24,null],[11,"interface_name","","",24,{"o":{"n":"str"}}],[11,"supported_version","","",24,{"o":{"n":"u32"}}],[11,"version","","",24,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",24,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",24,{"i":[{"n":"self"},{"n":"zwplinuxdmabufv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",24,null],[11,"get_user_data","","",24,null],[11,"clone_unchecked","","",24,{"i":[{"n":"self"}],"o":{"n":"zwplinuxdmabufv1"}}],[11,"__dispatch_msg","","",24,null],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","unbind the factory",24,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"create_params","","create a temporary object for buffer parameters",24,{"i":[{"n":"self"}],"o":{"g":["zwplinuxbufferparamsv1"],"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","",25,null],[11,"from_ptr_new","","",25,null],[11,"from_ptr_initialized","","",25,null],[11,"interface_ptr","","",25,null],[11,"interface_name","","",25,{"o":{"n":"str"}}],[11,"supported_version","","",25,{"o":{"n":"u32"}}],[11,"version","","",25,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",25,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",25,{"i":[{"n":"self"},{"n":"zwplinuxbufferparamsv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",25,null],[11,"get_user_data","","",25,null],[11,"clone_unchecked","","",25,{"i":[{"n":"self"}],"o":{"n":"zwplinuxbufferparamsv1"}}],[11,"__dispatch_msg","","",25,null],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_raw","","",22,{"i":[{"n":"u32"}],"o":{"g":["error"],"n":"option"}}],[11,"to_raw","","",22,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"flags"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",23,{"i":[{"n":"self"},{"n":"flags"}],"o":{"n":"bool"}}],[11,"from_raw","","",23,{"i":[{"n":"u32"}],"o":{"g":["flags"],"n":"option"}}],[11,"to_raw","","",23,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","delete this object, used or not",25,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"add","","add a dmabuf to the temporary set",25,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"create","","create a wl_buffer from the given dmabufs",25,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"create_immed","","immediately create a wl_buffer from the given dmabufs",25,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["wlbuffer"],"n":"requestresult"}}],[0,"pointer_constraints","wayland_protocols::unstable","protocol for constraining pointer motions",null,null],[0,"v1","wayland_protocols::unstable::pointer_constraints","",null,null],[0,"client","wayland_protocols::unstable::pointer_constraints::v1","Client-side API of this protocol",null,null],[0,"zwp_pointer_constraints_v1","wayland_protocols::unstable::pointer_constraints::v1::client","constrain the movement of a pointer",null,null],[3,"ZwpPointerConstraintsV1","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1","",null,null],[4,"Error","","wp_pointer_constraints error values",null,null],[13,"AlreadyConstrained","","pointer constraint already requested on that surface",26,null],[4,"Lifetime","","constraint lifetime",null,null],[13,"Oneshot","","the pointer constraint is defunct once deactivated",27,null],[13,"Persistent","","the pointer constraint may reactivate",27,null],[0,"zwp_locked_pointer_v1","wayland_protocols::unstable::pointer_constraints::v1::client","receive relative pointer motion events",null,null],[3,"ZwpLockedPointerV1","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_locked_pointer_v1","",null,null],[3,"Implementation","","",null,null],[12,"locked","","lock activation event",28,null],[12,"unlocked","","lock deactivation event",28,null],[0,"zwp_confined_pointer_v1","wayland_protocols::unstable::pointer_constraints::v1::client","confined pointer object",null,null],[3,"ZwpConfinedPointerV1","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_confined_pointer_v1","",null,null],[3,"Implementation","","",null,null],[12,"confined","","pointer confined",29,null],[12,"unconfined","","pointer unconfined",29,null],[11,"ptr","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1","",30,null],[11,"from_ptr_new","","",30,null],[11,"from_ptr_initialized","","",30,null],[11,"interface_ptr","","",30,null],[11,"interface_name","","",30,{"o":{"n":"str"}}],[11,"supported_version","","",30,{"o":{"n":"u32"}}],[11,"version","","",30,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",30,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",30,{"i":[{"n":"self"},{"n":"zwppointerconstraintsv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",30,null],[11,"get_user_data","","",30,null],[11,"clone_unchecked","","",30,{"i":[{"n":"self"}],"o":{"n":"zwppointerconstraintsv1"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",26,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_raw","","",26,{"i":[{"n":"u32"}],"o":{"g":["error"],"n":"option"}}],[11,"to_raw","","",26,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"lifetime"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"n":"bool"}}],[11,"from_raw","","",27,{"i":[{"n":"u32"}],"o":{"g":["lifetime"],"n":"option"}}],[11,"to_raw","","",27,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"destroy","","destroy the pointer constraints manager object",30,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"lock_pointer","","lock pointer to a position",30,{"i":[{"n":"self"},{"n":"wlsurface"},{"n":"wlpointer"},{"g":["wlregion"],"n":"option"},{"n":"u32"}],"o":{"g":["zwplockedpointerv1"],"n":"requestresult"}}],[11,"confine_pointer","","confine pointer to a region",30,{"i":[{"n":"self"},{"n":"wlsurface"},{"n":"wlpointer"},{"g":["wlregion"],"n":"option"},{"n":"u32"}],"o":{"g":["zwpconfinedpointerv1"],"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_locked_pointer_v1","",31,null],[11,"from_ptr_new","","",31,null],[11,"from_ptr_initialized","","",31,null],[11,"interface_ptr","","",31,null],[11,"interface_name","","",31,{"o":{"n":"str"}}],[11,"supported_version","","",31,{"o":{"n":"u32"}}],[11,"version","","",31,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",31,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",31,{"i":[{"n":"self"},{"n":"zwplockedpointerv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",31,null],[11,"get_user_data","","",31,null],[11,"clone_unchecked","","",31,{"i":[{"n":"self"}],"o":{"n":"zwplockedpointerv1"}}],[11,"__dispatch_msg","","",31,null],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",28,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","destroy the locked pointer object",31,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"set_cursor_position_hint","","set the pointer cursor position hint",31,{"i":[{"n":"self"},{"n":"f64"},{"n":"f64"}],"o":{"n":"requestresult"}}],[11,"set_region","","set a new lock region",31,{"i":[{"n":"self"},{"g":["wlregion"],"n":"option"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_confined_pointer_v1","",32,null],[11,"from_ptr_new","","",32,null],[11,"from_ptr_initialized","","",32,null],[11,"interface_ptr","","",32,null],[11,"interface_name","","",32,{"o":{"n":"str"}}],[11,"supported_version","","",32,{"o":{"n":"u32"}}],[11,"version","","",32,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",32,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",32,{"i":[{"n":"self"},{"n":"zwpconfinedpointerv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",32,null],[11,"get_user_data","","",32,null],[11,"clone_unchecked","","",32,{"i":[{"n":"self"}],"o":{"n":"zwpconfinedpointerv1"}}],[11,"__dispatch_msg","","",32,null],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",29,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","destroy the confined pointer object",32,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"set_region","","set a new confine region",32,{"i":[{"n":"self"},{"g":["wlregion"],"n":"option"}],"o":{"n":"requestresult"}}],[0,"pointer_gestures","wayland_protocols::unstable","Pointer gestures protocol",null,null],[0,"v1","wayland_protocols::unstable::pointer_gestures","",null,null],[0,"client","wayland_protocols::unstable::pointer_gestures::v1","Client-side API of this protocol",null,null],[0,"zwp_pointer_gestures_v1","wayland_protocols::unstable::pointer_gestures::v1::client","touchpad gestures",null,null],[3,"ZwpPointerGesturesV1","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gestures_v1","",null,null],[0,"zwp_pointer_gesture_swipe_v1","wayland_protocols::unstable::pointer_gestures::v1::client","a swipe gesture object",null,null],[3,"ZwpPointerGestureSwipeV1","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1","",null,null],[3,"Implementation","","",null,null],[12,"begin","","multi-finger swipe begin",33,null],[12,"update","","multi-finger swipe motion",33,null],[12,"end","","multi-finger swipe end",33,null],[0,"zwp_pointer_gesture_pinch_v1","wayland_protocols::unstable::pointer_gestures::v1::client","a pinch gesture object",null,null],[3,"ZwpPointerGesturePinchV1","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1","",null,null],[3,"Implementation","","",null,null],[12,"begin","","multi-finger pinch begin",34,null],[12,"update","","multi-finger pinch motion",34,null],[12,"end","","multi-finger pinch end",34,null],[11,"ptr","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gestures_v1","",35,null],[11,"from_ptr_new","","",35,null],[11,"from_ptr_initialized","","",35,null],[11,"interface_ptr","","",35,null],[11,"interface_name","","",35,{"o":{"n":"str"}}],[11,"supported_version","","",35,{"o":{"n":"u32"}}],[11,"version","","",35,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",35,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",35,{"i":[{"n":"self"},{"n":"zwppointergesturesv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",35,null],[11,"get_user_data","","",35,null],[11,"clone_unchecked","","",35,{"i":[{"n":"self"}],"o":{"n":"zwppointergesturesv1"}}],[11,"get_swipe_gesture","","get swipe gesture",35,{"i":[{"n":"self"},{"n":"wlpointer"}],"o":{"n":"zwppointergestureswipev1"}}],[11,"get_pinch_gesture","","get pinch gesture",35,{"i":[{"n":"self"},{"n":"wlpointer"}],"o":{"n":"zwppointergesturepinchv1"}}],[11,"ptr","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1","",36,null],[11,"from_ptr_new","","",36,null],[11,"from_ptr_initialized","","",36,null],[11,"interface_ptr","","",36,null],[11,"interface_name","","",36,{"o":{"n":"str"}}],[11,"supported_version","","",36,{"o":{"n":"u32"}}],[11,"version","","",36,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",36,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",36,{"i":[{"n":"self"},{"n":"zwppointergestureswipev1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",36,null],[11,"get_user_data","","",36,null],[11,"clone_unchecked","","",36,{"i":[{"n":"self"}],"o":{"n":"zwppointergestureswipev1"}}],[11,"__dispatch_msg","","",36,null],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",33,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","destroy the pointer swipe gesture object",36,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1","",37,null],[11,"from_ptr_new","","",37,null],[11,"from_ptr_initialized","","",37,null],[11,"interface_ptr","","",37,null],[11,"interface_name","","",37,{"o":{"n":"str"}}],[11,"supported_version","","",37,{"o":{"n":"u32"}}],[11,"version","","",37,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",37,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",37,{"i":[{"n":"self"},{"n":"zwppointergesturepinchv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",37,null],[11,"get_user_data","","",37,null],[11,"clone_unchecked","","",37,{"i":[{"n":"self"}],"o":{"n":"zwppointergesturepinchv1"}}],[11,"__dispatch_msg","","",37,null],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",34,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","destroy the pinch gesture object",37,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[0,"relative_pointer","wayland_protocols::unstable","protocol for relative pointer motion events",null,null],[0,"v1","wayland_protocols::unstable::relative_pointer","",null,null],[0,"client","wayland_protocols::unstable::relative_pointer::v1","Client-side API of this protocol",null,null],[0,"zwp_relative_pointer_manager_v1","wayland_protocols::unstable::relative_pointer::v1::client","get relative pointer objects",null,null],[3,"ZwpRelativePointerManagerV1","wayland_protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_manager_v1","",null,null],[0,"zwp_relative_pointer_v1","wayland_protocols::unstable::relative_pointer::v1::client","relative pointer object",null,null],[3,"ZwpRelativePointerV1","wayland_protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_v1","",null,null],[3,"Implementation","","",null,null],[12,"relative_motion","","relative pointer motion",38,null],[11,"ptr","wayland_protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_manager_v1","",39,null],[11,"from_ptr_new","","",39,null],[11,"from_ptr_initialized","","",39,null],[11,"interface_ptr","","",39,null],[11,"interface_name","","",39,{"o":{"n":"str"}}],[11,"supported_version","","",39,{"o":{"n":"u32"}}],[11,"version","","",39,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",39,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",39,{"i":[{"n":"self"},{"n":"zwprelativepointermanagerv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",39,null],[11,"get_user_data","","",39,null],[11,"clone_unchecked","","",39,{"i":[{"n":"self"}],"o":{"n":"zwprelativepointermanagerv1"}}],[11,"destroy","","destroy the relative pointer manager object",39,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"get_relative_pointer","","get a relative pointer object",39,{"i":[{"n":"self"},{"n":"wlpointer"}],"o":{"g":["zwprelativepointerv1"],"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_v1","",40,null],[11,"from_ptr_new","","",40,null],[11,"from_ptr_initialized","","",40,null],[11,"interface_ptr","","",40,null],[11,"interface_name","","",40,{"o":{"n":"str"}}],[11,"supported_version","","",40,{"o":{"n":"u32"}}],[11,"version","","",40,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",40,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",40,{"i":[{"n":"self"},{"n":"zwprelativepointerv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",40,null],[11,"get_user_data","","",40,null],[11,"clone_unchecked","","",40,{"i":[{"n":"self"}],"o":{"n":"zwprelativepointerv1"}}],[11,"__dispatch_msg","","",40,null],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",38,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","release the relative pointer object",40,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[0,"tablet","wayland_protocols::unstable","Wayland protocol for graphics tablets",null,null],[0,"v1","wayland_protocols::unstable::tablet","",null,null],[0,"client","wayland_protocols::unstable::tablet::v1","Client-side API of this protocol",null,null],[0,"zwp_tablet_manager_v1","wayland_protocols::unstable::tablet::v1::client","controller object for graphic tablet devices",null,null],[3,"ZwpTabletManagerV1","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_manager_v1","",null,null],[0,"zwp_tablet_seat_v1","wayland_protocols::unstable::tablet::v1::client","controller object for graphic tablet devices of a seat",null,null],[3,"ZwpTabletSeatV1","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_seat_v1","",null,null],[3,"Implementation","","",null,null],[12,"tablet_added","","new device notification",41,null],[12,"tool_added","","a new tool has been used with a tablet",41,null],[0,"zwp_tablet_tool_v1","wayland_protocols::unstable::tablet::v1::client","a physical tablet tool",null,null],[3,"ZwpTabletToolV1","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","",null,null],[3,"Implementation","","",null,null],[12,"type_","","tool type",42,null],[12,"hardware_serial","","unique hardware serial number of the tool",42,null],[12,"hardware_id_wacom","","hardware id notification in Wacom's format",42,null],[12,"capability","","tool capability notification",42,null],[12,"done","","tool description events sequence complete",42,null],[12,"removed","","tool removed",42,null],[12,"proximity_in","","proximity in event",42,null],[12,"proximity_out","","proximity out event",42,null],[12,"down","","tablet tool is making contact",42,null],[12,"up","","tablet tool is no longer making contact",42,null],[12,"motion","","motion event",42,null],[12,"pressure","","pressure change event",42,null],[12,"distance","","distance change event",42,null],[12,"tilt","","tilt change event",42,null],[12,"rotation","","z-rotation change event",42,null],[12,"slider","","Slider position change event",42,null],[12,"wheel","","Wheel delta event",42,null],[12,"button","","button event",42,null],[12,"frame","","frame event",42,null],[4,"Type","","a physical tool type",null,null],[13,"Pen","","Pen",43,null],[13,"Eraser","","Eraser",43,null],[13,"Brush","","Brush",43,null],[13,"Pencil","","Pencil",43,null],[13,"Airbrush","","Airbrush",43,null],[13,"Finger","","Finger",43,null],[13,"Mouse","","Mouse",43,null],[13,"Lens","","Lens",43,null],[4,"Capability","","capability flags for a tool",null,null],[13,"Tilt","","Tilt axes",44,null],[13,"Pressure","","Pressure axis",44,null],[13,"Distance","","Distance axis",44,null],[13,"Rotation","","Z-rotation axis",44,null],[13,"Slider","","Slider axis",44,null],[13,"Wheel","","Wheel axis",44,null],[4,"ButtonState","","physical button state",null,null],[13,"Released","","button is not pressed",45,null],[13,"Pressed","","button is pressed",45,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",46,null],[0,"zwp_tablet_v1","wayland_protocols::unstable::tablet::v1::client","graphics tablet device",null,null],[3,"ZwpTabletV1","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_v1","",null,null],[3,"Implementation","","",null,null],[12,"name","","tablet device name",47,null],[12,"id","","tablet device USB vendor/product id",47,null],[12,"path","","path to the device",47,null],[12,"done","","tablet description events sequence complete",47,null],[12,"removed","","tablet removed event",47,null],[11,"ptr","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_manager_v1","",48,null],[11,"from_ptr_new","","",48,null],[11,"from_ptr_initialized","","",48,null],[11,"interface_ptr","","",48,null],[11,"interface_name","","",48,{"o":{"n":"str"}}],[11,"supported_version","","",48,{"o":{"n":"u32"}}],[11,"version","","",48,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",48,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",48,{"i":[{"n":"self"},{"n":"zwptabletmanagerv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",48,null],[11,"get_user_data","","",48,null],[11,"clone_unchecked","","",48,{"i":[{"n":"self"}],"o":{"n":"zwptabletmanagerv1"}}],[11,"get_tablet_seat","","get the tablet seat",48,{"i":[{"n":"self"},{"n":"wlseat"}],"o":{"g":["zwptabletseatv1"],"n":"requestresult"}}],[11,"destroy","","release the memory for the tablet manager object",48,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_seat_v1","",49,null],[11,"from_ptr_new","","",49,null],[11,"from_ptr_initialized","","",49,null],[11,"interface_ptr","","",49,null],[11,"interface_name","","",49,{"o":{"n":"str"}}],[11,"supported_version","","",49,{"o":{"n":"u32"}}],[11,"version","","",49,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",49,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",49,{"i":[{"n":"self"},{"n":"zwptabletseatv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",49,null],[11,"get_user_data","","",49,null],[11,"clone_unchecked","","",49,{"i":[{"n":"self"}],"o":{"n":"zwptabletseatv1"}}],[11,"__dispatch_msg","","",49,null],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",41,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","release the memory for the tablet seat object",49,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","",50,null],[11,"from_ptr_new","","",50,null],[11,"from_ptr_initialized","","",50,null],[11,"interface_ptr","","",50,null],[11,"interface_name","","",50,{"o":{"n":"str"}}],[11,"supported_version","","",50,{"o":{"n":"u32"}}],[11,"version","","",50,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",50,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",50,{"i":[{"n":"self"},{"n":"zwptablettoolv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",50,null],[11,"get_user_data","","",50,null],[11,"clone_unchecked","","",50,{"i":[{"n":"self"}],"o":{"n":"zwptablettoolv1"}}],[11,"__dispatch_msg","","",50,null],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"type"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",43,{"i":[{"n":"self"},{"n":"type"}],"o":{"n":"bool"}}],[11,"from_raw","","",43,{"i":[{"n":"u32"}],"o":{"g":["type"],"n":"option"}}],[11,"to_raw","","",43,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"capability"}}],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",44,{"i":[{"n":"self"},{"n":"capability"}],"o":{"n":"bool"}}],[11,"from_raw","","",44,{"i":[{"n":"u32"}],"o":{"g":["capability"],"n":"option"}}],[11,"to_raw","","",44,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"buttonstate"}}],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",45,{"i":[{"n":"self"},{"n":"buttonstate"}],"o":{"n":"bool"}}],[11,"from_raw","","",45,{"i":[{"n":"u32"}],"o":{"g":["buttonstate"],"n":"option"}}],[11,"to_raw","","",45,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",46,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_raw","","",46,{"i":[{"n":"u32"}],"o":{"g":["error"],"n":"option"}}],[11,"to_raw","","",46,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",42,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"set_cursor","","set the tablet tool's surface",50,{"i":[{"n":"self"},{"n":"u32"},{"g":["wlsurface"],"n":"option"},{"n":"i32"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"destroy","","destroy the tool object",50,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_v1","",51,null],[11,"from_ptr_new","","",51,null],[11,"from_ptr_initialized","","",51,null],[11,"interface_ptr","","",51,null],[11,"interface_name","","",51,{"o":{"n":"str"}}],[11,"supported_version","","",51,{"o":{"n":"u32"}}],[11,"version","","",51,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",51,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",51,{"i":[{"n":"self"},{"n":"zwptabletv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",51,null],[11,"get_user_data","","",51,null],[11,"clone_unchecked","","",51,{"i":[{"n":"self"}],"o":{"n":"zwptabletv1"}}],[11,"__dispatch_msg","","",51,null],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","destroy the tablet object",51,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[0,"v2","wayland_protocols::unstable::tablet","",null,null],[0,"client","wayland_protocols::unstable::tablet::v2","Client-side API of this protocol",null,null],[0,"zwp_tablet_manager_v2","wayland_protocols::unstable::tablet::v2::client","controller object for graphic tablet devices",null,null],[3,"ZwpTabletManagerV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_manager_v2","",null,null],[0,"zwp_tablet_seat_v2","wayland_protocols::unstable::tablet::v2::client","controller object for graphic tablet devices of a seat",null,null],[3,"ZwpTabletSeatV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2","",null,null],[3,"Implementation","","",null,null],[12,"tablet_added","","new device notification",52,null],[12,"tool_added","","a new tool has been used with a tablet",52,null],[12,"pad_added","","new pad notification",52,null],[0,"zwp_tablet_tool_v2","wayland_protocols::unstable::tablet::v2::client","a physical tablet tool",null,null],[3,"ZwpTabletToolV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","",null,null],[3,"Implementation","","",null,null],[12,"type_","","tool type",53,null],[12,"hardware_serial","","unique hardware serial number of the tool",53,null],[12,"hardware_id_wacom","","hardware id notification in Wacom's format",53,null],[12,"capability","","tool capability notification",53,null],[12,"done","","tool description events sequence complete",53,null],[12,"removed","","tool removed",53,null],[12,"proximity_in","","proximity in event",53,null],[12,"proximity_out","","proximity out event",53,null],[12,"down","","tablet tool is making contact",53,null],[12,"up","","tablet tool is no longer making contact",53,null],[12,"motion","","motion event",53,null],[12,"pressure","","pressure change event",53,null],[12,"distance","","distance change event",53,null],[12,"tilt","","tilt change event",53,null],[12,"rotation","","z-rotation change event",53,null],[12,"slider","","Slider position change event",53,null],[12,"wheel","","Wheel delta event",53,null],[12,"button","","button event",53,null],[12,"frame","","frame event",53,null],[4,"Type","","a physical tool type",null,null],[13,"Pen","","Pen",54,null],[13,"Eraser","","Eraser",54,null],[13,"Brush","","Brush",54,null],[13,"Pencil","","Pencil",54,null],[13,"Airbrush","","Airbrush",54,null],[13,"Finger","","Finger",54,null],[13,"Mouse","","Mouse",54,null],[13,"Lens","","Lens",54,null],[4,"Capability","","capability flags for a tool",null,null],[13,"Tilt","","Tilt axes",55,null],[13,"Pressure","","Pressure axis",55,null],[13,"Distance","","Distance axis",55,null],[13,"Rotation","","Z-rotation axis",55,null],[13,"Slider","","Slider axis",55,null],[13,"Wheel","","Wheel axis",55,null],[4,"ButtonState","","physical button state",null,null],[13,"Released","","button is not pressed",56,null],[13,"Pressed","","button is pressed",56,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",57,null],[0,"zwp_tablet_v2","wayland_protocols::unstable::tablet::v2::client","graphics tablet device",null,null],[3,"ZwpTabletV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_v2","",null,null],[3,"Implementation","","",null,null],[12,"name","","tablet device name",58,null],[12,"id","","tablet device USB vendor/product id",58,null],[12,"path","","path to the device",58,null],[12,"done","","tablet description events sequence complete",58,null],[12,"removed","","tablet removed event",58,null],[0,"zwp_tablet_pad_ring_v2","wayland_protocols::unstable::tablet::v2::client","pad ring",null,null],[3,"ZwpTabletPadRingV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2","",null,null],[3,"Implementation","","",null,null],[12,"source","","ring event source",59,null],[12,"angle","","angle changed",59,null],[12,"stop","","interaction stopped",59,null],[12,"frame","","end of a ring event sequence",59,null],[4,"Source","","ring axis source",null,null],[13,"Finger","","finger",60,null],[0,"zwp_tablet_pad_strip_v2","wayland_protocols::unstable::tablet::v2::client","pad strip",null,null],[3,"ZwpTabletPadStripV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2","",null,null],[3,"Implementation","","",null,null],[12,"source","","strip event source",61,null],[12,"position","","position changed",61,null],[12,"stop","","interaction stopped",61,null],[12,"frame","","end of a strip event sequence",61,null],[4,"Source","","strip axis source",null,null],[13,"Finger","","finger",62,null],[0,"zwp_tablet_pad_group_v2","wayland_protocols::unstable::tablet::v2::client","a set of buttons, rings and strips",null,null],[3,"ZwpTabletPadGroupV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2","",null,null],[3,"Implementation","","",null,null],[12,"buttons","","buttons announced",63,null],[12,"ring","","ring announced",63,null],[12,"strip","","strip announced",63,null],[12,"modes","","mode-switch ability announced",63,null],[12,"done","","tablet group description events sequence complete",63,null],[12,"mode_switch","","mode switch event",63,null],[0,"zwp_tablet_pad_v2","wayland_protocols::unstable::tablet::v2::client","a set of buttons, rings and strips",null,null],[3,"ZwpTabletPadV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","",null,null],[3,"Implementation","","",null,null],[12,"group","","group announced",64,null],[12,"path","","path to the device",64,null],[12,"buttons","","buttons announced",64,null],[12,"done","","pad description event sequence complete",64,null],[12,"button","","physical button state",64,null],[12,"enter","","enter event",64,null],[12,"leave","","enter event",64,null],[12,"removed","","pad removed event",64,null],[4,"ButtonState","","physical button state",null,null],[13,"Released","","the button is not pressed",65,null],[13,"Pressed","","the button is pressed",65,null],[11,"ptr","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_manager_v2","",66,null],[11,"from_ptr_new","","",66,null],[11,"from_ptr_initialized","","",66,null],[11,"interface_ptr","","",66,null],[11,"interface_name","","",66,{"o":{"n":"str"}}],[11,"supported_version","","",66,{"o":{"n":"u32"}}],[11,"version","","",66,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",66,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",66,{"i":[{"n":"self"},{"n":"zwptabletmanagerv2"}],"o":{"n":"bool"}}],[11,"set_user_data","","",66,null],[11,"get_user_data","","",66,null],[11,"clone_unchecked","","",66,{"i":[{"n":"self"}],"o":{"n":"zwptabletmanagerv2"}}],[11,"get_tablet_seat","","get the tablet seat",66,{"i":[{"n":"self"},{"n":"wlseat"}],"o":{"g":["zwptabletseatv2"],"n":"requestresult"}}],[11,"destroy","","release the memory for the tablet manager object",66,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2","",67,null],[11,"from_ptr_new","","",67,null],[11,"from_ptr_initialized","","",67,null],[11,"interface_ptr","","",67,null],[11,"interface_name","","",67,{"o":{"n":"str"}}],[11,"supported_version","","",67,{"o":{"n":"u32"}}],[11,"version","","",67,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",67,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",67,{"i":[{"n":"self"},{"n":"zwptabletseatv2"}],"o":{"n":"bool"}}],[11,"set_user_data","","",67,null],[11,"get_user_data","","",67,null],[11,"clone_unchecked","","",67,{"i":[{"n":"self"}],"o":{"n":"zwptabletseatv2"}}],[11,"__dispatch_msg","","",67,null],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",52,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","release the memory for the tablet seat object",67,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","",68,null],[11,"from_ptr_new","","",68,null],[11,"from_ptr_initialized","","",68,null],[11,"interface_ptr","","",68,null],[11,"interface_name","","",68,{"o":{"n":"str"}}],[11,"supported_version","","",68,{"o":{"n":"u32"}}],[11,"version","","",68,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",68,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",68,{"i":[{"n":"self"},{"n":"zwptablettoolv2"}],"o":{"n":"bool"}}],[11,"set_user_data","","",68,null],[11,"get_user_data","","",68,null],[11,"clone_unchecked","","",68,{"i":[{"n":"self"}],"o":{"n":"zwptablettoolv2"}}],[11,"__dispatch_msg","","",68,null],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"type"}}],[11,"fmt","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",54,{"i":[{"n":"self"},{"n":"type"}],"o":{"n":"bool"}}],[11,"from_raw","","",54,{"i":[{"n":"u32"}],"o":{"g":["type"],"n":"option"}}],[11,"to_raw","","",54,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"capability"}}],[11,"fmt","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",55,{"i":[{"n":"self"},{"n":"capability"}],"o":{"n":"bool"}}],[11,"from_raw","","",55,{"i":[{"n":"u32"}],"o":{"g":["capability"],"n":"option"}}],[11,"to_raw","","",55,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"buttonstate"}}],[11,"fmt","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",56,{"i":[{"n":"self"},{"n":"buttonstate"}],"o":{"n":"bool"}}],[11,"from_raw","","",56,{"i":[{"n":"u32"}],"o":{"g":["buttonstate"],"n":"option"}}],[11,"to_raw","","",56,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",57,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_raw","","",57,{"i":[{"n":"u32"}],"o":{"g":["error"],"n":"option"}}],[11,"to_raw","","",57,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",53,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"set_cursor","","set the tablet tool's surface",68,{"i":[{"n":"self"},{"n":"u32"},{"g":["wlsurface"],"n":"option"},{"n":"i32"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"destroy","","destroy the tool object",68,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_v2","",69,null],[11,"from_ptr_new","","",69,null],[11,"from_ptr_initialized","","",69,null],[11,"interface_ptr","","",69,null],[11,"interface_name","","",69,{"o":{"n":"str"}}],[11,"supported_version","","",69,{"o":{"n":"u32"}}],[11,"version","","",69,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",69,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",69,{"i":[{"n":"self"},{"n":"zwptabletv2"}],"o":{"n":"bool"}}],[11,"set_user_data","","",69,null],[11,"get_user_data","","",69,null],[11,"clone_unchecked","","",69,{"i":[{"n":"self"}],"o":{"n":"zwptabletv2"}}],[11,"__dispatch_msg","","",69,null],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",58,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","destroy the tablet object",69,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2","",70,null],[11,"from_ptr_new","","",70,null],[11,"from_ptr_initialized","","",70,null],[11,"interface_ptr","","",70,null],[11,"interface_name","","",70,{"o":{"n":"str"}}],[11,"supported_version","","",70,{"o":{"n":"u32"}}],[11,"version","","",70,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",70,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",70,{"i":[{"n":"self"},{"n":"zwptabletpadringv2"}],"o":{"n":"bool"}}],[11,"set_user_data","","",70,null],[11,"get_user_data","","",70,null],[11,"clone_unchecked","","",70,{"i":[{"n":"self"}],"o":{"n":"zwptabletpadringv2"}}],[11,"__dispatch_msg","","",70,null],[11,"clone","","",60,{"i":[{"n":"self"}],"o":{"n":"source"}}],[11,"fmt","","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",60,{"i":[{"n":"self"},{"n":"source"}],"o":{"n":"bool"}}],[11,"from_raw","","",60,{"i":[{"n":"u32"}],"o":{"g":["source"],"n":"option"}}],[11,"to_raw","","",60,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",59,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",59,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"set_feedback","","set compositor feedback",70,{"i":[{"n":"self"},{"n":"string"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"destroy","","destroy the ring object",70,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2","",71,null],[11,"from_ptr_new","","",71,null],[11,"from_ptr_initialized","","",71,null],[11,"interface_ptr","","",71,null],[11,"interface_name","","",71,{"o":{"n":"str"}}],[11,"supported_version","","",71,{"o":{"n":"u32"}}],[11,"version","","",71,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",71,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",71,{"i":[{"n":"self"},{"n":"zwptabletpadstripv2"}],"o":{"n":"bool"}}],[11,"set_user_data","","",71,null],[11,"get_user_data","","",71,null],[11,"clone_unchecked","","",71,{"i":[{"n":"self"}],"o":{"n":"zwptabletpadstripv2"}}],[11,"__dispatch_msg","","",71,null],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"source"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",62,{"i":[{"n":"self"},{"n":"source"}],"o":{"n":"bool"}}],[11,"from_raw","","",62,{"i":[{"n":"u32"}],"o":{"g":["source"],"n":"option"}}],[11,"to_raw","","",62,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",61,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",61,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"set_feedback","","set compositor feedback",71,{"i":[{"n":"self"},{"n":"string"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"destroy","","destroy the strip object",71,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2","",72,null],[11,"from_ptr_new","","",72,null],[11,"from_ptr_initialized","","",72,null],[11,"interface_ptr","","",72,null],[11,"interface_name","","",72,{"o":{"n":"str"}}],[11,"supported_version","","",72,{"o":{"n":"u32"}}],[11,"version","","",72,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",72,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",72,{"i":[{"n":"self"},{"n":"zwptabletpadgroupv2"}],"o":{"n":"bool"}}],[11,"set_user_data","","",72,null],[11,"get_user_data","","",72,null],[11,"clone_unchecked","","",72,{"i":[{"n":"self"}],"o":{"n":"zwptabletpadgroupv2"}}],[11,"__dispatch_msg","","",72,null],[11,"clone","","",63,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",63,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","destroy the pad object",72,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","",73,null],[11,"from_ptr_new","","",73,null],[11,"from_ptr_initialized","","",73,null],[11,"interface_ptr","","",73,null],[11,"interface_name","","",73,{"o":{"n":"str"}}],[11,"supported_version","","",73,{"o":{"n":"u32"}}],[11,"version","","",73,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",73,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",73,{"i":[{"n":"self"},{"n":"zwptabletpadv2"}],"o":{"n":"bool"}}],[11,"set_user_data","","",73,null],[11,"get_user_data","","",73,null],[11,"clone_unchecked","","",73,{"i":[{"n":"self"}],"o":{"n":"zwptabletpadv2"}}],[11,"__dispatch_msg","","",73,null],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"buttonstate"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",65,{"i":[{"n":"self"},{"n":"buttonstate"}],"o":{"n":"bool"}}],[11,"from_raw","","",65,{"i":[{"n":"u32"}],"o":{"g":["buttonstate"],"n":"option"}}],[11,"to_raw","","",65,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",64,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"set_feedback","","set compositor feedback",73,{"i":[{"n":"self"},{"n":"u32"},{"n":"string"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"destroy","","destroy the pad object",73,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[0,"text_input","wayland_protocols::unstable","Text input protocol",null,null],[0,"v1","wayland_protocols::unstable::text_input","",null,null],[0,"client","wayland_protocols::unstable::text_input::v1","Client-side API of this protocol",null,null],[0,"zwp_text_input_v1","wayland_protocols::unstable::text_input::v1::client","text input",null,null],[3,"ZwpTextInputV1","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","",null,null],[3,"Implementation","","",null,null],[12,"enter","","enter event",74,null],[12,"leave","","leave event",74,null],[12,"modifiers_map","","modifiers map",74,null],[12,"input_panel_state","","state of the input panel",74,null],[12,"preedit_string","","pre-edit",74,null],[12,"preedit_styling","","pre-edit styling",74,null],[12,"preedit_cursor","","pre-edit cursor",74,null],[12,"commit_string","","commit",74,null],[12,"cursor_position","","set cursor to new position",74,null],[12,"delete_surrounding_text","","delete surrounding text",74,null],[12,"keysym","","keysym",74,null],[12,"language","","language",74,null],[12,"text_direction","","text direction",74,null],[4,"ContentHint","","content hint",null,null],[13,"None","","no special behaviour",75,null],[13,"Default","","auto completion, correction and capitalization",75,null],[13,"Password","","hidden and sensitive text",75,null],[13,"AutoCompletion","","suggest word completions",75,null],[13,"AutoCorrection","","suggest word corrections",75,null],[13,"AutoCapitalization","","switch to uppercase letters at the start of a sentence",75,null],[13,"Lowercase","","prefer lowercase letters",75,null],[13,"Uppercase","","prefer uppercase letters",75,null],[13,"Titlecase","","prefer casing for titles and headings (can be language dependent)",75,null],[13,"HiddenText","","characters should be hidden",75,null],[13,"SensitiveData","","typed text should not be stored",75,null],[13,"Latin","","just latin characters should be entered",75,null],[13,"Multiline","","the text input is multiline",75,null],[4,"ContentPurpose","","content purpose",null,null],[13,"Normal","","default input, allowing all characters",76,null],[13,"Alpha","","allow only alphabetic characters",76,null],[13,"Digits","","allow only digits",76,null],[13,"Number","","input a number (including decimal separator and sign)",76,null],[13,"Phone","","input a phone number",76,null],[13,"Url","","input an URL",76,null],[13,"Email","","input an email address",76,null],[13,"Name","","input a name of a person",76,null],[13,"Password","","input a password (combine with password or sensitive_data hint)",76,null],[13,"Date","","input a date",76,null],[13,"Time","","input a time",76,null],[13,"Datetime","","input a date and time",76,null],[13,"Terminal","","input for a terminal",76,null],[4,"PreeditStyle","","",null,null],[13,"Default","","default style for composing text",77,null],[13,"None","","style should be the same as in non-composing text",77,null],[13,"Active","","",77,null],[13,"Inactive","","",77,null],[13,"Highlight","","",77,null],[13,"Underline","","",77,null],[13,"Selection","","",77,null],[13,"Incorrect","","",77,null],[4,"TextDirection","","",null,null],[13,"Auto","","automatic text direction based on text and language",78,null],[13,"Ltr","","left-to-right",78,null],[13,"Rtl","","right-to-left",78,null],[0,"zwp_text_input_manager_v1","wayland_protocols::unstable::text_input::v1::client","text input manager",null,null],[3,"ZwpTextInputManagerV1","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_manager_v1","",null,null],[11,"ptr","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","",79,null],[11,"from_ptr_new","","",79,null],[11,"from_ptr_initialized","","",79,null],[11,"interface_ptr","","",79,null],[11,"interface_name","","",79,{"o":{"n":"str"}}],[11,"supported_version","","",79,{"o":{"n":"u32"}}],[11,"version","","",79,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",79,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",79,{"i":[{"n":"self"},{"n":"zwptextinputv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",79,null],[11,"get_user_data","","",79,null],[11,"clone_unchecked","","",79,{"i":[{"n":"self"}],"o":{"n":"zwptextinputv1"}}],[11,"__dispatch_msg","","",79,null],[11,"clone","","",75,{"i":[{"n":"self"}],"o":{"n":"contenthint"}}],[11,"fmt","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",75,{"i":[{"n":"self"},{"n":"contenthint"}],"o":{"n":"bool"}}],[11,"from_raw","","",75,{"i":[{"n":"u32"}],"o":{"g":["contenthint"],"n":"option"}}],[11,"to_raw","","",75,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",76,{"i":[{"n":"self"}],"o":{"n":"contentpurpose"}}],[11,"fmt","","",76,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",76,{"i":[{"n":"self"},{"n":"contentpurpose"}],"o":{"n":"bool"}}],[11,"from_raw","","",76,{"i":[{"n":"u32"}],"o":{"g":["contentpurpose"],"n":"option"}}],[11,"to_raw","","",76,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",77,{"i":[{"n":"self"}],"o":{"n":"preeditstyle"}}],[11,"fmt","","",77,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",77,{"i":[{"n":"self"},{"n":"preeditstyle"}],"o":{"n":"bool"}}],[11,"from_raw","","",77,{"i":[{"n":"u32"}],"o":{"g":["preeditstyle"],"n":"option"}}],[11,"to_raw","","",77,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"textdirection"}}],[11,"fmt","","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",78,{"i":[{"n":"self"},{"n":"textdirection"}],"o":{"n":"bool"}}],[11,"from_raw","","",78,{"i":[{"n":"u32"}],"o":{"g":["textdirection"],"n":"option"}}],[11,"to_raw","","",78,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",74,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"activate","","request activation",79,null],[11,"deactivate","","request deactivation",79,null],[11,"show_input_panel","","show input panels",79,null],[11,"hide_input_panel","","hide input panels",79,null],[11,"reset","","reset",79,null],[11,"set_surrounding_text","","sets the surrounding text",79,null],[11,"set_content_type","","set content purpose and hint",79,null],[11,"set_cursor_rectangle","","",79,null],[11,"set_preferred_language","","sets preferred language",79,null],[11,"commit_state","","",79,null],[11,"invoke_action","","",79,null],[11,"ptr","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_manager_v1","",80,null],[11,"from_ptr_new","","",80,null],[11,"from_ptr_initialized","","",80,null],[11,"interface_ptr","","",80,null],[11,"interface_name","","",80,{"o":{"n":"str"}}],[11,"supported_version","","",80,{"o":{"n":"u32"}}],[11,"version","","",80,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",80,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",80,{"i":[{"n":"self"},{"n":"zwptextinputmanagerv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",80,null],[11,"get_user_data","","",80,null],[11,"clone_unchecked","","",80,{"i":[{"n":"self"}],"o":{"n":"zwptextinputmanagerv1"}}],[11,"create_text_input","","create text input",80,{"i":[{"n":"self"}],"o":{"n":"zwptextinputv1"}}],[0,"xdg_foreign","wayland_protocols::unstable","Protocol for exporting xdg surface handles",null,null],[0,"v1","wayland_protocols::unstable::xdg_foreign","",null,null],[0,"client","wayland_protocols::unstable::xdg_foreign::v1","Client-side API of this protocol",null,null],[0,"zxdg_exporter_v1","wayland_protocols::unstable::xdg_foreign::v1::client","interface for exporting surfaces",null,null],[3,"ZxdgExporterV1","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_exporter_v1","",null,null],[0,"zxdg_importer_v1","wayland_protocols::unstable::xdg_foreign::v1::client","interface for importing surfaces",null,null],[3,"ZxdgImporterV1","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_importer_v1","",null,null],[0,"zxdg_exported_v1","wayland_protocols::unstable::xdg_foreign::v1::client","an exported surface handle",null,null],[3,"ZxdgExportedV1","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_exported_v1","",null,null],[3,"Implementation","","",null,null],[12,"handle","","the exported surface handle",81,null],[0,"zxdg_imported_v1","wayland_protocols::unstable::xdg_foreign::v1::client","an imported surface handle",null,null],[3,"ZxdgImportedV1","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_imported_v1","",null,null],[3,"Implementation","","",null,null],[12,"destroyed","","the imported surface handle has been destroyed",82,null],[11,"ptr","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_exporter_v1","",83,null],[11,"from_ptr_new","","",83,null],[11,"from_ptr_initialized","","",83,null],[11,"interface_ptr","","",83,null],[11,"interface_name","","",83,{"o":{"n":"str"}}],[11,"supported_version","","",83,{"o":{"n":"u32"}}],[11,"version","","",83,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",83,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",83,{"i":[{"n":"self"},{"n":"zxdgexporterv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",83,null],[11,"get_user_data","","",83,null],[11,"clone_unchecked","","",83,{"i":[{"n":"self"}],"o":{"n":"zxdgexporterv1"}}],[11,"destroy","","destroy the xdg_exporter object",83,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"export","","export a surface",83,{"i":[{"n":"self"},{"n":"wlsurface"}],"o":{"g":["zxdgexportedv1"],"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_importer_v1","",84,null],[11,"from_ptr_new","","",84,null],[11,"from_ptr_initialized","","",84,null],[11,"interface_ptr","","",84,null],[11,"interface_name","","",84,{"o":{"n":"str"}}],[11,"supported_version","","",84,{"o":{"n":"u32"}}],[11,"version","","",84,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",84,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",84,{"i":[{"n":"self"},{"n":"zxdgimporterv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",84,null],[11,"get_user_data","","",84,null],[11,"clone_unchecked","","",84,{"i":[{"n":"self"}],"o":{"n":"zxdgimporterv1"}}],[11,"destroy","","destroy the xdg_importer object",84,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"import","","import a surface",84,{"i":[{"n":"self"},{"n":"string"}],"o":{"g":["zxdgimportedv1"],"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_exported_v1","",85,null],[11,"from_ptr_new","","",85,null],[11,"from_ptr_initialized","","",85,null],[11,"interface_ptr","","",85,null],[11,"interface_name","","",85,{"o":{"n":"str"}}],[11,"supported_version","","",85,{"o":{"n":"u32"}}],[11,"version","","",85,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",85,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",85,{"i":[{"n":"self"},{"n":"zxdgexportedv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",85,null],[11,"get_user_data","","",85,null],[11,"clone_unchecked","","",85,{"i":[{"n":"self"}],"o":{"n":"zxdgexportedv1"}}],[11,"__dispatch_msg","","",85,null],[11,"clone","","",81,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",81,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","unexport the exported surface",85,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_imported_v1","",86,null],[11,"from_ptr_new","","",86,null],[11,"from_ptr_initialized","","",86,null],[11,"interface_ptr","","",86,null],[11,"interface_name","","",86,{"o":{"n":"str"}}],[11,"supported_version","","",86,{"o":{"n":"u32"}}],[11,"version","","",86,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",86,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",86,{"i":[{"n":"self"},{"n":"zxdgimportedv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",86,null],[11,"get_user_data","","",86,null],[11,"clone_unchecked","","",86,{"i":[{"n":"self"}],"o":{"n":"zxdgimportedv1"}}],[11,"__dispatch_msg","","",86,null],[11,"clone","","",82,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",82,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","destroy the xdg_imported object",86,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"set_parent_of","","set as the parent of some surface",86,{"i":[{"n":"self"},{"n":"wlsurface"}],"o":{"n":"requestresult"}}],[0,"v2","wayland_protocols::unstable::xdg_foreign","",null,null],[0,"client","wayland_protocols::unstable::xdg_foreign::v2","Client-side API of this protocol",null,null],[0,"zxdg_exporter_v2","wayland_protocols::unstable::xdg_foreign::v2::client","interface for exporting surfaces",null,null],[3,"ZxdgExporterV2","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_exporter_v2","",null,null],[0,"zxdg_importer_v2","wayland_protocols::unstable::xdg_foreign::v2::client","interface for importing surfaces",null,null],[3,"ZxdgImporterV2","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_importer_v2","",null,null],[0,"zxdg_exported_v2","wayland_protocols::unstable::xdg_foreign::v2::client","an exported surface handle",null,null],[3,"ZxdgExportedV2","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_exported_v2","",null,null],[3,"Implementation","","",null,null],[12,"handle","","the exported surface handle",87,null],[0,"zxdg_imported_v2","wayland_protocols::unstable::xdg_foreign::v2::client","an imported surface handle",null,null],[3,"ZxdgImportedV2","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_imported_v2","",null,null],[3,"Implementation","","",null,null],[12,"destroyed","","the imported surface handle has been destroyed",88,null],[11,"ptr","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_exporter_v2","",89,null],[11,"from_ptr_new","","",89,null],[11,"from_ptr_initialized","","",89,null],[11,"interface_ptr","","",89,null],[11,"interface_name","","",89,{"o":{"n":"str"}}],[11,"supported_version","","",89,{"o":{"n":"u32"}}],[11,"version","","",89,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",89,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",89,{"i":[{"n":"self"},{"n":"zxdgexporterv2"}],"o":{"n":"bool"}}],[11,"set_user_data","","",89,null],[11,"get_user_data","","",89,null],[11,"clone_unchecked","","",89,{"i":[{"n":"self"}],"o":{"n":"zxdgexporterv2"}}],[11,"destroy","","destroy the xdg_exporter object",89,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"export_toplevel","","export a toplevel surface",89,{"i":[{"n":"self"},{"n":"wlsurface"}],"o":{"g":["zxdgexportedv2"],"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_importer_v2","",90,null],[11,"from_ptr_new","","",90,null],[11,"from_ptr_initialized","","",90,null],[11,"interface_ptr","","",90,null],[11,"interface_name","","",90,{"o":{"n":"str"}}],[11,"supported_version","","",90,{"o":{"n":"u32"}}],[11,"version","","",90,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",90,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",90,{"i":[{"n":"self"},{"n":"zxdgimporterv2"}],"o":{"n":"bool"}}],[11,"set_user_data","","",90,null],[11,"get_user_data","","",90,null],[11,"clone_unchecked","","",90,{"i":[{"n":"self"}],"o":{"n":"zxdgimporterv2"}}],[11,"destroy","","destroy the xdg_importer object",90,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"import_toplevel","","import a toplevel surface",90,{"i":[{"n":"self"},{"n":"string"}],"o":{"g":["zxdgimportedv2"],"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_exported_v2","",91,null],[11,"from_ptr_new","","",91,null],[11,"from_ptr_initialized","","",91,null],[11,"interface_ptr","","",91,null],[11,"interface_name","","",91,{"o":{"n":"str"}}],[11,"supported_version","","",91,{"o":{"n":"u32"}}],[11,"version","","",91,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",91,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",91,{"i":[{"n":"self"},{"n":"zxdgexportedv2"}],"o":{"n":"bool"}}],[11,"set_user_data","","",91,null],[11,"get_user_data","","",91,null],[11,"clone_unchecked","","",91,{"i":[{"n":"self"}],"o":{"n":"zxdgexportedv2"}}],[11,"__dispatch_msg","","",91,null],[11,"clone","","",87,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",87,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","unexport the exported surface",91,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_imported_v2","",92,null],[11,"from_ptr_new","","",92,null],[11,"from_ptr_initialized","","",92,null],[11,"interface_ptr","","",92,null],[11,"interface_name","","",92,{"o":{"n":"str"}}],[11,"supported_version","","",92,{"o":{"n":"u32"}}],[11,"version","","",92,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",92,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",92,{"i":[{"n":"self"},{"n":"zxdgimportedv2"}],"o":{"n":"bool"}}],[11,"set_user_data","","",92,null],[11,"get_user_data","","",92,null],[11,"clone_unchecked","","",92,{"i":[{"n":"self"}],"o":{"n":"zxdgimportedv2"}}],[11,"__dispatch_msg","","",92,null],[11,"clone","","",88,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",88,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","destroy the xdg_imported object",92,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"set_parent_of","","set as the parent of some surface",92,{"i":[{"n":"self"},{"n":"wlsurface"}],"o":{"n":"requestresult"}}],[0,"xdg_output","wayland_protocols::unstable","Protocol to describe output regions",null,null],[0,"v1","wayland_protocols::unstable::xdg_output","",null,null],[0,"client","wayland_protocols::unstable::xdg_output::v1","Client-side API of this protocol",null,null],[0,"zxdg_output_manager_v1","wayland_protocols::unstable::xdg_output::v1::client","manage xdg_output objects",null,null],[3,"ZxdgOutputManagerV1","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_manager_v1","",null,null],[0,"zxdg_output_v1","wayland_protocols::unstable::xdg_output::v1::client","compositor logical output region",null,null],[3,"ZxdgOutputV1","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_v1","",null,null],[3,"Implementation","","",null,null],[12,"logical_position","","position of the output within the global compositor space",93,null],[12,"logical_size","","size of the output in the global compositor space",93,null],[12,"done","","all information about the output have been sent",93,null],[11,"ptr","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_manager_v1","",94,null],[11,"from_ptr_new","","",94,null],[11,"from_ptr_initialized","","",94,null],[11,"interface_ptr","","",94,null],[11,"interface_name","","",94,{"o":{"n":"str"}}],[11,"supported_version","","",94,{"o":{"n":"u32"}}],[11,"version","","",94,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",94,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",94,{"i":[{"n":"self"},{"n":"zxdgoutputmanagerv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",94,null],[11,"get_user_data","","",94,null],[11,"clone_unchecked","","",94,{"i":[{"n":"self"}],"o":{"n":"zxdgoutputmanagerv1"}}],[11,"destroy","","destroy the xdg_output_manager object",94,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"get_xdg_output","","create an xdg output from a wl_output",94,{"i":[{"n":"self"},{"n":"wloutput"}],"o":{"g":["zxdgoutputv1"],"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_v1","",95,null],[11,"from_ptr_new","","",95,null],[11,"from_ptr_initialized","","",95,null],[11,"interface_ptr","","",95,null],[11,"interface_name","","",95,{"o":{"n":"str"}}],[11,"supported_version","","",95,{"o":{"n":"u32"}}],[11,"version","","",95,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",95,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",95,{"i":[{"n":"self"},{"n":"zxdgoutputv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",95,null],[11,"get_user_data","","",95,null],[11,"clone_unchecked","","",95,{"i":[{"n":"self"}],"o":{"n":"zxdgoutputv1"}}],[11,"__dispatch_msg","","",95,null],[11,"clone","","",93,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",93,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","destroy the xdg_output object",95,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[0,"xdg_shell","wayland_protocols::unstable","XDG Shell protocol",null,null],[0,"v5","wayland_protocols::unstable::xdg_shell","",null,null],[0,"client","wayland_protocols::unstable::xdg_shell::v5","Client-side API of this protocol",null,null],[0,"xdg_shell","wayland_protocols::unstable::xdg_shell::v5::client","create desktop-style surfaces",null,null],[3,"XdgShell","wayland_protocols::unstable::xdg_shell::v5::client::xdg_shell","",null,null],[3,"Implementation","","",null,null],[12,"ping","","check if the client is alive",96,null],[4,"Version","","latest protocol version",null,null],[13,"Current","","Always the latest version",97,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",98,null],[13,"DefunctSurfaces","","xdg_shell was destroyed before children",98,null],[13,"NotTheTopmostPopup","","the client tried to map or destroy a non-topmost popup",98,null],[13,"InvalidPopupParent","","the client specified an invalid popup parent surface",98,null],[0,"xdg_surface","wayland_protocols::unstable::xdg_shell::v5::client","A desktop window",null,null],[3,"XdgSurface","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface","",null,null],[3,"Implementation","","",null,null],[12,"configure","","suggest a surface change",99,null],[12,"close","","surface wants to be closed",99,null],[4,"ResizeEdge","","edge values for resizing",null,null],[13,"None","","",100,null],[13,"Top","","",100,null],[13,"Bottom","","",100,null],[13,"Left","","",100,null],[13,"TopLeft","","",100,null],[13,"BottomLeft","","",100,null],[13,"Right","","",100,null],[13,"TopRight","","",100,null],[13,"BottomRight","","",100,null],[4,"State","","types of state on the surface",null,null],[13,"Maximized","","the surface is maximized",101,null],[13,"Fullscreen","","the surface is fullscreen",101,null],[13,"Resizing","","the surface is being resized",101,null],[13,"Activated","","the surface is now activated",101,null],[0,"xdg_popup","wayland_protocols::unstable::xdg_shell::v5::client","short-lived, popup surfaces for menus",null,null],[3,"XdgPopup","wayland_protocols::unstable::xdg_shell::v5::client::xdg_popup","",null,null],[3,"Implementation","","",null,null],[12,"popup_done","","popup interaction is done",102,null],[11,"ptr","wayland_protocols::unstable::xdg_shell::v5::client::xdg_shell","",103,null],[11,"from_ptr_new","","",103,null],[11,"from_ptr_initialized","","",103,null],[11,"interface_ptr","","",103,null],[11,"interface_name","","",103,{"o":{"n":"str"}}],[11,"supported_version","","",103,{"o":{"n":"u32"}}],[11,"version","","",103,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",103,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",103,{"i":[{"n":"self"},{"n":"xdgshell"}],"o":{"n":"bool"}}],[11,"set_user_data","","",103,null],[11,"get_user_data","","",103,null],[11,"clone_unchecked","","",103,{"i":[{"n":"self"}],"o":{"n":"xdgshell"}}],[11,"__dispatch_msg","","",103,null],[11,"clone","","",97,{"i":[{"n":"self"}],"o":{"n":"version"}}],[11,"fmt","","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",97,{"i":[{"n":"self"},{"n":"version"}],"o":{"n":"bool"}}],[11,"from_raw","","",97,{"i":[{"n":"u32"}],"o":{"g":["version"],"n":"option"}}],[11,"to_raw","","",97,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",98,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",98,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_raw","","",98,{"i":[{"n":"u32"}],"o":{"g":["error"],"n":"option"}}],[11,"to_raw","","",98,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",96,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",96,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","destroy xdg_shell",103,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"use_unstable_version","","enable use of this unstable version",103,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"get_xdg_surface","","create a shell surface from a surface",103,{"i":[{"n":"self"},{"n":"wlsurface"}],"o":{"g":["xdgsurface"],"n":"requestresult"}}],[11,"get_xdg_popup","","create a popup for a surface",103,{"i":[{"n":"self"},{"n":"wlsurface"},{"n":"wlsurface"},{"n":"wlseat"},{"n":"u32"},{"n":"i32"},{"n":"i32"}],"o":{"g":["xdgpopup"],"n":"requestresult"}}],[11,"pong","","respond to a ping event",103,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface","",104,null],[11,"from_ptr_new","","",104,null],[11,"from_ptr_initialized","","",104,null],[11,"interface_ptr","","",104,null],[11,"interface_name","","",104,{"o":{"n":"str"}}],[11,"supported_version","","",104,{"o":{"n":"u32"}}],[11,"version","","",104,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",104,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",104,{"i":[{"n":"self"},{"n":"xdgsurface"}],"o":{"n":"bool"}}],[11,"set_user_data","","",104,null],[11,"get_user_data","","",104,null],[11,"clone_unchecked","","",104,{"i":[{"n":"self"}],"o":{"n":"xdgsurface"}}],[11,"__dispatch_msg","","",104,null],[11,"clone","","",100,{"i":[{"n":"self"}],"o":{"n":"resizeedge"}}],[11,"fmt","","",100,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",100,{"i":[{"n":"self"},{"n":"resizeedge"}],"o":{"n":"bool"}}],[11,"from_raw","","",100,{"i":[{"n":"u32"}],"o":{"g":["resizeedge"],"n":"option"}}],[11,"to_raw","","",100,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",101,{"i":[{"n":"self"}],"o":{"n":"state"}}],[11,"fmt","","",101,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",101,{"i":[{"n":"self"},{"n":"state"}],"o":{"n":"bool"}}],[11,"from_raw","","",101,{"i":[{"n":"u32"}],"o":{"g":["state"],"n":"option"}}],[11,"to_raw","","",101,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",99,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",99,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","Destroy the xdg_surface",104,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"set_parent","","set the parent of this surface",104,{"i":[{"n":"self"},{"g":["xdgsurface"],"n":"option"}],"o":{"n":"requestresult"}}],[11,"set_title","","set surface title",104,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"requestresult"}}],[11,"set_app_id","","set application ID",104,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"requestresult"}}],[11,"show_window_menu","","show the window menu",104,{"i":[{"n":"self"},{"n":"wlseat"},{"n":"u32"},{"n":"i32"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"_move","","start an interactive move",104,{"i":[{"n":"self"},{"n":"wlseat"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"resize","","start an interactive resize",104,{"i":[{"n":"self"},{"n":"wlseat"},{"n":"u32"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"ack_configure","","ack a configure event",104,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"set_window_geometry","","set the new window geometry",104,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"set_maximized","","maximize the window",104,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"unset_maximized","","unmaximize the window",104,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"set_fullscreen","","set the window as fullscreen on a monitor",104,{"i":[{"n":"self"},{"g":["wloutput"],"n":"option"}],"o":{"n":"requestresult"}}],[11,"unset_fullscreen","","",104,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"set_minimized","","set the window as minimized",104,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::xdg_shell::v5::client::xdg_popup","",105,null],[11,"from_ptr_new","","",105,null],[11,"from_ptr_initialized","","",105,null],[11,"interface_ptr","","",105,null],[11,"interface_name","","",105,{"o":{"n":"str"}}],[11,"supported_version","","",105,{"o":{"n":"u32"}}],[11,"version","","",105,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",105,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",105,{"i":[{"n":"self"},{"n":"xdgpopup"}],"o":{"n":"bool"}}],[11,"set_user_data","","",105,null],[11,"get_user_data","","",105,null],[11,"clone_unchecked","","",105,{"i":[{"n":"self"}],"o":{"n":"xdgpopup"}}],[11,"__dispatch_msg","","",105,null],[11,"clone","","",102,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",102,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","remove xdg_popup interface",105,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[0,"v6","wayland_protocols::unstable::xdg_shell","",null,null],[0,"client","wayland_protocols::unstable::xdg_shell::v6","Client-side API of this protocol",null,null],[0,"zxdg_shell_v6","wayland_protocols::unstable::xdg_shell::v6::client","create desktop-style surfaces",null,null],[3,"ZxdgShellV6","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6","",null,null],[3,"Implementation","","",null,null],[12,"ping","","check if the client is alive",106,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",107,null],[13,"DefunctSurfaces","","xdg_shell was destroyed before children",107,null],[13,"NotTheTopmostPopup","","the client tried to map or destroy a non-topmost popup",107,null],[13,"InvalidPopupParent","","the client specified an invalid popup parent surface",107,null],[13,"InvalidSurfaceState","","the client provided an invalid surface state",107,null],[13,"InvalidPositioner","","the client provided an invalid positioner",107,null],[0,"zxdg_positioner_v6","wayland_protocols::unstable::xdg_shell::v6::client","child surface positioner",null,null],[3,"ZxdgPositionerV6","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",null,null],[3,"Anchor","","",null,null],[3,"Gravity","","",null,null],[3,"ConstraintAdjustment","","constraint adjustments",null,null],[4,"Error","","",null,null],[13,"InvalidInput","","invalid input provided",108,null],[0,"zxdg_surface_v6","wayland_protocols::unstable::xdg_shell::v6::client","desktop user interface surface base interface",null,null],[3,"ZxdgSurfaceV6","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","",null,null],[3,"Implementation","","",null,null],[12,"configure","","suggest a surface change",109,null],[4,"Error","","",null,null],[13,"NotConstructed","","",110,null],[13,"AlreadyConstructed","","",110,null],[13,"UnconfiguredBuffer","","",110,null],[0,"zxdg_toplevel_v6","wayland_protocols::unstable::xdg_shell::v6::client","toplevel surface",null,null],[3,"ZxdgToplevelV6","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","",null,null],[3,"Implementation","","",null,null],[12,"configure","","suggest a surface change",111,null],[12,"close","","surface wants to be closed",111,null],[4,"ResizeEdge","","edge values for resizing",null,null],[13,"None","","",112,null],[13,"Top","","",112,null],[13,"Bottom","","",112,null],[13,"Left","","",112,null],[13,"TopLeft","","",112,null],[13,"BottomLeft","","",112,null],[13,"Right","","",112,null],[13,"TopRight","","",112,null],[13,"BottomRight","","",112,null],[4,"State","","types of state on the surface",null,null],[13,"Maximized","","the surface is maximized",113,null],[13,"Fullscreen","","the surface is fullscreen",113,null],[13,"Resizing","","the surface is being resized",113,null],[13,"Activated","","the surface is now activated",113,null],[0,"zxdg_popup_v6","wayland_protocols::unstable::xdg_shell::v6::client","short-lived, popup surfaces for menus",null,null],[3,"ZxdgPopupV6","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_popup_v6","",null,null],[3,"Implementation","","",null,null],[12,"configure","","configure the popup surface",114,null],[12,"popup_done","","popup interaction is done",114,null],[4,"Error","","",null,null],[13,"InvalidGrab","","tried to grab after being mapped",115,null],[11,"ptr","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6","",116,null],[11,"from_ptr_new","","",116,null],[11,"from_ptr_initialized","","",116,null],[11,"interface_ptr","","",116,null],[11,"interface_name","","",116,{"o":{"n":"str"}}],[11,"supported_version","","",116,{"o":{"n":"u32"}}],[11,"version","","",116,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",116,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",116,{"i":[{"n":"self"},{"n":"zxdgshellv6"}],"o":{"n":"bool"}}],[11,"set_user_data","","",116,null],[11,"get_user_data","","",116,null],[11,"clone_unchecked","","",116,{"i":[{"n":"self"}],"o":{"n":"zxdgshellv6"}}],[11,"__dispatch_msg","","",116,null],[11,"clone","","",107,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",107,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_raw","","",107,{"i":[{"n":"u32"}],"o":{"g":["error"],"n":"option"}}],[11,"to_raw","","",107,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",106,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",106,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","destroy xdg_shell",116,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"create_positioner","","create a positioner object",116,{"i":[{"n":"self"}],"o":{"g":["zxdgpositionerv6"],"n":"requestresult"}}],[11,"get_xdg_surface","","create a shell surface from a surface",116,{"i":[{"n":"self"},{"n":"wlsurface"}],"o":{"g":["zxdgsurfacev6"],"n":"requestresult"}}],[11,"pong","","respond to a ping event",116,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",117,null],[11,"from_ptr_new","","",117,null],[11,"from_ptr_initialized","","",117,null],[11,"interface_ptr","","",117,null],[11,"interface_name","","",117,{"o":{"n":"str"}}],[11,"supported_version","","",117,{"o":{"n":"u32"}}],[11,"version","","",117,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",117,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",117,{"i":[{"n":"self"},{"n":"zxdgpositionerv6"}],"o":{"n":"bool"}}],[11,"set_user_data","","",117,null],[11,"get_user_data","","",117,null],[11,"clone_unchecked","","",117,{"i":[{"n":"self"}],"o":{"n":"zxdgpositionerv6"}}],[11,"clone","","",108,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",108,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",108,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_raw","","",108,{"i":[{"n":"u32"}],"o":{"g":["error"],"n":"option"}}],[11,"to_raw","","",108,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"eq","","",118,{"i":[{"n":"self"},{"n":"anchor"}],"o":{"n":"bool"}}],[11,"ne","","",118,{"i":[{"n":"self"},{"n":"anchor"}],"o":{"n":"bool"}}],[11,"clone","","",118,{"i":[{"n":"self"}],"o":{"n":"anchor"}}],[11,"partial_cmp","","",118,{"i":[{"n":"self"},{"n":"anchor"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",118,{"i":[{"n":"self"},{"n":"anchor"}],"o":{"n":"bool"}}],[11,"le","","",118,{"i":[{"n":"self"},{"n":"anchor"}],"o":{"n":"bool"}}],[11,"gt","","",118,{"i":[{"n":"self"},{"n":"anchor"}],"o":{"n":"bool"}}],[11,"ge","","",118,{"i":[{"n":"self"},{"n":"anchor"}],"o":{"n":"bool"}}],[11,"cmp","","",118,{"i":[{"n":"self"},{"n":"anchor"}],"o":{"n":"ordering"}}],[11,"hash","","",118,null],[11,"fmt","","",118,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",118,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",118,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",118,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",118,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"None","","the center of the anchor rectangle",118,null],[18,"Top","","the top edge of the anchor rectangle",118,null],[18,"Bottom","","the bottom edge of the anchor rectangle",118,null],[18,"Left","","the left edge of the anchor rectangle",118,null],[18,"Right","","the right edge of the anchor rectangle",118,null],[11,"empty","","Returns an empty set of flags.",118,{"o":{"n":"anchor"}}],[11,"all","","Returns the set containing all flags.",118,{"o":{"n":"anchor"}}],[11,"bits","","Returns the raw value of the flags currently stored.",118,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",118,{"i":[{"n":"u32"}],"o":{"g":["anchor"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",118,{"i":[{"n":"u32"}],"o":{"n":"anchor"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",118,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",118,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",118,{"i":[{"n":"self"},{"n":"anchor"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",118,{"i":[{"n":"self"},{"n":"anchor"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",118,{"i":[{"n":"self"},{"n":"anchor"}]}],[11,"remove","","Removes the specified flags in-place.",118,{"i":[{"n":"self"},{"n":"anchor"}]}],[11,"toggle","","Toggles the specified flags in-place.",118,{"i":[{"n":"self"},{"n":"anchor"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",118,{"i":[{"n":"self"},{"n":"anchor"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",118,{"i":[{"n":"self"},{"n":"anchor"}],"o":{"n":"anchor"}}],[11,"bitor_assign","","Adds the set of flags.",118,{"i":[{"n":"self"},{"n":"anchor"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",118,{"i":[{"n":"self"},{"n":"anchor"}],"o":{"n":"anchor"}}],[11,"bitxor_assign","","Toggles the set of flags.",118,{"i":[{"n":"self"},{"n":"anchor"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",118,{"i":[{"n":"self"},{"n":"anchor"}],"o":{"n":"anchor"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",118,{"i":[{"n":"self"},{"n":"anchor"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",118,{"i":[{"n":"self"},{"n":"anchor"}],"o":{"n":"anchor"}}],[11,"sub_assign","","Disables all flags enabled in the set.",118,{"i":[{"n":"self"},{"n":"anchor"}]}],[11,"not","","Returns the complement of this set of flags.",118,{"i":[{"n":"self"}],"o":{"n":"anchor"}}],[11,"extend","","",118,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",118,{"i":[{"n":"t"}],"o":{"n":"anchor"}}],[11,"from_raw","","",118,{"i":[{"n":"u32"}],"o":{"g":["anchor"],"n":"option"}}],[11,"to_raw","","",118,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"eq","","",119,{"i":[{"n":"self"},{"n":"gravity"}],"o":{"n":"bool"}}],[11,"ne","","",119,{"i":[{"n":"self"},{"n":"gravity"}],"o":{"n":"bool"}}],[11,"clone","","",119,{"i":[{"n":"self"}],"o":{"n":"gravity"}}],[11,"partial_cmp","","",119,{"i":[{"n":"self"},{"n":"gravity"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",119,{"i":[{"n":"self"},{"n":"gravity"}],"o":{"n":"bool"}}],[11,"le","","",119,{"i":[{"n":"self"},{"n":"gravity"}],"o":{"n":"bool"}}],[11,"gt","","",119,{"i":[{"n":"self"},{"n":"gravity"}],"o":{"n":"bool"}}],[11,"ge","","",119,{"i":[{"n":"self"},{"n":"gravity"}],"o":{"n":"bool"}}],[11,"cmp","","",119,{"i":[{"n":"self"},{"n":"gravity"}],"o":{"n":"ordering"}}],[11,"hash","","",119,null],[11,"fmt","","",119,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",119,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",119,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",119,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",119,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"None","","center over the anchor edge",119,null],[18,"Top","","position above the anchor edge",119,null],[18,"Bottom","","position below the anchor edge",119,null],[18,"Left","","position to the left of the anchor edge",119,null],[18,"Right","","position to the right of the anchor edge",119,null],[11,"empty","","Returns an empty set of flags.",119,{"o":{"n":"gravity"}}],[11,"all","","Returns the set containing all flags.",119,{"o":{"n":"gravity"}}],[11,"bits","","Returns the raw value of the flags currently stored.",119,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",119,{"i":[{"n":"u32"}],"o":{"g":["gravity"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",119,{"i":[{"n":"u32"}],"o":{"n":"gravity"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",119,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",119,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",119,{"i":[{"n":"self"},{"n":"gravity"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",119,{"i":[{"n":"self"},{"n":"gravity"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",119,{"i":[{"n":"self"},{"n":"gravity"}]}],[11,"remove","","Removes the specified flags in-place.",119,{"i":[{"n":"self"},{"n":"gravity"}]}],[11,"toggle","","Toggles the specified flags in-place.",119,{"i":[{"n":"self"},{"n":"gravity"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",119,{"i":[{"n":"self"},{"n":"gravity"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",119,{"i":[{"n":"self"},{"n":"gravity"}],"o":{"n":"gravity"}}],[11,"bitor_assign","","Adds the set of flags.",119,{"i":[{"n":"self"},{"n":"gravity"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",119,{"i":[{"n":"self"},{"n":"gravity"}],"o":{"n":"gravity"}}],[11,"bitxor_assign","","Toggles the set of flags.",119,{"i":[{"n":"self"},{"n":"gravity"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",119,{"i":[{"n":"self"},{"n":"gravity"}],"o":{"n":"gravity"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",119,{"i":[{"n":"self"},{"n":"gravity"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",119,{"i":[{"n":"self"},{"n":"gravity"}],"o":{"n":"gravity"}}],[11,"sub_assign","","Disables all flags enabled in the set.",119,{"i":[{"n":"self"},{"n":"gravity"}]}],[11,"not","","Returns the complement of this set of flags.",119,{"i":[{"n":"self"}],"o":{"n":"gravity"}}],[11,"extend","","",119,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",119,{"i":[{"n":"t"}],"o":{"n":"gravity"}}],[11,"from_raw","","",119,{"i":[{"n":"u32"}],"o":{"g":["gravity"],"n":"option"}}],[11,"to_raw","","",119,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"eq","","",120,{"i":[{"n":"self"},{"n":"constraintadjustment"}],"o":{"n":"bool"}}],[11,"ne","","",120,{"i":[{"n":"self"},{"n":"constraintadjustment"}],"o":{"n":"bool"}}],[11,"clone","","",120,{"i":[{"n":"self"}],"o":{"n":"constraintadjustment"}}],[11,"partial_cmp","","",120,{"i":[{"n":"self"},{"n":"constraintadjustment"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",120,{"i":[{"n":"self"},{"n":"constraintadjustment"}],"o":{"n":"bool"}}],[11,"le","","",120,{"i":[{"n":"self"},{"n":"constraintadjustment"}],"o":{"n":"bool"}}],[11,"gt","","",120,{"i":[{"n":"self"},{"n":"constraintadjustment"}],"o":{"n":"bool"}}],[11,"ge","","",120,{"i":[{"n":"self"},{"n":"constraintadjustment"}],"o":{"n":"bool"}}],[11,"cmp","","",120,{"i":[{"n":"self"},{"n":"constraintadjustment"}],"o":{"n":"ordering"}}],[11,"hash","","",120,null],[11,"fmt","","",120,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",120,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",120,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",120,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",120,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"None","","don't move the child surface when constrained",120,null],[18,"SlideX","","move along the x axis until unconstrained",120,null],[18,"SlideY","","move along the y axis until unconstrained",120,null],[18,"FlipX","","invert the anchor and gravity on the x axis",120,null],[18,"FlipY","","invert the anchor and gravity on the y axis",120,null],[18,"ResizeX","","horizontally resize the surface",120,null],[18,"ResizeY","","vertically resize the surface",120,null],[11,"empty","","Returns an empty set of flags.",120,{"o":{"n":"constraintadjustment"}}],[11,"all","","Returns the set containing all flags.",120,{"o":{"n":"constraintadjustment"}}],[11,"bits","","Returns the raw value of the flags currently stored.",120,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",120,{"i":[{"n":"u32"}],"o":{"g":["constraintadjustment"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",120,{"i":[{"n":"u32"}],"o":{"n":"constraintadjustment"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",120,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",120,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",120,{"i":[{"n":"self"},{"n":"constraintadjustment"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",120,{"i":[{"n":"self"},{"n":"constraintadjustment"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",120,{"i":[{"n":"self"},{"n":"constraintadjustment"}]}],[11,"remove","","Removes the specified flags in-place.",120,{"i":[{"n":"self"},{"n":"constraintadjustment"}]}],[11,"toggle","","Toggles the specified flags in-place.",120,{"i":[{"n":"self"},{"n":"constraintadjustment"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",120,{"i":[{"n":"self"},{"n":"constraintadjustment"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",120,{"i":[{"n":"self"},{"n":"constraintadjustment"}],"o":{"n":"constraintadjustment"}}],[11,"bitor_assign","","Adds the set of flags.",120,{"i":[{"n":"self"},{"n":"constraintadjustment"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",120,{"i":[{"n":"self"},{"n":"constraintadjustment"}],"o":{"n":"constraintadjustment"}}],[11,"bitxor_assign","","Toggles the set of flags.",120,{"i":[{"n":"self"},{"n":"constraintadjustment"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",120,{"i":[{"n":"self"},{"n":"constraintadjustment"}],"o":{"n":"constraintadjustment"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",120,{"i":[{"n":"self"},{"n":"constraintadjustment"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",120,{"i":[{"n":"self"},{"n":"constraintadjustment"}],"o":{"n":"constraintadjustment"}}],[11,"sub_assign","","Disables all flags enabled in the set.",120,{"i":[{"n":"self"},{"n":"constraintadjustment"}]}],[11,"not","","Returns the complement of this set of flags.",120,{"i":[{"n":"self"}],"o":{"n":"constraintadjustment"}}],[11,"extend","","",120,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",120,{"i":[{"n":"t"}],"o":{"n":"constraintadjustment"}}],[11,"from_raw","","",120,{"i":[{"n":"u32"}],"o":{"g":["constraintadjustment"],"n":"option"}}],[11,"to_raw","","",120,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"destroy","","destroy the xdg_positioner object",117,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"set_size","","set the size of the to-be positioned rectangle",117,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"set_anchor_rect","","set the anchor rectangle within the parent surface",117,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"set_anchor","","set anchor rectangle anchor edges",117,{"i":[{"n":"self"},{"n":"anchor"}],"o":{"n":"requestresult"}}],[11,"set_gravity","","set child surface gravity",117,{"i":[{"n":"self"},{"n":"gravity"}],"o":{"n":"requestresult"}}],[11,"set_constraint_adjustment","","set the adjustment to be done when constrained",117,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"set_offset","","set surface position offset",117,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","",121,null],[11,"from_ptr_new","","",121,null],[11,"from_ptr_initialized","","",121,null],[11,"interface_ptr","","",121,null],[11,"interface_name","","",121,{"o":{"n":"str"}}],[11,"supported_version","","",121,{"o":{"n":"u32"}}],[11,"version","","",121,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",121,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",121,{"i":[{"n":"self"},{"n":"zxdgsurfacev6"}],"o":{"n":"bool"}}],[11,"set_user_data","","",121,null],[11,"get_user_data","","",121,null],[11,"clone_unchecked","","",121,{"i":[{"n":"self"}],"o":{"n":"zxdgsurfacev6"}}],[11,"__dispatch_msg","","",121,null],[11,"clone","","",110,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",110,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",110,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_raw","","",110,{"i":[{"n":"u32"}],"o":{"g":["error"],"n":"option"}}],[11,"to_raw","","",110,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",109,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",109,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","destroy the xdg_surface",121,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"get_toplevel","","assign the xdg_toplevel surface role",121,{"i":[{"n":"self"}],"o":{"g":["zxdgtoplevelv6"],"n":"requestresult"}}],[11,"get_popup","","assign the xdg_popup surface role",121,{"i":[{"n":"self"},{"n":"zxdgsurfacev6"},{"n":"zxdgpositionerv6"}],"o":{"g":["zxdgpopupv6"],"n":"requestresult"}}],[11,"set_window_geometry","","set the new window geometry",121,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"ack_configure","","ack a configure event",121,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","",122,null],[11,"from_ptr_new","","",122,null],[11,"from_ptr_initialized","","",122,null],[11,"interface_ptr","","",122,null],[11,"interface_name","","",122,{"o":{"n":"str"}}],[11,"supported_version","","",122,{"o":{"n":"u32"}}],[11,"version","","",122,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",122,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",122,{"i":[{"n":"self"},{"n":"zxdgtoplevelv6"}],"o":{"n":"bool"}}],[11,"set_user_data","","",122,null],[11,"get_user_data","","",122,null],[11,"clone_unchecked","","",122,{"i":[{"n":"self"}],"o":{"n":"zxdgtoplevelv6"}}],[11,"__dispatch_msg","","",122,null],[11,"clone","","",112,{"i":[{"n":"self"}],"o":{"n":"resizeedge"}}],[11,"fmt","","",112,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",112,{"i":[{"n":"self"},{"n":"resizeedge"}],"o":{"n":"bool"}}],[11,"from_raw","","",112,{"i":[{"n":"u32"}],"o":{"g":["resizeedge"],"n":"option"}}],[11,"to_raw","","",112,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",113,{"i":[{"n":"self"}],"o":{"n":"state"}}],[11,"fmt","","",113,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",113,{"i":[{"n":"self"},{"n":"state"}],"o":{"n":"bool"}}],[11,"from_raw","","",113,{"i":[{"n":"u32"}],"o":{"g":["state"],"n":"option"}}],[11,"to_raw","","",113,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",111,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",111,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","destroy the xdg_toplevel",122,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"set_parent","","set the parent of this surface",122,{"i":[{"n":"self"},{"g":["zxdgtoplevelv6"],"n":"option"}],"o":{"n":"requestresult"}}],[11,"set_title","","set surface title",122,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"requestresult"}}],[11,"set_app_id","","set application ID",122,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"requestresult"}}],[11,"show_window_menu","","show the window menu",122,{"i":[{"n":"self"},{"n":"wlseat"},{"n":"u32"},{"n":"i32"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"_move","","start an interactive move",122,{"i":[{"n":"self"},{"n":"wlseat"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"resize","","start an interactive resize",122,{"i":[{"n":"self"},{"n":"wlseat"},{"n":"u32"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"set_max_size","","set the maximum size",122,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"set_min_size","","set the minimum size",122,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"set_maximized","","maximize the window",122,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"unset_maximized","","unmaximize the window",122,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"set_fullscreen","","set the window as fullscreen on a monitor",122,{"i":[{"n":"self"},{"g":["wloutput"],"n":"option"}],"o":{"n":"requestresult"}}],[11,"unset_fullscreen","","",122,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"set_minimized","","set the window as minimized",122,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_popup_v6","",123,null],[11,"from_ptr_new","","",123,null],[11,"from_ptr_initialized","","",123,null],[11,"interface_ptr","","",123,null],[11,"interface_name","","",123,{"o":{"n":"str"}}],[11,"supported_version","","",123,{"o":{"n":"u32"}}],[11,"version","","",123,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",123,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",123,{"i":[{"n":"self"},{"n":"zxdgpopupv6"}],"o":{"n":"bool"}}],[11,"set_user_data","","",123,null],[11,"get_user_data","","",123,null],[11,"clone_unchecked","","",123,{"i":[{"n":"self"}],"o":{"n":"zxdgpopupv6"}}],[11,"__dispatch_msg","","",123,null],[11,"clone","","",115,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",115,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",115,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_raw","","",115,{"i":[{"n":"u32"}],"o":{"g":["error"],"n":"option"}}],[11,"to_raw","","",115,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",114,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",114,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","remove xdg_popup interface",123,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"grab","","make the popup take an explicit grab",123,{"i":[{"n":"self"},{"n":"wlseat"},{"n":"u32"}],"o":{"n":"requestresult"}}],[0,"xwayland_keyboard_grab","wayland_protocols::unstable","Protocol for grabbing the keyboard from Xwayland",null,null],[0,"v1","wayland_protocols::unstable::xwayland_keyboard_grab","",null,null],[0,"client","wayland_protocols::unstable::xwayland_keyboard_grab::v1","Client-side API of this protocol",null,null],[0,"zwp_xwayland_keyboard_grab_manager_v1","wayland_protocols::unstable::xwayland_keyboard_grab::v1::client","context object for keyboard grab manager",null,null],[3,"ZwpXwaylandKeyboardGrabManagerV1","wayland_protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_manager_v1","",null,null],[0,"zwp_xwayland_keyboard_grab_v1","wayland_protocols::unstable::xwayland_keyboard_grab::v1::client","interface for grabbing the keyboard",null,null],[3,"ZwpXwaylandKeyboardGrabV1","wayland_protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_v1","",null,null],[11,"ptr","wayland_protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_manager_v1","",124,null],[11,"from_ptr_new","","",124,null],[11,"from_ptr_initialized","","",124,null],[11,"interface_ptr","","",124,null],[11,"interface_name","","",124,{"o":{"n":"str"}}],[11,"supported_version","","",124,{"o":{"n":"u32"}}],[11,"version","","",124,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",124,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",124,{"i":[{"n":"self"},{"n":"zwpxwaylandkeyboardgrabmanagerv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",124,null],[11,"get_user_data","","",124,null],[11,"clone_unchecked","","",124,{"i":[{"n":"self"}],"o":{"n":"zwpxwaylandkeyboardgrabmanagerv1"}}],[11,"destroy","","destroy the keyboard grab manager",124,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"grab_keyboard","","grab the keyboard to a surface",124,{"i":[{"n":"self"},{"n":"wlsurface"},{"n":"wlseat"}],"o":{"g":["zwpxwaylandkeyboardgrabv1"],"n":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_v1","",125,null],[11,"from_ptr_new","","",125,null],[11,"from_ptr_initialized","","",125,null],[11,"interface_ptr","","",125,null],[11,"interface_name","","",125,{"o":{"n":"str"}}],[11,"supported_version","","",125,{"o":{"n":"u32"}}],[11,"version","","",125,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",125,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",125,{"i":[{"n":"self"},{"n":"zwpxwaylandkeyboardgrabv1"}],"o":{"n":"bool"}}],[11,"set_user_data","","",125,null],[11,"get_user_data","","",125,null],[11,"clone_unchecked","","",125,{"i":[{"n":"self"}],"o":{"n":"zwpxwaylandkeyboardgrabv1"}}],[11,"destroy","","destroy the grabbed keyboard object",125,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[0,"presentation_time","wayland_protocols","Presentation time protocol",null,null],[0,"client","wayland_protocols::presentation_time","Client-side API of this protocol",null,null],[0,"wp_presentation","wayland_protocols::presentation_time::client","timed presentation related wl_surface requests",null,null],[3,"WpPresentation","wayland_protocols::presentation_time::client::wp_presentation","",null,null],[3,"Implementation","","",null,null],[12,"clock_id","","clock ID for timestamps",126,null],[4,"Error","","fatal presentation errors",null,null],[13,"InvalidTimestamp","","invalid value in tv_nsec",127,null],[13,"InvalidFlag","","invalid flag",127,null],[0,"wp_presentation_feedback","wayland_protocols::presentation_time::client","presentation time feedback event",null,null],[3,"WpPresentationFeedback","wayland_protocols::presentation_time::client::wp_presentation_feedback","",null,null],[3,"Implementation","","",null,null],[12,"sync_output","","presentation synchronized to this output",128,null],[12,"presented","","the content update was displayed",128,null],[12,"discarded","","the content update was not displayed",128,null],[4,"Kind","","bitmask of flags in presented event",null,null],[13,"Vsync","","presentation was vsync'd",129,null],[13,"HwClock","","hardware provided the presentation timestamp",129,null],[13,"HwCompletion","","hardware signalled the start of the presentation",129,null],[13,"ZeroCopy","","presentation was done zero-copy",129,null],[0,"xdg_shell","wayland_protocols","XDG Shell protocol",null,null],[0,"client","wayland_protocols::xdg_shell","Client-side API of this protocol",null,null],[0,"xdg_wm_base","wayland_protocols::xdg_shell::client","create desktop-style surfaces",null,null],[3,"XdgWmBase","wayland_protocols::xdg_shell::client::xdg_wm_base","",null,null],[3,"Implementation","","",null,null],[12,"ping","","check if the client is alive",130,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",131,null],[13,"DefunctSurfaces","","xdg_wm_base was destroyed before children",131,null],[13,"NotTheTopmostPopup","","the client tried to map or destroy a non-topmost popup",131,null],[13,"InvalidPopupParent","","the client specified an invalid popup parent surface",131,null],[13,"InvalidSurfaceState","","the client provided an invalid surface state",131,null],[13,"InvalidPositioner","","the client provided an invalid positioner",131,null],[0,"xdg_positioner","wayland_protocols::xdg_shell::client","child surface positioner",null,null],[3,"XdgPositioner","wayland_protocols::xdg_shell::client::xdg_positioner","",null,null],[3,"ConstraintAdjustment","","constraint adjustments",null,null],[4,"Error","","",null,null],[13,"InvalidInput","","invalid input provided",132,null],[4,"Anchor","","",null,null],[13,"None","","",133,null],[13,"Top","","",133,null],[13,"Bottom","","",133,null],[13,"Left","","",133,null],[13,"Right","","",133,null],[13,"TopLeft","","",133,null],[13,"BottomLeft","","",133,null],[13,"TopRight","","",133,null],[13,"BottomRight","","",133,null],[4,"Gravity","","",null,null],[13,"None","","",134,null],[13,"Top","","",134,null],[13,"Bottom","","",134,null],[13,"Left","","",134,null],[13,"Right","","",134,null],[13,"TopLeft","","",134,null],[13,"BottomLeft","","",134,null],[13,"TopRight","","",134,null],[13,"BottomRight","","",134,null],[0,"xdg_surface","wayland_protocols::xdg_shell::client","desktop user interface surface base interface",null,null],[3,"XdgSurface","wayland_protocols::xdg_shell::client::xdg_surface","",null,null],[3,"Implementation","","",null,null],[12,"configure","","suggest a surface change",135,null],[4,"Error","","",null,null],[13,"NotConstructed","","",136,null],[13,"AlreadyConstructed","","",136,null],[13,"UnconfiguredBuffer","","",136,null],[0,"xdg_toplevel","wayland_protocols::xdg_shell::client","toplevel surface",null,null],[3,"XdgToplevel","wayland_protocols::xdg_shell::client::xdg_toplevel","",null,null],[3,"Implementation","","",null,null],[12,"configure","","suggest a surface change",137,null],[12,"close","","surface wants to be closed",137,null],[4,"ResizeEdge","","edge values for resizing",null,null],[13,"None","","",138,null],[13,"Top","","",138,null],[13,"Bottom","","",138,null],[13,"Left","","",138,null],[13,"TopLeft","","",138,null],[13,"BottomLeft","","",138,null],[13,"Right","","",138,null],[13,"TopRight","","",138,null],[13,"BottomRight","","",138,null],[4,"State","","types of state on the surface",null,null],[13,"Maximized","","the surface is maximized",139,null],[13,"Fullscreen","","the surface is fullscreen",139,null],[13,"Resizing","","the surface is being resized",139,null],[13,"Activated","","the surface is now activated",139,null],[0,"xdg_popup","wayland_protocols::xdg_shell::client","short-lived, popup surfaces for menus",null,null],[3,"XdgPopup","wayland_protocols::xdg_shell::client::xdg_popup","",null,null],[3,"Implementation","","",null,null],[12,"configure","","configure the popup surface",140,null],[12,"popup_done","","popup interaction is done",140,null],[4,"Error","","",null,null],[13,"InvalidGrab","","tried to grab after being mapped",141,null],[0,"viewporter","wayland_protocols","Viewporter protocol",null,null],[0,"client","wayland_protocols::viewporter","Client-side API of this protocol",null,null],[0,"wp_viewporter","wayland_protocols::viewporter::client","surface cropping and scaling",null,null],[3,"WpViewporter","wayland_protocols::viewporter::client::wp_viewporter","",null,null],[4,"Error","","",null,null],[13,"ViewportExists","","the surface already has a viewport object associated",142,null],[0,"wp_viewport","wayland_protocols::viewporter::client","crop and scale interface to a wl_surface",null,null],[3,"WpViewport","wayland_protocols::viewporter::client::wp_viewport","",null,null],[4,"Error","","",null,null],[13,"BadValue","","negative or zero values in width or height",143,null],[13,"BadSize","","destination size is not integer",143,null],[13,"OutOfBuffer","","source rectangle extends outside of the content area",143,null],[13,"NoSurface","","the wl_surface was destroyed",143,null],[11,"ptr","wayland_protocols::presentation_time::client::wp_presentation","",144,null],[11,"from_ptr_new","","",144,null],[11,"from_ptr_initialized","","",144,null],[11,"interface_ptr","","",144,null],[11,"interface_name","","",144,{"o":{"n":"str"}}],[11,"supported_version","","",144,{"o":{"n":"u32"}}],[11,"version","","",144,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",144,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",144,{"i":[{"n":"self"},{"n":"wppresentation"}],"o":{"n":"bool"}}],[11,"set_user_data","","",144,null],[11,"get_user_data","","",144,null],[11,"clone_unchecked","","",144,{"i":[{"n":"self"}],"o":{"n":"wppresentation"}}],[11,"__dispatch_msg","","",144,null],[11,"clone","","",127,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",127,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",127,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_raw","","",127,{"i":[{"n":"u32"}],"o":{"g":["error"],"n":"option"}}],[11,"to_raw","","",127,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",126,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",126,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","unbind from the presentation interface",144,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"feedback","","request presentation feedback information",144,{"i":[{"n":"self"},{"n":"wlsurface"}],"o":{"g":["wppresentationfeedback"],"n":"requestresult"}}],[11,"ptr","wayland_protocols::presentation_time::client::wp_presentation_feedback","",145,null],[11,"from_ptr_new","","",145,null],[11,"from_ptr_initialized","","",145,null],[11,"interface_ptr","","",145,null],[11,"interface_name","","",145,{"o":{"n":"str"}}],[11,"supported_version","","",145,{"o":{"n":"u32"}}],[11,"version","","",145,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",145,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",145,{"i":[{"n":"self"},{"n":"wppresentationfeedback"}],"o":{"n":"bool"}}],[11,"set_user_data","","",145,null],[11,"get_user_data","","",145,null],[11,"clone_unchecked","","",145,{"i":[{"n":"self"}],"o":{"n":"wppresentationfeedback"}}],[11,"__dispatch_msg","","",145,null],[11,"clone","","",129,{"i":[{"n":"self"}],"o":{"n":"kind"}}],[11,"fmt","","",129,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",129,{"i":[{"n":"self"},{"n":"kind"}],"o":{"n":"bool"}}],[11,"from_raw","","",129,{"i":[{"n":"u32"}],"o":{"g":["kind"],"n":"option"}}],[11,"to_raw","","",129,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",128,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",128,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"ptr","wayland_protocols::xdg_shell::client::xdg_wm_base","",146,null],[11,"from_ptr_new","","",146,null],[11,"from_ptr_initialized","","",146,null],[11,"interface_ptr","","",146,null],[11,"interface_name","","",146,{"o":{"n":"str"}}],[11,"supported_version","","",146,{"o":{"n":"u32"}}],[11,"version","","",146,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",146,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",146,{"i":[{"n":"self"},{"n":"xdgwmbase"}],"o":{"n":"bool"}}],[11,"set_user_data","","",146,null],[11,"get_user_data","","",146,null],[11,"clone_unchecked","","",146,{"i":[{"n":"self"}],"o":{"n":"xdgwmbase"}}],[11,"__dispatch_msg","","",146,null],[11,"clone","","",131,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",131,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",131,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_raw","","",131,{"i":[{"n":"u32"}],"o":{"g":["error"],"n":"option"}}],[11,"to_raw","","",131,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",130,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",130,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","destroy xdg_wm_base",146,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"create_positioner","","create a positioner object",146,{"i":[{"n":"self"}],"o":{"g":["xdgpositioner"],"n":"requestresult"}}],[11,"get_xdg_surface","","create a shell surface from a surface",146,{"i":[{"n":"self"},{"n":"wlsurface"}],"o":{"g":["xdgsurface"],"n":"requestresult"}}],[11,"pong","","respond to a ping event",146,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_protocols::xdg_shell::client::xdg_positioner","",147,null],[11,"from_ptr_new","","",147,null],[11,"from_ptr_initialized","","",147,null],[11,"interface_ptr","","",147,null],[11,"interface_name","","",147,{"o":{"n":"str"}}],[11,"supported_version","","",147,{"o":{"n":"u32"}}],[11,"version","","",147,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",147,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",147,{"i":[{"n":"self"},{"n":"xdgpositioner"}],"o":{"n":"bool"}}],[11,"set_user_data","","",147,null],[11,"get_user_data","","",147,null],[11,"clone_unchecked","","",147,{"i":[{"n":"self"}],"o":{"n":"xdgpositioner"}}],[11,"clone","","",132,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",132,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_raw","","",132,{"i":[{"n":"u32"}],"o":{"g":["error"],"n":"option"}}],[11,"to_raw","","",132,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",133,{"i":[{"n":"self"}],"o":{"n":"anchor"}}],[11,"fmt","","",133,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",133,{"i":[{"n":"self"},{"n":"anchor"}],"o":{"n":"bool"}}],[11,"from_raw","","",133,{"i":[{"n":"u32"}],"o":{"g":["anchor"],"n":"option"}}],[11,"to_raw","","",133,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",134,{"i":[{"n":"self"}],"o":{"n":"gravity"}}],[11,"fmt","","",134,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",134,{"i":[{"n":"self"},{"n":"gravity"}],"o":{"n":"bool"}}],[11,"from_raw","","",134,{"i":[{"n":"u32"}],"o":{"g":["gravity"],"n":"option"}}],[11,"to_raw","","",134,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"eq","","",148,{"i":[{"n":"self"},{"n":"constraintadjustment"}],"o":{"n":"bool"}}],[11,"ne","","",148,{"i":[{"n":"self"},{"n":"constraintadjustment"}],"o":{"n":"bool"}}],[11,"clone","","",148,{"i":[{"n":"self"}],"o":{"n":"constraintadjustment"}}],[11,"partial_cmp","","",148,{"i":[{"n":"self"},{"n":"constraintadjustment"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",148,{"i":[{"n":"self"},{"n":"constraintadjustment"}],"o":{"n":"bool"}}],[11,"le","","",148,{"i":[{"n":"self"},{"n":"constraintadjustment"}],"o":{"n":"bool"}}],[11,"gt","","",148,{"i":[{"n":"self"},{"n":"constraintadjustment"}],"o":{"n":"bool"}}],[11,"ge","","",148,{"i":[{"n":"self"},{"n":"constraintadjustment"}],"o":{"n":"bool"}}],[11,"cmp","","",148,{"i":[{"n":"self"},{"n":"constraintadjustment"}],"o":{"n":"ordering"}}],[11,"hash","","",148,null],[11,"fmt","","",148,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",148,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",148,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",148,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",148,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"None","","don't move the child surface when constrained",148,null],[18,"SlideX","","move along the x axis until unconstrained",148,null],[18,"SlideY","","move along the y axis until unconstrained",148,null],[18,"FlipX","","invert the anchor and gravity on the x axis",148,null],[18,"FlipY","","invert the anchor and gravity on the y axis",148,null],[18,"ResizeX","","horizontally resize the surface",148,null],[18,"ResizeY","","vertically resize the surface",148,null],[11,"empty","","Returns an empty set of flags.",148,{"o":{"n":"constraintadjustment"}}],[11,"all","","Returns the set containing all flags.",148,{"o":{"n":"constraintadjustment"}}],[11,"bits","","Returns the raw value of the flags currently stored.",148,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",148,{"i":[{"n":"u32"}],"o":{"g":["constraintadjustment"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",148,{"i":[{"n":"u32"}],"o":{"n":"constraintadjustment"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",148,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",148,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",148,{"i":[{"n":"self"},{"n":"constraintadjustment"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",148,{"i":[{"n":"self"},{"n":"constraintadjustment"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",148,{"i":[{"n":"self"},{"n":"constraintadjustment"}]}],[11,"remove","","Removes the specified flags in-place.",148,{"i":[{"n":"self"},{"n":"constraintadjustment"}]}],[11,"toggle","","Toggles the specified flags in-place.",148,{"i":[{"n":"self"},{"n":"constraintadjustment"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",148,{"i":[{"n":"self"},{"n":"constraintadjustment"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",148,{"i":[{"n":"self"},{"n":"constraintadjustment"}],"o":{"n":"constraintadjustment"}}],[11,"bitor_assign","","Adds the set of flags.",148,{"i":[{"n":"self"},{"n":"constraintadjustment"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",148,{"i":[{"n":"self"},{"n":"constraintadjustment"}],"o":{"n":"constraintadjustment"}}],[11,"bitxor_assign","","Toggles the set of flags.",148,{"i":[{"n":"self"},{"n":"constraintadjustment"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",148,{"i":[{"n":"self"},{"n":"constraintadjustment"}],"o":{"n":"constraintadjustment"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",148,{"i":[{"n":"self"},{"n":"constraintadjustment"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",148,{"i":[{"n":"self"},{"n":"constraintadjustment"}],"o":{"n":"constraintadjustment"}}],[11,"sub_assign","","Disables all flags enabled in the set.",148,{"i":[{"n":"self"},{"n":"constraintadjustment"}]}],[11,"not","","Returns the complement of this set of flags.",148,{"i":[{"n":"self"}],"o":{"n":"constraintadjustment"}}],[11,"extend","","",148,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",148,{"i":[{"n":"t"}],"o":{"n":"constraintadjustment"}}],[11,"from_raw","","",148,{"i":[{"n":"u32"}],"o":{"g":["constraintadjustment"],"n":"option"}}],[11,"to_raw","","",148,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"destroy","","destroy the xdg_positioner object",147,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"set_size","","set the size of the to-be positioned rectangle",147,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"set_anchor_rect","","set the anchor rectangle within the parent surface",147,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"set_anchor","","set anchor rectangle anchor",147,{"i":[{"n":"self"},{"n":"anchor"}],"o":{"n":"requestresult"}}],[11,"set_gravity","","set child surface gravity",147,{"i":[{"n":"self"},{"n":"gravity"}],"o":{"n":"requestresult"}}],[11,"set_constraint_adjustment","","set the adjustment to be done when constrained",147,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"set_offset","","set surface position offset",147,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_protocols::xdg_shell::client::xdg_surface","",149,null],[11,"from_ptr_new","","",149,null],[11,"from_ptr_initialized","","",149,null],[11,"interface_ptr","","",149,null],[11,"interface_name","","",149,{"o":{"n":"str"}}],[11,"supported_version","","",149,{"o":{"n":"u32"}}],[11,"version","","",149,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",149,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",149,{"i":[{"n":"self"},{"n":"xdgsurface"}],"o":{"n":"bool"}}],[11,"set_user_data","","",149,null],[11,"get_user_data","","",149,null],[11,"clone_unchecked","","",149,{"i":[{"n":"self"}],"o":{"n":"xdgsurface"}}],[11,"__dispatch_msg","","",149,null],[11,"clone","","",136,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",136,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",136,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_raw","","",136,{"i":[{"n":"u32"}],"o":{"g":["error"],"n":"option"}}],[11,"to_raw","","",136,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",135,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",135,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","destroy the xdg_surface",149,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"get_toplevel","","assign the xdg_toplevel surface role",149,{"i":[{"n":"self"}],"o":{"g":["xdgtoplevel"],"n":"requestresult"}}],[11,"get_popup","","assign the xdg_popup surface role",149,{"i":[{"n":"self"},{"g":["xdgsurface"],"n":"option"},{"n":"xdgpositioner"}],"o":{"g":["xdgpopup"],"n":"requestresult"}}],[11,"set_window_geometry","","set the new window geometry",149,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"ack_configure","","ack a configure event",149,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_protocols::xdg_shell::client::xdg_toplevel","",150,null],[11,"from_ptr_new","","",150,null],[11,"from_ptr_initialized","","",150,null],[11,"interface_ptr","","",150,null],[11,"interface_name","","",150,{"o":{"n":"str"}}],[11,"supported_version","","",150,{"o":{"n":"u32"}}],[11,"version","","",150,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",150,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",150,{"i":[{"n":"self"},{"n":"xdgtoplevel"}],"o":{"n":"bool"}}],[11,"set_user_data","","",150,null],[11,"get_user_data","","",150,null],[11,"clone_unchecked","","",150,{"i":[{"n":"self"}],"o":{"n":"xdgtoplevel"}}],[11,"__dispatch_msg","","",150,null],[11,"clone","","",138,{"i":[{"n":"self"}],"o":{"n":"resizeedge"}}],[11,"fmt","","",138,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",138,{"i":[{"n":"self"},{"n":"resizeedge"}],"o":{"n":"bool"}}],[11,"from_raw","","",138,{"i":[{"n":"u32"}],"o":{"g":["resizeedge"],"n":"option"}}],[11,"to_raw","","",138,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",139,{"i":[{"n":"self"}],"o":{"n":"state"}}],[11,"fmt","","",139,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",139,{"i":[{"n":"self"},{"n":"state"}],"o":{"n":"bool"}}],[11,"from_raw","","",139,{"i":[{"n":"u32"}],"o":{"g":["state"],"n":"option"}}],[11,"to_raw","","",139,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",137,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",137,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","destroy the xdg_toplevel",150,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"set_parent","","set the parent of this surface",150,{"i":[{"n":"self"},{"g":["xdgtoplevel"],"n":"option"}],"o":{"n":"requestresult"}}],[11,"set_title","","set surface title",150,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"requestresult"}}],[11,"set_app_id","","set application ID",150,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"requestresult"}}],[11,"show_window_menu","","show the window menu",150,{"i":[{"n":"self"},{"n":"wlseat"},{"n":"u32"},{"n":"i32"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"_move","","start an interactive move",150,{"i":[{"n":"self"},{"n":"wlseat"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"resize","","start an interactive resize",150,{"i":[{"n":"self"},{"n":"wlseat"},{"n":"u32"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"set_max_size","","set the maximum size",150,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"set_min_size","","set the minimum size",150,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"}],"o":{"n":"requestresult"}}],[11,"set_maximized","","maximize the window",150,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"unset_maximized","","unmaximize the window",150,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"set_fullscreen","","set the window as fullscreen on an output",150,{"i":[{"n":"self"},{"g":["wloutput"],"n":"option"}],"o":{"n":"requestresult"}}],[11,"unset_fullscreen","","unset the window as fullscreen",150,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"set_minimized","","set the window as minimized",150,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_protocols::xdg_shell::client::xdg_popup","",151,null],[11,"from_ptr_new","","",151,null],[11,"from_ptr_initialized","","",151,null],[11,"interface_ptr","","",151,null],[11,"interface_name","","",151,{"o":{"n":"str"}}],[11,"supported_version","","",151,{"o":{"n":"u32"}}],[11,"version","","",151,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",151,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",151,{"i":[{"n":"self"},{"n":"xdgpopup"}],"o":{"n":"bool"}}],[11,"set_user_data","","",151,null],[11,"get_user_data","","",151,null],[11,"clone_unchecked","","",151,{"i":[{"n":"self"}],"o":{"n":"xdgpopup"}}],[11,"__dispatch_msg","","",151,null],[11,"clone","","",141,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",141,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",141,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_raw","","",141,{"i":[{"n":"u32"}],"o":{"g":["error"],"n":"option"}}],[11,"to_raw","","",141,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",140,{"i":[{"n":"self"}],"o":{"n":"implementation"}}],[11,"eq","","",140,{"i":[{"n":"self"},{"n":"implementation"}],"o":{"n":"bool"}}],[11,"destroy","","remove xdg_popup interface",151,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"grab","","make the popup take an explicit grab",151,{"i":[{"n":"self"},{"n":"wlseat"},{"n":"u32"}],"o":{"n":"requestresult"}}],[11,"ptr","wayland_protocols::viewporter::client::wp_viewporter","",152,null],[11,"from_ptr_new","","",152,null],[11,"from_ptr_initialized","","",152,null],[11,"interface_ptr","","",152,null],[11,"interface_name","","",152,{"o":{"n":"str"}}],[11,"supported_version","","",152,{"o":{"n":"u32"}}],[11,"version","","",152,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",152,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",152,{"i":[{"n":"self"},{"n":"wpviewporter"}],"o":{"n":"bool"}}],[11,"set_user_data","","",152,null],[11,"get_user_data","","",152,null],[11,"clone_unchecked","","",152,{"i":[{"n":"self"}],"o":{"n":"wpviewporter"}}],[11,"clone","","",142,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",142,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",142,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_raw","","",142,{"i":[{"n":"u32"}],"o":{"g":["error"],"n":"option"}}],[11,"to_raw","","",142,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"destroy","","unbind from the cropping and scaling interface",152,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"get_viewport","","extend surface interface for crop and scale",152,{"i":[{"n":"self"},{"n":"wlsurface"}],"o":{"g":["wpviewport"],"n":"requestresult"}}],[11,"ptr","wayland_protocols::viewporter::client::wp_viewport","",153,null],[11,"from_ptr_new","","",153,null],[11,"from_ptr_initialized","","",153,null],[11,"interface_ptr","","",153,null],[11,"interface_name","","",153,{"o":{"n":"str"}}],[11,"supported_version","","",153,{"o":{"n":"u32"}}],[11,"version","","",153,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"status","","",153,{"i":[{"n":"self"}],"o":{"n":"liveness"}}],[11,"equals","","",153,{"i":[{"n":"self"},{"n":"wpviewport"}],"o":{"n":"bool"}}],[11,"set_user_data","","",153,null],[11,"get_user_data","","",153,null],[11,"clone_unchecked","","",153,{"i":[{"n":"self"}],"o":{"n":"wpviewport"}}],[11,"clone","","",143,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",143,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",143,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_raw","","",143,{"i":[{"n":"u32"}],"o":{"g":["error"],"n":"option"}}],[11,"to_raw","","",143,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"destroy","","remove scaling and cropping from the surface",153,{"i":[{"n":"self"}],"o":{"n":"requestresult"}}],[11,"set_source","","set the source rectangle for cropping",153,{"i":[{"n":"self"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"}],"o":{"n":"requestresult"}}],[11,"set_destination","","set the surface size for scaling",153,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"}],"o":{"n":"requestresult"}}]],"paths":[[3,"Implementation"],[4,"Capability"],[4,"PresentMethod"],[4,"Error"],[3,"Implementation"],[3,"ZwpFullscreenShellV1"],[3,"ZwpFullscreenShellModeFeedbackV1"],[3,"ZwpIdleInhibitManagerV1"],[3,"ZwpIdleInhibitorV1"],[3,"Implementation"],[3,"Implementation"],[4,"Position"],[3,"ZwpInputMethodContextV1"],[3,"ZwpInputMethodV1"],[3,"ZwpInputPanelV1"],[3,"ZwpInputPanelSurfaceV1"],[4,"Error"],[3,"Implementation"],[3,"ZwpKeyboardShortcutsInhibitManagerV1"],[3,"ZwpKeyboardShortcutsInhibitorV1"],[3,"Implementation"],[3,"Implementation"],[4,"Error"],[4,"Flags"],[3,"ZwpLinuxDmabufV1"],[3,"ZwpLinuxBufferParamsV1"],[4,"Error"],[4,"Lifetime"],[3,"Implementation"],[3,"Implementation"],[3,"ZwpPointerConstraintsV1"],[3,"ZwpLockedPointerV1"],[3,"ZwpConfinedPointerV1"],[3,"Implementation"],[3,"Implementation"],[3,"ZwpPointerGesturesV1"],[3,"ZwpPointerGestureSwipeV1"],[3,"ZwpPointerGesturePinchV1"],[3,"Implementation"],[3,"ZwpRelativePointerManagerV1"],[3,"ZwpRelativePointerV1"],[3,"Implementation"],[3,"Implementation"],[4,"Type"],[4,"Capability"],[4,"ButtonState"],[4,"Error"],[3,"Implementation"],[3,"ZwpTabletManagerV1"],[3,"ZwpTabletSeatV1"],[3,"ZwpTabletToolV1"],[3,"ZwpTabletV1"],[3,"Implementation"],[3,"Implementation"],[4,"Type"],[4,"Capability"],[4,"ButtonState"],[4,"Error"],[3,"Implementation"],[3,"Implementation"],[4,"Source"],[3,"Implementation"],[4,"Source"],[3,"Implementation"],[3,"Implementation"],[4,"ButtonState"],[3,"ZwpTabletManagerV2"],[3,"ZwpTabletSeatV2"],[3,"ZwpTabletToolV2"],[3,"ZwpTabletV2"],[3,"ZwpTabletPadRingV2"],[3,"ZwpTabletPadStripV2"],[3,"ZwpTabletPadGroupV2"],[3,"ZwpTabletPadV2"],[3,"Implementation"],[4,"ContentHint"],[4,"ContentPurpose"],[4,"PreeditStyle"],[4,"TextDirection"],[3,"ZwpTextInputV1"],[3,"ZwpTextInputManagerV1"],[3,"Implementation"],[3,"Implementation"],[3,"ZxdgExporterV1"],[3,"ZxdgImporterV1"],[3,"ZxdgExportedV1"],[3,"ZxdgImportedV1"],[3,"Implementation"],[3,"Implementation"],[3,"ZxdgExporterV2"],[3,"ZxdgImporterV2"],[3,"ZxdgExportedV2"],[3,"ZxdgImportedV2"],[3,"Implementation"],[3,"ZxdgOutputManagerV1"],[3,"ZxdgOutputV1"],[3,"Implementation"],[4,"Version"],[4,"Error"],[3,"Implementation"],[4,"ResizeEdge"],[4,"State"],[3,"Implementation"],[3,"XdgShell"],[3,"XdgSurface"],[3,"XdgPopup"],[3,"Implementation"],[4,"Error"],[4,"Error"],[3,"Implementation"],[4,"Error"],[3,"Implementation"],[4,"ResizeEdge"],[4,"State"],[3,"Implementation"],[4,"Error"],[3,"ZxdgShellV6"],[3,"ZxdgPositionerV6"],[3,"Anchor"],[3,"Gravity"],[3,"ConstraintAdjustment"],[3,"ZxdgSurfaceV6"],[3,"ZxdgToplevelV6"],[3,"ZxdgPopupV6"],[3,"ZwpXwaylandKeyboardGrabManagerV1"],[3,"ZwpXwaylandKeyboardGrabV1"],[3,"Implementation"],[4,"Error"],[3,"Implementation"],[4,"Kind"],[3,"Implementation"],[4,"Error"],[4,"Error"],[4,"Anchor"],[4,"Gravity"],[3,"Implementation"],[4,"Error"],[3,"Implementation"],[4,"ResizeEdge"],[4,"State"],[3,"Implementation"],[4,"Error"],[4,"Error"],[4,"Error"],[3,"WpPresentation"],[3,"WpPresentationFeedback"],[3,"XdgWmBase"],[3,"XdgPositioner"],[3,"ConstraintAdjustment"],[3,"XdgSurface"],[3,"XdgToplevel"],[3,"XdgPopup"],[3,"WpViewporter"],[3,"WpViewport"]]};
searchIndex["wayland_sys"] = {"doc":"FFI bindings to the wayland system libraries.","items":[[0,"common","wayland_sys","Various types and functions that are used by both the client and the server libraries.",null,null],[3,"wl_message","wayland_sys::common","",null,null],[12,"name","","",0,null],[12,"signature","","",0,null],[12,"types","","",0,null],[3,"wl_interface","","",null,null],[12,"name","","",1,null],[12,"version","","",1,null],[12,"request_count","","",1,null],[12,"requests","","",1,null],[12,"event_count","","",1,null],[12,"events","","",1,null],[3,"wl_list","","",null,null],[12,"prev","","",2,null],[12,"next","","",2,null],[3,"wl_array","","",null,null],[12,"size","","",3,null],[12,"alloc","","",3,null],[12,"data","","",3,null],[3,"wl_argument","","",null,null],[5,"wl_fixed_to_double","","",null,{"i":[{"n":"wl_fixed_t"}],"o":{"n":"f64"}}],[5,"wl_fixed_from_double","","",null,{"i":[{"n":"f64"}],"o":{"n":"wl_fixed_t"}}],[5,"wl_fixed_to_int","","",null,{"i":[{"n":"wl_fixed_t"}],"o":{"n":"i32"}}],[5,"wl_fixed_from_int","","",null,{"i":[{"n":"i32"}],"o":{"n":"wl_fixed_t"}}],[6,"wl_fixed_t","","",null,null],[6,"wl_dispatcher_func_t","","",null,null],[6,"wl_log_func_t","","",null,null],[0,"client","wayland_sys","Bindings to the client library `libwayland-client.so`",null,null],[3,"WaylandClient","wayland_sys::client","",null,null],[12,"wl_display_connect_to_fd","","",4,null],[12,"wl_display_connect","","",4,null],[12,"wl_display_disconnect","","",4,null],[12,"wl_display_get_fd","","",4,null],[12,"wl_display_roundtrip","","",4,null],[12,"wl_display_read_events","","",4,null],[12,"wl_display_prepare_read","","",4,null],[12,"wl_display_cancel_read","","",4,null],[12,"wl_display_dispatch","","",4,null],[12,"wl_display_dispatch_pending","","",4,null],[12,"wl_display_get_error","","",4,null],[12,"wl_display_get_protocol_error","","",4,null],[12,"wl_display_flush","","",4,null],[12,"wl_event_queue_destroy","","",4,null],[12,"wl_display_create_queue","","",4,null],[12,"wl_display_roundtrip_queue","","",4,null],[12,"wl_display_prepare_read_queue","","",4,null],[12,"wl_display_dispatch_queue","","",4,null],[12,"wl_display_dispatch_queue_pending","","",4,null],[12,"wl_proxy_create","","",4,null],[12,"wl_proxy_destroy","","",4,null],[12,"wl_proxy_add_listener","","",4,null],[12,"wl_proxy_get_listener","","",4,null],[12,"wl_proxy_add_dispatcher","","",4,null],[12,"wl_proxy_marshal_array_constructor","","",4,null],[12,"wl_proxy_marshal_array_constructor_versioned","","",4,null],[12,"wl_proxy_marshal_array","","",4,null],[12,"wl_proxy_set_user_data","","",4,null],[12,"wl_proxy_get_user_data","","",4,null],[12,"wl_proxy_get_id","","",4,null],[12,"wl_proxy_get_class","","",4,null],[12,"wl_proxy_set_queue","","",4,null],[12,"wl_proxy_get_version","","",4,null],[12,"wl_log_set_handler_client","","",4,null],[12,"wl_list_init","","",4,null],[12,"wl_list_insert","","",4,null],[12,"wl_list_remove","","",4,null],[12,"wl_list_length","","",4,null],[12,"wl_list_empty","","",4,null],[12,"wl_list_insert_list","","",4,null],[12,"wl_array_init","","",4,null],[12,"wl_array_release","","",4,null],[12,"wl_array_add","","",4,null],[12,"wl_array_copy","","",4,null],[12,"wl_proxy_marshal_constructor","","",4,null],[12,"wl_proxy_marshal_constructor_versioned","","",4,null],[12,"wl_proxy_marshal","","",4,null],[3,"WAYLAND_CLIENT_OPTION","","",null,null],[3,"WAYLAND_CLIENT_HANDLE","","",null,null],[4,"wl_proxy","","",null,null],[4,"wl_display","","",null,null],[4,"wl_event_queue","","",null,null],[5,"is_lib_available","","",null,{"o":{"n":"bool"}}],[11,"open","","",4,{"i":[{"n":"str"}],"o":{"g":["waylandclient","dlerror"],"n":"result"}}],[11,"deref","","",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"initialize","","",5,{"i":[{"n":"self"}]}],[11,"deref","","",6,{"i":[{"n":"self"}],"o":{"n":"waylandclient"}}],[11,"initialize","","",6,{"i":[{"n":"self"}]}],[0,"egl","wayland_sys","Bindings to the EGL library `libwayland-egl.so`",null,null],[3,"WaylandEgl","wayland_sys::egl","",null,null],[12,"wl_egl_window_create","","",7,null],[12,"wl_egl_window_destroy","","",7,null],[12,"wl_egl_window_resize","","",7,null],[12,"wl_egl_window_get_attached_size","","",7,null],[3,"WAYLAND_EGL_OPTION","","",null,null],[3,"WAYLAND_EGL_HANDLE","","",null,null],[4,"wl_egl_window","","",null,null],[5,"is_lib_available","","",null,{"o":{"n":"bool"}}],[11,"open","","",7,{"i":[{"n":"str"}],"o":{"g":["waylandegl","dlerror"],"n":"result"}}],[11,"deref","","",8,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"initialize","","",8,{"i":[{"n":"self"}]}],[11,"deref","","",9,{"i":[{"n":"self"}],"o":{"n":"waylandegl"}}],[11,"initialize","","",9,{"i":[{"n":"self"}]}],[0,"cursor","wayland_sys","Bindings to the `wayland-cursor.so` library",null,null],[3,"wl_cursor_image","wayland_sys::cursor","",null,null],[12,"width","","actual width",10,null],[12,"height","","actual height",10,null],[12,"hotspot_x","","hot spot x (must be inside image)",10,null],[12,"hotspot_y","","hot spot y (must be inside image)",10,null],[12,"delay","","animation delay to next frame",10,null],[3,"wl_cursor","","",null,null],[12,"image_count","","",11,null],[12,"images","","",11,null],[12,"name","","",11,null],[3,"WaylandCursor","","",null,null],[12,"wl_cursor_theme_load","","",12,null],[12,"wl_cursor_theme_destroy","","",12,null],[12,"wl_cursor_theme_get_cursor","","",12,null],[12,"wl_cursor_image_get_buffer","","",12,null],[12,"wl_cursor_frame","","",12,null],[12,"wl_cursor_frame_and_duration","","",12,null],[3,"WAYLAND_CURSOR_OPTION","","",null,null],[3,"WAYLAND_CURSOR_HANDLE","","",null,null],[4,"wl_cursor_theme","","",null,null],[5,"is_lib_available","","",null,{"o":{"n":"bool"}}],[11,"open","","",12,{"i":[{"n":"str"}],"o":{"g":["waylandcursor","dlerror"],"n":"result"}}],[11,"deref","","",13,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"initialize","","",13,{"i":[{"n":"self"}]}],[11,"deref","","",14,{"i":[{"n":"self"}],"o":{"n":"waylandcursor"}}],[11,"initialize","","",14,{"i":[{"n":"self"}]}],[7,"RUST_MANAGED","wayland_sys","Magic pointer for wayland objects managed by wayland-client or wayland-server",null,null],[14,"ffi_dispatch","","",null,null]],"paths":[[3,"wl_message"],[3,"wl_interface"],[3,"wl_list"],[3,"wl_array"],[3,"WaylandClient"],[3,"WAYLAND_CLIENT_OPTION"],[3,"WAYLAND_CLIENT_HANDLE"],[3,"WaylandEgl"],[3,"WAYLAND_EGL_OPTION"],[3,"WAYLAND_EGL_HANDLE"],[3,"wl_cursor_image"],[3,"wl_cursor"],[3,"WaylandCursor"],[3,"WAYLAND_CURSOR_OPTION"],[3,"WAYLAND_CURSOR_HANDLE"]]};
searchIndex["wayland_window"] = {"doc":"Wayland Window, a minimalistic decoration-drawing library for wayland applications.","items":[[3,"Frame","wayland_window","A decorated frame for a window",null,null],[3,"FrameImplementation","","For handling events that occur to a Frame.",null,null],[12,"configure","","Called whenever the Frame has been resized.",0,null],[12,"close","","Called when the Frame is closed.",0,null],[12,"refresh","","Called when the Frame wants to be refreshed",0,null],[4,"State","","Possible requested state for a window",null,null],[13,"Regular","","Regular floating window",1,null],[13,"Minimized","","Minimized window",1,null],[13,"Maximized","","Maximized window",1,null],[13,"Fullscreen","","Fullscreen, with optional specification of an output to maximize over",1,null],[4,"Configure","","Configure data for a decorated surface handler.",null,null],[13,"Xdg","","Configure data from xdg_shell",2,null],[13,"Wl","","Configure data from wl_shell",2,null],[4,"Shell","","Enum over the supported shells",null,null],[13,"Xdg","","A xdg_shell from unstable v6",3,null],[13,"Wl","","A wl_shell",3,null],[5,"add_borders","","Adds the border dimensions to the given dimensions.",null,null],[5,"subtract_borders","","Subtracts the border dimensions from the given dimensions.",null,null],[5,"create_frame","","Create a decoration frame for a wl_surface",null,{"i":[{"n":"eventqueuehandle"},{"n":"frameimplementation"},{"n":"id"},{"n":"wlsurface"},{"n":"i32"},{"n":"i32"},{"n":"wlcompositor"},{"n":"wlsubcompositor"},{"n":"wlshm"},{"n":"shell"},{"g":["wlseat"],"n":"option"}],"o":{"g":["frame"],"n":"result"}}],[11,"refresh","","Refreshes the frame",4,{"i":[{"n":"self"}]}],[11,"set_title","","Set a short title for the window.",4,{"i":[{"n":"self"},{"n":"string"}]}],[11,"set_app_id","","Set an app id for the surface.",4,{"i":[{"n":"self"},{"n":"string"}]}],[11,"set_decorate","","Set wether the window should be decorated or not",4,{"i":[{"n":"self"},{"n":"bool"}]}],[11,"resize","","Resize the decorations",4,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"}]}],[11,"set_state","","Sets the requested state of this surface",4,{"i":[{"n":"self"},{"n":"state"}]}],[11,"set_min_size","","Sets the minimum possible size for this window",4,{"i":[{"n":"self"},{"n":"option"}]}],[11,"set_max_size","","Sets the maximum possible size for this window",4,{"i":[{"n":"self"},{"n":"option"}]}],[11,"drop","","",4,{"i":[{"n":"self"}]}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"configure"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"frameimplementation"}}]],"paths":[[3,"FrameImplementation"],[4,"State"],[4,"Configure"],[4,"Shell"],[3,"Frame"]]};
searchIndex["winit"] = {"doc":"Winit allows you to build a window on as many platforms as possible.","items":[[3,"KeyboardInput","winit","Describes a keyboard input event.",null,null],[12,"scancode","","Identifies the physical key pressed",0,null],[12,"state","","",0,null],[12,"virtual_keycode","","Identifies the semantic meaning of the key",0,null],[12,"modifiers","","Modifier keys active at the time of this input.",0,null],[3,"Touch","","Represents touch event",null,null],[12,"device_id","","",1,null],[12,"phase","","",1,null],[12,"location","","",1,null],[12,"id","","unique identifier of a finger.",1,null],[3,"ModifiersState","","Represents the current state of the keyboard modifiers",null,null],[12,"shift","","The \"shift\" key",2,null],[12,"ctrl","","The \"control\" key",2,null],[12,"alt","","The \"alt\" key",2,null],[12,"logo","","The \"logo\" key",2,null],[3,"AvailableMonitorsIter","","An iterator for the list of available monitors.",null,null],[3,"MonitorId","","Identifier for a monitor.",null,null],[3,"Window","","Represents a window.",null,null],[3,"WindowId","","Identifier of a window. Unique for each window.",null,null],[3,"DeviceId","","Identifier of an input device.",null,null],[3,"EventsLoop","","Provides a way to retreive events from the system and from the windows that were registered to the events loop.",null,null],[3,"EventsLoopProxy","","Used to wake up the `EventsLoop` from another thread.",null,null],[3,"EventsLoopClosed","","The error that is returned when an `EventsLoopProxy` attempts to wake up an `EventsLoop` that no longer exists.",null,null],[3,"WindowBuilder","","Object that allows you to build windows.",null,null],[12,"window","","The attributes to use to create the window.",3,null],[3,"WindowAttributes","","Attributes to use when creating a window.",null,null],[12,"dimensions","","The dimensions of the window. If this is `None`, some platform-specific dimensions will be used.",4,null],[12,"min_dimensions","","The minimum dimensions a window can be, If this is `None`, the window will have no minimum dimensions (aside from reserved).",4,null],[12,"max_dimensions","","The maximum dimensions a window can be, If this is `None`, the maximum will have no maximum or will be set to the primary monitor's dimensions by the platform.",4,null],[12,"fullscreen","","Whether the window should be set as fullscreen upon creation.",4,null],[12,"title","","The title of the window in the title bar.",4,null],[12,"maximized","","Whether the window should be maximized upon creation.",4,null],[12,"visible","","Whether the window should be immediately visible upon creation.",4,null],[12,"transparent","","Whether the the window should be transparent. If this is true, writing colors with alpha values different than `1.0` will produce a transparent window.",4,null],[12,"decorations","","Whether the window should have borders and bars.",4,null],[12,"multitouch","","[iOS only] Enable multitouch, see multipleTouchEnabled",4,null],[4,"Event","","Describes a generic event.",null,null],[13,"WindowEvent","","",5,null],[12,"window_id","winit::Event","",5,null],[12,"event","","",5,null],[13,"DeviceEvent","winit","",5,null],[12,"device_id","winit::Event","",5,null],[12,"event","","",5,null],[13,"Awakened","winit","",5,null],[13,"Suspended","","The application has been suspended or resumed.",5,null],[4,"WindowEvent","","Describes an event from a `Window`.",null,null],[13,"Resized","","The size of the window has changed.",6,null],[13,"Moved","","The position of the window has changed.",6,null],[13,"Closed","","The window has been closed.",6,null],[13,"DroppedFile","","A file has been dropped into the window.",6,null],[13,"HoveredFile","","A file is being hovered over the window.",6,null],[13,"HoveredFileCancelled","","A file was hovered, but has exited the window.",6,null],[13,"ReceivedCharacter","","The window received a unicode character.",6,null],[13,"Focused","","The window gained or lost focus.",6,null],[13,"KeyboardInput","","An event from the keyboard has been received.",6,null],[12,"device_id","winit::WindowEvent","",6,null],[12,"input","","",6,null],[13,"CursorMoved","winit","The cursor has moved on the window.",6,null],[12,"device_id","winit::WindowEvent","",6,null],[12,"position","","(x,y) coords in pixels relative to the top-left corner of the window. Because the range of this data is limited by the display area and it may have been transformed by the OS to implement effects such as cursor acceleration, it should not be used to implement non-cursor-like interactions such as 3D camera control.",6,null],[12,"modifiers","","",6,null],[13,"CursorEntered","winit","The cursor has entered the window.",6,null],[12,"device_id","winit::WindowEvent","",6,null],[13,"CursorLeft","winit","The cursor has left the window.",6,null],[12,"device_id","winit::WindowEvent","",6,null],[13,"MouseWheel","winit","A mouse wheel movement or touchpad scroll occurred.",6,null],[12,"device_id","winit::WindowEvent","",6,null],[12,"delta","","",6,null],[12,"phase","","",6,null],[12,"modifiers","","",6,null],[13,"MouseInput","winit","An mouse button press has been received.",6,null],[12,"device_id","winit::WindowEvent","",6,null],[12,"state","","",6,null],[12,"button","","",6,null],[12,"modifiers","","",6,null],[13,"TouchpadPressure","winit","Touchpad pressure event.",6,null],[12,"device_id","winit::WindowEvent","",6,null],[12,"pressure","","",6,null],[12,"stage","","",6,null],[13,"AxisMotion","winit","Motion on some analog axis. May report data redundant to other, more specific events.",6,null],[12,"device_id","winit::WindowEvent","",6,null],[12,"axis","","",6,null],[12,"value","","",6,null],[13,"Refresh","winit","The window needs to be redrawn.",6,null],[13,"Touch","","Touch event has been received",6,null],[13,"HiDPIFactorChanged","","DPI scaling factor of the window has changed.",6,null],[4,"DeviceEvent","","Represents raw hardware events that are not associated with any particular window.",null,null],[13,"Added","","",7,null],[13,"Removed","","",7,null],[13,"MouseMotion","","Change in physical position of a pointing device.",7,null],[12,"delta","winit::DeviceEvent","(x, y) change in position in unspecified units.",7,null],[13,"MouseWheel","winit","Physical scroll event",7,null],[12,"delta","winit::DeviceEvent","",7,null],[13,"Motion","winit","Motion on some analog axis.  This event will be reported for all arbitrary input devices that winit supports on this platform, including mouse devices.  If the device is a mouse device then this will be reported alongside the MouseMotion event.",7,null],[12,"axis","winit::DeviceEvent","",7,null],[12,"value","","",7,null],[13,"Button","winit","",7,null],[12,"button","winit::DeviceEvent","",7,null],[12,"state","","",7,null],[13,"Key","winit","",7,null],[13,"Text","","",7,null],[12,"codepoint","winit::DeviceEvent","",7,null],[4,"TouchPhase","winit","Describes touch-screen input state.",null,null],[13,"Started","","",8,null],[13,"Moved","","",8,null],[13,"Ended","","",8,null],[13,"Cancelled","","",8,null],[4,"ElementState","","Describes the input state of a key.",null,null],[13,"Pressed","","",9,null],[13,"Released","","",9,null],[4,"MouseButton","","Describes a button of a mouse controller.",null,null],[13,"Left","","",10,null],[13,"Right","","",10,null],[13,"Middle","","",10,null],[13,"Other","","",10,null],[4,"MouseScrollDelta","","Describes a difference in the mouse scroll wheel state.",null,null],[13,"LineDelta","","Amount in lines or rows to scroll in the horizontal and vertical directions.",11,null],[13,"PixelDelta","","Amount in pixels to scroll in the horizontal and vertical direction.",11,null],[4,"VirtualKeyCode","","Symbolic name for a keyboard key.",null,null],[13,"Key1","","The '1' key over the letters.",12,null],[13,"Key2","","The '2' key over the letters.",12,null],[13,"Key3","","The '3' key over the letters.",12,null],[13,"Key4","","The '4' key over the letters.",12,null],[13,"Key5","","The '5' key over the letters.",12,null],[13,"Key6","","The '6' key over the letters.",12,null],[13,"Key7","","The '7' key over the letters.",12,null],[13,"Key8","","The '8' key over the letters.",12,null],[13,"Key9","","The '9' key over the letters.",12,null],[13,"Key0","","The '0' key over the 'O' and 'P' keys.",12,null],[13,"A","","",12,null],[13,"B","","",12,null],[13,"C","","",12,null],[13,"D","","",12,null],[13,"E","","",12,null],[13,"F","","",12,null],[13,"G","","",12,null],[13,"H","","",12,null],[13,"I","","",12,null],[13,"J","","",12,null],[13,"K","","",12,null],[13,"L","","",12,null],[13,"M","","",12,null],[13,"N","","",12,null],[13,"O","","",12,null],[13,"P","","",12,null],[13,"Q","","",12,null],[13,"R","","",12,null],[13,"S","","",12,null],[13,"T","","",12,null],[13,"U","","",12,null],[13,"V","","",12,null],[13,"W","","",12,null],[13,"X","","",12,null],[13,"Y","","",12,null],[13,"Z","","",12,null],[13,"Escape","","The Escape key, next to F1.",12,null],[13,"F1","","",12,null],[13,"F2","","",12,null],[13,"F3","","",12,null],[13,"F4","","",12,null],[13,"F5","","",12,null],[13,"F6","","",12,null],[13,"F7","","",12,null],[13,"F8","","",12,null],[13,"F9","","",12,null],[13,"F10","","",12,null],[13,"F11","","",12,null],[13,"F12","","",12,null],[13,"F13","","",12,null],[13,"F14","","",12,null],[13,"F15","","",12,null],[13,"Snapshot","","Print Screen/SysRq.",12,null],[13,"Scroll","","Scroll Lock.",12,null],[13,"Pause","","Pause/Break key, next to Scroll lock.",12,null],[13,"Insert","","`Insert`, next to Backspace.",12,null],[13,"Home","","",12,null],[13,"Delete","","",12,null],[13,"End","","",12,null],[13,"PageDown","","",12,null],[13,"PageUp","","",12,null],[13,"Left","","",12,null],[13,"Up","","",12,null],[13,"Right","","",12,null],[13,"Down","","",12,null],[13,"Back","","The Backspace key, right over Enter.",12,null],[13,"Return","","The Enter key.",12,null],[13,"Space","","The space bar.",12,null],[13,"Compose","","The \"Compose\" key on Linux.",12,null],[13,"Caret","","",12,null],[13,"Numlock","","",12,null],[13,"Numpad0","","",12,null],[13,"Numpad1","","",12,null],[13,"Numpad2","","",12,null],[13,"Numpad3","","",12,null],[13,"Numpad4","","",12,null],[13,"Numpad5","","",12,null],[13,"Numpad6","","",12,null],[13,"Numpad7","","",12,null],[13,"Numpad8","","",12,null],[13,"Numpad9","","",12,null],[13,"AbntC1","","",12,null],[13,"AbntC2","","",12,null],[13,"Add","","",12,null],[13,"Apostrophe","","",12,null],[13,"Apps","","",12,null],[13,"At","","",12,null],[13,"Ax","","",12,null],[13,"Backslash","","",12,null],[13,"Calculator","","",12,null],[13,"Capital","","",12,null],[13,"Colon","","",12,null],[13,"Comma","","",12,null],[13,"Convert","","",12,null],[13,"Decimal","","",12,null],[13,"Divide","","",12,null],[13,"Equals","","",12,null],[13,"Grave","","",12,null],[13,"Kana","","",12,null],[13,"Kanji","","",12,null],[13,"LAlt","","",12,null],[13,"LBracket","","",12,null],[13,"LControl","","",12,null],[13,"LMenu","","",12,null],[13,"LShift","","",12,null],[13,"LWin","","",12,null],[13,"Mail","","",12,null],[13,"MediaSelect","","",12,null],[13,"MediaStop","","",12,null],[13,"Minus","","",12,null],[13,"Multiply","","",12,null],[13,"Mute","","",12,null],[13,"MyComputer","","",12,null],[13,"NavigateForward","","",12,null],[13,"NavigateBackward","","",12,null],[13,"NextTrack","","",12,null],[13,"NoConvert","","",12,null],[13,"NumpadComma","","",12,null],[13,"NumpadEnter","","",12,null],[13,"NumpadEquals","","",12,null],[13,"OEM102","","",12,null],[13,"Period","","",12,null],[13,"PlayPause","","",12,null],[13,"Power","","",12,null],[13,"PrevTrack","","",12,null],[13,"RAlt","","",12,null],[13,"RBracket","","",12,null],[13,"RControl","","",12,null],[13,"RMenu","","",12,null],[13,"RShift","","",12,null],[13,"RWin","","",12,null],[13,"Semicolon","","",12,null],[13,"Slash","","",12,null],[13,"Sleep","","",12,null],[13,"Stop","","",12,null],[13,"Subtract","","",12,null],[13,"Sysrq","","",12,null],[13,"Tab","","",12,null],[13,"Underline","","",12,null],[13,"Unlabeled","","",12,null],[13,"VolumeDown","","",12,null],[13,"VolumeUp","","",12,null],[13,"Wake","","",12,null],[13,"WebBack","","",12,null],[13,"WebFavorites","","",12,null],[13,"WebForward","","",12,null],[13,"WebHome","","",12,null],[13,"WebRefresh","","",12,null],[13,"WebSearch","","",12,null],[13,"WebStop","","",12,null],[13,"Yen","","",12,null],[4,"ControlFlow","","Returned by the user callback given to the `EventsLoop::run_forever` method.",null,null],[13,"Continue","","Continue looping and waiting for events.",13,null],[13,"Break","","Break from the event loop.",13,null],[4,"CreationError","","Error that can happen while creating a window or a headless renderer.",null,null],[13,"OsError","","",14,null],[13,"NotSupported","","TODO: remove this error",14,null],[4,"MouseCursor","","Describes the appearance of the mouse cursor.",null,null],[13,"Default","","The platform-dependent default cursor.",15,null],[13,"Crosshair","","A simple crosshair.",15,null],[13,"Hand","","A hand (often used to indicate links in web browsers).",15,null],[13,"Arrow","","Self explanatory.",15,null],[13,"Move","","Indicates something is to be moved.",15,null],[13,"Text","","Indicates text that may be selected or edited.",15,null],[13,"Wait","","Program busy indicator.",15,null],[13,"Help","","Help indicator (often rendered as a \"?\")",15,null],[13,"Progress","","Progress indicator. Shows that processing is being done. But in contrast with \"Wait\" the user may still interact with the program. Often rendered as a spinning beach ball, or an arrow with a watch or hourglass.",15,null],[13,"NotAllowed","","Cursor showing that something cannot be done.",15,null],[13,"ContextMenu","","",15,null],[13,"NoneCursor","","",15,null],[13,"Cell","","",15,null],[13,"VerticalText","","",15,null],[13,"Alias","","",15,null],[13,"Copy","","",15,null],[13,"NoDrop","","",15,null],[13,"Grab","","",15,null],[13,"Grabbing","","",15,null],[13,"AllScroll","","",15,null],[13,"ZoomIn","","",15,null],[13,"ZoomOut","","",15,null],[13,"EResize","","Indicate that some edge is to be moved. For example, the 'SeResize' cursor is used when the movement starts from the south-east corner of the box.",15,null],[13,"NResize","","",15,null],[13,"NeResize","","",15,null],[13,"NwResize","","",15,null],[13,"SResize","","",15,null],[13,"SeResize","","",15,null],[13,"SwResize","","",15,null],[13,"WResize","","",15,null],[13,"EwResize","","",15,null],[13,"NsResize","","",15,null],[13,"NeswResize","","",15,null],[13,"NwseResize","","",15,null],[13,"ColResize","","",15,null],[13,"RowResize","","",15,null],[4,"CursorState","","Describes how winit handles the cursor.",null,null],[13,"Normal","","Normal cursor behavior.",16,null],[13,"Hide","","The cursor will be invisible when over the window.",16,null],[13,"Grab","","Grabs the mouse cursor. The cursor's motion will be confined to this window and the window has exclusive access to further events regarding the cursor.",16,null],[11,"from","","",2,{"i":[{"n":"ximodifierstate"}],"o":{"n":"self"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"event"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"windowevent"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"deviceevent"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"keyboardinput"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",8,null],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"touchphase"}],"o":{"n":"bool"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"touchphase"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"touch"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",9,null],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"elementstate"}],"o":{"n":"bool"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"elementstate"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",10,null],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"mousebutton"}],"o":{"n":"bool"}}],[11,"ne","","",10,{"i":[{"n":"self"},{"n":"mousebutton"}],"o":{"n":"bool"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"mousebutton"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"mousescrolldelta"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"mousescrolldelta"}],"o":{"n":"bool"}}],[11,"ne","","",11,{"i":[{"n":"self"},{"n":"mousescrolldelta"}],"o":{"n":"bool"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",12,null],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"virtualkeycode"}],"o":{"n":"bool"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"virtualkeycode"}}],[11,"default","","",2,{"o":{"n":"modifiersstate"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",2,null],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"modifiersstate"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"modifiersstate"}],"o":{"n":"bool"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"modifiersstate"}}],[11,"new","","Initializes a new `WindowBuilder` with default values.",3,{"o":{"n":"windowbuilder"}}],[11,"with_dimensions","","Requests the window to be of specific dimensions.",3,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"n":"windowbuilder"}}],[11,"with_min_dimensions","","Sets a minimum dimension size for the window",3,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"n":"windowbuilder"}}],[11,"with_max_dimensions","","Sets a maximum dimension size for the window",3,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}],"o":{"n":"windowbuilder"}}],[11,"with_title","","Requests a specific title for the window.",3,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"windowbuilder"}}],[11,"with_fullscreen","","Sets the window fullscreen state. None means a normal window, Some(MonitorId) means a fullscreen window on that specific monitor",3,{"i":[{"n":"self"},{"g":["monitorid"],"n":"option"}],"o":{"n":"windowbuilder"}}],[11,"with_maximized","","Requests maximized mode.",3,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"windowbuilder"}}],[11,"with_visibility","","Sets whether the window will be initially hidden or visible.",3,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"windowbuilder"}}],[11,"with_transparency","","Sets whether the background of the window should be transparent.",3,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"windowbuilder"}}],[11,"with_decorations","","Sets whether the window should have a border, a title bar, etc.",3,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"windowbuilder"}}],[11,"with_multitouch","","Enables multitouch.",3,{"i":[{"n":"self"}],"o":{"n":"windowbuilder"}}],[11,"build","","Builds the window.",3,{"i":[{"n":"self"},{"n":"eventsloop"}],"o":{"g":["window","creationerror"],"n":"result"}}],[11,"new","","Creates a new Window for platforms where this is appropriate.",17,{"i":[{"n":"eventsloop"}],"o":{"g":["window","creationerror"],"n":"result"}}],[11,"set_title","","Modifies the title of the window.",17,{"i":[{"n":"self"},{"n":"str"}]}],[11,"show","","Shows the window if it was hidden.",17,{"i":[{"n":"self"}]}],[11,"hide","","Hides the window if it was visible.",17,{"i":[{"n":"self"}]}],[11,"get_position","","Returns the position of the top-left hand corner of the window relative to the  top-left hand corner of the desktop.",17,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"set_position","","Modifies the position of the window.",17,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"}]}],[11,"get_inner_size","","Returns the size in pixels of the client area of the window.",17,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_inner_size_points","","Returns the size in points of the client area of the window.",17,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_inner_size_pixels","","Returns the size in pixels of the client area of the window.",17,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_outer_size","","Returns the size in pixels of the window.",17,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"set_inner_size","","Modifies the inner size of the window.",17,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"}]}],[11,"set_min_dimensions","","Sets a minimum dimension size for the window.",17,{"i":[{"n":"self"},{"n":"option"}]}],[11,"set_max_dimensions","","Sets a maximum dimension size for the window.",17,{"i":[{"n":"self"},{"n":"option"}]}],[11,"platform_display","","DEPRECATED. Gets the native platform specific display for this window. This is typically only required when integrating with other libraries that need this information.",17,null],[11,"platform_window","","DEPRECATED. Gets the native platform specific window handle. This is typically only required when integrating with other libraries that need this information.",17,null],[11,"set_cursor","","Modifies the mouse cursor of the window. Has no effect on Android.",17,{"i":[{"n":"self"},{"n":"mousecursor"}]}],[11,"hidpi_factor","","Returns the ratio between the backing framebuffer resolution and the window size in screen pixels. This is typically one for a normal display and two for a retina display.",17,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"set_cursor_position","","Changes the position of the cursor in window coordinates.",17,{"i":[{"n":"self"},{"n":"i32"},{"n":"i32"}],"o":{"n":"result"}}],[11,"set_cursor_state","","Sets how winit handles the cursor. See the documentation of `CursorState` for details.",17,{"i":[{"n":"self"},{"n":"cursorstate"}],"o":{"g":["string"],"n":"result"}}],[11,"set_maximized","","Sets the window to maximized or back",17,{"i":[{"n":"self"},{"n":"bool"}]}],[11,"set_fullscreen","","Sets the window to fullscreen or back",17,{"i":[{"n":"self"},{"g":["monitorid"],"n":"option"}]}],[11,"set_decorations","","Turn window decorations on or off.",17,{"i":[{"n":"self"},{"n":"bool"}]}],[11,"get_current_monitor","","Returns the current monitor the window is on or the primary monitor is nothing matches",17,{"i":[{"n":"self"}],"o":{"n":"monitorid"}}],[11,"id","","",17,{"i":[{"n":"self"}],"o":{"n":"windowid"}}],[11,"next","","",18,{"i":[{"n":"self"}],"o":{"g":["monitorid"],"n":"option"}}],[11,"size_hint","","",18,null],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"monitorid"}}],[11,"get_name","","Returns a human-readable name of the monitor.",19,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}],[11,"get_dimensions","","Returns the number of pixels currently displayed on the monitor.",19,null],[11,"get_position","","Returns the top-left corner position of the monitor relative to the larger full screen area.",19,null],[11,"get_hidpi_factor","","Returns the ratio between the monitor's physical pixels and logical pixels.",19,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[0,"os","","Contains traits with platform-specific methods in them.",null,null],[0,"unix","winit::os","",null,null],[4,"XNotSupported","winit::os::unix","Error returned if this system doesn't have XLib or can't create an X connection.",null,null],[13,"LibraryOpenError","","Failed to load one or several shared libraries.",20,null],[13,"XOpenDisplayFailed","","Connecting to the X server with `XOpenDisplay` failed.",20,null],[8,"EventsLoopExt","","Additional methods on `EventsLoop` that are specific to Linux.",null,null],[10,"new_x11","","Builds a new `EventsLoop` that is forced to use X11.",21,{"o":{"g":["xnotsupported"],"n":"result"}}],[10,"new_wayland","","Builds a new `EventsLoop` that is forced to use Wayland.",21,{"o":{"n":"self"}}],[10,"is_wayland","","True if the `EventsLoop` uses Wayland.",21,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_x11","","True if the `EventsLoop` uses X11.",21,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"WindowExt","","Additional methods on `Window` that are specific to Unix.",null,null],[10,"get_xlib_window","","Returns the ID of the `Window` xlib object that is used by this window.",22,{"i":[{"n":"self"}],"o":{"g":["c_ulong"],"n":"option"}}],[10,"get_xlib_display","","Returns a pointer to the `Display` object of xlib that is used by this window.",22,{"i":[{"n":"self"}],"o":{"n":"option"}}],[10,"get_xlib_screen_id","","",22,{"i":[{"n":"self"}],"o":{"g":["c_int"],"n":"option"}}],[10,"get_xlib_xconnection","","",22,{"i":[{"n":"self"}],"o":{"g":["arc"],"n":"option"}}],[10,"send_xim_spot","","",22,{"i":[{"n":"self"},{"n":"i16"},{"n":"i16"}]}],[10,"get_xcb_connection","","This function returns the underlying `xcb_connection_t` of an xlib `Display`.",22,{"i":[{"n":"self"}],"o":{"n":"option"}}],[10,"get_wayland_surface","","Returns a pointer to the `wl_surface` object of wayland that is used by this window.",22,{"i":[{"n":"self"}],"o":{"n":"option"}}],[10,"get_wayland_display","","Returns a pointer to the `wl_display` object of wayland that is used by this window.",22,{"i":[{"n":"self"}],"o":{"n":"option"}}],[10,"is_ready","","Check if the window is ready for drawing",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"WindowBuilderExt","","Additional methods on `WindowBuilder` that are specific to Unix.",null,null],[10,"with_x11_visual","","",23,null],[10,"with_x11_screen","","",23,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"windowbuilder"}}],[8,"MonitorIdExt","","Additional methods on `MonitorId` that are specific to Linux.",null,null],[10,"native_id","","Returns the inner identifier of the monitor.",24,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"new_x11","winit","",25,{"o":{"g":["xnotsupported"],"n":"result"}}],[11,"new_wayland","","",25,{"o":{"n":"self"}}],[11,"is_wayland","","",25,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_x11","","",25,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_xlib_xconnection","","",25,{"i":[{"n":"self"}],"o":{"g":["arc"],"n":"option"}}],[11,"get_xlib_window","","",17,{"i":[{"n":"self"}],"o":{"g":["c_ulong"],"n":"option"}}],[11,"get_xlib_display","","",17,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_xlib_screen_id","","",17,{"i":[{"n":"self"}],"o":{"g":["c_int"],"n":"option"}}],[11,"get_xlib_xconnection","","",17,{"i":[{"n":"self"}],"o":{"g":["arc"],"n":"option"}}],[11,"get_xcb_connection","","",17,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"send_xim_spot","","",17,{"i":[{"n":"self"},{"n":"i16"},{"n":"i16"}]}],[11,"get_wayland_surface","","",17,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_wayland_display","","",17,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"is_ready","","",17,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"with_x11_visual","","",3,null],[11,"with_x11_screen","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"windowbuilder"}}],[11,"native_id","","",19,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[6,"ScanCode","","Hardware-dependent keyboard scan code.",null,null],[6,"AxisId","","Identifier for a specific analog axis on some device.",null,null],[6,"ButtonId","","Identifier for a specific button on some device.",null,null],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"windowid"}}],[11,"eq","","",26,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"n":"bool"}}],[11,"ne","","",26,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",26,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",26,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"n":"bool"}}],[11,"le","","",26,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"n":"bool"}}],[11,"gt","","",26,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"n":"bool"}}],[11,"ge","","",26,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"n":"bool"}}],[11,"cmp","","",26,{"i":[{"n":"self"},{"n":"windowid"}],"o":{"n":"ordering"}}],[11,"hash","","",26,null],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"deviceid"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"bool"}}],[11,"ne","","",27,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",27,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",27,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"bool"}}],[11,"le","","",27,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"bool"}}],[11,"gt","","",27,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"bool"}}],[11,"ge","","",27,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"bool"}}],[11,"cmp","","",27,{"i":[{"n":"self"},{"n":"deviceid"}],"o":{"n":"ordering"}}],[11,"hash","","",27,null],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"controlflow"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"controlflow"}],"o":{"n":"bool"}}],[11,"new","","Builds a new events loop.",25,{"o":{"n":"eventsloop"}}],[11,"get_available_monitors","","Returns the list of all the monitors available on the system.",25,{"i":[{"n":"self"}],"o":{"n":"availablemonitorsiter"}}],[11,"get_primary_monitor","","Returns the primary monitor of the system.",25,{"i":[{"n":"self"}],"o":{"n":"monitorid"}}],[11,"poll_events","","Fetches all the events that are pending, calls the callback function for each of them, and returns.",25,{"i":[{"n":"self"},{"n":"f"}]}],[11,"run_forever","","Calls `callback` every time an event is received. If no event is available, sleeps the current thread and waits for an event. If the callback returns `ControlFlow::Break` then `run_forever` will immediately return.",25,{"i":[{"n":"self"},{"n":"f"}]}],[11,"create_proxy","","Creates an `EventsLoopProxy` that can be used to wake up the `EventsLoop` from another thread.",25,{"i":[{"n":"self"}],"o":{"n":"eventsloopproxy"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"eventsloopproxy"}}],[11,"wakeup","","Wake up the `EventsLoop` from which this proxy was created.",28,{"i":[{"n":"self"}],"o":{"g":["eventsloopclosed"],"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"eventsloopclosed"}}],[11,"eq","","",29,{"i":[{"n":"self"},{"n":"eventsloopclosed"}],"o":{"n":"bool"}}],[11,"hash","","",29,null],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",29,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"windowbuilder"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"creationerror"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",14,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"mousecursor"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"mousecursor"}],"o":{"n":"bool"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"cursorstate"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"cursorstate"}],"o":{"n":"bool"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"windowattributes"}}],[11,"default","","",4,{"o":{"n":"windowattributes"}}],[11,"clone","winit::os::unix","",20,{"i":[{"n":"self"}],"o":{"n":"xnotsupported"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",20,{"i":[{"n":"openerror"}],"o":{"n":"xnotsupported"}}],[11,"description","","",20,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",20,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}]],"paths":[[3,"KeyboardInput"],[3,"Touch"],[3,"ModifiersState"],[3,"WindowBuilder"],[3,"WindowAttributes"],[4,"Event"],[4,"WindowEvent"],[4,"DeviceEvent"],[4,"TouchPhase"],[4,"ElementState"],[4,"MouseButton"],[4,"MouseScrollDelta"],[4,"VirtualKeyCode"],[4,"ControlFlow"],[4,"CreationError"],[4,"MouseCursor"],[4,"CursorState"],[3,"Window"],[3,"AvailableMonitorsIter"],[3,"MonitorId"],[4,"XNotSupported"],[8,"EventsLoopExt"],[8,"WindowExt"],[8,"WindowBuilderExt"],[8,"MonitorIdExt"],[3,"EventsLoop"],[3,"WindowId"],[3,"DeviceId"],[3,"EventsLoopProxy"],[3,"EventsLoopClosed"]]};
searchIndex["x11_dl"] = {"doc":"","items":[[0,"error","x11_dl","",null,null],[3,"OpenError","x11_dl::error","",null,null],[4,"OpenErrorKind","","",null,null],[13,"Library","","",0,null],[13,"Symbol","","",0,null],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"openerror"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"detail","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"kind","","",1,{"i":[{"n":"self"}],"o":{"n":"openerrorkind"}}],[11,"new","","",1,{"i":[{"n":"openerrorkind"},{"n":"string"}],"o":{"n":"openerror"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"openerrorkind"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"openerrorkind"}],"o":{"n":"bool"}}],[11,"as_str","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[0,"xlib","x11_dl","",null,null],[3,"Xlib","x11_dl::xlib","",null,null],[12,"XActivateScreenSaver","","",2,null],[12,"XAddConnectionWatch","","",2,null],[12,"XAddExtension","","",2,null],[12,"XAddHost","","",2,null],[12,"XAddHosts","","",2,null],[12,"XAddPixel","","",2,null],[12,"XAddToExtensionList","","",2,null],[12,"XAddToSaveSet","","",2,null],[12,"XAllocClassHint","","",2,null],[12,"XAllocColor","","",2,null],[12,"XAllocColorCells","","",2,null],[12,"XAllocColorPlanes","","",2,null],[12,"XAllocIconSize","","",2,null],[12,"XAllocNamedColor","","",2,null],[12,"XAllocSizeHints","","",2,null],[12,"XAllocStandardColormap","","",2,null],[12,"XAllocWMHints","","",2,null],[12,"XAllowEvents","","",2,null],[12,"XAllPlanes","","",2,null],[12,"XAutoRepeatOff","","",2,null],[12,"XAutoRepeatOn","","",2,null],[12,"XBaseFontNameListOfFontSet","","",2,null],[12,"XBell","","",2,null],[12,"XBitmapBitOrder","","",2,null],[12,"XBitmapPad","","",2,null],[12,"XBitmapUnit","","",2,null],[12,"XBlackPixel","","",2,null],[12,"XBlackPixelOfScreen","","",2,null],[12,"XCellsOfScreen","","",2,null],[12,"XChangeActivePointerGrab","","",2,null],[12,"XChangeGC","","",2,null],[12,"XChangeKeyboardControl","","",2,null],[12,"XChangeKeyboardMapping","","",2,null],[12,"XChangePointerControl","","",2,null],[12,"XChangeProperty","","",2,null],[12,"XChangeSaveSet","","",2,null],[12,"XChangeWindowAttributes","","",2,null],[12,"XCheckIfEvent","","",2,null],[12,"XCheckMaskEvent","","",2,null],[12,"XCheckTypedEvent","","",2,null],[12,"XCheckTypedWindowEvent","","",2,null],[12,"XCheckWindowEvent","","",2,null],[12,"XCirculateSubwindows","","",2,null],[12,"XCirculateSubwindowsDown","","",2,null],[12,"XCirculateSubwindowsUp","","",2,null],[12,"XClearArea","","",2,null],[12,"XClearWindow","","",2,null],[12,"XClipBox","","",2,null],[12,"XCloseDisplay","","",2,null],[12,"XCloseIM","","",2,null],[12,"XCloseOM","","",2,null],[12,"XcmsAddColorSpace","","",2,null],[12,"XcmsAddFunctionSet","","",2,null],[12,"XcmsAllocColor","","",2,null],[12,"XcmsAllocNamedColor","","",2,null],[12,"XcmsCCCOfColormap","","",2,null],[12,"XcmsCIELabClipab","","",2,null],[12,"XcmsCIELabClipL","","",2,null],[12,"XcmsCIELabClipLab","","",2,null],[12,"XcmsCIELabQueryMaxC","","",2,null],[12,"XcmsCIELabQueryMaxL","","",2,null],[12,"XcmsCIELabQueryMaxLC","","",2,null],[12,"XcmsCIELabQueryMinL","","",2,null],[12,"XcmsCIELabToCIEXYZ","","",2,null],[12,"XcmsCIELabWhiteShiftColors","","",2,null],[12,"XcmsCIELuvClipL","","",2,null],[12,"XcmsCIELuvClipLuv","","",2,null],[12,"XcmsCIELuvClipuv","","",2,null],[12,"XcmsCIELuvQueryMaxC","","",2,null],[12,"XcmsCIELuvQueryMaxL","","",2,null],[12,"XcmsCIELuvQueryMaxLC","","",2,null],[12,"XcmsCIELuvQueryMinL","","",2,null],[12,"XcmsCIELuvToCIEuvY","","",2,null],[12,"XcmsCIELuvWhiteShiftColors","","",2,null],[12,"XcmsCIEuvYToCIELuv","","",2,null],[12,"XcmsCIEuvYToCIEXYZ","","",2,null],[12,"XcmsCIEuvYToTekHVC","","",2,null],[12,"XcmsCIExyYToCIEXYZ","","",2,null],[12,"XcmsCIEXYZToCIELab","","",2,null],[12,"XcmsCIEXYZToCIEuvY","","",2,null],[12,"XcmsCIEXYZToCIExyY","","",2,null],[12,"XcmsCIEXYZToRGBi","","",2,null],[12,"XcmsClientWhitePointOfCCC","","",2,null],[12,"XcmsConvertColors","","",2,null],[12,"XcmsCreateCCC","","",2,null],[12,"XcmsDefaultCCC","","",2,null],[12,"XcmsDisplayOfCCC","","",2,null],[12,"XcmsFormatOfPrefix","","",2,null],[12,"XcmsFreeCCC","","",2,null],[12,"XcmsLookupColor","","",2,null],[12,"XcmsPrefixOfFormat","","",2,null],[12,"XcmsQueryBlack","","",2,null],[12,"XcmsQueryBlue","","",2,null],[12,"XcmsQueryColor","","",2,null],[12,"XcmsQueryColors","","",2,null],[12,"XcmsQueryGreen","","",2,null],[12,"XcmsQueryRed","","",2,null],[12,"XcmsQueryWhite","","",2,null],[12,"XcmsRGBiToCIEXYZ","","",2,null],[12,"XcmsRGBiToRGB","","",2,null],[12,"XcmsRGBToRGBi","","",2,null],[12,"XcmsScreenNumberOfCCC","","",2,null],[12,"XcmsScreenWhitePointOfCCC","","",2,null],[12,"XcmsSetCCCOfColormap","","",2,null],[12,"XcmsSetCompressionProc","","",2,null],[12,"XcmsSetWhiteAdjustProc","","",2,null],[12,"XcmsSetWhitePoint","","",2,null],[12,"XcmsStoreColor","","",2,null],[12,"XcmsStoreColors","","",2,null],[12,"XcmsTekHVCClipC","","",2,null],[12,"XcmsTekHVCClipV","","",2,null],[12,"XcmsTekHVCClipVC","","",2,null],[12,"XcmsTekHVCQueryMaxC","","",2,null],[12,"XcmsTekHVCQueryMaxV","","",2,null],[12,"XcmsTekHVCQueryMaxVC","","",2,null],[12,"XcmsTekHVCQueryMaxVSamples","","",2,null],[12,"XcmsTekHVCQueryMinV","","",2,null],[12,"XcmsTekHVCToCIEuvY","","",2,null],[12,"XcmsTekHVCWhiteShiftColors","","",2,null],[12,"XcmsVisualOfCCC","","",2,null],[12,"XConfigureWindow","","",2,null],[12,"XConnectionNumber","","",2,null],[12,"XContextDependentDrawing","","",2,null],[12,"XContextualDrawing","","",2,null],[12,"XConvertCase","","",2,null],[12,"XConvertSelection","","",2,null],[12,"XCopyArea","","",2,null],[12,"XCopyColormapAndFree","","",2,null],[12,"XCopyGC","","",2,null],[12,"XCopyPlane","","",2,null],[12,"XCreateBitmapFromData","","",2,null],[12,"XCreateColormap","","",2,null],[12,"XCreateFontCursor","","",2,null],[12,"XCreateFontSet","","",2,null],[12,"XCreateGC","","",2,null],[12,"XCreateGlyphCursor","","",2,null],[12,"XCreateImage","","",2,null],[12,"XCreatePixmap","","",2,null],[12,"XCreatePixmapCursor","","",2,null],[12,"XCreatePixmapFromBitmapData","","",2,null],[12,"XCreateRegion","","",2,null],[12,"XCreateSimpleWindow","","",2,null],[12,"XCreateWindow","","",2,null],[12,"XDefaultColormap","","",2,null],[12,"XDefaultColormapOfScreen","","",2,null],[12,"XDefaultDepth","","",2,null],[12,"XDefaultDepthOfScreen","","",2,null],[12,"XDefaultGC","","",2,null],[12,"XDefaultGCOfScreen","","",2,null],[12,"XDefaultRootWindow","","",2,null],[12,"XDefaultScreen","","",2,null],[12,"XDefaultScreenOfDisplay","","",2,null],[12,"XDefaultString","","",2,null],[12,"XDefaultVisual","","",2,null],[12,"XDefaultVisualOfScreen","","",2,null],[12,"XDefineCursor","","",2,null],[12,"XDeleteContext","","",2,null],[12,"XDeleteModifiermapEntry","","",2,null],[12,"XDeleteProperty","","",2,null],[12,"XDestroyIC","","",2,null],[12,"XDestroyImage","","",2,null],[12,"XDestroyOC","","",2,null],[12,"XDestroyRegion","","",2,null],[12,"XDestroySubwindows","","",2,null],[12,"XDestroyWindow","","",2,null],[12,"XDirectionalDependentDrawing","","",2,null],[12,"XDisableAccessControl","","",2,null],[12,"XDisplayCells","","",2,null],[12,"XDisplayHeight","","",2,null],[12,"XDisplayHeightMM","","",2,null],[12,"XDisplayKeycodes","","",2,null],[12,"XDisplayMotionBufferSize","","",2,null],[12,"XDisplayName","","",2,null],[12,"XDisplayOfIM","","",2,null],[12,"XDisplayOfOM","","",2,null],[12,"XDisplayOfScreen","","",2,null],[12,"XDisplayPlanes","","",2,null],[12,"XDisplayString","","",2,null],[12,"XDisplayWidth","","",2,null],[12,"XDisplayWidthMM","","",2,null],[12,"XDoesBackingStore","","",2,null],[12,"XDoesSaveUnders","","",2,null],[12,"XDrawArc","","",2,null],[12,"XDrawArcs","","",2,null],[12,"XDrawImageString","","",2,null],[12,"XDrawImageString16","","",2,null],[12,"XDrawLine","","",2,null],[12,"XDrawLines","","",2,null],[12,"XDrawPoint","","",2,null],[12,"XDrawPoints","","",2,null],[12,"XDrawRectangle","","",2,null],[12,"XDrawRectangles","","",2,null],[12,"XDrawSegments","","",2,null],[12,"XDrawString","","",2,null],[12,"XDrawString16","","",2,null],[12,"XDrawText","","",2,null],[12,"XDrawText16","","",2,null],[12,"XEHeadOfExtensionList","","",2,null],[12,"XEmptyRegion","","",2,null],[12,"XEnableAccessControl","","",2,null],[12,"XEqualRegion","","",2,null],[12,"XESetBeforeFlush","","",2,null],[12,"XESetCloseDisplay","","",2,null],[12,"XESetCopyEventCookie","","",2,null],[12,"XESetCopyGC","","",2,null],[12,"XESetCreateFont","","",2,null],[12,"XESetCreateGC","","",2,null],[12,"XESetError","","",2,null],[12,"XESetErrorString","","",2,null],[12,"XESetEventToWire","","",2,null],[12,"XESetFlushGC","","",2,null],[12,"XESetFreeFont","","",2,null],[12,"XESetFreeGC","","",2,null],[12,"XESetPrintErrorValues","","",2,null],[12,"XESetWireToError","","",2,null],[12,"XESetWireToEvent","","",2,null],[12,"XESetWireToEventCookie","","",2,null],[12,"XEventMaskOfScreen","","",2,null],[12,"XEventsQueued","","",2,null],[12,"XExtendedMaxRequestSize","","",2,null],[12,"XExtentsOfFontSet","","",2,null],[12,"XFetchBuffer","","",2,null],[12,"XFetchBytes","","",2,null],[12,"XFetchName","","",2,null],[12,"XFillArc","","",2,null],[12,"XFillArcs","","",2,null],[12,"XFillPolygon","","",2,null],[12,"XFillRectangle","","",2,null],[12,"XFillRectangles","","",2,null],[12,"XFilterEvent","","",2,null],[12,"XFindContext","","",2,null],[12,"XFindOnExtensionList","","",2,null],[12,"XFlush","","",2,null],[12,"XFlushGC","","",2,null],[12,"XFontsOfFontSet","","",2,null],[12,"XForceScreenSaver","","",2,null],[12,"XFree","","",2,null],[12,"XFreeColormap","","",2,null],[12,"XFreeColors","","",2,null],[12,"XFreeCursor","","",2,null],[12,"XFreeEventData","","",2,null],[12,"XFreeExtensionList","","",2,null],[12,"XFreeFont","","",2,null],[12,"XFreeFontInfo","","",2,null],[12,"XFreeFontNames","","",2,null],[12,"XFreeFontPath","","",2,null],[12,"XFreeFontSet","","",2,null],[12,"XFreeGC","","",2,null],[12,"XFreeModifiermap","","",2,null],[12,"XFreePixmap","","",2,null],[12,"XFreeStringList","","",2,null],[12,"XGContextFromGC","","",2,null],[12,"XGeometry","","",2,null],[12,"XGetAtomName","","",2,null],[12,"XGetAtomNames","","",2,null],[12,"XGetClassHint","","",2,null],[12,"XGetCommand","","",2,null],[12,"XGetDefault","","",2,null],[12,"XGetErrorDatabaseText","","",2,null],[12,"XGetErrorText","","",2,null],[12,"XGetEventData","","",2,null],[12,"XGetFontPath","","",2,null],[12,"XGetFontProperty","","",2,null],[12,"XGetGCValues","","",2,null],[12,"XGetGeometry","","",2,null],[12,"XGetIconName","","",2,null],[12,"XGetIconSizes","","",2,null],[12,"XGetImage","","",2,null],[12,"XGetInputFocus","","",2,null],[12,"XGetKeyboardControl","","",2,null],[12,"XGetKeyboardMapping","","",2,null],[12,"XGetModifierMapping","","",2,null],[12,"XGetMotionEvents","","",2,null],[12,"XGetNormalHints","","",2,null],[12,"XGetPixel","","",2,null],[12,"XGetPointerControl","","",2,null],[12,"XGetPointerMapping","","",2,null],[12,"XGetRGBColormaps","","",2,null],[12,"XGetScreenSaver","","",2,null],[12,"XGetSelectionOwner","","",2,null],[12,"XGetSizeHints","","",2,null],[12,"XGetStandardColormap","","",2,null],[12,"XGetSubImage","","",2,null],[12,"XGetTextProperty","","",2,null],[12,"XGetTransientForHint","","",2,null],[12,"XGetVisualInfo","","",2,null],[12,"XGetWindowAttributes","","",2,null],[12,"XGetWindowProperty","","",2,null],[12,"XGetWMClientMachine","","",2,null],[12,"XGetWMColormapWindows","","",2,null],[12,"XGetWMHints","","",2,null],[12,"XGetWMIconName","","",2,null],[12,"XGetWMName","","",2,null],[12,"XGetWMNormalHints","","",2,null],[12,"XGetWMProtocols","","",2,null],[12,"XGetWMSizeHints","","",2,null],[12,"XGetZoomHints","","",2,null],[12,"XGrabButton","","",2,null],[12,"XGrabKey","","",2,null],[12,"XGrabKeyboard","","",2,null],[12,"XGrabPointer","","",2,null],[12,"XGrabServer","","",2,null],[12,"XHeightMMOfScreen","","",2,null],[12,"XHeightOfScreen","","",2,null],[12,"XIconifyWindow","","",2,null],[12,"XIfEvent","","",2,null],[12,"XImageByteOrder","","",2,null],[12,"XIMOfIC","","",2,null],[12,"XInitExtension","","",2,null],[12,"XInitImage","","",2,null],[12,"XInitThreads","","",2,null],[12,"XInsertModifiermapEntry","","",2,null],[12,"XInstallColormap","","",2,null],[12,"XInternalConnectionNumbers","","",2,null],[12,"XInternAtom","","",2,null],[12,"XInternAtoms","","",2,null],[12,"XIntersectRegion","","",2,null],[12,"XkbAddDeviceLedInfo","","",2,null],[12,"XkbAddGeomColor","","",2,null],[12,"XkbAddGeomDoodad","","",2,null],[12,"XkbAddGeomKey","","",2,null],[12,"XkbAddGeomKeyAlias","","",2,null],[12,"XkbAddGeomOutline","","",2,null],[12,"XkbAddGeomOverlay","","",2,null],[12,"XkbAddGeomOverlayKey","","",2,null],[12,"XkbAddGeomOverlayRow","","",2,null],[12,"XkbAddGeomProperty","","",2,null],[12,"XkbAddGeomRow","","",2,null],[12,"XkbAddGeomSection","","",2,null],[12,"XkbAddGeomShape","","",2,null],[12,"XkbAddKeyType","","",2,null],[12,"XkbAllocClientMap","","",2,null],[12,"XkbAllocCompatMap","","",2,null],[12,"XkbAllocControls","","",2,null],[12,"XkbAllocDeviceInfo","","",2,null],[12,"XkbAllocGeomColors","","",2,null],[12,"XkbAllocGeomDoodads","","",2,null],[12,"XkbAllocGeometry","","",2,null],[12,"XkbAllocGeomKeyAliases","","",2,null],[12,"XkbAllocGeomKeys","","",2,null],[12,"XkbAllocGeomOutlines","","",2,null],[12,"XkbAllocGeomOverlayKeys","","",2,null],[12,"XkbAllocGeomOverlayRows","","",2,null],[12,"XkbAllocGeomOverlays","","",2,null],[12,"XkbAllocGeomPoints","","",2,null],[12,"XkbAllocGeomProps","","",2,null],[12,"XkbAllocGeomRows","","",2,null],[12,"XkbAllocGeomSectionDoodads","","",2,null],[12,"XkbAllocGeomSections","","",2,null],[12,"XkbAllocGeomShapes","","",2,null],[12,"XkbAllocIndicatorMaps","","",2,null],[12,"XkbAllocKeyboard","","",2,null],[12,"XkbAllocNames","","",2,null],[12,"XkbAllocServerMap","","",2,null],[12,"XkbApplyCompatMapToKey","","",2,null],[12,"XkbApplyVirtualModChanges","","",2,null],[12,"XkbBell","","",2,null],[12,"XkbBellEvent","","",2,null],[12,"XkbChangeDeviceInfo","","",2,null],[12,"XkbChangeEnabledControls","","",2,null],[12,"XkbChangeKeycodeRange","","",2,null],[12,"XkbChangeMap","","",2,null],[12,"XkbChangeNames","","",2,null],[12,"XkbChangeTypesOfKey","","",2,null],[12,"XkbComputeEffectiveMap","","",2,null],[12,"XkbComputeRowBounds","","",2,null],[12,"XkbComputeSectionBounds","","",2,null],[12,"XkbComputeShapeBounds","","",2,null],[12,"XkbComputeShapeTop","","",2,null],[12,"XkbCopyKeyType","","",2,null],[12,"XkbCopyKeyTypes","","",2,null],[12,"XkbDeviceBell","","",2,null],[12,"XkbDeviceBellEvent","","",2,null],[12,"XkbFindOverlayForKey","","",2,null],[12,"XkbForceBell","","",2,null],[12,"XkbForceDeviceBell","","",2,null],[12,"XkbFreeClientMap","","",2,null],[12,"XkbFreeCompatMap","","",2,null],[12,"XkbFreeComponentList","","",2,null],[12,"XkbFreeControls","","",2,null],[12,"XkbFreeDeviceInfo","","",2,null],[12,"XkbFreeGeomColors","","",2,null],[12,"XkbFreeGeomDoodads","","",2,null],[12,"XkbFreeGeometry","","",2,null],[12,"XkbFreeGeomKeyAliases","","",2,null],[12,"XkbFreeGeomKeys","","",2,null],[12,"XkbFreeGeomOutlines","","",2,null],[12,"XkbFreeGeomOverlayKeys","","",2,null],[12,"XkbFreeGeomOverlayRows","","",2,null],[12,"XkbFreeGeomOverlays","","",2,null],[12,"XkbFreeGeomPoints","","",2,null],[12,"XkbFreeGeomProperties","","",2,null],[12,"XkbFreeGeomRows","","",2,null],[12,"XkbFreeGeomSections","","",2,null],[12,"XkbFreeGeomShapes","","",2,null],[12,"XkbFreeIndicatorMaps","","",2,null],[12,"XkbFreeKeyboard","","",2,null],[12,"XkbFreeNames","","",2,null],[12,"XkbFreeServerMap","","",2,null],[12,"XkbGetAutoRepeatRate","","",2,null],[12,"XkbGetAutoResetControls","","",2,null],[12,"XkbGetCompatMap","","",2,null],[12,"XkbGetControls","","",2,null],[12,"XkbGetDetectableAutoRepeat","","",2,null],[12,"XkbGetDeviceButtonActions","","",2,null],[12,"XkbGetDeviceInfo","","",2,null],[12,"XkbGetDeviceInfoChanges","","",2,null],[12,"XkbGetDeviceLedInfo","","",2,null],[12,"XkbGetGeometry","","",2,null],[12,"XkbGetIndicatorMap","","",2,null],[12,"XkbGetIndicatorState","","",2,null],[12,"XkbGetKeyActions","","",2,null],[12,"XkbGetKeyBehaviors","","",2,null],[12,"XkbGetKeyboard","","",2,null],[12,"XkbGetKeyboardByName","","",2,null],[12,"XkbGetKeyExplicitComponents","","",2,null],[12,"XkbGetKeyModifierMap","","",2,null],[12,"XkbGetKeySyms","","",2,null],[12,"XkbGetKeyTypes","","",2,null],[12,"XkbGetKeyVirtualModMap","","",2,null],[12,"XkbGetMap","","",2,null],[12,"XkbGetMapChanges","","",2,null],[12,"XkbGetNamedDeviceIndicator","","",2,null],[12,"XkbGetNamedGeometry","","",2,null],[12,"XkbGetNamedIndicator","","",2,null],[12,"XkbGetNames","","",2,null],[12,"XkbGetPerClientControls","","",2,null],[12,"XkbGetState","","",2,null],[12,"XkbGetUpdatedMap","","",2,null],[12,"XkbGetVirtualMods","","",2,null],[12,"XkbGetXlibControls","","",2,null],[12,"XkbIgnoreExtension","","",2,null],[12,"XkbInitCanonicalKeyTypes","","",2,null],[12,"XkbKeycodeToKeysym","","",2,null],[12,"XkbKeysymToModifiers","","",2,null],[12,"XkbKeyTypesForCoreSymbols","","",2,null],[12,"XkbLatchGroup","","",2,null],[12,"XkbLatchModifiers","","",2,null],[12,"XkbLibraryVersion","","",2,null],[12,"XkbListComponents","","",2,null],[12,"XkbLockGroup","","",2,null],[12,"XkbLockModifiers","","",2,null],[12,"XkbLookupKeyBinding","","",2,null],[12,"XkbLookupKeySym","","",2,null],[12,"XkbNoteControlsChanges","","",2,null],[12,"XkbNoteDeviceChanges","","",2,null],[12,"XkbNoteMapChanges","","",2,null],[12,"XkbNoteNameChanges","","",2,null],[12,"XkbOpenDisplay","","",2,null],[12,"XkbQueryExtension","","",2,null],[12,"XkbRefreshKeyboardMapping","","",2,null],[12,"XkbResizeDeviceButtonActions","","",2,null],[12,"XkbResizeKeyActions","","",2,null],[12,"XkbResizeKeySyms","","",2,null],[12,"XkbResizeKeyType","","",2,null],[12,"XkbSelectEventDetails","","",2,null],[12,"XkbSelectEvents","","",2,null],[12,"XkbSetAtomFuncs","","",2,null],[12,"XkbSetAutoRepeatRate","","",2,null],[12,"XkbSetAutoResetControls","","",2,null],[12,"XkbSetCompatMap","","",2,null],[12,"XkbSetControls","","",2,null],[12,"XkbSetDebuggingFlags","","",2,null],[12,"XkbSetDetectableAutoRepeat","","",2,null],[12,"XkbSetDeviceButtonActions","","",2,null],[12,"XkbSetDeviceInfo","","",2,null],[12,"XkbSetDeviceLedInfo","","",2,null],[12,"XkbSetGeometry","","",2,null],[12,"XkbSetIgnoreLockMods","","",2,null],[12,"XkbSetIndicatorMap","","",2,null],[12,"XkbSetMap","","",2,null],[12,"XkbSetNamedDeviceIndicator","","",2,null],[12,"XkbSetNamedIndicator","","",2,null],[12,"XkbSetNames","","",2,null],[12,"XkbSetPerClientControls","","",2,null],[12,"XkbSetServerInternalMods","","",2,null],[12,"XkbSetXlibControls","","",2,null],[12,"XkbToControl","","",2,null],[12,"XkbTranslateKeyCode","","",2,null],[12,"XkbTranslateKeySym","","",2,null],[12,"XkbUpdateActionVirtualMods","","",2,null],[12,"XkbUpdateKeyTypeVirtualMods","","",2,null],[12,"XkbUpdateMapFromCore","","",2,null],[12,"XkbUseExtension","","",2,null],[12,"XkbVirtualModsToReal","","",2,null],[12,"XkbXlibControlsImplemented","","",2,null],[12,"XKeycodeToKeysym","","",2,null],[12,"XKeysymToKeycode","","",2,null],[12,"XKeysymToString","","",2,null],[12,"XKillClient","","",2,null],[12,"XLastKnownRequestProcessed","","",2,null],[12,"XListDepths","","",2,null],[12,"XListExtensions","","",2,null],[12,"XListFonts","","",2,null],[12,"XListFontsWithInfo","","",2,null],[12,"XListHosts","","",2,null],[12,"XListInstalledColormaps","","",2,null],[12,"XListPixmapFormats","","",2,null],[12,"XListProperties","","",2,null],[12,"XLoadFont","","",2,null],[12,"XLoadQueryFont","","",2,null],[12,"XLocaleOfFontSet","","",2,null],[12,"XLocaleOfIM","","",2,null],[12,"XLocaleOfOM","","",2,null],[12,"XLockDisplay","","",2,null],[12,"XLookupColor","","",2,null],[12,"XLookupKeysym","","",2,null],[12,"XLookupString","","",2,null],[12,"XLowerWindow","","",2,null],[12,"XMapRaised","","",2,null],[12,"XMapSubwindows","","",2,null],[12,"XMapWindow","","",2,null],[12,"XMaskEvent","","",2,null],[12,"XMatchVisualInfo","","",2,null],[12,"XMaxCmapsOfScreen","","",2,null],[12,"XMaxRequestSize","","",2,null],[12,"XmbDrawImageString","","",2,null],[12,"XmbDrawString","","",2,null],[12,"XmbDrawText","","",2,null],[12,"XmbLookupString","","",2,null],[12,"XmbResetIC","","",2,null],[12,"XmbSetWMProperties","","",2,null],[12,"XmbTextEscapement","","",2,null],[12,"XmbTextExtents","","",2,null],[12,"XmbTextListToTextProperty","","",2,null],[12,"XmbTextPerCharExtents","","",2,null],[12,"XmbTextPropertyToTextList","","",2,null],[12,"XMinCmapsOfScreen","","",2,null],[12,"XMoveResizeWindow","","",2,null],[12,"XMoveWindow","","",2,null],[12,"XNewModifiermap","","",2,null],[12,"XNextEvent","","",2,null],[12,"XNextRequest","","",2,null],[12,"XNoOp","","",2,null],[12,"XOffsetRegion","","",2,null],[12,"XOMOfOC","","",2,null],[12,"XOpenDisplay","","",2,null],[12,"XOpenIM","","",2,null],[12,"XOpenOM","","",2,null],[12,"XParseColor","","",2,null],[12,"XParseGeometry","","",2,null],[12,"XPeekEvent","","",2,null],[12,"XPeekIfEvent","","",2,null],[12,"XPending","","",2,null],[12,"Xpermalloc","","",2,null],[12,"XPlanesOfScreen","","",2,null],[12,"XPointInRegion","","",2,null],[12,"XPolygonRegion","","",2,null],[12,"XProcessInternalConnection","","",2,null],[12,"XProtocolRevision","","",2,null],[12,"XProtocolVersion","","",2,null],[12,"XPutBackEvent","","",2,null],[12,"XPutImage","","",2,null],[12,"XPutPixel","","",2,null],[12,"XQLength","","",2,null],[12,"XQueryBestCursor","","",2,null],[12,"XQueryBestSize","","",2,null],[12,"XQueryBestStipple","","",2,null],[12,"XQueryBestTile","","",2,null],[12,"XQueryColor","","",2,null],[12,"XQueryColors","","",2,null],[12,"XQueryExtension","","",2,null],[12,"XQueryFont","","",2,null],[12,"XQueryKeymap","","",2,null],[12,"XQueryPointer","","",2,null],[12,"XQueryTextExtents","","",2,null],[12,"XQueryTextExtents16","","",2,null],[12,"XQueryTree","","",2,null],[12,"XRaiseWindow","","",2,null],[12,"XReadBitmapFile","","",2,null],[12,"XReadBitmapFileData","","",2,null],[12,"XRebindKeysym","","",2,null],[12,"XRecolorCursor","","",2,null],[12,"XReconfigureWMWindow","","",2,null],[12,"XRectInRegion","","",2,null],[12,"XRefreshKeyboardMapping","","",2,null],[12,"XRegisterIMInstantiateCallback","","",2,null],[12,"XRemoveConnectionWatch","","",2,null],[12,"XRemoveFromSaveSet","","",2,null],[12,"XRemoveHost","","",2,null],[12,"XRemoveHosts","","",2,null],[12,"XReparentWindow","","",2,null],[12,"XResetScreenSaver","","",2,null],[12,"XResizeWindow","","",2,null],[12,"XResourceManagerString","","",2,null],[12,"XRestackWindows","","",2,null],[12,"XrmCombineDatabase","","",2,null],[12,"XrmCombineFileDatabase","","",2,null],[12,"XrmDestroyDatabase","","",2,null],[12,"XrmEnumerateDatabase","","",2,null],[12,"XrmGetDatabase","","",2,null],[12,"XrmGetFileDatabase","","",2,null],[12,"XrmGetResource","","",2,null],[12,"XrmGetStringDatabase","","",2,null],[12,"XrmInitialize","","",2,null],[12,"XrmLocaleOfDatabase","","",2,null],[12,"XrmMergeDatabases","","",2,null],[12,"XrmParseCommand","","",2,null],[12,"XrmPermStringToQuark","","",2,null],[12,"XrmPutFileDatabase","","",2,null],[12,"XrmPutLineResource","","",2,null],[12,"XrmPutResource","","",2,null],[12,"XrmPutStringResource","","",2,null],[12,"XrmQGetResource","","",2,null],[12,"XrmQGetSearchList","","",2,null],[12,"XrmQGetSearchResource","","",2,null],[12,"XrmQPutResource","","",2,null],[12,"XrmQPutStringResource","","",2,null],[12,"XrmQuarkToString","","",2,null],[12,"XrmSetDatabase","","",2,null],[12,"XrmStringToBindingQuarkList","","",2,null],[12,"XrmStringToQuark","","",2,null],[12,"XrmStringToQuarkList","","",2,null],[12,"XrmUniqueQuark","","",2,null],[12,"XRootWindow","","",2,null],[12,"XRootWindowOfScreen","","",2,null],[12,"XRotateBuffers","","",2,null],[12,"XRotateWindowProperties","","",2,null],[12,"XSaveContext","","",2,null],[12,"XScreenCount","","",2,null],[12,"XScreenNumberOfScreen","","",2,null],[12,"XScreenOfDisplay","","",2,null],[12,"XScreenResourceString","","",2,null],[12,"XSelectInput","","",2,null],[12,"XSendEvent","","",2,null],[12,"XServerVendor","","",2,null],[12,"XSetAccessControl","","",2,null],[12,"XSetAfterFunction","","",2,null],[12,"XSetArcMode","","",2,null],[12,"XSetAuthorization","","",2,null],[12,"XSetBackground","","",2,null],[12,"XSetClassHint","","",2,null],[12,"XSetClipMask","","",2,null],[12,"XSetClipOrigin","","",2,null],[12,"XSetClipRectangles","","",2,null],[12,"XSetCloseDownMode","","",2,null],[12,"XSetCommand","","",2,null],[12,"XSetDashes","","",2,null],[12,"XSetErrorHandler","","",2,null],[12,"XSetFillRule","","",2,null],[12,"XSetFillStyle","","",2,null],[12,"XSetFont","","",2,null],[12,"XSetFontPath","","",2,null],[12,"XSetForeground","","",2,null],[12,"XSetFunction","","",2,null],[12,"XSetGraphicsExposures","","",2,null],[12,"XSetICFocus","","",2,null],[12,"XSetIconName","","",2,null],[12,"XSetIconSizes","","",2,null],[12,"XSetInputFocus","","",2,null],[12,"XSetIOErrorHandler","","",2,null],[12,"XSetLineAttributes","","",2,null],[12,"XSetLocaleModifiers","","",2,null],[12,"XSetModifierMapping","","",2,null],[12,"XSetNormalHints","","",2,null],[12,"XSetPlaneMask","","",2,null],[12,"XSetPointerMapping","","",2,null],[12,"XSetRegion","","",2,null],[12,"XSetRGBColormaps","","",2,null],[12,"XSetScreenSaver","","",2,null],[12,"XSetSelectionOwner","","",2,null],[12,"XSetSizeHints","","",2,null],[12,"XSetStandardColormap","","",2,null],[12,"XSetStandardProperties","","",2,null],[12,"XSetState","","",2,null],[12,"XSetStipple","","",2,null],[12,"XSetSubwindowMode","","",2,null],[12,"XSetTextProperty","","",2,null],[12,"XSetTile","","",2,null],[12,"XSetTransientForHint","","",2,null],[12,"XSetTSOrigin","","",2,null],[12,"XSetWindowBackground","","",2,null],[12,"XSetWindowBackgroundPixmap","","",2,null],[12,"XSetWindowBorder","","",2,null],[12,"XSetWindowBorderPixmap","","",2,null],[12,"XSetWindowBorderWidth","","",2,null],[12,"XSetWindowColormap","","",2,null],[12,"XSetWMClientMachine","","",2,null],[12,"XSetWMColormapWindows","","",2,null],[12,"XSetWMHints","","",2,null],[12,"XSetWMIconName","","",2,null],[12,"XSetWMName","","",2,null],[12,"XSetWMNormalHints","","",2,null],[12,"XSetWMProperties","","",2,null],[12,"XSetWMProtocols","","",2,null],[12,"XSetWMSizeHints","","",2,null],[12,"XSetZoomHints","","",2,null],[12,"XShrinkRegion","","",2,null],[12,"XStoreBuffer","","",2,null],[12,"XStoreBytes","","",2,null],[12,"XStoreColor","","",2,null],[12,"XStoreColors","","",2,null],[12,"XStoreName","","",2,null],[12,"XStoreNamedColor","","",2,null],[12,"XStringListToTextProperty","","",2,null],[12,"XStringToKeysym","","",2,null],[12,"XSubImage","","",2,null],[12,"XSubtractRegion","","",2,null],[12,"XSupportsLocale","","",2,null],[12,"XSync","","",2,null],[12,"XSynchronize","","",2,null],[12,"XTextExtents","","",2,null],[12,"XTextExtents16","","",2,null],[12,"XTextPropertyToStringList","","",2,null],[12,"XTextWidth","","",2,null],[12,"XTextWidth16","","",2,null],[12,"XTranslateCoordinates","","",2,null],[12,"XUndefineCursor","","",2,null],[12,"XUngrabButton","","",2,null],[12,"XUngrabKey","","",2,null],[12,"XUngrabKeyboard","","",2,null],[12,"XUngrabPointer","","",2,null],[12,"XUngrabServer","","",2,null],[12,"XUninstallColormap","","",2,null],[12,"XUnionRectWithRegion","","",2,null],[12,"XUnionRegion","","",2,null],[12,"XUnloadFont","","",2,null],[12,"XUnlockDisplay","","",2,null],[12,"XUnmapSubwindows","","",2,null],[12,"XUnmapWindow","","",2,null],[12,"XUnregisterIMInstantiateCallback","","",2,null],[12,"XUnsetICFocus","","",2,null],[12,"Xutf8DrawImageString","","",2,null],[12,"Xutf8DrawString","","",2,null],[12,"Xutf8DrawText","","",2,null],[12,"Xutf8LookupString","","",2,null],[12,"Xutf8ResetIC","","",2,null],[12,"Xutf8SetWMProperties","","",2,null],[12,"Xutf8TextEscapement","","",2,null],[12,"Xutf8TextExtents","","",2,null],[12,"Xutf8TextListToTextProperty","","",2,null],[12,"Xutf8TextPerCharExtents","","",2,null],[12,"Xutf8TextPropertyToTextList","","",2,null],[12,"XVendorRelease","","",2,null],[12,"XVisualIDFromVisual","","",2,null],[12,"XWarpPointer","","",2,null],[12,"XwcDrawImageString","","",2,null],[12,"XwcDrawString","","",2,null],[12,"XwcDrawText","","",2,null],[12,"XwcFreeStringList","","",2,null],[12,"XwcLookupString","","",2,null],[12,"XwcResetIC","","",2,null],[12,"XwcTextEscapement","","",2,null],[12,"XwcTextExtents","","",2,null],[12,"XwcTextListToTextProperty","","",2,null],[12,"XwcTextPerCharExtents","","",2,null],[12,"XwcTextPropertyToTextList","","",2,null],[12,"XWhitePixel","","",2,null],[12,"XWhitePixelOfScreen","","",2,null],[12,"XWidthMMOfScreen","","",2,null],[12,"XWidthOfScreen","","",2,null],[12,"XWindowEvent","","",2,null],[12,"XWithdrawWindow","","",2,null],[12,"XWMGeometry","","",2,null],[12,"XWriteBitmapFile","","",2,null],[12,"XXorRegion","","",2,null],[12,"XCreateIC","","",2,null],[12,"XCreateOC","","",2,null],[12,"XGetICValues","","",2,null],[12,"XGetIMValues","","",2,null],[12,"XGetOCValues","","",2,null],[12,"XGetOMValues","","",2,null],[12,"XSetICValues","","",2,null],[12,"XSetIMValues","","",2,null],[12,"XSetOCValues","","",2,null],[12,"XSetOMValues","","",2,null],[12,"XVaCreateNestedList","","",2,null],[3,"_XcmsCCC","","",null,null],[3,"XcmsColor","","",null,null],[3,"_XcmsColorSpace","","",null,null],[3,"_XcmsFunctionSet","","",null,null],[3,"_XkbAction","","",null,null],[3,"_XkbBounds","","",null,null],[3,"_XkbChanges","","",null,null],[3,"_XkbClientMapRec","","",null,null],[3,"_XkbColor","","",null,null],[3,"_XkbComponentList","","",null,null],[3,"_XkbComponentNames","","",null,null],[3,"_XkbControls","","",null,null],[3,"_XkbControlsChanges","","",null,null],[3,"_XkbControlsNotify","","",null,null],[3,"_XkbDeviceChanges","","",null,null],[3,"_XkbDeviceInfo","","",null,null],[3,"_XkbDeviceLedInfo","","",null,null],[3,"_XkbDoodad","","",null,null],[3,"_XkbExtensionDeviceNotify","","",null,null],[3,"_XkbGeometry","","",null,null],[3,"_XkbGeometrySizes","","",null,null],[3,"_XkbIndicatorMapRec","","",null,null],[3,"_XkbKey","","",null,null],[3,"_XkbKeyType","","",null,null],[3,"_XkbMapChanges","","",null,null],[3,"_XkbMods","","",null,null],[3,"_XkbNameChanges","","",null,null],[3,"_XkbNamesNotify","","",null,null],[3,"_XkbOutline","","",null,null],[3,"_XkbOverlay","","",null,null],[3,"_XkbOverlayKey","","",null,null],[3,"_XkbOverlayRow","","",null,null],[3,"_XkbProperty","","",null,null],[3,"_XkbRow","","",null,null],[3,"_XkbSection","","",null,null],[3,"_XkbServerMapRec","","",null,null],[3,"_XkbShape","","",null,null],[3,"_XkbStateRec","","",null,null],[3,"_XkbSymInterpretRec","","",null,null],[3,"XAnyEvent","","",null,null],[12,"type_","","",3,null],[12,"serial","","",3,null],[12,"send_event","","",3,null],[12,"display","","",3,null],[12,"window","","",3,null],[3,"XButtonEvent","","",null,null],[12,"type_","","",4,null],[12,"serial","","",4,null],[12,"send_event","","",4,null],[12,"display","","",4,null],[12,"window","","",4,null],[12,"root","","",4,null],[12,"subwindow","","",4,null],[12,"time","","",4,null],[12,"x","","",4,null],[12,"y","","",4,null],[12,"x_root","","",4,null],[12,"y_root","","",4,null],[12,"state","","",4,null],[12,"button","","",4,null],[12,"same_screen","","",4,null],[3,"XCirculateEvent","","",null,null],[12,"type_","","",5,null],[12,"serial","","",5,null],[12,"send_event","","",5,null],[12,"display","","",5,null],[12,"event","","",5,null],[12,"window","","",5,null],[12,"place","","",5,null],[3,"XCirculateRequestEvent","","",null,null],[12,"type_","","",6,null],[12,"serial","","",6,null],[12,"send_event","","",6,null],[12,"display","","",6,null],[12,"parent","","",6,null],[12,"window","","",6,null],[12,"place","","",6,null],[3,"XClientMessageEvent","","",null,null],[12,"type_","","",7,null],[12,"serial","","",7,null],[12,"send_event","","",7,null],[12,"display","","",7,null],[12,"window","","",7,null],[12,"message_type","","",7,null],[12,"format","","",7,null],[12,"data","","",7,null],[3,"XColormapEvent","","",null,null],[12,"type_","","",8,null],[12,"serial","","",8,null],[12,"send_event","","",8,null],[12,"display","","",8,null],[12,"window","","",8,null],[12,"colormap","","",8,null],[12,"new","","",8,null],[12,"state","","",8,null],[3,"XConfigureEvent","","",null,null],[12,"type_","","",9,null],[12,"serial","","",9,null],[12,"send_event","","",9,null],[12,"display","","",9,null],[12,"event","","",9,null],[12,"window","","",9,null],[12,"x","","",9,null],[12,"y","","",9,null],[12,"width","","",9,null],[12,"height","","",9,null],[12,"border_width","","",9,null],[12,"above","","",9,null],[12,"override_redirect","","",9,null],[3,"XConfigureRequestEvent","","",null,null],[12,"type_","","",10,null],[12,"serial","","",10,null],[12,"send_event","","",10,null],[12,"display","","",10,null],[12,"parent","","",10,null],[12,"window","","",10,null],[12,"x","","",10,null],[12,"y","","",10,null],[12,"width","","",10,null],[12,"height","","",10,null],[12,"border_width","","",10,null],[12,"above","","",10,null],[12,"detail","","",10,null],[12,"value_mask","","",10,null],[3,"XCreateWindowEvent","","",null,null],[12,"type_","","",11,null],[12,"serial","","",11,null],[12,"send_event","","",11,null],[12,"display","","",11,null],[12,"parent","","",11,null],[12,"window","","",11,null],[12,"x","","",11,null],[12,"y","","",11,null],[12,"width","","",11,null],[12,"height","","",11,null],[12,"border_width","","",11,null],[12,"override_redirect","","",11,null],[3,"XCrossingEvent","","",null,null],[12,"type_","","",12,null],[12,"serial","","",12,null],[12,"send_event","","",12,null],[12,"display","","",12,null],[12,"window","","",12,null],[12,"root","","",12,null],[12,"subwindow","","",12,null],[12,"time","","",12,null],[12,"x","","",12,null],[12,"y","","",12,null],[12,"x_root","","",12,null],[12,"y_root","","",12,null],[12,"mode","","",12,null],[12,"detail","","",12,null],[12,"same_screen","","",12,null],[12,"focus","","",12,null],[12,"state","","",12,null],[3,"XDestroyWindowEvent","","",null,null],[12,"type_","","",13,null],[12,"serial","","",13,null],[12,"send_event","","",13,null],[12,"display","","",13,null],[12,"event","","",13,null],[12,"window","","",13,null],[3,"XErrorEvent","","",null,null],[12,"type_","","",14,null],[12,"display","","",14,null],[12,"resourceid","","",14,null],[12,"serial","","",14,null],[12,"error_code","","",14,null],[12,"request_code","","",14,null],[12,"minor_code","","",14,null],[3,"XExposeEvent","","",null,null],[12,"type_","","",15,null],[12,"serial","","",15,null],[12,"send_event","","",15,null],[12,"display","","",15,null],[12,"window","","",15,null],[12,"x","","",15,null],[12,"y","","",15,null],[12,"width","","",15,null],[12,"height","","",15,null],[12,"count","","",15,null],[3,"XFocusChangeEvent","","",null,null],[12,"type_","","",16,null],[12,"serial","","",16,null],[12,"send_event","","",16,null],[12,"display","","",16,null],[12,"window","","",16,null],[12,"mode","","",16,null],[12,"detail","","",16,null],[3,"XGraphicsExposeEvent","","",null,null],[12,"type_","","",17,null],[12,"serial","","",17,null],[12,"send_event","","",17,null],[12,"display","","",17,null],[12,"drawable","","",17,null],[12,"x","","",17,null],[12,"y","","",17,null],[12,"width","","",17,null],[12,"height","","",17,null],[12,"count","","",17,null],[12,"major_code","","",17,null],[12,"minor_code","","",17,null],[3,"XGravityEvent","","",null,null],[12,"type_","","",18,null],[12,"serial","","",18,null],[12,"send_event","","",18,null],[12,"display","","",18,null],[12,"event","","",18,null],[12,"window","","",18,null],[12,"x","","",18,null],[12,"y","","",18,null],[3,"XKeyEvent","","",null,null],[12,"type_","","",19,null],[12,"serial","","",19,null],[12,"send_event","","",19,null],[12,"display","","",19,null],[12,"window","","",19,null],[12,"root","","",19,null],[12,"subwindow","","",19,null],[12,"time","","",19,null],[12,"x","","",19,null],[12,"y","","",19,null],[12,"x_root","","",19,null],[12,"y_root","","",19,null],[12,"state","","",19,null],[12,"keycode","","",19,null],[12,"same_screen","","",19,null],[3,"XKeymapEvent","","",null,null],[12,"type_","","",20,null],[12,"serial","","",20,null],[12,"send_event","","",20,null],[12,"display","","",20,null],[12,"window","","",20,null],[12,"key_vector","","",20,null],[3,"XMapEvent","","",null,null],[12,"type_","","",21,null],[12,"serial","","",21,null],[12,"send_event","","",21,null],[12,"display","","",21,null],[12,"event","","",21,null],[12,"window","","",21,null],[12,"override_redirect","","",21,null],[3,"XMappingEvent","","",null,null],[12,"type_","","",22,null],[12,"serial","","",22,null],[12,"send_event","","",22,null],[12,"display","","",22,null],[12,"event","","",22,null],[12,"request","","",22,null],[12,"first_keycode","","",22,null],[12,"count","","",22,null],[3,"XMapRequestEvent","","",null,null],[12,"type_","","",23,null],[12,"serial","","",23,null],[12,"send_event","","",23,null],[12,"display","","",23,null],[12,"parent","","",23,null],[12,"window","","",23,null],[3,"XMotionEvent","","",null,null],[12,"type_","","",24,null],[12,"serial","","",24,null],[12,"send_event","","",24,null],[12,"display","","",24,null],[12,"window","","",24,null],[12,"root","","",24,null],[12,"subwindow","","",24,null],[12,"time","","",24,null],[12,"x","","",24,null],[12,"y","","",24,null],[12,"x_root","","",24,null],[12,"y_root","","",24,null],[12,"state","","",24,null],[12,"is_hint","","",24,null],[12,"same_screen","","",24,null],[3,"XNoExposeEvent","","",null,null],[12,"type_","","",25,null],[12,"serial","","",25,null],[12,"send_event","","",25,null],[12,"display","","",25,null],[12,"drawable","","",25,null],[12,"major_code","","",25,null],[12,"minor_code","","",25,null],[3,"XPropertyEvent","","",null,null],[12,"type_","","",26,null],[12,"serial","","",26,null],[12,"send_event","","",26,null],[12,"display","","",26,null],[12,"window","","",26,null],[12,"atom","","",26,null],[12,"time","","",26,null],[12,"state","","",26,null],[3,"XReparentEvent","","",null,null],[12,"type_","","",27,null],[12,"serial","","",27,null],[12,"send_event","","",27,null],[12,"display","","",27,null],[12,"event","","",27,null],[12,"window","","",27,null],[12,"parent","","",27,null],[12,"x","","",27,null],[12,"y","","",27,null],[12,"override_redirect","","",27,null],[3,"XResizeRequestEvent","","",null,null],[12,"type_","","",28,null],[12,"serial","","",28,null],[12,"send_event","","",28,null],[12,"display","","",28,null],[12,"window","","",28,null],[12,"width","","",28,null],[12,"height","","",28,null],[3,"XSelectionClearEvent","","",null,null],[12,"type_","","",29,null],[12,"serial","","",29,null],[12,"send_event","","",29,null],[12,"display","","",29,null],[12,"window","","",29,null],[12,"selection","","",29,null],[12,"time","","",29,null],[3,"XSelectionEvent","","",null,null],[12,"type_","","",30,null],[12,"serial","","",30,null],[12,"send_event","","",30,null],[12,"display","","",30,null],[12,"requestor","","",30,null],[12,"selection","","",30,null],[12,"target","","",30,null],[12,"property","","",30,null],[12,"time","","",30,null],[3,"XSelectionRequestEvent","","",null,null],[12,"type_","","",31,null],[12,"serial","","",31,null],[12,"send_event","","",31,null],[12,"display","","",31,null],[12,"owner","","",31,null],[12,"requestor","","",31,null],[12,"selection","","",31,null],[12,"target","","",31,null],[12,"property","","",31,null],[12,"time","","",31,null],[3,"XUnmapEvent","","",null,null],[12,"type_","","",32,null],[12,"serial","","",32,null],[12,"send_event","","",32,null],[12,"display","","",32,null],[12,"event","","",32,null],[12,"window","","",32,null],[12,"from_configure","","",32,null],[3,"XVisibilityEvent","","",null,null],[12,"type_","","",33,null],[12,"serial","","",33,null],[12,"send_event","","",33,null],[12,"display","","",33,null],[12,"window","","",33,null],[12,"state","","",33,null],[3,"_XkbCompatMapRec","","",null,null],[12,"sym_interpret","","",34,null],[12,"groups","","",34,null],[12,"num_si","","",34,null],[12,"size_si","","",34,null],[3,"_XkbDesc","","",null,null],[12,"dpy","","",35,null],[12,"flags","","",35,null],[12,"device_spec","","",35,null],[12,"min_key_code","","",35,null],[12,"max_key_code","","",35,null],[12,"ctrls","","",35,null],[12,"server","","",35,null],[12,"map","","",35,null],[12,"indicators","","",35,null],[12,"names","","",35,null],[12,"compat","","",35,null],[12,"geom","","",35,null],[3,"_XkbIndicatorRec","","",null,null],[12,"phys_indicators","","",36,null],[12,"maps","","",36,null],[3,"_XkbKeyAliasRec","","",null,null],[12,"real","","",37,null],[12,"alias","","",37,null],[3,"_XkbKeyNameRec","","",null,null],[12,"name","","",38,null],[3,"_XkbNamesRec","","",null,null],[12,"keycodes","","",39,null],[12,"geometry","","",39,null],[12,"symbols","","",39,null],[12,"types","","",39,null],[12,"compat","","",39,null],[12,"vmods","","",39,null],[12,"indicators","","",39,null],[12,"groups","","",39,null],[12,"keys","","",39,null],[12,"key_aliases","","",39,null],[12,"radio_groups","","",39,null],[12,"phys_symbols","","",39,null],[12,"num_keys","","",39,null],[12,"num_key_aliases","","",39,null],[12,"num_rg","","",39,null],[3,"XkbAnyEvent","","",null,null],[12,"type_","","",40,null],[12,"serial","","",40,null],[12,"send_event","","",40,null],[12,"display","","",40,null],[12,"time","","",40,null],[12,"xkb_type","","",40,null],[12,"device","","",40,null],[3,"XkbNewKeyboardNotifyEvent","","",null,null],[12,"type_","","",41,null],[12,"serial","","",41,null],[12,"send_event","","",41,null],[12,"display","","",41,null],[12,"time","","",41,null],[12,"xkb_type","","",41,null],[12,"device","","",41,null],[12,"old_device","","",41,null],[12,"min_key_code","","",41,null],[12,"max_key_code","","",41,null],[12,"old_min_key_code","","",41,null],[12,"old_max_key_code","","",41,null],[12,"changed","","",41,null],[12,"req_major","","",41,null],[12,"req_minor","","",41,null],[3,"_XkbMapNotifyEvent","","",null,null],[12,"type_","","",42,null],[12,"serial","","",42,null],[12,"send_event","","",42,null],[12,"display","","",42,null],[12,"time","","",42,null],[12,"xkb_type","","",42,null],[12,"device","","",42,null],[12,"changed","","",42,null],[12,"flags","","",42,null],[12,"first_type","","",42,null],[12,"num_types","","",42,null],[12,"min_key_code","","",42,null],[12,"max_key_code","","",42,null],[12,"first_key_sym","","",42,null],[12,"first_key_act","","",42,null],[12,"first_key_bahavior","","",42,null],[12,"first_key_explicit","","",42,null],[12,"first_modmap_key","","",42,null],[12,"first_vmodmap_key","","",42,null],[12,"num_key_syms","","",42,null],[12,"num_key_acts","","",42,null],[12,"num_key_behaviors","","",42,null],[12,"num_key_explicit","","",42,null],[12,"num_modmap_keys","","",42,null],[12,"num_vmodmap_keys","","",42,null],[12,"vmods","","",42,null],[3,"XkbStateNotifyEvent","","",null,null],[12,"type_","","",43,null],[12,"serial","","",43,null],[12,"send_event","","",43,null],[12,"display","","",43,null],[12,"time","","",43,null],[12,"xkb_type","","",43,null],[12,"device","","",43,null],[12,"changed","","",43,null],[12,"group","","",43,null],[12,"base_group","","",43,null],[12,"latched_group","","",43,null],[12,"locked_group","","",43,null],[12,"mods","","",43,null],[12,"base_mods","","",43,null],[12,"latched_mods","","",43,null],[12,"locked_mods","","",43,null],[12,"compat_state","","",43,null],[12,"grab_mods","","",43,null],[12,"compat_grab_mods","","",43,null],[12,"lookup_mods","","",43,null],[12,"compat_lookup_mods","","",43,null],[12,"ptr_buttons","","",43,null],[12,"keycode","","",43,null],[12,"event_type","","",43,null],[12,"req_major","","",43,null],[12,"req_minor","","",43,null],[3,"_XkbControlsNotifyEvent","","",null,null],[12,"type_","","",44,null],[12,"serial","","",44,null],[12,"send_event","","",44,null],[12,"display","","",44,null],[12,"time","","",44,null],[12,"xkb_type","","",44,null],[12,"device","","",44,null],[12,"changed_ctrls","","",44,null],[12,"enabled_ctrls","","",44,null],[12,"enabled_ctrl_changes","","",44,null],[12,"num_groups","","",44,null],[12,"keycode","","",44,null],[12,"event_type","","",44,null],[12,"req_major","","",44,null],[12,"req_minor","","",44,null],[3,"XkbIndicatorNotifyEvent","","",null,null],[12,"type_","","",45,null],[12,"serial","","",45,null],[12,"send_event","","",45,null],[12,"display","","",45,null],[12,"time","","",45,null],[12,"xkb_type","","",45,null],[12,"device","","",45,null],[12,"changed","","",45,null],[12,"state","","",45,null],[3,"_XkbNamesNotifyEvent","","",null,null],[12,"type_","","",46,null],[12,"serial","","",46,null],[12,"send_event","","",46,null],[12,"display","","",46,null],[12,"time","","",46,null],[12,"xkb_type","","",46,null],[12,"device","","",46,null],[12,"changed","","",46,null],[12,"first_type","","",46,null],[12,"num_types","","",46,null],[12,"first_lvl","","",46,null],[12,"num_lvls","","",46,null],[12,"num_aliases","","",46,null],[12,"num_radio_groups","","",46,null],[12,"changed_vmods","","",46,null],[12,"changed_groups","","",46,null],[12,"changed_indicators","","",46,null],[12,"first_key","","",46,null],[12,"num_keys","","",46,null],[3,"XkbCompatMapNotifyEvent","","",null,null],[12,"type_","","",47,null],[12,"serial","","",47,null],[12,"send_event","","",47,null],[12,"display","","",47,null],[12,"time","","",47,null],[12,"xkb_type","","",47,null],[12,"device","","",47,null],[12,"changed_groups","","",47,null],[12,"first_si","","",47,null],[12,"num_si","","",47,null],[12,"num_total_si","","",47,null],[3,"XkbBellNotifyEvent","","",null,null],[12,"type_","","",48,null],[12,"serial","","",48,null],[12,"send_event","","",48,null],[12,"display","","",48,null],[12,"time","","",48,null],[12,"xkb_type","","",48,null],[12,"device","","",48,null],[12,"percent","","",48,null],[12,"pitch","","",48,null],[12,"duration","","",48,null],[12,"bell_class","","",48,null],[12,"bell_id","","",48,null],[12,"name","","",48,null],[12,"window","","",48,null],[12,"event_only","","",48,null],[3,"XkbActionMessageEvent","","",null,null],[12,"type_","","",49,null],[12,"serial","","",49,null],[12,"send_event","","",49,null],[12,"display","","",49,null],[12,"time","","",49,null],[12,"xkb_type","","",49,null],[12,"device","","",49,null],[12,"keycode","","",49,null],[12,"press","","",49,null],[12,"key_event_follows","","",49,null],[12,"group","","",49,null],[12,"mods","","",49,null],[12,"message","","",49,null],[3,"XkbAccessXNotifyEvent","","",null,null],[12,"type_","","",50,null],[12,"serial","","",50,null],[12,"send_event","","",50,null],[12,"display","","",50,null],[12,"time","","",50,null],[12,"xkb_type","","",50,null],[12,"device","","",50,null],[12,"detail","","",50,null],[12,"keycode","","",50,null],[12,"sk_delay","","",50,null],[12,"debounce_delay","","",50,null],[3,"_XkbExtensionDeviceNotifyEvent","","",null,null],[12,"type_","","",51,null],[12,"serial","","",51,null],[12,"send_event","","",51,null],[12,"display","","",51,null],[12,"time","","",51,null],[12,"xkb_type","","",51,null],[12,"device","","",51,null],[12,"reason","","",51,null],[12,"supported","","",51,null],[12,"unsupported","","",51,null],[12,"first_btn","","",51,null],[12,"num_btns","","",51,null],[12,"leds_defined","","",51,null],[12,"led_state","","",51,null],[12,"led_class","","",51,null],[12,"led_id","","",51,null],[3,"XkbEvent","","",null,null],[3,"Depth","","",null,null],[12,"depth","","",52,null],[12,"nvisuals","","",52,null],[12,"visuals","","",52,null],[3,"Screen","","",null,null],[12,"ext_data","","",53,null],[12,"display","","",53,null],[12,"root","","",53,null],[12,"width","","",53,null],[12,"height","","",53,null],[12,"mwidth","","",53,null],[12,"mheight","","",53,null],[12,"ndepths","","",53,null],[12,"depths","","",53,null],[12,"root_depth","","",53,null],[12,"root_visual","","",53,null],[12,"default_gc","","",53,null],[12,"cmap","","",53,null],[12,"white_pixel","","",53,null],[12,"black_pixel","","",53,null],[12,"max_maps","","",53,null],[12,"min_maps","","",53,null],[12,"backing_store","","",53,null],[12,"save_unders","","",53,null],[12,"root_input_mask","","",53,null],[3,"ScreenFormat","","",null,null],[12,"ext_data","","",54,null],[12,"depth","","",54,null],[12,"bits_per_pixel","","",54,null],[12,"scanline_pad","","",54,null],[3,"Visual","","",null,null],[12,"ext_data","","",55,null],[12,"visualid","","",55,null],[12,"class","","",55,null],[12,"red_mask","","",55,null],[12,"green_mask","","",55,null],[12,"blue_mask","","",55,null],[12,"bits_per_rgb","","",55,null],[12,"map_entries","","",55,null],[3,"XArc","","",null,null],[12,"x","","",56,null],[12,"y","","",56,null],[12,"width","","",56,null],[12,"height","","",56,null],[12,"angle1","","",56,null],[12,"angle2","","",56,null],[3,"XChar2b","","",null,null],[12,"byte1","","",57,null],[12,"byte2","","",57,null],[3,"XCharStruct","","",null,null],[12,"lbearing","","",58,null],[12,"rbearing","","",58,null],[12,"width","","",58,null],[12,"ascent","","",58,null],[12,"descent","","",58,null],[12,"attributes","","",58,null],[3,"XClassHint","","",null,null],[12,"res_name","","",59,null],[12,"res_class","","",59,null],[3,"XColor","","",null,null],[12,"pixel","","",60,null],[12,"red","","",60,null],[12,"green","","",60,null],[12,"blue","","",60,null],[12,"flags","","",60,null],[12,"pad","","",60,null],[3,"XComposeStatus","","",null,null],[12,"compose_ptr","","",61,null],[12,"chars_matched","","",61,null],[3,"XExtCodes","","",null,null],[12,"extension","","",62,null],[12,"major_opcode","","",62,null],[12,"first_event","","",62,null],[12,"first_error","","",62,null],[3,"XExtData","","",null,null],[12,"number","","",63,null],[12,"next","","",63,null],[12,"free_private","","",63,null],[12,"private_data","","",63,null],[3,"XFontProp","","",null,null],[12,"name","","",64,null],[12,"card32","","",64,null],[3,"XFontSetExtents","","",null,null],[12,"max_ink_extent","","",65,null],[12,"max_logical_extent","","",65,null],[3,"XFontStruct","","",null,null],[12,"ext_data","","",66,null],[12,"fid","","",66,null],[12,"direction","","",66,null],[12,"min_char_or_byte2","","",66,null],[12,"max_char_or_byte2","","",66,null],[12,"min_byte1","","",66,null],[12,"max_byte1","","",66,null],[12,"all_chars_exist","","",66,null],[12,"default_char","","",66,null],[12,"n_properties","","",66,null],[12,"properties","","",66,null],[12,"min_bounds","","",66,null],[12,"max_bounds","","",66,null],[12,"per_char","","",66,null],[12,"ascent","","",66,null],[12,"descent","","",66,null],[3,"XGCValues","","",null,null],[12,"function","","",67,null],[12,"plane_mask","","",67,null],[12,"foreground","","",67,null],[12,"background","","",67,null],[12,"line_width","","",67,null],[12,"line_style","","",67,null],[12,"cap_style","","",67,null],[12,"join_style","","",67,null],[12,"fill_style","","",67,null],[12,"fill_rule","","",67,null],[12,"arc_mode","","",67,null],[12,"tile","","",67,null],[12,"stipple","","",67,null],[12,"ts_x_origin","","",67,null],[12,"ts_y_origin","","",67,null],[12,"font","","",67,null],[12,"subwindow_mode","","",67,null],[12,"graphics_exposures","","",67,null],[12,"clip_x_origin","","",67,null],[12,"clip_y_origin","","",67,null],[12,"clip_mask","","",67,null],[12,"dash_offset","","",67,null],[12,"dashes","","",67,null],[3,"XGenericEventCookie","","",null,null],[12,"type_","","",68,null],[12,"serial","","",68,null],[12,"send_event","","",68,null],[12,"display","","",68,null],[12,"extension","","",68,null],[12,"evtype","","",68,null],[12,"cookie","","",68,null],[12,"data","","",68,null],[3,"XHostAddress","","",null,null],[12,"family","","",69,null],[12,"length","","",69,null],[12,"address","","",69,null],[3,"XIconSize","","",null,null],[12,"min_width","","",70,null],[12,"min_height","","",70,null],[12,"max_width","","",70,null],[12,"max_height","","",70,null],[12,"width_inc","","",70,null],[12,"height_inc","","",70,null],[3,"XImage","","",null,null],[12,"width","","",71,null],[12,"height","","",71,null],[12,"xoffset","","",71,null],[12,"format","","",71,null],[12,"data","","",71,null],[12,"byte_order","","",71,null],[12,"bitmap_unit","","",71,null],[12,"bitmap_bit_order","","",71,null],[12,"bitmap_pad","","",71,null],[12,"depth","","",71,null],[12,"bytes_per_line","","",71,null],[12,"bits_per_pixel","","",71,null],[12,"red_mask","","",71,null],[12,"green_mask","","",71,null],[12,"blue_mask","","",71,null],[12,"obdata","","",71,null],[12,"funcs","","",71,null],[3,"XKeyboardControl","","",null,null],[12,"key_click_percent","","",72,null],[12,"bell_percent","","",72,null],[12,"bell_pitch","","",72,null],[12,"bell_duration","","",72,null],[12,"led","","",72,null],[12,"led_mode","","",72,null],[12,"key","","",72,null],[12,"auto_repeat_mode","","",72,null],[3,"XKeyboardState","","",null,null],[12,"key_click_percent","","",73,null],[12,"bell_percent","","",73,null],[12,"bell_pitch","","",73,null],[12,"bell_duration","","",73,null],[12,"led_mask","","",73,null],[12,"global_auto_repeat","","",73,null],[12,"auto_repeats","","",73,null],[3,"XmbTextItem","","",null,null],[12,"chars","","",74,null],[12,"nchars","","",74,null],[12,"delta","","",74,null],[12,"font_set","","",74,null],[3,"XModifierKeymap","","",null,null],[12,"max_keypermod","","",75,null],[12,"modifiermap","","",75,null],[3,"XOMCharSetList","","",null,null],[12,"charset_count","","",76,null],[12,"charset_list","","",76,null],[3,"XPixmapFormatValues","","",null,null],[12,"depth","","",77,null],[12,"bits_per_pixel","","",77,null],[12,"scanline_pad","","",77,null],[3,"XPoint","","",null,null],[12,"x","","",78,null],[12,"y","","",78,null],[3,"XRectangle","","",null,null],[12,"x","","",79,null],[12,"y","","",79,null],[12,"width","","",79,null],[12,"height","","",79,null],[3,"XrmOptionDescRec","","",null,null],[12,"option","","",80,null],[12,"specifier","","",80,null],[12,"argKind","","",80,null],[12,"value","","",80,null],[3,"XrmValue","","",null,null],[12,"size","","",81,null],[12,"addr","","",81,null],[3,"XSegment","","",null,null],[12,"x1","","",82,null],[12,"y1","","",82,null],[12,"x2","","",82,null],[12,"y2","","",82,null],[3,"XSetWindowAttributes","","",null,null],[12,"background_pixmap","","",83,null],[12,"background_pixel","","",83,null],[12,"border_pixmap","","",83,null],[12,"border_pixel","","",83,null],[12,"bit_gravity","","",83,null],[12,"win_gravity","","",83,null],[12,"backing_store","","",83,null],[12,"backing_planes","","",83,null],[12,"backing_pixel","","",83,null],[12,"save_under","","",83,null],[12,"event_mask","","",83,null],[12,"do_not_propagate_mask","","",83,null],[12,"override_redirect","","",83,null],[12,"colormap","","",83,null],[12,"cursor","","",83,null],[3,"XSizeHints","","",null,null],[12,"flags","","",84,null],[12,"x","","",84,null],[12,"y","","",84,null],[12,"width","","",84,null],[12,"height","","",84,null],[12,"min_width","","",84,null],[12,"min_height","","",84,null],[12,"max_width","","",84,null],[12,"max_height","","",84,null],[12,"width_inc","","",84,null],[12,"height_inc","","",84,null],[12,"min_aspect","","",84,null],[12,"max_aspect","","",84,null],[12,"base_width","","",84,null],[12,"base_height","","",84,null],[12,"win_gravity","","",84,null],[3,"XStandardColormap","","",null,null],[12,"colormap","","",85,null],[12,"red_max","","",85,null],[12,"red_mult","","",85,null],[12,"green_max","","",85,null],[12,"green_mult","","",85,null],[12,"blue_max","","",85,null],[12,"blue_mult","","",85,null],[12,"base_pixel","","",85,null],[12,"visualid","","",85,null],[12,"killid","","",85,null],[3,"XTextItem","","",null,null],[12,"chars","","",86,null],[12,"nchars","","",86,null],[12,"delta","","",86,null],[12,"font","","",86,null],[3,"XTextItem16","","",null,null],[12,"chars","","",87,null],[12,"nchars","","",87,null],[12,"delta","","",87,null],[12,"font","","",87,null],[3,"XTextProperty","","",null,null],[12,"value","","",88,null],[12,"encoding","","",88,null],[12,"format","","",88,null],[12,"nitems","","",88,null],[3,"XTimeCoord","","",null,null],[12,"time","","",89,null],[12,"x","","",89,null],[12,"y","","",89,null],[3,"XVisualInfo","","",null,null],[12,"visual","","",90,null],[12,"visualid","","",90,null],[12,"screen","","",90,null],[12,"depth","","",90,null],[12,"class","","",90,null],[12,"red_mask","","",90,null],[12,"green_mask","","",90,null],[12,"blue_mask","","",90,null],[12,"colormap_size","","",90,null],[12,"bits_per_rgb","","",90,null],[3,"XwcTextItem","","",null,null],[12,"chars","","",91,null],[12,"nchars","","",91,null],[12,"delta","","",91,null],[12,"font_set","","",91,null],[3,"XWindowAttributes","","",null,null],[12,"x","","",92,null],[12,"y","","",92,null],[12,"width","","",92,null],[12,"height","","",92,null],[12,"border_width","","",92,null],[12,"depth","","",92,null],[12,"visual","","",92,null],[12,"root","","",92,null],[12,"class","","",92,null],[12,"bit_gravity","","",92,null],[12,"win_gravity","","",92,null],[12,"backing_store","","",92,null],[12,"backing_planes","","",92,null],[12,"backing_pixel","","",92,null],[12,"save_under","","",92,null],[12,"colormap","","",92,null],[12,"map_installed","","",92,null],[12,"map_state","","",92,null],[12,"all_event_masks","","",92,null],[12,"your_event_mask","","",92,null],[12,"do_not_propagate_mask","","",92,null],[12,"override_redirect","","",92,null],[12,"screen","","",92,null],[3,"XWindowChanges","","",null,null],[12,"x","","",93,null],[12,"y","","",93,null],[12,"width","","",93,null],[12,"height","","",93,null],[12,"border_width","","",93,null],[12,"sibling","","",93,null],[12,"stack_mode","","",93,null],[3,"XWMHints","","",null,null],[12,"flags","","",94,null],[12,"input","","",94,null],[12,"initial_state","","",94,null],[12,"icon_pixmap","","",94,null],[12,"icon_window","","",94,null],[12,"icon_x","","",94,null],[12,"icon_y","","",94,null],[12,"icon_mask","","",94,null],[12,"window_group","","",94,null],[3,"XIMCallback","","",null,null],[12,"client_data","","",95,null],[12,"callback","","",95,null],[3,"XICCallback","","",null,null],[12,"client_data","","",96,null],[12,"callback","","",96,null],[3,"AspectRatio","","",null,null],[12,"x","","",97,null],[12,"y","","",97,null],[3,"ClientMessageData","","",null,null],[3,"ImageFns","","",null,null],[12,"create_image","","",98,null],[12,"destroy_image","","",98,null],[12,"get_pixel","","",98,null],[12,"put_pixel","","",98,null],[12,"sub_image","","",98,null],[12,"add_pixel","","",98,null],[19,"XEvent","","",null,null],[12,"type_","","",99,null],[12,"any","","",99,null],[12,"button","","",99,null],[12,"circulate","","",99,null],[12,"circulate_request","","",99,null],[12,"client_message","","",99,null],[12,"colormap","","",99,null],[12,"configure","","",99,null],[12,"configure_request","","",99,null],[12,"create_window","","",99,null],[12,"crossing","","",99,null],[12,"destroy_window","","",99,null],[12,"error","","",99,null],[12,"expose","","",99,null],[12,"focus_change","","",99,null],[12,"generic_event_cookie","","",99,null],[12,"graphics_expose","","",99,null],[12,"gravity","","",99,null],[12,"key","","",99,null],[12,"keymap","","",99,null],[12,"map","","",99,null],[12,"mapping","","",99,null],[12,"map_request","","",99,null],[12,"motion","","",99,null],[12,"no_expose","","",99,null],[12,"property","","",99,null],[12,"reparent","","",99,null],[12,"resize_request","","",99,null],[12,"selection_clear","","",99,null],[12,"selection","","",99,null],[12,"selection_request","","",99,null],[12,"unmap","","",99,null],[12,"visibility","","",99,null],[12,"pad","","",99,null],[12,"xf86vm_notify","","",99,null],[12,"xrr_screen_change_notify","","",99,null],[12,"xrr_notify","","",99,null],[12,"xrr_output_change_notify","","",99,null],[12,"xrr_crtc_change_notify","","",99,null],[12,"xrr_output_property_notify","","",99,null],[12,"xrr_provider_change_notify","","",99,null],[12,"xrr_provider_property_notify","","",99,null],[12,"xrr_resource_change_notify","","",99,null],[12,"xss_notify","","",99,null],[4,"_XDisplay","","",null,null],[4,"xError","","",null,null],[4,"xEvent","","",null,null],[4,"_XGC","","",null,null],[4,"_XIC","","",null,null],[4,"_XIM","","",null,null],[4,"_XRegion","","",null,null],[4,"_XOC","","",null,null],[4,"_XOM","","",null,null],[4,"_XrmHashBucketRec","","",null,null],[4,"XkbKbdDpyStateRec","","",null,null],[0,"xkb","","",null,null],[6,"Atom","","",null,null],[6,"Bool","","",null,null],[6,"Colormap","","",null,null],[6,"Cursor","","",null,null],[6,"Drawable","","",null,null],[6,"Font","","",null,null],[6,"GContext","","",null,null],[6,"KeyCode","","",null,null],[6,"KeySym","","",null,null],[6,"Mask","","",null,null],[6,"Pixmap","","",null,null],[6,"Status","","",null,null],[6,"Time","","",null,null],[6,"VisualID","","",null,null],[6,"Window","","",null,null],[6,"XID","","",null,null],[6,"XPointer","","",null,null],[6,"XEDataObject","","",null,null],[6,"Display","","",null,null],[6,"GC","","",null,null],[6,"Region","","",null,null],[6,"XcmsCCC","","",null,null],[6,"XcmsColorSpace","","",null,null],[6,"XcmsFunctionSet","","",null,null],[6,"XContext","","",null,null],[6,"XFontSet","","",null,null],[6,"XIC","","",null,null],[6,"XIM","","",null,null],[6,"XkbAction","","",null,null],[6,"XkbBoundsPtr","","",null,null],[6,"XkbChangesPtr","","",null,null],[6,"XkbClientMapPtr","","",null,null],[6,"XkbColorPtr","","",null,null],[6,"XkbCompatMapPtr","","",null,null],[6,"XkbComponentListPtr","","",null,null],[6,"XkbComponentNamesPtr","","",null,null],[6,"XkbControlsChangesPtr","","",null,null],[6,"XkbControlsNotifyEvent","","",null,null],[6,"XkbControlsPtr","","",null,null],[6,"XkbDescPtr","","",null,null],[6,"XkbDeviceChangesPtr","","",null,null],[6,"XkbDeviceInfoPtr","","",null,null],[6,"XkbDeviceLedInfoPtr","","",null,null],[6,"XkbDoodadPtr","","",null,null],[6,"XkbExtensionDeviceNotifyEvent","","",null,null],[6,"XkbGeometryPtr","","",null,null],[6,"XkbGeometrySizesPtr","","",null,null],[6,"XkbIndicatorMapPtr","","",null,null],[6,"XkbIndicatorMapRec","","",null,null],[6,"XkbIndicatorPtr","","",null,null],[6,"XkbKeyTypePtr","","",null,null],[6,"XkbMapChangesPtr","","",null,null],[6,"XkbMapNotifyEvent","","",null,null],[6,"XkbModsPtr","","",null,null],[6,"XkbModsRec","","",null,null],[6,"XkbNameChangesPtr","","",null,null],[6,"XkbNamesNotifyEvent","","",null,null],[6,"XkbNamesPtr","","",null,null],[6,"XkbKeyAliasPtr","","",null,null],[6,"XkbKeyNamePtr","","",null,null],[6,"XkbKeyPtr","","",null,null],[6,"XkbOutlinePtr","","",null,null],[6,"XkbOverlayKeyPtr","","",null,null],[6,"XkbOverlayPtr","","",null,null],[6,"XkbOverlayRowPtr","","",null,null],[6,"XkbPropertyPtr","","",null,null],[6,"XkbRowPtr","","",null,null],[6,"XkbSectionPtr","","",null,null],[6,"XkbServerMapPtr","","",null,null],[6,"XkbShapePtr","","",null,null],[6,"XkbStatePtr","","",null,null],[6,"XkbSymInterpretPtr","","",null,null],[6,"XOM","","",null,null],[6,"XrmDatabase","","",null,null],[6,"XrmOptionDescList","","",null,null],[6,"XConnectionWatchProc","","",null,null],[6,"XIMProc","","",null,null],[6,"XICProc","","",null,null],[6,"XICCEncodingStyle","","",null,null],[6,"XOrientation","","",null,null],[6,"XrmBinding","","",null,null],[6,"XrmOptionKind","","",null,null],[6,"XButtonPressedEvent","","",null,null],[6,"XButtonReleasedEvent","","",null,null],[6,"XEnterWindowEvent","","",null,null],[6,"XLeaveWindowEvent","","",null,null],[6,"XFocusInEvent","","",null,null],[6,"XFocusOutEvent","","",null,null],[6,"XKeyPressedEvent","","",null,null],[6,"XKeyReleasedEvent","","",null,null],[6,"XPointerMovedEvent","","",null,null],[6,"XkbKbdDpyStatePtr","","",null,null],[17,"AllocNone","","",null,null],[17,"AllocAll","","",null,null],[17,"XkbKeyNameLength","","",null,null],[17,"XkbNumIndicators","","",null,null],[17,"XkbNumKbdGroups","","",null,null],[17,"XkbNumVirtualMods","","",null,null],[17,"XA_PRIMARY","","",null,null],[17,"XA_SECONDARY","","",null,null],[17,"XA_ARC","","",null,null],[17,"XA_ATOM","","",null,null],[17,"XA_BITMAP","","",null,null],[17,"XA_CARDINAL","","",null,null],[17,"XA_COLORMAP","","",null,null],[17,"XA_CURSOR","","",null,null],[17,"XA_CUT_BUFFER0","","",null,null],[17,"XA_CUT_BUFFER1","","",null,null],[17,"XA_CUT_BUFFER2","","",null,null],[17,"XA_CUT_BUFFER3","","",null,null],[17,"XA_CUT_BUFFER4","","",null,null],[17,"XA_CUT_BUFFER5","","",null,null],[17,"XA_CUT_BUFFER6","","",null,null],[17,"XA_CUT_BUFFER7","","",null,null],[17,"XA_DRAWABLE","","",null,null],[17,"XA_FONT","","",null,null],[17,"XA_INTEGER","","",null,null],[17,"XA_PIXMAP","","",null,null],[17,"XA_POINT","","",null,null],[17,"XA_RECTANGLE","","",null,null],[17,"XA_RESOURCE_MANAGER","","",null,null],[17,"XA_RGB_COLOR_MAP","","",null,null],[17,"XA_RGB_BEST_MAP","","",null,null],[17,"XA_RGB_BLUE_MAP","","",null,null],[17,"XA_RGB_DEFAULT_MAP","","",null,null],[17,"XA_RGB_GRAY_MAP","","",null,null],[17,"XA_RGB_GREEN_MAP","","",null,null],[17,"XA_RGB_RED_MAP","","",null,null],[17,"XA_STRING","","",null,null],[17,"XA_VISUALID","","",null,null],[17,"XA_WINDOW","","",null,null],[17,"XA_WM_COMMAND","","",null,null],[17,"XA_WM_HINTS","","",null,null],[17,"XA_WM_CLIENT_MACHINE","","",null,null],[17,"XA_WM_ICON_NAME","","",null,null],[17,"XA_WM_ICON_SIZE","","",null,null],[17,"XA_WM_NAME","","",null,null],[17,"XA_WM_NORMAL_HINTS","","",null,null],[17,"XA_WM_SIZE_HINTS","","",null,null],[17,"XA_WM_ZOOM_HINTS","","",null,null],[17,"XA_MIN_SPACE","","",null,null],[17,"XA_NORM_SPACE","","",null,null],[17,"XA_MAX_SPACE","","",null,null],[17,"XA_END_SPACE","","",null,null],[17,"XA_SUPERSCRIPT_X","","",null,null],[17,"XA_SUPERSCRIPT_Y","","",null,null],[17,"XA_SUBSCRIPT_X","","",null,null],[17,"XA_SUBSCRIPT_Y","","",null,null],[17,"XA_UNDERLINE_POSITION","","",null,null],[17,"XA_UNDERLINE_THICKNESS","","",null,null],[17,"XA_STRIKEOUT_ASCENT","","",null,null],[17,"XA_STRIKEOUT_DESCENT","","",null,null],[17,"XA_ITALIC_ANGLE","","",null,null],[17,"XA_X_HEIGHT","","",null,null],[17,"XA_QUAD_WIDTH","","",null,null],[17,"XA_WEIGHT","","",null,null],[17,"XA_POINT_SIZE","","",null,null],[17,"XA_RESOLUTION","","",null,null],[17,"XA_COPYRIGHT","","",null,null],[17,"XA_NOTICE","","",null,null],[17,"XA_FONT_NAME","","",null,null],[17,"XA_FAMILY_NAME","","",null,null],[17,"XA_FULL_NAME","","",null,null],[17,"XA_CAP_HEIGHT","","",null,null],[17,"XA_WM_CLASS","","",null,null],[17,"XA_WM_TRANSIENT_FOR","","",null,null],[17,"False","","",null,null],[17,"True","","",null,null],[17,"Unsorted","","",null,null],[17,"YSorted","","",null,null],[17,"YXSorted","","",null,null],[17,"YXBanded","","",null,null],[17,"DoRed","","",null,null],[17,"DoGreen","","",null,null],[17,"DoBlue","","",null,null],[17,"Success","","",null,null],[17,"BadRequest","","",null,null],[17,"BadValue","","",null,null],[17,"BadWindow","","",null,null],[17,"BadPixmap","","",null,null],[17,"BadAtom","","",null,null],[17,"BadCursor","","",null,null],[17,"BadFont","","",null,null],[17,"BadMatch","","",null,null],[17,"BadDrawable","","",null,null],[17,"BadAccess","","",null,null],[17,"BadAlloc","","",null,null],[17,"BadColor","","",null,null],[17,"BadGC","","",null,null],[17,"BadIDChoice","","",null,null],[17,"BadName","","",null,null],[17,"BadLength","","",null,null],[17,"BadImplementation","","",null,null],[17,"FirstExtensionError","","",null,null],[17,"LastExtensionError","","",null,null],[17,"KeyPress","","",null,null],[17,"KeyRelease","","",null,null],[17,"ButtonPress","","",null,null],[17,"ButtonRelease","","",null,null],[17,"MotionNotify","","",null,null],[17,"EnterNotify","","",null,null],[17,"LeaveNotify","","",null,null],[17,"FocusIn","","",null,null],[17,"FocusOut","","",null,null],[17,"KeymapNotify","","",null,null],[17,"Expose","","",null,null],[17,"GraphicsExpose","","",null,null],[17,"NoExpose","","",null,null],[17,"VisibilityNotify","","",null,null],[17,"CreateNotify","","",null,null],[17,"DestroyNotify","","",null,null],[17,"UnmapNotify","","",null,null],[17,"MapNotify","","",null,null],[17,"MapRequest","","",null,null],[17,"ReparentNotify","","",null,null],[17,"ConfigureNotify","","",null,null],[17,"ConfigureRequest","","",null,null],[17,"GravityNotify","","",null,null],[17,"ResizeRequest","","",null,null],[17,"CirculateNotify","","",null,null],[17,"CirculateRequest","","",null,null],[17,"PropertyNotify","","",null,null],[17,"SelectionClear","","",null,null],[17,"SelectionRequest","","",null,null],[17,"SelectionNotify","","",null,null],[17,"ColormapNotify","","",null,null],[17,"ClientMessage","","",null,null],[17,"MappingNotify","","",null,null],[17,"GenericEvent","","",null,null],[17,"LASTEvent","","",null,null],[17,"NoEventMask","","",null,null],[17,"KeyPressMask","","",null,null],[17,"KeyReleaseMask","","",null,null],[17,"ButtonPressMask","","",null,null],[17,"ButtonReleaseMask","","",null,null],[17,"EnterWindowMask","","",null,null],[17,"LeaveWindowMask","","",null,null],[17,"PointerMotionMask","","",null,null],[17,"PointerMotionHintMask","","",null,null],[17,"Button1MotionMask","","",null,null],[17,"Button2MotionMask","","",null,null],[17,"Button3MotionMask","","",null,null],[17,"Button4MotionMask","","",null,null],[17,"Button5MotionMask","","",null,null],[17,"ButtonMotionMask","","",null,null],[17,"KeymapStateMask","","",null,null],[17,"ExposureMask","","",null,null],[17,"VisibilityChangeMask","","",null,null],[17,"StructureNotifyMask","","",null,null],[17,"ResizeRedirectMask","","",null,null],[17,"SubstructureNotifyMask","","",null,null],[17,"SubstructureRedirectMask","","",null,null],[17,"FocusChangeMask","","",null,null],[17,"PropertyChangeMask","","",null,null],[17,"ColormapChangeMask","","",null,null],[17,"OwnerGrabButtonMask","","",null,null],[17,"PropModeReplace","","",null,null],[17,"PropModePrepend","","",null,null],[17,"PropModeAppend","","",null,null],[17,"ShiftMapIndex","","",null,null],[17,"LockMapIndex","","",null,null],[17,"ControlMapIndex","","",null,null],[17,"Mod1MapIndex","","",null,null],[17,"Mod2MapIndex","","",null,null],[17,"Mod3MapIndex","","",null,null],[17,"Mod4MapIndex","","",null,null],[17,"Mod5MapIndex","","",null,null],[17,"Button1Mask","","",null,null],[17,"Button2Mask","","",null,null],[17,"Button3Mask","","",null,null],[17,"Button4Mask","","",null,null],[17,"Button5Mask","","",null,null],[17,"AnyModifier","","",null,null],[17,"NotifyNormal","","",null,null],[17,"NotifyGrab","","",null,null],[17,"NotifyUngrab","","",null,null],[17,"NotifyWhileGrabbed","","",null,null],[17,"NotifyHint","","",null,null],[17,"NotifyAncestor","","",null,null],[17,"NotifyVirtual","","",null,null],[17,"NotifyInferior","","",null,null],[17,"NotifyNonlinear","","",null,null],[17,"NotifyNonlinearVirtual","","",null,null],[17,"NotifyPointer","","",null,null],[17,"NotifyPointerRoot","","",null,null],[17,"NotifyDetailNone","","",null,null],[17,"VisibilityUnobscured","","",null,null],[17,"VisibilityPartiallyObscured","","",null,null],[17,"VisibilityFullyObscured","","",null,null],[17,"PlaceOnTop","","",null,null],[17,"PlaceOnBottom","","",null,null],[17,"FamilyInternet","","",null,null],[17,"FamilyDECnet","","",null,null],[17,"FamilyChaos","","",null,null],[17,"FamilyInternet6","","",null,null],[17,"FamilyServerInterpreted","","",null,null],[17,"PropertyNewValue","","",null,null],[17,"PropertyDelete","","",null,null],[17,"ColormapUninstalled","","",null,null],[17,"ColormapInstalled","","",null,null],[17,"GrabModeSync","","",null,null],[17,"GrabModeAsync","","",null,null],[17,"GrabSuccess","","",null,null],[17,"AlreadyGrabbed","","",null,null],[17,"GrabInvalidTime","","",null,null],[17,"GrabNotViewable","","",null,null],[17,"GrabFrozen","","",null,null],[17,"AsyncPointer","","",null,null],[17,"SyncPointer","","",null,null],[17,"ReplayPointer","","",null,null],[17,"AsyncKeyboard","","",null,null],[17,"SyncKeyboard","","",null,null],[17,"ReplayKeyboard","","",null,null],[17,"AsyncBoth","","",null,null],[17,"SyncBoth","","",null,null],[17,"RevertToNone","","",null,null],[17,"RevertToPointerRoot","","",null,null],[17,"RevertToParent","","",null,null],[17,"CWX","","",null,null],[17,"CWY","","",null,null],[17,"CWWidth","","",null,null],[17,"CWHeight","","",null,null],[17,"CWBorderWidth","","",null,null],[17,"CWSibling","","",null,null],[17,"CWStackMode","","",null,null],[17,"ForgetGravity","","",null,null],[17,"UnmapGravity","","",null,null],[17,"NorthWestGravity","","",null,null],[17,"NorthGravity","","",null,null],[17,"NorthEastGravity","","",null,null],[17,"WestGravity","","",null,null],[17,"CenterGravity","","",null,null],[17,"EastGravity","","",null,null],[17,"SouthWestGravity","","",null,null],[17,"SouthGravity","","",null,null],[17,"SouthEastGravity","","",null,null],[17,"StaticGravity","","",null,null],[17,"XYBitmap","","",null,null],[17,"XYPixmap","","",null,null],[17,"ZPixmap","","",null,null],[17,"NotUseful","","",null,null],[17,"WhenMapped","","",null,null],[17,"Always","","",null,null],[17,"IsUnmapped","","",null,null],[17,"IsUnviewable","","",null,null],[17,"IsViewable","","",null,null],[17,"ShiftMask","","",null,null],[17,"LockMask","","",null,null],[17,"ControlMask","","",null,null],[17,"Mod1Mask","","",null,null],[17,"Mod2Mask","","",null,null],[17,"Mod3Mask","","",null,null],[17,"Mod4Mask","","",null,null],[17,"Mod5Mask","","",null,null],[17,"Button1","","",null,null],[17,"Button2","","",null,null],[17,"Button3","","",null,null],[17,"Button4","","",null,null],[17,"Button5","","",null,null],[17,"USPosition","","",null,null],[17,"USSize","","",null,null],[17,"PPosition","","",null,null],[17,"PSize","","",null,null],[17,"PMinSize","","",null,null],[17,"PMaxSize","","",null,null],[17,"PResizeInc","","",null,null],[17,"PAspect","","",null,null],[17,"PBaseSize","","",null,null],[17,"PWinGravity","","",null,null],[17,"PAllHints","","",null,null],[17,"SetModeInsert","","",null,null],[17,"SetModeDelete","","",null,null],[17,"DestroyAll","","",null,null],[17,"RetainPermanent","","",null,null],[17,"RetainTemporary","","",null,null],[17,"Above","","",null,null],[17,"Below","","",null,null],[17,"TopIf","","",null,null],[17,"BottomIf","","",null,null],[17,"Opposite","","",null,null],[17,"RaiseLowest","","",null,null],[17,"LowerHighest","","",null,null],[17,"GXclear","","",null,null],[17,"GXand","","",null,null],[17,"GXandReverse","","",null,null],[17,"GXcopy","","",null,null],[17,"GXandInverted","","",null,null],[17,"GXnoop","","",null,null],[17,"GXxor","","",null,null],[17,"GXor","","",null,null],[17,"GXnor","","",null,null],[17,"GXequiv","","",null,null],[17,"GXinvert","","",null,null],[17,"GXorReverse","","",null,null],[17,"GXcopyInverted","","",null,null],[17,"GXorInverted","","",null,null],[17,"GXnand","","",null,null],[17,"GXset","","",null,null],[17,"LineSolid","","",null,null],[17,"LineOnOffDash","","",null,null],[17,"LineDoubleDash","","",null,null],[17,"CapNotLast","","",null,null],[17,"CapButt","","",null,null],[17,"CapRound","","",null,null],[17,"CapProjecting","","",null,null],[17,"JoinMiter","","",null,null],[17,"JoinRound","","",null,null],[17,"JoinBevel","","",null,null],[17,"FillSolid","","",null,null],[17,"FillTiled","","",null,null],[17,"FillStippled","","",null,null],[17,"FillOpaqueStippled","","",null,null],[17,"EvenOddRule","","",null,null],[17,"WindingRule","","",null,null],[17,"ClipByChildren","","",null,null],[17,"IncludeInferiors","","",null,null],[17,"CoordModeOrigin","","",null,null],[17,"CoordModePrevious","","",null,null],[17,"Complex","","",null,null],[17,"Nonconvex","","",null,null],[17,"Convex","","",null,null],[17,"ArcChord","","",null,null],[17,"ArcPieSlice","","",null,null],[17,"GCFunction","","",null,null],[17,"GCPlaneMask","","",null,null],[17,"GCForeground","","",null,null],[17,"GCBackground","","",null,null],[17,"GCLineWidth","","",null,null],[17,"GCLineStyle","","",null,null],[17,"GCCapStyle","","",null,null],[17,"GCJoinStyle","","",null,null],[17,"GCFillStyle","","",null,null],[17,"GCFillRule","","",null,null],[17,"GCTile","","",null,null],[17,"GCStipple","","",null,null],[17,"GCTileStipXOrigin","","",null,null],[17,"GCTileStipYOrigin","","",null,null],[17,"GCFont","","",null,null],[17,"GCSubwindowMode","","",null,null],[17,"GCGraphicsExposures","","",null,null],[17,"GCClipXOrigin","","",null,null],[17,"GCClipYOrigin","","",null,null],[17,"GCClipMask","","",null,null],[17,"GCDashOffset","","",null,null],[17,"GCDashList","","",null,null],[17,"GCArcMode","","",null,null],[17,"GCLastBit","","",null,null],[17,"FontLeftToRight","","",null,null],[17,"FontRightToLeft","","",null,null],[17,"FontChange","","",null,null],[17,"CursorShape","","",null,null],[17,"TileShape","","",null,null],[17,"StippleShape","","",null,null],[17,"AutoRepeatModeOff","","",null,null],[17,"AutoRepeatModeOn","","",null,null],[17,"AutoRepeatModeDefault","","",null,null],[17,"LedModeOff","","",null,null],[17,"LedModeOn","","",null,null],[17,"KBKeyClickPercent","","",null,null],[17,"KBBellPercent","","",null,null],[17,"KBBellPitch","","",null,null],[17,"KBBellDuration","","",null,null],[17,"KBLed","","",null,null],[17,"KBLedMode","","",null,null],[17,"KBKey","","",null,null],[17,"KBAutoRepeatMode","","",null,null],[17,"MappingSuccess","","",null,null],[17,"MappingBusy","","",null,null],[17,"MappingFailed","","",null,null],[17,"MappingModifier","","",null,null],[17,"MappingKeyboard","","",null,null],[17,"MappingPointer","","",null,null],[17,"DontPreferBlanking","","",null,null],[17,"PreferBlanking","","",null,null],[17,"DefaultBlanking","","",null,null],[17,"DisableScreenSaver","","",null,null],[17,"DisableScreenInterval","","",null,null],[17,"DontAllowExposures","","",null,null],[17,"AllowExposures","","",null,null],[17,"DefaultExposures","","",null,null],[17,"ScreenSaverReset","","",null,null],[17,"ScreenSaverActive","","",null,null],[17,"HostInsert","","",null,null],[17,"HostDelete","","",null,null],[17,"EnableAccess","","",null,null],[17,"DisableAccess","","",null,null],[17,"StaticGray","","",null,null],[17,"GrayScale","","",null,null],[17,"StaticColor","","",null,null],[17,"PseudoColor","","",null,null],[17,"TrueColor","","",null,null],[17,"DirectColor","","",null,null],[17,"VisualNoMask","","",null,null],[17,"VisualIDMask","","",null,null],[17,"VisualScreenMask","","",null,null],[17,"VisualDepthMask","","",null,null],[17,"VisualClassMask","","",null,null],[17,"VisualRedMaskMask","","",null,null],[17,"VisualGreenMaskMask","","",null,null],[17,"VisualBlueMaskMask","","",null,null],[17,"VisualColormapSizeMask","","",null,null],[17,"VisualBitsPerRGBMask","","",null,null],[17,"VisualAllMask","","",null,null],[17,"CWBackPixmap","","",null,null],[17,"CWBackPixel","","",null,null],[17,"CWBorderPixmap","","",null,null],[17,"CWBorderPixel","","",null,null],[17,"CWBitGravity","","",null,null],[17,"CWWinGravity","","",null,null],[17,"CWBackingStore","","",null,null],[17,"CWBackingPlanes","","",null,null],[17,"CWBackingPixel","","",null,null],[17,"CWOverrideRedirect","","",null,null],[17,"CWSaveUnder","","",null,null],[17,"CWEventMask","","",null,null],[17,"CWDontPropagate","","",null,null],[17,"CWColormap","","",null,null],[17,"CWCursor","","",null,null],[17,"InputOutput","","",null,null],[17,"InputOnly","","",null,null],[17,"XIMPreeditArea","","",null,null],[17,"XIMPreeditCallbacks","","",null,null],[17,"XIMPreeditPosition","","",null,null],[17,"XIMPreeditNothing","","",null,null],[17,"XIMPreeditNone","","",null,null],[17,"XIMStatusArea","","",null,null],[17,"XIMStatusCallbacks","","",null,null],[17,"XIMStatusNothing","","",null,null],[17,"XIMStatusNone","","",null,null],[17,"LSBFirst","","",null,null],[17,"MSBFirst","","",null,null],[17,"ParentRelative","","",null,null],[17,"CopyFromParent","","",null,null],[17,"PointerWindow","","",null,null],[17,"InputFocus","","",null,null],[17,"PointerRoot","","",null,null],[17,"AnyPropertyType","","",null,null],[17,"AnyKey","","",null,null],[17,"AnyButton","","",null,null],[17,"AllTemporary","","",null,null],[17,"CurrentTime","","",null,null],[17,"NoSymbol","","",null,null],[17,"X_PROTOCOL","","",null,null],[17,"X_PROTOCOL_REVISION","","",null,null],[17,"XNVaNestedList","","",null,null],[17,"XNQueryInputStyle","","",null,null],[17,"XNClientWindow","","",null,null],[17,"XNInputStyle","","",null,null],[17,"XNFocusWindow","","",null,null],[17,"XNResourceName","","",null,null],[17,"XNResourceClass","","",null,null],[17,"XNGeometryCallback","","",null,null],[17,"XNDestroyCallback","","",null,null],[17,"XNFilterEvents","","",null,null],[17,"XNPreeditStartCallback","","",null,null],[17,"XNPreeditDoneCallback","","",null,null],[17,"XNPreeditDrawCallback","","",null,null],[17,"XNPreeditCaretCallback","","",null,null],[17,"XNPreeditStateNotifyCallback","","",null,null],[17,"XNPreeditAttributes","","",null,null],[17,"XNStatusStartCallback","","",null,null],[17,"XNStatusDoneCallback","","",null,null],[17,"XNStatusDrawCallback","","",null,null],[17,"XNStatusAttributes","","",null,null],[17,"XNArea","","",null,null],[17,"XNAreaNeeded","","",null,null],[17,"XNSpotLocation","","",null,null],[17,"XNColormap","","",null,null],[17,"XNStdColormap","","",null,null],[17,"XNForeground","","",null,null],[17,"XNBackground","","",null,null],[17,"XNBackgroundPixmap","","",null,null],[17,"XNFontSet","","",null,null],[17,"XNLineSpace","","",null,null],[17,"XNCursor","","",null,null],[17,"XNVaNestedList_0","","",null,null],[17,"XNQueryInputStyle_0","","",null,null],[17,"XNClientWindow_0","","",null,null],[17,"XNInputStyle_0","","",null,null],[17,"XNFocusWindow_0","","",null,null],[17,"XNResourceName_0","","",null,null],[17,"XNResourceClass_0","","",null,null],[17,"XNGeometryCallback_0","","",null,null],[17,"XNDestroyCallback_0","","",null,null],[17,"XNFilterEvents_0","","",null,null],[17,"XNPreeditStartCallback_0","","",null,null],[17,"XNPreeditDoneCallback_0","","",null,null],[17,"XNPreeditDrawCallback_0","","",null,null],[17,"XNPreeditCaretCallback_0","","",null,null],[17,"XNPreeditStateNotifyCallback_0","","",null,null],[17,"XNPreeditAttributes_0","","",null,null],[17,"XNStatusStartCallback_0","","",null,null],[17,"XNStatusDoneCallback_0","","",null,null],[17,"XNStatusDrawCallback_0","","",null,null],[17,"XNStatusAttributes_0","","",null,null],[17,"XNArea_0","","",null,null],[17,"XNAreaNeeded_0","","",null,null],[17,"XNSpotLocation_0","","",null,null],[17,"XNColormap_0","","",null,null],[17,"XNStdColormap_0","","",null,null],[17,"XNForeground_0","","",null,null],[17,"XNBackground_0","","",null,null],[17,"XNBackgroundPixmap_0","","",null,null],[17,"XNFontSet_0","","",null,null],[17,"XNLineSpace_0","","",null,null],[17,"XNCursor_0","","",null,null],[17,"XNQueryIMValuesList","","",null,null],[17,"XNQueryICValuesList","","",null,null],[17,"XNVisiblePosition","","",null,null],[17,"XNR6PreeditCallback","","",null,null],[17,"XNStringConversionCallback","","",null,null],[17,"XNStringConversion","","",null,null],[17,"XNResetState","","",null,null],[17,"XNHotKey","","",null,null],[17,"XNHotKeyState","","",null,null],[17,"XNPreeditState","","",null,null],[17,"XNSeparatorofNestedList","","",null,null],[17,"XNQueryIMValuesList_0","","",null,null],[17,"XNQueryICValuesList_0","","",null,null],[17,"XNVisiblePosition_0","","",null,null],[17,"XNR6PreeditCallback_0","","",null,null],[17,"XNStringConversionCallback_0","","",null,null],[17,"XNStringConversion_0","","",null,null],[17,"XNResetState_0","","",null,null],[17,"XNHotKey_0","","",null,null],[17,"XNHotKeyState_0","","",null,null],[17,"XNPreeditState_0","","",null,null],[17,"XNSeparatorofNestedList_0","","",null,null],[17,"XBufferOverflow","","",null,null],[17,"XLookupNone","","",null,null],[17,"XLookupChars","","",null,null],[17,"XLookupKeySym","","",null,null],[17,"XLookupBoth","","",null,null],[17,"XkbActionMessageLength","","",null,null],[17,"XkbOD_Success","","",null,null],[17,"XkbOD_BadLibraryVersion","","",null,null],[17,"XkbOD_ConnectionRefused","","",null,null],[17,"XkbOD_NonXkbServer","","",null,null],[17,"XkbOD_BadServerVersion","","",null,null],[17,"XkbLC_ForceLatinLookup","","",null,null],[17,"XkbLC_ConsumeLookupMods","","",null,null],[17,"XkbLC_AlwaysConsumeShiftAndLock","","",null,null],[17,"XkbLC_IgnoreNewKeyboards","","",null,null],[17,"XkbLC_ControlFallback","","",null,null],[17,"XkbLC_ConsumeKeysOnComposeFail","","",null,null],[17,"XkbLC_ComposeLED","","",null,null],[17,"XkbLC_BeepOnComposeFail","","",null,null],[17,"XkbLC_AllComposeControls","","",null,null],[17,"XkbLC_AllControls","","",null,null],[17,"XkbNewKeyboardNotify","","",null,null],[17,"XkbMapNotify","","",null,null],[17,"XkbStateNotify","","",null,null],[17,"XkbControlsNotify","","",null,null],[17,"XkbIndicatorStateNotify","","",null,null],[17,"XkbIndicatorMapNotify","","",null,null],[17,"XkbNamesNotify","","",null,null],[17,"XkbCompatMapNotify","","",null,null],[17,"XkbBellNotify","","",null,null],[17,"XkbActionMessage","","",null,null],[17,"XkbAccessXNotify","","",null,null],[17,"XkbExtensionDeviceNotify","","",null,null],[17,"XkbNewKeyboardNotifyMask","","",null,null],[17,"XkbMapNotifyMask","","",null,null],[17,"XkbStateNotifyMask","","",null,null],[17,"XkbControlsNotifyMask","","",null,null],[17,"XkbIndicatorStateNotifyMask","","",null,null],[17,"XkbIndicatorMapNotifyMask","","",null,null],[17,"XkbNamesNotifyMask","","",null,null],[17,"XkbCompatMapNotifyMask","","",null,null],[17,"XkbBellNotifyMask","","",null,null],[17,"XkbActionMessageMask","","",null,null],[17,"XkbAccessXNotifyMask","","",null,null],[17,"XkbExtensionDeviceNotifyMask","","",null,null],[17,"XkbAllEventsMask","","",null,null],[17,"NoValue","","",null,null],[17,"XValue","","",null,null],[17,"YValue","","",null,null],[17,"WidthValue","","",null,null],[17,"HeightValue","","",null,null],[17,"AllValues","","",null,null],[17,"XNegative","","",null,null],[17,"YNegative","","",null,null],[17,"InputHint","","",null,null],[17,"StateHint","","",null,null],[17,"IconPixmapHint","","",null,null],[17,"IconWindowHint","","",null,null],[17,"IconPositionHint","","",null,null],[17,"IconMaskHint","","",null,null],[17,"WindowGroupHint","","",null,null],[17,"AllHints","","",null,null],[17,"XUrgencyHint","","",null,null],[17,"XStringStyle","","",null,null],[17,"XCompoundTextStyle","","",null,null],[17,"XTextStyle","","",null,null],[17,"XStdICCTextStyle","","",null,null],[17,"XUTF8StringStyle","","",null,null],[11,"open","","",2,{"o":{"g":["xlib","openerror"],"n":"result"}}],[11,"clone","","",99,{"i":[{"n":"self"}],"o":{"n":"xevent"}}],[11,"get_type","","",99,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"fmt","","",99,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xanyevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xanyevent"}}],[11,"from","","",99,{"i":[{"n":"xanyevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xanyevent"}],"o":{"n":"xevent"}}],[11,"from","","",3,{"i":[{"n":"xevent"}],"o":{"n":"xanyevent"}}],[11,"from","","",3,{"i":[{"n":"xevent"}],"o":{"n":"xanyevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xbuttonevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xbuttonevent"}}],[11,"from","","",99,{"i":[{"n":"xbuttonevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xbuttonevent"}],"o":{"n":"xevent"}}],[11,"from","","",4,{"i":[{"n":"xevent"}],"o":{"n":"xbuttonevent"}}],[11,"from","","",4,{"i":[{"n":"xevent"}],"o":{"n":"xbuttonevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xcirculateevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xcirculateevent"}}],[11,"from","","",99,{"i":[{"n":"xcirculateevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xcirculateevent"}],"o":{"n":"xevent"}}],[11,"from","","",5,{"i":[{"n":"xevent"}],"o":{"n":"xcirculateevent"}}],[11,"from","","",5,{"i":[{"n":"xevent"}],"o":{"n":"xcirculateevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xcirculaterequestevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xcirculaterequestevent"}}],[11,"from","","",99,{"i":[{"n":"xcirculaterequestevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xcirculaterequestevent"}],"o":{"n":"xevent"}}],[11,"from","","",6,{"i":[{"n":"xevent"}],"o":{"n":"xcirculaterequestevent"}}],[11,"from","","",6,{"i":[{"n":"xevent"}],"o":{"n":"xcirculaterequestevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xclientmessageevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xclientmessageevent"}}],[11,"from","","",99,{"i":[{"n":"xclientmessageevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xclientmessageevent"}],"o":{"n":"xevent"}}],[11,"from","","",7,{"i":[{"n":"xevent"}],"o":{"n":"xclientmessageevent"}}],[11,"from","","",7,{"i":[{"n":"xevent"}],"o":{"n":"xclientmessageevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xcolormapevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xcolormapevent"}}],[11,"from","","",99,{"i":[{"n":"xcolormapevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xcolormapevent"}],"o":{"n":"xevent"}}],[11,"from","","",8,{"i":[{"n":"xevent"}],"o":{"n":"xcolormapevent"}}],[11,"from","","",8,{"i":[{"n":"xevent"}],"o":{"n":"xcolormapevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xconfigureevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xconfigureevent"}}],[11,"from","","",99,{"i":[{"n":"xconfigureevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xconfigureevent"}],"o":{"n":"xevent"}}],[11,"from","","",9,{"i":[{"n":"xevent"}],"o":{"n":"xconfigureevent"}}],[11,"from","","",9,{"i":[{"n":"xevent"}],"o":{"n":"xconfigureevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xconfigurerequestevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xconfigurerequestevent"}}],[11,"from","","",99,{"i":[{"n":"xconfigurerequestevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xconfigurerequestevent"}],"o":{"n":"xevent"}}],[11,"from","","",10,{"i":[{"n":"xevent"}],"o":{"n":"xconfigurerequestevent"}}],[11,"from","","",10,{"i":[{"n":"xevent"}],"o":{"n":"xconfigurerequestevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xcreatewindowevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xcreatewindowevent"}}],[11,"from","","",99,{"i":[{"n":"xcreatewindowevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xcreatewindowevent"}],"o":{"n":"xevent"}}],[11,"from","","",11,{"i":[{"n":"xevent"}],"o":{"n":"xcreatewindowevent"}}],[11,"from","","",11,{"i":[{"n":"xevent"}],"o":{"n":"xcreatewindowevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xcrossingevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xcrossingevent"}}],[11,"from","","",99,{"i":[{"n":"xcrossingevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xcrossingevent"}],"o":{"n":"xevent"}}],[11,"from","","",12,{"i":[{"n":"xevent"}],"o":{"n":"xcrossingevent"}}],[11,"from","","",12,{"i":[{"n":"xevent"}],"o":{"n":"xcrossingevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xdestroywindowevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xdestroywindowevent"}}],[11,"from","","",99,{"i":[{"n":"xdestroywindowevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xdestroywindowevent"}],"o":{"n":"xevent"}}],[11,"from","","",13,{"i":[{"n":"xevent"}],"o":{"n":"xdestroywindowevent"}}],[11,"from","","",13,{"i":[{"n":"xevent"}],"o":{"n":"xdestroywindowevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xerrorevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xerrorevent"}}],[11,"from","","",99,{"i":[{"n":"xerrorevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xerrorevent"}],"o":{"n":"xevent"}}],[11,"from","","",14,{"i":[{"n":"xevent"}],"o":{"n":"xerrorevent"}}],[11,"from","","",14,{"i":[{"n":"xevent"}],"o":{"n":"xerrorevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xexposeevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xexposeevent"}}],[11,"from","","",99,{"i":[{"n":"xexposeevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xexposeevent"}],"o":{"n":"xevent"}}],[11,"from","","",15,{"i":[{"n":"xevent"}],"o":{"n":"xexposeevent"}}],[11,"from","","",15,{"i":[{"n":"xevent"}],"o":{"n":"xexposeevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xfocuschangeevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xfocuschangeevent"}}],[11,"from","","",99,{"i":[{"n":"xfocuschangeevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xfocuschangeevent"}],"o":{"n":"xevent"}}],[11,"from","","",16,{"i":[{"n":"xevent"}],"o":{"n":"xfocuschangeevent"}}],[11,"from","","",16,{"i":[{"n":"xevent"}],"o":{"n":"xfocuschangeevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xgenericeventcookie"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xgenericeventcookie"}}],[11,"from","","",99,{"i":[{"n":"xgenericeventcookie"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xgenericeventcookie"}],"o":{"n":"xevent"}}],[11,"from","","",68,{"i":[{"n":"xevent"}],"o":{"n":"xgenericeventcookie"}}],[11,"from","","",68,{"i":[{"n":"xevent"}],"o":{"n":"xgenericeventcookie"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xgraphicsexposeevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xgraphicsexposeevent"}}],[11,"from","","",99,{"i":[{"n":"xgraphicsexposeevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xgraphicsexposeevent"}],"o":{"n":"xevent"}}],[11,"from","","",17,{"i":[{"n":"xevent"}],"o":{"n":"xgraphicsexposeevent"}}],[11,"from","","",17,{"i":[{"n":"xevent"}],"o":{"n":"xgraphicsexposeevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xgravityevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xgravityevent"}}],[11,"from","","",99,{"i":[{"n":"xgravityevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xgravityevent"}],"o":{"n":"xevent"}}],[11,"from","","",18,{"i":[{"n":"xevent"}],"o":{"n":"xgravityevent"}}],[11,"from","","",18,{"i":[{"n":"xevent"}],"o":{"n":"xgravityevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xkeyevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xkeyevent"}}],[11,"from","","",99,{"i":[{"n":"xkeyevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xkeyevent"}],"o":{"n":"xevent"}}],[11,"from","","",19,{"i":[{"n":"xevent"}],"o":{"n":"xkeyevent"}}],[11,"from","","",19,{"i":[{"n":"xevent"}],"o":{"n":"xkeyevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xkeymapevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xkeymapevent"}}],[11,"from","","",99,{"i":[{"n":"xkeymapevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xkeymapevent"}],"o":{"n":"xevent"}}],[11,"from","","",20,{"i":[{"n":"xevent"}],"o":{"n":"xkeymapevent"}}],[11,"from","","",20,{"i":[{"n":"xevent"}],"o":{"n":"xkeymapevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xmapevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xmapevent"}}],[11,"from","","",99,{"i":[{"n":"xmapevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xmapevent"}],"o":{"n":"xevent"}}],[11,"from","","",21,{"i":[{"n":"xevent"}],"o":{"n":"xmapevent"}}],[11,"from","","",21,{"i":[{"n":"xevent"}],"o":{"n":"xmapevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xmappingevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xmappingevent"}}],[11,"from","","",99,{"i":[{"n":"xmappingevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xmappingevent"}],"o":{"n":"xevent"}}],[11,"from","","",22,{"i":[{"n":"xevent"}],"o":{"n":"xmappingevent"}}],[11,"from","","",22,{"i":[{"n":"xevent"}],"o":{"n":"xmappingevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xmaprequestevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xmaprequestevent"}}],[11,"from","","",99,{"i":[{"n":"xmaprequestevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xmaprequestevent"}],"o":{"n":"xevent"}}],[11,"from","","",23,{"i":[{"n":"xevent"}],"o":{"n":"xmaprequestevent"}}],[11,"from","","",23,{"i":[{"n":"xevent"}],"o":{"n":"xmaprequestevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xmotionevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xmotionevent"}}],[11,"from","","",99,{"i":[{"n":"xmotionevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xmotionevent"}],"o":{"n":"xevent"}}],[11,"from","","",24,{"i":[{"n":"xevent"}],"o":{"n":"xmotionevent"}}],[11,"from","","",24,{"i":[{"n":"xevent"}],"o":{"n":"xmotionevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xnoexposeevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xnoexposeevent"}}],[11,"from","","",99,{"i":[{"n":"xnoexposeevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xnoexposeevent"}],"o":{"n":"xevent"}}],[11,"from","","",25,{"i":[{"n":"xevent"}],"o":{"n":"xnoexposeevent"}}],[11,"from","","",25,{"i":[{"n":"xevent"}],"o":{"n":"xnoexposeevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xpropertyevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xpropertyevent"}}],[11,"from","","",99,{"i":[{"n":"xpropertyevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xpropertyevent"}],"o":{"n":"xevent"}}],[11,"from","","",26,{"i":[{"n":"xevent"}],"o":{"n":"xpropertyevent"}}],[11,"from","","",26,{"i":[{"n":"xevent"}],"o":{"n":"xpropertyevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xreparentevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xreparentevent"}}],[11,"from","","",99,{"i":[{"n":"xreparentevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xreparentevent"}],"o":{"n":"xevent"}}],[11,"from","","",27,{"i":[{"n":"xevent"}],"o":{"n":"xreparentevent"}}],[11,"from","","",27,{"i":[{"n":"xevent"}],"o":{"n":"xreparentevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xresizerequestevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xresizerequestevent"}}],[11,"from","","",99,{"i":[{"n":"xresizerequestevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xresizerequestevent"}],"o":{"n":"xevent"}}],[11,"from","","",28,{"i":[{"n":"xevent"}],"o":{"n":"xresizerequestevent"}}],[11,"from","","",28,{"i":[{"n":"xevent"}],"o":{"n":"xresizerequestevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xselectionclearevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xselectionclearevent"}}],[11,"from","","",99,{"i":[{"n":"xselectionclearevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xselectionclearevent"}],"o":{"n":"xevent"}}],[11,"from","","",29,{"i":[{"n":"xevent"}],"o":{"n":"xselectionclearevent"}}],[11,"from","","",29,{"i":[{"n":"xevent"}],"o":{"n":"xselectionclearevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xselectionevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xselectionevent"}}],[11,"from","","",99,{"i":[{"n":"xselectionevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xselectionevent"}],"o":{"n":"xevent"}}],[11,"from","","",30,{"i":[{"n":"xevent"}],"o":{"n":"xselectionevent"}}],[11,"from","","",30,{"i":[{"n":"xevent"}],"o":{"n":"xselectionevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xselectionrequestevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xselectionrequestevent"}}],[11,"from","","",99,{"i":[{"n":"xselectionrequestevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xselectionrequestevent"}],"o":{"n":"xevent"}}],[11,"from","","",31,{"i":[{"n":"xevent"}],"o":{"n":"xselectionrequestevent"}}],[11,"from","","",31,{"i":[{"n":"xevent"}],"o":{"n":"xselectionrequestevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xunmapevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xunmapevent"}}],[11,"from","","",99,{"i":[{"n":"xunmapevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xunmapevent"}],"o":{"n":"xevent"}}],[11,"from","","",32,{"i":[{"n":"xevent"}],"o":{"n":"xunmapevent"}}],[11,"from","","",32,{"i":[{"n":"xevent"}],"o":{"n":"xunmapevent"}}],[11,"as_mut","","",99,{"i":[{"n":"self"}],"o":{"n":"xvisibilityevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xvisibilityevent"}}],[11,"from","","",99,{"i":[{"n":"xvisibilityevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xvisibilityevent"}],"o":{"n":"xevent"}}],[11,"from","","",33,{"i":[{"n":"xevent"}],"o":{"n":"xvisibilityevent"}}],[11,"from","","",33,{"i":[{"n":"xevent"}],"o":{"n":"xvisibilityevent"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"xanyevent"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"xanyevent"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"xanyevent"}],"o":{"n":"bool"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"xbuttonevent"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"xbuttonevent"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"xbuttonevent"}],"o":{"n":"bool"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"xcirculateevent"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"xcirculateevent"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"xcirculateevent"}],"o":{"n":"bool"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"xcirculaterequestevent"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"xcirculaterequestevent"}],"o":{"n":"bool"}}],[11,"ne","","",6,{"i":[{"n":"self"},{"n":"xcirculaterequestevent"}],"o":{"n":"bool"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"xclientmessageevent"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"xclientmessageevent"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"xclientmessageevent"}],"o":{"n":"bool"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"xcolormapevent"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"xcolormapevent"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"xcolormapevent"}],"o":{"n":"bool"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"xconfigureevent"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"xconfigureevent"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"xconfigureevent"}],"o":{"n":"bool"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"xconfigurerequestevent"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"xconfigurerequestevent"}],"o":{"n":"bool"}}],[11,"ne","","",10,{"i":[{"n":"self"},{"n":"xconfigurerequestevent"}],"o":{"n":"bool"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"xcreatewindowevent"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"xcreatewindowevent"}],"o":{"n":"bool"}}],[11,"ne","","",11,{"i":[{"n":"self"},{"n":"xcreatewindowevent"}],"o":{"n":"bool"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"xcrossingevent"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"xcrossingevent"}],"o":{"n":"bool"}}],[11,"ne","","",12,{"i":[{"n":"self"},{"n":"xcrossingevent"}],"o":{"n":"bool"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"xdestroywindowevent"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"xdestroywindowevent"}],"o":{"n":"bool"}}],[11,"ne","","",13,{"i":[{"n":"self"},{"n":"xdestroywindowevent"}],"o":{"n":"bool"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"xerrorevent"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"xerrorevent"}],"o":{"n":"bool"}}],[11,"ne","","",14,{"i":[{"n":"self"},{"n":"xerrorevent"}],"o":{"n":"bool"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"xexposeevent"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"xexposeevent"}],"o":{"n":"bool"}}],[11,"ne","","",15,{"i":[{"n":"self"},{"n":"xexposeevent"}],"o":{"n":"bool"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"xfocuschangeevent"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"xfocuschangeevent"}],"o":{"n":"bool"}}],[11,"ne","","",16,{"i":[{"n":"self"},{"n":"xfocuschangeevent"}],"o":{"n":"bool"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"xgraphicsexposeevent"}}],[11,"eq","","",17,{"i":[{"n":"self"},{"n":"xgraphicsexposeevent"}],"o":{"n":"bool"}}],[11,"ne","","",17,{"i":[{"n":"self"},{"n":"xgraphicsexposeevent"}],"o":{"n":"bool"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"xgravityevent"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"xgravityevent"}],"o":{"n":"bool"}}],[11,"ne","","",18,{"i":[{"n":"self"},{"n":"xgravityevent"}],"o":{"n":"bool"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"xkeyevent"}}],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"xkeyevent"}],"o":{"n":"bool"}}],[11,"ne","","",19,{"i":[{"n":"self"},{"n":"xkeyevent"}],"o":{"n":"bool"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"xkeymapevent"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"xkeymapevent"}],"o":{"n":"bool"}}],[11,"ne","","",20,{"i":[{"n":"self"},{"n":"xkeymapevent"}],"o":{"n":"bool"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"xmapevent"}}],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"xmapevent"}],"o":{"n":"bool"}}],[11,"ne","","",21,{"i":[{"n":"self"},{"n":"xmapevent"}],"o":{"n":"bool"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"xmappingevent"}}],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"xmappingevent"}],"o":{"n":"bool"}}],[11,"ne","","",22,{"i":[{"n":"self"},{"n":"xmappingevent"}],"o":{"n":"bool"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"xmaprequestevent"}}],[11,"eq","","",23,{"i":[{"n":"self"},{"n":"xmaprequestevent"}],"o":{"n":"bool"}}],[11,"ne","","",23,{"i":[{"n":"self"},{"n":"xmaprequestevent"}],"o":{"n":"bool"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"xmotionevent"}}],[11,"eq","","",24,{"i":[{"n":"self"},{"n":"xmotionevent"}],"o":{"n":"bool"}}],[11,"ne","","",24,{"i":[{"n":"self"},{"n":"xmotionevent"}],"o":{"n":"bool"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"xnoexposeevent"}}],[11,"eq","","",25,{"i":[{"n":"self"},{"n":"xnoexposeevent"}],"o":{"n":"bool"}}],[11,"ne","","",25,{"i":[{"n":"self"},{"n":"xnoexposeevent"}],"o":{"n":"bool"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"xpropertyevent"}}],[11,"eq","","",26,{"i":[{"n":"self"},{"n":"xpropertyevent"}],"o":{"n":"bool"}}],[11,"ne","","",26,{"i":[{"n":"self"},{"n":"xpropertyevent"}],"o":{"n":"bool"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"xreparentevent"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"xreparentevent"}],"o":{"n":"bool"}}],[11,"ne","","",27,{"i":[{"n":"self"},{"n":"xreparentevent"}],"o":{"n":"bool"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"xresizerequestevent"}}],[11,"eq","","",28,{"i":[{"n":"self"},{"n":"xresizerequestevent"}],"o":{"n":"bool"}}],[11,"ne","","",28,{"i":[{"n":"self"},{"n":"xresizerequestevent"}],"o":{"n":"bool"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"xselectionclearevent"}}],[11,"eq","","",29,{"i":[{"n":"self"},{"n":"xselectionclearevent"}],"o":{"n":"bool"}}],[11,"ne","","",29,{"i":[{"n":"self"},{"n":"xselectionclearevent"}],"o":{"n":"bool"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"xselectionevent"}}],[11,"eq","","",30,{"i":[{"n":"self"},{"n":"xselectionevent"}],"o":{"n":"bool"}}],[11,"ne","","",30,{"i":[{"n":"self"},{"n":"xselectionevent"}],"o":{"n":"bool"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"xselectionrequestevent"}}],[11,"eq","","",31,{"i":[{"n":"self"},{"n":"xselectionrequestevent"}],"o":{"n":"bool"}}],[11,"ne","","",31,{"i":[{"n":"self"},{"n":"xselectionrequestevent"}],"o":{"n":"bool"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"xunmapevent"}}],[11,"eq","","",32,{"i":[{"n":"self"},{"n":"xunmapevent"}],"o":{"n":"bool"}}],[11,"ne","","",32,{"i":[{"n":"self"},{"n":"xunmapevent"}],"o":{"n":"bool"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"xvisibilityevent"}}],[11,"eq","","",33,{"i":[{"n":"self"},{"n":"xvisibilityevent"}],"o":{"n":"bool"}}],[11,"ne","","",33,{"i":[{"n":"self"},{"n":"xvisibilityevent"}],"o":{"n":"bool"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"_xkbdesc"}}],[11,"eq","","",35,{"i":[{"n":"self"},{"n":"_xkbdesc"}],"o":{"n":"bool"}}],[11,"ne","","",35,{"i":[{"n":"self"},{"n":"_xkbdesc"}],"o":{"n":"bool"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"_xkbkeyaliasrec"}}],[11,"eq","","",37,{"i":[{"n":"self"},{"n":"_xkbkeyaliasrec"}],"o":{"n":"bool"}}],[11,"ne","","",37,{"i":[{"n":"self"},{"n":"_xkbkeyaliasrec"}],"o":{"n":"bool"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"_xkbkeynamerec"}}],[11,"eq","","",38,{"i":[{"n":"self"},{"n":"_xkbkeynamerec"}],"o":{"n":"bool"}}],[11,"ne","","",38,{"i":[{"n":"self"},{"n":"_xkbkeynamerec"}],"o":{"n":"bool"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"_xkbnamesrec"}}],[11,"eq","","",39,{"i":[{"n":"self"},{"n":"_xkbnamesrec"}],"o":{"n":"bool"}}],[11,"ne","","",39,{"i":[{"n":"self"},{"n":"_xkbnamesrec"}],"o":{"n":"bool"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"xkbanyevent"}}],[11,"eq","","",40,{"i":[{"n":"self"},{"n":"xkbanyevent"}],"o":{"n":"bool"}}],[11,"ne","","",40,{"i":[{"n":"self"},{"n":"xkbanyevent"}],"o":{"n":"bool"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"xkbnewkeyboardnotifyevent"}}],[11,"eq","","",41,{"i":[{"n":"self"},{"n":"xkbnewkeyboardnotifyevent"}],"o":{"n":"bool"}}],[11,"ne","","",41,{"i":[{"n":"self"},{"n":"xkbnewkeyboardnotifyevent"}],"o":{"n":"bool"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"_xkbmapnotifyevent"}}],[11,"eq","","",42,{"i":[{"n":"self"},{"n":"_xkbmapnotifyevent"}],"o":{"n":"bool"}}],[11,"ne","","",42,{"i":[{"n":"self"},{"n":"_xkbmapnotifyevent"}],"o":{"n":"bool"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"xkbstatenotifyevent"}}],[11,"eq","","",43,{"i":[{"n":"self"},{"n":"xkbstatenotifyevent"}],"o":{"n":"bool"}}],[11,"ne","","",43,{"i":[{"n":"self"},{"n":"xkbstatenotifyevent"}],"o":{"n":"bool"}}],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"_xkbcontrolsnotifyevent"}}],[11,"eq","","",44,{"i":[{"n":"self"},{"n":"_xkbcontrolsnotifyevent"}],"o":{"n":"bool"}}],[11,"ne","","",44,{"i":[{"n":"self"},{"n":"_xkbcontrolsnotifyevent"}],"o":{"n":"bool"}}],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"xkbindicatornotifyevent"}}],[11,"eq","","",45,{"i":[{"n":"self"},{"n":"xkbindicatornotifyevent"}],"o":{"n":"bool"}}],[11,"ne","","",45,{"i":[{"n":"self"},{"n":"xkbindicatornotifyevent"}],"o":{"n":"bool"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"_xkbnamesnotifyevent"}}],[11,"eq","","",46,{"i":[{"n":"self"},{"n":"_xkbnamesnotifyevent"}],"o":{"n":"bool"}}],[11,"ne","","",46,{"i":[{"n":"self"},{"n":"_xkbnamesnotifyevent"}],"o":{"n":"bool"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"xkbcompatmapnotifyevent"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"xkbcompatmapnotifyevent"}],"o":{"n":"bool"}}],[11,"ne","","",47,{"i":[{"n":"self"},{"n":"xkbcompatmapnotifyevent"}],"o":{"n":"bool"}}],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"xkbbellnotifyevent"}}],[11,"eq","","",48,{"i":[{"n":"self"},{"n":"xkbbellnotifyevent"}],"o":{"n":"bool"}}],[11,"ne","","",48,{"i":[{"n":"self"},{"n":"xkbbellnotifyevent"}],"o":{"n":"bool"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"xkbactionmessageevent"}}],[11,"eq","","",49,{"i":[{"n":"self"},{"n":"xkbactionmessageevent"}],"o":{"n":"bool"}}],[11,"ne","","",49,{"i":[{"n":"self"},{"n":"xkbactionmessageevent"}],"o":{"n":"bool"}}],[11,"fmt","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"xkbaccessxnotifyevent"}}],[11,"eq","","",50,{"i":[{"n":"self"},{"n":"xkbaccessxnotifyevent"}],"o":{"n":"bool"}}],[11,"ne","","",50,{"i":[{"n":"self"},{"n":"xkbaccessxnotifyevent"}],"o":{"n":"bool"}}],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"_xkbextensiondevicenotifyevent"}}],[11,"eq","","",51,{"i":[{"n":"self"},{"n":"_xkbextensiondevicenotifyevent"}],"o":{"n":"bool"}}],[11,"ne","","",51,{"i":[{"n":"self"},{"n":"_xkbextensiondevicenotifyevent"}],"o":{"n":"bool"}}],[11,"fmt","","",100,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",100,{"i":[{"n":"self"}],"o":{"n":"xkbevent"}}],[11,"eq","","",100,{"i":[{"n":"self"},{"n":"xkbevent"}],"o":{"n":"bool"}}],[11,"ne","","",100,{"i":[{"n":"self"},{"n":"xkbevent"}],"o":{"n":"bool"}}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"depth"}}],[11,"eq","","",52,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"ne","","",52,{"i":[{"n":"self"},{"n":"depth"}],"o":{"n":"bool"}}],[11,"fmt","","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"screen"}}],[11,"eq","","",53,{"i":[{"n":"self"},{"n":"screen"}],"o":{"n":"bool"}}],[11,"ne","","",53,{"i":[{"n":"self"},{"n":"screen"}],"o":{"n":"bool"}}],[11,"fmt","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"screenformat"}}],[11,"eq","","",54,{"i":[{"n":"self"},{"n":"screenformat"}],"o":{"n":"bool"}}],[11,"ne","","",54,{"i":[{"n":"self"},{"n":"screenformat"}],"o":{"n":"bool"}}],[11,"fmt","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"visual"}}],[11,"eq","","",55,{"i":[{"n":"self"},{"n":"visual"}],"o":{"n":"bool"}}],[11,"ne","","",55,{"i":[{"n":"self"},{"n":"visual"}],"o":{"n":"bool"}}],[11,"fmt","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"xarc"}}],[11,"eq","","",56,{"i":[{"n":"self"},{"n":"xarc"}],"o":{"n":"bool"}}],[11,"ne","","",56,{"i":[{"n":"self"},{"n":"xarc"}],"o":{"n":"bool"}}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"xchar2b"}}],[11,"eq","","",57,{"i":[{"n":"self"},{"n":"xchar2b"}],"o":{"n":"bool"}}],[11,"ne","","",57,{"i":[{"n":"self"},{"n":"xchar2b"}],"o":{"n":"bool"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"xcharstruct"}}],[11,"eq","","",58,{"i":[{"n":"self"},{"n":"xcharstruct"}],"o":{"n":"bool"}}],[11,"ne","","",58,{"i":[{"n":"self"},{"n":"xcharstruct"}],"o":{"n":"bool"}}],[11,"fmt","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",59,{"i":[{"n":"self"}],"o":{"n":"xclasshint"}}],[11,"eq","","",59,{"i":[{"n":"self"},{"n":"xclasshint"}],"o":{"n":"bool"}}],[11,"ne","","",59,{"i":[{"n":"self"},{"n":"xclasshint"}],"o":{"n":"bool"}}],[11,"fmt","","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",60,{"i":[{"n":"self"}],"o":{"n":"xcolor"}}],[11,"eq","","",60,{"i":[{"n":"self"},{"n":"xcolor"}],"o":{"n":"bool"}}],[11,"ne","","",60,{"i":[{"n":"self"},{"n":"xcolor"}],"o":{"n":"bool"}}],[11,"fmt","","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",61,{"i":[{"n":"self"}],"o":{"n":"xcomposestatus"}}],[11,"eq","","",61,{"i":[{"n":"self"},{"n":"xcomposestatus"}],"o":{"n":"bool"}}],[11,"ne","","",61,{"i":[{"n":"self"},{"n":"xcomposestatus"}],"o":{"n":"bool"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"xextcodes"}}],[11,"eq","","",62,{"i":[{"n":"self"},{"n":"xextcodes"}],"o":{"n":"bool"}}],[11,"ne","","",62,{"i":[{"n":"self"},{"n":"xextcodes"}],"o":{"n":"bool"}}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"xfontprop"}}],[11,"eq","","",64,{"i":[{"n":"self"},{"n":"xfontprop"}],"o":{"n":"bool"}}],[11,"ne","","",64,{"i":[{"n":"self"},{"n":"xfontprop"}],"o":{"n":"bool"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"xfontsetextents"}}],[11,"eq","","",65,{"i":[{"n":"self"},{"n":"xfontsetextents"}],"o":{"n":"bool"}}],[11,"ne","","",65,{"i":[{"n":"self"},{"n":"xfontsetextents"}],"o":{"n":"bool"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"xfontstruct"}}],[11,"eq","","",66,{"i":[{"n":"self"},{"n":"xfontstruct"}],"o":{"n":"bool"}}],[11,"ne","","",66,{"i":[{"n":"self"},{"n":"xfontstruct"}],"o":{"n":"bool"}}],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",67,{"i":[{"n":"self"}],"o":{"n":"xgcvalues"}}],[11,"eq","","",67,{"i":[{"n":"self"},{"n":"xgcvalues"}],"o":{"n":"bool"}}],[11,"ne","","",67,{"i":[{"n":"self"},{"n":"xgcvalues"}],"o":{"n":"bool"}}],[11,"fmt","","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"xgenericeventcookie"}}],[11,"eq","","",68,{"i":[{"n":"self"},{"n":"xgenericeventcookie"}],"o":{"n":"bool"}}],[11,"ne","","",68,{"i":[{"n":"self"},{"n":"xgenericeventcookie"}],"o":{"n":"bool"}}],[11,"fmt","","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",69,{"i":[{"n":"self"}],"o":{"n":"xhostaddress"}}],[11,"eq","","",69,{"i":[{"n":"self"},{"n":"xhostaddress"}],"o":{"n":"bool"}}],[11,"ne","","",69,{"i":[{"n":"self"},{"n":"xhostaddress"}],"o":{"n":"bool"}}],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",70,{"i":[{"n":"self"}],"o":{"n":"xiconsize"}}],[11,"eq","","",70,{"i":[{"n":"self"},{"n":"xiconsize"}],"o":{"n":"bool"}}],[11,"ne","","",70,{"i":[{"n":"self"},{"n":"xiconsize"}],"o":{"n":"bool"}}],[11,"fmt","","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"ximage"}}],[11,"eq","","",71,{"i":[{"n":"self"},{"n":"ximage"}],"o":{"n":"bool"}}],[11,"ne","","",71,{"i":[{"n":"self"},{"n":"ximage"}],"o":{"n":"bool"}}],[11,"fmt","","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"xkeyboardcontrol"}}],[11,"eq","","",72,{"i":[{"n":"self"},{"n":"xkeyboardcontrol"}],"o":{"n":"bool"}}],[11,"ne","","",72,{"i":[{"n":"self"},{"n":"xkeyboardcontrol"}],"o":{"n":"bool"}}],[11,"fmt","","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"xkeyboardstate"}}],[11,"eq","","",73,{"i":[{"n":"self"},{"n":"xkeyboardstate"}],"o":{"n":"bool"}}],[11,"ne","","",73,{"i":[{"n":"self"},{"n":"xkeyboardstate"}],"o":{"n":"bool"}}],[11,"fmt","","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"xmbtextitem"}}],[11,"eq","","",74,{"i":[{"n":"self"},{"n":"xmbtextitem"}],"o":{"n":"bool"}}],[11,"ne","","",74,{"i":[{"n":"self"},{"n":"xmbtextitem"}],"o":{"n":"bool"}}],[11,"fmt","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",75,{"i":[{"n":"self"}],"o":{"n":"xmodifierkeymap"}}],[11,"eq","","",75,{"i":[{"n":"self"},{"n":"xmodifierkeymap"}],"o":{"n":"bool"}}],[11,"ne","","",75,{"i":[{"n":"self"},{"n":"xmodifierkeymap"}],"o":{"n":"bool"}}],[11,"fmt","","",76,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",76,{"i":[{"n":"self"}],"o":{"n":"xomcharsetlist"}}],[11,"eq","","",76,{"i":[{"n":"self"},{"n":"xomcharsetlist"}],"o":{"n":"bool"}}],[11,"ne","","",76,{"i":[{"n":"self"},{"n":"xomcharsetlist"}],"o":{"n":"bool"}}],[11,"fmt","","",77,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",77,{"i":[{"n":"self"}],"o":{"n":"xpixmapformatvalues"}}],[11,"eq","","",77,{"i":[{"n":"self"},{"n":"xpixmapformatvalues"}],"o":{"n":"bool"}}],[11,"ne","","",77,{"i":[{"n":"self"},{"n":"xpixmapformatvalues"}],"o":{"n":"bool"}}],[11,"fmt","","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"xpoint"}}],[11,"eq","","",78,{"i":[{"n":"self"},{"n":"xpoint"}],"o":{"n":"bool"}}],[11,"ne","","",78,{"i":[{"n":"self"},{"n":"xpoint"}],"o":{"n":"bool"}}],[11,"fmt","","",79,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",79,{"i":[{"n":"self"}],"o":{"n":"xrectangle"}}],[11,"eq","","",79,{"i":[{"n":"self"},{"n":"xrectangle"}],"o":{"n":"bool"}}],[11,"ne","","",79,{"i":[{"n":"self"},{"n":"xrectangle"}],"o":{"n":"bool"}}],[11,"fmt","","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",80,{"i":[{"n":"self"}],"o":{"n":"xrmoptiondescrec"}}],[11,"eq","","",80,{"i":[{"n":"self"},{"n":"xrmoptiondescrec"}],"o":{"n":"bool"}}],[11,"ne","","",80,{"i":[{"n":"self"},{"n":"xrmoptiondescrec"}],"o":{"n":"bool"}}],[11,"fmt","","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",81,{"i":[{"n":"self"}],"o":{"n":"xrmvalue"}}],[11,"eq","","",81,{"i":[{"n":"self"},{"n":"xrmvalue"}],"o":{"n":"bool"}}],[11,"ne","","",81,{"i":[{"n":"self"},{"n":"xrmvalue"}],"o":{"n":"bool"}}],[11,"fmt","","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",82,{"i":[{"n":"self"}],"o":{"n":"xsegment"}}],[11,"eq","","",82,{"i":[{"n":"self"},{"n":"xsegment"}],"o":{"n":"bool"}}],[11,"ne","","",82,{"i":[{"n":"self"},{"n":"xsegment"}],"o":{"n":"bool"}}],[11,"fmt","","",83,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",83,{"i":[{"n":"self"}],"o":{"n":"xsetwindowattributes"}}],[11,"eq","","",83,{"i":[{"n":"self"},{"n":"xsetwindowattributes"}],"o":{"n":"bool"}}],[11,"ne","","",83,{"i":[{"n":"self"},{"n":"xsetwindowattributes"}],"o":{"n":"bool"}}],[11,"fmt","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",84,{"i":[{"n":"self"}],"o":{"n":"xsizehints"}}],[11,"eq","","",84,{"i":[{"n":"self"},{"n":"xsizehints"}],"o":{"n":"bool"}}],[11,"ne","","",84,{"i":[{"n":"self"},{"n":"xsizehints"}],"o":{"n":"bool"}}],[11,"fmt","","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",85,{"i":[{"n":"self"}],"o":{"n":"xstandardcolormap"}}],[11,"eq","","",85,{"i":[{"n":"self"},{"n":"xstandardcolormap"}],"o":{"n":"bool"}}],[11,"ne","","",85,{"i":[{"n":"self"},{"n":"xstandardcolormap"}],"o":{"n":"bool"}}],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",86,{"i":[{"n":"self"}],"o":{"n":"xtextitem"}}],[11,"eq","","",86,{"i":[{"n":"self"},{"n":"xtextitem"}],"o":{"n":"bool"}}],[11,"ne","","",86,{"i":[{"n":"self"},{"n":"xtextitem"}],"o":{"n":"bool"}}],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",87,{"i":[{"n":"self"}],"o":{"n":"xtextitem16"}}],[11,"eq","","",87,{"i":[{"n":"self"},{"n":"xtextitem16"}],"o":{"n":"bool"}}],[11,"ne","","",87,{"i":[{"n":"self"},{"n":"xtextitem16"}],"o":{"n":"bool"}}],[11,"fmt","","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",88,{"i":[{"n":"self"}],"o":{"n":"xtextproperty"}}],[11,"eq","","",88,{"i":[{"n":"self"},{"n":"xtextproperty"}],"o":{"n":"bool"}}],[11,"ne","","",88,{"i":[{"n":"self"},{"n":"xtextproperty"}],"o":{"n":"bool"}}],[11,"fmt","","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",89,{"i":[{"n":"self"}],"o":{"n":"xtimecoord"}}],[11,"eq","","",89,{"i":[{"n":"self"},{"n":"xtimecoord"}],"o":{"n":"bool"}}],[11,"ne","","",89,{"i":[{"n":"self"},{"n":"xtimecoord"}],"o":{"n":"bool"}}],[11,"fmt","","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",90,{"i":[{"n":"self"}],"o":{"n":"xvisualinfo"}}],[11,"eq","","",90,{"i":[{"n":"self"},{"n":"xvisualinfo"}],"o":{"n":"bool"}}],[11,"ne","","",90,{"i":[{"n":"self"},{"n":"xvisualinfo"}],"o":{"n":"bool"}}],[11,"fmt","","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",91,{"i":[{"n":"self"}],"o":{"n":"xwctextitem"}}],[11,"eq","","",91,{"i":[{"n":"self"},{"n":"xwctextitem"}],"o":{"n":"bool"}}],[11,"ne","","",91,{"i":[{"n":"self"},{"n":"xwctextitem"}],"o":{"n":"bool"}}],[11,"fmt","","",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",92,{"i":[{"n":"self"}],"o":{"n":"xwindowattributes"}}],[11,"eq","","",92,{"i":[{"n":"self"},{"n":"xwindowattributes"}],"o":{"n":"bool"}}],[11,"ne","","",92,{"i":[{"n":"self"},{"n":"xwindowattributes"}],"o":{"n":"bool"}}],[11,"fmt","","",93,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",93,{"i":[{"n":"self"}],"o":{"n":"xwindowchanges"}}],[11,"eq","","",93,{"i":[{"n":"self"},{"n":"xwindowchanges"}],"o":{"n":"bool"}}],[11,"ne","","",93,{"i":[{"n":"self"},{"n":"xwindowchanges"}],"o":{"n":"bool"}}],[11,"fmt","","",94,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",94,{"i":[{"n":"self"}],"o":{"n":"xwmhints"}}],[11,"eq","","",94,{"i":[{"n":"self"},{"n":"xwmhints"}],"o":{"n":"bool"}}],[11,"ne","","",94,{"i":[{"n":"self"},{"n":"xwmhints"}],"o":{"n":"bool"}}],[11,"fmt","","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",97,{"i":[{"n":"self"}],"o":{"n":"aspectratio"}}],[11,"eq","","",97,{"i":[{"n":"self"},{"n":"aspectratio"}],"o":{"n":"bool"}}],[11,"ne","","",97,{"i":[{"n":"self"},{"n":"aspectratio"}],"o":{"n":"bool"}}],[11,"fmt","","",101,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",101,{"i":[{"n":"self"}],"o":{"n":"clientmessagedata"}}],[11,"default","","",101,{"o":{"n":"clientmessagedata"}}],[11,"eq","","",101,{"i":[{"n":"self"},{"n":"clientmessagedata"}],"o":{"n":"bool"}}],[11,"ne","","",101,{"i":[{"n":"self"},{"n":"clientmessagedata"}],"o":{"n":"bool"}}],[11,"as_bytes","","",101,null],[11,"as_bytes_mut","","",101,null],[11,"as_longs","","",101,null],[11,"as_longs_mut","","",101,null],[11,"as_shorts","","",101,null],[11,"as_shorts_mut","","",101,null],[11,"get_byte","","",101,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"c_char"}}],[11,"get_long","","",101,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"c_long"}}],[11,"get_short","","",101,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"c_short"}}],[11,"new","","",101,{"o":{"n":"clientmessagedata"}}],[11,"set_byte","","",101,{"i":[{"n":"self"},{"n":"usize"},{"n":"c_char"}]}],[11,"set_long","","",101,{"i":[{"n":"self"},{"n":"usize"},{"n":"c_long"}]}],[11,"set_short","","",101,{"i":[{"n":"self"},{"n":"usize"},{"n":"c_short"}]}],[11,"as_mut","","",101,null],[11,"as_ref","","",101,null],[11,"from","","",101,null],[11,"as_mut","","",101,null],[11,"as_ref","","",101,null],[11,"from","","",101,null],[11,"as_mut","","",101,null],[11,"as_ref","","",101,null],[11,"from","","",101,null],[11,"as_mut","","",101,null],[11,"as_ref","","",101,null],[11,"from","","",101,null],[11,"as_mut","","",101,null],[11,"as_ref","","",101,null],[11,"from","","",101,null],[11,"as_mut","","",101,null],[11,"as_ref","","",101,null],[11,"from","","",101,null],[11,"fmt","","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",98,{"i":[{"n":"self"}],"o":{"n":"imagefns"}}],[11,"eq","","",98,{"i":[{"n":"self"},{"n":"imagefns"}],"o":{"n":"bool"}}],[0,"dpms","x11_dl","",null,null],[3,"Xext","x11_dl::dpms","",null,null],[12,"DPMSQueryExtension","","",102,null],[12,"DPMSGetVersion","","",102,null],[12,"DPMSCapable","","",102,null],[12,"DPMSSetTimeouts","","",102,null],[12,"DPMSGetTimeouts","","",102,null],[12,"DPMSEnable","","",102,null],[12,"DPMSDisable","","",102,null],[12,"DPMSForceLevel","","",102,null],[12,"DPMSInfo","","",102,null],[17,"DPMSMajorVersion","","",null,null],[17,"DPMSMinorVersion","","",null,null],[17,"DPMSExtensionName","","",null,null],[17,"DPMSModeOn","","",null,null],[17,"DPMSModeStandby","","",null,null],[17,"DPMSModeSuspend","","",null,null],[17,"DPMSModeOff","","",null,null],[11,"open","","",102,{"o":{"g":["xext","openerror"],"n":"result"}}],[0,"glx","x11_dl","",null,null],[3,"Glx","x11_dl::glx","",null,null],[12,"glXChooseFBConfig","","",103,null],[12,"glXChooseVisual","","",103,null],[12,"glXCopyContext","","",103,null],[12,"glXCreateContext","","",103,null],[12,"glXCreateGLXPixmap","","",103,null],[12,"glXCreateNewContext","","",103,null],[12,"glXCreatePbuffer","","",103,null],[12,"glXCreatePixmap","","",103,null],[12,"glXCreateWindow","","",103,null],[12,"glXDestroyContext","","",103,null],[12,"glXDestroyGLXPixmap","","",103,null],[12,"glXDestroyPbuffer","","",103,null],[12,"glXDestroyPixmap","","",103,null],[12,"glXDestroyWindow","","",103,null],[12,"glXGetClientString","","",103,null],[12,"glXGetConfig","","",103,null],[12,"glXGetCurrentContext","","",103,null],[12,"glXGetCurrentDisplay","","",103,null],[12,"glXGetCurrentDrawable","","",103,null],[12,"glXGetCurrentReadDrawable","","",103,null],[12,"glXGetFBConfigAttrib","","",103,null],[12,"glXGetFBConfigs","","",103,null],[12,"glXGetProcAddress","","",103,null],[12,"glXGetProcAddressARB","","",103,null],[12,"glXGetSelectedEvent","","",103,null],[12,"glXGetVisualFromFBConfig","","",103,null],[12,"glXIsDirect","","",103,null],[12,"glXMakeContextCurrent","","",103,null],[12,"glXMakeCurrent","","",103,null],[12,"glXQueryContext","","",103,null],[12,"glXQueryDrawable","","",103,null],[12,"glXQueryExtension","","",103,null],[12,"glXQueryExtensionsString","","",103,null],[12,"glXQueryServerString","","",103,null],[12,"glXQueryVersion","","",103,null],[12,"glXSelectEvent","","",103,null],[12,"glXSwapBuffers","","",103,null],[12,"glXUseXFont","","",103,null],[12,"glXWaitGL","","",103,null],[12,"glXWaitX","","",103,null],[3,"__GLXcontextRec","","",null,null],[3,"__GLXFBConfigRec","","",null,null],[0,"arb","","",null,null],[17,"GLX_CONTEXT_MAJOR_VERSION_ARB","x11_dl::glx::arb","",null,null],[17,"GLX_CONTEXT_MINOR_VERSION_ARB","","",null,null],[17,"GLX_CONTEXT_FLAGS_ARB","","",null,null],[17,"GLX_CONTEXT_PROFILE_MASK_ARB","","",null,null],[17,"GLX_CONTEXT_DEBUG_BIT_ARB","","",null,null],[17,"GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB","","",null,null],[17,"GLX_CONTEXT_CORE_PROFILE_BIT_ARB","","",null,null],[17,"GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB","","",null,null],[0,"ext","x11_dl::glx","",null,null],[17,"GLX_SWAP_INTERVAL_EXT","x11_dl::glx::ext","",null,null],[17,"GLX_MAX_SWAP_INTERVAL_EXT","","",null,null],[6,"GLXContext","x11_dl::glx","",null,null],[6,"GLXContextID","","",null,null],[6,"GLXDrawable","","",null,null],[6,"GLXFBConfig","","",null,null],[6,"GLXFBConfigID","","",null,null],[6,"GLXPbuffer","","",null,null],[6,"GLXPixmap","","",null,null],[6,"GLXWindow","","",null,null],[17,"GLX_SLOW_CONFIG","","",null,null],[17,"GLX_NON_CONFORMANT_CONFIG","","",null,null],[17,"GLX_WINDOW_BIT","","",null,null],[17,"GLX_PIXMAP_BIT","","",null,null],[17,"GLX_PBUFFER_BIT","","",null,null],[17,"GLX_USE_GL","","",null,null],[17,"GLX_BUFFER_SIZE","","",null,null],[17,"GLX_LEVEL","","",null,null],[17,"GLX_RGBA","","",null,null],[17,"GLX_DOUBLEBUFFER","","",null,null],[17,"GLX_STEREO","","",null,null],[17,"GLX_AUX_BUFFERS","","",null,null],[17,"GLX_RED_SIZE","","",null,null],[17,"GLX_GREEN_SIZE","","",null,null],[17,"GLX_BLUE_SIZE","","",null,null],[17,"GLX_ALPHA_SIZE","","",null,null],[17,"GLX_DEPTH_SIZE","","",null,null],[17,"GLX_STENCIL_SIZE","","",null,null],[17,"GLX_ACCUM_RED_SIZE","","",null,null],[17,"GLX_ACCUM_GREEN_SIZE","","",null,null],[17,"GLX_ACCUM_BLUE_SIZE","","",null,null],[17,"GLX_ACCUM_ALPHA_SIZE","","",null,null],[17,"GLX_CONFIG_CAVEAT","","",null,null],[17,"GLX_X_VISUAL_TYPE","","",null,null],[17,"GLX_TRANSPARENT_TYPE","","",null,null],[17,"GLX_TRANSPARENT_INDEX_VALUE","","",null,null],[17,"GLX_TRANSPARENT_RED_VALUE","","",null,null],[17,"GLX_TRANSPARENT_GREEN_VALUE","","",null,null],[17,"GLX_TRANSPARENT_BLUE_VALUE","","",null,null],[17,"GLX_TRANSPARENT_ALPHA_VALUE","","",null,null],[17,"GLX_VISUAL_ID","","",null,null],[17,"GLX_SCREEN","","",null,null],[17,"GLX_DRAWABLE_TYPE","","",null,null],[17,"GLX_RENDER_TYPE","","",null,null],[17,"GLX_X_RENDERABLE","","",null,null],[17,"GLX_FBCONFIG_ID","","",null,null],[17,"GLX_MAX_PBUFFER_WIDTH","","",null,null],[17,"GLX_MAX_PBUFFER_HEIGHT","","",null,null],[17,"GLX_MAX_PBUFFER_PIXELS","","",null,null],[17,"GLX_SAMPLE_BUFFERS","","",null,null],[17,"GLX_SAMPLES","","",null,null],[17,"GLX_DONT_CARE","","",null,null],[17,"GLX_NONE","","",null,null],[17,"GLX_RGBA_BIT","","",null,null],[17,"GLX_COLOR_INDEX_BIT","","",null,null],[17,"GLX_TRANSPARENT_RGB","","",null,null],[17,"GLX_TRANSPARENT_INDEX","","",null,null],[17,"GLX_TRUE_COLOR","","",null,null],[17,"GLX_DIRECT_COLOR","","",null,null],[17,"GLX_PSEUDO_COLOR","","",null,null],[17,"GLX_STATIC_COLOR","","",null,null],[17,"GLX_GRAY_SCALE","","",null,null],[17,"GLX_STATIC_GRAY","","",null,null],[17,"GLX_BAD_SCREEN","","",null,null],[17,"GLX_BAD_ATTRIBUTE","","",null,null],[17,"GLX_NO_EXTENSION","","",null,null],[17,"GLX_BAD_VISUAL","","",null,null],[17,"GLX_BAD_CONTEXT","","",null,null],[17,"GLX_BAD_VALUE","","",null,null],[17,"GLX_BAD_ENUM","","",null,null],[17,"GLX_VENDOR","","",null,null],[17,"GLX_VERSION","","",null,null],[17,"GLX_EXTENSIONS","","",null,null],[17,"GLX_FRONT_LEFT_BUFFER_BIT","","",null,null],[17,"GLX_FRONT_RIGHT_BUFFER_BIT","","",null,null],[17,"GLX_BACK_LEFT_BUFFER_BIT","","",null,null],[17,"GLX_BACK_RIGHT_BUFFER_BIT","","",null,null],[17,"GLX_AUX_BUFFERS_BIT","","",null,null],[17,"GLX_DEPTH_BUFFER_BIT","","",null,null],[17,"GLX_STENCIL_BUFFER_BIT","","",null,null],[17,"GLX_ACCUM_BUFFER_BIT","","",null,null],[17,"GLX_RGBA_TYPE","","",null,null],[17,"GLX_COLOR_INDEX_TYPE","","",null,null],[17,"GLX_PRESERVED_CONTENTS","","",null,null],[17,"GLX_LARGEST_PBUFFER","","",null,null],[17,"GLX_WIDTH","","",null,null],[17,"GLX_HEIGHT","","",null,null],[17,"GLX_PBUFFER_HEIGHT","","",null,null],[17,"GLX_PBUFFER_WIDTH","","",null,null],[17,"GLX_EVENT_MASK","","",null,null],[17,"GLX_PBUFFER_CLOBBER_MASK","","",null,null],[17,"GLX_DAMAGED","","",null,null],[17,"GLX_SAVED","","",null,null],[17,"GLX_WINDOW","","",null,null],[17,"GLX_PBUFFER","","",null,null],[11,"open","","",103,{"o":{"g":["glx","openerror"],"n":"result"}}],[0,"keysym","x11_dl","",null,null],[17,"XK_BackSpace","x11_dl::keysym","",null,null],[17,"XK_Tab","","",null,null],[17,"XK_Linefeed","","",null,null],[17,"XK_Clear","","",null,null],[17,"XK_Return","","",null,null],[17,"XK_Pause","","",null,null],[17,"XK_Scroll_Lock","","",null,null],[17,"XK_Sys_Req","","",null,null],[17,"XK_Escape","","",null,null],[17,"XK_Delete","","",null,null],[17,"XK_Multi_key","","",null,null],[17,"XK_Kanji","","",null,null],[17,"XK_Muhenkan","","",null,null],[17,"XK_Henkan_Mode","","",null,null],[17,"XK_Henkan","","",null,null],[17,"XK_Romaji","","",null,null],[17,"XK_Hiragana","","",null,null],[17,"XK_Katakana","","",null,null],[17,"XK_Hiragana_Katakana","","",null,null],[17,"XK_Zenkaku","","",null,null],[17,"XK_Hankaku","","",null,null],[17,"XK_Zenkaku_Hankaku","","",null,null],[17,"XK_Touroku","","",null,null],[17,"XK_Massyo","","",null,null],[17,"XK_Kana_Lock","","",null,null],[17,"XK_Kana_Shift","","",null,null],[17,"XK_Eisu_Shift","","",null,null],[17,"XK_Eisu_toggle","","",null,null],[17,"XK_Home","","",null,null],[17,"XK_Left","","",null,null],[17,"XK_Up","","",null,null],[17,"XK_Right","","",null,null],[17,"XK_Down","","",null,null],[17,"XK_Prior","","",null,null],[17,"XK_Page_Up","","",null,null],[17,"XK_Next","","",null,null],[17,"XK_Page_Down","","",null,null],[17,"XK_End","","",null,null],[17,"XK_Begin","","",null,null],[17,"XK_Win_L","","",null,null],[17,"XK_Win_R","","",null,null],[17,"XK_App","","",null,null],[17,"XK_Select","","",null,null],[17,"XK_Print","","",null,null],[17,"XK_Execute","","",null,null],[17,"XK_Insert","","",null,null],[17,"XK_Undo","","",null,null],[17,"XK_Redo","","",null,null],[17,"XK_Menu","","",null,null],[17,"XK_Find","","",null,null],[17,"XK_Cancel","","",null,null],[17,"XK_Help","","",null,null],[17,"XK_Break","","",null,null],[17,"XK_Mode_switch","","",null,null],[17,"XK_script_switch","","",null,null],[17,"XK_Num_Lock","","",null,null],[17,"XK_KP_Space","","",null,null],[17,"XK_KP_Tab","","",null,null],[17,"XK_KP_Enter","","",null,null],[17,"XK_KP_F1","","",null,null],[17,"XK_KP_F2","","",null,null],[17,"XK_KP_F3","","",null,null],[17,"XK_KP_F4","","",null,null],[17,"XK_KP_Home","","",null,null],[17,"XK_KP_Left","","",null,null],[17,"XK_KP_Up","","",null,null],[17,"XK_KP_Right","","",null,null],[17,"XK_KP_Down","","",null,null],[17,"XK_KP_Prior","","",null,null],[17,"XK_KP_Page_Up","","",null,null],[17,"XK_KP_Next","","",null,null],[17,"XK_KP_Page_Down","","",null,null],[17,"XK_KP_End","","",null,null],[17,"XK_KP_Begin","","",null,null],[17,"XK_KP_Insert","","",null,null],[17,"XK_KP_Delete","","",null,null],[17,"XK_KP_Equal","","",null,null],[17,"XK_KP_Multiply","","",null,null],[17,"XK_KP_Add","","",null,null],[17,"XK_KP_Separator","","",null,null],[17,"XK_KP_Subtract","","",null,null],[17,"XK_KP_Decimal","","",null,null],[17,"XK_KP_Divide","","",null,null],[17,"XK_KP_0","","",null,null],[17,"XK_KP_1","","",null,null],[17,"XK_KP_2","","",null,null],[17,"XK_KP_3","","",null,null],[17,"XK_KP_4","","",null,null],[17,"XK_KP_5","","",null,null],[17,"XK_KP_6","","",null,null],[17,"XK_KP_7","","",null,null],[17,"XK_KP_8","","",null,null],[17,"XK_KP_9","","",null,null],[17,"XK_F1","","",null,null],[17,"XK_F2","","",null,null],[17,"XK_F3","","",null,null],[17,"XK_F4","","",null,null],[17,"XK_F5","","",null,null],[17,"XK_F6","","",null,null],[17,"XK_F7","","",null,null],[17,"XK_F8","","",null,null],[17,"XK_F9","","",null,null],[17,"XK_F10","","",null,null],[17,"XK_F11","","",null,null],[17,"XK_L1","","",null,null],[17,"XK_F12","","",null,null],[17,"XK_L2","","",null,null],[17,"XK_F13","","",null,null],[17,"XK_L3","","",null,null],[17,"XK_F14","","",null,null],[17,"XK_L4","","",null,null],[17,"XK_F15","","",null,null],[17,"XK_L5","","",null,null],[17,"XK_F16","","",null,null],[17,"XK_L6","","",null,null],[17,"XK_F17","","",null,null],[17,"XK_L7","","",null,null],[17,"XK_F18","","",null,null],[17,"XK_L8","","",null,null],[17,"XK_F19","","",null,null],[17,"XK_L9","","",null,null],[17,"XK_F20","","",null,null],[17,"XK_L10","","",null,null],[17,"XK_F21","","",null,null],[17,"XK_R1","","",null,null],[17,"XK_F22","","",null,null],[17,"XK_R2","","",null,null],[17,"XK_F23","","",null,null],[17,"XK_R3","","",null,null],[17,"XK_F24","","",null,null],[17,"XK_R4","","",null,null],[17,"XK_F25","","",null,null],[17,"XK_R5","","",null,null],[17,"XK_F26","","",null,null],[17,"XK_R6","","",null,null],[17,"XK_F27","","",null,null],[17,"XK_R7","","",null,null],[17,"XK_F28","","",null,null],[17,"XK_R8","","",null,null],[17,"XK_F29","","",null,null],[17,"XK_R9","","",null,null],[17,"XK_F30","","",null,null],[17,"XK_R10","","",null,null],[17,"XK_F31","","",null,null],[17,"XK_R11","","",null,null],[17,"XK_F32","","",null,null],[17,"XK_R12","","",null,null],[17,"XK_F33","","",null,null],[17,"XK_R13","","",null,null],[17,"XK_F34","","",null,null],[17,"XK_R14","","",null,null],[17,"XK_F35","","",null,null],[17,"XK_R15","","",null,null],[17,"XK_Shift_L","","",null,null],[17,"XK_Shift_R","","",null,null],[17,"XK_Control_L","","",null,null],[17,"XK_Control_R","","",null,null],[17,"XK_Caps_Lock","","",null,null],[17,"XK_Shift_Lock","","",null,null],[17,"XK_Meta_L","","",null,null],[17,"XK_Meta_R","","",null,null],[17,"XK_Alt_L","","",null,null],[17,"XK_Alt_R","","",null,null],[17,"XK_Super_L","","",null,null],[17,"XK_Super_R","","",null,null],[17,"XK_Hyper_L","","",null,null],[17,"XK_Hyper_R","","",null,null],[17,"XK_space","","",null,null],[17,"XK_exclam","","",null,null],[17,"XK_quotedbl","","",null,null],[17,"XK_numbersign","","",null,null],[17,"XK_dollar","","",null,null],[17,"XK_percent","","",null,null],[17,"XK_ampersand","","",null,null],[17,"XK_apostrophe","","",null,null],[17,"XK_quoteright","","",null,null],[17,"XK_parenleft","","",null,null],[17,"XK_parenright","","",null,null],[17,"XK_asterisk","","",null,null],[17,"XK_plus","","",null,null],[17,"XK_comma","","",null,null],[17,"XK_minus","","",null,null],[17,"XK_period","","",null,null],[17,"XK_slash","","",null,null],[17,"XK_0","","",null,null],[17,"XK_1","","",null,null],[17,"XK_2","","",null,null],[17,"XK_3","","",null,null],[17,"XK_4","","",null,null],[17,"XK_5","","",null,null],[17,"XK_6","","",null,null],[17,"XK_7","","",null,null],[17,"XK_8","","",null,null],[17,"XK_9","","",null,null],[17,"XK_colon","","",null,null],[17,"XK_semicolon","","",null,null],[17,"XK_less","","",null,null],[17,"XK_equal","","",null,null],[17,"XK_greater","","",null,null],[17,"XK_question","","",null,null],[17,"XK_at","","",null,null],[17,"XK_A","","",null,null],[17,"XK_B","","",null,null],[17,"XK_C","","",null,null],[17,"XK_D","","",null,null],[17,"XK_E","","",null,null],[17,"XK_F","","",null,null],[17,"XK_G","","",null,null],[17,"XK_H","","",null,null],[17,"XK_I","","",null,null],[17,"XK_J","","",null,null],[17,"XK_K","","",null,null],[17,"XK_L","","",null,null],[17,"XK_M","","",null,null],[17,"XK_N","","",null,null],[17,"XK_O","","",null,null],[17,"XK_P","","",null,null],[17,"XK_Q","","",null,null],[17,"XK_R","","",null,null],[17,"XK_S","","",null,null],[17,"XK_T","","",null,null],[17,"XK_U","","",null,null],[17,"XK_V","","",null,null],[17,"XK_W","","",null,null],[17,"XK_X","","",null,null],[17,"XK_Y","","",null,null],[17,"XK_Z","","",null,null],[17,"XK_bracketleft","","",null,null],[17,"XK_backslash","","",null,null],[17,"XK_bracketright","","",null,null],[17,"XK_asciicircum","","",null,null],[17,"XK_underscore","","",null,null],[17,"XK_grave","","",null,null],[17,"XK_quoteleft","","",null,null],[17,"XK_a","","",null,null],[17,"XK_b","","",null,null],[17,"XK_c","","",null,null],[17,"XK_d","","",null,null],[17,"XK_e","","",null,null],[17,"XK_f","","",null,null],[17,"XK_g","","",null,null],[17,"XK_h","","",null,null],[17,"XK_i","","",null,null],[17,"XK_j","","",null,null],[17,"XK_k","","",null,null],[17,"XK_l","","",null,null],[17,"XK_m","","",null,null],[17,"XK_n","","",null,null],[17,"XK_o","","",null,null],[17,"XK_p","","",null,null],[17,"XK_q","","",null,null],[17,"XK_r","","",null,null],[17,"XK_s","","",null,null],[17,"XK_t","","",null,null],[17,"XK_u","","",null,null],[17,"XK_v","","",null,null],[17,"XK_w","","",null,null],[17,"XK_x","","",null,null],[17,"XK_y","","",null,null],[17,"XK_z","","",null,null],[17,"XK_braceleft","","",null,null],[17,"XK_bar","","",null,null],[17,"XK_braceright","","",null,null],[17,"XK_asciitilde","","",null,null],[17,"XK_nobreakspace","","",null,null],[17,"XK_exclamdown","","",null,null],[17,"XK_cent","","",null,null],[17,"XK_sterling","","",null,null],[17,"XK_currency","","",null,null],[17,"XK_yen","","",null,null],[17,"XK_brokenbar","","",null,null],[17,"XK_section","","",null,null],[17,"XK_diaeresis","","",null,null],[17,"XK_copyright","","",null,null],[17,"XK_ordfeminine","","",null,null],[17,"XK_guillemotleft","","",null,null],[17,"XK_notsign","","",null,null],[17,"XK_hyphen","","",null,null],[17,"XK_registered","","",null,null],[17,"XK_macron","","",null,null],[17,"XK_degree","","",null,null],[17,"XK_plusminus","","",null,null],[17,"XK_twosuperior","","",null,null],[17,"XK_threesuperior","","",null,null],[17,"XK_acute","","",null,null],[17,"XK_mu","","",null,null],[17,"XK_paragraph","","",null,null],[17,"XK_periodcentered","","",null,null],[17,"XK_cedilla","","",null,null],[17,"XK_onesuperior","","",null,null],[17,"XK_masculine","","",null,null],[17,"XK_guillemotright","","",null,null],[17,"XK_onequarter","","",null,null],[17,"XK_onehalf","","",null,null],[17,"XK_threequarters","","",null,null],[17,"XK_questiondown","","",null,null],[17,"XK_Agrave","","",null,null],[17,"XK_Aacute","","",null,null],[17,"XK_Acircumflex","","",null,null],[17,"XK_Atilde","","",null,null],[17,"XK_Adiaeresis","","",null,null],[17,"XK_Aring","","",null,null],[17,"XK_AE","","",null,null],[17,"XK_Ccedilla","","",null,null],[17,"XK_Egrave","","",null,null],[17,"XK_Eacute","","",null,null],[17,"XK_Ecircumflex","","",null,null],[17,"XK_Ediaeresis","","",null,null],[17,"XK_Igrave","","",null,null],[17,"XK_Iacute","","",null,null],[17,"XK_Icircumflex","","",null,null],[17,"XK_Idiaeresis","","",null,null],[17,"XK_ETH","","",null,null],[17,"XK_Eth","","",null,null],[17,"XK_Ntilde","","",null,null],[17,"XK_Ograve","","",null,null],[17,"XK_Oacute","","",null,null],[17,"XK_Ocircumflex","","",null,null],[17,"XK_Otilde","","",null,null],[17,"XK_Odiaeresis","","",null,null],[17,"XK_multiply","","",null,null],[17,"XK_Ooblique","","",null,null],[17,"XK_Ugrave","","",null,null],[17,"XK_Uacute","","",null,null],[17,"XK_Ucircumflex","","",null,null],[17,"XK_Udiaeresis","","",null,null],[17,"XK_Yacute","","",null,null],[17,"XK_THORN","","",null,null],[17,"XK_Thorn","","",null,null],[17,"XK_ssharp","","",null,null],[17,"XK_agrave","","",null,null],[17,"XK_aacute","","",null,null],[17,"XK_acircumflex","","",null,null],[17,"XK_atilde","","",null,null],[17,"XK_adiaeresis","","",null,null],[17,"XK_aring","","",null,null],[17,"XK_ae","","",null,null],[17,"XK_ccedilla","","",null,null],[17,"XK_egrave","","",null,null],[17,"XK_eacute","","",null,null],[17,"XK_ecircumflex","","",null,null],[17,"XK_ediaeresis","","",null,null],[17,"XK_igrave","","",null,null],[17,"XK_iacute","","",null,null],[17,"XK_icircumflex","","",null,null],[17,"XK_idiaeresis","","",null,null],[17,"XK_eth","","",null,null],[17,"XK_ntilde","","",null,null],[17,"XK_ograve","","",null,null],[17,"XK_oacute","","",null,null],[17,"XK_ocircumflex","","",null,null],[17,"XK_otilde","","",null,null],[17,"XK_odiaeresis","","",null,null],[17,"XK_division","","",null,null],[17,"XK_oslash","","",null,null],[17,"XK_ugrave","","",null,null],[17,"XK_uacute","","",null,null],[17,"XK_ucircumflex","","",null,null],[17,"XK_udiaeresis","","",null,null],[17,"XK_yacute","","",null,null],[17,"XK_thorn","","",null,null],[17,"XK_ydiaeresis","","",null,null],[17,"XK_Aogonek","","",null,null],[17,"XK_breve","","",null,null],[17,"XK_Lstroke","","",null,null],[17,"XK_Lcaron","","",null,null],[17,"XK_Sacute","","",null,null],[17,"XK_Scaron","","",null,null],[17,"XK_Scedilla","","",null,null],[17,"XK_Tcaron","","",null,null],[17,"XK_Zacute","","",null,null],[17,"XK_Zcaron","","",null,null],[17,"XK_Zabovedot","","",null,null],[17,"XK_aogonek","","",null,null],[17,"XK_ogonek","","",null,null],[17,"XK_lstroke","","",null,null],[17,"XK_lcaron","","",null,null],[17,"XK_sacute","","",null,null],[17,"XK_caron","","",null,null],[17,"XK_scaron","","",null,null],[17,"XK_scedilla","","",null,null],[17,"XK_tcaron","","",null,null],[17,"XK_zacute","","",null,null],[17,"XK_doubleacute","","",null,null],[17,"XK_zcaron","","",null,null],[17,"XK_zabovedot","","",null,null],[17,"XK_Racute","","",null,null],[17,"XK_Abreve","","",null,null],[17,"XK_Lacute","","",null,null],[17,"XK_Cacute","","",null,null],[17,"XK_Ccaron","","",null,null],[17,"XK_Eogonek","","",null,null],[17,"XK_Ecaron","","",null,null],[17,"XK_Dcaron","","",null,null],[17,"XK_Dstroke","","",null,null],[17,"XK_Nacute","","",null,null],[17,"XK_Ncaron","","",null,null],[17,"XK_Odoubleacute","","",null,null],[17,"XK_Rcaron","","",null,null],[17,"XK_Uring","","",null,null],[17,"XK_Udoubleacute","","",null,null],[17,"XK_Tcedilla","","",null,null],[17,"XK_racute","","",null,null],[17,"XK_abreve","","",null,null],[17,"XK_lacute","","",null,null],[17,"XK_cacute","","",null,null],[17,"XK_ccaron","","",null,null],[17,"XK_eogonek","","",null,null],[17,"XK_ecaron","","",null,null],[17,"XK_dcaron","","",null,null],[17,"XK_dstroke","","",null,null],[17,"XK_nacute","","",null,null],[17,"XK_ncaron","","",null,null],[17,"XK_odoubleacute","","",null,null],[17,"XK_udoubleacute","","",null,null],[17,"XK_rcaron","","",null,null],[17,"XK_uring","","",null,null],[17,"XK_tcedilla","","",null,null],[17,"XK_abovedot","","",null,null],[17,"XK_Hstroke","","",null,null],[17,"XK_Hcircumflex","","",null,null],[17,"XK_Iabovedot","","",null,null],[17,"XK_Gbreve","","",null,null],[17,"XK_Jcircumflex","","",null,null],[17,"XK_hstroke","","",null,null],[17,"XK_hcircumflex","","",null,null],[17,"XK_idotless","","",null,null],[17,"XK_gbreve","","",null,null],[17,"XK_jcircumflex","","",null,null],[17,"XK_Cabovedot","","",null,null],[17,"XK_Ccircumflex","","",null,null],[17,"XK_Gabovedot","","",null,null],[17,"XK_Gcircumflex","","",null,null],[17,"XK_Ubreve","","",null,null],[17,"XK_Scircumflex","","",null,null],[17,"XK_cabovedot","","",null,null],[17,"XK_ccircumflex","","",null,null],[17,"XK_gabovedot","","",null,null],[17,"XK_gcircumflex","","",null,null],[17,"XK_ubreve","","",null,null],[17,"XK_scircumflex","","",null,null],[17,"XK_kra","","",null,null],[17,"XK_kappa","","",null,null],[17,"XK_Rcedilla","","",null,null],[17,"XK_Itilde","","",null,null],[17,"XK_Lcedilla","","",null,null],[17,"XK_Emacron","","",null,null],[17,"XK_Gcedilla","","",null,null],[17,"XK_Tslash","","",null,null],[17,"XK_rcedilla","","",null,null],[17,"XK_itilde","","",null,null],[17,"XK_lcedilla","","",null,null],[17,"XK_emacron","","",null,null],[17,"XK_gcedilla","","",null,null],[17,"XK_tslash","","",null,null],[17,"XK_ENG","","",null,null],[17,"XK_eng","","",null,null],[17,"XK_Amacron","","",null,null],[17,"XK_Iogonek","","",null,null],[17,"XK_Eabovedot","","",null,null],[17,"XK_Imacron","","",null,null],[17,"XK_Ncedilla","","",null,null],[17,"XK_Omacron","","",null,null],[17,"XK_Kcedilla","","",null,null],[17,"XK_Uogonek","","",null,null],[17,"XK_Utilde","","",null,null],[17,"XK_Umacron","","",null,null],[17,"XK_amacron","","",null,null],[17,"XK_iogonek","","",null,null],[17,"XK_eabovedot","","",null,null],[17,"XK_imacron","","",null,null],[17,"XK_ncedilla","","",null,null],[17,"XK_omacron","","",null,null],[17,"XK_kcedilla","","",null,null],[17,"XK_uogonek","","",null,null],[17,"XK_utilde","","",null,null],[17,"XK_umacron","","",null,null],[17,"XK_overline","","",null,null],[17,"XK_kana_fullstop","","",null,null],[17,"XK_kana_openingbracket","","",null,null],[17,"XK_kana_closingbracket","","",null,null],[17,"XK_kana_comma","","",null,null],[17,"XK_kana_conjunctive","","",null,null],[17,"XK_kana_middledot","","",null,null],[17,"XK_kana_WO","","",null,null],[17,"XK_kana_a","","",null,null],[17,"XK_kana_i","","",null,null],[17,"XK_kana_u","","",null,null],[17,"XK_kana_e","","",null,null],[17,"XK_kana_o","","",null,null],[17,"XK_kana_ya","","",null,null],[17,"XK_kana_yu","","",null,null],[17,"XK_kana_yo","","",null,null],[17,"XK_kana_tsu","","",null,null],[17,"XK_kana_tu","","",null,null],[17,"XK_prolongedsound","","",null,null],[17,"XK_kana_A","","",null,null],[17,"XK_kana_I","","",null,null],[17,"XK_kana_U","","",null,null],[17,"XK_kana_E","","",null,null],[17,"XK_kana_O","","",null,null],[17,"XK_kana_KA","","",null,null],[17,"XK_kana_KI","","",null,null],[17,"XK_kana_KU","","",null,null],[17,"XK_kana_KE","","",null,null],[17,"XK_kana_KO","","",null,null],[17,"XK_kana_SA","","",null,null],[17,"XK_kana_SHI","","",null,null],[17,"XK_kana_SU","","",null,null],[17,"XK_kana_SE","","",null,null],[17,"XK_kana_SO","","",null,null],[17,"XK_kana_TA","","",null,null],[17,"XK_kana_CHI","","",null,null],[17,"XK_kana_TI","","",null,null],[17,"XK_kana_TSU","","",null,null],[17,"XK_kana_TU","","",null,null],[17,"XK_kana_TE","","",null,null],[17,"XK_kana_TO","","",null,null],[17,"XK_kana_NA","","",null,null],[17,"XK_kana_NI","","",null,null],[17,"XK_kana_NU","","",null,null],[17,"XK_kana_NE","","",null,null],[17,"XK_kana_NO","","",null,null],[17,"XK_kana_HA","","",null,null],[17,"XK_kana_HI","","",null,null],[17,"XK_kana_FU","","",null,null],[17,"XK_kana_HU","","",null,null],[17,"XK_kana_HE","","",null,null],[17,"XK_kana_HO","","",null,null],[17,"XK_kana_MA","","",null,null],[17,"XK_kana_MI","","",null,null],[17,"XK_kana_MU","","",null,null],[17,"XK_kana_ME","","",null,null],[17,"XK_kana_MO","","",null,null],[17,"XK_kana_YA","","",null,null],[17,"XK_kana_YU","","",null,null],[17,"XK_kana_YO","","",null,null],[17,"XK_kana_RA","","",null,null],[17,"XK_kana_RI","","",null,null],[17,"XK_kana_RU","","",null,null],[17,"XK_kana_RE","","",null,null],[17,"XK_kana_RO","","",null,null],[17,"XK_kana_WA","","",null,null],[17,"XK_kana_N","","",null,null],[17,"XK_voicedsound","","",null,null],[17,"XK_semivoicedsound","","",null,null],[17,"XK_kana_switch","","",null,null],[17,"XK_Arabic_comma","","",null,null],[17,"XK_Arabic_semicolon","","",null,null],[17,"XK_Arabic_question_mark","","",null,null],[17,"XK_Arabic_hamza","","",null,null],[17,"XK_Arabic_maddaonalef","","",null,null],[17,"XK_Arabic_hamzaonalef","","",null,null],[17,"XK_Arabic_hamzaonwaw","","",null,null],[17,"XK_Arabic_hamzaunderalef","","",null,null],[17,"XK_Arabic_hamzaonyeh","","",null,null],[17,"XK_Arabic_alef","","",null,null],[17,"XK_Arabic_beh","","",null,null],[17,"XK_Arabic_tehmarbuta","","",null,null],[17,"XK_Arabic_teh","","",null,null],[17,"XK_Arabic_theh","","",null,null],[17,"XK_Arabic_jeem","","",null,null],[17,"XK_Arabic_hah","","",null,null],[17,"XK_Arabic_khah","","",null,null],[17,"XK_Arabic_dal","","",null,null],[17,"XK_Arabic_thal","","",null,null],[17,"XK_Arabic_ra","","",null,null],[17,"XK_Arabic_zain","","",null,null],[17,"XK_Arabic_seen","","",null,null],[17,"XK_Arabic_sheen","","",null,null],[17,"XK_Arabic_sad","","",null,null],[17,"XK_Arabic_dad","","",null,null],[17,"XK_Arabic_tah","","",null,null],[17,"XK_Arabic_zah","","",null,null],[17,"XK_Arabic_ain","","",null,null],[17,"XK_Arabic_ghain","","",null,null],[17,"XK_Arabic_tatweel","","",null,null],[17,"XK_Arabic_feh","","",null,null],[17,"XK_Arabic_qaf","","",null,null],[17,"XK_Arabic_kaf","","",null,null],[17,"XK_Arabic_lam","","",null,null],[17,"XK_Arabic_meem","","",null,null],[17,"XK_Arabic_noon","","",null,null],[17,"XK_Arabic_ha","","",null,null],[17,"XK_Arabic_heh","","",null,null],[17,"XK_Arabic_waw","","",null,null],[17,"XK_Arabic_alefmaksura","","",null,null],[17,"XK_Arabic_yeh","","",null,null],[17,"XK_Arabic_fathatan","","",null,null],[17,"XK_Arabic_dammatan","","",null,null],[17,"XK_Arabic_kasratan","","",null,null],[17,"XK_Arabic_fatha","","",null,null],[17,"XK_Arabic_damma","","",null,null],[17,"XK_Arabic_kasra","","",null,null],[17,"XK_Arabic_shadda","","",null,null],[17,"XK_Arabic_sukun","","",null,null],[17,"XK_Arabic_switch","","",null,null],[17,"XK_Serbian_dje","","",null,null],[17,"XK_Macedonia_gje","","",null,null],[17,"XK_Cyrillic_io","","",null,null],[17,"XK_Ukrainian_ie","","",null,null],[17,"XK_Ukranian_je","","",null,null],[17,"XK_Macedonia_dse","","",null,null],[17,"XK_Ukrainian_i","","",null,null],[17,"XK_Ukranian_i","","",null,null],[17,"XK_Ukrainian_yi","","",null,null],[17,"XK_Ukranian_yi","","",null,null],[17,"XK_Cyrillic_je","","",null,null],[17,"XK_Serbian_je","","",null,null],[17,"XK_Cyrillic_lje","","",null,null],[17,"XK_Serbian_lje","","",null,null],[17,"XK_Cyrillic_nje","","",null,null],[17,"XK_Serbian_nje","","",null,null],[17,"XK_Serbian_tshe","","",null,null],[17,"XK_Macedonia_kje","","",null,null],[17,"XK_Byelorussian_shortu","","",null,null],[17,"XK_Cyrillic_dzhe","","",null,null],[17,"XK_Serbian_dze","","",null,null],[17,"XK_numerosign","","",null,null],[17,"XK_Serbian_DJE","","",null,null],[17,"XK_Macedonia_GJE","","",null,null],[17,"XK_Cyrillic_IO","","",null,null],[17,"XK_Ukrainian_IE","","",null,null],[17,"XK_Ukranian_JE","","",null,null],[17,"XK_Macedonia_DSE","","",null,null],[17,"XK_Ukrainian_I","","",null,null],[17,"XK_Ukranian_I","","",null,null],[17,"XK_Ukrainian_YI","","",null,null],[17,"XK_Ukranian_YI","","",null,null],[17,"XK_Cyrillic_JE","","",null,null],[17,"XK_Serbian_JE","","",null,null],[17,"XK_Cyrillic_LJE","","",null,null],[17,"XK_Serbian_LJE","","",null,null],[17,"XK_Cyrillic_NJE","","",null,null],[17,"XK_Serbian_NJE","","",null,null],[17,"XK_Serbian_TSHE","","",null,null],[17,"XK_Macedonia_KJE","","",null,null],[17,"XK_Byelorussian_SHORTU","","",null,null],[17,"XK_Cyrillic_DZHE","","",null,null],[17,"XK_Serbian_DZE","","",null,null],[17,"XK_Cyrillic_yu","","",null,null],[17,"XK_Cyrillic_a","","",null,null],[17,"XK_Cyrillic_be","","",null,null],[17,"XK_Cyrillic_tse","","",null,null],[17,"XK_Cyrillic_de","","",null,null],[17,"XK_Cyrillic_ie","","",null,null],[17,"XK_Cyrillic_ef","","",null,null],[17,"XK_Cyrillic_ghe","","",null,null],[17,"XK_Cyrillic_ha","","",null,null],[17,"XK_Cyrillic_i","","",null,null],[17,"XK_Cyrillic_shorti","","",null,null],[17,"XK_Cyrillic_ka","","",null,null],[17,"XK_Cyrillic_el","","",null,null],[17,"XK_Cyrillic_em","","",null,null],[17,"XK_Cyrillic_en","","",null,null],[17,"XK_Cyrillic_o","","",null,null],[17,"XK_Cyrillic_pe","","",null,null],[17,"XK_Cyrillic_ya","","",null,null],[17,"XK_Cyrillic_er","","",null,null],[17,"XK_Cyrillic_es","","",null,null],[17,"XK_Cyrillic_te","","",null,null],[17,"XK_Cyrillic_u","","",null,null],[17,"XK_Cyrillic_zhe","","",null,null],[17,"XK_Cyrillic_ve","","",null,null],[17,"XK_Cyrillic_softsign","","",null,null],[17,"XK_Cyrillic_yeru","","",null,null],[17,"XK_Cyrillic_ze","","",null,null],[17,"XK_Cyrillic_sha","","",null,null],[17,"XK_Cyrillic_e","","",null,null],[17,"XK_Cyrillic_shcha","","",null,null],[17,"XK_Cyrillic_che","","",null,null],[17,"XK_Cyrillic_hardsign","","",null,null],[17,"XK_Cyrillic_YU","","",null,null],[17,"XK_Cyrillic_A","","",null,null],[17,"XK_Cyrillic_BE","","",null,null],[17,"XK_Cyrillic_TSE","","",null,null],[17,"XK_Cyrillic_DE","","",null,null],[17,"XK_Cyrillic_IE","","",null,null],[17,"XK_Cyrillic_EF","","",null,null],[17,"XK_Cyrillic_GHE","","",null,null],[17,"XK_Cyrillic_HA","","",null,null],[17,"XK_Cyrillic_I","","",null,null],[17,"XK_Cyrillic_SHORTI","","",null,null],[17,"XK_Cyrillic_KA","","",null,null],[17,"XK_Cyrillic_EL","","",null,null],[17,"XK_Cyrillic_EM","","",null,null],[17,"XK_Cyrillic_EN","","",null,null],[17,"XK_Cyrillic_O","","",null,null],[17,"XK_Cyrillic_PE","","",null,null],[17,"XK_Cyrillic_YA","","",null,null],[17,"XK_Cyrillic_ER","","",null,null],[17,"XK_Cyrillic_ES","","",null,null],[17,"XK_Cyrillic_TE","","",null,null],[17,"XK_Cyrillic_U","","",null,null],[17,"XK_Cyrillic_ZHE","","",null,null],[17,"XK_Cyrillic_VE","","",null,null],[17,"XK_Cyrillic_SOFTSIGN","","",null,null],[17,"XK_Cyrillic_YERU","","",null,null],[17,"XK_Cyrillic_ZE","","",null,null],[17,"XK_Cyrillic_SHA","","",null,null],[17,"XK_Cyrillic_E","","",null,null],[17,"XK_Cyrillic_SHCHA","","",null,null],[17,"XK_Cyrillic_CHE","","",null,null],[17,"XK_Cyrillic_HARDSIGN","","",null,null],[17,"XK_Greek_ALPHAaccent","","",null,null],[17,"XK_Greek_EPSILONaccent","","",null,null],[17,"XK_Greek_ETAaccent","","",null,null],[17,"XK_Greek_IOTAaccent","","",null,null],[17,"XK_Greek_IOTAdiaeresis","","",null,null],[17,"XK_Greek_OMICRONaccent","","",null,null],[17,"XK_Greek_UPSILONaccent","","",null,null],[17,"XK_Greek_UPSILONdieresis","","",null,null],[17,"XK_Greek_OMEGAaccent","","",null,null],[17,"XK_Greek_accentdieresis","","",null,null],[17,"XK_Greek_horizbar","","",null,null],[17,"XK_Greek_alphaaccent","","",null,null],[17,"XK_Greek_epsilonaccent","","",null,null],[17,"XK_Greek_etaaccent","","",null,null],[17,"XK_Greek_iotaaccent","","",null,null],[17,"XK_Greek_iotadieresis","","",null,null],[17,"XK_Greek_iotaaccentdieresis","","",null,null],[17,"XK_Greek_omicronaccent","","",null,null],[17,"XK_Greek_upsilonaccent","","",null,null],[17,"XK_Greek_upsilondieresis","","",null,null],[17,"XK_Greek_upsilonaccentdieresis","","",null,null],[17,"XK_Greek_omegaaccent","","",null,null],[17,"XK_Greek_ALPHA","","",null,null],[17,"XK_Greek_BETA","","",null,null],[17,"XK_Greek_GAMMA","","",null,null],[17,"XK_Greek_DELTA","","",null,null],[17,"XK_Greek_EPSILON","","",null,null],[17,"XK_Greek_ZETA","","",null,null],[17,"XK_Greek_ETA","","",null,null],[17,"XK_Greek_THETA","","",null,null],[17,"XK_Greek_IOTA","","",null,null],[17,"XK_Greek_KAPPA","","",null,null],[17,"XK_Greek_LAMDA","","",null,null],[17,"XK_Greek_LAMBDA","","",null,null],[17,"XK_Greek_MU","","",null,null],[17,"XK_Greek_NU","","",null,null],[17,"XK_Greek_XI","","",null,null],[17,"XK_Greek_OMICRON","","",null,null],[17,"XK_Greek_PI","","",null,null],[17,"XK_Greek_RHO","","",null,null],[17,"XK_Greek_SIGMA","","",null,null],[17,"XK_Greek_TAU","","",null,null],[17,"XK_Greek_UPSILON","","",null,null],[17,"XK_Greek_PHI","","",null,null],[17,"XK_Greek_CHI","","",null,null],[17,"XK_Greek_PSI","","",null,null],[17,"XK_Greek_OMEGA","","",null,null],[17,"XK_Greek_alpha","","",null,null],[17,"XK_Greek_beta","","",null,null],[17,"XK_Greek_gamma","","",null,null],[17,"XK_Greek_delta","","",null,null],[17,"XK_Greek_epsilon","","",null,null],[17,"XK_Greek_zeta","","",null,null],[17,"XK_Greek_eta","","",null,null],[17,"XK_Greek_theta","","",null,null],[17,"XK_Greek_iota","","",null,null],[17,"XK_Greek_kappa","","",null,null],[17,"XK_Greek_lamda","","",null,null],[17,"XK_Greek_lambda","","",null,null],[17,"XK_Greek_mu","","",null,null],[17,"XK_Greek_nu","","",null,null],[17,"XK_Greek_xi","","",null,null],[17,"XK_Greek_omicron","","",null,null],[17,"XK_Greek_pi","","",null,null],[17,"XK_Greek_rho","","",null,null],[17,"XK_Greek_sigma","","",null,null],[17,"XK_Greek_finalsmallsigma","","",null,null],[17,"XK_Greek_tau","","",null,null],[17,"XK_Greek_upsilon","","",null,null],[17,"XK_Greek_phi","","",null,null],[17,"XK_Greek_chi","","",null,null],[17,"XK_Greek_psi","","",null,null],[17,"XK_Greek_omega","","",null,null],[17,"XK_Greek_switch","","",null,null],[17,"XK_leftradical","","",null,null],[17,"XK_topleftradical","","",null,null],[17,"XK_horizconnector","","",null,null],[17,"XK_topintegral","","",null,null],[17,"XK_botintegral","","",null,null],[17,"XK_vertconnector","","",null,null],[17,"XK_topleftsqbracket","","",null,null],[17,"XK_botleftsqbracket","","",null,null],[17,"XK_toprightsqbracket","","",null,null],[17,"XK_botrightsqbracket","","",null,null],[17,"XK_topleftparens","","",null,null],[17,"XK_botleftparens","","",null,null],[17,"XK_toprightparens","","",null,null],[17,"XK_botrightparens","","",null,null],[17,"XK_leftmiddlecurlybrace","","",null,null],[17,"XK_rightmiddlecurlybrace","","",null,null],[17,"XK_topleftsummation","","",null,null],[17,"XK_botleftsummation","","",null,null],[17,"XK_topvertsummationconnector","","",null,null],[17,"XK_botvertsummationconnector","","",null,null],[17,"XK_toprightsummation","","",null,null],[17,"XK_botrightsummation","","",null,null],[17,"XK_rightmiddlesummation","","",null,null],[17,"XK_lessthanequal","","",null,null],[17,"XK_notequal","","",null,null],[17,"XK_greaterthanequal","","",null,null],[17,"XK_integral","","",null,null],[17,"XK_therefore","","",null,null],[17,"XK_variation","","",null,null],[17,"XK_infinity","","",null,null],[17,"XK_nabla","","",null,null],[17,"XK_approximate","","",null,null],[17,"XK_similarequal","","",null,null],[17,"XK_ifonlyif","","",null,null],[17,"XK_implies","","",null,null],[17,"XK_identical","","",null,null],[17,"XK_radical","","",null,null],[17,"XK_includedin","","",null,null],[17,"XK_includes","","",null,null],[17,"XK_intersection","","",null,null],[17,"XK_union","","",null,null],[17,"XK_logicaland","","",null,null],[17,"XK_logicalor","","",null,null],[17,"XK_partialderivative","","",null,null],[17,"XK_function","","",null,null],[17,"XK_leftarrow","","",null,null],[17,"XK_uparrow","","",null,null],[17,"XK_rightarrow","","",null,null],[17,"XK_downarrow","","",null,null],[17,"XK_blank","","",null,null],[17,"XK_soliddiamond","","",null,null],[17,"XK_checkerboard","","",null,null],[17,"XK_ht","","",null,null],[17,"XK_ff","","",null,null],[17,"XK_cr","","",null,null],[17,"XK_lf","","",null,null],[17,"XK_nl","","",null,null],[17,"XK_vt","","",null,null],[17,"XK_lowrightcorner","","",null,null],[17,"XK_uprightcorner","","",null,null],[17,"XK_upleftcorner","","",null,null],[17,"XK_lowleftcorner","","",null,null],[17,"XK_crossinglines","","",null,null],[17,"XK_horizlinescan1","","",null,null],[17,"XK_horizlinescan3","","",null,null],[17,"XK_horizlinescan5","","",null,null],[17,"XK_horizlinescan7","","",null,null],[17,"XK_horizlinescan9","","",null,null],[17,"XK_leftt","","",null,null],[17,"XK_rightt","","",null,null],[17,"XK_bott","","",null,null],[17,"XK_topt","","",null,null],[17,"XK_vertbar","","",null,null],[17,"XK_emspace","","",null,null],[17,"XK_enspace","","",null,null],[17,"XK_em3space","","",null,null],[17,"XK_em4space","","",null,null],[17,"XK_digitspace","","",null,null],[17,"XK_punctspace","","",null,null],[17,"XK_thinspace","","",null,null],[17,"XK_hairspace","","",null,null],[17,"XK_emdash","","",null,null],[17,"XK_endash","","",null,null],[17,"XK_signifblank","","",null,null],[17,"XK_ellipsis","","",null,null],[17,"XK_doubbaselinedot","","",null,null],[17,"XK_onethird","","",null,null],[17,"XK_twothirds","","",null,null],[17,"XK_onefifth","","",null,null],[17,"XK_twofifths","","",null,null],[17,"XK_threefifths","","",null,null],[17,"XK_fourfifths","","",null,null],[17,"XK_onesixth","","",null,null],[17,"XK_fivesixths","","",null,null],[17,"XK_careof","","",null,null],[17,"XK_figdash","","",null,null],[17,"XK_leftanglebracket","","",null,null],[17,"XK_decimalpoint","","",null,null],[17,"XK_rightanglebracket","","",null,null],[17,"XK_marker","","",null,null],[17,"XK_oneeighth","","",null,null],[17,"XK_threeeighths","","",null,null],[17,"XK_fiveeighths","","",null,null],[17,"XK_seveneighths","","",null,null],[17,"XK_trademark","","",null,null],[17,"XK_signaturemark","","",null,null],[17,"XK_trademarkincircle","","",null,null],[17,"XK_leftopentriangle","","",null,null],[17,"XK_rightopentriangle","","",null,null],[17,"XK_emopencircle","","",null,null],[17,"XK_emopenrectangle","","",null,null],[17,"XK_leftsinglequotemark","","",null,null],[17,"XK_rightsinglequotemark","","",null,null],[17,"XK_leftdoublequotemark","","",null,null],[17,"XK_rightdoublequotemark","","",null,null],[17,"XK_prescription","","",null,null],[17,"XK_minutes","","",null,null],[17,"XK_seconds","","",null,null],[17,"XK_latincross","","",null,null],[17,"XK_hexagram","","",null,null],[17,"XK_filledrectbullet","","",null,null],[17,"XK_filledlefttribullet","","",null,null],[17,"XK_filledrighttribullet","","",null,null],[17,"XK_emfilledcircle","","",null,null],[17,"XK_emfilledrect","","",null,null],[17,"XK_enopencircbullet","","",null,null],[17,"XK_enopensquarebullet","","",null,null],[17,"XK_openrectbullet","","",null,null],[17,"XK_opentribulletup","","",null,null],[17,"XK_opentribulletdown","","",null,null],[17,"XK_openstar","","",null,null],[17,"XK_enfilledcircbullet","","",null,null],[17,"XK_enfilledsqbullet","","",null,null],[17,"XK_filledtribulletup","","",null,null],[17,"XK_filledtribulletdown","","",null,null],[17,"XK_leftpointer","","",null,null],[17,"XK_rightpointer","","",null,null],[17,"XK_club","","",null,null],[17,"XK_diamond","","",null,null],[17,"XK_heart","","",null,null],[17,"XK_maltesecross","","",null,null],[17,"XK_dagger","","",null,null],[17,"XK_doubledagger","","",null,null],[17,"XK_checkmark","","",null,null],[17,"XK_ballotcross","","",null,null],[17,"XK_musicalsharp","","",null,null],[17,"XK_musicalflat","","",null,null],[17,"XK_malesymbol","","",null,null],[17,"XK_femalesymbol","","",null,null],[17,"XK_telephone","","",null,null],[17,"XK_telephonerecorder","","",null,null],[17,"XK_phonographcopyright","","",null,null],[17,"XK_caret","","",null,null],[17,"XK_singlelowquotemark","","",null,null],[17,"XK_doublelowquotemark","","",null,null],[17,"XK_cursor","","",null,null],[17,"XK_leftcaret","","",null,null],[17,"XK_rightcaret","","",null,null],[17,"XK_downcaret","","",null,null],[17,"XK_upcaret","","",null,null],[17,"XK_overbar","","",null,null],[17,"XK_downtack","","",null,null],[17,"XK_upshoe","","",null,null],[17,"XK_downstile","","",null,null],[17,"XK_underbar","","",null,null],[17,"XK_jot","","",null,null],[17,"XK_quad","","",null,null],[17,"XK_uptack","","",null,null],[17,"XK_circle","","",null,null],[17,"XK_upstile","","",null,null],[17,"XK_downshoe","","",null,null],[17,"XK_rightshoe","","",null,null],[17,"XK_leftshoe","","",null,null],[17,"XK_lefttack","","",null,null],[17,"XK_righttack","","",null,null],[17,"XK_hebrew_doublelowline","","",null,null],[17,"XK_hebrew_aleph","","",null,null],[17,"XK_hebrew_bet","","",null,null],[17,"XK_hebrew_beth","","",null,null],[17,"XK_hebrew_gimel","","",null,null],[17,"XK_hebrew_gimmel","","",null,null],[17,"XK_hebrew_dalet","","",null,null],[17,"XK_hebrew_daleth","","",null,null],[17,"XK_hebrew_he","","",null,null],[17,"XK_hebrew_waw","","",null,null],[17,"XK_hebrew_zain","","",null,null],[17,"XK_hebrew_zayin","","",null,null],[17,"XK_hebrew_chet","","",null,null],[17,"XK_hebrew_het","","",null,null],[17,"XK_hebrew_tet","","",null,null],[17,"XK_hebrew_teth","","",null,null],[17,"XK_hebrew_yod","","",null,null],[17,"XK_hebrew_finalkaph","","",null,null],[17,"XK_hebrew_kaph","","",null,null],[17,"XK_hebrew_lamed","","",null,null],[17,"XK_hebrew_finalmem","","",null,null],[17,"XK_hebrew_mem","","",null,null],[17,"XK_hebrew_finalnun","","",null,null],[17,"XK_hebrew_nun","","",null,null],[17,"XK_hebrew_samech","","",null,null],[17,"XK_hebrew_samekh","","",null,null],[17,"XK_hebrew_ayin","","",null,null],[17,"XK_hebrew_finalpe","","",null,null],[17,"XK_hebrew_pe","","",null,null],[17,"XK_hebrew_finalzade","","",null,null],[17,"XK_hebrew_finalzadi","","",null,null],[17,"XK_hebrew_zade","","",null,null],[17,"XK_hebrew_zadi","","",null,null],[17,"XK_hebrew_qoph","","",null,null],[17,"XK_hebrew_kuf","","",null,null],[17,"XK_hebrew_resh","","",null,null],[17,"XK_hebrew_shin","","",null,null],[17,"XK_hebrew_taw","","",null,null],[17,"XK_hebrew_taf","","",null,null],[17,"XK_Hebrew_switch","","",null,null],[17,"XF86XK_ModeLock","","",null,null],[17,"XF86XK_MonBrightnessUp","","",null,null],[17,"XF86XK_MonBrightnessDown","","",null,null],[17,"XF86XK_KbdLightOnOff","","",null,null],[17,"XF86XK_KbdBrightnessUp","","",null,null],[17,"XF86XK_KbdBrightnessDown","","",null,null],[17,"XF86XK_Standby","","",null,null],[17,"XF86XK_AudioLowerVolume","","",null,null],[17,"XF86XK_AudioMute","","",null,null],[17,"XF86XK_AudioRaiseVolume","","",null,null],[17,"XF86XK_AudioPlay","","",null,null],[17,"XF86XK_AudioStop","","",null,null],[17,"XF86XK_AudioPrev","","",null,null],[17,"XF86XK_AudioNext","","",null,null],[17,"XF86XK_HomePage","","",null,null],[17,"XF86XK_Mail","","",null,null],[17,"XF86XK_Start","","",null,null],[17,"XF86XK_Search","","",null,null],[17,"XF86XK_AudioRecord","","",null,null],[17,"XF86XK_Calculator","","",null,null],[17,"XF86XK_Memo","","",null,null],[17,"XF86XK_ToDoList","","",null,null],[17,"XF86XK_Calendar","","",null,null],[17,"XF86XK_PowerDown","","",null,null],[17,"XF86XK_ContrastAdjust","","",null,null],[17,"XF86XK_RockerUp","","",null,null],[17,"XF86XK_RockerDown","","",null,null],[17,"XF86XK_RockerEnter","","",null,null],[17,"XF86XK_Back","","",null,null],[17,"XF86XK_Forward","","",null,null],[17,"XF86XK_Stop","","",null,null],[17,"XF86XK_Refresh","","",null,null],[17,"XF86XK_PowerOff","","",null,null],[17,"XF86XK_WakeUp","","",null,null],[17,"XF86XK_Eject","","",null,null],[17,"XF86XK_ScreenSaver","","",null,null],[17,"XF86XK_WWW","","",null,null],[17,"XF86XK_Sleep","","",null,null],[17,"XF86XK_Favorites","","",null,null],[17,"XF86XK_AudioPause","","",null,null],[17,"XF86XK_AudioMedia","","",null,null],[17,"XF86XK_MyComputer","","",null,null],[17,"XF86XK_VendorHome","","",null,null],[17,"XF86XK_LightBulb","","",null,null],[17,"XF86XK_Shop","","",null,null],[17,"XF86XK_History","","",null,null],[17,"XF86XK_OpenURL","","",null,null],[17,"XF86XK_AddFavorite","","",null,null],[17,"XF86XK_HotLinks","","",null,null],[17,"XF86XK_BrightnessAdjust","","",null,null],[17,"XF86XK_Finance","","",null,null],[17,"XF86XK_Community","","",null,null],[17,"XF86XK_AudioRewind","","",null,null],[17,"XF86XK_BackForward","","",null,null],[17,"XF86XK_Launch0","","",null,null],[17,"XF86XK_Launch1","","",null,null],[17,"XF86XK_Launch2","","",null,null],[17,"XF86XK_Launch3","","",null,null],[17,"XF86XK_Launch4","","",null,null],[17,"XF86XK_Launch5","","",null,null],[17,"XF86XK_Launch6","","",null,null],[17,"XF86XK_Launch7","","",null,null],[17,"XF86XK_Launch8","","",null,null],[17,"XF86XK_Launch9","","",null,null],[17,"XF86XK_LaunchA","","",null,null],[17,"XF86XK_LaunchB","","",null,null],[17,"XF86XK_LaunchC","","",null,null],[17,"XF86XK_LaunchD","","",null,null],[17,"XF86XK_LaunchE","","",null,null],[17,"XF86XK_LaunchF","","",null,null],[17,"XF86XK_ApplicationLeft","","",null,null],[17,"XF86XK_ApplicationRight","","",null,null],[17,"XF86XK_Book","","",null,null],[17,"XF86XK_CD","","",null,null],[17,"XF86XK_Calculater","","",null,null],[17,"XF86XK_Clear","","",null,null],[17,"XF86XK_Close","","",null,null],[17,"XF86XK_Copy","","",null,null],[17,"XF86XK_Cut","","",null,null],[17,"XF86XK_Display","","",null,null],[17,"XF86XK_DOS","","",null,null],[17,"XF86XK_Documents","","",null,null],[17,"XF86XK_Excel","","",null,null],[17,"XF86XK_Explorer","","",null,null],[17,"XF86XK_Game","","",null,null],[17,"XF86XK_Go","","",null,null],[17,"XF86XK_iTouch","","",null,null],[17,"XF86XK_LogOff","","",null,null],[17,"XF86XK_Market","","",null,null],[17,"XF86XK_Meeting","","",null,null],[17,"XF86XK_MenuKB","","",null,null],[17,"XF86XK_MenuPB","","",null,null],[17,"XF86XK_MySites","","",null,null],[17,"XF86XK_New","","",null,null],[17,"XF86XK_News","","",null,null],[17,"XF86XK_OfficeHome","","",null,null],[17,"XF86XK_Open","","",null,null],[17,"XF86XK_Option","","",null,null],[17,"XF86XK_Paste","","",null,null],[17,"XF86XK_Phone","","",null,null],[17,"XF86XK_Q","","",null,null],[17,"XF86XK_Reply","","",null,null],[17,"XF86XK_Reload","","",null,null],[17,"XF86XK_RotateWindows","","",null,null],[17,"XF86XK_RotationPB","","",null,null],[17,"XF86XK_RotationKB","","",null,null],[17,"XF86XK_Save","","",null,null],[17,"XF86XK_ScrollUp","","",null,null],[17,"XF86XK_ScrollDown","","",null,null],[17,"XF86XK_ScrollClick","","",null,null],[17,"XF86XK_Send","","",null,null],[17,"XF86XK_Spell","","",null,null],[17,"XF86XK_SplitScreen","","",null,null],[17,"XF86XK_Support","","",null,null],[17,"XF86XK_TaskPane","","",null,null],[17,"XF86XK_Terminal","","",null,null],[17,"XF86XK_Tools","","",null,null],[17,"XF86XK_Travel","","",null,null],[17,"XF86XK_UserPB","","",null,null],[17,"XF86XK_User1KB","","",null,null],[17,"XF86XK_User2KB","","",null,null],[17,"XF86XK_Video","","",null,null],[17,"XF86XK_WheelButton","","",null,null],[17,"XF86XK_Word","","",null,null],[17,"XF86XK_Xfer","","",null,null],[17,"XF86XK_ZoomIn","","",null,null],[17,"XF86XK_ZoomOut","","",null,null],[17,"XF86XK_Away","","",null,null],[17,"XF86XK_Messenger","","",null,null],[17,"XF86XK_WebCam","","",null,null],[17,"XF86XK_MailForward","","",null,null],[17,"XF86XK_Pictures","","",null,null],[17,"XF86XK_Music","","",null,null],[17,"XF86XK_Battery","","",null,null],[17,"XF86XK_Bluetooth","","",null,null],[17,"XF86XK_WLAN","","",null,null],[17,"XF86XK_UWB","","",null,null],[17,"XF86XK_AudioForward","","",null,null],[17,"XF86XK_AudioRepeat","","",null,null],[17,"XF86XK_AudioRandomPlay","","",null,null],[17,"XF86XK_Subtitle","","",null,null],[17,"XF86XK_AudioCycleTrack","","",null,null],[17,"XF86XK_CycleAngle","","",null,null],[17,"XF86XK_FrameBack","","",null,null],[17,"XF86XK_FrameForward","","",null,null],[17,"XF86XK_Time","","",null,null],[17,"XF86XK_Select","","",null,null],[17,"XF86XK_View","","",null,null],[17,"XF86XK_TopMenu","","",null,null],[17,"XF86XK_Red","","",null,null],[17,"XF86XK_Green","","",null,null],[17,"XF86XK_Yellow","","",null,null],[17,"XF86XK_Blue","","",null,null],[17,"XF86XK_Suspend","","",null,null],[17,"XF86XK_Hibernate","","",null,null],[17,"XF86XK_TouchpadToggle","","",null,null],[17,"XF86XK_TouchpadOn","","",null,null],[17,"XF86XK_TouchpadOff","","",null,null],[17,"XF86XK_AudioMicMute","","",null,null],[17,"XF86XK_Switch_VT_1","","",null,null],[17,"XF86XK_Switch_VT_2","","",null,null],[17,"XF86XK_Switch_VT_3","","",null,null],[17,"XF86XK_Switch_VT_4","","",null,null],[17,"XF86XK_Switch_VT_5","","",null,null],[17,"XF86XK_Switch_VT_6","","",null,null],[17,"XF86XK_Switch_VT_7","","",null,null],[17,"XF86XK_Switch_VT_8","","",null,null],[17,"XF86XK_Switch_VT_9","","",null,null],[17,"XF86XK_Switch_VT_10","","",null,null],[17,"XF86XK_Switch_VT_11","","",null,null],[17,"XF86XK_Switch_VT_12","","",null,null],[17,"XF86XK_Ungrab","","",null,null],[17,"XF86XK_ClearGrab","","",null,null],[17,"XF86XK_Next_VMode","","",null,null],[17,"XF86XK_Prev_VMode","","",null,null],[17,"XF86XK_LogWindowTree","","",null,null],[17,"XF86XK_LogGrabInfo","","",null,null],[17,"XK_ISO_Lock","","",null,null],[17,"XK_ISO_Level2_Latch","","",null,null],[17,"XK_ISO_Level3_Shift","","",null,null],[17,"XK_ISO_Level3_Latch","","",null,null],[17,"XK_ISO_Level3_Lock","","",null,null],[17,"XK_ISO_Level5_Shift","","",null,null],[17,"XK_ISO_Level5_Latch","","",null,null],[17,"XK_ISO_Level5_Lock","","",null,null],[17,"XK_ISO_Group_Shift","","",null,null],[17,"XK_ISO_Group_Latch","","",null,null],[17,"XK_ISO_Group_Lock","","",null,null],[17,"XK_ISO_Next_Group","","",null,null],[17,"XK_ISO_Next_Group_Lock","","",null,null],[17,"XK_ISO_Prev_Group","","",null,null],[17,"XK_ISO_Prev_Group_Lock","","",null,null],[17,"XK_ISO_First_Group","","",null,null],[17,"XK_ISO_First_Group_Lock","","",null,null],[17,"XK_ISO_Last_Group","","",null,null],[17,"XK_ISO_Last_Group_Lock","","",null,null],[17,"XK_ISO_Left_Tab","","",null,null],[17,"XK_ISO_Move_Line_Up","","",null,null],[17,"XK_ISO_Move_Line_Down","","",null,null],[17,"XK_ISO_Partial_Line_Up","","",null,null],[17,"XK_ISO_Partial_Line_Down","","",null,null],[17,"XK_ISO_Partial_Space_Left","","",null,null],[17,"XK_ISO_Partial_Space_Right","","",null,null],[17,"XK_ISO_Set_Margin_Left","","",null,null],[17,"XK_ISO_Set_Margin_Right","","",null,null],[17,"XK_ISO_Release_Margin_Left","","",null,null],[17,"XK_ISO_Release_Margin_Right","","",null,null],[17,"XK_ISO_Release_Both_Margins","","",null,null],[17,"XK_ISO_Fast_Cursor_Left","","",null,null],[17,"XK_ISO_Fast_Cursor_Right","","",null,null],[17,"XK_ISO_Fast_Cursor_Up","","",null,null],[17,"XK_ISO_Fast_Cursor_Down","","",null,null],[17,"XK_ISO_Continuous_Underline","","",null,null],[17,"XK_ISO_Discontinuous_Underline","","",null,null],[17,"XK_ISO_Emphasize","","",null,null],[17,"XK_ISO_Center_Object","","",null,null],[17,"XK_ISO_Enter","","",null,null],[17,"XK_dead_grave","","",null,null],[17,"XK_dead_acute","","",null,null],[17,"XK_dead_circumflex","","",null,null],[17,"XK_dead_tilde","","",null,null],[17,"XK_dead_perispomeni","","",null,null],[17,"XK_dead_macron","","",null,null],[17,"XK_dead_breve","","",null,null],[17,"XK_dead_abovedot","","",null,null],[17,"XK_dead_diaeresis","","",null,null],[17,"XK_dead_abovering","","",null,null],[17,"XK_dead_doubleacute","","",null,null],[17,"XK_dead_caron","","",null,null],[17,"XK_dead_cedilla","","",null,null],[17,"XK_dead_ogonek","","",null,null],[17,"XK_dead_iota","","",null,null],[17,"XK_dead_voiced_sound","","",null,null],[17,"XK_dead_semivoiced_sound","","",null,null],[17,"XK_dead_belowdot","","",null,null],[17,"XK_dead_hook","","",null,null],[17,"XK_dead_horn","","",null,null],[17,"XK_dead_stroke","","",null,null],[17,"XK_dead_abovecomma","","",null,null],[17,"XK_dead_psili","","",null,null],[17,"XK_dead_abovereversedcomma","","",null,null],[17,"XK_dead_dasia","","",null,null],[17,"XK_dead_doublegrave","","",null,null],[17,"XK_dead_belowring","","",null,null],[17,"XK_dead_belowmacron","","",null,null],[17,"XK_dead_belowcircumflex","","",null,null],[17,"XK_dead_belowtilde","","",null,null],[17,"XK_dead_belowbreve","","",null,null],[17,"XK_dead_belowdiaeresis","","",null,null],[17,"XK_dead_invertedbreve","","",null,null],[17,"XK_dead_belowcomma","","",null,null],[17,"XK_dead_currency","","",null,null],[17,"XK_dead_lowline","","",null,null],[17,"XK_dead_aboveverticalline","","",null,null],[17,"XK_dead_belowverticalline","","",null,null],[17,"XK_dead_longsolidusoverlay","","",null,null],[17,"XK_dead_a","","",null,null],[17,"XK_dead_A","","",null,null],[17,"XK_dead_e","","",null,null],[17,"XK_dead_E","","",null,null],[17,"XK_dead_i","","",null,null],[17,"XK_dead_I","","",null,null],[17,"XK_dead_o","","",null,null],[17,"XK_dead_O","","",null,null],[17,"XK_dead_u","","",null,null],[17,"XK_dead_U","","",null,null],[17,"XK_dead_small_schwa","","",null,null],[17,"XK_dead_capital_schwa","","",null,null],[17,"XK_dead_greek","","",null,null],[17,"XK_First_Virtual_Screen","","",null,null],[17,"XK_Prev_Virtual_Screen","","",null,null],[17,"XK_Next_Virtual_Screen","","",null,null],[17,"XK_Last_Virtual_Screen","","",null,null],[17,"XK_Terminate_Server","","",null,null],[17,"XK_AccessX_Enable","","",null,null],[17,"XK_AccessX_Feedback_Enable","","",null,null],[17,"XK_RepeatKeys_Enable","","",null,null],[17,"XK_SlowKeys_Enable","","",null,null],[17,"XK_BounceKeys_Enable","","",null,null],[17,"XK_StickyKeys_Enable","","",null,null],[17,"XK_MouseKeys_Enable","","",null,null],[17,"XK_MouseKeys_Accel_Enable","","",null,null],[17,"XK_Overlay1_Enable","","",null,null],[17,"XK_Overlay2_Enable","","",null,null],[17,"XK_AudibleBell_Enable","","",null,null],[17,"XK_Pointer_Left","","",null,null],[17,"XK_Pointer_Right","","",null,null],[17,"XK_Pointer_Up","","",null,null],[17,"XK_Pointer_Down","","",null,null],[17,"XK_Pointer_UpLeft","","",null,null],[17,"XK_Pointer_UpRight","","",null,null],[17,"XK_Pointer_DownLeft","","",null,null],[17,"XK_Pointer_DownRight","","",null,null],[17,"XK_Pointer_Button_Dflt","","",null,null],[17,"XK_Pointer_Button1","","",null,null],[17,"XK_Pointer_Button2","","",null,null],[17,"XK_Pointer_Button3","","",null,null],[17,"XK_Pointer_Button4","","",null,null],[17,"XK_Pointer_Button5","","",null,null],[17,"XK_Pointer_DblClick_Dflt","","",null,null],[17,"XK_Pointer_DblClick1","","",null,null],[17,"XK_Pointer_DblClick2","","",null,null],[17,"XK_Pointer_DblClick3","","",null,null],[17,"XK_Pointer_DblClick4","","",null,null],[17,"XK_Pointer_DblClick5","","",null,null],[17,"XK_Pointer_Drag_Dflt","","",null,null],[17,"XK_Pointer_Drag1","","",null,null],[17,"XK_Pointer_Drag2","","",null,null],[17,"XK_Pointer_Drag3","","",null,null],[17,"XK_Pointer_Drag4","","",null,null],[17,"XK_Pointer_Drag5","","",null,null],[17,"XK_Pointer_EnableKeys","","",null,null],[17,"XK_Pointer_Accelerate","","",null,null],[17,"XK_Pointer_DfltBtnNext","","",null,null],[17,"XK_Pointer_DfltBtnPrev","","",null,null],[17,"XK_ch","","",null,null],[17,"XK_Ch","","",null,null],[17,"XK_CH","","",null,null],[17,"XK_c_h","","",null,null],[17,"XK_C_h","","",null,null],[17,"XK_C_H","","",null,null],[0,"xcursor","x11_dl","",null,null],[3,"Xcursor","x11_dl::xcursor","",null,null],[12,"XcursorAnimateCreate","","",104,null],[12,"XcursorAnimateDestroy","","",104,null],[12,"XcursorAnimateNext","","",104,null],[12,"XcursorCommentCreate","","",104,null],[12,"XcursorCommentDestroy","","",104,null],[12,"XcursorCommentsCreate","","",104,null],[12,"XcursorCommentsDestroy","","",104,null],[12,"XcursorCursorsCreate","","",104,null],[12,"XcursorCursorsDestroy","","",104,null],[12,"XcursorFileLoad","","",104,null],[12,"XcursorFileLoadAllImages","","",104,null],[12,"XcursorFileLoadImage","","",104,null],[12,"XcursorFileLoadImages","","",104,null],[12,"XcursorFilenameLoad","","",104,null],[12,"XcursorFilenameLoadAllImages","","",104,null],[12,"XcursorFilenameLoadCursor","","",104,null],[12,"XcursorFilenameLoadCursors","","",104,null],[12,"XcursorFilenameLoadImage","","",104,null],[12,"XcursorFilenameLoadImages","","",104,null],[12,"XcursorFilenameSave","","",104,null],[12,"XcursorFilenameSaveImages","","",104,null],[12,"XcursorFileSave","","",104,null],[12,"XcursorFileSaveImages","","",104,null],[12,"XcursorGetDefaultSize","","",104,null],[12,"XcursorGetTheme","","",104,null],[12,"XcursorGetThemeCore","","",104,null],[12,"XcursorImageCreate","","",104,null],[12,"XcursorImageDestroy","","",104,null],[12,"XcursorImageHash","","",104,null],[12,"XcursorImageLoadCursor","","",104,null],[12,"XcursorImagesCreate","","",104,null],[12,"XcursorImagesDestroy","","",104,null],[12,"XcursorImagesLoadCursor","","",104,null],[12,"XcursorImagesLoadCursors","","",104,null],[12,"XcursorImagesSetName","","",104,null],[12,"XcursorLibraryLoadCursor","","",104,null],[12,"XcursorLibraryLoadCursors","","",104,null],[12,"XcursorLibraryLoadImage","","",104,null],[12,"XcursorLibraryLoadImages","","",104,null],[12,"XcursorLibraryPath","","",104,null],[12,"XcursorLibraryShape","","",104,null],[12,"XcursorNoticeCreateBitmap","","",104,null],[12,"XcursorNoticePutBitmap","","",104,null],[12,"XcursorSetDefaultSize","","",104,null],[12,"XcursorSetTheme","","",104,null],[12,"XcursorSetThemeCore","","",104,null],[12,"XcursorShapeLoadCursor","","",104,null],[12,"XcursorShapeLoadCursors","","",104,null],[12,"XcursorShapeLoadImage","","",104,null],[12,"XcursorShapeLoadImages","","",104,null],[12,"XcursorSupportsAnim","","",104,null],[12,"XcursorSupportsARGB","","",104,null],[12,"XcursorTryShapeBitmapCursor","","",104,null],[12,"XcursorTryShapeCursor","","",104,null],[12,"XcursorXcFileLoad","","",104,null],[12,"XcursorXcFileLoadAllImages","","",104,null],[12,"XcursorXcFileLoadImage","","",104,null],[12,"XcursorXcFileLoadImages","","",104,null],[12,"XcursorXcFileSave","","",104,null],[3,"_XcursorAnimate","","",null,null],[12,"cursors","","",105,null],[12,"sequence","","",105,null],[3,"_XcursorChunkHeader","","",null,null],[12,"header","","",106,null],[12,"type_","","",106,null],[12,"subtype","","",106,null],[12,"version","","",106,null],[3,"_XcursorComment","","",null,null],[12,"version","","",107,null],[12,"comment_type","","",107,null],[12,"comment","","",107,null],[3,"_XcursorComments","","",null,null],[12,"ncomment","","",108,null],[12,"comments","","",108,null],[3,"_XcursorCursors","","",null,null],[12,"dpy","","",109,null],[12,"ref_","","",109,null],[12,"ncursor","","",109,null],[12,"cursors","","",109,null],[3,"_XcursorFile","","",null,null],[12,"closure","","",110,null],[12,"read","","",110,null],[12,"write","","",110,null],[12,"seek","","",110,null],[3,"_XcursorFileHeader","","",null,null],[12,"magic","","",111,null],[12,"header","","",111,null],[12,"version","","",111,null],[12,"ntoc","","",111,null],[12,"tocs","","",111,null],[3,"_XcursorFileToc","","",null,null],[12,"type_","","",112,null],[12,"subtype","","",112,null],[12,"position","","",112,null],[3,"_XcursorImage","","",null,null],[12,"version","","",113,null],[12,"size","","",113,null],[12,"width","","",113,null],[12,"height","","",113,null],[12,"xhot","","",113,null],[12,"yhot","","",113,null],[12,"delay","","",113,null],[12,"pixels","","",113,null],[3,"_XcursorImages","","",null,null],[12,"nimage","","",114,null],[12,"images","","",114,null],[12,"name","","",114,null],[6,"XcursorBool","","",null,null],[6,"XcursorDim","","",null,null],[6,"XcursorPixel","","",null,null],[6,"XcursorUInt","","",null,null],[6,"XcursorAnimate","","",null,null],[6,"XcursorChunkHeader","","",null,null],[6,"XcursorComment","","",null,null],[6,"XcursorComments","","",null,null],[6,"XcursorCursors","","",null,null],[6,"XcursorFile","","",null,null],[6,"XcursorFileHeader","","",null,null],[6,"XcursorFileToc","","",null,null],[6,"XcursorImage","","",null,null],[6,"XcursorImages","","",null,null],[11,"open","","",104,{"o":{"g":["xcursor","openerror"],"n":"result"}}],[11,"fmt","","",105,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",105,{"i":[{"n":"self"}],"o":{"n":"_xcursoranimate"}}],[11,"fmt","","",106,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",106,{"i":[{"n":"self"}],"o":{"n":"_xcursorchunkheader"}}],[11,"fmt","","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",107,{"i":[{"n":"self"}],"o":{"n":"_xcursorcomment"}}],[11,"fmt","","",108,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",108,{"i":[{"n":"self"}],"o":{"n":"_xcursorcomments"}}],[11,"fmt","","",109,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",109,{"i":[{"n":"self"}],"o":{"n":"_xcursorcursors"}}],[11,"fmt","","",110,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",110,{"i":[{"n":"self"}],"o":{"n":"_xcursorfile"}}],[11,"fmt","","",111,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",111,{"i":[{"n":"self"}],"o":{"n":"_xcursorfileheader"}}],[11,"fmt","","",112,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",112,{"i":[{"n":"self"}],"o":{"n":"_xcursorfiletoc"}}],[11,"fmt","","",113,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",113,{"i":[{"n":"self"}],"o":{"n":"_xcursorimage"}}],[11,"fmt","","",114,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",114,{"i":[{"n":"self"}],"o":{"n":"_xcursorimages"}}],[0,"xf86vmode","x11_dl","",null,null],[3,"Xf86vmode","x11_dl::xf86vmode","",null,null],[12,"XF86VidModeAddModeLine","","",115,null],[12,"XF86VidModeDeleteModeLine","","",115,null],[12,"XF86VidModeGetAllModeLines","","",115,null],[12,"XF86VidModeGetDotClocks","","",115,null],[12,"XF86VidModeGetGamma","","",115,null],[12,"XF86VidModeGetGammaRamp","","",115,null],[12,"XF86VidModeGetGammaRampSize","","",115,null],[12,"XF86VidModeGetModeLine","","",115,null],[12,"XF86VidModeGetMonitor","","",115,null],[12,"XF86VidModeGetPermissions","","",115,null],[12,"XF86VidModeGetViewPort","","",115,null],[12,"XF86VidModeLockModeSwitch","","",115,null],[12,"XF86VidModeModModeLine","","",115,null],[12,"XF86VidModeQueryExtension","","",115,null],[12,"XF86VidModeQueryVersion","","",115,null],[12,"XF86VidModeSetClientVersion","","",115,null],[12,"XF86VidModeSetGamma","","",115,null],[12,"XF86VidModeSetGammaRamp","","",115,null],[12,"XF86VidModeSetViewPort","","",115,null],[12,"XF86VidModeSwitchMode","","",115,null],[12,"XF86VidModeSwitchToMode","","",115,null],[12,"XF86VidModeValidateModeLine","","",115,null],[3,"XF86VidModeGamma","","",null,null],[12,"red","","",116,null],[12,"green","","",116,null],[12,"blue","","",116,null],[3,"XF86VidModeModeInfo","","",null,null],[12,"dotclock","","",117,null],[12,"hdisplay","","",117,null],[12,"hsyncstart","","",117,null],[12,"hsyncend","","",117,null],[12,"htotal","","",117,null],[12,"hskew","","",117,null],[12,"vdisplay","","",117,null],[12,"vsyncstart","","",117,null],[12,"vsyncend","","",117,null],[12,"vtotal","","",117,null],[12,"flags","","",117,null],[12,"privsize","","",117,null],[12,"private","","",117,null],[3,"XF86VidModeModeLine","","",null,null],[12,"hdisplay","","",118,null],[12,"hsyncstart","","",118,null],[12,"hsyncend","","",118,null],[12,"htotal","","",118,null],[12,"hskew","","",118,null],[12,"vdisplay","","",118,null],[12,"vsyncstart","","",118,null],[12,"vsyncend","","",118,null],[12,"vtotal","","",118,null],[12,"flags","","",118,null],[12,"privsize","","",118,null],[12,"private","","",118,null],[3,"XF86VidModeMonitor","","",null,null],[12,"vendor","","",119,null],[12,"model","","",119,null],[12,"EMPTY","","",119,null],[12,"nhsync","","",119,null],[12,"hsync","","",119,null],[12,"nvsync","","",119,null],[12,"vsync","","",119,null],[3,"XF86VidModeSyncRange","","",null,null],[12,"hi","","",120,null],[12,"lo","","",120,null],[3,"XF86VidModeNotifyEvent","","",null,null],[12,"type_","","",121,null],[12,"serial","","",121,null],[12,"send_event","","",121,null],[12,"display","","",121,null],[12,"root","","",121,null],[12,"state","","",121,null],[12,"kind","","",121,null],[12,"forced","","",121,null],[12,"time","","",121,null],[11,"open","","",115,{"o":{"g":["xf86vmode","openerror"],"n":"result"}}],[11,"fmt","","",116,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",116,{"i":[{"n":"self"}],"o":{"n":"xf86vidmodegamma"}}],[11,"fmt","","",117,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",117,{"i":[{"n":"self"}],"o":{"n":"xf86vidmodemodeinfo"}}],[11,"eq","","",117,{"i":[{"n":"self"},{"n":"xf86vidmodemodeinfo"}],"o":{"n":"bool"}}],[11,"ne","","",117,{"i":[{"n":"self"},{"n":"xf86vidmodemodeinfo"}],"o":{"n":"bool"}}],[11,"fmt","","",118,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",118,{"i":[{"n":"self"}],"o":{"n":"xf86vidmodemodeline"}}],[11,"fmt","","",119,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",119,{"i":[{"n":"self"}],"o":{"n":"xf86vidmodemonitor"}}],[11,"fmt","","",120,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",120,{"i":[{"n":"self"}],"o":{"n":"xf86vidmodesyncrange"}}],[11,"fmt","","",121,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",121,{"i":[{"n":"self"}],"o":{"n":"xf86vidmodenotifyevent"}}],[11,"as_mut","x11_dl::xlib","",99,{"i":[{"n":"self"}],"o":{"n":"xf86vidmodenotifyevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xf86vidmodenotifyevent"}}],[11,"from","","",99,{"i":[{"n":"xf86vidmodenotifyevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xf86vidmodenotifyevent"}],"o":{"n":"xevent"}}],[11,"from","x11_dl::xf86vmode","",121,{"i":[{"n":"xevent"}],"o":{"n":"xf86vidmodenotifyevent"}}],[11,"from","","",121,{"i":[{"n":"xevent"}],"o":{"n":"xf86vidmodenotifyevent"}}],[0,"xfixes","x11_dl","",null,null],[6,"PointerBarrier","x11_dl::xfixes","",null,null],[0,"xft","x11_dl","",null,null],[3,"Xft","x11_dl::xft","",null,null],[12,"XftCharExists","","",122,null],[12,"XftCharFontSpecRender","","",122,null],[12,"XftCharIndex","","",122,null],[12,"XftCharSpecRender","","",122,null],[12,"XftColorAllocName","","",122,null],[12,"XftColorAllocValue","","",122,null],[12,"XftColorFree","","",122,null],[12,"XftDefaultHasRender","","",122,null],[12,"XftDefaultSet","","",122,null],[12,"XftDefaultSubstitute","","",122,null],[12,"XftDrawChange","","",122,null],[12,"XftDrawCharFontSpec","","",122,null],[12,"XftDrawCharSpec","","",122,null],[12,"XftDrawColormap","","",122,null],[12,"XftDrawCreate","","",122,null],[12,"XftDrawCreateAlpha","","",122,null],[12,"XftDrawCreateBitmap","","",122,null],[12,"XftDrawDestroy","","",122,null],[12,"XftDrawDisplay","","",122,null],[12,"XftDrawDrawable","","",122,null],[12,"XftDrawGlyphFontSpec","","",122,null],[12,"XftDrawGlyphs","","",122,null],[12,"XftDrawGlyphSpec","","",122,null],[12,"XftDrawPicture","","",122,null],[12,"XftDrawRect","","",122,null],[12,"XftDrawSetClip","","",122,null],[12,"XftDrawSetClipRectangles","","",122,null],[12,"XftDrawSetSubwindowMode","","",122,null],[12,"XftDrawSrcPicture","","",122,null],[12,"XftDrawString16","","",122,null],[12,"XftDrawString32","","",122,null],[12,"XftDrawString8","","",122,null],[12,"XftDrawStringUtf16","","",122,null],[12,"XftDrawStringUtf8","","",122,null],[12,"XftDrawVisual","","",122,null],[12,"XftFontCheckGlyph","","",122,null],[12,"XftFontClose","","",122,null],[12,"XftFontCopy","","",122,null],[12,"XftFontInfoCreate","","",122,null],[12,"XftFontInfoDestroy","","",122,null],[12,"XftFontInfoEqual","","",122,null],[12,"XftFontInfoHash","","",122,null],[12,"XftFontLoadGlyphs","","",122,null],[12,"XftFontMatch","","",122,null],[12,"XftFontOpenInfo","","",122,null],[12,"XftFontOpenName","","",122,null],[12,"XftFontOpenPattern","","",122,null],[12,"XftFontOpenXlfd","","",122,null],[12,"XftFontUnloadGlyphs","","",122,null],[12,"XftGetVersion","","",122,null],[12,"XftGlyphExtents","","",122,null],[12,"XftGlyphFontSpecRender","","",122,null],[12,"XftGlyphRender","","",122,null],[12,"XftGlyphSpecRender","","",122,null],[12,"XftInit","","",122,null],[12,"XftInitFtLibrary","","",122,null],[12,"XftLockFace","","",122,null],[12,"XftNameParse","","",122,null],[12,"XftNameUnparse","","",122,null],[12,"XftTextExtents16","","",122,null],[12,"XftTextExtents32","","",122,null],[12,"XftTextExtents8","","",122,null],[12,"XftTextExtentsUtf16","","",122,null],[12,"XftTextExtentsUtf8","","",122,null],[12,"XftTextRender16","","",122,null],[12,"XftTextRender16BE","","",122,null],[12,"XftTextRender16LE","","",122,null],[12,"XftTextRender32","","",122,null],[12,"XftTextRender32BE","","",122,null],[12,"XftTextRender32LE","","",122,null],[12,"XftTextRender8","","",122,null],[12,"XftTextRenderUtf16","","",122,null],[12,"XftTextRenderUtf8","","",122,null],[12,"XftUnlockFace","","",122,null],[12,"XftXlfdParse","","",122,null],[12,"XftFontOpen","","",122,null],[12,"XftListFonts","","",122,null],[3,"XftFont","","",null,null],[12,"ascent","","",123,null],[12,"descent","","",123,null],[12,"height","","",123,null],[12,"max_advance_width","","",123,null],[12,"charset","","",123,null],[12,"pattern","","",123,null],[3,"XftColor","","",null,null],[12,"pixel","","",124,null],[12,"color","","",124,null],[3,"XftCharSpec","","",null,null],[12,"ucs4","","",125,null],[12,"x","","",125,null],[12,"y","","",125,null],[3,"XftCharFontSpec","","",null,null],[12,"font","","",126,null],[12,"ucs4","","",126,null],[12,"x","","",126,null],[12,"y","","",126,null],[3,"XftFontSet","","",null,null],[12,"nfont","","",127,null],[12,"sfont","","",127,null],[12,"fonts","","",127,null],[3,"XftGlyphSpec","","",null,null],[12,"glyph","","",128,null],[12,"x","","",128,null],[12,"y","","",128,null],[3,"XftGlyphFontSpec","","",null,null],[12,"font","","",129,null],[12,"glyph","","",129,null],[12,"x","","",129,null],[12,"y","","",129,null],[4,"FT_FaceRec","","",null,null],[4,"FcCharSet","","",null,null],[4,"FcPattern","","",null,null],[4,"FcEndian","","",null,null],[13,"Big","","",130,null],[13,"Little","","",130,null],[4,"FcResult","","",null,null],[13,"Match","","",131,null],[13,"NoMatch","","",131,null],[13,"TypeMismatch","","",131,null],[13,"NoId","","",131,null],[13,"OutOfMemory","","",131,null],[4,"XftFontInfo","","",null,null],[4,"XftDraw","","",null,null],[4,"XftPattern","","",null,null],[6,"FT_UInt","","",null,null],[6,"FcChar32","","",null,null],[17,"XFT_FAMILY","","",null,null],[17,"XFT_STYLE","","",null,null],[17,"XFT_SLANT","","",null,null],[17,"XFT_WEIGHT","","",null,null],[17,"XFT_SIZE","","",null,null],[17,"XFT_PIXEL_SIZE","","",null,null],[17,"XFT_SPACING","","",null,null],[17,"XFT_FOUNDRY","","",null,null],[17,"XFT_ANTIALIAS","","",null,null],[17,"XFT_SLANT_ROMAN","","",null,null],[17,"XFT_SLANT_ITALIC","","",null,null],[17,"XFT_SLANT_OBLIQUE","","",null,null],[17,"XftTypeVoid","","",null,null],[17,"XftTypeInteger","","",null,null],[17,"XftTypeDouble","","",null,null],[17,"XftTypeString","","",null,null],[17,"XftTypeBool","","",null,null],[17,"XftTypeMatrix","","",null,null],[11,"open","","",122,{"o":{"g":["xft","openerror"],"n":"result"}}],[11,"fmt","","",123,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",123,{"i":[{"n":"self"}],"o":{"n":"xftfont"}}],[11,"eq","","",123,{"i":[{"n":"self"},{"n":"xftfont"}],"o":{"n":"bool"}}],[11,"ne","","",123,{"i":[{"n":"self"},{"n":"xftfont"}],"o":{"n":"bool"}}],[11,"fmt","","",124,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",124,{"i":[{"n":"self"}],"o":{"n":"xftcolor"}}],[11,"eq","","",124,{"i":[{"n":"self"},{"n":"xftcolor"}],"o":{"n":"bool"}}],[11,"ne","","",124,{"i":[{"n":"self"},{"n":"xftcolor"}],"o":{"n":"bool"}}],[11,"fmt","","",125,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",125,{"i":[{"n":"self"}],"o":{"n":"xftcharspec"}}],[11,"eq","","",125,{"i":[{"n":"self"},{"n":"xftcharspec"}],"o":{"n":"bool"}}],[11,"ne","","",125,{"i":[{"n":"self"},{"n":"xftcharspec"}],"o":{"n":"bool"}}],[11,"fmt","","",126,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",126,{"i":[{"n":"self"}],"o":{"n":"xftcharfontspec"}}],[11,"eq","","",126,{"i":[{"n":"self"},{"n":"xftcharfontspec"}],"o":{"n":"bool"}}],[11,"ne","","",126,{"i":[{"n":"self"},{"n":"xftcharfontspec"}],"o":{"n":"bool"}}],[11,"fmt","","",127,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",127,{"i":[{"n":"self"}],"o":{"n":"xftfontset"}}],[11,"eq","","",127,{"i":[{"n":"self"},{"n":"xftfontset"}],"o":{"n":"bool"}}],[11,"ne","","",127,{"i":[{"n":"self"},{"n":"xftfontset"}],"o":{"n":"bool"}}],[11,"fmt","","",128,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",128,{"i":[{"n":"self"}],"o":{"n":"xftglyphspec"}}],[11,"eq","","",128,{"i":[{"n":"self"},{"n":"xftglyphspec"}],"o":{"n":"bool"}}],[11,"ne","","",128,{"i":[{"n":"self"},{"n":"xftglyphspec"}],"o":{"n":"bool"}}],[11,"fmt","","",129,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",129,{"i":[{"n":"self"}],"o":{"n":"xftglyphfontspec"}}],[11,"eq","","",129,{"i":[{"n":"self"},{"n":"xftglyphfontspec"}],"o":{"n":"bool"}}],[11,"ne","","",129,{"i":[{"n":"self"},{"n":"xftglyphfontspec"}],"o":{"n":"bool"}}],[0,"xinerama","x11_dl","",null,null],[3,"Xlib","x11_dl::xinerama","",null,null],[12,"XineramaIsActive","","",132,null],[12,"XineramaQueryExtension","","",132,null],[12,"XineramaQueryScreens","","",132,null],[12,"XineramaQueryVersion","","",132,null],[12,"XPanoramiXAllocInfo","","",132,null],[12,"XPanoramiXGetScreenCount","","",132,null],[12,"XPanoramiXGetScreenSize","","",132,null],[12,"XPanoramiXGetState","","",132,null],[12,"XPanoramiXQueryExtension","","",132,null],[12,"XPanoramiXQueryVersion","","",132,null],[3,"XineramaScreenInfo","","",null,null],[12,"screen_number","","",133,null],[12,"x_org","","",133,null],[12,"y_org","","",133,null],[12,"width","","",133,null],[12,"height","","",133,null],[3,"XPanoramiXInfo","","",null,null],[12,"window","","",134,null],[12,"screen","","",134,null],[12,"State","","",134,null],[12,"width","","",134,null],[12,"height","","",134,null],[12,"ScreenCount","","",134,null],[12,"eventMask","","",134,null],[11,"open","","",132,{"o":{"g":["xlib","openerror"],"n":"result"}}],[11,"fmt","","",133,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",133,{"i":[{"n":"self"}],"o":{"n":"xineramascreeninfo"}}],[11,"eq","","",133,{"i":[{"n":"self"},{"n":"xineramascreeninfo"}],"o":{"n":"bool"}}],[11,"ne","","",133,{"i":[{"n":"self"},{"n":"xineramascreeninfo"}],"o":{"n":"bool"}}],[11,"fmt","","",134,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",134,{"i":[{"n":"self"}],"o":{"n":"xpanoramixinfo"}}],[11,"eq","","",134,{"i":[{"n":"self"},{"n":"xpanoramixinfo"}],"o":{"n":"bool"}}],[11,"ne","","",134,{"i":[{"n":"self"},{"n":"xpanoramixinfo"}],"o":{"n":"bool"}}],[0,"xinput","x11_dl","",null,null],[3,"XInput","x11_dl::xinput","",null,null],[12,"XAllowDeviceEvents","","",135,null],[12,"XChangeDeviceControl","","",135,null],[12,"XChangeDeviceDontPropagateList","","",135,null],[12,"XChangeDeviceKeyMapping","","",135,null],[12,"XChangeDeviceProperty","","",135,null],[12,"XChangeFeedbackControl","","",135,null],[12,"XChangeKeyboardDevice","","",135,null],[12,"XChangePointerDevice","","",135,null],[12,"XCloseDevice","","",135,null],[12,"XDeleteDeviceProperty","","",135,null],[12,"XDeviceBell","","",135,null],[12,"XFreeDeviceControl","","",135,null],[12,"XFreeDeviceList","","",135,null],[12,"XFreeDeviceMotionEvents","","",135,null],[12,"XFreeDeviceState","","",135,null],[12,"XFreeFeedbackList","","",135,null],[12,"XGetDeviceButtonMapping","","",135,null],[12,"XGetDeviceControl","","",135,null],[12,"XGetDeviceDontPropagateList","","",135,null],[12,"XGetDeviceFocus","","",135,null],[12,"XGetDeviceKeyMapping","","",135,null],[12,"XGetDeviceModifierMapping","","",135,null],[12,"XGetDeviceMotionEvents","","",135,null],[12,"XGetDeviceProperty","","",135,null],[12,"XGetExtensionVersion","","",135,null],[12,"XGetFeedbackControl","","",135,null],[12,"XGetSelectedExtensionEvents","","",135,null],[12,"XGrabDevice","","",135,null],[12,"XGrabDeviceButton","","",135,null],[12,"XGrabDeviceKey","","",135,null],[12,"XListDeviceProperties","","",135,null],[12,"XListInputDevices","","",135,null],[12,"XOpenDevice","","",135,null],[12,"XQueryDeviceState","","",135,null],[12,"XSelectExtensionEvent","","",135,null],[12,"XSendExtensionEvent","","",135,null],[12,"XSetDeviceButtonMapping","","",135,null],[12,"XSetDeviceFocus","","",135,null],[12,"XSetDeviceMode","","",135,null],[12,"XSetDeviceModifierMapping","","",135,null],[12,"XSetDeviceValuators","","",135,null],[12,"XUngrabDevice","","",135,null],[12,"XUngrabDeviceButton","","",135,null],[12,"XUngrabDeviceKey","","",135,null],[3,"XDevice","","",null,null],[12,"device_id","","",136,null],[12,"num_classes","","",136,null],[12,"classes","","",136,null],[3,"XDeviceControl","","",null,null],[12,"control","","",137,null],[12,"length","","",137,null],[3,"XDeviceInfo","","",null,null],[12,"id","","",138,null],[12,"type_","","",138,null],[12,"name","","",138,null],[12,"num_classes","","",138,null],[12,"use_","","",138,null],[12,"inputclassinfo","","",138,null],[3,"XDeviceState","","",null,null],[12,"device_id","","",139,null],[12,"num_classes","","",139,null],[12,"data","","",139,null],[3,"XDeviceTimeCoord","","",null,null],[12,"time","","",140,null],[12,"data","","",140,null],[3,"XExtensionVersion","","",null,null],[12,"present","","",141,null],[12,"major_version","","",141,null],[12,"minor_version","","",141,null],[3,"XFeedbackControl","","",null,null],[12,"class","","",142,null],[12,"length","","",142,null],[12,"id","","",142,null],[3,"XFeedbackState","","",null,null],[12,"class","","",143,null],[12,"length","","",143,null],[12,"id","","",143,null],[3,"XInputClass","","",null,null],[12,"class","","",144,null],[12,"length","","",144,null],[3,"XInputClassInfo","","",null,null],[12,"input_class","","",145,null],[12,"event_type_base","","",145,null],[4,"_XAnyClassinfo","","",null,null],[6,"XAnyClassPtr","","",null,null],[11,"open","","",135,{"o":{"g":["xinput","openerror"],"n":"result"}}],[11,"fmt","","",136,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",136,{"i":[{"n":"self"}],"o":{"n":"xdevice"}}],[11,"eq","","",136,{"i":[{"n":"self"},{"n":"xdevice"}],"o":{"n":"bool"}}],[11,"ne","","",136,{"i":[{"n":"self"},{"n":"xdevice"}],"o":{"n":"bool"}}],[11,"fmt","","",137,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",137,{"i":[{"n":"self"}],"o":{"n":"xdevicecontrol"}}],[11,"eq","","",137,{"i":[{"n":"self"},{"n":"xdevicecontrol"}],"o":{"n":"bool"}}],[11,"ne","","",137,{"i":[{"n":"self"},{"n":"xdevicecontrol"}],"o":{"n":"bool"}}],[11,"fmt","","",138,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",138,{"i":[{"n":"self"}],"o":{"n":"xdeviceinfo"}}],[11,"eq","","",138,{"i":[{"n":"self"},{"n":"xdeviceinfo"}],"o":{"n":"bool"}}],[11,"ne","","",138,{"i":[{"n":"self"},{"n":"xdeviceinfo"}],"o":{"n":"bool"}}],[11,"fmt","","",139,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",139,{"i":[{"n":"self"}],"o":{"n":"xdevicestate"}}],[11,"eq","","",139,{"i":[{"n":"self"},{"n":"xdevicestate"}],"o":{"n":"bool"}}],[11,"ne","","",139,{"i":[{"n":"self"},{"n":"xdevicestate"}],"o":{"n":"bool"}}],[11,"fmt","","",140,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",140,{"i":[{"n":"self"}],"o":{"n":"xdevicetimecoord"}}],[11,"eq","","",140,{"i":[{"n":"self"},{"n":"xdevicetimecoord"}],"o":{"n":"bool"}}],[11,"ne","","",140,{"i":[{"n":"self"},{"n":"xdevicetimecoord"}],"o":{"n":"bool"}}],[11,"fmt","","",141,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",141,{"i":[{"n":"self"}],"o":{"n":"xextensionversion"}}],[11,"eq","","",141,{"i":[{"n":"self"},{"n":"xextensionversion"}],"o":{"n":"bool"}}],[11,"ne","","",141,{"i":[{"n":"self"},{"n":"xextensionversion"}],"o":{"n":"bool"}}],[11,"fmt","","",142,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",142,{"i":[{"n":"self"}],"o":{"n":"xfeedbackcontrol"}}],[11,"eq","","",142,{"i":[{"n":"self"},{"n":"xfeedbackcontrol"}],"o":{"n":"bool"}}],[11,"ne","","",142,{"i":[{"n":"self"},{"n":"xfeedbackcontrol"}],"o":{"n":"bool"}}],[11,"fmt","","",143,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",143,{"i":[{"n":"self"}],"o":{"n":"xfeedbackstate"}}],[11,"eq","","",143,{"i":[{"n":"self"},{"n":"xfeedbackstate"}],"o":{"n":"bool"}}],[11,"ne","","",143,{"i":[{"n":"self"},{"n":"xfeedbackstate"}],"o":{"n":"bool"}}],[11,"fmt","","",144,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",144,{"i":[{"n":"self"}],"o":{"n":"xinputclass"}}],[11,"eq","","",144,{"i":[{"n":"self"},{"n":"xinputclass"}],"o":{"n":"bool"}}],[11,"ne","","",144,{"i":[{"n":"self"},{"n":"xinputclass"}],"o":{"n":"bool"}}],[11,"fmt","","",145,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",145,{"i":[{"n":"self"}],"o":{"n":"xinputclassinfo"}}],[11,"eq","","",145,{"i":[{"n":"self"},{"n":"xinputclassinfo"}],"o":{"n":"bool"}}],[11,"ne","","",145,{"i":[{"n":"self"},{"n":"xinputclassinfo"}],"o":{"n":"bool"}}],[0,"xinput2","x11_dl","",null,null],[3,"XInput2","x11_dl::xinput2","",null,null],[12,"XIAllowEvents","","",146,null],[12,"XIAllowTouchEvents","","",146,null],[12,"XIBarrierReleasePointer","","",146,null],[12,"XIBarrierReleasePointers","","",146,null],[12,"XIChangeHierarchy","","",146,null],[12,"XIChangeProperty","","",146,null],[12,"XIDefineCursor","","",146,null],[12,"XIDeleteProperty","","",146,null],[12,"XIFreeDeviceInfo","","",146,null],[12,"XIGetClientPointer","","",146,null],[12,"XIGetFocus","","",146,null],[12,"XIGetProperty","","",146,null],[12,"XIGetSelectedEvents","","",146,null],[12,"XIGrabButton","","",146,null],[12,"XIGrabDevice","","",146,null],[12,"XIGrabEnter","","",146,null],[12,"XIGrabFocusIn","","",146,null],[12,"XIGrabKeycode","","",146,null],[12,"XIGrabTouchBegin","","",146,null],[12,"XIListProperties","","",146,null],[12,"XIQueryDevice","","",146,null],[12,"XIQueryPointer","","",146,null],[12,"XIQueryVersion","","",146,null],[12,"XISelectEvents","","",146,null],[12,"XISetClientPointer","","",146,null],[12,"XISetFocus","","",146,null],[12,"XIUndefineCursor","","",146,null],[12,"XIUngrabButton","","",146,null],[12,"XIUngrabDevice","","",146,null],[12,"XIUngrabEnter","","",146,null],[12,"XIUngrabFocusIn","","",146,null],[12,"XIUngrabKeycode","","",146,null],[12,"XIUngrabTouchBegin","","",146,null],[12,"XIWarpPointer","","",146,null],[3,"XIAddMasterInfo","","",null,null],[12,"_type","","",147,null],[12,"name","","",147,null],[12,"send_core","","",147,null],[12,"enable","","",147,null],[3,"XIRemoveMasterInfo","","",null,null],[12,"_type","","",148,null],[12,"deviceid","","",148,null],[12,"return_mode","","",148,null],[12,"return_pointer","","",148,null],[12,"return_keyboard","","",148,null],[3,"XIAttachSlaveInfo","","",null,null],[12,"_type","","",149,null],[12,"deviceid","","",149,null],[12,"new_master","","",149,null],[3,"XIDetachSlaveInfo","","",null,null],[12,"_type","","",150,null],[12,"deviceid","","",150,null],[3,"XIAnyHierarchyChangeInfo","","",null,null],[12,"_bindgen_data_","","",151,null],[3,"XIModifierState","","",null,null],[12,"base","","",152,null],[12,"latched","","",152,null],[12,"locked","","",152,null],[12,"effective","","",152,null],[3,"XIButtonState","","",null,null],[12,"mask_len","","",153,null],[12,"mask","","",153,null],[3,"XIValuatorState","","",null,null],[12,"mask_len","","",154,null],[12,"mask","","",154,null],[12,"values","","",154,null],[3,"XIEventMask","","",null,null],[12,"deviceid","","",155,null],[12,"mask_len","","",155,null],[12,"mask","","",155,null],[3,"XIAnyClassInfo","","",null,null],[12,"_type","","",156,null],[12,"sourceid","","",156,null],[3,"XIButtonClassInfo","","",null,null],[12,"_type","","",157,null],[12,"sourceid","","",157,null],[12,"num_buttons","","",157,null],[12,"labels","","",157,null],[12,"state","","",157,null],[3,"XIKeyClassInfo","","",null,null],[12,"_type","","",158,null],[12,"sourceid","","",158,null],[12,"num_keycodes","","",158,null],[12,"keycodes","","",158,null],[3,"XIValuatorClassInfo","","",null,null],[12,"_type","","",159,null],[12,"sourceid","","",159,null],[12,"number","","",159,null],[12,"label","","",159,null],[12,"min","","",159,null],[12,"max","","",159,null],[12,"value","","",159,null],[12,"resolution","","",159,null],[12,"mode","","",159,null],[3,"XIScrollClassInfo","","",null,null],[12,"_type","","",160,null],[12,"sourceid","","",160,null],[12,"number","","",160,null],[12,"scroll_type","","",160,null],[12,"increment","","",160,null],[12,"flags","","",160,null],[3,"XITouchClassInfo","","",null,null],[12,"_type","","",161,null],[12,"sourceid","","",161,null],[12,"mode","","",161,null],[12,"num_touches","","",161,null],[3,"XIDeviceInfo","","",null,null],[12,"deviceid","","",162,null],[12,"name","","",162,null],[12,"_use","","",162,null],[12,"attachment","","",162,null],[12,"enabled","","",162,null],[12,"num_classes","","",162,null],[12,"classes","","",162,null],[3,"XIGrabModifiers","","",null,null],[12,"modifiers","","",163,null],[12,"status","","",163,null],[3,"XIBarrierReleasePointerInfo","","",null,null],[12,"deviceid","","",164,null],[12,"barrier","","",164,null],[12,"eventid","","",164,null],[3,"XIEvent","","",null,null],[12,"_type","","",165,null],[12,"serial","","",165,null],[12,"send_event","","",165,null],[12,"display","","",165,null],[12,"extension","","",165,null],[12,"evtype","","",165,null],[12,"time","","",165,null],[3,"XIHierarchyInfo","","",null,null],[12,"deviceid","","",166,null],[12,"attachment","","",166,null],[12,"_use","","",166,null],[12,"enabled","","",166,null],[12,"flags","","",166,null],[3,"XIHierarchyEvent","","",null,null],[12,"_type","","",167,null],[12,"serial","","",167,null],[12,"send_event","","",167,null],[12,"display","","",167,null],[12,"extension","","",167,null],[12,"evtype","","",167,null],[12,"time","","",167,null],[12,"flags","","",167,null],[12,"num_info","","",167,null],[12,"info","","",167,null],[3,"XIDeviceChangedEvent","","",null,null],[12,"_type","","",168,null],[12,"serial","","",168,null],[12,"send_event","","",168,null],[12,"display","","",168,null],[12,"extension","","",168,null],[12,"evtype","","",168,null],[12,"time","","",168,null],[12,"deviceid","","",168,null],[12,"sourceid","","",168,null],[12,"reason","","",168,null],[12,"num_classes","","",168,null],[12,"classes","","",168,null],[3,"XIDeviceEvent","","",null,null],[12,"_type","","",169,null],[12,"serial","","",169,null],[12,"send_event","","",169,null],[12,"display","","",169,null],[12,"extension","","",169,null],[12,"evtype","","",169,null],[12,"time","","",169,null],[12,"deviceid","","",169,null],[12,"sourceid","","",169,null],[12,"detail","","",169,null],[12,"root","","",169,null],[12,"event","","",169,null],[12,"child","","",169,null],[12,"root_x","","",169,null],[12,"root_y","","",169,null],[12,"event_x","","",169,null],[12,"event_y","","",169,null],[12,"flags","","",169,null],[12,"buttons","","",169,null],[12,"valuators","","",169,null],[12,"mods","","",169,null],[12,"group","","",169,null],[3,"XIRawEvent","","",null,null],[12,"_type","","",170,null],[12,"serial","","",170,null],[12,"send_event","","",170,null],[12,"display","","",170,null],[12,"extension","","",170,null],[12,"evtype","","",170,null],[12,"time","","",170,null],[12,"deviceid","","",170,null],[12,"sourceid","","",170,null],[12,"detail","","",170,null],[12,"flags","","",170,null],[12,"valuators","","",170,null],[12,"raw_values","","",170,null],[3,"XIEnterEvent","","",null,null],[12,"_type","","",171,null],[12,"serial","","",171,null],[12,"send_event","","",171,null],[12,"display","","",171,null],[12,"extension","","",171,null],[12,"evtype","","",171,null],[12,"time","","",171,null],[12,"deviceid","","",171,null],[12,"sourceid","","",171,null],[12,"detail","","",171,null],[12,"root","","",171,null],[12,"event","","",171,null],[12,"child","","",171,null],[12,"root_x","","",171,null],[12,"root_y","","",171,null],[12,"event_x","","",171,null],[12,"event_y","","",171,null],[12,"mode","","",171,null],[12,"focus","","",171,null],[12,"same_screen","","",171,null],[12,"buttons","","",171,null],[12,"mods","","",171,null],[12,"group","","",171,null],[3,"XIPropertyEvent","","",null,null],[12,"_type","","",172,null],[12,"serial","","",172,null],[12,"send_event","","",172,null],[12,"display","","",172,null],[12,"extension","","",172,null],[12,"evtype","","",172,null],[12,"time","","",172,null],[12,"deviceid","","",172,null],[12,"property","","",172,null],[12,"what","","",172,null],[3,"XITouchOwnershipEvent","","",null,null],[12,"_type","","",173,null],[12,"serial","","",173,null],[12,"send_event","","",173,null],[12,"display","","",173,null],[12,"extension","","",173,null],[12,"evtype","","",173,null],[12,"time","","",173,null],[12,"deviceid","","",173,null],[12,"sourceid","","",173,null],[12,"touchid","","",173,null],[12,"root","","",173,null],[12,"event","","",173,null],[12,"child","","",173,null],[12,"flags","","",173,null],[3,"XIBarrierEvent","","",null,null],[12,"_type","","",174,null],[12,"serial","","",174,null],[12,"send_event","","",174,null],[12,"display","","",174,null],[12,"extension","","",174,null],[12,"evtype","","",174,null],[12,"time","","",174,null],[12,"deviceid","","",174,null],[12,"sourceid","","",174,null],[12,"event","","",174,null],[12,"root","","",174,null],[12,"root_x","","",174,null],[12,"root_y","","",174,null],[12,"dx","","",174,null],[12,"dy","","",174,null],[12,"dtime","","",174,null],[12,"flags","","",174,null],[12,"barrier","","",174,null],[12,"eventid","","",174,null],[5,"XISetMask","","",null,null],[5,"XIClearMask","","",null,null],[5,"XIMaskIsSet","","",null,null],[6,"XIGroupState","","",null,null],[6,"BarrierEventID","","",null,null],[6,"XILeaveEvent","","",null,null],[6,"XIFocusInEvent","","",null,null],[6,"XIFocusOutEvent","","",null,null],[17,"XInput_2_0","","",null,null],[17,"XI_2_Major","","",null,null],[17,"XI_2_Minor","","",null,null],[17,"XIPropertyDeleted","","",null,null],[17,"XIPropertyCreated","","",null,null],[17,"XIPropertyModified","","",null,null],[17,"XIPropModeReplace","","",null,null],[17,"XIPropModePrepend","","",null,null],[17,"XIPropModeAppend","","",null,null],[17,"XINotifyNormal","","",null,null],[17,"XINotifyGrab","","",null,null],[17,"XINotifyUngrab","","",null,null],[17,"XINotifyWhileGrabbed","","",null,null],[17,"XINotifyPassiveGrab","","",null,null],[17,"XINotifyPassiveUngrab","","",null,null],[17,"XINotifyAncestor","","",null,null],[17,"XINotifyVirtual","","",null,null],[17,"XINotifyInferior","","",null,null],[17,"XINotifyNonlinear","","",null,null],[17,"XINotifyNonlinearVirtual","","",null,null],[17,"XINotifyPointer","","",null,null],[17,"XINotifyPointerRoot","","",null,null],[17,"XINotifyDetailNone","","",null,null],[17,"XIGrabModeSync","","",null,null],[17,"XIGrabModeAsync","","",null,null],[17,"XIGrabModeTouch","","",null,null],[17,"XIGrabSuccess","","",null,null],[17,"XIAlreadyGrabbed","","",null,null],[17,"XIGrabInvalidTime","","",null,null],[17,"XIGrabNotViewable","","",null,null],[17,"XIGrabFrozen","","",null,null],[17,"XIGrabtypeButton","","",null,null],[17,"XIGrabtypeKeycode","","",null,null],[17,"XIGrabtypeEnter","","",null,null],[17,"XIGrabtypeFocusIn","","",null,null],[17,"XIGrabtypeTouchBegin","","",null,null],[17,"XIAnyButton","","",null,null],[17,"XIAnyKeycode","","",null,null],[17,"XIAsyncDevice","","",null,null],[17,"XISyncDevice","","",null,null],[17,"XIReplayDevice","","",null,null],[17,"XIAsyncPairedDevice","","",null,null],[17,"XIAsyncPair","","",null,null],[17,"XISyncPair","","",null,null],[17,"XIAcceptTouch","","",null,null],[17,"XIRejectTouch","","",null,null],[17,"XISlaveSwitch","","",null,null],[17,"XIDeviceChange","","",null,null],[17,"XIMasterAdded","","",null,null],[17,"XIMasterRemoved","","",null,null],[17,"XISlaveAdded","","",null,null],[17,"XISlaveRemoved","","",null,null],[17,"XISlaveAttached","","",null,null],[17,"XISlaveDetached","","",null,null],[17,"XIDeviceEnabled","","",null,null],[17,"XIDeviceDisabled","","",null,null],[17,"XIAddMaster","","",null,null],[17,"XIRemoveMaster","","",null,null],[17,"XIAttachSlave","","",null,null],[17,"XIDetachSlave","","",null,null],[17,"XIAttachToMaster","","",null,null],[17,"XIFloating","","",null,null],[17,"XIModeRelative","","",null,null],[17,"XIModeAbsolute","","",null,null],[17,"XIMasterPointer","","",null,null],[17,"XIMasterKeyboard","","",null,null],[17,"XISlavePointer","","",null,null],[17,"XISlaveKeyboard","","",null,null],[17,"XIFloatingSlave","","",null,null],[17,"XIKeyClass","","",null,null],[17,"XIButtonClass","","",null,null],[17,"XIValuatorClass","","",null,null],[17,"XIScrollClass","","",null,null],[17,"XITouchClass","","",null,null],[17,"XIScrollTypeVertical","","",null,null],[17,"XIScrollTypeHorizontal","","",null,null],[17,"XIScrollFlagNoEmulation","","",null,null],[17,"XIScrollFlagPreferred","","",null,null],[17,"XIKeyRepeat","","",null,null],[17,"XIPointerEmulated","","",null,null],[17,"XITouchPendingEnd","","",null,null],[17,"XITouchEmulatingPointer","","",null,null],[17,"XIBarrierPointerReleased","","",null,null],[17,"XIBarrierDeviceIsGrabbed","","",null,null],[17,"XIDirectTouch","","",null,null],[17,"XIDependentTouch","","",null,null],[17,"XIAllDevices","","",null,null],[17,"XIAllMasterDevices","","",null,null],[17,"XI_DeviceChanged","","",null,null],[17,"XI_KeyPress","","",null,null],[17,"XI_KeyRelease","","",null,null],[17,"XI_ButtonPress","","",null,null],[17,"XI_ButtonRelease","","",null,null],[17,"XI_Motion","","",null,null],[17,"XI_Enter","","",null,null],[17,"XI_Leave","","",null,null],[17,"XI_FocusIn","","",null,null],[17,"XI_FocusOut","","",null,null],[17,"XI_HierarchyChanged","","",null,null],[17,"XI_PropertyEvent","","",null,null],[17,"XI_RawKeyPress","","",null,null],[17,"XI_RawKeyRelease","","",null,null],[17,"XI_RawButtonPress","","",null,null],[17,"XI_RawButtonRelease","","",null,null],[17,"XI_RawMotion","","",null,null],[17,"XI_TouchBegin","","",null,null],[17,"XI_TouchUpdate","","",null,null],[17,"XI_TouchEnd","","",null,null],[17,"XI_TouchOwnership","","",null,null],[17,"XI_RawTouchBegin","","",null,null],[17,"XI_RawTouchUpdate","","",null,null],[17,"XI_RawTouchEnd","","",null,null],[17,"XI_BarrierHit","","",null,null],[17,"XI_BarrierLeave","","",null,null],[17,"XI_LASTEVENT","","",null,null],[17,"XI_DeviceChangedMask","","",null,null],[17,"XI_KeyPressMask","","",null,null],[17,"XI_KeyReleaseMask","","",null,null],[17,"XI_ButtonPressMask","","",null,null],[17,"XI_ButtonReleaseMask","","",null,null],[17,"XI_MotionMask","","",null,null],[17,"XI_EnterMask","","",null,null],[17,"XI_LeaveMask","","",null,null],[17,"XI_FocusInMask","","",null,null],[17,"XI_FocusOutMask","","",null,null],[17,"XI_HierarchyChangedMask","","",null,null],[17,"XI_PropertyEventMask","","",null,null],[17,"XI_RawKeyPressMask","","",null,null],[17,"XI_RawKeyReleaseMask","","",null,null],[17,"XI_RawButtonPressMask","","",null,null],[17,"XI_RawButtonReleaseMask","","",null,null],[17,"XI_RawMotionMask","","",null,null],[17,"XI_TouchBeginMask","","",null,null],[17,"XI_TouchEndMask","","",null,null],[17,"XI_TouchOwnershipChangedMask","","",null,null],[17,"XI_TouchUpdateMask","","",null,null],[17,"XI_RawTouchBeginMask","","",null,null],[17,"XI_RawTouchEndMask","","",null,null],[17,"XI_RawTouchUpdateMask","","",null,null],[17,"XI_BarrierHitMask","","",null,null],[17,"XI_BarrierLeaveMask","","",null,null],[11,"open","","",146,{"o":{"g":["xinput2","openerror"],"n":"result"}}],[11,"fmt","","",147,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",147,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",147,{"o":{"n":"self"}}],[11,"fmt","","",148,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",148,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",148,{"o":{"n":"self"}}],[11,"fmt","","",149,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",149,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",149,{"o":{"n":"self"}}],[11,"fmt","","",150,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",150,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",150,{"o":{"n":"self"}}],[11,"fmt","","",151,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"_type","","",151,null],[11,"add","","",151,null],[11,"remove","","",151,null],[11,"attach","","",151,null],[11,"detach","","",151,null],[11,"clone","","",151,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",151,{"o":{"n":"self"}}],[11,"fmt","","",152,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",152,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",152,{"o":{"n":"self"}}],[11,"fmt","","",153,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",153,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",153,{"o":{"n":"self"}}],[11,"fmt","","",154,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",154,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",154,{"o":{"n":"self"}}],[11,"fmt","","",155,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",155,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",155,{"o":{"n":"self"}}],[11,"fmt","","",156,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",156,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",156,{"o":{"n":"self"}}],[11,"fmt","","",157,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",157,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",157,{"o":{"n":"self"}}],[11,"fmt","","",158,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",158,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",158,{"o":{"n":"self"}}],[11,"fmt","","",159,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",159,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",159,{"o":{"n":"self"}}],[11,"fmt","","",160,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",160,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",160,{"o":{"n":"self"}}],[11,"fmt","","",161,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",161,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",161,{"o":{"n":"self"}}],[11,"fmt","","",162,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",162,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",162,{"o":{"n":"self"}}],[11,"fmt","","",163,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",163,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",163,{"o":{"n":"self"}}],[11,"fmt","","",164,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",164,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",164,{"o":{"n":"self"}}],[11,"fmt","","",165,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",165,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",165,{"o":{"n":"self"}}],[11,"fmt","","",166,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",166,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",166,{"o":{"n":"self"}}],[11,"fmt","","",167,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",167,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",167,{"o":{"n":"self"}}],[11,"fmt","","",168,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",168,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",168,{"o":{"n":"self"}}],[11,"fmt","","",169,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",169,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",169,{"o":{"n":"self"}}],[11,"fmt","","",170,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",170,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",170,{"o":{"n":"self"}}],[11,"fmt","","",171,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",171,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",171,{"o":{"n":"self"}}],[11,"fmt","","",172,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",172,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",172,{"o":{"n":"self"}}],[11,"fmt","","",173,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",173,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",173,{"o":{"n":"self"}}],[11,"fmt","","",174,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",174,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",174,{"o":{"n":"self"}}],[0,"xmd","x11_dl","",null,null],[6,"INT8","x11_dl::xmd","",null,null],[6,"INT16","","",null,null],[6,"INT32","","",null,null],[6,"INT64","","",null,null],[6,"CARD8","","",null,null],[6,"CARD16","","",null,null],[6,"CARD32","","",null,null],[6,"CARD64","","",null,null],[6,"BYTE","","",null,null],[6,"BOOL","","",null,null],[0,"xmu","x11_dl","",null,null],[3,"Xmu","x11_dl::xmu","",null,null],[12,"XmuAddCloseDisplayHook","","",175,null],[12,"XmuAddInitializer","","",175,null],[12,"XmuAllStandardColormaps","","",175,null],[12,"XmuAppendSegment","","",175,null],[12,"XmuAreaAnd","","",175,null],[12,"XmuAreaCopy","","",175,null],[12,"XmuAreaDup","","",175,null],[12,"XmuAreaNot","","",175,null],[12,"XmuAreaOrXor","","",175,null],[12,"XmuCallInitializers","","",175,null],[12,"XmuClientWindow","","",175,null],[12,"XmuCompareISOLatin1","","",175,null],[12,"XmuConvertStandardSelection","","",175,null],[12,"XmuCopyISOLatin1Lowered","","",175,null],[12,"XmuCopyISOLatin1Uppered","","",175,null],[12,"XmuCreateColormap","","",175,null],[12,"XmuCreatePixmapFromBitmap","","",175,null],[12,"XmuCreateStippledPixmap","","",175,null],[12,"XmuCursorNameToIndex","","",175,null],[12,"XmuCvtBackingStoreToString","","",175,null],[12,"XmuCvtFunctionToCallback","","",175,null],[12,"XmuCvtGravityToString","","",175,null],[12,"XmuCvtJustifyToString","","",175,null],[12,"XmuCvtLongToString","","",175,null],[12,"XmuCvtOrientationToString","","",175,null],[12,"XmuCvtShapeStyleToString","","",175,null],[12,"XmuCvtStringToBackingStore","","",175,null],[12,"XmuCvtStringToBitmap","","",175,null],[12,"XmuCvtStringToColorCursor","","",175,null],[12,"XmuCvtStringToCursor","","",175,null],[12,"XmuCvtStringToGravity","","",175,null],[12,"XmuCvtStringToJustify","","",175,null],[12,"XmuCvtStringToLong","","",175,null],[12,"XmuCvtStringToOrientation","","",175,null],[12,"XmuCvtStringToShapeStyle","","",175,null],[12,"XmuCvtStringToWidget","","",175,null],[12,"XmuCvtWidgetToString","","",175,null],[12,"XmuDeleteStandardColormap","","",175,null],[12,"XmuDestroyScanlineList","","",175,null],[12,"XmuDestroySegmentList","","",175,null],[12,"XmuDistinguishableColors","","",175,null],[12,"XmuDistinguishablePixels","","",175,null],[12,"XmuDQAddDisplay","","",175,null],[12,"XmuDQCreate","","",175,null],[12,"XmuDQDestroy","","",175,null],[12,"XmuDQLookupDisplay","","",175,null],[12,"XmuDQRemoveDisplay","","",175,null],[12,"XmuDrawLogo","","",175,null],[12,"XmuDrawRoundedRectangle","","",175,null],[12,"XmuFillRoundedRectangle","","",175,null],[12,"XmuGetAtomName","","",175,null],[12,"XmuGetColormapAllocation","","",175,null],[12,"XmuGetHostname","","",175,null],[12,"XmuInternAtom","","",175,null],[12,"XmuInternStrings","","",175,null],[12,"XmuLocateBitmapFile","","",175,null],[12,"XmuLocatePixmapFile","","",175,null],[12,"XmuLookupAPL","","",175,null],[12,"XmuLookupArabic","","",175,null],[12,"XmuLookupCloseDisplayHook","","",175,null],[12,"XmuLookupCyrillic","","",175,null],[12,"XmuLookupGreek","","",175,null],[12,"XmuLookupHebrew","","",175,null],[12,"XmuLookupJISX0201","","",175,null],[12,"XmuLookupKana","","",175,null],[12,"XmuLookupLatin1","","",175,null],[12,"XmuLookupLatin2","","",175,null],[12,"XmuLookupLatin3","","",175,null],[12,"XmuLookupLatin4","","",175,null],[12,"XmuLookupStandardColormap","","",175,null],[12,"XmuLookupString","","",175,null],[12,"XmuMakeAtom","","",175,null],[12,"XmuNameOfAtom","","",175,null],[12,"XmuNCopyISOLatin1Lowered","","",175,null],[12,"XmuNCopyISOLatin1Uppered","","",175,null],[12,"XmuNewArea","","",175,null],[12,"XmuNewCvtStringToWidget","","",175,null],[12,"XmuNewScanline","","",175,null],[12,"XmuNewSegment","","",175,null],[12,"XmuOptimizeArea","","",175,null],[12,"XmuOptimizeScanline","","",175,null],[12,"XmuPrintDefaultErrorMessage","","",175,null],[12,"XmuReadBitmapData","","",175,null],[12,"XmuReadBitmapDataFromFile","","",175,null],[12,"XmuRegisterExternalAgent","","",175,null],[12,"XmuReleaseStippledPixmap","","",175,null],[12,"XmuRemoveCloseDisplayHook","","",175,null],[12,"XmuReshapeWidget","","",175,null],[12,"XmuScanlineAnd","","",175,null],[12,"XmuScanlineAndSegment","","",175,null],[12,"XmuScanlineCopy","","",175,null],[12,"XmuScanlineEqu","","",175,null],[12,"XmuScanlineNot","","",175,null],[12,"XmuScanlineOr","","",175,null],[12,"XmuScanlineOrSegment","","",175,null],[12,"XmuScanlineXor","","",175,null],[12,"XmuScanlineXorSegment","","",175,null],[12,"XmuScreenOfWindow","","",175,null],[12,"XmuSimpleErrorHandler","","",175,null],[12,"XmuStandardColormap","","",175,null],[12,"XmuUpdateMapHints","","",175,null],[12,"XmuValidArea","","",175,null],[12,"XmuValidScanline","","",175,null],[12,"XmuVisualStandardColormaps","","",175,null],[12,"XmuWnCountOwnedResources","","",175,null],[12,"XmuWnFetchResources","","",175,null],[12,"XmuWnInitializeNodes","","",175,null],[12,"XmuWnNameToNode","","",175,null],[12,"XmuSnprintf","","",175,null],[12,"_XA_ATOM_PAIR","","",175,null],[12,"_XA_CHARACTER_POSITION","","",175,null],[12,"_XA_CLASS","","",175,null],[12,"_XA_CLIENT_WINDOW","","",175,null],[12,"_XA_CLIPBOARD","","",175,null],[12,"_XA_COMPOUND_TEXT","","",175,null],[12,"_XA_DECNET_ADDRESS","","",175,null],[12,"_XA_DELETE","","",175,null],[12,"_XA_FILENAME","","",175,null],[12,"_XA_HOSTNAME","","",175,null],[12,"_XA_IP_ADDRESS","","",175,null],[12,"_XA_LENGTH","","",175,null],[12,"_XA_LIST_LENGTH","","",175,null],[12,"_XA_NAME","","",175,null],[12,"_XA_NET_ADDRESS","","",175,null],[12,"_XA_NULL","","",175,null],[12,"_XA_OWNER_OS","","",175,null],[12,"_XA_SPAN","","",175,null],[12,"_XA_TARGETS","","",175,null],[12,"_XA_TEXT","","",175,null],[12,"_XA_TIMESTAMP","","",175,null],[12,"_XA_USER","","",175,null],[12,"_XA_UTF8_STRING","","",175,null],[3,"_AtomRec","","",null,null],[3,"_XmuArea","","",null,null],[3,"_XmuDisplayQueue","","",null,null],[3,"_XmuDisplayQueueEntry","","",null,null],[3,"_XmuScanline","","",null,null],[3,"_XmuSegment","","",null,null],[3,"_XmuWidgetNode","","",null,null],[6,"AtomPtr","","",null,null],[6,"XmuArea","","",null,null],[6,"XmuDisplayQueue","","",null,null],[6,"XmuDisplayQueueEntry","","",null,null],[6,"XmuScanline","","",null,null],[6,"XmuSegment","","",null,null],[6,"XmuWidgetNode","","",null,null],[11,"open","","",175,{"o":{"g":["xmu","openerror"],"n":"result"}}],[0,"xrecord","x11_dl","",null,null],[3,"Xf86vmode","x11_dl::xrecord","",null,null],[12,"XRecordAllocRange","","",176,null],[12,"XRecordCreateContext","","",176,null],[12,"XRecordDisableContext","","",176,null],[12,"XRecordEnableContext","","",176,null],[12,"XRecordEnableContextAsync","","",176,null],[12,"XRecordFreeContext","","",176,null],[12,"XRecordFreeData","","",176,null],[12,"XRecordFreeState","","",176,null],[12,"XRecordGetContext","","",176,null],[12,"XRecordIdBaseMask","","",176,null],[12,"XRecordProcessReplies","","",176,null],[12,"XRecordQueryVersion","","",176,null],[12,"XRecordRegisterClients","","",176,null],[12,"XRecordUnregisterClients","","",176,null],[3,"XRecordClientInfo","","",null,null],[12,"client","","",177,null],[12,"nranges","","",177,null],[12,"ranges","","",177,null],[3,"XRecordExtRange","","",null,null],[12,"ext_major","","",178,null],[12,"ext_minor","","",178,null],[3,"XRecordInterceptData","","",null,null],[12,"id_base","","",179,null],[12,"server_time","","",179,null],[12,"client_seq","","",179,null],[12,"category","","",179,null],[12,"client_swapped","","",179,null],[12,"data","","",179,null],[12,"data_len","","",179,null],[3,"XRecordRange","","",null,null],[12,"core_requests","","",180,null],[12,"core_replies","","",180,null],[12,"ext_requests","","",180,null],[12,"ext_replies","","",180,null],[12,"delivered_events","","",180,null],[12,"device_events","","",180,null],[12,"errors","","",180,null],[12,"client_started","","",180,null],[12,"client_died","","",180,null],[3,"XRecordRange8","","",null,null],[12,"first","","",181,null],[12,"last","","",181,null],[3,"XRecordRange16","","",null,null],[12,"first","","",182,null],[12,"last","","",182,null],[3,"XRecordState","","",null,null],[12,"enabled","","",183,null],[12,"datum_flags","","",183,null],[12,"nclients","","",183,null],[12,"client_info","","",183,null],[6,"XRecordClientSpec","","",null,null],[6,"XRecordContext","","",null,null],[17,"XRecordFromServerTime","","",null,null],[17,"XRecordFromClientTime","","",null,null],[17,"XRecordFromClientSequence","","",null,null],[17,"XRecordCurrentClients","","",null,null],[17,"XRecordFutureClients","","",null,null],[17,"XRecordAllClients","","",null,null],[17,"XRecordFromServer","","",null,null],[17,"XRecordFromClient","","",null,null],[17,"XRecordClientStarted","","",null,null],[17,"XRecordClientDied","","",null,null],[17,"XRecordStartOfData","","",null,null],[17,"XRecordEndOfData","","",null,null],[11,"open","","",176,{"o":{"g":["xf86vmode","openerror"],"n":"result"}}],[11,"fmt","","",177,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",177,{"i":[{"n":"self"}],"o":{"n":"xrecordclientinfo"}}],[11,"eq","","",177,{"i":[{"n":"self"},{"n":"xrecordclientinfo"}],"o":{"n":"bool"}}],[11,"ne","","",177,{"i":[{"n":"self"},{"n":"xrecordclientinfo"}],"o":{"n":"bool"}}],[11,"fmt","","",178,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",178,{"i":[{"n":"self"}],"o":{"n":"xrecordextrange"}}],[11,"eq","","",178,{"i":[{"n":"self"},{"n":"xrecordextrange"}],"o":{"n":"bool"}}],[11,"ne","","",178,{"i":[{"n":"self"},{"n":"xrecordextrange"}],"o":{"n":"bool"}}],[11,"fmt","","",179,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",179,{"i":[{"n":"self"}],"o":{"n":"xrecordinterceptdata"}}],[11,"eq","","",179,{"i":[{"n":"self"},{"n":"xrecordinterceptdata"}],"o":{"n":"bool"}}],[11,"ne","","",179,{"i":[{"n":"self"},{"n":"xrecordinterceptdata"}],"o":{"n":"bool"}}],[11,"fmt","","",180,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",180,{"i":[{"n":"self"}],"o":{"n":"xrecordrange"}}],[11,"eq","","",180,{"i":[{"n":"self"},{"n":"xrecordrange"}],"o":{"n":"bool"}}],[11,"ne","","",180,{"i":[{"n":"self"},{"n":"xrecordrange"}],"o":{"n":"bool"}}],[11,"fmt","","",181,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",181,{"i":[{"n":"self"}],"o":{"n":"xrecordrange8"}}],[11,"eq","","",181,{"i":[{"n":"self"},{"n":"xrecordrange8"}],"o":{"n":"bool"}}],[11,"ne","","",181,{"i":[{"n":"self"},{"n":"xrecordrange8"}],"o":{"n":"bool"}}],[11,"fmt","","",182,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",182,{"i":[{"n":"self"}],"o":{"n":"xrecordrange16"}}],[11,"eq","","",182,{"i":[{"n":"self"},{"n":"xrecordrange16"}],"o":{"n":"bool"}}],[11,"ne","","",182,{"i":[{"n":"self"},{"n":"xrecordrange16"}],"o":{"n":"bool"}}],[11,"fmt","","",183,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",183,{"i":[{"n":"self"}],"o":{"n":"xrecordstate"}}],[11,"eq","","",183,{"i":[{"n":"self"},{"n":"xrecordstate"}],"o":{"n":"bool"}}],[11,"ne","","",183,{"i":[{"n":"self"},{"n":"xrecordstate"}],"o":{"n":"bool"}}],[0,"xrender","x11_dl","",null,null],[3,"Xrender","x11_dl::xrender","",null,null],[12,"XRenderAddGlyphs","","",184,null],[12,"XRenderAddTraps","","",184,null],[12,"XRenderChangePicture","","",184,null],[12,"XRenderComposite","","",184,null],[12,"XRenderCompositeDoublePoly","","",184,null],[12,"XRenderCompositeString16","","",184,null],[12,"XRenderCompositeString32","","",184,null],[12,"XRenderCompositeString8","","",184,null],[12,"XRenderCompositeText16","","",184,null],[12,"XRenderCompositeText32","","",184,null],[12,"XRenderCompositeText8","","",184,null],[12,"XRenderCompositeTrapezoids","","",184,null],[12,"XRenderCompositeTriangles","","",184,null],[12,"XRenderCompositeTriFan","","",184,null],[12,"XRenderCompositeTriStrip","","",184,null],[12,"XRenderCreateAnimCursor","","",184,null],[12,"XRenderCreateConicalGradient","","",184,null],[12,"XRenderCreateCursor","","",184,null],[12,"XRenderCreateGlyphSet","","",184,null],[12,"XRenderCreateLinearGradient","","",184,null],[12,"XRenderCreatePicture","","",184,null],[12,"XRenderCreateRadialGradient","","",184,null],[12,"XRenderCreateSolidFill","","",184,null],[12,"XRenderFillRectangle","","",184,null],[12,"XRenderFillRectangles","","",184,null],[12,"XRenderFindFormat","","",184,null],[12,"XRenderFindStandardFormat","","",184,null],[12,"XRenderFindVisualFormat","","",184,null],[12,"XRenderFreeGlyphs","","",184,null],[12,"XRenderFreeGlyphSet","","",184,null],[12,"XRenderFreePicture","","",184,null],[12,"XRenderParseColor","","",184,null],[12,"XRenderQueryExtension","","",184,null],[12,"XRenderQueryFilters","","",184,null],[12,"XRenderQueryFormats","","",184,null],[12,"XRenderQueryPictIndexValues","","",184,null],[12,"XRenderQuerySubpixelOrder","","",184,null],[12,"XRenderQueryVersion","","",184,null],[12,"XRenderReferenceGlyphSet","","",184,null],[12,"XRenderSetPictureClipRectangles","","",184,null],[12,"XRenderSetPictureClipRegion","","",184,null],[12,"XRenderSetPictureFilter","","",184,null],[12,"XRenderSetPictureTransform","","",184,null],[12,"XRenderSetSubpixelOrder","","",184,null],[3,"_XAnimCursor","","",null,null],[12,"cursor","","",185,null],[12,"delay","","",185,null],[3,"_XCircle","","",null,null],[12,"x","","",186,null],[12,"y","","",186,null],[12,"radius","","",186,null],[3,"_XConicalGradient","","",null,null],[12,"center","","",187,null],[12,"angle","","",187,null],[3,"_XFilters","","",null,null],[12,"nfilter","","",188,null],[12,"filter","","",188,null],[12,"nalias","","",188,null],[12,"alias","","",188,null],[3,"_XGlyphElt8","","",null,null],[12,"glyphset","","",189,null],[12,"chars","","",189,null],[12,"nchars","","",189,null],[12,"xOff","","",189,null],[12,"yOff","","",189,null],[3,"_XGlyphElt16","","",null,null],[12,"glyphset","","",190,null],[12,"chars","","",190,null],[12,"nchars","","",190,null],[12,"xOff","","",190,null],[12,"yOff","","",190,null],[3,"_XGlyphElt32","","",null,null],[12,"glyphset","","",191,null],[12,"chars","","",191,null],[12,"nchars","","",191,null],[12,"xOff","","",191,null],[12,"yOff","","",191,null],[3,"_XGlyphInfo","","",null,null],[12,"width","","",192,null],[12,"height","","",192,null],[12,"x","","",192,null],[12,"y","","",192,null],[12,"xOff","","",192,null],[12,"yOff","","",192,null],[3,"_XIndexValue","","",null,null],[12,"pixel","","",193,null],[12,"red","","",193,null],[12,"green","","",193,null],[12,"blue","","",193,null],[12,"alpha","","",193,null],[3,"_XLinearGradient","","",null,null],[12,"p1","","",194,null],[12,"p2","","",194,null],[3,"_XLineFixed","","",null,null],[12,"p1","","",195,null],[12,"p2","","",195,null],[3,"_XPointDouble","","",null,null],[12,"x","","",196,null],[12,"y","","",196,null],[3,"_XPointFixed","","",null,null],[12,"x","","",197,null],[12,"y","","",197,null],[3,"_XRadialGradient","","",null,null],[12,"inner","","",198,null],[12,"outer","","",198,null],[3,"XRenderColor","","",null,null],[12,"red","","",199,null],[12,"green","","",199,null],[12,"blue","","",199,null],[12,"alpha","","",199,null],[3,"XRenderDirectFormat","","",null,null],[12,"red","","",200,null],[12,"redMask","","",200,null],[12,"green","","",200,null],[12,"greenMask","","",200,null],[12,"blue","","",200,null],[12,"blueMask","","",200,null],[12,"alpha","","",200,null],[12,"alphaMask","","",200,null],[3,"XRenderPictFormat","","",null,null],[12,"id","","",201,null],[12,"type_","","",201,null],[12,"depth","","",201,null],[12,"direct","","",201,null],[12,"colormap","","",201,null],[3,"_XRenderPictureAttributes","","",null,null],[12,"repeat","","",202,null],[12,"alpha_map","","",202,null],[12,"alpha_x_origin","","",202,null],[12,"alpha_y_origin","","",202,null],[12,"clip_x_origin","","",202,null],[12,"clip_y_origin","","",202,null],[12,"clip_mask","","",202,null],[12,"graphics_exposures","","",202,null],[12,"subwindow_mode","","",202,null],[12,"poly_edge","","",202,null],[12,"poly_mode","","",202,null],[12,"dither","","",202,null],[12,"component_alpha","","",202,null],[3,"_XSpanFix","","",null,null],[12,"left","","",203,null],[12,"right","","",203,null],[12,"y","","",203,null],[3,"_XTrap","","",null,null],[12,"top","","",204,null],[12,"bottom","","",204,null],[3,"_XTrapezoid","","",null,null],[12,"top","","",205,null],[12,"bottom","","",205,null],[12,"left","","",205,null],[12,"right","","",205,null],[3,"_XTriangle","","",null,null],[12,"p1","","",206,null],[12,"p2","","",206,null],[12,"p3","","",206,null],[3,"_XTransform","","",null,null],[12,"matrix","","",207,null],[6,"Glyph","","",null,null],[6,"GlyphSet","","",null,null],[6,"PictFormat","","",null,null],[6,"Picture","","",null,null],[6,"XDouble","","",null,null],[6,"XFixed","","",null,null],[6,"XAnimCursor","","",null,null],[6,"XCircle","","",null,null],[6,"XConicalGradient","","",null,null],[6,"XFilters","","",null,null],[6,"XGlyphElt8","","",null,null],[6,"XGlyphElt16","","",null,null],[6,"XGlyphElt32","","",null,null],[6,"XGlyphInfo","","",null,null],[6,"XIndexValue","","",null,null],[6,"XLinearGradient","","",null,null],[6,"XLineFixed","","",null,null],[6,"XPointDouble","","",null,null],[6,"XPointFixed","","",null,null],[6,"XRadialGradient","","",null,null],[6,"XRenderPictureAttributes","","",null,null],[6,"XSpanFix","","",null,null],[6,"XTrap","","",null,null],[6,"XTrapezoid","","",null,null],[6,"XTriangle","","",null,null],[6,"XTransform","","",null,null],[17,"PictFormatID","","",null,null],[17,"PictFormatType","","",null,null],[17,"PictFormatDepth","","",null,null],[17,"PictFormatRed","","",null,null],[17,"PictFormatRedMask","","",null,null],[17,"PictFormatGreen","","",null,null],[17,"PictFormatGreenMask","","",null,null],[17,"PictFormatBlue","","",null,null],[17,"PictFormatBlueMask","","",null,null],[17,"PictFormatAlpha","","",null,null],[17,"PictFormatAlphaMask","","",null,null],[17,"PictFormatColormap","","",null,null],[17,"BadPictFormat","","",null,null],[17,"BadPicture","","",null,null],[17,"BadPictOp","","",null,null],[17,"BadGlyphSet","","",null,null],[17,"BadGlyph","","",null,null],[17,"RenderNumberErrors","","",null,null],[17,"PictTypeIndexed","","",null,null],[17,"PictTypeDirect","","",null,null],[17,"PictOpMinimum","","",null,null],[17,"PictOpClear","","",null,null],[17,"PictOpSrc","","",null,null],[17,"PictOpDst","","",null,null],[17,"PictOpOver","","",null,null],[17,"PictOpOverReverse","","",null,null],[17,"PictOpIn","","",null,null],[17,"PictOpInReverse","","",null,null],[17,"PictOpOut","","",null,null],[17,"PictOpOutReverse","","",null,null],[17,"PictOpAtop","","",null,null],[17,"PictOpAtopReverse","","",null,null],[17,"PictOpXor","","",null,null],[17,"PictOpAdd","","",null,null],[17,"PictOpSaturate","","",null,null],[17,"PictOpMaximum","","",null,null],[17,"PictOpDisjointMinimum","","",null,null],[17,"PictOpDisjointClear","","",null,null],[17,"PictOpDisjointSrc","","",null,null],[17,"PictOpDisjointDst","","",null,null],[17,"PictOpDisjointOver","","",null,null],[17,"PictOpDisjointOverReverse","","",null,null],[17,"PictOpDisjointIn","","",null,null],[17,"PictOpDisjointInReverse","","",null,null],[17,"PictOpDisjointOut","","",null,null],[17,"PictOpDisjointOutReverse","","",null,null],[17,"PictOpDisjointAtop","","",null,null],[17,"PictOpDisjointAtopReverse","","",null,null],[17,"PictOpDisjointXor","","",null,null],[17,"PictOpDisjointMaximum","","",null,null],[17,"PictOpConjointMinimum","","",null,null],[17,"PictOpConjointClear","","",null,null],[17,"PictOpConjointSrc","","",null,null],[17,"PictOpConjointDst","","",null,null],[17,"PictOpConjointOver","","",null,null],[17,"PictOpConjointOverReverse","","",null,null],[17,"PictOpConjointIn","","",null,null],[17,"PictOpConjointInReverse","","",null,null],[17,"PictOpConjointOut","","",null,null],[17,"PictOpConjointOutReverse","","",null,null],[17,"PictOpConjointAtop","","",null,null],[17,"PictOpConjointAtopReverse","","",null,null],[17,"PictOpConjointXor","","",null,null],[17,"PictOpConjointMaximum","","",null,null],[17,"PictOpBlendMinimum","","",null,null],[17,"PictOpMultiply","","",null,null],[17,"PictOpScreen","","",null,null],[17,"PictOpOverlay","","",null,null],[17,"PictOpDarken","","",null,null],[17,"PictOpLighten","","",null,null],[17,"PictOpColorDodge","","",null,null],[17,"PictOpColorBurn","","",null,null],[17,"PictOpHardLight","","",null,null],[17,"PictOpSoftLight","","",null,null],[17,"PictOpDifference","","",null,null],[17,"PictOpExclusion","","",null,null],[17,"PictOpHSLHue","","",null,null],[17,"PictOpHSLSaturation","","",null,null],[17,"PictOpHSLColor","","",null,null],[17,"PictOpHSLLuminosity","","",null,null],[17,"PictOpBlendMaximum","","",null,null],[17,"PolyEdgeSharp","","",null,null],[17,"PolyEdgeSmooth","","",null,null],[17,"PolyModePrecise","","",null,null],[17,"PolyModeImprecise","","",null,null],[17,"CPRepeat","","",null,null],[17,"CPAlphaMap","","",null,null],[17,"CPAlphaXOrigin","","",null,null],[17,"CPAlphaYOrigin","","",null,null],[17,"CPClipXOrigin","","",null,null],[17,"CPClipYOrigin","","",null,null],[17,"CPClipMask","","",null,null],[17,"CPGraphicsExposure","","",null,null],[17,"CPSubwindowMode","","",null,null],[17,"CPPolyEdge","","",null,null],[17,"CPPolyMode","","",null,null],[17,"CPDither","","",null,null],[17,"CPComponentAlpha","","",null,null],[17,"CPLastBit","","",null,null],[17,"FilterNearest","","",null,null],[17,"FilterBilinear","","",null,null],[17,"FilterConvolution","","",null,null],[17,"FilterFast","","",null,null],[17,"FilterGood","","",null,null],[17,"FilterBest","","",null,null],[17,"SubPixelUnknown","","",null,null],[17,"SubPixelHorizontalRGB","","",null,null],[17,"SubPixelHorizontalBGR","","",null,null],[17,"SubPixelVerticalRGB","","",null,null],[17,"SubPixelVerticalBGR","","",null,null],[17,"SubPixelNone","","",null,null],[17,"RepeatNone","","",null,null],[17,"RepeatNormal","","",null,null],[17,"RepeatPad","","",null,null],[17,"RepeatReflect","","",null,null],[11,"open","","",184,{"o":{"g":["xrender","openerror"],"n":"result"}}],[11,"fmt","","",185,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",185,{"i":[{"n":"self"}],"o":{"n":"_xanimcursor"}}],[11,"eq","","",185,{"i":[{"n":"self"},{"n":"_xanimcursor"}],"o":{"n":"bool"}}],[11,"ne","","",185,{"i":[{"n":"self"},{"n":"_xanimcursor"}],"o":{"n":"bool"}}],[11,"fmt","","",186,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",186,{"i":[{"n":"self"}],"o":{"n":"_xcircle"}}],[11,"eq","","",186,{"i":[{"n":"self"},{"n":"_xcircle"}],"o":{"n":"bool"}}],[11,"ne","","",186,{"i":[{"n":"self"},{"n":"_xcircle"}],"o":{"n":"bool"}}],[11,"fmt","","",187,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",187,{"i":[{"n":"self"}],"o":{"n":"_xconicalgradient"}}],[11,"eq","","",187,{"i":[{"n":"self"},{"n":"_xconicalgradient"}],"o":{"n":"bool"}}],[11,"ne","","",187,{"i":[{"n":"self"},{"n":"_xconicalgradient"}],"o":{"n":"bool"}}],[11,"fmt","","",188,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",188,{"i":[{"n":"self"}],"o":{"n":"_xfilters"}}],[11,"eq","","",188,{"i":[{"n":"self"},{"n":"_xfilters"}],"o":{"n":"bool"}}],[11,"ne","","",188,{"i":[{"n":"self"},{"n":"_xfilters"}],"o":{"n":"bool"}}],[11,"fmt","","",189,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",189,{"i":[{"n":"self"}],"o":{"n":"_xglyphelt8"}}],[11,"eq","","",189,{"i":[{"n":"self"},{"n":"_xglyphelt8"}],"o":{"n":"bool"}}],[11,"ne","","",189,{"i":[{"n":"self"},{"n":"_xglyphelt8"}],"o":{"n":"bool"}}],[11,"fmt","","",190,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",190,{"i":[{"n":"self"}],"o":{"n":"_xglyphelt16"}}],[11,"eq","","",190,{"i":[{"n":"self"},{"n":"_xglyphelt16"}],"o":{"n":"bool"}}],[11,"ne","","",190,{"i":[{"n":"self"},{"n":"_xglyphelt16"}],"o":{"n":"bool"}}],[11,"fmt","","",191,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",191,{"i":[{"n":"self"}],"o":{"n":"_xglyphelt32"}}],[11,"eq","","",191,{"i":[{"n":"self"},{"n":"_xglyphelt32"}],"o":{"n":"bool"}}],[11,"ne","","",191,{"i":[{"n":"self"},{"n":"_xglyphelt32"}],"o":{"n":"bool"}}],[11,"fmt","","",192,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",192,{"i":[{"n":"self"}],"o":{"n":"_xglyphinfo"}}],[11,"eq","","",192,{"i":[{"n":"self"},{"n":"_xglyphinfo"}],"o":{"n":"bool"}}],[11,"ne","","",192,{"i":[{"n":"self"},{"n":"_xglyphinfo"}],"o":{"n":"bool"}}],[11,"fmt","","",193,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",193,{"i":[{"n":"self"}],"o":{"n":"_xindexvalue"}}],[11,"eq","","",193,{"i":[{"n":"self"},{"n":"_xindexvalue"}],"o":{"n":"bool"}}],[11,"ne","","",193,{"i":[{"n":"self"},{"n":"_xindexvalue"}],"o":{"n":"bool"}}],[11,"fmt","","",194,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",194,{"i":[{"n":"self"}],"o":{"n":"_xlineargradient"}}],[11,"eq","","",194,{"i":[{"n":"self"},{"n":"_xlineargradient"}],"o":{"n":"bool"}}],[11,"ne","","",194,{"i":[{"n":"self"},{"n":"_xlineargradient"}],"o":{"n":"bool"}}],[11,"fmt","","",195,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",195,{"i":[{"n":"self"}],"o":{"n":"_xlinefixed"}}],[11,"eq","","",195,{"i":[{"n":"self"},{"n":"_xlinefixed"}],"o":{"n":"bool"}}],[11,"ne","","",195,{"i":[{"n":"self"},{"n":"_xlinefixed"}],"o":{"n":"bool"}}],[11,"fmt","","",196,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",196,{"i":[{"n":"self"}],"o":{"n":"_xpointdouble"}}],[11,"eq","","",196,{"i":[{"n":"self"},{"n":"_xpointdouble"}],"o":{"n":"bool"}}],[11,"ne","","",196,{"i":[{"n":"self"},{"n":"_xpointdouble"}],"o":{"n":"bool"}}],[11,"fmt","","",197,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",197,{"i":[{"n":"self"}],"o":{"n":"_xpointfixed"}}],[11,"eq","","",197,{"i":[{"n":"self"},{"n":"_xpointfixed"}],"o":{"n":"bool"}}],[11,"ne","","",197,{"i":[{"n":"self"},{"n":"_xpointfixed"}],"o":{"n":"bool"}}],[11,"fmt","","",198,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",198,{"i":[{"n":"self"}],"o":{"n":"_xradialgradient"}}],[11,"eq","","",198,{"i":[{"n":"self"},{"n":"_xradialgradient"}],"o":{"n":"bool"}}],[11,"ne","","",198,{"i":[{"n":"self"},{"n":"_xradialgradient"}],"o":{"n":"bool"}}],[11,"fmt","","",199,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",199,{"i":[{"n":"self"}],"o":{"n":"xrendercolor"}}],[11,"eq","","",199,{"i":[{"n":"self"},{"n":"xrendercolor"}],"o":{"n":"bool"}}],[11,"ne","","",199,{"i":[{"n":"self"},{"n":"xrendercolor"}],"o":{"n":"bool"}}],[11,"fmt","","",200,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",200,{"i":[{"n":"self"}],"o":{"n":"xrenderdirectformat"}}],[11,"eq","","",200,{"i":[{"n":"self"},{"n":"xrenderdirectformat"}],"o":{"n":"bool"}}],[11,"ne","","",200,{"i":[{"n":"self"},{"n":"xrenderdirectformat"}],"o":{"n":"bool"}}],[11,"fmt","","",201,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",201,{"i":[{"n":"self"}],"o":{"n":"xrenderpictformat"}}],[11,"eq","","",201,{"i":[{"n":"self"},{"n":"xrenderpictformat"}],"o":{"n":"bool"}}],[11,"ne","","",201,{"i":[{"n":"self"},{"n":"xrenderpictformat"}],"o":{"n":"bool"}}],[11,"fmt","","",202,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",202,{"i":[{"n":"self"}],"o":{"n":"_xrenderpictureattributes"}}],[11,"eq","","",202,{"i":[{"n":"self"},{"n":"_xrenderpictureattributes"}],"o":{"n":"bool"}}],[11,"ne","","",202,{"i":[{"n":"self"},{"n":"_xrenderpictureattributes"}],"o":{"n":"bool"}}],[11,"fmt","","",203,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",203,{"i":[{"n":"self"}],"o":{"n":"_xspanfix"}}],[11,"eq","","",203,{"i":[{"n":"self"},{"n":"_xspanfix"}],"o":{"n":"bool"}}],[11,"ne","","",203,{"i":[{"n":"self"},{"n":"_xspanfix"}],"o":{"n":"bool"}}],[11,"fmt","","",204,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",204,{"i":[{"n":"self"}],"o":{"n":"_xtrap"}}],[11,"eq","","",204,{"i":[{"n":"self"},{"n":"_xtrap"}],"o":{"n":"bool"}}],[11,"ne","","",204,{"i":[{"n":"self"},{"n":"_xtrap"}],"o":{"n":"bool"}}],[11,"fmt","","",205,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",205,{"i":[{"n":"self"}],"o":{"n":"_xtrapezoid"}}],[11,"eq","","",205,{"i":[{"n":"self"},{"n":"_xtrapezoid"}],"o":{"n":"bool"}}],[11,"ne","","",205,{"i":[{"n":"self"},{"n":"_xtrapezoid"}],"o":{"n":"bool"}}],[11,"fmt","","",206,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",206,{"i":[{"n":"self"}],"o":{"n":"_xtriangle"}}],[11,"eq","","",206,{"i":[{"n":"self"},{"n":"_xtriangle"}],"o":{"n":"bool"}}],[11,"ne","","",206,{"i":[{"n":"self"},{"n":"_xtriangle"}],"o":{"n":"bool"}}],[11,"fmt","","",207,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",207,{"i":[{"n":"self"}],"o":{"n":"_xtransform"}}],[11,"eq","","",207,{"i":[{"n":"self"},{"n":"_xtransform"}],"o":{"n":"bool"}}],[11,"ne","","",207,{"i":[{"n":"self"},{"n":"_xtransform"}],"o":{"n":"bool"}}],[0,"xss","x11_dl","",null,null],[3,"Xss","x11_dl::xss","",null,null],[12,"XScreenSaverQueryExtension","","",208,null],[12,"XScreenSaverQueryVersion","","",208,null],[12,"XScreenSaverAllocInfo","","",208,null],[12,"XScreenSaverQueryInfo","","",208,null],[12,"XScreenSaverSelectInput","","",208,null],[12,"XScreenSaverSetAttributes","","",208,null],[12,"XScreenSaverUnsetAttributes","","",208,null],[12,"XScreenSaverRegister","","",208,null],[12,"XScreenSaverUnregister","","",208,null],[12,"XScreenSaverGetRegistered","","",208,null],[12,"XScreenSaverSuspend","","",208,null],[3,"XScreenSaverInfo","","",null,null],[12,"window","","",209,null],[12,"state","","",209,null],[12,"kind","","",209,null],[12,"til_or_since","","",209,null],[12,"idle","","",209,null],[12,"eventMask","","",209,null],[3,"XScreenSaverNotifyEvent","","",null,null],[12,"type_","","",210,null],[12,"serial","","",210,null],[12,"send_event","","",210,null],[12,"display","","",210,null],[12,"window","","",210,null],[12,"root","","",210,null],[12,"state","","",210,null],[12,"kind","","",210,null],[12,"forced","","",210,null],[12,"time","","",210,null],[17,"ScreenSaverName","","",null,null],[17,"ScreenSaverPropertyName","","",null,null],[17,"ScreenSaverNotifyMask","","",null,null],[17,"ScreenSaverCycleMask","","",null,null],[17,"ScreenSaverMajorVersion","","",null,null],[17,"ScreenSaverMinorVersion","","",null,null],[17,"ScreenSaverOff","","",null,null],[17,"ScreenSaverOn","","",null,null],[17,"ScreenSaverCycle","","",null,null],[17,"ScreenSaverDisabled","","",null,null],[17,"ScreenSaverBlanked","","",null,null],[17,"ScreenSaverInternal","","",null,null],[17,"ScreenSaverExternal","","",null,null],[17,"ScreenSaverNotify","","",null,null],[17,"ScreenSaverNumberEvents","","",null,null],[11,"open","","",208,{"o":{"g":["xss","openerror"],"n":"result"}}],[11,"fmt","","",209,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",209,{"i":[{"n":"self"}],"o":{"n":"xscreensaverinfo"}}],[11,"eq","","",209,{"i":[{"n":"self"},{"n":"xscreensaverinfo"}],"o":{"n":"bool"}}],[11,"ne","","",209,{"i":[{"n":"self"},{"n":"xscreensaverinfo"}],"o":{"n":"bool"}}],[11,"fmt","","",210,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",210,{"i":[{"n":"self"}],"o":{"n":"xscreensavernotifyevent"}}],[11,"eq","","",210,{"i":[{"n":"self"},{"n":"xscreensavernotifyevent"}],"o":{"n":"bool"}}],[11,"ne","","",210,{"i":[{"n":"self"},{"n":"xscreensavernotifyevent"}],"o":{"n":"bool"}}],[11,"as_mut","x11_dl::xlib","",99,{"i":[{"n":"self"}],"o":{"n":"xscreensavernotifyevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xscreensavernotifyevent"}}],[11,"from","","",99,{"i":[{"n":"xscreensavernotifyevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xscreensavernotifyevent"}],"o":{"n":"xevent"}}],[11,"from","x11_dl::xss","",210,{"i":[{"n":"xevent"}],"o":{"n":"xscreensavernotifyevent"}}],[11,"from","","",210,{"i":[{"n":"xevent"}],"o":{"n":"xscreensavernotifyevent"}}],[0,"xt","x11_dl","",null,null],[3,"Xt","x11_dl::xt","",null,null],[12,"XtAddActions","","",211,null],[12,"XtAddCallback","","",211,null],[12,"XtAddCallbacks","","",211,null],[12,"XtAddConverter","","",211,null],[12,"XtAddEventHandler","","",211,null],[12,"XtAddExposureToRegion","","",211,null],[12,"XtAddGrab","","",211,null],[12,"XtAddInput","","",211,null],[12,"XtAddRawEventHandler","","",211,null],[12,"XtAddSignal","","",211,null],[12,"XtAddTimeOut","","",211,null],[12,"XtAddWorkProc","","",211,null],[12,"XtAllocateGC","","",211,null],[12,"XtAppAddActionHook","","",211,null],[12,"XtAppAddActions","","",211,null],[12,"XtAppAddBlockHook","","",211,null],[12,"XtAppAddConverter","","",211,null],[12,"XtAppAddInput","","",211,null],[12,"XtAppAddSignal","","",211,null],[12,"XtAppAddTimeOut","","",211,null],[12,"XtAppAddWorkProc","","",211,null],[12,"XtAppCreateShell","","",211,null],[12,"XtAppError","","",211,null],[12,"XtAppErrorMsg","","",211,null],[12,"XtAppGetErrorDatabase","","",211,null],[12,"XtAppGetErrorDatabaseText","","",211,null],[12,"XtAppGetExitFlag","","",211,null],[12,"XtAppGetSelectionTimeout","","",211,null],[12,"XtAppInitialize","","",211,null],[12,"XtAppLock","","",211,null],[12,"XtAppMainLoop","","",211,null],[12,"XtAppNextEvent","","",211,null],[12,"XtAppPeekEvent","","",211,null],[12,"XtAppPending","","",211,null],[12,"XtAppProcessEvent","","",211,null],[12,"XtAppReleaseCacheRefs","","",211,null],[12,"XtAppSetErrorHandler","","",211,null],[12,"XtAppSetErrorMsgHandler","","",211,null],[12,"XtAppSetExitFlag","","",211,null],[12,"XtAppSetFallbackResources","","",211,null],[12,"XtAppSetSelectionTimeout","","",211,null],[12,"XtAppSetTypeConverter","","",211,null],[12,"XtAppSetWarningHandler","","",211,null],[12,"XtAppSetWarningMsgHandler","","",211,null],[12,"XtAppUnlock","","",211,null],[12,"XtAppWarning","","",211,null],[12,"XtAppWarningMsg","","",211,null],[12,"XtAugmentTranslations","","",211,null],[12,"XtBuildEventMask","","",211,null],[12,"XtCallAcceptFocus","","",211,null],[12,"XtCallActionProc","","",211,null],[12,"XtCallbackExclusive","","",211,null],[12,"XtCallbackNone","","",211,null],[12,"XtCallbackNonexclusive","","",211,null],[12,"XtCallbackPopdown","","",211,null],[12,"XtCallbackReleaseCacheRef","","",211,null],[12,"XtCallbackReleaseCacheRefList","","",211,null],[12,"XtCallCallbackList","","",211,null],[12,"XtCallCallbacks","","",211,null],[12,"XtCallConverter","","",211,null],[12,"XtCalloc","","",211,null],[12,"XtCancelSelectionRequest","","",211,null],[12,"XtChangeManagedSet","","",211,null],[12,"XtClass","","",211,null],[12,"XtCloseDisplay","","",211,null],[12,"XtConfigureWidget","","",211,null],[12,"XtConvert","","",211,null],[12,"XtConvertAndStore","","",211,null],[12,"XtConvertCase","","",211,null],[12,"XtCreateApplicationContext","","",211,null],[12,"XtCreateApplicationShell","","",211,null],[12,"XtCreateManagedWidget","","",211,null],[12,"XtCreatePopupShell","","",211,null],[12,"XtCreateSelectionRequest","","",211,null],[12,"XtCreateWidget","","",211,null],[12,"XtCreateWindow","","",211,null],[12,"XtCvtColorToPixel","","",211,null],[12,"XtCvtIntToBool","","",211,null],[12,"XtCvtIntToBoolean","","",211,null],[12,"XtCvtIntToColor","","",211,null],[12,"XtCvtIntToFloat","","",211,null],[12,"XtCvtIntToFont","","",211,null],[12,"XtCvtIntToPixel","","",211,null],[12,"XtCvtIntToPixmap","","",211,null],[12,"XtCvtIntToShort","","",211,null],[12,"XtCvtIntToUnsignedChar","","",211,null],[12,"XtCvtStringToAcceleratorTable","","",211,null],[12,"XtCvtStringToAtom","","",211,null],[12,"XtCvtStringToBool","","",211,null],[12,"XtCvtStringToBoolean","","",211,null],[12,"XtCvtStringToCommandArgArray","","",211,null],[12,"XtCvtStringToCursor","","",211,null],[12,"XtCvtStringToDimension","","",211,null],[12,"XtCvtStringToDirectoryString","","",211,null],[12,"XtCvtStringToDisplay","","",211,null],[12,"XtCvtStringToFile","","",211,null],[12,"XtCvtStringToFloat","","",211,null],[12,"XtCvtStringToFont","","",211,null],[12,"XtCvtStringToFontSet","","",211,null],[12,"XtCvtStringToFontStruct","","",211,null],[12,"XtCvtStringToGravity","","",211,null],[12,"XtCvtStringToInitialState","","",211,null],[12,"XtCvtStringToInt","","",211,null],[12,"XtCvtStringToPixel","","",211,null],[12,"XtCvtStringToRestartStyle","","",211,null],[12,"XtCvtStringToShort","","",211,null],[12,"XtCvtStringToTranslationTable","","",211,null],[12,"XtCvtStringToUnsignedChar","","",211,null],[12,"XtCvtStringToVisual","","",211,null],[12,"XtDatabase","","",211,null],[12,"XtDestroyApplicationContext","","",211,null],[12,"XtDestroyGC","","",211,null],[12,"XtDestroyWidget","","",211,null],[12,"XtDirectConvert","","",211,null],[12,"XtDisownSelection","","",211,null],[12,"XtDispatchEvent","","",211,null],[12,"XtDispatchEventToWidget","","",211,null],[12,"XtDisplay","","",211,null],[12,"XtDisplayInitialize","","",211,null],[12,"XtDisplayOfObject","","",211,null],[12,"XtDisplayStringConversionWarning","","",211,null],[12,"XtDisplayToApplicationContext","","",211,null],[12,"XtError","","",211,null],[12,"XtErrorMsg","","",211,null],[12,"XtFindFile","","",211,null],[12,"XtFree","","",211,null],[12,"XtGetActionKeysym","","",211,null],[12,"XtGetActionList","","",211,null],[12,"XtGetApplicationNameAndClass","","",211,null],[12,"XtGetApplicationResources","","",211,null],[12,"XtGetClassExtension","","",211,null],[12,"XtGetConstraintResourceList","","",211,null],[12,"XtGetDisplays","","",211,null],[12,"XtGetErrorDatabase","","",211,null],[12,"XtGetErrorDatabaseText","","",211,null],[12,"XtGetGC","","",211,null],[12,"XtGetKeyboardFocusWidget","","",211,null],[12,"XtGetKeysymTable","","",211,null],[12,"XtGetMultiClickTime","","",211,null],[12,"XtGetResourceList","","",211,null],[12,"XtGetSelectionParameters","","",211,null],[12,"XtGetSelectionRequest","","",211,null],[12,"XtGetSelectionTimeout","","",211,null],[12,"XtGetSelectionValue","","",211,null],[12,"XtGetSelectionValueIncremental","","",211,null],[12,"XtGetSelectionValues","","",211,null],[12,"XtGetSelectionValuesIncremental","","",211,null],[12,"XtGetSubresources","","",211,null],[12,"XtGetSubvalues","","",211,null],[12,"XtGetValues","","",211,null],[12,"XtGrabButton","","",211,null],[12,"XtGrabKey","","",211,null],[12,"XtGrabKeyboard","","",211,null],[12,"XtGrabPointer","","",211,null],[12,"XtHasCallbacks","","",211,null],[12,"XtHooksOfDisplay","","",211,null],[12,"XtInitialize","","",211,null],[12,"XtInitializeWidgetClass","","",211,null],[12,"XtInsertEventHandler","","",211,null],[12,"XtInsertEventTypeHandler","","",211,null],[12,"XtInsertRawEventHandler","","",211,null],[12,"XtInstallAccelerators","","",211,null],[12,"XtInstallAllAccelerators","","",211,null],[12,"XtIsApplicationShell","","",211,null],[12,"XtIsComposite","","",211,null],[12,"XtIsConstraint","","",211,null],[12,"XtIsManaged","","",211,null],[12,"XtIsObject","","",211,null],[12,"XtIsOverrideShell","","",211,null],[12,"XtIsRealized","","",211,null],[12,"XtIsRectObj","","",211,null],[12,"XtIsSensitive","","",211,null],[12,"XtIsSessionShell","","",211,null],[12,"XtIsShell","","",211,null],[12,"XtIsSubclass","","",211,null],[12,"XtIsTopLevelShell","","",211,null],[12,"XtIsTransientShell","","",211,null],[12,"XtIsVendorShell","","",211,null],[12,"XtIsWidget","","",211,null],[12,"XtIsWMShell","","",211,null],[12,"XtKeysymToKeycodeList","","",211,null],[12,"XtLastEventProcessed","","",211,null],[12,"XtLastTimestampProcessed","","",211,null],[12,"XtMainLoop","","",211,null],[12,"XtMakeGeometryRequest","","",211,null],[12,"XtMakeResizeRequest","","",211,null],[12,"XtMalloc","","",211,null],[12,"XtManageChild","","",211,null],[12,"XtManageChildren","","",211,null],[12,"XtMapWidget","","",211,null],[12,"XtMenuPopupAction","","",211,null],[12,"XtMergeArgLists","","",211,null],[12,"XtMoveWidget","","",211,null],[12,"XtName","","",211,null],[12,"XtNameToWidget","","",211,null],[12,"XtNewString","","",211,null],[12,"XtNextEvent","","",211,null],[12,"XtNoticeSignal","","",211,null],[12,"XtOpenApplication","","",211,null],[12,"XtOpenDisplay","","",211,null],[12,"XtOverrideTranslations","","",211,null],[12,"XtOwnSelection","","",211,null],[12,"XtOwnSelectionIncremental","","",211,null],[12,"XtParent","","",211,null],[12,"XtParseAcceleratorTable","","",211,null],[12,"XtParseTranslationTable","","",211,null],[12,"XtPeekEvent","","",211,null],[12,"XtPending","","",211,null],[12,"XtPopdown","","",211,null],[12,"XtPopup","","",211,null],[12,"XtPopupSpringLoaded","","",211,null],[12,"XtProcessEvent","","",211,null],[12,"XtProcessLock","","",211,null],[12,"XtProcessUnlock","","",211,null],[12,"XtQueryGeometry","","",211,null],[12,"XtRealizeWidget","","",211,null],[12,"XtRealloc","","",211,null],[12,"XtRegisterCaseConverter","","",211,null],[12,"XtRegisterDrawable","","",211,null],[12,"XtRegisterExtensionSelector","","",211,null],[12,"XtRegisterGrabAction","","",211,null],[12,"XtReleaseGC","","",211,null],[12,"XtReleasePropertyAtom","","",211,null],[12,"XtRemoveActionHook","","",211,null],[12,"XtRemoveAllCallbacks","","",211,null],[12,"XtRemoveBlockHook","","",211,null],[12,"XtRemoveCallback","","",211,null],[12,"XtRemoveCallbacks","","",211,null],[12,"XtRemoveEventHandler","","",211,null],[12,"XtRemoveEventTypeHandler","","",211,null],[12,"XtRemoveGrab","","",211,null],[12,"XtRemoveInput","","",211,null],[12,"XtRemoveRawEventHandler","","",211,null],[12,"XtRemoveSignal","","",211,null],[12,"XtRemoveTimeOut","","",211,null],[12,"XtRemoveWorkProc","","",211,null],[12,"XtReservePropertyAtom","","",211,null],[12,"XtResizeWidget","","",211,null],[12,"XtResizeWindow","","",211,null],[12,"XtResolvePathname","","",211,null],[12,"XtScreen","","",211,null],[12,"XtScreenDatabase","","",211,null],[12,"XtScreenOfObject","","",211,null],[12,"XtSendSelectionRequest","","",211,null],[12,"XtSessionGetToken","","",211,null],[12,"XtSessionReturnToken","","",211,null],[12,"XtSetErrorHandler","","",211,null],[12,"XtSetErrorMsgHandler","","",211,null],[12,"XtSetEventDispatcher","","",211,null],[12,"XtSetKeyboardFocus","","",211,null],[12,"XtSetKeyTranslator","","",211,null],[12,"XtSetLanguageProc","","",211,null],[12,"XtSetMappedWhenManaged","","",211,null],[12,"XtSetMultiClickTime","","",211,null],[12,"XtSetSelectionParameters","","",211,null],[12,"XtSetSelectionTimeout","","",211,null],[12,"XtSetSensitive","","",211,null],[12,"XtSetSubvalues","","",211,null],[12,"XtSetTypeConverter","","",211,null],[12,"XtSetValues","","",211,null],[12,"XtSetWarningHandler","","",211,null],[12,"XtSetWarningMsgHandler","","",211,null],[12,"XtSetWMColormapWindows","","",211,null],[12,"XtStringConversionWarning","","",211,null],[12,"XtSuperclass","","",211,null],[12,"XtToolkitInitialize","","",211,null],[12,"XtToolkitThreadInitialize","","",211,null],[12,"XtTranslateCoords","","",211,null],[12,"XtTranslateKey","","",211,null],[12,"XtTranslateKeycode","","",211,null],[12,"XtUngrabButton","","",211,null],[12,"XtUngrabKey","","",211,null],[12,"XtUngrabKeyboard","","",211,null],[12,"XtUngrabPointer","","",211,null],[12,"XtUninstallTranslations","","",211,null],[12,"XtUnmanageChild","","",211,null],[12,"XtUnmanageChildren","","",211,null],[12,"XtUnmapWidget","","",211,null],[12,"XtUnrealizeWidget","","",211,null],[12,"XtUnregisterDrawable","","",211,null],[12,"XtWarning","","",211,null],[12,"XtWarningMsg","","",211,null],[12,"XtWidgetToApplicationContext","","",211,null],[12,"XtWindow","","",211,null],[12,"XtWindowOfObject","","",211,null],[12,"XtWindowToWidget","","",211,null],[12,"XtAsprintf","","",211,null],[12,"XtVaAppCreateShell","","",211,null],[12,"XtVaAppInitialize","","",211,null],[12,"XtVaCreateArgsList","","",211,null],[12,"XtVaCreateManagedWidget","","",211,null],[12,"XtVaCreatePopupShell","","",211,null],[12,"XtVaCreateWidget","","",211,null],[12,"XtVaGetApplicationResources","","",211,null],[12,"XtVaGetSubresources","","",211,null],[12,"XtVaGetSubvalues","","",211,null],[12,"XtVaGetValues","","",211,null],[12,"XtVaOpenApplication","","",211,null],[12,"XtVaSetSubvalues","","",211,null],[12,"XtVaSetValues","","",211,null],[3,"Arg","","",null,null],[3,"SubstitutionRec","","",null,null],[3,"_TranslationData","","",null,null],[3,"_WidgetClassRec","","",null,null],[3,"_WidgetRec","","",null,null],[3,"_XtActionsRec","","",null,null],[3,"_XtAppStruct","","",null,null],[3,"_XtCallbackRec","","",null,null],[3,"_XtCheckpointTokenRec","","",null,null],[3,"XtConvertArgRec","","",null,null],[3,"_XtResource","","",null,null],[3,"XtWidgetGeometry","","",null,null],[6,"XtCallbackStatus","","",null,null],[6,"XtGeometryResult","","",null,null],[6,"XtGrabKind","","",null,null],[6,"XtListPosition","","",null,null],[6,"ArgList","","",null,null],[6,"Substitution","","",null,null],[6,"Widget","","",null,null],[6,"WidgetClass","","",null,null],[6,"XtAccelerators","","",null,null],[6,"XtActionList","","",null,null],[6,"XtActionsRec","","",null,null],[6,"XtAppContext","","",null,null],[6,"XtCallbackList","","",null,null],[6,"XtCallbackRec","","",null,null],[6,"XtCheckpointToken","","",null,null],[6,"XtCheckpointTokenRec","","",null,null],[6,"XtConvertArgList","","",null,null],[6,"XtResource","","",null,null],[6,"XtResourceList","","",null,null],[6,"XtTranslations","","",null,null],[11,"open","","",211,{"o":{"g":["xt","openerror"],"n":"result"}}],[0,"xtest","x11_dl","",null,null],[3,"Xf86vmode","x11_dl::xtest","",null,null],[12,"XTestCompareCurrentCursorWithWindow","","",212,null],[12,"XTestCompareCursorWithWindow","","",212,null],[12,"XTestDiscard","","",212,null],[12,"XTestFakeButtonEvent","","",212,null],[12,"XTestFakeDeviceButtonEvent","","",212,null],[12,"XTestFakeDeviceKeyEvent","","",212,null],[12,"XTestFakeDeviceMotionEvent","","",212,null],[12,"XTestFakeKeyEvent","","",212,null],[12,"XTestFakeMotionEvent","","",212,null],[12,"XTestFakeProximityEvent","","",212,null],[12,"XTestFakeRelativeMotionEvent","","",212,null],[12,"XTestGrabControl","","",212,null],[12,"XTestQueryExtension","","",212,null],[12,"XTestSetGContextOfGC","","",212,null],[12,"XTestSetVisualIDOfVisual","","",212,null],[11,"open","","",212,{"o":{"g":["xf86vmode","openerror"],"n":"result"}}],[0,"xlib_xcb","x11_dl","",null,null],[3,"Xlib_xcb","x11_dl::xlib_xcb","",null,null],[12,"XGetXCBConnection","","",213,null],[6,"xcb_connection_t","","",null,null],[11,"open","","",213,{"o":{"g":["xlib_xcb","openerror"],"n":"result"}}],[0,"xrandr","x11_dl","",null,null],[3,"Xrandr","x11_dl::xrandr","",null,null],[12,"XRRAddOutputMode","","",214,null],[12,"XRRAllocGamma","","",214,null],[12,"XRRAllocModeInfo","","",214,null],[12,"XRRAllocateMonitor","","",214,null],[12,"XRRChangeOutputProperty","","",214,null],[12,"XRRChangeProviderProperty","","",214,null],[12,"XRRConfigCurrentConfiguration","","",214,null],[12,"XRRConfigCurrentRate","","",214,null],[12,"XRRConfigRates","","",214,null],[12,"XRRConfigRotations","","",214,null],[12,"XRRConfigSizes","","",214,null],[12,"XRRConfigTimes","","",214,null],[12,"XRRConfigureOutputProperty","","",214,null],[12,"XRRConfigureProviderProperty","","",214,null],[12,"XRRCreateMode","","",214,null],[12,"XRRDeleteMonitor","","",214,null],[12,"XRRDeleteOutputMode","","",214,null],[12,"XRRDeleteOutputProperty","","",214,null],[12,"XRRDeleteProviderProperty","","",214,null],[12,"XRRDestroyMode","","",214,null],[12,"XRRFreeCrtcInfo","","",214,null],[12,"XRRFreeGamma","","",214,null],[12,"XRRFreeModeInfo","","",214,null],[12,"XRRFreeMonitors","","",214,null],[12,"XRRFreeOutputInfo","","",214,null],[12,"XRRFreePanning","","",214,null],[12,"XRRFreeProviderInfo","","",214,null],[12,"XRRFreeProviderResources","","",214,null],[12,"XRRFreeScreenConfigInfo","","",214,null],[12,"XRRFreeScreenResources","","",214,null],[12,"XRRGetCrtcGamma","","",214,null],[12,"XRRGetCrtcGammaSize","","",214,null],[12,"XRRGetCrtcInfo","","",214,null],[12,"XRRGetCrtcTransform","","",214,null],[12,"XRRGetMonitors","","",214,null],[12,"XRRGetOutputInfo","","",214,null],[12,"XRRGetOutputPrimary","","",214,null],[12,"XRRGetOutputProperty","","",214,null],[12,"XRRGetPanning","","",214,null],[12,"XRRGetProviderInfo","","",214,null],[12,"XRRGetProviderProperty","","",214,null],[12,"XRRGetProviderResources","","",214,null],[12,"XRRGetScreenInfo","","",214,null],[12,"XRRGetScreenResources","","",214,null],[12,"XRRGetScreenResourcesCurrent","","",214,null],[12,"XRRGetScreenSizeRange","","",214,null],[12,"XRRListOutputProperties","","",214,null],[12,"XRRListProviderProperties","","",214,null],[12,"XRRQueryExtension","","",214,null],[12,"XRRQueryOutputProperty","","",214,null],[12,"XRRQueryProviderProperty","","",214,null],[12,"XRRQueryVersion","","",214,null],[12,"XRRRates","","",214,null],[12,"XRRRootToScreen","","",214,null],[12,"XRRRotations","","",214,null],[12,"XRRSelectInput","","",214,null],[12,"XRRSetCrtcConfig","","",214,null],[12,"XRRSetCrtcGamma","","",214,null],[12,"XRRSetCrtcTransform","","",214,null],[12,"XRRSetMonitor","","",214,null],[12,"XRRSetOutputPrimary","","",214,null],[12,"XRRSetPanning","","",214,null],[12,"XRRSetProviderOffloadSink","","",214,null],[12,"XRRSetProviderOutputSource","","",214,null],[12,"XRRSetScreenConfig","","",214,null],[12,"XRRSetScreenConfigAndRate","","",214,null],[12,"XRRSetScreenSize","","",214,null],[12,"XRRSizes","","",214,null],[12,"XRRTimes","","",214,null],[12,"XRRUpdateConfiguration","","",214,null],[3,"XRRScreenSize","","",null,null],[12,"width","","",215,null],[12,"height","","",215,null],[12,"mwidth","","",215,null],[12,"mheight","","",215,null],[3,"XRRScreenConfiguration","","",null,null],[3,"XRRModeInfo","","",null,null],[12,"id","","",216,null],[12,"width","","",216,null],[12,"height","","",216,null],[12,"dotClock","","",216,null],[12,"hSyncStart","","",216,null],[12,"hSyncEnd","","",216,null],[12,"hTotal","","",216,null],[12,"hSkew","","",216,null],[12,"vSyncStart","","",216,null],[12,"vSyncEnd","","",216,null],[12,"vTotal","","",216,null],[12,"name","","",216,null],[12,"nameLength","","",216,null],[12,"modeFlags","","",216,null],[3,"XRRScreenResources","","",null,null],[12,"timestamp","","",217,null],[12,"configTimestamp","","",217,null],[12,"ncrtc","","",217,null],[12,"crtcs","","",217,null],[12,"noutput","","",217,null],[12,"outputs","","",217,null],[12,"nmode","","",217,null],[12,"modes","","",217,null],[3,"XRROutputInfo","","",null,null],[12,"timestamp","","",218,null],[12,"crtc","","",218,null],[12,"name","","",218,null],[12,"nameLen","","",218,null],[12,"mm_width","","",218,null],[12,"mm_height","","",218,null],[12,"connection","","",218,null],[12,"subpixel_order","","",218,null],[12,"ncrtc","","",218,null],[12,"crtcs","","",218,null],[12,"nclone","","",218,null],[12,"clones","","",218,null],[12,"nmode","","",218,null],[12,"npreferred","","",218,null],[12,"modes","","",218,null],[3,"XRRPropertyInfo","","",null,null],[12,"pending","","",219,null],[12,"range","","",219,null],[12,"immutable","","",219,null],[12,"num_values","","",219,null],[12,"values","","",219,null],[3,"XRRCrtcInfo","","",null,null],[12,"timestamp","","",220,null],[12,"x","","",220,null],[12,"y","","",220,null],[12,"width","","",220,null],[12,"height","","",220,null],[12,"mode","","",220,null],[12,"rotation","","",220,null],[12,"noutput","","",220,null],[12,"outputs","","",220,null],[12,"rotations","","",220,null],[12,"npossible","","",220,null],[12,"possible","","",220,null],[3,"XRRCrtcGamma","","",null,null],[12,"size","","",221,null],[12,"red","","",221,null],[12,"green","","",221,null],[12,"blue","","",221,null],[3,"XRRCrtcTransformAttributes","","",null,null],[12,"pendingTransform","","",222,null],[12,"pendingFilter","","",222,null],[12,"pendingNparams","","",222,null],[12,"pendingParams","","",222,null],[12,"currentTransform","","",222,null],[12,"currentFilter","","",222,null],[12,"currentNparams","","",222,null],[12,"currentParams","","",222,null],[3,"XRRPanning","","",null,null],[12,"timestamp","","",223,null],[12,"left","","",223,null],[12,"top","","",223,null],[12,"width","","",223,null],[12,"height","","",223,null],[12,"track_left","","",223,null],[12,"track_top","","",223,null],[12,"track_width","","",223,null],[12,"track_height","","",223,null],[12,"border_left","","",223,null],[12,"border_top","","",223,null],[12,"border_right","","",223,null],[12,"border_bottom","","",223,null],[3,"XRRProviderResources","","",null,null],[12,"timestamp","","",224,null],[12,"nproviders","","",224,null],[12,"providers","","",224,null],[3,"XRRProviderInfo","","",null,null],[12,"capabilities","","",225,null],[12,"ncrtcs","","",225,null],[12,"crtcs","","",225,null],[12,"noutputs","","",225,null],[12,"outputs","","",225,null],[12,"name","","",225,null],[12,"nassociatedproviders","","",225,null],[12,"associated_providers","","",225,null],[12,"associated_capability","","",225,null],[12,"nameLen","","",225,null],[3,"XRRMonitorInfo","","",null,null],[12,"name","","",226,null],[12,"primary","","",226,null],[12,"automatic","","",226,null],[12,"noutput","","",226,null],[12,"x","","",226,null],[12,"y","","",226,null],[12,"width","","",226,null],[12,"height","","",226,null],[12,"mwidth","","",226,null],[12,"mheight","","",226,null],[12,"outputs","","",226,null],[3,"XRRScreenChangeNotifyEvent","","",null,null],[12,"type_","","",227,null],[12,"serial","","",227,null],[12,"send_event","","",227,null],[12,"display","","",227,null],[12,"window","","",227,null],[12,"root","","",227,null],[12,"timestamp","","",227,null],[12,"config_timestamp","","",227,null],[12,"size_index","","",227,null],[12,"subpixel_order","","",227,null],[12,"rotation","","",227,null],[12,"width","","",227,null],[12,"height","","",227,null],[12,"mwidth","","",227,null],[12,"mheight","","",227,null],[3,"XRRNotifyEvent","","",null,null],[12,"type_","","",228,null],[12,"serial","","",228,null],[12,"send_event","","",228,null],[12,"display","","",228,null],[12,"window","","",228,null],[12,"subtype","","",228,null],[3,"XRROutputChangeNotifyEvent","","",null,null],[12,"type_","","",229,null],[12,"serial","","",229,null],[12,"send_event","","",229,null],[12,"display","","",229,null],[12,"window","","",229,null],[12,"subtype","","",229,null],[12,"output","","",229,null],[12,"crtc","","",229,null],[12,"mode","","",229,null],[12,"rotation","","",229,null],[12,"connection","","",229,null],[12,"subpixel_order","","",229,null],[3,"XRRCrtcChangeNotifyEvent","","",null,null],[12,"type_","","",230,null],[12,"serial","","",230,null],[12,"send_event","","",230,null],[12,"display","","",230,null],[12,"window","","",230,null],[12,"subtype","","",230,null],[12,"crtc","","",230,null],[12,"mode","","",230,null],[12,"rotation","","",230,null],[12,"x","","",230,null],[12,"y","","",230,null],[12,"width","","",230,null],[12,"height","","",230,null],[3,"XRROutputPropertyNotifyEvent","","",null,null],[12,"type_","","",231,null],[12,"serial","","",231,null],[12,"send_event","","",231,null],[12,"display","","",231,null],[12,"window","","",231,null],[12,"subtype","","",231,null],[12,"output","","",231,null],[12,"property","","",231,null],[12,"timestamp","","",231,null],[12,"state","","",231,null],[3,"XRRProviderChangeNotifyEvent","","",null,null],[12,"type_","","",232,null],[12,"serial","","",232,null],[12,"send_event","","",232,null],[12,"display","","",232,null],[12,"window","","",232,null],[12,"subtype","","",232,null],[12,"provider","","",232,null],[12,"timestamp","","",232,null],[12,"current_role","","",232,null],[3,"XRRProviderPropertyNotifyEvent","","",null,null],[12,"type_","","",233,null],[12,"serial","","",233,null],[12,"send_event","","",233,null],[12,"display","","",233,null],[12,"window","","",233,null],[12,"subtype","","",233,null],[12,"provider","","",233,null],[12,"property","","",233,null],[12,"timestamp","","",233,null],[12,"state","","",233,null],[3,"XRRResourceChangeNotifyEvent","","",null,null],[12,"type_","","",234,null],[12,"serial","","",234,null],[12,"send_event","","",234,null],[12,"display","","",234,null],[12,"window","","",234,null],[12,"subtype","","",234,null],[12,"timestamp","","",234,null],[3,"Xrandr_2_2_0","","",null,null],[12,"XRRAddOutputMode","","",235,null],[12,"XRRAllocGamma","","",235,null],[12,"XRRAllocModeInfo","","",235,null],[12,"XRRChangeOutputProperty","","",235,null],[12,"XRRChangeProviderProperty","","",235,null],[12,"XRRConfigCurrentConfiguration","","",235,null],[12,"XRRConfigCurrentRate","","",235,null],[12,"XRRConfigRates","","",235,null],[12,"XRRConfigRotations","","",235,null],[12,"XRRConfigSizes","","",235,null],[12,"XRRConfigTimes","","",235,null],[12,"XRRConfigureOutputProperty","","",235,null],[12,"XRRConfigureProviderProperty","","",235,null],[12,"XRRCreateMode","","",235,null],[12,"XRRDeleteOutputMode","","",235,null],[12,"XRRDeleteOutputProperty","","",235,null],[12,"XRRDeleteProviderProperty","","",235,null],[12,"XRRDestroyMode","","",235,null],[12,"XRRFreeCrtcInfo","","",235,null],[12,"XRRFreeGamma","","",235,null],[12,"XRRFreeModeInfo","","",235,null],[12,"XRRFreeOutputInfo","","",235,null],[12,"XRRFreePanning","","",235,null],[12,"XRRFreeProviderInfo","","",235,null],[12,"XRRFreeProviderResources","","",235,null],[12,"XRRFreeScreenConfigInfo","","",235,null],[12,"XRRFreeScreenResources","","",235,null],[12,"XRRGetCrtcGamma","","",235,null],[12,"XRRGetCrtcGammaSize","","",235,null],[12,"XRRGetCrtcInfo","","",235,null],[12,"XRRGetCrtcTransform","","",235,null],[12,"XRRGetOutputInfo","","",235,null],[12,"XRRGetOutputPrimary","","",235,null],[12,"XRRGetOutputProperty","","",235,null],[12,"XRRGetPanning","","",235,null],[12,"XRRGetProviderInfo","","",235,null],[12,"XRRGetProviderProperty","","",235,null],[12,"XRRGetProviderResources","","",235,null],[12,"XRRGetScreenInfo","","",235,null],[12,"XRRGetScreenResources","","",235,null],[12,"XRRGetScreenResourcesCurrent","","",235,null],[12,"XRRGetScreenSizeRange","","",235,null],[12,"XRRListOutputProperties","","",235,null],[12,"XRRListProviderProperties","","",235,null],[12,"XRRQueryExtension","","",235,null],[12,"XRRQueryOutputProperty","","",235,null],[12,"XRRQueryProviderProperty","","",235,null],[12,"XRRQueryVersion","","",235,null],[12,"XRRRates","","",235,null],[12,"XRRRootToScreen","","",235,null],[12,"XRRRotations","","",235,null],[12,"XRRSelectInput","","",235,null],[12,"XRRSetCrtcConfig","","",235,null],[12,"XRRSetCrtcGamma","","",235,null],[12,"XRRSetCrtcTransform","","",235,null],[12,"XRRSetOutputPrimary","","",235,null],[12,"XRRSetPanning","","",235,null],[12,"XRRSetProviderOffloadSink","","",235,null],[12,"XRRSetProviderOutputSource","","",235,null],[12,"XRRSetScreenConfig","","",235,null],[12,"XRRSetScreenConfigAndRate","","",235,null],[12,"XRRSetScreenSize","","",235,null],[12,"XRRSizes","","",235,null],[12,"XRRTimes","","",235,null],[12,"XRRUpdateConfiguration","","",235,null],[6,"Connection","","",null,null],[6,"Rotation","","",null,null],[6,"SizeID","","",null,null],[6,"SubpixelOrder","","",null,null],[6,"RROutput","","",null,null],[6,"RRCrtc","","",null,null],[6,"RRMode","","",null,null],[6,"RRProvider","","",null,null],[6,"XRRModeFlags","","",null,null],[17,"RANDR_NAME","","",null,null],[17,"RANDR_MAJOR","","",null,null],[17,"RANDR_MINOR","","",null,null],[17,"RRNumberErrors","","",null,null],[17,"RRNumberEvents","","",null,null],[17,"RRNumberRequests","","",null,null],[17,"X_RRQueryVersion","","",null,null],[17,"X_RROldGetScreenInfo","","",null,null],[17,"X_RRSetScreenConfig","","",null,null],[17,"X_RROldScreenChangeSelectInput","","",null,null],[17,"X_RRSelectInput","","",null,null],[17,"X_RRGetScreenInfo","","",null,null],[17,"X_RRGetScreenSizeRange","","",null,null],[17,"X_RRSetScreenSize","","",null,null],[17,"X_RRGetScreenResources","","",null,null],[17,"X_RRGetOutputInfo","","",null,null],[17,"X_RRListOutputProperties","","",null,null],[17,"X_RRQueryOutputProperty","","",null,null],[17,"X_RRConfigureOutputProperty","","",null,null],[17,"X_RRChangeOutputProperty","","",null,null],[17,"X_RRDeleteOutputProperty","","",null,null],[17,"X_RRGetOutputProperty","","",null,null],[17,"X_RRCreateMode","","",null,null],[17,"X_RRDestroyMode","","",null,null],[17,"X_RRAddOutputMode","","",null,null],[17,"X_RRDeleteOutputMode","","",null,null],[17,"X_RRGetCrtcInfo","","",null,null],[17,"X_RRSetCrtcConfig","","",null,null],[17,"X_RRGetCrtcGammaSize","","",null,null],[17,"X_RRGetCrtcGamma","","",null,null],[17,"X_RRSetCrtcGamma","","",null,null],[17,"X_RRGetScreenResourcesCurrent","","",null,null],[17,"X_RRSetCrtcTransform","","",null,null],[17,"X_RRGetCrtcTransform","","",null,null],[17,"X_RRGetPanning","","",null,null],[17,"X_RRSetPanning","","",null,null],[17,"X_RRSetOutputPrimary","","",null,null],[17,"X_RRGetOutputPrimary","","",null,null],[17,"X_RRGetProviders","","",null,null],[17,"X_RRGetProviderInfo","","",null,null],[17,"X_RRSetProviderOffloadSink","","",null,null],[17,"X_RRSetProviderOutputSource","","",null,null],[17,"X_RRListProviderProperties","","",null,null],[17,"X_RRQueryProviderProperty","","",null,null],[17,"X_RRConfigureProviderProperty","","",null,null],[17,"X_RRChangeProviderProperty","","",null,null],[17,"X_RRDeleteProviderProperty","","",null,null],[17,"X_RRGetProviderProperty","","",null,null],[17,"X_RRGetMonitors","","",null,null],[17,"X_RRSetMonitor","","",null,null],[17,"X_RRDeleteMonitor","","",null,null],[17,"RRTransformUnit","","",null,null],[17,"RRTransformScaleUp","","",null,null],[17,"RRTransformScaleDown","","",null,null],[17,"RRTransformProjective","","",null,null],[17,"RRScreenChangeNotifyMask","","",null,null],[17,"RRCrtcChangeNotifyMask","","",null,null],[17,"RROutputChangeNotifyMask","","",null,null],[17,"RROutputPropertyNotifyMask","","",null,null],[17,"RRProviderChangeNotifyMask","","",null,null],[17,"RRProviderPropertyNotifyMask","","",null,null],[17,"RRResourceChangeNotifyMask","","",null,null],[17,"RRScreenChangeNotify","","",null,null],[17,"RRNotify","","",null,null],[17,"RRNotify_CrtcChange","","",null,null],[17,"RRNotify_OutputChange","","",null,null],[17,"RRNotify_OutputProperty","","",null,null],[17,"RRNotify_ProviderChange","","",null,null],[17,"RRNotify_ProviderProperty","","",null,null],[17,"RRNotify_ResourceChange","","",null,null],[17,"RR_Rotate_0","","",null,null],[17,"RR_Rotate_90","","",null,null],[17,"RR_Rotate_180","","",null,null],[17,"RR_Rotate_270","","",null,null],[17,"RR_Reflect_X","","",null,null],[17,"RR_Reflect_Y","","",null,null],[17,"RRSetConfigSuccess","","",null,null],[17,"RRSetConfigInvalidConfigTime","","",null,null],[17,"RRSetConfigInvalidTime","","",null,null],[17,"RRSetConfigFailed","","",null,null],[17,"RR_HSyncPositive","","",null,null],[17,"RR_HSyncNegative","","",null,null],[17,"RR_VSyncPositive","","",null,null],[17,"RR_VSyncNegative","","",null,null],[17,"RR_Interlace","","",null,null],[17,"RR_DoubleScan","","",null,null],[17,"RR_CSync","","",null,null],[17,"RR_CSyncPositive","","",null,null],[17,"RR_CSyncNegative","","",null,null],[17,"RR_HSkewPresent","","",null,null],[17,"RR_BCast","","",null,null],[17,"RR_PixelMultiplex","","",null,null],[17,"RR_DoubleClock","","",null,null],[17,"RR_ClockDivideBy2","","",null,null],[17,"RR_Connected","","",null,null],[17,"RR_Disconnected","","",null,null],[17,"RR_UnknownConnection","","",null,null],[17,"BadRROutput","","",null,null],[17,"BadRRCrtc","","",null,null],[17,"BadRRMode","","",null,null],[17,"BadRRProvider","","",null,null],[17,"RR_PROPERTY_BACKLIGHT","","",null,null],[17,"RR_PROPERTY_RANDR_EDID","","",null,null],[17,"RR_PROPERTY_SIGNAL_FORMAT","","",null,null],[17,"RR_PROPERTY_SIGNAL_PROPERTIES","","",null,null],[17,"RR_PROPERTY_CONNECTOR_TYPE","","",null,null],[17,"RR_PROPERTY_CONNECTOR_NUMBER","","",null,null],[17,"RR_PROPERTY_COMPATIBILITY_LIST","","",null,null],[17,"RR_PROPERTY_CLONE_LIST","","",null,null],[17,"RR_PROPERTY_BORDER","","",null,null],[17,"RR_PROPERTY_BORDER_DIMENSIONS","","",null,null],[17,"RR_PROPERTY_GUID","","",null,null],[17,"RR_PROPERTY_RANDR_TILE","","",null,null],[17,"RR_Capability_None","","",null,null],[17,"RR_Capability_SourceOutput","","",null,null],[17,"RR_Capability_SinkOutput","","",null,null],[17,"RR_Capability_SourceOffload","","",null,null],[17,"RR_Capability_SinkOffload","","",null,null],[11,"open","","",214,{"o":{"g":["xrandr","openerror"],"n":"result"}}],[11,"fmt","","",215,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",215,{"i":[{"n":"self"}],"o":{"n":"xrrscreensize"}}],[11,"eq","","",215,{"i":[{"n":"self"},{"n":"xrrscreensize"}],"o":{"n":"bool"}}],[11,"ne","","",215,{"i":[{"n":"self"},{"n":"xrrscreensize"}],"o":{"n":"bool"}}],[11,"fmt","","",216,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",216,{"i":[{"n":"self"}],"o":{"n":"xrrmodeinfo"}}],[11,"eq","","",216,{"i":[{"n":"self"},{"n":"xrrmodeinfo"}],"o":{"n":"bool"}}],[11,"ne","","",216,{"i":[{"n":"self"},{"n":"xrrmodeinfo"}],"o":{"n":"bool"}}],[11,"fmt","","",217,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",217,{"i":[{"n":"self"}],"o":{"n":"xrrscreenresources"}}],[11,"eq","","",217,{"i":[{"n":"self"},{"n":"xrrscreenresources"}],"o":{"n":"bool"}}],[11,"ne","","",217,{"i":[{"n":"self"},{"n":"xrrscreenresources"}],"o":{"n":"bool"}}],[11,"fmt","","",218,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",218,{"i":[{"n":"self"}],"o":{"n":"xrroutputinfo"}}],[11,"eq","","",218,{"i":[{"n":"self"},{"n":"xrroutputinfo"}],"o":{"n":"bool"}}],[11,"ne","","",218,{"i":[{"n":"self"},{"n":"xrroutputinfo"}],"o":{"n":"bool"}}],[11,"fmt","","",219,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",219,{"i":[{"n":"self"}],"o":{"n":"xrrpropertyinfo"}}],[11,"eq","","",219,{"i":[{"n":"self"},{"n":"xrrpropertyinfo"}],"o":{"n":"bool"}}],[11,"ne","","",219,{"i":[{"n":"self"},{"n":"xrrpropertyinfo"}],"o":{"n":"bool"}}],[11,"fmt","","",220,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",220,{"i":[{"n":"self"}],"o":{"n":"xrrcrtcinfo"}}],[11,"eq","","",220,{"i":[{"n":"self"},{"n":"xrrcrtcinfo"}],"o":{"n":"bool"}}],[11,"ne","","",220,{"i":[{"n":"self"},{"n":"xrrcrtcinfo"}],"o":{"n":"bool"}}],[11,"fmt","","",221,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",221,{"i":[{"n":"self"}],"o":{"n":"xrrcrtcgamma"}}],[11,"eq","","",221,{"i":[{"n":"self"},{"n":"xrrcrtcgamma"}],"o":{"n":"bool"}}],[11,"ne","","",221,{"i":[{"n":"self"},{"n":"xrrcrtcgamma"}],"o":{"n":"bool"}}],[11,"fmt","","",222,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",222,{"i":[{"n":"self"}],"o":{"n":"xrrcrtctransformattributes"}}],[11,"eq","","",222,{"i":[{"n":"self"},{"n":"xrrcrtctransformattributes"}],"o":{"n":"bool"}}],[11,"ne","","",222,{"i":[{"n":"self"},{"n":"xrrcrtctransformattributes"}],"o":{"n":"bool"}}],[11,"fmt","","",223,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",223,{"i":[{"n":"self"}],"o":{"n":"xrrpanning"}}],[11,"eq","","",223,{"i":[{"n":"self"},{"n":"xrrpanning"}],"o":{"n":"bool"}}],[11,"ne","","",223,{"i":[{"n":"self"},{"n":"xrrpanning"}],"o":{"n":"bool"}}],[11,"fmt","","",224,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",224,{"i":[{"n":"self"}],"o":{"n":"xrrproviderresources"}}],[11,"eq","","",224,{"i":[{"n":"self"},{"n":"xrrproviderresources"}],"o":{"n":"bool"}}],[11,"ne","","",224,{"i":[{"n":"self"},{"n":"xrrproviderresources"}],"o":{"n":"bool"}}],[11,"fmt","","",225,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",225,{"i":[{"n":"self"}],"o":{"n":"xrrproviderinfo"}}],[11,"eq","","",225,{"i":[{"n":"self"},{"n":"xrrproviderinfo"}],"o":{"n":"bool"}}],[11,"ne","","",225,{"i":[{"n":"self"},{"n":"xrrproviderinfo"}],"o":{"n":"bool"}}],[11,"fmt","","",226,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",226,{"i":[{"n":"self"}],"o":{"n":"xrrmonitorinfo"}}],[11,"eq","","",226,{"i":[{"n":"self"},{"n":"xrrmonitorinfo"}],"o":{"n":"bool"}}],[11,"ne","","",226,{"i":[{"n":"self"},{"n":"xrrmonitorinfo"}],"o":{"n":"bool"}}],[11,"fmt","","",227,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",227,{"i":[{"n":"self"}],"o":{"n":"xrrscreenchangenotifyevent"}}],[11,"eq","","",227,{"i":[{"n":"self"},{"n":"xrrscreenchangenotifyevent"}],"o":{"n":"bool"}}],[11,"ne","","",227,{"i":[{"n":"self"},{"n":"xrrscreenchangenotifyevent"}],"o":{"n":"bool"}}],[11,"fmt","","",228,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",228,{"i":[{"n":"self"}],"o":{"n":"xrrnotifyevent"}}],[11,"eq","","",228,{"i":[{"n":"self"},{"n":"xrrnotifyevent"}],"o":{"n":"bool"}}],[11,"ne","","",228,{"i":[{"n":"self"},{"n":"xrrnotifyevent"}],"o":{"n":"bool"}}],[11,"fmt","","",229,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",229,{"i":[{"n":"self"}],"o":{"n":"xrroutputchangenotifyevent"}}],[11,"eq","","",229,{"i":[{"n":"self"},{"n":"xrroutputchangenotifyevent"}],"o":{"n":"bool"}}],[11,"ne","","",229,{"i":[{"n":"self"},{"n":"xrroutputchangenotifyevent"}],"o":{"n":"bool"}}],[11,"fmt","","",230,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",230,{"i":[{"n":"self"}],"o":{"n":"xrrcrtcchangenotifyevent"}}],[11,"eq","","",230,{"i":[{"n":"self"},{"n":"xrrcrtcchangenotifyevent"}],"o":{"n":"bool"}}],[11,"ne","","",230,{"i":[{"n":"self"},{"n":"xrrcrtcchangenotifyevent"}],"o":{"n":"bool"}}],[11,"fmt","","",231,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",231,{"i":[{"n":"self"}],"o":{"n":"xrroutputpropertynotifyevent"}}],[11,"eq","","",231,{"i":[{"n":"self"},{"n":"xrroutputpropertynotifyevent"}],"o":{"n":"bool"}}],[11,"ne","","",231,{"i":[{"n":"self"},{"n":"xrroutputpropertynotifyevent"}],"o":{"n":"bool"}}],[11,"fmt","","",232,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",232,{"i":[{"n":"self"}],"o":{"n":"xrrproviderchangenotifyevent"}}],[11,"eq","","",232,{"i":[{"n":"self"},{"n":"xrrproviderchangenotifyevent"}],"o":{"n":"bool"}}],[11,"ne","","",232,{"i":[{"n":"self"},{"n":"xrrproviderchangenotifyevent"}],"o":{"n":"bool"}}],[11,"fmt","","",233,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",233,{"i":[{"n":"self"}],"o":{"n":"xrrproviderpropertynotifyevent"}}],[11,"eq","","",233,{"i":[{"n":"self"},{"n":"xrrproviderpropertynotifyevent"}],"o":{"n":"bool"}}],[11,"ne","","",233,{"i":[{"n":"self"},{"n":"xrrproviderpropertynotifyevent"}],"o":{"n":"bool"}}],[11,"fmt","","",234,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",234,{"i":[{"n":"self"}],"o":{"n":"xrrresourcechangenotifyevent"}}],[11,"eq","","",234,{"i":[{"n":"self"},{"n":"xrrresourcechangenotifyevent"}],"o":{"n":"bool"}}],[11,"ne","","",234,{"i":[{"n":"self"},{"n":"xrrresourcechangenotifyevent"}],"o":{"n":"bool"}}],[11,"as_mut","x11_dl::xlib","",99,{"i":[{"n":"self"}],"o":{"n":"xrrscreenchangenotifyevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xrrscreenchangenotifyevent"}}],[11,"from","","",99,{"i":[{"n":"xrrscreenchangenotifyevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xrrscreenchangenotifyevent"}],"o":{"n":"xevent"}}],[11,"from","x11_dl::xrandr","",227,{"i":[{"n":"xevent"}],"o":{"n":"xrrscreenchangenotifyevent"}}],[11,"from","","",227,{"i":[{"n":"xevent"}],"o":{"n":"xrrscreenchangenotifyevent"}}],[11,"as_mut","x11_dl::xlib","",99,{"i":[{"n":"self"}],"o":{"n":"xrrnotifyevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xrrnotifyevent"}}],[11,"from","","",99,{"i":[{"n":"xrrnotifyevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xrrnotifyevent"}],"o":{"n":"xevent"}}],[11,"from","x11_dl::xrandr","",228,{"i":[{"n":"xevent"}],"o":{"n":"xrrnotifyevent"}}],[11,"from","","",228,{"i":[{"n":"xevent"}],"o":{"n":"xrrnotifyevent"}}],[11,"as_mut","x11_dl::xlib","",99,{"i":[{"n":"self"}],"o":{"n":"xrroutputchangenotifyevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xrroutputchangenotifyevent"}}],[11,"from","","",99,{"i":[{"n":"xrroutputchangenotifyevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xrroutputchangenotifyevent"}],"o":{"n":"xevent"}}],[11,"from","x11_dl::xrandr","",229,{"i":[{"n":"xevent"}],"o":{"n":"xrroutputchangenotifyevent"}}],[11,"from","","",229,{"i":[{"n":"xevent"}],"o":{"n":"xrroutputchangenotifyevent"}}],[11,"as_mut","x11_dl::xlib","",99,{"i":[{"n":"self"}],"o":{"n":"xrrcrtcchangenotifyevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xrrcrtcchangenotifyevent"}}],[11,"from","","",99,{"i":[{"n":"xrrcrtcchangenotifyevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xrrcrtcchangenotifyevent"}],"o":{"n":"xevent"}}],[11,"from","x11_dl::xrandr","",230,{"i":[{"n":"xevent"}],"o":{"n":"xrrcrtcchangenotifyevent"}}],[11,"from","","",230,{"i":[{"n":"xevent"}],"o":{"n":"xrrcrtcchangenotifyevent"}}],[11,"as_mut","x11_dl::xlib","",99,{"i":[{"n":"self"}],"o":{"n":"xrroutputpropertynotifyevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xrroutputpropertynotifyevent"}}],[11,"from","","",99,{"i":[{"n":"xrroutputpropertynotifyevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xrroutputpropertynotifyevent"}],"o":{"n":"xevent"}}],[11,"from","x11_dl::xrandr","",231,{"i":[{"n":"xevent"}],"o":{"n":"xrroutputpropertynotifyevent"}}],[11,"from","","",231,{"i":[{"n":"xevent"}],"o":{"n":"xrroutputpropertynotifyevent"}}],[11,"as_mut","x11_dl::xlib","",99,{"i":[{"n":"self"}],"o":{"n":"xrrproviderchangenotifyevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xrrproviderchangenotifyevent"}}],[11,"from","","",99,{"i":[{"n":"xrrproviderchangenotifyevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xrrproviderchangenotifyevent"}],"o":{"n":"xevent"}}],[11,"from","x11_dl::xrandr","",232,{"i":[{"n":"xevent"}],"o":{"n":"xrrproviderchangenotifyevent"}}],[11,"from","","",232,{"i":[{"n":"xevent"}],"o":{"n":"xrrproviderchangenotifyevent"}}],[11,"as_mut","x11_dl::xlib","",99,{"i":[{"n":"self"}],"o":{"n":"xrrproviderpropertynotifyevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xrrproviderpropertynotifyevent"}}],[11,"from","","",99,{"i":[{"n":"xrrproviderpropertynotifyevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xrrproviderpropertynotifyevent"}],"o":{"n":"xevent"}}],[11,"from","x11_dl::xrandr","",233,{"i":[{"n":"xevent"}],"o":{"n":"xrrproviderpropertynotifyevent"}}],[11,"from","","",233,{"i":[{"n":"xevent"}],"o":{"n":"xrrproviderpropertynotifyevent"}}],[11,"as_mut","x11_dl::xlib","",99,{"i":[{"n":"self"}],"o":{"n":"xrrresourcechangenotifyevent"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"xrrresourcechangenotifyevent"}}],[11,"from","","",99,{"i":[{"n":"xrrresourcechangenotifyevent"}],"o":{"n":"xevent"}}],[11,"from","","",99,{"i":[{"n":"xrrresourcechangenotifyevent"}],"o":{"n":"xevent"}}],[11,"from","x11_dl::xrandr","",234,{"i":[{"n":"xevent"}],"o":{"n":"xrrresourcechangenotifyevent"}}],[11,"from","","",234,{"i":[{"n":"xevent"}],"o":{"n":"xrrresourcechangenotifyevent"}}],[11,"open","","",235,{"o":{"g":["xrandr_2_2_0","openerror"],"n":"result"}}]],"paths":[[4,"OpenErrorKind"],[3,"OpenError"],[3,"Xlib"],[3,"XAnyEvent"],[3,"XButtonEvent"],[3,"XCirculateEvent"],[3,"XCirculateRequestEvent"],[3,"XClientMessageEvent"],[3,"XColormapEvent"],[3,"XConfigureEvent"],[3,"XConfigureRequestEvent"],[3,"XCreateWindowEvent"],[3,"XCrossingEvent"],[3,"XDestroyWindowEvent"],[3,"XErrorEvent"],[3,"XExposeEvent"],[3,"XFocusChangeEvent"],[3,"XGraphicsExposeEvent"],[3,"XGravityEvent"],[3,"XKeyEvent"],[3,"XKeymapEvent"],[3,"XMapEvent"],[3,"XMappingEvent"],[3,"XMapRequestEvent"],[3,"XMotionEvent"],[3,"XNoExposeEvent"],[3,"XPropertyEvent"],[3,"XReparentEvent"],[3,"XResizeRequestEvent"],[3,"XSelectionClearEvent"],[3,"XSelectionEvent"],[3,"XSelectionRequestEvent"],[3,"XUnmapEvent"],[3,"XVisibilityEvent"],[3,"_XkbCompatMapRec"],[3,"_XkbDesc"],[3,"_XkbIndicatorRec"],[3,"_XkbKeyAliasRec"],[3,"_XkbKeyNameRec"],[3,"_XkbNamesRec"],[3,"XkbAnyEvent"],[3,"XkbNewKeyboardNotifyEvent"],[3,"_XkbMapNotifyEvent"],[3,"XkbStateNotifyEvent"],[3,"_XkbControlsNotifyEvent"],[3,"XkbIndicatorNotifyEvent"],[3,"_XkbNamesNotifyEvent"],[3,"XkbCompatMapNotifyEvent"],[3,"XkbBellNotifyEvent"],[3,"XkbActionMessageEvent"],[3,"XkbAccessXNotifyEvent"],[3,"_XkbExtensionDeviceNotifyEvent"],[3,"Depth"],[3,"Screen"],[3,"ScreenFormat"],[3,"Visual"],[3,"XArc"],[3,"XChar2b"],[3,"XCharStruct"],[3,"XClassHint"],[3,"XColor"],[3,"XComposeStatus"],[3,"XExtCodes"],[3,"XExtData"],[3,"XFontProp"],[3,"XFontSetExtents"],[3,"XFontStruct"],[3,"XGCValues"],[3,"XGenericEventCookie"],[3,"XHostAddress"],[3,"XIconSize"],[3,"XImage"],[3,"XKeyboardControl"],[3,"XKeyboardState"],[3,"XmbTextItem"],[3,"XModifierKeymap"],[3,"XOMCharSetList"],[3,"XPixmapFormatValues"],[3,"XPoint"],[3,"XRectangle"],[3,"XrmOptionDescRec"],[3,"XrmValue"],[3,"XSegment"],[3,"XSetWindowAttributes"],[3,"XSizeHints"],[3,"XStandardColormap"],[3,"XTextItem"],[3,"XTextItem16"],[3,"XTextProperty"],[3,"XTimeCoord"],[3,"XVisualInfo"],[3,"XwcTextItem"],[3,"XWindowAttributes"],[3,"XWindowChanges"],[3,"XWMHints"],[3,"XIMCallback"],[3,"XICCallback"],[3,"AspectRatio"],[3,"ImageFns"],[19,"XEvent"],[3,"XkbEvent"],[3,"ClientMessageData"],[3,"Xext"],[3,"Glx"],[3,"Xcursor"],[3,"_XcursorAnimate"],[3,"_XcursorChunkHeader"],[3,"_XcursorComment"],[3,"_XcursorComments"],[3,"_XcursorCursors"],[3,"_XcursorFile"],[3,"_XcursorFileHeader"],[3,"_XcursorFileToc"],[3,"_XcursorImage"],[3,"_XcursorImages"],[3,"Xf86vmode"],[3,"XF86VidModeGamma"],[3,"XF86VidModeModeInfo"],[3,"XF86VidModeModeLine"],[3,"XF86VidModeMonitor"],[3,"XF86VidModeSyncRange"],[3,"XF86VidModeNotifyEvent"],[3,"Xft"],[3,"XftFont"],[3,"XftColor"],[3,"XftCharSpec"],[3,"XftCharFontSpec"],[3,"XftFontSet"],[3,"XftGlyphSpec"],[3,"XftGlyphFontSpec"],[4,"FcEndian"],[4,"FcResult"],[3,"Xlib"],[3,"XineramaScreenInfo"],[3,"XPanoramiXInfo"],[3,"XInput"],[3,"XDevice"],[3,"XDeviceControl"],[3,"XDeviceInfo"],[3,"XDeviceState"],[3,"XDeviceTimeCoord"],[3,"XExtensionVersion"],[3,"XFeedbackControl"],[3,"XFeedbackState"],[3,"XInputClass"],[3,"XInputClassInfo"],[3,"XInput2"],[3,"XIAddMasterInfo"],[3,"XIRemoveMasterInfo"],[3,"XIAttachSlaveInfo"],[3,"XIDetachSlaveInfo"],[3,"XIAnyHierarchyChangeInfo"],[3,"XIModifierState"],[3,"XIButtonState"],[3,"XIValuatorState"],[3,"XIEventMask"],[3,"XIAnyClassInfo"],[3,"XIButtonClassInfo"],[3,"XIKeyClassInfo"],[3,"XIValuatorClassInfo"],[3,"XIScrollClassInfo"],[3,"XITouchClassInfo"],[3,"XIDeviceInfo"],[3,"XIGrabModifiers"],[3,"XIBarrierReleasePointerInfo"],[3,"XIEvent"],[3,"XIHierarchyInfo"],[3,"XIHierarchyEvent"],[3,"XIDeviceChangedEvent"],[3,"XIDeviceEvent"],[3,"XIRawEvent"],[3,"XIEnterEvent"],[3,"XIPropertyEvent"],[3,"XITouchOwnershipEvent"],[3,"XIBarrierEvent"],[3,"Xmu"],[3,"Xf86vmode"],[3,"XRecordClientInfo"],[3,"XRecordExtRange"],[3,"XRecordInterceptData"],[3,"XRecordRange"],[3,"XRecordRange8"],[3,"XRecordRange16"],[3,"XRecordState"],[3,"Xrender"],[3,"_XAnimCursor"],[3,"_XCircle"],[3,"_XConicalGradient"],[3,"_XFilters"],[3,"_XGlyphElt8"],[3,"_XGlyphElt16"],[3,"_XGlyphElt32"],[3,"_XGlyphInfo"],[3,"_XIndexValue"],[3,"_XLinearGradient"],[3,"_XLineFixed"],[3,"_XPointDouble"],[3,"_XPointFixed"],[3,"_XRadialGradient"],[3,"XRenderColor"],[3,"XRenderDirectFormat"],[3,"XRenderPictFormat"],[3,"_XRenderPictureAttributes"],[3,"_XSpanFix"],[3,"_XTrap"],[3,"_XTrapezoid"],[3,"_XTriangle"],[3,"_XTransform"],[3,"Xss"],[3,"XScreenSaverInfo"],[3,"XScreenSaverNotifyEvent"],[3,"Xt"],[3,"Xf86vmode"],[3,"Xlib_xcb"],[3,"Xrandr"],[3,"XRRScreenSize"],[3,"XRRModeInfo"],[3,"XRRScreenResources"],[3,"XRROutputInfo"],[3,"XRRPropertyInfo"],[3,"XRRCrtcInfo"],[3,"XRRCrtcGamma"],[3,"XRRCrtcTransformAttributes"],[3,"XRRPanning"],[3,"XRRProviderResources"],[3,"XRRProviderInfo"],[3,"XRRMonitorInfo"],[3,"XRRScreenChangeNotifyEvent"],[3,"XRRNotifyEvent"],[3,"XRROutputChangeNotifyEvent"],[3,"XRRCrtcChangeNotifyEvent"],[3,"XRROutputPropertyNotifyEvent"],[3,"XRRProviderChangeNotifyEvent"],[3,"XRRProviderPropertyNotifyEvent"],[3,"XRRResourceChangeNotifyEvent"],[3,"Xrandr_2_2_0"]]};
initSearch(searchIndex);
