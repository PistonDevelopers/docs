var searchIndex = {};
searchIndex["arrayvec"] = {"doc":"arrayvec provides the types `ArrayVec` and `ArrayString`:  array-backed vector and string types, which store their contents inline.","items":[[3,"ArrayString","arrayvec","A string with a fixed capacity.",null,null],[3,"CapacityError","","Error value indicating insufficient capacity",null,null],[3,"ArrayVec","","A vector with a fixed capacity.",null,null],[3,"IntoIter","","By-value iterator for `ArrayVec`.",null,null],[3,"Drain","","A draining iterator for `ArrayVec`.",null,null],[11,"default","","Return an empty `ArrayString`",0,{"inputs":[],"output":{"name":"arraystring"}}],[11,"new","","Create a new empty `ArrayString`.",0,{"inputs":[],"output":{"name":"arraystring"}}],[11,"from","","Create a new `ArrayString` from a `str`.",0,{"inputs":[{"name":"str"}],"output":{"generics":["capacityerror"],"name":"result"}}],[11,"from_byte_string","","Create a new `ArrayString` from a byte string literal.",0,{"inputs":[{"name":"a"}],"output":{"generics":["utf8error"],"name":"result"}}],[11,"capacity","","Return the capacity of the `ArrayString`.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_full","","Return if the `ArrayString` is completely filled.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Adds the given char to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[11,"try_push","","Adds the given char to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["capacityerror"],"name":"result"}}],[11,"push_str","","Adds the given string slice to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"try_push_str","","Adds the given string slice to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["capacityerror"],"name":"result"}}],[11,"pop","","Removes the last character from the string and returns it.",0,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"truncate","","Shortens this `ArrayString` to the specified length.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"remove","","Removes a `char` from this `ArrayString` at a byte position and returns it.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"char"}}],[11,"clear","","Make the string empty.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"set_len","","Set the strings’s length.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"as_str","","Return a string slice of the whole `ArrayString`.",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"borrow","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_char","","",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_str","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"arraystring"}}],[11,"clone_from","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"capacityerror"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"ordering"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"new","","Create a new `CapacityError` from `element`.",1,{"inputs":[{"name":"t"}],"output":{"name":"capacityerror"}}],[11,"element","","Extract the overflowing element",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"simplify","","Convert into a `CapacityError` that does not carry an element.",1,{"inputs":[{"name":"self"}],"output":{"name":"capacityerror"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Array","","Trait for fixed size arrays.",null,null],[16,"Item","","The array’s element type",2,null],[8,"RangeArgument","","`RangeArgument` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"end","","End index (exclusive)",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new empty `ArrayVec`.",4,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"len","","Return the number of elements in the `ArrayVec`.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","Return the capacity of the `ArrayVec`.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_full","","Return if the `ArrayVec` is completely filled.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push `element` to the end of the vector.",4,null],[11,"try_push","","Push `element` to the end of the vector.",4,null],[11,"push_unchecked","","Push `element` to the end of the vector without checking the capacity.",4,null],[11,"insert","","Insert `element` at position `index`.",4,null],[11,"try_insert","","Insert `element` at position `index`.",4,null],[11,"pop","","Remove the last element in the vector and return it.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"swap_remove","","Remove the element at `index` and swap the last element into its place.",4,null],[11,"swap_pop","","Remove the element at `index` and swap the last element into its place.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"remove","","Remove the element at `index` and shift down the following elements.",4,null],[11,"pop_at","","Remove the element at `index` and shift down the following elements.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clear","","Remove all elements in the vector.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"retain","","Retains only the elements specified by the predicate.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"set_len","","Set the vector’s length without dropping or moving out elements",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"drain","","Create a draining iterator that removes the specified range in the vector and yields the removed items from start to end. The element range is removed even if the iterator is not consumed until the end.",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_inner","","Return the inner fixed size array, if it is full to its capacity.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"dispose","","Dispose of `self` without the overwriting that is needed in Drop.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"as_slice","","Return a slice containing all elements of the vector.",4,null],[11,"as_mut_slice","","Return a mutable slice containing all elements of the vector.",4,null],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"from","","",4,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"into_iter","","",4,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"extend","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",4,null],[11,"borrow","","",4,null],[11,"borrow_mut","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Return an empty array",4,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"arrayvec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"arrayvec"}],"output":{"name":"ordering"}}],[11,"write","","",4,null],[11,"flush","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start","","Start index (inclusive)",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"end","","End index (exclusive)",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}]],"paths":[[3,"ArrayString"],[3,"CapacityError"],[8,"Array"],[8,"RangeArgument"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[0,"example_generated","bitflags","This module shows an example of code generated by the macro. IT MUST NOT BE USED OUTSIDE THIS CRATE.",null,null],[3,"Flags","bitflags::example_generated","This is the same `Flags` struct defined in the crate level example. Note that this struct is just for documentation purposes only, it must not be used outside this crate.",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FLAG_A","","",0,null],[18,"FLAG_B","","",0,null],[18,"FLAG_C","","",0,null],[18,"FLAG_ABC","","",0,null],[11,"empty","","Returns an empty set of flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",0,{"inputs":[{"name":"u32"}],"output":{"generics":["flags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",0,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",0,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",0,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"paths":[[3,"Flags"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either big-endian or little-endian order.","items":[[4,"Error","byteorder","An error type for reading bytes.",null,null],[13,"UnexpectedEOF","","An unexpected EOF.",0,null],[13,"Io","","Any underlying IO error that occurs while reading bytes.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[6,"Result","","A short-hand for `result::Result<T, byteorder::Error>`.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",3,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",3,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",3,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",3,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",3,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",3,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",3,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",3,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",3,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",3,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",3,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",3,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",3,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",3,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",3,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",3,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",3,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",3,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",3,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u16","","",5,null],[11,"read_u32","","",5,null],[11,"read_u64","","",5,null],[11,"read_uint","","",5,null],[11,"write_u16","","",5,null],[11,"write_u32","","",5,null],[11,"write_u64","","",5,null],[11,"write_uint","","",5,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["conrod"] = {"doc":"Conrod","items":[[3,"Ui","conrod","`Ui` is the most important type within Conrod and is necessary for rendering and maintaining widget state. # Ui Handles the following: * Contains the state of all widgets which can be indexed via their widget::Id. * Stores rendering state for each widget until the end of each render cycle. * Contains the theme used for default styling of the widgets. * Maintains the latest user input state (for mouse and keyboard). * Maintains the latest window dimensions.",null,null],[12,"theme","","The theme used to set default styling for widgets.",0,null],[12,"window","","An index into the root widget of the graph, representing the entire window.",0,null],[12,"fonts","","Manages all fonts that have been loaded by the user.",0,null],[12,"win_w","","Window width.",0,null],[12,"win_h","","Window height.",0,null],[3,"UiCell","","A wrapper around the `Ui` that restricts the user from mutating the `Ui` in certain ways while in the scope of the `Ui::set_widgets` function and within `Widget`s' `update` methods. Using the `UiCell`, users may access the `Ui` immutably (via `Deref`) however they wish, however they may only mutate the `Ui` via the `&mut self` methods provided by the `UiCell`.",null,null],[3,"UiBuilder","","A constructor type for building a `Ui` instance with a set of optional parameters.",null,null],[12,"window_dimensions","","The initial dimensions of the window in which the `Ui` exists.",1,null],[12,"maybe_theme","","The theme used to set default styling for widgets.",1,null],[12,"maybe_widgets_capacity","","An estimation of the maximum number of widgets that will be used with this `Ui` instance.",1,null],[4,"Bordering","","To be used as a parameter for defining the aesthetic of the widget border.",null,null],[13,"Border","","Border width and color.",2,null],[13,"NoBorder","","No border.",2,null],[0,"backend","","Feature-gated, backend-specific functionality.",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bordering"}}],[0,"color","","A library providing simple `Color` and `Gradient` types along with useful transformations and presets.",null,null],[3,"Hsla","conrod::color","The parts of HSL along with an alpha for transparency.",null,null],[12,"0","","",3,null],[12,"1","","",3,null],[12,"2","","",3,null],[12,"3","","",3,null],[3,"Rgba","","The parts of RGB along with an alpha for transparency.",null,null],[12,"0","","",4,null],[12,"1","","",4,null],[12,"2","","",4,null],[12,"3","","",4,null],[4,"Color","","Color supporting RGB and HSL variants.",null,null],[13,"Rgba","","Red, Green, Blue, Alpha - All values' scales represented between 0.0 and 1.0.",5,null],[13,"Hsla","","Hue, Saturation, Lightness, Alpha - all valuess scales represented between 0.0 and 1.0.",5,null],[4,"Gradient","","Linear or Radial Gradient.",null,null],[13,"Linear","","Takes a start and end point and then a series of color stops that indicate how to interpolate between the start and end points.",6,null],[13,"Radial","","First takes a start point and inner radius. Then takes an end point and outer radius. It then takes a series of color stops that indicate how to interpolate between the inner and outer circles.",6,null],[5,"rgba","","Create RGB colors with an alpha component for transparency. The alpha component is specified with numbers between 0 and 1.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"color"}}],[5,"rgb","","Create RGB colors from numbers between 0.0 and 1.0.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"color"}}],[5,"rgba_bytes","","Create RGB colors from numbers between 0 and 255 inclusive. The alpha component is specified with numbers between 0 and 1.",null,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"f32"}],"output":{"name":"color"}}],[5,"rgb_bytes","","Create RGB colors from numbers between 0 and 255 inclusive.",null,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"color"}}],[5,"hsla","","Create HSL colors with an alpha component for transparency.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"color"}}],[5,"hsl","","Create HSL colors. This gives you access to colors more like a color wheel, where all hues are arranged in a circle that you specify with radians.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"color"}}],[5,"grayscale","","Produce a gray based on the input. 0.0 is white, 1.0 is black.",null,{"inputs":[{"name":"f32"}],"output":{"name":"color"}}],[5,"greyscale","","Produce a gray based on the input. 0.0 is white, 1.0 is black.",null,{"inputs":[{"name":"f32"}],"output":{"name":"color"}}],[5,"f32_to_byte","","Convert an f32 color to a byte.",null,{"inputs":[{"name":"f32"}],"output":{"name":"u8"}}],[5,"rgb_to_hsl","","Pure function for converting rgb to hsl.",null,null],[5,"hsl_to_rgb","","Pure function for converting hsl to rgb.",null,null],[5,"linear","","Create a linear gradient.",null,null],[5,"radial","","Create a radial gradient. ",null,null],[6,"Colour","","Regional spelling alias.",null,null],[17,"LIGHT_RED","","Scarlet Red - Light - #EF2929                         ",null,null],[17,"RED","","Scarlet Red - Regular - #CC0000                       ",null,null],[17,"DARK_RED","","Scarlet Red - Dark - #A30000                          ",null,null],[17,"LIGHT_ORANGE","","Orange - Light - #FCAF3E                              ",null,null],[17,"ORANGE","","Orange - Regular - #F57900                            ",null,null],[17,"DARK_ORANGE","","Orange - Dark - #CE5C00                               ",null,null],[17,"LIGHT_YELLOW","","Butter - Light - #FCE94F                              ",null,null],[17,"YELLOW","","Butter - Regular - #EDD400                            ",null,null],[17,"DARK_YELLOW","","Butter - Dark - #C4A000                               ",null,null],[17,"LIGHT_GREEN","","Chameleon - Light - #8AE234                           ",null,null],[17,"GREEN","","Chameleon - Regular - #73D216                         ",null,null],[17,"DARK_GREEN","","Chameleon - Dark - #4E9A06                            ",null,null],[17,"LIGHT_BLUE","","Sky Blue - Light - #729FCF                            ",null,null],[17,"BLUE","","Sky Blue - Regular - #3465A4                          ",null,null],[17,"DARK_BLUE","","Sky Blue - Dark - #204A87                             ",null,null],[17,"LIGHT_PURPLE","","Plum - Light - #AD7FA8                                ",null,null],[17,"PURPLE","","Plum - Regular - #75507B                              ",null,null],[17,"DARK_PURPLE","","Plum - Dark - #5C3566                                 ",null,null],[17,"LIGHT_BROWN","","Chocolate - Light - #E9B96E                           ",null,null],[17,"BROWN","","Chocolate - Regular - #C17D11                         ",null,null],[17,"DARK_BROWN","","Chocolate - Dark - #8F5902                            ",null,null],[17,"BLACK","","Straight Black.                                       ",null,null],[17,"WHITE","","Straight White.                                       ",null,null],[17,"LIGHT_GRAY","","Alluminium - Light                                    ",null,null],[17,"GRAY","","Alluminium - Regular                                  ",null,null],[17,"DARK_GRAY","","Alluminium - Dark                                     ",null,null],[17,"LIGHT_GREY","","Aluminium - Light - #EEEEEC                           ",null,null],[17,"GREY","","Aluminium - Regular - #D3D7CF                         ",null,null],[17,"DARK_GREY","","Aluminium - Dark - #BABDB6                            ",null,null],[17,"LIGHT_CHARCOAL","","Charcoal - Light - #888A85                            ",null,null],[17,"CHARCOAL","","Charcoal - Regular - #555753                          ",null,null],[17,"DARK_CHARCOAL","","Charcoal - Dark - #2E3436                             ",null,null],[17,"TRANSPARENT","","Transparent",null,null],[8,"Colorable","","Types that can be colored.",null,null],[10,"color","","Set the color of the widget.",7,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"rgba","","Set the color of the widget from rgba values.",7,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"rgb","","Set the color of the widget from rgb values.",7,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"hsla","","Set the color of the widget from hsla values.",7,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"hsl","","Set the color of the widget from hsl values.",7,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"complement","","Produce a complementary color. The two colors will accent each other. This is the same as rotating the hue by 180 degrees.",5,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"luminance","","Calculate and return the luminance of the Color.",5,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"plain_contrast","","Return either black or white, depending which contrasts the Color the most. This will be useful for determining a readable color for text on any given background Color.",5,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"to_hsl","","Extract the components of a color in the HSL format.",5,{"inputs":[{"name":"self"}],"output":{"name":"hsla"}}],[11,"to_rgb","","Extract the components of a color in the RGB format.",5,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"to_fsa","","Extract the components of a color in the RGB format within a fixed-size array.",5,null],[11,"to_byte_fsa","","Same as `to_fsa`, except r, g, b and a are represented in byte form.",5,null],[11,"with_luminance","","Return the same color but with the given luminance.",5,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"color"}}],[11,"alpha","","Return the same color but with the alpha multiplied by the given alpha.",5,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"color"}}],[11,"with_alpha","","Return the same color but with the given alpha.",5,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"color"}}],[11,"highlighted","","Return a highlighted version of the current Color.",5,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"clicked","","Return a clicked version of the current Color.",5,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"invert","","Return the Color's invert.",5,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"red","","Return the red value.",5,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"green","","Return the green value.",5,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"blue","","Return the blue value.",5,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"set_red","","Set the red value.",5,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"set_green","","Set the green value.",5,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"set_blue","","Set the blue value.",5,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"hsla"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"hsla"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"hsla"}],"output":{"name":"bool"}}],[11,"from","","",3,{"inputs":[{"name":"color"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"hsla"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"from","","",4,{"inputs":[{"name":"color"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"rgba"}],"output":{"name":"self"}}],[11,"into","","",4,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"gradient"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"event","conrod","Contains all types used to describe the input events that `Widget`s may handle.",null,null],[3,"Text","conrod::event","Contains all relevant information for a Text event.",null,null],[12,"string","","All text that was entered as a part of the event.",8,null],[12,"modifiers","","The modifier keys that were down at the time.",8,null],[3,"Motion","","Contains all relevant information for a Motion event.",null,null],[12,"motion","","The type of `Motion` that occurred.",9,null],[12,"modifiers","","The modifier keys that were down at the time.",9,null],[3,"Press","","Contains all relevant information for a Press event.",null,null],[12,"button","","The `Button` that was pressed.",10,null],[12,"modifiers","","The modifier keys that were down at the time.",10,null],[3,"MousePress","","Contains all relevant information for the event where a mouse button was pressed.",null,null],[12,"button","","The mouse button that was pressed.",11,null],[12,"xy","","The location at which the mouse was pressed.",11,null],[12,"modifiers","","The modifier keys that were down at the time.",11,null],[3,"KeyPress","","Contains all relevant information for the event where a keyboard button was pressed.",null,null],[12,"key","","The key that was pressed.",12,null],[12,"modifiers","","The modifier keys that were down at the time.",12,null],[3,"Release","","Contains all relevant information for a Release event.",null,null],[12,"button","","The `Button` that was released.",13,null],[12,"modifiers","","The modifier keys that were down at the time.",13,null],[3,"MouseRelease","","Contains all relevant information for the event where a mouse button was released.",null,null],[12,"button","","The mouse button that was released.",14,null],[12,"xy","","The location at which the mouse was released.",14,null],[12,"modifiers","","The modifier keys that were down at the time.",14,null],[3,"KeyRelease","","Contains all relevant information for the event where a keyboard button was release.",null,null],[12,"key","","The key that was release.",15,null],[12,"modifiers","","The modifier keys that were down at the time.",15,null],[3,"Drag","","Contains all the relevant information for a mouse drag.",null,null],[12,"button","","Which mouse button was being held during the drag",16,null],[12,"origin","","The point from which the current series of drag events began.",16,null],[12,"from","","The point from which this drag event began.",16,null],[12,"to","","The point at which this drag event ended.",16,null],[12,"delta_xy","","The magnitude of the vector between `from` and `to`.",16,null],[12,"total_delta_xy","","The magnitude of the vector between `origin` and `to`.",16,null],[12,"modifiers","","Which modifier keys are being held during the mouse drag.",16,null],[3,"Click","","Contains all the relevant information for a mouse click.",null,null],[12,"button","","Which mouse button was clicked",17,null],[12,"xy","","The position at which the mouse was released.",17,null],[12,"modifiers","","Which modifier keys, if any, that were being held down when the user clicked",17,null],[3,"DoubleClick","","Contains all the relevant information for a double click.",null,null],[12,"button","","Which mouse button was clicked",18,null],[12,"xy","","The position at which the mouse was released.",18,null],[12,"modifiers","","Which modifier keys, if any, that were being held down when the user clicked",18,null],[3,"Tap","","All relevant information for a touch-screen tap event.",null,null],[12,"id","","The unique identifier of the source of the touch.",19,null],[12,"xy","","The position at which the finger left the screen.",19,null],[3,"Scroll","","Holds all the relevant information about a scroll event",null,null],[12,"x","","The amount of scroll along the x axis.",20,null],[12,"y","","The amount of scroll along the y axis.",20,null],[12,"modifiers","","Which modifier keys, if any, that were being held down while the scroll occured",20,null],[4,"Input","","The event type that is used by conrod to track inputs from the world. Events yielded by polling window backends should be converted to this type. This can be thought of as the event type which is supplied by the window backend to drive the state of the `Ui` forward.",null,null],[13,"Press","","A button on some input device was pressed.",21,null],[13,"Release","","A button on some input device was released.",21,null],[13,"Resize","","The window was received to the given dimensions.",21,null],[13,"Motion","","Some motion input was received (e.g. moving mouse or joystick axis).",21,null],[13,"Touch","","Input from a touch surface/screen.",21,null],[13,"Text","","Text input was received, usually via the keyboard.",21,null],[13,"Focus","","The window was focused or lost focus.",21,null],[13,"Redraw","","The backed requested to redraw.",21,null],[4,"Event","","Enum containing all the events that the `Ui` may provide.",null,null],[13,"Raw","","Represents a raw `input::Input` event.",22,null],[13,"Ui","","Events that have been interpreted from `backend::RawEvent`s by the `Ui`.",22,null],[4,"Ui","","Represents all events interpreted by the `Ui`.",null,null],[13,"Text","","Entered text, along with the widget that was capturing the keyboard at the time.",23,null],[13,"Press","","Some button was pressed, along with the widget that was capturing the device whose button was pressed.",23,null],[13,"Release","","Some button was released, along with the widget that was capturing the device whose button was released.",23,null],[13,"Motion","","Represents all forms of motion input, alongside with the widget that was capturing the mouse at the time.",23,null],[13,"Touch","","Interaction with a touch screen/surface.",23,null],[13,"WindowResized","","The window's dimensions were resized.",23,null],[13,"Click","","Represents a pointing device being pressed and subsequently released while over the same location.",23,null],[13,"DoubleClick","","Two `Click` events with the same `button` and `xy` occurring within a duration that is less that the `theme.double_click_threshold`.",23,null],[13,"Tap","","A user tapped a touch screen/surface.",23,null],[13,"Drag","","Represents a pointing device button being pressed and a subsequent movement of the mouse.",23,null],[13,"Scroll","","A generic scroll event.",23,null],[13,"WidgetCapturesInputSource","","Indicates that the given widget has captured the given user input source.",23,null],[13,"WidgetUncapturesInputSource","","Indicates that the given widget has released the given user input source.",23,null],[4,"Widget","","Events that apply to a specific widget.",null,null],[13,"Text","","Entered text.",24,null],[13,"Motion","","Represents all forms of motion input.",24,null],[13,"Touch","","Interaction with a touch screen.",24,null],[13,"Press","","Some button was pressed.",24,null],[13,"Release","","Some button was released.",24,null],[13,"Click","","Represents a pointing device being pressed and subsequently released while over the same location.",24,null],[13,"DoubleClick","","Two `Click` events with the same `button` and `xy` occurring within a duration that is less that the `theme.double_click_threshold`.",24,null],[13,"Tap","","A user tapped the widget on a touch screen/surface.",24,null],[13,"Drag","","Represents a pointing device button being pressed and a subsequent movement of the mouse.",24,null],[13,"Scroll","","Represents the amount of scroll that has been applied to this widget.",24,null],[13,"WindowResized","","The window's dimensions were resized.",24,null],[13,"CapturesInputSource","","The widget has captured the given input source.",24,null],[13,"UncapturesInputSource","","The widget has released the input source from capturing.",24,null],[4,"Button","","The different kinds of `Button`s that may be `Press`ed or `Release`d.",null,null],[13,"Keyboard","","A keyboard button.",25,null],[13,"Mouse","","A mouse button along with the location at which it was `Press`ed/`Release`d.",25,null],[13,"Controller","","A controller button.",25,null],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"input"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"ui"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"widget"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"widget"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"widget"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"text"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"text"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"text"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"motion"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"motion"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"motion"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"button"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"press"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"press"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"press"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"mousepress"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"mousepress"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"mousepress"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"keypress"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"keypress"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"keypress"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"release"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"release"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"release"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"mouserelease"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"mouserelease"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"mouserelease"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"keyrelease"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"keyrelease"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"keyrelease"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"drag"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"drag"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"drag"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"click"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"click"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"click"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"doubleclick"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"doubleclick"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"doubleclick"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"tap"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"tap"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"tap"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"scroll"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"scroll"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"scroll"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"relative_to","","Returns a copy of the `Motion` relative to the given `xy`",9,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"motion"}}],[11,"relative_to","","Returns a copy of the Button relative to the given `xy`",25,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"button"}}],[11,"relative_to","","Returns a copy of the Press relative to the given `xy`",10,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"press"}}],[11,"mouse","","If the `Press` event represents the pressing of a mouse button, return `Some`.",10,{"inputs":[{"name":"self"}],"output":{"generics":["mousepress"],"name":"option"}}],[11,"key","","If the `Press` event represents the pressing of keyboard button, return `Some`.",10,{"inputs":[{"name":"self"}],"output":{"generics":["keypress"],"name":"option"}}],[11,"relative_to","","Returns a copy of the Release relative to the given `xy`",13,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"release"}}],[11,"mouse","","If the `Release` event represents the releasing of a mouse button, return `Some`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["mouserelease"],"name":"option"}}],[11,"key","","If the `Release` event represents the release of keyboard button, return `Some`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["keyrelease"],"name":"option"}}],[11,"relative_to","","Returns a copy of the `Tap` relative to the given `xy`",19,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[11,"relative_to","","Returns a copy of the Click relative to the given `xy`",17,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"click"}}],[11,"relative_to","","Returns a copy of the DoubleClick relative to the given `xy`",18,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"doubleclick"}}],[11,"relative_to","","Returns a copy of the Drag relative to the given `xy`",16,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"drag"}}],[11,"from","","",21,{"inputs":[{"name":"motion"}],"output":{"name":"self"}}],[11,"from","","",21,{"inputs":[{"name":"touch"}],"output":{"name":"self"}}],[11,"from","","",22,{"inputs":[{"name":"ui"}],"output":{"name":"self"}}],[11,"from","","",22,{"inputs":[{"name":"input"}],"output":{"name":"self"}}],[11,"from","","",24,{"inputs":[{"name":"text"}],"output":{"name":"self"}}],[11,"from","","",24,{"inputs":[{"name":"motion"}],"output":{"name":"self"}}],[11,"from","","",24,{"inputs":[{"name":"touch"}],"output":{"name":"self"}}],[11,"from","","",24,{"inputs":[{"name":"press"}],"output":{"name":"self"}}],[11,"from","","",24,{"inputs":[{"name":"release"}],"output":{"name":"self"}}],[11,"from","","",24,{"inputs":[{"name":"click"}],"output":{"name":"self"}}],[11,"from","","",24,{"inputs":[{"name":"doubleclick"}],"output":{"name":"self"}}],[11,"from","","",24,{"inputs":[{"name":"tap"}],"output":{"name":"self"}}],[11,"from","","",24,{"inputs":[{"name":"scroll"}],"output":{"name":"self"}}],[11,"from","","",24,{"inputs":[{"name":"drag"}],"output":{"name":"self"}}],[0,"graph","conrod","Conrod uses a directed acyclic graph to manage both storing widgets and describing their relationships.",null,null],[8,"Walker","conrod::graph","A trait providing a variety of useful methods for traversing some graph type G.",null,null],[16,"Index","","The unsigned integer type used for node and edge indices.",26,null],[10,"next","","Fetch the `EdgeIndex` and `NodeIndex` to the next neighbour in our walk through the given Graph.",26,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"next_edge","","The next edge in our walk for the given Graph.",26,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"generics":["edgeindex"],"name":"option"}}],[11,"next_node","","The next node in our walk for the given Graph.",26,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"generics":["nodeindex"],"name":"option"}}],[11,"count","","Counts all the steps in the entire walk of the given graph.",26,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"usize"}}],[11,"last","","Walks the whole walk until reaching and returning the last edge node pair.",26,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"last_edge","","Walks the whole walk until reaching and returning the last edge.",26,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"generics":["edgeindex"],"name":"option"}}],[11,"last_node","","Walks the whole walk until reaching and returning the last node.",26,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"generics":["nodeindex"],"name":"option"}}],[11,"nth","","Walks \"n\" number of steps and produces the resulting edge node pair.",26,{"inputs":[{"name":"self"},{"name":"g"},{"name":"usize"}],"output":{"name":"option"}}],[11,"nth_edge","","Walks \"n\" number of steps and produces the resulting edge.",26,{"inputs":[{"name":"self"},{"name":"g"},{"name":"usize"}],"output":{"generics":["edgeindex"],"name":"option"}}],[11,"nth_node","","Walks \"n\" number of steps and produces the resulting node.",26,{"inputs":[{"name":"self"},{"name":"g"},{"name":"usize"}],"output":{"generics":["nodeindex"],"name":"option"}}],[11,"chain","","Produces a walker that will walk the entirey of `self` before walking the entirey of other.",26,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"chain"}}],[11,"filter","","Creates a walker that applies the predicate to each element returned by this walker. The only elements that will be yielded are those that make the predicate evaluate to true.",26,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"peekable","","Creates a walker that has a `.peek(&graph)` method that returns an optional next neighbor.",26,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates a walker that invokes the predicate on elements until it returns false. Once the predicate returns false, that element and all further elements are yielded.",26,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates a walker that yields elements so long as the predicate returns true. After the predicate returns false for the first time, no further elements will be yielded.",26,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates a walker that skips the first n steps of this walk, and then yields all further steps.",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates a walker that yields the first n steps of this walk.",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"all","","Tests whether the predicate holds true for all steps in the walk.",26,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"name":"bool"}}],[11,"any","","Tests whether any step in the walk satisfies the given predicate.",26,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"name":"bool"}}],[11,"find","","Returns the first edge node index pair satisfying the specified predicate.",26,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_edge","","Returns the edge index satisfying the specified predicate.",26,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"generics":["edgeindex"],"name":"option"}}],[11,"find_node","","Returns the node index satisfying the specified predicate.",26,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"generics":["nodeindex"],"name":"option"}}],[11,"cycle","","Repeats the walker endlessly.",26,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"fold","","Performs a fold operation over the entire walker, returning the eventual state at the end of the walk.",26,{"inputs":[{"name":"self"},{"name":"b"},{"name":"g"},{"name":"f"}],"output":{"name":"b"}}],[11,"inspect","","Creates a walker that calls a function with a reference to each index pair before yielding them. This is often useful for debugging a walker pipeline.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"iter","","Converts the walker into an iterator yielding index pairs.",26,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"iter"}}],[11,"iter_weights","","Converts the walker into an iterator yielding `(&e, &n)`, where `e` is the edge weight for the next `EdgeIndex` and `n` is the node weight for the next `NodeIndex`.",26,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"iterweights"}}],[3,"UniqueWidgetState","","The state type that we'll dynamically cast to and from `Any` for storage within the cache.",null,null],[12,"state","","A Widget's unique \"State\".",27,null],[12,"style","","A Widget's unique \"Style\".",27,null],[3,"Container","","A container for caching a Widget's state inside a Graph Node.",null,null],[12,"maybe_state","","Dynamically stored widget state.",28,null],[12,"type_id","","The unique `TypeId` associated with the `Widget::State`.",28,null],[12,"rect","","The rectangle describing the Widget's area.",28,null],[12,"depth","","The depth at which the widget will be rendered comparatively to its siblings.",28,null],[12,"kid_area","","The area in which child widgets are placed.",28,null],[12,"maybe_floating","","Whether or not the widget is a \"Floating\" widget.",28,null],[12,"crop_kids","","Whether or not children widgets should be cropped to the `kid_area`.",28,null],[12,"maybe_x_scroll_state","","Scroll related state (is only `Some` if this axis is scrollable).",28,null],[12,"maybe_y_scroll_state","","Scroll related state (is only `Some` if this axis is scrollable).",28,null],[12,"instantiation_order_idx","","Represents the Widget's position within the overall instantiation ordering of the widgets.",28,null],[12,"is_over","","A function specified by the widget to use when determining whether or not a point is over it.",28,null],[3,"IsOverFn","","A wrapper around a `widget::IsOverFn` to make implementing `Debug` easier for `Container`.",null,null],[12,"0","","",29,null],[3,"Graph","","Stores the dynamic state of a UI tree of Widgets.",null,null],[4,"Node","","A node for use within the Graph.",null,null],[13,"Widget","","A widget constructed by a user.",30,null],[13,"Placeholder","","A placeholder node - used when reserving a place for a Widget within the Graph.",30,null],[4,"Edge","","An edge between nodes within the UI Graph.",null,null],[13,"Position","","Describes the relative positioning of widgets.",31,null],[13,"Depth","","Describes the rendering order of the widgets.",31,null],[13,"Graphic","","Describes when a widget is used solely as a graphical element for another widget.",31,null],[0,"algo","","This module was created in order to keep the `graph` module clean and focused upon the Graph data structure behaviour.",null,null],[3,"PickWidgets","conrod::graph::algo","A node \"walker\" that yields all widgets under the given `xy` position in order from top to bottom.",null,null],[3,"PickScrollableWidgets","","A node \"walker\" that yields all scrollable widgets under the given `xy` position in order from top to bottom.",null,null],[5,"pick_widgets","","Produces a graph node \"walker\" that yields all widgets under the given `xy` position in order from top to bottom.",null,null],[5,"pick_scrollable_widgets","","Produces a graph node \"walker\" that yields all scrollable widgets under the given `xy` position in order from top to bottom.",null,null],[5,"cropped_area_of_widget","","The rectangle that represents the maximum visible area for the widget with the given index.",null,{"inputs":[{"name":"graph"},{"name":"id"}],"output":{"generics":["rect"],"name":"option"}}],[5,"cropped_area_of_widget_within_depth","","The rectangle that represents the maximum visible area for the widget with the given index.",null,{"inputs":[{"name":"graph"},{"name":"id"},{"name":"id"}],"output":{"generics":["rect"],"name":"option"}}],[5,"kids_bounding_box","","Find the absolute `Rect` that bounds all widgets that are `Depth` children of the widget at the given `idx`.",null,{"inputs":[{"name":"graph"},{"name":"fnvhashset"},{"name":"id"}],"output":{"generics":["rect"],"name":"option"}}],[5,"scroll_offset","","Return the `scroll_offset` for the widget at the given index.",null,{"inputs":[{"name":"graph"},{"name":"id"}],"output":{"name":"point"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"pickwidgets"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"pickscrollablewidgets"}}],[11,"next_including_graphics_children","","The next `widget::Id` under the `xy` location.",32,null],[11,"next","","The `widget::Id` of the next `Widget` under the `xy` location.",32,null],[11,"next","","The `widget::Id` of the next scrollable `Widget` under the `xy` location.",33,null],[0,"depth_order","conrod::graph","Types and functionality related to the calculation of a Graph's rendering depth order.",null,null],[3,"DepthOrder","conrod::graph::depth_order","Contains Node indices in order of depth, starting with the deepest.",null,null],[12,"indices","","The primary Vec storing the DepthOrder's ordered indices.",34,null],[11,"new","","Construct a new empty DepthOrder.",34,{"inputs":[],"output":{"name":"depthorder"}}],[11,"with_node_capacity","","Construct a new empty DepthOrder.",34,{"inputs":[{"name":"usize"}],"output":{"name":"depthorder"}}],[11,"update","","Update the DepthOrder (starting with the deepest) for all nodes in the given Graph.",34,{"inputs":[{"name":"self"},{"name":"graph"},{"name":"id"},{"name":"fnvhashset"}],"output":null}],[6,"EdgeIndex","conrod::graph","An alias for our Graph's Edge Index.",null,null],[6,"IndexPair","","An alias for a tuple containing an associated `Edge/widget::Id` pair.",null,null],[6,"Parents","","A Walker over some node's parent nodes.",null,null],[6,"Children","","A Walker over some node's child nodes.",null,null],[6,"PositionParents","","An alias for the iterator yielding both X and Y Position parents.",null,null],[6,"FilteredChildren","","An alias for some filtered children walker.",null,null],[6,"DepthChildren","","An alias for a Walker over a node's Depth children.",null,null],[6,"XPositionChildren","","An alias for a Walker over a node's X Position children.",null,null],[6,"YPositionChildren","","An alias for a Walker over a node's Y Position children.",null,null],[6,"PositionChildren","","An alias for a Walker over a node's X and Y Position children respectively.",null,null],[6,"GraphicChildren","","An alias for a Walker over a node's Graphic children.",null,null],[6,"RecursiveWalk","","An alias for our Graph's recursive walker.",null,null],[6,"WouldCycle","","An alias for our Graph's WouldCycle error type.",null,null],[17,"NUM_EDGE_VARIANTS","","The number of different variants within the Edge enum.",null,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"isoverfn"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"edge"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"state_and_style","","Borrow the Container's unique widget State and Style if there is any.",28,{"inputs":[{"name":"self"}],"output":{"generics":["uniquewidgetstate"],"name":"option"}}],[11,"unique_widget_state","","Same as Container::state_and_style but accessed using a Widget type parameter instead of the unique State and Style types.",28,{"inputs":[{"name":"self"}],"output":{"generics":["uniquewidgetstate"],"name":"option"}}],[11,"is_widget","","Whether or not the Node is of the Widget variant.",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","A new empty Graph.",35,{"inputs":[],"output":{"name":"self"}}],[11,"with_node_capacity","","A new Graph with the given node capacity.",35,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Removes all Nodes and Edges from the Graph.",35,{"inputs":[{"name":"self"}],"output":null}],[11,"node_count","","The total number of Nodes in the Graph.",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"widget_count","","The total number of Node::Widgets in the Graph.",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"edge_count","","The total number of Edges in the Graph.",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"node_capacity","","The current capacity for the Graph's internal node `Vec`.",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add_placeholder","","Add a new placeholder node and return it's `widget::Id` into the `Graph`.",35,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"node","","Borrow the node at the given widget::Id if there is one.",35,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"generics":["node"],"name":"option"}}],[11,"node_mut","","Mutably borrow the node at the given widget::Id if there is one.",35,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"generics":["node"],"name":"option"}}],[11,"edge","","Borrow the edge at the given EdgeIndex if there is one.",35,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"generics":["edge"],"name":"option"}}],[11,"edge_mut","","Mutably borrow the edge at the given EdgeIndex if there is one.",35,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"generics":["edge"],"name":"option"}}],[11,"edge_endpoints","","Return the parent and child nodes on either end of the Edge at the given index.",35,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"widget","","If there is a Widget for the given index, return a reference to it.",35,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"generics":["container"],"name":"option"}}],[11,"widget_mut","","If there is a Widget for the given Id, return a mutable reference to it.",35,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"generics":["container"],"name":"option"}}],[11,"parents","","A Walker type that may be used to step through the parents of the given child node.",35,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"parents"}}],[11,"recursive_walk","","A Walker type that recursively walks the Graph using the given `recursive_fn`.",35,{"inputs":[{"name":"self"},{"name":"id"},{"name":"f"}],"output":{"name":"recursivewalk"}}],[11,"edge_parent","","If the widget at the given index has some parent along an Edge of the given variant, return an index to it.",35,{"inputs":[{"name":"self"},{"name":"id"},{"name":"edge"}],"output":{"generics":["id"],"name":"option"}}],[11,"depth_parent","","Return the index of the parent along the given widget's Depth Edge.",35,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"generics":["id"],"name":"option"}}],[11,"x_position_parent","","Return the index of the parent along the given widget's Position Edge.",35,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"generics":["id"],"name":"option"}}],[11,"y_position_parent","","Return the index of the parent along the given widget's Position Edge.",35,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"generics":["id"],"name":"option"}}],[11,"position_parents","","Produces an iterator yielding the parents along both the X and Y Position Edges respectively.",35,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"positionparents"}}],[11,"graphic_parent","","Return the index of the parent along the given widget's Graphic Edge.",35,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"generics":["id"],"name":"option"}}],[11,"depth_parent_recursion","","A Walker type that recursively walks Depth parents starting from the given node.",35,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"recursivewalk"}}],[11,"x_position_parent_recursion","","A Walker type that recursively walks X Position parents starting from the given node.",35,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"recursivewalk"}}],[11,"y_position_parent_recursion","","A Walker type that recursively walks Y Position parents starting from the given node.",35,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"recursivewalk"}}],[11,"graphic_parent_recursion","","A Walker type that recursively walks Graphic parents starting from the given node.",35,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"recursivewalk"}}],[11,"scrollable_y_parent_recursion","","A Walker type that recursively walks Depth parents that are scrollable along the y axis for the given node.",35,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"recursivewalk"}}],[11,"scrollable_x_parent_recursion","","A Walker type that recursively walks Depth parents that are scrollable along the x axis for the given node.",35,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"recursivewalk"}}],[11,"children","","A Walker type that may be used to step through the children of the given parent node.",35,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"children"}}],[11,"depth_children","","For walking the Depth children of the given parent node.",35,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"depthchildren"}}],[11,"x_position_children","","For walking the Position(X) children of the given parent node.",35,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"xpositionchildren"}}],[11,"y_position_children","","For walking the Position(Y) children of the given parent node.",35,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"ypositionchildren"}}],[11,"position_children","","For walking the Position children of the given parent node.",35,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"positionchildren"}}],[11,"graphic_children","","For walking the Graphic children of the given parent node.",35,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"graphicchildren"}}],[11,"does_edge_exist","","Does the given edge type exist between the nodes `parent` -> `child`.",35,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"},{"name":"f"}],"output":{"name":"bool"}}],[11,"does_depth_edge_exist","","Does a Edge::Depth exist between the nodes `parent` -> `child`.",35,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"name":"bool"}}],[11,"does_position_edge_exist","","Does a Edge::Position exist between the nodes `parent` -> `child`.",35,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"name":"bool"}}],[11,"does_graphic_edge_exist","","Does a Edge::Graphic exist between the nodes `parent` -> `child`.",35,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"name":"bool"}}],[11,"does_recursive_edge_exist","","Are the given `parent` and `child` nodes connected by a single chain of edges of the given kind?",35,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"},{"name":"f"}],"output":{"name":"bool"}}],[11,"does_recursive_depth_edge_exist","","Are the given `parent` and `child` nodes connected by a single chain of Depth edges?",35,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"name":"bool"}}],[11,"does_recursive_graphic_edge_exist","","Are the given `parent` and `child` nodes connected by a single chain of Graphic edges?",35,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"name":"bool"}}],[11,"pre_update_cache","","Cache some `PreUpdateCache` widget data into the graph.",35,{"inputs":[{"name":"self"},{"name":"id"},{"name":"preupdatecache"},{"name":"usize"}],"output":null}],[11,"post_update_cache","","Cache some `PostUpdateCache` widget data into the graph.",35,{"inputs":[{"name":"self"},{"name":"postupdatecache"}],"output":null}],[11,"next","","",36,{"inputs":[{"name":"self"},{"name":"graph"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"self"},{"name":"graph"}],"output":{"name":"option"}}],[11,"index","","",35,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"node"}}],[11,"index_mut","","",35,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"node"}}],[11,"index","","",35,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"edge"}}],[11,"index_mut","","",35,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"edge"}}],[0,"guide","conrod","The Conrod Guide",null,null],[0,"chapter_1","conrod::guide","What is Conrod?",null,null],[0,"chapter_2","","Getting Started",null,null],[0,"image","conrod","A type used to manage a user's image data and map them to `Image` widgets:",null,null],[3,"Id","conrod::image","Unique image identifier.",null,null],[3,"Map","","A type used to map the `widget::Id` of `Image` widgets to their associated `Img` data.",null,null],[12,"trigger_redraw","","Whether or not the `image::Map` will trigger a redraw the next time `Ui::draw` is called.",38,null],[3,"NewIds","","An iterator yielding an `Id` for each new `Img` inserted into the `Map` via the `extend` method.",null,null],[6,"HashMap","","The type of `std::collections::HashMap` with `fnv::FnvHasher` used within the `image::Map`.",null,null],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"cmp","","",39,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",39,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",39,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"le","","",39,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"gt","","",39,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"ge","","",39,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"deref","","",38,null],[11,"new","","Construct a new, empty `image::Map`.",38,{"inputs":[],"output":{"name":"self"}}],[11,"get_mut","","Uniquely borrow the `Img` associated with the given widget.",38,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"insert","","Inserts the given image into the map, returning its associated `image::Id`. The user must store the returned `image::Id` in order to use, modify or remove the inserted image.",38,{"inputs":[{"name":"self"},{"name":"img"}],"output":{"name":"id"}}],[11,"replace","","Replaces the given image in the map if it exists. Returns the image or None.",38,{"inputs":[{"name":"self"},{"name":"id"},{"name":"img"}],"output":{"name":"option"}}],[11,"remove","","Removes the given image from the map if it exists. Returns the image or None.",38,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"extend","","Insert each of the images yielded by the given iterator and produce an iterator yielding their generated `Ids` in the same order.",38,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"newids"}}],[11,"next","","",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"len","","",40,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"input","conrod","This module contains all the logic for handling input events and providing them to widgets.",null,null],[3,"ModifierKey","conrod::input","",null,null],[4,"Button","","Models different kinds of buttons.",null,null],[13,"Keyboard","","A keyboard button.",41,null],[13,"Mouse","","A mouse button.",41,null],[13,"Controller","","A controller button.",41,null],[3,"ControllerButton","","Components of a controller button event. Not guaranteed consistent across backends.",null,null],[12,"id","","Which controller was the button on.",42,null],[12,"button","","Which button was pressed.",42,null],[3,"ControllerAxisArgs","","Components of a controller axis move event. Not guaranteed consistent across backends.",null,null],[12,"id","","Which controller moved.",43,null],[12,"axis","","The axis that moved.",43,null],[12,"position","","Position of the controller. Usually [-1.0, 1.0], though backends may use a different range for various devices.",43,null],[0,"keyboard","","Back-end agnostic keyboard keys.",null,null],[3,"ModifierKey","conrod::input::keyboard","",null,null],[4,"Key","","Represent a keyboard key. Keycodes follows SDL http://wiki.libsdl.org/SDLKeycodeLookup",null,null],[13,"Unknown","","",44,null],[13,"Backspace","","",44,null],[13,"Tab","","",44,null],[13,"Return","","",44,null],[13,"Escape","","",44,null],[13,"Space","","",44,null],[13,"Exclaim","","",44,null],[13,"Quotedbl","","",44,null],[13,"Hash","","",44,null],[13,"Dollar","","",44,null],[13,"Percent","","",44,null],[13,"Ampersand","","",44,null],[13,"Quote","","",44,null],[13,"LeftParen","","",44,null],[13,"RightParen","","",44,null],[13,"Asterisk","","",44,null],[13,"Plus","","",44,null],[13,"Comma","","",44,null],[13,"Minus","","",44,null],[13,"Period","","",44,null],[13,"Slash","","",44,null],[13,"D0","","",44,null],[13,"D1","","",44,null],[13,"D2","","",44,null],[13,"D3","","",44,null],[13,"D4","","",44,null],[13,"D5","","",44,null],[13,"D6","","",44,null],[13,"D7","","",44,null],[13,"D8","","",44,null],[13,"D9","","",44,null],[13,"Colon","","",44,null],[13,"Semicolon","","",44,null],[13,"Less","","",44,null],[13,"Equals","","",44,null],[13,"Greater","","",44,null],[13,"Question","","",44,null],[13,"At","","",44,null],[13,"LeftBracket","","",44,null],[13,"Backslash","","",44,null],[13,"RightBracket","","",44,null],[13,"Caret","","",44,null],[13,"Underscore","","",44,null],[13,"Backquote","","",44,null],[13,"A","","",44,null],[13,"B","","",44,null],[13,"C","","",44,null],[13,"D","","",44,null],[13,"E","","",44,null],[13,"F","","",44,null],[13,"G","","",44,null],[13,"H","","",44,null],[13,"I","","",44,null],[13,"J","","",44,null],[13,"K","","",44,null],[13,"L","","",44,null],[13,"M","","",44,null],[13,"N","","",44,null],[13,"O","","",44,null],[13,"P","","",44,null],[13,"Q","","",44,null],[13,"R","","",44,null],[13,"S","","",44,null],[13,"T","","",44,null],[13,"U","","",44,null],[13,"V","","",44,null],[13,"W","","",44,null],[13,"X","","",44,null],[13,"Y","","",44,null],[13,"Z","","",44,null],[13,"Delete","","",44,null],[13,"CapsLock","","",44,null],[13,"F1","","",44,null],[13,"F2","","",44,null],[13,"F3","","",44,null],[13,"F4","","",44,null],[13,"F5","","",44,null],[13,"F6","","",44,null],[13,"F7","","",44,null],[13,"F8","","",44,null],[13,"F9","","",44,null],[13,"F10","","",44,null],[13,"F11","","",44,null],[13,"F12","","",44,null],[13,"PrintScreen","","",44,null],[13,"ScrollLock","","",44,null],[13,"Pause","","",44,null],[13,"Insert","","",44,null],[13,"Home","","",44,null],[13,"PageUp","","",44,null],[13,"End","","",44,null],[13,"PageDown","","",44,null],[13,"Right","","",44,null],[13,"Left","","",44,null],[13,"Down","","",44,null],[13,"Up","","",44,null],[13,"NumLockClear","","",44,null],[13,"NumPadDivide","","",44,null],[13,"NumPadMultiply","","",44,null],[13,"NumPadMinus","","",44,null],[13,"NumPadPlus","","",44,null],[13,"NumPadEnter","","",44,null],[13,"NumPad1","","",44,null],[13,"NumPad2","","",44,null],[13,"NumPad3","","",44,null],[13,"NumPad4","","",44,null],[13,"NumPad5","","",44,null],[13,"NumPad6","","",44,null],[13,"NumPad7","","",44,null],[13,"NumPad8","","",44,null],[13,"NumPad9","","",44,null],[13,"NumPad0","","",44,null],[13,"NumPadPeriod","","",44,null],[13,"Application","","",44,null],[13,"Power","","",44,null],[13,"NumPadEquals","","",44,null],[13,"F13","","",44,null],[13,"F14","","",44,null],[13,"F15","","",44,null],[13,"F16","","",44,null],[13,"F17","","",44,null],[13,"F18","","",44,null],[13,"F19","","",44,null],[13,"F20","","",44,null],[13,"F21","","",44,null],[13,"F22","","",44,null],[13,"F23","","",44,null],[13,"F24","","",44,null],[13,"Execute","","",44,null],[13,"Help","","",44,null],[13,"Menu","","",44,null],[13,"Select","","",44,null],[13,"Stop","","",44,null],[13,"Again","","",44,null],[13,"Undo","","",44,null],[13,"Cut","","",44,null],[13,"Copy","","",44,null],[13,"Paste","","",44,null],[13,"Find","","",44,null],[13,"Mute","","",44,null],[13,"VolumeUp","","",44,null],[13,"VolumeDown","","",44,null],[13,"NumPadComma","","",44,null],[13,"NumPadEqualsAS400","","",44,null],[13,"AltErase","","",44,null],[13,"Sysreq","","",44,null],[13,"Cancel","","",44,null],[13,"Clear","","",44,null],[13,"Prior","","",44,null],[13,"Return2","","",44,null],[13,"Separator","","",44,null],[13,"Out","","",44,null],[13,"Oper","","",44,null],[13,"ClearAgain","","",44,null],[13,"CrSel","","",44,null],[13,"ExSel","","",44,null],[13,"NumPad00","","",44,null],[13,"NumPad000","","",44,null],[13,"ThousandsSeparator","","",44,null],[13,"DecimalSeparator","","",44,null],[13,"CurrencyUnit","","",44,null],[13,"CurrencySubUnit","","",44,null],[13,"NumPadLeftParen","","",44,null],[13,"NumPadRightParen","","",44,null],[13,"NumPadLeftBrace","","",44,null],[13,"NumPadRightBrace","","",44,null],[13,"NumPadTab","","",44,null],[13,"NumPadBackspace","","",44,null],[13,"NumPadA","","",44,null],[13,"NumPadB","","",44,null],[13,"NumPadC","","",44,null],[13,"NumPadD","","",44,null],[13,"NumPadE","","",44,null],[13,"NumPadF","","",44,null],[13,"NumPadXor","","",44,null],[13,"NumPadPower","","",44,null],[13,"NumPadPercent","","",44,null],[13,"NumPadLess","","",44,null],[13,"NumPadGreater","","",44,null],[13,"NumPadAmpersand","","",44,null],[13,"NumPadDblAmpersand","","",44,null],[13,"NumPadVerticalBar","","",44,null],[13,"NumPadDblVerticalBar","","",44,null],[13,"NumPadColon","","",44,null],[13,"NumPadHash","","",44,null],[13,"NumPadSpace","","",44,null],[13,"NumPadAt","","",44,null],[13,"NumPadExclam","","",44,null],[13,"NumPadMemStore","","",44,null],[13,"NumPadMemRecall","","",44,null],[13,"NumPadMemClear","","",44,null],[13,"NumPadMemAdd","","",44,null],[13,"NumPadMemSubtract","","",44,null],[13,"NumPadMemMultiply","","",44,null],[13,"NumPadMemDivide","","",44,null],[13,"NumPadPlusMinus","","",44,null],[13,"NumPadClear","","",44,null],[13,"NumPadClearEntry","","",44,null],[13,"NumPadBinary","","",44,null],[13,"NumPadOctal","","",44,null],[13,"NumPadDecimal","","",44,null],[13,"NumPadHexadecimal","","",44,null],[13,"LCtrl","","",44,null],[13,"LShift","","",44,null],[13,"LAlt","","",44,null],[13,"LGui","","",44,null],[13,"RCtrl","","",44,null],[13,"RShift","","",44,null],[13,"RAlt","","",44,null],[13,"RGui","","",44,null],[13,"Mode","","",44,null],[13,"AudioNext","","",44,null],[13,"AudioPrev","","",44,null],[13,"AudioStop","","",44,null],[13,"AudioPlay","","",44,null],[13,"AudioMute","","",44,null],[13,"MediaSelect","","",44,null],[13,"Www","","",44,null],[13,"Mail","","",44,null],[13,"Calculator","","",44,null],[13,"Computer","","",44,null],[13,"AcSearch","","",44,null],[13,"AcHome","","",44,null],[13,"AcBack","","",44,null],[13,"AcForward","","",44,null],[13,"AcStop","","",44,null],[13,"AcRefresh","","",44,null],[13,"AcBookmarks","","",44,null],[13,"BrightnessDown","","",44,null],[13,"BrightnessUp","","",44,null],[13,"DisplaySwitch","","",44,null],[13,"KbdIllumToggle","","",44,null],[13,"KbdIllumDown","","",44,null],[13,"KbdIllumUp","","",44,null],[13,"Eject","","",44,null],[13,"Sleep","","",44,null],[4,"Key","conrod::input","Represent a keyboard key. Keycodes follows SDL http://wiki.libsdl.org/SDLKeycodeLookup",null,null],[13,"Unknown","","",44,null],[13,"Backspace","","",44,null],[13,"Tab","","",44,null],[13,"Return","","",44,null],[13,"Escape","","",44,null],[13,"Space","","",44,null],[13,"Exclaim","","",44,null],[13,"Quotedbl","","",44,null],[13,"Hash","","",44,null],[13,"Dollar","","",44,null],[13,"Percent","","",44,null],[13,"Ampersand","","",44,null],[13,"Quote","","",44,null],[13,"LeftParen","","",44,null],[13,"RightParen","","",44,null],[13,"Asterisk","","",44,null],[13,"Plus","","",44,null],[13,"Comma","","",44,null],[13,"Minus","","",44,null],[13,"Period","","",44,null],[13,"Slash","","",44,null],[13,"D0","","",44,null],[13,"D1","","",44,null],[13,"D2","","",44,null],[13,"D3","","",44,null],[13,"D4","","",44,null],[13,"D5","","",44,null],[13,"D6","","",44,null],[13,"D7","","",44,null],[13,"D8","","",44,null],[13,"D9","","",44,null],[13,"Colon","","",44,null],[13,"Semicolon","","",44,null],[13,"Less","","",44,null],[13,"Equals","","",44,null],[13,"Greater","","",44,null],[13,"Question","","",44,null],[13,"At","","",44,null],[13,"LeftBracket","","",44,null],[13,"Backslash","","",44,null],[13,"RightBracket","","",44,null],[13,"Caret","","",44,null],[13,"Underscore","","",44,null],[13,"Backquote","","",44,null],[13,"A","","",44,null],[13,"B","","",44,null],[13,"C","","",44,null],[13,"D","","",44,null],[13,"E","","",44,null],[13,"F","","",44,null],[13,"G","","",44,null],[13,"H","","",44,null],[13,"I","","",44,null],[13,"J","","",44,null],[13,"K","","",44,null],[13,"L","","",44,null],[13,"M","","",44,null],[13,"N","","",44,null],[13,"O","","",44,null],[13,"P","","",44,null],[13,"Q","","",44,null],[13,"R","","",44,null],[13,"S","","",44,null],[13,"T","","",44,null],[13,"U","","",44,null],[13,"V","","",44,null],[13,"W","","",44,null],[13,"X","","",44,null],[13,"Y","","",44,null],[13,"Z","","",44,null],[13,"Delete","","",44,null],[13,"CapsLock","","",44,null],[13,"F1","","",44,null],[13,"F2","","",44,null],[13,"F3","","",44,null],[13,"F4","","",44,null],[13,"F5","","",44,null],[13,"F6","","",44,null],[13,"F7","","",44,null],[13,"F8","","",44,null],[13,"F9","","",44,null],[13,"F10","","",44,null],[13,"F11","","",44,null],[13,"F12","","",44,null],[13,"PrintScreen","","",44,null],[13,"ScrollLock","","",44,null],[13,"Pause","","",44,null],[13,"Insert","","",44,null],[13,"Home","","",44,null],[13,"PageUp","","",44,null],[13,"End","","",44,null],[13,"PageDown","","",44,null],[13,"Right","","",44,null],[13,"Left","","",44,null],[13,"Down","","",44,null],[13,"Up","","",44,null],[13,"NumLockClear","","",44,null],[13,"NumPadDivide","","",44,null],[13,"NumPadMultiply","","",44,null],[13,"NumPadMinus","","",44,null],[13,"NumPadPlus","","",44,null],[13,"NumPadEnter","","",44,null],[13,"NumPad1","","",44,null],[13,"NumPad2","","",44,null],[13,"NumPad3","","",44,null],[13,"NumPad4","","",44,null],[13,"NumPad5","","",44,null],[13,"NumPad6","","",44,null],[13,"NumPad7","","",44,null],[13,"NumPad8","","",44,null],[13,"NumPad9","","",44,null],[13,"NumPad0","","",44,null],[13,"NumPadPeriod","","",44,null],[13,"Application","","",44,null],[13,"Power","","",44,null],[13,"NumPadEquals","","",44,null],[13,"F13","","",44,null],[13,"F14","","",44,null],[13,"F15","","",44,null],[13,"F16","","",44,null],[13,"F17","","",44,null],[13,"F18","","",44,null],[13,"F19","","",44,null],[13,"F20","","",44,null],[13,"F21","","",44,null],[13,"F22","","",44,null],[13,"F23","","",44,null],[13,"F24","","",44,null],[13,"Execute","","",44,null],[13,"Help","","",44,null],[13,"Menu","","",44,null],[13,"Select","","",44,null],[13,"Stop","","",44,null],[13,"Again","","",44,null],[13,"Undo","","",44,null],[13,"Cut","","",44,null],[13,"Copy","","",44,null],[13,"Paste","","",44,null],[13,"Find","","",44,null],[13,"Mute","","",44,null],[13,"VolumeUp","","",44,null],[13,"VolumeDown","","",44,null],[13,"NumPadComma","","",44,null],[13,"NumPadEqualsAS400","","",44,null],[13,"AltErase","","",44,null],[13,"Sysreq","","",44,null],[13,"Cancel","","",44,null],[13,"Clear","","",44,null],[13,"Prior","","",44,null],[13,"Return2","","",44,null],[13,"Separator","","",44,null],[13,"Out","","",44,null],[13,"Oper","","",44,null],[13,"ClearAgain","","",44,null],[13,"CrSel","","",44,null],[13,"ExSel","","",44,null],[13,"NumPad00","","",44,null],[13,"NumPad000","","",44,null],[13,"ThousandsSeparator","","",44,null],[13,"DecimalSeparator","","",44,null],[13,"CurrencyUnit","","",44,null],[13,"CurrencySubUnit","","",44,null],[13,"NumPadLeftParen","","",44,null],[13,"NumPadRightParen","","",44,null],[13,"NumPadLeftBrace","","",44,null],[13,"NumPadRightBrace","","",44,null],[13,"NumPadTab","","",44,null],[13,"NumPadBackspace","","",44,null],[13,"NumPadA","","",44,null],[13,"NumPadB","","",44,null],[13,"NumPadC","","",44,null],[13,"NumPadD","","",44,null],[13,"NumPadE","","",44,null],[13,"NumPadF","","",44,null],[13,"NumPadXor","","",44,null],[13,"NumPadPower","","",44,null],[13,"NumPadPercent","","",44,null],[13,"NumPadLess","","",44,null],[13,"NumPadGreater","","",44,null],[13,"NumPadAmpersand","","",44,null],[13,"NumPadDblAmpersand","","",44,null],[13,"NumPadVerticalBar","","",44,null],[13,"NumPadDblVerticalBar","","",44,null],[13,"NumPadColon","","",44,null],[13,"NumPadHash","","",44,null],[13,"NumPadSpace","","",44,null],[13,"NumPadAt","","",44,null],[13,"NumPadExclam","","",44,null],[13,"NumPadMemStore","","",44,null],[13,"NumPadMemRecall","","",44,null],[13,"NumPadMemClear","","",44,null],[13,"NumPadMemAdd","","",44,null],[13,"NumPadMemSubtract","","",44,null],[13,"NumPadMemMultiply","","",44,null],[13,"NumPadMemDivide","","",44,null],[13,"NumPadPlusMinus","","",44,null],[13,"NumPadClear","","",44,null],[13,"NumPadClearEntry","","",44,null],[13,"NumPadBinary","","",44,null],[13,"NumPadOctal","","",44,null],[13,"NumPadDecimal","","",44,null],[13,"NumPadHexadecimal","","",44,null],[13,"LCtrl","","",44,null],[13,"LShift","","",44,null],[13,"LAlt","","",44,null],[13,"LGui","","",44,null],[13,"RCtrl","","",44,null],[13,"RShift","","",44,null],[13,"RAlt","","",44,null],[13,"RGui","","",44,null],[13,"Mode","","",44,null],[13,"AudioNext","","",44,null],[13,"AudioPrev","","",44,null],[13,"AudioStop","","",44,null],[13,"AudioPlay","","",44,null],[13,"AudioMute","","",44,null],[13,"MediaSelect","","",44,null],[13,"Www","","",44,null],[13,"Mail","","",44,null],[13,"Calculator","","",44,null],[13,"Computer","","",44,null],[13,"AcSearch","","",44,null],[13,"AcHome","","",44,null],[13,"AcBack","","",44,null],[13,"AcForward","","",44,null],[13,"AcStop","","",44,null],[13,"AcRefresh","","",44,null],[13,"AcBookmarks","","",44,null],[13,"BrightnessDown","","",44,null],[13,"BrightnessUp","","",44,null],[13,"DisplaySwitch","","",44,null],[13,"KbdIllumToggle","","",44,null],[13,"KbdIllumDown","","",44,null],[13,"KbdIllumUp","","",44,null],[13,"Eject","","",44,null],[13,"Sleep","","",44,null],[4,"MouseButton","","Represent a mouse button.",null,null],[13,"Unknown","","Unknown mouse button.",45,null],[13,"Left","","Left mouse button.",45,null],[13,"Right","","Right mouse button.",45,null],[13,"Middle","","Middle mouse button.",45,null],[13,"X1","","Extra mouse button number 1.",45,null],[13,"X2","","Extra mouse button number 2.",45,null],[13,"Button6","","Mouse button number 6.",45,null],[13,"Button7","","Mouse button number 7.",45,null],[13,"Button8","","Mouse button number 8.",45,null],[3,"RenderArgs","","Render arguments",null,null],[12,"ext_dt","","Extrapolated time in seconds, used to do smooth animation.",46,null],[12,"width","","The width of rendered area in points.",46,null],[12,"height","","The height of rendered area in points.",46,null],[12,"draw_width","","The width of rendered area in pixels.",46,null],[12,"draw_height","","The height of rendered area in pixels.",46,null],[4,"Source","","Sources from which user input may be received.",null,null],[13,"Mouse","","Mouse input (i.e. movement, buttons).",47,null],[13,"Keyboard","","Keyboard input.",47,null],[13,"Touch","","Input from a finger on a touch screen/surface.",47,null],[4,"Motion","","Different kinds of motion input.",null,null],[13,"MouseCursor","","Absolute cursor position within the window.",48,null],[12,"x","conrod::input::Motion","",48,null],[12,"y","","",48,null],[13,"MouseRelative","conrod::input","Relative mouse movement.",48,null],[12,"x","conrod::input::Motion","",48,null],[12,"y","","",48,null],[13,"Scroll","conrod::input","x and y in scroll ticks.",48,null],[12,"x","conrod::input::Motion","",48,null],[12,"y","","",48,null],[13,"ControllerAxis","conrod::input","controller axis move event.",48,null],[0,"state","","Everything related to storing the state of user input.",null,null],[3,"State","conrod::input::state","Holds the current state of user input.",null,null],[12,"mouse","","Mouse position and button state.",49,null],[12,"touch","","All in-progress touch interactions.",49,null],[12,"widget_capturing_keyboard","","Which widget, if any, is currently capturing the keyboard",49,null],[12,"widget_capturing_mouse","","Which widget, if any, is currently capturing the mouse",49,null],[12,"widget_under_mouse","","The widget that is currently under the mouse cursor.",49,null],[12,"modifiers","","Which modifier keys are being held down.",49,null],[0,"touch","","Touch specific state.",null,null],[3,"Start","conrod::input::state::touch","State stored about the start of a `Touch` interaction.",null,null],[12,"time","","The time at which the `Touch` began.",50,null],[12,"xy","","The position at which the touch began.",50,null],[12,"widget","","The widget under the beginning of the touch if there was one.",50,null],[3,"Touch","","All state stored for a `Touch` interaction in progress.",null,null],[12,"start","","The `Start` of the touch interaction.",51,null],[12,"xy","","The last recorded position of the finger on the window.",51,null],[12,"widget","","The widget currently being touched.",51,null],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"start"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"start"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"start"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"touch"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"touch"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"touch"}],"output":{"name":"bool"}}],[0,"mouse","conrod::input::state","Mouse specific state.",null,null],[4,"Button","conrod::input::state::mouse","Represent a mouse button.",null,null],[13,"Unknown","","Unknown mouse button.",45,null],[13,"Left","","Left mouse button.",45,null],[13,"Right","","Right mouse button.",45,null],[13,"Middle","","Middle mouse button.",45,null],[13,"X1","","Extra mouse button number 1.",45,null],[13,"X2","","Extra mouse button number 2.",45,null],[13,"Button6","","Mouse button number 6.",45,null],[13,"Button7","","Mouse button number 7.",45,null],[13,"Button8","","Mouse button number 8.",45,null],[3,"Mouse","","The state of the `Mouse`, including it's position and button states.",null,null],[12,"buttons","","A map that stores the up/down state of each button.",52,null],[12,"xy","","The current position of the mouse.",52,null],[3,"ButtonMap","","Stores the state of all mouse buttons.",null,null],[3,"PressedButtons","","An iterator yielding all pressed buttons.",null,null],[4,"ButtonPosition","","Whether the button is up or down.",null,null],[13,"Up","","The button is up (i.e. pressed).",53,null],[13,"Down","","The button is down and was originally pressed down at the given `Point` over the widget at the given widget::Id.",53,null],[17,"NUM_BUTTONS","","The max total number of buttons on a mouse.",null,null],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"mouse"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"mouse"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"mouse"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"buttonposition"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"buttonposition"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"buttonposition"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"buttonmap"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"buttonmap"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"buttonmap"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"pressedbuttons"}}],[11,"new","","Construct a new default `Mouse`.",52,{"inputs":[],"output":{"name":"self"}}],[11,"relative_to","","If the mouse button is down, return a new one with position relative to the given `xy`.",53,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[11,"is_down","","Is the `ButtonPosition` down.",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_up","","Is the `ButtonPosition` up.",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"if_down","","Returns the position at which the button was pressed along with the widget that was under the mouse at the time of pressing if the position is `Down`.",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"xy_if_down","","Returns the position at which the button was pressed if it's down.",53,{"inputs":[{"name":"self"}],"output":{"generics":["point"],"name":"option"}}],[11,"new","","Returns a new button map with all states set to `None`",54,{"inputs":[],"output":{"name":"self"}}],[11,"relative_to","","Returns a copy of the ButtonMap relative to the given `Point`",54,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[11,"left","","The state of the left mouse button.",54,{"inputs":[{"name":"self"}],"output":{"name":"buttonposition"}}],[11,"middle","","The state of the middle mouse button.",54,{"inputs":[{"name":"self"}],"output":{"name":"buttonposition"}}],[11,"right","","The state of the right mouse button.",54,{"inputs":[{"name":"self"}],"output":{"name":"buttonposition"}}],[11,"press","","Sets the `Button` in the `Down` position.",54,{"inputs":[{"name":"self"},{"name":"button"},{"name":"point"},{"generics":["id"],"name":"option"}],"output":null}],[11,"release","","Set's the `Button` in the `Up` position.",54,{"inputs":[{"name":"self"},{"name":"button"}],"output":null}],[11,"pressed","","An iterator yielding all pressed mouse buttons along with the location at which they were originally pressed.",54,{"inputs":[{"name":"self"}],"output":{"name":"pressedbuttons"}}],[11,"index","","",54,null],[11,"next","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","conrod::input::state","",49,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"new","","Returns a fresh new input state",49,{"inputs":[],"output":{"name":"state"}}],[11,"relative_to","","Returns a copy of the input::State relative to the given `position::Point`",49,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"state"}}],[0,"widget","conrod::input","Contains all the logic for filtering input events and making them relative to widgets.",null,null],[3,"Widget","conrod::input::widget","Provides only events and input state that are relevant to a specific widget.",null,null],[3,"Mouse","","A view of the `input::state::Mouse` that is specific to a single widget.",null,null],[12,"buttons","","The state of each `MouseButton`.",56,null],[3,"Events","","An iterator yielding all events that are relevant to a specific widget.",null,null],[3,"Presses","","An `Iterator` yielding all button presses occuring within the given sequence of `widget::Event`s.",null,null],[3,"MousePresses","","An `Iterator` yielding all mouse button presses occuring within the given sequence of `Presses`.",null,null],[3,"MouseButtonPresses","","An `Iterator` yielding all mouse button presses occuring within the given sequence of `Presses` for some specific mouse button.",null,null],[3,"KeyPresses","","An `Iterator` yielding all keyboard button presses occuring within the given sequence of `Presses`.",null,null],[3,"Releases","","An `Iterator` yielding all button releases occuring within the given sequence of `widget::Event`s.",null,null],[3,"MouseButtonReleases","","An `Iterator` yielding all mouse button releases occuring within the given sequence of `Releases` for some specific mouse button.",null,null],[3,"MouseReleases","","An `Iterator` yielding all mouse button releases occuring within the given sequence of `Releases`.",null,null],[3,"KeyReleases","","An `Iterator` yielding all keyboard button releases occuring within the given sequence of `Releases`.",null,null],[3,"Clicks","","An `Iterator` yielding all mouse clicks occuring within the given sequence of `widget::Event`s.",null,null],[3,"ButtonClicks","","An `Iterator` yielding all mouse `button` clicks occuring within the given sequence of `widget::Click`s.",null,null],[3,"Taps","","An `Iterator` yielding all touch screen taps occuring within the given sequence of `widget::Event`s.",null,null],[3,"Drags","","An iterator that yields all `event::Drag` events yielded by the `Events` iterator.",null,null],[3,"ButtonDrags","","An `Iterator` yielding all mouse `button` drags occuring within the given sequence of `widget::Drag`s.",null,null],[3,"Texts","","An iterator that yields all `Input::Text` events yielded by the `Events` iterator.",null,null],[3,"Scrolls","","An iterator that yields all `Scroll` events yielded by the given `Events` iterator.",null,null],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"widget"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"mouse"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"events"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"presses"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"mousepresses"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttonpresses"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"keypresses"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"releases"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttonreleases"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"mousereleases"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"keyreleases"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"clicks"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"buttonclicks"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"taps"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"drags"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"buttondrags"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"texts"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"scrolls"}}],[11,"for_widget","","Returns a `Widget` with events specifically for the given widget.",57,{"inputs":[{"name":"id"},{"name":"rect"},{"name":"global"}],"output":{"name":"self"}}],[11,"mouse","","If the widget is currently capturing the mouse, this returns the state of the mouse.",57,{"inputs":[{"name":"self"}],"output":{"generics":["mouse"],"name":"option"}}],[11,"events","","Produces an iterator yielding all events that are relevant to a specific widget.",57,{"inputs":[{"name":"self"}],"output":{"name":"events"}}],[11,"presses","","Filters all events yielded by `Self::events` other than `event::Press`es.",57,{"inputs":[{"name":"self"}],"output":{"name":"presses"}}],[11,"releases","","Filters all events yielded by `Self::events` other than `event::Release`es.",57,{"inputs":[{"name":"self"}],"output":{"name":"releases"}}],[11,"clicks","","Filters all events yielded by `Self::events` for all `event::Click`s.",57,{"inputs":[{"name":"self"}],"output":{"name":"clicks"}}],[11,"taps","","Filters all events yielded by `Self::events` for all `event::Tap`s.",57,{"inputs":[{"name":"self"}],"output":{"name":"taps"}}],[11,"drags","","Produces an iterator that yields all `event::Drag` events yielded by the `Events` iterator.",57,{"inputs":[{"name":"self"}],"output":{"name":"drags"}}],[11,"texts","","Produces an iterator that yields all `Input::Text` events that have occurred as `&str`s since the last time `Ui::set_widgets` was called.",57,{"inputs":[{"name":"self"}],"output":{"name":"texts"}}],[11,"scrolls","","Produce an iterator that yields only the `Scroll` events yielded by the `Events` iterator.",57,{"inputs":[{"name":"self"}],"output":{"name":"scrolls"}}],[11,"abs_xy","","The absolute position of the mouse within the window.",56,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"rel_xy","","The position of the mouse relative to the middle of the widget's `Rect`.",56,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"is_over","","Is the mouse currently over the widget.",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mouse","","Produces an `Iterator` that yields only the press events that correspond with mouse buttons.",59,{"inputs":[{"name":"self"}],"output":{"name":"mousepresses"}}],[11,"key","","Produces an `Iterator` that yields only the press events that correspond with keyboard buttons.",59,{"inputs":[{"name":"self"}],"output":{"name":"keypresses"}}],[11,"button","","Produces an `Iterator` that yields only events associated with the given mouse button.",60,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"mousebuttonpresses"}}],[11,"left","","Produces an `Iterator` that yields only the left mouse button press events.",60,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttonpresses"}}],[11,"middle","","Produces an `Iterator` that yields only the middle mouse button press events.",60,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttonpresses"}}],[11,"right","","Produces an `Iterator` that yields only the right mouse button press events.",60,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttonpresses"}}],[11,"mouse","","Produces an `Iterator` that yields only the release events that correspond with mouse buttons.",63,{"inputs":[{"name":"self"}],"output":{"name":"mousereleases"}}],[11,"key","","Produces an `Iterator` that yields only the release events that correspond with keyboard buttons.",63,{"inputs":[{"name":"self"}],"output":{"name":"keyreleases"}}],[11,"button","","Produces an `Iterator` that yields only events associated with the given mouse button.",65,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"mousebuttonreleases"}}],[11,"left","","Produces an `Iterator` that yields only the left mouse button release events.",65,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttonreleases"}}],[11,"middle","","Produces an `Iterator` that yields only the middle mouse button release events.",65,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttonreleases"}}],[11,"right","","Produces an `Iterator` that yields only the right mouse button release events.",65,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttonreleases"}}],[11,"button","","Yield only the `Click`s that occurred from the given button.",67,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"buttonclicks"}}],[11,"left","","Yield only left mouse button `Click`s.",67,{"inputs":[{"name":"self"}],"output":{"name":"buttonclicks"}}],[11,"middle","","Yields only middle mouse button `Click`s.",67,{"inputs":[{"name":"self"}],"output":{"name":"buttonclicks"}}],[11,"right","","Yield only right mouse button `Click`s.",67,{"inputs":[{"name":"self"}],"output":{"name":"buttonclicks"}}],[11,"button","","Yield only the `Drag`s that occurred from the given button.",70,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"buttondrags"}}],[11,"left","","Yield only left mouse button `Drag`s.",70,{"inputs":[{"name":"self"}],"output":{"name":"buttondrags"}}],[11,"middle","","Yields only middle mouse button `Drag`s.",70,{"inputs":[{"name":"self"}],"output":{"name":"buttondrags"}}],[11,"right","","Yield only right mouse button `Drag`s.",70,{"inputs":[{"name":"self"}],"output":{"name":"buttondrags"}}],[11,"next","","",58,{"inputs":[{"name":"self"}],"output":{"generics":["widget"],"name":"option"}}],[11,"next","","",59,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",60,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",61,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",62,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",65,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",67,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",68,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",70,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",72,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",73,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"global","conrod::input","Handles all of the global input events and state. The core of this module is the `Global` struct. It is responsible for aggregating and interpreting raw input events into high-level semantic events.",null,null],[3,"Global","conrod::input::global","Global input event handler that also implements `input::Provider`. The `Ui` passes all events to it's `Global` instance, which aggregates and interprets the events to provide so-called 'high-level' events to widgets. This input gets reset after every update by the `Ui`.",null,null],[12,"start","","The `input::State` as it was at the end of the last update cycle.",74,null],[12,"current","","The most recent `input::State`, with updates from handling all the events this update cycle",74,null],[12,"last_click","","Tracks the last click that occurred and the time at which it occurred in order to create double-click events.",74,null],[3,"Events","","Iterator over all global `event::Event`s that have occurred since the last time `Ui::set_widgets` was called.",null,null],[3,"UiEvents","","An iterator yielding all `event::Ui`s that have occurred since the last time `Ui::set_widgets` was called.",null,null],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"events"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"uievents"}}],[11,"new","","Returns a fresh new `Global`",74,{"inputs":[],"output":{"name":"global"}}],[11,"events","","Returns an iterator yielding all events that have occurred since the last time `Ui::set_widgets` was called.",74,{"inputs":[{"name":"self"}],"output":{"name":"events"}}],[11,"push_event","","Add the new event to the stack.",74,{"inputs":[{"name":"self"},{"name":"event"}],"output":null}],[11,"clear_events_and_update_start_state","","Called at the end of every update cycle in order to prepare the `Global` to handle events for the next one.",74,{"inputs":[{"name":"self"}],"output":null}],[11,"ui","","Converts the `Events` into a `UiEvents`, yielding only the `event::Ui`s that have occurred since the last time `Ui::set_widgets` was called.",75,{"inputs":[{"name":"self"}],"output":{"name":"uievents"}}],[11,"next","","",75,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"touch","conrod::input","Touch-related items.",null,null],[3,"Id","conrod::input::touch","A type for uniquely identifying the source of a touch interaction.",null,null],[3,"Touch","","Represents a touch interaction.",null,null],[12,"phase","","The stage of the touch interaction.",77,null],[12,"id","","A unique identifier associated with the source of the touch interaction.",77,null],[12,"xy","","The location of the touch on the surface/screen. See `Input` docs for information on the co-ordinate system.",77,null],[4,"Phase","","The stage of the touch interaction.",null,null],[13,"Start","","The start of a touch interaction.",78,null],[13,"Move","","A touch moving across a surface.",78,null],[13,"Cancel","","The touch interaction was cancelled.",78,null],[13,"End","","The end of a touch interaction.",78,null],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",79,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",79,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"le","","",79,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"gt","","",79,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"ge","","",79,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"cmp","","",79,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"ordering"}}],[11,"hash","","",79,null],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"phase"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"phase"}],"output":{"name":"bool"}}],[11,"hash","","",78,null],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"touch"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"touch"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"touch"}],"output":{"name":"bool"}}],[11,"new","","Construct a new identifier.",79,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"relative_to","","Returns a copy of the `Touch` relative to the given `xy`.",77,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[11,"clone","conrod::input","",47,{"inputs":[{"name":"self"}],"output":{"name":"source"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"bool"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"motion"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"motion"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"motion"}],"output":{"name":"bool"}}],[0,"position","conrod","Items related to 2D positioning, used throughout conrod.",null,null],[3,"Padding","conrod::position","The distance between the inner edge of a border and the outer edge of the inner content.",null,null],[12,"x","","Padding on the start and end of the x axis.",80,null],[12,"y","","Padding on the start and end of the y axis.",80,null],[4,"Axis","","Represents either Axis in the 2-dimensional plane.",null,null],[13,"X","","The horizontal plane's Axis.",81,null],[13,"Y","","The vertical plane's Axis.",81,null],[4,"Position","","Some Position of some Widget along a single axis.",null,null],[13,"Absolute","","A specific position.",82,null],[13,"Relative","","A position relative to some other Widget.",82,null],[4,"Relative","","Positions that are described as Relative to some other Widget.",null,null],[13,"Scalar","","A relative scalar distance.",83,null],[13,"Align","","Aligned to either the `Start`, `Middle` or `End`.",83,null],[13,"Direction","","A distance as a `Scalar` value over the given `Direction`.",83,null],[13,"Place","","Some place on top of another widget.",83,null],[4,"Direction","","Directionally positioned, normally relative to some other widget.",null,null],[13,"Forwards","","Positioned forwards (positive Scalar) along some Axis.",84,null],[13,"Backwards","","Positioned backwards (negative Scalar) along some Axis.",84,null],[4,"Align","","The orientation of Alignment along some Axis.",null,null],[13,"Start","","Align our Start with the Start of some other widget along the Axis.",85,null],[13,"Middle","","Align our Middle with the Middle of some other widget along the Axis.",85,null],[13,"End","","Align our End with the End of some other widget along the Axis.",85,null],[4,"Place","","Place the widget at a position on some other widget.",null,null],[13,"Start","","Place upon the Start of the Widget's `kid_area`.",86,null],[13,"Middle","","Place upon the Middle of the Widget's `kid_area`.",86,null],[13,"End","","Place upon the End of the Widget's `kid_area`.",86,null],[4,"Dimension","","The length of a Widget over either the x or y axes.",null,null],[13,"Absolute","","Some specific length has been given.",87,null],[13,"Of","","The dimension should match that of the widget at the given index.",87,null],[13,"KidAreaOf","","The dimension should match that of the `kid_area` of the widget at the given index.",87,null],[0,"range","","A type for working one-dimensional ranges.",null,null],[3,"Range","conrod::position::range","Some start and end position along a single axis.",null,null],[12,"start","","The start of some `Range` along an axis.",88,null],[12,"end","","The end of some `Range` along an axis.",88,null],[4,"Edge","","Represents either the Start or End Edge of a Range.",null,null],[13,"Start","","The beginning of a Range.",89,null],[13,"End","","The end of a Range.",89,null],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"edge"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"bool"}}],[11,"new","","Construct a new `Range` from a given range, i.e. `Range::new(start, end)`.",88,{"inputs":[{"name":"scalar"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"from_pos_and_len","","Construct a new `Range` from a given length and its centered position.",88,{"inputs":[{"name":"scalar"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"magnitude","","The `start` value subtracted from the `end` value.",88,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"len","","The absolute length of the Range aka the absolute magnitude.",88,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"middle","","Return the value directly between the start and end values.",88,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"invert","","The current range with its start and end values swapped.",88,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"map_value_to","","Map the given Scalar from `Self` to some other given `Range`.",88,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"range"}],"output":{"name":"scalar"}}],[11,"shift","","Shift the `Range` start and end points by a given `Scalar`.",88,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"direction","","The direction of the Range represented as a normalised scalar.",88,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"undirected","","Converts the Range to an undirected Range. By ensuring that `start` <= `end`.",88,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"max","","The Range that encompasses both self and the given Range.",88,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[11,"overlap","","The Range that represents the range of the overlap between two Ranges if there is some.",88,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["range"],"name":"option"}}],[11,"max_directed","","The Range that encompasses both self and the given Range.",88,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[11,"is_over","","Is the given scalar within our range.",88,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"bool"}}],[11,"round","","Round the values at both ends of the Range and return the result.",88,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"floor","","Floor the values at both ends of the Range and return the result.",88,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"pad_start","","The Range with some padding given to the `start` value.",88,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"pad_end","","The Range with some padding given to the `end` value.",88,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"pad","","The Range with some given padding to be applied to each end.",88,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"pad_ends","","The Range with some padding given for each end.",88,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"clamp_value","","Clamp the given value to the range.",88,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"scalar"}}],[11,"stretch_to_value","","Stretch the end that is closest to the given value only if it lies outside the Range.",88,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"has_same_direction","","Does `self` have the same direction as `other`.",88,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"align_start_of","","Align the `start` of `self` to the `start` of the `other` Range.",88,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_end_of","","Align the `end` of `self` to the `end` of the `other` Range.",88,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_middle_of","","Align the middle of `self` to the middle of the `other` Range.",88,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_after","","Aligns the `start` of `self` with the `end` of `other`.",88,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_before","","Aligns the `end` of `self` with the `start` of `other`.",88,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_to","","Align `self` to `other` along the x axis in accordance with the given `Align` variant.",88,{"inputs":[{"name":"self"},{"name":"align"},{"name":"self"}],"output":{"name":"self"}}],[11,"closest_edge","","The closest Edge of `self` to the given `scalar`.",88,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"edge"}}],[0,"rect","conrod::position","Defines the scalar `Rect` type used throughout conrod.",null,null],[3,"Rect","conrod::position::rect","Defines a Rectangle's bounds across the x and y axes.",null,null],[12,"x","","The start and end positions of the Rectangle on the x axis.",90,null],[12,"y","","The start and end positions of the Rectangle on the y axis.",90,null],[4,"Corner","","Either of the four corners of a Rect.",null,null],[13,"TopLeft","","The top left corner of a Rect.",91,null],[13,"TopRight","","The top right corner of a Rect.",91,null],[13,"BottomLeft","","The bottom left corner of a Rect.",91,null],[13,"BottomRight","","The bottom right corner of a Rect.",91,null],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"corner"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"corner"}],"output":{"name":"bool"}}],[11,"from_xy_dim","","Construct a Rect from a given `Point` and `Dimensions`.",90,{"inputs":[{"name":"point"},{"name":"dimensions"}],"output":{"name":"self"}}],[11,"from_corners","","Construct a Rect from the coordinates of two points.",90,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"self"}}],[11,"overlap","","The Rect representing the area in which two Rects overlap.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"max","","The Rect that encompass the two given sets of Rect.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"x","","The position in the middle of the x bounds.",90,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"y","","The position in the middle of the y bounds.",90,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"xy","","The xy position in the middle of the bounds.",90,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"x_y","","The centered x and y coordinates as a tuple.",90,null],[11,"w","","The width of the Rect.",90,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"h","","The height of the Rect.",90,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"dim","","The total dimensions of the Rect.",90,{"inputs":[{"name":"self"}],"output":{"name":"dimensions"}}],[11,"w_h","","The width and height of the Rect as a tuple.",90,null],[11,"xy_dim","","Convert the Rect to a `Point` and `Dimensions`.",90,null],[11,"x_y_w_h","","The Rect's centered coordinates and dimensions in a tuple.",90,null],[11,"len","","The length of the longest side of the rectangle.",90,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"bottom","","The Rect's lowest y value.",90,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"top","","The Rect's highest y value.",90,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"left","","The Rect's lowest x value.",90,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"right","","The Rect's highest x value.",90,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"top_left","","The top left corner Point.",90,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"bottom_left","","The bottom left corner Point.",90,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"top_right","","The top right corner Point.",90,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"bottom_right","","The bottom right corner Point.",90,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"l_r_b_t","","The edges of the Rect in a tuple (top, bottom, left, right).",90,null],[11,"l_t_w_h","","The left and top edges of the Rect along with the width and height.",90,null],[11,"l_b_w_h","","The left and bottom edges of the Rect along with the width and height.",90,null],[11,"shift_x","","Shift the Rect along the x axis.",90,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"shift_y","","Shift the Rect along the y axis.",90,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"shift","","Shift the Rect by the given Point.",90,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[11,"relative_to_x","","Returns a `Rect` with a position relative to the given position on the x axis.",90,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"relative_to_y","","Returns a `Rect` with a position relative to the given position on the y axis.",90,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"relative_to","","Returns a `Rect` with a position relative to the given position.",90,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[11,"is_over","","Does the given point touch the Rectangle.",90,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"pad_left","","The Rect with some padding applied to the left edge.",90,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_right","","The Rect with some padding applied to the right edge.",90,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_bottom","","The rect with some padding applied to the bottom edge.",90,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_top","","The Rect with some padding applied to the top edge.",90,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad","","The Rect with some padding amount applied to each edge.",90,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"padding","","The Rect with some padding applied.",90,{"inputs":[{"name":"self"},{"name":"padding"}],"output":{"name":"self"}}],[11,"stretch_to_point","","Stretches the closest edge(s) to the given point if the point lies outside of the Rect area.",90,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[11,"left_of","","Align `self`'s right edge with the left edge of the `other` Rect.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"right_of","","Align `self`'s left edge with the right dge of the `other` Rect.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"below","","Align `self`'s top edge with the bottom edge of the `other` Rect.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"above","","Align `self`'s bottom edge with the top edge of the `other` Rect.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_x_of","","Align `self` to `other` along the x axis in accordance with the given `Align` variant.",90,{"inputs":[{"name":"self"},{"name":"align"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_y_of","","Align `self` to `other` along the y axis in accordance with the given `Align` variant.",90,{"inputs":[{"name":"self"},{"name":"align"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_left_of","","Align `self`'s left edge with the left edge of the `other` Rect.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_middle_x_of","","Align the middle of `self` with the middle of the `other` Rect along the x axis.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_right_of","","Align `self`'s right edge with the right edge of the `other` Rect.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_bottom_of","","Align `self`'s bottom edge with the bottom edge of the `other` Rect.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_middle_y_of","","Align the middle of `self` with the middle of the `other` Rect along the y axis.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_top_of","","Align `self`'s top edge with the top edge of the `other` Rect.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"top_left_of","","Place `self` along the top left edges of the `other` Rect.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"top_right_of","","Place `self` along the top right edges of the `other` Rect.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bottom_left_of","","Place `self` along the bottom left edges of the `other` Rect.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bottom_right_of","","Place `self` along the bottom right edges of the `other` Rect.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"mid_top_of","","Place `self` in the middle of the top edge of the `other` Rect.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"mid_bottom_of","","Place `self` in the middle of the bottom edge of the `other` Rect.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"mid_left_of","","Place `self` in the middle of the left edge of the `other` Rect.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"mid_right_of","","Place `self` in the middle of the right edge of the `other` Rect.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"middle_of","","Place `self` directly in the middle of the `other` Rect.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"closest_corner","","Return the Corner of `self` that is closest to the given Point.",90,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"corner"}}],[6,"Scalar","conrod::position","An alias over the Scalar type used throughout Conrod.",null,null],[6,"Depth","","The depth at which the widget will be rendered.",null,null],[6,"Dimensions","","General use 2D spatial dimensions.",null,null],[6,"Point","","General use 2D spatial point.",null,null],[6,"Margin","","The margin for some `Place`ment on either end of an axis.",null,null],[8,"Positionable","","Widgets that are positionable.",null,null],[10,"x_position","","Build with the given Position along the x axis.",92,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"self"}}],[10,"y_position","","Build with the given Position along the y axis.",92,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"self"}}],[10,"get_x_position","","Get the Position along the x axis.",92,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"position"}}],[10,"get_y_position","","Get the Position along the y axis.",92,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"position"}}],[11,"x","","Build with the given Absolute Position along the x axis.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y","","Build with the given Absolute Position along the y axis.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"xy","","Set the Position with some Point.",92,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[11,"x_y","","Set the Position with x y coordinates.",92,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_position_relative","","Set the x Position Relative to the previous widget.",92,{"inputs":[{"name":"self"},{"name":"relative"}],"output":{"name":"self"}}],[11,"y_position_relative","","Set the y Position Relative to the previous widget.",92,{"inputs":[{"name":"self"},{"name":"relative"}],"output":{"name":"self"}}],[11,"x_y_position_relative","","Set the x and y Positions Relative to the previous widget.",92,{"inputs":[{"name":"self"},{"name":"relative"},{"name":"relative"}],"output":{"name":"self"}}],[11,"x_position_relative_to","","Set the x Position Relative to the given widget.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"relative"}],"output":{"name":"self"}}],[11,"y_position_relative_to","","Set the y Position Relative to the given widget.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"relative"}],"output":{"name":"self"}}],[11,"x_y_position_relative_to","","Set the x and y Positions Relative to the given widget.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"relative"},{"name":"relative"}],"output":{"name":"self"}}],[11,"x_relative","","Set the Position as a Scalar along the x axis Relative to the middle of previous widget.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y_relative","","Set the Position as a Scalar along the y axis Relative to the middle of previous widget.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"xy_relative","","Set the Position as a Point Relative to the middle of the previous widget.",92,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[11,"x_y_relative","","Set the Position as Scalars along the x and y axes Relative to the middle of the previous widget.",92,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_relative_to","","Set the position relative to the widget with the given widget::Id.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y_relative_to","","Set the position relative to the widget with the given widget::Id.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"xy_relative_to","","Set the position relative to the widget with the given widget::Id.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"point"}],"output":{"name":"self"}}],[11,"x_y_relative_to","","Set the position relative to the widget with the given widget::Id.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_direction","","Build with the Position along the x axis as some distance from another widget.",92,{"inputs":[{"name":"self"},{"name":"direction"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y_direction","","Build with the Position along the y axis as some distance from another widget.",92,{"inputs":[{"name":"self"},{"name":"direction"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"down","","Build with the Position as some distance below another widget.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"up","","Build with the Position as some distance above another widget.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"left","","Build with the Position as some distance to the left of another widget.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"right","","Build with the Position as some distance to the right of another widget.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_direction_from","","Build with the Position along the x axis as some distance from the given widget.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"direction"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y_direction_from","","Build with the Position along the y axis as some distance from the given widget.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"direction"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"down_from","","Build with the Position as some distance below the given widget.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"up_from","","Build with the Position as some distance above the given widget.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"left_from","","Build with the Position as some distance to the left of the given widget.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"right_from","","Build with the Position as some distance to the right of the given widget.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_align","","Align the Position of the widget along the x axis.",92,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"self"}}],[11,"y_align","","Align the Position of the widget along the y axis.",92,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"self"}}],[11,"align_left","","Align the position to the left (only effective for Up or Down `Direction`s).",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_middle_x","","Align the position to the middle (only effective for Up or Down `Direction`s).",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_right","","Align the position to the right (only effective for Up or Down `Direction`s).",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_top","","Align the position to the top (only effective for Left or Right `Direction`s).",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_middle_y","","Align the position to the middle (only effective for Left or Right `Direction`s).",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_bottom","","Align the position to the bottom (only effective for Left or Right `Direction`s).",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"x_align_to","","Align the Position of the widget with the given widget along the x axis.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"align"}],"output":{"name":"self"}}],[11,"y_align_to","","Align the Position of the widget with the given widget along the y axis.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"align"}],"output":{"name":"self"}}],[11,"align_left_of","","Align the position to the left (only effective for Up or Down `Direction`s).",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"align_middle_x_of","","Align the position to the middle (only effective for Up or Down `Direction`s).",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"align_right_of","","Align the position to the right (only effective for Up or Down `Direction`s).",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"align_top_of","","Align the position to the top (only effective for Left or Right `Direction`s).",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"align_middle_y_of","","Align the position to the middle (only effective for Left or Right `Direction`s).",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"align_bottom_of","","Align the position to the bottom (only effective for Left or Right `Direction`s).",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"x_place_on","","Place the widget at some position on the `other` Widget along the x axis.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"place"}],"output":{"name":"self"}}],[11,"y_place_on","","Place the widget at some position on the `other` Widget along the y axis.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"place"}],"output":{"name":"self"}}],[11,"middle_of","","Place the widget in the middle of the given Widget.",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"top_left_of","","Place the widget in the top left corner of the given Widget.",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"top_left_with_margin_on","","Place the widget in the top left corner of the given Widget with the given margin between both edges.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_left_with_margins_on","","Place the widget in the top left corner of the given Widget with the given margins between each respective edge.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_right_of","","Place the widget in the top right corner of the given Widget.",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"top_right_with_margin_on","","Place the widget in the top right corner of the given Widget with the given margin between both edges.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_right_with_margins_on","","Place the widget in the top right corner of the given Widget with the given margins between each respective edge.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_left_of","","Place the widget in the bottom left corner of the given Widget.",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"bottom_left_with_margin_on","","Place the widget in the bottom left corner of the given Widget with the given margin between both edges.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_left_with_margins_on","","Place the widget in the bottom left corner of the given Widget with the given margins between each respective edge.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_right_of","","Place the widget in the bottom right corner of the given Widget.",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"bottom_right_with_margin_on","","Place the widget in the bottom right corner of the given Widget with the given margin between both edges.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_right_with_margins_on","","Place the widget in the bottom right corner of the given Widget with the given margins between each respective edge.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_top_of","","Place the widget in the middle of the top edge of the given Widget.",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"mid_top_with_margin_on","","Place the widget in the middle of the top edge of the given Widget with the given margin between the edges.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_bottom_of","","Place the widget in the middle of the bottom edge of the given Widget.",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"mid_bottom_with_margin_on","","Place the widget in the middle of the bottom edge of the given Widget with the given margin between the edges.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_left_of","","Place the widget in the middle of the left edge of the given Widget.",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"mid_left_with_margin_on","","Place the widget in the middle of the left edge of the given Widget with the given margin between the edges.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_right_of","","Place the widget in the middle of the right edge of the given Widget.",92,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"mid_right_with_margin_on","","Place the widget in the middle of the right edge of the given Widget with the given margin between the edges.",92,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_place","","Place the widget at some position on the Widget along the x axis.",92,{"inputs":[{"name":"self"},{"name":"place"}],"output":{"name":"self"}}],[11,"y_place","","Place the widget at some position on the Widget along the y axis.",92,{"inputs":[{"name":"self"},{"name":"place"}],"output":{"name":"self"}}],[11,"middle","","Place the widget in the middle of the current parent Widget.",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"top_left","","Place the widget in the top left corner of the current parent Widget.",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"top_left_with_margin","","Place the widget in the top left corner of the current parent Widget with the given margin between both edges.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_left_with_margins","","Place the widget in the top left corner of the current parent Widget with the given margins between each respective edge.",92,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_right","","Place the widget in the top right corner of the current parent Widget.",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"top_right_with_margin","","Place the widget in the top right corner of the current parent Widget with the given margin between both edges.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_right_with_margins","","Place the widget in the top right corner of the current parent Widget with the given margins between each respective edge.",92,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_left","","Place the widget in the bottom left corner of the current parent Widget.",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bottom_left_with_margin","","Place the widget in the bottom left corner of the current parent Widget with the given margin between both edges.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_left_with_margins","","Place the widget in the bottom left corner of the current parent Widget with the given margins between each respective edge.",92,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_right","","Place the widget in the bottom right corner of the current parent Widget.",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bottom_right_with_margin","","Place the widget in the bottom right corner of the current parent Widget with the given margin between both edges.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_right_with_margins","","Place the widget in the bottom right corner of the current parent Widget with the given margins between each respective edge.",92,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_top","","Place the widget in the middle of the top edge of the current parent Widget.",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"mid_top_with_margin","","Place the widget in the middle of the top edge of the current parent Widget with the given margin from the edge.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_bottom","","Place the widget in the middle of the bottom edge of the current parent Widget.",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"mid_bottom_with_margin","","Place the widget in the middle of the bottom edge of the current parent Widget with the given margin from the edge.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_left","","Place the widget in the middle of the left edge of the current parent Widget.",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"mid_left_with_margin","","Place the widget in the middle of the left edge of the current parent Widget with the given margin from the edge.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_right","","Place the widget in the middle of the right edge of the current parent Widget.",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"mid_right_with_margin","","Place the widget in the middle of the right edge of the current parent Widget with the given margin from the edge.",92,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[10,"depth","","The depth at which the widget should be rendered relatively to its sibling widgets.",92,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"self"}}],[10,"get_depth","","Return the depth.",92,{"inputs":[{"name":"self"}],"output":{"name":"depth"}}],[8,"Sizeable","","Widgets that support different dimensions.",null,null],[10,"x_dimension","","Set the length along the x axis.",93,{"inputs":[{"name":"self"},{"name":"dimension"}],"output":{"name":"self"}}],[10,"y_dimension","","Set the length along the y axis.",93,{"inputs":[{"name":"self"},{"name":"dimension"}],"output":{"name":"self"}}],[10,"get_x_dimension","","The widget's length along the x axis as a Dimension.",93,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[10,"get_y_dimension","","The widget's length along the y axis as a Dimension.",93,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"w","","Set the absolute width for the widget.",93,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"h","","Set the absolute height for the widget.",93,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"wh","","Set the dimensions for the widget.",93,{"inputs":[{"name":"self"},{"name":"dimensions"}],"output":{"name":"self"}}],[11,"w_h","","Set the width and height for the widget.",93,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"w_of","","Set the width as the width of the widget at the given index.",93,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"padded_w_of","","Set the width as the width of the widget at the given index padded at both ends by the given Scalar.",93,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"h_of","","Set the height as the height of the widget at the given index.",93,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"padded_h_of","","Set the height as the height of the widget at the given index padded at both ends by the given Scalar.",93,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"wh_of","","Set the dimensions as the dimensions of the widget at the given index.",93,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"padded_wh_of","","Set the dimensions as the dimensions of the widget at the given index with all four edges padded by the given scalar.",93,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"kid_area_w_of","","Set the width as the width of the padded area of the widget at the given index.",93,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"padded_kid_area_w_of","","Set the width as the `KidArea` width for the widget at the given index, padded at both ends by the given scalar.",93,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"kid_area_h_of","","Set the height as the `KidArea` height of the widget at the given index.",93,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"padded_kid_area_h_of","","Set the height as the `KidArea` height of the widget at the given index, padded at both ends by the given scalar.",93,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"kid_area_wh_of","","Set the dimensions as the `KidArea` dimensions of the widget at the given index.",93,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"padded_kid_area_wh_of","","Set the dimensions as the `KidArea` dimensions of the widget at the given index, padded at all four edges by the given scalar.",93,{"inputs":[{"name":"self"},{"name":"id"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"get_w","","Get the absolute width of the widget as a Scalar value.",93,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"generics":["scalar"],"name":"option"}}],[11,"get_h","","Get the height of the widget.",93,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"generics":["scalar"],"name":"option"}}],[11,"get_wh","","The dimensions for the widget.",93,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"generics":["dimensions"],"name":"option"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"axis"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"bool"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"relative"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"relative"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"relative"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"align"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"bool"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"place"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"place"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"place"}],"output":{"name":"bool"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"dimension"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"dimension"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"dimension"}],"output":{"name":"bool"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"padding"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"padding"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"padding"}],"output":{"name":"bool"}}],[11,"none","","No padding.",80,{"inputs":[],"output":{"name":"padding"}}],[0,"render","conrod","Conrod's generic graphics backend.",null,null],[3,"Primitives","conrod::render","An iterator-like type that yields a reference to each primitive in order of depth for rendering.",null,null],[3,"OwnedPrimitives","","An owned alternative to the `Primitives` type.",null,null],[3,"Primitive","","Data required for rendering a single primitive widget.",null,null],[12,"id","","The id of the widget within the widget graph.",94,null],[12,"kind","","State and style for this primitive widget.",94,null],[12,"scizzor","","The Rect to which the primitive widget should be cropped.",94,null],[12,"rect","","The bounding rectangle for the `Primitive`.",94,null],[3,"Text","","A type used for producing a `PositionedGlyph` iterator.",null,null],[3,"WalkOwnedPrimitives","","An iterator-like type for yielding `Primitive`s from an `OwnedPrimitives`.",null,null],[4,"PrimitiveKind","","The unique kind for each primitive element in the Ui.",null,null],[13,"Rectangle","","A filled `Rectangle`.",95,null],[12,"color","conrod::render::PrimitiveKind","The fill colour for the rectangle. ",95,null],[13,"TrianglesSingleColor","conrod::render","A series of consecutive `Triangles` that are all the same color.",95,null],[12,"color","conrod::render::PrimitiveKind","The color of all triangles.",95,null],[12,"triangles","","An ordered slice of triangles.",95,null],[13,"TrianglesMultiColor","conrod::render","A series of consecutive `Triangles` with unique colors per vertex.",95,null],[12,"triangles","conrod::render::PrimitiveKind","An ordered slice of multicolored triangles.",95,null],[13,"Image","conrod::render","A single `Image`, produced by the primitive `Image` widget.",95,null],[12,"image_id","conrod::render::PrimitiveKind","The unique identifier of the image that will be drawn.",95,null],[12,"color","","When `Some`, colours the `Image`. When `None`, the `Image` uses its regular colours.",95,null],[12,"source_rect","","The area of the texture that will be drawn to the `Image`'s `Rect`.",95,null],[13,"Text","conrod::render","A single block of `Text`, produced by the primitive `Text` widget.",95,null],[12,"color","conrod::render::PrimitiveKind","The colour of the `Text`.",95,null],[12,"text","","All glyphs within the `Text` laid out in their correct positions in order from top-left to bottom right.",95,null],[12,"font_id","","The unique identifier for the font, useful for the `glyph_cache.rect_for(id, glyph)` method when using the `conrod::text::GlyphCache` (rusttype's GPU `Cache`).",95,null],[13,"Other","conrod::render","An `Other` variant will be yielded for every non-primitive widget in the list.",95,null],[8,"PrimitiveWalker","","A trait that allows the user to remain generic over types yielding `Primitive`s.",null,null],[10,"next_primitive","","Yield the next `Primitive` in order of depth, bottom to top.",96,{"inputs":[{"name":"self"}],"output":{"generics":["primitive"],"name":"option"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"ownedprimitives"}}],[11,"next_primitive","","",98,{"inputs":[{"name":"self"}],"output":{"generics":["primitive"],"name":"option"}}],[11,"next_primitive","","",99,{"inputs":[{"name":"self"}],"output":{"generics":["primitive"],"name":"option"}}],[11,"positioned_glyphs","","Produces a list of `PositionedGlyph`s which may be used to cache and render the text.",100,null],[11,"new","","Constructor for the `Primitives` iterator.",98,null],[11,"next","","Yield the next `Primitive` for rendering.",98,{"inputs":[{"name":"self"}],"output":{"generics":["primitive"],"name":"option"}}],[11,"owned","","Collect the `Primitives` list into an owned collection.",98,{"inputs":[{"name":"self"}],"output":{"name":"ownedprimitives"}}],[11,"walk","","Produce an iterator-like type for yielding `Primitive`s.",97,{"inputs":[{"name":"self"}],"output":{"name":"walkownedprimitives"}}],[11,"next","","Yield the next `Primitive` in order or rendering depth, bottom to top.",99,{"inputs":[{"name":"self"}],"output":{"generics":["primitive"],"name":"option"}}],[0,"text","conrod","Text layout logic.",null,null],[3,"Glyph","conrod::text","A single glyph of a font. this may either be a thin wrapper referring to the font and the glyph id, or it may be a standalone glyph that owns the data needed by it.",null,null],[3,"GlyphId","","Represents a glyph identifier for a particular font. This identifier will not necessarily correspond to the correct glyph in a font other than the one that it was obtained from.",null,null],[12,"0","","",101,null],[3,"GlyphIter","","",null,null],[3,"LayoutIter","","",null,null],[3,"Scale","","Defines the size of a rendered face of a font, in pixels, horizontally and vertically. A vertical scale of `y` pixels means that the distance betwen the ascent and descent lines (see `VMetrics`) of the face will be `y` pixels. If `x` and `y` are equal the scaling is uniform. Non-uniform scaling by a factor f in the horizontal direction is achieved by setting `x` equal to f times `y`.",null,null],[12,"x","","Horizontal scale, in pixels.",102,null],[12,"y","","Vertical scale, in pixels.",102,null],[3,"GlyphCache","","An implementation of a dynamic GPU glyph cache. See the module documentation for more information.",null,null],[3,"Lines","","An iterator yielding each line within the given `text` as a new `&str`, where the start and end indices into each line are provided by the given iterator.",null,null],[4,"Justify","","A type used for referring to typographic alignment of `Text`.",null,null],[13,"Left","","Align text to the start of the bounding `Rect`'s x axis.",103,null],[13,"Center","","Symmetrically align text along the y axis.",103,null],[13,"Right","","Align text to the end of the bounding `Rect`'s x axis.",103,null],[5,"height","","Determine the total height of a block of text with the given number of lines, font size and `line_spacing` (the space that separates each line of text).",null,{"inputs":[{"name":"usize"},{"name":"fontsize"},{"name":"scalar"}],"output":{"name":"scalar"}}],[5,"lines","","Produce an iterator yielding each line within the given `text` as a new `&str`, where the start and end indices into each line are provided by the given iterator.",null,{"inputs":[{"name":"str"},{"name":"i"}],"output":{"name":"lines"}}],[5,"pt_to_px","","Converts the given font size in \"points\" to its font size in pixels.",null,{"inputs":[{"name":"fontsize"}],"output":{"name":"f32"}}],[5,"pt_to_scale","","Converts the given font size in \"points\" to a uniform `rusttype::Scale`.",null,{"inputs":[{"name":"fontsize"}],"output":{"name":"scale"}}],[0,"rt","","Re-exported RustType geometrical types.",null,null],[3,"Point","conrod::text::rt","A point in 2-dimensional space, with each dimension of type `N`.",null,null],[12,"x","","",104,null],[12,"y","","",104,null],[3,"Rect","","A rectangle, with top-left corner at `min`, and bottom-right corner at `max`.",null,null],[12,"min","","",105,null],[12,"max","","",105,null],[3,"Vector","","A vector in 2-dimensional space, with each dimension of type `N`.",null,null],[12,"x","","",106,null],[12,"y","","",106,null],[5,"point","","A convenience function for generating `Point`s.",null,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"point"}}],[5,"vector","","A convenience function for generating `Vector`s.",null,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"vector"}}],[0,"font","conrod::text","The `font::Id` and `font::Map` types.",null,null],[3,"Id","conrod::text::font","A type-safe wrapper around the `FontId`.",null,null],[3,"Map","","A collection of mappings from `font::Id`s to `rusttype::Font`s.",null,null],[3,"NewIds","","An iterator yielding an `Id` for each new `rusttype::Font` inserted into the `Map` via the `insert_collection` method.",null,null],[3,"Ids","","Yields the `Id` for each `Font` within the `Map`.",null,null],[4,"Error","","Returned when loading new fonts from file or bytes.",null,null],[13,"IO","","Some error occurred while loading a `FontCollection` from a file.",107,null],[13,"NoFont","","No `Font`s could be yielded from the `FontCollection`.",107,null],[5,"collection_from_file","","Load a `super::FontCollection` from a file at a given path.",null,{"inputs":[{"name":"p"}],"output":{"generics":["fontcollection","error"],"name":"result"}}],[5,"from_file","","Load a single `Font` from a file at the given path.",null,{"inputs":[{"name":"p"}],"output":{"generics":["font","error"],"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",108,null],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",108,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",108,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"le","","",108,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"gt","","",108,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"ge","","",108,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"cmp","","",108,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"ordering"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"ids"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","Returns the inner `usize` from the `Id`.",108,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Construct the new, empty `Map`.",110,{"inputs":[],"output":{"name":"self"}}],[11,"get","","Borrow the `rusttype::Font` associated with the given `font::Id`.",110,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"generics":["font"],"name":"option"}}],[11,"insert","","Adds the given `rusttype::Font` to the `Map` and returns a unique `Id` for it.",110,{"inputs":[{"name":"self"},{"name":"font"}],"output":{"name":"id"}}],[11,"insert_from_file","","Insert a single `Font` into the map by loading it from the given file path.",110,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["id","error"],"name":"result"}}],[11,"ids","","Produces an iterator yielding the `Id` for each `Font` within the `Map`.",110,{"inputs":[{"name":"self"}],"output":{"name":"ids"}}],[11,"next","","",111,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",109,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",107,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"description","","",107,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[0,"glyph","conrod::text","Logic and types specific to individual glyph layout.",null,null],[3,"Rects","conrod::text::glyph","An iterator yielding the `Rect` for each `char`'s `Glyph` in the given `text`.",null,null],[3,"RectsPerLine","","An iterator that, for every `(line, line_rect)` pair yielded by the given iterator, produces an iterator that yields a `Rect` for every character in that line.",null,null],[3,"SelectedRectsPerLine","","Yields an iteraor yielding `Rect`s for each selected character in each line of text within the given iterator yielding char `Rect`s.",null,null],[3,"SelectedRects","","Yields a `Rect` for each selected character in a single line of text.",null,null],[5,"index_after_cursor","","Find the index of the character that directly follows the cursor at the given `cursor_idx`.",null,{"inputs":[{"name":"i"},{"name":"index"}],"output":{"generics":["usize"],"name":"option"}}],[5,"rects_per_line","","Produce an iterator that, for every `(line, line_rect)` pair yielded by the given iterator, produces an iterator that yields a `Rect` for every character in that line.",null,{"inputs":[{"name":"i"},{"name":"font"},{"name":"fontsize"}],"output":{"name":"rectsperline"}}],[5,"selected_rects_per_line","","Produces an iterator that yields iteraors yielding `Rect`s for each selected character in each line of text within the given iterator yielding char `Rect`s.",null,{"inputs":[{"name":"i"},{"name":"font"},{"name":"fontsize"},{"name":"index"},{"name":"index"}],"output":{"name":"selectedrectsperline"}}],[6,"X","","Some position along the X axis (used within `CharXs`).",null,null],[6,"HalfW","","The half of the width of some character (used within `CharXs`).",null,null],[11,"next","","",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"cursor","conrod::text","Logic related to the positioning of the cursor within text.",null,null],[3,"XysPerLine","conrod::text::cursor","Every possible cursor position within each line of text yielded by the given iterator.",null,null],[3,"XysPerLineFromText","","Similarly to `XysPerLine`, yields every possible cursor position within each line of text yielded by the given iterator.",null,null],[3,"Xs","","Each possible cursor position along the x axis within a line of text.",null,null],[3,"Index","","An index representing the position of a cursor within some text.",null,null],[12,"line","","The index of the line upon which the cursor is situated.",116,null],[12,"char","","The index within all possible cursor positions for the line.",116,null],[5,"xys_per_line","","Every possible cursor position within each line of text yielded by the given iterator.",null,{"inputs":[{"name":"i"},{"name":"font"},{"name":"str"},{"name":"fontsize"}],"output":{"name":"xysperline"}}],[5,"xys_per_line_from_text","","Similarly to `xys_per_line`, this produces an iterator yielding every possible cursor position within each line of text yielded by the given iterator.",null,null],[5,"index_before_char","","Convert the given character index into a cursor `Index`.",null,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"generics":["index"],"name":"option"}}],[5,"xy_at","","Determine the xy location of the cursor at the given cursor `Index`.",null,{"inputs":[{"name":"i"},{"name":"index"}],"output":{"name":"option"}}],[5,"closest_line","","Find the closest line for the given `y` position, and return the line index, Xs iterator, and y-range of that line",null,{"inputs":[{"name":"scalar"},{"name":"i"}],"output":{"name":"option"}}],[5,"closest_cursor_index_and_xy","","Find the closest cursor index to the given `xy` position, and the center `Point` of that cursor.",null,{"inputs":[{"name":"point"},{"name":"i"}],"output":{"name":"option"}}],[5,"closest_cursor_index_on_line","","Find the closest cursor index to the given `x` position on the given line along with the `x` position of that cursor.",null,null],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"xysperline"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"xysperlinefromtext"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"index"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",116,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",116,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",116,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"le","","",116,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"gt","","",116,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"ge","","",116,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"cmp","","",116,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"ordering"}}],[11,"previous_word_start","","The cursor index of the beginning of the word (block of non-whitespace) before `self`.",116,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i"}],"output":{"name":"option"}}],[11,"next_word_end","","The cursor index of the end of the first word (block of non-whitespace) after `self`.",116,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i"}],"output":{"name":"option"}}],[11,"previous","","The cursor index that comes before `self`.",116,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"next","","The cursor index that follows `self`.",116,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"clamp_to_lines","","Clamps `self` to the given lines.",116,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",117,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",119,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"line","conrod::text","Text handling logic related to individual lines of text.",null,null],[3,"Info","conrod::text::line","Information about a single line of text within a `&str`.",null,null],[12,"start_byte","","The index into the `&str` that represents the first character within the line.",120,null],[12,"start_char","","The character index of the first character in the line.",120,null],[12,"end_break","","The index within the `&str` at which this line breaks into a new line, along with the index at which the following line begins. The variant describes whether the break is caused by a `Newline` character or a `Wrap` by the given wrap function.",120,null],[12,"width","","The total width of all characters within the line.",120,null],[3,"Infos","","An iterator yielding an `Info` struct for each line in the given `text` wrapped by the given `next_break_fn`.",null,null],[3,"Rects","","An iterator yielding a `Rect` for each line in ",null,null],[3,"SelectedRects","","An iterator yielding a `Rect` for each selected line in a block of text.",null,null],[4,"Break","","The two types of Break indices returned by the WrapIndicesBy iterators.",null,null],[13,"Wrap","","A break caused by the text exceeding some maximum width.",121,null],[12,"byte","conrod::text::line::Break","The byte index at which the break occurs.",121,null],[12,"char","","The char index at which the string should wrap due to exceeding a maximum width.",121,null],[12,"len_bytes","","The byte length which should be skipped in order to reach the first non-whitespace character to use as the beginning of the next line.",121,null],[13,"Newline","conrod::text::line","A break caused by a newline character.",121,null],[12,"byte","conrod::text::line::Break","The byte index at which the string should wrap due to exceeding a maximum width.",121,null],[12,"char","","The char index at which the string should wrap due to exceeding a maximum width.",121,null],[12,"len_bytes","","The width of the \"newline\" token in bytes.",121,null],[13,"End","conrod::text::line","The end of the string has been reached, with the given length.",121,null],[12,"byte","conrod::text::line::Break","The ending byte index.",121,null],[12,"char","","The ending char index.",121,null],[5,"width","conrod::text::line","Produce the width of the given line of text including spaces (i.e. ' ').",null,{"inputs":[{"name":"str"},{"name":"font"},{"name":"fontsize"}],"output":{"name":"scalar"}}],[5,"infos_wrapped_by","","Produce an `Infos` iterator wrapped by the given `next_break_fn`.",null,{"inputs":[{"name":"str"},{"name":"font"},{"name":"fontsize"},{"name":"scalar"},{"name":"f"}],"output":{"name":"infos"}}],[5,"infos","","Produce an `Infos` iterator that yields an `Info` for every line in the given text.",null,{"inputs":[{"name":"str"},{"name":"font"},{"name":"fontsize"}],"output":{"generics":["nextbreakfnptr"],"name":"infos"}}],[5,"rects","","Produce an iterator yielding the bounding `Rect` for each line in the text.",null,{"inputs":[{"name":"i"},{"name":"fontsize"},{"name":"rect"},{"name":"justify"},{"name":"align"},{"name":"scalar"}],"output":{"name":"rects"}}],[5,"selected_rects","","Produces an iterator yielding a `Rect` for the selected range in each selected line in a block of text.",null,{"inputs":[{"name":"i"},{"name":"font"},{"name":"fontsize"},{"name":"index"},{"name":"index"}],"output":{"name":"selectedrects"}}],[6,"NextBreakFnPtr","","An alias for function pointers that are compatible with the `Block`'s required text wrapping function.",null,null],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"break"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",121,{"inputs":[{"name":"self"},{"name":"break"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"self"},{"name":"break"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"rects"}}],[11,"byte_index","","Return the index at which the break occurs.",121,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"char_index","","Return the index of the `char` at which the break occurs.",121,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"end_byte","","The end of the byte index range for indexing into the slice.",120,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end_char","","The end of the index range for indexing into the slice.",120,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"byte_range","","The index range for indexing (via bytes) into the original str slice.",120,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"range"}}],[11,"char_range","","The index range for indexing into a `char` iterator over the original str slice.",120,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"range"}}],[11,"wrap_by_character","","Converts `Self` into an `Infos` whose lines are wrapped at the character that first causes the line width to exceed the given `max_width`.",123,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"wrap_by_whitespace","","Converts `Self` into an `Infos` whose lines are wrapped at the whitespace prior to the character that causes the line width to exceed the given `max_width`.",123,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"next","","",123,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",122,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",124,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"FontCollection","conrod::text","The RustType `FontCollection` type used by conrod.",null,null],[6,"Font","","The RustType `Font` type used by conrod.",null,null],[6,"PositionedGlyph","","The RustType `PositionedGlyph` type used by conrod.",null,null],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"justify"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"justify"}],"output":{"name":"bool"}}],[11,"next","","",125,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"theme","conrod","Types a functionality for handling Canvas and Widget theming.",null,null],[3,"Theme","conrod::theme","A serializable collection of canvas and widget styling defaults.",null,null],[12,"name","","A name for the theme used for identification.",126,null],[12,"padding","","Padding for Canvas layout and positioning.",126,null],[12,"x_position","","A default widget position along the x axis.",126,null],[12,"y_position","","A default widget position along the y axis.",126,null],[12,"background_color","","A default background for the theme.",126,null],[12,"shape_color","","A default color for widget shapes.",126,null],[12,"border_color","","A default color for widget borders.",126,null],[12,"border_width","","A default width for widget borders.",126,null],[12,"label_color","","A default color for widget labels.",126,null],[12,"font_id","","The `Id` of the default font used for text widgets when one is not specified.",126,null],[12,"font_size_large","","A default \"large\" font size.",126,null],[12,"font_size_medium","","A default \"medium\" font size.",126,null],[12,"font_size_small","","A default \"small\" font size.",126,null],[12,"widget_styling","","`StyleMap` for unique styling of each widget, index-able by the Widget::kind.",126,null],[12,"mouse_drag_threshold","","Mouse Drag distance threshold determines the minimum distance from the mouse-down point that the mouse must move before starting a drag operation.",126,null],[12,"double_click_threshold","","Once the `Duration` that separates two consecutive `Click`s is greater than this value, a `DoubleClick` event will no longer be generated.",126,null],[3,"WidgetDefault","","The defaults for a specific widget.",null,null],[12,"style","","The unique style of a widget.",127,null],[12,"common","","The attributes commonly shared between widgets.",127,null],[3,"UniqueDefault","","A WidgetDefault downcast to a Widget's unique Style type.",null,null],[12,"style","","The unique style for the widget.",128,null],[12,"common","","Attributes that are common to all widgets.",128,null],[6,"StyleMap","","`std::collections::HashMap` with `fnv::FnvHasher` for unique styling of each widget, index-able by the Widget::kind.",null,null],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"uniquedefault"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructor for a WidgetDefault.",127,{"inputs":[{"generics":["any"],"name":"box"}],"output":{"name":"widgetdefault"}}],[11,"default","","The default theme if not loading from file.",126,{"inputs":[],"output":{"name":"theme"}}],[11,"widget_style","","Retrieve the unique default styling for a widget.",126,{"inputs":[{"name":"self"}],"output":{"generics":["uniquedefault"],"name":"option"}}],[11,"new","conrod","Begin building a new `Ui` instance.",1,{"inputs":[{"name":"dimensions"}],"output":{"name":"self"}}],[11,"theme","","The theme used to set default styling for widgets.",1,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"self"}}],[11,"widgets_capacity","","An estimation of the maximum number of widgets that will be used with this `Ui` instance.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"build","","Build Ui from the given builder",1,{"inputs":[{"name":"self"}],"output":{"name":"ui"}}],[11,"widget_input","","Returns a `input::Widget` for the given widget",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"widget"}}],[11,"rect_of","","The Rect for the widget at the given index.",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"generics":["rect"],"name":"option"}}],[11,"w_of","","The absolute width of the widget at the given index.",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"generics":["scalar"],"name":"option"}}],[11,"h_of","","The absolute height of the widget at the given index.",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"generics":["scalar"],"name":"option"}}],[11,"wh_of","","The absolute dimensions for the widget at the given index.",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"generics":["dimensions"],"name":"option"}}],[11,"xy_of","","The coordinates for the widget at the given index.",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"generics":["point"],"name":"option"}}],[11,"kid_area_of","","The `kid_area` of the widget at the given index.",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"generics":["rect"],"name":"option"}}],[11,"maybe_prev_widget","","An index to the previously updated widget if there is one.",0,{"inputs":[{"name":"self"}],"output":{"generics":["id"],"name":"option"}}],[11,"widget_graph","","Borrow the Ui's `widget_graph`.",0,{"inputs":[{"name":"self"}],"output":{"name":"graph"}}],[11,"updated_widgets","","Borrow the Ui's set of updated widgets.",0,{"inputs":[{"name":"self"}],"output":{"name":"fnvhashset"}}],[11,"prev_updated_widgets","","Borrow the Ui's set of updated widgets.",0,{"inputs":[{"name":"self"}],"output":{"name":"fnvhashset"}}],[11,"widget_id_generator","","Produces a type that may be used to generate new unique `widget::Id`s.",0,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"scroll_widget","","Scroll the widget at the given index by the given offset amount.",0,null],[11,"handle_event","","Handle raw window events and update the `Ui` state accordingly.",0,{"inputs":[{"name":"self"},{"name":"input"}],"output":null}],[11,"global_input","","Get an immutable reference to global input. Handles aggregation of events and providing them to Widgets",0,{"inputs":[{"name":"self"}],"output":{"name":"global"}}],[11,"calc_xy","","Get the centred xy coords for some given `Dimension`s, `Position` and alignment.",0,{"inputs":[{"name":"self"},{"generics":["id"],"name":"option"},{"name":"position"},{"name":"position"},{"name":"dimensions"},{"name":"bool"}],"output":{"name":"point"}}],[11,"set_widgets","","A function within which all widgets are instantiated by the user, normally situated within the \"update\" stage of an event loop.",0,{"inputs":[{"name":"self"}],"output":{"name":"uicell"}}],[11,"set_num_redraw_frames","","Set the number of frames that the `Ui` should draw in the case that `needs_redraw` is called. The default is `3` (see the SAFE_REDRAW_COUNT docs for details).",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"needs_redraw","","Tells the `Ui` that it needs to be re-draw everything. It does this by setting the redraw count to `num_redraw_frames`. See the docs for `set_num_redraw_frames`, SAFE_REDRAW_COUNT or `draw_if_changed` for more info on how/why the redraw count is used.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_with","","The first of the `Primitives` yielded by `Ui::draw` or `Ui::draw_if_changed` will always be a `Rectangle` the size of the window in which conrod is hosted.",0,{"inputs":[{"name":"self"},{"name":"color"}],"output":null}],[11,"draw","","Draw the `Ui` in it's current state.",0,{"inputs":[{"name":"self"}],"output":{"name":"primitives"}}],[11,"draw_if_changed","","Same as the `Ui::draw` method, but only draws if the `redraw_count` is greater than 0.",0,{"inputs":[{"name":"self"}],"output":{"generics":["primitives"],"name":"option"}}],[11,"kids_bounding_box","","The Rect that bounds the kids of the widget with the given index.",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"generics":["rect"],"name":"option"}}],[11,"visible_area","","The Rect that represents the maximum fully visible area for the widget with the given index, including consideration of cropped scroll area.",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"generics":["rect"],"name":"option"}}],[11,"mouse_cursor","","Get mouse cursor state.",0,{"inputs":[{"name":"self"}],"output":{"name":"mousecursor"}}],[11,"theme","","A reference to the `Theme` that is currently active within the `Ui`.",129,{"inputs":[{"name":"self"}],"output":{"name":"theme"}}],[11,"font","","A convenience method for borrowing the `Font` for the given `Id` if it exists.",129,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"generics":["font"],"name":"option"}}],[11,"window_dim","","Returns the dimensions of the window",129,{"inputs":[{"name":"self"}],"output":{"name":"dimensions"}}],[11,"global_input","","Returns an immutable reference to the `input::Global` of the `Ui`.",129,{"inputs":[{"name":"self"}],"output":{"name":"global"}}],[11,"widget_input","","Returns a `input::Widget` with input events for the widget.",129,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"widget"}}],[11,"widget_id_generator","","Produces a type that may be used to generate new unique `widget::Id`s.",129,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"kids_bounding_box","","The Rect that bounds the kids of the widget with the given index.",129,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"generics":["rect"],"name":"option"}}],[11,"scroll_widget","","Scroll the widget at the given index by the given offset amount.",129,null],[11,"set_mouse_cursor","","Sets the mouse cursor",129,{"inputs":[{"name":"self"},{"name":"mousecursor"}],"output":null}],[11,"drop","","",129,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",129,{"inputs":[{"name":"self"}],"output":{"name":"ui"}}],[11,"as_ref","","",129,{"inputs":[{"name":"self"}],"output":{"name":"ui"}}],[0,"utils","","Various utility functions used throughout Conrod.",null,null],[4,"IterDiff","conrod::utils","A type returned by the `iter_diff` function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with the iterator's remaining elements starting with the first mis-matched element.",130,null],[13,"Longer","","The remaining elements of the iterator.",130,null],[13,"Shorter","","The total number of elements that were in the iterator.",130,null],[5,"partial_min","","Compare to PartialOrd values and return the min.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"partial_max","","Compare to PartialOrd values and return the min.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"clamp","","Clamp a value between some range.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"degrees","","Convert degrees to radians.",null,{"inputs":[{"name":"f"}],"output":{"name":"f"}}],[5,"fmod","","Modulo float.",null,{"inputs":[{"name":"f32"},{"name":"i32"}],"output":{"name":"f32"}}],[5,"modulo","","The modulo function.",null,{"inputs":[{"name":"i"},{"name":"i"}],"output":{"name":"i"}}],[5,"map_range","","Map a value from a given range to a new given range.",null,{"inputs":[{"name":"x"},{"name":"x"},{"name":"x"},{"name":"y"},{"name":"y"}],"output":{"name":"y"}}],[5,"percentage","","Get value percentage between max and min.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"f32"}}],[5,"turns","","Convert turns to radians.",null,{"inputs":[{"name":"f"}],"output":{"name":"f"}}],[5,"value_from_perc","","Adjust the value to the given percentage.",null,{"inputs":[{"name":"f32"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"val_to_string","","Get a suitable string from the value, its max and the pixel range.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"usize"}],"output":{"name":"string"}}],[5,"vec2_add","","Add `a` and `b`.",null,null],[5,"vec2_sub","","Subtract `b` from `a`.",null,null],[5,"bounding_box_for_points","","Find the bounding rect for the given series of points.",null,{"inputs":[{"name":"i"}],"output":{"name":"rect"}}],[5,"iter_diff","","Compares every element yielded by both elems and new_elems in lock-step.",null,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"generics":["iterdiff"],"name":"option"}}],[5,"write_if_different","","Returns `Borrowed` `elems` if `elems` contains the same elements as yielded by `new_elems`.",null,null],[5,"iter_eq","","Compares two iterators to see if they yield the same thing.",null,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"bool"}}],[0,"widget","conrod","Widgets are the core building blocks for every conrod user interface.",null,null],[3,"UpdateArgs","conrod::widget","Arguments for the Widget::update method in a struct to simplify the method signature.",null,null],[12,"id","","The Widget's unique index.",131,null],[12,"maybe_parent_id","","The Widget's parent unique index, if there is one.",131,null],[12,"prev","","The Widget's previous state. Specifically, the state that is common between all widgets, such as positioning, floatability, draggability, etc.",131,null],[12,"state","","A wrapper around the Widget's unique state, providing methods for both immutably viewing and mutably updating the state.",131,null],[12,"rect","","The rectangle describing the Widget's area.",131,null],[12,"style","","The Widget's current Widget::Style.",131,null],[12,"ui","","Restricted access to the `Ui`.",131,null],[3,"KidAreaArgs","","Arguments to the Widget::kid_area method in a struct to simplify the method signature.",null,null],[12,"rect","","The Rect describing the Widget's position and dimensions.",132,null],[12,"style","","Current Widget::Style of the Widget.",132,null],[12,"theme","","The active Theme within the Ui.",132,null],[12,"fonts","","The Font (for determining text width).",132,null],[3,"KidArea","","The area upon which a Widget's child widgets will be placed.",null,null],[12,"rect","","The Rect bounds describing the position and area.",133,null],[12,"pad","","The distance between the edge of the area and where the widgets will be placed.",133,null],[3,"Floating","","State necessary for \"floating\" (pop-up style) widgets.",null,null],[12,"time_last_clicked","","The time the Widget was last clicked (used for depth sorting in the widget Graph).",134,null],[3,"CommonBuilder","","A struct containing builder data common to all Widget types.",null,null],[12,"style","","Styling and positioning data that is common between all widget types.",135,null],[12,"maybe_parent_id","","The parent widget of the Widget.",135,null],[12,"is_floating","","Whether or not the Widget is a \"floating\" Widget.",135,null],[12,"crop_kids","","Whether or not the children of this Widget should be cropped to its `kid_area`.",135,null],[12,"maybe_x_scroll","","Arguments to the scrolling of the widget's x axis.",135,null],[12,"maybe_y_scroll","","Arguments to the scrolling of the widget's y axis.",135,null],[12,"place_on_kid_area","","Whether or not the Widget should be placed on the kid_area.",135,null],[12,"maybe_graphics_for","","Describes whether or not the Widget is instantiated as a graphical element for some other Widget.",135,null],[3,"CommonStyle","","Styling and positioning data that is common between all widget types.",null,null],[12,"maybe_x_dimension","","The width of a Widget.",136,null],[12,"maybe_y_dimension","","The height of a Widget.",136,null],[12,"maybe_x_position","","The position of a Widget along the x axis.",136,null],[12,"maybe_y_position","","The position of a Widget along the y axis.",136,null],[12,"maybe_depth","","The rendering Depth of the Widget.",136,null],[3,"State","","A wrapper around a Widget's unique Widget::State.",null,null],[3,"CommonState","","A wrapper around state that is common to all Widget types.",null,null],[12,"rect","","The rectangle describing the `Widget`'s area.",137,null],[12,"depth","","The rendering depth for the Widget (the default is 0.0).",137,null],[12,"maybe_floating","","Floating state for the widget if it is floating.",137,null],[12,"kid_area","","The area of the widget upon which kid widgets are placed.",137,null],[12,"maybe_x_scroll_state","","If the widget is scrollable across the x axis.",137,null],[12,"maybe_y_scroll_state","","If the widget is scrollable across the y axis.",137,null],[3,"PreUpdateCache","","",null,null],[12,"type_id","","The Widget's unique type identifier.",138,null],[12,"id","","The Widget's unique Id.",138,null],[12,"maybe_parent_id","","The Widget's parent's unique index (if it has a parent).",138,null],[12,"maybe_x_positioned_relatively_id","","If this Widget is relatively positioned to another Widget, this will be the index of the Widget to which this Widget is relatively positioned along the x axis.",138,null],[12,"maybe_y_positioned_relatively_id","","If this Widget is relatively positioned to another Widget, this will be the index of the Widget to which this Widget is relatively positioned along the y axis.",138,null],[12,"rect","","The Rect describing the Widget's position and dimensions.",138,null],[12,"depth","","The z-axis depth - affects the render order of sibling widgets.",138,null],[12,"kid_area","","The area upon which the Widget's children widgets will be placed.",138,null],[12,"maybe_floating","","Floating data for the Widget if there is some.",138,null],[12,"crop_kids","","Whether or not the children of the Widget should be cropped to its `kid_area`.",138,null],[12,"maybe_x_scroll_state","","Scrolling data for the Widget's x axis if there is some.",138,null],[12,"maybe_y_scroll_state","","Scrolling data for the Widget's y axis if there is some.",138,null],[12,"maybe_graphics_for","","Whether or not the Widget has been instantiated as a graphical element for some other widget.",138,null],[12,"is_over","","A function describing whether or not a given point is over the widget.",138,null],[3,"PostUpdateCache","","",null,null],[12,"id","","The Widget's unique Id.",139,null],[12,"maybe_parent_id","","The Widget's parent's unique Id (if it has a parent).",139,null],[12,"state","","The newly produced unique Widget::State associated with the Widget.",139,null],[12,"style","","The newly produced unique Widget::Style associated with the Widget.",139,null],[4,"MaybeParent","","The builder argument for the Widget's parent.",null,null],[13,"None","","The user specified the widget should not have any parents, so the Root will be used.",140,null],[13,"Some","","The user gave a specific parent widget.",140,null],[13,"Unspecified","","No parent widget was specified, so we will assume they want the last parent.",140,null],[4,"IsOver","","Returned by the `Widget::is_over` method.",null,null],[13,"Bool","","Whether or not the point was over the widget.",141,null],[13,"Widget","","Check whether or not the point is over the widget at the given `Id` and if so, assume it is over this widget.",141,null],[5,"is_over_rect","","The default `IsOverFn` used if the `Widget::is_over` method is not overridden.",null,{"inputs":[{"name":"container"},{"name":"point"},{"name":"theme"}],"output":{"name":"isover"}}],[5,"default_x_dimension","","Determines the default Dimension for a Widget.",null,{"inputs":[{"name":"w"},{"name":"ui"}],"output":{"name":"dimension"}}],[5,"default_y_dimension","","Determines the default Dimension for a Widget.",null,{"inputs":[{"name":"w"},{"name":"ui"}],"output":{"name":"dimension"}}],[0,"id","","The widget identifier type used throughout conrod, along with helper types and macros to simplify the process of generating them.",null,null],[3,"Generator","conrod::widget::id","Used for generating new unique `widget::Id`s.",null,null],[3,"List","","A list of lazily generated `widget::Id`s.",null,null],[3,"ListWalk","","An iterator-like type for producing indices from a `List`.",null,null],[6,"Id","","Unique widget identifier.",null,null],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"list"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",142,{"inputs":[{"name":"self"},{"name":"list"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"self"},{"name":"list"}],"output":{"name":"bool"}}],[11,"new","","Constructor for a new `widget::Id` generator.",143,{"inputs":[{"name":"graph"}],"output":{"name":"self"}}],[11,"next","","Generate a new, unique `widget::Id` into a Placeholder node within the widget graph. This should only be called once for each unique widget needed to avoid unnecessary bloat within the `Ui`'s widget graph.",143,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"new","","Construct a cache for multiple indices.",142,{"inputs":[],"output":{"name":"self"}}],[11,"walk","","Produce a walker for producing the `List`'s indices.",142,{"inputs":[{"name":"self"}],"output":{"name":"listwalk"}}],[11,"resize","","Resizes the `List`'s inner `Vec` to the given target length, using the given `UiCell` to generate new unique `widget::Id`s if necessary.",142,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"generator"}],"output":null}],[11,"deref","","",142,null],[11,"next","","Yield the next index, generating one if it does not yet exist.",144,{"inputs":[{"name":"self"},{"name":"list"},{"name":"generator"}],"output":{"name":"id"}}],[0,"scroll","conrod::widget","Scroll related types and logic.",null,null],[3,"Scroll","conrod::widget::scroll","Arguments given via a scrollable `Widget`'s builder methods for the scrolling along a single axis.",null,null],[3,"State","","Scroll state calculated for a single axis.",null,null],[12,"offset","","The distance that has been scrolled from the origin.",145,null],[12,"offset_bounds","","The start and end bounds for the offset along the axis.",145,null],[12,"scrollable_range_len","","The total range which may be \"offset\" from the \"root\" range (aka the `kid_area`).",145,null],[12,"is_scrolling","","Whether or not the this axis is currently scrolling.",145,null],[4,"X","","Behaviour for scrolling across the `X` axis.",null,null],[4,"Y","","Behaviour for scrolling across the `Y` axis.",null,null],[6,"StateX","","State for scrolling along the X axis.",null,null],[6,"StateY","","State for scrolling along the Y axis.",null,null],[8,"Axis","","Methods for distinguishing behaviour between both scroll axes at compile-time.",null,null],[10,"parallel_range","","The range of the given `Rect` that is parallel with this `Axis`.",146,{"inputs":[{"name":"rect"}],"output":{"name":"range"}}],[10,"perpendicular_range","","The range of the given `Rect` that is perpendicular with this `Axis`.",146,{"inputs":[{"name":"rect"}],"output":{"name":"range"}}],[10,"padding_range","","Given some rectangular `Padding`, return the `Range` that corresponds with this `Axis`.",146,{"inputs":[{"name":"padding"}],"output":{"name":"range"}}],[10,"mouse_scalar","","The coordinate of the given mouse position that corresponds with this `Axis`.",146,{"inputs":[{"name":"point"}],"output":{"name":"scalar"}}],[10,"offset_direction","","A `Scalar` multiplier representing the direction in which positive offset shifts the `scrollable_range` (either `-1.0` or `1.0).",146,{"inputs":[],"output":{"name":"scalar"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"scroll"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",147,{"inputs":[{"name":"self"},{"name":"scroll"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"self"},{"name":"scroll"}],"output":{"name":"bool"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",145,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"x"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",148,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"name":"bool"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"y"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",149,{"inputs":[{"name":"self"},{"name":"y"}],"output":{"name":"bool"}}],[11,"new","","The default `Scroll` args.",147,{"inputs":[],"output":{"name":"self"}}],[11,"update","","Calculate the new scroll state for the single axis of a `Widget`.",145,{"inputs":[{"name":"ui"},{"name":"id"},{"name":"kidarea"},{"name":"option"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"parallel_range","","",148,{"inputs":[{"name":"rect"}],"output":{"name":"range"}}],[11,"perpendicular_range","","",148,{"inputs":[{"name":"rect"}],"output":{"name":"range"}}],[11,"padding_range","","",148,{"inputs":[{"name":"padding"}],"output":{"name":"range"}}],[11,"mouse_scalar","","",148,{"inputs":[{"name":"point"}],"output":{"name":"scalar"}}],[11,"offset_direction","","",148,{"inputs":[],"output":{"name":"scalar"}}],[11,"parallel_range","","",149,{"inputs":[{"name":"rect"}],"output":{"name":"range"}}],[11,"perpendicular_range","","",149,{"inputs":[{"name":"rect"}],"output":{"name":"range"}}],[11,"padding_range","","",149,{"inputs":[{"name":"padding"}],"output":{"name":"range"}}],[11,"mouse_scalar","","",149,{"inputs":[{"name":"point"}],"output":{"name":"scalar"}}],[11,"offset_direction","","",149,{"inputs":[],"output":{"name":"scalar"}}],[0,"primitive","conrod::widget","Primitive widgets are special in that they are built into conrod's `render`ing logic.",null,null],[5,"bounding_box_for_points","conrod::widget::primitive","Find the bounding rect for the given series of points.",null,{"inputs":[{"name":"i"}],"output":{"name":"rect"}}],[0,"line","","A simple, non-interactive widget for drawing a single straight Line.",null,null],[3,"Line","conrod::widget::primitive::line","A simple, non-interactive widget for drawing a single straight Line.",null,null],[12,"common","","Data necessary and common for all widget builder types.",150,null],[12,"start","","The start of the line.",150,null],[12,"end","","The end of the line.",150,null],[12,"style","","Unique styling.",150,null],[12,"should_centre_points","","Whether or not the line should be automatically centred to the widget position.",150,null],[3,"State","","Unique state for the Line widget.",null,null],[12,"start","","The start of the line.",151,null],[12,"end","","The end of the line.",151,null],[3,"Style","","Unique styling for a Line widget.",null,null],[12,"maybe_pattern","","The patter for the line.",152,null],[12,"maybe_color","","Color of the Button's pressable area.",152,null],[12,"maybe_thickness","","The thickness of the line.",152,null],[12,"maybe_cap","","The style with which the ends of the line are drawn.",152,null],[4,"Pattern","","The pattern used to draw the line.",null,null],[13,"Solid","","A single continuous stroke.",153,null],[13,"Dashed","","A series of line strokes.",153,null],[13,"Dotted","","A series of circles.",153,null],[4,"Cap","","Whether the end of the Line should be flat or rounded.",null,null],[13,"Flat","","The line is capped with a flat edge.",154,null],[13,"Round","","The line is capped with a semi-circle.",154,null],[5,"rect_corners","","Given two points and half the line thickness, return the four corners of the rectangle describing the line.",null,null],[5,"triangles","","Given two points and half the line thickness, return the two triangles that describe the line.",null,null],[5,"is_over","","Describes whether or not the given point touches the line described by a -> b with the given thickness.",null,{"inputs":[{"name":"point"},{"name":"point"},{"name":"scalar"},{"name":"point"}],"output":{"name":"bool"}}],[5,"is_over_widget","","The function to use for picking whether a given point is over the line.",null,{"inputs":[{"name":"container"},{"name":"point"},{"name":"theme"}],"output":{"name":"isover"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"line"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",151,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",152,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"pattern"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",153,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"cap"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",154,{"inputs":[{"name":"self"},{"name":"cap"}],"output":{"name":"bool"}}],[11,"styled","","Build a new Line widget with the given style.",150,{"inputs":[{"name":"point"},{"name":"point"},{"name":"style"}],"output":{"name":"self"}}],[11,"new","","Build a new default Line widget.",150,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"self"}}],[11,"abs","","Build a new Line whose bounding box is fit to the absolute co-ordinates of the line points.",150,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"self"}}],[11,"abs_styled","","The same as Line::abs but with the given style.",150,{"inputs":[{"name":"point"},{"name":"point"},{"name":"style"}],"output":{"name":"self"}}],[11,"centred","","Build a new Line and shift the location of the start and end points so that the centre of their bounding rectangle lies at the position determined by the layout for the Line widget.",150,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"self"}}],[11,"centred_styled","","The same as Line::centred but with the given style.",150,{"inputs":[{"name":"point"},{"name":"point"},{"name":"style"}],"output":{"name":"self"}}],[11,"thickness","","The thickness or width of the Line.",150,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"solid","","Make a solid line.",150,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"dashed","","Make a line with a Dashed pattern.",150,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"dotted","","Make a line with a Dotted pattern.",150,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","Constructor for a default Line Style.",152,{"inputs":[],"output":{"name":"self"}}],[11,"solid","","Make a solid line.",152,{"inputs":[],"output":{"name":"self"}}],[11,"dashed","","Make a line with a Dashed pattern.",152,{"inputs":[],"output":{"name":"self"}}],[11,"dotted","","Make a line with a Dotted pattern.",152,{"inputs":[],"output":{"name":"self"}}],[11,"pattern","","The style with some given pattern.",152,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"self"}}],[11,"color","","The style with some given color.",152,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"thickness","","The style with some given thickness.",152,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"cap","","The style for the ends of the Line.",152,{"inputs":[{"name":"self"},{"name":"cap"}],"output":{"name":"self"}}],[11,"set_pattern","","Set the pattern for the line.",152,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":null}],[11,"set_color","","Set the color for the line.",152,{"inputs":[{"name":"self"},{"name":"color"}],"output":null}],[11,"set_thickness","","Set the thickness for the line.",152,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":null}],[11,"set_cap","","Set the Cap for the line.",152,{"inputs":[{"name":"self"},{"name":"cap"}],"output":null}],[11,"get_pattern","","The Pattern for the Line.",152,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"pattern"}}],[11,"get_color","","The Color for the Line.",152,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[11,"get_thickness","","The width or thickness of the Line.",152,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"get_cap","","The styling for the ends of the Line.",152,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"cap"}}],[11,"init_state","","",150,null],[11,"style","","",150,null],[11,"is_over","","",150,{"inputs":[{"name":"self"}],"output":{"name":"isoverfn"}}],[11,"update","","Update the state of the Line.",150,null],[11,"color","","",150,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"image","conrod::widget::primitive","A simple, non-interactive widget for drawing an `Image`.",null,null],[3,"Image","conrod::widget::primitive::image","A primitive and basic widget for drawing an `Image`.",null,null],[12,"common","","Data necessary and common for all widget builder types.",155,null],[12,"image_id","","The unique identifier for the image that will be drawn.",155,null],[12,"src_rect","","The rectangle area of the original source image that should be used.",155,null],[12,"style","","Unique styling.",155,null],[3,"State","","Unique `State` to be stored between updates for the `Image`.",null,null],[12,"src_rect","","The rectangular area of the image that we wish to display.",156,null],[12,"image_id","","The unique identifier for the image's associated data that will be drawn.",156,null],[3,"Style","","Unique styling for the `Image` widget.",null,null],[12,"maybe_color","","Optionally specify a single color to use for the image.",157,null],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"image"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",157,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",157,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Construct a new `Image`.",155,{"inputs":[{"name":"id"}],"output":{"name":"self"}}],[11,"source_rectangle","","The rectangular area of the image that we wish to display.",155,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"self"}}],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",155,{"inputs":[{"name":"self"},{"generics":["color"],"name":"option"}],"output":{"name":"self"}}],[11,"init_state","","",155,null],[11,"style","","",155,null],[11,"default_x_dimension","","",155,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"default_y_dimension","","",155,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"update","","",155,null],[0,"point_path","conrod::widget::primitive","A simple, non-interactive widget for drawing a series of conjoined lines.",null,null],[3,"PointPath","conrod::widget::primitive::point_path","A simple, non-interactive widget for drawing a series of lines and/or points.",null,null],[12,"points","","Some iterator yielding a series of Points.",158,null],[12,"common","","Data necessary and common for all widget builder types.",158,null],[12,"style","","Unique styling for the PointPath.",158,null],[12,"maybe_shift_to_centre_from","","Whether or not the points should be automatically centred to the widget position.",158,null],[3,"State","","State that is unique to the PointPath.",null,null],[12,"points","","An owned version of the list of points.",159,null],[3,"Triangles","","An iterator that triangulates a point path.",null,null],[5,"triangles","","Triangulate a point path.",null,{"inputs":[{"name":"i"},{"name":"cap"},{"name":"scalar"}],"output":{"generics":["triangles"],"name":"option"}}],[5,"is_over","","Returns whether or not the given point `p` lies over the `PointPath` described by the given points, line cap and thickness.",null,{"inputs":[{"name":"i"},{"name":"cap"},{"name":"scalar"},{"name":"point"}],"output":{"name":"bool"}}],[5,"is_over_widget","","The function to use for picking whether a given point is over the point path.",null,{"inputs":[{"name":"container"},{"name":"point"},{"name":"theme"}],"output":{"name":"isover"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"pointpath"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",159,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"triangles"}}],[11,"styled","","The same as PointPath::new but with th given style.",158,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"new","","Build a new default PointPath widget.",158,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"abs","","Build a new PointPath whose bounding box is fit to the absolute co-ordinates of the points.",158,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"abs_styled","","The same as PointPath::abs but constructs the PointPath with the given style.",158,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"centred","","Build a new PointPath and shift the location of the points so that the centre of their bounding rectangle lies at the position determined for the PointPath widget.",158,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"centred_styled","","The same as PointPath::centred but constructs the PointPath with the given style.",158,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"thickness","","The thickness or width of the PointPath's lines.",158,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"solid","","Make a Solid line.",158,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"dashed","","Make a line with a Dashed pattern.",158,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"dotted","","Make a line with a Dotted pattern.",158,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"init_state","","",158,null],[11,"style","","",158,null],[11,"is_over","","",158,{"inputs":[{"name":"self"}],"output":{"name":"isoverfn"}}],[11,"update","","Update the state of the Line.",158,null],[11,"color","","",158,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"next","","",160,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"shape","conrod::widget::primitive","A module encompassing the primitive 2D shape widgets.",null,null],[4,"Style","conrod::widget::primitive::shape","The style for some 2D shape.",null,null],[13,"Outline","","The outline of the shape with this style.",161,null],[13,"Fill","","A rectangle filled with this color.",161,null],[0,"circle","","An adaptation of the Oval type where the width and height are equal.",null,null],[3,"Circle","conrod::widget::primitive::shape::circle","A tiny wrapper around the Oval widget type.",null,null],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"circle"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"styled","","Build a circular Oval with the given dimensions and style.",162,{"inputs":[{"name":"scalar"},{"name":"style"}],"output":{"generics":["full"],"name":"oval"}}],[11,"fill","","Build a new Filled circular Oval.",162,{"inputs":[{"name":"scalar"}],"output":{"generics":["full"],"name":"oval"}}],[11,"fill_with","","Build a new circular Oval Filled with the given color.",162,{"inputs":[{"name":"scalar"},{"name":"color"}],"output":{"generics":["full"],"name":"oval"}}],[11,"outline","","Build a new circular Outlined Oval widget.",162,{"inputs":[{"name":"scalar"}],"output":{"generics":["full"],"name":"oval"}}],[11,"outline_styled","","Build a new circular Oval Outlined with the given style.",162,{"inputs":[{"name":"scalar"},{"name":"style"}],"output":{"generics":["full"],"name":"oval"}}],[0,"oval","conrod::widget::primitive::shape","A simple, non-interactive widget for drawing a single Oval.",null,null],[3,"Oval","conrod::widget::primitive::shape::oval","A simple, non-interactive widget for drawing a single Oval.",null,null],[12,"common","","Data necessary and common for all widget builder types.",163,null],[12,"style","","Unique styling.",163,null],[12,"resolution","","The number of lines used to draw the edge.",163,null],[12,"section","","A type describing the section of the `Oval` that is to be drawn.",163,null],[3,"Full","","The entire `Oval` will be drawn.",null,null],[3,"Section","","A section of the oval will be drawn where the section is specified by the given radians.",null,null],[12,"radians","","The angle occuppied by the section's circumference.",164,null],[12,"offset_radians","","The radians at which the section will begin.",164,null],[3,"State","","Unique state for the Oval.",null,null],[12,"resolution","","The number of lines used to draw the edge.",165,null],[12,"section","","A type describing the section of the `Oval` that is to be drawn.",165,null],[3,"Circumference","","An iterator yielding the edges of an `Oval` (or some section of an `Oval`) as a circumference represented as a series of edges.",null,null],[3,"Triangles","","An iterator yielding triangles that describe an oval or some section of an oval.",null,null],[5,"circumference","","An iterator yielding the `Oval`'s edges as a circumference represented as a series of points.",null,{"inputs":[{"name":"rect"},{"name":"usize"}],"output":{"name":"circumference"}}],[5,"triangles","","An iterator yielding the triangles that describe the given oval.",null,{"inputs":[{"name":"rect"},{"name":"usize"}],"output":{"name":"triangles"}}],[5,"is_over","","Returns `true` if the given `Point` is over an oval at the given rect.",null,{"inputs":[{"name":"rect"},{"name":"point"}],"output":{"name":"bool"}}],[5,"is_over_widget","","The function to use for picking whether a given point is over the oval.",null,{"inputs":[{"name":"container"},{"name":"point"},{"name":"theme"}],"output":{"name":"isover"}}],[5,"is_over_section","","Returns whether or not the given point is over the section described",null,{"inputs":[{"name":"circumference"},{"name":"point"}],"output":{"name":"bool"}}],[5,"is_over_section_widget","","The function to use for picking whether a given point is over the oval section.",null,{"inputs":[{"name":"container"},{"name":"point"},{"name":"theme"}],"output":{"name":"isover"}}],[17,"DEFAULT_RESOLUTION","","The default circle resolution if none is specified.",null,null],[8,"OvalSection","","Types that may be used to describe the visible section of the `Oval`.",null,null],[18,"IS_OVER","","The function used to determine if a point is over the oval section widget.",166,null],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"oval"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"full"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",167,{"inputs":[{"name":"self"},{"name":"full"}],"output":{"name":"bool"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"section"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",164,{"inputs":[{"name":"self"},{"name":"section"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"self"},{"name":"section"}],"output":{"name":"bool"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",165,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"styled","","Build an Oval with the given dimensions and style.",163,{"inputs":[{"name":"dimensions"},{"name":"style"}],"output":{"name":"self"}}],[11,"fill","","Build a new Filled Oval.",163,{"inputs":[{"name":"dimensions"}],"output":{"name":"self"}}],[11,"fill_with","","Build a new Oval Filled with the given color.",163,{"inputs":[{"name":"dimensions"},{"name":"color"}],"output":{"name":"self"}}],[11,"outline","","Build a new Outlined Oval widget.",163,{"inputs":[{"name":"dimensions"}],"output":{"name":"self"}}],[11,"outline_styled","","Build a new Oval Outlined with the given style.",163,{"inputs":[{"name":"dimensions"},{"name":"style"}],"output":{"name":"self"}}],[11,"resolution","","The number of lines used to draw the edge.",163,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"section","","Produces an `Oval` where only a section is drawn.",163,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"generics":["section"],"name":"oval"}}],[11,"offset_radians","","The radians at which the section will begin.",163,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"init_state","","",163,null],[11,"style","","",163,null],[11,"is_over","","",163,{"inputs":[{"name":"self"}],"output":{"name":"isoverfn"}}],[11,"update","","",163,null],[11,"color","","",163,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"circumference"}}],[11,"new","","An iterator yielding the `Oval`'s edges as a circumference represented as a series of points.",168,{"inputs":[{"name":"rect"},{"name":"usize"}],"output":{"name":"self"}}],[11,"new_section","","Produces a new iterator that yields only a section of the `Oval`'s circumference, where the section is described via its angle in radians.",168,{"inputs":[{"name":"rect"},{"name":"usize"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"triangles"}}],[11,"section","","Produces a new iterator that yields only a section of the `Oval`'s circumference, where the section is described via its angle in radians.",168,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"offset_radians","","Rotates the position at which the iterator starts yielding points by the given radians.",168,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"triangles","","Produces an `Iterator` yielding `Triangle`s.",168,{"inputs":[{"name":"self"}],"output":{"name":"triangles"}}],[11,"next","","",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",169,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"polygon","conrod::widget::primitive::shape","A simple, non-interactive Polygon widget for drawing arbitrary convex shapes.",null,null],[3,"Polygon","conrod::widget::primitive::shape::polygon","A basic, non-interactive, arbitrary Polygon widget.",null,null],[12,"common","","Data necessary and common for all widget builder types.",170,null],[12,"points","","The points describing the corners of the Polygon.",170,null],[12,"style","","Unique styling for the Polygon.",170,null],[12,"maybe_shift_to_centre_from","","Whether or not the points should be automatically centred to the widget position.",170,null],[3,"State","","Unique state for the Polygon.",null,null],[12,"points","","An owned version of the points yielded by the Polygon's `points` iterator.",171,null],[3,"Triangles","","An iterator that triangulates a polygon represented by a sequence of points describing its edges.",null,null],[4,"Kind","","Whether the rectangle is drawn as an outline or a filled color.",null,null],[13,"Outline","","Only the outline of the rectangle is drawn.",172,null],[13,"Fill","","The rectangle area is filled with some color.",172,null],[5,"triangles","","Triangulate the polygon given as a list of `Point`s describing its sides.",null,{"inputs":[{"name":"i"}],"output":{"generics":["triangles"],"name":"option"}}],[5,"is_over","","Returns `true` if the given `Point` is over the polygon described by the given series of points.",null,{"inputs":[{"name":"i"},{"name":"point"}],"output":{"name":"bool"}}],[5,"is_over_widget","","The function to use for picking whether a given point is over the polygon.",null,{"inputs":[{"name":"container"},{"name":"point"},{"name":"theme"}],"output":{"name":"isover"}}],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"polygon"}}],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"kind"}}],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",172,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"triangles"}}],[11,"styled","","Build a polygon with the given points and style.",170,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"fill","","Build a Polygon with the default Fill style.",170,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"fill_with","","Build a Polygon Filled with the given Color.",170,{"inputs":[{"name":"i"},{"name":"color"}],"output":{"name":"self"}}],[11,"outline","","Build a Polygon with the default Outline style.",170,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"outline_styled","","Build a Polygon Outlineed with the given line style.",170,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"abs_styled","","Build a new filled Polygon whose bounding box is fit to the absolute co-ordinates of the points.",170,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"abs_fill","","The same as Polygon::abs_styled but builds the Polygon with the default Fill style.",170,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"abs_fill_with","","The same as Polygon::abs_styled but builds the Polygon Filled with the given Color.",170,{"inputs":[{"name":"i"},{"name":"color"}],"output":{"name":"self"}}],[11,"abs_outline","","The same as Polygon::abs_styled but builds the Polygon with the default Outline style.",170,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"abs_outline_styled","","The same as Polygon::abs_styled but builds the Polygon with the given Outline styling.",170,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"centred_styled","","Build a new Polygon and shift the location of the points so that the centre of their bounding rectangle lies at the position determined for the Polygon widget.",170,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"centred_fill","","The same as Polygon::centred_styled but constructs the Polygon with the default Fill style.",170,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"centred_fill_with","","The same as Polygon::centred_styled but constructs the Polygon Filled with the given color.",170,{"inputs":[{"name":"i"},{"name":"color"}],"output":{"name":"self"}}],[11,"centred_outline","","The same as Polygon::centred_styled but constructs the Polygon with the default Outline style.",170,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"centred_outline_styled","","The same as Polygon::centred_styled but constructs the Polygon Outlined with the given styling.",170,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"init_state","","",170,null],[11,"style","","",170,null],[11,"is_over","","",170,{"inputs":[{"name":"self"}],"output":{"name":"isoverfn"}}],[11,"update","","Update the state of the Polygon.",170,null],[11,"color","","",170,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"next","","",173,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"rectangle","conrod::widget::primitive::shape","A simple, non-interactive rectangle shape widget.",null,null],[3,"Rectangle","conrod::widget::primitive::shape::rectangle","A basic, non-interactive rectangle shape widget.",null,null],[12,"common","","Data necessary and common for all widget builder types.",174,null],[12,"style","","Unique styling for the Rectangle.",174,null],[3,"State","","Unique state for the Rectangle.",null,null],[4,"Kind","","Whether the rectangle is drawn as an outline or a filled color.",null,null],[13,"Outline","","Only the outline of the rectangle is drawn.",175,null],[13,"Fill","","The rectangle area is filled with some color.",175,null],[5,"triangles","","The two triangles that describe the given `Rect`.",null,null],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"rectangle"}}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",176,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"kind"}}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",175,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"styled","","Build a rectangle with the dimensions and style.",174,{"inputs":[{"name":"dimensions"},{"name":"style"}],"output":{"name":"self"}}],[11,"fill","","Build a new filled rectangle.",174,{"inputs":[{"name":"dimensions"}],"output":{"name":"self"}}],[11,"fill_with","","Build a new filled rectangle widget filled with the given color.",174,{"inputs":[{"name":"dimensions"},{"name":"color"}],"output":{"name":"self"}}],[11,"outline","","Build a new outlined rectangle widget.",174,{"inputs":[{"name":"dimensions"}],"output":{"name":"self"}}],[11,"outline_styled","","Build an outlined rectangle rather than a filled one.",174,{"inputs":[{"name":"dimensions"},{"name":"style"}],"output":{"name":"self"}}],[11,"init_state","","",174,null],[11,"style","","",174,null],[11,"update","","Update the state of the Rectangle.",174,null],[11,"color","","",174,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"triangles","conrod::widget::primitive::shape","A primitive widget that allows for drawing using a list of triangles.",null,null],[3,"Triangles","conrod::widget::primitive::shape::triangles","A widget that allows for drawing a list of triangles.",null,null],[12,"common","","Data necessary and common for all widget builder types.",177,null],[12,"style","","Unique styling for the Triangles.",177,null],[12,"triangles","","All the point in the triangle list.",177,null],[12,"maybe_shift_to_centre_from","","Whether or not the triangles should be automatically centred to the widget position.",177,null],[3,"SingleColor","","All triangles colored with a single `Color`.",null,null],[12,"0","","",178,null],[3,"MultiColor","","Each triangle is colored per vertex.",null,null],[3,"Triangle","","A single triangle described by three vertices.",null,null],[12,"0","","",179,null],[3,"State","","Unique state stored between updates for a `Triangles`.",null,null],[12,"triangles","","The triangles that make up the triangles.",180,null],[3,"TrianglesUnpositioned","","When beginning to build `Triangles` they are initially unpositioned.",null,null],[5,"from_quad","","Triangulates the given quad, represented by four points that describe its edges in either clockwise or anti-clockwise order.",null,null],[5,"is_over_triangle","","Returns `true` if the given `Point` is over the given `Triangle`.",null,{"inputs":[{"name":"triangle"},{"name":"point"}],"output":{"name":"bool"}}],[5,"is_over","","Returns `true` if the given `Point` is over any of the given `Triangle`s.",null,{"inputs":[{"name":"i"},{"name":"point"}],"output":{"name":"bool"}}],[5,"is_over_widget","","The function to use for picking whether a given point is over the line.",null,{"inputs":[{"name":"container"},{"name":"point"},{"name":"theme"}],"output":{"name":"isover"}}],[6,"ColoredPoint","","A point with an associated color.",null,null],[8,"Vertex","","Types used as vertices that make up a list of triangles.",null,null],[10,"point","","The x y location of the vertex.",181,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[10,"add","","Add the given vector onto the position of self and return the result.",181,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[8,"Style","","Unique styling types for `Triangles`.",null,null],[16,"Vertex","","The type of vertices that make up the list of triangles for this style.",182,null],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"triangles"}}],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"singlecolor"}}],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",178,{"inputs":[{"name":"self"},{"name":"singlecolor"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"self"},{"name":"singlecolor"}],"output":{"name":"bool"}}],[11,"clone","","",183,{"inputs":[{"name":"self"}],"output":{"name":"multicolor"}}],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",183,{"inputs":[{"name":"self"},{"name":"multicolor"}],"output":{"name":"bool"}}],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"triangle"}}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",179,{"inputs":[{"name":"self"},{"name":"triangle"}],"output":{"name":"bool"}}],[11,"ne","","",179,{"inputs":[{"name":"self"},{"name":"triangle"}],"output":{"name":"bool"}}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",180,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"point","","",184,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"add","","",184,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[11,"point","","",185,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"add","","",185,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"trianglesunpositioned"}}],[11,"fmt","","",186,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","Shift the triangle by the given amount by adding it onto the position of each point.",179,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"self"}}],[11,"points","","The three points that make up the triangle.",179,null],[11,"color","","Convert the `Triangle<Point>` to a `Triangle<ColoredPoint>`.",179,{"inputs":[{"name":"self"},{"name":"rgba"},{"name":"rgba"},{"name":"rgba"}],"output":{"generics":["coloredpoint"],"name":"triangle"}}],[11,"color_all","","Convert the `Triangle<Point>` to a `Triangle<ColoredPoint>` using the given color.",179,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"generics":["coloredpoint"],"name":"triangle"}}],[11,"deref","","",179,null],[11,"from","","",179,null],[11,"from","","",179,null],[11,"into","","",179,null],[11,"into","","",179,null],[11,"single_color","","A list of triangles described by the given points.",177,{"inputs":[{"name":"c"},{"name":"i"}],"output":{"generics":["singlecolor"],"name":"trianglesunpositioned"}}],[11,"multi_color","","A list of triangles described by the given points.",177,{"inputs":[{"name":"i"}],"output":{"generics":["multicolor"],"name":"trianglesunpositioned"}}],[11,"with_bounding_rect","","Specify the bounding rectangle for the Triangles.",186,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"triangles"}}],[11,"calc_bounding_rect","","Calculate the position and size of the bounding rectangle from the `Triangles` points. The resulting bounding rectangle will fit to the absolute co-ordinates of all points.",186,{"inputs":[{"name":"self"}],"output":{"name":"triangles"}}],[11,"centre_points_to_bounding_rect","","Shift the location of the Triangles points so that the centre of their bounding rectangle lies at the position determined for the Triangles widget.",186,{"inputs":[{"name":"self"}],"output":{"name":"triangles"}}],[11,"init_state","","",177,null],[11,"style","","",177,null],[11,"is_over","","",177,{"inputs":[{"name":"self"}],"output":{"name":"isoverfn"}}],[11,"update","","",177,null],[11,"as_ref","","",179,{"inputs":[{"name":"self"}],"output":{"name":"triangle"}}],[11,"clone","conrod::widget::primitive::shape","",161,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",161,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fill","","A default `Fill` style.",161,{"inputs":[],"output":{"name":"self"}}],[11,"fill_with","","A `Fill` style with some given `Color`.",161,{"inputs":[{"name":"color"}],"output":{"name":"self"}}],[11,"outline","","A default `Outline` style.",161,{"inputs":[],"output":{"name":"self"}}],[11,"outline_styled","","A default `Outline` style.",161,{"inputs":[{"name":"style"}],"output":{"name":"self"}}],[11,"color","","The style with some given Color.",161,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"set_color","","Set the color for the style.",161,{"inputs":[{"name":"self"},{"name":"color"}],"output":null}],[11,"get_color","","Get the color of the Rectangle.",161,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"color"}}],[0,"text","conrod::widget::primitive","The primitive widget used for displaying text.",null,null],[3,"Text","conrod::widget::primitive::text","Displays some given text centered within a rectangular area.",null,null],[12,"common","","Data necessary and common for all widget builder types.",187,null],[12,"text","","The text to be drawn by the Text.",187,null],[12,"style","","Unique styling for the Text.",187,null],[3,"Style","","The styling for a Text's graphics.",null,null],[12,"font_size","","The font size for the Text.",188,null],[12,"color","","The color of the Text.",188,null],[12,"maybe_wrap","","Whether or not the text should wrap around the width.",188,null],[12,"line_spacing","","The spacing between consecutive lines.",188,null],[12,"justify","","Alignment of the text along the x axis.",188,null],[12,"font_id","","The id of the font to use for rendering and layout.",188,null],[3,"State","","The state to be stored between updates for the Text.",null,null],[12,"string","","An owned version of the string.",189,null],[12,"line_infos","","The indices and width for each line of text within the `string`.",189,null],[4,"Wrap","","The way in which text should wrap around the width.",null,null],[13,"Character","","Wrap at the first character that exceeds the width.",190,null],[13,"Whitespace","","Wrap at the first word that exceeds the width.",190,null],[11,"clone","","",187,{"inputs":[{"name":"self"}],"output":{"name":"text"}}],[11,"fmt","","",187,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",188,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",188,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",188,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"clone","","",190,{"inputs":[{"name":"self"}],"output":{"name":"wrap"}}],[11,"fmt","","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",190,{"inputs":[{"name":"self"},{"name":"wrap"}],"output":{"name":"bool"}}],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",189,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",189,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"new","","Build a new Text widget.",187,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"no_line_wrap","","Specify that the Text should not wrap lines around the width.",187,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"wrap_by_word","","Line wrap the Text at the beginning of the first word that exceeds the width.",187,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"wrap_by_character","","Line wrap the Text at the beginning of the first character that exceeds the width.",187,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"font_id","","A method for specifying the `Font` used for displaying the `Text`.",187,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"with_style","","Build the Text with the given Style.",187,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"self"}}],[11,"left_justify","","Align the text to the left of its bounding Rect's x axis range.",187,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"center_justify","","Align the text to the middle of its bounding Rect's x axis range.",187,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"right_justify","","Align the text to the right of its bounding Rect's x axis range.",187,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"font_size","","Build the type's self.$($assignee).+ with the given $Type.",187,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"justify","","Build the type's self.$($assignee).+ with the given $Type.",187,{"inputs":[{"name":"self"},{"name":"justify"}],"output":{"name":"self"}}],[11,"line_spacing","","Build the type's self.$($assignee).+ with the given $Type.",187,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"init_state","","",187,null],[11,"style","","",187,null],[11,"default_x_dimension","","If no specific width was given, we'll use the width of the widest line as a default.",187,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"default_y_dimension","","If no specific height was given, we'll use the total height of the text as a default.",187,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"update","","Update the state of the Text.",187,null],[11,"color","","",187,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"bordered_rectangle","conrod::widget","The `BorderedRectangle` widget and related items.",null,null],[3,"BorderedRectangle","conrod::widget::bordered_rectangle","A filled rectangle widget that may or may not have some border.",null,null],[12,"common","","Data necessary and common for all widget builder types.",191,null],[12,"style","","Unique styling for the BorderedRectangle.",191,null],[3,"Style","","Unique styling for the BorderedRectangle widget.",null,null],[12,"color","","Shape styling for the inner rectangle.",192,null],[12,"border","","The thickness of the border.",192,null],[12,"border_color","","The color of the border.",192,null],[3,"State","","Unique state for the `BorderedRectangle`.",null,null],[3,"RoundedBorderTriangles","","An iterator yielding triangles for a rounded border.",null,null],[5,"border_triangles","","The eight triangles that describe a rectangular border.",null,{"inputs":[{"name":"rect"},{"name":"scalar"}],"output":{"name":"option"}}],[5,"rounded_border_triangles","","An iterator yielding triangles for a rounded border.",null,{"inputs":[{"name":"rect"},{"name":"scalar"},{"name":"scalar"},{"name":"usize"}],"output":{"name":"roundedbordertriangles"}}],[11,"clone","","",191,{"inputs":[{"name":"self"}],"output":{"name":"borderedrectangle"}}],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",192,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",192,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",192,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Build a new BorderedRectangle.",191,{"inputs":[{"name":"dimensions"}],"output":{"name":"self"}}],[11,"with_style","","Build the type's self.$($assignee).+ with the given $Type.",191,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"self"}}],[11,"init_state","","",191,null],[11,"style","","",191,null],[11,"update","","Update the state of the Rectangle.",191,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",191,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",191,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",191,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"clone","","",193,{"inputs":[{"name":"self"}],"output":{"name":"roundedbordertriangles"}}],[11,"new","","Constructor for an iterator yielding triangles for a rounded border.",193,{"inputs":[{"name":"rect"},{"name":"scalar"},{"name":"scalar"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",193,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"button","conrod::widget","The `Button` widget and related items.",null,null],[3,"Button","conrod::widget::button","A pressable button widget whose reaction is triggered upon release.",null,null],[12,"show","","Whether the `Button` is a `Flat` color or an `Image`.",194,null],[12,"style","","Unique styling parameters for the Button.",194,null],[3,"Style","","Unique styling for the Button.",null,null],[12,"color","","Color of the Button's pressable area.",195,null],[12,"border","","Width of the border surrounding the button",195,null],[12,"border_color","","The color of the border.",195,null],[12,"label_color","","The color of the Button's label.",195,null],[12,"label_font_size","","The font size of the Button's label.",195,null],[12,"label_font_id","","The ID of the font used to display the label.",195,null],[12,"label_justify","","The label's typographic alignment over the x axis.",195,null],[12,"label_x","","The position of the title bar's `Label` widget over the x axis.",195,null],[12,"label_y","","The position of the title bar's `Label` widget over the y axis.",195,null],[3,"FlatIds","","Identifiers for a \"flat\" button.",null,null],[12,"rectangle","","",196,null],[12,"label","","",196,null],[3,"ImageIds","","Identifiers for an image button.",null,null],[12,"image","","",197,null],[12,"label","","",197,null],[3,"Flat","","The `Button` simply displays a flat color.",null,null],[12,"hover_color","","Allows specifying a color to use when the mouse hovers over the button.",198,null],[12,"press_color","","Allows specifying a color to use when the mouse presses the button.",198,null],[3,"Image","","The `Button` displays an `Image` on top.",null,null],[12,"image_id","","The id of the `Image` to be used.",199,null],[12,"hover_image_id","","The image displayed when the mouse hovers over the button.",199,null],[12,"press_image_id","","The image displayed when the mouse has captured and is pressing the button.",199,null],[12,"color","","If `Some`, maps the image's luminance to this `Color`.",199,null],[12,"src_rect","","The rectangular area of the original source image that should be displayed.",199,null],[3,"TimesClicked","","The `Event` type yielded by the `Button` widget.",null,null],[12,"0","","",200,null],[4,"ImageColor","","The coloring of the `Image`.",null,null],[13,"Normal","","The image's luminance will be mapped to this color.",201,null],[13,"WithFeedback","","The image's luminance will be mapped to this color.",201,null],[13,"None","","The image's regular color will be used.",201,null],[11,"clone","","",194,{"inputs":[{"name":"self"}],"output":{"name":"button"}}],[11,"clone","","",195,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",195,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",195,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",195,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Construct a new `widget::Id` container.",196,{"inputs":[{"name":"generator"}],"output":{"name":"self"}}],[11,"new","","Construct a new `widget::Id` container.",197,{"inputs":[{"name":"generator"}],"output":{"name":"self"}}],[11,"clone","","",198,{"inputs":[{"name":"self"}],"output":{"name":"flat"}}],[11,"default","","",198,{"inputs":[],"output":{"name":"flat"}}],[11,"eq","","",198,{"inputs":[{"name":"self"},{"name":"flat"}],"output":{"name":"bool"}}],[11,"ne","","",198,{"inputs":[{"name":"self"},{"name":"flat"}],"output":{"name":"bool"}}],[11,"fmt","","",198,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",199,{"inputs":[{"name":"self"}],"output":{"name":"image"}}],[11,"clone","","",201,{"inputs":[{"name":"self"}],"output":{"name":"imagecolor"}}],[11,"fmt","","",201,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",200,{"inputs":[{"name":"self"}],"output":{"name":"timesclicked"}}],[11,"fmt","","",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"was_clicked","","`true` if the `Button` was clicked one or more times.",200,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next","","",200,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"image","","Begin building a button displaying the given `Image` on top.",194,{"inputs":[{"name":"id"}],"output":{"name":"self"}}],[11,"source_rectangle","","The rectangular area of the image that we wish to display.",194,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"self"}}],[11,"image_color","","Map the `Image`'s luminance to the given color.",194,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"image_color_with_feedback","","Map the `Image`'s luminance to the given color.",194,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"hover_image","","The image displayed while the mouse hovers over the `Button`.",194,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"press_image","","The image displayed while the `Button` is pressed.",194,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"new","","Begin building a flat-colored `Button` widget.",194,{"inputs":[],"output":{"name":"self"}}],[11,"with_style","","Override the default button style",194,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"self"}}],[11,"hover_color","","Specify a color to use when the mouse hovers over the button.",194,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"press_color","","Specify a color to use when the mouse presses the button.",194,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_id","","Specify the font used for displaying the label.",194,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"left_justify_label","","Align the label to the left of the `Button`'s surface.",194,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"center_justify_label","","Align the label to the mid-left of the `Button`'s surface.",194,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"right_justify_label","","Align the label to the mid-left of the `Button`'s surface.",194,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"label_x","","Specify the label's position relatively to `Button` along the x axis.",194,{"inputs":[{"name":"self"},{"name":"relative"}],"output":{"name":"self"}}],[11,"label_y","","Specify the label's position relatively to `Button` along the y axis.",194,{"inputs":[{"name":"self"},{"name":"relative"}],"output":{"name":"self"}}],[11,"enabled","","Build the type's self.$($assignee).+ with the given $Type.",194,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"init_state","","",194,null],[11,"style","","",194,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"update","","Update the state of the Button.",194,null],[11,"init_state","","",194,null],[11,"style","","",194,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"update","","Update the state of the Button.",194,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",194,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",194,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",194,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",194,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",194,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",194,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[0,"canvas","conrod::widget","The `Canvas` widget and related items.",null,null],[3,"Canvas","conrod::widget::canvas","Canvas is designed to be a \"container\"-like \"parent\" widget that simplifies placement of \"children\" widgets.",null,null],[12,"common","","Data necessary and common for all widget builder types.",202,null],[12,"style","","The builder data related to the style of the Canvas.",202,null],[12,"maybe_title_bar_label","","The label for the Canvas' TitleBar if there is one.",202,null],[12,"maybe_splits","","A list of child Canvasses as splits of this Canvas flowing in the given direction.",202,null],[3,"State","","Canvas state to be cached.",null,null],[3,"Style","","Unique styling for the Canvas.",null,null],[12,"color","","The color of the Canvas' rectangle surface.",203,null],[12,"border","","The width of the border surrounding the Canvas' rectangle.",203,null],[12,"border_color","","The color of the Canvas' border.",203,null],[12,"length","","If this Canvas is a split of some parent Canvas, this is the length of the split.",203,null],[12,"pad_left","","Padding for the left edge of the Canvas' kid area.",203,null],[12,"pad_right","","Padding for the right edge of the Canvas' kid area.",203,null],[12,"pad_bottom","","Padding for the bottom edge of the Canvas' kid area.",203,null],[12,"pad_top","","Padding for the top edge of the Canvas' kid area.",203,null],[12,"title_bar_color","","The color of the title bar. Defaults to the color of the Canvas.",203,null],[12,"title_bar_text_color","","The color of the title bar's text.",203,null],[12,"title_bar_font_size","","The font size for the title bar's text.",203,null],[12,"title_bar_maybe_wrap","","The way in which the title bar's text should wrap.",203,null],[12,"title_bar_line_spacing","","The distance between lines for multi-line title bar text.",203,null],[12,"title_bar_justify","","The label's typographic alignment over the x axis.",203,null],[4,"Length","","Used to describe the desired length for a `Split`.",null,null],[13,"Absolute","","The length as an absolute scalar.",204,null],[13,"Weight","","The length as a weight of the non-absolute length of the parent Canvas.",204,null],[4,"Direction","","The direction in which a sequence of canvas splits will be laid out.",null,null],[13,"X","","Lay splits along the x axis.",205,null],[13,"Y","","Lay splits along the y axis.",205,null],[6,"ListOfSplits","","A series of Canvas splits along with their unique identifiers.",null,null],[6,"FlowOfSplits","","A series of Canvas splits flowing in the specified direction.",null,null],[6,"Weight","","The length of a `Split` given as a weight.",null,null],[11,"clone","","",202,{"inputs":[{"name":"self"}],"output":{"name":"canvas"}}],[11,"fmt","","",202,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",203,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",203,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",203,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",203,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",203,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"clone","","",204,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",204,{"inputs":[{"name":"self"},{"name":"length"}],"output":{"name":"bool"}}],[11,"ne","","",204,{"inputs":[{"name":"self"},{"name":"length"}],"output":{"name":"bool"}}],[11,"clone","","",205,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[11,"fmt","","",205,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new Canvas builder.",202,{"inputs":[],"output":{"name":"self"}}],[11,"title_bar","","Build the type's self.$($assignee).+ with the given $Type.",202,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"pad_left","","Build the type's self.$($assignee).+ with the given $Type.",202,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_right","","Build the type's self.$($assignee).+ with the given $Type.",202,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_bottom","","Build the type's self.$($assignee).+ with the given $Type.",202,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_top","","Build the type's self.$($assignee).+ with the given $Type.",202,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"with_style","","Build the type's self.$($assignee).+ with the given $Type.",202,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"self"}}],[11,"length","","Set the length of the Split as an absolute scalar.",202,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"length_weight","","Set the length of the Split as a weight.",202,{"inputs":[{"name":"self"},{"name":"weight"}],"output":{"name":"self"}}],[11,"flow_right","","Set the child Canvasses flowing to the right.",202,{"inputs":[{"name":"self"},{"name":"listofsplits"}],"output":{"name":"self"}}],[11,"flow_left","","Set the child Canvasses flowing to the left.",202,{"inputs":[{"name":"self"},{"name":"listofsplits"}],"output":{"name":"self"}}],[11,"flow_up","","Set the child Canvasses flowing upwards.",202,{"inputs":[{"name":"self"},{"name":"listofsplits"}],"output":{"name":"self"}}],[11,"flow_down","","Set the child Canvasses flowing downwards.",202,{"inputs":[{"name":"self"},{"name":"listofsplits"}],"output":{"name":"self"}}],[11,"pad","","Set the padding for all edges of the area where child widgets will be placed.",202,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"padding","","Set the padding of the area where child widgets will be placed.",202,{"inputs":[{"name":"self"},{"name":"padding"}],"output":{"name":"self"}}],[11,"title_bar_color","","Set the color of the `Canvas`' `TitleBar` if it is visible.",202,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"init_state","","",202,null],[11,"style","","",202,null],[11,"default_x_position","","",202,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"position"}}],[11,"default_y_position","","",202,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"position"}}],[11,"drag_area","","The title bar area at which the Canvas can be clicked and dragged.",202,{"inputs":[{"name":"self"},{"name":"dimensions"},{"name":"style"},{"name":"theme"}],"output":{"generics":["rect"],"name":"option"}}],[11,"kid_area","","The area of the widget below the title bar, upon which child widgets will be placed.",202,{"inputs":[{"name":"self"},{"name":"kidareaargs"}],"output":{"name":"kidarea"}}],[11,"update","","Update the state of the Canvas.",202,{"inputs":[{"name":"self"},{"name":"updateargs"}],"output":null}],[11,"padding","","Get the Padding for the Canvas' kid area.",203,{"inputs":[{"name":"self"},{"name":"theme"}],"output":{"name":"padding"}}],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",202,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",202,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",202,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","",202,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",202,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",202,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[0,"collapsible_area","conrod::widget","The `CollapsibleArea` widget and related items.",null,null],[3,"CollapsibleArea","conrod::widget::collapsible_area","A vertically collapsible area.",null,null],[3,"Ids","","The unique identifiers for the `CollapsibleArea`'s child widgets.",null,null],[12,"button","","",206,null],[12,"triangle","","",206,null],[12,"area","","",206,null],[3,"State","","The unique state cached within the widget graph for the `CollapsibleArea`.",null,null],[3,"Style","","Unique styling for the CollapsibleArea.",null,null],[12,"color","","Color of the Button's pressable area.",207,null],[12,"border","","Width of the border surrounding the button",207,null],[12,"border_color","","The color of the border.",207,null],[12,"label_color","","The color of the Button's label.",207,null],[12,"label_font_size","","The font size of the Button's label.",207,null],[12,"label_font_id","","The ID of the font used to display the label.",207,null],[3,"Area","","The area returned by the widget when the `CollapsibleArea` is open.",null,null],[12,"id","","A unique identifier for the user's widget.",208,null],[12,"collapsible_area_id","","The widget::Id for the collapsible area that produced this `Area`.",208,null],[12,"width","","The width of the `CollapsibleArea` that produced this `Area`.",208,null],[4,"Event","","The event returned when the text bar or triangle is pressed.",null,null],[13,"Open","","The collapsible area was opened.",209,null],[13,"Close","","The collapsible area was closed.",209,null],[11,"clone","","",210,{"inputs":[{"name":"self"}],"output":{"name":"collapsiblearea"}}],[11,"fmt","","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `widget::Id` container.",206,{"inputs":[{"name":"generator"}],"output":{"name":"self"}}],[11,"clone","","",207,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",207,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",207,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",207,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"clone","","",209,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"fmt","","",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",209,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"hash","","",209,null],[11,"clone","","",208,{"inputs":[{"name":"self"}],"output":{"name":"area"}}],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",208,{"inputs":[{"name":"self"},{"name":"area"}],"output":{"name":"bool"}}],[11,"ne","","",208,{"inputs":[{"name":"self"},{"name":"area"}],"output":{"name":"bool"}}],[11,"new","","Begin building the `CollapsibleArea` widget.",210,{"inputs":[{"name":"bool"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Specify the color of the `CollapsibleArea`'s label.",210,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Specify the font size for the `CollapsibleArea`'s label.",210,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"label_font_id","","Specify the font for the `CollapsibleArea`'s label.",210,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"init_state","","",210,null],[11,"style","","",210,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"update","","",210,null],[11,"color","","",210,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","",210,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","",210,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"is_open","","Returns whether or not the `Event` results in an open collapsible area.",209,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set","","Set the user's given widget directly under the `CollapsibleArea`.",208,null],[0,"drop_down_list","conrod::widget","The `DropDownList` and related items.",null,null],[3,"DropDownList","conrod::widget::drop_down_list","Displays a given `Vec<String>` as a selectable drop down menu.",null,null],[3,"Style","","Styling for the DropDownList, necessary for constructing its renderable Element.",null,null],[12,"color","","Color of the widget.",211,null],[12,"border","","Width of the widget's border.",211,null],[12,"border_color","","Color of the widget's border.",211,null],[12,"label_color","","Color of the item labels.",211,null],[12,"label_font_size","","Font size for the item labels.",211,null],[12,"label_justify","","The label's typographic alignment over the x axis.",211,null],[12,"label_x","","The label's position relative to its `Button` along the x axis.",211,null],[12,"label_y","","The label's position relative to its `Button` along the y axis.",211,null],[12,"maybe_max_visible_height","","Maximum height of the Open menu before the scrollbar appears.",211,null],[12,"scrollbar_position","","The position of the scrollbar in the case that the list is scrollable.",211,null],[12,"scrollbar_width","","The width of the scrollbar in the case that the list is scrollable.",211,null],[12,"label_font_id","","The ID of the font used to display the labels.",211,null],[3,"State","","Represents the state of the DropDownList.",null,null],[4,"MaxHeight","","Representations of the max height of the visible area of the DropDownList.",null,null],[13,"Items","","Specify the max height as a number of items.",212,null],[13,"Scalar","","Specify the max height as an absolute scalar distance.",212,null],[6,"Idx","","The index of a selected item.",null,null],[6,"Len","","The number of items in a list.",null,null],[11,"clone","","",211,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",211,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",211,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",211,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",211,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"eq","","",212,{"inputs":[{"name":"self"},{"name":"maxheight"}],"output":{"name":"bool"}}],[11,"ne","","",212,{"inputs":[{"name":"self"},{"name":"maxheight"}],"output":{"name":"bool"}}],[11,"clone","","",212,{"inputs":[{"name":"self"}],"output":{"name":"maxheight"}}],[11,"fmt","","",212,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new DropDownList.",213,null],[11,"enabled","","Build the type's self.$($assignee).+ with the given $Type.",213,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"max_visible_items","","Set the maximum height of the DropDownList (before the scrollbar appears) as a number of items.",213,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"max_visible_height","","Set the maximum height of the DropDownList (before the scrollbar appears) as a scalar height.",213,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"self"}}],[11,"scrollbar_next_to","","Specifies that the list should be scrollable and should provide a `Scrollbar` to the right of the items.",213,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scrollbar_on_top","","Specifies that the list should be scrollable and should provide a `Scrollbar` that hovers above the right edge of the items and automatically hides when the user is not scrolling.",213,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"no_scrollbar","","Even in the case that the list is scrollable, do not display a `Scrollbar`.",213,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scrollbar_width","","Specify the width of the scrollbar.",213,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"label_font_id","","Specify the font used for displaying the label.",213,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"left_justify_label","","Align the labels to the left of their `Button`s' surface.",213,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"right_justify_label","","Align the labels to the right of their `Button`s' surface.",213,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"center_justify_label","","Center the labels to the their `Button`s' surface.",213,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"label_x","","Specify the label's position relatively to `Button` along the x axis.",213,{"inputs":[{"name":"self"},{"name":"relative"}],"output":{"name":"self"}}],[11,"label_y","","Specify the label's position relatively to `Button` along the y axis.",213,{"inputs":[{"name":"self"},{"name":"relative"}],"output":{"name":"self"}}],[11,"init_state","","",213,null],[11,"style","","",213,null],[11,"update","","Update the state of the DropDownList.",213,null],[11,"button_style","","Style for a `Button` given this `Style`'s current state.",211,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"style"}}],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",213,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",213,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",213,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",213,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",213,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",213,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[0,"envelope_editor","conrod::widget","The `EnvelopeEditor` widget and related items.",null,null],[3,"EnvelopeEditor","conrod::widget::envelope_editor","Used for editing a series of 2D Points on a cartesian (X, Y) plane within some given range.",null,null],[12,"skew_y_range","","The value skewing for the envelope's y-axis. This is useful for displaying exponential ranges such as frequency.",214,null],[3,"Style","","Styling for the EnvelopeEditor, necessary for constructing its renderable Element.",null,null],[12,"color","","Coloring for the EnvelopeEditor's BorderedRectangle.",215,null],[12,"border","","Thickness of the BorderedRectangle's border.",215,null],[12,"border_color","","Color of the border.",215,null],[12,"label_color","","Color of the label.",215,null],[12,"label_font_size","","The font size of the EnvelopeEditor's label if one was given.",215,null],[12,"value_font_size","","The font size of the value label.",215,null],[12,"point_radius","","The radius of the envelope points.",215,null],[12,"line_thickness","","The thickness of the envelope lines.",215,null],[12,"label_font_id","","The ID of the font used to display the label.",215,null],[3,"State","","Represents the state of the EnvelopeEditor widget.",null,null],[4,"Event","","The kinds of events that may be yielded by the `EnvelopeEditor`.",null,null],[13,"AddPoint","","Insert a new point.",216,null],[12,"i","conrod::widget::envelope_editor::Event","The index at which the point should be inserted.",216,null],[12,"point","","The new point.",216,null],[13,"RemovePoint","conrod::widget::envelope_editor","Remove a point.",216,null],[12,"i","conrod::widget::envelope_editor::Event","The index of the point that should be removed.",216,null],[13,"MovePoint","conrod::widget::envelope_editor","Move a point.",216,null],[12,"i","conrod::widget::envelope_editor::Event","The index of the point that should be moved.",216,null],[12,"x","","The point's new x value.",216,null],[12,"y","","The point's new y value.",216,null],[8,"EnvelopePoint","conrod::widget::envelope_editor","`EnvPoint` must be implemented for any type that is used as a 2D point within the EnvelopeEditor.",null,null],[16,"X","","A value on the X-axis of the envelope.",217,null],[16,"Y","","A value on the Y-axis of the envelope.",217,null],[10,"get_x","","Return the X value.",217,null],[10,"get_y","","Return the Y value.",217,null],[10,"set_x","","Set the X value.",217,null],[10,"set_y","","Set the Y value.",217,null],[11,"get_curve","","Return the bezier curve depth (-1. to 1.) for the next interpolation.",217,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"set_curve","","Set the bezier curve depth (-1. to 1.) for the next interpolation.",217,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[10,"new","","Create a new EnvPoint.",217,null],[11,"clone","","",215,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",215,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",215,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",215,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",215,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"get_x","","Return the X value.",184,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"get_y","","Return the Y value.",184,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"set_x","","Return the X value.",184,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":null}],[11,"set_y","","Return the Y value.",184,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":null}],[11,"new","","Create a new Envelope Point.",184,{"inputs":[{"name":"scalar"},{"name":"scalar"}],"output":{"name":"point"}}],[11,"new","","Construct an EnvelopeEditor widget.",214,null],[11,"label_font_id","","Specify the font used for displaying the label.",214,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"point_radius","","Build the type's self.$($assignee).+ with the given $Type.",214,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"line_thickness","","Build the type's self.$($assignee).+ with the given $Type.",214,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"value_font_size","","Build the type's self.$($assignee).+ with the given $Type.",214,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"skew_y","","Build the type's self.$($assignee).+ with the given $Type.",214,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"self"}}],[11,"enabled","","Build the type's self.$($assignee).+ with the given $Type.",214,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"clone","","",216,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"fmt","","",216,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"update","","Update the given `envelope` in accordance with the `Event`.",216,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"init_state","","",214,null],[11,"style","","",214,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"update","","Update the `EnvelopeEditor` in accordance to the latest input and call the given `react` function if necessary.",214,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",214,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",214,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",214,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",214,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",214,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",214,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[0,"file_navigator","conrod::widget","A widget for navigating through through a file system. Generally inspired by Finder.",null,null],[3,"FileNavigator","conrod::widget::file_navigator","A widget for navigating and interacting with a file system.",null,null],[12,"style","","Unique styling for the widget.",218,null],[12,"starting_directory","","The first directory shown for the `FileNavigator`.",218,null],[12,"types","","Only display files of the given type.",218,null],[3,"State","","Unique state stored within the widget graph for each `FileNavigator`.",null,null],[3,"Directory","","Represents the state for a single directory.",null,null],[3,"Style","","Unique styling for the widget.",null,null],[12,"color","","Color of the selected entries.",219,null],[12,"unselected_color","","The color of the unselected entries.",219,null],[12,"text_color","","The color of the directory and file names.",219,null],[12,"font_size","","The font size for the directory and file names.",219,null],[12,"column_width","","The default width of a single directory view.",219,null],[12,"resize_handle_width","","The width of the bar that separates each directory in the stack and allows for re-sizing.",219,null],[4,"Types","","A type for specifying the types of files to be shown by a `FileNavigator`.",null,null],[13,"All","","Indicates that files of all types should be shown.",220,null],[13,"WithExtension","","A list of types of files that are accepted by the `FileNavigator`.",220,null],[13,"Directories","","Indicates only directories should be shown",220,null],[4,"Event","","The kinds of events that the `FileNavigator` may produce.",null,null],[13,"ChangeDirectory","","The directory at the top of the stack has changed.",221,null],[13,"ChangeSelection","","The selection of files in the top of the stack has changed.",221,null],[13,"Click","","A `Click` event occurred over a selection of entries.",221,null],[13,"DoubleClick","","A file was double clicked.",221,null],[13,"Press","","A `Press` event occurred over a selection of entries.",221,null],[13,"Release","","A `Release` event occurred over a selection of entries.",221,null],[0,"directory_view","","Lists the contents of a single directory.",null,null],[3,"DirectoryView","conrod::widget::file_navigator::directory_view","For viewing, selecting, double-clicking, etc the contents of a directory.",null,null],[12,"style","","Unique styling for the widget.",222,null],[12,"directory","","The path of the directory to display.",222,null],[12,"types","","Only display files of the given type.",222,null],[3,"State","","Unique state stored within the widget graph for each `FileNavigator`.",null,null],[3,"Entry","","Data stored for each `File` in the `State`.",null,null],[3,"Style","","Unique styling for the widget.",null,null],[12,"color","","Color of the selected entries.",223,null],[12,"unselected_color","","The color of the unselected entries.",223,null],[12,"text_color","","The color of the directory and file names.",223,null],[12,"font_size","","The font size for the directory and file names.",223,null],[4,"Event","","The kinds of `Event`s produced by the `DirectoryView`.",null,null],[13,"Selection","","Some change in the `Selection` occurred. This represents the new full selection.",224,null],[13,"Click","","One or more entries have been double clicked.",224,null],[13,"DoubleClick","","One or more entries have been double clicked.",224,null],[13,"Press","","A `Press` event occurred while the given entries were selected.",224,null],[13,"Release","","A `Release` event occurred while the given entries were selected.",224,null],[11,"clone","","",225,{"inputs":[{"name":"self"}],"output":{"name":"entry"}}],[11,"fmt","","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",225,{"inputs":[{"name":"self"},{"name":"entry"}],"output":{"name":"bool"}}],[11,"ne","","",225,{"inputs":[{"name":"self"},{"name":"entry"}],"output":{"name":"bool"}}],[11,"clone","","",223,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",223,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",223,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",223,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",223,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"clone","","",224,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"new","","Begin building a `DirectoryNavigator` widget that displays only files of the given types.",222,{"inputs":[{"name":"path"},{"name":"types"}],"output":{"name":"self"}}],[11,"unselected_color","","The color of the unselected entries within each `DirectoryView`.",222,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"text_color","","The color of the `Text` used to display the file names.",222,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"show_hidden_files","","Whether to show hidden files and directories",222,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"font_size","","Build the type's self.$($assignee).+ with the given $Type.",222,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"init_state","","",222,null],[11,"style","","",222,null],[11,"update","","",222,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",222,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"clone","conrod::widget::file_navigator","",220,{"inputs":[{"name":"self"}],"output":{"name":"types"}}],[11,"fmt","","",226,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",226,{"inputs":[{"name":"self"},{"name":"directory"}],"output":{"name":"bool"}}],[11,"ne","","",226,{"inputs":[{"name":"self"},{"name":"directory"}],"output":{"name":"bool"}}],[11,"clone","","",219,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",219,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",219,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",219,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",219,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"clone","","",221,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"fmt","","",221,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Begin building a `FileNavigator` widget that displays only files of the given types.",218,{"inputs":[{"name":"path"},{"name":"types"}],"output":{"name":"self"}}],[11,"all","","Begin building a `FileNavigator` that will display all file types.",218,{"inputs":[{"name":"path"}],"output":{"name":"self"}}],[11,"with_extension","","Begin building a `FileNavigator` that will only display files whose extensions match one of those within the given extension list.",218,null],[11,"directories","","Begin building a `FileNavigator` that only displays directories.",218,{"inputs":[{"name":"path"}],"output":{"name":"self"}}],[11,"unselected_color","","The color of the unselected entries within each `DirectoryView`.",218,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"text_color","","The color of the `Text` used to display the file names.",218,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"show_hidden_files","","Whether to show hidden files and directories.",218,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"font_size","","Build the type's self.$($assignee).+ with the given $Type.",218,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"init_state","","",218,null],[11,"style","","",218,null],[11,"update","","Update the state of the Button.",218,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",218,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"grid","conrod::widget","A widget for displaying a grid of lines across two axes.",null,null],[3,"Grid","conrod::widget::grid","A widget for displaying a grid of lines across two axes.",null,null],[12,"common","","Builder parameters that are common to all `Widget`s.",227,null],[12,"style","","Unique styling parameters for the `Grid` widget.",227,null],[12,"min_x","","The minimum visible bound along the x axis.",227,null],[12,"max_x","","The maximum visible bound along the x axis.",227,null],[12,"min_y","","The minimum visible bound along the y axis.",227,null],[12,"max_y","","The maximum visible bound along the y axis.",227,null],[12,"x_offset","","An offset for all vertical lines distributed across the x axis.",227,null],[12,"y_offset","","An offset for all horizontal lines distributed across the y axis.",227,null],[12,"lines","","An iterator yielding each sequence of lines to be distributed across the grid.",227,null],[3,"Style","","Unique styling parameters for the `Grid` widget.",null,null],[12,"color","","The color of the grid lines.",228,null],[12,"thickness","","The thickness of the grid lines.",228,null],[3,"Lines","","A series of lines distributed across an axis.",null,null],[12,"step","","The distance that separates each line.",229,null],[12,"offset","","An optional offset for the lines along they're axis.",229,null],[12,"thickness","","The thickness of each of the lines drawn.",229,null],[12,"color","","The color of each of the lines drawn.",229,null],[3,"State","","Unique state for the `Grid` retained between updates.",null,null],[4,"Axis","","A series of lines distributed over an axis.",null,null],[13,"X","","Vertical lines that are spread across the x axis.",230,null],[13,"Y","","Horizontal lines that are spread across the y axis.",230,null],[11,"clone","","",227,{"inputs":[{"name":"self"}],"output":{"name":"grid"}}],[11,"fmt","","",227,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",228,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",228,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",228,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",228,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",228,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"clone","","",229,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"fmt","","",229,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",230,{"inputs":[{"name":"self"}],"output":{"name":"axis"}}],[11,"fmt","","",230,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"step","","Begin building a new set of lines for the grid `step` distance apart.",229,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"offset","","Specify an offset for the grid.",229,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"thickness","","Specify a unique thickness for these lines.",229,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"color","","Use the specified color to uniquely color the this set of lines.",229,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"x","","Move the lines over the X axis.",229,{"inputs":[{"name":"self"}],"output":{"name":"axis"}}],[11,"y","","Move the lines over the Y axis.",229,{"inputs":[{"name":"self"}],"output":{"name":"axis"}}],[11,"new","","Begin building a new `PlotPath` widget instance.",227,{"inputs":[{"name":"x"},{"name":"x"},{"name":"y"},{"name":"y"},{"name":"i"}],"output":{"name":"grid"}}],[11,"x_offset","","Specify an offset for all vertical lines placed along the X axis.",227,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"name":"self"}}],[11,"y_offset","","Specify an offset for all horizontal lines placed along the Y axis.",227,{"inputs":[{"name":"self"},{"name":"y"}],"output":{"name":"self"}}],[11,"init_state","","",227,null],[11,"style","","",227,null],[11,"update","","Update the state of the PlotPath.",227,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",227,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"list","conrod::widget","A helper widget, useful for instantiating a sequence of widgets in a vertical list.",null,null],[3,"List","conrod::widget::list","A helper widget, useful for instantiating a sequence of widgets in a vertical list.",null,null],[12,"common","","Common widget building params for the `List`.",231,null],[12,"style","","Unique styling for the `List`.",231,null],[12,"item_instantiation","","Whether all or only visible items should be instantiated.",231,null],[3,"Fixed","","A type that implements `ItemSize` for `List`s whose `Item`s are a fixed size and known prior to setting the widgets for each item.",null,null],[12,"length","","The length of each item in the direction that the list flows.",232,null],[3,"Dynamic","","A type that implements `ItemSize` for `List`s whose `Item`s' length are unknown until setting the widget for each item.",null,null],[3,"Style","","Unique styling for the `List`.",null,null],[12,"scrollbar_thickness","","The width of the scrollbar if it is visible.",233,null],[12,"scrollbar_color","","The color of the scrollbar if it is visible.",233,null],[12,"scrollbar_position","","The location of the `List`'s scrollbar.",233,null],[3,"State","","Represents the state of the List widget.",null,null],[3,"Item","","The data necessary for instantiating a single item within a `List`.",null,null],[12,"i","","The index of the item within the list.",234,null],[12,"widget_id","","The id generated for the widget.",234,null],[12,"last_id","","The id used for the previous item's widget.",234,null],[3,"Scrollbar","","A wrapper around a `List`'s `Scrollbar` and its `widget::Id`.",null,null],[3,"Items","","An `Iterator` yielding each `Item` in the list.",null,null],[4,"Up","","Items flow from bottom to top.",null,null],[4,"Down","","Items flow from top to bottom.",null,null],[4,"Left","","Items flow from right to left.",null,null],[4,"Right","","Items flow from left to right.",null,null],[4,"ItemInstantiation","","The way in which a `List` should instantiate its `Item`s.",null,null],[13,"All","","Instantiate an `Item` for every element, regardless of visibility.",235,null],[13,"OnlyVisible","","Only instantiate visible `Item`s.",235,null],[4,"ScrollbarPosition","","If the `List` is scrollable, this describes how th `Scrollbar` should be positioned.",null,null],[13,"NextTo","","To the right of the items (reduces the item width to fit).",236,null],[13,"OnTop","","On top of the right edge of the items with auto_hide activated.",236,null],[8,"Direction","","The direction in which the list is laid out.",null,null],[16,"Axis","","The direction along which the `Scrollbar` is laid out.",237,null],[10,"ranges","","For some given `Rect`, returns the parallel and perpendicular ranges respectively.",237,null],[10,"scrollbar","","Begin building the scrollbar for the `List`.",237,{"inputs":[{"name":"id"}],"output":{"name":"scrollbar"}}],[10,"common_scroll","","Borrow the scroll state associated with this `Direction`'s axis.",237,{"inputs":[{"name":"commonbuilder"}],"output":{"generics":["scroll"],"name":"option"}}],[10,"position_item","","Positions the given widget.",237,{"inputs":[{"name":"w"},{"generics":["id"],"name":"option"},{"name":"id"},{"name":"scalar"}],"output":{"name":"w"}}],[10,"position_scroll_trigger","","Position the `Rectangle` used for scrolling `List`s with fixed `Item` sizes.",237,{"inputs":[{"name":"w"},{"name":"id"}],"output":{"name":"w"}}],[10,"scroll_list_kids","","Calls the suitable `scroll_kids_<axis>` method on the `List`.",237,{"inputs":[{"name":"list"}],"output":{"name":"list"}}],[10,"size_breadth","","Size the widget given its breadth.",237,{"inputs":[{"name":"w"},{"name":"scalar"}],"output":{"name":"w"}}],[10,"size_length","","Size the widget given its length.",237,{"inputs":[{"name":"w"},{"name":"scalar"}],"output":{"name":"w"}}],[8,"ItemSize","","The way in which the `List`'s items are sized. E.g. `Fired` or `Dynamic`.",null,null],[10,"update_list","","Update the `List` widget.",238,null],[10,"size_item","","Set the size for the given item `widget` and return it.",238,{"inputs":[{"name":"self"},{"name":"w"},{"name":"scalar"}],"output":{"name":"w"}}],[11,"clone","","",231,{"inputs":[{"name":"self"}],"output":{"name":"list"}}],[11,"clone","","",239,{"inputs":[{"name":"self"}],"output":{"name":"up"}}],[11,"fmt","","",239,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",240,{"inputs":[{"name":"self"}],"output":{"name":"down"}}],[11,"fmt","","",240,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",241,{"inputs":[{"name":"self"}],"output":{"name":"left"}}],[11,"fmt","","",241,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",242,{"inputs":[{"name":"self"}],"output":{"name":"right"}}],[11,"fmt","","",242,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",232,{"inputs":[{"name":"self"}],"output":{"name":"fixed"}}],[11,"fmt","","",232,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",243,{"inputs":[{"name":"self"}],"output":{"name":"dynamic"}}],[11,"fmt","","",243,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",233,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",233,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",233,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",233,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",233,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"clone","","",234,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"fmt","","",234,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",235,{"inputs":[{"name":"self"}],"output":{"name":"iteminstantiation"}}],[11,"fmt","","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",235,{"inputs":[{"name":"self"},{"name":"iteminstantiation"}],"output":{"name":"bool"}}],[11,"clone","","",236,{"inputs":[{"name":"self"}],"output":{"name":"scrollbarposition"}}],[11,"fmt","","",236,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",236,{"inputs":[{"name":"self"},{"name":"scrollbarposition"}],"output":{"name":"bool"}}],[11,"new","","Begin building a new `List`.",231,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"flow_left","","Begin building a new `List` flowing from right to left.",231,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"flow_right","","Begin building a new `List` flowing from left to right.",231,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"flow_up","","Begin building a new `List` flowing from bottom to top.",231,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"flow_down","","Begin building a new `List` flowing from top to bottom.",231,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_item_size","","Begin building a new `List` given some direction and item size.",231,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"self"}}],[11,"item_size","","Specify a fixed item size, where size is a `Scalar` in the direction that the `List` is flowing. When a `List` is constructed with this method, all items will have a fixed, equal length.",231,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"generics":["fixed"],"name":"list"}}],[11,"instantiate_all_items","","Indicates that an `Item` should be instantiated for every element in the list, regardless of whether or not the `Item` would be visible.",231,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"instantiate_only_visible_items","","Indicates that only `Item`s that are visible should be instantiated. This ensures that we avoid bloating the widget graph with unnecessary nodes and in turn keep traversal times to a minimum.",231,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scrollbar_next_to","","Specifies that the `List` should be scrollable and should provide a `Scrollbar` to the right of the items.",231,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scrollbar_on_top","","Specifies that the `List` should be scrollable and should provide a `Scrollbar` that hovers above the right edge of the items and automatically hides when the user is not scrolling.",231,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scrollbar_thickness","","The width of the `Scrollbar`.",231,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"scrollbar_color","","The color of the `Scrollbar`.",231,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"init_state","","",231,null],[11,"style","","",231,null],[11,"update","","",231,null],[11,"next","","Yield the next `Item` in the list.",244,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"generics":["item"],"name":"option"}}],[11,"set","","Sets the given widget as the widget to use for the item.",234,null],[11,"width","","The width of the `Item`.",234,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"height","","The height of the `Item`.",234,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"width","","The width of the `Item`.",234,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"height","","The height of the `Item`.",234,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"height","","The height of the `Item`.",234,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"width","","The width of the `Item`.",234,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"height","","The height of the `Item`.",234,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"width","","The width of the `Item`.",234,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"set","","Set the `Scrollbar` within the given `Ui`.",245,{"inputs":[{"name":"self"},{"name":"uicell"}],"output":null}],[11,"update_list","","",232,null],[11,"size_item","","",232,{"inputs":[{"name":"self"},{"name":"w"},{"name":"scalar"}],"output":{"name":"w"}}],[11,"update_list","","",243,null],[11,"size_item","","",243,{"inputs":[{"name":"self"},{"name":"w"},{"name":"scalar"}],"output":{"name":"w"}}],[11,"ranges","","",240,null],[11,"scrollbar","","",240,{"inputs":[{"name":"id"}],"output":{"name":"scrollbar"}}],[11,"common_scroll","","",240,{"inputs":[{"name":"commonbuilder"}],"output":{"generics":["scroll"],"name":"option"}}],[11,"scroll_list_kids","","",240,{"inputs":[{"name":"list"}],"output":{"name":"list"}}],[11,"position_item","","",240,{"inputs":[{"name":"w"},{"generics":["id"],"name":"option"},{"name":"id"},{"name":"scalar"}],"output":{"name":"w"}}],[11,"position_scroll_trigger","","",240,{"inputs":[{"name":"w"},{"name":"id"}],"output":{"name":"w"}}],[11,"size_breadth","","",240,{"inputs":[{"name":"w"},{"name":"scalar"}],"output":{"name":"w"}}],[11,"size_length","","",240,{"inputs":[{"name":"w"},{"name":"scalar"}],"output":{"name":"w"}}],[11,"ranges","","",239,null],[11,"scrollbar","","",239,{"inputs":[{"name":"id"}],"output":{"name":"scrollbar"}}],[11,"common_scroll","","",239,{"inputs":[{"name":"commonbuilder"}],"output":{"generics":["scroll"],"name":"option"}}],[11,"scroll_list_kids","","",239,{"inputs":[{"name":"list"}],"output":{"name":"list"}}],[11,"position_item","","",239,{"inputs":[{"name":"w"},{"generics":["id"],"name":"option"},{"name":"id"},{"name":"scalar"}],"output":{"name":"w"}}],[11,"position_scroll_trigger","","",239,{"inputs":[{"name":"w"},{"name":"id"}],"output":{"name":"w"}}],[11,"size_breadth","","",239,{"inputs":[{"name":"w"},{"name":"scalar"}],"output":{"name":"w"}}],[11,"size_length","","",239,{"inputs":[{"name":"w"},{"name":"scalar"}],"output":{"name":"w"}}],[11,"ranges","","",241,null],[11,"scrollbar","","",241,{"inputs":[{"name":"id"}],"output":{"name":"scrollbar"}}],[11,"common_scroll","","",241,{"inputs":[{"name":"commonbuilder"}],"output":{"generics":["scroll"],"name":"option"}}],[11,"scroll_list_kids","","",241,{"inputs":[{"name":"list"}],"output":{"name":"list"}}],[11,"position_item","","",241,{"inputs":[{"name":"w"},{"generics":["id"],"name":"option"},{"name":"id"},{"name":"scalar"}],"output":{"name":"w"}}],[11,"position_scroll_trigger","","",241,{"inputs":[{"name":"w"},{"name":"id"}],"output":{"name":"w"}}],[11,"size_breadth","","",241,{"inputs":[{"name":"w"},{"name":"scalar"}],"output":{"name":"w"}}],[11,"size_length","","",241,{"inputs":[{"name":"w"},{"name":"scalar"}],"output":{"name":"w"}}],[11,"ranges","","",242,null],[11,"scrollbar","","",242,{"inputs":[{"name":"id"}],"output":{"name":"scrollbar"}}],[11,"common_scroll","","",242,{"inputs":[{"name":"commonbuilder"}],"output":{"generics":["scroll"],"name":"option"}}],[11,"scroll_list_kids","","",242,{"inputs":[{"name":"list"}],"output":{"name":"list"}}],[11,"position_item","","",242,{"inputs":[{"name":"w"},{"generics":["id"],"name":"option"},{"name":"id"},{"name":"scalar"}],"output":{"name":"w"}}],[11,"position_scroll_trigger","","",242,{"inputs":[{"name":"w"},{"name":"id"}],"output":{"name":"w"}}],[11,"size_breadth","","",242,{"inputs":[{"name":"w"},{"name":"scalar"}],"output":{"name":"w"}}],[11,"size_length","","",242,{"inputs":[{"name":"w"},{"name":"scalar"}],"output":{"name":"w"}}],[0,"list_select","conrod::widget","A wrapper around the `List` widget providing the ability to select one or more items.",null,null],[3,"ListSelect","conrod::widget::list_select","A wrapper around the `List` widget that handles single and multiple selection logic.",null,null],[3,"State","","Represents the state of the ListSelect.",null,null],[3,"Events","","An iterator-like type for yielding `ListSelect` `Event`s.",null,null],[3,"Single","","A single item selection `Mode` for the `ListSelect`.",null,null],[3,"Multiple","","A selection `Mode` for the `ListSelect` that allows selecting more than one item at a time.",null,null],[4,"ListDirection","","The direction in which the list flows.",null,null],[13,"Forward","","The direction flowing from the start of the list to the end of the list.",246,null],[13,"Backward","","The direction flowing from the end of the list to the start of the list.",246,null],[4,"Event","","The kind of events that the `ListSelect` may `react` to. Provides tuple(s) of index in list and string representation of selection",null,null],[13,"Item","","The next `Item` is ready for instantiation.",247,null],[13,"Selection","","A change in selection has occurred.",247,null],[13,"Press","","A button press occurred while the widget was capturing the mouse.",247,null],[13,"Release","","A button release occurred while the widget was capturing the mouse.",247,null],[13,"Click","","A click occurred while the widget was capturing the mouse.",247,null],[13,"DoubleClick","","A double click occurred while the widget was capturing the mouse.",247,null],[4,"Selection","","Represents some change in item selection for a `ListSelect` in `Multiple` mode.",null,null],[13,"Add","","Items which have been added to the selection.",248,null],[13,"Remove","","Items which have been removed from the selection.",248,null],[6,"PendingEvents","","Buffer used for storing events that have been produced but are yet to be yielded.",null,null],[8,"Direction","","A trait that extends the `List` `Direction` trait with behaviour necessary for the `ListSelect` widget.",null,null],[10,"key_direction","","Maps a given `key` to a direction along the list.",249,{"inputs":[{"name":"key"}],"output":{"generics":["listdirection"],"name":"option"}}],[8,"Mode","","Allows the `ListSelect` to be generic over `Single` and `Multiple` selection modes.",null,null],[16,"Selection","","The data associated with the `Mode`s `Event::Selection`.",250,null],[10,"click_selection","","Update the `PendingEvents` in accordance with the given `Click` event.",250,{"inputs":[{"name":"self"},{"name":"click"},{"name":"usize"},{"name":"usize"},{"name":"state"},{"name":"f"},{"name":"pendingevents"}],"output":null}],[10,"key_selection","","Update the `PendingEvents` in accordance with the given `KeyPress` event.",250,{"inputs":[{"name":"self"},{"name":"keypress"},{"name":"usize"},{"name":"usize"},{"name":"state"},{"name":"f"},{"name":"pendingevents"}],"output":null}],[11,"clone","","",251,{"inputs":[{"name":"self"}],"output":{"name":"listselect"}}],[11,"clone","","",246,{"inputs":[{"name":"self"}],"output":{"name":"listdirection"}}],[11,"fmt","","",246,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",247,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"fmt","","",247,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",252,{"inputs":[{"name":"self"}],"output":{"name":"single"}}],[11,"clone","","",253,{"inputs":[{"name":"self"}],"output":{"name":"multiple"}}],[11,"clone","","",248,{"inputs":[{"name":"self"}],"output":{"name":"selection"}}],[11,"fmt","","",248,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"update_bool_slice","","Update the given slice of `bool`s with this `Selection`.",248,null],[11,"update_index_set","","Update the given set of selected indices with this `Selection`.",248,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":null}],[11,"single","","Construct a new ListSelect, allowing one selected item at a time.",251,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"multiple","","Construct a new ListSelect, allowing multiple selected items.",251,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"flow_down","","Flows items from top to bottom.",251,{"inputs":[{"name":"self"}],"output":{"generics":["down"],"name":"listselect"}}],[11,"flow_right","","Flows items from left to right.",251,{"inputs":[{"name":"self"}],"output":{"generics":["right"],"name":"listselect"}}],[11,"flow_left","","Flows items from right to left.",251,{"inputs":[{"name":"self"}],"output":{"generics":["left"],"name":"listselect"}}],[11,"flow_up","","Flows items from bottom to top.",251,{"inputs":[{"name":"self"}],"output":{"generics":["up"],"name":"listselect"}}],[11,"item_size","","Specify a fixed item size, where size is a `Scalar` in the direction that the `List` is flowing. When a `List` is constructed with this method, all items will have a fixed, equal length.",251,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"generics":["fixed"],"name":"listselect"}}],[11,"new","","Begin building a new `ListSelect` with the given mode.",251,{"inputs":[{"name":"usize"},{"name":"m"}],"output":{"name":"self"}}],[11,"scrollbar_next_to","","Specifies that the `List` should be scrollable and should provide a `Scrollbar` to the right of the items.",251,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scrollbar_on_top","","Specifies that the `List` should be scrollable and should provide a `Scrollbar` that hovers above the right edge of the items and automatically hides when the user is not scrolling.",251,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scrollbar_thickness","","The width of the `Scrollbar`.",251,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"scrollbar_color","","The color of the `Scrollbar`.",251,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"instantiate_all_items","","Indicates that an `Item` should be instatiated for every element in the list, regardless of whether or not the `Item` would be visible.",251,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"instantiate_only_visible_items","","Indicates that only `Item`s that are visible should be instantiated. This ensures that we avoid bloating the widget graph with unnecessary nodes and in turn keep traversal times to a minimum.",251,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"init_state","","",251,null],[11,"style","","",251,null],[11,"update","","Update the state of the ListSelect.",251,null],[11,"next","","Yield the next `Event`.",254,{"inputs":[{"name":"self"},{"name":"ui"},{"name":"f"}],"output":{"generics":["event"],"name":"option"}}],[11,"click_selection","","",252,{"inputs":[{"name":"self"},{"name":"click"},{"name":"usize"},{"name":"usize"},{"name":"state"},{"name":"f"},{"name":"pendingevents"}],"output":null}],[11,"key_selection","","",252,{"inputs":[{"name":"self"},{"name":"keypress"},{"name":"usize"},{"name":"usize"},{"name":"state"},{"name":"f"},{"name":"pendingevents"}],"output":null}],[11,"click_selection","","",253,{"inputs":[{"name":"self"},{"name":"click"},{"name":"usize"},{"name":"usize"},{"name":"state"},{"name":"f"},{"name":"pendingevents"}],"output":null}],[11,"key_selection","","",253,{"inputs":[{"name":"self"},{"name":"keypress"},{"name":"usize"},{"name":"usize"},{"name":"state"},{"name":"f"},{"name":"pendingevents"}],"output":null}],[11,"key_direction","conrod::widget::list","",240,{"inputs":[{"name":"key"}],"output":{"generics":["listdirection"],"name":"option"}}],[11,"key_direction","","",239,{"inputs":[{"name":"key"}],"output":{"generics":["listdirection"],"name":"option"}}],[11,"key_direction","","",242,{"inputs":[{"name":"key"}],"output":{"generics":["listdirection"],"name":"option"}}],[11,"key_direction","","",241,{"inputs":[{"name":"key"}],"output":{"generics":["listdirection"],"name":"option"}}],[0,"matrix","conrod::widget","A helper widget for laying out child widgets in the form of a grid.",null,null],[3,"Matrix","conrod::widget::matrix","Draw a matrix of any rectangular widget type, where the matrix will provide a function with the widget number, it's `rows` and `cols` position, the width and height for the widget and the location at which the widget should be drawn.",null,null],[3,"State","","The state of the Matrix, to be cached within the `Ui`'s widget `Graph`.",null,null],[3,"Style","","Unique styling for the `Matrix`.",null,null],[12,"cell_pad_w","","The width of the padding for each matrix element's \"cell\".",255,null],[12,"cell_pad_h","","The height of the padding for each matrix element's \"cell\".",255,null],[3,"Elements","","The event type yielded by the `Matrix`.",null,null],[3,"Element","","Data necessary for instantiating a widget for a single `Matrix` element.",null,null],[12,"widget_id","","The id generated for the widget.",256,null],[12,"row","","The row number for the `Element`.",256,null],[12,"col","","The column number for the `Element`.",256,null],[12,"w","","The width of the element.",256,null],[12,"h","","The height of the element.",256,null],[12,"rel_x","","The x position of the element relative to the centre of the `Matrix`.",256,null],[12,"rel_y","","The y position of the element relative to the centre of the `Matrix`.",256,null],[6,"WidgetNum","","The number of the widget.",null,null],[6,"ColNum","","A column index.",null,null],[6,"RowNum","","A row index.",null,null],[6,"Width","","The width of an element.",null,null],[6,"Height","","The height of an element.",null,null],[6,"PosX","","The position of an element along the x axis.",null,null],[6,"PosY","","The position of an element along the y axis.",null,null],[11,"clone","","",257,{"inputs":[{"name":"self"}],"output":{"name":"matrix"}}],[11,"clone","","",255,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",255,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",255,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",255,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",255,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",258,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",256,{"inputs":[{"name":"self"}],"output":{"name":"element"}}],[11,"fmt","","",256,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a widget matrix context.",257,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"cell_padding","","A builder method for adding padding to the cell.",257,{"inputs":[{"name":"self"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"init_state","","",257,null],[11,"style","","",257,null],[11,"update","","Update the state of the Matrix.",257,null],[11,"next","","Yield the next `Element`.",258,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"generics":["element"],"name":"option"}}],[11,"set","","Sets the given widget as the widget to use for the item.",256,null],[0,"graph","conrod::widget","A widget for viewing and controlling graph structures.",null,null],[3,"Layout","conrod::widget::graph","Stores the layout of all nodes within the graph.",null,null],[3,"Graph","","A widget used for visualising and manipulating Graph types.",null,null],[12,"common","","Data necessary and common for all widget builder types.",259,null],[12,"style","","Unique styling for the Graph.",259,null],[12,"nodes","","All nodes within the graph that the widget is to represent.",259,null],[12,"edges","","All edges within the graph.",259,null],[12,"layout","","The position of each node within the graph.",259,null],[3,"Style","","Unique styling for the BorderedRectangle widget.",null,null],[12,"background_color","","Shape styling for the inner rectangle.",260,null],[3,"State","","Unique state for the `Graph`.",null,null],[3,"NodeSocket","","Represents a socket connection on a node.",null,null],[12,"id","","The unique identifier for the node.",261,null],[12,"socket_index","","The index of the socket on one side of the node.",261,null],[3,"Camera","","The camera used to view the graph.",null,null],[3,"Session","","A context for moving through the modes of graph widget instantiation in a type-safe manner.",null,null],[3,"SessionEvents","","The first stage of the graph's Session event.",null,null],[3,"SessionNodes","","The second stage of the graph's Session event.",null,null],[3,"SessionEdges","","The third stage of the graph's Session event.",null,null],[3,"Events","","An iterator yielding all pending events.",null,null],[3,"Nodes","","An iterator-like type yielding a `NodeContext` for every node in the graph.",null,null],[3,"NodeContext","","A context for a node yielded during the node instantiation stage.",null,null],[3,"NodeWidget","","Returned when a `NodeContext` is assigned a widget.",null,null],[3,"Edges","","An iterator-like type yielding a `NodeContext` for every node in the graph.",null,null],[3,"Edge","","A context for an edge yielded during the edge instantiation stage.",null,null],[3,"EdgeWidget","","Returned when an `Edge` is assigned a widget.",null,null],[4,"Event","","An interaction has caused some event to occur.",null,null],[13,"Node","","Events associated with nodes.",262,null],[13,"Edge","","Events associated with edges.",262,null],[4,"NodeEvent","","Events related to adding and removing nodes.",null,null],[13,"Remove","","The user attempted to remove the node with the given identifier.",263,null],[13,"Dragged","","The widget used to represent this `Node` has been dragged.",263,null],[12,"node_id","conrod::widget::graph::NodeEvent","Unique identifier of the node being dragged.",263,null],[12,"from","","The origin of the drag relative to the `Graph` widget position.",263,null],[12,"to","","The end of the drag relative to the `Graph` widget position.",263,null],[4,"EdgeEvent","conrod::widget::graph","Events related to adding and removing edges.",null,null],[13,"AddStart","","The user has pressed the given node socket with the left mouse button to begin creating an edge.",264,null],[13,"Add","","The user has attempted to create an edge between the two given node sockets.",264,null],[12,"start","conrod::widget::graph::EdgeEvent","",264,null],[12,"end","","",264,null],[13,"Cancelled","conrod::widget::graph","The user has cancelled creating an edge from the given socket.",264,null],[13,"Remove","","The user has attempted to remove the edge connecting the two given sockets.",264,null],[12,"start","conrod::widget::graph::EdgeEvent","",264,null],[12,"end","","",264,null],[5,"node_widget_id","conrod::widget::graph","Returns the `widget::Id` for a node if one exists.",null,{"inputs":[{"name":"ni"},{"name":"id"},{"name":"ui"}],"output":{"generics":["id"],"name":"option"}}],[5,"edge_node_widget_ids","","Returns the `widget::Id`s for the start and end nodes.",null,null],[0,"node","","A default container widget to use for nodes that exist within a `Graph` widget.",null,null],[3,"Node","conrod::widget::graph::node","A widget that acts as a convenience container for some `Node`'s unique widgets.",null,null],[12,"common","","Data necessary and common for all widget builder types.",265,null],[12,"style","","Unique styling for the Node.",265,null],[12,"widget","","The widget wrapped by this node container.",265,null],[12,"inputs","","The number of input sockets on the node.",265,null],[12,"outputs","","The number of output sockets on the node.",265,null],[3,"Style","","Unique styling for the BorderedRectangle widget.",null,null],[12,"color","","Shape color for the inner rectangle.",266,null],[12,"socket_length","","The length of each rectangle along its `SocketSide`.",266,null],[12,"border","","The widget of the border around the widget.",266,null],[12,"border_radius","","The radius of the rounded corners of the border.",266,null],[12,"border_color","","Color of the border.",266,null],[12,"socket_color","","Color of the sockets.",266,null],[12,"input_socket_layout","","Default layout for input sockets.",266,null],[12,"output_socket_layout","","Default layout for node output sockets.",266,null],[3,"SocketLayout","","Describes the layout of either input or output sockets.",null,null],[12,"side","","Represents the side of a node widget's bounding rectangle.",267,null],[12,"direction","","The direction in which sockets will be laid out over the side.",267,null],[3,"State","","Unique state for the `Node`.",null,null],[3,"Event","","The event produced by the `Node` widget.",null,null],[12,"widget_event","","The event produced by the inner widget `W`.",268,null],[3,"SocketRects","","The rectangle for each socket (either inputs or outputs only).",null,null],[4,"SocketSide","","Represents the side of a node widget's bounding rectangle.",null,null],[13,"Left","","",269,null],[13,"Right","","",269,null],[13,"Top","","",269,null],[13,"Bottom","","",269,null],[4,"SocketType","","Describes whether a socket is associated with a node's inputs or outputs.",null,null],[13,"Input","","",270,null],[13,"Output","","",270,null],[5,"socket_rect","","Retrieve the `Rect` for the given socket on the given node.",null,{"inputs":[{"name":"id"},{"name":"sockettype"},{"name":"usize"},{"name":"ui"}],"output":{"generics":["rect"],"name":"option"}}],[5,"edge_socket_rects","","Returns a `Rect` for an edge's start and end nodes.",null,null],[5,"socket_rects","","Produces an iterator yielding a `Rect` for each socket for both inputs and outputs respectively.",null,{"inputs":[{"name":"id"},{"name":"ui"}],"output":{"name":"option"}}],[17,"DEFAULT_BORDER_THICKNESS","","",null,null],[17,"DEFAULT_SOCKET_LENGTH","","",null,null],[11,"clone","","",265,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"fmt","","",265,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",266,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",266,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",266,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",266,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"clone","","",267,{"inputs":[{"name":"self"}],"output":{"name":"socketlayout"}}],[11,"fmt","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",267,{"inputs":[{"name":"self"},{"name":"socketlayout"}],"output":{"name":"bool"}}],[11,"ne","","",267,{"inputs":[{"name":"self"},{"name":"socketlayout"}],"output":{"name":"bool"}}],[11,"clone","","",269,{"inputs":[{"name":"self"}],"output":{"name":"socketside"}}],[11,"fmt","","",269,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",269,{"inputs":[{"name":"self"},{"name":"socketside"}],"output":{"name":"bool"}}],[11,"hash","","",269,null],[11,"clone","","",270,{"inputs":[{"name":"self"}],"output":{"name":"sockettype"}}],[11,"fmt","","",270,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",270,{"inputs":[{"name":"self"},{"name":"sockettype"}],"output":{"name":"bool"}}],[11,"hash","","",270,null],[11,"clone","","",268,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"fmt","","",268,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Begin building a new `Node` widget.",265,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"inputs","","Specify the number of input sockets for the node.",265,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"outputs","","Specify the number of output sockets for the node.",265,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"color","","Specify the color for the node's inner rectangle.",265,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border_thickness","","The thickness of the border around the inner widget.",265,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Specify the color for the node's border.",265,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border_radius","","Specify the radius for the node's border.",265,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"socket_color","","Specify the color for the node's sockets.",265,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"input_socket_layout","","Specify the layout of the input sockets.",265,{"inputs":[{"name":"self"},{"name":"socketlayout"}],"output":{"name":"self"}}],[11,"output_socket_layout","","Specify the layout of the input sockets.",265,{"inputs":[{"name":"self"},{"name":"socketlayout"}],"output":{"name":"self"}}],[11,"deref","","",268,null],[11,"deref_mut","","",268,null],[11,"clone","","",271,{"inputs":[{"name":"self"}],"output":{"name":"socketrects"}}],[11,"next","","",271,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"init_state","","",265,null],[11,"style","","",265,null],[11,"update","","",265,null],[8,"NodeId","conrod::widget::graph","Traits required by types that may be used as a graph node identifier.",null,null],[11,"clone","","",272,{"inputs":[{"name":"self"}],"output":{"name":"layout"}}],[11,"fmt","","",272,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",272,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"bool"}}],[11,"ne","","",272,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"bool"}}],[11,"deref","","",272,null],[11,"deref_mut","","",272,null],[11,"clone","","",259,{"inputs":[{"name":"self"}],"output":{"name":"graph"}}],[11,"fmt","","",259,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",260,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",260,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",260,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",260,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",260,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"clone","","",262,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"fmt","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",262,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",262,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"clone","","",261,{"inputs":[{"name":"self"}],"output":{"name":"nodesocket"}}],[11,"fmt","","",261,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",261,{"inputs":[{"name":"self"},{"name":"nodesocket"}],"output":{"name":"bool"}}],[11,"ne","","",261,{"inputs":[{"name":"self"},{"name":"nodesocket"}],"output":{"name":"bool"}}],[11,"hash","","",261,null],[11,"clone","","",263,{"inputs":[{"name":"self"}],"output":{"name":"nodeevent"}}],[11,"fmt","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",263,{"inputs":[{"name":"self"},{"name":"nodeevent"}],"output":{"name":"bool"}}],[11,"ne","","",263,{"inputs":[{"name":"self"},{"name":"nodeevent"}],"output":{"name":"bool"}}],[11,"clone","","",264,{"inputs":[{"name":"self"}],"output":{"name":"edgeevent"}}],[11,"fmt","","",264,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",264,{"inputs":[{"name":"self"},{"name":"edgeevent"}],"output":{"name":"bool"}}],[11,"ne","","",264,{"inputs":[{"name":"self"},{"name":"edgeevent"}],"output":{"name":"bool"}}],[11,"clone","","",273,{"inputs":[{"name":"self"}],"output":{"name":"camera"}}],[11,"fmt","","",273,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",273,{"inputs":[],"output":{"name":"camera"}}],[11,"eq","","",273,{"inputs":[{"name":"self"},{"name":"camera"}],"output":{"name":"bool"}}],[11,"ne","","",273,{"inputs":[{"name":"self"},{"name":"camera"}],"output":{"name":"bool"}}],[11,"from","","",272,{"inputs":[{"generics":["point"],"name":"hashmap"}],"output":{"name":"self"}}],[11,"into","","",272,{"inputs":[{"name":"self"}],"output":{"generics":["point"],"name":"hashmap"}}],[11,"events","","All events that have occurred since the last ",274,{"inputs":[{"name":"self"}],"output":{"name":"events"}}],[11,"next","","Transition from the SessionEvents into SessionNodes for instantiating nodes.",274,{"inputs":[{"name":"self"}],"output":{"name":"sessionnodes"}}],[11,"next","","",275,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nodes","","Produce an iterator yielding a `NodeContext` for each node present in the graph.",276,{"inputs":[{"name":"self"}],"output":{"name":"nodes"}}],[11,"next","","Transition from the SessionNodes into SessionEdges for instantiating edges.",276,{"inputs":[{"name":"self"}],"output":{"name":"sessionedges"}}],[11,"next","","",277,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"edges","","Produce an iterator yielding an `Edge` for each node present in the graph.",278,{"inputs":[{"name":"self"}],"output":{"name":"edges"}}],[11,"next","","",279,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"node_id","","The unique identifier associated with this node.",280,{"inputs":[{"name":"self"}],"output":{"name":"ni"}}],[11,"point","","The location of the node.",280,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"widget","","Specify the widget to use ",280,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"nodewidget"}}],[11,"widget_id","","Retrieve the `widget::Id` that will be used to instantiate this node's widget.",281,{"inputs":[{"name":"self"},{"name":"uicell"}],"output":{"name":"id"}}],[11,"map","","Map over the inner widget.",281,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"self"}}],[11,"set","","Set the given widget for the node at `node_id()`.",281,null],[11,"deref","","",281,null],[11,"start","","The start (or \"input\") for the edge.",282,{"inputs":[{"name":"self"}],"output":{"name":"nodesocket"}}],[11,"end","","The end (or \"output\") for the edge.",282,{"inputs":[{"name":"self"}],"output":{"name":"nodesocket"}}],[11,"sockets","","The start and end sockets.",282,null],[11,"widget","","Specify the widget to use ",282,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"edgewidget"}}],[11,"widget_id","","Retrieve the `widget::Id` that will be used to instantiate this edge's widget.",283,{"inputs":[{"name":"self"},{"name":"uicell"}],"output":{"name":"id"}}],[11,"map","","Apply the given function to the inner widget.",283,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"self"}}],[11,"set","","Set the given widget for the edge.",283,null],[11,"new","","Begin building a new Graph widget.",259,{"inputs":[{"name":"ni"},{"name":"ei"},{"name":"layout"}],"output":{"name":"self"}}],[11,"background_color","","Color the Graph's rectangular area with the given color.",259,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"init_state","","",259,null],[11,"style","","",259,null],[11,"update","","",259,null],[0,"number_dialer","conrod::widget","A widget for precision control over any base-10 digit within a given value.",null,null],[3,"NumberDialer","conrod::widget::number_dialer","A widget for precision control over any digit within a value.",null,null],[3,"Style","","Unique graphical styling for the NumberDialer.",null,null],[12,"color","","Color of the NumberDialer's rectangle.",284,null],[12,"border","","The color of the rectangle border.",284,null],[12,"border_color","","The color of the rectangle border.",284,null],[12,"label_color","","The color of the NumberDialer's label.",284,null],[12,"label_font_size","","The font size for the NumberDialer's label.",284,null],[12,"font_id","","The `Id` associated with the font to use for the `NumberDialer` values.",284,null],[3,"State","","The state of the NumberDialer.",null,null],[3,"GlyphSlot","","Each digit in the adjustable value has its own Rectangle and Text widgets.",null,null],[11,"clone","","",284,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",284,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",284,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",284,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",284,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"clone","","",285,{"inputs":[{"name":"self"}],"output":{"name":"glyphslot"}}],[11,"fmt","","",285,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",285,{"inputs":[{"name":"self"},{"name":"glyphslot"}],"output":{"name":"bool"}}],[11,"ne","","",285,{"inputs":[{"name":"self"},{"name":"glyphslot"}],"output":{"name":"bool"}}],[11,"new","","Construct a new NumberDialer widget.",286,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"u8"}],"output":{"name":"self"}}],[11,"font_id","","Specify the font used for displaying the label.",286,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"enabled","","Build the type's self.$($assignee).+ with the given $Type.",286,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"init_state","","",286,null],[11,"style","","",286,null],[11,"update","","Update the state of the NumberDialer.",286,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",286,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",286,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",286,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",286,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",286,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",286,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[0,"plot_path","conrod::widget","A widget for plotting a series of lines using the given function x -> y.",null,null],[3,"PlotPath","conrod::widget::plot_path","A widget that plots a series of lines using the given function x -> y.",null,null],[3,"Style","","Unique styling parameters for the `PlotPath` widget.",null,null],[12,"thickness","","The thickness of the plotted line.",287,null],[12,"color","","The color of the line.",287,null],[3,"State","","Unique state stored between updates for the `PlotPath` widget.",null,null],[11,"clone","","",287,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",287,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",287,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",287,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",287,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Begin building a new `PlotPath` widget instance.",288,{"inputs":[{"name":"x"},{"name":"x"},{"name":"y"},{"name":"y"},{"name":"f"}],"output":{"name":"self"}}],[11,"thickness","","The thickness of the point path used to draw the plot.",288,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"init_state","","",288,null],[11,"style","","",288,null],[11,"is_over","","",288,{"inputs":[{"name":"self"}],"output":{"name":"isoverfn"}}],[11,"update","","Update the state of the PlotPath.",288,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",288,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"range_slider","conrod::widget","A widget for specifying start and end values for some linear range.",null,null],[3,"RangeSlider","conrod::widget::range_slider","Linear range selection.",null,null],[3,"Style","","Graphical styling unique to the RangeSlider widget.",null,null],[12,"color","","The color of the slidable rectangle.",289,null],[12,"border","","The length of the border around the edges of the slidable rectangle.",289,null],[12,"border_color","","The color of the Slider's border.",289,null],[12,"label_color","","The color of the Slider's label.",289,null],[12,"label_font_size","","The font-size for the Slider's label.",289,null],[12,"label_font_id","","The ID of the font used to display the label.",289,null],[3,"State","","Represents the state of the Slider widget.",null,null],[3,"Event","","The `Event` type produced by the `RangeSlider`.",null,null],[4,"Drag","","The part of the `RangeSlider` that is in the process of being dragged.",null,null],[13,"Edge","","One of the edges is being dragged.",290,null],[13,"Handle","","The whole range is being dragged.",290,null],[4,"Edge","","Either the `Start` or `End` `Edge` of the `RangeSlider`'s bar.",null,null],[13,"Start","","The start edge of the scrollbar handle.",291,null],[13,"End","","The end edge of the scrollbar handle.",291,null],[11,"clone","","",289,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",289,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",289,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",289,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",289,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"clone","","",290,{"inputs":[{"name":"self"}],"output":{"name":"drag"}}],[11,"fmt","","",290,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",290,{"inputs":[{"name":"self"},{"name":"drag"}],"output":{"name":"bool"}}],[11,"ne","","",290,{"inputs":[{"name":"self"},{"name":"drag"}],"output":{"name":"bool"}}],[11,"clone","","",291,{"inputs":[{"name":"self"}],"output":{"name":"edge"}}],[11,"fmt","","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",291,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"bool"}}],[11,"clone","","",292,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"next","","",292,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Construct a new RangeSlider widget.",293,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"label_font_id","","Specify the font used for displaying the label.",293,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"init_state","","",293,null],[11,"style","","",293,null],[11,"kid_area","","",293,{"inputs":[{"name":"self"},{"name":"kidareaargs"}],"output":{"name":"kidarea"}}],[11,"update","","Update the state of the Slider.",293,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",293,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",293,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",293,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",293,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",293,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",293,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[0,"rounded_rectangle","conrod::widget","Similar to the `Rectangle` widget however is drawn with rounded corners.",null,null],[3,"RoundedRectangle","conrod::widget::rounded_rectangle","Draws a rectangle with corners rounded via the given radius.",null,null],[12,"common","","Data necessary and common for all widget builder types.",294,null],[12,"style","","Unique styling for the RoundedRectangle.",294,null],[12,"radius","","The radius of the circle used to round each corner of the rectangle.",294,null],[12,"corner_resolution","","The number of points in each corner of the circle used to draw the rounded corners.",294,null],[3,"State","","Unique state for the `RoundedRectangle`.",null,null],[3,"Points","","An iterator yielding the outer points of a `RoundedRectangle`",null,null],[5,"points","","Produce an iterator yielding the outer points of a rounded rectangle.",null,{"inputs":[{"name":"rect"},{"name":"scalar"},{"name":"usize"}],"output":{"name":"points"}}],[5,"is_over_widget","","The function to use for picking whether a given point is over the polygon.",null,{"inputs":[{"name":"container"},{"name":"point"},{"name":"theme"}],"output":{"name":"isover"}}],[6,"Triangles","","An iterator yielding triangles for a `RoundedRectangle`.",null,null],[17,"DEFAULT_CORNER_RESOLUTION","","The default resolution of the circle used to draw the rounded corners.",null,null],[11,"clone","","",294,{"inputs":[{"name":"self"}],"output":{"name":"roundedrectangle"}}],[11,"fmt","","",294,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"styled","","Build a rounded rectangle with the given dimensions and style.",294,{"inputs":[{"name":"dimensions"},{"name":"scalar"},{"name":"style"}],"output":{"name":"self"}}],[11,"fill","","Build a new filled rounded rectangle.",294,{"inputs":[{"name":"dimensions"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"fill_with","","Build a new filled rounded rectangle widget filled with the given color.",294,{"inputs":[{"name":"dimensions"},{"name":"scalar"},{"name":"color"}],"output":{"name":"self"}}],[11,"outline","","Build a new outlined rounded rectangle widget.",294,{"inputs":[{"name":"dimensions"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"outline_styled","","Build an outlined rounded rectangle rather than a filled one.",294,{"inputs":[{"name":"dimensions"},{"name":"scalar"},{"name":"style"}],"output":{"name":"self"}}],[11,"corner_resolution","","The number of points in each corner of the circle used to draw the rounded corners.",294,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"init_state","","",294,null],[11,"style","","",294,null],[11,"is_over","","",294,{"inputs":[{"name":"self"}],"output":{"name":"isoverfn"}}],[11,"update","","Update the state of the Rectangle.",294,null],[11,"color","","",294,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"clone","","",295,{"inputs":[{"name":"self"}],"output":{"name":"points"}}],[11,"next","","",295,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"scrollbar","conrod::widget","A widget that allows for manually scrolling via dragging the mouse.",null,null],[3,"Scrollbar","conrod::widget::scrollbar","A widget that allows for scrolling via dragging the mouse.",null,null],[3,"Style","","Styling for the DropDownList, necessary for constructing its renderable Element.",null,null],[12,"color","","Color of the widget.",296,null],[12,"thickness","","The \"thickness\" of the scrollbar's track and handle `Rect`s.",296,null],[12,"auto_hide","","When true, the `Scrollbar` will only be visible when:",296,null],[3,"State","","The state of the `Scrollbar`.",null,null],[8,"Axis","","The axis that is scrolled by the `Scrollbar`.",null,null],[10,"track_rect","","The `Rect` for a scroll \"track\" with the given `thickness` for a container with the given `Rect`.",297,{"inputs":[{"name":"rect"},{"name":"scalar"}],"output":{"name":"rect"}}],[10,"handle_rect","","The `Rect` for a scroll handle given both `Range`s.",297,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"rect"}}],[10,"scroll_state","","Retrieve the related `scroll::State` for the axis from a given widget container.",297,{"inputs":[{"name":"container"}],"output":{"generics":["state"],"name":"option"}}],[10,"default_x_dimension","","Determine a default x dimension for the scrollbar in the case that no specific width is given.",297,{"inputs":[{"name":"scrollbar"},{"name":"ui"}],"output":{"name":"dimension"}}],[10,"default_y_dimension","","Determine a default y dimension for the scrollbar in the case that no specific height is given.",297,{"inputs":[{"name":"scrollbar"},{"name":"ui"}],"output":{"name":"dimension"}}],[10,"to_2d","","Convert a given `Scalar` along the axis into two dimensions.",297,null],[11,"clone","","",296,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",296,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",296,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",296,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"auto_hide","","By default, this is set to `false`.",298,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"thickness","","Build the widget with the given `thickness`.",298,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_axis","","Begin building a new scrollbar widget that scrolls along the X axis along the range of the scrollable widget at the given Id.",298,{"inputs":[{"name":"id"}],"output":{"name":"self"}}],[11,"y_axis","","Begin building a new scrollbar widget that scrolls along the Y axis along the range of the scrollable widget at the given Id.",298,{"inputs":[{"name":"id"}],"output":{"name":"self"}}],[11,"init_state","","",298,null],[11,"style","","",298,null],[11,"default_x_dimension","","",298,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"default_y_dimension","","",298,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"update","","",298,null],[11,"track_rect","conrod::widget::scroll","",148,{"inputs":[{"name":"rect"},{"name":"scalar"}],"output":{"name":"rect"}}],[11,"handle_rect","","",148,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"rect"}}],[11,"scroll_state","","",148,{"inputs":[{"name":"container"}],"output":{"generics":["state"],"name":"option"}}],[11,"default_x_dimension","","",148,{"inputs":[{"name":"scrollbar"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"default_y_dimension","","",148,{"inputs":[{"name":"scrollbar"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"to_2d","","",148,null],[11,"track_rect","","",149,{"inputs":[{"name":"rect"},{"name":"scalar"}],"output":{"name":"rect"}}],[11,"handle_rect","","",149,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"rect"}}],[11,"scroll_state","","",149,{"inputs":[{"name":"container"}],"output":{"generics":["state"],"name":"option"}}],[11,"default_x_dimension","","",149,{"inputs":[{"name":"scrollbar"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"default_y_dimension","","",149,{"inputs":[{"name":"scrollbar"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"to_2d","","",149,null],[11,"color","conrod::widget::scrollbar","Build the type's self.$($assignee).+ with the given $Type.",298,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"slider","conrod::widget","A widget for selecting a single value along some linear range.",null,null],[3,"Slider","conrod::widget::slider","Linear value selection.",null,null],[12,"skew","","The amount in which the slider's display should be skewed.",299,null],[12,"enabled","","Whether or not user input is enabled for the Slider.",299,null],[3,"Style","","Graphical styling unique to the Slider widget.",null,null],[12,"color","","The color of the slidable rectangle.",300,null],[12,"border","","The length of the border around the edges of the slidable rectangle.",300,null],[12,"border_color","","The color of the Slider's border.",300,null],[12,"label_color","","The color of the Slider's label.",300,null],[12,"label_font_size","","The font-size for the Slider's label.",300,null],[12,"label_font_id","","The ID of the font used to display the label.",300,null],[3,"State","","Represents the state of the Slider widget.",null,null],[11,"clone","","",300,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",300,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",300,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",300,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",300,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Construct a new Slider widget.",299,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"label_font_id","","Specify the font used for displaying the label.",299,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"skew","","Build the type's self.$($assignee).+ with the given $Type.",299,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"self"}}],[11,"enabled","","Build the type's self.$($assignee).+ with the given $Type.",299,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"init_state","","",299,null],[11,"style","","",299,null],[11,"kid_area","","",299,{"inputs":[{"name":"self"},{"name":"kidareaargs"}],"output":{"name":"kidarea"}}],[11,"update","","Update the state of the Slider.",299,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",299,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",299,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",299,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",299,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",299,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",299,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[0,"tabs","conrod::widget","A wrapper around a list of `Canvas`ses that displays them as a list of selectable tabs.",null,null],[3,"Tabs","conrod::widget::tabs","A wrapper around a list of `Canvas`ses that displays them as a list of selectable tabs.",null,null],[3,"State","","The state to be cached within the Canvas.",null,null],[3,"Tab","","A single Tab in the list owned by the Tabs State.",null,null],[3,"Style","","Unique styling for the `Tabs` widget.",null,null],[12,"layout","","Layout for the tab selection bar.",301,null],[12,"bar_thickness","","The thickness of the tab selection bar (width for vertical, height for horizontal).",301,null],[12,"label_color","","Color of the number dialer's label.",301,null],[12,"label_font_size","","Font size of the number dialer's label.",301,null],[12,"font_id","","The `font::Id` of the number dialer's font.",301,null],[12,"canvas","","The styling for each `Canvas`.",301,null],[3,"TabRects","","An iterator yielding the Rect for each Tab in the given list.",null,null],[4,"Layout","","The direction in which the tabs will be laid out.",null,null],[13,"Horizontal","","Tabs will be laid out horizontally (left to right).",302,null],[13,"Vertical","","Tabs will be laid out vertically (top to bottom).",302,null],[11,"clone","","",303,{"inputs":[{"name":"self"}],"output":{"name":"tab"}}],[11,"fmt","","",303,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",303,{"inputs":[{"name":"self"},{"name":"tab"}],"output":{"name":"bool"}}],[11,"ne","","",303,{"inputs":[{"name":"self"},{"name":"tab"}],"output":{"name":"bool"}}],[11,"clone","","",301,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",301,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",301,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",301,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",301,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"clone","","",302,{"inputs":[{"name":"self"}],"output":{"name":"layout"}}],[11,"fmt","","",302,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",302,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"bool"}}],[11,"new","","Construct some new Canvas Tabs.",304,null],[11,"starting_canvas","","Set the initially selected tab with a Canvas via its widget::Id.",304,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"pad","","Set the padding for all edges.",304,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"tabs"}}],[11,"layout_horizontally","","Layout the tabs horizontally.",304,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"layout_vertically","","Layout the tabs vertically.",304,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"canvas_style","","Build the `Tabs` widget with the given styling for its `Canvas`ses.",304,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"self"}}],[11,"pad_left","","If the `Tabs` has some `widget::canvas::Style`, assign the left padding.",304,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_right","","If the `Tabs` has some `widget::canvas::Style`, assign the left padding.",304,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_bottom","","If the `Tabs` has some `widget::canvas::Style`, assign the left padding.",304,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_top","","If the `Tabs` has some `widget::canvas::Style`, assign the left padding.",304,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bar_thickness","","The width of a vertical `Tabs` selection bar, or the height of a horizontal one.",304,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"starting_tab_idx","","Build the type's self.$($assignee).+ with the given $Type.",304,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",304,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",304,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"init_state","","",304,null],[11,"style","","",304,null],[11,"kid_area","","The area on which child widgets will be placed when using the `Place` Positionable methods.",304,{"inputs":[{"name":"self"},{"name":"kidareaargs"}],"output":{"name":"kidarea"}}],[11,"update","","Update the state of the Tabs.",304,{"inputs":[{"name":"self"},{"name":"updateargs"}],"output":null}],[11,"color","","",304,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","",304,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"self"}}],[11,"border_color","","",304,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"new","","Construct a new TabRects iterator.",305,null],[11,"next_with_id_and_label","","Yield the next Tab Rect, along with the associated ID and label.",305,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"text_box","conrod::widget","A widget for displaying and mutating a one-line field of text.",null,null],[3,"TextBox","conrod::widget::text_box","A widget for displaying and mutating a small, one-line field of text, given by the user in the form of a `String`.",null,null],[3,"Style","","Unique graphical styling for the TextBox.",null,null],[12,"text_padding","","The length of the gap between the bounding rectangle's border and the edge of the text.",306,null],[12,"color","","Color of the rectangle behind the text.",306,null],[12,"border","","The width of the bounding `BorderedRectangle` border.",306,null],[12,"border_color","","The color of the `BorderedRecangle`'s border.",306,null],[12,"text_color","","The color of the `TextEdit` widget.",306,null],[12,"font_size","","The font size for the text.",306,null],[12,"justify","","The typographic alignment of the text.",306,null],[12,"font_id","","The font used for the `Text`.",306,null],[3,"State","","The `State` of the `TextBox` widget that will be cached within the `Ui`.",null,null],[4,"Event","","Events produced by the `TextBox`.",null,null],[13,"Update","","The `String` was updated.",307,null],[13,"Enter","","The `Return` or `Enter` key was pressed.",307,null],[11,"clone","","",306,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",306,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",306,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",306,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",306,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Construct a TextBox widget.",308,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"left_justify","","Align the text to the left of its bounding Rect's x axis range.",308,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"center_justify","","Align the text to the middle of its bounding Rect's x axis range.",308,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"right_justify","","Align the text to the right of its bounding Rect's x axis range.",308,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"font_id","","Specify the font used for displaying the text.",308,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"text_color","","Build the type's self.$($assignee).+ with the given $Type.",308,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"font_size","","Build the type's self.$($assignee).+ with the given $Type.",308,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"justify","","Build the type's self.$($assignee).+ with the given $Type.",308,{"inputs":[{"name":"self"},{"name":"justify"}],"output":{"name":"self"}}],[11,"pad_text","","Build the type's self.$($assignee).+ with the given $Type.",308,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"clone","","",307,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"init_state","","",308,null],[11,"style","","",308,null],[11,"update","","Update the state of the TextEdit.",308,null],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",308,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",308,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",308,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"text_edit","conrod::widget","A widget for displaying and mutating multi-line text, given as a `String`.",null,null],[3,"TextEdit","conrod::widget::text_edit","A widget for displaying and mutating multi-line text, given as a `String`.",null,null],[3,"Style","","Unique graphical styling for the TextEdit.",null,null],[12,"color","","The color of the text (this includes cursor and selection color).",309,null],[12,"font_size","","The font size for the text.",309,null],[12,"justify","","The horizontal alignment of the text.",309,null],[12,"y_align","","The vertical alignment of the text.",309,null],[12,"line_spacing","","The vertical space between each line of text.",309,null],[12,"line_wrap","","The way in which text is wrapped at the end of a line.",309,null],[12,"restrict_to_height","","Do not allow to enter text that would exceed the bounds of the `TextEdit`'s `Rect`.",309,null],[12,"font_id","","The font used for the `Text`.",309,null],[3,"State","","The State of the TextEdit widget that will be cached within the Ui.",null,null],[4,"Drag","","Track whether some sort of dragging is currently occurring.",null,null],[13,"Selecting","","The drag is currently selecting a range of text.",310,null],[13,"MoveSelection","","The drag is moving a selection of text.",310,null],[4,"Cursor","","The position of the `Cursor` over the text.",null,null],[13,"Idx","","The cursor is at the given character index.",311,null],[13,"Selection","","The cursor is a selection between these two indices.",311,null],[12,"start","conrod::widget::text_edit::Cursor","The `start` is always the \"anchor\" point.",311,null],[12,"end","","The `end` may be either greater or less than the `start`.",311,null],[11,"clone","conrod::widget::text_edit","",309,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",309,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",309,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",309,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"clone","","",310,{"inputs":[{"name":"self"}],"output":{"name":"drag"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",310,{"inputs":[{"name":"self"},{"name":"drag"}],"output":{"name":"bool"}}],[11,"clone","","",311,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"fmt","","",311,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",311,{"inputs":[{"name":"self"},{"name":"cursor"}],"output":{"name":"bool"}}],[11,"ne","","",311,{"inputs":[{"name":"self"},{"name":"cursor"}],"output":{"name":"bool"}}],[11,"new","","Construct a TextEdit widget.",312,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"wrap_by_whitespace","","The `TextEdit` will wrap text via the whitespace that precedes the first width-exceeding character.",312,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"wrap_by_character","","By default, the `TextEdit` will wrap text via the whitespace that precedes the first width-exceeding character.",312,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"left_justify","","Align the text to the left of its bounding Rect's x axis range.",312,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"center_justify","","Align the text to the middle of its bounding Rect's x axis range.",312,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"right_justify","","Align the text to the right of its bounding Rect's x axis range.",312,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_text_bottom","","Align the text to the left of its bounding Rect's y axis range.",312,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_text_y_middle","","Align the text to the middle of its bounding Rect's y axis range.",312,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_text_top","","Align the text to the right of its bounding Rect's y axis range.",312,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"align_text_middle","","Align the text to the middle of its bounding Rect.",312,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"font_id","","Specify the font used for displaying the text.",312,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"font_size","","Build the type's self.$($assignee).+ with the given $Type.",312,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"justify","","Build the type's self.$($assignee).+ with the given $Type.",312,{"inputs":[{"name":"self"},{"name":"justify"}],"output":{"name":"self"}}],[11,"y_align_text","","Build the type's self.$($assignee).+ with the given $Type.",312,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"self"}}],[11,"line_wrap","","Build the type's self.$($assignee).+ with the given $Type.",312,{"inputs":[{"name":"self"},{"name":"wrap"}],"output":{"name":"self"}}],[11,"line_spacing","","Build the type's self.$($assignee).+ with the given $Type.",312,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"restrict_to_height","","Build the type's self.$($assignee).+ with the given $Type.",312,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"init_state","","",312,null],[11,"style","","",312,null],[11,"default_y_dimension","","",312,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"update","","Update the state of the TextEdit.",312,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",312,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[0,"title_bar","conrod::widget","A simple title bar widget that automatically sizes itself to the top of some other widget.",null,null],[3,"TitleBar","conrod::widget::title_bar","A simple title bar widget that automatically sizes itself to the top of some other widget.",null,null],[12,"common","","Data necessary and common for all widget builder types.",313,null],[12,"style","","Unique styling for the BorderedRectangle.",313,null],[12,"label","","A label displayed in the middle of the TitleBar.",313,null],[3,"State","","Unique state for the TitleBar widget.",null,null],[3,"Style","","Unique styling for the TitleBar widget.",null,null],[12,"color","","The color of the TitleBar's rectangle surface.",314,null],[12,"border","","The width of the border surrounding the TitleBar's rectangle.",314,null],[12,"border_color","","The color of the TitleBar's border.",314,null],[12,"text_color","","The color of the title bar's text.",314,null],[12,"font_size","","The font size for the title bar's text.",314,null],[12,"maybe_wrap","","The way in which the title bar's text should wrap.",314,null],[12,"line_spacing","","The distance between lines for multi-line title bar text.",314,null],[12,"justify","","The horizontal alignment of the title bar text.",314,null],[12,"label_x","","The position of the title bar's `Label` widget over the x axis.",314,null],[12,"label_y","","The position of the title bar's `Label` widget over the y axis.",314,null],[12,"font_id","","The font used for the `Text`.",314,null],[5,"calc_height","","Calculate the default height for the TitleBar's rect.",null,{"inputs":[{"name":"fontsize"}],"output":{"name":"scalar"}}],[11,"clone","","",313,{"inputs":[{"name":"self"}],"output":{"name":"titlebar"}}],[11,"clone","","",314,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",314,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",314,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",314,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",314,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Construct a new TitleBar widget and attach it to the widget at the given index.",313,{"inputs":[{"name":"str"},{"name":"id"}],"output":{"name":"self"}}],[11,"left_justify_label","","Align the text to the left of its bounding Rect's x axis range.",313,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"center_justify_label","","Align the text to the middle of its bounding Rect's x axis range.",313,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"right_justify_label","","Align the text to the right of its bounding Rect's x axis range.",313,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"label_x","","Specify the label's position relatively to `Button` along the x axis.",313,{"inputs":[{"name":"self"},{"name":"relative"}],"output":{"name":"self"}}],[11,"label_y","","Specify the label's position relatively to `Button` along the y axis.",313,{"inputs":[{"name":"self"},{"name":"relative"}],"output":{"name":"self"}}],[11,"font_id","","Specify the font used for displaying the text.",313,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"line_spacing","","Build the type's self.$($assignee).+ with the given $Type.",313,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"init_state","","",313,null],[11,"style","","",313,null],[11,"default_y_dimension","","",313,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"update","","",313,{"inputs":[{"name":"self"},{"name":"updateargs"}],"output":null}],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",313,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",313,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",313,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",313,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",313,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",313,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[0,"toggle","conrod::widget","A button that allows for toggling boolean state.",null,null],[3,"Toggle","conrod::widget::toggle","A pressable widget for toggling the state of a bool.",null,null],[12,"enabled","","If true, will allow user inputs. If false, will disallow user inputs.",315,null],[3,"Style","","Styling for the Toggle including coloring, bordering and labelling.",null,null],[12,"color","","Color of the Toggle's pressable area.",316,null],[12,"border","","The width of the rectangular border surrounding the Toggle.",316,null],[12,"border_color","","The color of the Toggle's border.",316,null],[12,"label_color","","The color of the Toggle's Text label.",316,null],[12,"label_font_size","","The font size for the Toggle's Text label.",316,null],[12,"label_font_id","","The ID of the font used to display the label.",316,null],[12,"label_x","","The position of the title bar's `Label` widget over the x axis.",316,null],[12,"label_y","","The position of the title bar's `Label` widget over the y axis.",316,null],[3,"State","","The state of the Toggle.",null,null],[3,"TimesClicked","","The `Event` type yielded by the `Toggle` widget.",null,null],[11,"clone","","",315,{"inputs":[{"name":"self"}],"output":{"name":"toggle"}}],[11,"clone","","",316,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",316,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",316,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",316,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",316,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"clone","","",317,{"inputs":[{"name":"self"}],"output":{"name":"timesclicked"}}],[11,"fmt","","",317,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",317,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Construct a new Toggle widget.",315,{"inputs":[{"name":"bool"}],"output":{"name":"toggle"}}],[11,"label_font_id","","Specify the font used for displaying the label.",315,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"label_x","","Specify the label's position relatively to `Toggle` along the x axis.",315,{"inputs":[{"name":"self"},{"name":"relative"}],"output":{"name":"self"}}],[11,"label_y","","Specify the label's position relatively to `Toggle` along the y axis.",315,{"inputs":[{"name":"self"},{"name":"relative"}],"output":{"name":"self"}}],[11,"enabled","","Build the type's self.$($assignee).+ with the given $Type.",315,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"init_state","","",315,null],[11,"style","","",315,null],[11,"update","","Update the state of the Toggle.",315,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",315,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",315,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",315,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",315,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",315,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",315,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[0,"xy_pad","conrod::widget","Used for displaying and controlling a 2D point on a cartesian plane within a given range.",null,null],[3,"XYPad","conrod::widget::xy_pad","Used for displaying and controlling a 2D point on a cartesian plane within a given range.",null,null],[12,"enabled","","Indicates whether the XYPad will respond to user input.",318,null],[3,"Style","","Unique graphical styling for the XYPad.",null,null],[12,"color","","The color of the XYPad's rectangle.",319,null],[12,"border","","The width of the border surrounding the rectangle.",319,null],[12,"border_color","","The color of the surrounding rectangle border.",319,null],[12,"label_color","","The color of the XYPad's label and value label text.",319,null],[12,"label_font_size","","The font size for the XYPad's label.",319,null],[12,"label_font_id","","The ID of the font used to display the label.",319,null],[12,"value_font_size","","The font size for the XYPad's value label.",319,null],[12,"line_thickness","","The thickness of the XYPad's crosshair lines.",319,null],[3,"State","","The state of the XYPad.",null,null],[11,"clone","","",319,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",319,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",319,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",319,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",319,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Build a new XYPad widget.",318,{"inputs":[{"name":"x"},{"name":"x"},{"name":"x"},{"name":"y"},{"name":"y"},{"name":"y"}],"output":{"name":"self"}}],[11,"label_font_id","","Specify the font used for displaying the label.",318,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"line_thickness","","Build the type's self.$($assignee).+ with the given $Type.",318,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"value_font_size","","Build the type's self.$($assignee).+ with the given $Type.",318,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"enabled","","Build the type's self.$($assignee).+ with the given $Type.",318,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"init_state","","",318,null],[11,"style","","",318,null],[11,"update","","Update the XYPad's cached state.",318,null],[11,"color","","Build the type's self.$($assignee).+ with the given $Type.",318,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Build the type's self.$($assignee).+ with the given $Type.",318,{"inputs":[{"name":"self"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"border_color","","Build the type's self.$($assignee).+ with the given $Type.",318,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type's self.$($assignee).+ with the given $Type.",318,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type's self.$($assignee).+ with the given $Type.",318,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type's self.$($assignee).+ with the given $Type.",318,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[6,"IsOverFn","conrod::widget","A function type used to determine whether or not a given point is over a widget.",null,null],[8,"Style","","The necessary bounds for a Widget's associated Style type.",null,null],[8,"Common","","A trait implemented by all Widget types.",null,null],[10,"common","","Borrows the `CommonBuilder` field.",320,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[10,"common_mut","","Mutably borrows the `CommonBuilder` field.",320,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[8,"Widget","","A trait to be implemented by all Widget types.",null,null],[16,"State","","State to be stored within the `Ui`s widget cache.",321,null],[16,"Style","","Every widget is required to have its own associated `Style` type. This type is intended to contain high-level styling information for the widget that can be optionally specified by a user of the widget.",321,null],[16,"Event","","The type of event yielded by the widget, returned via the `Widget::set` function.",321,null],[10,"init_state","","Return the initial State of the Widget.",321,null],[10,"style","","Return the styling of the widget.",321,null],[10,"update","","Update our Widget's unique Widget::State via the State wrapper type (the `state` field within the UpdateArgs).",321,null],[11,"default_x_position","","The default Position for the widget along the x axis.",321,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"position"}}],[11,"default_y_position","","The default Position for the widget along the y axis.",321,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"position"}}],[11,"default_x_dimension","","The default width for the Widget.",321,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"default_y_dimension","","The default height of the widget.",321,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"drag_area","","If the widget is draggable, implement this method and return the position and dimensions of the draggable space. The position should be relative to the center of the widget.",321,null],[11,"kid_area","","The area on which child widgets will be placed when using the `Place` `Position` methods.",321,{"inputs":[{"name":"self"},{"name":"kidareaargs"}],"output":{"name":"kidarea"}}],[11,"is_over","","Returns either of the following:",321,{"inputs":[{"name":"self"}],"output":{"name":"isoverfn"}}],[11,"parent","","Set the parent widget for this Widget by passing the WidgetId of the parent.",321,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"no_parent","","Specify that this widget has no parent widgets.",321,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"place_on_kid_area","","Set whether or not the Widget should be placed on the kid_area.",321,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"graphics_for","","Indicates that the Widget is used as a non-interactive graphical element for some other widget.",321,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"self"}}],[11,"floating","","Set whether or not the widget is floating (the default is `false`). A typical example of a floating widget would be a pop-up or alert window.",321,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"crop_kids","","Indicates that all widgets who are children of this widget should be cropped to the `kid_area` of this widget.",321,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scroll_kids","","Makes the widget's `KidArea` scrollable.",321,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scroll_kids_vertically","","Makes the widget's `KidArea` scrollable.",321,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scroll_kids_horizontally","","Set whether or not the widget's `KidArea` is scrollable (the default is false).",321,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"and","","A builder method that \"lifts\" the Widget through the given `build` function.",321,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"and_mut","","A builder method that mutates the Widget with the given `mutate` function.",321,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"and_if","","A method that conditionally builds the Widget with the given `build` function.",321,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"f"}],"output":{"name":"self"}}],[11,"and_then","","A method that optionally builds the Widget with the given `build` function.",321,{"inputs":[{"name":"self"},{"name":"option"},{"name":"f"}],"output":{"name":"self"}}],[11,"set","","Note: There should be no need to override this method.",321,null],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"kidarea"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"kidarea"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"self"},{"name":"kidarea"}],"output":{"name":"bool"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"maybeparent"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"maybeparent"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"self"},{"name":"maybeparent"}],"output":{"name":"bool"}}],[11,"get_unchecked","","Convert the MaybeParent into an Option.",140,{"inputs":[{"name":"self"},{"name":"ui"},{"name":"position"},{"name":"position"}],"output":{"name":"id"}}],[11,"get","","The same as `get_unchecked`, but checks whether or not the widget that we're inferring the parent for is the `Ui`'s window (which cannot have a parent, without creating a cycle).",140,{"inputs":[{"name":"self"},{"name":"id"},{"name":"ui"},{"name":"position"},{"name":"position"}],"output":{"generics":["id"],"name":"option"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"floating"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"floating"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"self"},{"name":"floating"}],"output":{"name":"bool"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"commonbuilder"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"commonstyle"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",136,{"inputs":[],"output":{"name":"commonstyle"}}],[11,"eq","","",136,{"inputs":[{"name":"self"},{"name":"commonstyle"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"self"},{"name":"commonstyle"}],"output":{"name":"bool"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"commonstate"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",137,{"inputs":[{"name":"self"},{"name":"commonstate"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"self"},{"name":"commonstate"}],"output":{"name":"bool"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"isover"}}],[11,"from","","",141,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"from","","",141,{"inputs":[{"name":"id"}],"output":{"name":"self"}}],[11,"update","","Mutate the internal widget state and set a flag notifying us that there has been a mutation.",322,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"deref","","",322,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"default","","",135,{"inputs":[],"output":{"name":"self"}}],[0,"cursor","conrod","Contains an extendable enum of supported mouse cursor types.",null,null],[4,"MouseCursor","conrod::cursor","This enum specifies cursor types used by internal widgets. For custom widgets using custom cursor types, you can still use this enum by specifying a numbered custom variant.",null,null],[13,"Arrow","","Default mouse cursor.",323,null],[13,"Text","","Text input curosr.",323,null],[13,"VerticalText","","Text input for vertical text.",323,null],[13,"Hand","","Open hand with index finger pointing up.",323,null],[13,"Grab","","Open hand.",323,null],[13,"Grabbing","","Closed hand.",323,null],[13,"ResizeVertical","","Vertical resize cursor.",323,null],[13,"ResizeHorizontal","","Horizontal resize cursor.",323,null],[13,"ResizeTopLeftBottomRight","","Diagonal resize cursor pointing to top left and bottom right corners.",323,null],[13,"ResizeTopRightBottomLeft","","Diagonal resize cursor pointing to top right to bottom left corners.",323,null],[13,"Custom","","Custom cursor variant. Encode your favourite cursor with a u8.",323,null],[11,"clone","","",323,{"inputs":[{"name":"self"}],"output":{"name":"mousecursor"}}],[11,"fmt","","",323,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",323,{"inputs":[{"name":"self"},{"name":"mousecursor"}],"output":{"name":"bool"}}],[11,"ne","","",323,{"inputs":[{"name":"self"},{"name":"mousecursor"}],"output":{"name":"bool"}}],[6,"FontSize","conrod","Font size used throughout Conrod.",null,null],[8,"Borderable","","Widgets that may display a border.",null,null],[10,"border","","Set the width of the widget's border.",324,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"self"}}],[10,"border_color","","Set the color of the widget's border.",324,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"border_rgba","","Set the color of the widget's border with rgba values.",324,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"border_rgb","","Set the color of the widget's border with rgb values.",324,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"border_hsla","","Set the color of the widget's border with hsla values.",324,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"border_hsl","","Set the color of the widget's border with hsl values.",324,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[8,"Labelable","","Widgets that may display some label.",null,null],[10,"label","","Set the label for the widget.",325,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[10,"label_color","","Set the color of the widget's label.",325,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_rgba","","Set the color of the widget's label from rgba values.",325,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"label_rgb","","Set the color of the widget's label from rgb values.",325,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"label_hsla","","Set the color of the widget's label from hsla values.",325,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"label_hsl","","Set the color of the widget's label from hsl values.",325,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[10,"label_font_size","","Set the font size for the widget's label.",325,{"inputs":[{"name":"self"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"small_font","","Set a \"small\" font size for the widget's label.",325,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"self"}}],[11,"medium_font","","Set a \"medium\" font size for the widget's label.",325,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"self"}}],[11,"large_font","","Set a \"large\" font size for the widget's label.",325,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"self"}}],[14,"builder_method","","A macro for simplifying implementation of methods for the `builder pattern`.",null,null],[14,"builder_methods","","A macro to simplify implementation of \"builder-pattern\" methods.",null,null],[14,"widget_ids","","A macro used to generate a struct with a field for each unique identifier given. Each field can then be used to generate unique `widget::Id`s.",null,null],[11,"border_rgba","","Set the color of the widget's border with rgba values.",324,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"border_rgb","","Set the color of the widget's border with rgb values.",324,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"border_hsla","","Set the color of the widget's border with hsla values.",324,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"border_hsl","","Set the color of the widget's border with hsl values.",324,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"fmt","conrod::input::keyboard","",326,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",326,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"extend","","",326,null],[11,"fmt","conrod::input","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","conrod::input::keyboard","",326,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","conrod::input::state::mouse","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","conrod::input","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"controllerbutton"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"controllerbutton"}],"output":{"name":"bool"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"renderargs"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"renderargs"}],"output":{"name":"bool"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"bool"}}],[11,"eq","conrod::input::keyboard","",326,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"ne","","",326,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"eq","conrod::input::state::mouse","",45,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"eq","conrod::input","",43,{"inputs":[{"name":"self"},{"name":"controlleraxisargs"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"controlleraxisargs"}],"output":{"name":"bool"}}],[11,"fmt","conrod::input::keyboard","",326,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_iter","","",326,{"inputs":[{"name":"t"}],"output":{"name":"modifierkey"}}],[11,"serialize","conrod::input","",42,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",46,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",44,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","conrod::input::state::mouse","",45,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","conrod::input","",43,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","conrod::input::keyboard","",326,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","conrod::input","",41,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"bitor","conrod::input::keyboard","Returns the union of the two sets of flags.",326,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"from","conrod::input","",41,{"inputs":[{"name":"mousebutton"}],"output":{"name":"button"}}],[11,"from","","",44,{"inputs":[{"name":"u32"}],"output":{"name":"key"}}],[11,"from","","",41,{"inputs":[{"name":"key"}],"output":{"name":"button"}}],[11,"from","conrod::input::state::mouse","",45,{"inputs":[{"name":"u32"}],"output":{"name":"mousebutton"}}],[11,"from","conrod::input","",41,{"inputs":[{"name":"controllerbutton"}],"output":{"name":"button"}}],[11,"cmp","","",44,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"ordering"}}],[11,"cmp","conrod::input::keyboard","",326,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"ordering"}}],[11,"cmp","conrod::input::state::mouse","",45,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"ordering"}}],[11,"sub_assign","conrod::input::keyboard","Disables all flags enabled in the set.",326,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",326,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",326,null],[11,"hash","conrod::input","",42,null],[11,"hash","conrod::input::state::mouse","",45,null],[11,"hash","conrod::input","",44,null],[11,"hash","","",41,null],[11,"hash","conrod::input::keyboard","",326,null],[11,"bitxor_assign","","Toggles the set of flags.",326,null],[11,"not","","Returns the complement of this set of flags.",326,{"inputs":[{"name":"self"}],"output":{"name":"modifierkey"}}],[11,"deserialize","conrod::input","",43,{"inputs":[{"name":"__d"}],"output":{"generics":["controlleraxisargs"],"name":"result"}}],[11,"deserialize","conrod::input::state::mouse","",45,{"inputs":[{"name":"__d"}],"output":{"generics":["mousebutton"],"name":"result"}}],[11,"deserialize","conrod::input","",41,{"inputs":[{"name":"__d"}],"output":{"generics":["button"],"name":"result"}}],[11,"deserialize","conrod::input::keyboard","",326,{"inputs":[{"name":"__d"}],"output":{"generics":["modifierkey"],"name":"result"}}],[11,"deserialize","conrod::input","",42,{"inputs":[{"name":"__d"}],"output":{"generics":["controllerbutton"],"name":"result"}}],[11,"deserialize","","",44,{"inputs":[{"name":"__d"}],"output":{"generics":["key"],"name":"result"}}],[11,"deserialize","","",46,{"inputs":[{"name":"__d"}],"output":{"generics":["renderargs"],"name":"result"}}],[11,"bitor_assign","conrod::input::keyboard","Adds the set of flags.",326,null],[11,"bitand","","Returns the intersection between the two sets of flags.",326,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"fmt","","",326,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","conrod::input","",46,{"inputs":[{"name":"self"}],"output":{"name":"renderargs"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"button"}}],[11,"clone","conrod::input::state::mouse","",45,{"inputs":[{"name":"self"}],"output":{"name":"mousebutton"}}],[11,"clone","conrod::input","",42,{"inputs":[{"name":"self"}],"output":{"name":"controllerbutton"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"controlleraxisargs"}}],[11,"clone","conrod::input::keyboard","",326,{"inputs":[{"name":"self"}],"output":{"name":"modifierkey"}}],[11,"clone","conrod::input","",44,{"inputs":[{"name":"self"}],"output":{"name":"key"}}],[11,"partial_cmp","conrod::input::keyboard","",326,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",326,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"le","","",326,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"gt","","",326,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"ge","","",326,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"partial_cmp","conrod::input::state::mouse","",45,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","conrod::input","",44,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","conrod::input::keyboard","",326,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"sub","","Returns the set difference of the two sets of flags.",326,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"cmp","conrod::text::rt","",104,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"ordering"}}],[11,"cmp","","",106,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"ordering"}}],[11,"cmp","conrod::text","",101,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"ordering"}}],[11,"cmp","conrod::text::rt","",105,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"ordering"}}],[11,"mul","","",106,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"generics":["f32"],"name":"vector"}}],[11,"mul","","",106,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"generics":["f64"],"name":"vector"}}],[11,"hash","","",105,null],[11,"hash","","",106,null],[11,"hash","conrod::text","",101,null],[11,"hash","conrod::text::rt","",104,null],[11,"div","","",106,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"generics":["f64"],"name":"vector"}}],[11,"div","","",106,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"generics":["f32"],"name":"vector"}}],[11,"fmt","conrod::text","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","conrod::text::rt","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","conrod::text","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","conrod::text::rt","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"add","","",106,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"vector"}}],[11,"add","","",106,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"add","","",104,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"point"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"eq","conrod::text","",102,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"eq","conrod::text::rt","",104,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"eq","conrod::text","",101,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"clone","","",327,{"inputs":[{"name":"self"}],"output":{"name":"glyph"}}],[11,"clone","","",328,{"inputs":[{"name":"self"}],"output":{"name":"glyphiter"}}],[11,"clone","conrod::text::rt","",106,{"inputs":[{"name":"self"}],"output":{"name":"vector"}}],[11,"clone","conrod::text","",102,{"inputs":[{"name":"self"}],"output":{"name":"scale"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"glyphid"}}],[11,"clone","conrod::text::rt","",104,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"clone","conrod::text","",329,{"inputs":[{"name":"self"}],"output":{"name":"layoutiter"}}],[11,"clone","conrod::text::rt","",105,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"partial_cmp","","",104,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",104,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"le","","",104,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"gt","","",104,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"ge","","",104,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"partial_cmp","conrod::text","",101,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",101,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"le","","",101,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"gt","","",101,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"ge","","",101,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"partial_cmp","conrod::text::rt","",105,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",105,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"le","","",105,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"gt","","",105,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ge","","",105,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"partial_cmp","conrod::text","",102,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",102,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"le","","",102,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"gt","","",102,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"ge","","",102,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"partial_cmp","conrod::text::rt","",106,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",106,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"le","","",106,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"gt","","",106,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"ge","","",106,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"sub","","",106,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"vector"}}],[11,"sub","","",104,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"vector"}}],[11,"sub","","",104,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"point"}}],[11,"next","conrod::text","",329,{"inputs":[{"name":"self"}],"output":{"generics":["positionedglyph"],"name":"option"}}],[11,"next","","",328,{"inputs":[{"name":"self"}],"output":{"generics":["glyph"],"name":"option"}}],[11,"event","conrod::input::keyboard","Change modifier key state depending on input.",326,null],[18,"NO_MODIFIER","","No modifier.",326,null],[18,"CTRL","","Ctrl.",326,null],[18,"SHIFT","","Shift.",326,null],[18,"ALT","","Alt.",326,null],[18,"GUI","","Gui.",326,null],[18,"CTRL_SHIFT","","Ctrl + Shift.",326,null],[18,"CTRL_ALT","","Ctrl + Alt.",326,null],[18,"CTRL_GUI","","Ctrl + Gui.",326,null],[18,"CTRL_SHIFT_ALT","","Ctrl + Shift + Alt.",326,null],[18,"CTRL_SHIFT_GUI","","Ctrl + Shift + Gui.",326,null],[18,"CTRL_SHIFT_ALT_GUI","","Ctrl + Shift + Alt + Gui.",326,null],[18,"SHIFT_ALT","","Shift + Alt.",326,null],[18,"SHIFT_GUI","","Shift + Gui.",326,null],[18,"SHIFT_ALT_GUI","","Shift + Alt + Gui.",326,null],[18,"ALT_GUI","","Alt + Gui.",326,null],[11,"empty","","Returns an empty set of flags.",326,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"all","","Returns the set containing all flags.",326,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"bits","","Returns the raw value of the flags currently stored.",326,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",326,{"inputs":[{"name":"u8"}],"output":{"generics":["modifierkey"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",326,{"inputs":[{"name":"u8"}],"output":{"name":"modifierkey"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",326,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",326,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",326,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",326,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",326,null],[11,"remove","","Removes the specified flags in-place.",326,null],[11,"toggle","","Toggles the specified flags in-place.",326,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",326,null],[11,"new","conrod::input","Create a new ControllerButton object. Intended for use by backends when emitting events.",42,{"inputs":[{"name":"i32"},{"name":"u8"}],"output":{"name":"controllerbutton"}}],[11,"new","","Create a new ControllerAxisArgs object. Intended for use by backends when emitting events.",43,{"inputs":[{"name":"i32"},{"name":"u8"},{"name":"f64"}],"output":{"name":"controlleraxisargs"}}],[11,"code","","Returns an id of the key",44,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"viewport","","Returns viewport information filling entire render area.",46,{"inputs":[{"name":"self"}],"output":{"name":"viewport"}}],[11,"label_rgba","conrod","Set the color of the widget's label from rgba values.",325,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"label_rgb","","Set the color of the widget's label from rgb values.",325,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"label_hsla","","Set the color of the widget's label from hsla values.",325,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"label_hsl","","Set the color of the widget's label from hsl values.",325,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"small_font","","Set a \"small\" font size for the widget's label.",325,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"self"}}],[11,"medium_font","","Set a \"medium\" font size for the widget's label.",325,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"self"}}],[11,"large_font","","Set a \"large\" font size for the widget's label.",325,{"inputs":[{"name":"self"},{"name":"ui"}],"output":{"name":"self"}}],[11,"font","conrod::text","The font to which this glyph belongs. If the glyph is a standalone glyph that owns its resources, it no longer has a reference to the font which it was created from (using `standalone()`). In which case, `None` is returned.",327,{"inputs":[{"name":"self"}],"output":{"generics":["font"],"name":"option"}}],[11,"id","","The glyph identifier for this glyph.",327,{"inputs":[{"name":"self"}],"output":{"name":"glyphid"}}],[11,"scaled","","Augments this glyph with scaling information, making methods that depend on the scale of the glyph available.",327,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"scaledglyph"}}],[11,"standalone","","Turns a `Glyph<'a>` into a `Glyph<'static>`. This produces a glyph that owns its resources, extracted from the font. This glyph can outlive the font that it comes from.",327,{"inputs":[{"name":"self"}],"output":{"name":"glyph"}}],[11,"uniform","","Uniform scaling, equivalent to `Scale { x: s, y: s }`.",102,{"inputs":[{"name":"f32"}],"output":{"name":"scale"}}],[11,"new","","Constructs a new cache. Note that this is just the CPU side of the cache. The GPU texture is managed by the user.",330,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"cache"}}],[11,"set_scale_tolerance","","Sets the scale tolerance for the cache. See the documentation for `Cache::new` for more information.",330,null],[11,"scale_tolerance","","Returns the current scale tolerance for the cache.",330,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"set_position_tolerance","","Sets the subpixel position tolerance for the cache. See the documentation for `Cache::new` for more information.",330,null],[11,"position_tolerance","","Returns the current subpixel position tolerance for the cache.",330,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"dimensions","","Returns the cache texture dimensions assumed by the cache. For proper operation this should match the dimensions of the used GPU texture.",330,null],[11,"queue_glyph","","Queue a glyph for caching by the next call to `cache_queued`. `font_id` is used to disambiguate glyphs from different fonts. The user should ensure that `font_id` is unique to the font the glyph is from.",330,null],[11,"clear","","Clears the cache. Does not affect the glyph queue.",330,null],[11,"clear_queue","","Clears the glyph queue.",330,null],[11,"cache_queued","","Caches the queued glyphs. If this is unsuccessful, the queue is untouched. Any glyphs cached by previous calls to this function may be removed from the cache to make room for the newly queued glyphs. Thus if you want to ensure that a glyph is in the cache, the most recently cached queue must have contained that glyph.",330,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["cachewriteerr"],"name":"result"}}],[11,"rect_for","","Retrieves the (floating point) texture coordinates of the quad for a glyph in the cache, as well as the pixel-space (integer) coordinates that this region should be drawn at. In the majority of cases these pixel-space coordinates should be identical to the bounding box of the input glyph. They only differ if the cache has returned a substitute glyph that is deemed close enough to the requested glyph as specified by the cache tolerance parameters.",330,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"positionedglyph"}],"output":{"generics":["option","cachereaderr"],"name":"result"}}],[11,"width","conrod::text::rt","",105,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"height","","",105,{"inputs":[{"name":"self"}],"output":{"name":"n"}}]],"paths":[[3,"Ui"],[3,"UiBuilder"],[4,"Bordering"],[3,"Hsla"],[3,"Rgba"],[4,"Color"],[4,"Gradient"],[8,"Colorable"],[3,"Text"],[3,"Motion"],[3,"Press"],[3,"MousePress"],[3,"KeyPress"],[3,"Release"],[3,"MouseRelease"],[3,"KeyRelease"],[3,"Drag"],[3,"Click"],[3,"DoubleClick"],[3,"Tap"],[3,"Scroll"],[4,"Input"],[4,"Event"],[4,"Ui"],[4,"Widget"],[4,"Button"],[8,"Walker"],[3,"UniqueWidgetState"],[3,"Container"],[3,"IsOverFn"],[4,"Node"],[4,"Edge"],[3,"PickWidgets"],[3,"PickScrollableWidgets"],[3,"DepthOrder"],[3,"Graph"],[6,"Children"],[6,"Parents"],[3,"Map"],[3,"Id"],[3,"NewIds"],[4,"Button"],[3,"ControllerButton"],[3,"ControllerAxisArgs"],[4,"Key"],[4,"Button"],[3,"RenderArgs"],[4,"Source"],[4,"Motion"],[3,"State"],[3,"Start"],[3,"Touch"],[3,"Mouse"],[4,"ButtonPosition"],[3,"ButtonMap"],[3,"PressedButtons"],[3,"Mouse"],[3,"Widget"],[3,"Events"],[3,"Presses"],[3,"MousePresses"],[3,"MouseButtonPresses"],[3,"KeyPresses"],[3,"Releases"],[3,"MouseButtonReleases"],[3,"MouseReleases"],[3,"KeyReleases"],[3,"Clicks"],[3,"ButtonClicks"],[3,"Taps"],[3,"Drags"],[3,"ButtonDrags"],[3,"Texts"],[3,"Scrolls"],[3,"Global"],[3,"Events"],[3,"UiEvents"],[3,"Touch"],[4,"Phase"],[3,"Id"],[3,"Padding"],[4,"Axis"],[4,"Position"],[4,"Relative"],[4,"Direction"],[4,"Align"],[4,"Place"],[4,"Dimension"],[3,"Range"],[4,"Edge"],[3,"Rect"],[4,"Corner"],[8,"Positionable"],[8,"Sizeable"],[3,"Primitive"],[4,"PrimitiveKind"],[8,"PrimitiveWalker"],[3,"OwnedPrimitives"],[3,"Primitives"],[3,"WalkOwnedPrimitives"],[3,"Text"],[3,"GlyphId"],[3,"Scale"],[4,"Justify"],[3,"Point"],[3,"Rect"],[3,"Vector"],[4,"Error"],[3,"Id"],[3,"Ids"],[3,"Map"],[3,"NewIds"],[3,"RectsPerLine"],[3,"SelectedRectsPerLine"],[3,"Rects"],[3,"SelectedRects"],[3,"Index"],[3,"XysPerLine"],[3,"XysPerLineFromText"],[3,"Xs"],[3,"Info"],[4,"Break"],[3,"Rects"],[3,"Infos"],[3,"SelectedRects"],[3,"Lines"],[3,"Theme"],[3,"WidgetDefault"],[3,"UniqueDefault"],[3,"UiCell"],[4,"IterDiff"],[3,"UpdateArgs"],[3,"KidAreaArgs"],[3,"KidArea"],[3,"Floating"],[3,"CommonBuilder"],[3,"CommonStyle"],[3,"CommonState"],[3,"PreUpdateCache"],[3,"PostUpdateCache"],[4,"MaybeParent"],[4,"IsOver"],[3,"List"],[3,"Generator"],[3,"ListWalk"],[3,"State"],[8,"Axis"],[3,"Scroll"],[4,"X"],[4,"Y"],[3,"Line"],[3,"State"],[3,"Style"],[4,"Pattern"],[4,"Cap"],[3,"Image"],[3,"State"],[3,"Style"],[3,"PointPath"],[3,"State"],[3,"Triangles"],[4,"Style"],[3,"Circle"],[3,"Oval"],[3,"Section"],[3,"State"],[8,"OvalSection"],[3,"Full"],[3,"Circumference"],[3,"Triangles"],[3,"Polygon"],[3,"State"],[4,"Kind"],[3,"Triangles"],[3,"Rectangle"],[4,"Kind"],[3,"State"],[3,"Triangles"],[3,"SingleColor"],[3,"Triangle"],[3,"State"],[8,"Vertex"],[8,"Style"],[3,"MultiColor"],[6,"Point"],[6,"ColoredPoint"],[3,"TrianglesUnpositioned"],[3,"Text"],[3,"Style"],[3,"State"],[4,"Wrap"],[3,"BorderedRectangle"],[3,"Style"],[3,"RoundedBorderTriangles"],[3,"Button"],[3,"Style"],[3,"FlatIds"],[3,"ImageIds"],[3,"Flat"],[3,"Image"],[3,"TimesClicked"],[4,"ImageColor"],[3,"Canvas"],[3,"Style"],[4,"Length"],[4,"Direction"],[3,"Ids"],[3,"Style"],[3,"Area"],[4,"Event"],[3,"CollapsibleArea"],[3,"Style"],[4,"MaxHeight"],[3,"DropDownList"],[3,"EnvelopeEditor"],[3,"Style"],[4,"Event"],[8,"EnvelopePoint"],[3,"FileNavigator"],[3,"Style"],[4,"Types"],[4,"Event"],[3,"DirectoryView"],[3,"Style"],[4,"Event"],[3,"Entry"],[3,"Directory"],[3,"Grid"],[3,"Style"],[3,"Lines"],[4,"Axis"],[3,"List"],[3,"Fixed"],[3,"Style"],[3,"Item"],[4,"ItemInstantiation"],[4,"ScrollbarPosition"],[8,"Direction"],[8,"ItemSize"],[4,"Up"],[4,"Down"],[4,"Left"],[4,"Right"],[3,"Dynamic"],[3,"Items"],[3,"Scrollbar"],[4,"ListDirection"],[4,"Event"],[4,"Selection"],[8,"Direction"],[8,"Mode"],[3,"ListSelect"],[3,"Single"],[3,"Multiple"],[3,"Events"],[3,"Style"],[3,"Element"],[3,"Matrix"],[3,"Elements"],[3,"Graph"],[3,"Style"],[3,"NodeSocket"],[4,"Event"],[4,"NodeEvent"],[4,"EdgeEvent"],[3,"Node"],[3,"Style"],[3,"SocketLayout"],[3,"Event"],[4,"SocketSide"],[4,"SocketType"],[3,"SocketRects"],[3,"Layout"],[3,"Camera"],[3,"SessionEvents"],[3,"Events"],[3,"SessionNodes"],[3,"Nodes"],[3,"SessionEdges"],[3,"Edges"],[3,"NodeContext"],[3,"NodeWidget"],[3,"Edge"],[3,"EdgeWidget"],[3,"Style"],[3,"GlyphSlot"],[3,"NumberDialer"],[3,"Style"],[3,"PlotPath"],[3,"Style"],[4,"Drag"],[4,"Edge"],[3,"Event"],[3,"RangeSlider"],[3,"RoundedRectangle"],[3,"Points"],[3,"Style"],[8,"Axis"],[3,"Scrollbar"],[3,"Slider"],[3,"Style"],[3,"Style"],[4,"Layout"],[3,"Tab"],[3,"Tabs"],[3,"TabRects"],[3,"Style"],[4,"Event"],[3,"TextBox"],[3,"Style"],[4,"Drag"],[4,"Cursor"],[3,"TextEdit"],[3,"TitleBar"],[3,"Style"],[3,"Toggle"],[3,"Style"],[3,"TimesClicked"],[3,"XYPad"],[3,"Style"],[8,"Common"],[8,"Widget"],[3,"State"],[4,"MouseCursor"],[8,"Borderable"],[8,"Labelable"],[3,"ModifierKey"],[3,"Glyph"],[3,"GlyphIter"],[3,"LayoutIter"],[3,"GlyphCache"]]};
searchIndex["conrod_derive"] = {"doc":"","items":[[5,"widget_common","conrod_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"widget_common_","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"widget_style","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"widget_style_","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["daggy"] = {"doc":"daggy is a directed acyclic graph data structure library.","items":[[3,"EdgeIndex","daggy","Edge identifier.",null,null],[3,"NodeIndex","","Node identifier.",null,null],[3,"EdgeWeightsMut","","Iterator yielding mutable access to all edge weights.",null,null],[3,"NodeWeightsMut","","Iterator yielding mutable access to all node weights.",null,null],[3,"Dag","","A Directed acyclic graph (DAG) data structure.",null,null],[3,"Children","","A Walker type that can be used to step through the children of some parent node.",null,null],[3,"Parents","","A Walker type that can be used to step through the parents of some child node.",null,null],[3,"EdgeIndices","","An iterator yielding multiple `EdgeIndex`s, returned by the `Graph::add_edges` method.",null,null],[3,"WouldCycle","","An error returned by the `Dag::add_edge` method in the case that adding an edge would have caused the graph to cycle.",null,null],[12,"0","","",0,null],[0,"walker","","Walker is a trait providing a variety of useful methods for traversing graph types.",null,null],[3,"Recursive","daggy::walker","Recursively walks a graph using the recursive function `recursive_fn`.",null,null],[3,"Chain","","Walks the entirety of `a` before walking the entirety of `b`.",null,null],[3,"Filter","","A walker that applies some given predicate to each element returned by its walker. The only index pairs that will be yielded are those that make the predicate evaluate to true.",null,null],[3,"Peekable","","A walker that has a `.peek(&graph)` method that returns an optional next neighbor.",null,null],[3,"SkipWhile","","A walker that invokes the predicate on elements until it returns false. Once the predicate returns false, that element and all further elements are yielded.",null,null],[3,"TakeWhile","","A walker that yields elements so long as the predicate returns true. After the predicate returns false for the first time, no further elements will be yielded.",null,null],[3,"Skip","","A walker that skips the first n steps of this walk, and then yields all further steps.",null,null],[3,"Take","","A walker that yields the first n steps of this walk.",null,null],[3,"Cycle","","A walker that repeats its internal walker endlessly.",null,null],[3,"Inspect","","A walker that calls a function with a reference to each index pair before yielding them. This is often useful for debugging a walker pipeline.",null,null],[3,"Iter","","An iterator yielding index pairs produced by its internal walker and graph.",null,null],[3,"IterEdges","","An iterator yielding edge indices produced by its internal walker and graph.",null,null],[3,"IterNodes","","An iterator yielding node indices produced by its internal walker and graph.",null,null],[3,"IterWeights","","An iterator yielding weights associated with the index pairs produced by its internal walker and graph.",null,null],[3,"IterEdgeWeights","","An iterator yielding edge weights associated with the indices produced by its internal walker and graph.",null,null],[3,"IterNodeWeights","","An iterator yielding node weights associated with the indices produced by its internal walker and graph.",null,null],[6,"IndexPair","","Short-hand for an edge node index pair.",null,null],[8,"Walker","","A trait providing a variety of useful methods for traversing some graph type G.",null,null],[16,"Index","","The unsigned integer type used for node and edge indices.",1,null],[10,"next","","Fetch the `EdgeIndex` and `NodeIndex` to the next neighbour in our walk through the given Graph.",1,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"generics":["indexpair"],"name":"option"}}],[11,"next_edge","","The next edge in our walk for the given Graph.",1,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"generics":["edgeindex"],"name":"option"}}],[11,"next_node","","The next node in our walk for the given Graph.",1,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"generics":["nodeindex"],"name":"option"}}],[11,"count","","Counts all the steps in the entire walk of the given graph.",1,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"usize"}}],[11,"last","","Walks the whole walk until reaching and returning the last edge node pair.",1,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"generics":["indexpair"],"name":"option"}}],[11,"last_edge","","Walks the whole walk until reaching and returning the last edge.",1,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"generics":["edgeindex"],"name":"option"}}],[11,"last_node","","Walks the whole walk until reaching and returning the last node.",1,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"generics":["nodeindex"],"name":"option"}}],[11,"nth","","Walks \"n\" number of steps and produces the resulting edge node pair.",1,{"inputs":[{"name":"self"},{"name":"g"},{"name":"usize"}],"output":{"generics":["indexpair"],"name":"option"}}],[11,"nth_edge","","Walks \"n\" number of steps and produces the resulting edge.",1,{"inputs":[{"name":"self"},{"name":"g"},{"name":"usize"}],"output":{"generics":["edgeindex"],"name":"option"}}],[11,"nth_node","","Walks \"n\" number of steps and produces the resulting node.",1,{"inputs":[{"name":"self"},{"name":"g"},{"name":"usize"}],"output":{"generics":["nodeindex"],"name":"option"}}],[11,"chain","","Produces a walker that will walk the entirey of `self` before walking the entirey of other.",1,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"chain"}}],[11,"filter","","Creates a walker that applies the predicate to each element returned by this walker. The only elements that will be yielded are those that make the predicate evaluate to true.",1,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"peekable","","Creates a walker that has a `.peek(&graph)` method that returns an optional next neighbor.",1,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates a walker that invokes the predicate on elements until it returns false. Once the predicate returns false, that element and all further elements are yielded.",1,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates a walker that yields elements so long as the predicate returns true. After the predicate returns false for the first time, no further elements will be yielded.",1,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates a walker that skips the first n steps of this walk, and then yields all further steps.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates a walker that yields the first n steps of this walk.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"all","","Tests whether the predicate holds true for all steps in the walk.",1,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"name":"bool"}}],[11,"any","","Tests whether any step in the walk satisfies the given predicate.",1,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"name":"bool"}}],[11,"find","","Returns the first edge node index pair satisfying the specified predicate.",1,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"generics":["indexpair"],"name":"option"}}],[11,"find_edge","","Returns the edge index satisfying the specified predicate.",1,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"generics":["edgeindex"],"name":"option"}}],[11,"find_node","","Returns the node index satisfying the specified predicate.",1,{"inputs":[{"name":"self"},{"name":"g"},{"name":"p"}],"output":{"generics":["nodeindex"],"name":"option"}}],[11,"cycle","","Repeats the walker endlessly.",1,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"fold","","Performs a fold operation over the entire walker, returning the eventual state at the end of the walk.",1,{"inputs":[{"name":"self"},{"name":"b"},{"name":"g"},{"name":"f"}],"output":{"name":"b"}}],[11,"inspect","","Creates a walker that calls a function with a reference to each index pair before yielding them. This is often useful for debugging a walker pipeline.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"iter","","Converts the walker into an iterator yielding index pairs.",1,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"iter"}}],[11,"iter_weights","","Converts the walker into an iterator yielding `(&e, &n)`, where `e` is the edge weight for the next `EdgeIndex` and `n` is the node weight for the next `NodeIndex`.",1,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"iterweights"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"recursive"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new Recursive Walker starting from the node at the given index.",2,{"inputs":[{"name":"nodeindex"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"generics":["indexpair"],"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"chain"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"generics":["indexpair"],"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"generics":["indexpair"],"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"peek","","The edge node index pair of the neighbor at the next step in our walk of the given graph.",5,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"generics":["indexpair"],"name":"option"}}],[11,"peek_edge","","The edge index of the neighbor at the next step in our walk of the given graph.",5,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"generics":["edgeindex"],"name":"option"}}],[11,"peek_node","","The node index of the neighbor at the next step in our walk of the given graph.",5,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"generics":["nodeindex"],"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"generics":["indexpair"],"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"skipwhile"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",6,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"generics":["indexpair"],"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"takewhile"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",7,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"generics":["indexpair"],"name":"option"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"skip"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",8,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"generics":["indexpair"],"name":"option"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"take"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",9,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"generics":["indexpair"],"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",10,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"generics":["indexpair"],"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"inspect"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",11,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"generics":["indexpair"],"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"edges","","Convert to an iterator that only yields the edge indices.",12,{"inputs":[{"name":"self"}],"output":{"name":"iteredges"}}],[11,"nodes","","Convert to an iterator that only yields the node indices.",12,{"inputs":[{"name":"self"}],"output":{"name":"iternodes"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["indexpair"],"name":"option"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"iteredges"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["edgeindex"],"name":"option"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"iternodes"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["nodeindex"],"name":"option"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"iterweights"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"edges","","Convert to an iterator yielding only the edge weights.",15,{"inputs":[{"name":"self"}],"output":{"name":"iteredgeweights"}}],[11,"nodes","","Convert to an iterator yielding only the node weights.",15,{"inputs":[{"name":"self"}],"output":{"name":"iternodeweights"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"iteredgeweights"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"iternodeweights"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"PetGraph","daggy","The Petgraph to be used internally within the Dag for storing/managing nodes and edges.",null,null],[6,"RawNodes","","Read only access into a Dag's internal node array.",null,null],[6,"RawEdges","","Read only access into a Dag's internal edge array.",null,null],[6,"RecursiveWalk","","An alias to simplify the Recursive Walker type returned by Dag.",null,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"dag"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wouldcycle"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new, empty `Dag`.",18,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Create a new `Dag` with estimated capacity for its node and edge Vecs.",18,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Removes all nodes and edges from the Dag.",18,{"inputs":[{"name":"self"}],"output":null}],[11,"node_count","","The total number of nodes in the Dag.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"edge_count","","The total number of edgees in the Dag.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"graph","","Borrow the `Dag`'s underlying `PetGraph<N, Ix>`. All existing indices may be used to index into this `PetGraph` the same way they may be used to index into the `Dag`.",18,{"inputs":[{"name":"self"}],"output":{"name":"petgraph"}}],[11,"into_graph","","Take ownership of the `Dag` and return the internal `PetGraph`. All existing indices may be used to index into this `PetGraph` the same way they may be used to index into the `Dag`.",18,{"inputs":[{"name":"self"}],"output":{"name":"petgraph"}}],[11,"add_node","","Add a new node to the `Dag` with the given weight.",18,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"nodeindex"}}],[11,"add_edge","","Add a new directed edge to the `Dag` with the given weight.",18,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"},{"name":"e"}],"output":{"generics":["edgeindex","wouldcycle"],"name":"result"}}],[11,"add_edges","","Adds the given directed edges to the `Dag`, each with their own given weight.",18,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["edgeindices","wouldcycle"],"name":"result"}}],[11,"update_edge","","Update the edge from nodes `a` -> `b` with the given weight.",18,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"},{"name":"e"}],"output":{"generics":["edgeindex","wouldcycle"],"name":"result"}}],[11,"find_edge","","Find and return the index to the edge that describes `a` -> `b` if there is one.",18,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"generics":["edgeindex"],"name":"option"}}],[11,"edge_endpoints","","Access the parent and child nodes for the given `EdgeIndex`.",18,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"clear_edges","","Remove all edges.",18,{"inputs":[{"name":"self"}],"output":null}],[11,"add_parent","","Add a new edge and parent node to the node at the given `NodeIndex`. Returns both the edge's `EdgeIndex` and the node's `NodeIndex`.",18,null],[11,"add_child","","Add a new edge and child node to the node at the given `NodeIndex`. Returns both the edge's `EdgeIndex` and the node's `NodeIndex`.",18,null],[11,"node_weight","","Borrow the weight from the node at the given index.",18,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"node_weight_mut","","Mutably borrow the weight from the node at the given index.",18,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"raw_nodes","","Read from the internal node array.",18,{"inputs":[{"name":"self"}],"output":{"name":"rawnodes"}}],[11,"node_weights_mut","","An iterator yielding mutable access to all node weights.",18,{"inputs":[{"name":"self"}],"output":{"name":"nodeweightsmut"}}],[11,"edge_weight","","Borrow the weight from the edge at the given index.",18,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"edge_weight_mut","","Mutably borrow the weight from the edge at the given index.",18,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"raw_edges","","Read from the internal edge array.",18,{"inputs":[{"name":"self"}],"output":{"name":"rawedges"}}],[11,"edge_weights_mut","","An iterator yielding mutable access to all edge weights.",18,{"inputs":[{"name":"self"}],"output":{"name":"edgeweightsmut"}}],[11,"index_twice_mut","","Index the `Dag` by two indices.",18,null],[11,"remove_node","","Remove the node at the given index from the `Dag` and return it if it exists.",18,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"remove_edge","","Remove an edge and return its weight, or `None` if it didn't exist.",18,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"parents","","A Walker type that may be used to step through the parents of the given child node.",18,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"parents"}}],[11,"children","","A \"walker\" object that may be used to step through the children of the given parent node.",18,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"children"}}],[11,"recursive_walk","","A Walker type that recursively walks the Dag using the given `recursive_fn`.",18,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"f"}],"output":{"name":"recursivewalk"}}],[11,"index","","",18,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"index_mut","","",18,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"index","","",18,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"e"}}],[11,"index_mut","","",18,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"e"}}],[11,"next","","",19,{"inputs":[{"name":"self"},{"name":"dag"}],"output":{"name":"option"}}],[11,"next","","",20,{"inputs":[{"name":"self"},{"name":"dag"}],"output":{"name":"option"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["edgeindex"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","",22,{"inputs":[{"name":"usize"}],"output":{"name":"edgeindex"}}],[11,"index","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","An invalid `EdgeIndex` used to denote absence of an edge, for example to end an adjacency list.",22,{"inputs":[],"output":{"name":"edgeindex"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",22,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"le","","",22,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"gt","","",22,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"ge","","",22,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"le","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"gt","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"ge","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"nodeindex"}}],[11,"default","","",22,{"inputs":[],"output":{"name":"edgeindex"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"from","","",23,{"inputs":[{"name":"ix"}],"output":{"name":"nodeindex"}}],[11,"cmp","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"ordering"}}],[11,"cmp","","",22,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"ordering"}}],[11,"hash","","",22,null],[11,"hash","","",23,null],[11,"index","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_node_index","","",23,{"inputs":[],"output":{"name":"bool"}}],[11,"index","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_node_index","","",22,{"inputs":[],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"edgeindex"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"new","","",23,{"inputs":[{"name":"usize"}],"output":{"name":"nodeindex"}}],[11,"index","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","",23,{"inputs":[],"output":{"name":"nodeindex"}}]],"paths":[[3,"WouldCycle"],[8,"Walker"],[3,"Recursive"],[3,"Chain"],[3,"Filter"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Cycle"],[3,"Inspect"],[3,"Iter"],[3,"IterEdges"],[3,"IterNodes"],[3,"IterWeights"],[3,"IterEdgeWeights"],[3,"IterNodeWeights"],[3,"Dag"],[3,"Children"],[3,"Parents"],[3,"EdgeIndices"],[3,"EdgeIndex"],[3,"NodeIndex"],[3,"EdgeWeightsMut"],[3,"NodeWeightsMut"]]};
searchIndex["fixedbitset"] = {"doc":"`FixedBitSet` is a simple fixed size set of bits.","items":[[3,"FixedBitSet","fixedbitset","`FixedBitSet` is a simple fixed size set of bits that each can be enabled (1 / true) or disabled (0 / false).",null,null],[3,"Ones","","",null,null],[8,"IndexRange","","IndexRange is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"fixedbitset"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"fixedbitset"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"fixedbitset"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"fixedbitset"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"fixedbitset"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"fixedbitset"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"fixedbitset"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"fixedbitset"}],"output":{"name":"ordering"}}],[11,"hash","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"fixedbitset"}}],[11,"with_capacity","","Create a new FixedBitSet with a specific number of bits, all initially clear.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"grow","","Grow capacity to bits, all new bits initialized to zero",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"len","","Return the length of the `FixedBitSet` in bits.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contains","","Return true if the bit is enabled in the FixedBitSet, false otherwise.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"clear","","Clear all bits.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"insert","","Enable `bit`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"put","","Enable `bit`, and return its previous value.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"set","","Panics if bit is out of bounds.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"copy_bit","","Copies boolean value from specified bit to the specified bit.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"count_ones","","Count the number of set bits in the given bit range.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"usize"}}],[11,"set_range","","Sets every bit in the given range to the given state (`enabled`)",1,{"inputs":[{"name":"self"},{"name":"t"},{"name":"bool"}],"output":null}],[11,"insert_range","","Enables every bit in the given range.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"as_slice","","View the bitset as a slice of `u32` blocks",1,null],[11,"as_mut_slice","","View the bitset as a mutable slice of `u32` blocks. Writing past the bitlength in the last will cause `contains` to return potentially incorrect results for bits past the bitlength.",1,null],[11,"ones","","Iterates over all enabled bits.",1,{"inputs":[{"name":"self"}],"output":{"name":"ones"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start","","Start index (inclusive)",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"IndexRange"],[3,"FixedBitSet"],[3,"Ones"]]};
searchIndex["float"] = {"doc":"Traits for generic floats in game programming","items":[[8,"Float","float","Convenience trait for floats.",null,null],[8,"Min","","Minimum value.",null,null],[10,"min","","Returns the minimum value of self or other.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"Max","","Maximum value.",null,null],[10,"max","","Returns the maximum value of self or other.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"Signum","","The sign of the number.",null,null],[10,"signum","","Returns number representing the sign of self",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Powf","","Floating number power.",null,null],[10,"powf","","Returns floating power of the number.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"Radians","","Useful constants for radians.",null,null],[10,"_90","","Returns radians corresponding to 90 degrees.",4,{"inputs":[],"output":{"name":"self"}}],[10,"_180","","Returns radians corresponding to 180 degrees.",4,{"inputs":[],"output":{"name":"self"}}],[10,"_360","","Returns radians corresponding to 360 degrees.",4,{"inputs":[],"output":{"name":"self"}}],[10,"deg_to_rad","","Convert a value to radians from degrees. Equivalent to `value * (π / 180)`.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"rad_to_deg","","Convert a value to degrees from radians. Equivalent to `value * (180 / π)`.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"One","","Number 1.",null,null],[10,"one","","Returns 1.",5,{"inputs":[],"output":{"name":"self"}}],[8,"Zero","","Number 0.",null,null],[10,"zero","","Returns 0.",6,{"inputs":[],"output":{"name":"self"}}],[8,"Sqrt","","Square root.",null,null],[10,"sqrt","","Returns square root.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Trig","","Basic trigonometry functions",null,null],[10,"sin","","Returns sine of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Returns cosine of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Returns tangent of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Returns inverse sine of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Returns inverse cosine of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Returns inverse tangent of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Returns the four quadrant arctangent of self (y) and other (x).",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Returns hyperbolic sine of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Returns hyperbolic cosine of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Returns hyperbolic tangent of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Returns inverse hyperbolic sine of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Returns inverse hyperbolic cosine of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Returns inverse hyperbolic tangent of self.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Cast","","Casts into another type.",null,null],[10,"cast","","Casts into other type.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"FromPrimitive","","Trait for converting from different numeric types",null,null],[10,"from_f64","","from a f64",10,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[10,"from_f32","","from a f32",10,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[10,"from_isize","","from a isze",10,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[10,"from_u32","","from a u32",10,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"from_i32","","from a i32",10,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}]],"paths":[[8,"Min"],[8,"Max"],[8,"Signum"],[8,"Powf"],[8,"Radians"],[8,"One"],[8,"Zero"],[8,"Sqrt"],[8,"Trig"],[8,"Cast"],[8,"FromPrimitive"]]};
searchIndex["fnv"] = {"doc":"An implementation of the [Fowler–Noll–Vo hash function][chongo].","items":[[3,"FnvHasher","fnv","An implementation of the Fowler–Noll–Vo hash function.",null,null],[6,"FnvBuildHasher","","A builder for default FNV hashers.",null,null],[6,"FnvHashMap","","A `HashMap` using a default FNV hasher.",null,null],[6,"FnvHashSet","","A `HashSet` using a default FNV hasher.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"fnvhasher"}}],[11,"with_key","","Create an FNV hasher starting with a state corresponding to the hash `key`.",0,{"inputs":[{"name":"u64"}],"output":{"name":"fnvhasher"}}],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",0,null]],"paths":[[3,"FnvHasher"]]};
searchIndex["input"] = {"doc":"A flexible structure for user interactions to be used in window frameworks and widgets libraries.","items":[[3,"AfterRenderArgs","input","After render arguments.",null,null],[3,"CloseArgs","","Close arguments.",null,null],[3,"IdleArgs","","Idle arguments, such as expected idle time in seconds.",null,null],[12,"dt","","Expected idle time in seconds.",0,null],[3,"ButtonArgs","","Button arguments",null,null],[12,"state","","New state of the button.",1,null],[12,"button","","The button that changed state.",1,null],[12,"scancode","","An optional scancode that tells the physical layout of a keyboard key. For other devices than keyboard, this is set to `None`.",1,null],[3,"RenderArgs","","Render arguments",null,null],[12,"ext_dt","","Extrapolated time in seconds, used to do smooth animation.",2,null],[12,"width","","The width of rendered area in points.",2,null],[12,"height","","The height of rendered area in points.",2,null],[12,"draw_width","","The width of rendered area in pixels.",2,null],[12,"draw_height","","The height of rendered area in pixels.",2,null],[3,"TouchArgs","","Touch arguments",null,null],[12,"device","","A unique identifier for touch device.",3,null],[12,"id","","A unique identifier for touch event.",3,null],[12,"x","","The x coordinate of the touch position, normalized 0..1.",3,null],[12,"y","","The y coordinate of the touch position, normalized 0..1.",3,null],[12,"z","","The z coordinate of the touch position, normalized 0..1.",3,null],[12,"px","","The x coordinate of the touch pressure direction.",3,null],[12,"py","","The y coordinate of the touch pressure direction.",3,null],[12,"pz","","The z coordinate of the touch pressure direction.",3,null],[12,"is_3d","","Whether the touch is in 3D.",3,null],[12,"touch","","The touch state.",3,null],[3,"UpdateArgs","","Update arguments, such as delta time in seconds",null,null],[12,"dt","","Delta time in seconds.",4,null],[3,"EventId","","Used to identify events arguments provided by traits.",null,null],[12,"0","","",5,null],[4,"ButtonState","","Stores button state.",null,null],[13,"Press","","Button was pressed.",6,null],[13,"Release","","Button was released.",6,null],[4,"Touch","","Stores the touch state.",null,null],[13,"Start","","The start of touch, for example a finger pressed down on a touch screen.",7,null],[13,"Move","","The move of touch, for example a finger moving while touching a touch screen.",7,null],[13,"End","","The end of touch, for example taking a finger away from a touch screen.",7,null],[13,"Cancel","","The cancel of touch, for example the window loses focus.",7,null],[4,"Button","","Models different kinds of buttons.",null,null],[13,"Keyboard","","A keyboard button.",8,null],[13,"Mouse","","A mouse button.",8,null],[13,"Controller","","A controller button.",8,null],[4,"Motion","","Models different kinds of motion.",null,null],[13,"MouseCursor","","x and y in window coordinates.",9,null],[13,"MouseRelative","","x and y in relative coordinates.",9,null],[13,"MouseScroll","","x and y in scroll ticks.",9,null],[13,"ControllerAxis","","controller axis move event.",9,null],[13,"Touch","","touch event.",9,null],[4,"Input","","Models input events.",null,null],[13,"Button","","Changed button state.",10,null],[13,"Move","","Moved mouse cursor.",10,null],[13,"Text","","Text (usually from keyboard).",10,null],[13,"Resize","","Window got resized.",10,null],[13,"Focus","","Window gained or lost focus.",10,null],[13,"Cursor","","Window gained or lost cursor.",10,null],[13,"Close","","Window closed.",10,null],[4,"Loop","","Models loop events.",null,null],[13,"Render","","Render graphics.",11,null],[13,"AfterRender","","After rendering and swapping buffers.",11,null],[13,"Update","","Update the state of the application.",11,null],[13,"Idle","","Do background tasks that can be done incrementally.",11,null],[4,"Event","","Models all events.",null,null],[13,"Input","","Input events.",12,null],[13,"Loop","","Events that commonly used by event loops.",12,null],[13,"Custom","","Custom event.",12,null],[0,"controller","","Back-end agnostic controller events.",null,null],[3,"ControllerButton","input::controller","Components of a controller button event. Not guaranteed consistent across backends.",null,null],[12,"id","","Which controller was the button on.",13,null],[12,"button","","Which button was pressed.",13,null],[3,"ControllerAxisArgs","","Components of a controller axis move event. Not guaranteed consistent across backends.",null,null],[12,"id","","Which controller moved.",14,null],[12,"axis","","The axis that moved.",14,null],[12,"position","","Position of the controller. Usually [-1.0, 1.0], though backends may use a different range for various devices.",14,null],[8,"ControllerAxisEvent","","The position of a controller axis changed.",null,null],[10,"from_controller_axis_args","","Creates a controller axis event.",15,{"inputs":[{"name":"controlleraxisargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"controller_axis","","Calls closure if this is a controller axis event.",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"controller_axis_args","","Returns controller axis arguments.",15,{"inputs":[{"name":"self"}],"output":{"generics":["controlleraxisargs"],"name":"option"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"controllerbutton"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"controllerbutton"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"controllerbutton"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",13,null],[11,"new","","Create a new ControllerButton object. Intended for use by backends when emitting events.",13,{"inputs":[{"name":"i32"},{"name":"u8"}],"output":{"name":"self"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"controlleraxisargs"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"controlleraxisargs"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"controlleraxisargs"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new ControllerAxisArgs object. Intended for use by backends when emitting events.",14,{"inputs":[{"name":"i32"},{"name":"u8"},{"name":"f64"}],"output":{"name":"self"}}],[11,"from_controller_axis_args","input","",12,{"inputs":[{"name":"controlleraxisargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"controller_axis","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[0,"keyboard","","Back-end agnostic keyboard keys.",null,null],[3,"ModifierKey","input::keyboard","",null,null],[4,"Key","","Represent a keyboard key. Keycodes follows SDL http://wiki.libsdl.org/SDLKeycodeLookup",null,null],[13,"Unknown","","",16,null],[13,"Backspace","","",16,null],[13,"Tab","","",16,null],[13,"Return","","",16,null],[13,"Escape","","",16,null],[13,"Space","","",16,null],[13,"Exclaim","","",16,null],[13,"Quotedbl","","",16,null],[13,"Hash","","",16,null],[13,"Dollar","","",16,null],[13,"Percent","","",16,null],[13,"Ampersand","","",16,null],[13,"Quote","","",16,null],[13,"LeftParen","","",16,null],[13,"RightParen","","",16,null],[13,"Asterisk","","",16,null],[13,"Plus","","",16,null],[13,"Comma","","",16,null],[13,"Minus","","",16,null],[13,"Period","","",16,null],[13,"Slash","","",16,null],[13,"D0","","",16,null],[13,"D1","","",16,null],[13,"D2","","",16,null],[13,"D3","","",16,null],[13,"D4","","",16,null],[13,"D5","","",16,null],[13,"D6","","",16,null],[13,"D7","","",16,null],[13,"D8","","",16,null],[13,"D9","","",16,null],[13,"Colon","","",16,null],[13,"Semicolon","","",16,null],[13,"Less","","",16,null],[13,"Equals","","",16,null],[13,"Greater","","",16,null],[13,"Question","","",16,null],[13,"At","","",16,null],[13,"LeftBracket","","",16,null],[13,"Backslash","","",16,null],[13,"RightBracket","","",16,null],[13,"Caret","","",16,null],[13,"Underscore","","",16,null],[13,"Backquote","","",16,null],[13,"A","","",16,null],[13,"B","","",16,null],[13,"C","","",16,null],[13,"D","","",16,null],[13,"E","","",16,null],[13,"F","","",16,null],[13,"G","","",16,null],[13,"H","","",16,null],[13,"I","","",16,null],[13,"J","","",16,null],[13,"K","","",16,null],[13,"L","","",16,null],[13,"M","","",16,null],[13,"N","","",16,null],[13,"O","","",16,null],[13,"P","","",16,null],[13,"Q","","",16,null],[13,"R","","",16,null],[13,"S","","",16,null],[13,"T","","",16,null],[13,"U","","",16,null],[13,"V","","",16,null],[13,"W","","",16,null],[13,"X","","",16,null],[13,"Y","","",16,null],[13,"Z","","",16,null],[13,"Delete","","",16,null],[13,"CapsLock","","",16,null],[13,"F1","","",16,null],[13,"F2","","",16,null],[13,"F3","","",16,null],[13,"F4","","",16,null],[13,"F5","","",16,null],[13,"F6","","",16,null],[13,"F7","","",16,null],[13,"F8","","",16,null],[13,"F9","","",16,null],[13,"F10","","",16,null],[13,"F11","","",16,null],[13,"F12","","",16,null],[13,"PrintScreen","","",16,null],[13,"ScrollLock","","",16,null],[13,"Pause","","",16,null],[13,"Insert","","",16,null],[13,"Home","","",16,null],[13,"PageUp","","",16,null],[13,"End","","",16,null],[13,"PageDown","","",16,null],[13,"Right","","",16,null],[13,"Left","","",16,null],[13,"Down","","",16,null],[13,"Up","","",16,null],[13,"NumLockClear","","",16,null],[13,"NumPadDivide","","",16,null],[13,"NumPadMultiply","","",16,null],[13,"NumPadMinus","","",16,null],[13,"NumPadPlus","","",16,null],[13,"NumPadEnter","","",16,null],[13,"NumPad1","","",16,null],[13,"NumPad2","","",16,null],[13,"NumPad3","","",16,null],[13,"NumPad4","","",16,null],[13,"NumPad5","","",16,null],[13,"NumPad6","","",16,null],[13,"NumPad7","","",16,null],[13,"NumPad8","","",16,null],[13,"NumPad9","","",16,null],[13,"NumPad0","","",16,null],[13,"NumPadPeriod","","",16,null],[13,"Application","","",16,null],[13,"Power","","",16,null],[13,"NumPadEquals","","",16,null],[13,"F13","","",16,null],[13,"F14","","",16,null],[13,"F15","","",16,null],[13,"F16","","",16,null],[13,"F17","","",16,null],[13,"F18","","",16,null],[13,"F19","","",16,null],[13,"F20","","",16,null],[13,"F21","","",16,null],[13,"F22","","",16,null],[13,"F23","","",16,null],[13,"F24","","",16,null],[13,"Execute","","",16,null],[13,"Help","","",16,null],[13,"Menu","","",16,null],[13,"Select","","",16,null],[13,"Stop","","",16,null],[13,"Again","","",16,null],[13,"Undo","","",16,null],[13,"Cut","","",16,null],[13,"Copy","","",16,null],[13,"Paste","","",16,null],[13,"Find","","",16,null],[13,"Mute","","",16,null],[13,"VolumeUp","","",16,null],[13,"VolumeDown","","",16,null],[13,"NumPadComma","","",16,null],[13,"NumPadEqualsAS400","","",16,null],[13,"AltErase","","",16,null],[13,"Sysreq","","",16,null],[13,"Cancel","","",16,null],[13,"Clear","","",16,null],[13,"Prior","","",16,null],[13,"Return2","","",16,null],[13,"Separator","","",16,null],[13,"Out","","",16,null],[13,"Oper","","",16,null],[13,"ClearAgain","","",16,null],[13,"CrSel","","",16,null],[13,"ExSel","","",16,null],[13,"NumPad00","","",16,null],[13,"NumPad000","","",16,null],[13,"ThousandsSeparator","","",16,null],[13,"DecimalSeparator","","",16,null],[13,"CurrencyUnit","","",16,null],[13,"CurrencySubUnit","","",16,null],[13,"NumPadLeftParen","","",16,null],[13,"NumPadRightParen","","",16,null],[13,"NumPadLeftBrace","","",16,null],[13,"NumPadRightBrace","","",16,null],[13,"NumPadTab","","",16,null],[13,"NumPadBackspace","","",16,null],[13,"NumPadA","","",16,null],[13,"NumPadB","","",16,null],[13,"NumPadC","","",16,null],[13,"NumPadD","","",16,null],[13,"NumPadE","","",16,null],[13,"NumPadF","","",16,null],[13,"NumPadXor","","",16,null],[13,"NumPadPower","","",16,null],[13,"NumPadPercent","","",16,null],[13,"NumPadLess","","",16,null],[13,"NumPadGreater","","",16,null],[13,"NumPadAmpersand","","",16,null],[13,"NumPadDblAmpersand","","",16,null],[13,"NumPadVerticalBar","","",16,null],[13,"NumPadDblVerticalBar","","",16,null],[13,"NumPadColon","","",16,null],[13,"NumPadHash","","",16,null],[13,"NumPadSpace","","",16,null],[13,"NumPadAt","","",16,null],[13,"NumPadExclam","","",16,null],[13,"NumPadMemStore","","",16,null],[13,"NumPadMemRecall","","",16,null],[13,"NumPadMemClear","","",16,null],[13,"NumPadMemAdd","","",16,null],[13,"NumPadMemSubtract","","",16,null],[13,"NumPadMemMultiply","","",16,null],[13,"NumPadMemDivide","","",16,null],[13,"NumPadPlusMinus","","",16,null],[13,"NumPadClear","","",16,null],[13,"NumPadClearEntry","","",16,null],[13,"NumPadBinary","","",16,null],[13,"NumPadOctal","","",16,null],[13,"NumPadDecimal","","",16,null],[13,"NumPadHexadecimal","","",16,null],[13,"LCtrl","","",16,null],[13,"LShift","","",16,null],[13,"LAlt","","",16,null],[13,"LGui","","",16,null],[13,"RCtrl","","",16,null],[13,"RShift","","",16,null],[13,"RAlt","","",16,null],[13,"RGui","","",16,null],[13,"Mode","","",16,null],[13,"AudioNext","","",16,null],[13,"AudioPrev","","",16,null],[13,"AudioStop","","",16,null],[13,"AudioPlay","","",16,null],[13,"AudioMute","","",16,null],[13,"MediaSelect","","",16,null],[13,"Www","","",16,null],[13,"Mail","","",16,null],[13,"Calculator","","",16,null],[13,"Computer","","",16,null],[13,"AcSearch","","",16,null],[13,"AcHome","","",16,null],[13,"AcBack","","",16,null],[13,"AcForward","","",16,null],[13,"AcStop","","",16,null],[13,"AcRefresh","","",16,null],[13,"AcBookmarks","","",16,null],[13,"BrightnessDown","","",16,null],[13,"BrightnessUp","","",16,null],[13,"DisplaySwitch","","",16,null],[13,"KbdIllumToggle","","",16,null],[13,"KbdIllumDown","","",16,null],[13,"KbdIllumUp","","",16,null],[13,"Eject","","",16,null],[13,"Sleep","","",16,null],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"modifierkey"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"ordering"}}],[11,"hash","","",17,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NO_MODIFIER","","No modifier.",17,null],[18,"CTRL","","Ctrl.",17,null],[18,"SHIFT","","Shift.",17,null],[18,"ALT","","Alt.",17,null],[18,"GUI","","Gui.",17,null],[18,"CTRL_SHIFT","","Ctrl + Shift.",17,null],[18,"CTRL_ALT","","Ctrl + Alt.",17,null],[18,"CTRL_GUI","","Ctrl + Gui.",17,null],[18,"CTRL_SHIFT_ALT","","Ctrl + Shift + Alt.",17,null],[18,"CTRL_SHIFT_GUI","","Ctrl + Shift + Gui.",17,null],[18,"CTRL_SHIFT_ALT_GUI","","Ctrl + Shift + Alt + Gui.",17,null],[18,"SHIFT_ALT","","Shift + Alt.",17,null],[18,"SHIFT_GUI","","Shift + Gui.",17,null],[18,"SHIFT_ALT_GUI","","Shift + Alt + Gui.",17,null],[18,"ALT_GUI","","Alt + Gui.",17,null],[11,"empty","","Returns an empty set of flags.",17,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"all","","Returns the set containing all flags.",17,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"bits","","Returns the raw value of the flags currently stored.",17,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",17,{"inputs":[{"name":"u8"}],"output":{"generics":["modifierkey"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",17,{"inputs":[{"name":"u8"}],"output":{"name":"modifierkey"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",17,{"inputs":[{"name":"self"},{"name":"modifierkey"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"bitor_assign","","Adds the set of flags.",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"bitxor_assign","","Toggles the set of flags.",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"sub_assign","","Disables all flags enabled in the set.",17,{"inputs":[{"name":"self"},{"name":"modifierkey"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",17,{"inputs":[{"name":"self"}],"output":{"name":"modifierkey"}}],[11,"extend","","",17,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",17,{"inputs":[{"name":"t"}],"output":{"name":"modifierkey"}}],[11,"event","","Change modifier key state depending on input.",17,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[11,"default","","",17,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"key"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",16,null],[11,"from","","",16,{"inputs":[{"name":"u32"}],"output":{"name":"key"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",16,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"ordering"}}],[11,"code","","Returns an id of the key",16,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[0,"mouse","input","Back-end agnostic mouse buttons.",null,null],[4,"MouseButton","input::mouse","Represent a mouse button.",null,null],[13,"Unknown","","Unknown mouse button.",18,null],[13,"Left","","Left mouse button.",18,null],[13,"Right","","Right mouse button.",18,null],[13,"Middle","","Middle mouse button.",18,null],[13,"X1","","Extra mouse button number 1.",18,null],[13,"X2","","Extra mouse button number 2.",18,null],[13,"Button6","","Mouse button number 6.",18,null],[13,"Button7","","Mouse button number 7.",18,null],[13,"Button8","","Mouse button number 8.",18,null],[8,"MouseCursorEvent","","The position of the mouse cursor",null,null],[10,"from_xy","","Creates a mouse cursor event.",19,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"mouse_cursor","","Calls closure if this is a mouse cursor event.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"mouse_cursor_args","","Returns mouse cursor arguments.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"MouseRelativeEvent","","The relative movement of mouse cursor",null,null],[10,"from_xy","","Creates a mouse relative event.",20,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"mouse_relative","","Calls closure if this is a mouse relative event.",20,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"mouse_relative_args","","Returns mouse relative arguments.",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"MouseScrollEvent","","The scroll of the mouse wheel",null,null],[10,"from_xy","","Creates a mouse scroll event.",21,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"mouse_scroll","","Calls a closure if this is a mouse scroll event.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"mouse_scroll_args","","Returns mouse scroll arguments.",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"mousebutton"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",18,{"inputs":[{"name":"u32"}],"output":{"name":"mousebutton"}}],[11,"from_xy","input","",12,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[11,"mouse_cursor","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_xy","","",12,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[11,"mouse_relative","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_xy","","",12,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[11,"mouse_scroll","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[0,"generic_event","","Trait for generic events",null,null],[8,"GenericEvent","input::generic_event","Implemented by all events",null,null],[10,"event_id","","The id of this event.",22,{"inputs":[{"name":"self"}],"output":{"name":"eventid"}}],[10,"with_args","","Calls closure with arguments",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"event_id","input","",12,{"inputs":[{"name":"self"}],"output":{"name":"eventid"}}],[11,"with_args","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"afterrenderargs"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"afterrenderargs"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_after_render_args","","",12,{"inputs":[{"name":"afterrenderargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"after_render","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"buttonstate"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"buttonstate"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"buttonargs"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"buttonargs"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"buttonargs"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_button_args","","",12,{"inputs":[{"name":"buttonargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"button","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"closeargs"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"closeargs"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_close_args","","",12,{"inputs":[{"name":"closeargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"close","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_cursor","","",12,{"inputs":[{"name":"bool"},{"name":"self"}],"output":{"name":"option"}}],[11,"cursor","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_focused","","",12,{"inputs":[{"name":"bool"},{"name":"self"}],"output":{"name":"option"}}],[11,"focus","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"idleargs"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"idleargs"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"idleargs"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_idle_args","","",12,{"inputs":[{"name":"idleargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"idle","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"renderargs"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"renderargs"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"renderargs"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"viewport","","Returns viewport information filling entire render area.",2,{"inputs":[{"name":"self"}],"output":{"name":"viewport"}}],[11,"from_render_args","","",12,{"inputs":[{"name":"renderargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"render","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_width_height","","",12,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"self"}],"output":{"name":"option"}}],[11,"resize","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"from_text","","",12,{"inputs":[{"name":"str"},{"name":"self"}],"output":{"name":"option"}}],[11,"text","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"touch"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"touch"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"touchargs"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"touchargs"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"touchargs"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates arguments for 2D touch.",3,null],[11,"new_3d","","Creates arguments for 3D touch.",3,null],[11,"position","","The position of the touch in 2D.",3,null],[11,"position_3d","","The position of the touch in 3D.",3,null],[11,"pressure","","The pressure magnitude, normalized 0..1.",3,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"pressure_3d","","The pressure vector in 3D.",3,null],[11,"from_touch_args","","",12,{"inputs":[{"name":"touchargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"touch","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"updateargs"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"updateargs"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"updateargs"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_update_args","","",12,{"inputs":[{"name":"updateargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"update","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[8,"AfterRenderEvent","","After rendering and buffers are swapped.",null,null],[10,"from_after_render_args","","Creates an after render event.",25,{"inputs":[{"name":"afterrenderargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"after_render","","Calls closure if this is an after render event.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"after_render_args","","Returns after render arguments.",25,{"inputs":[{"name":"self"}],"output":{"generics":["afterrenderargs"],"name":"option"}}],[8,"CloseEvent","","Window is closing.",null,null],[10,"from_close_args","","Creates a close event from arguments.",26,{"inputs":[{"name":"closeargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"close","","Calls closure if this is a close event.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"close_args","","Returns close arguments.",26,{"inputs":[{"name":"self"}],"output":{"generics":["closeargs"],"name":"option"}}],[8,"CursorEvent","","When window gets or loses cursor",null,null],[10,"from_cursor","","Creates a cursor event.",27,{"inputs":[{"name":"bool"},{"name":"self"}],"output":{"name":"option"}}],[10,"cursor","","Calls closure if this is a cursor event.",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"cursor_args","","Returns cursor arguments.",27,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[8,"FocusEvent","","When window gets or loses focus",null,null],[10,"from_focused","","Creates a focus event.",28,{"inputs":[{"name":"bool"},{"name":"self"}],"output":{"name":"option"}}],[10,"focus","","Calls closure if this is a focus event.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"focus_args","","Returns focus arguments.",28,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[8,"IdleEvent","","When background tasks should be performed",null,null],[10,"from_idle_args","","Creates an idle event.",29,{"inputs":[{"name":"idleargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"from_dt","","Creates an update event with delta time.",29,{"inputs":[{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"idle","","Calls closure if this is an idle event.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"idle_args","","Returns idle arguments.",29,{"inputs":[{"name":"self"}],"output":{"generics":["idleargs"],"name":"option"}}],[8,"ButtonEvent","","Changed button state.",null,null],[10,"from_button_args","","Creates a button event.",30,{"inputs":[{"name":"buttonargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"button","","Calls closure if this is a button event.",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"button_args","","Returns button arguments.",30,{"inputs":[{"name":"self"}],"output":{"generics":["buttonargs"],"name":"option"}}],[8,"PressEvent","","The press of a button",null,null],[10,"from_button","","Creates a press event.",31,{"inputs":[{"name":"button"},{"name":"self"}],"output":{"name":"option"}}],[10,"press","","Calls closure if this is a press event.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"press_args","","Returns press arguments.",31,{"inputs":[{"name":"self"}],"output":{"generics":["button"],"name":"option"}}],[8,"ReleaseEvent","","The release of a button",null,null],[10,"from_button","","Creates a release event.",32,{"inputs":[{"name":"button"},{"name":"self"}],"output":{"name":"option"}}],[10,"release","","Calls closure if this is a release event.",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"release_args","","Returns release arguments.",32,{"inputs":[{"name":"self"}],"output":{"generics":["button"],"name":"option"}}],[8,"ResizeEvent","","When the window is resized",null,null],[10,"from_width_height","","Creates a resize event.",33,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"self"}],"output":{"name":"option"}}],[10,"resize","","Calls closure if this is a resize event.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"resize_args","","Returns resize arguments.",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"RenderEvent","","When the next frame should be rendered",null,null],[10,"from_render_args","","Creates a render event.",34,{"inputs":[{"name":"renderargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"render","","Calls closure if this is a render event.",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"render_args","","Returns render arguments.",34,{"inputs":[{"name":"self"}],"output":{"generics":["renderargs"],"name":"option"}}],[8,"TextEvent","","When receiving text from user, such as typing a character",null,null],[10,"from_text","","Creates a text event.",35,{"inputs":[{"name":"str"},{"name":"self"}],"output":{"name":"option"}}],[10,"text","","Calls closure if this is a text event.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"text_args","","Returns text arguments.",35,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[8,"TouchEvent","","When a touch is started, moved, ended or cancelled.",null,null],[10,"from_touch_args","","Creates a touch event.",36,{"inputs":[{"name":"touchargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"touch","","Calls closure if this is a touch event.",36,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"touch_args","","Returns touch arguments.",36,{"inputs":[{"name":"self"}],"output":{"generics":["touchargs"],"name":"option"}}],[8,"UpdateEvent","","When the application state should be updated",null,null],[10,"from_update_args","","Creates an update event.",37,{"inputs":[{"name":"updateargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"from_dt","","Creates an update event with delta time.",37,{"inputs":[{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"update","","Calls closure if this is an update event.",37,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"update_args","","Returns update arguments.",37,{"inputs":[{"name":"self"}],"output":{"generics":["updateargs"],"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"eventid"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"eventid"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"eventid"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"button"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"motion"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"motion"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"motion"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"input"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"loop"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"loop"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"loop"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"from","","",8,{"inputs":[{"name":"key"}],"output":{"name":"self"}}],[11,"from","","",8,{"inputs":[{"name":"mousebutton"}],"output":{"name":"self"}}],[11,"from","","",8,{"inputs":[{"name":"controllerbutton"}],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"buttonargs"}],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"controlleraxisargs"}],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"controlleraxisargs"}],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"touchargs"}],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"touchargs"}],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"motion"}],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"renderargs"}],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"renderargs"}],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"afterrenderargs"}],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"afterrenderargs"}],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"updateargs"}],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"updateargs"}],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"idleargs"}],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"idleargs"}],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"closeargs"}],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"loop"}],"output":{"name":"self"}}],[11,"into","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["input"],"name":"option"}}],[11,"into","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["loop"],"name":"option"}}],[11,"after_render_args","","Returns after render arguments.",25,{"inputs":[{"name":"self"}],"output":{"generics":["afterrenderargs"],"name":"option"}}],[11,"button_args","","Returns button arguments.",30,{"inputs":[{"name":"self"}],"output":{"generics":["buttonargs"],"name":"option"}}],[11,"press_args","","Returns press arguments.",31,{"inputs":[{"name":"self"}],"output":{"generics":["button"],"name":"option"}}],[11,"release_args","","Returns release arguments.",32,{"inputs":[{"name":"self"}],"output":{"generics":["button"],"name":"option"}}],[11,"close_args","","Returns close arguments.",26,{"inputs":[{"name":"self"}],"output":{"generics":["closeargs"],"name":"option"}}],[11,"cursor_args","","Returns cursor arguments.",27,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"focus_args","","Returns focus arguments.",28,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"from_dt","","Creates an update event with delta time.",29,{"inputs":[{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[11,"idle_args","","Returns idle arguments.",29,{"inputs":[{"name":"self"}],"output":{"generics":["idleargs"],"name":"option"}}],[11,"render_args","","Returns render arguments.",34,{"inputs":[{"name":"self"}],"output":{"generics":["renderargs"],"name":"option"}}],[11,"resize_args","","Returns resize arguments.",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"text_args","","Returns text arguments.",35,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"touch_args","","Returns touch arguments.",36,{"inputs":[{"name":"self"}],"output":{"generics":["touchargs"],"name":"option"}}],[11,"from_dt","","Creates an update event with delta time.",37,{"inputs":[{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[11,"update_args","","Returns update arguments.",37,{"inputs":[{"name":"self"}],"output":{"generics":["updateargs"],"name":"option"}}]],"paths":[[3,"IdleArgs"],[3,"ButtonArgs"],[3,"RenderArgs"],[3,"TouchArgs"],[3,"UpdateArgs"],[3,"EventId"],[4,"ButtonState"],[4,"Touch"],[4,"Button"],[4,"Motion"],[4,"Input"],[4,"Loop"],[4,"Event"],[3,"ControllerButton"],[3,"ControllerAxisArgs"],[8,"ControllerAxisEvent"],[4,"Key"],[3,"ModifierKey"],[4,"MouseButton"],[8,"MouseCursorEvent"],[8,"MouseRelativeEvent"],[8,"MouseScrollEvent"],[8,"GenericEvent"],[3,"AfterRenderArgs"],[3,"CloseArgs"],[8,"AfterRenderEvent"],[8,"CloseEvent"],[8,"CursorEvent"],[8,"FocusEvent"],[8,"IdleEvent"],[8,"ButtonEvent"],[8,"PressEvent"],[8,"ReleaseEvent"],[8,"ResizeEvent"],[8,"RenderEvent"],[8,"TextEvent"],[8,"TouchEvent"],[8,"UpdateEvent"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",21,null],[12,"sin_port","","",21,null],[12,"sin_addr","","",21,null],[12,"sin_zero","","",21,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",22,null],[12,"sin6_port","","",22,null],[12,"sin6_flowinfo","","",22,null],[12,"sin6_addr","","",22,null],[12,"sin6_scope_id","","",22,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",23,null],[12,"sun_path","","",23,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",24,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",25,null],[12,"ai_family","","",25,null],[12,"ai_socktype","","",25,null],[12,"ai_protocol","","",25,null],[12,"ai_addrlen","","",25,null],[12,"ai_addr","","",25,null],[12,"ai_canonname","","",25,null],[12,"ai_next","","",25,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",26,null],[12,"nl_pid","","",26,null],[12,"nl_groups","","",26,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",27,null],[12,"sll_protocol","","",27,null],[12,"sll_ifindex","","",27,null],[12,"sll_hatype","","",27,null],[12,"sll_pkttype","","",27,null],[12,"sll_halen","","",27,null],[12,"sll_addr","","",27,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",28,null],[12,"tm_min","","",28,null],[12,"tm_hour","","",28,null],[12,"tm_mday","","",28,null],[12,"tm_mon","","",28,null],[12,"tm_year","","",28,null],[12,"tm_wday","","",28,null],[12,"tm_yday","","",28,null],[12,"tm_isdst","","",28,null],[12,"tm_gmtoff","","",28,null],[12,"tm_zone","","",28,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",29,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",30,null],[12,"dli_fbase","","",30,null],[12,"dli_sname","","",30,null],[12,"dli_saddr","","",30,null],[3,"epoll_event","","",null,null],[12,"events","","",31,null],[12,"u64","","",31,null],[3,"utsname","","",null,null],[12,"sysname","","",32,null],[12,"nodename","","",32,null],[12,"release","","",32,null],[12,"version","","",32,null],[12,"machine","","",32,null],[12,"domainname","","",32,null],[3,"lconv","","",null,null],[12,"decimal_point","","",33,null],[12,"thousands_sep","","",33,null],[12,"grouping","","",33,null],[12,"int_curr_symbol","","",33,null],[12,"currency_symbol","","",33,null],[12,"mon_decimal_point","","",33,null],[12,"mon_thousands_sep","","",33,null],[12,"mon_grouping","","",33,null],[12,"positive_sign","","",33,null],[12,"negative_sign","","",33,null],[12,"int_frac_digits","","",33,null],[12,"frac_digits","","",33,null],[12,"p_cs_precedes","","",33,null],[12,"p_sep_by_space","","",33,null],[12,"n_cs_precedes","","",33,null],[12,"n_sep_by_space","","",33,null],[12,"p_sign_posn","","",33,null],[12,"n_sign_posn","","",33,null],[12,"int_p_cs_precedes","","",33,null],[12,"int_p_sep_by_space","","",33,null],[12,"int_n_cs_precedes","","",33,null],[12,"int_n_sep_by_space","","",33,null],[12,"int_p_sign_posn","","",33,null],[12,"int_n_sign_posn","","",33,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",34,null],[12,"sigev_signo","","",34,null],[12,"sigev_notify","","",34,null],[12,"sigev_notify_thread_id","","",34,null],[3,"dirent","","",null,null],[12,"d_ino","","",35,null],[12,"d_off","","",35,null],[12,"d_reclen","","",35,null],[12,"d_type","","",35,null],[12,"d_name","","",35,null],[3,"dirent64","","",null,null],[12,"d_ino","","",36,null],[12,"d_off","","",36,null],[12,"d_reclen","","",36,null],[12,"d_type","","",36,null],[12,"d_name","","",36,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",37,null],[12,"rlim_max","","",37,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",38,null],[12,"gl_pathv","","",38,null],[12,"gl_offs","","",38,null],[12,"gl_flags","","",38,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",39,null],[12,"ifa_name","","",39,null],[12,"ifa_flags","","",39,null],[12,"ifa_addr","","",39,null],[12,"ifa_netmask","","",39,null],[12,"ifa_ifu","","",39,null],[12,"ifa_data","","",39,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",40,null],[12,"pw_passwd","","",40,null],[12,"pw_uid","","",40,null],[12,"pw_gid","","",40,null],[12,"pw_gecos","","",40,null],[12,"pw_dir","","",40,null],[12,"pw_shell","","",40,null],[3,"spwd","","",null,null],[12,"sp_namp","","",41,null],[12,"sp_pwdp","","",41,null],[12,"sp_lstchg","","",41,null],[12,"sp_min","","",41,null],[12,"sp_max","","",41,null],[12,"sp_warn","","",41,null],[12,"sp_inact","","",41,null],[12,"sp_expire","","",41,null],[12,"sp_flag","","",41,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",42,null],[12,"f_frsize","","",42,null],[12,"f_blocks","","",42,null],[12,"f_bfree","","",42,null],[12,"f_bavail","","",42,null],[12,"f_files","","",42,null],[12,"f_ffree","","",42,null],[12,"f_favail","","",42,null],[12,"f_fsid","","",42,null],[12,"f_flag","","",42,null],[12,"f_namemax","","",42,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",43,null],[12,"dqb_bsoftlimit","","",43,null],[12,"dqb_curspace","","",43,null],[12,"dqb_ihardlimit","","",43,null],[12,"dqb_isoftlimit","","",43,null],[12,"dqb_curinodes","","",43,null],[12,"dqb_btime","","",43,null],[12,"dqb_itime","","",43,null],[12,"dqb_valid","","",43,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",44,null],[12,"ssi_errno","","",44,null],[12,"ssi_code","","",44,null],[12,"ssi_pid","","",44,null],[12,"ssi_uid","","",44,null],[12,"ssi_fd","","",44,null],[12,"ssi_tid","","",44,null],[12,"ssi_band","","",44,null],[12,"ssi_overrun","","",44,null],[12,"ssi_trapno","","",44,null],[12,"ssi_status","","",44,null],[12,"ssi_int","","",44,null],[12,"ssi_ptr","","",44,null],[12,"ssi_utime","","",44,null],[12,"ssi_stime","","",44,null],[12,"ssi_addr","","",44,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",45,null],[12,"it_value","","",45,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",46,null],[12,"mq_maxmsg","","",46,null],[12,"mq_msgsize","","",46,null],[12,"mq_curmsgs","","",46,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",47,null],[12,"if_name","","",47,null],[3,"msginfo","","",null,null],[12,"msgpool","","",48,null],[12,"msgmap","","",48,null],[12,"msgmax","","",48,null],[12,"msgmnb","","",48,null],[12,"msgmni","","",48,null],[12,"msgssz","","",48,null],[12,"msgtql","","",48,null],[12,"msgseg","","",48,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",49,null],[12,"msg_len","","",49,null],[3,"sembuf","","",null,null],[12,"sem_num","","",50,null],[12,"sem_op","","",50,null],[12,"sem_flg","","",50,null],[3,"input_event","","",null,null],[12,"time","","",51,null],[12,"type_","","",51,null],[12,"code","","",51,null],[12,"value","","",51,null],[3,"input_id","","",null,null],[12,"bustype","","",52,null],[12,"vendor","","",52,null],[12,"product","","",52,null],[12,"version","","",52,null],[3,"input_absinfo","","",null,null],[12,"value","","",53,null],[12,"minimum","","",53,null],[12,"maximum","","",53,null],[12,"fuzz","","",53,null],[12,"flat","","",53,null],[12,"resolution","","",53,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",54,null],[12,"len","","",54,null],[12,"index","","",54,null],[12,"keycode","","",54,null],[12,"scancode","","",54,null],[3,"input_mask","","",null,null],[12,"type_","","",55,null],[12,"codes_size","","",55,null],[12,"codes_ptr","","",55,null],[3,"ff_replay","","",null,null],[12,"length","","",56,null],[12,"delay","","",56,null],[3,"ff_trigger","","",null,null],[12,"button","","",57,null],[12,"interval","","",57,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",58,null],[12,"attack_level","","",58,null],[12,"fade_length","","",58,null],[12,"fade_level","","",58,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",59,null],[12,"envelope","","",59,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",60,null],[12,"end_level","","",60,null],[12,"envelope","","",60,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",61,null],[12,"left_saturation","","",61,null],[12,"right_coeff","","",61,null],[12,"left_coeff","","",61,null],[12,"deadband","","",61,null],[12,"center","","",61,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",62,null],[12,"period","","",62,null],[12,"magnitude","","",62,null],[12,"offset","","",62,null],[12,"phase","","",62,null],[12,"envelope","","",62,null],[12,"custom_len","","",62,null],[12,"custom_data","","",62,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",63,null],[12,"weak_magnitude","","",63,null],[3,"ff_effect","","",null,null],[12,"type_","","",64,null],[12,"id","","",64,null],[12,"direction","","",64,null],[12,"trigger","","",64,null],[12,"replay","","",64,null],[12,"u","","",64,null],[3,"dl_phdr_info","","",null,null],[12,"dlpi_addr","","",65,null],[12,"dlpi_name","","",65,null],[12,"dlpi_phdr","","",65,null],[12,"dlpi_phnum","","",65,null],[12,"dlpi_adds","","",65,null],[12,"dlpi_subs","","",65,null],[12,"dlpi_tls_modid","","",65,null],[12,"dlpi_tls_data","","",65,null],[3,"Elf32_Phdr","","",null,null],[12,"p_type","","",66,null],[12,"p_offset","","",66,null],[12,"p_vaddr","","",66,null],[12,"p_paddr","","",66,null],[12,"p_filesz","","",66,null],[12,"p_memsz","","",66,null],[12,"p_flags","","",66,null],[12,"p_align","","",66,null],[3,"Elf64_Phdr","","",null,null],[12,"p_type","","",67,null],[12,"p_flags","","",67,null],[12,"p_offset","","",67,null],[12,"p_vaddr","","",67,null],[12,"p_paddr","","",67,null],[12,"p_filesz","","",67,null],[12,"p_memsz","","",67,null],[12,"p_align","","",67,null],[3,"ucred","","",null,null],[12,"pid","","",68,null],[12,"uid","","",68,null],[12,"gid","","",68,null],[3,"mntent","","",null,null],[12,"mnt_fsname","","",69,null],[12,"mnt_dir","","",69,null],[12,"mnt_type","","",69,null],[12,"mnt_opts","","",69,null],[12,"mnt_freq","","",69,null],[12,"mnt_passno","","",69,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",70,null],[12,"aio_lio_opcode","","",70,null],[12,"aio_reqprio","","",70,null],[12,"aio_buf","","",70,null],[12,"aio_nbytes","","",70,null],[12,"aio_sigevent","","",70,null],[12,"aio_offset","","",70,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",71,null],[12,"e_exit","","",71,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",72,null],[12,"tv_usec","","",72,null],[3,"utmpx","","",null,null],[12,"ut_type","","",73,null],[12,"ut_pid","","",73,null],[12,"ut_line","","",73,null],[12,"ut_id","","",73,null],[12,"ut_user","","",73,null],[12,"ut_host","","",73,null],[12,"ut_exit","","",73,null],[12,"ut_session","","",73,null],[12,"ut_tv","","",73,null],[12,"ut_addr_v6","","",73,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",74,null],[12,"sa_mask","","",74,null],[12,"sa_flags","","",74,null],[12,"sa_restorer","","",74,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",75,null],[12,"ss_flags","","",75,null],[12,"ss_size","","",75,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",76,null],[12,"si_errno","","",76,null],[12,"si_code","","",76,null],[12,"_pad","","",76,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",77,null],[12,"gl_pathv","","",77,null],[12,"gl_offs","","",77,null],[12,"gl_flags","","",77,null],[3,"statfs","","",null,null],[12,"f_type","","",78,null],[12,"f_bsize","","",78,null],[12,"f_blocks","","",78,null],[12,"f_bfree","","",78,null],[12,"f_bavail","","",78,null],[12,"f_files","","",78,null],[12,"f_ffree","","",78,null],[12,"f_fsid","","",78,null],[12,"f_namelen","","",78,null],[12,"f_frsize","","",78,null],[3,"msghdr","","",null,null],[12,"msg_name","","",79,null],[12,"msg_namelen","","",79,null],[12,"msg_iov","","",79,null],[12,"msg_iovlen","","",79,null],[12,"msg_control","","",79,null],[12,"msg_controllen","","",79,null],[12,"msg_flags","","",79,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",80,null],[12,"cmsg_level","","",80,null],[12,"cmsg_type","","",80,null],[3,"termios","","",null,null],[12,"c_iflag","","",81,null],[12,"c_oflag","","",81,null],[12,"c_cflag","","",81,null],[12,"c_lflag","","",81,null],[12,"c_line","","",81,null],[12,"c_cc","","",81,null],[12,"c_ispeed","","",81,null],[12,"c_ospeed","","",81,null],[3,"flock","","",null,null],[12,"l_type","","",82,null],[12,"l_whence","","",82,null],[12,"l_start","","",82,null],[12,"l_len","","",82,null],[12,"l_pid","","",82,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",83,null],[12,"loads","","",83,null],[12,"totalram","","",83,null],[12,"freeram","","",83,null],[12,"sharedram","","",83,null],[12,"bufferram","","",83,null],[12,"totalswap","","",83,null],[12,"freeswap","","",83,null],[12,"procs","","",83,null],[12,"pad","","",83,null],[12,"totalhigh","","",83,null],[12,"freehigh","","",83,null],[12,"mem_unit","","",83,null],[12,"_f","","",83,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",84,null],[12,"msg_stime","","",84,null],[12,"msg_rtime","","",84,null],[12,"msg_ctime","","",84,null],[12,"msg_qnum","","",84,null],[12,"msg_qbytes","","",84,null],[12,"msg_lspid","","",84,null],[12,"msg_lrpid","","",84,null],[3,"stat","","",null,null],[12,"st_dev","","",85,null],[12,"st_ino","","",85,null],[12,"st_nlink","","",85,null],[12,"st_mode","","",85,null],[12,"st_uid","","",85,null],[12,"st_gid","","",85,null],[12,"st_rdev","","",85,null],[12,"st_size","","",85,null],[12,"st_blksize","","",85,null],[12,"st_blocks","","",85,null],[12,"st_atime","","",85,null],[12,"st_atime_nsec","","",85,null],[12,"st_mtime","","",85,null],[12,"st_mtime_nsec","","",85,null],[12,"st_ctime","","",85,null],[12,"st_ctime_nsec","","",85,null],[3,"stat64","","",null,null],[12,"st_dev","","",86,null],[12,"st_ino","","",86,null],[12,"st_nlink","","",86,null],[12,"st_mode","","",86,null],[12,"st_uid","","",86,null],[12,"st_gid","","",86,null],[12,"st_rdev","","",86,null],[12,"st_size","","",86,null],[12,"st_blksize","","",86,null],[12,"st_blocks","","",86,null],[12,"st_atime","","",86,null],[12,"st_atime_nsec","","",86,null],[12,"st_mtime","","",86,null],[12,"st_mtime_nsec","","",86,null],[12,"st_ctime","","",86,null],[12,"st_ctime_nsec","","",86,null],[3,"statfs64","","",null,null],[12,"f_type","","",87,null],[12,"f_bsize","","",87,null],[12,"f_blocks","","",87,null],[12,"f_bfree","","",87,null],[12,"f_bavail","","",87,null],[12,"f_files","","",87,null],[12,"f_ffree","","",87,null],[12,"f_fsid","","",87,null],[12,"f_namelen","","",87,null],[12,"f_frsize","","",87,null],[12,"f_flags","","",87,null],[12,"f_spare","","",87,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",88,null],[12,"f_frsize","","",88,null],[12,"f_blocks","","",88,null],[12,"f_bfree","","",88,null],[12,"f_bavail","","",88,null],[12,"f_files","","",88,null],[12,"f_ffree","","",88,null],[12,"f_favail","","",88,null],[12,"f_fsid","","",88,null],[12,"f_flag","","",88,null],[12,"f_namemax","","",88,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",89,null],[12,"exponent","","",89,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",90,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",91,null],[12,"swd","","",91,null],[12,"ftw","","",91,null],[12,"fop","","",91,null],[12,"rip","","",91,null],[12,"rdp","","",91,null],[12,"mxcsr","","",91,null],[12,"mxcr_mask","","",91,null],[12,"_st","","",91,null],[12,"_xmm","","",91,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",92,null],[12,"swd","","",92,null],[12,"ftw","","",92,null],[12,"fop","","",92,null],[12,"rip","","",92,null],[12,"rdp","","",92,null],[12,"mxcsr","","",92,null],[12,"mxcr_mask","","",92,null],[12,"st_space","","",92,null],[12,"xmm_space","","",92,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",93,null],[12,"r14","","",93,null],[12,"r13","","",93,null],[12,"r12","","",93,null],[12,"rbp","","",93,null],[12,"rbx","","",93,null],[12,"r11","","",93,null],[12,"r10","","",93,null],[12,"r9","","",93,null],[12,"r8","","",93,null],[12,"rax","","",93,null],[12,"rcx","","",93,null],[12,"rdx","","",93,null],[12,"rsi","","",93,null],[12,"rdi","","",93,null],[12,"orig_rax","","",93,null],[12,"rip","","",93,null],[12,"cs","","",93,null],[12,"eflags","","",93,null],[12,"rsp","","",93,null],[12,"ss","","",93,null],[12,"fs_base","","",93,null],[12,"gs_base","","",93,null],[12,"ds","","",93,null],[12,"es","","",93,null],[12,"fs","","",93,null],[12,"gs","","",93,null],[3,"user","","",null,null],[12,"regs","","",94,null],[12,"u_fpvalid","","",94,null],[12,"i387","","",94,null],[12,"u_tsize","","",94,null],[12,"u_dsize","","",94,null],[12,"u_ssize","","",94,null],[12,"start_code","","",94,null],[12,"start_stack","","",94,null],[12,"signal","","",94,null],[12,"u_ar0","","",94,null],[12,"u_fpstate","","",94,null],[12,"magic","","",94,null],[12,"u_comm","","",94,null],[12,"u_debugreg","","",94,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",95,null],[12,"fpregs","","",95,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",96,null],[12,"uc_link","","",96,null],[12,"uc_stack","","",96,null],[12,"uc_mcontext","","",96,null],[12,"uc_sigmask","","",96,null],[3,"ipc_perm","","",null,null],[12,"__key","","",97,null],[12,"uid","","",97,null],[12,"gid","","",97,null],[12,"cuid","","",97,null],[12,"cgid","","",97,null],[12,"mode","","",97,null],[12,"__seq","","",97,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",98,null],[12,"shm_segsz","","",98,null],[12,"shm_atime","","",98,null],[12,"shm_dtime","","",98,null],[12,"shm_ctime","","",98,null],[12,"shm_cpid","","",98,null],[12,"shm_lpid","","",98,null],[12,"shm_nattch","","",98,null],[3,"termios2","","",null,null],[12,"c_iflag","","",99,null],[12,"c_oflag","","",99,null],[12,"c_cflag","","",99,null],[12,"c_lflag","","",99,null],[12,"c_line","","",99,null],[12,"c_cc","","",99,null],[12,"c_ispeed","","",99,null],[12,"c_ospeed","","",99,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"QCMD","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"major","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"minor","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"makedev","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_uint"}],"output":{"name":"dev_t"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"difftime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"openpty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"dl_iterate_phdr","","",null,null],[5,"setmntent","","",null,null],[5,"getmntent","","",null,null],[5,"addmntent","","",null,null],[5,"endmntent","","",null,null],[5,"hasmntopt","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[5,"sysctl","","",null,null],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"statfs64"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"statvfs64"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"user_fpregs_struct"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"user_regs_struct"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"user"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"termios2"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlockattr_t"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"itimerspec"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"mmsghdr"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"sembuf"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"input_event"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"input_id"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"input_absinfo"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"input_keymap_entry"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"input_mask"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"ff_replay"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ff_trigger"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"ff_envelope"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"ff_constant_effect"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"ff_ramp_effect"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"ff_condition_effect"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"ff_periodic_effect"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"ff_rumble_effect"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"ff_effect"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"dl_phdr_info"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"elf32_phdr"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"elf64_phdr"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"mntent"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"itimerval"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tms"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"servent"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"protoent"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"Elf32_Half","","",null,null],[6,"Elf32_Word","","",null,null],[6,"Elf32_Off","","",null,null],[6,"Elf32_Addr","","",null,null],[6,"Elf64_Half","","",null,null],[6,"Elf64_Word","","",null,null],[6,"Elf64_Off","","",null,null],[6,"Elf64_Addr","","",null,null],[6,"Elf64_Xword","","",null,null],[6,"__priority_which_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"TUN_READQ_SIZE","","",null,null],[17,"TUN_TUN_DEV","","",null,null],[17,"TUN_TAP_DEV","","",null,null],[17,"TUN_TYPE_MASK","","",null,null],[17,"IFF_TUN","","",null,null],[17,"IFF_TAP","","",null,null],[17,"IFF_NO_PI","","",null,null],[17,"IFF_ONE_QUEUE","","",null,null],[17,"IFF_VNET_HDR","","",null,null],[17,"IFF_TUN_EXCL","","",null,null],[17,"IFF_MULTI_QUEUE","","",null,null],[17,"IFF_ATTACH_QUEUE","","",null,null],[17,"IFF_DETACH_QUEUE","","",null,null],[17,"IFF_PERSIST","","",null,null],[17,"IFF_NOFILTER","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"RENAME_NOREPLACE","","",null,null],[17,"RENAME_EXCHANGE","","",null,null],[17,"RENAME_WHITEOUT","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_NODATA","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"GRND_NONBLOCK","","",null,null],[17,"GRND_RANDOM","","",null,null],[17,"SECCOMP_MODE_DISABLED","","",null,null],[17,"SECCOMP_MODE_STRICT","","",null,null],[17,"SECCOMP_MODE_FILTER","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[17,"PT_NULL","","",null,null],[17,"PT_LOAD","","",null,null],[17,"PT_DYNAMIC","","",null,null],[17,"PT_INTERP","","",null,null],[17,"PT_NOTE","","",null,null],[17,"PT_SHLIB","","",null,null],[17,"PT_PHDR","","",null,null],[17,"PT_TLS","","",null,null],[17,"PT_NUM","","",null,null],[17,"PT_LOOS","","",null,null],[17,"PT_GNU_EH_FRAME","","",null,null],[17,"PT_GNU_STACK","","",null,null],[17,"PT_GNU_RELRO","","",null,null],[17,"ETH_ALEN","","",null,null],[17,"ETH_HLEN","","",null,null],[17,"ETH_ZLEN","","",null,null],[17,"ETH_DATA_LEN","","",null,null],[17,"ETH_FRAME_LEN","","",null,null],[17,"ETH_FCS_LEN","","",null,null],[17,"ETH_P_LOOP","","",null,null],[17,"ETH_P_PUP","","",null,null],[17,"ETH_P_PUPAT","","",null,null],[17,"ETH_P_IP","","",null,null],[17,"ETH_P_X25","","",null,null],[17,"ETH_P_ARP","","",null,null],[17,"ETH_P_BPQ","","",null,null],[17,"ETH_P_IEEEPUP","","",null,null],[17,"ETH_P_IEEEPUPAT","","",null,null],[17,"ETH_P_BATMAN","","",null,null],[17,"ETH_P_DEC","","",null,null],[17,"ETH_P_DNA_DL","","",null,null],[17,"ETH_P_DNA_RC","","",null,null],[17,"ETH_P_DNA_RT","","",null,null],[17,"ETH_P_LAT","","",null,null],[17,"ETH_P_DIAG","","",null,null],[17,"ETH_P_CUST","","",null,null],[17,"ETH_P_SCA","","",null,null],[17,"ETH_P_TEB","","",null,null],[17,"ETH_P_RARP","","",null,null],[17,"ETH_P_ATALK","","",null,null],[17,"ETH_P_AARP","","",null,null],[17,"ETH_P_8021Q","","",null,null],[17,"ETH_P_IPX","","",null,null],[17,"ETH_P_IPV6","","",null,null],[17,"ETH_P_PAUSE","","",null,null],[17,"ETH_P_SLOW","","",null,null],[17,"ETH_P_WCCP","","",null,null],[17,"ETH_P_MPLS_UC","","",null,null],[17,"ETH_P_MPLS_MC","","",null,null],[17,"ETH_P_ATMMPOA","","",null,null],[17,"ETH_P_PPP_DISC","","",null,null],[17,"ETH_P_PPP_SES","","",null,null],[17,"ETH_P_LINK_CTL","","",null,null],[17,"ETH_P_ATMFATE","","",null,null],[17,"ETH_P_PAE","","",null,null],[17,"ETH_P_AOE","","",null,null],[17,"ETH_P_8021AD","","",null,null],[17,"ETH_P_802_EX1","","",null,null],[17,"ETH_P_TIPC","","",null,null],[17,"ETH_P_MACSEC","","",null,null],[17,"ETH_P_8021AH","","",null,null],[17,"ETH_P_MVRP","","",null,null],[17,"ETH_P_1588","","",null,null],[17,"ETH_P_PRP","","",null,null],[17,"ETH_P_FCOE","","",null,null],[17,"ETH_P_TDLS","","",null,null],[17,"ETH_P_FIP","","",null,null],[17,"ETH_P_80221","","",null,null],[17,"ETH_P_LOOPBACK","","",null,null],[17,"ETH_P_QINQ1","","",null,null],[17,"ETH_P_QINQ2","","",null,null],[17,"ETH_P_QINQ3","","",null,null],[17,"ETH_P_EDSA","","",null,null],[17,"ETH_P_AF_IUCV","","",null,null],[17,"ETH_P_802_3_MIN","","",null,null],[17,"ETH_P_802_3","","",null,null],[17,"ETH_P_AX25","","",null,null],[17,"ETH_P_ALL","","",null,null],[17,"ETH_P_802_2","","",null,null],[17,"ETH_P_SNAP","","",null,null],[17,"ETH_P_DDCMP","","",null,null],[17,"ETH_P_WAN_PPP","","",null,null],[17,"ETH_P_PPP_MP","","",null,null],[17,"ETH_P_LOCALTALK","","",null,null],[17,"ETH_P_CANFD","","",null,null],[17,"ETH_P_PPPTALK","","",null,null],[17,"ETH_P_TR_802_2","","",null,null],[17,"ETH_P_MOBITEX","","",null,null],[17,"ETH_P_CONTROL","","",null,null],[17,"ETH_P_IRDA","","",null,null],[17,"ETH_P_ECONET","","",null,null],[17,"ETH_P_HDLC","","",null,null],[17,"ETH_P_ARCNET","","",null,null],[17,"ETH_P_DSA","","",null,null],[17,"ETH_P_TRAILER","","",null,null],[17,"ETH_P_PHONET","","",null,null],[17,"ETH_P_IEEE802154","","",null,null],[17,"ETH_P_CAIF","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"BOTHER","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["linked_hash_map"] = {"doc":"A `HashMap` wrapper that holds key-value pairs in insertion order.","items":[[3,"LinkedHashMap","linked_hash_map","A linked hash map.",null,null],[3,"Iter","","An insertion-order iterator over a `LinkedHashMap`'s entries, with immutable references to the values.",null,null],[3,"IterMut","","An insertion-order iterator over a `LinkedHashMap`'s entries, with mutable references to the values.",null,null],[3,"IntoIter","","A consuming insertion-order iterator over a `LinkedHashMap`'s entries.",null,null],[3,"Entries","","An insertion-order iterator over a `LinkedHashMap`'s entries represented as an `OccupiedEntry`.",null,null],[3,"Keys","","An insertion-order iterator over a `LinkedHashMap`'s keys.",null,null],[3,"Values","","An insertion-order iterator over a `LinkedHashMap`'s values.",null,null],[3,"OccupiedEntry","","A view into a single occupied location in a `LinkedHashMap`.",null,null],[3,"VacantEntry","","A view into a single empty location in a `LinkedHashMap`.",null,null],[4,"Entry","","A view into a single location in a map, which may be vacant or occupied.",null,null],[13,"Occupied","","An occupied Entry.",0,null],[13,"Vacant","","A vacant Entry.",0,null],[11,"new","","Creates a linked hash map.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty linked hash map with the given initial capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_hasher","","Creates an empty linked hash map with the given initial hash builder.",1,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"with_capacity_and_hasher","","Creates an empty linked hash map with the given initial capacity and hash builder.",1,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"self"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted into the map. The map may reserve more space to avoid frequent allocations.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"entries","","Returns an iterator visiting all entries in insertion order. Iterator element type is `OccupiedEntry<K, V, S>`. Allows for removal as well as replacing the entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"entries"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already existed, the old value is returned.",1,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"contains_key","","Checks if the map contains the given key.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns the value corresponding to the key in the map.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_mut","","Returns the mutable reference corresponding to the key in the map.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_refresh","","Returns the value corresponding to the key in the map.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"remove","","Removes and returns the value corresponding to the key from the map.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"capacity","","Returns the maximum number of key-value pairs the map can hold without reallocating.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"pop_front","","Removes the first entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front","","Gets the first entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_back","","Removes the last entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Gets the last entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","Returns the number of key-value pairs in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the map is currently empty.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"hasher","","Returns a reference to the map's hasher.",1,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"clear","","Clears the map of all key-value pairs.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a V)`",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a mut V)` # Examples ``` use linked_hash_map::LinkedHashMap;",1,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Returns a double-ended iterator visiting all key in order of insertion.",1,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns a double-ended iterator visiting all values in order of insertion.",1,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"fmt","","Returns a string that lists the key-value pairs in insertion order.",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["occupiedentry"],"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_iter","","",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"key","","Returns the entry key",0,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the entry key",8,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"get","","Gets a reference to the value in the entry.",8,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",8,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry with a lifetime bound to the map itself",8,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",8,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the entry key",9,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}]],"paths":[[4,"Entry"],[3,"LinkedHashMap"],[3,"Iter"],[3,"IntoIter"],[3,"IterMut"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"OccupiedEntry"],[3,"VacantEntry"]]};
searchIndex["nodrop"] = {"doc":"The nodrop crate has the following cargo feature flags:","items":[[3,"NoDrop","nodrop","A type holding T that will not call its destructor on drop",null,null],[11,"new","","Create a new NoDrop.",0,{"inputs":[{"name":"t"}],"output":{"name":"nodrop"}}],[11,"into_inner","","Extract the inner value.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}]],"paths":[[3,"NoDrop"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[3,"BigInt","num","A big signed integer type.",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[3,"Complex","","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",2,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",13,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",13,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",13,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",13,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",13,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",17,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"pow","num","",null,null],[5,"pow","num::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"checked_pow","num","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"bigint","","",null,null],[0,"complex","","",null,null],[0,"integer","","",null,null],[0,"iter","","",null,null],[0,"traits","","",null,null],[0,"rational","","",null,null],[11,"new","","Creates and initializes a BigInt.",18,{"inputs":[{"name":"sign"},{"generics":["u32"],"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",18,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",18,null],[11,"assign_from_slice","","Reinitializes a `BigInt`.",18,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",18,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",18,null],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes in two's complement binary representation.",18,null],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes in two's complement.",18,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",18,null],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",18,null],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",18,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",18,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",18,null],[11,"to_signed_bytes_be","","Returns the two's complement byte representation of the `BigInt` in big-endian byte order.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_signed_bytes_le","","Returns the two's complement byte representation of the `BigInt` in little-endian byte order.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",18,null],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",18,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",18,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",18,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_add","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_sub","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_mul","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_div","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"mul_assign","","",0,null],[11,"mul_assign","","",0,null],[11,"mul_assign","","",0,null],[11,"mul_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"rem_assign","","",0,null],[11,"rem_assign","","",0,null],[11,"rem_assign","","",0,null],[11,"rem_assign","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"add_assign","","",0,null],[11,"add_assign","","",0,null],[11,"add_assign","","",0,null],[11,"add_assign","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["complex"],"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"sub_assign","","",0,null],[11,"sub_assign","","",0,null],[11,"sub_assign","","",0,null],[11,"sub_assign","","",0,null],[11,"div_assign","","",0,null],[11,"div_assign","","",0,null],[11,"div_assign","","",0,null],[11,"div_assign","","",0,null],[11,"hash","","",0,null],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"inputs":[{"name":"str"}],"output":{"generics":["complex"],"name":"result"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"generics":["complex"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"shr","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul_assign","","",19,null],[11,"mul_assign","","",19,null],[11,"mul_assign","","",19,null],[11,"mul_assign","","",19,null],[11,"mul_assign","","",19,null],[11,"mul_assign","","",19,null],[11,"mul_assign","","",19,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"shl_assign","","",19,null],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"from_i64","","",19,{"inputs":[{"name":"i64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_u64","","",19,{"inputs":[{"name":"u64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_f64","","",19,{"inputs":[{"name":"f64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_i64","","",18,{"inputs":[{"name":"i64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_u64","","",18,{"inputs":[{"name":"u64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_f64","","",18,{"inputs":[{"name":"f64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"rem_assign","","",19,null],[11,"rem_assign","","",19,null],[11,"rem_assign","","",19,null],[11,"rem_assign","","",19,null],[11,"rem_assign","","",19,null],[11,"rem_assign","","",19,null],[11,"rem_assign","","",19,null],[11,"from_str_radix","","Creates and initializes a BigInt.",18,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["bigint","parsebiginterror"],"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",19,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["biguint","parsebiginterror"],"name":"result"}}],[11,"checked_div","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_div","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"neg","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"neg","","",19,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"shr_assign","","",19,null],[11,"zero","","",18,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"zero","","",19,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"shl","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shl","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add_assign","","",19,null],[11,"add_assign","","",19,null],[11,"add_assign","","",19,null],[11,"add_assign","","",19,null],[11,"add_assign","","",19,null],[11,"add_assign","","",19,null],[11,"add_assign","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"one","","",18,{"inputs":[],"output":{"name":"bigint"}}],[11,"one","","",19,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"decode","","",19,{"inputs":[{"name":"__d"}],"output":{"generics":["biguint"],"name":"result"}}],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"generics":["bigint"],"name":"result"}}],[11,"bitor","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"i32"}],"output":{"name":"bigint"}}],[11,"from","","",19,{"inputs":[{"name":"usize"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"i8"}],"output":{"name":"bigint"}}],[11,"from","","",19,{"inputs":[{"name":"u16"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u8"}],"output":{"name":"bigint"}}],[11,"from","","",19,{"inputs":[{"name":"u64"}],"output":{"name":"biguint"}}],[11,"from","","",19,{"inputs":[{"name":"u32"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"usize"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"u32"}],"output":{"name":"bigint"}}],[11,"from","","",19,{"inputs":[{"name":"u8"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"isize"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"u64"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"u16"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"i16"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"i64"}],"output":{"name":"bigint"}}],[11,"encode","","",19,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",18,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"cmp","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"to_i64","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"to_i64","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"sub_assign","","",19,null],[11,"sub_assign","","",19,null],[11,"sub_assign","","",19,null],[11,"sub_assign","","",19,null],[11,"sub_assign","","",19,null],[11,"sub_assign","","",19,null],[11,"sub_assign","","",19,null],[11,"bitxor","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_assign","","",19,null],[11,"div_assign","","",19,null],[11,"div_assign","","",19,null],[11,"div_assign","","",19,null],[11,"div_assign","","",19,null],[11,"div_assign","","",19,null],[11,"div_assign","","",19,null],[11,"bitand_assign","","",19,null],[11,"bitand_assign","","",19,null],[11,"hash","","",19,null],[11,"hash","","",18,null],[11,"to_bigint","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"to_bigint","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"bitxor_assign","","",19,null],[11,"bitxor_assign","","",19,null],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"abs","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"is_positive","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"checked_sub","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_sub","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"bitor_assign","","",19,null],[11,"bitor_assign","","",19,null],[11,"checked_add","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_add","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_mul","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_mul","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"bitand","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_rem","","",19,null],[11,"div_floor","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",19,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"div_rem","","",18,null],[11,"div_floor","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",18,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_str","","",18,{"inputs":[{"name":"str"}],"output":{"generics":["bigint","parsebiginterror"],"name":"result"}}],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"generics":["biguint","parsebiginterror"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"to_biguint","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"to_biguint","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"bigint"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"biguint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","Creates and initializes a `BigUint`.",19,{"inputs":[{"generics":["u32"],"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",19,null],[11,"assign_from_slice","","Assign a value to a `BigUint`.",19,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",19,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",19,null],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must contain ascii/utf8 characters in [0-9a-zA-Z]. `radix` must be in the range `2...36`.",19,null],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",19,null],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",19,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",19,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",19,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",19,{"inputs":[{"name":"self"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[3,"BigInt"],[3,"BigUint"]]};
searchIndex["num_bigint"] = {"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"BigUint","num_bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",0,null],[13,"Other","","",0,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",1,null],[13,"NoSign","","",1,null],[13,"Plus","","",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"generics":["biguint"],"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"generics":["biguint","parsebiginterror"],"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["biguint","parsebiginterror"],"name":"result"}}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"shl","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shl_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"zero","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"neg","","",2,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"checked_add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"div_rem","","",2,null],[11,"div_floor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",2,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_i64","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"from_i64","","",2,{"inputs":[{"name":"i64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_u64","","",2,{"inputs":[{"name":"u64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_f64","","",2,{"inputs":[{"name":"f64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",2,{"inputs":[{"generics":["bigdigit"],"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",2,null],[11,"assign_from_slice","","Assign a value to a `BigUint`.",2,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",2,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",2,null],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must contain ascii/utf8 characters in [0-9a-zA-Z]. `radix` must be in the range `2...36`.",2,null],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",2,null],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",2,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",2,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",2,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",2,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"generics":["sign"],"name":"result"}}],[11,"neg","","Negate Sign value.",1,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"generics":["bigint"],"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"generics":["bigint","parsebiginterror"],"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["bigint","parsebiginterror"],"name":"result"}}],[11,"shl","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"is_positive","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"neg","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"checked_add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"div_rem","","",3,null],[11,"div_floor","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",3,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_i64","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"from_i64","","",3,{"inputs":[{"name":"i64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_u64","","",3,{"inputs":[{"name":"u64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_f64","","",3,{"inputs":[{"name":"f64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"to_bigint","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"to_biguint","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"sign"},{"generics":["bigdigit"],"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",3,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",3,null],[11,"assign_from_slice","","Reinitializes a `BigInt`.",3,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",3,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",3,null],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes in two's complement binary representation.",3,null],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes in two's complement.",3,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",3,null],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",3,null],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",3,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",3,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",3,null],[11,"to_signed_bytes_be","","Returns the two's complement byte representation of the `BigInt` in big-endian byte order.",3,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_signed_bytes_le","","Returns the two's complement byte representation of the `BigInt` in little-endian byte order.",3,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",3,null],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",3,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",3,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",3,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num_bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[6,"BigDigit","","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num_bigint","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",5,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails when the bound is zero.",6,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"inputs":[{"name":"self"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"inputs":[{"name":"self"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",0,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[11,"add","num_bigint::big_digit","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}]],"paths":[[4,"ParseBigIntError"],[4,"Sign"],[3,"BigUint"],[3,"BigInt"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[6,"BigDigit"],[6,"DoubleBigDigit"]]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[3,"ParseComplexError","","",null,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"generics":["complex"],"name":"result"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"self"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parsecomplexerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"parsecomplexerror"}],"output":{"name":"bool"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Complex"],[3,"ParseComplexError"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",null,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"binomial","","Calculate the binomial coefficient.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"multinomial","","Calculate the multinomial coefficient.",null,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",1,{"inputs":[{"name":"t"}],"output":{"name":"iterbinomial"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rangestep"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"generics":["ratio"],"name":"result"}}],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a reduced copy of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",0,{"inputs":[{"name":"t"}],"output":{"generics":["bigrational"],"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"from","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["ratio","parseratioerror"],"name":"result"}}],[11,"abs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"is_positive","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,{"inputs":[{"name":"str"}],"output":{"generics":["ratio","parseratioerror"],"name":"result"}}],[11,"into","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"approximate_float","","",0,{"inputs":[{"name":"f"}],"output":{"generics":["ratio"],"name":"option"}}]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",15,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",15,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",16,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",16,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",16,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",16,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",16,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",16,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",16,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",16,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",16,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",16,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",16,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",16,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",16,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",16,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",16,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",16,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",16,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",16,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",16,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",16,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",17,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",17,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",17,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",17,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",17,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",17,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",17,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",17,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",17,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",17,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",17,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",17,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",17,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",17,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",17,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",17,{"inputs":[],"output":{"name":"self"}}],[0,"real","num_traits","",null,null],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",null,null],[10,"min_value","","Returns the smallest finite value that this type can represent.",18,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",18,{"inputs":[],"output":{"name":"self"}}],[10,"epsilon","","Returns epsilon, a small positive value.",18,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",18,{"inputs":[],"output":{"name":"self"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",18,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a real number power.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_degrees","","Converts radians to degrees.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_radians","","Converts degrees to radians.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",18,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",21,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",22,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",23,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",23,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",23,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",23,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",23,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",24,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",24,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"Real"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["ordered_float"] = {"doc":"Wrappers for total order on Floats.","items":[[3,"OrderedFloat","ordered_float","A wrapper around Floats providing an implementation of Ord and Hash.",null,null],[12,"0","","",0,null],[3,"NotNaN","","A wrapper around Floats providing an implementation of Ord and Hash.",null,null],[3,"FloatIsNaN","","An error indicating an attempt to construct NotNaN from a NaN",null,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"orderedfloat"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"orderedfloat"}}],[11,"into_inner","","Get the value out.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"notnan"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"notnan"}}],[11,"new","","Create a NotNaN value.",1,{"inputs":[{"name":"t"}],"output":{"generics":["floatisnan"],"name":"result"}}],[11,"unchecked_new","","Create a NotNaN value from a value that is guaranteed to not be NaN",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"into_inner","","Get the value out.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"ordering"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",1,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"into","","",1,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"deref","","",1,null],[11,"add","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"add_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"add_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"add_assign","","",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"add_assign","","",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"sub_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"sub_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"sub_assign","","",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"sub_assign","","",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"mul_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"mul_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"mul_assign","","",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"mul_assign","","",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"div","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"div","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"div_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"div_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"div_assign","","",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"div_assign","","",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"rem","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"rem","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"rem_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"rem_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"rem_assign","","",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"rem_assign","","",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"neg","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"floatisnan"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"floatisnan"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",2,{"inputs":[{"name":"self"}],"output":{"name":"error"}}]],"paths":[[3,"OrderedFloat"],[3,"NotNaN"],[3,"FloatIsNaN"]]};
searchIndex["ordermap"] = {"doc":"[`OrderMap`] is a hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.","items":[[3,"OrderMap","ordermap","A hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.",null,null],[3,"OccupiedEntry","","",null,null],[3,"VacantEntry","","",null,null],[3,"Keys","","",null,null],[3,"Values","","",null,null],[3,"ValuesMut","","",null,null],[3,"Iter","","",null,null],[3,"IterMut","","",null,null],[3,"IntoIter","","",null,null],[3,"Drain","","",null,null],[4,"Entry","","Entry for an existing key-value pair or a vacant location to insert one.",null,null],[13,"Occupied","","Existing slot with equivalent key.",0,null],[13,"Vacant","","Vacant slot (no equivalent key in the map).",0,null],[11,"get_full_mut2","","",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"retain2","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"__private_marker","","",1,{"inputs":[{"name":"self"}],"output":{"name":"privatemarker"}}],[0,"set","","A hash set implemented using `OrderMap`",null,null],[3,"OrderSet","ordermap::set","A hash set where the iteration order of the values is independent of their hash values.",null,null],[3,"IntoIter","","",null,null],[3,"Iter","","",null,null],[3,"Drain","","",null,null],[3,"Difference","","",null,null],[3,"Intersection","","",null,null],[3,"SymmetricDifference","","",null,null],[3,"Union","","",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"orderset"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new set. (Does not allocate.)",2,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Create a new set with capacity for `n` elements. (Does not allocate if `n` is zero.)",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_capacity_and_hasher","","Create a new set with capacity for `n` elements. (Does not allocate if `n` is zero.)",2,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"self"}}],[11,"len","","Return the number of elements in the set.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"with_hasher","","Create a new set with `hash_builder`",2,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"hasher","","Return a reference to the set's `BuildHasher`.",2,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"capacity","","Computes in O(1) time.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Remove all elements in the set, while preserving its capacity.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"reserve","","FIXME Not implemented fully yet",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"insert","","Insert the value into the set.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"iter","","Return an iterator over the values of the set, in their order",2,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"difference","","Return an iterator over the values that are in `self` but not `other`.",2,{"inputs":[{"name":"self"},{"name":"orderset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Return an iterator over the values that are in `self` or `other`, but not in both.",2,{"inputs":[{"name":"self"},{"name":"orderset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Return an iterator over the values that are in both `self` and `other`.",2,{"inputs":[{"name":"self"},{"name":"orderset"}],"output":{"name":"intersection"}}],[11,"union","","Return an iterator over all values that are in `self` or `other`.",2,{"inputs":[{"name":"self"},{"name":"orderset"}],"output":{"name":"union"}}],[11,"contains","","Return `true` if an equivalent to `value` exists in the set.",2,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Return a reference to the value stored in the set, if it is present, else `None`.",2,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_full","","Return item index and value",2,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","FIXME Same as .swap_remove",2,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"swap_remove","","Remove the value from the set, and return `true` if it was present.",2,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","FIXME Same as .swap_take",2,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"swap_take","","Removes and returns the value in the set, if any, that is equal to the given one.",2,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"swap_remove_full","","Remove the value from the set return it and the index it had.",2,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"pop","","Remove the last value",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"retain","","Scan through each value in the set and keep those where the closure `keep` returns `true`.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"sort","","Sort the set’s values by their default ordering.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"sort_by","","Sort the set’s values in place using the comparison function `compare`.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"sorted_by","","Sort the values of the set and return a by value iterator of the values with the result.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"intoiter"}}],[11,"drain","","Clears the `OrderSet`, returning all values as a drain iterator. Keeps the allocated memory for reuse.",2,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"drain"}}],[11,"get_index","","Get a value by index",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_index","","Remove the key-value pair by index",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"count","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"collect","","",3,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"count","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"collect","","",4,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"count","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"collect","","",5,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_iter","","",2,null],[11,"from_iter","","",2,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"default","","Return an empty `OrderSet`",2,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"orderset"}],"output":{"name":"bool"}}],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`.",2,{"inputs":[{"name":"self"},{"name":"orderset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if all elements of `self` are contained in `other`.",2,{"inputs":[{"name":"self"},{"name":"orderset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if all elements of `other` are contained in `self`.",2,{"inputs":[{"name":"self"},{"name":"orderset"}],"output":{"name":"bool"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"fold","","",8,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"next_back","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"fold","","",9,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"Equivalent","ordermap","Key equivalence trait.",null,null],[10,"equivalent","","Compare self to `key` and return `true` if they are equal.",10,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"bool"}}],[8,"MutableKeys","","Opt-in mutable access to keys.",null,null],[16,"Key","","",11,null],[16,"Value","","",11,null],[10,"get_full_mut2","","Return item index, mutable reference to key and value",11,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[10,"retain2","","Scan through each key-value pair in the map and keep those where the closure `keep` returns `true`.",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"__private_marker","","This method is not useful in itself – it is there to “seal” the trait for external implementation, so that we can add methods without causing breaking changes.",11,{"inputs":[{"name":"self"}],"output":{"name":"privatemarker"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"ordermap"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new map. (Does not allocate.)",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Create a new map with capacity for `n` key-value pairs. (Does not allocate if `n` is zero.)",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_capacity_and_hasher","","Create a new map with capacity for `n` key-value pairs. (Does not allocate if `n` is zero.)",1,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"self"}}],[11,"len","","Return the number of key-value pairs in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"with_hasher","","Create a new map with `hash_builder`",1,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"hasher","","Return a reference to the map's `BuildHasher`.",1,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"capacity","","Computes in O(1) time.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"or_insert","","Computes in O(1) time (amortized average).",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Computes in O(1) time (amortized average).",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","",0,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"index","","Return the index where the key-value pair exists or will be inserted.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"key","","",12,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"get","","",12,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","",12,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"index","","Return the index of the key-value pair",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_mut","","",12,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","",12,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"remove_entry","","Remove and return the key, value pair stored in the map for this entry",12,null],[11,"key","","",13,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"into_key","","",13,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"index","","Return the index where the key-value pair will be inserted.",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"insert","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"clear","","Remove all key-value pairs in the map, while preserving its capacity.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"reserve","","Reserve capacity for `additional` more key-value pairs.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"insert","","Insert a key-value pair in the map.",1,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"entry","","Get the given key’s corresponding entry in the map for insertion and/or in-place manipulation.",1,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"iter","","Return an iterator over the key-value pairs of the map, in their order",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Return an iterator over the key-value pairs of the map, in their order",1,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Return an iterator over the keys of the map, in their order",1,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Return an iterator over the values of the map, in their order",1,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","Return an iterator over mutable references to the the values of the map, in their order",1,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"contains_key","","Return `true` if and equivalent to `key` exists in the map.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Return a reference to the value stored for `key`, if it is present, else `None`.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_full","","Return item index, key and value",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_mut","","",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_full_mut","","",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"remove","","NOTE: Same as .swap_remove",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"swap_remove","","Remove the key-value pair equivalent to `key` and return its value.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"swap_remove_full","","Remove the key-value pair equivalent to `key` and return it and the index it had.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"pop","","Remove the last key-value pair",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"retain","","Scan through each key-value pair in the map and keep those where the closure `keep` returns `true`.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"sort_keys","","Sort the map’s key-value pairs by the default ordering of the keys.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"sort_by","","Sort the map’s key-value pairs in place using the comparison function `compare`.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"sorted_by","","Sort the key-value pairs of the map and return a by value iterator of the key-value pairs with the result.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"intoiter"}}],[11,"drain","","Clears the `OrderMap`, returning all key-value pairs as a drain iterator. Keeps the allocated memory for reuse.",1,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"drain"}}],[11,"get_index","","Get a key-value pair by index",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_index_mut","","Get a key-value pair by index",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_index","","Remove the key-value pair by index",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"count","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"collect","","",14,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"next_back","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"count","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"collect","","",15,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"next_back","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"count","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",16,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"collect","","",16,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"next_back","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"count","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"collect","","",17,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"next_back","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"count","","",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"collect","","",18,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"next_back","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"count","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"collect","","",19,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"next_back","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"count","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"collect","","",20,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"next_back","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_iter","","",1,null],[11,"index","","Panics if `key` is not present in the map.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"index_mut","","Panics if `key` is not present in the map.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"from_iter","","Create an `OrderMap` from the sequence of key-value pairs in the iterable.",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","Extend the map with all key-value pairs in the iterable.",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","Extend the map with all key-value pairs in the iterable.",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"default","","Return an empty `OrderMap`",1,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"ordermap"}],"output":{"name":"bool"}}],[14,"ordermap","","Create an `OrderMap` from a list of key-value pairs",null,null],[14,"orderset","","Create an `OrderSet` from a list of values",null,null]],"paths":[[4,"Entry"],[3,"OrderMap"],[3,"OrderSet"],[3,"IntoIter"],[3,"Iter"],[3,"Drain"],[3,"Difference"],[3,"Intersection"],[3,"SymmetricDifference"],[3,"Union"],[8,"Equivalent"],[8,"MutableKeys"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["petgraph"] = {"doc":"petgraph is a graph data structure library.","items":[[4,"Direction","petgraph","Edge direction.",null,null],[13,"Outgoing","","An `Outgoing` edge is an outward edge from the current node.",0,null],[13,"Incoming","","An `Incoming` edge is an inbound edge to the current node.",0,null],[4,"Directed","","Marker type for a directed graph.",null,null],[4,"Undirected","","Marker type for an undirected graph.",null,null],[0,"visit","","Graph traits and graph traversals.",null,null],[3,"NodeFiltered","petgraph::visit","A node-filtering graph adaptor.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[3,"NodeFilteredNeighbors","","A filtered neighbors iterator.",null,null],[3,"NodeFilteredNodes","","A filtered node references iterator.",null,null],[3,"NodeFilteredEdgeReferences","","A filtered edges iterator.",null,null],[3,"NodeFilteredEdges","","A filtered edges iterator.",null,null],[3,"EdgeFiltered","","An edge-filtering graph adaptor.",null,null],[12,"0","","",2,null],[12,"1","","",2,null],[3,"EdgeFilteredNeighbors","","A filtered neighbors iterator.",null,null],[3,"EdgeFilteredEdges","","A filtered edges iterator.",null,null],[3,"Reversed","","An edge-reversing graph adaptor.",null,null],[12,"0","","",3,null],[3,"ReversedEdgeReference","","A reversed edge reference",null,null],[3,"ReversedEdgeReferences","","A reversed edge references iterator.",null,null],[3,"Time","","Strictly monotonically increasing event time for a depth first search.",null,null],[12,"0","","",4,null],[3,"Dfs","","Visit nodes of a graph in a depth-first-search (DFS) emitting nodes in preorder (when they are first discovered).",null,null],[12,"stack","","The stack of nodes to visit",5,null],[12,"discovered","","The map of discovered nodes",5,null],[3,"DfsPostOrder","","Visit nodes in a depth-first-search (DFS) emitting nodes in postorder (each node after all its descendants have been emitted).",null,null],[12,"stack","","The stack of nodes to visit",6,null],[12,"discovered","","The map of discovered nodes",6,null],[12,"finished","","The map of finished nodes",6,null],[3,"Bfs","","A breadth first search (BFS) of a graph.",null,null],[12,"stack","","The queue of nodes to visit",7,null],[12,"discovered","","The map of discovered nodes",7,null],[3,"Topo","","A topological order traversal for a graph.",null,null],[3,"WalkerIter","","A walker and its context wrapped into an iterator.",null,null],[4,"DfsEvent","","A depth first search (DFS) visitor event.",null,null],[13,"Discover","","",8,null],[13,"TreeEdge","","An edge of the tree formed by the traversal.",8,null],[13,"BackEdge","","An edge to an already visited node.",8,null],[13,"CrossForwardEdge","","A cross or forward edge.",8,null],[13,"Finish","","",8,null],[4,"Control","","Control flow for callbacks.",null,null],[13,"Continue","","",9,null],[13,"Break","","",9,null],[5,"depth_first_search","","A recursive depth first search.",null,{"inputs":[{"name":"g"},{"name":"i"},{"name":"f"}],"output":{"name":"c"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"time"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"time"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"time"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"time"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"time"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"time"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"time"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"time"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"time"}],"output":{"name":"ordering"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"time"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"dfsevent"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"control"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"breaking","","",9,{"inputs":[],"output":{"name":"control"}}],[11,"break_value","","Get the value in `Control::Break(_)`, if present.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"continuing","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"should_break","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"dfs"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Dfs, using the graph's visitor map, and put start in the stack of nodes to visit.",5,{"inputs":[{"name":"g"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_parts","","Create a `Dfs` from a vector and a visit map",5,{"inputs":[{"name":"vec"},{"name":"vm"}],"output":{"name":"self"}}],[11,"reset","","Clear the visit state",5,{"inputs":[{"name":"self"},{"name":"g"}],"output":null}],[11,"empty","","Create a new Dfs using the graph's visitor map, and no stack.",5,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"move_to","","Keep the discovered map, but clear the visit stack and restart the dfs from a particular node.",5,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"next","","Return the next node in the dfs, or None if the traversal is done.",5,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"dfspostorder"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `DfsPostOrder` using the graph's visitor map, and put `start` in the stack of nodes to visit.",6,{"inputs":[{"name":"g"},{"name":"n"}],"output":{"name":"self"}}],[11,"empty","","Create a new `DfsPostOrder` using the graph's visitor map, and no stack.",6,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"reset","","Clear the visit state",6,{"inputs":[{"name":"self"},{"name":"g"}],"output":null}],[11,"move_to","","Keep the discovered and finished map, but clear the visit stack and restart the dfs from a particular node.",6,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"next","","Return the next node in the traversal, or `None` if the traversal is done.",6,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bfs"}}],[11,"new","","Create a new Bfs, using the graph's visitor map, and put start in the stack of nodes to visit.",7,{"inputs":[{"name":"g"},{"name":"n"}],"output":{"name":"self"}}],[11,"next","","Return the next node in the bfs, or None if the traversal is done.",7,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"topo"}}],[11,"new","","Create a new `Topo`, using the graph's visitor map, and put all initial nodes in the to visit list.",10,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"reset","","Clear visited state, and put all initial nodes in the to visit list.",10,{"inputs":[{"name":"self"},{"name":"g"}],"output":null}],[11,"next","","Return the next node in the current topological order traversal, or `None` if the traversal is at the end.",10,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"walkeriter"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"context","","",11,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"inner_ref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"inner_mut","","",11,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"walk_next","","",5,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"walk_next","","",6,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"walk_next","","",7,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"walk_next","","",10,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"nodefiltered"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_fn","","Create an `NodeFiltered` adaptor from the closure `filter`.",1,{"inputs":[{"name":"g"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"node_weight","","",1,null],[11,"edge_weight","","",1,null],[11,"node_bound","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_index","","",1,null],[11,"from_index","","",1,null],[11,"visit_map","","",1,null],[11,"reset_map","","",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"edgefiltered"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_fn","","Create an `EdgeFiltered` adaptor from the closure `filter`.",2,{"inputs":[{"name":"g"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"node_count","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"node_bound","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_index","","",2,null],[11,"from_index","","",2,null],[11,"visit_map","","",2,null],[11,"reset_map","","",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"reversed"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"neighbors","","",3,null],[11,"neighbors_directed","","",3,null],[11,"visit_map","","",3,null],[11,"reset_map","","",3,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"reversededgereference"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"source","","",18,null],[11,"target","","",18,null],[11,"weight","","",18,null],[11,"id","","",18,null],[11,"edge_references","","",3,null],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"node_bound","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_index","","",3,null],[11,"from_index","","",3,null],[11,"node_identifiers","","",3,null],[11,"node_references","","",3,null],[11,"node_count","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"FilterNode","","A graph filter for nodes.",null,null],[10,"include_node","","Return true to have the node be part of the graph",20,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"bool"}}],[8,"FilterEdge","","A graph filter for edges",null,null],[10,"include_edge","","Return true to have the edge be part of the graph",21,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"bool"}}],[8,"ControlFlow","","Control flow for callbacks.",null,null],[10,"continuing","","",22,{"inputs":[],"output":{"name":"self"}}],[10,"should_break","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Walker","","A walker is a traversal state, but where part of the traversal information is supplied manually to each next call.",null,null],[16,"Item","","",23,null],[10,"walk_next","","Advance to the next item",23,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"option"}}],[11,"iter","","Create an iterator out of the walker and given `context`.",23,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"walkeriter"}}],[8,"GraphBase","","Base graph trait: defines the associated node identifier and edge identifier types.",null,null],[16,"EdgeId","","edge identifier",24,null],[16,"NodeId","","node identifier",24,null],[8,"GraphRef","","A copyable reference to a graph.",null,null],[8,"IntoNeighbors","","Access to the neighbors of each node",null,null],[16,"Neighbors","","",25,null],[10,"neighbors","","Return an iterator of the neighbors of node `a`.",25,null],[8,"IntoNeighborsDirected","","Access to the neighbors of each node, through incoming or outgoing edges.",null,null],[16,"NeighborsDirected","","",26,null],[10,"neighbors_directed","","",26,null],[8,"IntoEdges","","Access to the edges of each node.",null,null],[16,"Edges","","",27,null],[10,"edges","","",27,null],[8,"IntoEdgesDirected","","Access to all edges of each node, in the specified direction.",null,null],[16,"EdgesDirected","","",28,null],[10,"edges_directed","","",28,null],[8,"IntoNodeIdentifiers","","Access to the sequence of the graph’s `NodeId`s.",null,null],[16,"NodeIdentifiers","","",29,null],[10,"node_identifiers","","",29,null],[8,"Data","","Define associated data for nodes and edges",null,null],[16,"NodeWeight","","",30,null],[16,"EdgeWeight","","",30,null],[8,"EdgeRef","","An edge reference.",null,null],[16,"NodeId","","",31,null],[16,"EdgeId","","",31,null],[16,"Weight","","",31,null],[10,"source","","The source node of the edge.",31,null],[10,"target","","The target node of the edge.",31,null],[10,"weight","","A reference to the weight of the edge.",31,null],[10,"id","","The edge’s identifier.",31,null],[8,"NodeRef","","A node reference.",null,null],[16,"NodeId","","",32,null],[16,"Weight","","",32,null],[10,"id","","",32,null],[10,"weight","","",32,null],[8,"IntoNodeReferences","","Access to the sequence of the graph’s nodes",null,null],[16,"NodeRef","","",33,null],[16,"NodeReferences","","",33,null],[10,"node_references","","",33,null],[8,"IntoEdgeReferences","","Access to the sequence of the graph’s edges",null,null],[16,"EdgeRef","","",34,null],[16,"EdgeReferences","","",34,null],[10,"edge_references","","",34,null],[8,"GraphProp","","Edge kind property (directed or undirected edges)",null,null],[16,"EdgeType","","The kind edges in the graph.",35,null],[11,"is_directed","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"NodeIndexable","","The graph’s `NodeId`s map to indices",null,null],[10,"node_bound","","Return an upper bound of the node indices in the graph (suitable for the size of a bitmap).",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"to_index","","Convert `a` to an integer index.",36,null],[10,"from_index","","Convert `i` to a node index",36,null],[8,"NodeCount","","A graph with a known node count.",null,null],[10,"node_count","","",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"NodeCompactIndexable","","The graph’s `NodeId`s map to indices, in a range without holes.",null,null],[8,"VisitMap","","A mapping for storing the visited status for NodeId `N`.",null,null],[10,"visit","","Mark `a` as visited.",38,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"bool"}}],[10,"is_visited","","Return whether `a` has been visited before.",38,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"bool"}}],[8,"Visitable","","A graph that can create a map that tracks the visited status of its nodes.",null,null],[16,"Map","","The associated map type",39,null],[10,"visit_map","","Create a new visitor map",39,null],[10,"reset_map","","Reset the visitor map (and resize to new size of graph if needed)",39,null],[8,"GetAdjacencyMatrix","","Create or access the adjacency matrix of a graph.",null,null],[16,"AdjMatrix","","The associated adjacency matrix type",40,null],[10,"adjacency_matrix","","Create the adjacency matrix",40,null],[10,"is_adjacent","","Return true if there is an edge from `a` to `b`, false otherwise.",40,null],[0,"data","petgraph","Graph traits for associated data and graph construction.",null,null],[3,"FilterElements","petgraph::data","An iterator that filters graph elements.",null,null],[4,"Element","","A graph element.",null,null],[13,"Node","","A graph node.",41,null],[12,"weight","petgraph::data::Element","",41,null],[13,"Edge","petgraph::data","A graph edge.",41,null],[12,"source","petgraph::data::Element","",41,null],[12,"target","","",41,null],[12,"weight","","",41,null],[8,"DataMap","petgraph::data","Access node and edge weights (associated data).",null,null],[10,"node_weight","","",42,null],[10,"edge_weight","","",42,null],[8,"DataMapMut","","Access node and edge weights mutably.",null,null],[10,"node_weight_mut","","",43,null],[10,"edge_weight_mut","","",43,null],[8,"Build","","A graph that can be extended with further nodes and edges",null,null],[10,"add_node","","",44,null],[11,"add_edge","","Add a new edge. If parallel edges (duplicate) are not allowed and the edge already exists, return `None`.",44,null],[10,"update_edge","","Add or update the edge from `a` to `b`. Return the id of the affected edge.",44,null],[8,"Create","","A graph that can be created",null,null],[10,"with_capacity","","",45,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[8,"FromElements","","Create a graph from an iterator of elements.",null,null],[11,"from_elements","","",46,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[8,"ElementIterator","","Iterator adaptors for iterators of `Element`.",null,null],[11,"filter_elements","","Create an iterator adaptor that filters graph elements.",47,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filterelements"}}],[11,"node_weight","petgraph::visit","",3,null],[11,"edge_weight","","",3,null],[11,"node_weight_mut","","",3,null],[11,"edge_weight_mut","","",3,null],[11,"clone","petgraph::data","",41,{"inputs":[{"name":"self"}],"output":{"name":"element"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"element"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"element"}],"output":{"name":"bool"}}],[11,"next","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"algo","petgraph","Graph algorithms.",null,null],[3,"DfsSpace","petgraph::algo","Workspace for a graph traversal.",null,null],[3,"MinSpanningTree","","An iterator producing a minimum spanning forest of a graph.",null,null],[3,"Cycle","","An algorithm error: a cycle was found in the graph.",null,null],[3,"NegativeCycle","","An algorithm error: a cycle of negative weights was found in the graph.",null,null],[5,"is_isomorphic","","[Graph] Return `true` if the graphs `g0` and `g1` are isomorphic.",null,{"inputs":[{"name":"graph"},{"name":"graph"}],"output":{"name":"bool"}}],[5,"is_isomorphic_matching","","[Graph] Return `true` if the graphs `g0` and `g1` are isomorphic.",null,{"inputs":[{"name":"graph"},{"name":"graph"},{"name":"f"},{"name":"g"}],"output":{"name":"bool"}}],[5,"dijkstra","","[Generic] Dijkstra's shortest path algorithm.",null,null],[5,"astar","","[Generic] A* shortest path algorithm.",null,null],[5,"connected_components","","[Generic] Return the number of connected components of the graph.",null,{"inputs":[{"name":"g"}],"output":{"name":"usize"}}],[5,"is_cyclic_undirected","","[Generic] Return `true` if the input graph contains a cycle.",null,{"inputs":[{"name":"g"}],"output":{"name":"bool"}}],[5,"toposort","","[Generic] Perform a topological sort of a directed graph.",null,{"inputs":[{"name":"g"},{"generics":["dfsspace"],"name":"option"}],"output":{"generics":["vec","cycle"],"name":"result"}}],[5,"is_cyclic_directed","","[Generic] Return `true` if the input directed graph contains a cycle.",null,{"inputs":[{"name":"g"}],"output":{"name":"bool"}}],[5,"has_path_connecting","","[Generic] Check if there exists a path starting at `from` and reaching `to`.",null,null],[5,"scc","","Renamed to `kosaraju_scc`.",null,{"inputs":[{"name":"g"}],"output":{"generics":["vec"],"name":"vec"}}],[5,"kosaraju_scc","","[Generic] Compute the strongly connected components using [Kosaraju's algorithm][1].",null,{"inputs":[{"name":"g"}],"output":{"generics":["vec"],"name":"vec"}}],[5,"tarjan_scc","","[Generic] Compute the strongly connected components using [Tarjan's algorithm][1].",null,{"inputs":[{"name":"g"}],"output":{"generics":["vec"],"name":"vec"}}],[5,"condensation","","[Graph] Condense every strongly connected component into a single node and return the result.",null,{"inputs":[{"name":"graph"},{"name":"bool"}],"output":{"generics":["vec"],"name":"graph"}}],[5,"min_spanning_tree","","[Generic] Compute a minimum spanning tree of a graph.",null,{"inputs":[{"name":"g"}],"output":{"name":"minspanningtree"}}],[5,"bellman_ford","","[Generic] Compute shortest paths from node `source` to all other.",null,null],[0,"dominators","","Compute dominators of a control-flow graph.",null,null],[3,"Dominators","petgraph::algo::dominators","The dominance relation for some graph and root.",null,null],[3,"DominatorsIter","","Iterator for a node's dominators.",null,null],[5,"simple_fast","","This is an implementation of the engineered [\"Simple, Fast Dominance Algorithm\"][0] discovered by Cooper et al.",null,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"dominators"}}],[11,"root","","Get the root node used to construct these dominance relations.",49,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"immediate_dominator","","Get the immediate dominator of the given node.",49,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"strict_dominators","","Iterate over the given node's that strict dominators.",49,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"generics":["dominatorsiter"],"name":"option"}}],[11,"dominators","","Iterate over all of the given node's dominators (including the given node itself).",49,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"generics":["dominatorsiter"],"name":"option"}}],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"Measure","petgraph::algo","Associated data that can be used for measures (such as length).",null,null],[8,"FloatMeasure","","A floating-point measure.",null,null],[10,"zero","","",51,{"inputs":[],"output":{"name":"self"}}],[10,"infinite","","",51,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"dfsspace"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",52,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"default","","",52,{"inputs":[],"output":{"name":"self"}}],[11,"next","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"cycle"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"cycle"}],"output":{"name":"bool"}}],[11,"node_id","","Return a node id that participates in the cycle",54,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"negativecycle"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"negativecycle"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"negativecycle"}],"output":{"name":"bool"}}],[0,"graphmap","petgraph","`GraphMap<N, E, Ty>` is a graph datastructure where node values are mapping keys.",null,null],[3,"GraphMap","petgraph::graphmap","`GraphMap<N, E, Ty>` is a graph datastructure using an associative array of its node weights `N`.",null,null],[3,"Nodes","","",null,null],[3,"Neighbors","","",null,null],[3,"NeighborsDirected","","",null,null],[3,"Edges","","",null,null],[3,"AllEdges","","",null,null],[3,"AllEdgesMut","","",null,null],[3,"Ptr","","A reference that is hashed and compared by its pointer value.",null,null],[12,"0","","",56,null],[3,"NodeIdentifiers","","",null,null],[3,"NodeReferences","","",null,null],[6,"UnGraphMap","","A `GraphMap` with undirected edges.",null,null],[6,"DiGraphMap","","A `GraphMap` with directed edges.",null,null],[8,"NodeTrait","","A trait group for `GraphMap`'s node identifier.",null,null],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"graphmap"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `GraphMap`",57,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Create a new `GraphMap` with estimated capacity.",57,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"capacity","","Return the current node and edge capacity of the graph.",57,null],[11,"is_directed","","Whether the graph has directed edges.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_edges","","Create a new `GraphMap` from an iterable of edges.",57,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"node_count","","Return the number of nodes in the graph.",57,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"edge_count","","Return the number of edges in the graph.",57,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Remove all nodes and edges",57,{"inputs":[{"name":"self"}],"output":null}],[11,"add_node","","Add node `n` to the graph.",57,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"n"}}],[11,"remove_node","","Return `true` if node `n` was removed.",57,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"bool"}}],[11,"contains_node","","Return `true` if the node is contained in the graph.",57,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"bool"}}],[11,"add_edge","","Add an edge connecting `a` and `b` to the graph, with associated data `weight`. For a directed graph, the edge is directed from `a` to `b`.",57,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"},{"name":"e"}],"output":{"name":"option"}}],[11,"remove_edge","","Remove edge from `a` to `b` from the graph and return the edge weight.",57,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":{"name":"option"}}],[11,"contains_edge","","Return `true` if the edge connecting `a` with `b` is contained in the graph.",57,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":{"name":"bool"}}],[11,"nodes","","Return an iterator over the nodes of the graph.",57,{"inputs":[{"name":"self"}],"output":{"name":"nodes"}}],[11,"neighbors","","Return an iterator of all nodes with an edge starting from `a`.",57,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"neighbors"}}],[11,"neighbors_directed","","Return an iterator of all neighbors that have an edge between them and `a`, in the specified direction. If the graph's edges are undirected, this is equivalent to .neighbors(a).",57,{"inputs":[{"name":"self"},{"name":"n"},{"name":"direction"}],"output":{"name":"neighborsdirected"}}],[11,"edges","","Return an iterator of target nodes with an edge starting from `a`, paired with their respective edge weights.",57,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"edges"}}],[11,"edge_weight","","Return a reference to the edge weight connecting `a` with `b`, or `None` if the edge does not exist in the graph.",57,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":{"name":"option"}}],[11,"edge_weight_mut","","Return a mutable reference to the edge weight connecting `a` with `b`, or `None` if the edge does not exist in the graph.",57,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":{"name":"option"}}],[11,"all_edges","","Return an iterator over all edges of the graph with their weight in arbitrary order.",57,{"inputs":[{"name":"self"}],"output":{"name":"alledges"}}],[11,"all_edges_mut","","Return an iterator over all edges of the graph in arbitrary order, with a mutable reference to their weight.",57,{"inputs":[{"name":"self"}],"output":{"name":"alledgesmut"}}],[11,"into_graph","","Return a `Graph` that corresponds to this `GraphMap`.",57,{"inputs":[{"name":"self"}],"output":{"name":"graph"}}],[11,"from_iter","","",57,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",57,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"next","","",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"next","","",59,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",60,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",61,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",62,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"count","","",62,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",62,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",62,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",62,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"count","","",63,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",63,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",57,null],[11,"index_mut","","",57,null],[11,"default","","",57,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","Ptr compares by pointer equality, i.e if they point to the same value",56,{"inputs":[{"name":"self"},{"name":"ptr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"self"},{"name":"ptr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","Ptr is ordered by pointer value, i.e. an arbitrary but stable and total order.",56,{"inputs":[{"name":"self"},{"name":"ptr"}],"output":{"name":"ordering"}}],[11,"deref","","",56,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"hash","","",56,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"node_count","","",57,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",65,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"node_bound","","",57,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_index","","",57,null],[11,"from_index","","",57,null],[0,"dot","petgraph","Simple graphviz dot file format output.",null,null],[3,"Dot","petgraph::dot","`Dot` implements output to graphviz .dot format for a graph.",null,null],[4,"Config","","`Dot` configuration.",null,null],[13,"NodeIndexLabel","","Use indices for node labels.",66,null],[13,"EdgeIndexLabel","","Use indices for edge labels.",66,null],[13,"EdgeNoLabel","","Use no edge labels.",66,null],[11,"new","","Create a `Dot` formatting wrapper with default configuration.",67,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"with_config","","Create a `Dot` formatting wrapper with custom configuration.",67,null],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"unionfind","petgraph","`UnionFind<K>` is a disjoint-set data structure.",null,null],[3,"UnionFind","petgraph::unionfind","`UnionFind<K>` is a disjoint-set data structure. It tracks set membership of n elements indexed from 0 to n - 1. The scalar type is `K` which must be an unsigned integer type.",null,null],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"unionfind"}}],[11,"new","","Create a new `UnionFind` of `n` disjoint sets.",68,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"find","","Return the representative for `x`.",68,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"k"}}],[11,"find_mut","","Return the representative for `x`.",68,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"k"}}],[11,"union","","Unify the two sets containing `x` and `y`.",68,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"bool"}}],[11,"into_labeling","","Return a vector mapping each element to its representative.",68,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[0,"csr","petgraph","Compressed Sparse Row (CSR) is a sparse adjacency matrix graph.",null,null],[3,"Csr","petgraph::csr","Compressed Sparse Row (CSR) is a sparse adjacency matrix graph.",null,null],[3,"EdgesNotSorted","","Csr creation error: edges were not in sorted order.",null,null],[3,"Edges","","",null,null],[3,"EdgeReference","","",null,null],[3,"EdgeReferences","","",null,null],[3,"Neighbors","","",null,null],[3,"NodeIdentifiers","","",null,null],[6,"NodeIndex","","Csr node index type, a plain integer.",null,null],[6,"EdgeIndex","","Csr edge index type, a plain integer.",null,null],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",69,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","Create an empty `Csr`.",69,{"inputs":[],"output":{"name":"self"}}],[11,"with_nodes","","Create a new `Csr` with `n` nodes.",69,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"edgesnotsorted"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_sorted_edges","","Create a new `Csr` from a sorted sequence of edges",69,null],[11,"node_count","","",69,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"edge_count","","",69,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_directed","","",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_edges","","Remove all edges",69,{"inputs":[{"name":"self"}],"output":null}],[11,"add_node","","Adds a new node with the given weight, returning the corresponding node index.",69,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"nodeindex"}}],[11,"add_edge","","Return `true` if the edge was added",69,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"},{"name":"e"}],"output":{"name":"bool"}}],[11,"contains_edge","","Computes in O(log |V|) time.",69,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"out_degree","","Computes in O(1) time.",69,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"usize"}}],[11,"neighbors_slice","","Computes in O(1) time.",69,null],[11,"edges_slice","","Computes in O(1) time.",69,null],[11,"edges","","Return an iterator of all edges of `a`.",69,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"edges"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"edges"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"weight","","Access the edge’s weight.",72,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"source","","",72,null],[11,"target","","",72,null],[11,"weight","","",72,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"id","","",72,null],[11,"next","","",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",73,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"visit_map","","",69,{"inputs":[{"name":"self"}],"output":{"name":"fixedbitset"}}],[11,"reset_map","","",69,null],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"neighbors"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",74,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"node_bound","","",69,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_index","","",69,null],[11,"from_index","","",69,null],[11,"index","","",69,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"index_mut","","",69,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"next","","",75,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"node_count","","",69,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"prelude","petgraph","Commonly used items.",null,null],[0,"graph","","`Graph<N, E, Ty, Ix>` is a graph datastructure using an adjacency list representation.",null,null],[3,"Edge","petgraph::graph","The graph's edge type.",null,null],[12,"weight","","Associated edge data.",76,null],[3,"EdgeIndex","","Edge identifier.",null,null],[3,"EdgeIndices","","Iterator over the edge indices of a graph.",null,null],[3,"EdgeReference","","Reference to a `Graph` edge.",null,null],[3,"EdgeReferences","","Iterator over all edges of a graph.",null,null],[3,"EdgeWeightsMut","","Iterator yielding mutable access to all edge weights.",null,null],[3,"Edges","","Iterator over the edges of from or to a node",null,null],[3,"Externals","","An iterator over either the nodes without edges to them or from them.",null,null],[3,"Frozen","","`Frozen` only allows shared access (read-only) to the underlying graph `G`, but it allows mutable access to its node and edge weights.",null,null],[3,"Graph","","`Graph<N, E, Ty, Ix>` is a graph datastructure using an adjacency list representation.",null,null],[3,"Neighbors","","Iterator over the neighbors of a node.",null,null],[3,"Node","","The graph's node type.",null,null],[12,"weight","","Associated node data.",77,null],[3,"NodeIndex","","Node identifier.",null,null],[3,"NodeIndices","","Iterator over the node indices of a graph.",null,null],[3,"NodeWeightsMut","","Iterator yielding mutable access to all node weights.",null,null],[3,"NodeReferences","","Iterator over all nodes of a graph.",null,null],[3,"WalkNeighbors","","A “walker” object that can be used to step through the edge list of a node.",null,null],[5,"edge_index","","Short version of `EdgeIndex::new`",null,{"inputs":[{"name":"usize"}],"output":{"name":"edgeindex"}}],[5,"node_index","","Short version of `NodeIndex::new`",null,{"inputs":[{"name":"usize"}],"output":{"name":"nodeindex"}}],[6,"DefaultIx","","The default integer type for graph indices. `u32` is the default to reduce the size of the graph's data and improve performance in the common case.",null,null],[6,"DiGraph","","A `Graph` with directed edges.",null,null],[6,"UnGraph","","A `Graph` with undirected edges.",null,null],[8,"GraphIndex","","A  `GraphIndex` is a node or edge index.",null,null],[8,"IndexType","","Trait for the unsigned integer type used for node and edge indices.",null,null],[10,"new","","",78,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"index","","",78,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"max","","",78,{"inputs":[],"output":{"name":"self"}}],[0,"stable_graph","petgraph","`StableGraph` keeps indices stable across removals.",null,null],[3,"StableGraph","petgraph::stable_graph","`StableGraph<N, E, Ty, Ix>` is a graph datastructure using an adjacency list representation.",null,null],[3,"NodeReferences","","Iterator over all nodes of a graph.",null,null],[3,"EdgeReference","","Reference to a `StableGraph` edge.",null,null],[3,"Edges","","Iterator over the edges of from or to a node",null,null],[3,"EdgeReferences","","Iterator over all edges of a graph.",null,null],[3,"Neighbors","","Iterator over the neighbors of a node.",null,null],[3,"WalkNeighbors","","A “walker” object that can be used to step through the edge list of a node.",null,null],[3,"NodeIndices","","Iterator over the node indices of a graph.",null,null],[3,"EdgeIndices","","Iterator over the edge indices of a graph.",null,null],[6,"StableDiGraph","","A `StableGraph` with directed edges.",null,null],[6,"StableUnGraph","","A `StableGraph` with undirected edges.",null,null],[8,"EdgeType","petgraph","A graph's edge type determines whether is has directed edges or not.",null,null],[10,"is_directed","","",79,{"inputs":[],"output":{"name":"bool"}}],[8,"IntoWeightedEdge","","Convert an element like `(i, j)` or `(i, j, w)` into a triple of source, target, edge weight.",null,null],[16,"NodeId","","",80,null],[10,"into_weighted_edge","","",80,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"opposite","","Return the opposite `Direction`.",0,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[11,"index","","Return `0` for `Outgoing` and `1` for `Incoming`.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"is_directed","","",81,{"inputs":[],"output":{"name":"bool"}}],[11,"is_directed","","",82,{"inputs":[],"output":{"name":"bool"}}],[11,"iter","petgraph::visit","Create an iterator out of the walker and given `context`.",23,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"walkeriter"}}],[11,"node_count","petgraph::graph","",83,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"node_count","petgraph::stable_graph","",84,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"node_bound","petgraph::graph","",83,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_index","","",83,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"usize"}}],[11,"from_index","","",83,null],[11,"visit_map","","",83,{"inputs":[{"name":"self"}],"output":{"name":"fixedbitset"}}],[11,"reset_map","","",83,null],[11,"visit_map","petgraph::stable_graph","",84,{"inputs":[{"name":"self"}],"output":{"name":"fixedbitset"}}],[11,"reset_map","","",84,null],[11,"visit_map","petgraph::graphmap","",57,{"inputs":[{"name":"self"}],"output":{"name":"hashset"}}],[11,"reset_map","","",57,null],[11,"adjacency_matrix","","",57,{"inputs":[{"name":"self"}],"output":null}],[11,"is_adjacent","","",57,null],[11,"node_weight","petgraph::graph","",83,null],[11,"edge_weight","","",83,null],[11,"node_weight_mut","","",83,null],[11,"edge_weight_mut","","",83,null],[11,"node_weight","petgraph::stable_graph","",84,null],[11,"edge_weight","","",84,null],[11,"node_weight_mut","","",84,null],[11,"edge_weight_mut","","",84,null],[11,"add_node","petgraph::graph","",83,null],[11,"add_edge","","",83,null],[11,"update_edge","","",83,null],[11,"add_node","petgraph::stable_graph","",84,null],[11,"add_edge","","",84,null],[11,"update_edge","","",84,null],[11,"add_node","petgraph::graphmap","",57,null],[11,"add_edge","","",57,null],[11,"update_edge","","",57,null],[11,"with_capacity","petgraph::graph","",83,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"with_capacity","petgraph::stable_graph","",84,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"with_capacity","petgraph::graphmap","",57,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from_elements","petgraph::graph","",83,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"from_elements","petgraph::stable_graph","",84,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"from_elements","petgraph::graphmap","",57,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"fmt","petgraph::stable_graph","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `StableGraph` with directed edges.",84,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Create a new `StableGraph` with estimated capacity.",84,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"capacity","","Return the current node and edge capacity of the graph.",84,null],[11,"clear","","Remove all nodes and edges",84,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_edges","","Remove all edges",84,{"inputs":[{"name":"self"}],"output":null}],[11,"node_count","","Return the number of nodes (vertices) in the graph.",84,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"edge_count","","Return the number of edges in the graph.",84,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_directed","","Whether the graph has directed edges or not.",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add_node","","Add a node (also called vertex) with associated data `weight` to the graph.",84,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"nodeindex"}}],[11,"remove_node","","Remove `a` from the graph if it exists, and return its weight. If it doesn't exist in the graph, return `None`.",84,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"contains_node","","",84,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"add_edge","","Add an edge from `a` to `b` to the graph, with its associated data `weight`.",84,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"},{"name":"e"}],"output":{"name":"edgeindex"}}],[11,"update_edge","","Add or update an edge from `a` to `b`. If the edge already exists, its weight is updated.",84,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"},{"name":"e"}],"output":{"name":"edgeindex"}}],[11,"remove_edge","","Remove an edge and return its edge weight, or `None` if it didn't exist.",84,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"node_weight","","Access the weight for node `a`.",84,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"node_weight_mut","","Access the weight for node `a`, mutably.",84,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"node_indices","","Return an iterator over the node indices of the graph",84,{"inputs":[{"name":"self"}],"output":{"name":"nodeindices"}}],[11,"edge_weight","","Access the weight for edge `e`.",84,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"edge_weight_mut","","Access the weight for edge `e`, mutably",84,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"edge_endpoints","","Access the source and target nodes for `e`.",84,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"edge_indices","","Return an iterator over the node indices of the graph",84,{"inputs":[{"name":"self"}],"output":{"name":"edgeindices"}}],[11,"find_edge","","Lookup an edge from `a` to `b`.",84,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"generics":["edgeindex"],"name":"option"}}],[11,"find_edge_undirected","","Lookup an edge between `a` and `b`, in either direction.",84,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"neighbors","","Return an iterator of all nodes with an edge starting from `a`.",84,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"neighbors"}}],[11,"neighbors_directed","","Return an iterator of all neighbors that have an edge between them and `a`, in the specified direction. If the graph's edges are undirected, this is equivalent to .neighbors(a).",84,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"direction"}],"output":{"name":"neighbors"}}],[11,"neighbors_undirected","","Return an iterator of all neighbors that have an edge between them and `a`, in either direction. If the graph's edges are undirected, this is equivalent to .neighbors(a).",84,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"neighbors"}}],[11,"edges","","Return an iterator of all edges of `a`.",84,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"edges"}}],[11,"edges_directed","","Return an iterator of all edges of `a`, in the specified direction.",84,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"direction"}],"output":{"name":"edges"}}],[11,"index_twice_mut","","Index the `StableGraph` by two indices, any combination of node or edge indices is fine.",84,null],[11,"retain_nodes","","Keep all nodes that return `true` from the `visit` closure, remove the others.",84,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"retain_edges","","Keep all edges that return `true` from the `visit` closure, remove the others.",84,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"from_edges","","Create a new `StableGraph` from an iterable of edges.",84,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"map","","Create a new `StableGraph` by mapping node and edge weights to new values.",84,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"stablegraph"}}],[11,"filter_map","","Create a new `StableGraph` by mapping nodes and edges. A node or edge may be mapped to `None` to exclude it from the resulting graph.",84,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"stablegraph"}}],[11,"extend_with_edges","","Extend the graph from an iterable of edges.",84,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",84,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"index","","",84,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"index_mut","","",84,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"index","","",84,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"e"}}],[11,"index_mut","","",84,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"e"}}],[11,"default","","",84,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",84,{"inputs":[{"name":"graph"}],"output":{"name":"self"}}],[11,"from","petgraph::graph","",83,{"inputs":[{"name":"stablegraph"}],"output":{"name":"self"}}],[11,"next","petgraph::stable_graph","",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next_back","","",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"weight","","Access the edge’s weight.",86,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"source","","",86,null],[11,"target","","",86,null],[11,"weight","","",86,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"id","","",86,null],[11,"next","","",87,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",88,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",88,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"detach","","Return a “walker” object that can be used to step through the neighbors and edges from the origin node.",89,{"inputs":[{"name":"self"}],"output":{"name":"walkneighbors"}}],[11,"next","","",89,{"inputs":[{"name":"self"}],"output":{"generics":["nodeindex"],"name":"option"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","Step to the next edge and its endpoint node in the walk for graph `g`.",90,{"inputs":[{"name":"self"},{"name":"stablegraph"}],"output":{"name":"option"}}],[11,"next_node","","",90,{"inputs":[{"name":"self"},{"name":"stablegraph"}],"output":{"generics":["nodeindex"],"name":"option"}}],[11,"next_edge","","",90,{"inputs":[{"name":"self"},{"name":"stablegraph"}],"output":{"generics":["edgeindex"],"name":"option"}}],[11,"next","","",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"next_back","","",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"node_bound","","Return an upper bound of the node indices in the graph",84,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_index","","",84,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"usize"}}],[11,"from_index","","",84,null],[11,"next","","",92,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"next_back","","",92,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","petgraph::graph","",93,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"deref","","",93,{"inputs":[{"name":"self"}],"output":{"name":"g"}}],[11,"index","","",93,null],[11,"index_mut","","",93,null],[11,"index_twice_mut","","Index the `Graph` by two indices, any combination of node or edge indices is fine.",93,null],[11,"node_weight","","",93,null],[11,"edge_weight","","",93,null],[11,"node_weight_mut","","",93,null],[11,"edge_weight_mut","","",93,null],[11,"adjacency_matrix","","",93,null],[11,"is_adjacent","","",93,null],[11,"node_count","","",93,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"node_bound","","",93,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_index","","",93,null],[11,"from_index","","",93,null],[11,"visit_map","","",93,null],[11,"reset_map","","",93,null],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"default","","",94,{"inputs":[],"output":{"name":"nodeindex"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",94,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",94,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"le","","",94,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"gt","","",94,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"ge","","",94,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"cmp","","",94,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"ordering"}}],[11,"hash","","",94,null],[11,"new","","",94,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",94,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","",94,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",94,{"inputs":[{"name":"ix"}],"output":{"name":"self"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"edgeindex"}}],[11,"default","","",95,{"inputs":[],"output":{"name":"edgeindex"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",95,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",95,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"le","","",95,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"gt","","",95,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"ge","","",95,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"cmp","","",95,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"ordering"}}],[11,"hash","","",95,null],[11,"new","","",95,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",95,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","An invalid `EdgeIndex` used to denote absence of an edge, for example to end an adjacency list.",95,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next_edge","","Accessor for data structure internals: the first edge in the given direction.",77,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"edgeindex"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next_edge","","Accessor for data structure internals: the next edge for the given direction.",76,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"edgeindex"}}],[11,"source","","Return the source node index.",76,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"target","","Return the target node index.",76,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",83,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Graph` with directed edges.",83,{"inputs":[],"output":{"name":"self"}}],[11,"new_undirected","","Create a new `Graph` with undirected edges.",83,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Create a new `Graph` with estimated capacity.",83,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"node_count","","Return the number of nodes (vertices) in the graph.",83,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"edge_count","","Return the number of edges in the graph.",83,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_directed","","Whether the graph has directed edges or not.",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add_node","","Add a node (also called vertex) with associated data `weight` to the graph.",83,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"nodeindex"}}],[11,"node_weight","","Access the weight for node `a`.",83,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"node_weight_mut","","Access the weight for node `a`, mutably.",83,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"add_edge","","Add an edge from `a` to `b` to the graph, with its associated data `weight`.",83,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"},{"name":"e"}],"output":{"name":"edgeindex"}}],[11,"update_edge","","Add or update an edge from `a` to `b`. If the edge already exists, its weight is updated.",83,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"},{"name":"e"}],"output":{"name":"edgeindex"}}],[11,"edge_weight","","Access the weight for edge `e`.",83,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"edge_weight_mut","","Access the weight for edge `e`, mutably.",83,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"edge_endpoints","","Access the source and target nodes for `e`.",83,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"remove_node","","Remove `a` from the graph if it exists, and return its weight. If it doesn't exist in the graph, return `None`.",83,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"remove_edge","","Remove an edge and return its edge weight, or `None` if it didn't exist.",83,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"neighbors","","Return an iterator of all nodes with an edge starting from `a`.",83,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"neighbors"}}],[11,"neighbors_directed","","Return an iterator of all neighbors that have an edge between them and `a`, in the specified direction. If the graph's edges are undirected, this is equivalent to .neighbors(a).",83,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"direction"}],"output":{"name":"neighbors"}}],[11,"neighbors_undirected","","Return an iterator of all neighbors that have an edge between them and `a`, in either direction. If the graph's edges are undirected, this is equivalent to .neighbors(a).",83,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"neighbors"}}],[11,"edges","","Return an iterator of all edges of `a`.",83,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"edges"}}],[11,"edges_directed","","Return an iterator of all edges of `a`, in the specified direction.",83,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"direction"}],"output":{"name":"edges"}}],[11,"contains_edge","","Lookup if there is an edge from `a` to `b`.",83,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"find_edge","","Lookup an edge from `a` to `b`.",83,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"generics":["edgeindex"],"name":"option"}}],[11,"find_edge_undirected","","Lookup an edge between `a` and `b`, in either direction.",83,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"externals","","Return an iterator over either the nodes without edges to them (`Incoming`) or from them (`Outgoing`).",83,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"externals"}}],[11,"node_indices","","Return an iterator over the node indices of the graph",83,{"inputs":[{"name":"self"}],"output":{"name":"nodeindices"}}],[11,"node_weights_mut","","Return an iterator yielding mutable access to all node weights.",83,{"inputs":[{"name":"self"}],"output":{"name":"nodeweightsmut"}}],[11,"edge_indices","","Return an iterator over the edge indices of the graph",83,{"inputs":[{"name":"self"}],"output":{"name":"edgeindices"}}],[11,"edge_references","","Create an iterator over all edges, in indexed order.",83,{"inputs":[{"name":"self"}],"output":{"name":"edgereferences"}}],[11,"edge_weights_mut","","Return an iterator yielding mutable access to all edge weights.",83,{"inputs":[{"name":"self"}],"output":{"name":"edgeweightsmut"}}],[11,"raw_nodes","","Access the internal node array.",83,null],[11,"raw_edges","","Access the internal edge array.",83,null],[11,"into_nodes_edges","","Convert the graph into a vector of Nodes and a vector of Edges",83,null],[11,"first_edge","","Accessor for data structure internals: the first edge in the given direction.",83,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"direction"}],"output":{"generics":["edgeindex"],"name":"option"}}],[11,"next_edge","","Accessor for data structure internals: the next edge for the given direction.",83,{"inputs":[{"name":"self"},{"name":"edgeindex"},{"name":"direction"}],"output":{"generics":["edgeindex"],"name":"option"}}],[11,"index_twice_mut","","Index the `Graph` by two indices, any combination of node or edge indices is fine.",83,null],[11,"reverse","","Reverse the direction of all edges",83,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Remove all nodes and edges",83,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_edges","","Remove all edges",83,{"inputs":[{"name":"self"}],"output":null}],[11,"capacity","","Return the current node and edge capacity of the graph.",83,null],[11,"reserve_nodes","","Reserves capacity for at least `additional` more nodes to be inserted in the graph. Graph may reserve more space to avoid frequent reallocations.",83,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_edges","","Reserves capacity for at least `additional` more edges to be inserted in the graph. Graph may reserve more space to avoid frequent reallocations.",83,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact_nodes","","Reserves the minimum capacity for exactly `additional` more nodes to be inserted in the graph. Does nothing if the capacity is already sufficient.",83,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact_edges","","Reserves the minimum capacity for exactly `additional` more edges to be inserted in the graph. Does nothing if the capacity is already sufficient.",83,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit_nodes","","Shrinks the capacity of the underlying nodes collection as much as possible.",83,{"inputs":[{"name":"self"}],"output":null}],[11,"shrink_to_fit_edges","","Shrinks the capacity of the underlying edges collection as much as possible.",83,{"inputs":[{"name":"self"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the graph as much as possible.",83,{"inputs":[{"name":"self"}],"output":null}],[11,"retain_nodes","","Keep all nodes that return `true` from the `visit` closure, remove the others.",83,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"retain_edges","","Keep all edges that return `true` from the `visit` closure, remove the others.",83,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"from_edges","","Create a new `Graph` from an iterable of edges.",83,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend_with_edges","","Extend the graph from an iterable of edges.",83,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"map","","Create a new `Graph` by mapping node and edge weights to new values.",83,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"graph"}}],[11,"filter_map","","Create a new `Graph` by mapping nodes and edges. A node or edge may be mapped to `None` to exclude it from the resulting graph.",83,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"graph"}}],[11,"into_edge_type","","Convert the graph into either undirected or directed. No edge adjustments are done, so you may want to go over the result to remove or add edges.",83,{"inputs":[{"name":"self"}],"output":{"name":"graph"}}],[11,"next","","",96,{"inputs":[{"name":"self"}],"output":{"generics":["nodeindex"],"name":"option"}}],[11,"next","","",97,{"inputs":[{"name":"self"}],"output":{"generics":["nodeindex"],"name":"option"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"detach","","Return a “walker” object that can be used to step through the neighbors and edges from the origin node.",97,{"inputs":[{"name":"self"}],"output":{"name":"walkneighbors"}}],[11,"next","","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"next","","",100,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"index","","",83,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"index_mut","","",83,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"index","","",83,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"e"}}],[11,"index_mut","","",83,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"e"}}],[11,"default","","",83,{"inputs":[],"output":{"name":"self"}}],[11,"index","","",94,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_node_index","","",94,{"inputs":[],"output":{"name":"bool"}}],[11,"index","","",95,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_node_index","","",95,{"inputs":[],"output":{"name":"bool"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","Step to the next edge and its endpoint node in the walk for graph `g`.",101,{"inputs":[{"name":"self"},{"name":"graph"}],"output":{"name":"option"}}],[11,"next_node","","",101,{"inputs":[{"name":"self"},{"name":"graph"}],"output":{"generics":["nodeindex"],"name":"option"}}],[11,"next_edge","","",101,{"inputs":[{"name":"self"},{"name":"graph"}],"output":{"generics":["edgeindex"],"name":"option"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"nodeindices"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"next_back","","",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"edgeindices"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next_back","","",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"next","","",105,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"next_back","","",105,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"weight","","Access the edge’s weight.",104,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"source","","",104,null],[11,"target","","",104,null],[11,"weight","","",104,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"id","","",104,null],[11,"next","","",106,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"next_back","","",106,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"adjacency_matrix","","",83,{"inputs":[{"name":"self"}],"output":{"name":"fixedbitset"}}],[11,"is_adjacent","","",83,{"inputs":[{"name":"self"},{"name":"fixedbitset"},{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"adjacency_matrix","petgraph::stable_graph","",84,{"inputs":[{"name":"self"}],"output":{"name":"fixedbitset"}}],[11,"is_adjacent","","",84,{"inputs":[{"name":"self"},{"name":"fixedbitset"},{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"bool"}}]],"paths":[[4,"Direction"],[3,"NodeFiltered"],[3,"EdgeFiltered"],[3,"Reversed"],[3,"Time"],[3,"Dfs"],[3,"DfsPostOrder"],[3,"Bfs"],[4,"DfsEvent"],[4,"Control"],[3,"Topo"],[3,"WalkerIter"],[3,"NodeFilteredNeighbors"],[3,"NodeFilteredNodes"],[3,"NodeFilteredEdgeReferences"],[3,"NodeFilteredEdges"],[3,"EdgeFilteredNeighbors"],[3,"EdgeFilteredEdges"],[3,"ReversedEdgeReference"],[3,"ReversedEdgeReferences"],[8,"FilterNode"],[8,"FilterEdge"],[8,"ControlFlow"],[8,"Walker"],[8,"GraphBase"],[8,"IntoNeighbors"],[8,"IntoNeighborsDirected"],[8,"IntoEdges"],[8,"IntoEdgesDirected"],[8,"IntoNodeIdentifiers"],[8,"Data"],[8,"EdgeRef"],[8,"NodeRef"],[8,"IntoNodeReferences"],[8,"IntoEdgeReferences"],[8,"GraphProp"],[8,"NodeIndexable"],[8,"NodeCount"],[8,"VisitMap"],[8,"Visitable"],[8,"GetAdjacencyMatrix"],[4,"Element"],[8,"DataMap"],[8,"DataMapMut"],[8,"Build"],[8,"Create"],[8,"FromElements"],[8,"ElementIterator"],[3,"FilterElements"],[3,"Dominators"],[3,"DominatorsIter"],[8,"FloatMeasure"],[3,"DfsSpace"],[3,"MinSpanningTree"],[3,"Cycle"],[3,"NegativeCycle"],[3,"Ptr"],[3,"GraphMap"],[3,"Nodes"],[3,"Neighbors"],[3,"NeighborsDirected"],[3,"Edges"],[3,"AllEdges"],[3,"AllEdgesMut"],[3,"NodeIdentifiers"],[3,"NodeReferences"],[4,"Config"],[3,"Dot"],[3,"UnionFind"],[3,"Csr"],[3,"EdgesNotSorted"],[3,"Edges"],[3,"EdgeReference"],[3,"EdgeReferences"],[3,"Neighbors"],[3,"NodeIdentifiers"],[3,"Edge"],[3,"Node"],[8,"IndexType"],[8,"EdgeType"],[8,"IntoWeightedEdge"],[4,"Directed"],[4,"Undirected"],[3,"Graph"],[3,"StableGraph"],[3,"NodeReferences"],[3,"EdgeReference"],[3,"Edges"],[3,"EdgeReferences"],[3,"Neighbors"],[3,"WalkNeighbors"],[3,"NodeIndices"],[3,"EdgeIndices"],[3,"Frozen"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Externals"],[3,"Neighbors"],[3,"Edges"],[3,"NodeWeightsMut"],[3,"EdgeWeightsMut"],[3,"WalkNeighbors"],[3,"NodeIndices"],[3,"EdgeIndices"],[3,"EdgeReference"],[3,"NodeReferences"],[3,"EdgeReferences"]]};
searchIndex["quote"] = {"doc":"Quasi-quoting without a Syntex dependency, intended for use with Macros 1.1.","items":[[3,"Tokens","quote","Tokens produced by a `quote!(...)` invocation.",null,null],[3,"ByteStr","","Wrap a `&str` so it interpolates as a byte-string: `b\"abc\"`.",null,null],[12,"0","","",0,null],[3,"Hex","","Wrap an integer so it interpolates as a hexadecimal.",null,null],[12,"0","","",1,null],[3,"Ident","","An identifier that should be interpolated without quotes.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"new","","Empty tokens.",2,{"inputs":[],"output":{"name":"self"}}],[11,"append","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"append_all","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"append_separated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"append_terminated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"as_str","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"parse","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",3,null],[11,"new","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[8,"ToTokens","","Types that can be interpolated inside a `quote!(...)` invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[14,"quote","","The whole point.",null,null]],"paths":[[3,"ByteStr"],[3,"Hex"],[3,"Tokens"],[3,"Ident"],[8,"ToTokens"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from a finite iterator. The order of elements in the sample is not random.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",20,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"next_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reseed","","",23,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"generics":["f64"],"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"generics":["f64"],"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"generics":["f32"],"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"generics":["f32"],"name":"closed01"}}],[0,"os","","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",24,{"inputs":[],"output":{"generics":["osrng"],"name":"result"}}],[11,"next_u32","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReadRng` from a `Read`.",25,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",26,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",27,null],[11,"gen","","Return a random value of a `Rand` type.",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",27,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",27,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",27,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",27,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",27,null],[11,"shuffle","","Shuffle a mutable slice in place.",27,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",28,{"inputs":[{"name":"self"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",28,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",31,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"rand","","",31,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",32,{"inputs":[],"output":{"generics":["stdrng"],"name":"result"}}],[11,"next_u32","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",32,null],[11,"from_seed","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_u32","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",33,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified format configuration, returning the owned string.",4,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into an owned vector of bytes, returning the vector.",5,{"inputs":[{"name":"self"}],"output":{"generics":["vec","frombase64error"],"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"characterset"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"newline"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",8,{"inputs":[{"name":"self"}],"output":{"generics":["vec","fromhexerror"],"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack. For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"encodererror"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["stderror"],"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",17,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",17,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",17,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"generics":["buildererror"],"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"generics":["buildererror"],"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",9,{"inputs":[{"name":"self"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["json"],"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["json"],"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"into_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"json"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"stackelement"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,{"inputs":[{"name":"self"}],"output":{"generics":["stackelement"],"name":"option"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["jsonevent"],"name":"option"}}],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["json","buildererror"],"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"decoderesult"}}],[11,"read_u8","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"decoderesult"}}],[11,"read_u16","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"decoderesult"}}],[11,"read_u32","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"decoderesult"}}],[11,"read_u64","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"decoderesult"}}],[11,"read_isize","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"decoderesult"}}],[11,"read_i8","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"decoderesult"}}],[11,"read_i16","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"decoderesult"}}],[11,"read_i32","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"decoderesult"}}],[11,"read_i64","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"decoderesult"}}],[11,"read_f32","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"decoderesult"}}],[11,"read_f64","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"decoderesult"}}],[11,"read_bool","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"decoderesult"}}],[11,"read_char","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"decoderesult"}}],[11,"read_str","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"decoderesult"}}],[11,"read_enum","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"fmt","","Encodes a json value into a string",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",24,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"generics":["json","parsererror"],"name":"result"}}],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",null,null],[16,"Error","","The error type for method results.",25,null],[10,"read_nil","","Read a nil value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_usize","","Read a usize value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"read_u64","","Read a u64 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[10,"read_u32","","Read a u32 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"read_u16","","Read a u16 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[10,"read_u8","","Read a u8 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[10,"read_isize","","Read a isize value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"result"}}],[10,"read_i64","","Read a i64 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[10,"read_i32","","Read a i32 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[10,"read_i16","","Read a i16 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[10,"read_i8","","Read a i8 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[10,"read_bool","","Read a bool value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"read_f64","","Read a f64 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[10,"read_f32","","Read a f32 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[10,"read_char","","Read a char value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"result"}}],[10,"read_str","","Read a string value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"result"}}],[10,"read_enum","","Read an enumeration value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","Read an enumeration value.",25,null],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","Read an enumeration value.",25,null],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","Read an struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","Read a field for a struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","Read a tuple value.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","Read a data item for a tuple.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","Read a tuple struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","Read an optional value.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","Read a sequence of values.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","Read an element in the sequence.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","Read an associative container (map).",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","Record a decoding error.",25,null],[8,"Encoder","","Trait for writing out an encoding when serializing.",null,null],[16,"Error","","The error type for method results.",26,null],[10,"emit_nil","","Emit a nil value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_usize","","Emit a usize value.",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","Emit a u64 value.",26,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","Emit a u32 value.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","Emit a u16 value.",26,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","Emit a u8 value.",26,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","Emit a isize value.",26,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","Emit a i64 value.",26,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","Emit a i32 value.",26,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","Emit a i16 value.",26,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","Emit a i8 value.",26,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","Emit a bool value.",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","Emit a f64 value.",26,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","Emit a f32 value.",26,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","Emit a char value.",26,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","Emit a string value.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","Emit an enumeration value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","Emit a struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","Emit a field item for a struct.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","Emit a tuple value.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","Emit an optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","Emit the `None` optional value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","Emit a sequence of values.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","Emit an element in a sequence.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","Emit an associative container (map).",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","Trait for deserializing a type.",null,null],[10,"decode","","Deserialize a value using a `Decoder`.",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","Trait for serializing a type.",null,null],[10,"encode","","Serialize a value using an `Encoder`.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",null,null],[10,"read_to_vec","","Read a sequence into a vector.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["vec"],"name":"result"}}],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",null,null],[10,"emit_from_vec","","Emit a vector as a sequence.",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["rusttype"] = {"doc":"RustType is a pure Rust alternative to libraries like FreeType.","items":[[3,"Rect","rusttype","A rectangle, with top-left corner at `min`, and bottom-right corner at `max`.",null,null],[12,"min","","",0,null],[12,"max","","",0,null],[3,"Point","","A point in 2-dimensional space, with each dimension of type `N`.",null,null],[12,"x","","",1,null],[12,"y","","",1,null],[3,"Vector","","A vector in 2-dimensional space, with each dimension of type `N`.",null,null],[12,"x","","",2,null],[12,"y","","",2,null],[3,"Line","","A straight line between two points, `p[0]` and `p[1]`",null,null],[12,"p","","",3,null],[3,"Curve","","A quadratic Bezier curve, starting at `p[0]`, ending at `p[2]`, with control point `p[1]`.",null,null],[12,"p","","",4,null],[3,"FontCollection","","A collection of fonts read straight from a font file's data. The data in the collection is not validated. This structure may or may not own the font data.",null,null],[3,"Font","","A single font. This may or may not own the font data.",null,null],[3,"Codepoint","","Represents a Unicode code point.",null,null],[12,"0","","",5,null],[3,"GlyphId","","Represents a glyph identifier for a particular font. This identifier will not necessarily correspond to the correct glyph in a font other than the one that it was obtained from.",null,null],[12,"0","","",6,null],[3,"Glyph","","A single glyph of a font. this may either be a thin wrapper referring to the font and the glyph id, or it may be a standalone glyph that owns the data needed by it.",null,null],[3,"HMetrics","","The \"horizontal metrics\" of a glyph. This is useful for calculating the horizontal offset of a glyph from the previous one in a string when laying a string out horizontally.",null,null],[12,"advance_width","","The horizontal offset that the origin of the next glyph should be from the origin of this glyph.",7,null],[12,"left_side_bearing","","The horizontal offset between the origin of this glyph and the leftmost edge/point of the glyph.",7,null],[3,"VMetrics","","The \"vertical metrics\" of a font at a particular scale. This is useful for calculating the amount of vertical space to give a line of text, and for computing the vertical offset between successive lines.",null,null],[12,"ascent","","The highest point that any glyph in the font extends to above the baseline. Typically positive.",8,null],[12,"descent","","The lowest point that any glyph in the font extends to below the baseline. Typically negative.",8,null],[12,"line_gap","","The gap to leave between the descent of one line and the ascent of the next. This is of course only a guideline given by the font's designers.",8,null],[3,"ScaledGlyph","","A glyph augmented with scaling information. You can query such a glyph for information that depends on the scale of the glyph.",null,null],[3,"PositionedGlyph","","A glyph augmented with positioning and scaling information. You can query such a glyph for information that depends on the scale and position of the glyph.",null,null],[3,"Scale","","Defines the size of a rendered face of a font, in pixels, horizontally and vertically. A vertical scale of `y` pixels means that the distance betwen the ascent and descent lines (see `VMetrics`) of the face will be `y` pixels. If `x` and `y` are equal the scaling is uniform. Non-uniform scaling by a factor f in the horizontal direction is achieved by setting `x` equal to f times `y`.",null,null],[12,"x","","Horizontal scale, in pixels.",9,null],[12,"y","","Vertical scale, in pixels.",9,null],[3,"IntoFontsIter","","",null,null],[3,"GlyphIter","","",null,null],[3,"LayoutIter","","",null,null],[3,"Contour","","A closed loop consisting of a sequence of `Segment`s.",null,null],[12,"segments","","",10,null],[4,"SharedBytes","","`SharedBytes` handles the lifetime of font data used in RustType. The data is either a shared reference to externally owned data, or managed by reference counting. `SharedBytes` can be conveniently used with `From` and `Into`, and dereferences to the contained bytes.",null,null],[13,"ByRef","","",11,null],[13,"ByArc","","",11,null],[4,"CodepointOrGlyphId","","Represents either a Unicode code point, or a glyph identifier for a font.",null,null],[13,"Codepoint","","",12,null],[13,"GlyphId","","",12,null],[4,"Segment","","Part of a `Contour`, either a `Line` or a `Curve`.",null,null],[13,"Line","","",13,null],[13,"Curve","","",13,null],[5,"point","","A convenience function for generating `Point`s.",null,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"point"}}],[5,"vector","","A convenience function for generating `Vector`s.",null,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"vector"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"ordering"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"vector"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"ordering"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"vector"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"vector"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"vector"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"generics":["f32"],"name":"vector"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"generics":["f64"],"name":"vector"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"generics":["f32"],"name":"vector"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"generics":["f64"],"name":"vector"}}],[11,"add","","",1,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"point"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"point"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"line"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"curve"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"curve"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"curve"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"curve"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"curve"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"curve"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"curve"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"curve"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"ordering"}}],[11,"width","","",0,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"height","","",0,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[0,"gpu_cache","","This module provides capabilities for managing a cache of rendered glyphs in GPU memory, with the goal of minimisng the size and frequency of glyph uploads to GPU memory from the CPU.",null,null],[3,"Cache","rusttype::gpu_cache","An implementation of a dynamic GPU glyph cache. See the module documentation for more information.",null,null],[4,"CacheReadErr","","Returned from `Cache::rect_for`.",null,null],[13,"GlyphNotCached","","Indicates that the requested glyph is not present in the cache",14,null],[4,"CacheWriteErr","","Returned from `Cache::cache_queued`.",null,null],[13,"GlyphTooLarge","","At least one of the queued glyphs is too big to fit into the cache, even if all other glyphs are removed.",15,null],[13,"NoRoomForWholeQueue","","Not all of the requested glyphs can fit into the cache, even if the cache is completely cleared before the attempt.",15,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"cachereaderr"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"cachereaderr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"cachereaderr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"cachereaderr"}],"output":{"name":"ordering"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"cachewriteerr"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"cachewriteerr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"cachewriteerr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",15,{"inputs":[{"name":"self"},{"name":"cachewriteerr"}],"output":{"name":"ordering"}}],[11,"new","","Constructs a new cache. Note that this is just the CPU side of the cache. The GPU texture is managed by the user.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"cache"}}],[11,"set_scale_tolerance","","Sets the scale tolerance for the cache. See the documentation for `Cache::new` for more information.",16,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"scale_tolerance","","Returns the current scale tolerance for the cache.",16,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"set_position_tolerance","","Sets the subpixel position tolerance for the cache. See the documentation for `Cache::new` for more information.",16,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"position_tolerance","","Returns the current subpixel position tolerance for the cache.",16,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"dimensions","","Returns the cache texture dimensions assumed by the cache. For proper operation this should match the dimensions of the used GPU texture.",16,null],[11,"queue_glyph","","Queue a glyph for caching by the next call to `cache_queued`. `font_id` is used to disambiguate glyphs from different fonts. The user should ensure that `font_id` is unique to the font the glyph is from.",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"positionedglyph"}],"output":null}],[11,"clear","","Clears the cache. Does not affect the glyph queue.",16,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_queue","","Clears the glyph queue.",16,{"inputs":[{"name":"self"}],"output":null}],[11,"cache_queued","","Caches the queued glyphs. If this is unsuccessful, the queue is untouched. Any glyphs cached by previous calls to this function may be removed from the cache to make room for the newly queued glyphs. Thus if you want to ensure that a glyph is in the cache, the most recently cached queue must have contained that glyph.",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["cachewriteerr"],"name":"result"}}],[11,"rect_for","","Retrieves the (floating point) texture coordinates of the quad for a glyph in the cache, as well as the pixel-space (integer) coordinates that this region should be drawn at. In the majority of cases these pixel-space coordinates should be identical to the bounding box of the input glyph. They only differ if the cache has returned a substitute glyph that is deemed close enough to the requested glyph as specified by the cache tolerance parameters.",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"positionedglyph"}],"output":{"generics":["option","cachereaderr"],"name":"result"}}],[11,"clone","rusttype","",17,{"inputs":[{"name":"self"}],"output":{"name":"fontcollection"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"font"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"sharedbytes"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",11,null],[11,"from","","",11,null],[11,"from","","",11,{"inputs":[{"name":"arc"}],"output":{"name":"sharedbytes"}}],[11,"from","","",11,{"inputs":[{"name":"box"}],"output":{"name":"sharedbytes"}}],[11,"from","","",11,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"sharedbytes"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"codepoint"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"codepoint"}],"output":{"name":"ordering"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"codepointorglyphid"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"codepointorglyphid"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"codepointorglyphid"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"codepointorglyphid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"self"},{"name":"codepointorglyphid"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"self"},{"name":"codepointorglyphid"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"self"},{"name":"codepointorglyphid"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"self"},{"name":"codepointorglyphid"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"codepointorglyphid"}],"output":{"name":"ordering"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"glyphid"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"glyphid"}],"output":{"name":"ordering"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"glyph"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"hmetrics"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"hmetrics"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"hmetrics"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"hmetrics"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"hmetrics"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"hmetrics"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"hmetrics"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"hmetrics"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vmetrics"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"vmetrics"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"vmetrics"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"vmetrics"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"vmetrics"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"vmetrics"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"vmetrics"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"vmetrics"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"scaledglyph"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"positionedglyph"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"scale"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"uniform","","Uniform scaling, equivalent to `Scale { x: s, y: s }`.",9,{"inputs":[{"name":"f32"}],"output":{"name":"scale"}}],[11,"from","","",5,{"inputs":[{"name":"char"}],"output":{"name":"codepoint"}}],[11,"from","","",12,{"inputs":[{"name":"codepoint"}],"output":{"name":"codepointorglyphid"}}],[11,"from","","",12,{"inputs":[{"name":"glyphid"}],"output":{"name":"codepointorglyphid"}}],[11,"from","","",12,{"inputs":[{"name":"char"}],"output":{"name":"codepointorglyphid"}}],[11,"from_bytes","","Constructs a font collection from an array of bytes, typically loaded from a font file. This array may be owned (e.g. `Vec<u8>`), or borrowed (`&[u8]`). As long as `From<T>` is implemented for `Bytes` for some type `T`, `T` can be used as input.",17,{"inputs":[{"name":"b"}],"output":{"name":"fontcollection"}}],[11,"into_font","","In the common case that a font collection consists of only one font, this function consumes this font collection and turns it into a font. If this is not the case, or the font is not valid (read: not supported by this library), `None` is returned.",17,{"inputs":[{"name":"self"}],"output":{"generics":["font"],"name":"option"}}],[11,"font_at","","Gets the font at index `i` in the font collection, if it exists and is valid. The produced font borrows the font data that is either borrowed or owned by this font collection.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["font"],"name":"option"}}],[11,"into_fonts","","Converts `self` into an `Iterator` yielding each `Font` that exists within the collection.",17,{"inputs":[{"name":"self"}],"output":{"name":"intofontsiter"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"v_metrics","","The \"vertical metrics\" for this font at a given scale. These metrics are shared by all of the glyphs in the font. See `VMetrics` for more detail.",18,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"vmetrics"}}],[11,"glyph_count","","The number of glyphs present in this font. Glyph identifiers for this font will always be in the range `0..self.glyph_count()`",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"glyph","","Returns the corresponding glyph for a Unicode code point or a glyph id for this font. If id corresponds to a glyph identifier, the identifier must be valid (smaller than `self.glyph_count()`), otherwise `None` is returned.",18,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"generics":["glyph"],"name":"option"}}],[11,"glyphs_for","","A convenience function.",18,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"glyphiter"}}],[11,"layout","","A convenience function for laying out glyphs for a string horizontally. It does not take control characters like line breaks into account, as treatment of these is likely to depend on the application.",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"scale"},{"generics":["f32"],"name":"point"}],"output":{"name":"layoutiter"}}],[11,"pair_kerning","","Returns additional kerning to apply as well as that given by HMetrics for a particular pair of glyphs.",18,{"inputs":[{"name":"self"},{"name":"scale"},{"name":"a"},{"name":"b"}],"output":{"name":"f32"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"glyphiter"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["glyph"],"name":"option"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"layoutiter"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["positionedglyph"],"name":"option"}}],[11,"font","","The font to which this glyph belongs. If the glyph is a standalone glyph that owns its resources, it no longer has a reference to the font which it was created from (using `standalone()`). In which case, `None` is returned.",19,{"inputs":[{"name":"self"}],"output":{"generics":["font"],"name":"option"}}],[11,"id","","The glyph identifier for this glyph.",19,{"inputs":[{"name":"self"}],"output":{"name":"glyphid"}}],[11,"scaled","","Augments this glyph with scaling information, making methods that depend on the scale of the glyph available.",19,{"inputs":[{"name":"self"},{"name":"scale"}],"output":{"name":"scaledglyph"}}],[11,"standalone","","Turns a `Glyph<'a>` into a `Glyph<'static>`. This produces a glyph that owns its resources, extracted from the font. This glyph can outlive the font that it comes from.",19,{"inputs":[{"name":"self"}],"output":{"name":"glyph"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"segment"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"contour"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"id","","The glyph identifier for this glyph.",20,{"inputs":[{"name":"self"}],"output":{"name":"glyphid"}}],[11,"font","","The font to which this glyph belongs. If the glyph is a standalone glyph that owns its resources, it no longer has a reference to the font which it was created from (using `standalone()`). In which case, `None` is returned.",20,{"inputs":[{"name":"self"}],"output":{"generics":["font"],"name":"option"}}],[11,"into_unscaled","","A reference to this glyph without the scaling",20,{"inputs":[{"name":"self"}],"output":{"name":"glyph"}}],[11,"unscaled","","Removes the scaling from this glyph",20,{"inputs":[{"name":"self"}],"output":{"name":"glyph"}}],[11,"positioned","","Augments this glyph with positioning information, making methods that depend on the position of the glyph available.",20,{"inputs":[{"name":"self"},{"generics":["f32"],"name":"point"}],"output":{"name":"positionedglyph"}}],[11,"scale","","",20,{"inputs":[{"name":"self"}],"output":{"name":"scale"}}],[11,"h_metrics","","Retrieves the \"horizontal metrics\" of this glyph. See `HMetrics` for more detail.",20,{"inputs":[{"name":"self"}],"output":{"name":"hmetrics"}}],[11,"shape","","Produces a list of the contours that make up the shape of this glyph. Each contour consists of a sequence of segments. Each segment is either a straight `Line` or a `Curve`.",20,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"exact_bounding_box","","The bounding box of the shape of this glyph, not to be confused with `pixel_bounding_box`, the conservative pixel-boundary bounding box. The coordinates are relative to the glyph's origin.",20,{"inputs":[{"name":"self"}],"output":{"generics":["rect"],"name":"option"}}],[11,"standalone","","Constructs a glyph that owns its data from this glyph. This is similar to `Glyph::standalone`. See that function for more details.",20,{"inputs":[{"name":"self"}],"output":{"name":"scaledglyph"}}],[11,"id","","The glyph identifier for this glyph.",21,{"inputs":[{"name":"self"}],"output":{"name":"glyphid"}}],[11,"font","","The font to which this glyph belongs. If the glyph is a standalone glyph that owns its resources, it no longer has a reference to the font which it was created from (using `standalone()`). In which case, `None` is returned.",21,{"inputs":[{"name":"self"}],"output":{"generics":["font"],"name":"option"}}],[11,"unpositioned","","A reference to this glyph without positioning",21,{"inputs":[{"name":"self"}],"output":{"name":"scaledglyph"}}],[11,"into_unpositioned","","Removes the positioning from this glyph",21,{"inputs":[{"name":"self"}],"output":{"name":"scaledglyph"}}],[11,"pixel_bounding_box","","The conservative pixel-boundary bounding box for this glyph. This is the smallest rectangle aligned to pixel boundaries that encloses the shape of this glyph at this position.",21,{"inputs":[{"name":"self"}],"output":{"generics":["rect"],"name":"option"}}],[11,"shape","","Similar to `ScaledGlyph::shape()`, but with the position of the glyph taken into account.",21,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"scale","","",21,{"inputs":[{"name":"self"}],"output":{"name":"scale"}}],[11,"position","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"point"}}],[11,"draw","","Rasterises this glyph. For each pixel in the rect given by `pixel_bounding_box()`, `o` is called:",21,{"inputs":[{"name":"self"},{"name":"o"}],"output":null}],[11,"standalone","","Constructs a glyph that owns its data from this glyph. This is similar to `Glyph::standalone`. See that function for more details.",21,{"inputs":[{"name":"self"}],"output":{"name":"positionedglyph"}}]],"paths":[[3,"Rect"],[3,"Point"],[3,"Vector"],[3,"Line"],[3,"Curve"],[3,"Codepoint"],[3,"GlyphId"],[3,"HMetrics"],[3,"VMetrics"],[3,"Scale"],[3,"Contour"],[4,"SharedBytes"],[4,"CodepointOrGlyphId"],[4,"Segment"],[4,"CacheReadErr"],[4,"CacheWriteErr"],[3,"Cache"],[3,"FontCollection"],[3,"Font"],[3,"Glyph"],[3,"ScaledGlyph"],[3,"PositionedGlyph"],[3,"IntoFontsIter"],[3,"GlyphIter"],[3,"LayoutIter"]]};
searchIndex["serde"] = {"doc":"Serde","items":[[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",null,null],[11,"serialize_element","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_element","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_key","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_value","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",null,null],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",3,null],[16,"Error","","The error type when some error occurs during serialization.",3,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",3,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",3,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",3,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",3,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",3,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",3,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",3,null],[10,"serialize_bool","","Serialize a `bool` value.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",3,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",3,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",3,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",3,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",3,null],[10,"serialize_none","","Serialize a [`None`] value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",4,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",4,null],[10,"serialize_element","","Serialize a sequence element.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a sequence.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",5,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",5,null],[10,"serialize_element","","Serialize a tuple element.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",6,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",6,null],[10,"serialize_field","","Serialize a tuple struct field.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple struct.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",7,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",7,null],[10,"serialize_field","","Serialize a tuple variant field.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple variant.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",8,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",8,null],[10,"serialize_key","","Serialize a map key.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_value","","Serialize a map value.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",8,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a map.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",9,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",9,null],[10,"serialize_field","","Serialize a struct field.",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"skip_field","","Indicate that a struct field has been skipped.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",10,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",10,null],[10,"serialize_field","","Serialize a struct variant field.",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"skip_field","","Indicate that a struct variant field has been skipped.",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct variant.",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"de","serde","Generic data structure deserialization framework.",null,null],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",null,null],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",11,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",11,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",11,null],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",11,null],[13,"Char","","The input contained a `char` that was not expected.",11,null],[13,"Str","","The input contained a `&str` or `String` that was not expected.",11,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",11,null],[13,"Unit","","The input contained a unit `()` that was not expected.",11,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",11,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",11,null],[13,"Seq","","The input contained a sequence that was not expected.",11,null],[13,"Map","","The input contained a map that was not expected.",11,null],[13,"Enum","","The input contained an enum that was not expected.",11,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",11,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",11,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",11,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",11,null],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",11,null],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",null,null],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",null,null],[3,"UnitDeserializer","","A deserializer holding a `()`.",null,null],[3,"BoolDeserializer","","A deserializer holding a `bool`.",null,null],[3,"I8Deserializer","","A deserializer holding an `i8`.",null,null],[3,"I16Deserializer","","A deserializer holding an `i16`.",null,null],[3,"I32Deserializer","","A deserializer holding an `i32`.",null,null],[3,"I64Deserializer","","A deserializer holding an `i64`.",null,null],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",null,null],[3,"U8Deserializer","","A deserializer holding a `u8`.",null,null],[3,"U16Deserializer","","A deserializer holding a `u16`.",null,null],[3,"U64Deserializer","","A deserializer holding a `u64`.",null,null],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",null,null],[3,"F32Deserializer","","A deserializer holding an `f32`.",null,null],[3,"F64Deserializer","","A deserializer holding an `f64`.",null,null],[3,"CharDeserializer","","A deserializer holding a `char`.",null,null],[3,"U32Deserializer","","A deserializer holding a `u32`.",null,null],[3,"StrDeserializer","","A deserializer holding a `&str`.",null,null],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",null,null],[3,"StringDeserializer","","A deserializer holding a `String`.",null,null],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",null,null],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",null,null],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",null,null],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"custom","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"custom","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"unitdeserializer"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",13,null],[11,"deserialize_enum","","",13,null],[11,"deserialize_identifier","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"booldeserializer"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",14,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",14,null],[11,"deserialize_enum","","",14,null],[11,"deserialize_identifier","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"i8deserializer"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",15,null],[11,"deserialize_enum","","",15,null],[11,"deserialize_identifier","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"i16deserializer"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",16,null],[11,"deserialize_enum","","",16,null],[11,"deserialize_identifier","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"i32deserializer"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",17,null],[11,"deserialize_enum","","",17,null],[11,"deserialize_identifier","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"i64deserializer"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",18,null],[11,"deserialize_enum","","",18,null],[11,"deserialize_identifier","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"isizedeserializer"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",19,null],[11,"deserialize_enum","","",19,null],[11,"deserialize_identifier","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u8deserializer"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",20,null],[11,"deserialize_enum","","",20,null],[11,"deserialize_identifier","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u16deserializer"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",21,null],[11,"deserialize_enum","","",21,null],[11,"deserialize_identifier","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u64deserializer"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",22,null],[11,"deserialize_enum","","",22,null],[11,"deserialize_identifier","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usizedeserializer"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",23,null],[11,"deserialize_enum","","",23,null],[11,"deserialize_identifier","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"f32deserializer"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",24,null],[11,"deserialize_enum","","",24,null],[11,"deserialize_identifier","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"f64deserializer"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",25,null],[11,"deserialize_enum","","",25,null],[11,"deserialize_identifier","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"chardeserializer"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",26,null],[11,"deserialize_enum","","",26,null],[11,"deserialize_identifier","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32deserializer"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",27,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",27,null],[11,"deserialize_identifier","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",27,null],[11,"variant_seed","","",27,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"strdeserializer"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",28,null],[11,"deserialize_bool","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",28,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",28,null],[11,"deserialize_identifier","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"borrowedstrdeserializer"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new borrowed deserializer from the given string.",29,{"inputs":[{"name":"str"}],"output":{"name":"borrowedstrdeserializer"}}],[11,"deserialize_any","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",29,null],[11,"deserialize_bool","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",29,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",29,null],[11,"deserialize_identifier","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",29,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"stringdeserializer"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",30,null],[11,"deserialize_bool","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",30,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",30,null],[11,"deserialize_identifier","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",30,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"cowstrdeserializer"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",31,null],[11,"deserialize_bool","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",31,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",31,null],[11,"deserialize_identifier","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",31,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"borrowedbytesdeserializer"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new borrowed deserializer from the given byte slice.",32,null],[11,"deserialize_any","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",32,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",32,null],[11,"deserialize_identifier","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"seqdeserializer"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",33,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize_any","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",33,null],[11,"deserialize_enum","","",33,null],[11,"deserialize_identifier","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_element_seed","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"seqaccessdeserializer"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",34,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",34,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",34,null],[11,"deserialize_enum","","",34,null],[11,"deserialize_identifier","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapDeserializer<I, E>`.",35,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize_any","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",35,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",35,null],[11,"deserialize_enum","","",35,null],[11,"deserialize_identifier","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_key_seed","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_value_seed","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"next_entry_seed","","",35,{"inputs":[{"name":"self"},{"name":"tk"},{"name":"tv"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_element_seed","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"mapaccessdeserializer"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",36,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",36,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",36,null],[11,"deserialize_enum","","",36,null],[11,"deserialize_identifier","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","serde::de","",37,{"inputs":[{"name":"self"}],"output":{"name":"ignoredany"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",37,{"inputs":[],"output":{"name":"ignoredany"}}],[11,"expecting","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","",37,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i64","","",37,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u64","","",37,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f64","","",37,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_str","","",37,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","",37,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","",37,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","",37,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","","",37,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",37,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_map","","",37,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_bytes","","",37,null],[11,"deserialize","","",37,{"inputs":[{"name":"d"}],"output":{"generics":["ignoredany"],"name":"result"}}],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",38,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",38,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",38,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",38,{"inputs":[{"name":"usize"},{"name":"expected"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",38,null],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",38,null],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",38,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",38,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",null,null],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",40,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",null,null],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",null,null],[16,"Value","","The type produced by using this seed.",41,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",41,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",42,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",42,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",42,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",42,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",43,null],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","The input contains a boolean.",43,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i8","","The input contains an `i8`.",43,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","The input contains an `i16`.",43,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","The input contains an `i32`.",43,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","The input contains an `i64`.",43,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u8","","The input contains a `u8`.",43,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","The input contains a `u16`.",43,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","The input contains a `u32`.",43,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","The input contains a `u64`.",43,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","The input contains an `f32`.",43,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","The input contains an `f64`.",43,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","The input contains a `char`.",43,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",43,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",43,null],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",43,null],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",43,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"name":"result"}}],[11,"visit_none","","The input contains an optional that is absent.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","The input contains an optional that is present.",43,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","","The input contains a unit `()`.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","The input contains a newtype struct.",43,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","The input contains a sequence of elements.",43,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_map","","The input contains a key-value map.",43,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_enum","","The input contains an enum.",43,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",44,null],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",44,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",44,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",44,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",45,null],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",45,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"generics":["option"],"name":"result"}}],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",45,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",45,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",45,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",45,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",46,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",46,null],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant","","`variant` is called to identify which variant to deserialize.",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",47,null],[10,"unit_variant","","Called when deserializing a variant with no values.",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"newtype_variant","","Called when deserializing a variant with a single value.",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",47,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"struct_variant","","Called when deserializing a struct-like variant.",47,null],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",48,null],[10,"into_deserializer","","Convert this value into a deserializer.",48,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"unexpected"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Serialize","serde","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",3,null],[16,"Error","","The error type when some error occurs during serialization.",3,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",3,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",3,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",3,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",3,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",3,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",3,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",3,null],[10,"serialize_bool","","Serialize a `bool` value.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",3,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",3,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",3,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",3,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",3,null],[10,"serialize_none","","Serialize a [`None`] value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",40,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",42,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",42,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",42,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",42,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",null,null]],"paths":[[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"]]};
searchIndex["serde_derive"] = {"doc":"This crate provides Serde's two derive macros.","items":[[5,"derive_serialize","serde_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_deserialize","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["serde_derive_internals"] = {"doc":"","items":[[3,"Ctxt","serde_derive_internals","",null,null],[0,"ast","","",null,null],[3,"Container","serde_derive_internals::ast","",null,null],[12,"ident","","",0,null],[12,"attrs","","",0,null],[12,"body","","",0,null],[12,"generics","","",0,null],[3,"Variant","","",null,null],[12,"ident","","",1,null],[12,"attrs","","",1,null],[12,"style","","",1,null],[12,"fields","","",1,null],[3,"Field","","",null,null],[12,"ident","","",2,null],[12,"attrs","","",2,null],[12,"ty","","",2,null],[4,"Body","","",null,null],[13,"Enum","","",3,null],[13,"Struct","","",3,null],[4,"Style","","",null,null],[13,"Struct","","",4,null],[13,"Tuple","","",4,null],[13,"Newtype","","",4,null],[13,"Unit","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"from_ast","","",0,{"inputs":[{"name":"ctxt"},{"name":"deriveinput"}],"output":{"name":"container"}}],[11,"all_fields","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"has_getter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"attr","serde_derive_internals","",null,null],[3,"Name","serde_derive_internals::attr","",null,null],[3,"Container","","Represents container (e.g. struct) attribute information",null,null],[3,"Variant","","Represents variant attribute information",null,null],[3,"Field","","Represents field attribute information",null,null],[4,"RenameRule","","",null,null],[13,"None","","Don't apply a default rename rule.",5,null],[13,"LowerCase","","Rename direct children to \"lowercase\" style.",5,null],[13,"UPPERCASE","","Rename direct children to \"UPPERCASE\" style.",5,null],[13,"PascalCase","","Rename direct children to \"PascalCase\" style, as typically used for enum variants.",5,null],[13,"CamelCase","","Rename direct children to \"camelCase\" style.",5,null],[13,"SnakeCase","","Rename direct children to \"snake_case\" style, as commonly used for fields.",5,null],[13,"ScreamingSnakeCase","","Rename direct children to \"SCREAMING_SNAKE_CASE\" style, as commonly used for constants.",5,null],[13,"KebabCase","","Rename direct children to \"kebab-case\" style.",5,null],[13,"ScreamingKebabCase","","Rename direct children to \"SCREAMING-KEBAB-CASE\" style.",5,null],[4,"EnumTag","","Styles of representing an enum.",null,null],[13,"External","","The default.",6,null],[13,"Internal","","`#[serde(tag = \"type\")]`",6,null],[12,"tag","serde_derive_internals::attr::EnumTag","",6,null],[13,"Adjacent","serde_derive_internals::attr","`#[serde(tag = \"t\", content = \"c\")]`",6,null],[12,"tag","serde_derive_internals::attr::EnumTag","",6,null],[12,"content","","",6,null],[13,"None","serde_derive_internals::attr","`#[serde(untagged)]`",6,null],[4,"Identifier","","Whether this enum represents the fields of a struct or the variants of an enum.",null,null],[13,"No","","It does not.",7,null],[13,"Field","","This enum represents the fields of a struct. All of the variants must be unit variants, except possibly one which is annotated with `#[serde(other)]` and is a newtype variant.",7,null],[13,"Variant","","This enum represents the variants of an enum. All of the variants must be unit variants.",7,null],[4,"Default","","Represents the default to use for a field when deserializing.",null,null],[13,"None","","Field must always be specified because it does not have a default.",8,null],[13,"Default","","The default is given by `std::default::Default::default()`.",8,null],[13,"Path","","The default is given by this function.",8,null],[5,"get_serde_meta_items","","",null,{"inputs":[{"name":"attribute"}],"output":{"generics":["vec"],"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize_name","","Return the container name for the container when serializing.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deserialize_name","","Return the container name for the container when deserializing.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"identifier"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_some","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from an item.",10,{"inputs":[{"name":"ctxt"},{"name":"deriveinput"}],"output":{"name":"self"}}],[11,"name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_all","","",10,{"inputs":[{"name":"self"}],"output":{"name":"renamerule"}}],[11,"deny_unknown_fields","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",10,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"ser_bound","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tag","","",10,{"inputs":[{"name":"self"}],"output":{"name":"enumtag"}}],[11,"from_type","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["ty"],"name":"option"}}],[11,"into_type","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["ty"],"name":"option"}}],[11,"remote","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"identifier","","",10,{"inputs":[{"name":"self"}],"output":{"name":"identifier"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ast","","",11,{"inputs":[{"name":"ctxt"},{"name":"variant"}],"output":{"name":"self"}}],[11,"name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_by_rule","","",11,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":null}],[11,"rename_all","","",11,{"inputs":[{"name":"self"}],"output":{"name":"renamerule"}}],[11,"skip_deserializing","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"other","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"serialize_with","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"deserialize_with","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from a struct field.",12,{"inputs":[{"name":"ctxt"},{"name":"usize"},{"name":"field"},{"generics":["variant"],"name":"option"},{"name":"default"}],"output":{"name":"self"}}],[11,"name","","",12,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_by_rule","","",12,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":null}],[11,"skip_serializing","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_deserializing","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing_if","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"default","","",12,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"serialize_with","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"deserialize_with","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"ser_bound","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"borrowed_lifetimes","","",12,{"inputs":[{"name":"self"}],"output":{"name":"btreeset"}}],[11,"getter","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"default","serde_derive_internals","",13,{"inputs":[],"output":{"name":"ctxt"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"error","","",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"check","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"result"}}],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","serde_derive_internals::attr","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":{"name":"bool"}}],[11,"apply_to_variant","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"apply_to_field","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Container"],[3,"Variant"],[3,"Field"],[4,"Body"],[4,"Style"],[4,"RenameRule"],[4,"EnumTag"],[4,"Identifier"],[4,"Default"],[3,"Name"],[3,"Container"],[3,"Variant"],[3,"Field"],[3,"Ctxt"]]};
searchIndex["stb_truetype"] = {"doc":"","items":[[3,"FontInfo","stb_truetype","",null,null],[3,"Vertex","","",null,null],[12,"x","","",0,null],[12,"y","","",0,null],[12,"cx","","",0,null],[12,"cy","","",0,null],[3,"Rect","","",null,null],[12,"x0","","",1,null],[12,"y0","","",1,null],[12,"x1","","",1,null],[12,"y1","","",1,null],[3,"HMetrics","","",null,null],[12,"advance_width","","",2,null],[12,"left_side_bearing","","",2,null],[3,"VMetrics","","",null,null],[12,"ascent","","",3,null],[12,"descent","","",3,null],[12,"line_gap","","",3,null],[4,"VertexType","","",null,null],[13,"MoveTo","","",4,null],[13,"LineTo","","",4,null],[13,"CurveTo","","",4,null],[5,"is_font","","",null,null],[5,"get_font_offset_for_index","","Each .ttf/.ttc file may have more than one font. Each font has a sequential index number starting from 0. Call this function to get the font offset for a given index; it returns None if the index is out of range. A regular .ttf file will only define one font and it always be at offset 0, so it will return Some(0) for index 0, and None for all other indices. You can just skip this step if you know it's that kind of font.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fontinfo"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vertex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"vertex_type","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vertextype"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"vertextype"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"hmetrics"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"vmetrics"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Given an offset into the file that defines a font, this function builds the necessary cached info for the rest of the system.",5,{"inputs":[{"name":"data"},{"name":"usize"}],"output":{"generics":["fontinfo"],"name":"option"}}],[11,"get_num_glyphs","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"find_glyph_index","","If you're going to perform multiple operations on the same character and you want a speed-up, call this function with the character you're going to process, then use glyph-based functions instead of the codepoint-based functions.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"get_codepoint_shape","","Returns the series of vertices encoding the shape of the glyph for this codepoint.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["vec"],"name":"option"}}],[11,"get_glyph_box","","Like `get_codepoint_box`, but takes a glyph index. Use this if you have cached the glyph index for a codepoint.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["rect"],"name":"option"}}],[11,"get_codepoint_box","","Gets the bounding box of the visible part of the glyph, in unscaled coordinates",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["rect"],"name":"option"}}],[11,"is_glyph_empty","","returns true if nothing is drawn for this glyph",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"get_glyph_shape","","Like `get_codepoint_shape`, but takes a glyph index instead. Use this if you have cached the glyph index for a codepoint.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["vec"],"name":"option"}}],[11,"get_glyph_h_metrics","","like `get_codepoint_h_metrics`, but takes a glyph index instead. Use this if you have cached the glyph index for a codepoint.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"hmetrics"}}],[11,"get_glyph_kern_advance","","like `get_codepoint_kern_advance`, but takes glyph indices instead. Use this if you have cached the glyph indices for the codepoints.",5,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"get_codepoint_kern_advance","","an additional amount to add to the 'advance' value between cp1 and cp2",5,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"get_codepoint_h_metrics","","`left_side_bearing` is the offset from the current horizontal position to the left edge of the character `advance_width` is the offset from the current horizontal position to the next horizontal position these are expressed in unscaled coordinates",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"hmetrics"}}],[11,"get_v_metrics","","`ascent` is the coordinate above the baseline the font extends; descent is the coordinate below the baseline the font extends (i.e. it is typically negative) `line_gap` is the spacing between one row's descent and the next row's ascent... so you should advance the vertical position by `ascent - descent + line_gap` these are expressed in unscaled coordinates, so you must multiply by the scale factor for a given size",5,{"inputs":[{"name":"self"}],"output":{"name":"vmetrics"}}],[11,"get_bounding_box","","the bounding box around all possible characters",5,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"rect"}}],[11,"scale_for_pixel_height","","computes a scale factor to produce a font whose \"height\" is 'pixels' tall. Height is measured as the distance from the highest ascender to the lowest descender; in other words, it's equivalent to calling GetFontVMetrics and computing:       scale = pixels / (ascent - descent) so if you prefer to measure height by the ascent only, use a similar calculation.",5,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"scale_for_mapping_em_to_pixels","","computes a scale factor to produce a font whose EM size is mapped to `pixels` tall. This is probably what traditional APIs compute, but I'm not positive.",5,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"get_glyph_bitmap_box_subpixel","","like `get_codepoint_bitmap_box_subpixel`, but takes a glyph index instead of a codepoint.",5,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"generics":["rect"],"name":"option"}}],[11,"get_glyph_bitmap_box","","like `get_codepoint_bitmap_box`, but takes a glyph index instead of a codepoint.",5,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"f32"},{"name":"f32"}],"output":{"generics":["rect"],"name":"option"}}],[11,"get_codepoint_bitmap_box_subpixel","","same as get_codepoint_bitmap_box, but you can specify a subpixel shift for the character",5,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"generics":["rect"],"name":"option"}}],[11,"get_codepoint_bitmap_box","","get the bounding box of the bitmap centered around the glyph origin; so the bitmap width is x1-x0, height is y1-y0, and location to place the bitmap top left is (left_side_bearing*scale, y0). (Note that the bitmap uses y-increases-down, but the shape uses y-increases-up, so CodepointBitmapBox and CodepointBox are inverted.)",5,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"f32"},{"name":"f32"}],"output":{"generics":["rect"],"name":"option"}}]],"paths":[[3,"Vertex"],[3,"Rect"],[3,"HMetrics"],[3,"VMetrics"],[4,"VertexType"],[3,"FontInfo"]]};
searchIndex["syn"] = {"doc":"","items":[[3,"Attribute","syn","Doc-comments are promoted to attributes that have `is_sugared_doc` = true",null,null],[12,"style","","",0,null],[12,"value","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"ident","","Name of the field, if any.",1,null],[12,"vis","","Visibility of the field.",1,null],[12,"attrs","","Attributes tagged on the field.",1,null],[12,"ty","","Type of the field.",1,null],[3,"Variant","","An enum variant.",null,null],[12,"ident","","Name of the variant.",2,null],[12,"attrs","","Attributes tagged on the variant.",2,null],[12,"data","","Type of variant.",2,null],[12,"discriminant","","Explicit discriminant, e.g. `Foo = 1`",2,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",3,null],[12,"ty_params","","",3,null],[12,"where_clause","","",3,null],[3,"Lifetime","","",null,null],[12,"ident","","",4,null],[3,"LifetimeDef","","A lifetime definition, e.g. `'a: 'b+'c+'d`",null,null],[12,"attrs","","",5,null],[12,"lifetime","","",5,null],[12,"bounds","","",5,null],[3,"TyParam","","A generic type parameter, e.g. `T: Into<String>`.",null,null],[12,"attrs","","",6,null],[12,"ident","","",6,null],[12,"bounds","","",6,null],[12,"default","","",6,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",7,null],[12,"bounded_ty","","The type being bounded",7,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",7,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"predicates","","",8,null],[3,"WhereEqPredicate","","An equality predicate (unsupported).",null,null],[12,"lhs_ty","","",9,null],[12,"rhs_ty","","",9,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"lifetime","","",10,null],[12,"bounds","","",10,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TyGenerics::as_turbofish`.",null,null],[3,"TyGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Ident","","",null,null],[3,"ByteStrLit","","",null,null],[12,"value","","",11,null],[12,"style","","",11,null],[3,"FloatLit","","",null,null],[12,"value","","",12,null],[12,"suffix","","",12,null],[3,"IntLit","","",null,null],[12,"value","","",13,null],[12,"suffix","","",13,null],[3,"StrLit","","",null,null],[12,"value","","",14,null],[12,"style","","",14,null],[3,"Delimited","","",null,null],[12,"delim","","The type of delimiter",15,null],[12,"tts","","The delimited sequence of token trees",15,null],[3,"Mac","","Represents a macro invocation. The Path indicates which macro is being invoked, and the vector of token-trees contains the source of the macro invocation.",null,null],[12,"path","","",16,null],[12,"tts","","",16,null],[3,"DeriveInput","","Struct or enum sent to a `proc_macro_derive` macro.",null,null],[12,"ident","","Name of the struct or enum.",17,null],[12,"vis","","Visibility of the struct or enum.",17,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",17,null],[12,"generics","","Generics required to complete the definition.",17,null],[12,"body","","Data within the struct or enum.",17,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",18,null],[12,"types","","The type parameters for this path segment, if present.",18,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",18,null],[3,"BareFnArg","","An argument in a function type.",null,null],[12,"name","","",19,null],[12,"ty","","",19,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",20,null],[12,"abi","","",20,null],[12,"lifetimes","","",20,null],[12,"inputs","","",20,null],[12,"output","","",20,null],[12,"variadic","","",20,null],[3,"MutTy","","",null,null],[12,"ty","","",21,null],[12,"mutability","","",21,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"inputs","","`(A, B)`",22,null],[12,"output","","`C`",22,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name.",null,null],[12,"global","","A `::foo` path, is relative to the crate root rather than current module (like paths in an import).",23,null],[12,"segments","","The segments in the path: the things separated by `::`.",23,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"ident","","The identifier portion of this path segment.",24,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that this is more than just simple syntactic sugar; the use of parens affects the region binding rules, so we preserve the distinction.",24,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",25,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",25,null],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual path, including the trait and the associated item, is stored separately. `position` represents the index of the associated item qualified with this Self type.",null,null],[12,"ty","","",26,null],[12,"position","","",26,null],[3,"TypeBinding","","Bind a type to an associated type: `A=Foo`.",null,null],[12,"ident","","",27,null],[12,"ty","","",27,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that are contained as statements within items. These two cases need to be distinguished for pretty-printing.",null,null],[13,"Outer","","Attribute of the form `#![...]`.",28,null],[13,"Inner","","Attribute of the form `#[...]`.",28,null],[4,"MetaItem","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",29,null],[13,"List","","List meta item.",29,null],[13,"NameValue","","Name-value meta item.",29,null],[4,"NestedMetaItem","","Possible values inside of compile-time attribute lists.",null,null],[13,"MetaItem","","A full `MetaItem`.",30,null],[13,"Literal","","A Rust literal.",30,null],[4,"ConstExpr","","",null,null],[13,"Call","","A function call",31,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",31,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",31,null],[13,"Lit","","A literal (For example: `1`, `\"foo\"`)",31,null],[13,"Cast","","A cast (`foo as f64`)",31,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::.",31,null],[13,"Index","","An indexing operation (`foo[2]`)",31,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",31,null],[13,"Other","","If compiling with full support for expression syntax, any expression is allowed",31,null],[4,"VariantData","","Data stored within an enum variant or struct.",null,null],[13,"Struct","","Struct variant, e.g. `Point { x: f64, y: f64 }`.",32,null],[13,"Tuple","","Tuple variant, e.g. `Some(T)`.",32,null],[13,"Unit","","Unit variant, e.g. `None`.",32,null],[4,"Visibility","","Visibility level of an item.",null,null],[13,"Public","","Public, i.e. `pub`.",33,null],[13,"Crate","","Crate-visible, i.e. `pub(crate)`.",33,null],[13,"Restricted","","Restricted, e.g. `pub(some::module)`.",33,null],[13,"Inherited","","Inherited, i.e. private.",33,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",34,null],[13,"Maybe","","",34,null],[4,"TyParamBound","","The AST represents all type param bounds as types. `typeck::collect::compute_bounds` matches these against the \"special\" built-in traits (see `middle::lang_items`) and detects Copy, Send and Sync.",null,null],[13,"Trait","","",35,null],[13,"Region","","",35,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for<'c> Foo: Send+Clone+'c`",36,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",36,null],[13,"EqPredicate","","An equality predicate (unsupported)",36,null],[4,"FloatTy","","",null,null],[13,"F32","","",37,null],[13,"F64","","",37,null],[13,"Unsuffixed","","",37,null],[4,"IntTy","","",null,null],[13,"Isize","","",38,null],[13,"I8","","",38,null],[13,"I16","","",38,null],[13,"I32","","",38,null],[13,"I64","","",38,null],[13,"Usize","","",38,null],[13,"U8","","",38,null],[13,"U16","","",38,null],[13,"U32","","",38,null],[13,"U64","","",38,null],[13,"Unsuffixed","","",38,null],[4,"Lit","","Literal kind.",null,null],[13,"Str","","A string literal (`\"foo\"`)",39,null],[13,"ByteStr","","A byte string (`b\"foo\"`)",39,null],[13,"Byte","","A byte char (`b'f'`)",39,null],[13,"Char","","A character literal (`'a'`)",39,null],[13,"Int","","An integer literal (`1`)",39,null],[13,"Float","","A float literal (`1f64` or `1E10f64` or `1.0E10`)",39,null],[13,"Bool","","A boolean literal",39,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `\"foo\"`",40,null],[13,"Raw","","A raw string, like `r##\"foo\"##`",40,null],[4,"BinOpToken","","",null,null],[13,"Plus","","",41,null],[13,"Minus","","",41,null],[13,"Star","","",41,null],[13,"Slash","","",41,null],[13,"Percent","","",41,null],[13,"Caret","","",41,null],[13,"And","","",41,null],[13,"Or","","",41,null],[13,"Shl","","",41,null],[13,"Shr","","",41,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",42,null],[13,"Bracket","","A square bracket: `[` or `]`",42,null],[13,"Brace","","A curly brace: `{` or `}`",42,null],[4,"Token","","",null,null],[13,"Eq","","",43,null],[13,"Lt","","",43,null],[13,"Le","","",43,null],[13,"EqEq","","",43,null],[13,"Ne","","",43,null],[13,"Ge","","",43,null],[13,"Gt","","",43,null],[13,"AndAnd","","",43,null],[13,"OrOr","","",43,null],[13,"Not","","",43,null],[13,"Tilde","","",43,null],[13,"BinOp","","",43,null],[13,"BinOpEq","","",43,null],[13,"At","","",43,null],[13,"Dot","","",43,null],[13,"DotDot","","",43,null],[13,"DotDotDot","","",43,null],[13,"Comma","","",43,null],[13,"Semi","","",43,null],[13,"Colon","","",43,null],[13,"ModSep","","",43,null],[13,"RArrow","","",43,null],[13,"LArrow","","",43,null],[13,"FatArrow","","",43,null],[13,"Pound","","",43,null],[13,"Dollar","","",43,null],[13,"Question","","",43,null],[13,"Literal","","",43,null],[13,"Ident","","",43,null],[13,"Underscore","","",43,null],[13,"Lifetime","","",43,null],[13,"DocComment","","",43,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it parses the arguments to the invocation as a token-tree. This is a very loose structure, such that all sorts of different AST-fragments can be passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",44,null],[13,"Delimited","","A delimited sequence of token trees",44,null],[4,"Body","","Body of a derived struct or enum.",null,null],[13,"Enum","","It's an enum.",45,null],[13,"Struct","","It's a struct.",45,null],[4,"BinOp","","",null,null],[13,"Add","","The `+` operator (addition)",46,null],[13,"Sub","","The `-` operator (subtraction)",46,null],[13,"Mul","","The `*` operator (multiplication)",46,null],[13,"Div","","The `/` operator (division)",46,null],[13,"Rem","","The `%` operator (modulus)",46,null],[13,"And","","The `&&` operator (logical and)",46,null],[13,"Or","","The `||` operator (logical or)",46,null],[13,"BitXor","","The `^` operator (bitwise xor)",46,null],[13,"BitAnd","","The `&` operator (bitwise and)",46,null],[13,"BitOr","","The `|` operator (bitwise or)",46,null],[13,"Shl","","The `<<` operator (shift left)",46,null],[13,"Shr","","The `>>` operator (shift right)",46,null],[13,"Eq","","The `==` operator (equality)",46,null],[13,"Lt","","The `<` operator (less than)",46,null],[13,"Le","","The `<=` operator (less than or equal to)",46,null],[13,"Ne","","The `!=` operator (not equal to)",46,null],[13,"Ge","","The `>=` operator (greater than or equal to)",46,null],[13,"Gt","","The `>` operator (greater than)",46,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",47,null],[13,"Not","","The `!` operator for logical inversion",47,null],[13,"Neg","","The `-` operator for negation",47,null],[4,"Abi","","",null,null],[13,"Named","","",48,null],[13,"Rust","","",48,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",49,null],[13,"Ty","","Everything else",49,null],[4,"Mutability","","",null,null],[13,"Mutable","","",50,null],[13,"Immutable","","",50,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `<'a, A, B, C>` in `foo::bar::baz::<'a, A, B, C>`",51,null],[13,"Parenthesized","","The `(A, B)` and `C` in `Foo(A, B) -> C`",51,null],[4,"Ty","","The different kinds of types recognized by the compiler",null,null],[13,"Slice","","A variable-length array (`[T]`)",52,null],[13,"Array","","A fixed length array (`[T; n]`)",52,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",52,null],[13,"Rptr","","A reference (`&'a T` or `&'a mut T`)",52,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -> bool`)",52,null],[13,"Never","","The never type (`!`)",52,null],[13,"Tup","","A tuple (`(A, B, C, D, ...)`)",52,null],[13,"Path","","A path (`module::module::...::Type`), optionally \"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",52,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",52,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",52,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",52,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",52,null],[13,"Mac","","A macro in the type position.",52,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",53,null],[13,"Normal","","",53,null],[5,"parse_derive_input","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["deriveinput","string"],"name":"result"}}],[5,"parse_type","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["ty","string"],"name":"result"}}],[5,"parse_path","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["path","string"],"name":"result"}}],[5,"parse_where_clause","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["whereclause","string"],"name":"result"}}],[5,"parse_token_trees","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["vec","string"],"name":"result"}}],[5,"parse_ident","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["ident","string"],"name":"result"}}],[5,"parse_ty_param_bound","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["typarambound","string"],"name":"result"}}],[5,"parse_outer_attr","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["attribute","string"],"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",29,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",30,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"name","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"hash","","",28,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"metaitem"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"name","","Name of the item.",29,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"nestedmetaitem"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"to_tokens","","",31,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"constexpr"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",33,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"fields","","Slice containing the fields stored in the variant.",32,null],[11,"fields_mut","","Mutable slice containing the fields stored in the variant.",32,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",54,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",55,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",56,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",6,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",35,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",36,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",10,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"generics"}}],[11,"hash","","",3,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",3,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",55,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"new","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"new","","",5,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"from","","",6,{"inputs":[{"name":"ident"}],"output":{"name":"self"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"whereclause"}}],[11,"hash","","",8,null],[11,"none","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"whereboundpredicate"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"whereregionpredicate"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"whereeqpredicate"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"to_tokens","","",57,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",57,null],[11,"cmp","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"le","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"gt","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"ge","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"new","","",57,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"as_ref","","",57,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",39,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"from","","",39,{"inputs":[{"name":"string"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"str"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"lit"}}],[11,"from","","",39,null],[11,"from","","",39,{"inputs":[{"name":"char"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"bool"}],"output":{"name":"lit"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"intty"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"hash","","",38,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"floatty"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"from","","",39,{"inputs":[{"name":"isize"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i8"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i16"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i64"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"usize"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u8"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u16"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u64"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"f32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"f64"}],"output":{"name":"lit"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"strlit"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bytestrlit"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"intlit"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"floatlit"}}],[11,"to_tokens","","",16,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",44,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",43,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",41,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"mac"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"delimited"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"binoptoken"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"delimtoken"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"to_tokens","","",17,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[11,"op","","",46,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"assign_op","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",46,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"op","","",47,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_tokens","","",47,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"hash","","",46,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"hash","","",47,null],[11,"to_tokens","","",52,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",50,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",24,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",51,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",18,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",27,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",22,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",25,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",20,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",19,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",53,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",48,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"hash","","",52,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"mutty"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"hash","","",50,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"from","","",23,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"from","","",24,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"hash","","",51,null],[11,"none","","",51,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"anglebracketedparameterdata"}}],[11,"hash","","",18,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"barefnty"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"hash","","",53,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"hash","","",48,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"barefnarg"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"hash","","",49,null],[0,"visit","","AST walker. Each overridden visit method has full control over what happens with its node, it can do its own traversal of the node's children, call `visit::walk_*` to apply the default traversal algorithm, or prevent deeper traversal by doing nothing.",null,null],[5,"walk_opt_ident","syn::visit","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_derive_input","","",null,{"inputs":[{"name":"v"},{"name":"deriveinput"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_variant_data","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":null}],[5,"walk_const_expr","","",null,{"inputs":[{"name":"v"},{"name":"constexpr"}],"output":null}],[5,"walk_mac","","",null,{"inputs":[{"name":"v"},{"name":"mac"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially overridden.  Each method's default implementation recursively visits the substructure of the input via the corresponding `walk` method; e.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_ident","","",58,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_derive_input","","",58,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":null}],[11,"visit_ty","","",58,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",58,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ty_param_bound","","",58,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",58,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",58,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"}],"output":null}],[11,"visit_field","","",58,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_variant","","",58,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"}],"output":null}],[11,"visit_lifetime","","",58,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",58,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_path","","",58,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_segment","","",58,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_path_parameters","","",58,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",58,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",58,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_fn_ret_ty","","",58,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":null}],[11,"visit_const_expr","","",58,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":null}],[11,"visit_lit","","",58,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[11,"visit_mac","","",58,{"inputs":[{"name":"self"},{"name":"mac"}],"output":null}],[0,"parse","syn","This module contains a set of exported nom parsers which can be used to parse custom grammars when used alongside the `synom` crate.",null,null],[4,"IResult","syn::parse","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",59,null],[13,"Error","","Parsing failed.",59,null],[5,"lit","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","lit"],"name":"iresult"}}],[5,"string","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","strlit"],"name":"iresult"}}],[5,"byte_string","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","bytestrlit"],"name":"iresult"}}],[5,"byte","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","u8"],"name":"iresult"}}],[5,"character","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","char"],"name":"iresult"}}],[5,"float","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","floatlit"],"name":"iresult"}}],[5,"int","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","intlit"],"name":"iresult"}}],[5,"boolean","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","bool"],"name":"iresult"}}],[5,"ty","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","ty"],"name":"iresult"}}],[5,"path","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","path"],"name":"iresult"}}],[5,"tt","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","tokentree"],"name":"iresult"}}],[5,"ident","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","ident"],"name":"iresult"}}],[5,"lifetime","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","lifetime"],"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",59,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}]],"paths":[[3,"Attribute"],[3,"Field"],[3,"Variant"],[3,"Generics"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"TyParam"],[3,"WhereBoundPredicate"],[3,"WhereClause"],[3,"WhereEqPredicate"],[3,"WhereRegionPredicate"],[3,"ByteStrLit"],[3,"FloatLit"],[3,"IntLit"],[3,"StrLit"],[3,"Delimited"],[3,"Mac"],[3,"DeriveInput"],[3,"AngleBracketedParameterData"],[3,"BareFnArg"],[3,"BareFnTy"],[3,"MutTy"],[3,"ParenthesizedParameterData"],[3,"Path"],[3,"PathSegment"],[3,"PolyTraitRef"],[3,"QSelf"],[3,"TypeBinding"],[4,"AttrStyle"],[4,"MetaItem"],[4,"NestedMetaItem"],[4,"ConstExpr"],[4,"VariantData"],[4,"Visibility"],[4,"TraitBoundModifier"],[4,"TyParamBound"],[4,"WherePredicate"],[4,"FloatTy"],[4,"IntTy"],[4,"Lit"],[4,"StrStyle"],[4,"BinOpToken"],[4,"DelimToken"],[4,"Token"],[4,"TokenTree"],[4,"Body"],[4,"BinOp"],[4,"UnOp"],[4,"Abi"],[4,"FunctionRetTy"],[4,"Mutability"],[4,"PathParameters"],[4,"Ty"],[4,"Unsafety"],[3,"ImplGenerics"],[3,"TyGenerics"],[3,"Turbofish"],[3,"Ident"],[8,"Visitor"],[4,"IResult"]]};
searchIndex["synom"] = {"doc":"Adapted from `nom` by removing the `IResult::Incomplete` variant which:","items":[[4,"IResult","synom","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",0,null],[13,"Error","","Parsing failed.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[14,"punct","","Parse a piece of punctuation like \"+\" or \"+=\".",null,null],[14,"keyword","","Parse a keyword like \"fn\" or \"struct\".",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"opt_vec","","Turn a failed parse into an empty vector. The argument parser must itself return a vector.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"separated_list","","Zero or more values separated by some separator. Does not allow a trailing seperator.",null,null],[14,"terminated_list","","Zero or more values separated by some separator. A trailing separator is allowed.",null,null],[14,"named","","Define a function from a parser combination.",null,null],[14,"call","","Invoke the given parser function with the passed in arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Parses successfully if the given parser fails to parse. Does not consume any of the input.",null,null],[14,"cond","","Conditionally execute the given parser.",null,null],[14,"cond_reduce","","Fail to parse if condition is false, otherwise parse the given parser.",null,null],[14,"preceded","","Parse two things, returning the value of the second.",null,null],[14,"terminated","","Parse two things, returning the value of the first.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"peek","","Parse a value without consuming it from the input data.",null,null],[14,"take_until","","Parse the part of the input up to but not including the given string. Fail to parse if the given string is not present in the input.",null,null],[14,"tag","","Parse the given string from exactly the current position in the input. You almost always want `punct!` or `keyword!` instead of this.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything. Useful as an argument to `switch!`.",null,null],[14,"delimited","","Value surrounded by a pair of delimiters.",null,null],[14,"separated_nonempty_list","","One or more values separated by some separator. Does not allow a trailing separator.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, one after another, optionally assigning the results a name. Fail if any of the parsers fails.",null,null]],"paths":[[4,"IResult"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"] = {"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",null,null],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,{"inputs":[{"name":"self"}],"output":null}],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["viewport"] = {"doc":"A library for storing viewport information","items":[[3,"Viewport","viewport","Stores viewport information.",null,null],[12,"rect","","Viewport in pixels. `[x, y, width height]` where `(x, y)` is lower left corner.",0,null],[12,"draw_size","","The size of frame buffer in pixels.",0,null],[12,"window_size","","The size of window in points.",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"viewport"}}],[11,"abs_transform","","Computes absolute transform for 2D graphics, which uses a row major 2x3 matrix. The origin is in the upper left corner of the viewport rectangle. The x axis points to the right, and the y axis points down. The units are in points (window coordinates).",0,null]],"paths":[[3,"Viewport"]]};
searchIndex["void"] = {"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,null],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"void"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["ordering"],"name":"option"}}]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
initSearch(searchIndex);
