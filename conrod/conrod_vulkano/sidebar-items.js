initSidebarItems({"constant":[["MODE_GEOMETRY","Ignore `tex` and draw simple, colored 2D geometry."],["MODE_IMAGE","Draw an image from the texture at `tex` in the fragment shader."],["MODE_TEXT","Draw text from the text cache texture `tex` in the fragment shader."]],"enum":[["Command","A `Command` describing a step in the drawing process."],["Draw","A `Command` for drawing to the target."],["DrawError","Errors that might occur during draw calls."],["RendererCreationError","Errors that might occur during creation of the renderer."]],"struct":[["Commands","An iterator yielding `Command`s, produced by the `Renderer::commands` method."],["DrawCommand","A draw command that maps directly to the `AutoCommandBufferBuilder::draw` method. By returning `DrawCommand`s, we can avoid consuming the entire `AutoCommandBufferBuilder` itself which might not always be available from APIs that wrap Vulkan."],["GlyphCacheCommand","An command for uploading an individual glyph."],["GlyphCacheCommands","All commands that must be submitted to the command buffer for caching text glyphs."],["Image","A loaded vulkan texture and it's width/height"],["Renderer","A type used for translating `render::Primitives` into `Command`s that indicate how to draw the conrod GUI using `vulkano`."],["Vertex","The `Vertex` type passed to the vertex shader."]]});