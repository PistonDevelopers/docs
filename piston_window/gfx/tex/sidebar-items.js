initSidebarItems({"constant":[["CUBE_FACES","A constant array of cube faces in the order they map to the hardware."],["RO_DEPTH","Depth is read-only in the view."],["RO_DEPTH_STENCIL","Both depth and stencil are read-only."],["RO_STENCIL","Stencil is read-only in the view."]],"enum":[["AaMode","Describes the configuration of samples inside each texel."],["CubeFace","The face of a cube texture to do an operation on."],["Error","Pure texture object creation error."],["FilterMethod","How to filter the texture when sampling. They correspond to increasing levels of quality, but also cost. They \"layer\" on top of each other: it is not possible to have bilinear filtering without mipmapping, for example."],["Kind","Specifies the kind of a texture storage to be allocated."],["WrapMode","Specifies how texture coordinates outside the range `[0, 1]` are handled."]],"struct":[["DepthStencilDesc","Texture depth-stencil view descriptor."],["DepthStencilFlags","Depth-stencil read-only flags"],["Descriptor","Texture storage descriptor."],["ImageInfoCommon","Describes a subvolume of a texture, which image data can be uploaded into."],["Lod","A wrapper for the LOD level of a texture."],["PackedColor","A wrapper for the 8bpp RGBA color, encoded as u32."],["RenderDesc","Texture render view descriptor."],["ResourceDesc","Texture resource view descriptor."],["SamplerInfo","Specifies how to sample from a texture."]],"type":[["Bits","Number of bits per component"],["Dimensions","Dimensions: width, height, depth, and samples."],["Layer","A depth value, specifying which plane to select out of a 3D texture."],["Level","Mipmap level to select in a texture."],["NewImageInfo","New image info based on the universal format spec. The format is suppsed to come from compile-time information as opposed to run-time enum values."],["NumFragments","Number of EQAA fragments"],["NumSamples","Number of MSAA samples"],["RawImageInfo","New raw image info based on the universal format spec."],["Size","Dimension size"]]});