(function() {var implementors = {};
implementors["ab_glyph_rasterizer"] = [{"text":"impl Sync for Point","synthetic":true,"types":[]},{"text":"impl Sync for Rasterizer","synthetic":true,"types":[]}];
implementors["adler"] = [{"text":"impl Sync for Adler32","synthetic":true,"types":[]}];
implementors["adler32"] = [{"text":"impl Sync for RollingAdler32","synthetic":true,"types":[]}];
implementors["andrew"] = [{"text":"impl Sync for Line","synthetic":true,"types":[]},{"text":"impl Sync for Sides","synthetic":true,"types":[]},{"text":"impl Sync for Rectangle","synthetic":true,"types":[]},{"text":"impl Sync for FontConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Text&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Endian","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Canvas&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["bytemuck"] = [{"text":"impl Sync for PodCastError","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl Sync for BigEndian","synthetic":true,"types":[]},{"text":"impl Sync for LittleEndian","synthetic":true,"types":[]}];
implementors["calloop"] = [{"text":"impl Sync for Mode","synthetic":true,"types":[]},{"text":"impl Sync for Interest","synthetic":true,"types":[]},{"text":"impl Sync for Readiness","synthetic":true,"types":[]},{"text":"impl Sync for Token","synthetic":true,"types":[]},{"text":"impl Sync for Poll","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Event&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SyncSender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for Channel&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Generic&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Fd","synthetic":true,"types":[]},{"text":"impl Sync for PingSource","synthetic":true,"types":[]},{"text":"impl Sync for Ping","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for Signals","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Timer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TimerHandle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Timeout","synthetic":true,"types":[]},{"text":"impl&lt;Data&gt; !Sync for LoopHandle&lt;Data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for InsertError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Data&gt; !Sync for EventLoop&lt;Data&gt;","synthetic":true,"types":[]},{"text":"impl Sync for LoopSignal","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Sync for Source&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for Idle","synthetic":true,"types":[]}];
implementors["color_quant"] = [{"text":"impl Sync for NeuQuant","synthetic":true,"types":[]}];
implementors["crc32fast"] = [{"text":"impl Sync for Hasher","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for TryIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for RecvError","synthetic":true,"types":[]},{"text":"impl Sync for TryRecvError","synthetic":true,"types":[]},{"text":"impl Sync for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl Sync for TrySelectError","synthetic":true,"types":[]},{"text":"impl Sync for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl Sync for TryReadyError","synthetic":true,"types":[]},{"text":"impl Sync for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Sync for Select&lt;'_&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; !Sync for Worker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for Stealer&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for Injector&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;'g, T, P&gt; !Sync for CompareAndSetError&lt;'g, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Sync for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T&gt; !Sync for Shared&lt;'g, T&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for LocalHandle","synthetic":true,"types":[]},{"text":"impl !Sync for Guard","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Pointable + Send + Sync&gt; Sync for Atomic&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Sync for Collector","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl !Sync for Backoff","synthetic":true,"types":[]},{"text":"impl !Sync for Parker","synthetic":true,"types":[]},{"text":"impl Sync for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; Sync for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sync&gt; Sync for CachePadded&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Sync for Unparker","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send + Sync&gt; Sync for ShardedLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Sync&gt; Sync for ShardedLockReadGuard&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Sync&gt; Sync for ShardedLockWriteGuard&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl Sync for Scope&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sync for ScopedJoinHandle&lt;'_, T&gt;","synthetic":false,"types":[]}];
implementors["deflate"] = [{"text":"impl Sync for Compression","synthetic":true,"types":[]},{"text":"impl Sync for SpecialOptions","synthetic":true,"types":[]},{"text":"impl Sync for CompressionOptions","synthetic":true,"types":[]},{"text":"impl Sync for MatchingType","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["dlib"] = [{"text":"impl Sync for DlError","synthetic":true,"types":[]}];
implementors["draw_state"] = [{"text":"impl Sync for FrontFace","synthetic":true,"types":[]},{"text":"impl Sync for Offset","synthetic":true,"types":[]},{"text":"impl Sync for CullFace","synthetic":true,"types":[]},{"text":"impl Sync for RasterMethod","synthetic":true,"types":[]},{"text":"impl Sync for MultiSample","synthetic":true,"types":[]},{"text":"impl Sync for Rasterizer","synthetic":true,"types":[]},{"text":"impl Sync for Comparison","synthetic":true,"types":[]},{"text":"impl Sync for StencilOp","synthetic":true,"types":[]},{"text":"impl Sync for StencilSide","synthetic":true,"types":[]},{"text":"impl Sync for Stencil","synthetic":true,"types":[]},{"text":"impl Sync for Depth","synthetic":true,"types":[]},{"text":"impl Sync for Equation","synthetic":true,"types":[]},{"text":"impl Sync for BlendValue","synthetic":true,"types":[]},{"text":"impl Sync for Factor","synthetic":true,"types":[]},{"text":"impl Sync for BlendChannel","synthetic":true,"types":[]},{"text":"impl Sync for Blend","synthetic":true,"types":[]},{"text":"impl Sync for ColorMask","synthetic":true,"types":[]},{"text":"impl Sync for Color","synthetic":true,"types":[]},{"text":"impl Sync for RefValues","synthetic":true,"types":[]},{"text":"impl Sync for Rect","synthetic":true,"types":[]},{"text":"impl Sync for Mirror","synthetic":true,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Sync for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["event_loop"] = [{"text":"impl Sync for EventSettings","synthetic":true,"types":[]},{"text":"impl Sync for Events","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl Sync for FnvHasher","synthetic":true,"types":[]}];
implementors["gfx"] = [{"text":"impl&lt;S, D&gt; Sync for CopyError&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for UpdateError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, C&gt; Sync for Encoder&lt;R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::DepthStencilView: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Fence: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Mapping: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::PipelineStateObject: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Program: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::RenderTargetView: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Sampler: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Shader: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::ShaderResourceView: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Texture: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::UnorderedAccessView: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for PipelineStateError&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Slice&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Mapping: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for IndexBuffer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Mapping: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; Sync for VertexBufferCommon&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for NonInstanced","synthetic":true,"types":[]},{"text":"impl Sync for Instanced","synthetic":true,"types":[]},{"text":"impl Sync for RawVertexBuffer","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ConstantBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for RawConstantBuffer","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Global&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for RawGlobal","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ShaderResource&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for RawShaderResource","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for UnorderedAccess&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Sampler","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TextureSampler&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RenderTarget&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for BlendTarget&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for RawRenderTarget","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DepthTarget&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for StencilTarget&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DepthStencilTarget&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Scissor","synthetic":true,"types":[]},{"text":"impl Sync for BlendRef","synthetic":true,"types":[]},{"text":"impl&lt;R, Data&gt; Sync for Bundle&lt;R, Data&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Data: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Mapping: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Data as PipelineData&lt;R&gt;&gt;::Meta: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::PipelineStateObject: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Program: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for RawDataSet&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Buffer: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::DepthStencilView: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::RenderTargetView: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Sampler: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::ShaderResourceView: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::UnorderedAccessView: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for ElementError&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for InitError&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, M&gt; Sync for PipelineState&lt;R, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::PipelineStateObject: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Program: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ProgramError","synthetic":true,"types":[]}];
implementors["gfx_core"] = [{"text":"impl&lt;R&gt; Sync for Raw&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Buffer: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Role","synthetic":true,"types":[]},{"text":"impl Sync for Info","synthetic":true,"types":[]},{"text":"impl Sync for CreationError","synthetic":true,"types":[]},{"text":"impl Sync for ClearColor","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for AccessInfo&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Mapping: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Sync for AccessGuard&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Mapping: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Sync for AccessGuardBuffers&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Mapping: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Sync for AccessGuardBuffersChain&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Mapping: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DummyDevice","synthetic":true,"types":[]},{"text":"impl Sync for DummyResources","synthetic":true,"types":[]},{"text":"impl Sync for DummyFence","synthetic":true,"types":[]},{"text":"impl Sync for DummyMapping","synthetic":true,"types":[]},{"text":"impl Sync for DummyCommandBuffer","synthetic":true,"types":[]},{"text":"impl Sync for ResourceViewError","synthetic":true,"types":[]},{"text":"impl Sync for TargetViewError","synthetic":true,"types":[]},{"text":"impl Sync for CombinedError","synthetic":true,"types":[]},{"text":"impl Sync for ChannelType","synthetic":true,"types":[]},{"text":"impl Sync for Int","synthetic":true,"types":[]},{"text":"impl Sync for Uint","synthetic":true,"types":[]},{"text":"impl Sync for Inorm","synthetic":true,"types":[]},{"text":"impl Sync for Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Float","synthetic":true,"types":[]},{"text":"impl Sync for Srgb","synthetic":true,"types":[]},{"text":"impl Sync for SurfaceType","synthetic":true,"types":[]},{"text":"impl Sync for R4_G4","synthetic":true,"types":[]},{"text":"impl Sync for R4_G4_B4_A4","synthetic":true,"types":[]},{"text":"impl Sync for R5_G5_B5_A1","synthetic":true,"types":[]},{"text":"impl Sync for R5_G6_B5","synthetic":true,"types":[]},{"text":"impl Sync for R8","synthetic":true,"types":[]},{"text":"impl Sync for R8_G8","synthetic":true,"types":[]},{"text":"impl Sync for R8_G8_B8_A8","synthetic":true,"types":[]},{"text":"impl Sync for R10_G10_B10_A2","synthetic":true,"types":[]},{"text":"impl Sync for R11_G11_B10","synthetic":true,"types":[]},{"text":"impl Sync for R16","synthetic":true,"types":[]},{"text":"impl Sync for R16_G16","synthetic":true,"types":[]},{"text":"impl Sync for R16_G16_B16","synthetic":true,"types":[]},{"text":"impl Sync for R16_G16_B16_A16","synthetic":true,"types":[]},{"text":"impl Sync for R32","synthetic":true,"types":[]},{"text":"impl Sync for R32_G32","synthetic":true,"types":[]},{"text":"impl Sync for R32_G32_B32","synthetic":true,"types":[]},{"text":"impl Sync for R32_G32_B32_A32","synthetic":true,"types":[]},{"text":"impl Sync for B8_G8_R8_A8","synthetic":true,"types":[]},{"text":"impl Sync for D16","synthetic":true,"types":[]},{"text":"impl Sync for D24","synthetic":true,"types":[]},{"text":"impl Sync for D24_S8","synthetic":true,"types":[]},{"text":"impl Sync for D32","synthetic":true,"types":[]},{"text":"impl Sync for BC1_R8_G8_B8","synthetic":true,"types":[]},{"text":"impl Sync for BC3_R8_G8_B8_A8","synthetic":true,"types":[]},{"text":"impl Sync for ChannelSource","synthetic":true,"types":[]},{"text":"impl Sync for Swizzle","synthetic":true,"types":[]},{"text":"impl Sync for Format","synthetic":true,"types":[]},{"text":"impl Sync for U8Norm","synthetic":true,"types":[]},{"text":"impl Sync for I8Norm","synthetic":true,"types":[]},{"text":"impl Sync for U16Norm","synthetic":true,"types":[]},{"text":"impl Sync for I16Norm","synthetic":true,"types":[]},{"text":"impl Sync for F16","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for RawBuffer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Mapping: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; Sync for Buffer&lt;R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Mapping: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Shader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Shader: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Program&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Program: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for RawPipelineState&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::PipelineStateObject: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Program: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for RawTexture&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Texture: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, S&gt; Sync for Texture&lt;R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Texture: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for RawShaderResourceView&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Mapping: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::ShaderResourceView: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Texture: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; Sync for ShaderResourceView&lt;R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Mapping: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::ShaderResourceView: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Texture: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for RawUnorderedAccessView&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Mapping: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Texture: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::UnorderedAccessView: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; Sync for UnorderedAccessView&lt;R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Mapping: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Texture: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::UnorderedAccessView: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for RawRenderTargetView&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::RenderTargetView: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Texture: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for RawDepthStencilView&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::DepthStencilView: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Texture: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; Sync for RenderTargetView&lt;R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::RenderTargetView: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Texture: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; Sync for DepthStencilView&lt;R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::DepthStencilView: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Texture: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Sampler&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Sampler: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Fence&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Fence: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Manager&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::DepthStencilView: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Fence: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Mapping: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::PipelineStateObject: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Program: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::RenderTargetView: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Sampler: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Shader: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::ShaderResourceView: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Texture: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::UnorderedAccessView: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T&gt; Sync for Reader&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T&gt; Sync for Writer&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Usage","synthetic":true,"types":[]},{"text":"impl Sync for Access","synthetic":true,"types":[]},{"text":"impl Sync for Bind","synthetic":true,"types":[]},{"text":"impl Sync for CreationError","synthetic":true,"types":[]},{"text":"impl Sync for ColorInfo","synthetic":true,"types":[]},{"text":"impl Sync for DepthStencilInfo","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Element&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for VertexBufferDesc","synthetic":true,"types":[]},{"text":"impl Sync for Descriptor","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for VertexBufferSet&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Buffer: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for ConstantBufferParam&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Buffer: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for ResourceViewParam&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::ShaderResourceView: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for UnorderedViewParam&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::UnorderedAccessView: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for SamplerParam&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Sampler: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for PixelTargetSet&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::DepthStencilView: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::RenderTargetView: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for IsArray","synthetic":true,"types":[]},{"text":"impl Sync for IsComparison","synthetic":true,"types":[]},{"text":"impl Sync for IsMultiSample","synthetic":true,"types":[]},{"text":"impl Sync for IsRect","synthetic":true,"types":[]},{"text":"impl Sync for MatrixFormat","synthetic":true,"types":[]},{"text":"impl Sync for TextureType","synthetic":true,"types":[]},{"text":"impl Sync for SamplerType","synthetic":true,"types":[]},{"text":"impl Sync for BaseType","synthetic":true,"types":[]},{"text":"impl Sync for ContainerType","synthetic":true,"types":[]},{"text":"impl Sync for Stage","synthetic":true,"types":[]},{"text":"impl Sync for UniformValue","synthetic":true,"types":[]},{"text":"impl Sync for Usage","synthetic":true,"types":[]},{"text":"impl Sync for AttributeVar","synthetic":true,"types":[]},{"text":"impl Sync for ConstVar","synthetic":true,"types":[]},{"text":"impl Sync for ConstantBufferVar","synthetic":true,"types":[]},{"text":"impl Sync for TextureVar","synthetic":true,"types":[]},{"text":"impl Sync for UnorderedVar","synthetic":true,"types":[]},{"text":"impl Sync for SamplerVar","synthetic":true,"types":[]},{"text":"impl Sync for OutputVar","synthetic":true,"types":[]},{"text":"impl Sync for ProgramInfo","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Program&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Program: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for CompatibilityError","synthetic":true,"types":[]},{"text":"impl Sync for CreateShaderError","synthetic":true,"types":[]},{"text":"impl Sync for CreateProgramError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Raw&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Texture: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for CreationError","synthetic":true,"types":[]},{"text":"impl Sync for LayerError","synthetic":true,"types":[]},{"text":"impl Sync for AaMode","synthetic":true,"types":[]},{"text":"impl Sync for FilterMethod","synthetic":true,"types":[]},{"text":"impl Sync for CubeFace","synthetic":true,"types":[]},{"text":"impl Sync for Kind","synthetic":true,"types":[]},{"text":"impl Sync for Mipmap","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for ImageInfoCommon&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TextureCopyRegion&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for WrapMode","synthetic":true,"types":[]},{"text":"impl Sync for Lod","synthetic":true,"types":[]},{"text":"impl Sync for PackedColor","synthetic":true,"types":[]},{"text":"impl Sync for SamplerInfo","synthetic":true,"types":[]},{"text":"impl Sync for Info","synthetic":true,"types":[]},{"text":"impl Sync for ResourceDesc","synthetic":true,"types":[]},{"text":"impl Sync for RenderDesc","synthetic":true,"types":[]},{"text":"impl Sync for DepthStencilFlags","synthetic":true,"types":[]},{"text":"impl Sync for DepthStencilDesc","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for VertexShader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Shader: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for HullShader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Shader: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DomainShader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Shader: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for GeometryShader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Shader: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for PixelShader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Shader: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for ShaderSet&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Shader: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Capabilities","synthetic":true,"types":[]},{"text":"impl Sync for Primitive","synthetic":true,"types":[]},{"text":"impl Sync for IndexType","synthetic":true,"types":[]},{"text":"impl Sync for SubmissionError","synthetic":true,"types":[]},{"text":"impl Sync for AdapterInfo","synthetic":true,"types":[]},{"text":"impl Sync for Frame","synthetic":true,"types":[]}];
implementors["gfx_device_gl"] = [{"text":"impl !Sync for CommandBuffer","synthetic":true,"types":[]},{"text":"impl !Sync for Factory","synthetic":true,"types":[]},{"text":"impl Sync for Version","synthetic":true,"types":[]},{"text":"impl Sync for PlatformName","synthetic":true,"types":[]},{"text":"impl Sync for Info","synthetic":true,"types":[]},{"text":"impl Sync for Resources","synthetic":true,"types":[]},{"text":"impl Sync for BufferElement","synthetic":true,"types":[]},{"text":"impl Sync for OutputMerger","synthetic":true,"types":[]},{"text":"impl Sync for PipelineState","synthetic":true,"types":[]},{"text":"impl Sync for NewTexture","synthetic":true,"types":[]},{"text":"impl Sync for ResourceView","synthetic":true,"types":[]},{"text":"impl Sync for FatSampler","synthetic":true,"types":[]},{"text":"impl Sync for TargetView","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl !Sync for Device","synthetic":true,"types":[]},{"text":"impl Sync for Fence","synthetic":false,"types":[]}];
implementors["gfx_gl"] = [{"text":"impl Sync for __GLsync","synthetic":true,"types":[]},{"text":"impl Sync for _cl_context","synthetic":true,"types":[]},{"text":"impl Sync for _cl_event","synthetic":true,"types":[]},{"text":"impl !Sync for FnPtr","synthetic":true,"types":[]},{"text":"impl !Sync for Gl","synthetic":true,"types":[]}];
implementors["gfx_graphics"] = [{"text":"impl&lt;R&gt; Sync for Gfx2d&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Mapping: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::PipelineStateObject: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Program: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, C&gt; Sync for GfxGraphics&lt;'a, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::DepthStencilView: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Fence: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Mapping: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::PipelineStateObject: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Program: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::RenderTargetView: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Sampler: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Shader: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::ShaderResourceView: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Texture: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::UnorderedAccessView: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["gfx_texture"] = [{"text":"impl&lt;F, R, C&gt; Sync for TextureContext&lt;F, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::DepthStencilView: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Fence: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Mapping: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::PipelineStateObject: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Program: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::RenderTargetView: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Sampler: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Shader: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::ShaderResourceView: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Texture: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::UnorderedAccessView: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Flip","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Texture&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Mapping: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Sampler: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::ShaderResourceView: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Texture: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["gif"] = [{"text":"impl Sync for DisposalMethod","synthetic":true,"types":[]},{"text":"impl Sync for Block","synthetic":true,"types":[]},{"text":"impl Sync for AnyExtension","synthetic":true,"types":[]},{"text":"impl Sync for Extension","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Frame&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for DecodingFormatError","synthetic":true,"types":[]},{"text":"impl Sync for DecodingError","synthetic":true,"types":[]},{"text":"impl Sync for Extensions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Decoded&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for StreamingDecoder","synthetic":true,"types":[]},{"text":"impl Sync for ColorOutput","synthetic":true,"types":[]},{"text":"impl Sync for MemoryLimit","synthetic":true,"types":[]},{"text":"impl Sync for DecodeOptions","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !Sync for Decoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl Sync for EncodingError","synthetic":true,"types":[]},{"text":"impl Sync for Repeat","synthetic":true,"types":[]},{"text":"impl Sync for ExtensionData","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["gl"] = [{"text":"impl Sync for __GLsync","synthetic":true,"types":[]},{"text":"impl Sync for _cl_context","synthetic":true,"types":[]},{"text":"impl Sync for _cl_event","synthetic":true,"types":[]},{"text":"impl !Sync for FnPtr","synthetic":true,"types":[]}];
implementors["glutin"] = [{"text":"impl !Sync for RawHandle","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Context&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for PossiblyCurrent","synthetic":true,"types":[]},{"text":"impl Sync for NotCurrent","synthetic":true,"types":[]},{"text":"impl&lt;T, W&gt; Sync for ContextWrapper&lt;T, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for ContextBuilder&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for CreationError","synthetic":true,"types":[]},{"text":"impl Sync for ContextError","synthetic":true,"types":[]},{"text":"impl Sync for Api","synthetic":true,"types":[]},{"text":"impl Sync for GlProfile","synthetic":true,"types":[]},{"text":"impl Sync for GlRequest","synthetic":true,"types":[]},{"text":"impl Sync for Robustness","synthetic":true,"types":[]},{"text":"impl Sync for ReleaseBehavior","synthetic":true,"types":[]},{"text":"impl Sync for PixelFormat","synthetic":true,"types":[]},{"text":"impl Sync for PixelFormatRequirements","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for GlAttributes&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Rect","synthetic":true,"types":[]}];
implementors["glutin_egl_sys"] = [{"text":"impl Sync for __eglMustCastToProperFunctionPointerType_fn","synthetic":true,"types":[]},{"text":"impl !Sync for EGLClientPixmapHI","synthetic":true,"types":[]},{"text":"impl !Sync for FnPtr","synthetic":true,"types":[]},{"text":"impl !Sync for Egl","synthetic":true,"types":[]}];
implementors["glutin_glx_sys"] = [{"text":"impl Sync for __GLsync","synthetic":true,"types":[]},{"text":"impl Sync for _cl_context","synthetic":true,"types":[]},{"text":"impl Sync for _cl_event","synthetic":true,"types":[]},{"text":"impl Sync for Display","synthetic":true,"types":[]},{"text":"impl Sync for Visual","synthetic":true,"types":[]},{"text":"impl Sync for __GLXextFuncPtr_fn","synthetic":true,"types":[]},{"text":"impl !Sync for XVisualInfo","synthetic":true,"types":[]},{"text":"impl !Sync for GLXPbufferClobberEvent","synthetic":true,"types":[]},{"text":"impl !Sync for GLXBufferSwapComplete","synthetic":true,"types":[]},{"text":"impl !Sync for GLXBufferClobberEventSGIX","synthetic":true,"types":[]},{"text":"impl Sync for GLXHyperpipeNetworkSGIX","synthetic":true,"types":[]},{"text":"impl Sync for GLXHyperpipeConfigSGIX","synthetic":true,"types":[]},{"text":"impl Sync for GLXPipeRect","synthetic":true,"types":[]},{"text":"impl Sync for GLXPipeRectLimits","synthetic":true,"types":[]},{"text":"impl !Sync for FnPtr","synthetic":true,"types":[]},{"text":"impl !Sync for Glx","synthetic":true,"types":[]},{"text":"impl Sync for __GLsync","synthetic":true,"types":[]},{"text":"impl Sync for _cl_context","synthetic":true,"types":[]},{"text":"impl Sync for _cl_event","synthetic":true,"types":[]},{"text":"impl Sync for Display","synthetic":true,"types":[]},{"text":"impl Sync for Visual","synthetic":true,"types":[]},{"text":"impl Sync for __GLXextFuncPtr_fn","synthetic":true,"types":[]},{"text":"impl !Sync for XVisualInfo","synthetic":true,"types":[]},{"text":"impl !Sync for GLXPbufferClobberEvent","synthetic":true,"types":[]},{"text":"impl !Sync for GLXBufferSwapComplete","synthetic":true,"types":[]},{"text":"impl !Sync for GLXBufferClobberEventSGIX","synthetic":true,"types":[]},{"text":"impl Sync for GLXHyperpipeNetworkSGIX","synthetic":true,"types":[]},{"text":"impl Sync for GLXHyperpipeConfigSGIX","synthetic":true,"types":[]},{"text":"impl Sync for GLXPipeRect","synthetic":true,"types":[]},{"text":"impl Sync for GLXPipeRectLimits","synthetic":true,"types":[]},{"text":"impl !Sync for FnPtr","synthetic":true,"types":[]},{"text":"impl !Sync for Glx","synthetic":true,"types":[]}];
implementors["glutin_window"] = [{"text":"impl !Sync for GlutinWindow","synthetic":true,"types":[]},{"text":"impl Sync for UserEvent","synthetic":true,"types":[]}];
implementors["graphics"] = [{"text":"impl Sync for DrawState","synthetic":true,"types":[]},{"text":"impl Sync for Blend","synthetic":true,"types":[]},{"text":"impl Sync for Stencil","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Character&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Context","synthetic":true,"types":[]},{"text":"impl Sync for Polygon","synthetic":true,"types":[]},{"text":"impl Sync for Shape","synthetic":true,"types":[]},{"text":"impl Sync for Line","synthetic":true,"types":[]},{"text":"impl Sync for CircleArc","synthetic":true,"types":[]},{"text":"impl Sync for Border","synthetic":true,"types":[]},{"text":"impl Sync for Ellipse","synthetic":true,"types":[]},{"text":"impl Sync for Shape","synthetic":true,"types":[]},{"text":"impl Sync for Border","synthetic":true,"types":[]},{"text":"impl Sync for Rectangle","synthetic":true,"types":[]},{"text":"impl Sync for Image","synthetic":true,"types":[]},{"text":"impl Sync for Text","synthetic":true,"types":[]},{"text":"impl Sync for Grid","synthetic":true,"types":[]},{"text":"impl Sync for GridCells","synthetic":true,"types":[]},{"text":"impl&lt;'a, F, T&gt; Sync for GlyphCache&lt;'a, F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TexturePacker&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["graphics_api_version"] = [{"text":"impl Sync for Version","synthetic":true,"types":[]},{"text":"impl Sync for UnsupportedGraphicsApiError","synthetic":true,"types":[]}];
implementors["image"] = [{"text":"impl Sync for ImageError","synthetic":true,"types":[]},{"text":"impl Sync for UnsupportedError","synthetic":true,"types":[]},{"text":"impl Sync for UnsupportedErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for EncodingError","synthetic":true,"types":[]},{"text":"impl Sync for ParameterError","synthetic":true,"types":[]},{"text":"impl Sync for ParameterErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for DecodingError","synthetic":true,"types":[]},{"text":"impl Sync for LimitError","synthetic":true,"types":[]},{"text":"impl Sync for LimitErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for ImageFormatHint","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Sync for EnumeratePixels&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Sync for EnumeratePixelsMut&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Sync for EnumerateRows&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Sync for EnumerateRowsMut&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Sync for Pixels&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Sync for PixelsMut&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Sync for Rows&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Sync for RowsMut&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for NeuQuant","synthetic":true,"types":[]},{"text":"impl Sync for Rect","synthetic":true,"types":[]},{"text":"impl Sync for BiLevel","synthetic":true,"types":[]},{"text":"impl Sync for FilterType","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Buffer&gt; Sync for FlatSamples&lt;Buffer&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SampleLayout","synthetic":true,"types":[]},{"text":"impl&lt;Buffer, P&gt; Sync for View&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Buffer, P&gt; Sync for ViewMut&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for NormalForm","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for BmpDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Sync for BmpEncoder&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DdsDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DXTVariant","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DxtDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DxtReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for DxtEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for FarbfeldReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for FarbfeldDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for FarbfeldEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !Sync for GifDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for GifReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for GifEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for HdrAdapter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for HdrReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for HdrDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Rgbe8Pixel","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for HdrImageDecoderIterator&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for HdrMetadata","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for HdrEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for IcoDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for IcoEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for JpegDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for PixelDensityUnit","synthetic":true,"types":[]},{"text":"impl Sync for PixelDensity","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Sync for JpegEncoder&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for PngReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for PngDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for ApngDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for PngEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for CompressionType","synthetic":true,"types":[]},{"text":"impl Sync for FilterType","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for PnmDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for PnmEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SampleEncoding","synthetic":true,"types":[]},{"text":"impl Sync for PNMSubtype","synthetic":true,"types":[]},{"text":"impl Sync for PnmHeader","synthetic":true,"types":[]},{"text":"impl Sync for BitmapHeader","synthetic":true,"types":[]},{"text":"impl Sync for GraymapHeader","synthetic":true,"types":[]},{"text":"impl Sync for PixmapHeader","synthetic":true,"types":[]},{"text":"impl Sync for ArbitraryHeader","synthetic":true,"types":[]},{"text":"impl Sync for ArbitraryTuplType","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for TgaDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for TgaEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for TiffDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for TiffReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for TiffEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for WebPDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Frame","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Vp8Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Frames&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Frame","synthetic":true,"types":[]},{"text":"impl Sync for Delay","synthetic":true,"types":[]},{"text":"impl&lt;P, Container&gt; Sync for ImageBuffer&lt;P, Container&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Container: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ColorType","synthetic":true,"types":[]},{"text":"impl Sync for ExtendedColorType","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Rgb&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Bgr&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Luma&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Rgba&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Bgra&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for LumaA&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DynamicImage","synthetic":true,"types":[]},{"text":"impl Sync for ImageFormat","synthetic":true,"types":[]},{"text":"impl Sync for ImageOutputFormat","synthetic":true,"types":[]},{"text":"impl Sync for Progress","synthetic":true,"types":[]},{"text":"impl&lt;'a, I:&nbsp;?Sized&gt; Sync for Pixels&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for SubImage&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["input"] = [{"text":"impl Sync for ControllerButton","synthetic":true,"types":[]},{"text":"impl Sync for ControllerHat","synthetic":true,"types":[]},{"text":"impl Sync for ControllerAxisArgs","synthetic":true,"types":[]},{"text":"impl Sync for ModifierKey","synthetic":true,"types":[]},{"text":"impl Sync for Key","synthetic":true,"types":[]},{"text":"impl Sync for MouseButton","synthetic":true,"types":[]},{"text":"impl Sync for EventId","synthetic":true,"types":[]},{"text":"impl Sync for AfterRenderArgs","synthetic":true,"types":[]},{"text":"impl Sync for ButtonState","synthetic":true,"types":[]},{"text":"impl Sync for ButtonArgs","synthetic":true,"types":[]},{"text":"impl Sync for CloseArgs","synthetic":true,"types":[]},{"text":"impl Sync for IdleArgs","synthetic":true,"types":[]},{"text":"impl Sync for RenderArgs","synthetic":true,"types":[]},{"text":"impl Sync for ResizeArgs","synthetic":true,"types":[]},{"text":"impl Sync for Touch","synthetic":true,"types":[]},{"text":"impl Sync for TouchArgs","synthetic":true,"types":[]},{"text":"impl Sync for UpdateArgs","synthetic":true,"types":[]},{"text":"impl Sync for Button","synthetic":true,"types":[]},{"text":"impl Sync for Motion","synthetic":true,"types":[]},{"text":"impl Sync for HatState","synthetic":true,"types":[]},{"text":"impl Sync for FileDrag","synthetic":true,"types":[]},{"text":"impl Sync for Input","synthetic":true,"types":[]},{"text":"impl Sync for Loop","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]}];
implementors["interpolation"] = [{"text":"impl Sync for EaseFunction","synthetic":true,"types":[]}];
implementors["iovec"] = [{"text":"impl Sync for IoVec","synthetic":true,"types":[]}];
implementors["jpeg_decoder"] = [{"text":"impl Sync for PixelFormat","synthetic":true,"types":[]},{"text":"impl Sync for ImageInfo","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for UnsupportedFeature","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]}];
implementors["lazycell"] = [{"text":"impl&lt;T&gt; !Sync for LazyCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Sync + Send&gt; Sync for AtomicLazyCell&lt;T&gt;","synthetic":false,"types":[]}];
implementors["libc"] = [{"text":"impl Sync for statvfs","synthetic":true,"types":[]},{"text":"impl Sync for max_align_t","synthetic":true,"types":[]},{"text":"impl Sync for sigaction","synthetic":true,"types":[]},{"text":"impl Sync for statfs","synthetic":true,"types":[]},{"text":"impl Sync for flock","synthetic":true,"types":[]},{"text":"impl Sync for flock64","synthetic":true,"types":[]},{"text":"impl Sync for siginfo_t","synthetic":true,"types":[]},{"text":"impl !Sync for stack_t","synthetic":true,"types":[]},{"text":"impl Sync for stat","synthetic":true,"types":[]},{"text":"impl Sync for stat64","synthetic":true,"types":[]},{"text":"impl Sync for statfs64","synthetic":true,"types":[]},{"text":"impl Sync for statvfs64","synthetic":true,"types":[]},{"text":"impl Sync for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Sync for _libc_fpxreg","synthetic":true,"types":[]},{"text":"impl Sync for _libc_xmmreg","synthetic":true,"types":[]},{"text":"impl Sync for _libc_fpstate","synthetic":true,"types":[]},{"text":"impl Sync for user_regs_struct","synthetic":true,"types":[]},{"text":"impl !Sync for user","synthetic":true,"types":[]},{"text":"impl !Sync for mcontext_t","synthetic":true,"types":[]},{"text":"impl Sync for ipc_perm","synthetic":true,"types":[]},{"text":"impl Sync for shmid_ds","synthetic":true,"types":[]},{"text":"impl Sync for termios2","synthetic":true,"types":[]},{"text":"impl Sync for ip_mreqn","synthetic":true,"types":[]},{"text":"impl Sync for user_fpregs_struct","synthetic":true,"types":[]},{"text":"impl !Sync for ucontext_t","synthetic":true,"types":[]},{"text":"impl Sync for sigset_t","synthetic":true,"types":[]},{"text":"impl Sync for sysinfo","synthetic":true,"types":[]},{"text":"impl Sync for msqid_ds","synthetic":true,"types":[]},{"text":"impl Sync for sem_t","synthetic":true,"types":[]},{"text":"impl Sync for statx","synthetic":true,"types":[]},{"text":"impl Sync for statx_timestamp","synthetic":true,"types":[]},{"text":"impl !Sync for aiocb","synthetic":true,"types":[]},{"text":"impl Sync for __exit_status","synthetic":true,"types":[]},{"text":"impl Sync for __timeval","synthetic":true,"types":[]},{"text":"impl !Sync for glob64_t","synthetic":true,"types":[]},{"text":"impl !Sync for msghdr","synthetic":true,"types":[]},{"text":"impl Sync for cmsghdr","synthetic":true,"types":[]},{"text":"impl Sync for termios","synthetic":true,"types":[]},{"text":"impl Sync for mallinfo","synthetic":true,"types":[]},{"text":"impl Sync for nlmsghdr","synthetic":true,"types":[]},{"text":"impl Sync for nlmsgerr","synthetic":true,"types":[]},{"text":"impl Sync for nl_pktinfo","synthetic":true,"types":[]},{"text":"impl Sync for nl_mmap_req","synthetic":true,"types":[]},{"text":"impl Sync for nl_mmap_hdr","synthetic":true,"types":[]},{"text":"impl Sync for nlattr","synthetic":true,"types":[]},{"text":"impl !Sync for rtentry","synthetic":true,"types":[]},{"text":"impl Sync for timex","synthetic":true,"types":[]},{"text":"impl Sync for ntptimeval","synthetic":true,"types":[]},{"text":"impl !Sync for regex_t","synthetic":true,"types":[]},{"text":"impl Sync for utmpx","synthetic":true,"types":[]},{"text":"impl Sync for fpos64_t","synthetic":true,"types":[]},{"text":"impl Sync for rlimit64","synthetic":true,"types":[]},{"text":"impl !Sync for glob_t","synthetic":true,"types":[]},{"text":"impl !Sync for passwd","synthetic":true,"types":[]},{"text":"impl !Sync for spwd","synthetic":true,"types":[]},{"text":"impl Sync for dqblk","synthetic":true,"types":[]},{"text":"impl Sync for signalfd_siginfo","synthetic":true,"types":[]},{"text":"impl Sync for itimerspec","synthetic":true,"types":[]},{"text":"impl Sync for fsid_t","synthetic":true,"types":[]},{"text":"impl Sync for packet_mreq","synthetic":true,"types":[]},{"text":"impl Sync for cpu_set_t","synthetic":true,"types":[]},{"text":"impl !Sync for if_nameindex","synthetic":true,"types":[]},{"text":"impl Sync for msginfo","synthetic":true,"types":[]},{"text":"impl Sync for sembuf","synthetic":true,"types":[]},{"text":"impl Sync for input_event","synthetic":true,"types":[]},{"text":"impl Sync for input_id","synthetic":true,"types":[]},{"text":"impl Sync for input_absinfo","synthetic":true,"types":[]},{"text":"impl Sync for input_keymap_entry","synthetic":true,"types":[]},{"text":"impl Sync for input_mask","synthetic":true,"types":[]},{"text":"impl Sync for ff_replay","synthetic":true,"types":[]},{"text":"impl Sync for ff_trigger","synthetic":true,"types":[]},{"text":"impl Sync for ff_envelope","synthetic":true,"types":[]},{"text":"impl Sync for ff_constant_effect","synthetic":true,"types":[]},{"text":"impl Sync for ff_ramp_effect","synthetic":true,"types":[]},{"text":"impl Sync for ff_condition_effect","synthetic":true,"types":[]},{"text":"impl !Sync for ff_periodic_effect","synthetic":true,"types":[]},{"text":"impl Sync for ff_rumble_effect","synthetic":true,"types":[]},{"text":"impl Sync for ff_effect","synthetic":true,"types":[]},{"text":"impl !Sync for dl_phdr_info","synthetic":true,"types":[]},{"text":"impl Sync for Elf32_Ehdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf64_Ehdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf32_Sym","synthetic":true,"types":[]},{"text":"impl Sync for Elf64_Sym","synthetic":true,"types":[]},{"text":"impl Sync for Elf32_Phdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf64_Phdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf32_Shdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf64_Shdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf32_Chdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf64_Chdr","synthetic":true,"types":[]},{"text":"impl Sync for ucred","synthetic":true,"types":[]},{"text":"impl !Sync for mntent","synthetic":true,"types":[]},{"text":"impl !Sync for posix_spawn_file_actions_t","synthetic":true,"types":[]},{"text":"impl Sync for posix_spawnattr_t","synthetic":true,"types":[]},{"text":"impl Sync for genlmsghdr","synthetic":true,"types":[]},{"text":"impl Sync for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Sync for arpd_request","synthetic":true,"types":[]},{"text":"impl Sync for inotify_event","synthetic":true,"types":[]},{"text":"impl Sync for fanotify_response","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_vm","synthetic":true,"types":[]},{"text":"impl Sync for regmatch_t","synthetic":true,"types":[]},{"text":"impl Sync for sock_extended_err","synthetic":true,"types":[]},{"text":"impl Sync for __c_anonymous_sockaddr_can_tp","synthetic":true,"types":[]},{"text":"impl Sync for __c_anonymous_sockaddr_can_j1939","synthetic":true,"types":[]},{"text":"impl Sync for can_filter","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_nl","synthetic":true,"types":[]},{"text":"impl Sync for dirent","synthetic":true,"types":[]},{"text":"impl Sync for dirent64","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_alg","synthetic":true,"types":[]},{"text":"impl Sync for af_alg_iv","synthetic":true,"types":[]},{"text":"impl Sync for mq_attr","synthetic":true,"types":[]},{"text":"impl Sync for __c_anonymous_sockaddr_can_can_addr","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_can","synthetic":true,"types":[]},{"text":"impl Sync for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Sync for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Sync for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Sync for fanotify_event_metadata","synthetic":true,"types":[]},{"text":"impl Sync for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Sync for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Sync for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Sync for can_frame","synthetic":true,"types":[]},{"text":"impl Sync for canfd_frame","synthetic":true,"types":[]},{"text":"impl Sync for timezone","synthetic":true,"types":[]},{"text":"impl Sync for in_addr","synthetic":true,"types":[]},{"text":"impl Sync for ip_mreq","synthetic":true,"types":[]},{"text":"impl Sync for ip_mreq_source","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl !Sync for addrinfo","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_ll","synthetic":true,"types":[]},{"text":"impl Sync for fd_set","synthetic":true,"types":[]},{"text":"impl !Sync for tm","synthetic":true,"types":[]},{"text":"impl Sync for sched_param","synthetic":true,"types":[]},{"text":"impl !Sync for Dl_info","synthetic":true,"types":[]},{"text":"impl !Sync for lconv","synthetic":true,"types":[]},{"text":"impl Sync for in_pktinfo","synthetic":true,"types":[]},{"text":"impl !Sync for ifaddrs","synthetic":true,"types":[]},{"text":"impl Sync for in6_rtmsg","synthetic":true,"types":[]},{"text":"impl Sync for arpreq","synthetic":true,"types":[]},{"text":"impl Sync for arpreq_old","synthetic":true,"types":[]},{"text":"impl Sync for arphdr","synthetic":true,"types":[]},{"text":"impl !Sync for mmsghdr","synthetic":true,"types":[]},{"text":"impl Sync for epoll_event","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Sync for utsname","synthetic":true,"types":[]},{"text":"impl !Sync for sigevent","synthetic":true,"types":[]},{"text":"impl Sync for in6_addr","synthetic":true,"types":[]},{"text":"impl Sync for DIR","synthetic":true,"types":[]},{"text":"impl !Sync for group","synthetic":true,"types":[]},{"text":"impl Sync for utimbuf","synthetic":true,"types":[]},{"text":"impl Sync for timeval","synthetic":true,"types":[]},{"text":"impl Sync for timespec","synthetic":true,"types":[]},{"text":"impl Sync for rlimit","synthetic":true,"types":[]},{"text":"impl Sync for rusage","synthetic":true,"types":[]},{"text":"impl Sync for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl !Sync for hostent","synthetic":true,"types":[]},{"text":"impl !Sync for iovec","synthetic":true,"types":[]},{"text":"impl Sync for pollfd","synthetic":true,"types":[]},{"text":"impl Sync for winsize","synthetic":true,"types":[]},{"text":"impl Sync for linger","synthetic":true,"types":[]},{"text":"impl !Sync for sigval","synthetic":true,"types":[]},{"text":"impl Sync for itimerval","synthetic":true,"types":[]},{"text":"impl Sync for tms","synthetic":true,"types":[]},{"text":"impl !Sync for servent","synthetic":true,"types":[]},{"text":"impl !Sync for protoent","synthetic":true,"types":[]},{"text":"impl Sync for FILE","synthetic":true,"types":[]},{"text":"impl Sync for fpos_t","synthetic":true,"types":[]}];
implementors["libloading"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Library","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sync&gt; Sync for Symbol&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Sync for Library","synthetic":false,"types":[]},{"text":"impl&lt;'lib, T:&nbsp;Sync&gt; Sync for Symbol&lt;'lib, T&gt;","synthetic":false,"types":[]}];
implementors["lock_api"] = [{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Sync for RwLockReadGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawRwLock&gt;::GuardMarker: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Sync for RwLockWriteGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawRwLock&gt;::GuardMarker: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for GuardSend","synthetic":true,"types":[]},{"text":"impl Sync for GuardNoSend","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Sync, T:&nbsp;?Sized + Send&gt; Sync for Mutex&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + Sync + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MutexGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + Sync + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MappedMutexGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Sync, G:&nbsp;GetThreadId + Sync&gt; Sync for RawReentrantMutex&lt;R, G&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Sync, G:&nbsp;GetThreadId + Sync, T:&nbsp;?Sized + Send&gt; Sync for ReentrantMutex&lt;R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + Sync + 'a, G:&nbsp;GetThreadId + Sync + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for ReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + Sync + 'a, G:&nbsp;GetThreadId + Sync + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MappedReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawRwLock + Sync, T:&nbsp;?Sized + Send + Sync&gt; Sync for RwLock&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLockUpgrade + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for RwLockUpgradableReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MappedRwLockReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MappedRwLockWriteGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Sync for Level","synthetic":true,"types":[]},{"text":"impl Sync for LevelFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Sync for ParseLevelError","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; Sync for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["memmap2"] = [{"text":"impl Sync for MmapOptions","synthetic":true,"types":[]},{"text":"impl Sync for Mmap","synthetic":true,"types":[]},{"text":"impl Sync for MmapMut","synthetic":true,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Sync for CompressionStrategy","synthetic":true,"types":[]},{"text":"impl Sync for TDEFLFlush","synthetic":true,"types":[]},{"text":"impl Sync for TDEFLStatus","synthetic":true,"types":[]},{"text":"impl Sync for CompressorOxide","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for CallbackFunc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CompressionLevel","synthetic":true,"types":[]},{"text":"impl Sync for DecompressorOxide","synthetic":true,"types":[]},{"text":"impl Sync for MinReset","synthetic":true,"types":[]},{"text":"impl Sync for ZeroReset","synthetic":true,"types":[]},{"text":"impl Sync for FullReset","synthetic":true,"types":[]},{"text":"impl Sync for InflateState","synthetic":true,"types":[]},{"text":"impl Sync for TINFLStatus","synthetic":true,"types":[]},{"text":"impl Sync for MZFlush","synthetic":true,"types":[]},{"text":"impl Sync for MZStatus","synthetic":true,"types":[]},{"text":"impl Sync for MZError","synthetic":true,"types":[]},{"text":"impl Sync for DataFormat","synthetic":true,"types":[]},{"text":"impl Sync for StreamResult","synthetic":true,"types":[]}];
implementors["mio"] = [{"text":"impl Sync for PollOpt","synthetic":true,"types":[]},{"text":"impl Sync for Ready","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for Poll","synthetic":true,"types":[]},{"text":"impl Sync for Events","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for EventedFd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for UnixReady","synthetic":true,"types":[]},{"text":"impl Sync for Token","synthetic":true,"types":[]},{"text":"impl Sync for TcpStream","synthetic":true,"types":[]},{"text":"impl Sync for TcpListener","synthetic":true,"types":[]},{"text":"impl Sync for UdpSocket","synthetic":true,"types":[]},{"text":"impl Sync for Registration","synthetic":false,"types":[]},{"text":"impl Sync for SetReadiness","synthetic":false,"types":[]}];
implementors["mio_extras"] = [{"text":"impl&lt;T&gt; !Sync for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SyncSender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for Timer&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Builder","synthetic":true,"types":[]},{"text":"impl Sync for Timeout","synthetic":true,"types":[]}];
implementors["net2"] = [{"text":"impl !Sync for TcpBuilder","synthetic":true,"types":[]},{"text":"impl !Sync for UdpBuilder","synthetic":true,"types":[]}];
implementors["nix"] = [{"text":"impl !Sync for Dir","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; !Sync for Iter&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Entry","synthetic":true,"types":[]},{"text":"impl Sync for Type","synthetic":true,"types":[]},{"text":"impl Sync for Errno","synthetic":true,"types":[]},{"text":"impl Sync for PosixFadviseAdvice","synthetic":true,"types":[]},{"text":"impl Sync for AtFlags","synthetic":true,"types":[]},{"text":"impl Sync for OFlag","synthetic":true,"types":[]},{"text":"impl Sync for SealFlag","synthetic":true,"types":[]},{"text":"impl Sync for FdFlag","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for FcntlArg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for FlockArg","synthetic":true,"types":[]},{"text":"impl Sync for SpliceFFlags","synthetic":true,"types":[]},{"text":"impl Sync for FallocateFlags","synthetic":true,"types":[]},{"text":"impl Sync for InterfaceAddress","synthetic":true,"types":[]},{"text":"impl !Sync for InterfaceAddressIterator","synthetic":true,"types":[]},{"text":"impl Sync for ModuleInitFlags","synthetic":true,"types":[]},{"text":"impl Sync for DeleteModuleFlags","synthetic":true,"types":[]},{"text":"impl Sync for MsFlags","synthetic":true,"types":[]},{"text":"impl Sync for MntFlags","synthetic":true,"types":[]},{"text":"impl Sync for MQ_OFlag","synthetic":true,"types":[]},{"text":"impl Sync for FdFlag","synthetic":true,"types":[]},{"text":"impl Sync for MqAttr","synthetic":true,"types":[]},{"text":"impl Sync for InterfaceFlags","synthetic":true,"types":[]},{"text":"impl Sync for PollFd","synthetic":true,"types":[]},{"text":"impl Sync for PollFlags","synthetic":true,"types":[]},{"text":"impl Sync for OpenptyResult","synthetic":true,"types":[]},{"text":"impl Sync for ForkptyResult","synthetic":true,"types":[]},{"text":"impl Sync for PtyMaster","synthetic":true,"types":[]},{"text":"impl Sync for CloneFlags","synthetic":true,"types":[]},{"text":"impl Sync for CpuSet","synthetic":true,"types":[]},{"text":"impl Sync for AioFsyncMode","synthetic":true,"types":[]},{"text":"impl Sync for LioOpcode","synthetic":true,"types":[]},{"text":"impl Sync for LioMode","synthetic":true,"types":[]},{"text":"impl Sync for AioCancelStat","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Buffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for AioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for LioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for EpollFlags","synthetic":true,"types":[]},{"text":"impl Sync for EpollOp","synthetic":true,"types":[]},{"text":"impl Sync for EpollCreateFlags","synthetic":true,"types":[]},{"text":"impl Sync for EpollEvent","synthetic":true,"types":[]},{"text":"impl Sync for EfdFlags","synthetic":true,"types":[]},{"text":"impl Sync for MemFdCreateFlag","synthetic":true,"types":[]},{"text":"impl Sync for ProtFlags","synthetic":true,"types":[]},{"text":"impl Sync for MapFlags","synthetic":true,"types":[]},{"text":"impl Sync for MmapAdvise","synthetic":true,"types":[]},{"text":"impl Sync for MsFlags","synthetic":true,"types":[]},{"text":"impl Sync for MlockAllFlags","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for Options","synthetic":true,"types":[]},{"text":"impl Sync for QuotaType","synthetic":true,"types":[]},{"text":"impl Sync for QuotaFmt","synthetic":true,"types":[]},{"text":"impl Sync for QuotaValidFlags","synthetic":true,"types":[]},{"text":"impl Sync for Dqblk","synthetic":true,"types":[]},{"text":"impl Sync for RebootMode","synthetic":true,"types":[]},{"text":"impl Sync for FdSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Fds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for SigEvent","synthetic":true,"types":[]},{"text":"impl Sync for Signal","synthetic":true,"types":[]},{"text":"impl Sync for SignalIterator","synthetic":true,"types":[]},{"text":"impl Sync for SaFlags","synthetic":true,"types":[]},{"text":"impl Sync for SigmaskHow","synthetic":true,"types":[]},{"text":"impl Sync for SigSet","synthetic":true,"types":[]},{"text":"impl Sync for SigHandler","synthetic":true,"types":[]},{"text":"impl Sync for SigAction","synthetic":true,"types":[]},{"text":"impl Sync for SigevNotify","synthetic":true,"types":[]},{"text":"impl Sync for SfdFlags","synthetic":true,"types":[]},{"text":"impl Sync for SignalFd","synthetic":true,"types":[]},{"text":"impl Sync for NetlinkAddr","synthetic":true,"types":[]},{"text":"impl Sync for AlgAddr","synthetic":true,"types":[]},{"text":"impl Sync for LinkAddr","synthetic":true,"types":[]},{"text":"impl Sync for VsockAddr","synthetic":true,"types":[]},{"text":"impl Sync for AddressFamily","synthetic":true,"types":[]},{"text":"impl Sync for InetAddr","synthetic":true,"types":[]},{"text":"impl Sync for IpAddr","synthetic":true,"types":[]},{"text":"impl Sync for Ipv4Addr","synthetic":true,"types":[]},{"text":"impl Sync for Ipv6Addr","synthetic":true,"types":[]},{"text":"impl Sync for UnixAddr","synthetic":true,"types":[]},{"text":"impl Sync for SockAddr","synthetic":true,"types":[]},{"text":"impl Sync for ReuseAddr","synthetic":true,"types":[]},{"text":"impl Sync for ReusePort","synthetic":true,"types":[]},{"text":"impl Sync for TcpNoDelay","synthetic":true,"types":[]},{"text":"impl Sync for Linger","synthetic":true,"types":[]},{"text":"impl Sync for IpAddMembership","synthetic":true,"types":[]},{"text":"impl Sync for IpDropMembership","synthetic":true,"types":[]},{"text":"impl Sync for Ipv6AddMembership","synthetic":true,"types":[]},{"text":"impl Sync for Ipv6DropMembership","synthetic":true,"types":[]},{"text":"impl Sync for IpMulticastTtl","synthetic":true,"types":[]},{"text":"impl Sync for IpMulticastLoop","synthetic":true,"types":[]},{"text":"impl Sync for ReceiveTimeout","synthetic":true,"types":[]},{"text":"impl Sync for SendTimeout","synthetic":true,"types":[]},{"text":"impl Sync for Broadcast","synthetic":true,"types":[]},{"text":"impl Sync for OobInline","synthetic":true,"types":[]},{"text":"impl Sync for SocketError","synthetic":true,"types":[]},{"text":"impl Sync for KeepAlive","synthetic":true,"types":[]},{"text":"impl Sync for PeerCredentials","synthetic":true,"types":[]},{"text":"impl Sync for TcpKeepIdle","synthetic":true,"types":[]},{"text":"impl Sync for RcvBuf","synthetic":true,"types":[]},{"text":"impl Sync for SndBuf","synthetic":true,"types":[]},{"text":"impl Sync for RcvBufForce","synthetic":true,"types":[]},{"text":"impl Sync for SndBufForce","synthetic":true,"types":[]},{"text":"impl Sync for SockType","synthetic":true,"types":[]},{"text":"impl Sync for AcceptConn","synthetic":true,"types":[]},{"text":"impl Sync for BindToDevice","synthetic":true,"types":[]},{"text":"impl Sync for OriginalDst","synthetic":true,"types":[]},{"text":"impl Sync for ReceiveTimestamp","synthetic":true,"types":[]},{"text":"impl Sync for IpTransparent","synthetic":true,"types":[]},{"text":"impl Sync for Mark","synthetic":true,"types":[]},{"text":"impl Sync for PassCred","synthetic":true,"types":[]},{"text":"impl Sync for TcpCongestion","synthetic":true,"types":[]},{"text":"impl Sync for Ipv4PacketInfo","synthetic":true,"types":[]},{"text":"impl Sync for Ipv6RecvPacketInfo","synthetic":true,"types":[]},{"text":"impl Sync for UdpGsoSegment","synthetic":true,"types":[]},{"text":"impl Sync for UdpGroSegment","synthetic":true,"types":[]},{"text":"impl Sync for AlgSetAeadAuthSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for AlgSetKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SockType","synthetic":true,"types":[]},{"text":"impl Sync for SockProtocol","synthetic":true,"types":[]},{"text":"impl Sync for SockFlag","synthetic":true,"types":[]},{"text":"impl Sync for MsgFlags","synthetic":true,"types":[]},{"text":"impl Sync for UnixCredentials","synthetic":true,"types":[]},{"text":"impl Sync for IpMembershipRequest","synthetic":true,"types":[]},{"text":"impl Sync for Ipv6MembershipRequest","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for RecvMsg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for CmsgIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ControlMessageOwned","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ControlMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, C&gt; Sync for SendMmsgData&lt;'a, I, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Sync for RecvMmsgData&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SockLevel","synthetic":true,"types":[]},{"text":"impl Sync for Shutdown","synthetic":true,"types":[]},{"text":"impl Sync for SFlag","synthetic":true,"types":[]},{"text":"impl Sync for Mode","synthetic":true,"types":[]},{"text":"impl Sync for FchmodatFlags","synthetic":true,"types":[]},{"text":"impl Sync for UtimensatFlags","synthetic":true,"types":[]},{"text":"impl Sync for Statfs","synthetic":true,"types":[]},{"text":"impl Sync for FsType","synthetic":true,"types":[]},{"text":"impl Sync for FsFlags","synthetic":true,"types":[]},{"text":"impl Sync for Statvfs","synthetic":true,"types":[]},{"text":"impl Sync for SysInfo","synthetic":true,"types":[]},{"text":"impl !Sync for Termios","synthetic":true,"types":[]},{"text":"impl Sync for BaudRate","synthetic":true,"types":[]},{"text":"impl Sync for SetArg","synthetic":true,"types":[]},{"text":"impl Sync for FlushArg","synthetic":true,"types":[]},{"text":"impl Sync for FlowArg","synthetic":true,"types":[]},{"text":"impl Sync for SpecialCharacterIndices","synthetic":true,"types":[]},{"text":"impl Sync for InputFlags","synthetic":true,"types":[]},{"text":"impl Sync for OutputFlags","synthetic":true,"types":[]},{"text":"impl Sync for ControlFlags","synthetic":true,"types":[]},{"text":"impl Sync for LocalFlags","synthetic":true,"types":[]},{"text":"impl Sync for TimeSpec","synthetic":true,"types":[]},{"text":"impl Sync for TimeVal","synthetic":true,"types":[]},{"text":"impl Sync for RemoteIoVec","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for IoVec&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for UtsName","synthetic":true,"types":[]},{"text":"impl Sync for WaitPidFlag","synthetic":true,"types":[]},{"text":"impl Sync for WaitStatus","synthetic":true,"types":[]},{"text":"impl Sync for AddWatchFlags","synthetic":true,"types":[]},{"text":"impl Sync for InitFlags","synthetic":true,"types":[]},{"text":"impl Sync for Inotify","synthetic":true,"types":[]},{"text":"impl Sync for WatchDescriptor","synthetic":true,"types":[]},{"text":"impl Sync for InotifyEvent","synthetic":true,"types":[]},{"text":"impl Sync for TimerFd","synthetic":true,"types":[]},{"text":"impl Sync for ClockId","synthetic":true,"types":[]},{"text":"impl Sync for TimerFlags","synthetic":true,"types":[]},{"text":"impl Sync for TimerSetTimeFlags","synthetic":true,"types":[]},{"text":"impl Sync for Expiration","synthetic":true,"types":[]},{"text":"impl !Sync for UContext","synthetic":true,"types":[]},{"text":"impl Sync for Uid","synthetic":true,"types":[]},{"text":"impl Sync for Gid","synthetic":true,"types":[]},{"text":"impl Sync for Pid","synthetic":true,"types":[]},{"text":"impl Sync for ForkResult","synthetic":true,"types":[]},{"text":"impl Sync for FchownatFlags","synthetic":true,"types":[]},{"text":"impl Sync for Whence","synthetic":true,"types":[]},{"text":"impl Sync for LinkatFlags","synthetic":true,"types":[]},{"text":"impl Sync for UnlinkatFlags","synthetic":true,"types":[]},{"text":"impl Sync for PathconfVar","synthetic":true,"types":[]},{"text":"impl Sync for SysconfVar","synthetic":true,"types":[]},{"text":"impl Sync for AccessFlags","synthetic":true,"types":[]},{"text":"impl Sync for User","synthetic":true,"types":[]},{"text":"impl Sync for Group","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Sync for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; Sync for Range&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RangeInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RangeStep&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RangeStepInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RangeFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RangeStepFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; Sync for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Sync for FloatErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for ParseFloatError","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T&gt; !Sync for OnceCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, F&nbsp;=&nbsp;fn() -&gt; T&gt; !Sync for Lazy&lt;T, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F:&nbsp;Send&gt; Sync for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OnceCell&lt;T&gt;: Sync,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["osmesa_sys"] = [{"text":"impl Sync for OsMesa","synthetic":true,"types":[]},{"text":"impl Sync for osmesa_context","synthetic":true,"types":[]}];
implementors["owned_ttf_parser"] = [{"text":"impl Sync for OwnedFont","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl Sync for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl Sync for Condvar","synthetic":true,"types":[]},{"text":"impl Sync for OnceState","synthetic":true,"types":[]},{"text":"impl Sync for Once","synthetic":true,"types":[]},{"text":"impl Sync for RawFairMutex","synthetic":true,"types":[]},{"text":"impl Sync for RawMutex","synthetic":true,"types":[]},{"text":"impl Sync for RawRwLock","synthetic":true,"types":[]},{"text":"impl Sync for RawThreadId","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl Sync for ParkResult","synthetic":true,"types":[]},{"text":"impl Sync for UnparkResult","synthetic":true,"types":[]},{"text":"impl Sync for RequeueOp","synthetic":true,"types":[]},{"text":"impl Sync for FilterOp","synthetic":true,"types":[]},{"text":"impl Sync for UnparkToken","synthetic":true,"types":[]},{"text":"impl Sync for ParkToken","synthetic":true,"types":[]},{"text":"impl Sync for SpinWait","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl Sync for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["piston_window"] = [{"text":"impl&lt;W&nbsp;=&nbsp;GlutinWindow&gt; !Sync for PistonWindow&lt;W&gt;","synthetic":true,"types":[]}];
implementors["png"] = [{"text":"impl Sync for ColorType","synthetic":true,"types":[]},{"text":"impl Sync for BitDepth","synthetic":true,"types":[]},{"text":"impl Sync for PixelDimensions","synthetic":true,"types":[]},{"text":"impl Sync for Unit","synthetic":true,"types":[]},{"text":"impl Sync for DisposeOp","synthetic":true,"types":[]},{"text":"impl Sync for BlendOp","synthetic":true,"types":[]},{"text":"impl Sync for FrameControl","synthetic":true,"types":[]},{"text":"impl Sync for AnimationControl","synthetic":true,"types":[]},{"text":"impl Sync for Compression","synthetic":true,"types":[]},{"text":"impl Sync for Info","synthetic":true,"types":[]},{"text":"impl Sync for Transformations","synthetic":true,"types":[]},{"text":"impl Sync for Decoded","synthetic":true,"types":[]},{"text":"impl Sync for DecodingError","synthetic":true,"types":[]},{"text":"impl Sync for StreamingDecoder","synthetic":true,"types":[]},{"text":"impl Sync for OutputInfo","synthetic":true,"types":[]},{"text":"impl Sync for Limits","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for EncodingError","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Sync for StreamWriter&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for FilterType","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl !Sync for IntoIter","synthetic":true,"types":[]},{"text":"impl !Sync for TokenStream","synthetic":true,"types":[]},{"text":"impl !Sync for LexError","synthetic":true,"types":[]},{"text":"impl !Sync for Span","synthetic":true,"types":[]},{"text":"impl !Sync for TokenTree","synthetic":true,"types":[]},{"text":"impl !Sync for Group","synthetic":true,"types":[]},{"text":"impl Sync for Delimiter","synthetic":true,"types":[]},{"text":"impl !Sync for Punct","synthetic":true,"types":[]},{"text":"impl Sync for Spacing","synthetic":true,"types":[]},{"text":"impl !Sync for Ident","synthetic":true,"types":[]},{"text":"impl !Sync for Literal","synthetic":true,"types":[]}];
implementors["raw_window_handle"] = [{"text":"impl !Sync for XlibHandle","synthetic":true,"types":[]},{"text":"impl !Sync for XcbHandle","synthetic":true,"types":[]},{"text":"impl !Sync for WaylandHandle","synthetic":true,"types":[]},{"text":"impl !Sync for RawWindowHandle","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Copied&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Sync for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Sync for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for FlatMapIter&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for FlattenIter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; Sync for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Sync for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for MinLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for MaxLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; Sync for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; Sync for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for PanicFuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Sync for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Sync for Positions&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RepeatN&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; Sync for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; Sync for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Sync for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for ZipEq&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for StepBy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for Iter&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for Chunks&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for ChunksExact&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for Windows&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for IterMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for ChunksMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for ChunksExactMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Sync for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Sync for SplitMut&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Sync for Split&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Sync for SplitTerminator&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Sync for Matches&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Sync for MatchIndices&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Drain&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for Drain&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl !Sync for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ThreadPool","synthetic":true,"types":[]},{"text":"impl Sync for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&nbsp;=&nbsp;DefaultSpawn&gt; !Sync for ThreadPoolBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for Configuration","synthetic":true,"types":[]},{"text":"impl !Sync for FnContext","synthetic":true,"types":[]}];
implementors["rusttype"] = [{"text":"impl&lt;'a&gt; Sync for Font&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for Point&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for Vector&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for Rect&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for GlyphId","synthetic":true,"types":[]},{"text":"impl&lt;'font&gt; Sync for Glyph&lt;'font&gt;","synthetic":true,"types":[]},{"text":"impl Sync for HMetrics","synthetic":true,"types":[]},{"text":"impl Sync for VMetrics","synthetic":true,"types":[]},{"text":"impl&lt;'font&gt; Sync for ScaledGlyph&lt;'font&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'font&gt; Sync for PositionedGlyph&lt;'font&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Scale","synthetic":true,"types":[]},{"text":"impl&lt;'b, I&gt; Sync for GlyphIter&lt;'b, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'font, 's&gt; Sync for LayoutIter&lt;'font, 's&gt;","synthetic":true,"types":[]}];
implementors["same_file"] = [{"text":"impl Sync for Handle","synthetic":true,"types":[]}];
implementors["scoped_threadpool"] = [{"text":"impl !Sync for Pool","synthetic":true,"types":[]},{"text":"impl&lt;'pool, 'scope&gt; !Sync for Scope&lt;'pool, 'scope&gt;","synthetic":true,"types":[]}];
implementors["scoped_tls"] = [{"text":"impl&lt;T&gt; Sync for ScopedKey&lt;T&gt;","synthetic":false,"types":[]}];
implementors["scopeguard"] = [{"text":"impl Sync for Always","synthetic":true,"types":[]},{"text":"impl&lt;T, F, S&gt; Sync for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnOnce(T),<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Strategy,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Sync for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Sync for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Sync for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Sync for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Sync for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Sync for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Sync for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["shader_version"] = [{"text":"impl Sync for OpenGL","synthetic":true,"types":[]},{"text":"impl Sync for ParseOpenGLError","synthetic":true,"types":[]},{"text":"impl Sync for GLSL","synthetic":true,"types":[]},{"text":"impl Sync for ParseGLSLError","synthetic":true,"types":[]},{"text":"impl&lt;'a, V, S:&nbsp;?Sized&gt; Sync for Shaders&lt;'a, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["shared_library"] = [{"text":"impl Sync for SpecialHandles","synthetic":true,"types":[]},{"text":"impl Sync for LoadingError","synthetic":true,"types":[]},{"text":"impl Sync for DynamicLibrary","synthetic":false,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T&gt; Sync for Slab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for VacantEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["smallvec"] = [{"text":"impl Sync for CollectionAllocErr","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync + Array&gt; Sync for Drain&lt;'a, T&gt;","synthetic":false,"types":[]}];
implementors["smithay_client_toolkit"] = [{"text":"impl Sync for DataDevice","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for DndEvent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for DataOffer","synthetic":true,"types":[]},{"text":"impl Sync for ReadPipe","synthetic":true,"types":[]},{"text":"impl Sync for DataSource","synthetic":true,"types":[]},{"text":"impl Sync for DataSourceEvent","synthetic":true,"types":[]},{"text":"impl Sync for WritePipe","synthetic":true,"types":[]},{"text":"impl !Sync for DataDeviceHandler","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !Sync for Environment&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Sync for SimpleGlobal&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Mode","synthetic":true,"types":[]},{"text":"impl Sync for OutputInfo","synthetic":true,"types":[]},{"text":"impl !Sync for OutputHandler","synthetic":true,"types":[]},{"text":"impl Sync for OutputListener","synthetic":true,"types":[]},{"text":"impl !Sync for OutputStatusListener","synthetic":true,"types":[]},{"text":"impl Sync for PrimarySelectionDevice","synthetic":true,"types":[]},{"text":"impl Sync for PrimarySelectionOffer","synthetic":true,"types":[]},{"text":"impl Sync for PrimarySelectionSource","synthetic":true,"types":[]},{"text":"impl Sync for PrimarySelectionSourceEvent","synthetic":true,"types":[]},{"text":"impl !Sync for PrimarySelectionHandler","synthetic":true,"types":[]},{"text":"impl !Sync for PrimarySelectionDeviceManager","synthetic":true,"types":[]},{"text":"impl Sync for RMLVO","synthetic":true,"types":[]},{"text":"impl Sync for ModifiersState","synthetic":true,"types":[]},{"text":"impl Sync for RepeatKind","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Event&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for RepeatSource","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ThemeSpec&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for ThemeManager","synthetic":true,"types":[]},{"text":"impl !Sync for ThemedPointer","synthetic":true,"types":[]},{"text":"impl Sync for SeatData","synthetic":true,"types":[]},{"text":"impl !Sync for SeatHandler","synthetic":true,"types":[]},{"text":"impl !Sync for SeatListener","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl !Sync for Shell","synthetic":true,"types":[]},{"text":"impl !Sync for ShellHandler","synthetic":true,"types":[]},{"text":"impl !Sync for DoubleMemPool","synthetic":true,"types":[]},{"text":"impl !Sync for MemPool","synthetic":true,"types":[]},{"text":"impl !Sync for ShmHandler","synthetic":true,"types":[]},{"text":"impl Sync for ConceptConfig","synthetic":true,"types":[]},{"text":"impl !Sync for ConceptFrame","synthetic":true,"types":[]},{"text":"impl Sync for ButtonState","synthetic":true,"types":[]},{"text":"impl Sync for WindowState","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for Decorations","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !Sync for Window&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl Sync for FrameRequest","synthetic":true,"types":[]},{"text":"impl Sync for ColorSpec","synthetic":true,"types":[]},{"text":"impl Sync for ButtonColorSpec","synthetic":true,"types":[]},{"text":"impl Sync for ARGBColor","synthetic":true,"types":[]},{"text":"impl !Sync for WaylandSource","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl !Sync for Underscore","synthetic":true,"types":[]},{"text":"impl !Sync for Abstract","synthetic":true,"types":[]},{"text":"impl !Sync for As","synthetic":true,"types":[]},{"text":"impl !Sync for Async","synthetic":true,"types":[]},{"text":"impl !Sync for Auto","synthetic":true,"types":[]},{"text":"impl !Sync for Await","synthetic":true,"types":[]},{"text":"impl !Sync for Become","synthetic":true,"types":[]},{"text":"impl !Sync for Box","synthetic":true,"types":[]},{"text":"impl !Sync for Break","synthetic":true,"types":[]},{"text":"impl !Sync for Const","synthetic":true,"types":[]},{"text":"impl !Sync for Continue","synthetic":true,"types":[]},{"text":"impl !Sync for Crate","synthetic":true,"types":[]},{"text":"impl !Sync for Default","synthetic":true,"types":[]},{"text":"impl !Sync for Do","synthetic":true,"types":[]},{"text":"impl !Sync for Dyn","synthetic":true,"types":[]},{"text":"impl !Sync for Else","synthetic":true,"types":[]},{"text":"impl !Sync for Enum","synthetic":true,"types":[]},{"text":"impl !Sync for Extern","synthetic":true,"types":[]},{"text":"impl !Sync for Final","synthetic":true,"types":[]},{"text":"impl !Sync for Fn","synthetic":true,"types":[]},{"text":"impl !Sync for For","synthetic":true,"types":[]},{"text":"impl !Sync for If","synthetic":true,"types":[]},{"text":"impl !Sync for Impl","synthetic":true,"types":[]},{"text":"impl !Sync for In","synthetic":true,"types":[]},{"text":"impl !Sync for Let","synthetic":true,"types":[]},{"text":"impl !Sync for Loop","synthetic":true,"types":[]},{"text":"impl !Sync for Macro","synthetic":true,"types":[]},{"text":"impl !Sync for Match","synthetic":true,"types":[]},{"text":"impl !Sync for Mod","synthetic":true,"types":[]},{"text":"impl !Sync for Move","synthetic":true,"types":[]},{"text":"impl !Sync for Mut","synthetic":true,"types":[]},{"text":"impl !Sync for Override","synthetic":true,"types":[]},{"text":"impl !Sync for Priv","synthetic":true,"types":[]},{"text":"impl !Sync for Pub","synthetic":true,"types":[]},{"text":"impl !Sync for Ref","synthetic":true,"types":[]},{"text":"impl !Sync for Return","synthetic":true,"types":[]},{"text":"impl !Sync for SelfType","synthetic":true,"types":[]},{"text":"impl !Sync for SelfValue","synthetic":true,"types":[]},{"text":"impl !Sync for Static","synthetic":true,"types":[]},{"text":"impl !Sync for Struct","synthetic":true,"types":[]},{"text":"impl !Sync for Super","synthetic":true,"types":[]},{"text":"impl !Sync for Trait","synthetic":true,"types":[]},{"text":"impl !Sync for Try","synthetic":true,"types":[]},{"text":"impl !Sync for Type","synthetic":true,"types":[]},{"text":"impl !Sync for Typeof","synthetic":true,"types":[]},{"text":"impl !Sync for Union","synthetic":true,"types":[]},{"text":"impl !Sync for Unsafe","synthetic":true,"types":[]},{"text":"impl !Sync for Unsized","synthetic":true,"types":[]},{"text":"impl !Sync for Use","synthetic":true,"types":[]},{"text":"impl !Sync for Virtual","synthetic":true,"types":[]},{"text":"impl !Sync for Where","synthetic":true,"types":[]},{"text":"impl !Sync for While","synthetic":true,"types":[]},{"text":"impl !Sync for Yield","synthetic":true,"types":[]},{"text":"impl !Sync for Add","synthetic":true,"types":[]},{"text":"impl !Sync for AddEq","synthetic":true,"types":[]},{"text":"impl !Sync for And","synthetic":true,"types":[]},{"text":"impl !Sync for AndAnd","synthetic":true,"types":[]},{"text":"impl !Sync for AndEq","synthetic":true,"types":[]},{"text":"impl !Sync for At","synthetic":true,"types":[]},{"text":"impl !Sync for Bang","synthetic":true,"types":[]},{"text":"impl !Sync for Caret","synthetic":true,"types":[]},{"text":"impl !Sync for CaretEq","synthetic":true,"types":[]},{"text":"impl !Sync for Colon","synthetic":true,"types":[]},{"text":"impl !Sync for Colon2","synthetic":true,"types":[]},{"text":"impl !Sync for Comma","synthetic":true,"types":[]},{"text":"impl !Sync for Div","synthetic":true,"types":[]},{"text":"impl !Sync for DivEq","synthetic":true,"types":[]},{"text":"impl !Sync for Dollar","synthetic":true,"types":[]},{"text":"impl !Sync for Dot","synthetic":true,"types":[]},{"text":"impl !Sync for Dot2","synthetic":true,"types":[]},{"text":"impl !Sync for Dot3","synthetic":true,"types":[]},{"text":"impl !Sync for DotDotEq","synthetic":true,"types":[]},{"text":"impl !Sync for Eq","synthetic":true,"types":[]},{"text":"impl !Sync for EqEq","synthetic":true,"types":[]},{"text":"impl !Sync for Ge","synthetic":true,"types":[]},{"text":"impl !Sync for Gt","synthetic":true,"types":[]},{"text":"impl !Sync for Le","synthetic":true,"types":[]},{"text":"impl !Sync for Lt","synthetic":true,"types":[]},{"text":"impl !Sync for MulEq","synthetic":true,"types":[]},{"text":"impl !Sync for Ne","synthetic":true,"types":[]},{"text":"impl !Sync for Or","synthetic":true,"types":[]},{"text":"impl !Sync for OrEq","synthetic":true,"types":[]},{"text":"impl !Sync for OrOr","synthetic":true,"types":[]},{"text":"impl !Sync for Pound","synthetic":true,"types":[]},{"text":"impl !Sync for Question","synthetic":true,"types":[]},{"text":"impl !Sync for RArrow","synthetic":true,"types":[]},{"text":"impl !Sync for LArrow","synthetic":true,"types":[]},{"text":"impl !Sync for Rem","synthetic":true,"types":[]},{"text":"impl !Sync for RemEq","synthetic":true,"types":[]},{"text":"impl !Sync for FatArrow","synthetic":true,"types":[]},{"text":"impl !Sync for Semi","synthetic":true,"types":[]},{"text":"impl !Sync for Shl","synthetic":true,"types":[]},{"text":"impl !Sync for ShlEq","synthetic":true,"types":[]},{"text":"impl !Sync for Shr","synthetic":true,"types":[]},{"text":"impl !Sync for ShrEq","synthetic":true,"types":[]},{"text":"impl !Sync for Star","synthetic":true,"types":[]},{"text":"impl !Sync for Sub","synthetic":true,"types":[]},{"text":"impl !Sync for SubEq","synthetic":true,"types":[]},{"text":"impl !Sync for Tilde","synthetic":true,"types":[]},{"text":"impl !Sync for Brace","synthetic":true,"types":[]},{"text":"impl !Sync for Bracket","synthetic":true,"types":[]},{"text":"impl !Sync for Paren","synthetic":true,"types":[]},{"text":"impl !Sync for Group","synthetic":true,"types":[]},{"text":"impl !Sync for Attribute","synthetic":true,"types":[]},{"text":"impl !Sync for AttrStyle","synthetic":true,"types":[]},{"text":"impl !Sync for Meta","synthetic":true,"types":[]},{"text":"impl !Sync for MetaList","synthetic":true,"types":[]},{"text":"impl !Sync for MetaNameValue","synthetic":true,"types":[]},{"text":"impl !Sync for NestedMeta","synthetic":true,"types":[]},{"text":"impl !Sync for Variant","synthetic":true,"types":[]},{"text":"impl !Sync for Fields","synthetic":true,"types":[]},{"text":"impl !Sync for FieldsNamed","synthetic":true,"types":[]},{"text":"impl !Sync for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl !Sync for Field","synthetic":true,"types":[]},{"text":"impl !Sync for Visibility","synthetic":true,"types":[]},{"text":"impl !Sync for VisPublic","synthetic":true,"types":[]},{"text":"impl !Sync for VisCrate","synthetic":true,"types":[]},{"text":"impl !Sync for VisRestricted","synthetic":true,"types":[]},{"text":"impl !Sync for Expr","synthetic":true,"types":[]},{"text":"impl !Sync for ExprArray","synthetic":true,"types":[]},{"text":"impl !Sync for ExprAssign","synthetic":true,"types":[]},{"text":"impl !Sync for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl !Sync for ExprAsync","synthetic":true,"types":[]},{"text":"impl !Sync for ExprAwait","synthetic":true,"types":[]},{"text":"impl !Sync for ExprBinary","synthetic":true,"types":[]},{"text":"impl !Sync for ExprBlock","synthetic":true,"types":[]},{"text":"impl !Sync for ExprBox","synthetic":true,"types":[]},{"text":"impl !Sync for ExprBreak","synthetic":true,"types":[]},{"text":"impl !Sync for ExprCall","synthetic":true,"types":[]},{"text":"impl !Sync for ExprCast","synthetic":true,"types":[]},{"text":"impl !Sync for ExprClosure","synthetic":true,"types":[]},{"text":"impl !Sync for ExprContinue","synthetic":true,"types":[]},{"text":"impl !Sync for ExprField","synthetic":true,"types":[]},{"text":"impl !Sync for ExprForLoop","synthetic":true,"types":[]},{"text":"impl !Sync for ExprGroup","synthetic":true,"types":[]},{"text":"impl !Sync for ExprIf","synthetic":true,"types":[]},{"text":"impl !Sync for ExprIndex","synthetic":true,"types":[]},{"text":"impl !Sync for ExprLet","synthetic":true,"types":[]},{"text":"impl !Sync for ExprLit","synthetic":true,"types":[]},{"text":"impl !Sync for ExprLoop","synthetic":true,"types":[]},{"text":"impl !Sync for ExprMacro","synthetic":true,"types":[]},{"text":"impl !Sync for ExprMatch","synthetic":true,"types":[]},{"text":"impl !Sync for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl !Sync for ExprParen","synthetic":true,"types":[]},{"text":"impl !Sync for ExprPath","synthetic":true,"types":[]},{"text":"impl !Sync for ExprRange","synthetic":true,"types":[]},{"text":"impl !Sync for ExprReference","synthetic":true,"types":[]},{"text":"impl !Sync for ExprRepeat","synthetic":true,"types":[]},{"text":"impl !Sync for ExprReturn","synthetic":true,"types":[]},{"text":"impl !Sync for ExprStruct","synthetic":true,"types":[]},{"text":"impl !Sync for ExprTry","synthetic":true,"types":[]},{"text":"impl !Sync for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl !Sync for ExprTuple","synthetic":true,"types":[]},{"text":"impl !Sync for ExprType","synthetic":true,"types":[]},{"text":"impl !Sync for ExprUnary","synthetic":true,"types":[]},{"text":"impl !Sync for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl !Sync for ExprWhile","synthetic":true,"types":[]},{"text":"impl !Sync for ExprYield","synthetic":true,"types":[]},{"text":"impl !Sync for Member","synthetic":true,"types":[]},{"text":"impl !Sync for Index","synthetic":true,"types":[]},{"text":"impl !Sync for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl !Sync for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl !Sync for FieldValue","synthetic":true,"types":[]},{"text":"impl !Sync for Label","synthetic":true,"types":[]},{"text":"impl !Sync for Arm","synthetic":true,"types":[]},{"text":"impl !Sync for RangeLimits","synthetic":true,"types":[]},{"text":"impl !Sync for Generics","synthetic":true,"types":[]},{"text":"impl !Sync for GenericParam","synthetic":true,"types":[]},{"text":"impl !Sync for TypeParam","synthetic":true,"types":[]},{"text":"impl !Sync for LifetimeDef","synthetic":true,"types":[]},{"text":"impl !Sync for ConstParam","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl !Sync for TypeParamBound","synthetic":true,"types":[]},{"text":"impl !Sync for TraitBound","synthetic":true,"types":[]},{"text":"impl !Sync for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl !Sync for WhereClause","synthetic":true,"types":[]},{"text":"impl !Sync for WherePredicate","synthetic":true,"types":[]},{"text":"impl !Sync for PredicateType","synthetic":true,"types":[]},{"text":"impl !Sync for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl !Sync for PredicateEq","synthetic":true,"types":[]},{"text":"impl !Sync for Item","synthetic":true,"types":[]},{"text":"impl !Sync for ItemConst","synthetic":true,"types":[]},{"text":"impl !Sync for ItemEnum","synthetic":true,"types":[]},{"text":"impl !Sync for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl !Sync for ItemFn","synthetic":true,"types":[]},{"text":"impl !Sync for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl !Sync for ItemImpl","synthetic":true,"types":[]},{"text":"impl !Sync for ItemMacro","synthetic":true,"types":[]},{"text":"impl !Sync for ItemMacro2","synthetic":true,"types":[]},{"text":"impl !Sync for ItemMod","synthetic":true,"types":[]},{"text":"impl !Sync for ItemStatic","synthetic":true,"types":[]},{"text":"impl !Sync for ItemStruct","synthetic":true,"types":[]},{"text":"impl !Sync for ItemTrait","synthetic":true,"types":[]},{"text":"impl !Sync for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl !Sync for ItemType","synthetic":true,"types":[]},{"text":"impl !Sync for ItemUnion","synthetic":true,"types":[]},{"text":"impl !Sync for ItemUse","synthetic":true,"types":[]},{"text":"impl !Sync for UseTree","synthetic":true,"types":[]},{"text":"impl !Sync for UsePath","synthetic":true,"types":[]},{"text":"impl !Sync for UseName","synthetic":true,"types":[]},{"text":"impl !Sync for UseRename","synthetic":true,"types":[]},{"text":"impl !Sync for UseGlob","synthetic":true,"types":[]},{"text":"impl !Sync for UseGroup","synthetic":true,"types":[]},{"text":"impl !Sync for ForeignItem","synthetic":true,"types":[]},{"text":"impl !Sync for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl !Sync for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl !Sync for ForeignItemType","synthetic":true,"types":[]},{"text":"impl !Sync for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl !Sync for TraitItem","synthetic":true,"types":[]},{"text":"impl !Sync for TraitItemConst","synthetic":true,"types":[]},{"text":"impl !Sync for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl !Sync for TraitItemType","synthetic":true,"types":[]},{"text":"impl !Sync for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl !Sync for ImplItem","synthetic":true,"types":[]},{"text":"impl !Sync for ImplItemConst","synthetic":true,"types":[]},{"text":"impl !Sync for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl !Sync for ImplItemType","synthetic":true,"types":[]},{"text":"impl !Sync for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl !Sync for Signature","synthetic":true,"types":[]},{"text":"impl !Sync for FnArg","synthetic":true,"types":[]},{"text":"impl !Sync for Receiver","synthetic":true,"types":[]},{"text":"impl !Sync for File","synthetic":true,"types":[]},{"text":"impl !Sync for Lifetime","synthetic":true,"types":[]},{"text":"impl !Sync for Lit","synthetic":true,"types":[]},{"text":"impl !Sync for LitStr","synthetic":true,"types":[]},{"text":"impl !Sync for LitByteStr","synthetic":true,"types":[]},{"text":"impl !Sync for LitByte","synthetic":true,"types":[]},{"text":"impl !Sync for LitChar","synthetic":true,"types":[]},{"text":"impl !Sync for LitInt","synthetic":true,"types":[]},{"text":"impl !Sync for LitFloat","synthetic":true,"types":[]},{"text":"impl !Sync for LitBool","synthetic":true,"types":[]},{"text":"impl Sync for StrStyle","synthetic":true,"types":[]},{"text":"impl !Sync for Macro","synthetic":true,"types":[]},{"text":"impl !Sync for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl !Sync for DeriveInput","synthetic":true,"types":[]},{"text":"impl !Sync for Data","synthetic":true,"types":[]},{"text":"impl !Sync for DataStruct","synthetic":true,"types":[]},{"text":"impl !Sync for DataEnum","synthetic":true,"types":[]},{"text":"impl !Sync for DataUnion","synthetic":true,"types":[]},{"text":"impl !Sync for BinOp","synthetic":true,"types":[]},{"text":"impl !Sync for UnOp","synthetic":true,"types":[]},{"text":"impl !Sync for Block","synthetic":true,"types":[]},{"text":"impl !Sync for Stmt","synthetic":true,"types":[]},{"text":"impl !Sync for Local","synthetic":true,"types":[]},{"text":"impl !Sync for Type","synthetic":true,"types":[]},{"text":"impl !Sync for TypeArray","synthetic":true,"types":[]},{"text":"impl !Sync for TypeBareFn","synthetic":true,"types":[]},{"text":"impl !Sync for TypeGroup","synthetic":true,"types":[]},{"text":"impl !Sync for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl !Sync for TypeInfer","synthetic":true,"types":[]},{"text":"impl !Sync for TypeMacro","synthetic":true,"types":[]},{"text":"impl !Sync for TypeNever","synthetic":true,"types":[]},{"text":"impl !Sync for TypeParen","synthetic":true,"types":[]},{"text":"impl !Sync for TypePath","synthetic":true,"types":[]},{"text":"impl !Sync for TypePtr","synthetic":true,"types":[]},{"text":"impl !Sync for TypeReference","synthetic":true,"types":[]},{"text":"impl !Sync for TypeSlice","synthetic":true,"types":[]},{"text":"impl !Sync for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl !Sync for TypeTuple","synthetic":true,"types":[]},{"text":"impl !Sync for Abi","synthetic":true,"types":[]},{"text":"impl !Sync for BareFnArg","synthetic":true,"types":[]},{"text":"impl !Sync for Variadic","synthetic":true,"types":[]},{"text":"impl !Sync for ReturnType","synthetic":true,"types":[]},{"text":"impl !Sync for Pat","synthetic":true,"types":[]},{"text":"impl !Sync for PatBox","synthetic":true,"types":[]},{"text":"impl !Sync for PatIdent","synthetic":true,"types":[]},{"text":"impl !Sync for PatLit","synthetic":true,"types":[]},{"text":"impl !Sync for PatMacro","synthetic":true,"types":[]},{"text":"impl !Sync for PatOr","synthetic":true,"types":[]},{"text":"impl !Sync for PatPath","synthetic":true,"types":[]},{"text":"impl !Sync for PatRange","synthetic":true,"types":[]},{"text":"impl !Sync for PatReference","synthetic":true,"types":[]},{"text":"impl !Sync for PatRest","synthetic":true,"types":[]},{"text":"impl !Sync for PatSlice","synthetic":true,"types":[]},{"text":"impl !Sync for PatStruct","synthetic":true,"types":[]},{"text":"impl !Sync for PatTuple","synthetic":true,"types":[]},{"text":"impl !Sync for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl !Sync for PatType","synthetic":true,"types":[]},{"text":"impl !Sync for PatWild","synthetic":true,"types":[]},{"text":"impl !Sync for FieldPat","synthetic":true,"types":[]},{"text":"impl !Sync for Path","synthetic":true,"types":[]},{"text":"impl !Sync for PathSegment","synthetic":true,"types":[]},{"text":"impl !Sync for PathArguments","synthetic":true,"types":[]},{"text":"impl !Sync for GenericArgument","synthetic":true,"types":[]},{"text":"impl !Sync for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Sync for Binding","synthetic":true,"types":[]},{"text":"impl !Sync for Constraint","synthetic":true,"types":[]},{"text":"impl !Sync for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Sync for QSelf","synthetic":true,"types":[]},{"text":"impl !Sync for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Sync for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Sync for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Sync for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Sync for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Sync for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; !Sync for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Nothing","synthetic":true,"types":[]}];
implementors["texture"] = [{"text":"impl Sync for TextureSettings","synthetic":true,"types":[]},{"text":"impl Sync for Format","synthetic":true,"types":[]},{"text":"impl Sync for Filter","synthetic":true,"types":[]},{"text":"impl Sync for Wrap","synthetic":true,"types":[]}];
implementors["tiff"] = [{"text":"impl Sync for Value","synthetic":true,"types":[]},{"text":"impl Sync for Entry","synthetic":true,"types":[]},{"text":"impl Sync for DecodingResult","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for DecodingBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Limits","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Gray8","synthetic":true,"types":[]},{"text":"impl Sync for Gray16","synthetic":true,"types":[]},{"text":"impl Sync for Gray32","synthetic":true,"types":[]},{"text":"impl Sync for Gray32Float","synthetic":true,"types":[]},{"text":"impl Sync for Gray64","synthetic":true,"types":[]},{"text":"impl Sync for Gray64Float","synthetic":true,"types":[]},{"text":"impl Sync for RGB8","synthetic":true,"types":[]},{"text":"impl Sync for RGB16","synthetic":true,"types":[]},{"text":"impl Sync for RGB32","synthetic":true,"types":[]},{"text":"impl Sync for RGB32Float","synthetic":true,"types":[]},{"text":"impl Sync for RGB64","synthetic":true,"types":[]},{"text":"impl Sync for RGB64Float","synthetic":true,"types":[]},{"text":"impl Sync for RGBA8","synthetic":true,"types":[]},{"text":"impl Sync for RGBA16","synthetic":true,"types":[]},{"text":"impl Sync for RGBA32","synthetic":true,"types":[]},{"text":"impl Sync for RGBA32Float","synthetic":true,"types":[]},{"text":"impl Sync for RGBA64","synthetic":true,"types":[]},{"text":"impl Sync for RGBA64Float","synthetic":true,"types":[]},{"text":"impl Sync for CMYK8","synthetic":true,"types":[]},{"text":"impl Sync for CMYK16","synthetic":true,"types":[]},{"text":"impl Sync for CMYK32","synthetic":true,"types":[]},{"text":"impl Sync for CMYK32Float","synthetic":true,"types":[]},{"text":"impl Sync for CMYK64","synthetic":true,"types":[]},{"text":"impl Sync for CMYK64Float","synthetic":true,"types":[]},{"text":"impl Sync for Rational","synthetic":true,"types":[]},{"text":"impl Sync for SRational","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for TiffEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Sync for DirectoryEncoder&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W, C&gt; Sync for ImageEncoder&lt;'a, W, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TiffError","synthetic":true,"types":[]},{"text":"impl Sync for TiffFormatError","synthetic":true,"types":[]},{"text":"impl Sync for InflateError","synthetic":true,"types":[]},{"text":"impl Sync for TiffUnsupportedError","synthetic":true,"types":[]},{"text":"impl Sync for Tag","synthetic":true,"types":[]},{"text":"impl Sync for Type","synthetic":true,"types":[]},{"text":"impl Sync for CompressionMethod","synthetic":true,"types":[]},{"text":"impl Sync for PhotometricInterpretation","synthetic":true,"types":[]},{"text":"impl Sync for PlanarConfiguration","synthetic":true,"types":[]},{"text":"impl Sync for Predictor","synthetic":true,"types":[]},{"text":"impl Sync for ResolutionUnit","synthetic":true,"types":[]},{"text":"impl Sync for SampleFormat","synthetic":true,"types":[]},{"text":"impl Sync for ColorType","synthetic":true,"types":[]}];
implementors["ttf_parser"] = [{"text":"impl Sync for Class","synthetic":true,"types":[]},{"text":"impl Sync for VariationAxis","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for VariationAxes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for GlyphClass","synthetic":true,"types":[]},{"text":"impl Sync for State","synthetic":true,"types":[]},{"text":"impl Sync for ValueOffset","synthetic":true,"types":[]},{"text":"impl Sync for Entry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Machine&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Subtable&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Subtables&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for PlatformId","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Names&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Weight","synthetic":true,"types":[]},{"text":"impl Sync for Width","synthetic":true,"types":[]},{"text":"impl Sync for ScriptMetrics","synthetic":true,"types":[]},{"text":"impl Sync for GlyphId","synthetic":true,"types":[]},{"text":"impl Sync for Variation","synthetic":true,"types":[]},{"text":"impl Sync for Tag","synthetic":true,"types":[]},{"text":"impl Sync for LineMetrics","synthetic":true,"types":[]},{"text":"impl Sync for Rect","synthetic":true,"types":[]},{"text":"impl Sync for RasterImageFormat","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for RasterGlyphImage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for TableName","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Font&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["viewport"] = [{"text":"impl Sync for Viewport","synthetic":true,"types":[]}];
implementors["walkdir"] = [{"text":"impl Sync for DirEntry","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for WalkDir","synthetic":true,"types":[]},{"text":"impl Sync for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Sync for FilterEntry&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["wayland_client"] = [{"text":"impl Sync for ConnectError","synthetic":true,"types":[]},{"text":"impl Sync for ProtocolError","synthetic":true,"types":[]},{"text":"impl Sync for Display","synthetic":true,"types":[]},{"text":"impl !Sync for EventQueue","synthetic":true,"types":[]},{"text":"impl !Sync for QueueToken","synthetic":true,"types":[]},{"text":"impl !Sync for ReadEventsGuard","synthetic":true,"types":[]},{"text":"impl !Sync for GlobalManager","synthetic":true,"types":[]},{"text":"impl Sync for GlobalError","synthetic":true,"types":[]},{"text":"impl Sync for GlobalEvent","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Proxy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Sync for Attached&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Sync for Main&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ProxyMap","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlDisplay","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlRegistry","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlCallback","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlCompositor","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlShmPool","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Format","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlShm","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlBuffer","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlDataOffer","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlDataSource","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl !Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlDataDevice","synthetic":true,"types":[]},{"text":"impl Sync for DndAction","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlDataDeviceManager","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlShell","synthetic":true,"types":[]},{"text":"impl Sync for Resize","synthetic":true,"types":[]},{"text":"impl Sync for Transient","synthetic":true,"types":[]},{"text":"impl Sync for FullscreenMethod","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlShellSurface","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlSurface","synthetic":true,"types":[]},{"text":"impl Sync for Capability","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlSeat","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for ButtonState","synthetic":true,"types":[]},{"text":"impl Sync for Axis","synthetic":true,"types":[]},{"text":"impl Sync for AxisSource","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlPointer","synthetic":true,"types":[]},{"text":"impl Sync for KeymapFormat","synthetic":true,"types":[]},{"text":"impl Sync for KeyState","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlKeyboard","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlTouch","synthetic":true,"types":[]},{"text":"impl Sync for Subpixel","synthetic":true,"types":[]},{"text":"impl Sync for Transform","synthetic":true,"types":[]},{"text":"impl Sync for Mode","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlOutput","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlRegion","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlSubcompositor","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlSubsurface","synthetic":true,"types":[]},{"text":"impl Sync for AnonymousObject","synthetic":true,"types":[]},{"text":"impl !Sync for Argument","synthetic":true,"types":[]},{"text":"impl !Sync for RawEvent","synthetic":true,"types":[]}];
implementors["wayland_commons"] = [{"text":"impl&lt;'a&gt; !Sync for DispatchData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !Sync for Filter&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Meta&gt; Sync for Object&lt;Meta&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Meta: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Meta&gt; Sync for ObjectMap&lt;Meta&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Meta: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Socket","synthetic":true,"types":[]},{"text":"impl Sync for BufferedSocket","synthetic":true,"types":[]},{"text":"impl Sync for UserDataMap","synthetic":true,"types":[]},{"text":"impl Sync for MessageDesc","synthetic":true,"types":[]},{"text":"impl Sync for ArgumentType","synthetic":true,"types":[]},{"text":"impl Sync for Argument","synthetic":true,"types":[]},{"text":"impl Sync for Message","synthetic":true,"types":[]},{"text":"impl Sync for MessageWriteError","synthetic":true,"types":[]},{"text":"impl Sync for MessageParseError","synthetic":true,"types":[]},{"text":"impl Sync for NoMessage","synthetic":true,"types":[]},{"text":"impl Sync for UserData","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Sync for ThreadGuard&lt;T&gt;","synthetic":false,"types":[]}];
implementors["wayland_cursor"] = [{"text":"impl !Sync for CursorTheme","synthetic":true,"types":[]},{"text":"impl Sync for Cursor","synthetic":true,"types":[]},{"text":"impl Sync for CursorImageBuffer","synthetic":true,"types":[]},{"text":"impl Sync for FrameAndDuration","synthetic":true,"types":[]}];
implementors["wayland_egl"] = [{"text":"impl Sync for WlEglSurface","synthetic":false,"types":[]}];
implementors["wayland_protocols"] = [{"text":"impl Sync for Capability","synthetic":true,"types":[]},{"text":"impl Sync for PresentMethod","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpFullscreenShellV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpFullscreenShellModeFeedbackV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpIdleInhibitManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpIdleInhibitorV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpInputMethodContextV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl !Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpInputMethodV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpInputPanelV1","synthetic":true,"types":[]},{"text":"impl Sync for Position","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpInputPanelSurfaceV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpInputTimestampsManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpInputTimestampsV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpKeyboardShortcutsInhibitManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpKeyboardShortcutsInhibitorV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpLinuxDmabufV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Flags","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl !Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpLinuxBufferParamsV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpLinuxExplicitSynchronizationV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpLinuxSurfaceSynchronizationV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpLinuxBufferReleaseV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Lifetime","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpPointerConstraintsV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpLockedPointerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpConfinedPointerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpPointerGesturesV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpPointerGestureSwipeV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpPointerGesturePinchV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpPrimarySelectionDeviceManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl !Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpPrimarySelectionDeviceV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpPrimarySelectionOfferV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpPrimarySelectionSourceV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpRelativePointerManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpRelativePointerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTabletManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl !Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTabletSeatV1","synthetic":true,"types":[]},{"text":"impl Sync for Type","synthetic":true,"types":[]},{"text":"impl Sync for Capability","synthetic":true,"types":[]},{"text":"impl Sync for ButtonState","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTabletToolV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTabletV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTabletManagerV2","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl !Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTabletSeatV2","synthetic":true,"types":[]},{"text":"impl Sync for Type","synthetic":true,"types":[]},{"text":"impl Sync for Capability","synthetic":true,"types":[]},{"text":"impl Sync for ButtonState","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTabletToolV2","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTabletV2","synthetic":true,"types":[]},{"text":"impl Sync for Source","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTabletPadRingV2","synthetic":true,"types":[]},{"text":"impl Sync for Source","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTabletPadStripV2","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl !Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTabletPadGroupV2","synthetic":true,"types":[]},{"text":"impl Sync for ButtonState","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl !Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTabletPadV2","synthetic":true,"types":[]},{"text":"impl Sync for ContentHint","synthetic":true,"types":[]},{"text":"impl Sync for ContentPurpose","synthetic":true,"types":[]},{"text":"impl Sync for PreeditStyle","synthetic":true,"types":[]},{"text":"impl Sync for TextDirection","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTextInputV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTextInputManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for ChangeCause","synthetic":true,"types":[]},{"text":"impl Sync for ContentHint","synthetic":true,"types":[]},{"text":"impl Sync for ContentPurpose","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTextInputV3","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTextInputManagerV3","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgDecorationManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Mode","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgToplevelDecorationV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgExporterV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgImporterV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgExportedV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgImportedV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgExporterV2","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgImporterV2","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgExportedV2","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgImportedV2","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgOutputManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgOutputV1","synthetic":true,"types":[]},{"text":"impl Sync for Version","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for XdgShell","synthetic":true,"types":[]},{"text":"impl Sync for ResizeEdge","synthetic":true,"types":[]},{"text":"impl Sync for State","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for XdgSurface","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for XdgPopup","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgShellV6","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Anchor","synthetic":true,"types":[]},{"text":"impl Sync for Gravity","synthetic":true,"types":[]},{"text":"impl Sync for ConstraintAdjustment","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgPositionerV6","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgSurfaceV6","synthetic":true,"types":[]},{"text":"impl Sync for ResizeEdge","synthetic":true,"types":[]},{"text":"impl Sync for State","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgToplevelV6","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgPopupV6","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpXwaylandKeyboardGrabManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpXwaylandKeyboardGrabV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for GtkPrimarySelectionDeviceManager","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl !Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for GtkPrimarySelectionDevice","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for GtkPrimarySelectionOffer","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for GtkPrimarySelectionSource","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrDataControlManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl !Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrDataControlDeviceV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrDataControlSourceV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrDataControlOfferV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrExportDmabufManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Flags","synthetic":true,"types":[]},{"text":"impl Sync for CancelReason","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrExportDmabufFrameV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl !Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrForeignToplevelManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for State","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrForeignToplevelHandleV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrGammaControlManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrGammaControlV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrInputInhibitManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrInputInhibitorV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Layer","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrLayerShellV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Anchor","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrLayerSurfaceV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl !Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrOutputManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl !Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrOutputHeadV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrOutputModeV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrOutputConfigurationV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrOutputConfigurationHeadV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrOutputPowerManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Mode","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrOutputPowerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrScreencopyManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Flags","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrScreencopyFrameV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrVirtualPointerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrVirtualPointerManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WpPresentation","synthetic":true,"types":[]},{"text":"impl Sync for Kind","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WpPresentationFeedback","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for XdgWmBase","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Anchor","synthetic":true,"types":[]},{"text":"impl Sync for Gravity","synthetic":true,"types":[]},{"text":"impl Sync for ConstraintAdjustment","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for XdgPositioner","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for XdgSurface","synthetic":true,"types":[]},{"text":"impl Sync for ResizeEdge","synthetic":true,"types":[]},{"text":"impl Sync for State","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for XdgToplevel","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for XdgPopup","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WpViewporter","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WpViewport","synthetic":true,"types":[]}];
implementors["wayland_sys"] = [{"text":"impl !Sync for wl_message","synthetic":true,"types":[]},{"text":"impl !Sync for wl_interface","synthetic":true,"types":[]},{"text":"impl !Sync for wl_list","synthetic":true,"types":[]},{"text":"impl !Sync for wl_array","synthetic":true,"types":[]},{"text":"impl !Sync for wl_argument","synthetic":true,"types":[]},{"text":"impl Sync for wl_proxy","synthetic":true,"types":[]},{"text":"impl Sync for wl_display","synthetic":true,"types":[]},{"text":"impl Sync for wl_event_queue","synthetic":true,"types":[]},{"text":"impl Sync for WAYLAND_CLIENT_OPTION","synthetic":true,"types":[]},{"text":"impl Sync for WAYLAND_CLIENT_HANDLE","synthetic":true,"types":[]},{"text":"impl Sync for wl_client","synthetic":true,"types":[]},{"text":"impl Sync for wl_display","synthetic":true,"types":[]},{"text":"impl Sync for wl_event_loop","synthetic":true,"types":[]},{"text":"impl Sync for wl_event_source","synthetic":true,"types":[]},{"text":"impl Sync for wl_global","synthetic":true,"types":[]},{"text":"impl Sync for wl_resource","synthetic":true,"types":[]},{"text":"impl Sync for wl_shm_buffer","synthetic":true,"types":[]},{"text":"impl !Sync for wl_listener","synthetic":true,"types":[]},{"text":"impl !Sync for wl_signal","synthetic":true,"types":[]},{"text":"impl Sync for wl_egl_window","synthetic":true,"types":[]},{"text":"impl Sync for WAYLAND_EGL_OPTION","synthetic":true,"types":[]},{"text":"impl Sync for WAYLAND_EGL_HANDLE","synthetic":true,"types":[]},{"text":"impl Sync for WaylandClient","synthetic":false,"types":[]},{"text":"impl Sync for WaylandEgl","synthetic":false,"types":[]}];
implementors["weezl"] = [{"text":"impl !Sync for Decoder","synthetic":true,"types":[]},{"text":"impl&lt;'d, W&gt; !Sync for IntoStream&lt;'d, W&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for Encoder","synthetic":true,"types":[]},{"text":"impl&lt;'d, W&gt; !Sync for IntoStream&lt;'d, W&gt;","synthetic":true,"types":[]},{"text":"impl Sync for BufferResult","synthetic":true,"types":[]},{"text":"impl Sync for StreamResult","synthetic":true,"types":[]},{"text":"impl Sync for LzwStatus","synthetic":true,"types":[]},{"text":"impl Sync for LzwError","synthetic":true,"types":[]},{"text":"impl Sync for BitOrder","synthetic":true,"types":[]}];
implementors["window"] = [{"text":"impl Sync for NoWindow","synthetic":true,"types":[]},{"text":"impl Sync for Size","synthetic":true,"types":[]},{"text":"impl Sync for Position","synthetic":true,"types":[]},{"text":"impl Sync for WindowSettings","synthetic":true,"types":[]}];
implementors["winit"] = [{"text":"impl&lt;P&gt; Sync for LogicalPosition&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Sync for PhysicalPosition&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Sync for LogicalSize&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Sync for PhysicalSize&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Size","synthetic":true,"types":[]},{"text":"impl Sync for Position","synthetic":true,"types":[]},{"text":"impl Sync for ExternalError","synthetic":true,"types":[]},{"text":"impl Sync for NotSupportedError","synthetic":true,"types":[]},{"text":"impl Sync for OsError","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Event&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for StartCause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for WindowEvent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for DeviceId","synthetic":true,"types":[]},{"text":"impl Sync for DeviceEvent","synthetic":true,"types":[]},{"text":"impl Sync for KeyboardInput","synthetic":true,"types":[]},{"text":"impl Sync for TouchPhase","synthetic":true,"types":[]},{"text":"impl Sync for Touch","synthetic":true,"types":[]},{"text":"impl Sync for Force","synthetic":true,"types":[]},{"text":"impl Sync for ElementState","synthetic":true,"types":[]},{"text":"impl Sync for MouseButton","synthetic":true,"types":[]},{"text":"impl Sync for MouseScrollDelta","synthetic":true,"types":[]},{"text":"impl Sync for VirtualKeyCode","synthetic":true,"types":[]},{"text":"impl Sync for ModifiersState","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for EventLoop&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for EventLoopWindowTarget&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ControlFlow","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for EventLoopProxy&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for EventLoopClosed&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BadIcon","synthetic":true,"types":[]},{"text":"impl Sync for Icon","synthetic":true,"types":[]},{"text":"impl Sync for VideoMode","synthetic":true,"types":[]},{"text":"impl Sync for MonitorHandle","synthetic":true,"types":[]},{"text":"impl Sync for WindowType","synthetic":true,"types":[]},{"text":"impl Sync for XNotSupported","synthetic":true,"types":[]},{"text":"impl Sync for Window","synthetic":true,"types":[]},{"text":"impl Sync for WindowId","synthetic":true,"types":[]},{"text":"impl !Sync for WindowBuilder","synthetic":true,"types":[]},{"text":"impl Sync for WindowAttributes","synthetic":true,"types":[]},{"text":"impl Sync for CursorIcon","synthetic":true,"types":[]},{"text":"impl Sync for Fullscreen","synthetic":true,"types":[]},{"text":"impl Sync for Theme","synthetic":true,"types":[]},{"text":"impl Sync for UserAttentionType","synthetic":true,"types":[]},{"text":"impl Sync for Button","synthetic":true,"types":[]},{"text":"impl Sync for ButtonState","synthetic":true,"types":[]},{"text":"impl Sync for Element","synthetic":true,"types":[]},{"text":"impl Sync for ARGBColor","synthetic":true,"types":[]}];
implementors["x11_dl"] = [{"text":"impl Sync for OpenError","synthetic":true,"types":[]},{"text":"impl Sync for OpenErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for _XDisplay","synthetic":true,"types":[]},{"text":"impl Sync for xError","synthetic":true,"types":[]},{"text":"impl Sync for xEvent","synthetic":true,"types":[]},{"text":"impl Sync for _XGC","synthetic":true,"types":[]},{"text":"impl Sync for _XIC","synthetic":true,"types":[]},{"text":"impl Sync for _XIM","synthetic":true,"types":[]},{"text":"impl Sync for _XRegion","synthetic":true,"types":[]},{"text":"impl Sync for _XOC","synthetic":true,"types":[]},{"text":"impl Sync for _XOM","synthetic":true,"types":[]},{"text":"impl Sync for _XrmHashBucketRec","synthetic":true,"types":[]},{"text":"impl Sync for _XcmsCCC","synthetic":true,"types":[]},{"text":"impl Sync for XcmsColor","synthetic":true,"types":[]},{"text":"impl Sync for _XcmsColorSpace","synthetic":true,"types":[]},{"text":"impl Sync for _XcmsFunctionSet","synthetic":true,"types":[]},{"text":"impl Sync for _XkbAction","synthetic":true,"types":[]},{"text":"impl Sync for _XkbBounds","synthetic":true,"types":[]},{"text":"impl Sync for _XkbChanges","synthetic":true,"types":[]},{"text":"impl Sync for _XkbClientMapRec","synthetic":true,"types":[]},{"text":"impl Sync for _XkbColor","synthetic":true,"types":[]},{"text":"impl Sync for _XkbComponentList","synthetic":true,"types":[]},{"text":"impl Sync for _XkbComponentNames","synthetic":true,"types":[]},{"text":"impl Sync for _XkbControls","synthetic":true,"types":[]},{"text":"impl Sync for _XkbControlsChanges","synthetic":true,"types":[]},{"text":"impl Sync for _XkbControlsNotify","synthetic":true,"types":[]},{"text":"impl Sync for _XkbDeviceChanges","synthetic":true,"types":[]},{"text":"impl Sync for _XkbDeviceInfo","synthetic":true,"types":[]},{"text":"impl Sync for _XkbDeviceLedInfo","synthetic":true,"types":[]},{"text":"impl Sync for _XkbDoodad","synthetic":true,"types":[]},{"text":"impl Sync for _XkbExtensionDeviceNotify","synthetic":true,"types":[]},{"text":"impl Sync for _XkbGeometry","synthetic":true,"types":[]},{"text":"impl Sync for _XkbGeometrySizes","synthetic":true,"types":[]},{"text":"impl Sync for _XkbIndicatorMapRec","synthetic":true,"types":[]},{"text":"impl Sync for _XkbKey","synthetic":true,"types":[]},{"text":"impl Sync for _XkbKeyType","synthetic":true,"types":[]},{"text":"impl Sync for _XkbMapChanges","synthetic":true,"types":[]},{"text":"impl Sync for _XkbMods","synthetic":true,"types":[]},{"text":"impl Sync for _XkbNameChanges","synthetic":true,"types":[]},{"text":"impl Sync for _XkbNamesNotify","synthetic":true,"types":[]},{"text":"impl Sync for _XkbOutline","synthetic":true,"types":[]},{"text":"impl Sync for _XkbOverlay","synthetic":true,"types":[]},{"text":"impl Sync for _XkbOverlayKey","synthetic":true,"types":[]},{"text":"impl Sync for _XkbOverlayRow","synthetic":true,"types":[]},{"text":"impl Sync for _XkbProperty","synthetic":true,"types":[]},{"text":"impl Sync for _XkbRow","synthetic":true,"types":[]},{"text":"impl Sync for _XkbSection","synthetic":true,"types":[]},{"text":"impl Sync for _XkbServerMapRec","synthetic":true,"types":[]},{"text":"impl Sync for _XkbShape","synthetic":true,"types":[]},{"text":"impl Sync for _XkbSymInterpretRec","synthetic":true,"types":[]},{"text":"impl !Sync for XEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XAnyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XButtonEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XCirculateEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XCirculateRequestEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XClientMessageEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XColormapEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XConfigureEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XConfigureRequestEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XCreateWindowEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XCrossingEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XDestroyWindowEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XErrorEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XExposeEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XFocusChangeEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XGraphicsExposeEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XGravityEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XKeyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XKeymapEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XMapEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XMappingEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XMapRequestEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XMotionEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XNoExposeEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XPropertyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XReparentEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XResizeRequestEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XSelectionClearEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XSelectionEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XSelectionRequestEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XUnmapEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XVisibilityEvent","synthetic":true,"types":[]},{"text":"impl !Sync for _XkbCompatMapRec","synthetic":true,"types":[]},{"text":"impl !Sync for _XkbDesc","synthetic":true,"types":[]},{"text":"impl Sync for _XkbIndicatorRec","synthetic":true,"types":[]},{"text":"impl Sync for _XkbKeyAliasRec","synthetic":true,"types":[]},{"text":"impl Sync for _XkbKeyNameRec","synthetic":true,"types":[]},{"text":"impl !Sync for _XkbNamesRec","synthetic":true,"types":[]},{"text":"impl Sync for _XkbStateRec","synthetic":true,"types":[]},{"text":"impl !Sync for XkbAnyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XkbNewKeyboardNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for _XkbMapNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XkbStateNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for _XkbControlsNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XkbIndicatorNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for _XkbNamesNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XkbCompatMapNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XkbBellNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XkbActionMessageEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XkbAccessXNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for _XkbExtensionDeviceNotifyEvent","synthetic":true,"types":[]},{"text":"impl Sync for XkbEvent","synthetic":true,"types":[]},{"text":"impl Sync for XkbKbdDpyStateRec","synthetic":true,"types":[]},{"text":"impl !Sync for Depth","synthetic":true,"types":[]},{"text":"impl !Sync for Screen","synthetic":true,"types":[]},{"text":"impl !Sync for ScreenFormat","synthetic":true,"types":[]},{"text":"impl !Sync for Visual","synthetic":true,"types":[]},{"text":"impl Sync for XArc","synthetic":true,"types":[]},{"text":"impl Sync for XChar2b","synthetic":true,"types":[]},{"text":"impl Sync for XCharStruct","synthetic":true,"types":[]},{"text":"impl !Sync for XClassHint","synthetic":true,"types":[]},{"text":"impl Sync for XColor","synthetic":true,"types":[]},{"text":"impl !Sync for XComposeStatus","synthetic":true,"types":[]},{"text":"impl Sync for XExtCodes","synthetic":true,"types":[]},{"text":"impl !Sync for XExtData","synthetic":true,"types":[]},{"text":"impl Sync for XFontProp","synthetic":true,"types":[]},{"text":"impl Sync for XFontSetExtents","synthetic":true,"types":[]},{"text":"impl !Sync for XFontStruct","synthetic":true,"types":[]},{"text":"impl Sync for XGCValues","synthetic":true,"types":[]},{"text":"impl !Sync for XGenericEventCookie","synthetic":true,"types":[]},{"text":"impl !Sync for XHostAddress","synthetic":true,"types":[]},{"text":"impl Sync for XIconSize","synthetic":true,"types":[]},{"text":"impl !Sync for XImage","synthetic":true,"types":[]},{"text":"impl Sync for XKeyboardControl","synthetic":true,"types":[]},{"text":"impl Sync for XKeyboardState","synthetic":true,"types":[]},{"text":"impl !Sync for XmbTextItem","synthetic":true,"types":[]},{"text":"impl !Sync for XModifierKeymap","synthetic":true,"types":[]},{"text":"impl !Sync for XOMCharSetList","synthetic":true,"types":[]},{"text":"impl Sync for XPixmapFormatValues","synthetic":true,"types":[]},{"text":"impl Sync for XPoint","synthetic":true,"types":[]},{"text":"impl Sync for XRectangle","synthetic":true,"types":[]},{"text":"impl !Sync for XrmOptionDescRec","synthetic":true,"types":[]},{"text":"impl !Sync for XrmValue","synthetic":true,"types":[]},{"text":"impl Sync for XSegment","synthetic":true,"types":[]},{"text":"impl Sync for XSetWindowAttributes","synthetic":true,"types":[]},{"text":"impl Sync for XSizeHints","synthetic":true,"types":[]},{"text":"impl Sync for XStandardColormap","synthetic":true,"types":[]},{"text":"impl !Sync for XTextItem","synthetic":true,"types":[]},{"text":"impl !Sync for XTextItem16","synthetic":true,"types":[]},{"text":"impl !Sync for XTextProperty","synthetic":true,"types":[]},{"text":"impl Sync for XTimeCoord","synthetic":true,"types":[]},{"text":"impl !Sync for XVisualInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XwcTextItem","synthetic":true,"types":[]},{"text":"impl !Sync for XWindowAttributes","synthetic":true,"types":[]},{"text":"impl Sync for XWindowChanges","synthetic":true,"types":[]},{"text":"impl Sync for XWMHints","synthetic":true,"types":[]},{"text":"impl !Sync for XIMCallback","synthetic":true,"types":[]},{"text":"impl Sync for XIMCaretDirection","synthetic":true,"types":[]},{"text":"impl Sync for XIMCaretStyle","synthetic":true,"types":[]},{"text":"impl !Sync for XIMPreeditDrawCallbackStruct","synthetic":true,"types":[]},{"text":"impl Sync for XIMPreeditCaretCallbackStruct","synthetic":true,"types":[]},{"text":"impl !Sync for XIMTextString","synthetic":true,"types":[]},{"text":"impl !Sync for XIMText","synthetic":true,"types":[]},{"text":"impl !Sync for XICCallback","synthetic":true,"types":[]},{"text":"impl Sync for AspectRatio","synthetic":true,"types":[]},{"text":"impl Sync for ClientMessageData","synthetic":true,"types":[]},{"text":"impl Sync for ImageFns","synthetic":true,"types":[]},{"text":"impl Sync for __GLXcontextRec","synthetic":true,"types":[]},{"text":"impl Sync for __GLXFBConfigRec","synthetic":true,"types":[]},{"text":"impl !Sync for _XcursorAnimate","synthetic":true,"types":[]},{"text":"impl Sync for _XcursorChunkHeader","synthetic":true,"types":[]},{"text":"impl !Sync for _XcursorComment","synthetic":true,"types":[]},{"text":"impl !Sync for _XcursorComments","synthetic":true,"types":[]},{"text":"impl !Sync for _XcursorCursors","synthetic":true,"types":[]},{"text":"impl !Sync for _XcursorFile","synthetic":true,"types":[]},{"text":"impl !Sync for _XcursorFileHeader","synthetic":true,"types":[]},{"text":"impl Sync for _XcursorFileToc","synthetic":true,"types":[]},{"text":"impl !Sync for _XcursorImage","synthetic":true,"types":[]},{"text":"impl !Sync for _XcursorImages","synthetic":true,"types":[]},{"text":"impl Sync for XF86VidModeGamma","synthetic":true,"types":[]},{"text":"impl !Sync for XF86VidModeModeInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XF86VidModeModeLine","synthetic":true,"types":[]},{"text":"impl !Sync for XF86VidModeMonitor","synthetic":true,"types":[]},{"text":"impl Sync for XF86VidModeSyncRange","synthetic":true,"types":[]},{"text":"impl !Sync for XF86VidModeNotifyEvent","synthetic":true,"types":[]},{"text":"impl Sync for FT_FaceRec","synthetic":true,"types":[]},{"text":"impl Sync for FcCharSet","synthetic":true,"types":[]},{"text":"impl Sync for FcPattern","synthetic":true,"types":[]},{"text":"impl Sync for FcEndian","synthetic":true,"types":[]},{"text":"impl Sync for FcResult","synthetic":true,"types":[]},{"text":"impl Sync for XftFontInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XftFont","synthetic":true,"types":[]},{"text":"impl Sync for XftDraw","synthetic":true,"types":[]},{"text":"impl Sync for XftColor","synthetic":true,"types":[]},{"text":"impl Sync for XftCharSpec","synthetic":true,"types":[]},{"text":"impl !Sync for XftCharFontSpec","synthetic":true,"types":[]},{"text":"impl !Sync for XftFontSet","synthetic":true,"types":[]},{"text":"impl Sync for XftGlyphSpec","synthetic":true,"types":[]},{"text":"impl !Sync for XftGlyphFontSpec","synthetic":true,"types":[]},{"text":"impl Sync for XftPattern","synthetic":true,"types":[]},{"text":"impl Sync for XineramaScreenInfo","synthetic":true,"types":[]},{"text":"impl Sync for XPanoramiXInfo","synthetic":true,"types":[]},{"text":"impl Sync for _XAnyClassinfo","synthetic":true,"types":[]},{"text":"impl !Sync for XDevice","synthetic":true,"types":[]},{"text":"impl Sync for XDeviceControl","synthetic":true,"types":[]},{"text":"impl !Sync for XDeviceInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XDeviceState","synthetic":true,"types":[]},{"text":"impl !Sync for XDeviceTimeCoord","synthetic":true,"types":[]},{"text":"impl Sync for XExtensionVersion","synthetic":true,"types":[]},{"text":"impl Sync for XFeedbackControl","synthetic":true,"types":[]},{"text":"impl Sync for XFeedbackState","synthetic":true,"types":[]},{"text":"impl Sync for XInputClass","synthetic":true,"types":[]},{"text":"impl Sync for XInputClassInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XIAddMasterInfo","synthetic":true,"types":[]},{"text":"impl Sync for XIRemoveMasterInfo","synthetic":true,"types":[]},{"text":"impl Sync for XIAttachSlaveInfo","synthetic":true,"types":[]},{"text":"impl Sync for XIDetachSlaveInfo","synthetic":true,"types":[]},{"text":"impl Sync for XIAnyHierarchyChangeInfo","synthetic":true,"types":[]},{"text":"impl Sync for XIModifierState","synthetic":true,"types":[]},{"text":"impl !Sync for XIButtonState","synthetic":true,"types":[]},{"text":"impl !Sync for XIValuatorState","synthetic":true,"types":[]},{"text":"impl !Sync for XIEventMask","synthetic":true,"types":[]},{"text":"impl Sync for XIAnyClassInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XIButtonClassInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XIKeyClassInfo","synthetic":true,"types":[]},{"text":"impl Sync for XIValuatorClassInfo","synthetic":true,"types":[]},{"text":"impl Sync for XIScrollClassInfo","synthetic":true,"types":[]},{"text":"impl Sync for XITouchClassInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XIDeviceInfo","synthetic":true,"types":[]},{"text":"impl Sync for XIGrabModifiers","synthetic":true,"types":[]},{"text":"impl Sync for XIBarrierReleasePointerInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XIEvent","synthetic":true,"types":[]},{"text":"impl Sync for XIHierarchyInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XIHierarchyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XIDeviceChangedEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XIDeviceEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XIRawEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XIEnterEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XIPropertyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XITouchOwnershipEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XIBarrierEvent","synthetic":true,"types":[]},{"text":"impl Sync for _AtomRec","synthetic":true,"types":[]},{"text":"impl Sync for _XmuArea","synthetic":true,"types":[]},{"text":"impl Sync for _XmuDisplayQueue","synthetic":true,"types":[]},{"text":"impl Sync for _XmuDisplayQueueEntry","synthetic":true,"types":[]},{"text":"impl Sync for _XmuScanline","synthetic":true,"types":[]},{"text":"impl Sync for _XmuSegment","synthetic":true,"types":[]},{"text":"impl Sync for _XmuWidgetNode","synthetic":true,"types":[]},{"text":"impl !Sync for XRecordClientInfo","synthetic":true,"types":[]},{"text":"impl Sync for XRecordExtRange","synthetic":true,"types":[]},{"text":"impl !Sync for XRecordInterceptData","synthetic":true,"types":[]},{"text":"impl Sync for XRecordRange","synthetic":true,"types":[]},{"text":"impl Sync for XRecordRange8","synthetic":true,"types":[]},{"text":"impl Sync for XRecordRange16","synthetic":true,"types":[]},{"text":"impl !Sync for XRecordState","synthetic":true,"types":[]},{"text":"impl Sync for _XAnimCursor","synthetic":true,"types":[]},{"text":"impl Sync for _XCircle","synthetic":true,"types":[]},{"text":"impl Sync for _XConicalGradient","synthetic":true,"types":[]},{"text":"impl !Sync for _XFilters","synthetic":true,"types":[]},{"text":"impl !Sync for _XGlyphElt8","synthetic":true,"types":[]},{"text":"impl !Sync for _XGlyphElt16","synthetic":true,"types":[]},{"text":"impl !Sync for _XGlyphElt32","synthetic":true,"types":[]},{"text":"impl Sync for _XGlyphInfo","synthetic":true,"types":[]},{"text":"impl Sync for _XIndexValue","synthetic":true,"types":[]},{"text":"impl Sync for _XLinearGradient","synthetic":true,"types":[]},{"text":"impl Sync for _XLineFixed","synthetic":true,"types":[]},{"text":"impl Sync for _XPointDouble","synthetic":true,"types":[]},{"text":"impl Sync for _XPointFixed","synthetic":true,"types":[]},{"text":"impl Sync for _XRadialGradient","synthetic":true,"types":[]},{"text":"impl Sync for XRenderColor","synthetic":true,"types":[]},{"text":"impl Sync for XRenderDirectFormat","synthetic":true,"types":[]},{"text":"impl Sync for XRenderPictFormat","synthetic":true,"types":[]},{"text":"impl Sync for _XRenderPictureAttributes","synthetic":true,"types":[]},{"text":"impl Sync for _XSpanFix","synthetic":true,"types":[]},{"text":"impl Sync for _XTrap","synthetic":true,"types":[]},{"text":"impl Sync for _XTrapezoid","synthetic":true,"types":[]},{"text":"impl Sync for _XTriangle","synthetic":true,"types":[]},{"text":"impl Sync for _XTransform","synthetic":true,"types":[]},{"text":"impl Sync for XScreenSaverInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XScreenSaverNotifyEvent","synthetic":true,"types":[]},{"text":"impl Sync for Arg","synthetic":true,"types":[]},{"text":"impl Sync for SubstitutionRec","synthetic":true,"types":[]},{"text":"impl Sync for _TranslationData","synthetic":true,"types":[]},{"text":"impl Sync for _WidgetClassRec","synthetic":true,"types":[]},{"text":"impl Sync for _WidgetRec","synthetic":true,"types":[]},{"text":"impl Sync for _XtActionsRec","synthetic":true,"types":[]},{"text":"impl Sync for _XtAppStruct","synthetic":true,"types":[]},{"text":"impl Sync for _XtCallbackRec","synthetic":true,"types":[]},{"text":"impl Sync for _XtCheckpointTokenRec","synthetic":true,"types":[]},{"text":"impl Sync for XtConvertArgRec","synthetic":true,"types":[]},{"text":"impl Sync for _XtResource","synthetic":true,"types":[]},{"text":"impl Sync for XtWidgetGeometry","synthetic":true,"types":[]},{"text":"impl Sync for XRRScreenSize","synthetic":true,"types":[]},{"text":"impl Sync for XRRScreenConfiguration","synthetic":true,"types":[]},{"text":"impl !Sync for XRRModeInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XRRScreenResources","synthetic":true,"types":[]},{"text":"impl !Sync for XRROutputInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XRRPropertyInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XRRCrtcInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XRRCrtcGamma","synthetic":true,"types":[]},{"text":"impl !Sync for XRRCrtcTransformAttributes","synthetic":true,"types":[]},{"text":"impl Sync for XRRPanning","synthetic":true,"types":[]},{"text":"impl !Sync for XRRProviderResources","synthetic":true,"types":[]},{"text":"impl !Sync for XRRProviderInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XRRMonitorInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XRRScreenChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XRRNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XRROutputChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XRRCrtcChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XRROutputPropertyNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XRRProviderChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XRRProviderPropertyNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XRRResourceChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl Sync for Xlib","synthetic":false,"types":[]},{"text":"impl Sync for Xext","synthetic":false,"types":[]},{"text":"impl Sync for Glx","synthetic":false,"types":[]},{"text":"impl Sync for Xcursor","synthetic":false,"types":[]},{"text":"impl Sync for Xf86vmode","synthetic":false,"types":[]},{"text":"impl Sync for Xft","synthetic":false,"types":[]},{"text":"impl Sync for Xlib","synthetic":false,"types":[]},{"text":"impl Sync for XInput","synthetic":false,"types":[]},{"text":"impl Sync for XInput2","synthetic":false,"types":[]},{"text":"impl Sync for Xmu","synthetic":false,"types":[]},{"text":"impl Sync for Xf86vmode","synthetic":false,"types":[]},{"text":"impl Sync for Xrender","synthetic":false,"types":[]},{"text":"impl Sync for Xss","synthetic":false,"types":[]},{"text":"impl Sync for Xt","synthetic":false,"types":[]},{"text":"impl Sync for Xf86vmode","synthetic":false,"types":[]},{"text":"impl Sync for Xlib_xcb","synthetic":false,"types":[]},{"text":"impl Sync for Xrandr","synthetic":false,"types":[]},{"text":"impl Sync for Xrandr_2_2_0","synthetic":false,"types":[]}];
implementors["xcursor"] = [{"text":"impl Sync for Image","synthetic":true,"types":[]},{"text":"impl Sync for CursorTheme","synthetic":true,"types":[]}];
implementors["xdg"] = [{"text":"impl Sync for BaseDirectories","synthetic":true,"types":[]},{"text":"impl Sync for BaseDirectoriesError","synthetic":true,"types":[]},{"text":"impl Sync for FileFindIterator","synthetic":true,"types":[]}];
implementors["xml"] = [{"text":"impl&lt;'a&gt; Sync for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for ReprDisplay&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for OwnedName","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Attribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for OwnedAttribute","synthetic":true,"types":[]},{"text":"impl Sync for TextPosition","synthetic":true,"types":[]},{"text":"impl Sync for XmlVersion","synthetic":true,"types":[]},{"text":"impl Sync for Namespace","synthetic":true,"types":[]},{"text":"impl Sync for NamespaceStack","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for NamespaceStackMappings&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for CheckedTarget&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ParserConfig","synthetic":true,"types":[]},{"text":"impl Sync for XmlEvent","synthetic":true,"types":[]},{"text":"impl Sync for ErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for EventReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Events&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for EmitterError","synthetic":true,"types":[]},{"text":"impl Sync for EmitterConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for XmlEvent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for EndElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for StartElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for EventWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()