(function() {var implementors = {};
implementors["adler32"] = [{"text":"impl RefUnwindSafe for RollingAdler32","synthetic":true,"types":[]}];
implementors["andrew"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for Canvas&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Endian","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Line","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sides","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rectangle","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Text&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FontConfig","synthetic":true,"types":[]}];
implementors["approx"] = [{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; RefUnwindSafe for AbsDiff&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; RefUnwindSafe for Relative&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; RefUnwindSafe for Ulps&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl RefUnwindSafe for BigEndian","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LittleEndian","synthetic":true,"types":[]}];
implementors["color_quant"] = [{"text":"impl RefUnwindSafe for NeuQuant","synthetic":true,"types":[]}];
implementors["crc32fast"] = [{"text":"impl RefUnwindSafe for Hasher","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for TryIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Select&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryReadyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TrySelectError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Receiver&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for Worker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Stealer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Injector&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Atomic&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T, P&gt; RefUnwindSafe for CompareAndSetError&lt;'g, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T&gt; RefUnwindSafe for Shared&lt;'g, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Collector","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalHandle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Guard","synthetic":true,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for CachePadded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Backoff","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Parker","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Unparker","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !RefUnwindSafe for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; !RefUnwindSafe for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, T&gt; !RefUnwindSafe for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; RefUnwindSafe for ShardedLock&lt;T&gt;","synthetic":false,"types":[]}];
implementors["deflate"] = [{"text":"impl RefUnwindSafe for CompressionOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Compression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpecialOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatchingType","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["dlib"] = [{"text":"impl RefUnwindSafe for DlError","synthetic":true,"types":[]}];
implementors["draw_state"] = [{"text":"impl RefUnwindSafe for Offset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MultiSample","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rasterizer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StencilSide","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stencil","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Depth","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlendChannel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Blend","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColorMask","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RefValues","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FrontFace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CullFace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RasterMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Comparison","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StencilOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Equation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlendValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Factor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rect","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mirror","synthetic":true,"types":[]}];
implementors["event_loop"] = [{"text":"impl RefUnwindSafe for EventSettings","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Events","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl RefUnwindSafe for FnvHasher","synthetic":true,"types":[]}];
implementors["gfx"] = [{"text":"impl&lt;R, C&gt; !RefUnwindSafe for Encoder&lt;R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for Slice&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, D&gt; RefUnwindSafe for CopyError&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for UpdateError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for PipelineStateError&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for IndexBuffer&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for RawDataSet&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Buffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::DepthStencilView: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::RenderTargetView: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Sampler: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::ShaderResourceView: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::UnorderedAccessView: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, M&gt; RefUnwindSafe for PipelineState&lt;R, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::PipelineStateObject: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Program: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for ElementError&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for InitError&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for VertexBufferCommon&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawVertexBuffer","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ConstantBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawConstantBuffer","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Global&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawGlobal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NonInstanced","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instanced","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ShaderResource&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawShaderResource","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for UnorderedAccess&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sampler","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TextureSampler&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for RenderTarget&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for BlendTarget&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawRenderTarget","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DepthTarget&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for StencilTarget&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DepthStencilTarget&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Scissor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlendRef","synthetic":true,"types":[]},{"text":"impl&lt;R, Data&gt; !RefUnwindSafe for Bundle&lt;R, Data&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProgramError","synthetic":true,"types":[]}];
implementors["gfx_core"] = [{"text":"impl&lt;R&gt; RefUnwindSafe for VertexShader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Shader: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for HullShader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Shader: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DomainShader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Shader: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for GeometryShader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Shader: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for PixelShader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Shader: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Capabilities","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AdapterInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Frame","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ShaderSet&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Shader: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Primitive","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubmissionError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for Raw&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Info","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Role","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreationError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for AccessInfo&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !RefUnwindSafe for AccessGuard&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !RefUnwindSafe for AccessGuardBuffers&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !RefUnwindSafe for AccessGuardBuffersChain&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClearColor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DummyDevice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DummyFence","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DummyMapping","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DummyCommandBuffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DummyResources","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResourceViewError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TargetViewError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CombinedError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Swizzle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Format","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U8Norm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for I8Norm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U16Norm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for I16Norm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for F16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChannelType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Int","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Uint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Inorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Float","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SurfaceType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R4_G4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R4_G4_B4_A4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R5_G5_B5_A1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R5_G6_B5","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R8_G8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R8_G8_B8_A8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R10_G10_B10_A2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R11_G11_B10","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R16_G16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R16_G16_B16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R16_G16_B16_A16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R32_G32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R32_G32_B32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R32_G32_B32_A32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for B8_G8_R8_A8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for D16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for D24","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for D24_S8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for D32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BC1_R8_G8_B8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BC3_R8_G8_B8_A8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChannelSource","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for RawBuffer&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; !RefUnwindSafe for Buffer&lt;R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Shader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Shader: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Program&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Program: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for RawPipelineState&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::PipelineStateObject: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Program: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for RawTexture&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Texture: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, S&gt; RefUnwindSafe for Texture&lt;R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Texture: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for RawShaderResourceView&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; !RefUnwindSafe for ShaderResourceView&lt;R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for RawUnorderedAccessView&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; !RefUnwindSafe for UnorderedAccessView&lt;R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for RawRenderTargetView&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::RenderTargetView: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Texture: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for RawDepthStencilView&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::DepthStencilView: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Texture: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; RefUnwindSafe for RenderTargetView&lt;R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::RenderTargetView: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Texture: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; RefUnwindSafe for DepthStencilView&lt;R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::DepthStencilView: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Texture: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Sampler&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Fence&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Fence: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for Manager&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T&gt; !RefUnwindSafe for Reader&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T&gt; !RefUnwindSafe for Writer&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Access","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Usage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColorInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DepthStencilInfo","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for Element&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VertexBufferDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Descriptor","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for VertexBufferSet&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Buffer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ConstantBufferParam&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Buffer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ResourceViewParam&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::ShaderResourceView: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for UnorderedViewParam&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::UnorderedAccessView: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for SamplerParam&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for PixelTargetSet&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::DepthStencilView: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::RenderTargetView: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SamplerType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Usage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AttributeVar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstVar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstantBufferVar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TextureVar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnorderedVar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SamplerVar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputVar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProgramInfo","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Program&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Program: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateProgramError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsComparison","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsMultiSample","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsRect","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatrixFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TextureType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BaseType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContainerType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UniformValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompatibilityError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateShaderError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Raw&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resources&gt;::Texture: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for ImageInfoCommon&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TextureCopyRegion&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PackedColor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SamplerInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Info","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResourceDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RenderDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DepthStencilFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DepthStencilDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LayerError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AaMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CubeFace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mipmap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WrapMode","synthetic":true,"types":[]}];
implementors["gfx_device_gl"] = [{"text":"impl RefUnwindSafe for CommandBuffer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Factory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Info","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PlatformName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fence","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferElement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputMerger","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PipelineState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResourceView","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FatSampler","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Device","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Resources","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NewTexture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TargetView","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["gfx_gl"] = [{"text":"impl RefUnwindSafe for FnPtr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __GLsync","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _cl_context","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _cl_event","synthetic":true,"types":[]}];
implementors["gfx_graphics"] = [{"text":"impl&lt;R&gt; !RefUnwindSafe for Gfx2d&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, C&gt; !RefUnwindSafe for GfxGraphics&lt;'a, R, C&gt;","synthetic":true,"types":[]}];
implementors["gfx_texture"] = [{"text":"impl&lt;F, R, C&gt; !RefUnwindSafe for TextureContext&lt;F, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for Texture&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flip","synthetic":true,"types":[]}];
implementors["gif"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for Frame&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StreamingDecoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryLimit","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Extension","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DisposalMethod","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Decoded&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DecodingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColorOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Extensions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtensionData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repeat","synthetic":true,"types":[]}];
implementors["gl"] = [{"text":"impl RefUnwindSafe for FnPtr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __GLsync","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _cl_context","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _cl_event","synthetic":true,"types":[]}];
implementors["glutin"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for Context&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PossiblyCurrent","synthetic":true,"types":[]},{"text":"impl&lt;T, W&gt; !RefUnwindSafe for ContextWrapper&lt;T, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for ContextBuilder&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PixelFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PixelFormatRequirements","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for GlAttributes&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NotCurrent","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CreationError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ContextError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Api","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlProfile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Robustness","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReleaseBehavior","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawHandle","synthetic":true,"types":[]}];
implementors["glutin_egl_sys"] = [{"text":"impl RefUnwindSafe for FnPtr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Egl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EGLClientPixmapHI","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __eglMustCastToProperFunctionPointerType_fn","synthetic":true,"types":[]}];
implementors["glutin_glx_sys"] = [{"text":"impl RefUnwindSafe for FnPtr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Glx","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XVisualInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GLXPbufferClobberEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GLXBufferSwapComplete","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GLXBufferClobberEventSGIX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GLXHyperpipeNetworkSGIX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GLXHyperpipeConfigSGIX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GLXPipeRect","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GLXPipeRectLimits","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __GLsync","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _cl_context","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _cl_event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Display","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Visual","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __GLXextFuncPtr_fn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FnPtr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Glx","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XVisualInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GLXPbufferClobberEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GLXBufferSwapComplete","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GLXBufferClobberEventSGIX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GLXHyperpipeNetworkSGIX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GLXHyperpipeConfigSGIX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GLXPipeRect","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GLXPipeRectLimits","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __GLsync","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _cl_context","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _cl_event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Display","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Visual","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __GLXextFuncPtr_fn","synthetic":true,"types":[]}];
implementors["glutin_window"] = [{"text":"impl !RefUnwindSafe for GlutinWindow","synthetic":true,"types":[]}];
implementors["graphics"] = [{"text":"impl RefUnwindSafe for DrawState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Blend","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stencil","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Character&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Context","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Polygon","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Line","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shape","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CircleArc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Border","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ellipse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Border","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rectangle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shape","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Image","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Text","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Grid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GridCells","synthetic":true,"types":[]},{"text":"impl&lt;'a, F, T&gt; RefUnwindSafe for GlyphCache&lt;'a, F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TexturePacker&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["graphics_api_version"] = [{"text":"impl RefUnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnsupportedGraphicsApiError","synthetic":true,"types":[]}];
implementors["image"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Luma&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for LumaA&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Rgb&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Rgba&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Bgr&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Bgra&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Progress","synthetic":true,"types":[]},{"text":"impl&lt;'a, I:&nbsp;?Sized&gt; RefUnwindSafe for Pixels&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for SubImage&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, Container&gt; RefUnwindSafe for ImageBuffer&lt;P, Container&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Container: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Delay","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Frame","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Frames&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColorType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtendedColorType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImageFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImageOutputFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DynamicImage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnsupportedError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EncodingError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ParameterError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DecodingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LimitError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ImageError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnsupportedErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParameterErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LimitErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImageFormatHint","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; RefUnwindSafe for EnumeratePixels&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; RefUnwindSafe for EnumeratePixelsMut&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; RefUnwindSafe for EnumerateRows&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; RefUnwindSafe for EnumerateRowsMut&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; RefUnwindSafe for Pixels&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; RefUnwindSafe for PixelsMut&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; RefUnwindSafe for Rows&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; RefUnwindSafe for RowsMut&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rect","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NeuQuant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BiLevel","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Buffer&gt; RefUnwindSafe for FlatSamples&lt;Buffer&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SampleLayout","synthetic":true,"types":[]},{"text":"impl&lt;Buffer, P&gt; RefUnwindSafe for View&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Buffer, P&gt; RefUnwindSafe for ViewMut&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NormalForm","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for BmpDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; RefUnwindSafe for BMPEncoder&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DdsDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DxtDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DXTReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for DXTEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DXTVariant","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for GifDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for GifReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for HDRAdapter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for HdrReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for HdrDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RGBE8Pixel","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for HDRImageDecoderIterator&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HDRMetadata","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for HDREncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for IcoDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for ICOEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for JpegDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; RefUnwindSafe for JPEGEncoder&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PixelDensity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PixelDensityUnit","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for PNGReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for PngDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ApngDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for PNGEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressionType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterType","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for PnmDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for PNMEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArbitraryHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BitmapHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GraymapHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PixmapHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PNMHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArbitraryTuplType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PNMSubtype","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SampleEncoding","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for TgaDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for TgaEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for TiffDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for TiffReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for TiffEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for WebPDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Frame","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Vp8Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for FarbfeldReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for FarbfeldDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for FarbfeldEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["input"] = [{"text":"impl RefUnwindSafe for AfterRenderArgs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CloseArgs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IdleArgs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ButtonArgs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResizeArgs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RenderArgs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TouchArgs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UpdateArgs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ButtonState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Touch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Button","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Motion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HatState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileDrag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Input","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControllerButton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControllerHat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControllerAxisArgs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModifierKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Key","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MouseButton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EventId","synthetic":true,"types":[]}];
implementors["interpolation"] = [{"text":"impl RefUnwindSafe for EaseFunction","synthetic":true,"types":[]}];
implementors["jpeg_decoder"] = [{"text":"impl&lt;R&gt; RefUnwindSafe for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImageInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PixelFormat","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnsupportedFeature","synthetic":true,"types":[]}];
implementors["libloading"] = [{"text":"impl RefUnwindSafe for Library","synthetic":true,"types":[]},{"text":"impl&lt;'lib, T&gt; RefUnwindSafe for Symbol&lt;'lib, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Library","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Symbol&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["line_drawing"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Bresenham&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, O&gt; RefUnwindSafe for Midpoint&lt;I, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, O&gt; RefUnwindSafe for XiaolinWu&lt;I, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for WalkGrid&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Supercover&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Bresenham3d&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, O&gt; RefUnwindSafe for WalkVoxels&lt;I, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for BresenhamCircle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VoxelOrigin","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Steps&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Octant","synthetic":true,"types":[]}];
implementors["lzw"] = [{"text":"impl&lt;R&gt; RefUnwindSafe for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DecoderEarlyChange&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LsbReader","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for LsbWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MsbReader","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for MsbWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bits","synthetic":true,"types":[]}];
implementors["memmap"] = [{"text":"impl RefUnwindSafe for MmapOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mmap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MmapMut","synthetic":true,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl RefUnwindSafe for StreamResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MZFlush","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MZStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MZError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressionLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressorOxide","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for CallbackFunc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressionStrategy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TDEFLFlush","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TDEFLStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TINFLStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecompressorOxide","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InflateState","synthetic":true,"types":[]}];
implementors["nix"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dir","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; RefUnwindSafe for Iter&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Entry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Errno","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AtFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SealFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FdFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpliceFFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FallocateFlags","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FcntlArg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlockArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InterfaceAddress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InterfaceAddressIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleInitFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteModuleFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MsFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MntFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MQ_OFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FdFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MqAttr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InterfaceFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PollFd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PollFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenptyResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForkptyResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PtyMaster","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CloneFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CpuSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for AioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for LioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AioFsyncMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LioOpcode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LioMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AioCancelStat","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Buffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpollFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpollCreateFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpollEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpollOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EfdFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemFdCreateFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MapFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MsFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MlockAllFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MmapAdvise","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuotaValidFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dqblk","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuotaType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuotaFmt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RebootMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FdSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignalIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SaFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigAction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigmaskHow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigHandler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigevNotify","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SfdFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignalFd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv4Addr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6Addr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LinkAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NetlinkAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlgAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MsgFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixCredentials","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpMembershipRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6MembershipRequest","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CmsgSpace&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RecvMsg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CmsgIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddressFamily","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InetAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockProtocol","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControlMessageOwned","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ControlMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shutdown","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReuseAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReusePort","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpNoDelay","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Linger","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpAddMembership","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpDropMembership","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6AddMembership","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6DropMembership","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpMulticastTtl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpMulticastLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReceiveTimeout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SendTimeout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Broadcast","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OobInline","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SocketError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeepAlive","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PeerCredentials","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpKeepIdle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RcvBuf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SndBuf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RcvBufForce","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SndBufForce","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AcceptConn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OriginalDst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReceiveTimestamp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpTransparent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mark","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PassCred","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpCongestion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv4PacketInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6RecvPacketInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlgSetAeadAuthSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AlgSetKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FchmodatFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UtimensatFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FsFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Statvfs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SysInfo","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Termios","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InputFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControlFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LocalFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BaudRate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlushArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlowArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpecialCharacterIndices","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeVal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RemoteIoVec","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IoVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UtsName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitPidFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddWatchFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InitFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Inotify","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WatchDescriptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Uid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccessFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FchownatFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Whence","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathconfVar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SysconfVar","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; RefUnwindSafe for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; RefUnwindSafe for Range&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for RangeInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for RangeStep&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for RangeStepInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for RangeFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for RangeStepFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl RefUnwindSafe for ParseFloatError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloatErrorKind","synthetic":true,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for OrderedFloat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for NotNan&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloatIsNan","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for ParseNotNanError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["osmesa_sys"] = [{"text":"impl RefUnwindSafe for OsMesa","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for osmesa_context","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl RefUnwindSafe for Condvar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Once","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawMutex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawRwLock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawThreadId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OnceState","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl RefUnwindSafe for ParkToken","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnparkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnparkToken","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpinWait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequeueOp","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl RefUnwindSafe for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["piston_window"] = [{"text":"impl&lt;W&nbsp;=&nbsp;GlutinWindow&gt; !RefUnwindSafe for PistonWindow&lt;W&gt;","synthetic":true,"types":[]}];
implementors["png"] = [{"text":"impl RefUnwindSafe for PixelDimensions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FrameControl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnimationControl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Info","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Transformations","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Limits","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputInfo","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StreamingDecoder","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; RefUnwindSafe for StreamWriter&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColorType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BitDepth","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DisposeOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlendOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Compression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Decoded","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DecodingError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EncodingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterType","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl !RefUnwindSafe for TokenStream","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LexError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Punct","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Ident","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TokenTree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Delimiter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for IntoIter","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Copied&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; RefUnwindSafe for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; RefUnwindSafe for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for MaxLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for MinLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; RefUnwindSafe for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; RefUnwindSafe for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for PanicFuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; RefUnwindSafe for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for RepeatN&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; RefUnwindSafe for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; RefUnwindSafe for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; RefUnwindSafe for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for ZipEq&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for StepBy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for Iter&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for Chunks&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for ChunksExact&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for Windows&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for IterMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for ChunksMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for ChunksExactMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; RefUnwindSafe for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; RefUnwindSafe for SplitMut&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; RefUnwindSafe for Split&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; RefUnwindSafe for SplitTerminator&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; RefUnwindSafe for Matches&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; RefUnwindSafe for MatchIndices&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl !RefUnwindSafe for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !RefUnwindSafe for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !RefUnwindSafe for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ThreadPool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&nbsp;=&nbsp;DefaultSpawn&gt; !RefUnwindSafe for ThreadPoolBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Configuration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FnContext","synthetic":true,"types":[]}];
implementors["rusttype"] = [{"text":"impl RefUnwindSafe for Curve","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Line","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for Point&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for Rect&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for Vector&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FontCollection&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Font&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Codepoint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlyphId","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Glyph&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SharedGlyphData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HMetrics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMetrics","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ScaledGlyph&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PositionedGlyph&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Scale","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IntoFontsIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, I&gt; RefUnwindSafe for GlyphIter&lt;'a, 'b, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for LayoutIter&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Contour","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SharedBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Segment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["same_file"] = [{"text":"impl RefUnwindSafe for Handle","synthetic":true,"types":[]}];
implementors["scoped_threadpool"] = [{"text":"impl !RefUnwindSafe for Pool","synthetic":true,"types":[]},{"text":"impl&lt;'pool, 'scope&gt; !RefUnwindSafe for Scope&lt;'pool, 'scope&gt;","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl RefUnwindSafe for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; RefUnwindSafe for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; RefUnwindSafe for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; RefUnwindSafe for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; RefUnwindSafe for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; RefUnwindSafe for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["shader_version"] = [{"text":"impl&lt;'a, V, S:&nbsp;?Sized&gt; RefUnwindSafe for Shaders&lt;'a, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseOpenGLError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenGL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseGLSLError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GLSL","synthetic":true,"types":[]}];
implementors["shared_library"] = [{"text":"impl RefUnwindSafe for LoadingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DynamicLibrary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpecialHandles","synthetic":true,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["smithay_client_toolkit"] = [{"text":"impl !RefUnwindSafe for Environment","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Shell","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DataDevice","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DataOffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadPipe","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DataSource","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WritePipe","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for DndEvent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataSourceEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModifiersState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RMLVO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyRepeatEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyRepeatKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Event&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputMgr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ThemeManager","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ThemedPointer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AutoThemer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AutoPointer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DoubleMemPool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MemPool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BasicFrame","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ConceptFrame","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !RefUnwindSafe for Window&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ButtonState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FrameRequest","synthetic":true,"types":[]}];
implementors["stb_truetype"] = [{"text":"impl&lt;Data&gt; RefUnwindSafe for FontInfo&lt;Data&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Data: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Vertex","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Rect&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HMetrics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMetrics","synthetic":true,"types":[]},{"text":"impl&lt;'a, Data&gt; RefUnwindSafe for FontNameIter&lt;'a, Data&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Data: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VertexType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PlatformId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnicodeEid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MicrosoftEid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MacEid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MicrosoftLang","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MacLang","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PlatformEncodingLanguageId","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl !RefUnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MetaList","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MetaNameValue","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FieldsNamed","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VisCrate","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VisPublic","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VisRestricted","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprArray","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprAssign","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprAsync","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprAwait","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprBinary","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprBlock","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprBox","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprBreak","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprCall","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprCast","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprClosure","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprContinue","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprField","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprForLoop","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprGroup","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprIf","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprIndex","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprLet","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprLit","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprLoop","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprMacro","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprMatch","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprParen","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprPath","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprRange","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprReference","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprRepeat","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprReturn","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprStruct","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprTry","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprTuple","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprUnary","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprWhile","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprYield","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ConstParam","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Generics","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LifetimeDef","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PredicateEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PredicateType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TraitBound","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeParam","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitBool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitByte","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitByteStr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitChar","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitFloat","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitInt","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitStr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DataEnum","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DataStruct","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DataUnion","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DeriveInput","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Abi","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BareFnArg","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeArray","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeBareFn","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeGroup","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeInfer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeMacro","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeNever","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeParen","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypePath","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypePtr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeReference","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeSlice","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeTuple","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Variadic","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Binding","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PathSegment","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for QSelf","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AttrStyle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for NestedMeta","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Fields","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GenericParam","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeParamBound","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WherePredicate","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Lit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StrStyle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnOp","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReturnType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GenericArgument","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PathArguments","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Underscore","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Abstract","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for As","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Auto","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Await","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Become","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Do","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Final","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Fn","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for For","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for If","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Impl","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for In","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Mod","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Move","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Mut","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Override","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Priv","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Pub","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Ref","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SelfType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SelfValue","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Static","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Super","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Trait","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Try","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Typeof","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Union","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Unsafe","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Unsized","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Use","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Virtual","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Where","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for While","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Yield","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Add","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AddEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for And","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AndAnd","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AndEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for At","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Bang","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Caret","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CaretEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Colon","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Colon2","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Comma","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Div","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DivEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Dollar","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Dot","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Dot2","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Dot3","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DotDotEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Eq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EqEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Ge","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Gt","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Le","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Lt","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MulEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Ne","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Or","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OrEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OrOr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Pound","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Question","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RArrow","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LArrow","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Rem","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RemEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FatArrow","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Semi","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Shl","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ShlEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Shr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ShrEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Star","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Sub","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SubEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Tilde","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Brace","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Bracket","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Paren","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; !RefUnwindSafe for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Nothing","synthetic":true,"types":[]}];
implementors["texture"] = [{"text":"impl RefUnwindSafe for TextureSettings","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Format","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Filter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Wrap","synthetic":true,"types":[]}];
implementors["tiff"] = [{"text":"impl RefUnwindSafe for InflateError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TiffError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TiffFormatError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TiffUnsupportedError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColorType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Limits","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecodingResult","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DecodingBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Entry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rational","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SRational","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for TiffEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; RefUnwindSafe for DirectoryEncoder&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W, C&gt; RefUnwindSafe for ImageEncoder&lt;'a, W, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gray8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gray16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gray32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gray64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RGB8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RGB16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RGB32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RGB64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RGBA8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RGBA16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RGBA32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RGBA64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CMYK8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CMYK16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CMYK32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CMYK64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressionMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PhotometricInterpretation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PlanarConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Predictor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResolutionUnit","synthetic":true,"types":[]}];
implementors["viewport"] = [{"text":"impl RefUnwindSafe for Viewport","synthetic":true,"types":[]}];
implementors["void"] = [{"text":"impl RefUnwindSafe for Void","synthetic":true,"types":[]}];
implementors["walkdir"] = [{"text":"impl RefUnwindSafe for DirEntry","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WalkDir","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for FilterEntry&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["wayland_client"] = [{"text":"impl !RefUnwindSafe for Display","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EventQueue","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for QueueToken","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReadEventsGuard","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GlobalManager","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for NewProxy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !RefUnwindSafe for Proxy&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConnectError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProxyMap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CursorTheme","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for CursorImageBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlEglSurface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlDisplay","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlRegistry","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlCallback","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlCompositor","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlShmPool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlShm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Format","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlBuffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlDataOffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlDataSource","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlDataDevice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DndAction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlDataDeviceManager","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlShell","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Resize","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Transient","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlShellSurface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FullscreenMethod","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlSurface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Capability","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlSeat","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlPointer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ButtonState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Axis","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AxisSource","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlKeyboard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeymapFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlTouch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Subpixel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Transform","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlRegion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlSubcompositor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlSubsurface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]}];
implementors["wayland_commons"] = [{"text":"impl RefUnwindSafe for AnonymousObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoMessage","synthetic":true,"types":[]},{"text":"impl&lt;Meta&gt; RefUnwindSafe for Object&lt;Meta&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Meta: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Meta&gt; RefUnwindSafe for ObjectMap&lt;Meta&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Meta: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Socket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferedSocket","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UserData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UserDataMap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Message","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArgumentType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Argument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageWriteError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageParseError","synthetic":true,"types":[]}];
implementors["wayland_protocols"] = [{"text":"impl RefUnwindSafe for ZwpFullscreenShellV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Capability","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PresentMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpFullscreenShellModeFeedbackV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpIdleInhibitManagerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpIdleInhibitorV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpInputMethodContextV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpInputMethodV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpInputPanelV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpInputPanelSurfaceV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpInputTimestampsManagerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpInputTimestampsV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpKeyboardShortcutsInhibitManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpKeyboardShortcutsInhibitorV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpLinuxDmabufV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpLinuxBufferParamsV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpLinuxExplicitSynchronizationV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpLinuxSurfaceSynchronizationV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpLinuxBufferReleaseV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpPointerConstraintsV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpLockedPointerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpConfinedPointerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpPointerGesturesV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpPointerGestureSwipeV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpPointerGesturePinchV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpPrimarySelectionDeviceManagerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpPrimarySelectionDeviceV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpPrimarySelectionOfferV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpPrimarySelectionSourceV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpRelativePointerManagerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpRelativePointerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTabletManagerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTabletSeatV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTabletToolV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Capability","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ButtonState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTabletV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTabletManagerV2","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTabletSeatV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTabletToolV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Capability","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ButtonState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTabletV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTabletPadRingV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Source","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTabletPadStripV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Source","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTabletPadGroupV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTabletPadV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ButtonState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTextInputV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentHint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentPurpose","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreeditStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TextDirection","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTextInputManagerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentHint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTextInputV3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChangeCause","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentPurpose","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTextInputManagerV3","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgDecorationManagerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgToplevelDecorationV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgExporterV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgImporterV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgExportedV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgImportedV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgExporterV2","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgImporterV2","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgExportedV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgImportedV2","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgOutputManagerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgOutputV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XdgShell","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XdgSurface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResizeEdge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for State","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XdgPopup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgShellV6","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gravity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstraintAdjustment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgPositionerV6","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgSurfaceV6","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgToplevelV6","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResizeEdge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for State","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgPopupV6","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpXwaylandKeyboardGrabManagerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpXwaylandKeyboardGrabV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrDataControlManagerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrDataControlDeviceV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrDataControlSourceV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrDataControlOfferV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrExportDmabufManagerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrExportDmabufFrameV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CancelReason","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrForeignToplevelManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrForeignToplevelHandleV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for State","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrGammaControlManagerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrGammaControlV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrInputInhibitManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrInputInhibitorV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrLayerShellV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Layer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrLayerSurfaceV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrScreencopyManagerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrScreencopyFrameV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WpPresentation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WpPresentationFeedback","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XdgWmBase","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstraintAdjustment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XdgPositioner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gravity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XdgSurface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XdgToplevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResizeEdge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for State","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XdgPopup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WpViewporter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WpViewport","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]}];
implementors["wayland_sys"] = [{"text":"impl RefUnwindSafe for wl_message","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_interface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_list","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_array","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_argument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaylandClient","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WAYLAND_CLIENT_OPTION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WAYLAND_CLIENT_HANDLE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_proxy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_display","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_event_queue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaylandEgl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WAYLAND_EGL_OPTION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WAYLAND_EGL_HANDLE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_egl_window","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_cursor_image","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_cursor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaylandCursor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WAYLAND_CURSOR_OPTION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WAYLAND_CURSOR_HANDLE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_cursor_theme","synthetic":true,"types":[]}];
implementors["window"] = [{"text":"impl RefUnwindSafe for NoWindow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Size","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WindowSettings","synthetic":true,"types":[]}];
implementors["winit"] = [{"text":"impl RefUnwindSafe for KeyboardInput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Touch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModifiersState","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AvailableMonitorsIter","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MonitorId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Icon","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Window","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WindowId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeviceId","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EventsLoop","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EventsLoopProxy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EventsLoopClosed","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WindowBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WindowAttributes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WindowEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeviceEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TouchPhase","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ElementState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MouseButton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MouseScrollDelta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VirtualKeyCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BadIcon","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControlFlow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MouseCursor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogicalPosition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PhysicalPosition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogicalSize","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PhysicalSize","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XNotSupported","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WindowType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaylandTheme","synthetic":true,"types":[]}];
implementors["x11_dl"] = [{"text":"impl RefUnwindSafe for OpenError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xlib","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XcmsCCC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XcmsColor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XcmsColorSpace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XcmsFunctionSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbAction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbBounds","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbChanges","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbClientMapRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbColor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbComponentList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbComponentNames","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbControls","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbControlsChanges","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbControlsNotify","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbDeviceChanges","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbDeviceInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbDeviceLedInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbDoodad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbExtensionDeviceNotify","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbGeometry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbGeometrySizes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbIndicatorMapRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbKeyType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbMapChanges","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbMods","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbNameChanges","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbNamesNotify","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbOutline","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbOverlay","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbOverlayKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbOverlayRow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbProperty","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbRow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbSection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbServerMapRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbShape","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbSymInterpretRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XAnyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XButtonEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XCirculateEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XCirculateRequestEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XClientMessageEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XColormapEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XConfigureEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XConfigureRequestEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XCreateWindowEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XCrossingEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XDestroyWindowEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XErrorEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XExposeEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XFocusChangeEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XGraphicsExposeEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XGravityEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XKeyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XKeymapEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XMapEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XMappingEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XMapRequestEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XMotionEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XNoExposeEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XPropertyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XReparentEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XResizeRequestEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XSelectionClearEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XSelectionEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XSelectionRequestEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XUnmapEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XVisibilityEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbCompatMapRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbIndicatorRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbKeyAliasRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbKeyNameRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbNamesRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbStateRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XkbAnyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XkbNewKeyboardNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbMapNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XkbStateNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbControlsNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XkbIndicatorNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbNamesNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XkbCompatMapNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XkbBellNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XkbActionMessageEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XkbAccessXNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbExtensionDeviceNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XkbEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Depth","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Screen","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScreenFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Visual","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XArc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XChar2b","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XCharStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XClassHint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XColor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XComposeStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XExtCodes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XExtData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XFontProp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XFontSetExtents","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XFontStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XGCValues","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XGenericEventCookie","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XHostAddress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIconSize","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XImage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XKeyboardControl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XKeyboardState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XmbTextItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XModifierKeymap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XOMCharSetList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XPixmapFormatValues","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XPoint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRectangle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XrmOptionDescRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XrmValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XSegment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XSetWindowAttributes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XSizeHints","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XStandardColormap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XTextItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XTextItem16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XTextProperty","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XTimeCoord","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XVisualInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XwcTextItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XWindowAttributes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XWindowChanges","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XWMHints","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIMCallback","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIMPreeditDrawCallbackStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIMPreeditCaretCallbackStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIMText","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XICCallback","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AspectRatio","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClientMessageData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImageFns","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIMTextString","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XDisplay","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XGC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XIC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XIM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XRegion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XOC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XOM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XrmHashBucketRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XkbKbdDpyStateRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIMCaretDirection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIMCaretStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Glx","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __GLXcontextRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __GLXFBConfigRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xcursor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XcursorAnimate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XcursorChunkHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XcursorComment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XcursorComments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XcursorCursors","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XcursorFile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XcursorFileHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XcursorFileToc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XcursorImage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XcursorImages","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xf86vmode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XF86VidModeGamma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XF86VidModeModeInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XF86VidModeModeLine","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XF86VidModeMonitor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XF86VidModeSyncRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XF86VidModeNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xft","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XftFont","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XftColor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XftCharSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XftCharFontSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XftFontSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XftGlyphSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XftGlyphFontSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_FaceRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FcCharSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FcPattern","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FcEndian","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FcResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XftFontInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XftDraw","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XftPattern","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xlib","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XineramaScreenInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XPanoramiXInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XInput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XDevice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XDeviceControl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XDeviceInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XDeviceState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XDeviceTimeCoord","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XExtensionVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XFeedbackControl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XFeedbackState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XInputClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XInputClassInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XAnyClassinfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XInput2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIAddMasterInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIRemoveMasterInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIAttachSlaveInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIDetachSlaveInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIAnyHierarchyChangeInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIModifierState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIButtonState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIValuatorState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIEventMask","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIAnyClassInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIButtonClassInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIKeyClassInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIValuatorClassInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIScrollClassInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XITouchClassInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIDeviceInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIGrabModifiers","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIBarrierReleasePointerInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIHierarchyInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIHierarchyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIDeviceChangedEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIDeviceEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIRawEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIEnterEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIPropertyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XITouchOwnershipEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIBarrierEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xmu","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _AtomRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XmuArea","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XmuDisplayQueue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XmuDisplayQueueEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XmuScanline","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XmuSegment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XmuWidgetNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xf86vmode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRecordClientInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRecordExtRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRecordInterceptData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRecordRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRecordRange8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRecordRange16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRecordState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xrender","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XAnimCursor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XCircle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XConicalGradient","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XFilters","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XGlyphElt8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XGlyphElt16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XGlyphElt32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XGlyphInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XIndexValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XLinearGradient","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XLineFixed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XPointDouble","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XPointFixed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XRadialGradient","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRenderColor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRenderDirectFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRenderPictFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XRenderPictureAttributes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XSpanFix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XTrap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XTrapezoid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XTriangle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XTransform","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xss","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XScreenSaverInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XScreenSaverNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Arg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubstitutionRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _TranslationData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _WidgetClassRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _WidgetRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XtActionsRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XtAppStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XtCallbackRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XtCheckpointTokenRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XtConvertArgRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XtResource","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XtWidgetGeometry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xf86vmode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xlib_xcb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xrandr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRScreenSize","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRScreenConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRModeInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRScreenResources","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRROutputInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRPropertyInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRCrtcInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRCrtcGamma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRCrtcTransformAttributes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRPanning","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRProviderResources","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRProviderInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRMonitorInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRScreenChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRROutputChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRCrtcChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRROutputPropertyNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRProviderChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRProviderPropertyNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRResourceChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xrandr_2_2_0","synthetic":true,"types":[]}];
implementors["xdg"] = [{"text":"impl RefUnwindSafe for BaseDirectories","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BaseDirectoriesError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileFindIterator","synthetic":true,"types":[]}];
implementors["xml"] = [{"text":"impl RefUnwindSafe for ParserConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EmitterConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for ReprDisplay&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OwnedName","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Attribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OwnedAttribute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TextPosition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XmlVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Namespace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NamespaceStack","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for NamespaceStackMappings&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CheckedTarget&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for EventReader&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for Events&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XmlEvent","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for EventWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EmitterError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for EndElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StartElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for XmlEvent&lt;'a&gt;","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()