var searchIndex = {};
searchIndex["gfx_text"] = {"doc":"A library for drawing text for gfx-rs graphics API.\nUses freetype-rs underneath to former the font bitmap texture and collect\ninformation about face glyphs.","items":[[3,"Renderer","gfx_text","Text renderer.",null,null],[3,"RendererBuilder","","Text renderer builder. Allows to set rendering options using builder\npattern.",null,null],[4,"FontError","","Represents possible errors which may occur during the font loading.",null,null],[13,"NoFont","","No font was specified",0,null],[13,"EmptyFont","","Character set is empty",0,null],[13,"FreetypeError","","FreeType library error",0,null],[4,"Error","","General error type returned by the library. Wraps all other errors.",null,null],[13,"FontError","","Font loading error",1,null],[13,"PipelineError","","Pipeline creation/update error",1,null],[13,"ProgramError","","Program shader error.",1,null],[13,"CombinedError","","An error occuring during creation of texture or resource view",1,null],[13,"UpdateError","","An error occuring in buffer/texture updates",1,null],[4,"HorizontalAnchor","","An anchor aligns text horizontally to its given x position.",null,null],[13,"Left","","Anchor the left edge of the text",2,null],[13,"Center","","Anchor the horizontal mid-point of the text",2,null],[13,"Right","","Anchor the right edge of the text",2,null],[4,"VerticalAnchor","","An anchor aligns text vertically to its given y position.",null,null],[13,"Top","","Anchor the top edge of the text",3,null],[13,"Center","","Anchor the vertical mid-point of the text",3,null],[13,"Bottom","","Anchor the bottom edge of the text",3,null],[5,"new","","Create a new text renderer builder. Alias for `RendererBuilder::new`.",null,{"inputs":[{"name":"f"}],"output":{"name":"rendererbuilder"}}],[11,"fmt","","",0,null],[11,"from","","",0,{"inputs":[{"name":"freetypeerror"}],"output":{"name":"fonterror"}}],[11,"fmt","","",1,null],[11,"eq","","",2,null],[11,"eq","","",3,null],[11,"from","","",1,{"inputs":[{"name":"fonterror"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"pipelinestateerror"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"programerror"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"combinederror"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"updateerror"}],"output":{"name":"error"}}],[11,"new","","Create a new text renderer builder.",4,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"with_size","","Specify custom size.",4,null],[11,"with_font","","Specify custom font by path.",4,null],[11,"with_font_data","","Pass raw font data.",4,null],[11,"with_outline","","Specify outline width and color.\n**Not implemented yet.**",4,null],[11,"with_buffer_size","","Specify custom initial buffer size.",4,null],[11,"with_chars","","Make available only provided characters in font texture instead of\nloading all existing from the font face.",4,null],[11,"build","","Build a new text renderer instance using current settings.",4,null],[11,"unwrap","","Just an alias for `builder.build().unwrap()`.",4,null],[11,"add","","Add some text to the current draw scene relative to the top left corner\nof the screen using pixel coordinates.",5,null],[11,"add_anchored","","Add text to the draw scene by anchoring an edge or mid-point to a\nposition defined in screen pixel coordinates.",5,null],[11,"add_at","","Add some text to the draw scene using absolute world coordinates.",5,null],[11,"draw","","Draw the current scene and clear state.",5,null],[11,"draw_at","","Draw using provided projection matrix.",5,null],[11,"measure","","Get the bounding box size of a string as rendered by this font.",5,null]],"paths":[[4,"FontError"],[4,"Error"],[4,"HorizontalAnchor"],[4,"VerticalAnchor"],[3,"RendererBuilder"],[3,"Renderer"]]};
searchIndex["gfx"] = {"doc":"An efficient, low-level, bindless graphics API for Rust. See [the\nblog](http://gfx-rs.github.io/) for explanations and annotated examples.","items":[[0,"preset","gfx","State presets",null,null],[0,"blend","gfx::preset","Blending preset modes.",null,null],[17,"ADD","gfx::preset::blend","When combining two fragments, add their values together, saturating at 1.0",null,null],[17,"MULTIPLY","","When combining two fragments, multiply their values together.",null,null],[17,"ALPHA","","When combining two fragments, add the value of the source times its alpha channel with the\nvalue of the destination multiplied by the inverse of the source alpha channel. Has the\nusual transparency effect: mixes the two colors using a fraction of each one specified by\nthe alpha of the source.",null,null],[17,"INVERT","","When combining two fragments, subtract the destination color from a constant color\nusing the source color as weight. Has an invert effect with the constant color\nas base and source color controlling displacement from the base color.\nA white source color and a white value results in plain invert.\nThe output alpha is same as destination alpha.",null,null],[0,"depth","gfx::preset","Depth preset modes.",null,null],[17,"LESS_EQUAL_TEST","gfx::preset::depth","&quot;&lt;=&quot; comparison with read-only depth",null,null],[17,"LESS_EQUAL_WRITE","","&quot;&lt;=&quot; comparison with writable depth",null,null],[0,"state","gfx","Fixed-function hardware state.",null,null],[4,"FrontFace","gfx::state","The front face winding order of a set of vertices.",null,null],[13,"Clockwise","","Clockwise winding order.",0,null],[13,"CounterClockwise","","Counter-clockwise winding order.",0,null],[6,"LineWidth","","Width of a line.\nCould be f32 if not for Hash deriving issues.",null,null],[6,"OffsetSlope","","Slope depth offset factor\nCould be f32 if not for Hash deriving issues.",null,null],[6,"OffsetUnits","","Number of units to offset, where\nthe unit is the minimal difference in the depth value\ndictated by the precision of the depth buffer.",null,null],[3,"Offset","","How to offset vertices in screen space, if at all.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[4,"CullFace","","Which face, if any, to cull.",null,null],[13,"Nothing","","",2,null],[13,"Front","","",2,null],[13,"Back","","",2,null],[4,"RasterMethod","","How to rasterize a primitive.",null,null],[13,"Point","","Rasterize as a point.",3,null],[13,"Line","","Rasterize as a line with the given width.",3,null],[13,"Fill","","Rasterize as a face.",3,null],[3,"MultiSample","","Multi-sampling rasterization mode",null,null],[3,"Rasterizer","","Primitive rasterization state. Note that GL allows different raster\nmethod to be used for front and back, while this abstraction does not.",null,null],[12,"front_face","","Which vertex winding is considered to be the front face for culling.",4,null],[12,"cull_face","","Which face should be culled.",4,null],[12,"method","","How to rasterize this primitive.",4,null],[12,"offset","","Any polygon offset to apply.",4,null],[12,"samples","","Multi-sampling mode.",4,null],[4,"Comparison","","A pixel-wise comparison function.",null,null],[13,"Never","","`false`",5,null],[13,"Less","","`x &lt; y`",5,null],[13,"LessEqual","","`x &lt;= y`",5,null],[13,"Equal","","`x == y`",5,null],[13,"GreaterEqual","","`x &gt;= y`",5,null],[13,"Greater","","`x &gt; y`",5,null],[13,"NotEqual","","`x != y`",5,null],[13,"Always","","`true`",5,null],[4,"StencilOp","","Stencil mask operation.",null,null],[13,"Keep","","Keep the current value in the stencil buffer (no change).",6,null],[13,"Zero","","Set the value in the stencil buffer to zero.",6,null],[13,"Replace","","Set the stencil buffer value to `value` from `StencilSide`",6,null],[13,"IncrementClamp","","Increment the stencil buffer value, clamping to its maximum value.",6,null],[13,"IncrementWrap","","Increment the stencil buffer value, wrapping around to 0 on overflow.",6,null],[13,"DecrementClamp","","Decrement the stencil buffer value, clamping to its minimum value.",6,null],[13,"DecrementWrap","","Decrement the stencil buffer value, wrapping around to the maximum value on overflow.",6,null],[13,"Invert","","Bitwise invert the current value in the stencil buffer.",6,null],[3,"StencilSide","","Complete stencil state for a given side of a face.",null,null],[12,"fun","","Comparison function to use to determine if the stencil test passes.",7,null],[12,"mask_read","","A mask that is ANDd with both the stencil buffer value and the reference value when they\nare read before doing the stencil test.",7,null],[12,"mask_write","","A mask that is ANDd with the stencil value before writing to the stencil buffer.",7,null],[12,"op_fail","","What operation to do if the stencil test fails.",7,null],[12,"op_depth_fail","","What operation to do if the stenil test passes but the depth test fails.",7,null],[12,"op_pass","","What operation to do if both the depth and stencil test pass.",7,null],[3,"Stencil","","Complete stencil state, specifying how to handle the front and back side of a face.",null,null],[12,"front","","",8,null],[12,"back","","",8,null],[3,"Depth","","Depth test state.",null,null],[12,"fun","","Comparison function to use.",9,null],[12,"write","","Specify whether to write to the depth buffer or not.",9,null],[4,"Equation","","",null,null],[13,"Add","","Adds source and destination.\nSource and destination are multiplied by blending parameters before addition.",10,null],[13,"Sub","","Subtracts destination from source.\nSource and destination are multiplied by blending parameters before subtraction.",10,null],[13,"RevSub","","Subtracts source from destination.\nSource and destination are multiplied by blending parameters before subtraction.",10,null],[13,"Min","","Component-wise minimum value of source and destination.\nBlending parameters are ignored.",10,null],[13,"Max","","Component-wise maximum value of source and destination.\nBlending parameters are ignored.",10,null],[4,"BlendValue","","",null,null],[13,"SourceColor","","",11,null],[13,"SourceAlpha","","",11,null],[13,"DestColor","","",11,null],[13,"DestAlpha","","",11,null],[13,"ConstColor","","",11,null],[13,"ConstAlpha","","",11,null],[4,"Factor","","",null,null],[13,"Zero","","",12,null],[13,"One","","",12,null],[13,"SourceAlphaSaturated","","",12,null],[13,"ZeroPlus","","",12,null],[13,"OneMinus","","",12,null],[3,"BlendChannel","","",null,null],[12,"equation","","",13,null],[12,"source","","",13,null],[12,"destination","","",13,null],[3,"Blend","","",null,null],[12,"color","","",14,null],[12,"alpha","","",14,null],[3,"ColorMask","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"BLUE","","",null,null],[17,"ALPHA","","",null,null],[17,"MASK_ALL","","",null,null],[17,"MASK_NONE","","",null,null],[3,"Color","","The state of an active color render target",null,null],[12,"mask","","Color mask to use.",15,null],[12,"blend","","Optional blending.",15,null],[3,"RefValues","","The complete set of the rasterizer reference values.\nSwitching these doesn&#39;t roll the hardware context.",null,null],[12,"stencil","","Stencil front and back values.",16,null],[12,"blend","","Constant blend color.",16,null],[8,"Device","gfx","A `Device` is responsible for submitting `CommandBuffer`s to the GPU.",null,null],[16,"Resources","","Associated `Resources` type.",17,null],[16,"CommandBuffer","","Associated `CommandBuffer` type. Every `Device` type can only work with one `CommandBuffer`\ntype.",17,null],[10,"get_capabilities","","Returns the capabilities of this `Ðevice`.",17,null],[10,"pin_submitted_resources","","Pin everything from this handle manager to live for a frame.",17,null],[10,"submit","","Submits a `CommandBuffer` to the GPU for execution.",17,null],[10,"cleanup","","Cleanup unused resources. This should be called between frames.",17,null],[8,"Resources","","Different types of a specific API.",null,null],[16,"Buffer","","",18,null],[16,"Shader","","",18,null],[16,"Program","","",18,null],[16,"PipelineStateObject","","",18,null],[16,"Texture","","",18,null],[16,"ShaderResourceView","","",18,null],[16,"UnorderedAccessView","","",18,null],[16,"RenderTargetView","","",18,null],[16,"DepthStencilView","","",18,null],[16,"Sampler","","",18,null],[16,"Fence","","",18,null],[4,"Primitive","","Describes what geometric primitives are created from vertex data.",null,null],[13,"PointList","","Each vertex represents a single point.",19,null],[13,"LineList","","Each pair of vertices represent a single line segment. For example, with `[a, b, c, d,\ne]`, `a` and `b` form a line, `c` and `d` form a line, and `e` is discarded.",19,null],[13,"LineStrip","","Every two consecutive vertices represent a single line segment. Visually forms a &quot;path&quot; of\nlines, as they are all connected. For example, with `[a, b, c]`, `a` and `b` form a line\nline, and `b` and `c` form a line.",19,null],[13,"TriangleList","","Each triplet of vertices represent a single triangle. For example, with `[a, b, c, d, e]`,\n`a`, `b`, and `c` form a triangle, `d` and `e` are discarded.",19,null],[13,"TriangleStrip","","Every three consecutive vertices represent a single triangle. For example, with `[a, b, c,\nd]`, `a`, `b`, and `c` form a triangle, and `b`, `c`, and `d` form a triangle.",19,null],[6,"VertexCount","","Draw vertex count.",null,null],[6,"InstanceCount","","Draw number of instances",null,null],[4,"ShaderSet","","A complete set of shaders to link a program.",null,null],[13,"Simple","","Simple program: Vs-Ps",20,null],[13,"Geometry","","Geometry shader programs: Vs-Gs-Ps",20,null],[3,"VertexShader","","",null,null],[3,"HullShader","","",null,null],[3,"DomainShader","","",null,null],[3,"GeometryShader","","",null,null],[3,"PixelShader","","",null,null],[0,"format","","Universal format specification.\nApplicable to textures, views, and vertex buffers.",null,null],[4,"ChannelType","gfx::format","Type of a surface channel. This is how we interpret the\nstorage allocated with `SurfaceType`.",null,null],[13,"Int","","",21,null],[13,"Uint","","",21,null],[13,"Inorm","","",21,null],[13,"Unorm","","",21,null],[13,"Float","","",21,null],[13,"Srgb","","",21,null],[4,"Int","","",null,null],[4,"Uint","","",null,null],[4,"Inorm","","",null,null],[4,"Unorm","","",null,null],[4,"Float","","",null,null],[4,"Srgb","","",null,null],[4,"SurfaceType","","Type of the allocated texture surface. It is supposed to only\ncarry information about the number of bits per each channel.\nThe actual types are up to the views to decide and interpret.\nThe actual components are up to the swizzle to define.",null,null],[13,"R4_G4","","",22,null],[13,"R4_G4_B4_A4","","",22,null],[13,"R5_G5_B5_A1","","",22,null],[13,"R5_G6_B5","","",22,null],[13,"R8","","",22,null],[13,"R8_G8","","",22,null],[13,"R8_G8_B8_A8","","",22,null],[13,"R10_G10_B10_A2","","",22,null],[13,"R11_G11_B10","","",22,null],[13,"R16","","",22,null],[13,"R16_G16","","",22,null],[13,"R16_G16_B16","","",22,null],[13,"R16_G16_B16_A16","","",22,null],[13,"R32","","",22,null],[13,"R32_G32","","",22,null],[13,"R32_G32_B32","","",22,null],[13,"R32_G32_B32_A32","","",22,null],[13,"D16","","",22,null],[13,"D24","","",22,null],[13,"D24_S8","","",22,null],[13,"D32","","",22,null],[4,"R4_G4","","",null,null],[4,"R4_G4_B4_A4","","",null,null],[4,"R5_G5_B5_A1","","",null,null],[4,"R5_G6_B5","","",null,null],[4,"R8","","",null,null],[4,"R8_G8","","",null,null],[4,"R8_G8_B8_A8","","",null,null],[4,"R10_G10_B10_A2","","",null,null],[4,"R11_G11_B10","","",null,null],[4,"R16","","",null,null],[4,"R16_G16","","",null,null],[4,"R16_G16_B16","","",null,null],[4,"R16_G16_B16_A16","","",null,null],[4,"R32","","",null,null],[4,"R32_G32","","",null,null],[4,"R32_G32_B32","","",null,null],[4,"R32_G32_B32_A32","","",null,null],[4,"D16","","",null,null],[4,"D24","","",null,null],[4,"D24_S8","","",null,null],[4,"D32","","",null,null],[4,"ChannelSource","","Source channel in a swizzle configuration. Some may redirect onto\ndifferent physical channels, some may be hardcoded to 0 or 1.",null,null],[13,"Zero","","",23,null],[13,"One","","",23,null],[13,"X","","",23,null],[13,"Y","","",23,null],[13,"Z","","",23,null],[13,"W","","",23,null],[3,"Swizzle","","Channel swizzle configuration for the resource views.\nNote: It&#39;s not currently mirrored at compile-time,\nthus providing less safety and convenience.",null,null],[12,"0","","",24,null],[12,"1","","",24,null],[12,"2","","",24,null],[12,"3","","",24,null],[3,"Format","","Complete run-time surface format.",null,null],[12,"0","","",25,null],[12,"1","","",25,null],[8,"SurfaceTyped","","Compile-time surface type trait.",null,null],[16,"DataType","","The corresponding data type to be passed from CPU.",26,null],[10,"get_surface_type","","Return the run-time value of the type.",26,{"inputs":[],"output":{"name":"surfacetype"}}],[8,"BufferSurface","","An ability of a surface type to be used for vertex buffers.",null,null],[8,"TextureSurface","","An ability of a surface type to be used for textures.",null,null],[8,"RenderSurface","","An ability of a surface type to be used for render targets.",null,null],[8,"DepthSurface","","An ability of a surface type to be used for depth targets.",null,null],[8,"StencilSurface","","An ability of a surface type to be used for stencil targets.",null,null],[8,"ChannelTyped","","Compile-time channel type trait.",null,null],[16,"ShaderType","","Shader-visible type that corresponds to this channel.\nFor example, normalized integers are visible as floats.",27,null],[10,"get_channel_type","","Return the run-time value of the type.",27,{"inputs":[],"output":{"name":"channeltype"}}],[8,"TextureChannel","","An ability of a channel type to be used for textures.",null,null],[8,"RenderChannel","","An ability of a channel type to be used for render targets.",null,null],[8,"BlendChannel","","An ability of a channel type to be used for blended render targets.",null,null],[8,"Formatted","","Compile-time full format trait.",null,null],[16,"Surface","","Associated surface type.",28,null],[16,"Channel","","Associated channel type.",28,null],[16,"View","","Shader view type of this format.",28,null],[11,"get_format","","Return the run-time value of the type.",28,{"inputs":[],"output":{"name":"format"}}],[8,"BufferFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthFormat","","Ability to be used for depth targets.",null,null],[8,"StencilFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthStencilFormat","","Ability to be used for depth+stencil targets.",null,null],[8,"TextureFormat","","Ability to be used for textures.",null,null],[8,"RenderFormat","","Ability to be used for render targets.",null,null],[8,"BlendFormat","","Ability to be used for blended render targets.",null,null],[3,"U8Norm","","",null,null],[12,"0","","",29,null],[3,"I8Norm","","",null,null],[12,"0","","",30,null],[3,"U16Norm","","",null,null],[12,"0","","",31,null],[3,"I16Norm","","",null,null],[12,"0","","",32,null],[3,"F16","","",null,null],[12,"0","","",33,null],[6,"Vec1","","Abstracted 1-element container for macro internal use",null,null],[6,"Vec2","","Abstracted 2-element container for macro internal use",null,null],[6,"Vec3","","Abstracted 3-element container for macro internal use",null,null],[6,"Vec4","","Abstracted 4-element container for macro internal use",null,null],[6,"Rgba8","","Standard 8bits RGBA format.",null,null],[6,"Srgba8","","Standard 8bit gamma transforming RGB format.",null,null],[6,"Rgb10a2F","","Standard HDR floating-point format with 10 bits for RGB components\nand 2 bits for the alpha.",null,null],[6,"Rgba16F","","Standard 16-bit floating-point RGBA format.",null,null],[6,"Rgba32F","","Standard 32-bit floating-point RGBA format.",null,null],[6,"Depth","","Standard 24-bit depth format.",null,null],[6,"DepthStencil","","Standard 24-bit depth format with 8-bit stencil.",null,null],[6,"Depth32F","","Standard 32-bit floating-point depth format.",null,null],[0,"handle","gfx","Device resource handles",null,null],[3,"RawBuffer","gfx::handle","Raw (untyped) Buffer Handle",null,null],[3,"Buffer","","Type-safe buffer handle",null,null],[3,"Shader","","Shader Handle",null,null],[3,"Program","","Program Handle",null,null],[3,"RawPipelineState","","Raw Pipeline State Handle",null,null],[3,"RawTexture","","Raw texture object",null,null],[3,"Texture","","Typed texture object",null,null],[3,"RawShaderResourceView","","Raw Shader Resource View Handle",null,null],[3,"ShaderResourceView","","Type-safe Shader Resource View Handle",null,null],[3,"RawUnorderedAccessView","","Raw Unordered Access View Handle",null,null],[3,"UnorderedAccessView","","Type-safe Unordered Access View Handle",null,null],[3,"RawRenderTargetView","","Raw RTV",null,null],[3,"RawDepthStencilView","","Raw DSV",null,null],[3,"RenderTargetView","","Typed RTV",null,null],[3,"DepthStencilView","","Typed DSV",null,null],[3,"Sampler","","Sampler Handle",null,null],[3,"Fence","","Fence Handle",null,null],[3,"Manager","","Stores reference-counted resources used in a command buffer.\nSeals actual resource names behind the interface, automatically\nreferencing them both by the Factory on resource creation\nand the Renderer during CommandBuffer population.",null,null],[8,"Producer","","A service trait to be used by the device implementation",null,null],[10,"make_buffer","","",34,null],[10,"make_shader","","",34,null],[10,"make_program","","",34,null],[10,"make_pso","","",34,null],[10,"make_texture","","",34,null],[10,"make_buffer_srv","","",34,null],[10,"make_texture_srv","","",34,null],[10,"make_buffer_uav","","",34,null],[10,"make_texture_uav","","",34,null],[10,"make_rtv","","",34,null],[10,"make_dsv","","",34,null],[10,"make_sampler","","",34,null],[10,"make_fence","","",34,null],[10,"clean_with","","Walk through all the handles, keep ones that are reference elsewhere\nand call the provided delete function (resource-specific) for others",34,null],[0,"tex","gfx","Texture creation and modification.",null,null],[4,"Error","gfx::tex","Pure texture object creation error.",null,null],[13,"Format","","Failed to map a given format to the device.",35,null],[13,"Kind","","The kind doesn&#39;t support a particular operation.",35,null],[13,"Samples","","Failed to map a given multisampled kind to the device.",35,null],[13,"Size","","Unsupported size in one of the dimensions.",35,null],[13,"Data","","The given data has a different size than the target texture slice.",35,null],[6,"Size","","Dimension size",null,null],[6,"Bits","","Number of bits per component",null,null],[6,"NumSamples","","Number of MSAA samples",null,null],[6,"NumFragments","","Number of EQAA fragments",null,null],[6,"Dimensions","","Dimensions: width, height, depth, and samples.",null,null],[4,"AaMode","","Describes the configuration of samples inside each texel.",null,null],[13,"Single","","No additional sample information",36,null],[13,"Multi","","MultiSampled Anti-Aliasing (MSAA)",36,null],[13,"Coverage","","Coverage Sampling Anti-Aliasing (CSAA/EQAA)",36,null],[4,"FilterMethod","","How to [filter](https://en.wikipedia.org/wiki/Texture_filtering) the\ntexture when sampling. They correspond to increasing levels of quality,\nbut also cost. They &quot;layer&quot; on top of each other: it is not possible to\nhave bilinear filtering without mipmapping, for example.",null,null],[13,"Scale","","The dumbest filtering possible, nearest-neighbor interpolation.",37,null],[13,"Mipmap","","Add simple mipmapping.",37,null],[13,"Bilinear","","Sample multiple texels within a single mipmap level to increase\nquality.",37,null],[13,"Trilinear","","Sample multiple texels across two mipmap levels to increase quality.",37,null],[13,"Anisotropic","","Anisotropic filtering with a given &quot;max&quot;, must be between 1 and 16,\ninclusive.",37,null],[4,"CubeFace","","The face of a cube texture to do an operation on.",null,null],[13,"PosX","","",38,null],[13,"NegX","","",38,null],[13,"PosY","","",38,null],[13,"NegY","","",38,null],[13,"PosZ","","",38,null],[13,"NegZ","","",38,null],[17,"CUBE_FACES","","A constant array of cube faces in the order they map to the hardware.",null,null],[4,"Kind","","Specifies the kind of a texture storage to be allocated.",null,null],[13,"D1","","A single row of texels.",39,null],[13,"D1Array","","An array of rows of texels. Equivalent to Texture2D except that texels\nin a different row are not sampled.",39,null],[13,"D2","","A traditional 2D texture, with rows arranged contiguously.",39,null],[13,"D2Array","","An array of 2D textures. Equivalent to Texture3D except that texels in\na different depth level are not sampled.",39,null],[13,"D3","","A volume texture, with each 2D layer arranged contiguously.",39,null],[13,"Cube","","A set of 6 2D textures, one for each face of a cube.",39,null],[13,"CubeArray","","An array of Cube textures.",39,null],[3,"ImageInfoCommon","","Describes a subvolume of a texture, which image data can be uploaded into.",null,null],[12,"xoffset","","",40,null],[12,"yoffset","","",40,null],[12,"zoffset","","",40,null],[12,"width","","",40,null],[12,"height","","",40,null],[12,"depth","","",40,null],[12,"format","","Format of each texel.",40,null],[12,"mipmap","","Which mipmap to select.",40,null],[6,"RawImageInfo","","New raw image info based on the universal format spec.",null,null],[6,"NewImageInfo","","New image info based on the universal format spec.\nThe format is suppsed to come from compile-time information\nas opposed to run-time enum values.",null,null],[4,"WrapMode","","Specifies how texture coordinates outside the range `[0, 1]` are handled.",null,null],[13,"Tile","","Tile the texture. That is, sample the coordinate modulo `1.0`. This is\nthe default.",41,null],[13,"Mirror","","Mirror the texture. Like tile, but uses abs(coord) before the modulo.",41,null],[13,"Clamp","","Clamp the texture to the value at `0.0` or `1.0` respectively.",41,null],[13,"Border","","Use border color.",41,null],[3,"Lod","","A wrapper for the LOD level of a texture.",null,null],[3,"PackedColor","","A wrapper for the 8bpp RGBA color, encoded as u32.",null,null],[12,"0","","",42,null],[3,"SamplerInfo","","Specifies how to sample from a texture.",null,null],[12,"filter","","Filter method to use.",43,null],[12,"wrap_mode","","Wrapping mode for each of the U, V, and W axis (S, T, and R in OpenGL\nspeak).",43,null],[12,"lod_bias","","This bias is added to every computed mipmap level (N + lod_bias). For\nexample, if it would select mipmap level 2 and lod_bias is 1, it will\nuse mipmap level 3.",43,null],[12,"lod_range","","This range is used to clamp LOD level used for sampling.",43,null],[12,"comparison","","Comparison mode, used primary for a shadow map.",43,null],[12,"border","","Border color is used when one of the wrap modes is set to border.",43,null],[3,"Descriptor","","Texture storage descriptor.",null,null],[12,"kind","","",44,null],[12,"levels","","",44,null],[12,"format","","",44,null],[12,"bind","","",44,null],[12,"usage","","",44,null],[3,"ResourceDesc","","Texture resource view descriptor.",null,null],[12,"channel","","",45,null],[12,"min","","",45,null],[12,"max","","",45,null],[12,"swizzle","","",45,null],[3,"RenderDesc","","Texture render view descriptor.",null,null],[12,"channel","","",46,null],[12,"level","","",46,null],[12,"layer","","",46,null],[3,"DepthStencilFlags","","Depth-stencil read-only flags",null,null],[17,"RO_DEPTH","","Depth is read-only in the view.",null,null],[17,"RO_STENCIL","","Stencil is read-only in the view.",null,null],[17,"RO_DEPTH_STENCIL","","Both depth and stencil are read-only.",null,null],[3,"DepthStencilDesc","","Texture depth-stencil view descriptor.",null,null],[12,"level","","",47,null],[12,"layer","","",47,null],[12,"flags","","",47,null],[6,"Level","","Mipmap level to select in a texture.",null,null],[6,"Layer","","A depth value, specifying which plane to select out of a 3D texture.",null,null],[8,"Factory","gfx","A `Factory` is responsible for creating and managing resources for the context it was created\nwith. ",null,null],[16,"Mapper","","Associated mapper type",48,null],[10,"get_capabilities","","Returns the capabilities of this `Factory`. This usually depends on the graphics API being\nused.",48,null],[10,"create_buffer_raw","","",48,null],[10,"create_buffer_const_raw","","",48,null],[11,"create_buffer_const","","",48,null],[11,"create_buffer_dynamic","","",48,null],[11,"create_buffer_staging","","",48,null],[10,"create_pipeline_state_raw","","Creates a new `RawPipelineState`. To create a safely typed `PipelineState`, see the\n`FactoryExt` trait and `pso` module, both in the `gfx` crate.",48,null],[10,"create_program","","Creates a new shader `Program` for the supplied `ShaderSet`.",48,null],[10,"create_shader","","Compiles a shader source into a `Shader` object that can be used to create a shader\n`Program`.",48,null],[11,"create_shader_vertex","","Compiles a `VertexShader` from source.",48,null],[11,"create_shader_geometry","","Compiles a `GeometryShader` from source.",48,null],[11,"create_shader_pixel","","Compiles a `PixelShader` from source. This is the same as what some APIs call a fragment\nshader.",48,null],[10,"create_sampler","","",48,null],[10,"map_buffer_raw","","",48,null],[10,"unmap_buffer_raw","","",48,null],[10,"map_buffer_readable","","",48,null],[10,"map_buffer_writable","","",48,null],[10,"map_buffer_rw","","",48,null],[10,"create_texture_raw","","Create a new empty raw texture with no data. The channel type parameter is a hint,\nrequired to assist backends that have no concept of typeless formats (OpenGL).\nThe initial data, if given, has to be provided for all mip levels and slices:\nSlice0.Mip0, Slice0.Mip1, ..., Slice1.Mip0, ...",48,null],[10,"view_buffer_as_shader_resource_raw","","",48,null],[10,"view_buffer_as_unordered_access_raw","","",48,null],[10,"view_texture_as_shader_resource_raw","","",48,null],[10,"view_texture_as_unordered_access_raw","","",48,null],[10,"view_texture_as_render_target_raw","","",48,null],[10,"view_texture_as_depth_stencil_raw","","",48,null],[11,"create_texture","","",48,null],[11,"view_buffer_as_shader_resource","","",48,null],[11,"view_buffer_as_unordered_access","","",48,null],[11,"view_texture_as_shader_resource","","",48,null],[11,"view_texture_as_unordered_access","","",48,null],[11,"view_texture_as_render_target","","",48,null],[11,"view_texture_as_depth_stencil","","",48,null],[11,"view_texture_as_depth_stencil_trivial","","",48,null],[11,"create_texture_const_u8","","",48,null],[11,"create_texture_const","","",48,null],[11,"create_render_target","","",48,null],[11,"create_depth_stencil","","",48,null],[11,"create_depth_stencil_view_only","","",48,null],[8,"Typed","","A service trait used to get the raw data out of\nstrong types. Not meant for public use.",null,null],[16,"Raw","","The raw type behind the phantom.",49,null],[10,"new","","Crete a new phantom from the raw type.",49,null],[10,"raw","","Get an internal reference to the raw type.",49,null],[4,"Usage","","A hint as to how this buffer/texture will be used.",null,null],[13,"GpuOnly","","GPU: read + write, CPU: copy. Optimal for render targets.",50,null],[13,"Const","","GPU: read, CPU: none. Optimal for resourced textures/buffers.",50,null],[13,"Dynamic","","GPU: read, CPU: write.",50,null],[13,"CpuOnly","","GPU: copy, CPU: as specified. Used as a staging buffer,\nto be copied back and forth with on-GPU targets.",50,null],[3,"Bind","","Bind flags",null,null],[4,"MapAccess","","Specifies the access allowed to a buffer mapping.",null,null],[13,"Readable","","Only allow reads.",51,null],[13,"Writable","","Only allow writes.",51,null],[13,"RW","","Allow full access.",51,null],[4,"BufferRole","","Role of the memory buffer. GLES doesn&#39;t allow chaning bind points for buffers.",null,null],[13,"Vertex","","Generic vertex buffer",52,null],[13,"Index","","Index buffer",52,null],[13,"Uniform","","Uniform block buffer",52,null],[3,"BufferInfo","","An information block that is immutable and associated with each buffer.",null,null],[12,"role","","Role",53,null],[12,"usage","","Usage hint",53,null],[12,"bind","","Bind flags",53,null],[12,"size","","Size in bytes",53,null],[12,"stride","","Stride of a single element, in bytes. Only used for structured buffers\nthat you use via shader resource / unordered access views.",53,null],[4,"BufferError","","Error creating a buffer.",null,null],[13,"UnsupportedBind","","Some of the bind flags are not supported.",54,null],[13,"Other","","Unknown other error.",54,null],[4,"BufferUpdateError","","An error happening on buffer updates.",null,null],[13,"OutOfBounds","","Trying to change the contents outside of the allocation.",55,null],[4,"ResourceViewError","","Error creating either a ShaderResourceView, or UnorderedAccessView.",null,null],[13,"NoBindFlag","","The corresponding bind flag is not present in the texture.",56,null],[13,"Channel","","Selected channel type is not supported for this texture.",56,null],[13,"Unsupported","","The backend was refused for some reason.",56,null],[4,"TargetViewError","","Error creating either a RenderTargetView, or DepthStencilView.",null,null],[13,"NoBindFlag","","The `RENDER_TARGET`/`DEPTH_STENCIL` flag is not present in the texture.",57,null],[13,"BadLevel","","Selected mip level doesn&#39;t exist.",57,null],[13,"BadLayer","","Selected array layer doesn&#39;t exist.",57,null],[13,"Channel","","Selected channel type is not supported for this texture.",57,null],[13,"Unsupported","","The backend was refused for some reason.",57,null],[4,"CombinedError","","An error from creating textures with views at the same time.",null,null],[13,"Texture","","Failed to create the raw texture.",58,null],[13,"Resource","","Failed to create SRV or UAV.",58,null],[13,"Target","","Failed to create RTV or DSV.",58,null],[17,"RENDER_TARGET","","The resource can be rendered into.",null,null],[17,"DEPTH_STENCIL","","The resource can serve as a depth/stencil target.",null,null],[17,"SHADER_RESOURCE","","The resource can be bound to the shader for reading.",null,null],[17,"UNORDERED_ACCESS","","The resource can be bound to the shader for writing.",null,null],[5,"cast_slice","","Cast a slice from one POD type to another.",null,null],[8,"CommandBuffer","","An interface of the abstract command buffer. It collects commands in an\nefficient API-specific manner, to be ready for execution on the device.",null,null],[10,"clone_empty","","Clone as an empty buffer",59,null],[10,"reset","","Reset the command buffer contents, retain the allocated storage",59,null],[10,"bind_pipeline_state","","Bind a pipeline state object",59,null],[10,"bind_vertex_buffers","","Bind a complete set of vertex buffers",59,null],[10,"bind_constant_buffers","","Bind a complete set of constant buffers",59,null],[10,"bind_global_constant","","Bind a global constant",59,null],[10,"bind_resource_views","","Bind a complete set of shader resource views",59,null],[10,"bind_unordered_views","","Bind a complete set of unordered access views",59,null],[10,"bind_samplers","","Bind a complete set of samplers",59,null],[10,"bind_pixel_targets","","Bind a complete set of pixel targets, including multiple\ncolors views and an optional depth/stencil view.",59,null],[10,"bind_index","","Bind an index buffer",59,null],[10,"set_scissor","","Set scissor rectangle",59,null],[10,"set_ref_values","","Set reference values for the blending and stencil front/back",59,null],[10,"update_buffer","","Update a vertex/index/uniform buffer",59,null],[10,"update_texture","","Update a texture",59,null],[10,"generate_mipmap","","",59,null],[10,"clear_color","","Clear color target",59,null],[10,"clear_depth_stencil","","",59,null],[10,"call_draw","","Draw a primitive",59,null],[10,"call_draw_indexed","","Draw a primitive with index buffer",59,null],[6,"InstanceOption","","Optional instance parameters",null,null],[3,"ProgramInfo","","Metadata about a program.",null,null],[12,"vertex_attributes","","Attributes in the program",60,null],[12,"globals","","Global constants in the program",60,null],[12,"constant_buffers","","Constant buffers in the program",60,null],[12,"textures","","Textures in the program",60,null],[12,"unordereds","","Unordered access resources in the program",60,null],[12,"samplers","","Samplers in the program",60,null],[12,"outputs","","Output targets in the program",60,null],[12,"output_depth","","A flag indicating that the pixel shader manually assigns the depth.",60,null],[12,"knows_outputs","","A hacky flag to make sure the clients know we are\nunable to actually get the output variable info",60,null],[4,"UniformValue","","A value that can be uploaded to the device as a uniform.",null,null],[13,"I32","","",61,null],[13,"F32","","",61,null],[13,"I32Vector2","","",61,null],[13,"I32Vector3","","",61,null],[13,"I32Vector4","","",61,null],[13,"F32Vector2","","",61,null],[13,"F32Vector3","","",61,null],[13,"F32Vector4","","",61,null],[13,"F32Matrix2","","",61,null],[13,"F32Matrix3","","",61,null],[13,"F32Matrix4","","",61,null],[3,"Encoder","","Graphics Command Encoder",null,null],[3,"Slice","","A `Slice` dictates in which and in what order vertices get processed. It is required for\nprocessing a PSO.",null,null],[12,"start","","The start index of the index-buffer. Processing will start at this location in the\nindex-buffer. ",62,null],[12,"end","","The end index in the index-buffer. Processing will stop at this location (exclusive) in\nthe index buffer.",62,null],[12,"base_vertex","","This is the index of the first vertex in the `VertexBuffer`. This value will be added to\nevery index in the index-buffer, effectively moving the start of the `VertexBuffer` to this\nbase-vertex.",62,null],[12,"instances","","Instancing configuration.",62,null],[12,"buffer","","Represents the type of index-buffer used.",62,null],[4,"UpdateError","","An error occuring in buffer/texture updates.",null,null],[13,"OutOfBounds","","",63,null],[12,"target","gfx::UpdateError","",63,null],[12,"source","","",63,null],[13,"UnitCountMismatch","gfx","",63,null],[12,"target","gfx::UpdateError","",63,null],[12,"slice","","",63,null],[4,"PipelineStateError","gfx","Error creating a PipelineState",null,null],[13,"Program","","Shader program failed to link.",64,null],[13,"DescriptorInit","","Unable to create PSO descriptor due to mismatched formats.",64,null],[13,"DeviceCreate","","Device failed to create the handle give the descriptor.",64,null],[4,"IndexBuffer","","Type of index-buffer used in a Slice.",null,null],[13,"Auto","","Represents a hypothetical index-buffer from 0 to infinity. In other words, all vertices\nget processed in order.",65,null],[13,"Index16","","An index-buffer with unsigned 16 bit indices.",65,null],[13,"Index32","","An index-buffer with unsigned 32 bit indices.",65,null],[0,"traits","","public re-exported traits",null,null],[8,"Device","gfx::traits","A `Device` is responsible for submitting `CommandBuffer`s to the GPU.",null,null],[16,"Resources","","Associated `Resources` type.",17,null],[16,"CommandBuffer","","Associated `CommandBuffer` type. Every `Device` type can only work with one `CommandBuffer`\ntype.",17,null],[10,"get_capabilities","","Returns the capabilities of this `Ðevice`.",17,null],[10,"pin_submitted_resources","","Pin everything from this handle manager to live for a frame.",17,null],[10,"submit","","Submits a `CommandBuffer` to the GPU for execution.",17,null],[10,"cleanup","","Cleanup unused resources. This should be called between frames.",17,null],[8,"Factory","","A `Factory` is responsible for creating and managing resources for the context it was created\nwith. ",null,null],[16,"Mapper","","Associated mapper type",48,null],[10,"get_capabilities","","Returns the capabilities of this `Factory`. This usually depends on the graphics API being\nused.",48,null],[10,"create_buffer_raw","","",48,null],[10,"create_buffer_const_raw","","",48,null],[11,"create_buffer_const","","",48,null],[11,"create_buffer_dynamic","","",48,null],[11,"create_buffer_staging","","",48,null],[10,"create_pipeline_state_raw","","Creates a new `RawPipelineState`. To create a safely typed `PipelineState`, see the\n`FactoryExt` trait and `pso` module, both in the `gfx` crate.",48,null],[10,"create_program","","Creates a new shader `Program` for the supplied `ShaderSet`.",48,null],[10,"create_shader","","Compiles a shader source into a `Shader` object that can be used to create a shader\n`Program`.",48,null],[11,"create_shader_vertex","","Compiles a `VertexShader` from source.",48,null],[11,"create_shader_geometry","","Compiles a `GeometryShader` from source.",48,null],[11,"create_shader_pixel","","Compiles a `PixelShader` from source. This is the same as what some APIs call a fragment\nshader.",48,null],[10,"create_sampler","","",48,null],[10,"map_buffer_raw","","",48,null],[10,"unmap_buffer_raw","","",48,null],[10,"map_buffer_readable","","",48,null],[10,"map_buffer_writable","","",48,null],[10,"map_buffer_rw","","",48,null],[10,"create_texture_raw","","Create a new empty raw texture with no data. The channel type parameter is a hint,\nrequired to assist backends that have no concept of typeless formats (OpenGL).\nThe initial data, if given, has to be provided for all mip levels and slices:\nSlice0.Mip0, Slice0.Mip1, ..., Slice1.Mip0, ...",48,null],[10,"view_buffer_as_shader_resource_raw","","",48,null],[10,"view_buffer_as_unordered_access_raw","","",48,null],[10,"view_texture_as_shader_resource_raw","","",48,null],[10,"view_texture_as_unordered_access_raw","","",48,null],[10,"view_texture_as_render_target_raw","","",48,null],[10,"view_texture_as_depth_stencil_raw","","",48,null],[11,"create_texture","","",48,null],[11,"view_buffer_as_shader_resource","","",48,null],[11,"view_buffer_as_unordered_access","","",48,null],[11,"view_texture_as_shader_resource","","",48,null],[11,"view_texture_as_unordered_access","","",48,null],[11,"view_texture_as_render_target","","",48,null],[11,"view_texture_as_depth_stencil","","",48,null],[11,"view_texture_as_depth_stencil_trivial","","",48,null],[11,"create_texture_const_u8","","",48,null],[11,"create_texture_const","","",48,null],[11,"create_render_target","","",48,null],[11,"create_depth_stencil","","",48,null],[11,"create_depth_stencil_view_only","","",48,null],[8,"DeviceFence","","Extension to the Device that allows for submitting of commands\naround a fence",null,null],[10,"fenced_submit","","Submit a command buffer to the stream creating a fence\nthe fence is signaled after the GPU has executed all commands\nin the buffer",66,null],[10,"fence_wait","","Wait on the supplied fence stalling the current thread until\nthe fence is satisfied",66,null],[8,"FactoryExt","","This trait is responsible for creating and managing graphics resources, much like the `Factory`\ntrait in the `gfx` crate. Every `Factory` automatically implements `FactoryExt`. ",null,null],[11,"create_vertex_buffer","","Create a vertex buffer from the supplied data. A `Slice` will have to manually be\nconstructed.",67,null],[11,"create_vertex_buffer_with_slice","","Shorthand for creating a new vertex buffer from the supplied vertices, together with a\n`Slice` from the supplied indices.",67,null],[11,"create_constant_buffer","","Create a constant buffer for `num` identical elements of type `T`.",67,null],[11,"create_shader_set","","Creates a `ShaderSet` from the supplied vertex and pixel shader source code.",67,null],[11,"link_program","","Creates a basic shader `Program` from the supplied vertex and pixel shader source code.",67,null],[11,"create_pipeline_state","","Similar to `create_pipeline_from_program(..)`, but takes a `ShaderSet` as opposed to a\nshader `Program`.  ",67,null],[11,"create_pipeline_from_program","","Creates a strongly typed `PipelineState` from its `Init` structure, a shader `Program`, a\nprimitive type and a `Rasterizer`.",67,null],[11,"create_pipeline_simple","","Creates a strongly typed `PipelineState` from its `Init` structure. Automatically creates a\nshader `Program` from a vertex and pixel shader source, as well as a `Rasterizer` capable\nof rendering triangle faces without culling.",67,null],[11,"create_sampler_linear","","Create a linear sampler with clamping to border.",67,null],[11,"clone","gfx","",63,null],[11,"fmt","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"fmt","","",63,null],[11,"description","","",63,null],[11,"from","","",68,{"inputs":[{"name":"c"}],"output":{"name":"encoder"}}],[11,"flush","","Submits the commands in this `Encoder`&#39;s internal `CommandBuffer` to the GPU, so they can\nbe executed. ",68,null],[11,"clone_empty","","Clone the renderer shared data but ignore the commands.",68,null],[11,"update_buffer","","Update a buffer with a slice of data.",68,null],[11,"update_constant_buffer","","Update a buffer with a single structure.",68,null],[11,"update_texture","","Update the contents of a texture.",68,null],[11,"clear","","Clears the supplied `RenderTargetView` to the supplied `ClearColor`.",68,null],[11,"clear_depth","","Clear a depth view with a specified value.",68,null],[11,"clear_stencil","","Clear a stencil view with a specified value.",68,null],[11,"draw","","Draws a `slice::Slice` using a pipeline state object, and its matching `Data` structure.",68,null],[11,"create_vertex_buffer","gfx::traits","Create a vertex buffer from the supplied data. A `Slice` will have to manually be\nconstructed.",67,null],[11,"create_vertex_buffer_with_slice","","Shorthand for creating a new vertex buffer from the supplied vertices, together with a\n`Slice` from the supplied indices.",67,null],[11,"create_constant_buffer","","Create a constant buffer for `num` identical elements of type `T`.",67,null],[11,"create_shader_set","","Creates a `ShaderSet` from the supplied vertex and pixel shader source code.",67,null],[11,"link_program","","Creates a basic shader `Program` from the supplied vertex and pixel shader source code.",67,null],[11,"create_pipeline_state","","Similar to `create_pipeline_from_program(..)`, but takes a `ShaderSet` as opposed to a\nshader `Program`.  ",67,null],[11,"create_pipeline_from_program","","Creates a strongly typed `PipelineState` from its `Init` structure, a shader `Program`, a\nprimitive type and a `Rasterizer`.",67,null],[11,"create_pipeline_simple","","Creates a strongly typed `PipelineState` from its `Init` structure. Automatically creates a\nshader `Program` from a vertex and pixel shader source, as well as a `Rasterizer` capable\nof rendering triangle faces without culling.",67,null],[11,"create_sampler_linear","","Create a linear sampler with clamping to border.",67,null],[11,"clone","gfx","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"fmt","","",64,null],[11,"fmt","","",64,null],[11,"description","","",64,null],[11,"cause","","",64,null],[11,"from","","",64,{"inputs":[{"name":"programerror"}],"output":{"name":"self"}}],[11,"from","","",64,{"inputs":[{"name":"initerror"}],"output":{"name":"self"}}],[11,"from","","",64,{"inputs":[{"name":"creationerror"}],"output":{"name":"self"}}],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"eq","","",62,null],[11,"ne","","",62,null],[11,"new_match_vertex_buffer","","Creates a new `Slice` to match the supplied vertex buffer, from start to end, in order.",62,{"inputs":[{"name":"buffer"}],"output":{"name":"self"}}],[11,"get_prim_count","","Calculates the number of primitives of the specified type in this `Slice`.",62,null],[11,"clone","","",65,null],[11,"fmt","","",65,null],[11,"eq","","",65,null],[11,"ne","","",65,null],[11,"default","","",65,{"inputs":[],"output":{"name":"self"}}],[11,"into_index_buffer","","",65,null],[11,"into_index_buffer","gfx::handle","",69,null],[11,"into_index_buffer","","",69,null],[0,"pso","gfx","A typed high-level graphics pipeline interface.",null,null],[3,"Descriptor","gfx::pso","All the information surrounding a shader program that is required\nfor PSO creation, including the formats of vertex buffers and pixel targets;",null,null],[12,"primitive","","Type of the primitive",70,null],[12,"rasterizer","","Rasterizer setup",70,null],[12,"scissor","","Enable scissor test",70,null],[12,"attributes","","Vertex attributes",70,null],[12,"color_targets","","Render target views (RTV)",70,null],[12,"depth_stencil","","Depth stencil view (DSV)",70,null],[3,"RawDataSet","","A complete set of raw data that needs to be specified at run-time\nwhenever we draw something with a PSO. This is what &quot;data&quot; struct\ngets transformed into when we call `encoder.draw(...)` with it.\nIt doesn&#39;t have any typing information, since PSO knows what\nformat and layout to expect from each resource.",null,null],[12,"vertex_buffers","","",71,null],[12,"constant_buffers","","",71,null],[12,"global_constants","","",71,null],[12,"resource_views","","",71,null],[12,"unordered_views","","",71,null],[12,"samplers","","",71,null],[12,"pixel_targets","","",71,null],[12,"ref_values","","",71,null],[12,"scissor","","",71,null],[3,"PipelineState","","A strongly typed Pipleline State Object. See the module documentation for more information.",null,null],[4,"InitError","","Failure to initilize the link between the shader and the data.",null,null],[13,"VertexImport","","Vertex attribute mismatch.",72,null],[13,"ConstantBuffer","","Constant buffer mismatch.",72,null],[13,"GlobalConstant","","Global constant mismatch.",72,null],[13,"ResourceView","","Shader resource view mismatch.",72,null],[13,"UnorderedView","","Unordered access view mismatch.",72,null],[13,"Sampler","","Sampler mismatch.",72,null],[13,"PixelExport","","Pixel target mismatch.",72,null],[0,"buffer","","Buffer components for a PSO.",null,null],[3,"Element","gfx::pso::buffer","A struct element descriptor.",null,null],[12,"format","","Element format",73,null],[12,"offset","","Offset from the beginning of the container, in bytes",73,null],[12,"stride","","Total container size, in bytes",73,null],[6,"ElemOffset","","Offset of an attribute from the start of the buffer, in bytes",null,null],[6,"ElemStride","","Offset between attribute values, in bytes",null,null],[6,"InstanceRate","","The number of instances between each subsequent attribute value",null,null],[3,"VertexBufferCommon","","Service struct to simplify the implementations of `VertexBuffer` and `InstanceBuffer`.",null,null],[3,"RawVertexBuffer","","Raw vertex/instance buffer component.\n- init: ?\n- data: `RawBuffer`",null,null],[3,"ConstantBuffer","","Constant buffer component.\n- init: `&amp;str` = name of the buffer\n- data: `Buffer&lt;T&gt;`",null,null],[3,"RawConstantBuffer","","Raw constant buffer component.\n- init: `&amp;str` = name of the buffer\n- data: `RawBuffer`",null,null],[3,"Global","","Global (uniform) constant component. Describes a free-standing value passed into\nthe shader, which is not enclosed into any constant buffer. Deprecated in DX10 and higher.\n- init: `&amp;str` = name of the constant\n- data: `T` = value",null,null],[6,"VertexBuffer","","Vertex buffer component. Advanced per vertex.\n- init: `()`\n- data: `Buffer&lt;T&gt;`",null,null],[6,"InstanceBuffer","","Instance buffer component. Same as the vertex buffer but advances per instance.",null,null],[8,"Structure","","A trait to be implemented by any struct having the layout described\nin the graphics API, like a vertex buffer.",null,null],[10,"query","","Get the layout of an element by name.",74,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"new","","",75,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",75,null],[11,"link_input","","",75,null],[11,"bind_to","","",75,null],[11,"new","","",76,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",76,null],[11,"link_input","","",76,null],[11,"bind_to","","",76,null],[11,"new","","",77,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",77,null],[11,"link_constant_buffer","","",77,null],[11,"bind_to","","",77,null],[11,"new","","",78,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",78,null],[11,"link_constant_buffer","","",78,null],[11,"bind_to","","",78,null],[11,"new","","",79,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",79,null],[11,"link_global_constant","","",79,null],[11,"bind_to","","",79,null],[0,"resource","gfx::pso","Resource components for a PSO.",null,null],[3,"ShaderResource","gfx::pso::resource","Shader resource component (SRV). Typically is a view into some texture,\nbut can also be a buffer.\n- init: `&amp;str` = name of the resource\n- data: `ShaderResourceView&lt;T&gt;`",null,null],[3,"RawShaderResource","","Raw (untyped) shader resource (SRV).\n- init: `&amp;str` = name of the resource. This may change in the future.\n- data: `RawShaderResourceView`",null,null],[3,"UnorderedAccess","","Unordered access component (UAV). A writable resource (texture/buffer)\nwith no defined access order across simultaneously executing shaders.\nSupported on DX10 and higher.\n- init: `&amp;str` = name of the resource\n- data: `UnorderedAccessView&lt;T&gt;`",null,null],[3,"Sampler","","Sampler component.\n- init: `&amp;str` = name of the sampler\n- data: `Sampler`",null,null],[3,"TextureSampler","","A convenience type for a texture paired with a sampler.\nIt only makes sense for DX9 class hardware, where every texture by default\nis bundled with a sampler, hence they are represented by the same name.\nIn DX10 and higher samplers are totally separated from the textures.\n- init: `&amp;str` = name of the sampler/texture (assuming they match)\n- data: (`ShaderResourceView&lt;T&gt;`, `Sampler`)",null,null],[11,"new","","",80,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",80,null],[11,"link_resource_view","","",80,null],[11,"bind_to","","",80,null],[11,"new","","",81,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",81,null],[11,"link_resource_view","","",81,null],[11,"bind_to","","",81,null],[11,"new","","",82,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",82,null],[11,"link_unordered_view","","",82,null],[11,"bind_to","","",82,null],[11,"new","","",83,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",83,null],[11,"link_sampler","","",83,null],[11,"bind_to","","",83,null],[11,"new","","",84,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",84,null],[11,"link_resource_view","","",84,null],[11,"link_sampler","","",84,null],[11,"bind_to","","",84,null],[0,"target","gfx::pso","Render target components for a PSO.",null,null],[3,"RenderTarget","gfx::pso::target","Render target component. Typically points to a color-formatted texture.\n- init: `&amp;str` = name of the target\n- data: `RenderTargetView&lt;T&gt;`",null,null],[3,"BlendTarget","","Render target component with active blending mode.\n- init: (`&amp;str`, `ColorMask`, `Blend` = blending state)\n- data: `RenderTargetView&lt;T&gt;`",null,null],[3,"RawRenderTarget","","Raw (untyped) render target component with optional blending.\n- init: (`&amp;str`, `Format`, `ColorMask`, `Option&lt;Blend&gt;`)\n- data: `RawRenderTargetView`",null,null],[3,"DepthTarget","","Depth target component.\n- init: `Depth` = depth state\n- data: `DepthStencilView&lt;T&gt;`",null,null],[3,"StencilTarget","","Stencil target component.\n- init: `Stencil` = stencil state\n- data: (`DepthStencilView&lt;T&gt;`, `(front, back)` = stencil reference values)",null,null],[3,"DepthStencilTarget","","Depth + stencil target component.\n- init: (`Depth` = depth state, `Stencil` = stencil state)\n- data: (`DepthStencilView&lt;T&gt;`, `(front, back)` = stencil reference values)",null,null],[3,"Scissor","","Scissor component. Sets up the scissor test for rendering.\n- init: `()`\n- data: `Rect` = target area",null,null],[3,"BlendRef","","Blend reference component. Sets up the reference color for blending.\n- init: `()`\n- data: `ColorValue`",null,null],[11,"new","","",85,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",85,null],[11,"link_output","","",85,null],[11,"bind_to","","",85,null],[11,"new","","",86,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",86,null],[11,"link_output","","",86,null],[11,"bind_to","","",86,null],[11,"new","","",87,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",87,null],[11,"link_output","","",87,null],[11,"bind_to","","",87,null],[11,"new","","",88,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",88,null],[11,"link_depth_stencil","","",88,null],[11,"bind_to","","",88,null],[11,"new","","",89,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",89,null],[11,"link_depth_stencil","","",89,null],[11,"bind_to","","",89,null],[11,"new","","",90,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",90,null],[11,"link_depth_stencil","","",90,null],[11,"bind_to","","",90,null],[11,"new","","",91,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",91,null],[11,"link_scissor","","",91,null],[11,"bind_to","","",91,null],[11,"new","","",92,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",92,null],[11,"bind_to","","",92,null],[0,"bundle","gfx::pso","Combine slice data with pipeline state.",null,null],[3,"Bundle","gfx::pso::bundle","Slice-PSO bundle.",null,null],[12,"slice","","Slice",93,null],[12,"pso","","Pipeline state",93,null],[12,"data","","Pipeline data",93,null],[11,"new","","Create new Bundle",93,{"inputs":[{"name":"slice"},{"name":"pipelinestate"},{"name":"data"}],"output":{"name":"self"}}],[11,"encode","","Draw bundle using encoder.",93,null],[8,"PipelineInit","gfx::pso","A service trait implemented by the &quot;init&quot; structure of PSO.",null,null],[16,"Meta","","The associated &quot;meta&quot; struct.",94,null],[10,"link_to","","Attempt to map a PSO descriptor to a give shader program,\nrepresented by `ProgramInfo`. Returns an instance of the\n&quot;meta&quot; struct upon successful mapping.",94,null],[8,"PipelineData","","a service trait implemented the &quot;data&quot; structure of PSO.",null,null],[16,"Meta","","The associated &quot;meta&quot; struct.",95,null],[10,"bake_to","","Dump all the contained data into the raw data set,\ngiven the mapping (&quot;meta&quot;), and a handle manager.",95,null],[8,"DataLink","","The &quot;link&quot; logic portion of a PSO component.\nDefines the input data for the component.",null,null],[16,"Init","","The assotiated &quot;init&quot; type - a member of the PSO &quot;init&quot; struct.",96,null],[10,"new","","Create a new empty data link.",96,{"inputs":[],"output":{"name":"self"}}],[10,"is_active","","Check if this link is actually used by the shader.",96,null],[11,"link_input","","Attempt to link with a vertex attribute.",96,null],[11,"link_constant_buffer","","Attempt to link with a constant buffer.",96,null],[11,"link_global_constant","","Attempt to link with a global constant.",96,null],[11,"link_output","","Attempt to link with an output render target (RTV).",96,null],[11,"link_depth_stencil","","Attempt to link with a depth-stencil target (DSV).",96,null],[11,"link_resource_view","","Attempt to link with a shader resource (SRV).",96,null],[11,"link_unordered_view","","Attempt to link with an unordered access (UAV).",96,null],[11,"link_sampler","","Attempt to link with a sampler.",96,null],[11,"link_scissor","","Attempt to enable scissor test.",96,null],[8,"DataBind","","The &quot;bind&quot; logic portion of the PSO component.\nDefines how the user data translates into the raw data set.",null,null],[16,"Data","","The associated &quot;data&quot; type - a member of the PSO &quot;data&quot; struct.",97,null],[10,"bind_to","","Dump the given data into the raw data set.",97,null],[11,"fmt","","",71,null],[11,"new","","Create an empty data set.",71,{"inputs":[],"output":{"name":"rawdataset"}}],[11,"clear","","Clear all contained data.",71,null],[11,"clone","","",72,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"fmt","","",72,null],[11,"fmt","","",72,null],[11,"description","","",72,null],[11,"new","","Create a new PSO from a raw handle and the &quot;meta&quot; instance.",98,{"inputs":[{"name":"rawpipelinestate"},{"name":"primitive"},{"name":"m"}],"output":{"name":"pipelinestate"}}],[11,"get_handle","","Get a raw handle reference.",98,null],[11,"get_meta","","Get a &quot;meta&quot; struct reference. Can be used by the user to check\nwhat resources are actually used and what not.",98,null],[0,"shade","gfx","Shaders\nShader parameter handling.",null,null],[6,"ConstFormat","gfx::shade","Format of a shader constant.",null,null],[8,"Formatted","","A trait that statically links simple data types to\nconstant formats.",null,null],[10,"get_format","","Get the associated constant format.",99,null],[3,"Usage","","Parameter usage flags.",null,null],[0,"core","","Shader handling.",null,null],[6,"Dimension","gfx::shade::core","Number of components in a container type (vectors/matrices)",null,null],[4,"IsArray","","Whether the sampler samples an array texture.",null,null],[13,"Array","","",100,null],[13,"NoArray","","",100,null],[4,"IsComparison","","Whether the sampler compares the depth value upon sampling.",null,null],[13,"Compare","","",101,null],[13,"NoCompare","","",101,null],[4,"IsMultiSample","","Whether the sampler samples a multisample texture.",null,null],[13,"MultiSample","","",102,null],[13,"NoMultiSample","","",102,null],[4,"IsRect","","Whether the sampler samples a rectangle texture.",null,null],[13,"Rect","","",103,null],[13,"NoRect","","",103,null],[4,"MatrixFormat","","Whether the matrix is column or row major.",null,null],[13,"ColumnMajor","","",104,null],[13,"RowMajor","","",104,null],[4,"TextureType","","A type of the texture variable.\nThis has to match the actual data we bind to the shader.",null,null],[13,"Buffer","","Sample from a buffer.",105,null],[13,"D1","","Sample from a 1D texture",105,null],[13,"D2","","Sample from a 2D texture",105,null],[13,"D3","","Sample from a 3D texture",105,null],[13,"Cube","","Sample from a cubemap.",105,null],[3,"SamplerType","","A type of the sampler variable.",null,null],[12,"0","","",106,null],[12,"1","","",106,null],[4,"BaseType","","Base type of this shader parameter.",null,null],[13,"I32","","",107,null],[13,"U32","","",107,null],[13,"F32","","",107,null],[13,"F64","","",107,null],[13,"Bool","","",107,null],[4,"ContainerType","","Number of components this parameter represents.",null,null],[13,"Single","","Scalar value",108,null],[13,"Vector","","A vector with `Dimension` components.",108,null],[13,"Matrix","","A matrix.",108,null],[4,"Stage","","Which program stage this shader represents.",null,null],[13,"Vertex","","",109,null],[13,"Geometry","","",109,null],[13,"Pixel","","",109,null],[17,"STAGES","","A constant static array of all shader stages.",null,null],[6,"Location","","Location of a parameter in the program.",null,null],[4,"UniformValue","","A value that can be uploaded to the device as a uniform.",null,null],[13,"I32","","",61,null],[13,"F32","","",61,null],[13,"I32Vector2","","",61,null],[13,"I32Vector3","","",61,null],[13,"I32Vector4","","",61,null],[13,"F32Vector2","","",61,null],[13,"F32Vector3","","",61,null],[13,"F32Vector4","","",61,null],[13,"F32Matrix2","","",61,null],[13,"F32Matrix3","","",61,null],[13,"F32Matrix4","","",61,null],[6,"ConstFormat","","Format of a shader constant.",null,null],[8,"BaseTyped","","A trait that statically links simple data types to\nbase types of the shader constants.",null,null],[10,"get_base_type","","",110,{"inputs":[],"output":{"name":"basetype"}}],[8,"Formatted","","A trait that statically links simple data types to\nconstant formats.",null,null],[10,"get_format","","Get the associated constant format.",99,null],[3,"Usage","","Parameter usage flags.",null,null],[17,"VERTEX","","Used by the vertex shader",null,null],[17,"GEOMETRY","","Used by the geometry shader",null,null],[17,"PIXEL","","Used by the pixel shader",null,null],[3,"AttributeVar","","Vertex information that a shader takes as input.",null,null],[12,"name","","Name of this attribute.",111,null],[12,"slot","","Slot of the vertex attribute.",111,null],[12,"base_type","","Type that this attribute is composed of.",111,null],[12,"container","","&quot;Scalarness&quot; of this attribute.",111,null],[3,"ConstVar","","A constant in the shader - a bit of data that doesn&#39;t vary",null,null],[12,"name","","Name of this constant.",112,null],[12,"location","","Location of this constant in the program.",112,null],[12,"count","","Number of elements this constant represents.",112,null],[12,"base_type","","Type that this constant is composed of",112,null],[12,"container","","&quot;Scalarness&quot; of this constant.",112,null],[3,"ConstantBufferVar","","A constant buffer.",null,null],[12,"name","","Name of this constant buffer.",113,null],[12,"slot","","Slot of the constant buffer.",113,null],[12,"size","","Size (in bytes) of this buffer&#39;s data.",113,null],[12,"usage","","What program stage this buffer is used in.",113,null],[3,"TextureVar","","Texture shader parameter.",null,null],[12,"name","","Name of this texture variable.",114,null],[12,"slot","","Slot of this texture variable.",114,null],[12,"base_type","","Base type for the texture.",114,null],[12,"ty","","Type of this texture.",114,null],[12,"usage","","What program stage this texture is used in.",114,null],[3,"UnorderedVar","","Unordered access shader parameter.",null,null],[12,"name","","Name of this unordered variable.",115,null],[12,"slot","","Slot of this unordered variable.",115,null],[12,"usage","","What program stage this UAV is used in.",115,null],[3,"SamplerVar","","Sampler shader parameter.",null,null],[12,"name","","Name of this sampler variable.",116,null],[12,"slot","","Slot of this sampler variable.",116,null],[12,"ty","","Type of this sampler.",116,null],[12,"usage","","What program stage this texture is used in.",116,null],[3,"OutputVar","","Target output variable.",null,null],[12,"name","","Name of this output variable.",117,null],[12,"slot","","Output color target index.",117,null],[12,"base_type","","Type of the output component.",117,null],[12,"container","","&quot;Scalarness&quot; of this output.",117,null],[3,"ProgramInfo","","Metadata about a program.",null,null],[12,"vertex_attributes","","Attributes in the program",60,null],[12,"globals","","Global constants in the program",60,null],[12,"constant_buffers","","Constant buffers in the program",60,null],[12,"textures","","Textures in the program",60,null],[12,"unordereds","","Unordered access resources in the program",60,null],[12,"samplers","","Samplers in the program",60,null],[12,"outputs","","Output targets in the program",60,null],[12,"output_depth","","A flag indicating that the pixel shader manually assigns the depth.",60,null],[12,"knows_outputs","","A hacky flag to make sure the clients know we are\nunable to actually get the output variable info",60,null],[4,"CompatibilityError","","Error type for trying to store a UniformValue in a ConstVar.",null,null],[13,"ErrorArraySize","","Array sizes differ between the value and the var (trying to upload a vec2 as a vec4, etc)",118,null],[13,"ErrorBaseType","","Base types differ between the value and the var (trying to upload a f32 as a u16, etc)",118,null],[13,"ErrorContainer","","Container-ness differs between the value and the var (trying to upload a scalar as a vec4,\netc)",118,null],[4,"CreateShaderError","","An error type for creating shaders.",null,null],[13,"ModelNotSupported","","The device does not support the requested shader model.",119,null],[13,"StageNotSupported","","The device does not support the shader stage.",119,null],[13,"CompilationFailed","","The shader failed to compile.",119,null],[6,"CreateProgramError","","An error type for creating programs.",null,null],[4,"ProgramError","gfx::shade","Program linking error",null,null],[13,"Vertex","","Unable to compile the vertex shader",120,null],[13,"Pixel","","Unable to compile the pixel shader",120,null],[13,"Link","","Unable to link",120,null],[8,"ToUniform","","",null,null],[10,"convert","","",121,null],[11,"clone","","",120,null],[11,"eq","","",120,null],[11,"ne","","",120,null],[11,"fmt","","",120,null],[11,"fmt","","",120,null],[11,"description","","",120,null],[11,"cause","","",120,null],[0,"macros","gfx","Convenience macros\nVarious helper macros.",null,null],[8,"IntoIndexBuffer","","A helper trait to create `IndexBuffers` from different kinds of data.",null,null],[10,"into_index_buffer","","Turns self into an `IndexBuffer`.",122,null],[14,"gfx_pipeline_inner","","",null,null],[14,"gfx_pipeline_base","","",null,null],[14,"gfx_pipeline","","",null,null],[14,"gfx_impl_struct","","",null,null],[14,"gfx_vertex_struct","","",null,null],[14,"gfx_constant_struct","","",null,null],[14,"gfx_format","","",null,null],[14,"gfx_defines","","Defines vertex, constant and pipeline formats in one block",null,null],[11,"bitxor","gfx::state","Returns the left flags, but with all the right flags toggled.",123,null],[11,"clone","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",124,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[11,"clone","","",13,null],[11,"clone","","",14,null],[11,"clone","","",123,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"bitor","","Returns the union of the two sets of flags.",123,null],[11,"fmt","","",14,null],[11,"fmt","","",0,null],[11,"fmt","","",1,null],[11,"fmt","","",2,null],[11,"fmt","","",3,null],[11,"fmt","","",124,null],[11,"fmt","","",4,null],[11,"fmt","","",5,null],[11,"fmt","","",6,null],[11,"fmt","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",9,null],[11,"fmt","","",10,null],[11,"fmt","","",11,null],[11,"fmt","","",12,null],[11,"fmt","","",13,null],[11,"fmt","","",123,null],[11,"fmt","","",15,null],[11,"fmt","","",16,null],[11,"bitxor_assign","","Toggles the set of flags.",123,null],[11,"partial_cmp","","",0,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"partial_cmp","","",2,null],[11,"partial_cmp","","",3,null],[11,"lt","","",3,null],[11,"le","","",3,null],[11,"gt","","",3,null],[11,"ge","","",3,null],[11,"partial_cmp","","",124,null],[11,"partial_cmp","","",4,null],[11,"lt","","",4,null],[11,"le","","",4,null],[11,"gt","","",4,null],[11,"ge","","",4,null],[11,"partial_cmp","","",5,null],[11,"partial_cmp","","",6,null],[11,"partial_cmp","","",7,null],[11,"lt","","",7,null],[11,"le","","",7,null],[11,"gt","","",7,null],[11,"ge","","",7,null],[11,"partial_cmp","","",8,null],[11,"lt","","",8,null],[11,"le","","",8,null],[11,"gt","","",8,null],[11,"ge","","",8,null],[11,"partial_cmp","","",9,null],[11,"lt","","",9,null],[11,"le","","",9,null],[11,"gt","","",9,null],[11,"ge","","",9,null],[11,"partial_cmp","","",10,null],[11,"partial_cmp","","",11,null],[11,"partial_cmp","","",12,null],[11,"lt","","",12,null],[11,"le","","",12,null],[11,"gt","","",12,null],[11,"ge","","",12,null],[11,"partial_cmp","","",13,null],[11,"lt","","",13,null],[11,"le","","",13,null],[11,"gt","","",13,null],[11,"ge","","",13,null],[11,"partial_cmp","","",14,null],[11,"lt","","",14,null],[11,"le","","",14,null],[11,"gt","","",14,null],[11,"ge","","",14,null],[11,"partial_cmp","","",123,null],[11,"lt","","",123,null],[11,"le","","",123,null],[11,"gt","","",123,null],[11,"ge","","",123,null],[11,"partial_cmp","","",15,null],[11,"lt","","",15,null],[11,"le","","",15,null],[11,"gt","","",15,null],[11,"ge","","",15,null],[11,"partial_cmp","","",16,null],[11,"lt","","",16,null],[11,"le","","",16,null],[11,"gt","","",16,null],[11,"ge","","",16,null],[11,"cmp","","",0,null],[11,"cmp","","",2,null],[11,"cmp","","",124,null],[11,"cmp","","",5,null],[11,"cmp","","",6,null],[11,"cmp","","",7,null],[11,"cmp","","",8,null],[11,"cmp","","",9,null],[11,"cmp","","",10,null],[11,"cmp","","",11,null],[11,"cmp","","",12,null],[11,"cmp","","",13,null],[11,"cmp","","",123,null],[11,"bitor_assign","","Adds the set of flags.",123,null],[11,"not","","Returns the complement of this set of flags.",123,null],[11,"eq","","",0,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"eq","","",2,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"eq","","",124,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",5,null],[11,"eq","","",6,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"eq","","",10,null],[11,"eq","","",11,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"eq","","",123,null],[11,"ne","","",123,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",16,null],[11,"ne","","",16,null],[11,"hash","","",0,null],[11,"hash","","",1,null],[11,"hash","","",2,null],[11,"hash","","",3,null],[11,"hash","","",124,null],[11,"hash","","",4,null],[11,"hash","","",5,null],[11,"hash","","",6,null],[11,"hash","","",7,null],[11,"hash","","",8,null],[11,"hash","","",9,null],[11,"hash","","",10,null],[11,"hash","","",11,null],[11,"hash","","",12,null],[11,"hash","","",13,null],[11,"hash","","",14,null],[11,"hash","","",123,null],[11,"hash","","",15,null],[11,"bitand_assign","","Disables all flags disabled in the set.",123,null],[11,"default","","",7,{"inputs":[],"output":{"name":"stencilside"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"stencil"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"depth"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"blendchannel"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"blend"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"color"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"refvalues"}}],[11,"from_iter","","",123,{"inputs":[{"name":"t"}],"output":{"name":"colormask"}}],[11,"sub_assign","","Disables all flags enabled in the set.",123,null],[11,"bitand","","Returns the intersection between the two sets of flags.",123,null],[11,"sub","","Returns the set difference of the two sets of flags.",123,null],[11,"bitxor","gfx","Returns the left flags, but with all the right flags toggled.",125,null],[11,"bitxor","gfx::shade::core","Returns the left flags, but with all the right flags toggled.",126,null],[11,"bitxor","gfx::tex","Returns the left flags, but with all the right flags toggled.",127,null],[11,"make_buffer","gfx::handle","",128,null],[11,"make_shader","","",128,null],[11,"make_program","","",128,null],[11,"make_pso","","",128,null],[11,"make_texture","","",128,null],[11,"make_buffer_srv","","",128,null],[11,"make_texture_srv","","",128,null],[11,"make_buffer_uav","","",128,null],[11,"make_texture_uav","","",128,null],[11,"make_rtv","","",128,null],[11,"make_dsv","","",128,null],[11,"make_sampler","","",128,null],[11,"make_fence","","",128,null],[11,"clean_with","","",128,null],[11,"from","gfx","",58,{"inputs":[{"name":"error"}],"output":{"name":"combinederror"}}],[11,"from","","",58,{"inputs":[{"name":"resourceviewerror"}],"output":{"name":"combinederror"}}],[11,"from","","",58,{"inputs":[{"name":"targetviewerror"}],"output":{"name":"combinederror"}}],[11,"from","gfx::shade::core","",126,{"inputs":[{"name":"stage"}],"output":{"name":"usage"}}],[11,"from","gfx::tex","",36,{"inputs":[{"name":"u8"}],"output":{"name":"aamode"}}],[11,"from","","",129,{"inputs":[{"name":"f32"}],"output":{"name":"lod"}}],[11,"from","","",42,null],[11,"from","","",47,{"inputs":[{"name":"renderdesc"}],"output":{"name":"depthstencildesc"}}],[11,"from","gfx::format","",29,{"inputs":[{"name":"u8"}],"output":{"name":"u8norm"}}],[11,"from","","",30,{"inputs":[{"name":"i8"}],"output":{"name":"i8norm"}}],[11,"from","","",31,{"inputs":[{"name":"u16"}],"output":{"name":"u16norm"}}],[11,"from","","",32,{"inputs":[{"name":"i16"}],"output":{"name":"i16norm"}}],[11,"from","","",33,{"inputs":[{"name":"u16"}],"output":{"name":"f16"}}],[11,"new","gfx::handle","",69,{"inputs":[{"name":"rawbuffer"}],"output":{"name":"buffer"}}],[11,"raw","","",69,null],[11,"new","","",130,{"inputs":[{"name":"rawtexture"}],"output":{"name":"texture"}}],[11,"raw","","",130,null],[11,"new","","",131,{"inputs":[{"name":"rawshaderresourceview"}],"output":{"name":"shaderresourceview"}}],[11,"raw","","",131,null],[11,"new","","",132,{"inputs":[{"name":"rawunorderedaccessview"}],"output":{"name":"unorderedaccessview"}}],[11,"raw","","",132,null],[11,"new","","",133,{"inputs":[{"name":"rawrendertargetview"}],"output":{"name":"rendertargetview"}}],[11,"raw","","",133,null],[11,"new","","",134,{"inputs":[{"name":"rawdepthstencilview"}],"output":{"name":"depthstencilview"}}],[11,"raw","","",134,null],[11,"cmp","gfx","",51,null],[11,"cmp","","",125,null],[11,"cmp","","",50,null],[11,"cmp","gfx::format","",21,null],[11,"cmp","","",135,null],[11,"cmp","","",136,null],[11,"cmp","","",137,null],[11,"cmp","","",138,null],[11,"cmp","","",139,null],[11,"cmp","","",140,null],[11,"cmp","","",22,null],[11,"cmp","","",141,null],[11,"cmp","","",142,null],[11,"cmp","","",143,null],[11,"cmp","","",144,null],[11,"cmp","","",145,null],[11,"cmp","","",146,null],[11,"cmp","","",147,null],[11,"cmp","","",148,null],[11,"cmp","","",149,null],[11,"cmp","","",150,null],[11,"cmp","","",151,null],[11,"cmp","","",152,null],[11,"cmp","","",153,null],[11,"cmp","","",154,null],[11,"cmp","","",155,null],[11,"cmp","","",156,null],[11,"cmp","","",157,null],[11,"cmp","","",158,null],[11,"cmp","","",159,null],[11,"cmp","","",160,null],[11,"cmp","","",161,null],[11,"cmp","","",23,null],[11,"cmp","","",24,null],[11,"cmp","","",25,null],[11,"cmp","","",29,null],[11,"cmp","","",30,null],[11,"cmp","","",31,null],[11,"cmp","","",32,null],[11,"cmp","","",33,null],[11,"cmp","gfx::shade::core","",126,null],[11,"cmp","gfx::tex","",36,null],[11,"cmp","","",37,null],[11,"cmp","","",38,null],[11,"cmp","","",39,null],[11,"cmp","","",40,null],[11,"cmp","","",41,null],[11,"cmp","","",44,null],[11,"cmp","","",45,null],[11,"cmp","","",46,null],[11,"cmp","","",127,null],[11,"cmp","","",47,null],[11,"bitor_assign","gfx","Adds the set of flags.",125,null],[11,"bitor_assign","gfx::shade::core","Adds the set of flags.",126,null],[11,"bitor_assign","gfx::tex","Adds the set of flags.",127,null],[11,"not","gfx","Returns the complement of this set of flags.",125,null],[11,"not","gfx::shade::core","Returns the complement of this set of flags.",126,null],[11,"not","gfx::tex","Returns the complement of this set of flags.",127,null],[11,"eq","gfx","",51,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",52,null],[11,"eq","","",50,null],[11,"ne","","",50,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",54,null],[11,"ne","","",54,null],[11,"eq","","",55,null],[11,"eq","","",56,null],[11,"ne","","",56,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","gfx::format","",21,null],[11,"eq","","",135,null],[11,"eq","","",136,null],[11,"eq","","",137,null],[11,"eq","","",138,null],[11,"eq","","",139,null],[11,"eq","","",140,null],[11,"eq","","",22,null],[11,"eq","","",141,null],[11,"eq","","",142,null],[11,"eq","","",143,null],[11,"eq","","",144,null],[11,"eq","","",145,null],[11,"eq","","",146,null],[11,"eq","","",147,null],[11,"eq","","",148,null],[11,"eq","","",149,null],[11,"eq","","",150,null],[11,"eq","","",151,null],[11,"eq","","",152,null],[11,"eq","","",153,null],[11,"eq","","",154,null],[11,"eq","","",155,null],[11,"eq","","",156,null],[11,"eq","","",157,null],[11,"eq","","",158,null],[11,"eq","","",159,null],[11,"eq","","",160,null],[11,"eq","","",161,null],[11,"eq","","",23,null],[11,"eq","","",24,null],[11,"ne","","",24,null],[11,"eq","","",25,null],[11,"ne","","",25,null],[11,"eq","","",29,null],[11,"ne","","",29,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",31,null],[11,"ne","","",31,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"eq","gfx::handle","",162,null],[11,"ne","","",162,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"eq","","",163,null],[11,"ne","","",163,null],[11,"eq","","",164,null],[11,"ne","","",164,null],[11,"eq","","",165,null],[11,"ne","","",165,null],[11,"eq","","",166,null],[11,"ne","","",166,null],[11,"eq","","",130,null],[11,"ne","","",130,null],[11,"eq","","",167,null],[11,"ne","","",167,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",168,null],[11,"ne","","",168,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",169,null],[11,"ne","","",169,null],[11,"eq","","",170,null],[11,"ne","","",170,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",171,null],[11,"ne","","",171,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","gfx::pso::buffer","",73,null],[11,"ne","","",73,null],[11,"eq","gfx::pso","",70,null],[11,"ne","","",70,null],[11,"eq","gfx::shade::core","",100,null],[11,"eq","","",101,null],[11,"eq","","",102,null],[11,"eq","","",103,null],[11,"eq","","",104,null],[11,"eq","","",105,null],[11,"ne","","",105,null],[11,"eq","","",106,null],[11,"ne","","",106,null],[11,"eq","","",107,null],[11,"eq","","",108,null],[11,"ne","","",108,null],[11,"eq","","",109,null],[11,"eq","","",126,null],[11,"ne","","",126,null],[11,"eq","","",111,null],[11,"ne","","",111,null],[11,"eq","","",112,null],[11,"ne","","",112,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",114,null],[11,"ne","","",114,null],[11,"eq","","",115,null],[11,"ne","","",115,null],[11,"eq","","",116,null],[11,"ne","","",116,null],[11,"eq","","",117,null],[11,"ne","","",117,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"eq","","",119,null],[11,"ne","","",119,null],[11,"eq","gfx::tex","",35,null],[11,"ne","","",35,null],[11,"eq","","",36,null],[11,"ne","","",36,null],[11,"eq","","",37,null],[11,"ne","","",37,null],[11,"eq","","",38,null],[11,"eq","","",39,null],[11,"ne","","",39,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",41,null],[11,"eq","","",129,null],[11,"ne","","",129,null],[11,"eq","","",42,null],[11,"ne","","",42,null],[11,"eq","","",43,null],[11,"ne","","",43,null],[11,"eq","","",44,null],[11,"ne","","",44,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",127,null],[11,"ne","","",127,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","gfx","",19,null],[11,"hash","","",51,null],[11,"hash","","",125,null],[11,"hash","","",52,null],[11,"hash","","",50,null],[11,"hash","","",53,null],[11,"hash","","",54,null],[11,"hash","gfx::format","",21,null],[11,"hash","","",135,null],[11,"hash","","",136,null],[11,"hash","","",137,null],[11,"hash","","",138,null],[11,"hash","","",139,null],[11,"hash","","",140,null],[11,"hash","","",22,null],[11,"hash","","",141,null],[11,"hash","","",142,null],[11,"hash","","",143,null],[11,"hash","","",144,null],[11,"hash","","",145,null],[11,"hash","","",146,null],[11,"hash","","",147,null],[11,"hash","","",148,null],[11,"hash","","",149,null],[11,"hash","","",150,null],[11,"hash","","",151,null],[11,"hash","","",152,null],[11,"hash","","",153,null],[11,"hash","","",154,null],[11,"hash","","",155,null],[11,"hash","","",156,null],[11,"hash","","",157,null],[11,"hash","","",158,null],[11,"hash","","",159,null],[11,"hash","","",160,null],[11,"hash","","",161,null],[11,"hash","","",23,null],[11,"hash","","",24,null],[11,"hash","","",25,null],[11,"hash","","",29,null],[11,"hash","","",30,null],[11,"hash","","",31,null],[11,"hash","","",32,null],[11,"hash","","",33,null],[11,"hash","gfx::handle","",162,null],[11,"hash","","",69,null],[11,"hash","","",163,null],[11,"hash","","",166,null],[11,"hash","","",130,null],[11,"hash","","",167,null],[11,"hash","","",131,null],[11,"hash","","",168,null],[11,"hash","","",132,null],[11,"hash","","",169,null],[11,"hash","","",170,null],[11,"hash","","",133,null],[11,"hash","","",134,null],[11,"hash","gfx::pso::buffer","",73,null],[11,"hash","gfx::pso","",70,null],[11,"hash","gfx::shade::core","",109,null],[11,"hash","","",126,null],[11,"hash","gfx::tex","",36,null],[11,"hash","","",37,null],[11,"hash","","",38,null],[11,"hash","","",39,null],[11,"hash","","",40,null],[11,"hash","","",41,null],[11,"hash","","",129,null],[11,"hash","","",42,null],[11,"hash","","",43,null],[11,"hash","","",44,null],[11,"hash","","",45,null],[11,"hash","","",46,null],[11,"hash","","",127,null],[11,"hash","","",47,null],[11,"hash","gfx","",19,null],[11,"bitand_assign","","Disables all flags disabled in the set.",125,null],[11,"bitand_assign","gfx::shade::core","Disables all flags disabled in the set.",126,null],[11,"bitand_assign","gfx::tex","Disables all flags disabled in the set.",127,null],[11,"from_iter","gfx","",125,{"inputs":[{"name":"t"}],"output":{"name":"bind"}}],[11,"from_iter","gfx::shade::core","",126,{"inputs":[{"name":"t"}],"output":{"name":"usage"}}],[11,"from_iter","gfx::tex","",127,{"inputs":[{"name":"t"}],"output":{"name":"depthstencilflags"}}],[11,"get_channel_type","gfx::format","",135,{"inputs":[],"output":{"name":"channeltype"}}],[11,"get_channel_type","","",136,{"inputs":[],"output":{"name":"channeltype"}}],[11,"get_channel_type","","",137,{"inputs":[],"output":{"name":"channeltype"}}],[11,"get_channel_type","","",138,{"inputs":[],"output":{"name":"channeltype"}}],[11,"get_channel_type","","",139,{"inputs":[],"output":{"name":"channeltype"}}],[11,"get_channel_type","","",140,{"inputs":[],"output":{"name":"channeltype"}}],[11,"sub_assign","gfx","Disables all flags enabled in the set.",125,null],[11,"sub_assign","gfx::shade::core","Disables all flags enabled in the set.",126,null],[11,"sub_assign","gfx::tex","Disables all flags enabled in the set.",127,null],[11,"sub","gfx","Returns the set difference of the two sets of flags.",125,null],[11,"sub","gfx::shade::core","Returns the set difference of the two sets of flags.",126,null],[11,"sub","gfx::tex","Returns the set difference of the two sets of flags.",127,null],[11,"description","gfx","",54,null],[11,"description","","",55,null],[11,"description","","",56,null],[11,"description","","",57,null],[11,"description","","",58,null],[11,"cause","","",58,null],[11,"description","gfx::shade::core","",118,null],[11,"description","","",119,null],[11,"description","gfx::tex","",35,null],[11,"clone","gfx","",51,null],[11,"clone","","",125,null],[11,"clone","","",52,null],[11,"clone","","",50,null],[11,"clone","","",53,null],[11,"clone","","",54,null],[11,"clone","","",55,null],[11,"clone","","",56,null],[11,"clone","","",57,null],[11,"clone","","",58,null],[11,"clone","gfx::format","",21,null],[11,"clone","","",135,null],[11,"clone","","",136,null],[11,"clone","","",137,null],[11,"clone","","",138,null],[11,"clone","","",139,null],[11,"clone","","",140,null],[11,"clone","","",22,null],[11,"clone","","",141,null],[11,"clone","","",142,null],[11,"clone","","",143,null],[11,"clone","","",144,null],[11,"clone","","",145,null],[11,"clone","","",146,null],[11,"clone","","",147,null],[11,"clone","","",148,null],[11,"clone","","",149,null],[11,"clone","","",150,null],[11,"clone","","",151,null],[11,"clone","","",152,null],[11,"clone","","",153,null],[11,"clone","","",154,null],[11,"clone","","",155,null],[11,"clone","","",156,null],[11,"clone","","",157,null],[11,"clone","","",158,null],[11,"clone","","",159,null],[11,"clone","","",160,null],[11,"clone","","",161,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"clone","","",33,null],[11,"clone","gfx::handle","",162,null],[11,"clone","","",69,null],[11,"clone","","",163,null],[11,"clone","","",164,null],[11,"clone","","",165,null],[11,"clone","","",166,null],[11,"clone","","",130,null],[11,"clone","","",167,null],[11,"clone","","",131,null],[11,"clone","","",168,null],[11,"clone","","",132,null],[11,"clone","","",169,null],[11,"clone","","",170,null],[11,"clone","","",133,null],[11,"clone","","",134,null],[11,"clone","","",171,null],[11,"clone","","",172,null],[11,"clone","gfx::pso::buffer","",73,null],[11,"clone","gfx::pso","",70,null],[11,"clone","gfx::shade::core","",100,null],[11,"clone","","",101,null],[11,"clone","","",102,null],[11,"clone","","",103,null],[11,"clone","","",104,null],[11,"clone","","",105,null],[11,"clone","","",106,null],[11,"clone","","",107,null],[11,"clone","","",108,null],[11,"clone","","",109,null],[11,"clone","","",61,null],[11,"clone","","",126,null],[11,"clone","","",111,null],[11,"clone","","",112,null],[11,"clone","","",113,null],[11,"clone","","",114,null],[11,"clone","","",115,null],[11,"clone","","",116,null],[11,"clone","","",117,null],[11,"clone","","",60,null],[11,"clone","","",118,null],[11,"clone","","",119,null],[11,"clone","gfx::tex","",35,null],[11,"clone","","",36,null],[11,"clone","","",37,null],[11,"clone","","",38,null],[11,"clone","","",39,null],[11,"clone","","",40,null],[11,"clone","","",41,null],[11,"clone","","",129,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"clone","","",44,null],[11,"clone","","",45,null],[11,"clone","","",46,null],[11,"clone","","",127,null],[11,"clone","","",47,null],[11,"clone","gfx","",19,null],[11,"bitor","","Returns the union of the two sets of flags.",125,null],[11,"bitor","gfx::shade::core","Returns the union of the two sets of flags.",126,null],[11,"bitor","gfx::tex","Returns the union of the two sets of flags.",127,null],[11,"fmt","gfx::shade::core","",61,null],[11,"fmt","gfx","",51,null],[11,"fmt","","",125,null],[11,"fmt","","",52,null],[11,"fmt","","",50,null],[11,"fmt","","",53,null],[11,"fmt","","",54,null],[11,"fmt","","",55,null],[11,"fmt","","",56,null],[11,"fmt","","",57,null],[11,"fmt","","",58,null],[11,"fmt","gfx::format","",21,null],[11,"fmt","","",135,null],[11,"fmt","","",136,null],[11,"fmt","","",137,null],[11,"fmt","","",138,null],[11,"fmt","","",139,null],[11,"fmt","","",140,null],[11,"fmt","","",22,null],[11,"fmt","","",141,null],[11,"fmt","","",142,null],[11,"fmt","","",143,null],[11,"fmt","","",144,null],[11,"fmt","","",145,null],[11,"fmt","","",146,null],[11,"fmt","","",147,null],[11,"fmt","","",148,null],[11,"fmt","","",149,null],[11,"fmt","","",150,null],[11,"fmt","","",151,null],[11,"fmt","","",152,null],[11,"fmt","","",153,null],[11,"fmt","","",154,null],[11,"fmt","","",155,null],[11,"fmt","","",156,null],[11,"fmt","","",157,null],[11,"fmt","","",158,null],[11,"fmt","","",159,null],[11,"fmt","","",160,null],[11,"fmt","","",161,null],[11,"fmt","","",23,null],[11,"fmt","","",24,null],[11,"fmt","","",25,null],[11,"fmt","","",29,null],[11,"fmt","","",30,null],[11,"fmt","","",31,null],[11,"fmt","","",32,null],[11,"fmt","","",33,null],[11,"fmt","gfx::handle","",162,null],[11,"fmt","","",69,null],[11,"fmt","","",163,null],[11,"fmt","","",164,null],[11,"fmt","","",165,null],[11,"fmt","","",166,null],[11,"fmt","","",130,null],[11,"fmt","","",167,null],[11,"fmt","","",131,null],[11,"fmt","","",168,null],[11,"fmt","","",132,null],[11,"fmt","","",169,null],[11,"fmt","","",170,null],[11,"fmt","","",133,null],[11,"fmt","","",134,null],[11,"fmt","","",171,null],[11,"fmt","","",172,null],[11,"fmt","gfx::pso::buffer","",73,null],[11,"fmt","gfx::pso","",70,null],[11,"fmt","gfx::shade::core","",100,null],[11,"fmt","","",101,null],[11,"fmt","","",102,null],[11,"fmt","","",103,null],[11,"fmt","","",104,null],[11,"fmt","","",105,null],[11,"fmt","","",106,null],[11,"fmt","","",107,null],[11,"fmt","","",108,null],[11,"fmt","","",109,null],[11,"fmt","","",126,null],[11,"fmt","","",111,null],[11,"fmt","","",112,null],[11,"fmt","","",113,null],[11,"fmt","","",114,null],[11,"fmt","","",115,null],[11,"fmt","","",116,null],[11,"fmt","","",117,null],[11,"fmt","","",60,null],[11,"fmt","","",118,null],[11,"fmt","","",119,null],[11,"fmt","gfx::tex","",35,null],[11,"fmt","","",36,null],[11,"fmt","","",37,null],[11,"fmt","","",38,null],[11,"fmt","","",39,null],[11,"fmt","","",40,null],[11,"fmt","","",41,null],[11,"fmt","","",129,null],[11,"fmt","","",42,null],[11,"fmt","","",43,null],[11,"fmt","","",44,null],[11,"fmt","","",45,null],[11,"fmt","","",46,null],[11,"fmt","","",127,null],[11,"fmt","","",47,null],[11,"fmt","gfx","",19,null],[11,"extend","","",125,null],[11,"extend","gfx::shade::core","",126,null],[11,"extend","gfx::tex","",127,null],[11,"bitxor_assign","gfx","Toggles the set of flags.",125,null],[11,"bitxor_assign","gfx::shade::core","Toggles the set of flags.",126,null],[11,"bitxor_assign","gfx::tex","Toggles the set of flags.",127,null],[11,"partial_cmp","gfx","",51,null],[11,"partial_cmp","","",125,null],[11,"lt","","",125,null],[11,"le","","",125,null],[11,"gt","","",125,null],[11,"ge","","",125,null],[11,"partial_cmp","","",50,null],[11,"lt","","",50,null],[11,"le","","",50,null],[11,"gt","","",50,null],[11,"ge","","",50,null],[11,"partial_cmp","gfx::format","",21,null],[11,"partial_cmp","","",135,null],[11,"partial_cmp","","",136,null],[11,"partial_cmp","","",137,null],[11,"partial_cmp","","",138,null],[11,"partial_cmp","","",139,null],[11,"partial_cmp","","",140,null],[11,"partial_cmp","","",22,null],[11,"partial_cmp","","",141,null],[11,"partial_cmp","","",142,null],[11,"partial_cmp","","",143,null],[11,"partial_cmp","","",144,null],[11,"partial_cmp","","",145,null],[11,"partial_cmp","","",146,null],[11,"partial_cmp","","",147,null],[11,"partial_cmp","","",148,null],[11,"partial_cmp","","",149,null],[11,"partial_cmp","","",150,null],[11,"partial_cmp","","",151,null],[11,"partial_cmp","","",152,null],[11,"partial_cmp","","",153,null],[11,"partial_cmp","","",154,null],[11,"partial_cmp","","",155,null],[11,"partial_cmp","","",156,null],[11,"partial_cmp","","",157,null],[11,"partial_cmp","","",158,null],[11,"partial_cmp","","",159,null],[11,"partial_cmp","","",160,null],[11,"partial_cmp","","",161,null],[11,"partial_cmp","","",23,null],[11,"partial_cmp","","",24,null],[11,"lt","","",24,null],[11,"le","","",24,null],[11,"gt","","",24,null],[11,"ge","","",24,null],[11,"partial_cmp","","",25,null],[11,"lt","","",25,null],[11,"le","","",25,null],[11,"gt","","",25,null],[11,"ge","","",25,null],[11,"partial_cmp","","",29,null],[11,"lt","","",29,null],[11,"le","","",29,null],[11,"gt","","",29,null],[11,"ge","","",29,null],[11,"partial_cmp","","",30,null],[11,"lt","","",30,null],[11,"le","","",30,null],[11,"gt","","",30,null],[11,"ge","","",30,null],[11,"partial_cmp","","",31,null],[11,"lt","","",31,null],[11,"le","","",31,null],[11,"gt","","",31,null],[11,"ge","","",31,null],[11,"partial_cmp","","",32,null],[11,"lt","","",32,null],[11,"le","","",32,null],[11,"gt","","",32,null],[11,"ge","","",32,null],[11,"partial_cmp","","",33,null],[11,"lt","","",33,null],[11,"le","","",33,null],[11,"gt","","",33,null],[11,"ge","","",33,null],[11,"partial_cmp","gfx::shade::core","",126,null],[11,"lt","","",126,null],[11,"le","","",126,null],[11,"gt","","",126,null],[11,"ge","","",126,null],[11,"partial_cmp","gfx::tex","",36,null],[11,"lt","","",36,null],[11,"le","","",36,null],[11,"gt","","",36,null],[11,"ge","","",36,null],[11,"partial_cmp","","",37,null],[11,"lt","","",37,null],[11,"le","","",37,null],[11,"gt","","",37,null],[11,"ge","","",37,null],[11,"partial_cmp","","",38,null],[11,"partial_cmp","","",39,null],[11,"lt","","",39,null],[11,"le","","",39,null],[11,"gt","","",39,null],[11,"ge","","",39,null],[11,"partial_cmp","","",40,null],[11,"lt","","",40,null],[11,"le","","",40,null],[11,"gt","","",40,null],[11,"ge","","",40,null],[11,"partial_cmp","","",41,null],[11,"partial_cmp","","",129,null],[11,"lt","","",129,null],[11,"le","","",129,null],[11,"gt","","",129,null],[11,"ge","","",129,null],[11,"partial_cmp","","",42,null],[11,"lt","","",42,null],[11,"le","","",42,null],[11,"gt","","",42,null],[11,"ge","","",42,null],[11,"partial_cmp","","",43,null],[11,"lt","","",43,null],[11,"le","","",43,null],[11,"gt","","",43,null],[11,"ge","","",43,null],[11,"partial_cmp","","",44,null],[11,"lt","","",44,null],[11,"le","","",44,null],[11,"gt","","",44,null],[11,"ge","","",44,null],[11,"partial_cmp","","",45,null],[11,"lt","","",45,null],[11,"le","","",45,null],[11,"gt","","",45,null],[11,"ge","","",45,null],[11,"partial_cmp","","",46,null],[11,"lt","","",46,null],[11,"le","","",46,null],[11,"gt","","",46,null],[11,"ge","","",46,null],[11,"partial_cmp","","",127,null],[11,"lt","","",127,null],[11,"le","","",127,null],[11,"gt","","",127,null],[11,"ge","","",127,null],[11,"partial_cmp","","",47,null],[11,"lt","","",47,null],[11,"le","","",47,null],[11,"gt","","",47,null],[11,"ge","","",47,null],[11,"into","","",129,null],[11,"into","","",42,null],[11,"get_surface_type","gfx::format","",141,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",142,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",143,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",144,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",145,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",146,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",147,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",148,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",149,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",150,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",151,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",152,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",153,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",154,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",155,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",156,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",157,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",158,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",159,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",160,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"get_surface_type","","",161,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","gfx","",54,null],[11,"fmt","","",55,null],[11,"fmt","","",56,null],[11,"fmt","","",57,null],[11,"fmt","","",58,null],[11,"fmt","gfx::shade::core","",118,null],[11,"fmt","","",119,null],[11,"fmt","gfx::tex","",35,null],[11,"bitand","gfx","Returns the intersection between the two sets of flags.",125,null],[11,"bitand","gfx::shade::core","Returns the intersection between the two sets of flags.",126,null],[11,"bitand","gfx::tex","Returns the intersection between the two sets of flags.",127,null],[11,"new_fill","gfx::state","Create a new filling rasterizer.",4,{"inputs":[],"output":{"name":"rasterizer"}}],[11,"with_cull_back","","Add back face culling.",4,null],[11,"with_offset","","Add polygon offset.",4,null],[11,"new","","Create a new stencil state with a given function.",8,null],[11,"new","","Create a new blend state with a given equation.",14,{"inputs":[{"name":"equation"},{"name":"factor"},{"name":"factor"}],"output":{"name":"blend"}}],[11,"empty","","Returns an empty set of flags.",123,{"inputs":[],"output":{"name":"colormask"}}],[11,"all","","Returns the set containing all flags.",123,{"inputs":[],"output":{"name":"colormask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",123,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",123,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",123,{"inputs":[{"name":"u8"}],"output":{"name":"colormask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",123,null],[11,"is_all","","Returns `true` if all flags are currently set.",123,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",123,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",123,null],[11,"insert","","Inserts the specified flags in-place.",123,null],[11,"remove","","Removes the specified flags in-place.",123,null],[11,"toggle","","Toggles the specified flags in-place.",123,null],[11,"get_usage","gfx","Return the aggregated stage usage for the set.",20,null],[11,"reference","","",173,null],[11,"reference","","",174,null],[11,"reference","","",175,null],[11,"reference","","",176,null],[11,"reference","","",177,null],[11,"get_total_bits","gfx::format","Return the total number of bits for this format.",22,null],[11,"get_alpha_stencil_bits","","Return the number of bits allocated for alpha and stencil.",22,null],[11,"new","","Create a new swizzle where each channel is unmapped.",24,{"inputs":[],"output":{"name":"swizzle"}}],[11,"cast2","","Convert a 2-element slice.",29,null],[11,"cast3","","Convert a 3-element slice.",29,null],[11,"cast4","","Convert a 4-element slice.",29,null],[11,"cast_slice","","Convert a generic slice by transmutation.",29,null],[11,"cast2","","Convert a 2-element slice.",30,null],[11,"cast3","","Convert a 3-element slice.",30,null],[11,"cast4","","Convert a 4-element slice.",30,null],[11,"cast_slice","","Convert a generic slice by transmutation.",30,null],[11,"cast2","","Convert a 2-element slice.",31,null],[11,"cast3","","Convert a 3-element slice.",31,null],[11,"cast4","","Convert a 4-element slice.",31,null],[11,"cast_slice","","Convert a generic slice by transmutation.",31,null],[11,"cast2","","Convert a 2-element slice.",32,null],[11,"cast3","","Convert a 3-element slice.",32,null],[11,"cast4","","Convert a 4-element slice.",32,null],[11,"cast_slice","","Convert a generic slice by transmutation.",32,null],[11,"cast2","","Convert a 2-element slice.",33,null],[11,"cast3","","Convert a 3-element slice.",33,null],[11,"cast4","","Convert a 4-element slice.",33,null],[11,"cast_slice","","Convert a generic slice by transmutation.",33,null],[11,"get_info","gfx::handle","Get raw buffer info",162,null],[11,"get_info","","Get the associated information about the buffer",69,null],[11,"len","","Get the number of elements in the buffer.",69,null],[11,"get_info","","Get program info",164,null],[11,"get_info","","Get texture descriptor",166,null],[11,"get_info","","Get texture descriptor",130,null],[11,"get_dimensions","","Get target dimensions",169,null],[11,"get_dimensions","","Get target dimensions",170,null],[11,"get_dimensions","","Get target dimensions",133,null],[11,"get_dimensions","","Get target dimensions",134,null],[11,"get_info","","Get sampler info",171,null],[11,"new","","Create a new handle manager",128,{"inputs":[],"output":{"name":"manager"}}],[11,"clear","","Clear all references",128,null],[11,"extend","","Extend with all references of another handle manager",128,null],[11,"count","","Count the total number of referenced resources",128,null],[11,"ref_buffer","","Reference a buffer",128,null],[11,"ref_shader","","Reference a shader",128,null],[11,"ref_program","","Reference a program",128,null],[11,"ref_pso","","Reference a pipeline state object",128,null],[11,"ref_texture","","Reference a texture",128,null],[11,"ref_srv","","Reference a shader resource view",128,null],[11,"ref_uav","","Reference an unordered access view",128,null],[11,"ref_rtv","","Reference an RTV",128,null],[11,"ref_dsv","","Reference a DSV",128,null],[11,"ref_sampler","","Reference a sampler",128,null],[11,"ref_fence","","Reference a fence",128,null],[11,"get_num_fragments","gfx::tex","Return the number of actual data fragments stored per texel.",36,null],[11,"needs_resolve","","Return true if the surface has to be resolved before sampling.",36,null],[11,"get_dimensions","","Get texture dimensions, with 0 values where not applicable.",39,null],[11,"get_level_dimensions","","Get the dimensionality of a particular mipmap level.",39,null],[11,"get_num_levels","","Count the number of mipmap levels.",39,null],[11,"get_num_slices","","Return the number of slices for an array, or None for non-arrays.",39,null],[11,"is_cube","","Check if it&#39;s one of the cube kinds.",39,null],[11,"get_texel_count","","Get the total number of texels.",40,null],[11,"convert","","Convert into a differently typed format.",40,null],[11,"is_inside","","Check if it fits inside given dimensions.",40,null],[11,"new","","Create a new sampler description with a given filter method and wrapping mode, using no LOD\nmodifications.",43,{"inputs":[{"name":"filtermethod"},{"name":"wrapmode"}],"output":{"name":"samplerinfo"}}],[11,"to_image_info","","Get image info for a given mip.",44,null],[11,"to_raw_image_info","","Get the raw image info for a given mip and a channel type.",44,null],[11,"empty","","Returns an empty set of flags.",127,{"inputs":[],"output":{"name":"depthstencilflags"}}],[11,"all","","Returns the set containing all flags.",127,{"inputs":[],"output":{"name":"depthstencilflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",127,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",127,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",127,{"inputs":[{"name":"u8"}],"output":{"name":"depthstencilflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",127,null],[11,"is_all","","Returns `true` if all flags are currently set.",127,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",127,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",127,null],[11,"insert","","Inserts the specified flags in-place.",127,null],[11,"remove","","Removes the specified flags in-place.",127,null],[11,"toggle","","Toggles the specified flags in-place.",127,null],[11,"empty","gfx","Returns an empty set of flags.",125,{"inputs":[],"output":{"name":"bind"}}],[11,"all","","Returns the set containing all flags.",125,{"inputs":[],"output":{"name":"bind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",125,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",125,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",125,{"inputs":[{"name":"u8"}],"output":{"name":"bind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",125,null],[11,"is_all","","Returns `true` if all flags are currently set.",125,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",125,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",125,null],[11,"insert","","Inserts the specified flags in-place.",125,null],[11,"remove","","Removes the specified flags in-place.",125,null],[11,"toggle","","Toggles the specified flags in-place.",125,null],[11,"new","gfx::pso","Create a new empty PSO descriptor.",70,{"inputs":[{"name":"primitive"},{"name":"rasterizer"}],"output":{"name":"descriptor"}}],[11,"empty","gfx::shade::core","Returns an empty set of flags.",126,{"inputs":[],"output":{"name":"usage"}}],[11,"all","","Returns the set containing all flags.",126,{"inputs":[],"output":{"name":"usage"}}],[11,"bits","","Returns the raw value of the flags currently stored.",126,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",126,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",126,{"inputs":[{"name":"u8"}],"output":{"name":"usage"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",126,null],[11,"is_all","","Returns `true` if all flags are currently set.",126,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",126,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",126,null],[11,"insert","","Inserts the specified flags in-place.",126,null],[11,"remove","","Removes the specified flags in-place.",126,null],[11,"toggle","","Toggles the specified flags in-place.",126,null],[11,"can_sample","","Check if this texture can be used with a sampler.",105,null],[11,"is_compatible","","Whether a value is compatible with this variable. That is, whether the value can be stored\nin this variable.",112,null]],"paths":[[4,"FrontFace"],[3,"Offset"],[4,"CullFace"],[4,"RasterMethod"],[3,"Rasterizer"],[4,"Comparison"],[4,"StencilOp"],[3,"StencilSide"],[3,"Stencil"],[3,"Depth"],[4,"Equation"],[4,"BlendValue"],[4,"Factor"],[3,"BlendChannel"],[3,"Blend"],[3,"Color"],[3,"RefValues"],[8,"Device"],[8,"Resources"],[4,"Primitive"],[4,"ShaderSet"],[4,"ChannelType"],[4,"SurfaceType"],[4,"ChannelSource"],[3,"Swizzle"],[3,"Format"],[8,"SurfaceTyped"],[8,"ChannelTyped"],[8,"Formatted"],[3,"U8Norm"],[3,"I8Norm"],[3,"U16Norm"],[3,"I16Norm"],[3,"F16"],[8,"Producer"],[4,"Error"],[4,"AaMode"],[4,"FilterMethod"],[4,"CubeFace"],[4,"Kind"],[3,"ImageInfoCommon"],[4,"WrapMode"],[3,"PackedColor"],[3,"SamplerInfo"],[3,"Descriptor"],[3,"ResourceDesc"],[3,"RenderDesc"],[3,"DepthStencilDesc"],[8,"Factory"],[8,"Typed"],[4,"Usage"],[4,"MapAccess"],[4,"BufferRole"],[3,"BufferInfo"],[4,"BufferError"],[4,"BufferUpdateError"],[4,"ResourceViewError"],[4,"TargetViewError"],[4,"CombinedError"],[8,"CommandBuffer"],[3,"ProgramInfo"],[4,"UniformValue"],[3,"Slice"],[4,"UpdateError"],[4,"PipelineStateError"],[4,"IndexBuffer"],[8,"DeviceFence"],[8,"FactoryExt"],[3,"Encoder"],[3,"Buffer"],[3,"Descriptor"],[3,"RawDataSet"],[4,"InitError"],[3,"Element"],[8,"Structure"],[3,"VertexBufferCommon"],[3,"RawVertexBuffer"],[3,"ConstantBuffer"],[3,"RawConstantBuffer"],[3,"Global"],[3,"ShaderResource"],[3,"RawShaderResource"],[3,"UnorderedAccess"],[3,"Sampler"],[3,"TextureSampler"],[3,"RenderTarget"],[3,"BlendTarget"],[3,"RawRenderTarget"],[3,"DepthTarget"],[3,"StencilTarget"],[3,"DepthStencilTarget"],[3,"Scissor"],[3,"BlendRef"],[3,"Bundle"],[8,"PipelineInit"],[8,"PipelineData"],[8,"DataLink"],[8,"DataBind"],[3,"PipelineState"],[8,"Formatted"],[4,"IsArray"],[4,"IsComparison"],[4,"IsMultiSample"],[4,"IsRect"],[4,"MatrixFormat"],[4,"TextureType"],[3,"SamplerType"],[4,"BaseType"],[4,"ContainerType"],[4,"Stage"],[8,"BaseTyped"],[3,"AttributeVar"],[3,"ConstVar"],[3,"ConstantBufferVar"],[3,"TextureVar"],[3,"UnorderedVar"],[3,"SamplerVar"],[3,"OutputVar"],[4,"CompatibilityError"],[4,"CreateShaderError"],[4,"ProgramError"],[8,"ToUniform"],[8,"IntoIndexBuffer"],[3,"ColorMask"],[3,"MultiSample"],[3,"Bind"],[3,"Usage"],[3,"DepthStencilFlags"],[3,"Manager"],[3,"Lod"],[3,"Texture"],[3,"ShaderResourceView"],[3,"UnorderedAccessView"],[3,"RenderTargetView"],[3,"DepthStencilView"],[4,"Int"],[4,"Uint"],[4,"Inorm"],[4,"Unorm"],[4,"Float"],[4,"Srgb"],[4,"R4_G4"],[4,"R4_G4_B4_A4"],[4,"R5_G5_B5_A1"],[4,"R5_G6_B5"],[4,"R8"],[4,"R8_G8"],[4,"R8_G8_B8_A8"],[4,"R10_G10_B10_A2"],[4,"R11_G11_B10"],[4,"R16"],[4,"R16_G16"],[4,"R16_G16_B16"],[4,"R16_G16_B16_A16"],[4,"R32"],[4,"R32_G32"],[4,"R32_G32_B32"],[4,"R32_G32_B32_A32"],[4,"D16"],[4,"D24"],[4,"D24_S8"],[4,"D32"],[3,"RawBuffer"],[3,"Shader"],[3,"Program"],[3,"RawPipelineState"],[3,"RawTexture"],[3,"RawShaderResourceView"],[3,"RawUnorderedAccessView"],[3,"RawRenderTargetView"],[3,"RawDepthStencilView"],[3,"Sampler"],[3,"Fence"],[3,"VertexShader"],[3,"HullShader"],[3,"DomainShader"],[3,"GeometryShader"],[3,"PixelShader"]]};
searchIndex["gfx_core"] = {"doc":"Low-level graphics abstraction for Rust. Mostly operates on data, not types.\nDesigned for use by libraries and higher-level abstractions only.","items":[[0,"state","gfx_core","Fixed-function hardware state.",null,null],[4,"FrontFace","gfx_core::state","The front face winding order of a set of vertices.",null,null],[13,"Clockwise","","Clockwise winding order.",0,null],[13,"CounterClockwise","","Counter-clockwise winding order.",0,null],[6,"LineWidth","","Width of a line.\nCould be f32 if not for Hash deriving issues.",null,null],[6,"OffsetSlope","","Slope depth offset factor\nCould be f32 if not for Hash deriving issues.",null,null],[6,"OffsetUnits","","Number of units to offset, where\nthe unit is the minimal difference in the depth value\ndictated by the precision of the depth buffer.",null,null],[3,"Offset","","How to offset vertices in screen space, if at all.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[4,"CullFace","","Which face, if any, to cull.",null,null],[13,"Nothing","","",2,null],[13,"Front","","",2,null],[13,"Back","","",2,null],[4,"RasterMethod","","How to rasterize a primitive.",null,null],[13,"Point","","Rasterize as a point.",3,null],[13,"Line","","Rasterize as a line with the given width.",3,null],[13,"Fill","","Rasterize as a face.",3,null],[3,"MultiSample","","Multi-sampling rasterization mode",null,null],[3,"Rasterizer","","Primitive rasterization state. Note that GL allows different raster\nmethod to be used for front and back, while this abstraction does not.",null,null],[12,"front_face","","Which vertex winding is considered to be the front face for culling.",4,null],[12,"cull_face","","Which face should be culled.",4,null],[12,"method","","How to rasterize this primitive.",4,null],[12,"offset","","Any polygon offset to apply.",4,null],[12,"samples","","Multi-sampling mode.",4,null],[4,"Comparison","","A pixel-wise comparison function.",null,null],[13,"Never","","`false`",5,null],[13,"Less","","`x &lt; y`",5,null],[13,"LessEqual","","`x &lt;= y`",5,null],[13,"Equal","","`x == y`",5,null],[13,"GreaterEqual","","`x &gt;= y`",5,null],[13,"Greater","","`x &gt; y`",5,null],[13,"NotEqual","","`x != y`",5,null],[13,"Always","","`true`",5,null],[4,"StencilOp","","Stencil mask operation.",null,null],[13,"Keep","","Keep the current value in the stencil buffer (no change).",6,null],[13,"Zero","","Set the value in the stencil buffer to zero.",6,null],[13,"Replace","","Set the stencil buffer value to `value` from `StencilSide`",6,null],[13,"IncrementClamp","","Increment the stencil buffer value, clamping to its maximum value.",6,null],[13,"IncrementWrap","","Increment the stencil buffer value, wrapping around to 0 on overflow.",6,null],[13,"DecrementClamp","","Decrement the stencil buffer value, clamping to its minimum value.",6,null],[13,"DecrementWrap","","Decrement the stencil buffer value, wrapping around to the maximum value on overflow.",6,null],[13,"Invert","","Bitwise invert the current value in the stencil buffer.",6,null],[3,"StencilSide","","Complete stencil state for a given side of a face.",null,null],[12,"fun","","Comparison function to use to determine if the stencil test passes.",7,null],[12,"mask_read","","A mask that is ANDd with both the stencil buffer value and the reference value when they\nare read before doing the stencil test.",7,null],[12,"mask_write","","A mask that is ANDd with the stencil value before writing to the stencil buffer.",7,null],[12,"op_fail","","What operation to do if the stencil test fails.",7,null],[12,"op_depth_fail","","What operation to do if the stenil test passes but the depth test fails.",7,null],[12,"op_pass","","What operation to do if both the depth and stencil test pass.",7,null],[3,"Stencil","","Complete stencil state, specifying how to handle the front and back side of a face.",null,null],[12,"front","","",8,null],[12,"back","","",8,null],[3,"Depth","","Depth test state.",null,null],[12,"fun","","Comparison function to use.",9,null],[12,"write","","Specify whether to write to the depth buffer or not.",9,null],[4,"Equation","","",null,null],[13,"Add","","Adds source and destination.\nSource and destination are multiplied by blending parameters before addition.",10,null],[13,"Sub","","Subtracts destination from source.\nSource and destination are multiplied by blending parameters before subtraction.",10,null],[13,"RevSub","","Subtracts source from destination.\nSource and destination are multiplied by blending parameters before subtraction.",10,null],[13,"Min","","Component-wise minimum value of source and destination.\nBlending parameters are ignored.",10,null],[13,"Max","","Component-wise maximum value of source and destination.\nBlending parameters are ignored.",10,null],[4,"BlendValue","","",null,null],[13,"SourceColor","","",11,null],[13,"SourceAlpha","","",11,null],[13,"DestColor","","",11,null],[13,"DestAlpha","","",11,null],[13,"ConstColor","","",11,null],[13,"ConstAlpha","","",11,null],[4,"Factor","","",null,null],[13,"Zero","","",12,null],[13,"One","","",12,null],[13,"SourceAlphaSaturated","","",12,null],[13,"ZeroPlus","","",12,null],[13,"OneMinus","","",12,null],[3,"BlendChannel","","",null,null],[12,"equation","","",13,null],[12,"source","","",13,null],[12,"destination","","",13,null],[3,"Blend","","",null,null],[12,"color","","",14,null],[12,"alpha","","",14,null],[3,"ColorMask","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"BLUE","","",null,null],[17,"ALPHA","","",null,null],[17,"MASK_ALL","","",null,null],[17,"MASK_NONE","","",null,null],[3,"Color","","The state of an active color render target",null,null],[12,"mask","","Color mask to use.",15,null],[12,"blend","","Optional blending.",15,null],[3,"RefValues","","The complete set of the rasterizer reference values.\nSwitching these doesn&#39;t roll the hardware context.",null,null],[12,"stencil","","Stencil front and back values.",16,null],[12,"blend","","Constant blend color.",16,null],[0,"target","gfx_core","Render target specification.",null,null],[6,"Layer","gfx_core::target","A depth value, specifying which plane to select out of a 3D texture.",null,null],[6,"Level","","Mipmap level to select in a texture.",null,null],[6,"Depth","","A single depth value from a depth buffer.",null,null],[6,"Stencil","","A single value from a stencil stencstencil buffer.",null,null],[3,"Rect","","A screen space rectangle",null,null],[12,"x","","",17,null],[12,"y","","",17,null],[12,"w","","",17,null],[12,"h","","",17,null],[6,"ColorValue","","A color with floating-point components.",null,null],[3,"Mirror","","Mirroring flags, used for blitting",null,null],[17,"MIRROR_X","","",null,null],[17,"MIRROR_Y","","",null,null],[3,"VertexShader","gfx_core","",null,null],[3,"HullShader","","",null,null],[3,"DomainShader","","",null,null],[3,"GeometryShader","","",null,null],[3,"PixelShader","","",null,null],[3,"Capabilities","","Features that the device supports.",null,null],[12,"max_vertex_count","","",18,null],[12,"max_index_count","","",18,null],[12,"max_texture_size","","",18,null],[12,"instance_base_supported","","",18,null],[12,"instance_call_supported","","",18,null],[12,"instance_rate_supported","","",18,null],[12,"vertex_base_supported","","",18,null],[12,"srgb_color_supported","","",18,null],[12,"constant_buffer_supported","","",18,null],[12,"unordered_access_view_supported","","",18,null],[12,"separate_blending_slots_supported","","",18,null],[4,"ShaderSet","","A complete set of shaders to link a program.",null,null],[13,"Simple","","Simple program: Vs-Ps",19,null],[13,"Geometry","","Geometry shader programs: Vs-Gs-Ps",19,null],[4,"Primitive","","Describes what geometric primitives are created from vertex data.",null,null],[13,"PointList","","Each vertex represents a single point.",20,null],[13,"LineList","","Each pair of vertices represent a single line segment. For example, with `[a, b, c, d,\ne]`, `a` and `b` form a line, `c` and `d` form a line, and `e` is discarded.",20,null],[13,"LineStrip","","Every two consecutive vertices represent a single line segment. Visually forms a &quot;path&quot; of\nlines, as they are all connected. For example, with `[a, b, c]`, `a` and `b` form a line\nline, and `b` and `c` form a line.",20,null],[13,"TriangleList","","Each triplet of vertices represent a single triangle. For example, with `[a, b, c, d, e]`,\n`a`, `b`, and `c` form a triangle, `d` and `e` are discarded.",20,null],[13,"TriangleStrip","","Every three consecutive vertices represent a single triangle. For example, with `[a, b, c,\nd]`, `a`, `b`, and `c` form a triangle, and `b`, `c`, and `d` form a triangle.",20,null],[4,"IndexType","","A type of each index value in the slice&#39;s index buffer",null,null],[13,"U16","","",21,null],[13,"U32","","",21,null],[0,"draw","","Command Buffer device interface",null,null],[4,"ClearColor","gfx_core::draw","A universal clear color supporting integet formats\nas well as the standard floating-point.",null,null],[13,"Float","","Standard floating-point vec4 color",22,null],[13,"Int","","Integer vector to clear ivec4 targets.",22,null],[13,"Uint","","Unsigned int vector to clear uvec4 targets.",22,null],[6,"InstanceOption","","Optional instance parameters",null,null],[8,"CommandBuffer","","An interface of the abstract command buffer. It collects commands in an\nefficient API-specific manner, to be ready for execution on the device.",null,null],[10,"clone_empty","","Clone as an empty buffer",23,null],[10,"reset","","Reset the command buffer contents, retain the allocated storage",23,null],[10,"bind_pipeline_state","","Bind a pipeline state object",23,null],[10,"bind_vertex_buffers","","Bind a complete set of vertex buffers",23,null],[10,"bind_constant_buffers","","Bind a complete set of constant buffers",23,null],[10,"bind_global_constant","","Bind a global constant",23,null],[10,"bind_resource_views","","Bind a complete set of shader resource views",23,null],[10,"bind_unordered_views","","Bind a complete set of unordered access views",23,null],[10,"bind_samplers","","Bind a complete set of samplers",23,null],[10,"bind_pixel_targets","","Bind a complete set of pixel targets, including multiple\ncolors views and an optional depth/stencil view.",23,null],[10,"bind_index","","Bind an index buffer",23,null],[10,"set_scissor","","Set scissor rectangle",23,null],[10,"set_ref_values","","Set reference values for the blending and stencil front/back",23,null],[10,"update_buffer","","Update a vertex/index/uniform buffer",23,null],[10,"update_texture","","Update a texture",23,null],[10,"generate_mipmap","","",23,null],[10,"clear_color","","Clear color target",23,null],[10,"clear_depth_stencil","","",23,null],[10,"call_draw","","Draw a primitive",23,null],[10,"call_draw_indexed","","Draw a primitive with index buffer",23,null],[11,"clone","","",22,null],[11,"fmt","","",22,null],[11,"eq","","",22,null],[11,"ne","","",22,null],[11,"partial_cmp","","",22,null],[11,"lt","","",22,null],[11,"le","","",22,null],[11,"gt","","",22,null],[11,"ge","","",22,null],[11,"from","","",22,null],[11,"from","","",22,null],[11,"from","","",22,null],[11,"from","","",22,null],[11,"from","","",22,null],[11,"from","","",22,null],[11,"from","","",22,null],[11,"from","","",22,null],[11,"from","","",22,null],[11,"from","","",22,{"inputs":[{"name":"f32"}],"output":{"name":"clearcolor"}}],[11,"from","","",22,{"inputs":[{"name":"i32"}],"output":{"name":"clearcolor"}}],[11,"from","","",22,{"inputs":[{"name":"u32"}],"output":{"name":"clearcolor"}}],[0,"dummy","gfx_core","Dummy backend implementation to test the code for compile errors\noutside of the graphics development environment.",null,null],[3,"DummyDevice","gfx_core::dummy","Dummy device which does minimal work, just to allow testing\ngfx-rs apps for compilation.",null,null],[3,"DummyCommandBuffer","","Dummy command buffer, which ignores all the calls.",null,null],[4,"DummyResources","","Dummy resources phantom type",null,null],[11,"clone","","",24,null],[11,"fmt","","",24,null],[11,"hash","","",24,null],[11,"eq","","",24,null],[11,"new","","Create a new dummy device",25,{"inputs":[],"output":{"name":"dummydevice"}}],[11,"clone_empty","","",26,null],[11,"reset","","",26,null],[11,"bind_pipeline_state","","",26,null],[11,"bind_vertex_buffers","","",26,null],[11,"bind_constant_buffers","","",26,null],[11,"bind_global_constant","","",26,null],[11,"bind_resource_views","","",26,null],[11,"bind_unordered_views","","",26,null],[11,"bind_samplers","","",26,null],[11,"bind_pixel_targets","","",26,null],[11,"bind_index","","",26,null],[11,"set_scissor","","",26,null],[11,"set_ref_values","","",26,null],[11,"update_buffer","","",26,null],[11,"update_texture","","",26,null],[11,"generate_mipmap","","",26,null],[11,"clear_color","","",26,null],[11,"clear_depth_stencil","","",26,null],[11,"call_draw","","",26,null],[11,"call_draw_indexed","","",26,null],[11,"get_capabilities","","",25,null],[11,"pin_submitted_resources","","",25,null],[11,"submit","","",25,null],[11,"cleanup","","",25,null],[0,"factory","gfx_core","Resource factory",null,null],[3,"Bind","gfx_core::factory","Bind flags",null,null],[3,"BufferInfo","","An information block that is immutable and associated with each buffer.",null,null],[12,"role","","Role",27,null],[12,"usage","","Usage hint",27,null],[12,"bind","","Bind flags",27,null],[12,"size","","Size in bytes",27,null],[12,"stride","","Stride of a single element, in bytes. Only used for structured buffers\nthat you use via shader resource / unordered access views.",27,null],[4,"MapAccess","","Specifies the access allowed to a buffer mapping.",null,null],[13,"Readable","","Only allow reads.",28,null],[13,"Writable","","Only allow writes.",28,null],[13,"RW","","Allow full access.",28,null],[4,"BufferRole","","Role of the memory buffer. GLES doesn&#39;t allow chaning bind points for buffers.",null,null],[13,"Vertex","","Generic vertex buffer",29,null],[13,"Index","","Index buffer",29,null],[13,"Uniform","","Uniform block buffer",29,null],[4,"Usage","","A hint as to how this buffer/texture will be used.",null,null],[13,"GpuOnly","","GPU: read + write, CPU: copy. Optimal for render targets.",30,null],[13,"Const","","GPU: read, CPU: none. Optimal for resourced textures/buffers.",30,null],[13,"Dynamic","","GPU: read, CPU: write.",30,null],[13,"CpuOnly","","GPU: copy, CPU: as specified. Used as a staging buffer,\nto be copied back and forth with on-GPU targets.",30,null],[4,"BufferError","","Error creating a buffer.",null,null],[13,"UnsupportedBind","","Some of the bind flags are not supported.",31,null],[13,"Other","","Unknown other error.",31,null],[4,"BufferUpdateError","","An error happening on buffer updates.",null,null],[13,"OutOfBounds","","Trying to change the contents outside of the allocation.",32,null],[4,"ResourceViewError","","Error creating either a ShaderResourceView, or UnorderedAccessView.",null,null],[13,"NoBindFlag","","The corresponding bind flag is not present in the texture.",33,null],[13,"Channel","","Selected channel type is not supported for this texture.",33,null],[13,"Unsupported","","The backend was refused for some reason.",33,null],[4,"TargetViewError","","Error creating either a RenderTargetView, or DepthStencilView.",null,null],[13,"NoBindFlag","","The `RENDER_TARGET`/`DEPTH_STENCIL` flag is not present in the texture.",34,null],[13,"BadLevel","","Selected mip level doesn&#39;t exist.",34,null],[13,"BadLayer","","Selected array layer doesn&#39;t exist.",34,null],[13,"Channel","","Selected channel type is not supported for this texture.",34,null],[13,"Unsupported","","The backend was refused for some reason.",34,null],[4,"CombinedError","","An error from creating textures with views at the same time.",null,null],[13,"Texture","","Failed to create the raw texture.",35,null],[13,"Resource","","Failed to create SRV or UAV.",35,null],[13,"Target","","Failed to create RTV or DSV.",35,null],[5,"cast_slice","","Cast a slice from one POD type to another.",null,null],[17,"RENDER_TARGET","","The resource can be rendered into.",null,null],[17,"DEPTH_STENCIL","","The resource can serve as a depth/stencil target.",null,null],[17,"SHADER_RESOURCE","","The resource can be bound to the shader for reading.",null,null],[17,"UNORDERED_ACCESS","","The resource can be bound to the shader for writing.",null,null],[8,"Typed","","A service trait used to get the raw data out of\nstrong types. Not meant for public use.",null,null],[16,"Raw","","The raw type behind the phantom.",36,null],[10,"new","","Crete a new phantom from the raw type.",36,{"inputs":[{"name":"raw"}],"output":{"name":"self"}}],[10,"raw","","Get an internal reference to the raw type.",36,null],[8,"Factory","","A `Factory` is responsible for creating and managing resources for the context it was created\nwith. ",null,null],[16,"Mapper","","Associated mapper type",37,null],[10,"get_capabilities","","Returns the capabilities of this `Factory`. This usually depends on the graphics API being\nused.",37,null],[10,"create_buffer_raw","","",37,null],[10,"create_buffer_const_raw","","",37,null],[11,"create_buffer_const","","",37,null],[11,"create_buffer_dynamic","","",37,null],[11,"create_buffer_staging","","",37,null],[10,"create_pipeline_state_raw","","Creates a new `RawPipelineState`. To create a safely typed `PipelineState`, see the\n`FactoryExt` trait and `pso` module, both in the `gfx` crate.",37,null],[10,"create_program","","Creates a new shader `Program` for the supplied `ShaderSet`.",37,null],[10,"create_shader","","Compiles a shader source into a `Shader` object that can be used to create a shader\n`Program`.",37,null],[11,"create_shader_vertex","","Compiles a `VertexShader` from source.",37,null],[11,"create_shader_geometry","","Compiles a `GeometryShader` from source.",37,null],[11,"create_shader_pixel","","Compiles a `PixelShader` from source. This is the same as what some APIs call a fragment\nshader.",37,null],[10,"create_sampler","","",37,null],[10,"map_buffer_raw","","",37,null],[10,"unmap_buffer_raw","","",37,null],[10,"map_buffer_readable","","",37,null],[10,"map_buffer_writable","","",37,null],[10,"map_buffer_rw","","",37,null],[10,"create_texture_raw","","Create a new empty raw texture with no data. The channel type parameter is a hint,\nrequired to assist backends that have no concept of typeless formats (OpenGL).\nThe initial data, if given, has to be provided for all mip levels and slices:\nSlice0.Mip0, Slice0.Mip1, ..., Slice1.Mip0, ...",37,null],[10,"view_buffer_as_shader_resource_raw","","",37,null],[10,"view_buffer_as_unordered_access_raw","","",37,null],[10,"view_texture_as_shader_resource_raw","","",37,null],[10,"view_texture_as_unordered_access_raw","","",37,null],[10,"view_texture_as_render_target_raw","","",37,null],[10,"view_texture_as_depth_stencil_raw","","",37,null],[11,"create_texture","","",37,null],[11,"view_buffer_as_shader_resource","","",37,null],[11,"view_buffer_as_unordered_access","","",37,null],[11,"view_texture_as_shader_resource","","",37,null],[11,"view_texture_as_unordered_access","","",37,null],[11,"view_texture_as_render_target","","",37,null],[11,"view_texture_as_depth_stencil","","",37,null],[11,"view_texture_as_depth_stencil_trivial","","",37,null],[11,"create_texture_const_u8","","",37,null],[11,"create_texture_const","","",37,null],[11,"create_render_target","","",37,null],[11,"create_depth_stencil","","",37,null],[11,"create_depth_stencil_view_only","","",37,null],[11,"cmp","","",28,null],[11,"eq","","",28,null],[11,"partial_cmp","","",28,null],[11,"hash","","",28,null],[11,"clone","","",28,null],[11,"fmt","","",28,null],[11,"eq","","",38,null],[11,"ne","","",38,null],[11,"clone","","",38,null],[11,"partial_cmp","","",38,null],[11,"lt","","",38,null],[11,"le","","",38,null],[11,"gt","","",38,null],[11,"ge","","",38,null],[11,"cmp","","",38,null],[11,"hash","","",38,null],[11,"fmt","","",38,null],[11,"empty","","Returns an empty set of flags.",38,{"inputs":[],"output":{"name":"bind"}}],[11,"all","","Returns the set containing all flags.",38,{"inputs":[],"output":{"name":"bind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",38,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",38,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",38,{"inputs":[{"name":"u8"}],"output":{"name":"bind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",38,null],[11,"is_all","","Returns `true` if all flags are currently set.",38,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",38,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",38,null],[11,"insert","","Inserts the specified flags in-place.",38,null],[11,"remove","","Removes the specified flags in-place.",38,null],[11,"toggle","","Toggles the specified flags in-place.",38,null],[11,"bitor","","Returns the union of the two sets of flags.",38,null],[11,"bitor_assign","","Adds the set of flags.",38,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",38,null],[11,"bitxor_assign","","Toggles the set of flags.",38,null],[11,"bitand","","Returns the intersection between the two sets of flags.",38,null],[11,"bitand_assign","","Disables all flags disabled in the set.",38,null],[11,"sub","","Returns the set difference of the two sets of flags.",38,null],[11,"sub_assign","","Disables all flags enabled in the set.",38,null],[11,"not","","Returns the complement of this set of flags.",38,null],[11,"extend","","",38,null],[11,"from_iter","","",38,{"inputs":[{"name":"t"}],"output":{"name":"bind"}}],[11,"clone","","",29,null],[11,"fmt","","",29,null],[11,"hash","","",29,null],[11,"eq","","",29,null],[11,"cmp","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"partial_cmp","","",30,null],[11,"lt","","",30,null],[11,"le","","",30,null],[11,"gt","","",30,null],[11,"ge","","",30,null],[11,"hash","","",30,null],[11,"clone","","",30,null],[11,"fmt","","",30,null],[11,"clone","","",27,null],[11,"fmt","","",27,null],[11,"hash","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"clone","","",31,null],[11,"fmt","","",31,null],[11,"hash","","",31,null],[11,"eq","","",31,null],[11,"ne","","",31,null],[11,"fmt","","",31,null],[11,"description","","",31,null],[11,"clone","","",32,null],[11,"eq","","",32,null],[11,"fmt","","",32,null],[11,"fmt","","",32,null],[11,"description","","",32,null],[11,"clone","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"fmt","","",33,null],[11,"fmt","","",33,null],[11,"description","","",33,null],[11,"clone","","",34,null],[11,"eq","","",34,null],[11,"ne","","",34,null],[11,"fmt","","",34,null],[11,"fmt","","",34,null],[11,"description","","",34,null],[11,"clone","","",35,null],[11,"eq","","",35,null],[11,"ne","","",35,null],[11,"fmt","","",35,null],[11,"fmt","","",35,null],[11,"description","","",35,null],[11,"cause","","",35,null],[11,"from","","",35,{"inputs":[{"name":"error"}],"output":{"name":"combinederror"}}],[11,"from","","",35,{"inputs":[{"name":"resourceviewerror"}],"output":{"name":"combinederror"}}],[11,"from","","",35,{"inputs":[{"name":"targetviewerror"}],"output":{"name":"combinederror"}}],[0,"format","gfx_core","Universal format specification.\nApplicable to textures, views, and vertex buffers.",null,null],[3,"Swizzle","gfx_core::format","Channel swizzle configuration for the resource views.\nNote: It&#39;s not currently mirrored at compile-time,\nthus providing less safety and convenience.",null,null],[12,"0","","",39,null],[12,"1","","",39,null],[12,"2","","",39,null],[12,"3","","",39,null],[3,"Format","","Complete run-time surface format.",null,null],[12,"0","","",40,null],[12,"1","","",40,null],[3,"U8Norm","","",null,null],[12,"0","","",41,null],[3,"I8Norm","","",null,null],[12,"0","","",42,null],[3,"U16Norm","","",null,null],[12,"0","","",43,null],[3,"I16Norm","","",null,null],[12,"0","","",44,null],[3,"F16","","",null,null],[12,"0","","",45,null],[4,"ChannelType","","Type of a surface channel. This is how we interpret the\nstorage allocated with `SurfaceType`.",null,null],[13,"Int","","",46,null],[13,"Uint","","",46,null],[13,"Inorm","","",46,null],[13,"Unorm","","",46,null],[13,"Float","","",46,null],[13,"Srgb","","",46,null],[4,"Int","","",null,null],[4,"Uint","","",null,null],[4,"Inorm","","",null,null],[4,"Unorm","","",null,null],[4,"Float","","",null,null],[4,"Srgb","","",null,null],[4,"SurfaceType","","Type of the allocated texture surface. It is supposed to only\ncarry information about the number of bits per each channel.\nThe actual types are up to the views to decide and interpret.\nThe actual components are up to the swizzle to define.",null,null],[13,"R4_G4","","",47,null],[13,"R4_G4_B4_A4","","",47,null],[13,"R5_G5_B5_A1","","",47,null],[13,"R5_G6_B5","","",47,null],[13,"R8","","",47,null],[13,"R8_G8","","",47,null],[13,"R8_G8_B8_A8","","",47,null],[13,"R10_G10_B10_A2","","",47,null],[13,"R11_G11_B10","","",47,null],[13,"R16","","",47,null],[13,"R16_G16","","",47,null],[13,"R16_G16_B16","","",47,null],[13,"R16_G16_B16_A16","","",47,null],[13,"R32","","",47,null],[13,"R32_G32","","",47,null],[13,"R32_G32_B32","","",47,null],[13,"R32_G32_B32_A32","","",47,null],[13,"D16","","",47,null],[13,"D24","","",47,null],[13,"D24_S8","","",47,null],[13,"D32","","",47,null],[4,"R4_G4","","",null,null],[4,"R4_G4_B4_A4","","",null,null],[4,"R5_G5_B5_A1","","",null,null],[4,"R5_G6_B5","","",null,null],[4,"R8","","",null,null],[4,"R8_G8","","",null,null],[4,"R8_G8_B8_A8","","",null,null],[4,"R10_G10_B10_A2","","",null,null],[4,"R11_G11_B10","","",null,null],[4,"R16","","",null,null],[4,"R16_G16","","",null,null],[4,"R16_G16_B16","","",null,null],[4,"R16_G16_B16_A16","","",null,null],[4,"R32","","",null,null],[4,"R32_G32","","",null,null],[4,"R32_G32_B32","","",null,null],[4,"R32_G32_B32_A32","","",null,null],[4,"D16","","",null,null],[4,"D24","","",null,null],[4,"D24_S8","","",null,null],[4,"D32","","",null,null],[4,"ChannelSource","","Source channel in a swizzle configuration. Some may redirect onto\ndifferent physical channels, some may be hardcoded to 0 or 1.",null,null],[13,"Zero","","",48,null],[13,"One","","",48,null],[13,"X","","",48,null],[13,"Y","","",48,null],[13,"Z","","",48,null],[13,"W","","",48,null],[6,"Vec1","","Abstracted 1-element container for macro internal use",null,null],[6,"Vec2","","Abstracted 2-element container for macro internal use",null,null],[6,"Vec3","","Abstracted 3-element container for macro internal use",null,null],[6,"Vec4","","Abstracted 4-element container for macro internal use",null,null],[6,"Rgba8","","Standard 8bits RGBA format.",null,null],[6,"Srgba8","","Standard 8bit gamma transforming RGB format.",null,null],[6,"Rgb10a2F","","Standard HDR floating-point format with 10 bits for RGB components\nand 2 bits for the alpha.",null,null],[6,"Rgba16F","","Standard 16-bit floating-point RGBA format.",null,null],[6,"Rgba32F","","Standard 32-bit floating-point RGBA format.",null,null],[6,"Depth","","Standard 24-bit depth format.",null,null],[6,"DepthStencil","","Standard 24-bit depth format with 8-bit stencil.",null,null],[6,"Depth32F","","Standard 32-bit floating-point depth format.",null,null],[8,"SurfaceTyped","","Compile-time surface type trait.",null,null],[16,"DataType","","The corresponding data type to be passed from CPU.",49,null],[10,"get_surface_type","","Return the run-time value of the type.",49,{"inputs":[],"output":{"name":"surfacetype"}}],[8,"BufferSurface","","An ability of a surface type to be used for vertex buffers.",null,null],[8,"TextureSurface","","An ability of a surface type to be used for textures.",null,null],[8,"RenderSurface","","An ability of a surface type to be used for render targets.",null,null],[8,"DepthSurface","","An ability of a surface type to be used for depth targets.",null,null],[8,"StencilSurface","","An ability of a surface type to be used for stencil targets.",null,null],[8,"ChannelTyped","","Compile-time channel type trait.",null,null],[16,"ShaderType","","Shader-visible type that corresponds to this channel.\nFor example, normalized integers are visible as floats.",50,null],[10,"get_channel_type","","Return the run-time value of the type.",50,{"inputs":[],"output":{"name":"channeltype"}}],[8,"TextureChannel","","An ability of a channel type to be used for textures.",null,null],[8,"RenderChannel","","An ability of a channel type to be used for render targets.",null,null],[8,"BlendChannel","","An ability of a channel type to be used for blended render targets.",null,null],[8,"Formatted","","Compile-time full format trait.",null,null],[16,"Surface","","Associated surface type.",51,null],[16,"Channel","","Associated channel type.",51,null],[16,"View","","Shader view type of this format.",51,null],[11,"get_format","","Return the run-time value of the type.",51,{"inputs":[],"output":{"name":"format"}}],[8,"BufferFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthFormat","","Ability to be used for depth targets.",null,null],[8,"StencilFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthStencilFormat","","Ability to be used for depth+stencil targets.",null,null],[8,"TextureFormat","","Ability to be used for textures.",null,null],[8,"RenderFormat","","Ability to be used for render targets.",null,null],[8,"BlendFormat","","Ability to be used for blended render targets.",null,null],[11,"cmp","","",46,null],[11,"eq","","",46,null],[11,"partial_cmp","","",46,null],[11,"hash","","",46,null],[11,"clone","","",46,null],[11,"fmt","","",46,null],[11,"cmp","","",52,null],[11,"eq","","",52,null],[11,"partial_cmp","","",52,null],[11,"hash","","",52,null],[11,"clone","","",52,null],[11,"fmt","","",52,null],[11,"get_channel_type","","",52,{"inputs":[],"output":{"name":"channeltype"}}],[11,"cmp","","",53,null],[11,"eq","","",53,null],[11,"partial_cmp","","",53,null],[11,"hash","","",53,null],[11,"clone","","",53,null],[11,"fmt","","",53,null],[11,"get_channel_type","","",53,{"inputs":[],"output":{"name":"channeltype"}}],[11,"cmp","","",54,null],[11,"eq","","",54,null],[11,"partial_cmp","","",54,null],[11,"hash","","",54,null],[11,"clone","","",54,null],[11,"fmt","","",54,null],[11,"get_channel_type","","",54,{"inputs":[],"output":{"name":"channeltype"}}],[11,"cmp","","",55,null],[11,"eq","","",55,null],[11,"partial_cmp","","",55,null],[11,"hash","","",55,null],[11,"clone","","",55,null],[11,"fmt","","",55,null],[11,"get_channel_type","","",55,{"inputs":[],"output":{"name":"channeltype"}}],[11,"cmp","","",56,null],[11,"eq","","",56,null],[11,"partial_cmp","","",56,null],[11,"hash","","",56,null],[11,"clone","","",56,null],[11,"fmt","","",56,null],[11,"get_channel_type","","",56,{"inputs":[],"output":{"name":"channeltype"}}],[11,"cmp","","",57,null],[11,"eq","","",57,null],[11,"partial_cmp","","",57,null],[11,"hash","","",57,null],[11,"clone","","",57,null],[11,"fmt","","",57,null],[11,"get_channel_type","","",57,{"inputs":[],"output":{"name":"channeltype"}}],[11,"cmp","","",47,null],[11,"eq","","",47,null],[11,"partial_cmp","","",47,null],[11,"hash","","",47,null],[11,"clone","","",47,null],[11,"fmt","","",47,null],[11,"get_total_bits","","Return the total number of bits for this format.",47,null],[11,"get_alpha_stencil_bits","","Return the number of bits allocated for alpha and stencil.",47,null],[11,"cmp","","",58,null],[11,"eq","","",58,null],[11,"partial_cmp","","",58,null],[11,"hash","","",58,null],[11,"clone","","",58,null],[11,"fmt","","",58,null],[11,"get_surface_type","","",58,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",59,null],[11,"eq","","",59,null],[11,"partial_cmp","","",59,null],[11,"hash","","",59,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"get_surface_type","","",59,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",60,null],[11,"eq","","",60,null],[11,"partial_cmp","","",60,null],[11,"hash","","",60,null],[11,"clone","","",60,null],[11,"fmt","","",60,null],[11,"get_surface_type","","",60,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",61,null],[11,"eq","","",61,null],[11,"partial_cmp","","",61,null],[11,"hash","","",61,null],[11,"clone","","",61,null],[11,"fmt","","",61,null],[11,"get_surface_type","","",61,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",62,null],[11,"eq","","",62,null],[11,"partial_cmp","","",62,null],[11,"hash","","",62,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"get_surface_type","","",62,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",63,null],[11,"eq","","",63,null],[11,"partial_cmp","","",63,null],[11,"hash","","",63,null],[11,"clone","","",63,null],[11,"fmt","","",63,null],[11,"get_surface_type","","",63,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",64,null],[11,"eq","","",64,null],[11,"partial_cmp","","",64,null],[11,"hash","","",64,null],[11,"clone","","",64,null],[11,"fmt","","",64,null],[11,"get_surface_type","","",64,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",65,null],[11,"eq","","",65,null],[11,"partial_cmp","","",65,null],[11,"hash","","",65,null],[11,"clone","","",65,null],[11,"fmt","","",65,null],[11,"get_surface_type","","",65,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",66,null],[11,"eq","","",66,null],[11,"partial_cmp","","",66,null],[11,"hash","","",66,null],[11,"clone","","",66,null],[11,"fmt","","",66,null],[11,"get_surface_type","","",66,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",67,null],[11,"eq","","",67,null],[11,"partial_cmp","","",67,null],[11,"hash","","",67,null],[11,"clone","","",67,null],[11,"fmt","","",67,null],[11,"get_surface_type","","",67,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",68,null],[11,"eq","","",68,null],[11,"partial_cmp","","",68,null],[11,"hash","","",68,null],[11,"clone","","",68,null],[11,"fmt","","",68,null],[11,"get_surface_type","","",68,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",69,null],[11,"eq","","",69,null],[11,"partial_cmp","","",69,null],[11,"hash","","",69,null],[11,"clone","","",69,null],[11,"fmt","","",69,null],[11,"get_surface_type","","",69,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",70,null],[11,"eq","","",70,null],[11,"partial_cmp","","",70,null],[11,"hash","","",70,null],[11,"clone","","",70,null],[11,"fmt","","",70,null],[11,"get_surface_type","","",70,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",71,null],[11,"eq","","",71,null],[11,"partial_cmp","","",71,null],[11,"hash","","",71,null],[11,"clone","","",71,null],[11,"fmt","","",71,null],[11,"get_surface_type","","",71,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",72,null],[11,"eq","","",72,null],[11,"partial_cmp","","",72,null],[11,"hash","","",72,null],[11,"clone","","",72,null],[11,"fmt","","",72,null],[11,"get_surface_type","","",72,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",73,null],[11,"eq","","",73,null],[11,"partial_cmp","","",73,null],[11,"hash","","",73,null],[11,"clone","","",73,null],[11,"fmt","","",73,null],[11,"get_surface_type","","",73,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",74,null],[11,"eq","","",74,null],[11,"partial_cmp","","",74,null],[11,"hash","","",74,null],[11,"clone","","",74,null],[11,"fmt","","",74,null],[11,"get_surface_type","","",74,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",75,null],[11,"eq","","",75,null],[11,"partial_cmp","","",75,null],[11,"hash","","",75,null],[11,"clone","","",75,null],[11,"fmt","","",75,null],[11,"get_surface_type","","",75,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",76,null],[11,"eq","","",76,null],[11,"partial_cmp","","",76,null],[11,"hash","","",76,null],[11,"clone","","",76,null],[11,"fmt","","",76,null],[11,"get_surface_type","","",76,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",77,null],[11,"eq","","",77,null],[11,"partial_cmp","","",77,null],[11,"hash","","",77,null],[11,"clone","","",77,null],[11,"fmt","","",77,null],[11,"get_surface_type","","",77,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",78,null],[11,"eq","","",78,null],[11,"partial_cmp","","",78,null],[11,"hash","","",78,null],[11,"clone","","",78,null],[11,"fmt","","",78,null],[11,"get_surface_type","","",78,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",48,null],[11,"eq","","",48,null],[11,"partial_cmp","","",48,null],[11,"hash","","",48,null],[11,"clone","","",48,null],[11,"fmt","","",48,null],[11,"cmp","","",39,null],[11,"eq","","",39,null],[11,"ne","","",39,null],[11,"partial_cmp","","",39,null],[11,"lt","","",39,null],[11,"le","","",39,null],[11,"gt","","",39,null],[11,"ge","","",39,null],[11,"hash","","",39,null],[11,"clone","","",39,null],[11,"fmt","","",39,null],[11,"new","","Create a new swizzle where each channel is unmapped.",39,{"inputs":[],"output":{"name":"swizzle"}}],[11,"cmp","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"partial_cmp","","",40,null],[11,"lt","","",40,null],[11,"le","","",40,null],[11,"gt","","",40,null],[11,"ge","","",40,null],[11,"hash","","",40,null],[11,"clone","","",40,null],[11,"fmt","","",40,null],[11,"cmp","","",41,null],[11,"eq","","",41,null],[11,"ne","","",41,null],[11,"partial_cmp","","",41,null],[11,"lt","","",41,null],[11,"le","","",41,null],[11,"gt","","",41,null],[11,"ge","","",41,null],[11,"hash","","",41,null],[11,"clone","","",41,null],[11,"fmt","","",41,null],[11,"from","","",41,{"inputs":[{"name":"u8"}],"output":{"name":"u8norm"}}],[11,"cast2","","Convert a 2-element slice.",41,null],[11,"cast3","","Convert a 3-element slice.",41,null],[11,"cast4","","Convert a 4-element slice.",41,null],[11,"cast_slice","","Convert a generic slice by transmutation.",41,null],[11,"cmp","","",42,null],[11,"eq","","",42,null],[11,"ne","","",42,null],[11,"partial_cmp","","",42,null],[11,"lt","","",42,null],[11,"le","","",42,null],[11,"gt","","",42,null],[11,"ge","","",42,null],[11,"hash","","",42,null],[11,"clone","","",42,null],[11,"fmt","","",42,null],[11,"from","","",42,{"inputs":[{"name":"i8"}],"output":{"name":"i8norm"}}],[11,"cast2","","Convert a 2-element slice.",42,null],[11,"cast3","","Convert a 3-element slice.",42,null],[11,"cast4","","Convert a 4-element slice.",42,null],[11,"cast_slice","","Convert a generic slice by transmutation.",42,null],[11,"cmp","","",43,null],[11,"eq","","",43,null],[11,"ne","","",43,null],[11,"partial_cmp","","",43,null],[11,"lt","","",43,null],[11,"le","","",43,null],[11,"gt","","",43,null],[11,"ge","","",43,null],[11,"hash","","",43,null],[11,"clone","","",43,null],[11,"fmt","","",43,null],[11,"from","","",43,{"inputs":[{"name":"u16"}],"output":{"name":"u16norm"}}],[11,"cast2","","Convert a 2-element slice.",43,null],[11,"cast3","","Convert a 3-element slice.",43,null],[11,"cast4","","Convert a 4-element slice.",43,null],[11,"cast_slice","","Convert a generic slice by transmutation.",43,null],[11,"cmp","","",44,null],[11,"eq","","",44,null],[11,"ne","","",44,null],[11,"partial_cmp","","",44,null],[11,"lt","","",44,null],[11,"le","","",44,null],[11,"gt","","",44,null],[11,"ge","","",44,null],[11,"hash","","",44,null],[11,"clone","","",44,null],[11,"fmt","","",44,null],[11,"from","","",44,{"inputs":[{"name":"i16"}],"output":{"name":"i16norm"}}],[11,"cast2","","Convert a 2-element slice.",44,null],[11,"cast3","","Convert a 3-element slice.",44,null],[11,"cast4","","Convert a 4-element slice.",44,null],[11,"cast_slice","","Convert a generic slice by transmutation.",44,null],[11,"cmp","","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"partial_cmp","","",45,null],[11,"lt","","",45,null],[11,"le","","",45,null],[11,"gt","","",45,null],[11,"ge","","",45,null],[11,"hash","","",45,null],[11,"clone","","",45,null],[11,"fmt","","",45,null],[11,"from","","",45,{"inputs":[{"name":"u16"}],"output":{"name":"f16"}}],[11,"cast2","","Convert a 2-element slice.",45,null],[11,"cast3","","Convert a 3-element slice.",45,null],[11,"cast4","","Convert a 4-element slice.",45,null],[11,"cast_slice","","Convert a generic slice by transmutation.",45,null],[0,"handle","gfx_core","Device resource handles",null,null],[3,"RawBuffer","gfx_core::handle","Raw (untyped) Buffer Handle",null,null],[3,"Buffer","","Type-safe buffer handle",null,null],[3,"Shader","","Shader Handle",null,null],[3,"Program","","Program Handle",null,null],[3,"RawPipelineState","","Raw Pipeline State Handle",null,null],[3,"RawTexture","","Raw texture object",null,null],[3,"Texture","","Typed texture object",null,null],[3,"RawShaderResourceView","","Raw Shader Resource View Handle",null,null],[3,"ShaderResourceView","","Type-safe Shader Resource View Handle",null,null],[3,"RawUnorderedAccessView","","Raw Unordered Access View Handle",null,null],[3,"UnorderedAccessView","","Type-safe Unordered Access View Handle",null,null],[3,"RawRenderTargetView","","Raw RTV",null,null],[3,"RawDepthStencilView","","Raw DSV",null,null],[3,"RenderTargetView","","Typed RTV",null,null],[3,"DepthStencilView","","Typed DSV",null,null],[3,"Sampler","","Sampler Handle",null,null],[3,"Fence","","Fence Handle",null,null],[3,"Manager","","Stores reference-counted resources used in a command buffer.\nSeals actual resource names behind the interface, automatically\nreferencing them both by the Factory on resource creation\nand the Renderer during CommandBuffer population.",null,null],[8,"Producer","","A service trait to be used by the device implementation",null,null],[10,"make_buffer","","",79,null],[10,"make_shader","","",79,null],[10,"make_program","","",79,null],[10,"make_pso","","",79,null],[10,"make_texture","","",79,null],[10,"make_buffer_srv","","",79,null],[10,"make_texture_srv","","",79,null],[10,"make_buffer_uav","","",79,null],[10,"make_texture_uav","","",79,null],[10,"make_rtv","","",79,null],[10,"make_dsv","","",79,null],[10,"make_sampler","","",79,null],[10,"make_fence","","",79,null],[10,"clean_with","","Walk through all the handles, keep ones that are reference elsewhere\nand call the provided delete function (resource-specific) for others",79,null],[11,"clone","","",80,null],[11,"fmt","","",80,null],[11,"hash","","",80,null],[11,"eq","","",80,null],[11,"ne","","",80,null],[11,"get_info","","Get raw buffer info",80,null],[11,"clone","","",81,null],[11,"fmt","","",81,null],[11,"hash","","",81,null],[11,"eq","","",81,null],[11,"ne","","",81,null],[11,"new","","",81,{"inputs":[{"name":"rawbuffer"}],"output":{"name":"buffer"}}],[11,"raw","","",81,null],[11,"get_info","","Get the associated information about the buffer",81,null],[11,"len","","Get the number of elements in the buffer.",81,null],[11,"clone","","",82,null],[11,"fmt","","",82,null],[11,"hash","","",82,null],[11,"eq","","",82,null],[11,"ne","","",82,null],[11,"clone","","",83,null],[11,"fmt","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"get_info","","Get program info",83,null],[11,"clone","","",84,null],[11,"fmt","","",84,null],[11,"eq","","",84,null],[11,"ne","","",84,null],[11,"clone","","",85,null],[11,"fmt","","",85,null],[11,"hash","","",85,null],[11,"eq","","",85,null],[11,"ne","","",85,null],[11,"clone","","",86,null],[11,"fmt","","",86,null],[11,"hash","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"get_info","","Get texture descriptor",85,null],[11,"new","","",86,{"inputs":[{"name":"rawtexture"}],"output":{"name":"texture"}}],[11,"raw","","",86,null],[11,"get_info","","Get texture descriptor",86,null],[11,"clone","","",87,null],[11,"fmt","","",87,null],[11,"hash","","",87,null],[11,"eq","","",87,null],[11,"ne","","",87,null],[11,"clone","","",88,null],[11,"fmt","","",88,null],[11,"hash","","",88,null],[11,"eq","","",88,null],[11,"ne","","",88,null],[11,"new","","",88,{"inputs":[{"name":"rawshaderresourceview"}],"output":{"name":"shaderresourceview"}}],[11,"raw","","",88,null],[11,"clone","","",89,null],[11,"fmt","","",89,null],[11,"hash","","",89,null],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"clone","","",90,null],[11,"fmt","","",90,null],[11,"hash","","",90,null],[11,"eq","","",90,null],[11,"ne","","",90,null],[11,"new","","",90,{"inputs":[{"name":"rawunorderedaccessview"}],"output":{"name":"unorderedaccessview"}}],[11,"raw","","",90,null],[11,"clone","","",91,null],[11,"fmt","","",91,null],[11,"hash","","",91,null],[11,"eq","","",91,null],[11,"ne","","",91,null],[11,"get_dimensions","","Get target dimensions",91,null],[11,"clone","","",92,null],[11,"fmt","","",92,null],[11,"hash","","",92,null],[11,"eq","","",92,null],[11,"ne","","",92,null],[11,"get_dimensions","","Get target dimensions",92,null],[11,"clone","","",93,null],[11,"fmt","","",93,null],[11,"hash","","",93,null],[11,"eq","","",93,null],[11,"ne","","",93,null],[11,"get_dimensions","","Get target dimensions",93,null],[11,"new","","",93,{"inputs":[{"name":"rawrendertargetview"}],"output":{"name":"rendertargetview"}}],[11,"raw","","",93,null],[11,"clone","","",94,null],[11,"fmt","","",94,null],[11,"hash","","",94,null],[11,"eq","","",94,null],[11,"ne","","",94,null],[11,"get_dimensions","","Get target dimensions",94,null],[11,"new","","",94,{"inputs":[{"name":"rawdepthstencilview"}],"output":{"name":"depthstencilview"}}],[11,"raw","","",94,null],[11,"clone","","",95,null],[11,"fmt","","",95,null],[11,"eq","","",95,null],[11,"ne","","",95,null],[11,"get_info","","Get sampler info",95,null],[11,"clone","","",96,null],[11,"fmt","","",96,null],[11,"eq","","",96,null],[11,"ne","","",96,null],[11,"make_buffer","","",97,null],[11,"make_shader","","",97,null],[11,"make_program","","",97,null],[11,"make_pso","","",97,null],[11,"make_texture","","",97,null],[11,"make_buffer_srv","","",97,null],[11,"make_texture_srv","","",97,null],[11,"make_buffer_uav","","",97,null],[11,"make_texture_uav","","",97,null],[11,"make_rtv","","",97,null],[11,"make_dsv","","",97,null],[11,"make_sampler","","",97,null],[11,"make_fence","","",97,null],[11,"clean_with","","",97,null],[11,"new","","Create a new handle manager",97,{"inputs":[],"output":{"name":"manager"}}],[11,"clear","","Clear all references",97,null],[11,"extend","","Extend with all references of another handle manager",97,null],[11,"count","","Count the total number of referenced resources",97,null],[11,"ref_buffer","","Reference a buffer",97,null],[11,"ref_shader","","Reference a shader",97,null],[11,"ref_program","","Reference a program",97,null],[11,"ref_pso","","Reference a pipeline state object",97,null],[11,"ref_texture","","Reference a texture",97,null],[11,"ref_srv","","Reference a shader resource view",97,null],[11,"ref_uav","","Reference an unordered access view",97,null],[11,"ref_rtv","","Reference an RTV",97,null],[11,"ref_dsv","","Reference a DSV",97,null],[11,"ref_sampler","","Reference a sampler",97,null],[11,"ref_fence","","Reference a fence",97,null],[0,"mapping","gfx_core","Memory mapping",null,null],[3,"Readable","gfx_core::mapping","A handle to a readable map, which can be sliced.",null,null],[3,"Writable","","A handle to a writable map, which only allows setting elements.",null,null],[3,"RW","","A handle to a complete readable/writable map, which can be sliced both ways.",null,null],[8,"Raw","","Unsafe operations for a buffer mapping",null,null],[10,"set","","Set the element at `index` to `val`. Not bounds-checked.",98,null],[10,"to_slice","","Returns a slice of the specified length.",98,null],[10,"to_mut_slice","","Returns a mutable slice of the specified length.",98,null],[8,"Builder","","A service trait with methods for mapping already implemented.\nTo be used by device back ends.",null,null],[16,"RawMapping","","",99,null],[10,"map_readable","","",99,null],[10,"map_writable","","",99,null],[10,"map_read_write","","",99,null],[11,"deref","","",100,null],[11,"drop","","",100,null],[11,"set","","Set a value in the buffer",101,null],[11,"to_mut_slice","","Returns a mutable slice of the specified length.",101,null],[11,"drop","","",101,null],[11,"deref","","",102,null],[11,"deref_mut","","",102,null],[11,"drop","","",102,null],[0,"pso","gfx_core","Raw Pipeline State Objects",null,null],[3,"CreationError","gfx_core::pso","Error types happening upon PSO creation on the device side.",null,null],[3,"ColorInfo","","Color output configuration of the PSO.",null,null],[12,"mask","","Color channel mask",103,null],[12,"color","","Optional color blending",103,null],[12,"alpha","","Optional alpha blending",103,null],[3,"DepthStencilInfo","","Depth and stencil state of the PSO.",null,null],[12,"depth","","Optional depth test configuration",104,null],[12,"front","","Optional stencil test on the front faces",104,null],[12,"back","","Optional stencil test on the back faces",104,null],[3,"Element","","A struct element descriptor.",null,null],[12,"format","","Element format",105,null],[12,"offset","","Offset from the beginning of the container, in bytes",105,null],[12,"stride","","Total container size, in bytes",105,null],[3,"Descriptor","","All the information surrounding a shader program that is required\nfor PSO creation, including the formats of vertex buffers and pixel targets;",null,null],[12,"primitive","","Type of the primitive",106,null],[12,"rasterizer","","Rasterizer setup",106,null],[12,"scissor","","Enable scissor test",106,null],[12,"attributes","","Vertex attributes",106,null],[12,"color_targets","","Render target views (RTV)",106,null],[12,"depth_stencil","","Depth stencil view (DSV)",106,null],[3,"VertexBufferSet","","A complete set of vertex buffers to be used for vertex import in PSO.",null,null],[12,"0","","Array of buffer handles with offsets in them",107,null],[3,"ConstantBufferParam","","A constant buffer run-time parameter for PSO.",null,null],[12,"0","","",108,null],[12,"1","","",108,null],[12,"2","","",108,null],[3,"ResourceViewParam","","A shader resource view (SRV) run-time parameter for PSO.",null,null],[12,"0","","",109,null],[12,"1","","",109,null],[12,"2","","",109,null],[3,"UnorderedViewParam","","An unordered access view (UAV) run-time parameter for PSO.",null,null],[12,"0","","",110,null],[12,"1","","",110,null],[12,"2","","",110,null],[3,"SamplerParam","","A sampler run-time parameter for PSO.",null,null],[12,"0","","",111,null],[12,"1","","",111,null],[12,"2","","",111,null],[3,"PixelTargetSet","","A complete set of render targets to be used for pixel export in PSO.",null,null],[12,"colors","","Array of color target views",112,null],[12,"depth","","Depth target view",112,null],[12,"stencil","","Stencil target view",112,null],[12,"size","","Rendering dimensions",112,null],[6,"BufferOffset","","An offset inside a vertex buffer, in bytes.",null,null],[6,"ElemOffset","","Offset of an attribute from the start of the buffer, in bytes",null,null],[6,"ElemStride","","Offset between attribute values, in bytes",null,null],[6,"InstanceRate","","The number of instances between each subsequent attribute value",null,null],[6,"AttributeDesc","","PSO vertex attribute descriptor",null,null],[6,"ColorTargetDesc","","PSO color target descriptor",null,null],[6,"DepthStencilDesc","","PSO depth-stencil target descriptor",null,null],[11,"clone","","",113,null],[11,"eq","","",113,null],[11,"fmt","","",113,null],[11,"fmt","","",113,null],[11,"description","","",113,null],[11,"clone","","",103,null],[11,"fmt","","",103,null],[11,"hash","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"from","","",103,{"inputs":[{"name":"colormask"}],"output":{"name":"colorinfo"}}],[11,"from","","",103,{"inputs":[{"name":"blend"}],"output":{"name":"colorinfo"}}],[11,"clone","","",104,null],[11,"fmt","","",104,null],[11,"hash","","",104,null],[11,"eq","","",104,null],[11,"ne","","",104,null],[11,"from","","",104,{"inputs":[{"name":"depth"}],"output":{"name":"depthstencilinfo"}}],[11,"from","","",104,{"inputs":[{"name":"stencil"}],"output":{"name":"depthstencilinfo"}}],[11,"from","","",104,null],[11,"clone","","",105,null],[11,"fmt","","",105,null],[11,"hash","","",105,null],[11,"eq","","",105,null],[11,"ne","","",105,null],[11,"clone","","",106,null],[11,"fmt","","",106,null],[11,"hash","","",106,null],[11,"eq","","",106,null],[11,"ne","","",106,null],[11,"new","","Create a new empty PSO descriptor.",106,{"inputs":[{"name":"primitive"},{"name":"rasterizer"}],"output":{"name":"descriptor"}}],[11,"clone","","",107,null],[11,"fmt","","",107,null],[11,"new","","Create an empty set",107,{"inputs":[],"output":{"name":"vertexbufferset"}}],[11,"clone","","",108,null],[11,"fmt","","",108,null],[11,"clone","","",109,null],[11,"fmt","","",109,null],[11,"clone","","",110,null],[11,"fmt","","",110,null],[11,"clone","","",111,null],[11,"fmt","","",111,null],[11,"clone","","",112,null],[11,"fmt","","",112,null],[11,"new","","Create an empty set",112,{"inputs":[],"output":{"name":"pixeltargetset"}}],[11,"add_color","","Add a color view to the specified slot",112,null],[11,"add_depth_stencil","","Add a depth or stencil view to the specified slot",112,null],[0,"shade","gfx_core","Shader handling.",null,null],[3,"SamplerType","gfx_core::shade","A type of the sampler variable.",null,null],[12,"0","","",114,null],[12,"1","","",114,null],[3,"Usage","","Parameter usage flags.",null,null],[3,"AttributeVar","","Vertex information that a shader takes as input.",null,null],[12,"name","","Name of this attribute.",115,null],[12,"slot","","Slot of the vertex attribute.",115,null],[12,"base_type","","Type that this attribute is composed of.",115,null],[12,"container","","&quot;Scalarness&quot; of this attribute.",115,null],[3,"ConstVar","","A constant in the shader - a bit of data that doesn&#39;t vary",null,null],[12,"name","","Name of this constant.",116,null],[12,"location","","Location of this constant in the program.",116,null],[12,"count","","Number of elements this constant represents.",116,null],[12,"base_type","","Type that this constant is composed of",116,null],[12,"container","","&quot;Scalarness&quot; of this constant.",116,null],[3,"ConstantBufferVar","","A constant buffer.",null,null],[12,"name","","Name of this constant buffer.",117,null],[12,"slot","","Slot of the constant buffer.",117,null],[12,"size","","Size (in bytes) of this buffer&#39;s data.",117,null],[12,"usage","","What program stage this buffer is used in.",117,null],[3,"TextureVar","","Texture shader parameter.",null,null],[12,"name","","Name of this texture variable.",118,null],[12,"slot","","Slot of this texture variable.",118,null],[12,"base_type","","Base type for the texture.",118,null],[12,"ty","","Type of this texture.",118,null],[12,"usage","","What program stage this texture is used in.",118,null],[3,"UnorderedVar","","Unordered access shader parameter.",null,null],[12,"name","","Name of this unordered variable.",119,null],[12,"slot","","Slot of this unordered variable.",119,null],[12,"usage","","What program stage this UAV is used in.",119,null],[3,"SamplerVar","","Sampler shader parameter.",null,null],[12,"name","","Name of this sampler variable.",120,null],[12,"slot","","Slot of this sampler variable.",120,null],[12,"ty","","Type of this sampler.",120,null],[12,"usage","","What program stage this texture is used in.",120,null],[3,"OutputVar","","Target output variable.",null,null],[12,"name","","Name of this output variable.",121,null],[12,"slot","","Output color target index.",121,null],[12,"base_type","","Type of the output component.",121,null],[12,"container","","&quot;Scalarness&quot; of this output.",121,null],[3,"ProgramInfo","","Metadata about a program.",null,null],[12,"vertex_attributes","","Attributes in the program",122,null],[12,"globals","","Global constants in the program",122,null],[12,"constant_buffers","","Constant buffers in the program",122,null],[12,"textures","","Textures in the program",122,null],[12,"unordereds","","Unordered access resources in the program",122,null],[12,"samplers","","Samplers in the program",122,null],[12,"outputs","","Output targets in the program",122,null],[12,"output_depth","","A flag indicating that the pixel shader manually assigns the depth.",122,null],[12,"knows_outputs","","A hacky flag to make sure the clients know we are\nunable to actually get the output variable info",122,null],[4,"IsArray","","Whether the sampler samples an array texture.",null,null],[13,"Array","","",123,null],[13,"NoArray","","",123,null],[4,"IsComparison","","Whether the sampler compares the depth value upon sampling.",null,null],[13,"Compare","","",124,null],[13,"NoCompare","","",124,null],[4,"IsMultiSample","","Whether the sampler samples a multisample texture.",null,null],[13,"MultiSample","","",125,null],[13,"NoMultiSample","","",125,null],[4,"IsRect","","Whether the sampler samples a rectangle texture.",null,null],[13,"Rect","","",126,null],[13,"NoRect","","",126,null],[4,"MatrixFormat","","Whether the matrix is column or row major.",null,null],[13,"ColumnMajor","","",127,null],[13,"RowMajor","","",127,null],[4,"TextureType","","A type of the texture variable.\nThis has to match the actual data we bind to the shader.",null,null],[13,"Buffer","","Sample from a buffer.",128,null],[13,"D1","","Sample from a 1D texture",128,null],[13,"D2","","Sample from a 2D texture",128,null],[13,"D3","","Sample from a 3D texture",128,null],[13,"Cube","","Sample from a cubemap.",128,null],[4,"BaseType","","Base type of this shader parameter.",null,null],[13,"I32","","",129,null],[13,"U32","","",129,null],[13,"F32","","",129,null],[13,"F64","","",129,null],[13,"Bool","","",129,null],[4,"ContainerType","","Number of components this parameter represents.",null,null],[13,"Single","","Scalar value",130,null],[13,"Vector","","A vector with `Dimension` components.",130,null],[13,"Matrix","","A matrix.",130,null],[4,"Stage","","Which program stage this shader represents.",null,null],[13,"Vertex","","",131,null],[13,"Geometry","","",131,null],[13,"Pixel","","",131,null],[4,"UniformValue","","A value that can be uploaded to the device as a uniform.",null,null],[13,"I32","","",132,null],[13,"F32","","",132,null],[13,"I32Vector2","","",132,null],[13,"I32Vector3","","",132,null],[13,"I32Vector4","","",132,null],[13,"F32Vector2","","",132,null],[13,"F32Vector3","","",132,null],[13,"F32Vector4","","",132,null],[13,"F32Matrix2","","",132,null],[13,"F32Matrix3","","",132,null],[13,"F32Matrix4","","",132,null],[4,"CompatibilityError","","Error type for trying to store a UniformValue in a ConstVar.",null,null],[13,"ErrorArraySize","","Array sizes differ between the value and the var (trying to upload a vec2 as a vec4, etc)",133,null],[13,"ErrorBaseType","","Base types differ between the value and the var (trying to upload a f32 as a u16, etc)",133,null],[13,"ErrorContainer","","Container-ness differs between the value and the var (trying to upload a scalar as a vec4,\netc)",133,null],[4,"CreateShaderError","","An error type for creating shaders.",null,null],[13,"ModelNotSupported","","The device does not support the requested shader model.",134,null],[13,"StageNotSupported","","The device does not support the shader stage.",134,null],[13,"CompilationFailed","","The shader failed to compile.",134,null],[6,"Dimension","","Number of components in a container type (vectors/matrices)",null,null],[6,"Location","","Location of a parameter in the program.",null,null],[6,"ConstFormat","","Format of a shader constant.",null,null],[6,"CreateProgramError","","An error type for creating programs.",null,null],[17,"STAGES","","A constant static array of all shader stages.",null,null],[17,"VERTEX","","Used by the vertex shader",null,null],[17,"GEOMETRY","","Used by the geometry shader",null,null],[17,"PIXEL","","Used by the pixel shader",null,null],[8,"BaseTyped","","A trait that statically links simple data types to\nbase types of the shader constants.",null,null],[10,"get_base_type","","",135,{"inputs":[],"output":{"name":"basetype"}}],[8,"Formatted","","A trait that statically links simple data types to\nconstant formats.",null,null],[10,"get_format","","Get the associated constant format.",136,{"inputs":[],"output":{"name":"constformat"}}],[11,"clone","","",123,null],[11,"eq","","",123,null],[11,"fmt","","",123,null],[11,"clone","","",124,null],[11,"eq","","",124,null],[11,"fmt","","",124,null],[11,"clone","","",125,null],[11,"eq","","",125,null],[11,"fmt","","",125,null],[11,"clone","","",126,null],[11,"eq","","",126,null],[11,"fmt","","",126,null],[11,"clone","","",127,null],[11,"eq","","",127,null],[11,"fmt","","",127,null],[11,"clone","","",128,null],[11,"eq","","",128,null],[11,"ne","","",128,null],[11,"fmt","","",128,null],[11,"can_sample","","Check if this texture can be used with a sampler.",128,null],[11,"clone","","",114,null],[11,"eq","","",114,null],[11,"ne","","",114,null],[11,"fmt","","",114,null],[11,"clone","","",129,null],[11,"eq","","",129,null],[11,"fmt","","",129,null],[11,"clone","","",130,null],[11,"eq","","",130,null],[11,"ne","","",130,null],[11,"fmt","","",130,null],[11,"clone","","",131,null],[11,"fmt","","",131,null],[11,"hash","","",131,null],[11,"eq","","",131,null],[11,"clone","","",132,null],[11,"fmt","","",132,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"clone","","",137,null],[11,"partial_cmp","","",137,null],[11,"lt","","",137,null],[11,"le","","",137,null],[11,"gt","","",137,null],[11,"ge","","",137,null],[11,"cmp","","",137,null],[11,"hash","","",137,null],[11,"fmt","","",137,null],[11,"empty","","Returns an empty set of flags.",137,{"inputs":[],"output":{"name":"usage"}}],[11,"all","","Returns the set containing all flags.",137,{"inputs":[],"output":{"name":"usage"}}],[11,"bits","","Returns the raw value of the flags currently stored.",137,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",137,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",137,{"inputs":[{"name":"u8"}],"output":{"name":"usage"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",137,null],[11,"is_all","","Returns `true` if all flags are currently set.",137,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",137,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",137,null],[11,"insert","","Inserts the specified flags in-place.",137,null],[11,"remove","","Removes the specified flags in-place.",137,null],[11,"toggle","","Toggles the specified flags in-place.",137,null],[11,"bitor","","Returns the union of the two sets of flags.",137,null],[11,"bitor_assign","","Adds the set of flags.",137,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",137,null],[11,"bitxor_assign","","Toggles the set of flags.",137,null],[11,"bitand","","Returns the intersection between the two sets of flags.",137,null],[11,"bitand_assign","","Disables all flags disabled in the set.",137,null],[11,"sub","","Returns the set difference of the two sets of flags.",137,null],[11,"sub_assign","","Disables all flags enabled in the set.",137,null],[11,"not","","Returns the complement of this set of flags.",137,null],[11,"extend","","",137,null],[11,"from_iter","","",137,{"inputs":[{"name":"t"}],"output":{"name":"usage"}}],[11,"from","","",137,{"inputs":[{"name":"stage"}],"output":{"name":"usage"}}],[11,"clone","","",115,null],[11,"eq","","",115,null],[11,"ne","","",115,null],[11,"fmt","","",115,null],[11,"clone","","",116,null],[11,"eq","","",116,null],[11,"ne","","",116,null],[11,"fmt","","",116,null],[11,"clone","","",117,null],[11,"eq","","",117,null],[11,"ne","","",117,null],[11,"fmt","","",117,null],[11,"clone","","",118,null],[11,"eq","","",118,null],[11,"ne","","",118,null],[11,"fmt","","",118,null],[11,"clone","","",119,null],[11,"eq","","",119,null],[11,"ne","","",119,null],[11,"fmt","","",119,null],[11,"clone","","",120,null],[11,"eq","","",120,null],[11,"ne","","",120,null],[11,"fmt","","",120,null],[11,"clone","","",121,null],[11,"eq","","",121,null],[11,"ne","","",121,null],[11,"fmt","","",121,null],[11,"clone","","",122,null],[11,"eq","","",122,null],[11,"ne","","",122,null],[11,"fmt","","",122,null],[11,"clone","","",133,null],[11,"fmt","","",133,null],[11,"fmt","","",133,null],[11,"description","","",133,null],[11,"is_compatible","","Whether a value is compatible with this variable. That is, whether the value can be stored\nin this variable.",116,null],[11,"clone","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"fmt","","",134,null],[11,"fmt","","",134,null],[11,"description","","",134,null],[0,"tex","gfx_core","Texture creation and modification.",null,null],[6,"Layer","gfx_core::tex","A depth value, specifying which plane to select out of a 3D texture.",null,null],[6,"Level","","Mipmap level to select in a texture.",null,null],[3,"ImageInfoCommon","","Describes a subvolume of a texture, which image data can be uploaded into.",null,null],[12,"xoffset","","",138,null],[12,"yoffset","","",138,null],[12,"zoffset","","",138,null],[12,"width","","",138,null],[12,"height","","",138,null],[12,"depth","","",138,null],[12,"format","","Format of each texel.",138,null],[12,"mipmap","","Which mipmap to select.",138,null],[3,"Lod","","A wrapper for the LOD level of a texture.",null,null],[3,"PackedColor","","A wrapper for the 8bpp RGBA color, encoded as u32.",null,null],[12,"0","","",139,null],[3,"SamplerInfo","","Specifies how to sample from a texture.",null,null],[12,"filter","","Filter method to use.",140,null],[12,"wrap_mode","","Wrapping mode for each of the U, V, and W axis (S, T, and R in OpenGL\nspeak).",140,null],[12,"lod_bias","","This bias is added to every computed mipmap level (N + lod_bias). For\nexample, if it would select mipmap level 2 and lod_bias is 1, it will\nuse mipmap level 3.",140,null],[12,"lod_range","","This range is used to clamp LOD level used for sampling.",140,null],[12,"comparison","","Comparison mode, used primary for a shadow map.",140,null],[12,"border","","Border color is used when one of the wrap modes is set to border.",140,null],[3,"Descriptor","","Texture storage descriptor.",null,null],[12,"kind","","",141,null],[12,"levels","","",141,null],[12,"format","","",141,null],[12,"bind","","",141,null],[12,"usage","","",141,null],[3,"ResourceDesc","","Texture resource view descriptor.",null,null],[12,"channel","","",142,null],[12,"min","","",142,null],[12,"max","","",142,null],[12,"swizzle","","",142,null],[3,"RenderDesc","","Texture render view descriptor.",null,null],[12,"channel","","",143,null],[12,"level","","",143,null],[12,"layer","","",143,null],[3,"DepthStencilFlags","","Depth-stencil read-only flags",null,null],[3,"DepthStencilDesc","","Texture depth-stencil view descriptor.",null,null],[12,"level","","",144,null],[12,"layer","","",144,null],[12,"flags","","",144,null],[4,"Error","","Pure texture object creation error.",null,null],[13,"Format","","Failed to map a given format to the device.",145,null],[13,"Kind","","The kind doesn&#39;t support a particular operation.",145,null],[13,"Samples","","Failed to map a given multisampled kind to the device.",145,null],[13,"Size","","Unsupported size in one of the dimensions.",145,null],[13,"Data","","The given data has a different size than the target texture slice.",145,null],[4,"AaMode","","Describes the configuration of samples inside each texel.",null,null],[13,"Single","","No additional sample information",146,null],[13,"Multi","","MultiSampled Anti-Aliasing (MSAA)",146,null],[13,"Coverage","","Coverage Sampling Anti-Aliasing (CSAA/EQAA)",146,null],[4,"FilterMethod","","How to [filter](https://en.wikipedia.org/wiki/Texture_filtering) the\ntexture when sampling. They correspond to increasing levels of quality,\nbut also cost. They &quot;layer&quot; on top of each other: it is not possible to\nhave bilinear filtering without mipmapping, for example.",null,null],[13,"Scale","","The dumbest filtering possible, nearest-neighbor interpolation.",147,null],[13,"Mipmap","","Add simple mipmapping.",147,null],[13,"Bilinear","","Sample multiple texels within a single mipmap level to increase\nquality.",147,null],[13,"Trilinear","","Sample multiple texels across two mipmap levels to increase quality.",147,null],[13,"Anisotropic","","Anisotropic filtering with a given &quot;max&quot;, must be between 1 and 16,\ninclusive.",147,null],[4,"CubeFace","","The face of a cube texture to do an operation on.",null,null],[13,"PosX","","",148,null],[13,"NegX","","",148,null],[13,"PosY","","",148,null],[13,"NegY","","",148,null],[13,"PosZ","","",148,null],[13,"NegZ","","",148,null],[4,"Kind","","Specifies the kind of a texture storage to be allocated.",null,null],[13,"D1","","A single row of texels.",149,null],[13,"D1Array","","An array of rows of texels. Equivalent to Texture2D except that texels\nin a different row are not sampled.",149,null],[13,"D2","","A traditional 2D texture, with rows arranged contiguously.",149,null],[13,"D2Array","","An array of 2D textures. Equivalent to Texture3D except that texels in\na different depth level are not sampled.",149,null],[13,"D3","","A volume texture, with each 2D layer arranged contiguously.",149,null],[13,"Cube","","A set of 6 2D textures, one for each face of a cube.",149,null],[13,"CubeArray","","An array of Cube textures.",149,null],[4,"WrapMode","","Specifies how texture coordinates outside the range `[0, 1]` are handled.",null,null],[13,"Tile","","Tile the texture. That is, sample the coordinate modulo `1.0`. This is\nthe default.",150,null],[13,"Mirror","","Mirror the texture. Like tile, but uses abs(coord) before the modulo.",150,null],[13,"Clamp","","Clamp the texture to the value at `0.0` or `1.0` respectively.",150,null],[13,"Border","","Use border color.",150,null],[6,"Size","","Dimension size",null,null],[6,"Bits","","Number of bits per component",null,null],[6,"NumSamples","","Number of MSAA samples",null,null],[6,"NumFragments","","Number of EQAA fragments",null,null],[6,"Dimensions","","Dimensions: width, height, depth, and samples.",null,null],[6,"RawImageInfo","","New raw image info based on the universal format spec.",null,null],[6,"NewImageInfo","","New image info based on the universal format spec.\nThe format is suppsed to come from compile-time information\nas opposed to run-time enum values.",null,null],[17,"CUBE_FACES","","A constant array of cube faces in the order they map to the hardware.",null,null],[17,"RO_DEPTH","","Depth is read-only in the view.",null,null],[17,"RO_STENCIL","","Stencil is read-only in the view.",null,null],[17,"RO_DEPTH_STENCIL","","Both depth and stencil are read-only.",null,null],[11,"clone","","",145,null],[11,"fmt","","",145,null],[11,"eq","","",145,null],[11,"ne","","",145,null],[11,"fmt","","",145,null],[11,"description","","",145,null],[11,"cmp","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"partial_cmp","","",146,null],[11,"lt","","",146,null],[11,"le","","",146,null],[11,"gt","","",146,null],[11,"ge","","",146,null],[11,"hash","","",146,null],[11,"clone","","",146,null],[11,"fmt","","",146,null],[11,"from","","",146,{"inputs":[{"name":"numsamples"}],"output":{"name":"aamode"}}],[11,"get_num_fragments","","Return the number of actual data fragments stored per texel.",146,null],[11,"needs_resolve","","Return true if the surface has to be resolved before sampling.",146,null],[11,"cmp","","",147,null],[11,"eq","","",147,null],[11,"ne","","",147,null],[11,"partial_cmp","","",147,null],[11,"lt","","",147,null],[11,"le","","",147,null],[11,"gt","","",147,null],[11,"ge","","",147,null],[11,"hash","","",147,null],[11,"clone","","",147,null],[11,"fmt","","",147,null],[11,"cmp","","",148,null],[11,"eq","","",148,null],[11,"partial_cmp","","",148,null],[11,"hash","","",148,null],[11,"clone","","",148,null],[11,"fmt","","",148,null],[11,"cmp","","",149,null],[11,"eq","","",149,null],[11,"ne","","",149,null],[11,"partial_cmp","","",149,null],[11,"lt","","",149,null],[11,"le","","",149,null],[11,"gt","","",149,null],[11,"ge","","",149,null],[11,"hash","","",149,null],[11,"clone","","",149,null],[11,"fmt","","",149,null],[11,"get_dimensions","","Get texture dimensions, with 0 values where not applicable.",149,null],[11,"get_level_dimensions","","Get the dimensionality of a particular mipmap level.",149,null],[11,"get_num_levels","","Count the number of mipmap levels.",149,null],[11,"get_num_slices","","Return the number of slices for an array, or None for non-arrays.",149,null],[11,"is_cube","","Check if it&#39;s one of the cube kinds.",149,null],[11,"cmp","","",138,null],[11,"eq","","",138,null],[11,"ne","","",138,null],[11,"partial_cmp","","",138,null],[11,"lt","","",138,null],[11,"le","","",138,null],[11,"gt","","",138,null],[11,"ge","","",138,null],[11,"hash","","",138,null],[11,"clone","","",138,null],[11,"fmt","","",138,null],[11,"get_texel_count","","Get the total number of texels.",138,null],[11,"convert","","Convert into a differently typed format.",138,null],[11,"is_inside","","Check if it fits inside given dimensions.",138,null],[11,"cmp","","",150,null],[11,"eq","","",150,null],[11,"partial_cmp","","",150,null],[11,"hash","","",150,null],[11,"clone","","",150,null],[11,"fmt","","",150,null],[11,"clone","","",151,null],[11,"fmt","","",151,null],[11,"hash","","",151,null],[11,"eq","","",151,null],[11,"ne","","",151,null],[11,"partial_cmp","","",151,null],[11,"lt","","",151,null],[11,"le","","",151,null],[11,"gt","","",151,null],[11,"ge","","",151,null],[11,"from","","",151,{"inputs":[{"name":"f32"}],"output":{"name":"lod"}}],[11,"into","","",151,null],[11,"clone","","",139,null],[11,"fmt","","",139,null],[11,"hash","","",139,null],[11,"eq","","",139,null],[11,"ne","","",139,null],[11,"partial_cmp","","",139,null],[11,"lt","","",139,null],[11,"le","","",139,null],[11,"gt","","",139,null],[11,"ge","","",139,null],[11,"from","","",139,null],[11,"into","","",139,null],[11,"clone","","",140,null],[11,"fmt","","",140,null],[11,"hash","","",140,null],[11,"eq","","",140,null],[11,"ne","","",140,null],[11,"partial_cmp","","",140,null],[11,"lt","","",140,null],[11,"le","","",140,null],[11,"gt","","",140,null],[11,"ge","","",140,null],[11,"new","","Create a new sampler description with a given filter method and wrapping mode, using no LOD\nmodifications.",140,{"inputs":[{"name":"filtermethod"},{"name":"wrapmode"}],"output":{"name":"samplerinfo"}}],[11,"cmp","","",141,null],[11,"eq","","",141,null],[11,"ne","","",141,null],[11,"partial_cmp","","",141,null],[11,"lt","","",141,null],[11,"le","","",141,null],[11,"gt","","",141,null],[11,"ge","","",141,null],[11,"hash","","",141,null],[11,"clone","","",141,null],[11,"fmt","","",141,null],[11,"to_image_info","","Get image info for a given mip.",141,null],[11,"to_raw_image_info","","Get the raw image info for a given mip and a channel type.",141,null],[11,"cmp","","",142,null],[11,"eq","","",142,null],[11,"ne","","",142,null],[11,"partial_cmp","","",142,null],[11,"lt","","",142,null],[11,"le","","",142,null],[11,"gt","","",142,null],[11,"ge","","",142,null],[11,"hash","","",142,null],[11,"clone","","",142,null],[11,"fmt","","",142,null],[11,"cmp","","",143,null],[11,"eq","","",143,null],[11,"ne","","",143,null],[11,"partial_cmp","","",143,null],[11,"lt","","",143,null],[11,"le","","",143,null],[11,"gt","","",143,null],[11,"ge","","",143,null],[11,"hash","","",143,null],[11,"clone","","",143,null],[11,"fmt","","",143,null],[11,"eq","","",152,null],[11,"ne","","",152,null],[11,"clone","","",152,null],[11,"partial_cmp","","",152,null],[11,"lt","","",152,null],[11,"le","","",152,null],[11,"gt","","",152,null],[11,"ge","","",152,null],[11,"cmp","","",152,null],[11,"hash","","",152,null],[11,"fmt","","",152,null],[11,"empty","","Returns an empty set of flags.",152,{"inputs":[],"output":{"name":"depthstencilflags"}}],[11,"all","","Returns the set containing all flags.",152,{"inputs":[],"output":{"name":"depthstencilflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",152,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",152,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",152,{"inputs":[{"name":"u8"}],"output":{"name":"depthstencilflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",152,null],[11,"is_all","","Returns `true` if all flags are currently set.",152,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",152,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",152,null],[11,"insert","","Inserts the specified flags in-place.",152,null],[11,"remove","","Removes the specified flags in-place.",152,null],[11,"toggle","","Toggles the specified flags in-place.",152,null],[11,"bitor","","Returns the union of the two sets of flags.",152,null],[11,"bitor_assign","","Adds the set of flags.",152,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",152,null],[11,"bitxor_assign","","Toggles the set of flags.",152,null],[11,"bitand","","Returns the intersection between the two sets of flags.",152,null],[11,"bitand_assign","","Disables all flags disabled in the set.",152,null],[11,"sub","","Returns the set difference of the two sets of flags.",152,null],[11,"sub_assign","","Disables all flags enabled in the set.",152,null],[11,"not","","Returns the complement of this set of flags.",152,null],[11,"extend","","",152,null],[11,"from_iter","","",152,{"inputs":[{"name":"t"}],"output":{"name":"depthstencilflags"}}],[11,"cmp","","",144,null],[11,"eq","","",144,null],[11,"ne","","",144,null],[11,"partial_cmp","","",144,null],[11,"lt","","",144,null],[11,"le","","",144,null],[11,"gt","","",144,null],[11,"ge","","",144,null],[11,"hash","","",144,null],[11,"clone","","",144,null],[11,"fmt","","",144,null],[11,"from","","",144,{"inputs":[{"name":"renderdesc"}],"output":{"name":"depthstencildesc"}}],[6,"VertexCount","gfx_core","Draw vertex count.",null,null],[6,"InstanceCount","","Draw number of instances",null,null],[6,"AttributeSlot","","Slot for an attribute.",null,null],[6,"ConstantBufferSlot","","Slot for a constant buffer object.",null,null],[6,"ResourceViewSlot","","Slot for a shader resource view.",null,null],[6,"UnorderedViewSlot","","Slot for an unordered access object.",null,null],[6,"ColorSlot","","Slot for an active color buffer.",null,null],[6,"SamplerSlot","","Slot for a sampler.",null,null],[17,"MAX_VERTEX_ATTRIBUTES","","Compile-time maximum number of vertex attributes.",null,null],[17,"MAX_COLOR_TARGETS","","Compile-time maximum number of color targets.",null,null],[17,"MAX_CONSTANT_BUFFERS","","Compile-time maximum number of constant buffers.",null,null],[17,"MAX_RESOURCE_VIEWS","","Compile-time maximum number of shader resource views (SRV).",null,null],[17,"MAX_UNORDERED_VIEWS","","Compile-time maximum number of unordered access views (UAV).",null,null],[17,"MAX_SAMPLERS","","Compile-time maximum number of samplers.",null,null],[8,"Resources","","Different types of a specific API.",null,null],[16,"Buffer","","",153,null],[16,"Shader","","",153,null],[16,"Program","","",153,null],[16,"PipelineStateObject","","",153,null],[16,"Texture","","",153,null],[16,"ShaderResourceView","","",153,null],[16,"UnorderedAccessView","","",153,null],[16,"RenderTargetView","","",153,null],[16,"DepthStencilView","","",153,null],[16,"Sampler","","",153,null],[16,"Fence","","",153,null],[8,"Device","","A `Device` is responsible for submitting `CommandBuffer`s to the GPU.",null,null],[16,"Resources","","Associated `Resources` type.",154,null],[16,"CommandBuffer","","Associated `CommandBuffer` type. Every `Device` type can only work with one `CommandBuffer`\ntype.",154,null],[10,"get_capabilities","","Returns the capabilities of this `Ðevice`.",154,null],[10,"pin_submitted_resources","","Pin everything from this handle manager to live for a frame.",154,null],[10,"submit","","Submits a `CommandBuffer` to the GPU for execution.",154,null],[10,"cleanup","","Cleanup unused resources. This should be called between frames.",154,null],[8,"DeviceFence","","Extension to the Device that allows for submitting of commands\naround a fence",null,null],[10,"fenced_submit","","Submit a command buffer to the stream creating a fence\nthe fence is signaled after the GPU has executed all commands\nin the buffer",155,null],[10,"fence_wait","","Wait on the supplied fence stalling the current thread until\nthe fence is satisfied",155,null],[11,"reference","","",156,null],[11,"reference","","",157,null],[11,"reference","","",158,null],[11,"reference","","",159,null],[11,"reference","","",160,null],[11,"get_usage","","Return the aggregated stage usage for the set.",19,null],[11,"clone","","",18,null],[11,"fmt","","",18,null],[11,"clone","","",20,null],[11,"fmt","","",20,null],[11,"hash","","",20,null],[11,"eq","","",20,null],[11,"cmp","","",21,null],[11,"eq","","",21,null],[11,"partial_cmp","","",21,null],[11,"hash","","",21,null],[11,"clone","","",21,null],[11,"fmt","","",21,null],[11,"bitxor","gfx_core::state","Returns the left flags, but with all the right flags toggled.",161,null],[11,"bitxor","gfx_core::target","Returns the left flags, but with all the right flags toggled.",162,null],[11,"clone","gfx_core::state","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",163,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[11,"clone","","",13,null],[11,"clone","","",14,null],[11,"clone","","",161,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"clone","gfx_core::target","",17,null],[11,"clone","","",162,null],[11,"bitor","gfx_core::state","Returns the union of the two sets of flags.",161,null],[11,"bitor","gfx_core::target","Returns the union of the two sets of flags.",162,null],[11,"fmt","gfx_core::state","",14,null],[11,"fmt","","",0,null],[11,"fmt","","",1,null],[11,"fmt","","",2,null],[11,"fmt","","",3,null],[11,"fmt","","",163,null],[11,"fmt","","",4,null],[11,"fmt","","",5,null],[11,"fmt","","",6,null],[11,"fmt","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",9,null],[11,"fmt","","",10,null],[11,"fmt","","",11,null],[11,"fmt","","",12,null],[11,"fmt","","",13,null],[11,"fmt","","",161,null],[11,"fmt","","",15,null],[11,"fmt","","",16,null],[11,"fmt","gfx_core::target","",17,null],[11,"fmt","","",162,null],[11,"bitxor_assign","gfx_core::state","Toggles the set of flags.",161,null],[11,"bitxor_assign","gfx_core::target","Toggles the set of flags.",162,null],[11,"partial_cmp","gfx_core::state","",0,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"partial_cmp","","",2,null],[11,"partial_cmp","","",3,null],[11,"lt","","",3,null],[11,"le","","",3,null],[11,"gt","","",3,null],[11,"ge","","",3,null],[11,"partial_cmp","","",163,null],[11,"partial_cmp","","",4,null],[11,"lt","","",4,null],[11,"le","","",4,null],[11,"gt","","",4,null],[11,"ge","","",4,null],[11,"partial_cmp","","",5,null],[11,"partial_cmp","","",6,null],[11,"partial_cmp","","",7,null],[11,"lt","","",7,null],[11,"le","","",7,null],[11,"gt","","",7,null],[11,"ge","","",7,null],[11,"partial_cmp","","",8,null],[11,"lt","","",8,null],[11,"le","","",8,null],[11,"gt","","",8,null],[11,"ge","","",8,null],[11,"partial_cmp","","",9,null],[11,"lt","","",9,null],[11,"le","","",9,null],[11,"gt","","",9,null],[11,"ge","","",9,null],[11,"partial_cmp","","",10,null],[11,"partial_cmp","","",11,null],[11,"partial_cmp","","",12,null],[11,"lt","","",12,null],[11,"le","","",12,null],[11,"gt","","",12,null],[11,"ge","","",12,null],[11,"partial_cmp","","",13,null],[11,"lt","","",13,null],[11,"le","","",13,null],[11,"gt","","",13,null],[11,"ge","","",13,null],[11,"partial_cmp","","",14,null],[11,"lt","","",14,null],[11,"le","","",14,null],[11,"gt","","",14,null],[11,"ge","","",14,null],[11,"partial_cmp","","",161,null],[11,"lt","","",161,null],[11,"le","","",161,null],[11,"gt","","",161,null],[11,"ge","","",161,null],[11,"partial_cmp","","",15,null],[11,"lt","","",15,null],[11,"le","","",15,null],[11,"gt","","",15,null],[11,"ge","","",15,null],[11,"partial_cmp","","",16,null],[11,"lt","","",16,null],[11,"le","","",16,null],[11,"gt","","",16,null],[11,"ge","","",16,null],[11,"partial_cmp","gfx_core::target","",17,null],[11,"lt","","",17,null],[11,"le","","",17,null],[11,"gt","","",17,null],[11,"ge","","",17,null],[11,"partial_cmp","","",162,null],[11,"lt","","",162,null],[11,"le","","",162,null],[11,"gt","","",162,null],[11,"ge","","",162,null],[11,"cmp","gfx_core::state","",0,null],[11,"cmp","","",2,null],[11,"cmp","","",163,null],[11,"cmp","","",5,null],[11,"cmp","","",6,null],[11,"cmp","","",7,null],[11,"cmp","","",8,null],[11,"cmp","","",9,null],[11,"cmp","","",10,null],[11,"cmp","","",11,null],[11,"cmp","","",12,null],[11,"cmp","","",13,null],[11,"cmp","","",161,null],[11,"cmp","gfx_core::target","",162,null],[11,"bitor_assign","gfx_core::state","Adds the set of flags.",161,null],[11,"bitor_assign","gfx_core::target","Adds the set of flags.",162,null],[11,"not","gfx_core::state","Returns the complement of this set of flags.",161,null],[11,"not","gfx_core::target","Returns the complement of this set of flags.",162,null],[11,"eq","gfx_core::state","",0,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"eq","","",2,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"eq","","",163,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",5,null],[11,"eq","","",6,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"eq","","",10,null],[11,"eq","","",11,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",16,null],[11,"ne","","",16,null],[11,"eq","gfx_core::target","",17,null],[11,"ne","","",17,null],[11,"eq","","",162,null],[11,"ne","","",162,null],[11,"hash","gfx_core::state","",0,null],[11,"hash","","",1,null],[11,"hash","","",2,null],[11,"hash","","",3,null],[11,"hash","","",163,null],[11,"hash","","",4,null],[11,"hash","","",5,null],[11,"hash","","",6,null],[11,"hash","","",7,null],[11,"hash","","",8,null],[11,"hash","","",9,null],[11,"hash","","",10,null],[11,"hash","","",11,null],[11,"hash","","",12,null],[11,"hash","","",13,null],[11,"hash","","",14,null],[11,"hash","","",161,null],[11,"hash","","",15,null],[11,"hash","gfx_core::target","",17,null],[11,"hash","","",162,null],[11,"bitand_assign","gfx_core::state","Disables all flags disabled in the set.",161,null],[11,"bitand_assign","gfx_core::target","Disables all flags disabled in the set.",162,null],[11,"default","gfx_core::state","",7,{"inputs":[],"output":{"name":"stencilside"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"stencil"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"depth"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"blendchannel"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"blend"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"color"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"refvalues"}}],[11,"from_iter","","",161,{"inputs":[{"name":"t"}],"output":{"name":"colormask"}}],[11,"from_iter","gfx_core::target","",162,{"inputs":[{"name":"t"}],"output":{"name":"mirror"}}],[11,"sub_assign","gfx_core::state","Disables all flags enabled in the set.",161,null],[11,"sub_assign","gfx_core::target","Disables all flags enabled in the set.",162,null],[11,"bitand","gfx_core::state","Returns the intersection between the two sets of flags.",161,null],[11,"bitand","gfx_core::target","Returns the intersection between the two sets of flags.",162,null],[11,"sub","gfx_core::state","Returns the set difference of the two sets of flags.",161,null],[11,"sub","gfx_core::target","Returns the set difference of the two sets of flags.",162,null],[11,"new_fill","gfx_core::state","Create a new filling rasterizer.",4,{"inputs":[],"output":{"name":"rasterizer"}}],[11,"with_cull_back","","Add back face culling.",4,null],[11,"with_offset","","Add polygon offset.",4,null],[11,"new","","Create a new stencil state with a given function.",8,null],[11,"new","","Create a new blend state with a given equation.",14,{"inputs":[{"name":"equation"},{"name":"factor"},{"name":"factor"}],"output":{"name":"blend"}}],[11,"empty","","Returns an empty set of flags.",161,{"inputs":[],"output":{"name":"colormask"}}],[11,"all","","Returns the set containing all flags.",161,{"inputs":[],"output":{"name":"colormask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",161,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",161,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",161,{"inputs":[{"name":"u8"}],"output":{"name":"colormask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",161,null],[11,"is_all","","Returns `true` if all flags are currently set.",161,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",161,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",161,null],[11,"insert","","Inserts the specified flags in-place.",161,null],[11,"remove","","Removes the specified flags in-place.",161,null],[11,"toggle","","Toggles the specified flags in-place.",161,null],[11,"empty","gfx_core::target","Returns an empty set of flags.",162,{"inputs":[],"output":{"name":"mirror"}}],[11,"all","","Returns the set containing all flags.",162,{"inputs":[],"output":{"name":"mirror"}}],[11,"bits","","Returns the raw value of the flags currently stored.",162,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",162,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",162,{"inputs":[{"name":"u8"}],"output":{"name":"mirror"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",162,null],[11,"is_all","","Returns `true` if all flags are currently set.",162,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",162,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",162,null],[11,"insert","","Inserts the specified flags in-place.",162,null],[11,"remove","","Removes the specified flags in-place.",162,null],[11,"toggle","","Toggles the specified flags in-place.",162,null]],"paths":[[4,"FrontFace"],[3,"Offset"],[4,"CullFace"],[4,"RasterMethod"],[3,"Rasterizer"],[4,"Comparison"],[4,"StencilOp"],[3,"StencilSide"],[3,"Stencil"],[3,"Depth"],[4,"Equation"],[4,"BlendValue"],[4,"Factor"],[3,"BlendChannel"],[3,"Blend"],[3,"Color"],[3,"RefValues"],[3,"Rect"],[3,"Capabilities"],[4,"ShaderSet"],[4,"Primitive"],[4,"IndexType"],[4,"ClearColor"],[8,"CommandBuffer"],[4,"DummyResources"],[3,"DummyDevice"],[3,"DummyCommandBuffer"],[3,"BufferInfo"],[4,"MapAccess"],[4,"BufferRole"],[4,"Usage"],[4,"BufferError"],[4,"BufferUpdateError"],[4,"ResourceViewError"],[4,"TargetViewError"],[4,"CombinedError"],[8,"Typed"],[8,"Factory"],[3,"Bind"],[3,"Swizzle"],[3,"Format"],[3,"U8Norm"],[3,"I8Norm"],[3,"U16Norm"],[3,"I16Norm"],[3,"F16"],[4,"ChannelType"],[4,"SurfaceType"],[4,"ChannelSource"],[8,"SurfaceTyped"],[8,"ChannelTyped"],[8,"Formatted"],[4,"Int"],[4,"Uint"],[4,"Inorm"],[4,"Unorm"],[4,"Float"],[4,"Srgb"],[4,"R4_G4"],[4,"R4_G4_B4_A4"],[4,"R5_G5_B5_A1"],[4,"R5_G6_B5"],[4,"R8"],[4,"R8_G8"],[4,"R8_G8_B8_A8"],[4,"R10_G10_B10_A2"],[4,"R11_G11_B10"],[4,"R16"],[4,"R16_G16"],[4,"R16_G16_B16"],[4,"R16_G16_B16_A16"],[4,"R32"],[4,"R32_G32"],[4,"R32_G32_B32"],[4,"R32_G32_B32_A32"],[4,"D16"],[4,"D24"],[4,"D24_S8"],[4,"D32"],[8,"Producer"],[3,"RawBuffer"],[3,"Buffer"],[3,"Shader"],[3,"Program"],[3,"RawPipelineState"],[3,"RawTexture"],[3,"Texture"],[3,"RawShaderResourceView"],[3,"ShaderResourceView"],[3,"RawUnorderedAccessView"],[3,"UnorderedAccessView"],[3,"RawRenderTargetView"],[3,"RawDepthStencilView"],[3,"RenderTargetView"],[3,"DepthStencilView"],[3,"Sampler"],[3,"Fence"],[3,"Manager"],[8,"Raw"],[8,"Builder"],[3,"Readable"],[3,"Writable"],[3,"RW"],[3,"ColorInfo"],[3,"DepthStencilInfo"],[3,"Element"],[3,"Descriptor"],[3,"VertexBufferSet"],[3,"ConstantBufferParam"],[3,"ResourceViewParam"],[3,"UnorderedViewParam"],[3,"SamplerParam"],[3,"PixelTargetSet"],[3,"CreationError"],[3,"SamplerType"],[3,"AttributeVar"],[3,"ConstVar"],[3,"ConstantBufferVar"],[3,"TextureVar"],[3,"UnorderedVar"],[3,"SamplerVar"],[3,"OutputVar"],[3,"ProgramInfo"],[4,"IsArray"],[4,"IsComparison"],[4,"IsMultiSample"],[4,"IsRect"],[4,"MatrixFormat"],[4,"TextureType"],[4,"BaseType"],[4,"ContainerType"],[4,"Stage"],[4,"UniformValue"],[4,"CompatibilityError"],[4,"CreateShaderError"],[8,"BaseTyped"],[8,"Formatted"],[3,"Usage"],[3,"ImageInfoCommon"],[3,"PackedColor"],[3,"SamplerInfo"],[3,"Descriptor"],[3,"ResourceDesc"],[3,"RenderDesc"],[3,"DepthStencilDesc"],[4,"Error"],[4,"AaMode"],[4,"FilterMethod"],[4,"CubeFace"],[4,"Kind"],[4,"WrapMode"],[3,"Lod"],[3,"DepthStencilFlags"],[8,"Resources"],[8,"Device"],[8,"DeviceFence"],[3,"VertexShader"],[3,"HullShader"],[3,"DomainShader"],[3,"GeometryShader"],[3,"PixelShader"],[3,"ColorMask"],[3,"Mirror"],[3,"MultiSample"]]};
searchIndex["freetype"] = {"doc":"","items":[[6,"FT_Byte","freetype::ffi","",null,null],[6,"FT_Bytes","","",null,null],[6,"FT_Char","","",null,null],[6,"FT_Int","","",null,null],[6,"FT_UInt","","",null,null],[6,"FT_Int16","","",null,null],[6,"FT_UInt16","","",null,null],[6,"FT_Int32","","",null,null],[6,"FT_UInt32","","",null,null],[6,"FT_Int64","","",null,null],[6,"FT_UInt64","","",null,null],[6,"FT_Short","","",null,null],[6,"FT_UShort","","",null,null],[6,"FT_Long","","",null,null],[6,"FT_ULong","","",null,null],[6,"FT_Bool","","",null,null],[6,"FT_Offset","","",null,null],[6,"FT_PtrDist","","",null,null],[6,"FT_String","","",null,null],[6,"FT_Tag","","",null,null],[6,"FT_Error","","",null,null],[6,"FT_Fixed","","",null,null],[6,"FT_Pointer","","",null,null],[6,"FT_Pos","","",null,null],[6,"FT_FWord","","",null,null],[6,"FT_UFWord","","",null,null],[6,"FT_F2Dot14","","",null,null],[6,"FT_F26Dot6","","",null,null],[6,"FT_Generic_Finalizer","","",null,null],[6,"FT_StreamDesc","","",null,null],[6,"FT_Stream_IoFunc","","",null,null],[6,"FT_Stream_CloseFunc","","",null,null],[6,"FT_Alloc_Func","","",null,null],[6,"FT_Free_Func","","",null,null],[6,"FT_Realloc_Func","","",null,null],[8,"FTErrorMethods","","",null,null],[10,"succeeded","","",0,null],[3,"FT_Vector","","",null,null],[12,"x","","",1,null],[12,"y","","",1,null],[3,"FT_BBox","","",null,null],[12,"xMin","","",2,null],[12,"yMin","","",2,null],[12,"xMax","","",2,null],[12,"yMax","","",2,null],[3,"FT_Matrix","","",null,null],[12,"xx","","",3,null],[12,"xy","","",3,null],[12,"yx","","",3,null],[12,"yy","","",3,null],[3,"FT_UnitVector","","",null,null],[12,"x","","",4,null],[12,"y","","",4,null],[3,"FT_Bitmap","","",null,null],[12,"rows","","",5,null],[12,"width","","",5,null],[12,"pitch","","",5,null],[12,"buffer","","",5,null],[12,"num_grays","","",5,null],[12,"pixel_mode","","",5,null],[12,"palette_mode","","",5,null],[12,"palette","","",5,null],[3,"FT_Data","","",null,null],[12,"pointer","","",6,null],[12,"length","","",6,null],[3,"FT_Generic","","",null,null],[12,"data","","",7,null],[12,"finalizer","","",7,null],[3,"FT_Size_Metrics","","",null,null],[12,"x_ppem","","",8,null],[12,"y_ppem","","",8,null],[12,"x_scale","","",8,null],[12,"y_scale","","",8,null],[12,"ascender","","",8,null],[12,"descender","","",8,null],[12,"height","","",8,null],[12,"max_advance","","",8,null],[3,"FT_Outline","","",null,null],[12,"n_contours","","",9,null],[12,"n_points","","",9,null],[12,"points","","",9,null],[12,"tags","","",9,null],[12,"contours","","",9,null],[12,"flags","","",9,null],[3,"FT_Glyph_Metrics","","",null,null],[12,"width","","",10,null],[12,"height","","",10,null],[12,"horiBearingX","","",10,null],[12,"horiBearingY","","",10,null],[12,"horiAdvance","","",10,null],[12,"vertBearingX","","",10,null],[12,"vertBearingY","","",10,null],[12,"vertAdvance","","",10,null],[3,"FT_Parameter","","",null,null],[12,"tag","","",11,null],[12,"data","","",11,null],[3,"FT_Open_Args","","",null,null],[12,"flags","","",12,null],[12,"memory_base","","",12,null],[12,"memory_size","","",12,null],[12,"pathname","","",12,null],[12,"stream","","",12,null],[12,"driver","","",12,null],[12,"num_params","","",12,null],[12,"params","","",12,null],[3,"FT_Bitmap_Size","","",null,null],[12,"height","","",13,null],[12,"width","","",13,null],[12,"size","","",13,null],[12,"x_ppem","","",13,null],[12,"y_ppem","","",13,null],[3,"TT_OS2","","",null,null],[12,"version","","",14,null],[12,"xAvgCharWidth","","",14,null],[12,"usWeightClass","","",14,null],[12,"usWidthClass","","",14,null],[12,"fsType","","",14,null],[12,"ySubscriptXSize","","",14,null],[12,"ySubscriptYSize","","",14,null],[12,"ySubscriptXOffset","","",14,null],[12,"ySubscriptYOffset","","",14,null],[12,"ySuperscriptXSize","","",14,null],[12,"ySuperscriptYSize","","",14,null],[12,"ySuperscriptXOffset","","",14,null],[12,"ySuperscriptYOffset","","",14,null],[12,"yStrikeoutSize","","",14,null],[12,"yStrikeoutPosition","","",14,null],[12,"sFamilyClass","","",14,null],[12,"panose","","",14,null],[12,"ulUnicodeRange1","","",14,null],[12,"ulUnicodeRange2","","",14,null],[12,"ulUnicodeRange3","","",14,null],[12,"ulUnicodeRange4","","",14,null],[12,"ulCodePageRange1","","",14,null],[12,"ulCodePageRange2","","",14,null],[12,"sxHeight","","",14,null],[12,"sCapHeight","","",14,null],[12,"usDefaultChar","","",14,null],[12,"usBreakChar","","",14,null],[12,"usMaxContext","","",14,null],[6,"enum_FT_Sfnt_Tag_","","",null,null],[17,"ft_sfnt_head","","",null,null],[17,"ft_sfnt_maxp","","",null,null],[17,"ft_sfnt_os2","","",null,null],[17,"ft_sfnt_hhea","","",null,null],[17,"ft_sfnt_vhea","","",null,null],[17,"ft_sfnt_post","","",null,null],[17,"ft_sfnt_pclt","","",null,null],[17,"ft_sfnt_max","","",null,null],[6,"FT_Sfnt_Tag","","",null,null],[6,"FT_Pixel_Mode","","",null,null],[17,"FT_PIXEL_MODE_NONE","","",null,null],[17,"FT_PIXEL_MODE_MONO","","",null,null],[17,"FT_PIXEL_MODE_GRAY","","",null,null],[17,"FT_PIXEL_MODE_GRAY2","","",null,null],[17,"FT_PIXEL_MODE_GRAY4","","",null,null],[17,"FT_PIXEL_MODE_LCD","","",null,null],[17,"FT_PIXEL_MODE_LCD_V","","",null,null],[17,"FT_PIXEL_MODE_BGRA","","",null,null],[17,"FT_PIXEL_MODE_MAX","","",null,null],[6,"FT_Glyph_Format","","",null,null],[17,"FT_GLYPH_FORMAT_NONE","","",null,null],[17,"FT_GLYPH_FORMAT_COMPOSITE","","",null,null],[17,"FT_GLYPH_FORMAT_BITMAP","","",null,null],[17,"FT_GLYPH_FORMAT_OUTLINE","","",null,null],[17,"FT_GLYPH_FORMAT_PLOTTER","","",null,null],[6,"FT_Render_Mode","","",null,null],[17,"FT_RENDER_MODE_NORMAL","","",null,null],[17,"FT_RENDER_MODE_LIGHT","","",null,null],[17,"FT_RENDER_MODE_MONO","","",null,null],[17,"FT_RENDER_MODE_LCD","","",null,null],[17,"FT_RENDER_MODE_LCD_V","","",null,null],[17,"FT_RENDER_MODE_MAX","","",null,null],[6,"FT_LcdFilter","","",null,null],[17,"FT_LCD_FILTER_NONE","","",null,null],[17,"FT_LCD_FILTER_DEFAULT","","",null,null],[17,"FT_LCD_FILTER_LIGHT","","",null,null],[17,"FT_LCD_FILTER_LEGACY1","","",null,null],[17,"FT_LCD_FILTER_LEGACY","","",null,null],[17,"FT_LCD_FILTER_MAX","","",null,null],[6,"FT_Encoding","","",null,null],[17,"FT_ENCODING_NONE","","",null,null],[17,"FT_ENCODING_MS_SYMBOL","","",null,null],[17,"FT_ENCODING_UNICODE","","",null,null],[17,"FT_ENCODING_SJIS","","",null,null],[17,"FT_ENCODING_GB2312","","",null,null],[17,"FT_ENCODING_BIG5","","",null,null],[17,"FT_ENCODING_WANSUNG","","",null,null],[17,"FT_ENCODING_JOHAB","","",null,null],[17,"FT_ENCODING_MS_SJIS","","",null,null],[17,"FT_ENCODING_MS_GB2312","","",null,null],[17,"FT_ENCODING_MS_BIG5","","",null,null],[17,"FT_ENCODING_MS_WANSUNG","","",null,null],[17,"FT_ENCODING_MS_JOHAB","","",null,null],[17,"FT_ENCODING_ADOBE_STANDARD","","",null,null],[17,"FT_ENCODING_ADOBE_EXPERT","","",null,null],[17,"FT_ENCODING_ADOBE_CUSTOM","","",null,null],[17,"FT_ENCODING_ADOBE_LATIN_1","","",null,null],[17,"FT_ENCODING_OLD_LATIN_2","","",null,null],[17,"FT_ENCODING_APPLE_ROMAN","","",null,null],[6,"FT_Size_Request_Type","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_NOMINAL","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_REAL_DIM","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_BBOX","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_CELL","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_SCALES","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_MAX","","",null,null],[6,"FT_Kerning_Mode","","",null,null],[17,"FT_KERNING_DEFAULT","","",null,null],[17,"FT_KERNING_UNFITTED","","",null,null],[17,"FT_KERNING_UNSCALED","","",null,null],[6,"FT_Glyph_BBox_Mode","","",null,null],[17,"FT_GLYPH_BBOX_UNSCALED","","",null,null],[17,"FT_GLYPH_BBOX_SUBPIXELS","","",null,null],[17,"FT_GLYPH_BBOX_GRIDFIT","","",null,null],[17,"FT_GLYPH_BBOX_TRUNCATE","","",null,null],[17,"FT_GLYPH_BBOX_PIXELS","","",null,null],[17,"FT_FACE_FLAG_SCALABLE","","",null,null],[17,"FT_FACE_FLAG_FIXED_SIZES","","",null,null],[17,"FT_FACE_FLAG_FIXED_WIDTH","","",null,null],[17,"FT_FACE_FLAG_SFNT","","",null,null],[17,"FT_FACE_FLAG_HORIZONTAL","","",null,null],[17,"FT_FACE_FLAG_VERTICAL","","",null,null],[17,"FT_FACE_FLAG_KERNING","","",null,null],[17,"FT_FACE_FLAG_FAST_GLYPHS","","",null,null],[17,"FT_FACE_FLAG_MULTIPLE_MASTERS","","",null,null],[17,"FT_FACE_FLAG_GLYPH_NAMES","","",null,null],[17,"FT_FACE_FLAG_EXTERNAL_STREAM","","",null,null],[17,"FT_FACE_FLAG_HINTER","","",null,null],[17,"FT_FACE_FLAG_CID_KEYED","","",null,null],[17,"FT_FACE_FLAG_TRICKY","","",null,null],[17,"FT_FACE_FLAG_COLOR","","",null,null],[17,"FT_STYLE_FLAG_ITALIC","","",null,null],[17,"FT_STYLE_FLAG_BOLD","","",null,null],[17,"FT_OPEN_MEMORY","","",null,null],[17,"FT_OPEN_STREAM","","",null,null],[17,"FT_OPEN_PATHNAME","","",null,null],[17,"FT_OPEN_DRIVER","","",null,null],[17,"FT_OPEN_PARAMS","","",null,null],[17,"FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS","","",null,null],[17,"FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES","","",null,null],[17,"FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID","","",null,null],[17,"FT_SUBGLYPH_FLAG_SCALE","","",null,null],[17,"FT_SUBGLYPH_FLAG_XY_SCALE","","",null,null],[17,"FT_SUBGLYPH_FLAG_2X2","","",null,null],[17,"FT_SUBGLYPH_FLAG_USE_MY_METRICS","","",null,null],[17,"FT_LOAD_DEFAULT","","",null,null],[17,"FT_LOAD_NO_SCALE","","",null,null],[17,"FT_LOAD_NO_HINTING","","",null,null],[17,"FT_LOAD_RENDER","","",null,null],[17,"FT_LOAD_NO_BITMAP","","",null,null],[17,"FT_LOAD_VERTICAL_LAYOUT","","",null,null],[17,"FT_LOAD_FORCE_AUTOHINT","","",null,null],[17,"FT_LOAD_CROP_BITMAP","","",null,null],[17,"FT_LOAD_PEDANTIC","","",null,null],[17,"FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH","","",null,null],[17,"FT_LOAD_NO_RECURSE","","",null,null],[17,"FT_LOAD_IGNORE_TRANSFORM","","",null,null],[17,"FT_LOAD_MONOCHROME","","",null,null],[17,"FT_LOAD_LINEAR_DESIGN","","",null,null],[17,"FT_LOAD_NO_AUTOHINT","","",null,null],[17,"FT_LOAD_COLOR","","",null,null],[17,"FT_LOAD_TARGET_NORMAL","","",null,null],[17,"FT_LOAD_TARGET_LIGHT","","",null,null],[17,"FT_LOAD_TARGET_MONO","","",null,null],[17,"FT_LOAD_TARGET_LCD","","",null,null],[17,"FT_LOAD_TARGET_LCD_V","","",null,null],[17,"FT_FSTYPE_INSTALLABLE_EMBEDDING","","",null,null],[17,"FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING","","",null,null],[17,"FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING","","",null,null],[17,"FT_FSTYPE_EDITABLE_EMBEDDING","","",null,null],[17,"FT_FSTYPE_NO_SUBSETTING","","",null,null],[17,"FT_FSTYPE_BITMAP_EMBEDDING_ONLY","","",null,null],[17,"FT_Err_Ok","","",null,null],[17,"FT_Err_Cannot_Open_Resource","","",null,null],[17,"FT_Err_Unknown_File_Format","","",null,null],[17,"FT_Err_Invalid_File_Format","","",null,null],[17,"FT_Err_Invalid_Version","","",null,null],[17,"FT_Err_Lower_Module_Version","","",null,null],[17,"FT_Err_Invalid_Argument","","",null,null],[17,"FT_Err_Unimplemented_Feature","","",null,null],[17,"FT_Err_Invalid_Table","","",null,null],[17,"FT_Err_Invalid_Offset","","",null,null],[17,"FT_Err_Array_Too_Large","","",null,null],[17,"FT_Err_Missing_Module","","",null,null],[17,"FT_Err_Missing_Property","","",null,null],[17,"FT_Err_Invalid_Glyph_Index","","",null,null],[17,"FT_Err_Invalid_Character_Code","","",null,null],[17,"FT_Err_Invalid_Glyph_Format","","",null,null],[17,"FT_Err_Cannot_Render_Glyph","","",null,null],[17,"FT_Err_Invalid_Outline","","",null,null],[17,"FT_Err_Invalid_Composite","","",null,null],[17,"FT_Err_Too_Many_Hints","","",null,null],[17,"FT_Err_Invalid_Pixel_Size","","",null,null],[17,"FT_Err_Invalid_Handle","","",null,null],[17,"FT_Err_Invalid_Library_Handle","","",null,null],[17,"FT_Err_Invalid_Driver_Handle","","",null,null],[17,"FT_Err_Invalid_Face_Handle","","",null,null],[17,"FT_Err_Invalid_Size_Handle","","",null,null],[17,"FT_Err_Invalid_Slot_Handle","","",null,null],[17,"FT_Err_Invalid_CharMap_Handle","","",null,null],[17,"FT_Err_Invalid_Cache_Handle","","",null,null],[17,"FT_Err_Invalid_Stream_Handle","","",null,null],[17,"FT_Err_Too_Many_Drivers","","",null,null],[17,"FT_Err_Too_Many_Extensions","","",null,null],[17,"FT_Err_Out_Of_Memory","","",null,null],[17,"FT_Err_Unlisted_Object","","",null,null],[17,"FT_Err_Cannot_Open_Stream","","",null,null],[17,"FT_Err_Invalid_Stream_Seek","","",null,null],[17,"FT_Err_Invalid_Stream_Skip","","",null,null],[17,"FT_Err_Invalid_Stream_Read","","",null,null],[17,"FT_Err_Invalid_Stream_Operation","","",null,null],[17,"FT_Err_Invalid_Frame_Operation","","",null,null],[17,"FT_Err_Nested_Frame_Access","","",null,null],[17,"FT_Err_Invalid_Frame_Read","","",null,null],[17,"FT_Err_Raster_Uninitialized","","",null,null],[17,"FT_Err_Raster_Corrupted","","",null,null],[17,"FT_Err_Raster_Overflow","","",null,null],[17,"FT_Err_Raster_Negative_Height","","",null,null],[17,"FT_Err_Too_Many_Caches","","",null,null],[17,"FT_Err_Invalid_Opcode","","",null,null],[17,"FT_Err_Too_Few_Arguments","","",null,null],[17,"FT_Err_Stack_Overflow","","",null,null],[17,"FT_Err_Code_Overflow","","",null,null],[17,"FT_Err_Bad_Argument","","",null,null],[17,"FT_Err_Divide_By_Zero","","",null,null],[17,"FT_Err_Invalid_Reference","","",null,null],[17,"FT_Err_Debug_OpCode","","",null,null],[17,"FT_Err_ENDF_In_Exec_Stream","","",null,null],[17,"FT_Err_Nested_DEFS","","",null,null],[17,"FT_Err_Invalid_CodeRange","","",null,null],[17,"FT_Err_Execution_Too_Long","","",null,null],[17,"FT_Err_Too_Many_Function_Defs","","",null,null],[17,"FT_Err_Too_Many_Instruction_Defs","","",null,null],[17,"FT_Err_Table_Missing","","",null,null],[17,"FT_Err_Horiz_Header_Missing","","",null,null],[17,"FT_Err_Locations_Missing","","",null,null],[17,"FT_Err_Name_Table_Missing","","",null,null],[17,"FT_Err_CMap_Table_Missing","","",null,null],[17,"FT_Err_Hmtx_Table_Missing","","",null,null],[17,"FT_Err_Post_Table_Missing","","",null,null],[17,"FT_Err_Invalid_Horiz_Metrics","","",null,null],[17,"FT_Err_Invalid_CharMap_Format","","",null,null],[17,"FT_Err_Invalid_PPem","","",null,null],[17,"FT_Err_Invalid_Vert_Metrics","","",null,null],[17,"FT_Err_Could_Not_Find_Context","","",null,null],[17,"FT_Err_Invalid_Post_Table_Format","","",null,null],[17,"FT_Err_Invalid_Post_Table","","",null,null],[17,"FT_Err_Syntax_Error","","",null,null],[17,"FT_Err_Stack_Underflow","","",null,null],[17,"FT_Err_Ignore","","",null,null],[17,"FT_Err_No_Unicode_Glyph_Name","","",null,null],[17,"FT_Err_Missing_Startfont_Field","","",null,null],[17,"FT_Err_Missing_Font_Field","","",null,null],[17,"FT_Err_Missing_Size_Field","","",null,null],[17,"FT_Err_Missing_Fontboundingbox_Field","","",null,null],[17,"FT_Err_Missing_Chars_Field","","",null,null],[17,"FT_Err_Missing_Startchar_Field","","",null,null],[17,"FT_Err_Missing_Encoding_Field","","",null,null],[17,"FT_Err_Missing_Bbx_Field","","",null,null],[17,"FT_Err_Bbx_Too_Big","","",null,null],[17,"FT_Err_Corrupted_Font_Header","","",null,null],[17,"FT_Err_Corrupted_Font_Glyphs","","",null,null],[17,"FT_Err_Max","","",null,null],[6,"FT_Library","","",null,null],[6,"FT_Face","","",null,null],[6,"FT_Size","","",null,null],[6,"FT_GlyphSlot","","",null,null],[6,"FT_CharMap","","",null,null],[6,"FT_Module","","",null,null],[6,"FT_Driver","","",null,null],[6,"FT_Renderer","","",null,null],[6,"FT_Size_Internal","","",null,null],[6,"FT_SubGlyph","","",null,null],[6,"FT_Slot_Internal","","",null,null],[6,"FT_Size_Request","","",null,null],[6,"FT_Face_Internal","","",null,null],[6,"FT_Stream","","",null,null],[6,"FT_Memory","","",null,null],[6,"FT_ListNode","","",null,null],[6,"FT_Glyph","","",null,null],[6,"FT_BitmapGlyph","","",null,null],[6,"FT_OutlineGlyph","","",null,null],[6,"TT_OS2_Internal","","",null,null],[6,"FT_LibraryRec","","",null,null],[6,"FT_ModuleRec","","",null,null],[6,"FT_DriverRec","","",null,null],[6,"FT_RendererRec","","",null,null],[6,"FT_Size_InternalRec","","",null,null],[6,"FT_SubGlyphRec","","",null,null],[6,"FT_Slot_InternalRec","","",null,null],[6,"FT_Face_InternalRec","","",null,null],[3,"FT_CharMapRec","","",null,null],[12,"face","","",15,null],[12,"encoding","","",15,null],[12,"platform_id","","",15,null],[12,"encoding_id","","",15,null],[3,"FT_FaceRec","","",null,null],[12,"num_faces","","",16,null],[12,"face_index","","",16,null],[12,"face_flags","","",16,null],[12,"style_flags","","",16,null],[12,"num_glyphs","","",16,null],[12,"family_name","","",16,null],[12,"style_name","","",16,null],[12,"num_fixed_sizes","","",16,null],[12,"available_sizes","","",16,null],[12,"num_charmaps","","",16,null],[12,"charmaps","","",16,null],[12,"generic","","",16,null],[12,"bbox","","",16,null],[12,"units_per_EM","","",16,null],[12,"ascender","","",16,null],[12,"descender","","",16,null],[12,"height","","",16,null],[12,"max_advance_width","","",16,null],[12,"max_advance_height","","",16,null],[12,"underline_position","","",16,null],[12,"underline_thickness","","",16,null],[12,"glyph","","",16,null],[12,"size","","",16,null],[12,"charmap","","",16,null],[12,"driver","","",16,null],[12,"memory","","",16,null],[12,"stream","","",16,null],[12,"sizes_list","","",16,null],[12,"autohint","","",16,null],[12,"extensions","","",16,null],[12,"internal","","",16,null],[3,"FT_GlyphSlotRec","","",null,null],[12,"library","","",17,null],[12,"face","","",17,null],[12,"next","","",17,null],[12,"reserved","","",17,null],[12,"generic","","",17,null],[12,"metrics","","",17,null],[12,"linearHoriAdvance","","",17,null],[12,"linearVertAdvance","","",17,null],[12,"advance","","",17,null],[12,"format","","",17,null],[12,"bitmap","","",17,null],[12,"bitmap_left","","",17,null],[12,"bitmap_top","","",17,null],[12,"outline","","",17,null],[12,"num_subglyphs","","",17,null],[12,"subglyphs","","",17,null],[12,"control_data","","",17,null],[12,"control_len","","",17,null],[12,"lsb_delta","","",17,null],[12,"rsb_delta","","",17,null],[12,"other","","",17,null],[12,"internal","","",17,null],[3,"FT_SizeRec","","",null,null],[12,"face","","",18,null],[12,"generic","","",18,null],[12,"metrics","","",18,null],[12,"internal","","",18,null],[3,"FT_StreamRec","","",null,null],[12,"base","","",19,null],[12,"size","","",19,null],[12,"pos","","",19,null],[12,"descriptor","","",19,null],[12,"pathname","","",19,null],[12,"read","","",19,null],[12,"close","","",19,null],[12,"memory","","",19,null],[12,"cursor","","",19,null],[12,"limit","","",19,null],[3,"FT_MemoryRec","","",null,null],[12,"user","","",20,null],[12,"alloc","","",20,null],[12,"free","","",20,null],[12,"realloc","","",20,null],[3,"FT_ListRec","","",null,null],[12,"head","","",21,null],[12,"tail","","",21,null],[3,"FT_ListNodeRec","","",null,null],[12,"prev","","",22,null],[12,"next","","",22,null],[12,"data","","",22,null],[3,"FT_Size_RequestRec","","",null,null],[12,"size_request_type","","",23,null],[12,"width","","",23,null],[12,"height","","",23,null],[12,"horiResolution","","",23,null],[12,"vertResolution","","",23,null],[3,"FT_GlyphRec","","",null,null],[12,"library","","",24,null],[12,"clazz","","",24,null],[12,"format","","",24,null],[12,"advance","","",24,null],[3,"FT_BitmapGlyphRec","","",null,null],[12,"root","","",25,null],[12,"left","","",25,null],[12,"top","","",25,null],[12,"bitmap","","",25,null],[3,"FT_OutlineGlyphRec","","",null,null],[12,"root","","",26,null],[12,"outline","","",26,null],[5,"FT_HAS_HORIZONTAL","","",null,null],[5,"FT_HAS_VERTICAL","","",null,null],[5,"FT_HAS_KERNING","","",null,null],[5,"FT_IS_SCALABLE","","",null,null],[5,"FT_IS_SFNT","","",null,null],[5,"FT_IS_FIXED_WIDTH","","",null,null],[5,"FT_HAS_FIXED_SIZES","","",null,null],[5,"FT_HAS_GLYPH_NAMES","","",null,null],[5,"FT_HAS_MULTIPLE_MASTERS","","",null,null],[5,"FT_IS_CID_KEYED","","",null,null],[5,"FT_IS_TRICKY","","",null,null],[5,"FT_HAS_COLOR","","",null,null],[5,"FT_Get_Sfnt_Table","","",null,null],[5,"FT_Init_FreeType","","",null,null],[5,"FT_Done_FreeType","","",null,null],[5,"FT_New_Library","","",null,null],[5,"FT_Done_Library","","",null,null],[5,"FT_Reference_Library","","",null,null],[5,"FT_Add_Default_Modules","","",null,null],[5,"FT_New_Face","","",null,null],[5,"FT_New_Memory_Face","","",null,null],[5,"FT_Open_Face","","",null,null],[5,"FT_Attach_File","","",null,null],[5,"FT_Attach_Stream","","",null,null],[5,"FT_Reference_Face","","",null,null],[5,"FT_Done_Face","","",null,null],[5,"FT_Select_Size","","",null,null],[5,"FT_Request_Size","","",null,null],[5,"FT_Set_Char_Size","","",null,null],[5,"FT_Set_Pixel_Sizes","","",null,null],[5,"FT_Library_SetLcdFilter","","",null,null],[5,"FT_Load_Glyph","","",null,null],[5,"FT_Load_Char","","",null,null],[5,"FT_Set_Transform","","",null,null],[5,"FT_Render_Glyph","","",null,null],[5,"FT_Get_Kerning","","",null,null],[5,"FT_Get_Track_Kerning","","",null,null],[5,"FT_Get_Glyph_Name","","",null,null],[5,"FT_Get_Postscript_Name","","",null,null],[5,"FT_Select_CharMap","","",null,null],[5,"FT_Set_Charmap","","",null,null],[5,"FT_Get_Charmap_Index","","",null,null],[5,"FT_Get_Char_Index","","",null,null],[5,"FT_Get_First_Char","","",null,null],[5,"FT_Get_Next_Char","","",null,null],[5,"FT_Get_Name_Index","","",null,null],[5,"FT_Get_SubGlyph_Info","","",null,null],[5,"FT_Get_FSType_Flags","","",null,null],[5,"FT_Get_Glyph","","",null,null],[5,"FT_Glyph_Copy","","",null,null],[5,"FT_Glyph_Transform","","",null,null],[5,"FT_Glyph_Get_CBox","","",null,null],[5,"FT_Glyph_To_Bitmap","","",null,null],[5,"FT_Done_Glyph","","",null,null],[5,"FT_MulDiv","","",null,{"inputs":[{"name":"i64"},{"name":"i64"},{"name":"i64"}],"output":{"name":"i64"}}],[5,"FT_MulFix","","",null,{"inputs":[{"name":"i64"},{"name":"i64"}],"output":{"name":"i64"}}],[5,"FT_DivFix","","",null,{"inputs":[{"name":"i64"},{"name":"i64"}],"output":{"name":"i64"}}],[5,"FT_RoundFix","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[5,"FT_CeilFix","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[5,"FT_FloorFix","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[0,"bitmap","freetype","",null,null],[3,"Bitmap","freetype::bitmap","",null,null],[4,"PixelMode","","An enumeration type used to describe the format of pixels in a given bitmap. Note that\nadditional formats may be added in the future.",null,null],[13,"None","","This value is reserved.",27,null],[13,"Mono","","A monochrome bitmap, using 1 bit per pixel. Note that pixels are\nstored in most-significant order (MSB), which means that the left-most\npixel in a byte has value 128.",27,null],[13,"Gray","","An 8-bit bitmap, generally used to represent anti-aliased glyph images.\nEach pixel is stored in one byte. Note that the number of `gray`\nlevels is stored in the `num_grays` field of the FT_Bitmap structure\n(it generally is 256).",27,null],[13,"Gray2","","A 2-bit per pixel bitmap, used to represent embedded anti-aliased\nbitmaps in font files according to the OpenType specification. We\nhaven&#39;t found a single font using this format, however.",27,null],[13,"Gray4","","A 4-bit per pixel bitmap, representing embedded anti-aliased bitmaps in\nfont files according to the OpenType specification. We haven&#39;t found a\nsingle font using this format, however.",27,null],[13,"Lcd","","An 8-bit bitmap, representing RGB or BGR decimated glyph images used\nfor display on LCD displays; the bitmap is three times wider than the\noriginal glyph image. See also FT_RENDER_MODE_LCD.",27,null],[13,"LcdV","","An 8-bit bitmap, representing RGB or BGR decimated glyph images used for\ndisplay on rotated LCD displays; the bitmap is three times taller than\nthe original glyph image. See also FT_RENDER_MODE_LCD_V.",27,null],[13,"Bgra","","An image with four 8-bit channels per pixel, representing a color image\n(such as emoticons) with alpha channel. For each pixel, the format is\nBGRA, which means, the blue channel comes first in memory. The color\nchannels are pre-multiplied and in the sRGB colorspace. For example,\nfull red at half-translucent opacity will be represented as\n`00,00,80,80`, not `00,00,FF,80`. See also FT_LOAD_COLOR.",27,null],[11,"clone","","",27,null],[11,"fmt","","",27,null],[11,"eq","","",27,null],[11,"from_raw","","",28,null],[11,"buffer","","A typeless pointer to the bitmap buffer. This value should be aligned\non 32-bit boundaries in most cases.",28,null],[11,"width","","The number of pixels in bitmap row.",28,null],[11,"rows","","The number of bitmap rows.",28,null],[11,"raw","","",28,null],[11,"pixel_mode","","The pixel mode, i.e., how pixel bits are stored. See `PixelMode` for\npossible values.",28,null],[11,"pitch","","The pitch&#39;s absolute value is the number of bytes taken by one bitmap row, including\npadding. However, the pitch is positive when the bitmap has a ‘down’ flow, and negative\nwhen it has an ‘up’ flow. In all cases, the pitch is an offset to add to a bitmap pointer\nin order to go down one row.",28,null],[0,"bitmap_glyph","freetype","",null,null],[3,"BitmapGlyph","freetype::bitmap_glyph","",null,null],[11,"clone","","",29,null],[11,"from_raw","","",29,{"inputs":[{"name":"ft_bitmapglyph"}],"output":{"name":"self"}}],[11,"left","","",29,null],[11,"top","","",29,null],[11,"bitmap","","",29,null],[11,"raw","","",29,null],[0,"error","freetype","",null,null],[4,"Error","freetype::error","",null,null],[13,"Ok","","",30,null],[13,"CannotOpenResource","","",30,null],[13,"UnknownFileFormat","","",30,null],[13,"InvalidFileFormat","","",30,null],[13,"InvalidVersion","","",30,null],[13,"LowerModuleVersion","","",30,null],[13,"InvalidArgument","","",30,null],[13,"UnimplementedFeature","","",30,null],[13,"InvalidTable","","",30,null],[13,"InvalidOffset","","",30,null],[13,"ArrayTooLarge","","",30,null],[13,"MissingModule","","",30,null],[13,"MissingProperty","","",30,null],[13,"InvalidGlyphIndex","","",30,null],[13,"InvalidCharacterCode","","",30,null],[13,"InvalidGlyphFormat","","",30,null],[13,"CannotRenderGlyph","","",30,null],[13,"InvalidOutline","","",30,null],[13,"InvalidComposite","","",30,null],[13,"TooManyHints","","",30,null],[13,"InvalidPixelSize","","",30,null],[13,"InvalidHandle","","",30,null],[13,"InvalidLibraryHandle","","",30,null],[13,"InvalidDriverHandle","","",30,null],[13,"InvalidFaceHandle","","",30,null],[13,"InvalidSizeHandle","","",30,null],[13,"InvalidSlotHandle","","",30,null],[13,"InvalidCharMapHandle","","",30,null],[13,"InvalidCacheHandle","","",30,null],[13,"InvalidStreamHandle","","",30,null],[13,"TooManyDrivers","","",30,null],[13,"TooManyExtensions","","",30,null],[13,"OutOfMemory","","",30,null],[13,"UnlistedObject","","",30,null],[13,"CannotOpenStream","","",30,null],[13,"InvalidStreamSeek","","",30,null],[13,"InvalidStreamSkip","","",30,null],[13,"InvalidStreamRead","","",30,null],[13,"InvalidStreamOperation","","",30,null],[13,"InvalidFrameOperation","","",30,null],[13,"NestedFrameAccess","","",30,null],[13,"InvalidFrameRead","","",30,null],[13,"RasterUninitialized","","",30,null],[13,"RasterCorrupted","","",30,null],[13,"RasterOverflow","","",30,null],[13,"RasterNegativeHeight","","",30,null],[13,"TooManyCaches","","",30,null],[13,"InvalidOpcode","","",30,null],[13,"TooFewArguments","","",30,null],[13,"StackOverflow","","",30,null],[13,"CodeOverflow","","",30,null],[13,"BadArgument","","",30,null],[13,"DivideByZero","","",30,null],[13,"InvalidReference","","",30,null],[13,"DebugOpCode","","",30,null],[13,"ENDFInExecStream","","",30,null],[13,"NestedDEFS","","",30,null],[13,"InvalidCodeRange","","",30,null],[13,"ExecutionTooLong","","",30,null],[13,"TooManyFunctionDefs","","",30,null],[13,"TooManyInstructionDefs","","",30,null],[13,"TableMissing","","",30,null],[13,"HorizHeaderMissing","","",30,null],[13,"LocationsMissing","","",30,null],[13,"NameTableMissing","","",30,null],[13,"CMapTableMissing","","",30,null],[13,"HmtxTableMissing","","",30,null],[13,"PostTableMissing","","",30,null],[13,"InvalidHorizMetrics","","",30,null],[13,"InvalidCharMapFormat","","",30,null],[13,"InvalidPPem","","",30,null],[13,"InvalidVertMetrics","","",30,null],[13,"CouldNotFindContext","","",30,null],[13,"InvalidPostTableFormat","","",30,null],[13,"InvalidPostTable","","",30,null],[13,"Syntax","","",30,null],[13,"StackUnderflow","","",30,null],[13,"Ignore","","",30,null],[13,"NoUnicodeGlyphName","","",30,null],[13,"MissingStartfontField","","",30,null],[13,"MissingFontField","","",30,null],[13,"MissingSizeField","","",30,null],[13,"MissingFontboundingboxField","","",30,null],[13,"MissingCharsField","","",30,null],[13,"MissingStartcharField","","",30,null],[13,"MissingEncodingField","","",30,null],[13,"MissingBbxField","","",30,null],[13,"BbxTooBig","","",30,null],[13,"CorruptedFontHeader","","",30,null],[13,"CorruptedFontGlyphs","","",30,null],[13,"Max","","",30,null],[13,"UnexpectedPixelMode","","",30,null],[13,"InvalidPath","","",30,null],[13,"Unknown","","",30,null],[6,"FtResult","","",null,null],[11,"clone","","",30,null],[11,"eq","","",30,null],[11,"fmt","","",30,null],[11,"from","","",30,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"fmt","","",30,null],[11,"description","","",30,null],[0,"face","freetype","",null,null],[3,"LoadFlag","freetype::face","",null,null],[3,"Face","","",null,null],[4,"KerningMode","","",null,null],[13,"KerningDefault","","",31,null],[13,"KerningUnfitted","","",31,null],[13,"KerningUnscaled","","",31,null],[17,"DEFAULT","","",null,null],[17,"NO_SCALE","","",null,null],[17,"NO_HINTING","","",null,null],[17,"RENDER","","",null,null],[17,"NO_BITMAP","","",null,null],[17,"VERTICAL_LAYOUT","","",null,null],[17,"FORCE_AUTOHINT","","",null,null],[17,"CROP_BITMAP","","",null,null],[17,"PEDANTIC","","",null,null],[17,"IGNORE_GLOBAL_ADVANCE_WITH","","",null,null],[17,"NO_RECURSE","","",null,null],[17,"IGNORE_TRANSFORM","","",null,null],[17,"MONOCHROME","","",null,null],[17,"LINEAR_DESIGN","","",null,null],[17,"NO_AUTOHINT","","",null,null],[17,"TARGET_NORMAL","","",null,null],[17,"TARGET_LIGHT","","",null,null],[17,"TARGET_MONO","","",null,null],[17,"TARGET_LCD","","",null,null],[17,"TARGET_LCD_V","","",null,null],[17,"COLOR","","",null,null],[11,"clone","","",31,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"clone","","",32,null],[11,"partial_cmp","","",32,null],[11,"lt","","",32,null],[11,"le","","",32,null],[11,"gt","","",32,null],[11,"ge","","",32,null],[11,"cmp","","",32,null],[11,"hash","","",32,null],[11,"fmt","","",32,null],[11,"empty","","Returns an empty set of flags.",32,{"inputs":[],"output":{"name":"loadflag"}}],[11,"all","","Returns the set containing all flags.",32,{"inputs":[],"output":{"name":"loadflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",32,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",32,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",32,{"inputs":[{"name":"i32"}],"output":{"name":"loadflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",32,null],[11,"is_all","","Returns `true` if all flags are currently set.",32,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",32,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",32,null],[11,"insert","","Inserts the specified flags in-place.",32,null],[11,"remove","","Removes the specified flags in-place.",32,null],[11,"toggle","","Toggles the specified flags in-place.",32,null],[11,"bitor","","Returns the union of the two sets of flags.",32,null],[11,"bitor_assign","","Adds the set of flags.",32,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",32,null],[11,"bitxor_assign","","Toggles the set of flags.",32,null],[11,"bitand","","Returns the intersection between the two sets of flags.",32,null],[11,"bitand_assign","","Disables all flags disabled in the set.",32,null],[11,"sub","","Returns the set difference of the two sets of flags.",32,null],[11,"sub_assign","","Disables all flags enabled in the set.",32,null],[11,"not","","Returns the complement of this set of flags.",32,null],[11,"extend","","",32,null],[11,"from_iter","","",32,{"inputs":[{"name":"t"}],"output":{"name":"loadflag"}}],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"hash","","",33,null],[11,"clone","","",33,null],[11,"from_raw","","",33,{"inputs":[{"name":"ft_library"},{"name":"ft_face"}],"output":{"name":"self"}}],[11,"attach_file","","",33,null],[11,"reference","","",33,null],[11,"set_char_size","","",33,null],[11,"set_pixel_sizes","","",33,null],[11,"load_glyph","","",33,null],[11,"load_char","","",33,null],[11,"set_transform","","",33,null],[11,"get_char_index","","",33,null],[11,"get_kerning","","",33,null],[11,"glyph","","",33,null],[11,"has_horizontal","","",33,null],[11,"has_vertical","","",33,null],[11,"has_kerning","","",33,null],[11,"is_scalable","","",33,null],[11,"is_sfnt","","",33,null],[11,"is_fixed_width","","",33,null],[11,"has_fixed_sizes","","",33,null],[11,"has_glyph_names","","",33,null],[11,"is_cid_keyed","","",33,null],[11,"is_tricky","","",33,null],[11,"has_color","","",33,null],[11,"raw","","",33,null],[11,"raw_mut","","",33,null],[11,"ascender","","",33,null],[11,"descender","","",33,null],[11,"em_size","","",33,null],[11,"height","","",33,null],[11,"max_advance_width","","",33,null],[11,"max_advance_height","","",33,null],[11,"underline_position","","",33,null],[11,"underline_thickness","","",33,null],[11,"family_name","","",33,null],[11,"style_name","","",33,null],[11,"size_metrics","","",33,null],[11,"postscript_name","","",33,null],[11,"fmt","","",33,null],[11,"drop","","",33,null],[0,"glyph","freetype","",null,null],[3,"Glyph","freetype::glyph","Represents a retrieved glyph from the library",null,null],[11,"from_raw","","Create a freetype-rs glyph object from c constituent parts",34,{"inputs":[{"name":"ft_library"},{"name":"ft_glyph"}],"output":{"name":"self"}}],[11,"transform","","Transform a glyph image if its format is scalable.",34,null],[11,"get_cbox","","Return a glyph&#39;s ‘control box’. The control box encloses all the outline&#39;s points,\nincluding Bézier control points. Though it coincides with the exact bounding box for most\nglyphs, it can be slightly larger in some situations (like when rotating an outline that\ncontains Bézier outside arcs).",34,null],[11,"to_bitmap","","Convert a given glyph object to a bitmap glyph object.",34,null],[11,"advance_x","","",34,null],[11,"advance_y","","",34,null],[11,"format","","An enumeration type used to describe the format of a given glyph image. Note that this\nversion of FreeType only supports two image formats, even though future font drivers will\nbe able to register their own format.",34,null],[11,"raw","","Get the underlying c glyph struct (The system actually calls this a GlyphRec because it can\nbe a different struct in different circumstances)",34,null],[11,"clone","","",34,null],[11,"drop","","",34,null],[0,"glyph_slot","freetype","",null,null],[3,"SubGlyphInfo","freetype::glyph_slot","A description of a given subglyph returned by `GlyphSlot::get_subglyph_info`\nfunction.",null,null],[12,"index","","The glyph index of the subglyph.",35,null],[12,"flags","","The subglyph flags, see FT_SUBGLYPH_FLAG_XXX.",35,null],[12,"arg1","","The subglyph&#39;s first argument (if any).",35,null],[12,"arg2","","The subglyph&#39;s second argument (if any).",35,null],[12,"transfrom","","The subglyph transformation (if any).",35,null],[3,"GlyphSlot","","A struct encapsulating the space for a glyph within a `Library`",null,null],[11,"clone","","",35,null],[11,"default","","",35,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",36,null],[11,"eq","","",36,null],[11,"ne","","",36,null],[11,"hash","","",36,null],[11,"from_raw","","Create a `GlyphSlot` from its constituent C parts",36,{"inputs":[{"name":"ft_library"},{"name":"ft_glyphslot"}],"output":{"name":"self"}}],[11,"render_glyph","","Convert a given glyph image to a bitmap. It does so by inspecting the glyph image format,\nfinding the relevant renderer, and invoking it.",36,null],[11,"get_subglyph_info","","Retrieve a description of a given subglyph. Only use it if the glyph&#39;s format is\nFT_GLYPH_FORMAT_COMPOSITE; an error is returned otherwise.",36,null],[11,"get_glyph","","Returns a glyph object, that is similar to a `GlyphSlot` but managed outside of the library",36,null],[11,"outline","","In freetype, the `Outline` object is a scalable glyph. This method unpacks a glyph into\nthis object, or returns `None` if the glyph has no `outline`",36,null],[11,"bitmap","","This field is used as a bitmap descriptor when the slot format is FT_GLYPH_FORMAT_BITMAP.\nNote that the address and content of the bitmap buffer can change between calls of\nFT_Load_Glyph and a few other functions.",36,null],[11,"bitmap_left","","The bitmap&#39;s left bearing expressed in integer pixels. Only valid if the format is\nFT_GLYPH_FORMAT_BITMAP, this is, if the glyph slot contains a bitmap.",36,null],[11,"bitmap_top","","The bitmap&#39;s top bearing expressed in integer pixels. Remember that this is the distance\nfrom the baseline to the top-most glyph scanline, upwards y coordinates being positive.",36,null],[11,"advance","","This shorthand is, depending on FT_LOAD_IGNORE_TRANSFORM, the transformed (hinted) advance\nwidth for the glyph, in 26.6 fractional pixel format. As specified with\nFT_LOAD_VERTICAL_LAYOUT, it uses either the ‘horiAdvance’ or the ‘vertAdvance’ value of\n‘metrics’ field.",36,null],[11,"linear_hori_advance","","The advance width of the unhinted glyph. Its value is expressed in 16.16 fractional pixels,\nunless FT_LOAD_LINEAR_DESIGN is set when loading the glyph. This field can be important to\nperform correct WYSIWYG layout. Only relevant for outline glyphs.",36,null],[11,"linear_vert_advance","","The advance height of the unhinted glyph. Its value is expressed in 16.16 fractional\npixels, unless FT_LOAD_LINEAR_DESIGN is set when loading the glyph. This field can be\nimportant to perform correct WYSIWYG layout. Only relevant for outline glyphs.",36,null],[11,"metrics","","The metrics of the last loaded glyph in the slot. The returned values depend on the last\nload flags (see the FT_Load_Glyph API function) and can be expressed either in 26.6\nfractional pixels or font units.",36,null],[11,"raw","","Get a pointer to the underlying c struct",36,null],[0,"library","freetype","",null,null],[3,"Library","freetype::library","",null,null],[11,"init","","This function is used to create a new FreeType library instance and add the default\nmodules. It returns a struct encapsulating the freetype library. The library is correctly\ndiscarded when the struct is dropped.",37,{"inputs":[],"output":{"name":"ftresult"}}],[11,"new_face","","Open a font file using its pathname. `face_index` should be 0 if there is only 1 font\nin the file.",37,null],[11,"new_memory_face","","Similar to `new_face`, but loads file data from a byte array in memory",37,null],[11,"raw","","Get the underlying library object",37,null],[11,"drop","","",37,null],[0,"outline","freetype","",null,null],[3,"Outline","freetype::outline","",null,null],[3,"CurveIterator","","",null,null],[3,"ContourIterator","","",null,null],[4,"Curve","","",null,null],[13,"Line","","",38,null],[13,"Bezier2","","",38,null],[13,"Bezier3","","",38,null],[11,"clone","","",38,null],[11,"from_raw","","",39,{"inputs":[{"name":"ft_outline"}],"output":{"name":"self"}}],[11,"points","","",39,null],[11,"tags","","",39,null],[11,"contours","","",39,null],[11,"contours_iter","","",39,null],[11,"from_raw","","",40,{"inputs":[{"name":"ft_outline"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"start","","",40,null],[11,"next","","",40,null],[11,"from_raw","","",41,{"inputs":[{"name":"ft_outline"}],"output":{"name":"self"}}],[11,"next","","",41,null],[0,"render_mode","freetype","",null,null],[4,"RenderMode","freetype::render_mode","",null,null],[13,"Normal","","",42,null],[13,"Light","","",42,null],[13,"Mono","","",42,null],[13,"Lcd","","",42,null],[13,"LcdV","","",42,null],[13,"Max","","",42,null],[11,"clone","","",42,null],[0,"tt_os2","freetype","",null,null],[3,"TrueTypeOS2Table","freetype::tt_os2","",null,null],[11,"clone","","",43,null],[11,"from_face","","",43,{"inputs":[{"name":"face"}],"output":{"name":"option"}}],[11,"version","","",43,null],[11,"avg_char_width","","",43,null],[11,"us_weight_class","","",43,null],[11,"us_width_class","","",43,null],[11,"fs_type","","",43,null],[11,"y_subscript_x_size","","",43,null],[11,"y_subscript_y_size","","",43,null],[11,"y_subscript_x_offset","","",43,null],[11,"y_subscript_y_offset","","",43,null],[11,"y_superscript_x_size","","",43,null],[11,"y_superscript_y_size","","",43,null],[11,"y_superscript_x_offset","","",43,null],[11,"y_superscript_y_offset","","",43,null],[11,"y_strikeout_size","","",43,null],[11,"y_strikeout_position","","",43,null],[11,"s_family_class","","",43,null],[11,"x_height","","",43,null],[6,"BBox","freetype","",null,null],[6,"GlyphMetrics","","",null,null],[6,"Matrix","","",null,null],[6,"Vector","","",null,null],[11,"clone","freetype::ffi","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",8,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",13,null],[11,"clone","","",14,null],[11,"clone","","",15,null],[11,"clone","","",21,null],[11,"clone","","",23,null]],"paths":[[8,"FTErrorMethods"],[3,"FT_Vector"],[3,"FT_BBox"],[3,"FT_Matrix"],[3,"FT_UnitVector"],[3,"FT_Bitmap"],[3,"FT_Data"],[3,"FT_Generic"],[3,"FT_Size_Metrics"],[3,"FT_Outline"],[3,"FT_Glyph_Metrics"],[3,"FT_Parameter"],[3,"FT_Open_Args"],[3,"FT_Bitmap_Size"],[3,"TT_OS2"],[3,"FT_CharMapRec"],[3,"FT_FaceRec"],[3,"FT_GlyphSlotRec"],[3,"FT_SizeRec"],[3,"FT_StreamRec"],[3,"FT_MemoryRec"],[3,"FT_ListRec"],[3,"FT_ListNodeRec"],[3,"FT_Size_RequestRec"],[3,"FT_GlyphRec"],[3,"FT_BitmapGlyphRec"],[3,"FT_OutlineGlyphRec"],[4,"PixelMode"],[3,"Bitmap"],[3,"BitmapGlyph"],[4,"Error"],[4,"KerningMode"],[3,"LoadFlag"],[3,"Face"],[3,"Glyph"],[3,"SubGlyphInfo"],[3,"GlyphSlot"],[3,"Library"],[4,"Curve"],[3,"Outline"],[3,"CurveIterator"],[3,"ContourIterator"],[4,"RenderMode"],[3,"TrueTypeOS2Table"]]};
searchIndex["freetype_sys"] = {"doc":"","items":[[3,"FT_Vector","freetype_sys","",null,null],[12,"x","","",0,null],[12,"y","","",0,null],[3,"FT_BBox","","",null,null],[12,"xMin","","",1,null],[12,"yMin","","",1,null],[12,"xMax","","",1,null],[12,"yMax","","",1,null],[3,"FT_Matrix","","",null,null],[12,"xx","","",2,null],[12,"xy","","",2,null],[12,"yx","","",2,null],[12,"yy","","",2,null],[3,"FT_UnitVector","","",null,null],[12,"x","","",3,null],[12,"y","","",3,null],[3,"FT_Bitmap","","",null,null],[12,"rows","","",4,null],[12,"width","","",4,null],[12,"pitch","","",4,null],[12,"buffer","","",4,null],[12,"num_grays","","",4,null],[12,"pixel_mode","","",4,null],[12,"palette_mode","","",4,null],[12,"palette","","",4,null],[3,"FT_Data","","",null,null],[12,"pointer","","",5,null],[12,"length","","",5,null],[3,"FT_Generic","","",null,null],[12,"data","","",6,null],[12,"finalizer","","",6,null],[3,"FT_Size_Metrics","","",null,null],[12,"x_ppem","","",7,null],[12,"y_ppem","","",7,null],[12,"x_scale","","",7,null],[12,"y_scale","","",7,null],[12,"ascender","","",7,null],[12,"descender","","",7,null],[12,"height","","",7,null],[12,"max_advance","","",7,null],[3,"FT_Outline","","",null,null],[12,"n_contours","","",8,null],[12,"n_points","","",8,null],[12,"points","","",8,null],[12,"tags","","",8,null],[12,"contours","","",8,null],[12,"flags","","",8,null],[3,"FT_Glyph_Metrics","","",null,null],[12,"width","","",9,null],[12,"height","","",9,null],[12,"horiBearingX","","",9,null],[12,"horiBearingY","","",9,null],[12,"horiAdvance","","",9,null],[12,"vertBearingX","","",9,null],[12,"vertBearingY","","",9,null],[12,"vertAdvance","","",9,null],[3,"FT_Parameter","","",null,null],[12,"tag","","",10,null],[12,"data","","",10,null],[3,"FT_Open_Args","","",null,null],[12,"flags","","",11,null],[12,"memory_base","","",11,null],[12,"memory_size","","",11,null],[12,"pathname","","",11,null],[12,"stream","","",11,null],[12,"driver","","",11,null],[12,"num_params","","",11,null],[12,"params","","",11,null],[3,"FT_Bitmap_Size","","",null,null],[12,"height","","",12,null],[12,"width","","",12,null],[12,"size","","",12,null],[12,"x_ppem","","",12,null],[12,"y_ppem","","",12,null],[3,"TT_OS2","","",null,null],[12,"version","","",13,null],[12,"xAvgCharWidth","","",13,null],[12,"usWeightClass","","",13,null],[12,"usWidthClass","","",13,null],[12,"fsType","","",13,null],[12,"ySubscriptXSize","","",13,null],[12,"ySubscriptYSize","","",13,null],[12,"ySubscriptXOffset","","",13,null],[12,"ySubscriptYOffset","","",13,null],[12,"ySuperscriptXSize","","",13,null],[12,"ySuperscriptYSize","","",13,null],[12,"ySuperscriptXOffset","","",13,null],[12,"ySuperscriptYOffset","","",13,null],[12,"yStrikeoutSize","","",13,null],[12,"yStrikeoutPosition","","",13,null],[12,"sFamilyClass","","",13,null],[12,"panose","","",13,null],[12,"ulUnicodeRange1","","",13,null],[12,"ulUnicodeRange2","","",13,null],[12,"ulUnicodeRange3","","",13,null],[12,"ulUnicodeRange4","","",13,null],[12,"ulCodePageRange1","","",13,null],[12,"ulCodePageRange2","","",13,null],[12,"sxHeight","","",13,null],[12,"sCapHeight","","",13,null],[12,"usDefaultChar","","",13,null],[12,"usBreakChar","","",13,null],[12,"usMaxContext","","",13,null],[3,"FT_CharMapRec","","",null,null],[12,"face","","",14,null],[12,"encoding","","",14,null],[12,"platform_id","","",14,null],[12,"encoding_id","","",14,null],[3,"FT_FaceRec","","",null,null],[12,"num_faces","","",15,null],[12,"face_index","","",15,null],[12,"face_flags","","",15,null],[12,"style_flags","","",15,null],[12,"num_glyphs","","",15,null],[12,"family_name","","",15,null],[12,"style_name","","",15,null],[12,"num_fixed_sizes","","",15,null],[12,"available_sizes","","",15,null],[12,"num_charmaps","","",15,null],[12,"charmaps","","",15,null],[12,"generic","","",15,null],[12,"bbox","","",15,null],[12,"units_per_EM","","",15,null],[12,"ascender","","",15,null],[12,"descender","","",15,null],[12,"height","","",15,null],[12,"max_advance_width","","",15,null],[12,"max_advance_height","","",15,null],[12,"underline_position","","",15,null],[12,"underline_thickness","","",15,null],[12,"glyph","","",15,null],[12,"size","","",15,null],[12,"charmap","","",15,null],[12,"driver","","",15,null],[12,"memory","","",15,null],[12,"stream","","",15,null],[12,"sizes_list","","",15,null],[12,"autohint","","",15,null],[12,"extensions","","",15,null],[12,"internal","","",15,null],[3,"FT_GlyphSlotRec","","",null,null],[12,"library","","",16,null],[12,"face","","",16,null],[12,"next","","",16,null],[12,"reserved","","",16,null],[12,"generic","","",16,null],[12,"metrics","","",16,null],[12,"linearHoriAdvance","","",16,null],[12,"linearVertAdvance","","",16,null],[12,"advance","","",16,null],[12,"format","","",16,null],[12,"bitmap","","",16,null],[12,"bitmap_left","","",16,null],[12,"bitmap_top","","",16,null],[12,"outline","","",16,null],[12,"num_subglyphs","","",16,null],[12,"subglyphs","","",16,null],[12,"control_data","","",16,null],[12,"control_len","","",16,null],[12,"lsb_delta","","",16,null],[12,"rsb_delta","","",16,null],[12,"other","","",16,null],[12,"internal","","",16,null],[3,"FT_SizeRec","","",null,null],[12,"face","","",17,null],[12,"generic","","",17,null],[12,"metrics","","",17,null],[12,"internal","","",17,null],[3,"FT_StreamRec","","",null,null],[12,"base","","",18,null],[12,"size","","",18,null],[12,"pos","","",18,null],[12,"descriptor","","",18,null],[12,"pathname","","",18,null],[12,"read","","",18,null],[12,"close","","",18,null],[12,"memory","","",18,null],[12,"cursor","","",18,null],[12,"limit","","",18,null],[3,"FT_MemoryRec","","",null,null],[12,"user","","",19,null],[12,"alloc","","",19,null],[12,"free","","",19,null],[12,"realloc","","",19,null],[3,"FT_ListRec","","",null,null],[12,"head","","",20,null],[12,"tail","","",20,null],[3,"FT_ListNodeRec","","",null,null],[12,"prev","","",21,null],[12,"next","","",21,null],[12,"data","","",21,null],[3,"FT_Size_RequestRec","","",null,null],[12,"size_request_type","","",22,null],[12,"width","","",22,null],[12,"height","","",22,null],[12,"horiResolution","","",22,null],[12,"vertResolution","","",22,null],[3,"FT_GlyphRec","","",null,null],[12,"library","","",23,null],[12,"clazz","","",23,null],[12,"format","","",23,null],[12,"advance","","",23,null],[3,"FT_BitmapGlyphRec","","",null,null],[12,"root","","",24,null],[12,"left","","",24,null],[12,"top","","",24,null],[12,"bitmap","","",24,null],[3,"FT_OutlineGlyphRec","","",null,null],[12,"root","","",25,null],[12,"outline","","",25,null],[5,"FT_HAS_HORIZONTAL","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_HAS_VERTICAL","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_HAS_KERNING","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_IS_SCALABLE","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_IS_SFNT","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_IS_FIXED_WIDTH","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_HAS_FIXED_SIZES","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_HAS_GLYPH_NAMES","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_HAS_MULTIPLE_MASTERS","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_IS_CID_KEYED","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_IS_TRICKY","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_HAS_COLOR","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_Get_Sfnt_Table","","",null,null],[5,"FT_Init_FreeType","","",null,null],[5,"FT_Done_FreeType","","",null,null],[5,"FT_New_Library","","",null,null],[5,"FT_Done_Library","","",null,null],[5,"FT_Reference_Library","","",null,null],[5,"FT_Add_Default_Modules","","",null,null],[5,"FT_New_Face","","",null,null],[5,"FT_New_Memory_Face","","",null,null],[5,"FT_Open_Face","","",null,null],[5,"FT_Attach_File","","",null,null],[5,"FT_Attach_Stream","","",null,null],[5,"FT_Reference_Face","","",null,null],[5,"FT_Done_Face","","",null,null],[5,"FT_Select_Size","","",null,null],[5,"FT_Request_Size","","",null,null],[5,"FT_Set_Char_Size","","",null,null],[5,"FT_Set_Pixel_Sizes","","",null,null],[5,"FT_Library_SetLcdFilter","","",null,null],[5,"FT_Load_Glyph","","",null,null],[5,"FT_Load_Char","","",null,null],[5,"FT_Set_Transform","","",null,null],[5,"FT_Render_Glyph","","",null,null],[5,"FT_Get_Kerning","","",null,null],[5,"FT_Get_Track_Kerning","","",null,null],[5,"FT_Get_Glyph_Name","","",null,null],[5,"FT_Get_Postscript_Name","","",null,null],[5,"FT_Select_CharMap","","",null,null],[5,"FT_Set_Charmap","","",null,null],[5,"FT_Get_Charmap_Index","","",null,null],[5,"FT_Get_Char_Index","","",null,null],[5,"FT_Get_First_Char","","",null,null],[5,"FT_Get_Next_Char","","",null,null],[5,"FT_Get_Name_Index","","",null,null],[5,"FT_Get_SubGlyph_Info","","",null,null],[5,"FT_Get_FSType_Flags","","",null,null],[5,"FT_Get_Glyph","","",null,null],[5,"FT_Glyph_Copy","","",null,null],[5,"FT_Glyph_Transform","","",null,null],[5,"FT_Glyph_Get_CBox","","",null,null],[5,"FT_Glyph_To_Bitmap","","",null,null],[5,"FT_Done_Glyph","","",null,null],[5,"FT_MulDiv","","",null,null],[5,"FT_MulFix","","",null,null],[5,"FT_DivFix","","",null,null],[5,"FT_RoundFix","","",null,null],[5,"FT_CeilFix","","",null,null],[5,"FT_FloorFix","","",null,null],[6,"FT_Byte","","",null,null],[6,"FT_Bytes","","",null,null],[6,"FT_Char","","",null,null],[6,"FT_Int","","",null,null],[6,"FT_UInt","","",null,null],[6,"FT_Int16","","",null,null],[6,"FT_UInt16","","",null,null],[6,"FT_Int32","","",null,null],[6,"FT_UInt32","","",null,null],[6,"FT_Int64","","",null,null],[6,"FT_UInt64","","",null,null],[6,"FT_Short","","",null,null],[6,"FT_UShort","","",null,null],[6,"FT_Long","","",null,null],[6,"FT_ULong","","",null,null],[6,"FT_Bool","","",null,null],[6,"FT_Offset","","",null,null],[6,"FT_PtrDist","","",null,null],[6,"FT_String","","",null,null],[6,"FT_Tag","","",null,null],[6,"FT_Error","","",null,null],[6,"FT_Fixed","","",null,null],[6,"FT_Pointer","","",null,null],[6,"FT_Pos","","",null,null],[6,"FT_FWord","","",null,null],[6,"FT_UFWord","","",null,null],[6,"FT_F2Dot14","","",null,null],[6,"FT_F26Dot6","","",null,null],[6,"FT_Generic_Finalizer","","",null,null],[6,"FT_StreamDesc","","",null,null],[6,"FT_Stream_IoFunc","","",null,null],[6,"FT_Stream_CloseFunc","","",null,null],[6,"FT_Alloc_Func","","",null,null],[6,"FT_Free_Func","","",null,null],[6,"FT_Realloc_Func","","",null,null],[6,"enum_FT_Sfnt_Tag_","","",null,null],[6,"FT_Sfnt_Tag","","",null,null],[6,"FT_Pixel_Mode","","",null,null],[6,"FT_Glyph_Format","","",null,null],[6,"FT_Render_Mode","","",null,null],[6,"FT_LcdFilter","","",null,null],[6,"FT_Encoding","","",null,null],[6,"FT_Size_Request_Type","","",null,null],[6,"FT_Kerning_Mode","","",null,null],[6,"FT_Glyph_BBox_Mode","","",null,null],[6,"FT_Library","","",null,null],[6,"FT_Face","","",null,null],[6,"FT_Size","","",null,null],[6,"FT_GlyphSlot","","",null,null],[6,"FT_CharMap","","",null,null],[6,"FT_Module","","",null,null],[6,"FT_Driver","","",null,null],[6,"FT_Renderer","","",null,null],[6,"FT_Size_Internal","","",null,null],[6,"FT_SubGlyph","","",null,null],[6,"FT_Slot_Internal","","",null,null],[6,"FT_Size_Request","","",null,null],[6,"FT_Face_Internal","","",null,null],[6,"FT_Stream","","",null,null],[6,"FT_Memory","","",null,null],[6,"FT_ListNode","","",null,null],[6,"FT_Glyph","","",null,null],[6,"FT_BitmapGlyph","","",null,null],[6,"FT_OutlineGlyph","","",null,null],[6,"TT_OS2_Internal","","",null,null],[6,"FT_LibraryRec","","",null,null],[6,"FT_ModuleRec","","",null,null],[6,"FT_DriverRec","","",null,null],[6,"FT_RendererRec","","",null,null],[6,"FT_Size_InternalRec","","",null,null],[6,"FT_SubGlyphRec","","",null,null],[6,"FT_Slot_InternalRec","","",null,null],[6,"FT_Face_InternalRec","","",null,null],[17,"ft_sfnt_head","","",null,null],[17,"ft_sfnt_maxp","","",null,null],[17,"ft_sfnt_os2","","",null,null],[17,"ft_sfnt_hhea","","",null,null],[17,"ft_sfnt_vhea","","",null,null],[17,"ft_sfnt_post","","",null,null],[17,"ft_sfnt_pclt","","",null,null],[17,"ft_sfnt_max","","",null,null],[17,"FT_PIXEL_MODE_NONE","","",null,null],[17,"FT_PIXEL_MODE_MONO","","",null,null],[17,"FT_PIXEL_MODE_GRAY","","",null,null],[17,"FT_PIXEL_MODE_GRAY2","","",null,null],[17,"FT_PIXEL_MODE_GRAY4","","",null,null],[17,"FT_PIXEL_MODE_LCD","","",null,null],[17,"FT_PIXEL_MODE_LCD_V","","",null,null],[17,"FT_PIXEL_MODE_BGRA","","",null,null],[17,"FT_PIXEL_MODE_MAX","","",null,null],[17,"FT_GLYPH_FORMAT_NONE","","",null,null],[17,"FT_GLYPH_FORMAT_COMPOSITE","","",null,null],[17,"FT_GLYPH_FORMAT_BITMAP","","",null,null],[17,"FT_GLYPH_FORMAT_OUTLINE","","",null,null],[17,"FT_GLYPH_FORMAT_PLOTTER","","",null,null],[17,"FT_RENDER_MODE_NORMAL","","",null,null],[17,"FT_RENDER_MODE_LIGHT","","",null,null],[17,"FT_RENDER_MODE_MONO","","",null,null],[17,"FT_RENDER_MODE_LCD","","",null,null],[17,"FT_RENDER_MODE_LCD_V","","",null,null],[17,"FT_RENDER_MODE_MAX","","",null,null],[17,"FT_LCD_FILTER_NONE","","",null,null],[17,"FT_LCD_FILTER_DEFAULT","","",null,null],[17,"FT_LCD_FILTER_LIGHT","","",null,null],[17,"FT_LCD_FILTER_LEGACY1","","",null,null],[17,"FT_LCD_FILTER_LEGACY","","",null,null],[17,"FT_LCD_FILTER_MAX","","",null,null],[17,"FT_ENCODING_NONE","","",null,null],[17,"FT_ENCODING_MS_SYMBOL","","",null,null],[17,"FT_ENCODING_UNICODE","","",null,null],[17,"FT_ENCODING_SJIS","","",null,null],[17,"FT_ENCODING_GB2312","","",null,null],[17,"FT_ENCODING_BIG5","","",null,null],[17,"FT_ENCODING_WANSUNG","","",null,null],[17,"FT_ENCODING_JOHAB","","",null,null],[17,"FT_ENCODING_MS_SJIS","","",null,null],[17,"FT_ENCODING_MS_GB2312","","",null,null],[17,"FT_ENCODING_MS_BIG5","","",null,null],[17,"FT_ENCODING_MS_WANSUNG","","",null,null],[17,"FT_ENCODING_MS_JOHAB","","",null,null],[17,"FT_ENCODING_ADOBE_STANDARD","","",null,null],[17,"FT_ENCODING_ADOBE_EXPERT","","",null,null],[17,"FT_ENCODING_ADOBE_CUSTOM","","",null,null],[17,"FT_ENCODING_ADOBE_LATIN_1","","",null,null],[17,"FT_ENCODING_OLD_LATIN_2","","",null,null],[17,"FT_ENCODING_APPLE_ROMAN","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_NOMINAL","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_REAL_DIM","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_BBOX","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_CELL","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_SCALES","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_MAX","","",null,null],[17,"FT_KERNING_DEFAULT","","",null,null],[17,"FT_KERNING_UNFITTED","","",null,null],[17,"FT_KERNING_UNSCALED","","",null,null],[17,"FT_GLYPH_BBOX_UNSCALED","","",null,null],[17,"FT_GLYPH_BBOX_SUBPIXELS","","",null,null],[17,"FT_GLYPH_BBOX_GRIDFIT","","",null,null],[17,"FT_GLYPH_BBOX_TRUNCATE","","",null,null],[17,"FT_GLYPH_BBOX_PIXELS","","",null,null],[17,"FT_FACE_FLAG_SCALABLE","","",null,null],[17,"FT_FACE_FLAG_FIXED_SIZES","","",null,null],[17,"FT_FACE_FLAG_FIXED_WIDTH","","",null,null],[17,"FT_FACE_FLAG_SFNT","","",null,null],[17,"FT_FACE_FLAG_HORIZONTAL","","",null,null],[17,"FT_FACE_FLAG_VERTICAL","","",null,null],[17,"FT_FACE_FLAG_KERNING","","",null,null],[17,"FT_FACE_FLAG_FAST_GLYPHS","","",null,null],[17,"FT_FACE_FLAG_MULTIPLE_MASTERS","","",null,null],[17,"FT_FACE_FLAG_GLYPH_NAMES","","",null,null],[17,"FT_FACE_FLAG_EXTERNAL_STREAM","","",null,null],[17,"FT_FACE_FLAG_HINTER","","",null,null],[17,"FT_FACE_FLAG_CID_KEYED","","",null,null],[17,"FT_FACE_FLAG_TRICKY","","",null,null],[17,"FT_FACE_FLAG_COLOR","","",null,null],[17,"FT_STYLE_FLAG_ITALIC","","",null,null],[17,"FT_STYLE_FLAG_BOLD","","",null,null],[17,"FT_OPEN_MEMORY","","",null,null],[17,"FT_OPEN_STREAM","","",null,null],[17,"FT_OPEN_PATHNAME","","",null,null],[17,"FT_OPEN_DRIVER","","",null,null],[17,"FT_OPEN_PARAMS","","",null,null],[17,"FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS","","",null,null],[17,"FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES","","",null,null],[17,"FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID","","",null,null],[17,"FT_SUBGLYPH_FLAG_SCALE","","",null,null],[17,"FT_SUBGLYPH_FLAG_XY_SCALE","","",null,null],[17,"FT_SUBGLYPH_FLAG_2X2","","",null,null],[17,"FT_SUBGLYPH_FLAG_USE_MY_METRICS","","",null,null],[17,"FT_LOAD_DEFAULT","","",null,null],[17,"FT_LOAD_NO_SCALE","","",null,null],[17,"FT_LOAD_NO_HINTING","","",null,null],[17,"FT_LOAD_RENDER","","",null,null],[17,"FT_LOAD_NO_BITMAP","","",null,null],[17,"FT_LOAD_VERTICAL_LAYOUT","","",null,null],[17,"FT_LOAD_FORCE_AUTOHINT","","",null,null],[17,"FT_LOAD_CROP_BITMAP","","",null,null],[17,"FT_LOAD_PEDANTIC","","",null,null],[17,"FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH","","",null,null],[17,"FT_LOAD_NO_RECURSE","","",null,null],[17,"FT_LOAD_IGNORE_TRANSFORM","","",null,null],[17,"FT_LOAD_MONOCHROME","","",null,null],[17,"FT_LOAD_LINEAR_DESIGN","","",null,null],[17,"FT_LOAD_NO_AUTOHINT","","",null,null],[17,"FT_LOAD_COLOR","","",null,null],[17,"FT_LOAD_TARGET_NORMAL","","",null,null],[17,"FT_LOAD_TARGET_LIGHT","","",null,null],[17,"FT_LOAD_TARGET_MONO","","",null,null],[17,"FT_LOAD_TARGET_LCD","","",null,null],[17,"FT_LOAD_TARGET_LCD_V","","",null,null],[17,"FT_FSTYPE_INSTALLABLE_EMBEDDING","","",null,null],[17,"FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING","","",null,null],[17,"FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING","","",null,null],[17,"FT_FSTYPE_EDITABLE_EMBEDDING","","",null,null],[17,"FT_FSTYPE_NO_SUBSETTING","","",null,null],[17,"FT_FSTYPE_BITMAP_EMBEDDING_ONLY","","",null,null],[17,"FT_Err_Ok","","",null,null],[17,"FT_Err_Cannot_Open_Resource","","",null,null],[17,"FT_Err_Unknown_File_Format","","",null,null],[17,"FT_Err_Invalid_File_Format","","",null,null],[17,"FT_Err_Invalid_Version","","",null,null],[17,"FT_Err_Lower_Module_Version","","",null,null],[17,"FT_Err_Invalid_Argument","","",null,null],[17,"FT_Err_Unimplemented_Feature","","",null,null],[17,"FT_Err_Invalid_Table","","",null,null],[17,"FT_Err_Invalid_Offset","","",null,null],[17,"FT_Err_Array_Too_Large","","",null,null],[17,"FT_Err_Missing_Module","","",null,null],[17,"FT_Err_Missing_Property","","",null,null],[17,"FT_Err_Invalid_Glyph_Index","","",null,null],[17,"FT_Err_Invalid_Character_Code","","",null,null],[17,"FT_Err_Invalid_Glyph_Format","","",null,null],[17,"FT_Err_Cannot_Render_Glyph","","",null,null],[17,"FT_Err_Invalid_Outline","","",null,null],[17,"FT_Err_Invalid_Composite","","",null,null],[17,"FT_Err_Too_Many_Hints","","",null,null],[17,"FT_Err_Invalid_Pixel_Size","","",null,null],[17,"FT_Err_Invalid_Handle","","",null,null],[17,"FT_Err_Invalid_Library_Handle","","",null,null],[17,"FT_Err_Invalid_Driver_Handle","","",null,null],[17,"FT_Err_Invalid_Face_Handle","","",null,null],[17,"FT_Err_Invalid_Size_Handle","","",null,null],[17,"FT_Err_Invalid_Slot_Handle","","",null,null],[17,"FT_Err_Invalid_CharMap_Handle","","",null,null],[17,"FT_Err_Invalid_Cache_Handle","","",null,null],[17,"FT_Err_Invalid_Stream_Handle","","",null,null],[17,"FT_Err_Too_Many_Drivers","","",null,null],[17,"FT_Err_Too_Many_Extensions","","",null,null],[17,"FT_Err_Out_Of_Memory","","",null,null],[17,"FT_Err_Unlisted_Object","","",null,null],[17,"FT_Err_Cannot_Open_Stream","","",null,null],[17,"FT_Err_Invalid_Stream_Seek","","",null,null],[17,"FT_Err_Invalid_Stream_Skip","","",null,null],[17,"FT_Err_Invalid_Stream_Read","","",null,null],[17,"FT_Err_Invalid_Stream_Operation","","",null,null],[17,"FT_Err_Invalid_Frame_Operation","","",null,null],[17,"FT_Err_Nested_Frame_Access","","",null,null],[17,"FT_Err_Invalid_Frame_Read","","",null,null],[17,"FT_Err_Raster_Uninitialized","","",null,null],[17,"FT_Err_Raster_Corrupted","","",null,null],[17,"FT_Err_Raster_Overflow","","",null,null],[17,"FT_Err_Raster_Negative_Height","","",null,null],[17,"FT_Err_Too_Many_Caches","","",null,null],[17,"FT_Err_Invalid_Opcode","","",null,null],[17,"FT_Err_Too_Few_Arguments","","",null,null],[17,"FT_Err_Stack_Overflow","","",null,null],[17,"FT_Err_Code_Overflow","","",null,null],[17,"FT_Err_Bad_Argument","","",null,null],[17,"FT_Err_Divide_By_Zero","","",null,null],[17,"FT_Err_Invalid_Reference","","",null,null],[17,"FT_Err_Debug_OpCode","","",null,null],[17,"FT_Err_ENDF_In_Exec_Stream","","",null,null],[17,"FT_Err_Nested_DEFS","","",null,null],[17,"FT_Err_Invalid_CodeRange","","",null,null],[17,"FT_Err_Execution_Too_Long","","",null,null],[17,"FT_Err_Too_Many_Function_Defs","","",null,null],[17,"FT_Err_Too_Many_Instruction_Defs","","",null,null],[17,"FT_Err_Table_Missing","","",null,null],[17,"FT_Err_Horiz_Header_Missing","","",null,null],[17,"FT_Err_Locations_Missing","","",null,null],[17,"FT_Err_Name_Table_Missing","","",null,null],[17,"FT_Err_CMap_Table_Missing","","",null,null],[17,"FT_Err_Hmtx_Table_Missing","","",null,null],[17,"FT_Err_Post_Table_Missing","","",null,null],[17,"FT_Err_Invalid_Horiz_Metrics","","",null,null],[17,"FT_Err_Invalid_CharMap_Format","","",null,null],[17,"FT_Err_Invalid_PPem","","",null,null],[17,"FT_Err_Invalid_Vert_Metrics","","",null,null],[17,"FT_Err_Could_Not_Find_Context","","",null,null],[17,"FT_Err_Invalid_Post_Table_Format","","",null,null],[17,"FT_Err_Invalid_Post_Table","","",null,null],[17,"FT_Err_Syntax_Error","","",null,null],[17,"FT_Err_Stack_Underflow","","",null,null],[17,"FT_Err_Ignore","","",null,null],[17,"FT_Err_No_Unicode_Glyph_Name","","",null,null],[17,"FT_Err_Missing_Startfont_Field","","",null,null],[17,"FT_Err_Missing_Font_Field","","",null,null],[17,"FT_Err_Missing_Size_Field","","",null,null],[17,"FT_Err_Missing_Fontboundingbox_Field","","",null,null],[17,"FT_Err_Missing_Chars_Field","","",null,null],[17,"FT_Err_Missing_Startchar_Field","","",null,null],[17,"FT_Err_Missing_Encoding_Field","","",null,null],[17,"FT_Err_Missing_Bbx_Field","","",null,null],[17,"FT_Err_Bbx_Too_Big","","",null,null],[17,"FT_Err_Corrupted_Font_Header","","",null,null],[17,"FT_Err_Corrupted_Font_Glyphs","","",null,null],[17,"FT_Err_Max","","",null,null],[8,"FTErrorMethods","","",null,null],[10,"succeeded","","",26,null],[11,"succeeded","","",27,null],[11,"clone","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",7,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",12,null],[11,"clone","","",13,null],[11,"clone","","",14,null],[11,"clone","","",20,null],[11,"clone","","",22,null]],"paths":[[3,"FT_Vector"],[3,"FT_BBox"],[3,"FT_Matrix"],[3,"FT_UnitVector"],[3,"FT_Bitmap"],[3,"FT_Data"],[3,"FT_Generic"],[3,"FT_Size_Metrics"],[3,"FT_Outline"],[3,"FT_Glyph_Metrics"],[3,"FT_Parameter"],[3,"FT_Open_Args"],[3,"FT_Bitmap_Size"],[3,"TT_OS2"],[3,"FT_CharMapRec"],[3,"FT_FaceRec"],[3,"FT_GlyphSlotRec"],[3,"FT_SizeRec"],[3,"FT_StreamRec"],[3,"FT_MemoryRec"],[3,"FT_ListRec"],[3,"FT_ListNodeRec"],[3,"FT_Size_RequestRec"],[3,"FT_GlyphRec"],[3,"FT_BitmapGlyphRec"],[3,"FT_OutlineGlyphRec"],[8,"FTErrorMethods"],[6,"FT_Error"]]};
searchIndex["libz_sys"] = {"doc":"","items":[[3,"gz_header","libz_sys","",null,null],[12,"text","","",0,null],[12,"time","","",0,null],[12,"xflags","","",0,null],[12,"os","","",0,null],[12,"extra","","",0,null],[12,"extra_len","","",0,null],[12,"extra_max","","",0,null],[12,"name","","",0,null],[12,"name_max","","",0,null],[12,"comment","","",0,null],[12,"comm_max","","",0,null],[12,"hcrc","","",0,null],[12,"done","","",0,null],[3,"z_stream","","",null,null],[12,"next_in","","",1,null],[12,"avail_in","","",1,null],[12,"total_in","","",1,null],[12,"next_out","","",1,null],[12,"avail_out","","",1,null],[12,"total_out","","",1,null],[12,"msg","","",1,null],[12,"state","","",1,null],[12,"zalloc","","",1,null],[12,"zfree","","",1,null],[12,"opaque","","",1,null],[12,"data_type","","",1,null],[12,"adler","","",1,null],[12,"reserved","","",1,null],[4,"gzFile_s","","",null,null],[4,"internal_state","","",null,null],[5,"adler32","","",null,null],[5,"adler32_combine","","",null,null],[5,"compress","","",null,null],[5,"compress2","","",null,null],[5,"compressBound","","",null,null],[5,"crc32","","",null,null],[5,"crc32_combine","","",null,null],[5,"deflate","","",null,null],[5,"deflateBound","","",null,null],[5,"deflateCopy","","",null,null],[5,"deflateEnd","","",null,null],[5,"deflateInit_","","",null,null],[5,"deflateInit2_","","",null,null],[5,"deflateParams","","",null,null],[5,"deflatePrime","","",null,null],[5,"deflateReset","","",null,null],[5,"deflateSetDictionary","","",null,null],[5,"deflateSetHeader","","",null,null],[5,"deflateTune","","",null,null],[5,"gzdirect","","",null,null],[5,"gzdopen","","",null,null],[5,"gzclearerr","","",null,null],[5,"gzclose","","",null,null],[5,"gzeof","","",null,null],[5,"gzerror","","",null,null],[5,"gzflush","","",null,null],[5,"gzgetc","","",null,null],[5,"gzgets","","",null,null],[5,"gzopen","","",null,null],[5,"gzputc","","",null,null],[5,"gzputs","","",null,null],[5,"gzread","","",null,null],[5,"gzrewind","","",null,null],[5,"gzseek","","",null,null],[5,"gzsetparams","","",null,null],[5,"gztell","","",null,null],[5,"gzungetc","","",null,null],[5,"gzwrite","","",null,null],[5,"inflate","","",null,null],[5,"inflateBack","","",null,null],[5,"inflateBackEnd","","",null,null],[5,"inflateBackInit_","","",null,null],[5,"inflateCopy","","",null,null],[5,"inflateEnd","","",null,null],[5,"inflateGetHeader","","",null,null],[5,"inflateInit_","","",null,null],[5,"inflateInit2_","","",null,null],[5,"inflateMark","","",null,null],[5,"inflatePrime","","",null,null],[5,"inflateReset","","",null,null],[5,"inflateReset2","","",null,null],[5,"inflateSetDictionary","","",null,null],[5,"inflateSync","","",null,null],[5,"uncompress","","",null,null],[5,"zlibCompileFlags","","",null,null],[5,"zlibVersion","","",null,null],[6,"alloc_func","","",null,null],[6,"Bytef","","",null,null],[6,"free_func","","",null,null],[6,"gzFile","","",null,null],[6,"in_func","","",null,null],[6,"out_func","","",null,null],[6,"uInt","","",null,null],[6,"uLong","","",null,null],[6,"uLongf","","",null,null],[6,"voidp","","",null,null],[6,"voidpc","","",null,null],[6,"voidpf","","",null,null],[6,"z_off_t","","",null,null],[6,"gz_headerp","","",null,null],[6,"z_streamp","","",null,null],[17,"Z_NO_FLUSH","","",null,null],[17,"Z_PARTIAL_FLUSH","","",null,null],[17,"Z_SYNC_FLUSH","","",null,null],[17,"Z_FULL_FLUSH","","",null,null],[17,"Z_FINISH","","",null,null],[17,"Z_BLOCK","","",null,null],[17,"Z_TREES","","",null,null],[17,"Z_OK","","",null,null],[17,"Z_STREAM_END","","",null,null],[17,"Z_NEED_DICT","","",null,null],[17,"Z_ERRNO","","",null,null],[17,"Z_STREAM_ERROR","","",null,null],[17,"Z_DATA_ERROR","","",null,null],[17,"Z_MEM_ERROR","","",null,null],[17,"Z_BUF_ERROR","","",null,null],[17,"Z_VERSION_ERROR","","",null,null],[17,"Z_NO_COMPRESSION","","",null,null],[17,"Z_BEST_SPEED","","",null,null],[17,"Z_BEST_COMPRESSION","","",null,null],[17,"Z_DEFAULT_COMPRESSION","","",null,null],[17,"Z_FILTERED","","",null,null],[17,"Z_HUFFMAN_ONLY","","",null,null],[17,"Z_RLE","","",null,null],[17,"Z_FIXED","","",null,null],[17,"Z_DEFAULT_STRATEGY","","",null,null],[17,"Z_BINARY","","",null,null],[17,"Z_TEXT","","",null,null],[17,"Z_ASCII","","",null,null],[17,"Z_UNKNOWN","","",null,null],[17,"Z_DEFLATED","","",null,null],[11,"clone","","",0,null],[11,"clone","","",1,null]],"paths":[[3,"gz_header"],[3,"z_stream"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",15,null],[12,"sa_data","","",15,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",16,null],[12,"sin_port","","",16,null],[12,"sin_addr","","",16,null],[12,"sin_zero","","",16,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",17,null],[12,"sin6_port","","",17,null],[12,"sin6_flowinfo","","",17,null],[12,"sin6_addr","","",17,null],[12,"sin6_scope_id","","",17,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",18,null],[12,"sun_path","","",18,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",19,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",20,null],[12,"ai_family","","",20,null],[12,"ai_socktype","","",20,null],[12,"ai_protocol","","",20,null],[12,"ai_addrlen","","",20,null],[12,"ai_addr","","",20,null],[12,"ai_canonname","","",20,null],[12,"ai_next","","",20,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",21,null],[12,"nl_pid","","",21,null],[12,"nl_groups","","",21,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",22,null],[12,"sll_protocol","","",22,null],[12,"sll_ifindex","","",22,null],[12,"sll_hatype","","",22,null],[12,"sll_pkttype","","",22,null],[12,"sll_halen","","",22,null],[12,"sll_addr","","",22,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",23,null],[12,"tm_min","","",23,null],[12,"tm_hour","","",23,null],[12,"tm_mday","","",23,null],[12,"tm_mon","","",23,null],[12,"tm_year","","",23,null],[12,"tm_wday","","",23,null],[12,"tm_yday","","",23,null],[12,"tm_isdst","","",23,null],[12,"tm_gmtoff","","",23,null],[12,"tm_zone","","",23,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",24,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",25,null],[12,"dli_fbase","","",25,null],[12,"dli_sname","","",25,null],[12,"dli_saddr","","",25,null],[3,"epoll_event","","",null,null],[12,"events","","",26,null],[12,"u64","","",26,null],[3,"utsname","","",null,null],[12,"sysname","","",27,null],[12,"nodename","","",27,null],[12,"release","","",27,null],[12,"version","","",27,null],[12,"machine","","",27,null],[12,"domainname","","",27,null],[3,"lconv","","",null,null],[12,"decimal_point","","",28,null],[12,"thousands_sep","","",28,null],[12,"grouping","","",28,null],[12,"int_curr_symbol","","",28,null],[12,"currency_symbol","","",28,null],[12,"mon_decimal_point","","",28,null],[12,"mon_thousands_sep","","",28,null],[12,"mon_grouping","","",28,null],[12,"positive_sign","","",28,null],[12,"negative_sign","","",28,null],[12,"int_frac_digits","","",28,null],[12,"frac_digits","","",28,null],[12,"p_cs_precedes","","",28,null],[12,"p_sep_by_space","","",28,null],[12,"n_cs_precedes","","",28,null],[12,"n_sep_by_space","","",28,null],[12,"p_sign_posn","","",28,null],[12,"n_sign_posn","","",28,null],[12,"int_p_cs_precedes","","",28,null],[12,"int_p_sep_by_space","","",28,null],[12,"int_n_cs_precedes","","",28,null],[12,"int_n_sep_by_space","","",28,null],[12,"int_p_sign_posn","","",28,null],[12,"int_n_sign_posn","","",28,null],[3,"dirent","","",null,null],[12,"d_ino","","",29,null],[12,"d_off","","",29,null],[12,"d_reclen","","",29,null],[12,"d_type","","",29,null],[12,"d_name","","",29,null],[3,"dirent64","","",null,null],[12,"d_ino","","",30,null],[12,"d_off","","",30,null],[12,"d_reclen","","",30,null],[12,"d_type","","",30,null],[12,"d_name","","",30,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",31,null],[12,"rlim_max","","",31,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",32,null],[12,"gl_pathv","","",32,null],[12,"gl_offs","","",32,null],[12,"gl_flags","","",32,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",33,null],[12,"ifa_name","","",33,null],[12,"ifa_flags","","",33,null],[12,"ifa_addr","","",33,null],[12,"ifa_netmask","","",33,null],[12,"ifa_ifu","","",33,null],[12,"ifa_data","","",33,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",34,null],[12,"pw_passwd","","",34,null],[12,"pw_uid","","",34,null],[12,"pw_gid","","",34,null],[12,"pw_gecos","","",34,null],[12,"pw_dir","","",34,null],[12,"pw_shell","","",34,null],[3,"spwd","","",null,null],[12,"sp_namp","","",35,null],[12,"sp_pwdp","","",35,null],[12,"sp_lstchg","","",35,null],[12,"sp_min","","",35,null],[12,"sp_max","","",35,null],[12,"sp_warn","","",35,null],[12,"sp_inact","","",35,null],[12,"sp_expire","","",35,null],[12,"sp_flag","","",35,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",36,null],[12,"f_frsize","","",36,null],[12,"f_blocks","","",36,null],[12,"f_bfree","","",36,null],[12,"f_bavail","","",36,null],[12,"f_files","","",36,null],[12,"f_ffree","","",36,null],[12,"f_favail","","",36,null],[12,"f_fsid","","",36,null],[12,"f_flag","","",36,null],[12,"f_namemax","","",36,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",37,null],[12,"dqb_bsoftlimit","","",37,null],[12,"dqb_curspace","","",37,null],[12,"dqb_ihardlimit","","",37,null],[12,"dqb_isoftlimit","","",37,null],[12,"dqb_curinodes","","",37,null],[12,"dqb_btime","","",37,null],[12,"dqb_itime","","",37,null],[12,"dqb_valid","","",37,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",38,null],[12,"ssi_errno","","",38,null],[12,"ssi_code","","",38,null],[12,"ssi_pid","","",38,null],[12,"ssi_uid","","",38,null],[12,"ssi_fd","","",38,null],[12,"ssi_tid","","",38,null],[12,"ssi_band","","",38,null],[12,"ssi_overrun","","",38,null],[12,"ssi_trapno","","",38,null],[12,"ssi_status","","",38,null],[12,"ssi_int","","",38,null],[12,"ssi_ptr","","",38,null],[12,"ssi_utime","","",38,null],[12,"ssi_stime","","",38,null],[12,"ssi_addr","","",38,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",39,null],[12,"mq_maxmsg","","",39,null],[12,"mq_msgsize","","",39,null],[12,"mq_curmsgs","","",39,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",40,null],[12,"if_name","","",40,null],[3,"msginfo","","",null,null],[12,"msgpool","","",41,null],[12,"msgmap","","",41,null],[12,"msgmax","","",41,null],[12,"msgmnb","","",41,null],[12,"msgmni","","",41,null],[12,"msgssz","","",41,null],[12,"msgtql","","",41,null],[12,"msgseg","","",41,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",42,null],[12,"e_exit","","",42,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",43,null],[12,"tv_usec","","",43,null],[3,"utmpx","","",null,null],[12,"ut_type","","",44,null],[12,"ut_pid","","",44,null],[12,"ut_line","","",44,null],[12,"ut_id","","",44,null],[12,"ut_user","","",44,null],[12,"ut_host","","",44,null],[12,"ut_exit","","",44,null],[12,"ut_session","","",44,null],[12,"ut_tv","","",44,null],[12,"ut_addr_v6","","",44,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",45,null],[12,"sa_mask","","",45,null],[12,"sa_flags","","",45,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",46,null],[12,"ss_flags","","",46,null],[12,"ss_size","","",46,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",47,null],[12,"si_errno","","",47,null],[12,"si_code","","",47,null],[12,"_pad","","",47,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",48,null],[12,"gl_pathv","","",48,null],[12,"gl_offs","","",48,null],[12,"gl_flags","","",48,null],[3,"ucred","","",null,null],[12,"pid","","",49,null],[12,"uid","","",49,null],[12,"gid","","",49,null],[3,"statfs","","",null,null],[12,"f_type","","",50,null],[12,"f_bsize","","",50,null],[12,"f_blocks","","",50,null],[12,"f_bfree","","",50,null],[12,"f_bavail","","",50,null],[12,"f_files","","",50,null],[12,"f_ffree","","",50,null],[12,"f_fsid","","",50,null],[12,"f_namelen","","",50,null],[12,"f_frsize","","",50,null],[3,"msghdr","","",null,null],[12,"msg_name","","",51,null],[12,"msg_namelen","","",51,null],[12,"msg_iov","","",51,null],[12,"msg_iovlen","","",51,null],[12,"msg_control","","",51,null],[12,"msg_controllen","","",51,null],[12,"msg_flags","","",51,null],[3,"termios","","",null,null],[12,"c_iflag","","",52,null],[12,"c_oflag","","",52,null],[12,"c_cflag","","",52,null],[12,"c_lflag","","",52,null],[12,"c_line","","",52,null],[12,"c_cc","","",52,null],[12,"c_ispeed","","",52,null],[12,"c_ospeed","","",52,null],[3,"flock","","",null,null],[12,"l_type","","",53,null],[12,"l_whence","","",53,null],[12,"l_start","","",53,null],[12,"l_len","","",53,null],[12,"l_pid","","",53,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",54,null],[12,"loads","","",54,null],[12,"totalram","","",54,null],[12,"freeram","","",54,null],[12,"sharedram","","",54,null],[12,"bufferram","","",54,null],[12,"totalswap","","",54,null],[12,"freeswap","","",54,null],[12,"procs","","",54,null],[12,"pad","","",54,null],[12,"totalhigh","","",54,null],[12,"freehigh","","",54,null],[12,"mem_unit","","",54,null],[12,"_f","","",54,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",55,null],[12,"msg_stime","","",55,null],[12,"msg_rtime","","",55,null],[12,"msg_ctime","","",55,null],[12,"msg_qnum","","",55,null],[12,"msg_qbytes","","",55,null],[12,"msg_lspid","","",55,null],[12,"msg_lrpid","","",55,null],[3,"stat","","",null,null],[12,"st_dev","","",56,null],[12,"st_ino","","",56,null],[12,"st_nlink","","",56,null],[12,"st_mode","","",56,null],[12,"st_uid","","",56,null],[12,"st_gid","","",56,null],[12,"st_rdev","","",56,null],[12,"st_size","","",56,null],[12,"st_blksize","","",56,null],[12,"st_blocks","","",56,null],[12,"st_atime","","",56,null],[12,"st_atime_nsec","","",56,null],[12,"st_mtime","","",56,null],[12,"st_mtime_nsec","","",56,null],[12,"st_ctime","","",56,null],[12,"st_ctime_nsec","","",56,null],[3,"stat64","","",null,null],[12,"st_dev","","",57,null],[12,"st_ino","","",57,null],[12,"st_nlink","","",57,null],[12,"st_mode","","",57,null],[12,"st_uid","","",57,null],[12,"st_gid","","",57,null],[12,"st_rdev","","",57,null],[12,"st_size","","",57,null],[12,"st_blksize","","",57,null],[12,"st_blocks","","",57,null],[12,"st_atime","","",57,null],[12,"st_atime_nsec","","",57,null],[12,"st_mtime","","",57,null],[12,"st_mtime_nsec","","",57,null],[12,"st_ctime","","",57,null],[12,"st_ctime_nsec","","",57,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",58,null],[12,"exponent","","",58,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",59,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",60,null],[12,"swd","","",60,null],[12,"ftw","","",60,null],[12,"fop","","",60,null],[12,"rip","","",60,null],[12,"rdp","","",60,null],[12,"mxcsr","","",60,null],[12,"mxcr_mask","","",60,null],[12,"_st","","",60,null],[12,"_xmm","","",60,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",61,null],[12,"fpregs","","",61,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",62,null],[12,"uc_link","","",62,null],[12,"uc_stack","","",62,null],[12,"uc_mcontext","","",62,null],[12,"uc_sigmask","","",62,null],[3,"ipc_perm","","",null,null],[12,"__key","","",63,null],[12,"uid","","",63,null],[12,"gid","","",63,null],[12,"cuid","","",63,null],[12,"cgid","","",63,null],[12,"mode","","",63,null],[12,"__seq","","",63,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",64,null],[12,"shm_segsz","","",64,null],[12,"shm_atime","","",64,null],[12,"shm_dtime","","",64,null],[12,"shm_ctime","","",64,null],[12,"shm_cpid","","",64,null],[12,"shm_lpid","","",64,null],[12,"shm_nattch","","",64,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getgrnam","","",null,null],[5,"getgrgid","","",null,null],[5,"endpwent","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"eventfd","","",null,null],[5,"sysinfo","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"mknodat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"unshare","","",null,null],[5,"setns","","",null,null],[5,"sem_timedwait","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"sethostname","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"clone","","",56,null],[11,"clone","","",57,null],[11,"clone","","",65,null],[11,"clone","","",58,null],[11,"clone","","",59,null],[11,"clone","","",60,null],[11,"clone","","",61,null],[11,"clone","","",62,null],[11,"clone","","",63,null],[11,"clone","","",64,null],[11,"clone","","",66,null],[11,"clone","","",54,null],[11,"clone","","",55,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"clone","","",44,null],[11,"clone","","",45,null],[11,"clone","","",46,null],[11,"clone","","",47,null],[11,"clone","","",48,null],[11,"clone","","",49,null],[11,"clone","","",50,null],[11,"clone","","",51,null],[11,"clone","","",52,null],[11,"clone","","",53,null],[11,"clone","","",67,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"clone","","",33,null],[11,"clone","","",68,null],[11,"clone","","",69,null],[11,"clone","","",70,null],[11,"clone","","",71,null],[11,"clone","","",72,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",36,null],[11,"clone","","",37,null],[11,"clone","","",38,null],[11,"clone","","",73,null],[11,"clone","","",39,null],[11,"clone","","",74,null],[11,"clone","","",40,null],[11,"clone","","",41,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"clone","","",22,null],[11,"clone","","",75,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","","",27,null],[11,"clone","","",28,null],[11,"clone","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[11,"clone","","",13,null],[11,"clone","","",14,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["draw_state"] = {"doc":"Graphics state blocks for gfx-rs","items":[[0,"preset","draw_state","State presets",null,null],[0,"blend","draw_state::preset","Blending preset modes.",null,null],[17,"ADD","draw_state::preset::blend","When combining two fragments, add their values together, saturating at 1.0",null,null],[17,"MULTIPLY","","When combining two fragments, multiply their values together.",null,null],[17,"ALPHA","","When combining two fragments, add the value of the source times its alpha channel with the\nvalue of the destination multiplied by the inverse of the source alpha channel. Has the\nusual transparency effect: mixes the two colors using a fraction of each one specified by\nthe alpha of the source.",null,null],[17,"INVERT","","When combining two fragments, subtract the destination color from a constant color\nusing the source color as weight. Has an invert effect with the constant color\nas base and source color controlling displacement from the base color.\nA white source color and a white value results in plain invert.\nThe output alpha is same as destination alpha.",null,null],[0,"depth","draw_state::preset","Depth preset modes.",null,null],[17,"LESS_EQUAL_TEST","draw_state::preset::depth","&quot;&lt;=&quot; comparison with read-only depth",null,null],[17,"LESS_EQUAL_WRITE","","&quot;&lt;=&quot; comparison with writable depth",null,null],[0,"state","draw_state","Fixed-function hardware state.",null,null],[3,"Offset","draw_state::state","How to offset vertices in screen space, if at all.",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[3,"MultiSample","","Multi-sampling rasterization mode",null,null],[3,"Rasterizer","","Primitive rasterization state. Note that GL allows different raster\nmethod to be used for front and back, while this abstraction does not.",null,null],[12,"front_face","","Which vertex winding is considered to be the front face for culling.",1,null],[12,"cull_face","","Which face should be culled.",1,null],[12,"method","","How to rasterize this primitive.",1,null],[12,"offset","","Any polygon offset to apply.",1,null],[12,"samples","","Multi-sampling mode.",1,null],[3,"StencilSide","","Complete stencil state for a given side of a face.",null,null],[12,"fun","","Comparison function to use to determine if the stencil test passes.",2,null],[12,"mask_read","","A mask that is ANDd with both the stencil buffer value and the reference value when they\nare read before doing the stencil test.",2,null],[12,"mask_write","","A mask that is ANDd with the stencil value before writing to the stencil buffer.",2,null],[12,"op_fail","","What operation to do if the stencil test fails.",2,null],[12,"op_depth_fail","","What operation to do if the stenil test passes but the depth test fails.",2,null],[12,"op_pass","","What operation to do if both the depth and stencil test pass.",2,null],[3,"Stencil","","Complete stencil state, specifying how to handle the front and back side of a face.",null,null],[12,"front","","",3,null],[12,"back","","",3,null],[3,"Depth","","Depth test state.",null,null],[12,"fun","","Comparison function to use.",4,null],[12,"write","","Specify whether to write to the depth buffer or not.",4,null],[3,"BlendChannel","","",null,null],[12,"equation","","",5,null],[12,"source","","",5,null],[12,"destination","","",5,null],[3,"Blend","","",null,null],[12,"color","","",6,null],[12,"alpha","","",6,null],[3,"ColorMask","","",null,null],[3,"Color","","The state of an active color render target",null,null],[12,"mask","","Color mask to use.",7,null],[12,"blend","","Optional blending.",7,null],[3,"RefValues","","The complete set of the rasterizer reference values.\nSwitching these doesn&#39;t roll the hardware context.",null,null],[12,"stencil","","Stencil front and back values.",8,null],[12,"blend","","Constant blend color.",8,null],[4,"FrontFace","","The front face winding order of a set of vertices.",null,null],[13,"Clockwise","","Clockwise winding order.",9,null],[13,"CounterClockwise","","Counter-clockwise winding order.",9,null],[4,"CullFace","","Which face, if any, to cull.",null,null],[13,"Nothing","","",10,null],[13,"Front","","",10,null],[13,"Back","","",10,null],[4,"RasterMethod","","How to rasterize a primitive.",null,null],[13,"Point","","Rasterize as a point.",11,null],[13,"Line","","Rasterize as a line with the given width.",11,null],[13,"Fill","","Rasterize as a face.",11,null],[4,"Comparison","","A pixel-wise comparison function.",null,null],[13,"Never","","`false`",12,null],[13,"Less","","`x &lt; y`",12,null],[13,"LessEqual","","`x &lt;= y`",12,null],[13,"Equal","","`x == y`",12,null],[13,"GreaterEqual","","`x &gt;= y`",12,null],[13,"Greater","","`x &gt; y`",12,null],[13,"NotEqual","","`x != y`",12,null],[13,"Always","","`true`",12,null],[4,"StencilOp","","Stencil mask operation.",null,null],[13,"Keep","","Keep the current value in the stencil buffer (no change).",13,null],[13,"Zero","","Set the value in the stencil buffer to zero.",13,null],[13,"Replace","","Set the stencil buffer value to `value` from `StencilSide`",13,null],[13,"IncrementClamp","","Increment the stencil buffer value, clamping to its maximum value.",13,null],[13,"IncrementWrap","","Increment the stencil buffer value, wrapping around to 0 on overflow.",13,null],[13,"DecrementClamp","","Decrement the stencil buffer value, clamping to its minimum value.",13,null],[13,"DecrementWrap","","Decrement the stencil buffer value, wrapping around to the maximum value on overflow.",13,null],[13,"Invert","","Bitwise invert the current value in the stencil buffer.",13,null],[4,"Equation","","",null,null],[13,"Add","","Adds source and destination.\nSource and destination are multiplied by blending parameters before addition.",14,null],[13,"Sub","","Subtracts destination from source.\nSource and destination are multiplied by blending parameters before subtraction.",14,null],[13,"RevSub","","Subtracts source from destination.\nSource and destination are multiplied by blending parameters before subtraction.",14,null],[13,"Min","","Component-wise minimum value of source and destination.\nBlending parameters are ignored.",14,null],[13,"Max","","Component-wise maximum value of source and destination.\nBlending parameters are ignored.",14,null],[4,"BlendValue","","",null,null],[13,"SourceColor","","",15,null],[13,"SourceAlpha","","",15,null],[13,"DestColor","","",15,null],[13,"DestAlpha","","",15,null],[13,"ConstColor","","",15,null],[13,"ConstAlpha","","",15,null],[4,"Factor","","",null,null],[13,"Zero","","",16,null],[13,"One","","",16,null],[13,"SourceAlphaSaturated","","",16,null],[13,"ZeroPlus","","",16,null],[13,"OneMinus","","",16,null],[6,"LineWidth","","Width of a line.\nCould be f32 if not for Hash deriving issues.",null,null],[6,"OffsetSlope","","Slope depth offset factor\nCould be f32 if not for Hash deriving issues.",null,null],[6,"OffsetUnits","","Number of units to offset, where\nthe unit is the minimal difference in the depth value\ndictated by the precision of the depth buffer.",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"BLUE","","",null,null],[17,"ALPHA","","",null,null],[17,"MASK_ALL","","",null,null],[17,"MASK_NONE","","",null,null],[11,"cmp","","",9,null],[11,"eq","","",9,null],[11,"partial_cmp","","",9,null],[11,"hash","","",9,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"hash","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"clone","","",10,null],[11,"eq","","",10,null],[11,"fmt","","",10,null],[11,"hash","","",10,null],[11,"partial_cmp","","",10,null],[11,"cmp","","",10,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"hash","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"partial_cmp","","",11,null],[11,"lt","","",11,null],[11,"le","","",11,null],[11,"gt","","",11,null],[11,"ge","","",11,null],[11,"clone","","",17,null],[11,"eq","","",17,null],[11,"fmt","","",17,null],[11,"hash","","",17,null],[11,"partial_cmp","","",17,null],[11,"cmp","","",17,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"hash","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"new_fill","","Create a new filling rasterizer.",1,{"inputs":[],"output":{"name":"rasterizer"}}],[11,"with_cull_back","","Add back face culling.",1,null],[11,"with_offset","","Add polygon offset.",1,null],[11,"clone","","",12,null],[11,"eq","","",12,null],[11,"fmt","","",12,null],[11,"hash","","",12,null],[11,"partial_cmp","","",12,null],[11,"cmp","","",12,null],[11,"clone","","",13,null],[11,"eq","","",13,null],[11,"fmt","","",13,null],[11,"hash","","",13,null],[11,"partial_cmp","","",13,null],[11,"cmp","","",13,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"hash","","",2,null],[11,"partial_cmp","","",2,null],[11,"lt","","",2,null],[11,"le","","",2,null],[11,"gt","","",2,null],[11,"ge","","",2,null],[11,"cmp","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"stencilside"}}],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"hash","","",3,null],[11,"partial_cmp","","",3,null],[11,"lt","","",3,null],[11,"le","","",3,null],[11,"gt","","",3,null],[11,"ge","","",3,null],[11,"cmp","","",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"stencil"}}],[11,"new","","Create a new stencil state with a given function.",3,null],[11,"clone","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"fmt","","",4,null],[11,"hash","","",4,null],[11,"partial_cmp","","",4,null],[11,"lt","","",4,null],[11,"le","","",4,null],[11,"gt","","",4,null],[11,"ge","","",4,null],[11,"cmp","","",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"depth"}}],[11,"clone","","",14,null],[11,"eq","","",14,null],[11,"fmt","","",14,null],[11,"hash","","",14,null],[11,"partial_cmp","","",14,null],[11,"cmp","","",14,null],[11,"clone","","",15,null],[11,"eq","","",15,null],[11,"fmt","","",15,null],[11,"hash","","",15,null],[11,"partial_cmp","","",15,null],[11,"cmp","","",15,null],[11,"clone","","",16,null],[11,"eq","","",16,null],[11,"ne","","",16,null],[11,"fmt","","",16,null],[11,"hash","","",16,null],[11,"partial_cmp","","",16,null],[11,"lt","","",16,null],[11,"le","","",16,null],[11,"gt","","",16,null],[11,"ge","","",16,null],[11,"cmp","","",16,null],[11,"cmp","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"hash","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"default","","",5,{"inputs":[],"output":{"name":"blendchannel"}}],[11,"clone","","",6,null],[11,"hash","","",6,null],[11,"partial_cmp","","",6,null],[11,"lt","","",6,null],[11,"le","","",6,null],[11,"gt","","",6,null],[11,"ge","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"default","","",6,{"inputs":[],"output":{"name":"blend"}}],[11,"new","","Create a new blend state with a given equation.",6,{"inputs":[{"name":"equation"},{"name":"factor"},{"name":"factor"}],"output":{"name":"blend"}}],[11,"fmt","","",6,null],[11,"eq","","",18,null],[11,"ne","","",18,null],[11,"clone","","",18,null],[11,"partial_cmp","","",18,null],[11,"lt","","",18,null],[11,"le","","",18,null],[11,"gt","","",18,null],[11,"ge","","",18,null],[11,"cmp","","",18,null],[11,"hash","","",18,null],[11,"fmt","","",18,null],[11,"empty","","Returns an empty set of flags.",18,{"inputs":[],"output":{"name":"colormask"}}],[11,"all","","Returns the set containing all flags.",18,{"inputs":[],"output":{"name":"colormask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",18,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",18,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",18,{"inputs":[{"name":"u8"}],"output":{"name":"colormask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",18,null],[11,"is_all","","Returns `true` if all flags are currently set.",18,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",18,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",18,null],[11,"insert","","Inserts the specified flags in-place.",18,null],[11,"remove","","Removes the specified flags in-place.",18,null],[11,"toggle","","Toggles the specified flags in-place.",18,null],[11,"bitor","","Returns the union of the two sets of flags.",18,null],[11,"bitor_assign","","Adds the set of flags.",18,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",18,null],[11,"bitxor_assign","","Toggles the set of flags.",18,null],[11,"bitand","","Returns the intersection between the two sets of flags.",18,null],[11,"bitand_assign","","Disables all flags disabled in the set.",18,null],[11,"sub","","Returns the set difference of the two sets of flags.",18,null],[11,"sub_assign","","Disables all flags enabled in the set.",18,null],[11,"not","","Returns the complement of this set of flags.",18,null],[11,"from_iter","","",18,{"inputs":[{"name":"t"}],"output":{"name":"colormask"}}],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"hash","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"partial_cmp","","",7,null],[11,"lt","","",7,null],[11,"le","","",7,null],[11,"gt","","",7,null],[11,"ge","","",7,null],[11,"default","","",7,{"inputs":[],"output":{"name":"color"}}],[11,"clone","","",8,null],[11,"fmt","","",8,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"partial_cmp","","",8,null],[11,"lt","","",8,null],[11,"le","","",8,null],[11,"gt","","",8,null],[11,"ge","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"refvalues"}}],[0,"target","draw_state","Render target specification.",null,null],[3,"Rect","draw_state::target","A screen space rectangle",null,null],[12,"x","","",19,null],[12,"y","","",19,null],[12,"w","","",19,null],[12,"h","","",19,null],[3,"Mirror","","Mirroring flags, used for blitting",null,null],[6,"Layer","","A depth value, specifying which plane to select out of a 3D texture.",null,null],[6,"Level","","Mipmap level to select in a texture.",null,null],[6,"Depth","","A single depth value from a depth buffer.",null,null],[6,"Stencil","","A single value from a stencil stencstencil buffer.",null,null],[6,"ColorValue","","A color with floating-point components.",null,null],[17,"MIRROR_X","","",null,null],[17,"MIRROR_Y","","",null,null],[11,"clone","","",19,null],[11,"fmt","","",19,null],[11,"hash","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"partial_cmp","","",19,null],[11,"lt","","",19,null],[11,"le","","",19,null],[11,"gt","","",19,null],[11,"ge","","",19,null],[11,"eq","","",20,null],[11,"ne","","",20,null],[11,"clone","","",20,null],[11,"partial_cmp","","",20,null],[11,"lt","","",20,null],[11,"le","","",20,null],[11,"gt","","",20,null],[11,"ge","","",20,null],[11,"cmp","","",20,null],[11,"hash","","",20,null],[11,"fmt","","",20,null],[11,"empty","","Returns an empty set of flags.",20,{"inputs":[],"output":{"name":"mirror"}}],[11,"all","","Returns the set containing all flags.",20,{"inputs":[],"output":{"name":"mirror"}}],[11,"bits","","Returns the raw value of the flags currently stored.",20,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",20,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",20,{"inputs":[{"name":"u8"}],"output":{"name":"mirror"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",20,null],[11,"is_all","","Returns `true` if all flags are currently set.",20,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",20,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",20,null],[11,"insert","","Inserts the specified flags in-place.",20,null],[11,"remove","","Removes the specified flags in-place.",20,null],[11,"toggle","","Toggles the specified flags in-place.",20,null],[11,"bitor","","Returns the union of the two sets of flags.",20,null],[11,"bitor_assign","","Adds the set of flags.",20,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",20,null],[11,"bitxor_assign","","Toggles the set of flags.",20,null],[11,"bitand","","Returns the intersection between the two sets of flags.",20,null],[11,"bitand_assign","","Disables all flags disabled in the set.",20,null],[11,"sub","","Returns the set difference of the two sets of flags.",20,null],[11,"sub_assign","","Disables all flags enabled in the set.",20,null],[11,"not","","Returns the complement of this set of flags.",20,null],[11,"from_iter","","",20,{"inputs":[{"name":"t"}],"output":{"name":"mirror"}}]],"paths":[[3,"Offset"],[3,"Rasterizer"],[3,"StencilSide"],[3,"Stencil"],[3,"Depth"],[3,"BlendChannel"],[3,"Blend"],[3,"Color"],[3,"RefValues"],[4,"FrontFace"],[4,"CullFace"],[4,"RasterMethod"],[4,"Comparison"],[4,"StencilOp"],[4,"Equation"],[4,"BlendValue"],[4,"Factor"],[3,"MultiSample"],[3,"ColorMask"],[3,"Rect"],[3,"Mirror"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,null],[10,"log","","Logs the `LogRecord`.",2,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,null],[11,"args","","The message body.",3,null],[11,"metadata","","Metadata about the log directive.",3,null],[11,"location","","The location of the log directive.",3,null],[11,"level","","The verbosity level of the message.",3,null],[11,"target","","The name of the target of the directive.",3,null],[11,"level","","The verbosity level of the message.",4,null],[11,"target","","The name of the target of the directive.",4,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"module_path","","The module path of the message.",5,null],[11,"file","","The source file containing the message.",5,null],[11,"line","","The line containing the message.",5,null],[11,"fmt","","",6,null],[11,"get","","Gets the current maximum log level filter.",6,null],[11,"set","","Sets the maximum log level.",6,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",8,null],[11,"description","","",8,null],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
initSearch(searchIndex);
