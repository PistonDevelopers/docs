var N=null,E="",T="t",U="u",searchIndex={};
var R=["usize","result","decoder","get_bit_depth","Return the bit depth per sample","get_bytes_per_sample","Return the number of bytes in a sample","get_raw_params","ratio","encoderbuilder","colorspace","try_from","borrow_mut","try_into","type_id","borrow","typeid","to_owned","clone_into","formatter","Colorspace","EncoderBuilder"];

searchIndex["y4m"]={"doc":"YUV4MPEG2 (.y4m) Encoder/Decoder","i":[[3,"Ratio","y4m","Simple ratio structure since stdlib lacks one.",N,N],[12,"num",E,"Numerator.",0,N],[12,"den",E,"Denominator.",0,N],[3,"Decoder",E,"YUV4MPEG2 decoder.",N,N],[3,"Frame",E,"A single frame.",N,N],[3,R[21],E,"Encoder builder. Allows to set y4m file parameters using…",N,N],[3,"Encoder",E,"YUV4MPEG2 encoder.",N,N],[4,"Error",E,"Both encoding and decoding errors.",N,N],[13,"EOF",E,"End of the file. Technically not an error, but it's easier…",1,N],[13,"BadInput",E,"Bad input parameters provided.",1,N],[13,"UnknownColorspace",E,"Unknown colorspace (possibly just unimplemented).",1,N],[13,"ParseError",E,"Error while parsing the file/frame header.",1,N],[13,"IoError",E,"Error while reading/writing the file.",1,N],[4,R[20],E,"Colorspace (color model/pixel format). Only subset of them…",N,N],[13,"Cmono",E,"Grayscale only, 8-bit.",2,N],[13,"C420",E,"4:2:0 with coincident chroma planes, 8-bit.",2,N],[13,"C420p10",E,"4:2:0 with coincident chroma planes, 10-bit.",2,N],[13,"C420p12",E,"4:2:0 with coincident chroma planes, 12-bit.",2,N],[13,"C420jpeg",E,"4:2:0 with biaxially-displaced chroma planes, 8-bit.",2,N],[13,"C420paldv",E,"4:2:0 with vertically-displaced chroma planes, 8-bit.",2,N],[13,"C420mpeg2",E,"Found in some files. Same as `C420`.",2,N],[13,"C422",E,"4:2:2, 8-bit.",2,N],[13,"C422p10",E,"4:2:2, 10-bit.",2,N],[13,"C422p12",E,"4:2:2, 12-bit.",2,N],[13,"C444",E,"4:4:4, 8-bit.",2,N],[13,"C444p10",E,"4:4:4, 10-bit.",2,N],[13,"C444p12",E,"4:4:4, 12-bit.",2,N],[5,"decode",E,"Create a new decoder instance. Alias for `Decoder::new`.",N,[[["r"]],[R[1],[R[2],"error"]]]],[5,"encode",E,"Create a new encoder builder. Alias for…",N,[[[R[0]],[R[0]],[R[8]]],[R[9]]]],[11,"new",E,"Create a new ratio.",0,[[[R[0]],[R[0]]],[R[8]]]],[11,R[3],E,R[4],2,[[["self"]],[R[0]]]],[11,R[5],E,R[6],2,[[["self"]],[R[0]]]],[11,"new",E,"Create a new decoder instance.",3,[[["r"]],[R[1],[R[2],"error"]]]],[11,"read_frame",E,"Iterate over frames, without extra heap allocations. End…",3,[[["self"]],[R[1],["frame","error"]]]],[11,"get_width",E,"Return file width.",3,[[["self"]],[R[0]]]],[11,"get_height",E,"Return file height.",3,[[["self"]],[R[0]]]],[11,"get_framerate",E,"Return file framerate.",3,[[["self"]],[R[8]]]],[11,"get_colorspace",E,"Return file colorspace.",3,[[["self"]],[R[10]]]],[11,R[7],E,"Return file raw parameters.",3,N],[11,R[3],E,R[4],3,[[["self"]],[R[0]]]],[11,R[5],E,R[6],3,[[["self"]],[R[0]]]],[11,"new",E,"Create a new frame with optional parameters. No heap…",4,N],[11,"from_u16",E,"Create a new frame from data in 16-bit format.",4,N],[11,"get_y_plane",E,"Return Y (first) plane.",4,N],[11,"get_u_plane",E,"Return U (second) plane. Empty in case of grayscale.",4,N],[11,"get_v_plane",E,"Return V (third) plane. Empty in case of grayscale.",4,N],[11,R[7],E,"Return frame raw parameters if any.",4,[[["self"]],["option"]]],[11,"new",E,"Create a new encoder builder.",5,[[[R[0]],[R[0]],[R[8]]],[R[9]]]],[11,"with_colorspace",E,"Specify file colorspace.",5,[[["self"],[R[10]]],["self"]]],[11,"write_header",E,"Write header to the stream and create encoder instance.",5,[[["self"],["w"]],[R[1],["encoder","error"]]]],[11,"write_frame",E,"Write next frame to the stream.",6,[[["self"],["frame"]],[R[1],["error"]]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[17],E,E,0,[[["self"]],[T]]],[11,R[18],E,E,0,N],[11,"to_string",E,E,0,[[["self"]],["string"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[11],E,E,0,[[[U]],[R[1]]]],[11,R[15],E,E,0,[[["self"]],[T]]],[11,R[12],E,E,0,[[["self"]],[T]]],[11,R[13],E,E,0,[[["self"]],[R[1]]]],[11,R[14],E,E,0,[[["self"]],[R[16]]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[11],E,E,3,[[[U]],[R[1]]]],[11,R[15],E,E,3,[[["self"]],[T]]],[11,R[12],E,E,3,[[["self"]],[T]]],[11,R[13],E,E,3,[[["self"]],[R[1]]]],[11,R[14],E,E,3,[[["self"]],[R[16]]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[11],E,E,4,[[[U]],[R[1]]]],[11,R[15],E,E,4,[[["self"]],[T]]],[11,R[12],E,E,4,[[["self"]],[T]]],[11,R[13],E,E,4,[[["self"]],[R[1]]]],[11,R[14],E,E,4,[[["self"]],[R[16]]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[11],E,E,5,[[[U]],[R[1]]]],[11,R[15],E,E,5,[[["self"]],[T]]],[11,R[12],E,E,5,[[["self"]],[T]]],[11,R[13],E,E,5,[[["self"]],[R[1]]]],[11,R[14],E,E,5,[[["self"]],[R[16]]]],[11,"into",E,E,6,[[["self"]],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[11],E,E,6,[[[U]],[R[1]]]],[11,R[15],E,E,6,[[["self"]],[T]]],[11,R[12],E,E,6,[[["self"]],[T]]],[11,R[13],E,E,6,[[["self"]],[R[1]]]],[11,R[14],E,E,6,[[["self"]],[R[16]]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[11],E,E,1,[[[U]],[R[1]]]],[11,R[15],E,E,1,[[["self"]],[T]]],[11,R[12],E,E,1,[[["self"]],[T]]],[11,R[13],E,E,1,[[["self"]],[R[1]]]],[11,R[14],E,E,1,[[["self"]],[R[16]]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[17],E,E,2,[[["self"]],[T]]],[11,R[18],E,E,2,N],[11,"from",E,E,2,[[[T]],[T]]],[11,R[11],E,E,2,[[[U]],[R[1]]]],[11,R[15],E,E,2,[[["self"]],[T]]],[11,R[12],E,E,2,[[["self"]],[T]]],[11,R[13],E,E,2,[[["self"]],[R[1]]]],[11,R[14],E,E,2,[[["self"]],[R[16]]]],[11,"from",E,E,1,[[["error"]],["error"]]],[11,"from",E,E,1,[[["parseinterror"]],["error"]]],[11,"from",E,E,1,[[["utf8error"]],["error"]]],[11,"clone",E,E,0,[[["self"]],[R[8]]]],[11,"clone",E,E,2,[[["self"]],[R[10]]]],[11,"fmt",E,E,0,[[["self"],[R[19]]],[R[1]]]],[11,"fmt",E,E,1,[[["self"],[R[19]]],[R[1]]]],[11,"fmt",E,E,0,[[["self"],[R[19]]],[R[1]]]],[11,"fmt",E,E,2,[[["self"],[R[19]]],[R[1]]]],[11,"fmt",E,E,4,[[["self"],[R[19]]],[R[1]]]],[11,"fmt",E,E,5,[[["self"],[R[19]]],[R[1]]]]],"p":[[3,"Ratio"],[4,"Error"],[4,R[20]],[3,"Decoder"],[3,"Frame"],[3,R[21]],[3,"Encoder"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);