var N=null,E="",T="t",U="u",searchIndex={};
var R=["decoder","usize","result","error","get_bit_depth","Return the bit depth per sample","get_bytes_per_sample","Return the number of bytes in a sample","option","frame","get_raw_params","encoderbuilder","colorspace","to_owned","clone_into","try_from","try_into","borrow_mut","type_id","borrow","typeid","formatter","Colorspace","EncoderBuilder"];

searchIndex["y4m"]={"doc":"YUV4MPEG2 (.y4m) Encoder/Decoder","i":[[3,"Ratio","y4m","Simple ratio structure since stdlib lacks one.",N,N],[12,"num",E,"Numerator.",0,N],[12,"den",E,"Denominator.",0,N],[3,"Limits",E,"Limits on the resources `Decoder` is allowed to use.",N,N],[12,"bytes",E,"Maximum number of bytes decoder is allowed to allocate,…",1,N],[3,"Decoder",E,"YUV4MPEG2 decoder.",N,N],[3,"Frame",E,"A single frame.",N,N],[3,R[23],E,"Encoder builder. Allows to set y4m file parameters using…",N,N],[3,"Encoder",E,"YUV4MPEG2 encoder.",N,N],[4,"Error",E,"Both encoding and decoding errors.",N,N],[13,"EOF",E,"End of the file. Technically not an error, but it's easier…",2,N],[13,"BadInput",E,"Bad input parameters provided.",2,N],[13,"UnknownColorspace",E,"Unknown colorspace (possibly just unimplemented).",2,N],[13,"ParseError",E,"Error while parsing the file/frame header.",2,N],[13,"IoError",E,"Error while reading/writing the file.",2,N],[13,"OutOfMemory",E,"Out of memory (limits exceeded).",2,N],[4,R[22],E,"Colorspace (color model/pixel format). Only subset of them…",N,N],[13,"Cmono",E,"Grayscale only, 8-bit.",3,N],[13,"C420",E,"4:2:0 with coincident chroma planes, 8-bit.",3,N],[13,"C420p10",E,"4:2:0 with coincident chroma planes, 10-bit.",3,N],[13,"C420p12",E,"4:2:0 with coincident chroma planes, 12-bit.",3,N],[13,"C420jpeg",E,"4:2:0 with biaxially-displaced chroma planes, 8-bit.",3,N],[13,"C420paldv",E,"4:2:0 with vertically-displaced chroma planes, 8-bit.",3,N],[13,"C420mpeg2",E,"Found in some files. Same as `C420`.",3,N],[13,"C422",E,"4:2:2, 8-bit.",3,N],[13,"C422p10",E,"4:2:2, 10-bit.",3,N],[13,"C422p12",E,"4:2:2, 12-bit.",3,N],[13,"C444",E,"4:4:4, 8-bit.",3,N],[13,"C444p10",E,"4:4:4, 10-bit.",3,N],[13,"C444p12",E,"4:4:4, 12-bit.",3,N],[5,"decode",E,"Create a new decoder instance. Alias for `Decoder::new`.",N,[[["r"]],[[R[3]],[R[2],[R[0],R[3]]],[R[0]]]]],[5,"encode",E,"Create a new encoder builder. Alias for…",N,[[[R[1]],["ratio"]],[R[11]]]],[11,"new",E,"Create a new ratio.",0,[[[R[1]]],["ratio"]]],[11,R[4],E,R[5],3,[[],[R[1]]]],[11,R[6],E,R[7],3,[[],[R[1]]]],[11,"new",E,"Create a new decoder instance.",4,[[["r"]],[[R[3]],[R[2],[R[0],R[3]]],[R[0]]]]],[11,"new_with_limits",E,"Create a new decoder instance with custom limits.",4,[[["limits"],["r"]],[[R[3]],[R[2],[R[0],R[3]]],[R[0]]]]],[11,"read_frame",E,"Iterate over frames. End of input is indicated by…",4,[[["self"]],[[R[3]],[R[2],[R[9],R[3]]],[R[9]]]]],[11,"get_width",E,"Return file width.",4,[[["self"]],[R[1]]]],[11,"get_height",E,"Return file height.",4,[[["self"]],[R[1]]]],[11,"get_framerate",E,"Return file framerate.",4,[[["self"]],["ratio"]]],[11,"get_colorspace",E,"Return file colorspace.",4,[[["self"]],[R[12]]]],[11,R[10],E,"Return file raw parameters.",4,[[["self"]]]],[11,R[4],E,R[5],4,[[["self"]],[R[1]]]],[11,R[6],E,R[7],4,[[["self"]],[R[1]]]],[11,"new",E,"Create a new frame with optional parameters. No heap…",5,[[[R[8],["vec"]],["vec",["u8"]]],[R[9]]]],[11,"from_u16",E,"Create a new frame from data in 16-bit format.",5,[[[R[8],["vec"]],["vec",["u8"]]],[R[9]]]],[11,"get_y_plane",E,"Return Y (first) plane.",5,[[["self"]]]],[11,"get_u_plane",E,"Return U (second) plane. Empty in case of grayscale.",5,[[["self"]]]],[11,"get_v_plane",E,"Return V (third) plane. Empty in case of grayscale.",5,[[["self"]]]],[11,R[10],E,"Return frame raw parameters if any.",5,[[["self"]],[R[8]]]],[11,"new",E,"Create a new encoder builder.",6,[[[R[1]],["ratio"]],[R[11]]]],[11,"with_colorspace",E,"Specify file colorspace.",6,[[[R[12]]],["self"]]],[11,"write_header",E,"Write header to the stream and create encoder instance.",6,[[["w"]],[[R[2],["encoder",R[3]]],[R[3]],["encoder"]]]],[11,"write_frame",E,"Write next frame to the stream.",7,[[["self"],[R[9]]],[[R[2],[R[3]]],[R[3]]]]],[11,"into",E,E,0,[[],[U]]],[11,"to_string",E,E,0,[[["self"]],["string"]]],[11,R[13],E,E,0,[[["self"]],[T]]],[11,R[14],E,E,0,[[["self"],[T]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[15],E,E,0,[[[U]],[R[2]]]],[11,R[16],E,E,0,[[],[R[2]]]],[11,R[17],E,E,0,[[["self"]],[T]]],[11,R[19],E,E,0,[[["self"]],[T]]],[11,R[18],E,E,0,[[["self"]],[R[20]]]],[11,"into",E,E,1,[[],[U]]],[11,R[13],E,E,1,[[["self"]],[T]]],[11,R[14],E,E,1,[[["self"],[T]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[15],E,E,1,[[[U]],[R[2]]]],[11,R[16],E,E,1,[[],[R[2]]]],[11,R[17],E,E,1,[[["self"]],[T]]],[11,R[19],E,E,1,[[["self"]],[T]]],[11,R[18],E,E,1,[[["self"]],[R[20]]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[15],E,E,4,[[[U]],[R[2]]]],[11,R[16],E,E,4,[[],[R[2]]]],[11,R[17],E,E,4,[[["self"]],[T]]],[11,R[19],E,E,4,[[["self"]],[T]]],[11,R[18],E,E,4,[[["self"]],[R[20]]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[15],E,E,5,[[[U]],[R[2]]]],[11,R[16],E,E,5,[[],[R[2]]]],[11,R[17],E,E,5,[[["self"]],[T]]],[11,R[19],E,E,5,[[["self"]],[T]]],[11,R[18],E,E,5,[[["self"]],[R[20]]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[15],E,E,6,[[[U]],[R[2]]]],[11,R[16],E,E,6,[[],[R[2]]]],[11,R[17],E,E,6,[[["self"]],[T]]],[11,R[19],E,E,6,[[["self"]],[T]]],[11,R[18],E,E,6,[[["self"]],[R[20]]]],[11,"into",E,E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[15],E,E,7,[[[U]],[R[2]]]],[11,R[16],E,E,7,[[],[R[2]]]],[11,R[17],E,E,7,[[["self"]],[T]]],[11,R[19],E,E,7,[[["self"]],[T]]],[11,R[18],E,E,7,[[["self"]],[R[20]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[15],E,E,2,[[[U]],[R[2]]]],[11,R[16],E,E,2,[[],[R[2]]]],[11,R[17],E,E,2,[[["self"]],[T]]],[11,R[19],E,E,2,[[["self"]],[T]]],[11,R[18],E,E,2,[[["self"]],[R[20]]]],[11,"into",E,E,3,[[],[U]]],[11,R[13],E,E,3,[[["self"]],[T]]],[11,R[14],E,E,3,[[["self"],[T]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[15],E,E,3,[[[U]],[R[2]]]],[11,R[16],E,E,3,[[],[R[2]]]],[11,R[17],E,E,3,[[["self"]],[T]]],[11,R[19],E,E,3,[[["self"]],[T]]],[11,R[18],E,E,3,[[["self"]],[R[20]]]],[11,"default",E,E,1,[[],["limits"]]],[11,"clone",E,E,0,[[["self"]],["ratio"]]],[11,"clone",E,E,3,[[["self"]],[R[12]]]],[11,"clone",E,E,1,[[["self"]],["limits"]]],[11,"from",E,E,2,[[[R[3]]],[R[3]]]],[11,"from",E,E,2,[[["parseinterror"]],[R[3]]]],[11,"from",E,E,2,[[["utf8error"]],[R[3]]]],[11,"fmt",E,E,0,[[["self"],[R[21]]],[R[2]]]],[11,"fmt",E,E,2,[[["self"],[R[21]]],[R[2]]]],[11,"fmt",E,E,0,[[["self"],[R[21]]],[R[2]]]],[11,"fmt",E,E,3,[[["self"],[R[21]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[21]]],[R[2]]]],[11,"fmt",E,E,5,[[["self"],[R[21]]],[R[2]]]],[11,"fmt",E,E,6,[[["self"],[R[21]]],[R[2]]]]],"p":[[3,"Ratio"],[3,"Limits"],[4,"Error"],[4,R[22]],[3,"Decoder"],[3,"Frame"],[3,R[23]],[3,"Encoder"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);