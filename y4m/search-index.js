var N = null;var searchIndex = {};
searchIndex["y4m"]={"doc":"YUV4MPEG2 (.y4m) Encoder/Decoder","items":[[3,"Ratio","y4m","Simple ratio structure since stdlib lacks one.",N,N],[12,"num","","Numerator.",0,N],[12,"den","","Denominator.",0,N],[3,"Decoder","","YUV4MPEG2 decoder.",N,N],[3,"Frame","","A single frame.",N,N],[3,"EncoderBuilder","","Encoder builder. Allows to set y4m file parameters using builder pattern.",N,N],[3,"Encoder","","YUV4MPEG2 encoder.",N,N],[4,"Error","","Both encoding and decoding errors.",N,N],[13,"EOF","","End of the file. Technically not an error, but it's easier to process that way.",1,N],[13,"BadInput","","Bad input parameters provided.",1,N],[13,"UnknownColorspace","","Unknown colorspace (possibly just unimplemented).",1,N],[13,"ParseError","","Error while parsing the file/frame header.",1,N],[13,"IoError","","Error while reading/writing the file.",1,N],[4,"Colorspace","","Colorspace (color model/pixel format). Only subset of them is supported.",N,N],[13,"Cmono","","Grayscale only, 8-bit.",2,N],[13,"C420","","4:2:0 with coincident chroma planes, 8-bit.",2,N],[13,"C420p10","","4:2:0 with coincident chroma planes, 10-bit.",2,N],[13,"C420p12","","4:2:0 with coincident chroma planes, 12-bit.",2,N],[13,"C420jpeg","","4:2:0 with biaxially-displaced chroma planes, 8-bit.",2,N],[13,"C420paldv","","4:2:0 with vertically-displaced chroma planes, 8-bit.",2,N],[13,"C420mpeg2","","Found in some files. Same as `C420`.",2,N],[13,"C422","","4:2:2, 8-bit.",2,N],[13,"C422p10","","4:2:2, 10-bit.",2,N],[13,"C422p12","","4:2:2, 12-bit.",2,N],[13,"C444","","4:4:4, 8-bit.",2,N],[13,"C444p10","","4:4:4, 10-bit.",2,N],[13,"C444p12","","4:4:4, 12-bit.",2,N],[5,"decode","","Create a new decoder instance. Alias for `Decoder::new`.",N,[[["r"]],["result",["decoder","error"]]]],[5,"encode","","Create a new encoder builder. Alias for `EncoderBuilder::new`.",N,[[["usize"],["usize"],["ratio"]],["encoderbuilder"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from","","",1,[[["error"]],["error"]]],[11,"from","","",1,[[["parseinterror"]],["error"]]],[11,"from","","",1,[[["utf8error"]],["error"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["ratio"]]],[11,"new","","Create a new ratio.",0,[[["usize"],["usize"]],["ratio"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["colorspace"]]],[11,"get_bit_depth","","Return the bit depth per sample",2,[[["self"]],["usize"]]],[11,"get_bytes_per_sample","","Return the number of bytes in a sample",2,[[["self"]],["usize"]]],[11,"new","","Create a new decoder instance.",3,[[["r"]],["result",["decoder","error"]]]],[11,"read_frame","","Iterate over frames, without extra heap allocations. End of input is indicated by `Error::EOF`.",3,[[["self"]],["result",["frame","error"]]]],[11,"get_width","","Return file width.",3,[[["self"]],["usize"]]],[11,"get_height","","Return file height.",3,[[["self"]],["usize"]]],[11,"get_framerate","","Return file framerate.",3,[[["self"]],["ratio"]]],[11,"get_colorspace","","Return file colorspace.",3,[[["self"]],["colorspace"]]],[11,"get_raw_params","","Return file raw parameters.",3,N],[11,"get_bit_depth","","Return the bit depth per sample",3,[[["self"]],["usize"]]],[11,"get_bytes_per_sample","","Return the number of bytes in a sample",3,[[["self"]],["usize"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new frame with optional parameters. No heap allocations are made.",4,N],[11,"from_u16","","Create a new frame from data in 16-bit format.",4,N],[11,"get_y_plane","","Return Y (first) plane.",4,N],[11,"get_u_plane","","Return U (second) plane. Empty in case of grayscale.",4,N],[11,"get_v_plane","","Return V (third) plane. Empty in case of grayscale.",4,N],[11,"get_raw_params","","Return frame raw parameters if any.",4,[[["self"]],["option"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new encoder builder.",5,[[["usize"],["usize"],["ratio"]],["encoderbuilder"]]],[11,"with_colorspace","","Specify file colorspace.",5,[[["self"],["colorspace"]],["self"]]],[11,"write_header","","Write header to the stream and create encoder instance.",5,[[["self"],["w"]],["result",["encoder","error"]]]],[11,"write_frame","","Write next frame to the stream.",6,[[["self"],["frame"]],["result",["error"]]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]]],"paths":[[3,"Ratio"],[4,"Error"],[4,"Colorspace"],[3,"Decoder"],[3,"Frame"],[3,"EncoderBuilder"],[3,"Encoder"]]};
initSearch(searchIndex);
