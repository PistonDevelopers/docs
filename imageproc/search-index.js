var N = null;var searchIndex = {};
searchIndex["adler32"]={"doc":"A minimal implementation of Adler32 for Rust.","items":[[3,"RollingAdler32","adler32","A rolling version of the Adler32 hash, which can 'forget' past bytes.",N,N],[5,"adler32","","Consume a Read object and returns the Adler32 hash.",N,[[["r"]],["result",["u32"]]]],[11,"new","","Creates an empty Adler32 context (with hash 1).",0,[[],["rollingadler32"]]],[11,"from_value","","Creates an Adler32 context with the given initial value.",0,[[["u32"]],["rollingadler32"]]],[11,"from_buffer","","Convenience function initializing a context from the hash of a buffer.",0,N],[11,"hash","","Returns the current hash.",0,[[["self"]],["u32"]]],[11,"remove","","Removes the given `byte` that was fed to the algorithm `size` bytes ago.",0,[[["self"],["usize"],["u8"]]]],[11,"update","","Feeds a new `byte` to the algorithm to update the hash.",0,[[["self"],["u8"]]]],[11,"update_buffer","","Feeds a vector of bytes to the algorithm to update the hash.",0,N]],"paths":[[3,"RollingAdler32"]]};
searchIndex["aho_corasick"]={"doc":"An implementation of the Aho-Corasick string search algorithm.","items":[[3,"Match","aho_corasick","Records a match in the search text.",N,N],[12,"pati","","The pattern index.",0,N],[12,"start","","The starting byte offset of the match in the search text.",0,N],[12,"end","","The ending byte offset of the match in the search text.",0,N],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",N,N],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",N,N],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",N,N],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",N,N],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",N,N],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",N,N],[3,"Dense","","State transitions that can be stored either sparsely or densely.",N,N],[3,"Sparse","","State transitions that are always sparse.",N,N],[11,"clone","","",0,[[["self"]],["match"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"eq","","",0,[[["self"],["match"]],["bool"]]],[11,"ne","","",0,[[["self"],["match"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"next","","",1,[[["self"]],["option",["match"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"next","","",2,[[["self"]],["option",["result"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"next","","",3,[[["self"]],["option",["match"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"next","","",4,[[["self"]],["option",["result"]]]],[11,"clone","","",5,[[["self"]],["fullacautomaton"]]],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing Aho-Corasick automaton.",5,[[["acautomaton"]],["fullacautomaton"]]],[11,"next_state","","",5,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[11,"get_match","","",5,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[11,"has_match","","",5,[[["self"],["stateidx"],["usize"]],["bool"]]],[11,"start_bytes","","",5,N],[11,"patterns","","",5,N],[11,"pattern","","",5,[[["self"],["usize"]],["p"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[6,"StateIdx","","The integer type used for the state index.",N,N],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",N,N],[10,"next_state","","Return the next state given the current state and next character.",6,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",6,[[["self"],["stateidx"],["usize"]],["bool"]]],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,N],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,N],[10,"pattern","","Returns the pattern indexed at `i`.",6,[[["self"],["usize"]],["p"]]],[11,"len","","Return the number of patterns in the automaton.",6,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the automaton has no patterns.",6,[[["self"]],["bool"]]],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,[[["self"],["q"]],["matches"]]],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,[[["self"],["q"]],["matchesoverlapping"]]],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,[[["self"],["r"]],["streammatches"]]],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,[[["self"],["r"]],["streammatchesoverlapping"]]],[8,"Transitions","","An abstraction over state transition strategies.",N,N],[10,"new","","Return a new state at the given depth.",7,[[["u32"]],["self"]]],[10,"goto","","Return the next state index given the next character.",7,[[["self"],["u8"]],["stateidx"]]],[10,"set_goto","","Set the next state index for the character given.",7,[[["self"],["u8"],["stateidx"]]]],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,[[["self"]],["usize"]]],[11,"clone","","",8,[[["self"]],["acautomaton"]]],[11,"new","","Create a new automaton from an iterator of patterns.",8,[[["i"]],["acautomaton",["dense"]]]],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,[[["i"]],["acautomaton"]]],[11,"into_full","","Build out the entire automaton into a single matrix.",8,[[["self"]],["fullacautomaton"]]],[11,"next_state","","",8,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[11,"get_match","","",8,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[11,"has_match","","",8,[[["self"],["stateidx"],["usize"]],["bool"]]],[11,"start_bytes","","",8,N],[11,"patterns","","",8,N],[11,"pattern","","",8,[[["self"],["usize"]],["p"]]],[11,"clone","","",9,[[["self"]],["dense"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"new","","",9,[[["u32"]],["dense"]]],[11,"goto","","",9,[[["self"],["u8"]],["stateidx"]]],[11,"set_goto","","",9,[[["self"],["u8"],["stateidx"]]]],[11,"heap_bytes","","",9,[[["self"]],["usize"]]],[11,"clone","","",10,[[["self"]],["sparse"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"new","","",10,[[["u32"]],["sparse"]]],[11,"goto","","",10,[[["self"],["u8"]],["stateidx"]]],[11,"set_goto","","",10,[[["self"],["u8"],["stateidx"]]]],[11,"heap_bytes","","",10,[[["self"]],["usize"]]],[11,"from_iter","","Create an automaton from an iterator of strings.",8,[[["t"]],["acautomaton"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"len","","Return the number of patterns in the automaton.",6,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the automaton has no patterns.",6,[[["self"]],["bool"]]],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,[[["self"],["q"]],["matches"]]],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,[[["self"],["q"]],["matchesoverlapping"]]],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,[[["self"],["r"]],["streammatches"]]],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,[[["self"],["r"]],["streammatchesoverlapping"]]]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["alga"]={"doc":"Traits for algebra.","items":[[0,"general","alga","Fundamental algebraic structures.",N,N],[3,"Additive","alga::general","The addition operator, commonly symbolized by `+`.",N,N],[3,"Multiplicative","","The multiplication operator, commonly symbolized by `×`.",N,N],[3,"Id","","The universal identity element wrt. a given operator, usually noted `Id` with a context-dependent subscript.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new identity element.",0,[[],["id"]]],[11,"clone","","",0,[[["self"]],["id"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["id"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["id"]],["option",["ordering"]]]],[11,"identity","","",0,[[],["id"]]],[11,"default_epsilon","","",0,N],[11,"abs_diff_eq","","",0,N],[11,"default_max_relative","","",0,N],[11,"relative_eq","","",0,N],[11,"default_max_ulps","","",0,[[],["u32"]]],[11,"ulps_eq","","",0,N],[11,"mul","","",0,[[["self"],["id"]],["id"]]],[11,"mul_assign","","",0,[[["self"],["id"]]]],[11,"div","","",0,[[["self"],["id"]],["id"]]],[11,"div_assign","","",0,[[["self"],["id"]]]],[11,"add","","",0,[[["self"],["id",["additive"]]],["id",["additive"]]]],[11,"add_assign","","",0,[[["self"],["id",["additive"]]]]],[11,"operate","","",0,[[["self"],["self"]],["id"]]],[11,"inverse","","",0,[[["self"]],["self"]]],[11,"inverse_mut","","",0,[[["self"]]]],[11,"one","","",0,[[],["id"]]],[11,"zero","","",0,[[],["id",["additive"]]]],[11,"is_zero","","",0,[[["self"]],["bool"]]],[11,"to_superset","","",0,[[["self"]],["t"]]],[11,"is_in_subset","","",0,[[["t"]],["bool"]]],[11,"from_superset_unchecked","","",0,[[["t"]],["self"]]],[11,"meet","","",0,[[["self"],["self"]],["self"]]],[11,"join","","",0,[[["self"],["self"]],["self"]]],[11,"clone","","",1,[[["self"]],["additive"]]],[11,"clone","","",2,[[["self"]],["multiplicative"]]],[11,"operator_token","","",1,[[],["self"]]],[11,"operator_token","","",2,[[],["self"]]],[8,"ClosedAdd","","[Alias] Trait alias for `Add` and `AddAsign` with result of type `Self`.",N,N],[8,"ClosedDiv","","[Alias] Trait alias for `Div` and `DivAsign` with result of type `Self`.",N,N],[8,"ClosedMul","","[Alias] Trait alias for `Mul` and `MulAsign` with result of type `Self`.",N,N],[8,"ClosedNeg","","[Alias] Trait alias for `Neg` with result of type `Self`.",N,N],[8,"ClosedSub","","[Alias] Trait alias for `Sub` and `SubAsign` with result of type `Self`.",N,N],[8,"Inverse","","Trait used to define the inverse element relative to the given operator.",N,N],[10,"inverse","","Returns the inverse of `self`, relative to the operator `O`.",3,[[["self"]],["self"]]],[11,"inverse_mut","","In-place inversin of `self`.",3,[[["self"]]]],[8,"Operator","","Trait implemented by types representing abstract operators.",N,N],[10,"operator_token","","Returns the structure that identifies the operator.",4,[[],["self"]]],[8,"Identity","","A type that is equipped with identity.",N,N],[10,"identity","","The identity element.",5,[[],["self"]]],[11,"id","","Specific identity.",5,[[["o"]],["self"]]],[8,"SubsetOf","","Nested sets and conversions between them (using an injective mapping). Useful to work with substructures. In generic code, it is preferable to use `SupersetOf` as trait bound whenever possible instead of `SubsetOf` (because SupersetOf is automatically implemented whenever `SubsetOf` is).",N,N],[10,"to_superset","","The inclusion map: converts `self` to the equivalent element of its superset.",6,[[["self"]],["t"]]],[11,"from_superset","","The inverse inclusion map: attempts to construct `self` from the equivalent element of its superset.",6,[[["t"]],["option"]]],[10,"from_superset_unchecked","","Use with care! Same as `self.to_superset` but without any property checks. Always succeeds.",6,[[["t"]],["self"]]],[10,"is_in_subset","","Checks if `element` is actually part of the subset `Self` (and can be converted to it).",6,[[["t"]],["bool"]]],[8,"SupersetOf","","Nested sets and conversions between them. Useful to work with substructures. It is preferable to implement the `SupersetOf` trait instead of `SubsetOf` whenever possible (because `SupersetOf` is automatically implemented whenever `SubsetOf` is.",N,N],[11,"to_subset","","The inverse inclusion map: attempts to construct `self` from the equivalent element of its superset.",7,[[["self"]],["option"]]],[10,"is_in_subset","","Checks if `self` is actually part of its subset `T` (and can be converted to it).",7,[[["self"]],["bool"]]],[10,"to_subset_unchecked","","Use with care! Same as `self.to_subset` but without any property checks. Always succeeds.",7,[[["self"]],["t"]]],[10,"from_subset","","The inclusion map: converts `self` to the equivalent element of its superset.",7,[[["t"]],["self"]]],[8,"AbstractGroup","","A group is a loop and a monoid at the same time.",N,N],[8,"AbstractGroupAbelian","","An commutative group.",N,N],[11,"prop_is_commutative_approx","","Returns `true` if the operator is commutative for the given argument tuple. Approximate equality is used for verifications.",8,N],[11,"prop_is_commutative","","Returns `true` if the operator is commutative for the given argument tuple.",8,N],[8,"AbstractLoop","","A quasigroup with an unique identity element.",N,N],[8,"AbstractMagma","","Types that are closed under a given operator.",N,N],[10,"operate","","Performs an operation.",9,[[["self"],["self"]],["self"]]],[11,"op","","Performs specific operation.",9,[[["self"],["o"],["self"]],["self"]]],[8,"AbstractMonoid","","A semigroup equipped with an identity element.",N,N],[11,"prop_operating_identity_element_is_noop_approx","","Checks whether operating with the identity element is a no-op for the given argument. Approximate equality is used for verifications.",10,N],[11,"prop_operating_identity_element_is_noop","","Checks whether operating with the identity element is a no-op for the given argument.",10,N],[8,"AbstractQuasigroup","","A magma with the divisibility property.",N,N],[11,"prop_inv_is_latin_square_approx","","Returns `true` if latin squareness holds for the given arguments. Approximate equality is used for verifications.",11,N],[11,"prop_inv_is_latin_square","","Returns `true` if latin squareness holds for the given arguments.",11,N],[8,"AbstractSemigroup","","An associative magma.",N,N],[11,"prop_is_associative_approx","","Returns `true` if associativity holds for the given arguments. Approximate equality is used for verifications.",12,N],[11,"prop_is_associative","","Returns `true` if associativity holds for the given arguments.",12,N],[8,"AbstractField","","A field is a commutative ring, and an abelian group under both operators.",N,N],[8,"AbstractRing","","A ring is the combination of an abelian group and a multiplicative monoid structure.",N,N],[11,"prop_mul_and_add_are_distributive_approx","","Returns `true` if the multiplication and addition operators are distributive for the given argument tuple. Approximate equality is used for verifications.",13,N],[11,"prop_mul_and_add_are_distributive","","Returns `true` if the multiplication and addition operators are distributive for the given argument tuple.",13,N],[8,"AbstractRingCommutative","","A ring with a commutative multiplication.",N,N],[11,"prop_mul_is_commutative_approx","","Returns `true` if the multiplication operator is commutative for the given argument tuple. Approximate equality is used for verifications.",14,N],[11,"prop_mul_is_commutative","","Returns `true` if the multiplication operator is commutative for the given argument tuple.",14,N],[8,"AbstractModule","","A module combines two sets: one with an abelian group structure and another with a commutative ring structure.",N,N],[16,"AbstractRing","","The underlying scalar field.",15,N],[10,"multiply_by","","Multiplies an element of the ring with an element of the module.",15,N],[8,"JoinSemilattice","","A set where every two elements have a suppremum (i.e. smallest upper bound).",N,N],[10,"join","","Returns the join (aka. supremum) of two values.",16,[[["self"],["self"]],["self"]]],[8,"Lattice","","Partially orderable sets where every two elements have a suppremum and infimum.",N,N],[11,"meet_join","","Returns the infimum and the supremum simultaneously.",17,N],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",17,[[["self"],["self"]],["option"]]],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",17,[[["self"],["self"]],["option"]]],[11,"partial_sort2","","Sorts two values in increasing order using a partial ordering.",17,[[["self"],["self"]],["option"]]],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to `min` or `max`.",17,[[["self"],["self"],["self"]],["option"]]],[8,"MeetSemilattice","","A set where every two elements have an infimum (i.e. greatest lower bound).",N,N],[10,"meet","","Returns the meet (aka. infimum) of two values.",18,[[["self"],["self"]],["self"]]],[8,"AdditiveGroup","","[Alias] Algebraic structure specialized for one kind of operation.",N,N],[8,"AdditiveGroupAbelian","","[Alias] Algebraic structure specialized for one kind of operation.",N,N],[8,"AdditiveLoop","","[Alias] Algebraic structure specialized for one kind of operation.",N,N],[8,"AdditiveMagma","","[Alias] Algebraic structure specialized for one kind of operation.",N,N],[8,"AdditiveMonoid","","[Alias] Algebraic structure specialized for one kind of operation.",N,N],[8,"AdditiveQuasigroup","","[Alias] Algebraic structure specialized for one kind of operation.",N,N],[8,"AdditiveSemigroup","","[Alias] Algebraic structure specialized for one kind of operation.",N,N],[8,"Field","","[Alias] Algebraic structure specialized for one kind of operation.",N,N],[8,"Module","","A module which overloads the `*` and `+` operators.",N,N],[16,"Ring","","The underlying scalar field.",19,N],[8,"MultiplicativeGroup","","[Alias] Algebraic structure specialized for one kind of operation.",N,N],[8,"MultiplicativeGroupAbelian","","[Alias] Algebraic structure specialized for one kind of operation.",N,N],[8,"MultiplicativeLoop","","[Alias] Algebraic structure specialized for one kind of operation.",N,N],[8,"MultiplicativeMagma","","[Alias] Algebraic structure specialized for one kind of operation.",N,N],[8,"MultiplicativeMonoid","","[Alias] Algebraic structure specialized for one kind of operation.",N,N],[8,"MultiplicativeQuasigroup","","[Alias] Algebraic structure specialized for one kind of operation.",N,N],[8,"MultiplicativeSemigroup","","[Alias] Algebraic structure specialized for one kind of operation.",N,N],[8,"Ring","","[Alias] Algebraic structure specialized for one kind of operation.",N,N],[8,"RingCommutative","","[Alias] Algebraic structure specialized for one kind of operation.",N,N],[8,"Real","","Trait shared by all reals.",N,N],[10,"floor","","",20,[[["self"]],["self"]]],[10,"ceil","","",20,[[["self"]],["self"]]],[10,"round","","",20,[[["self"]],["self"]]],[10,"trunc","","",20,[[["self"]],["self"]]],[10,"fract","","",20,[[["self"]],["self"]]],[10,"abs","","",20,[[["self"]],["self"]]],[10,"signum","","",20,[[["self"]],["self"]]],[10,"is_sign_positive","","",20,[[["self"]],["bool"]]],[10,"is_sign_negative","","",20,[[["self"]],["bool"]]],[10,"mul_add","","",20,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","",20,[[["self"]],["self"]]],[10,"powi","","",20,[[["self"],["i32"]],["self"]]],[10,"powf","","",20,[[["self"],["self"]],["self"]]],[10,"sqrt","","",20,[[["self"]],["self"]]],[10,"exp","","",20,[[["self"]],["self"]]],[10,"exp2","","",20,[[["self"]],["self"]]],[10,"ln","","",20,[[["self"]],["self"]]],[10,"log","","",20,[[["self"],["self"]],["self"]]],[10,"log2","","",20,[[["self"]],["self"]]],[10,"log10","","",20,[[["self"]],["self"]]],[10,"max","","",20,[[["self"],["self"]],["self"]]],[10,"min","","",20,[[["self"],["self"]],["self"]]],[10,"cbrt","","",20,[[["self"]],["self"]]],[10,"hypot","","",20,[[["self"],["self"]],["self"]]],[10,"sin","","",20,[[["self"]],["self"]]],[10,"cos","","",20,[[["self"]],["self"]]],[10,"tan","","",20,[[["self"]],["self"]]],[10,"asin","","",20,[[["self"]],["self"]]],[10,"acos","","",20,[[["self"]],["self"]]],[10,"atan","","",20,[[["self"]],["self"]]],[10,"atan2","","",20,[[["self"],["self"]],["self"]]],[10,"sin_cos","","",20,N],[10,"exp_m1","","",20,[[["self"]],["self"]]],[10,"ln_1p","","",20,[[["self"]],["self"]]],[10,"sinh","","",20,[[["self"]],["self"]]],[10,"cosh","","",20,[[["self"]],["self"]]],[10,"tanh","","",20,[[["self"]],["self"]]],[10,"asinh","","",20,[[["self"]],["self"]]],[10,"acosh","","",20,[[["self"]],["self"]]],[10,"atanh","","",20,[[["self"]],["self"]]],[10,"pi","","",20,[[],["self"]]],[10,"two_pi","","",20,[[],["self"]]],[10,"frac_pi_2","","",20,[[],["self"]]],[10,"frac_pi_3","","",20,[[],["self"]]],[10,"frac_pi_4","","",20,[[],["self"]]],[10,"frac_pi_6","","",20,[[],["self"]]],[10,"frac_pi_8","","",20,[[],["self"]]],[10,"frac_1_pi","","",20,[[],["self"]]],[10,"frac_2_pi","","",20,[[],["self"]]],[10,"frac_2_sqrt_pi","","",20,[[],["self"]]],[10,"e","","",20,[[],["self"]]],[10,"log2_e","","",20,[[],["self"]]],[10,"log10_e","","",20,[[],["self"]]],[10,"ln_2","","",20,[[],["self"]]],[10,"ln_10","","",20,[[],["self"]]],[0,"linear","alga","Traits dedicated to linear algebra.",N,N],[11,"transform_point","alga::general","",0,[[["self"],["e"]],["e"]]],[11,"transform_vector","","",0,N],[11,"inverse_transform_point","","",0,[[["self"],["e"]],["e"]]],[11,"inverse_transform_vector","","",0,N],[11,"decompose","","",0,N],[11,"append_translation","","",0,N],[11,"prepend_translation","","",0,N],[11,"append_rotation","","",0,N],[11,"prepend_rotation","","",0,N],[11,"append_scaling","","",0,N],[11,"prepend_scaling","","",0,N],[11,"translation","","",0,N],[11,"rotation","","",0,N],[11,"scaling","","",0,N],[11,"powf","","",0,N],[11,"rotation_between","","",0,N],[11,"scaled_rotation_between","","",0,N],[11,"to_vector","","",0,N],[11,"from_vector","","",0,N],[8,"AffineSpace","alga::linear","A set points associated with a vector space and a transitive and free additive group action (the translation).",N,N],[16,"Translation","","The associated vector space.",21,N],[11,"translate_by","","Same as `*self + *t`. Applies the additive group action of this affine space's associated vector space on `self`.",21,N],[11,"subtract","","Same as `*self - *other`. Returns the unique element `v` of the associated vector space such that `self = right + v`.",21,N],[8,"EuclideanSpace","","The finite-dimensional affine space based on the field of reals.",N,N],[16,"Coordinates","","The underlying finite vector space.",22,N],[16,"Real","","The underlying reals.",22,N],[10,"origin","","The preferred origin of this euclidean space.",22,[[],["self"]]],[11,"scale_by","","Multiplies the distance of this point to `Self::origin()` by `s`.",22,N],[11,"coordinates","","The coordinates of this point, i.e., the translation from the origin.",22,N],[11,"from_coordinates","","Builds a point from its coordinates relative to the origin.",22,N],[11,"distance_squared","","The distance between two points.",22,N],[11,"distance","","The distance between two points.",22,N],[8,"FiniteDimInnerSpace","","A finite-dimensional vector space equipped with an inner product that must coincide with the dot product.",N,N],[10,"orthonormalize","","Orthonormalizes the given family of vectors. The largest free family of vectors is moved at the beginning of the array and its size is returned. Vectors at an indices larger or equal to this length can be modified to an arbitrary value.",23,N],[10,"orthonormal_subspace_basis","","Applies the given closure to each element of the orthonormal basis of the subspace orthogonal to free family of vectors `vs`. If `vs` is not a free family, the result is unspecified.",23,N],[8,"FiniteDimVectorSpace","","A finite-dimensional vector space.",N,N],[10,"dimension","","The vector space dimension.",24,[[],["usize"]]],[11,"canonical_basis","","Applies the given closule to each element of this vector space's canonical basis. Stops if `f` returns `false`.",24,[[["f"]]]],[10,"canonical_basis_element","","The i-the canonical basis element.",24,[[["usize"]],["self"]]],[10,"dot","","The dot product between two vectors.",24,N],[10,"component_unchecked","","Same as `&self[i]` but without bound-checking.",24,N],[10,"component_unchecked_mut","","Same as `&mut self[i]` but without bound-checking.",24,N],[8,"InnerSpace","","A vector space aquipped with an inner product.",N,N],[16,"Real","","The result of inner product (same as the field used by this vector space).",25,N],[10,"inner_product","","Computes the inner product of `self` with `other`.",25,N],[11,"angle","","Measures the angle between two vectors.",25,N],[8,"NormedSpace","","A normed vector space.",N,N],[10,"norm_squared","","The squared norm of this vector.",26,N],[10,"norm","","The norm of this vector.",26,N],[10,"normalize","","Returns a normalized version of this vector.",26,[[["self"]],["self"]]],[10,"normalize_mut","","Normalizes this vector in-place and returns its norm.",26,N],[10,"try_normalize","","Returns a normalized version of this vector unless its norm as smaller or equal to `eps`.",26,N],[10,"try_normalize_mut","","Normalizes this vector in-place or does nothing if its norm is smaller or equal to `eps`.",26,N],[8,"VectorSpace","","A vector space has a module structure over a field instead of a ring.",N,N],[16,"Field","","The underlying scalar field.",27,N],[8,"AffineTransformation","","The group of affine transformations. They are decomposable into a rotation, a non-uniform scaling, a second rotation, and a translation (applied in that order).",N,N],[16,"Rotation","","Type of the first rotation to be applied.",28,N],[16,"NonUniformScaling","","Type of the non-uniform scaling to be applied.",28,N],[16,"Translation","","The type of the pure translation part of this affine transformation.",28,N],[10,"decompose","","Decomposes this affine transformation into a rotation followed by a non-uniform scaling, followed by a rotation, followed by a translation.",28,N],[10,"append_translation","","Appends a translation to this similarity.",28,N],[10,"prepend_translation","","Prepends a translation to this similarity.",28,N],[10,"append_rotation","","Appends a rotation to this similarity.",28,N],[10,"prepend_rotation","","Prepends a rotation to this similarity.",28,N],[10,"append_scaling","","Appends a scaling factor to this similarity.",28,N],[10,"prepend_scaling","","Prepends a scaling factor to this similarity.",28,N],[11,"append_rotation_wrt_point","","Appends to this similarity a rotation centered at the point `p`, i.e., this point is left invariant.",28,N],[8,"DirectIsometry","","Subgroups of the orientation-preserving isometry group `SE(n)`, i.e., rotations and translations.",N,N],[8,"Isometry","","Subgroups of the isometry group `E(n)`, i.e., rotations, reflexions, and translations.",N,N],[8,"OrthogonalTransformation","","Subgroups of the n-dimensional rotations and scaling `O(n)`.",N,N],[8,"ProjectiveTransformation","","The most general form of inversible transformations on an euclidean space.",N,N],[10,"inverse_transform_point","","Applies this group's inverse action on a point from the euclidean space.",29,[[["self"],["e"]],["e"]]],[10,"inverse_transform_vector","","Applies this group's inverse action on a vector from the euclidean space.",29,N],[8,"Rotation","","Subgroups of the n-dimensional rotation group `SO(n)`.",N,N],[10,"powf","","Raises this rotation to a power. If this is a simple rotation, the result must be equivalent to multiplying the rotation angle by `n`.",30,N],[10,"rotation_between","","Computes a simple rotation that makes the angle between `a` and `b` equal to zero, i.e., `b.angle(a * delta_rotation(a, b)) = 0`. If `a` and `b` are collinear, the computed rotation may not be unique. Returns `None` if no such simple rotation exists in the subgroup represented by `Self`.",30,N],[10,"scaled_rotation_between","","Computes the rotation between `a` and `b` and raises it to the power `n`.",30,N],[8,"Scaling","","Subgroups of the (signed) uniform scaling group.",N,N],[11,"to_real","","Converts this scaling factor to a real. Same as `self.to_superset()`.",31,N],[11,"from_real","","Attempts to convert a real to an element of this scaling subgroup. Same as `Self::from_superset()`. Returns `None` if no such scaling is possible for this subgroup.",31,N],[11,"powf","","Raises the scaling to a power. The result must be equivalent to `self.to_superset().powf(n)`. Returns `None` if the result is not representable by `Self`.",31,N],[11,"scale_between","","The scaling required to make `a` have the same norm as `b`, i.e., `|b| = |a| * norm_ratio(a, b)`.",31,N],[8,"Similarity","","Subgroups of the similarity group `S(n)`, i.e., rotations, translations, and (signed) uniform scaling.",N,N],[16,"Scaling","","The type of the pure (uniform) scaling part of this similarity transformation.",32,N],[10,"translation","","The pure translational component of this similarity transformation.",32,N],[10,"rotation","","The pure rotational component of this similarity transformation.",32,N],[10,"scaling","","The pure scaling component of this similarity transformation.",32,N],[11,"translate_point","","Applies this transformation's pure translational part to a point.",32,[[["self"],["e"]],["e"]]],[11,"rotate_point","","Applies this transformation's pure rotational part to a point.",32,[[["self"],["e"]],["e"]]],[11,"scale_point","","Applies this transformation's pure scaling part to a point.",32,[[["self"],["e"]],["e"]]],[11,"rotate_vector","","Applies this transformation's pure rotational part to a vector.",32,N],[11,"scale_vector","","Applies this transformation's pure scaling part to a vector.",32,N],[11,"inverse_translate_point","","Applies this transformation inverse's pure translational part to a point.",32,[[["self"],["e"]],["e"]]],[11,"inverse_rotate_point","","Applies this transformation inverse's pure rotational part to a point.",32,[[["self"],["e"]],["e"]]],[11,"inverse_scale_point","","Applies this transformation inverse's pure scaling part to a point.",32,[[["self"],["e"]],["e"]]],[11,"inverse_rotate_vector","","Applies this transformation inverse's pure rotational part to a vector.",32,N],[11,"inverse_scale_vector","","Applies this transformation inverse's pure scaling part to a vector.",32,N],[8,"Transformation","","A general transformation acting on an euclidean space. It may not be inversible.",N,N],[10,"transform_point","","Applies this group's action on a point from the euclidean space.",33,[[["self"],["e"]],["e"]]],[10,"transform_vector","","Applies this group's action on a vector from the euclidean space.",33,N],[8,"Translation","","Subgroups of the n-dimensional translation group `T(n)`.",N,N],[10,"to_vector","","Converts this translation to a vector.",34,N],[10,"from_vector","","Attempts to convert a vector to this translation. Returns `None` if the translation represented by `v` is not part of the translation subgroup represented by `Self`.",34,N],[11,"powf","","Raises the translation to a power. The result must be equivalent to `self.to_superset() * n`.  Returns `None` if the result is not representable by `Self`.",34,N],[11,"translation_between","","The translation needed to make `a` coincide with `b`, i.e., `b = a * translation_to(a, b)`.",34,[[["e"],["e"]],["option"]]],[8,"InversibleSquareMatrix","","The group of inversible matrix. Commonly known as the General Linear group `GL(n)` by algebraists.",N,N],[8,"Matrix","","The space of all matrices.",N,N],[16,"Field","","The underlying field.",35,N],[16,"Row","","The type of rows of this matrix.",35,N],[16,"Column","","The type of columns of this matrix.",35,N],[16,"Transpose","","The type of the transposed matrix.",35,N],[10,"nrows","","The number of rows of this matrix.",35,[[["self"]],["usize"]]],[10,"ncolumns","","The number of columns of this matrix.",35,[[["self"]],["usize"]]],[10,"row","","The i-th row of this matrix.",35,N],[10,"column","","The i-th column of this matrix.",35,N],[10,"get_unchecked","","Gets the component at row `i` and column `j` of this matrix without bound checking.",35,N],[11,"get","","Gets the component at row `i` and column `j` of this matrix.",35,N],[10,"transpose","","Transposes this matrix.",35,N],[8,"MatrixMut","","The space of all matrices that are stable under modifications of its components, rows and columns.",N,N],[11,"set_row","","Sets the i-th row of this matrix.",36,N],[10,"set_row_mut","","In-place sets the i-th row of this matrix.",36,N],[11,"set_column","","Sets the i-th col of this matrix.",36,N],[10,"set_column_mut","","In-place sets the i-th col of this matrix.",36,N],[10,"set_unchecked","","Sets the component at row `i` and column `j` of this matrix without bound checking.",36,N],[11,"set","","Sets the component at row `i` and column `j` of this matrix.",36,N],[8,"SquareMatrix","","The monoid of all square matrices, including non-inversible ones.",N,N],[16,"Vector","","The type of rows, column, and diagonal of this matrix.",37,N],[10,"diagonal","","The diagonal of this matrix.",37,N],[10,"determinant","","The determinant of this matrix.",37,N],[10,"try_inverse","","Attempts to inverse `self`.",37,[[["self"]],["option"]]],[11,"dimension","","The number of rows or column of this matrix.",37,[[["self"]],["usize"]]],[11,"transpose_mut","","In-place transposition.",37,[[["self"]]]],[8,"SquareMatrixMut","","The monoid of all mutable square matrices that are stable under modification of its diagonal.",N,N],[10,"from_diagonal","","Constructs a new diagonal matrix.",38,N],[11,"set_diagonal","","Sets the matrix diagonal.",38,N],[10,"set_diagonal_mut","","In-place sets the matrix diagonal.",38,N],[11,"op","alga::general","Performs specific operation.",9,[[["self"],["o"],["self"]],["self"]]],[11,"prop_inv_is_latin_square_approx","","Returns `true` if latin squareness holds for the given arguments. Approximate equality is used for verifications.",11,N],[11,"prop_inv_is_latin_square","","Returns `true` if latin squareness holds for the given arguments.",11,N],[11,"prop_is_associative_approx","","Returns `true` if associativity holds for the given arguments. Approximate equality is used for verifications.",12,N],[11,"prop_is_associative","","Returns `true` if associativity holds for the given arguments.",12,N],[11,"prop_operating_identity_element_is_noop_approx","","Checks whether operating with the identity element is a no-op for the given argument. Approximate equality is used for verifications.",10,N],[11,"prop_operating_identity_element_is_noop","","Checks whether operating with the identity element is a no-op for the given argument.",10,N],[11,"prop_is_commutative_approx","","Returns `true` if the operator is commutative for the given argument tuple. Approximate equality is used for verifications.",8,N],[11,"prop_is_commutative","","Returns `true` if the operator is commutative for the given argument tuple.",8,N],[11,"prop_mul_and_add_are_distributive_approx","","Returns `true` if the multiplication and addition operators are distributive for the given argument tuple. Approximate equality is used for verifications.",13,N],[11,"prop_mul_and_add_are_distributive","","Returns `true` if the multiplication and addition operators are distributive for the given argument tuple.",13,N],[11,"prop_mul_is_commutative_approx","","Returns `true` if the multiplication operator is commutative for the given argument tuple. Approximate equality is used for verifications.",14,N],[11,"prop_mul_is_commutative","","Returns `true` if the multiplication operator is commutative for the given argument tuple.",14,N],[11,"id","","Specific identity.",5,[[["o"]],["self"]]],[11,"inverse_mut","","In-place inversin of `self`.",3,[[["self"]]]],[11,"meet_join","","Returns the infimum and the supremum simultaneously.",17,N],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",17,[[["self"],["self"]],["option"]]],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",17,[[["self"],["self"]],["option"]]],[11,"partial_sort2","","Sorts two values in increasing order using a partial ordering.",17,[[["self"],["self"]],["option"]]],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to `min` or `max`.",17,[[["self"],["self"],["self"]],["option"]]],[11,"from_superset","","The inverse inclusion map: attempts to construct `self` from the equivalent element of its superset.",6,[[["t"]],["option"]]],[11,"to_subset","","The inverse inclusion map: attempts to construct `self` from the equivalent element of its superset.",7,[[["self"]],["option"]]],[11,"angle","alga::linear","Measures the angle between two vectors.",25,N],[11,"canonical_basis","","Applies the given closule to each element of this vector space's canonical basis. Stops if `f` returns `false`.",24,[[["f"]]]],[11,"translate_by","","Same as `*self + *t`. Applies the additive group action of this affine space's associated vector space on `self`.",21,N],[11,"subtract","","Same as `*self - *other`. Returns the unique element `v` of the associated vector space such that `self = right + v`.",21,N],[11,"scale_by","","Multiplies the distance of this point to `Self::origin()` by `s`.",22,N],[11,"coordinates","","The coordinates of this point, i.e., the translation from the origin.",22,N],[11,"from_coordinates","","Builds a point from its coordinates relative to the origin.",22,N],[11,"distance_squared","","The distance between two points.",22,N],[11,"distance","","The distance between two points.",22,N],[11,"append_rotation_wrt_point","","Appends to this similarity a rotation centered at the point `p`, i.e., this point is left invariant.",28,N],[11,"translate_point","","Applies this transformation's pure translational part to a point.",32,[[["self"],["e"]],["e"]]],[11,"rotate_point","","Applies this transformation's pure rotational part to a point.",32,[[["self"],["e"]],["e"]]],[11,"scale_point","","Applies this transformation's pure scaling part to a point.",32,[[["self"],["e"]],["e"]]],[11,"rotate_vector","","Applies this transformation's pure rotational part to a vector.",32,N],[11,"scale_vector","","Applies this transformation's pure scaling part to a vector.",32,N],[11,"inverse_translate_point","","Applies this transformation inverse's pure translational part to a point.",32,[[["self"],["e"]],["e"]]],[11,"inverse_rotate_point","","Applies this transformation inverse's pure rotational part to a point.",32,[[["self"],["e"]],["e"]]],[11,"inverse_scale_point","","Applies this transformation inverse's pure scaling part to a point.",32,[[["self"],["e"]],["e"]]],[11,"inverse_rotate_vector","","Applies this transformation inverse's pure rotational part to a vector.",32,N],[11,"inverse_scale_vector","","Applies this transformation inverse's pure scaling part to a vector.",32,N],[11,"to_real","","Converts this scaling factor to a real. Same as `self.to_superset()`.",31,N],[11,"from_real","","Attempts to convert a real to an element of this scaling subgroup. Same as `Self::from_superset()`. Returns `None` if no such scaling is possible for this subgroup.",31,N],[11,"powf","","Raises the scaling to a power. The result must be equivalent to `self.to_superset().powf(n)`. Returns `None` if the result is not representable by `Self`.",31,N],[11,"scale_between","","The scaling required to make `a` have the same norm as `b`, i.e., `|b| = |a| * norm_ratio(a, b)`.",31,N],[11,"powf","","Raises the translation to a power. The result must be equivalent to `self.to_superset() * n`.  Returns `None` if the result is not representable by `Self`.",34,N],[11,"translation_between","","The translation needed to make `a` coincide with `b`, i.e., `b = a * translation_to(a, b)`.",34,[[["e"],["e"]],["option"]]],[11,"get","","Gets the component at row `i` and column `j` of this matrix.",35,N],[11,"set_row","","Sets the i-th row of this matrix.",36,N],[11,"set_column","","Sets the i-th col of this matrix.",36,N],[11,"set","","Sets the component at row `i` and column `j` of this matrix.",36,N],[11,"dimension","","The number of rows or column of this matrix.",37,[[["self"]],["usize"]]],[11,"transpose_mut","","In-place transposition.",37,[[["self"]]]],[11,"set_diagonal","","Sets the matrix diagonal.",38,N]],"paths":[[3,"Id"],[3,"Additive"],[3,"Multiplicative"],[8,"Inverse"],[8,"Operator"],[8,"Identity"],[8,"SubsetOf"],[8,"SupersetOf"],[8,"AbstractGroupAbelian"],[8,"AbstractMagma"],[8,"AbstractMonoid"],[8,"AbstractQuasigroup"],[8,"AbstractSemigroup"],[8,"AbstractRing"],[8,"AbstractRingCommutative"],[8,"AbstractModule"],[8,"JoinSemilattice"],[8,"Lattice"],[8,"MeetSemilattice"],[8,"Module"],[8,"Real"],[8,"AffineSpace"],[8,"EuclideanSpace"],[8,"FiniteDimInnerSpace"],[8,"FiniteDimVectorSpace"],[8,"InnerSpace"],[8,"NormedSpace"],[8,"VectorSpace"],[8,"AffineTransformation"],[8,"ProjectiveTransformation"],[8,"Rotation"],[8,"Scaling"],[8,"Similarity"],[8,"Transformation"],[8,"Translation"],[8,"Matrix"],[8,"MatrixMut"],[8,"SquareMatrix"],[8,"SquareMatrixMut"]]};
searchIndex["approx"]={"doc":"A crate that provides facilities for testing the approximate equality of floating-point based types, using either relative difference, or units in the last place (ULPs) comparisons.","items":[[3,"AbsDiff","approx","The requisite parameters for testing for approximate equality using a absolute difference based comparison.",N,N],[12,"epsilon","","The tolerance to use when testing values that are close together.",0,N],[3,"Relative","","The requisite parameters for testing for approximate equality using a relative based comparison.",N,N],[12,"epsilon","","The tolerance to use when testing values that are close together.",1,N],[12,"max_relative","","The relative tolerance for testing values that are far-apart.",1,N],[3,"Ulps","","The requisite parameters for testing for approximate equality using an ULPs based comparison.",N,N],[12,"epsilon","","The tolerance to use when testing values that are close together.",2,N],[12,"max_ulps","","The ULPs to tolerate when testing values that are far-apart.",2,N],[8,"AbsDiffEq","","Equality that is defined using the absolute difference of two numbers.",N,N],[16,"Epsilon","","Used for specifying relative comparisons.",3,N],[10,"default_epsilon","","The default tolerance to use when testing values that are close together.",3,N],[10,"abs_diff_eq","","A test for equality that uses the absolute difference to compute the approximate equality of two numbers.",3,N],[11,"abs_diff_ne","","The inverse of `ApproxEq::abs_diff_eq`.",3,N],[8,"RelativeEq","","Equality comparisons between two numbers using both the absolute difference and relative based comparisons.",N,N],[10,"default_max_relative","","The default relative tolerance for testing values that are far-apart.",4,N],[10,"relative_eq","","A test for equality that uses a relative comparison if the values are far apart.",4,N],[11,"relative_ne","","The inverse of `ApproxEq::relative_eq`.",4,N],[8,"UlpsEq","","Equality comparisons between two numbers using both the absolute difference and ULPs (Units in Last Place) based comparisons.",N,N],[10,"default_max_ulps","","The default ULPs to tolerate when testing values that are far-apart.",5,[[],["u32"]]],[10,"ulps_eq","","A test for equality that uses units in the last place (ULP) if the values are far apart.",5,N],[11,"ulps_ne","","The inverse of `ApproxEq::ulps_eq`.",5,N],[11,"default","","",0,[[],["absdiff"]]],[11,"epsilon","","Replace the epsilon value with the one specified.",0,N],[11,"eq","","Peform the equality comparison",0,[[["self"],["t"],["t"]],["bool"]]],[11,"ne","","Peform the inequality comparison",0,[[["self"],["t"],["t"]],["bool"]]],[11,"default","","",1,[[],["relative"]]],[11,"epsilon","","Replace the epsilon value with the one specified.",1,N],[11,"max_relative","","Replace the maximum relative value with the one specified.",1,N],[11,"eq","","Peform the equality comparison",1,[[["self"],["t"],["t"]],["bool"]]],[11,"ne","","Peform the inequality comparison",1,[[["self"],["t"],["t"]],["bool"]]],[11,"default","","",2,[[],["ulps"]]],[11,"epsilon","","Replace the epsilon value with the one specified.",2,N],[11,"max_ulps","","Replace the max ulps value with the one specified.",2,[[["self"],["u32"]],["ulps"]]],[11,"eq","","Peform the equality comparison",2,[[["self"],["t"],["t"]],["bool"]]],[11,"ne","","Peform the inequality comparison",2,[[["self"],["t"],["t"]],["bool"]]],[14,"abs_diff_eq","","Approximate equality of using the absolute difference.",N,N],[14,"abs_diff_ne","","Approximate inequality of using the absolute difference.",N,N],[14,"relative_eq","","Approximate equality using both the absolute difference and relative based comparisons.",N,N],[14,"relative_ne","","Approximate inequality using both the absolute difference and relative based comparisons.",N,N],[14,"ulps_eq","","Approximate equality using both the absolute difference and ULPs (Units in Last Place).",N,N],[14,"ulps_ne","","Approximate inequality using both the absolute difference and ULPs (Units in Last Place).",N,N],[14,"assert_abs_diff_eq","","An assertion that delegates to `abs_diff_eq!`, and panics with a helpful error on failure.",N,N],[14,"assert_abs_diff_ne","","An assertion that delegates to `abs_diff_ne!`, and panics with a helpful error on failure.",N,N],[14,"assert_relative_eq","","An assertion that delegates to `relative_eq!`, and panics with a helpful error on failure.",N,N],[14,"assert_relative_ne","","An assertion that delegates to `relative_ne!`, and panics with a helpful error on failure.",N,N],[14,"assert_ulps_eq","","An assertion that delegates to `ulps_eq!`, and panics with a helpful error on failure.",N,N],[14,"assert_ulps_ne","","An assertion that delegates to `ulps_ne!`, and panics with a helpful error on failure.",N,N],[11,"abs_diff_ne","","The inverse of `ApproxEq::abs_diff_eq`.",3,N],[11,"relative_ne","","The inverse of `ApproxEq::relative_eq`.",4,N],[11,"ulps_ne","","The inverse of `ApproxEq::ulps_eq`.",5,N]],"paths":[[3,"AbsDiff"],[3,"Relative"],[3,"Ulps"],[8,"AbsDiffEq"],[8,"RelativeEq"],[8,"UlpsEq"]]};
searchIndex["arrayvec"]={"doc":"arrayvec provides the types `ArrayVec` and `ArrayString`:  array-backed vector and string types, which store their contents inline.","items":[[3,"ArrayString","arrayvec","A string with a fixed capacity.",N,N],[3,"CapacityError","","Error value indicating insufficient capacity",N,N],[3,"ArrayVec","","A vector with a fixed capacity.",N,N],[3,"IntoIter","","By-value iterator for `ArrayVec`.",N,N],[3,"Drain","","A draining iterator for `ArrayVec`.",N,N],[11,"default","","Return an empty `ArrayString`",0,[[],["arraystring"]]],[11,"new","","Create a new empty `ArrayString`.",0,[[],["arraystring"]]],[11,"from","","Create a new `ArrayString` from a `str`.",0,[[["str"]],["result",["capacityerror"]]]],[11,"from_byte_string","","Create a new `ArrayString` from a byte string literal.",0,[[["a"]],["result",["utf8error"]]]],[11,"capacity","","Return the capacity of the `ArrayString`.",0,[[["self"]],["usize"]]],[11,"is_full","","Return if the `ArrayString` is completely filled.",0,[[["self"]],["bool"]]],[11,"push","","Adds the given char to the end of the string.",0,[[["self"],["char"]]]],[11,"try_push","","Adds the given char to the end of the string.",0,[[["self"],["char"]],["result",["capacityerror"]]]],[11,"push_str","","Adds the given string slice to the end of the string.",0,[[["self"],["str"]]]],[11,"try_push_str","","Adds the given string slice to the end of the string.",0,[[["self"],["str"]],["result",["capacityerror"]]]],[11,"pop","","Removes the last character from the string and returns it.",0,[[["self"]],["option",["char"]]]],[11,"truncate","","Shortens this `ArrayString` to the specified length.",0,[[["self"],["usize"]]]],[11,"remove","","Removes a `char` from this `ArrayString` at a byte position and returns it.",0,[[["self"],["usize"]],["char"]]],[11,"clear","","Make the string empty.",0,[[["self"]]]],[11,"set_len","","Set the strings’s length.",0,[[["self"],["usize"]]]],[11,"as_str","","Return a string slice of the whole `ArrayString`.",0,[[["self"]],["str"]]],[11,"deref","","",0,[[["self"]],["str"]]],[11,"deref_mut","","",0,[[["self"]],["str"]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"borrow","","",0,[[["self"]],["str"]]],[11,"as_ref","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"write_char","","",0,[[["self"],["char"]],["result"]]],[11,"write_str","","",0,[[["self"],["str"]],["result"]]],[11,"clone","","",0,[[["self"]],["arraystring"]]],[11,"clone_from","","",0,[[["self"],["self"]]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["self"]],["bool"]]],[11,"le","","",0,[[["self"],["self"]],["bool"]]],[11,"gt","","",0,[[["self"],["self"]],["bool"]]],[11,"ge","","",0,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["str"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["str"]],["bool"]]],[11,"le","","",0,[[["self"],["str"]],["bool"]]],[11,"gt","","",0,[[["self"],["str"]],["bool"]]],[11,"ge","","",0,[[["self"],["str"]],["bool"]]],[11,"cmp","","",0,[[["self"],["self"]],["ordering"]]],[11,"clone","","",1,[[["self"]],["capacityerror"]]],[11,"cmp","","",1,[[["self"],["capacityerror"]],["ordering"]]],[11,"eq","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"ne","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["capacityerror"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"le","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"gt","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"ge","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"new","","Create a new `CapacityError` from `element`.",1,[[["t"]],["capacityerror"]]],[11,"element","","Extract the overflowing element",1,[[["self"]],["t"]]],[11,"simplify","","Convert into a `CapacityError` that does not carry an element.",1,[[["self"]],["capacityerror"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[8,"Array","","Trait for fixed size arrays.",N,N],[16,"Item","","The array’s element type",2,N],[8,"RangeArgument","","`RangeArgument` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",N,N],[11,"start","","Start index (inclusive)",3,[[["self"]],["option",["usize"]]]],[11,"end","","End index (exclusive)",3,[[["self"]],["option",["usize"]]]],[11,"drop","","",4,[[["self"]]]],[11,"new","","Create a new empty `ArrayVec`.",4,[[],["arrayvec"]]],[11,"len","","Return the number of elements in the `ArrayVec`.",4,[[["self"]],["usize"]]],[11,"capacity","","Return the capacity of the `ArrayVec`.",4,[[["self"]],["usize"]]],[11,"is_full","","Return if the `ArrayVec` is completely filled.",4,[[["self"]],["bool"]]],[11,"push","","Push `element` to the end of the vector.",4,N],[11,"try_push","","Push `element` to the end of the vector.",4,N],[11,"push_unchecked","","Push `element` to the end of the vector without checking the capacity.",4,N],[11,"insert","","Insert `element` at position `index`.",4,N],[11,"try_insert","","Insert `element` at position `index`.",4,N],[11,"pop","","Remove the last element in the vector and return it.",4,[[["self"]],["option"]]],[11,"swap_remove","","Remove the element at `index` and swap the last element into its place.",4,N],[11,"swap_pop","","Remove the element at `index` and swap the last element into its place.",4,[[["self"],["usize"]],["option"]]],[11,"remove","","Remove the element at `index` and shift down the following elements.",4,N],[11,"pop_at","","Remove the element at `index` and shift down the following elements.",4,[[["self"],["usize"]],["option"]]],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",4,[[["self"],["usize"]]]],[11,"clear","","Remove all elements in the vector.",4,[[["self"]]]],[11,"retain","","Retains only the elements specified by the predicate.",4,[[["self"],["f"]]]],[11,"set_len","","Set the vector’s length without dropping or moving out elements",4,[[["self"],["usize"]]]],[11,"drain","","Create a draining iterator that removes the specified range in the vector and yields the removed items from start to end. The element range is removed even if the iterator is not consumed until the end.",4,[[["self"],["r"]],["drain"]]],[11,"into_inner","","Return the inner fixed size array, if it is full to its capacity.",4,[[["self"]],["result"]]],[11,"dispose","","Dispose of `self` without the overwriting that is needed in Drop.",4,[[["self"]]]],[11,"as_slice","","Return a slice containing all elements of the vector.",4,N],[11,"as_mut_slice","","Return a mutable slice containing all elements of the vector.",4,N],[11,"deref","","",4,N],[11,"deref_mut","","",4,N],[11,"from","","",4,[[["a"]],["self"]]],[11,"into_iter","","",4,[[["self"]],["intoiter"]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"drop","","",5,[[["self"]]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"next_back","","",6,[[["self"]],["option"]]],[11,"drop","","",6,[[["self"]]]],[11,"extend","","",4,[[["self"],["t"]]]],[11,"from_iter","","",4,[[["t"]],["self"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"clone_from","","",4,[[["self"],["self"]]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"eq","","",4,[[["self"],["self"]],["bool"]]],[11,"eq","","",4,N],[11,"borrow","","",4,N],[11,"borrow_mut","","",4,N],[11,"as_ref","","",4,N],[11,"as_mut","","",4,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"default","","Return an empty array",4,[[],["arrayvec"]]],[11,"partial_cmp","","",4,[[["self"],["arrayvec"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["self"]],["bool"]]],[11,"le","","",4,[[["self"],["self"]],["bool"]]],[11,"ge","","",4,[[["self"],["self"]],["bool"]]],[11,"gt","","",4,[[["self"],["self"]],["bool"]]],[11,"cmp","","",4,[[["self"],["arrayvec"]],["ordering"]]],[11,"write","","",4,N],[11,"flush","","",4,[[["self"]],["result"]]],[11,"start","","Start index (inclusive)",3,[[["self"]],["option",["usize"]]]],[11,"end","","End index (exclusive)",3,[[["self"]],["option",["usize"]]]]],"paths":[[3,"ArrayString"],[3,"CapacityError"],[8,"Array"],[8,"RangeArgument"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["atty"]={"doc":"atty is a simple utility that answers one question > is this a tty?","items":[[4,"Stream","atty","possible stream sources",N,N],[13,"Stdout","","",0,N],[13,"Stderr","","",0,N],[13,"Stdin","","",0,N],[5,"is","","returns true if this is a tty",N,[[["stream"]],["bool"]]],[5,"isnt","","returns true if this is not a tty",N,[[["stream"]],["bool"]]],[11,"clone","","",0,[[["self"]],["stream"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"Stream"]]};
searchIndex["bitflags"]={"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[14,"bitflags","bitflags","The macro used to generate the flag structure.",N,N]],"paths":[]};
searchIndex["byteorder"]={"doc":"This crate provides convenience methods for encoding and decoding numbers in either [big-endian or little-endian order].","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",N,N],[4,"LittleEndian","","Defines little-endian serialization.",N,N],[6,"BE","","A type alias for [`BigEndian`].",N,N],[6,"LE","","A type alias for [`LittleEndian`].",N,N],[6,"NetworkEndian","","Defines network byte order serialization.",N,N],[6,"NativeEndian","","Defines system native-endian serialization.",N,N],[8,"ReadBytesExt","","Extends [`Read`] with methods for reading numbers. (For `std::io`.)",N,N],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,[[["self"]],["result",["u8"]]]],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,[[["self"]],["result",["i8"]]]],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,[[["self"]],["result",["u16"]]]],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,[[["self"]],["result",["i16"]]]],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["u64"]]]],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["i64"]]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f32"]]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f64"]]]],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,N],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,N],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,N],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,N],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,N],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,N],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f32_into_unchecked","","DEPRECATED.",0,N],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f64_into_unchecked","","DEPRECATED.",0,N],[8,"WriteBytesExt","","Extends [`Write`] with methods for writing numbers. (For `std::io`.)",N,N],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,[[["self"],["u8"]],["result"]]],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,[[["self"],["i8"]],["result"]]],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,[[["self"],["u16"]],["result"]]],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,[[["self"],["i16"]],["result"]]],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,[[["self"],["u64"],["usize"]],["result"]]],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,[[["self"],["i64"],["usize"]],["result"]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,[[["self"],["f32"]],["result"]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,[[["self"],["f64"]],["result"]]],[8,"ByteOrder","","`ByteOrder` describes types that can serialize integers as bytes.",N,N],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,N],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,N],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,N],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,N],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,N],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,N],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,N],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,N],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,N],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,N],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,N],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,N],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,N],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,N],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,N],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,N],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,N],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,N],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,N],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,N],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,N],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,N],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,N],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,N],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,N],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,N],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,N],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,N],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,N],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,N],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,N],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,N],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,N],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,N],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,N],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,N],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,N],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,N],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,N],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,N],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,N],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,N],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,N],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,N],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,N],[11,"clone","","",3,[[["self"]],["bigendian"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"hash","","",3,N],[11,"cmp","","",3,[[["self"],["bigendian"]],["ordering"]]],[11,"eq","","",3,[[["self"],["bigendian"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["bigendian"]],["option",["ordering"]]]],[11,"default","","",3,[[],["bigendian"]]],[11,"clone","","",4,[[["self"]],["littleendian"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"hash","","",4,N],[11,"cmp","","",4,[[["self"],["littleendian"]],["ordering"]]],[11,"eq","","",4,[[["self"],["littleendian"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["littleendian"]],["option",["ordering"]]]],[11,"default","","",4,[[],["littleendian"]]],[11,"read_u16","","",3,N],[11,"read_u32","","",3,N],[11,"read_u64","","",3,N],[11,"read_uint","","",3,N],[11,"write_u16","","",3,N],[11,"write_u32","","",3,N],[11,"write_u64","","",3,N],[11,"write_uint","","",3,N],[11,"read_u16_into","","",3,N],[11,"read_u32_into","","",3,N],[11,"read_u64_into","","",3,N],[11,"write_u16_into","","",3,N],[11,"write_u32_into","","",3,N],[11,"write_u64_into","","",3,N],[11,"from_slice_u16","","",3,N],[11,"from_slice_u32","","",3,N],[11,"from_slice_u64","","",3,N],[11,"from_slice_f32","","",3,N],[11,"from_slice_f64","","",3,N],[11,"read_u16","","",4,N],[11,"read_u32","","",4,N],[11,"read_u64","","",4,N],[11,"read_uint","","",4,N],[11,"write_u16","","",4,N],[11,"write_u32","","",4,N],[11,"write_u64","","",4,N],[11,"write_uint","","",4,N],[11,"read_u16_into","","",4,N],[11,"read_u32_into","","",4,N],[11,"read_u64_into","","",4,N],[11,"write_u16_into","","",4,N],[11,"write_u32_into","","",4,N],[11,"write_u64_into","","",4,N],[11,"from_slice_u16","","",4,N],[11,"from_slice_u32","","",4,N],[11,"from_slice_u64","","",4,N],[11,"from_slice_f32","","",4,N],[11,"from_slice_f64","","",4,N],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,[[["self"]],["result",["u8"]]]],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,[[["self"]],["result",["i8"]]]],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,[[["self"]],["result",["u16"]]]],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,[[["self"]],["result",["i16"]]]],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["u64"]]]],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["i64"]]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f32"]]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f64"]]]],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,N],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,N],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,N],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,N],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,N],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,N],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f32_into_unchecked","","DEPRECATED.",0,N],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f64_into_unchecked","","DEPRECATED.",0,N],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,[[["self"],["u8"]],["result"]]],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,[[["self"],["i8"]],["result"]]],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,[[["self"],["u16"]],["result"]]],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,[[["self"],["i16"]],["result"]]],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,[[["self"],["u64"],["usize"]],["result"]]],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,[[["self"],["i64"],["usize"]],["result"]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,[[["self"],["f32"]],["result"]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,[[["self"],["f64"]],["result"]]]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"]={"doc":"A macro for defining `#[cfg]` if-else statements.","items":[[14,"cfg_if","cfg_if","",N,N]],"paths":[]};
searchIndex["color_quant"]={"doc":"Color quantization library This library provides a color quantizer based on the NEUQUANT quantization algorithm by Anthony Dekker. ### Usage `let data = vec![0; 40]; let nq = color_quant::NeuQuant::new(10, 256, &data); let indixes: Vec<u8> = data.chunks(4).map(|pix| nq.index_of(pix) as u8).collect(); let color_map = nq.color_map_rgba();`","items":[[3,"NeuQuant","color_quant","Neural network based color quantizer.",N,N],[11,"new","","Creates a new neuronal network and trains it with the supplied data.",0,N],[11,"init","","Initializes the neuronal network and trains it with the supplied data.",0,N],[11,"map_pixel","","Maps the rgba-pixel in-place to the best-matching color in the color map.",0,N],[11,"index_of","","Finds the best-matching index in the color map.",0,N],[11,"color_map_rgba","","Returns the RGBA color map calculated from the sample. ",0,[[["self"]],["vec",["u8"]]]],[11,"color_map_rgb","","Returns the RGBA color map calculated from the sample. ",0,[[["self"]],["vec",["u8"]]]]],"paths":[[3,"NeuQuant"]]};
searchIndex["conv"]={"doc":"This crate provides a number of conversion traits with more specific semantics than those provided by `as` or `From`/`Into`.","items":[[4,"DefaultApprox","conv","The \"default\" approximation scheme.  This scheme does whatever would generally be expected of a lossy conversion, assuming no additional context or instruction is given.",N,N],[4,"Wrapping","","This scheme is used to convert a value by \"wrapping\" it into a narrower range.",N,N],[4,"RoundToNearest","","This scheme is used to convert a value by rounding it to the nearest representable value, with ties rounding away from zero.",N,N],[4,"RoundToNegInf","","This scheme is used to convert a value by rounding it toward negative infinity to the nearest representable value.",N,N],[4,"RoundToPosInf","","This scheme is used to convert a value by rounding it toward positive infinity to the nearest representable value.",N,N],[4,"RoundToZero","","This scheme is used to convert a value by rounding it toward zero to the nearest representable value.",N,N],[0,"macros","","This module provides convenience macros to help with implementing the conversion traits.",N,N],[0,"prelude","","Publicly re-exports the most generally useful set of items.",N,N],[0,"errors","","This module defines the various error types that can be produced by a failed conversion.",N,N],[3,"Unrepresentable","conv::errors","Indicates that the conversion failed because the value was not representable.",N,N],[12,"0","","",0,N],[3,"NegOverflow","","Indicates that the conversion failed due to a negative overflow.",N,N],[12,"0","","",1,N],[3,"PosOverflow","","Indicates that the conversion failed due to a positive overflow.",N,N],[12,"0","","",2,N],[4,"GeneralError","","A general error enumeration that subsumes all other conversion errors.",N,N],[13,"NegOverflow","","Input was too negative for the target type.",3,N],[13,"PosOverflow","","Input was too positive for the target type.",3,N],[13,"Unrepresentable","","Input was not representable in the target type.",3,N],[4,"GeneralErrorKind","","A general error enumeration that subsumes all other conversion errors, but discards all input payloads the errors may be carrying.",N,N],[13,"NegOverflow","","Input was too negative for the target type.",4,N],[13,"PosOverflow","","Input was too positive for the target type.",4,N],[13,"Unrepresentable","","Input was not representable in the target type.",4,N],[4,"NoError","","Indicates that it is not possible for the conversion to fail.",N,N],[4,"FloatError","","Indicates that a conversion from a floating point type failed.",N,N],[13,"NegOverflow","","Input was too negative for the target type.",5,N],[13,"PosOverflow","","Input was too positive for the target type.",5,N],[13,"NotANumber","","Input was not-a-number, which the target type could not represent.",5,N],[4,"RangeError","","Indicates that a conversion failed due to a range error.",N,N],[13,"NegOverflow","","Input was too negative for the target type.",6,N],[13,"PosOverflow","","Input was too positive the target type.",6,N],[4,"RangeErrorKind","","Indicates that a conversion failed due to a range error.",N,N],[13,"NegOverflow","","Input was too negative for the target type.",7,N],[13,"PosOverflow","","Input was too positive for the target type.",7,N],[8,"Saturate","","Saturates a `Result`.",N,N],[16,"Output","","The result of saturating.",8,N],[10,"saturate","","Replaces an overflow error with a saturated value.",8,N],[8,"UnwrapOk","","Safely unwrap a `Result` that cannot contain an error.",N,N],[10,"unwrap_ok","","Unwraps a `Result` without possibility of failing.",9,[[["self"]],["t"]]],[8,"UnwrapOrInf","","Unwrap a conversion by saturating to infinity.",N,N],[16,"Output","","The result of unwrapping.",10,N],[10,"unwrap_or_inf","","Either unwraps the successfully converted value, or saturates to infinity in the \"direction\" of overflow.",10,N],[8,"UnwrapOrInvalid","","Unwrap a conversion by replacing a failure with an invalid sentinel value.",N,N],[16,"Output","","The result of unwrapping.",11,N],[10,"unwrap_or_invalid","","Either unwraps the successfully converted value, or returns the output type's invalid sentinel value.",11,N],[8,"UnwrapOrSaturate","","Unwrap a conversion by saturating.",N,N],[16,"Output","","The result of unwrapping.",12,N],[10,"unwrap_or_saturate","","Either unwraps the successfully converted value, or saturates in the \"direction\" of overflow.",12,N],[11,"clone","","",3,[[["self"]],["generalerror"]]],[11,"eq","","",3,[[["self"],["generalerror"]],["bool"]]],[11,"ne","","",3,[[["self"],["generalerror"]],["bool"]]],[11,"cmp","","",3,[[["self"],["generalerror"]],["ordering"]]],[11,"partial_cmp","","",3,[[["self"],["generalerror"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["generalerror"]],["bool"]]],[11,"le","","",3,[[["self"],["generalerror"]],["bool"]]],[11,"gt","","",3,[[["self"],["generalerror"]],["bool"]]],[11,"ge","","",3,[[["self"],["generalerror"]],["bool"]]],[11,"into_inner","","Returns the value stored in this error.",3,[[["self"]],["t"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",3,[[["noerror"]],["self"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"from","","",3,[[["unrepresentable"]],["self"]]],[11,"from","","",3,[[["negoverflow"]],["self"]]],[11,"from","","",3,[[["posoverflow"]],["self"]]],[11,"from","","",3,[[["rangeerror"]],["self"]]],[11,"from","","",3,[[["floaterror"]],["generalerror"]]],[11,"clone","","",4,[[["self"]],["generalerrorkind"]]],[11,"eq","","",4,[[["self"],["generalerrorkind"]],["bool"]]],[11,"cmp","","",4,[[["self"],["generalerrorkind"]],["ordering"]]],[11,"partial_cmp","","",4,[[["self"],["generalerrorkind"]],["option",["ordering"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"from","","",4,[[["noerror"]],["self"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",4,[[["self"]],["str"]]],[11,"from","","",4,[[["unrepresentable"]],["self"]]],[11,"from","","",4,[[["negoverflow"]],["self"]]],[11,"from","","",4,[[["posoverflow"]],["self"]]],[11,"from","","",4,[[["rangeerrorkind"]],["self"]]],[11,"from","","",4,[[["rangeerror"]],["self"]]],[11,"from","","",4,[[["generalerror"]],["self"]]],[11,"from","","",4,[[["floaterror"]],["generalerrorkind"]]],[11,"clone","","",13,[[["self"]],["noerror"]]],[11,"eq","","",13,[[["self"],["noerror"]],["bool"]]],[11,"cmp","","",13,[[["self"],["noerror"]],["ordering"]]],[11,"partial_cmp","","",13,[[["self"],["noerror"]],["option",["ordering"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",13,[[["self"]],["str"]]],[11,"clone","","",0,[[["self"]],["unrepresentable"]]],[11,"eq","","",0,[[["self"],["unrepresentable"]],["bool"]]],[11,"ne","","",0,[[["self"],["unrepresentable"]],["bool"]]],[11,"cmp","","",0,[[["self"],["unrepresentable"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"],["unrepresentable"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["unrepresentable"]],["bool"]]],[11,"le","","",0,[[["self"],["unrepresentable"]],["bool"]]],[11,"gt","","",0,[[["self"],["unrepresentable"]],["bool"]]],[11,"ge","","",0,[[["self"],["unrepresentable"]],["bool"]]],[11,"into_inner","","Returns the value stored in this error.",0,[[["self"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",0,[[["noerror"]],["self"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"clone","","",1,[[["self"]],["negoverflow"]]],[11,"eq","","",1,[[["self"],["negoverflow"]],["bool"]]],[11,"ne","","",1,[[["self"],["negoverflow"]],["bool"]]],[11,"cmp","","",1,[[["self"],["negoverflow"]],["ordering"]]],[11,"partial_cmp","","",1,[[["self"],["negoverflow"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["negoverflow"]],["bool"]]],[11,"le","","",1,[[["self"],["negoverflow"]],["bool"]]],[11,"gt","","",1,[[["self"],["negoverflow"]],["bool"]]],[11,"ge","","",1,[[["self"],["negoverflow"]],["bool"]]],[11,"into_inner","","Returns the value stored in this error.",1,[[["self"]],["t"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",1,[[["noerror"]],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"clone","","",2,[[["self"]],["posoverflow"]]],[11,"eq","","",2,[[["self"],["posoverflow"]],["bool"]]],[11,"ne","","",2,[[["self"],["posoverflow"]],["bool"]]],[11,"cmp","","",2,[[["self"],["posoverflow"]],["ordering"]]],[11,"partial_cmp","","",2,[[["self"],["posoverflow"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["posoverflow"]],["bool"]]],[11,"le","","",2,[[["self"],["posoverflow"]],["bool"]]],[11,"gt","","",2,[[["self"],["posoverflow"]],["bool"]]],[11,"ge","","",2,[[["self"],["posoverflow"]],["bool"]]],[11,"into_inner","","Returns the value stored in this error.",2,[[["self"]],["t"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",2,[[["noerror"]],["self"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"clone","","",5,[[["self"]],["floaterror"]]],[11,"eq","","",5,[[["self"],["floaterror"]],["bool"]]],[11,"ne","","",5,[[["self"],["floaterror"]],["bool"]]],[11,"cmp","","",5,[[["self"],["floaterror"]],["ordering"]]],[11,"partial_cmp","","",5,[[["self"],["floaterror"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["floaterror"]],["bool"]]],[11,"le","","",5,[[["self"],["floaterror"]],["bool"]]],[11,"gt","","",5,[[["self"],["floaterror"]],["bool"]]],[11,"ge","","",5,[[["self"],["floaterror"]],["bool"]]],[11,"into_inner","","Returns the value stored in this error.",5,[[["self"]],["t"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",5,[[["noerror"]],["self"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"from","","",5,[[["negoverflow"]],["self"]]],[11,"from","","",5,[[["posoverflow"]],["self"]]],[11,"from","","",5,[[["rangeerror"]],["self"]]],[11,"clone","","",6,[[["self"]],["rangeerror"]]],[11,"eq","","",6,[[["self"],["rangeerror"]],["bool"]]],[11,"ne","","",6,[[["self"],["rangeerror"]],["bool"]]],[11,"cmp","","",6,[[["self"],["rangeerror"]],["ordering"]]],[11,"partial_cmp","","",6,[[["self"],["rangeerror"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["rangeerror"]],["bool"]]],[11,"le","","",6,[[["self"],["rangeerror"]],["bool"]]],[11,"gt","","",6,[[["self"],["rangeerror"]],["bool"]]],[11,"ge","","",6,[[["self"],["rangeerror"]],["bool"]]],[11,"into_inner","","Returns the value stored in this error.",6,[[["self"]],["t"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",6,[[["noerror"]],["self"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",6,[[["self"]],["str"]]],[11,"from","","",6,[[["negoverflow"]],["self"]]],[11,"from","","",6,[[["posoverflow"]],["self"]]],[11,"clone","","",7,[[["self"]],["rangeerrorkind"]]],[11,"eq","","",7,[[["self"],["rangeerrorkind"]],["bool"]]],[11,"cmp","","",7,[[["self"],["rangeerrorkind"]],["ordering"]]],[11,"partial_cmp","","",7,[[["self"],["rangeerrorkind"]],["option",["ordering"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"from","","",7,[[["noerror"]],["self"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",7,[[["self"]],["str"]]],[11,"from","","",7,[[["negoverflow"]],["self"]]],[11,"from","","",7,[[["posoverflow"]],["self"]]],[11,"from","","",7,[[["rangeerror"]],["self"]]],[0,"misc","conv","This module defines some additional traits not directly tied to conversions.",N,N],[8,"Saturated","conv::misc","This trait indicates that values of a type can be logically \"saturated\".",N,N],[10,"saturated_max","","Returns the type's saturated, maximum value.",14,[[],["self"]]],[10,"saturated_min","","Returns the type's saturated, minimum value.",14,[[],["self"]]],[8,"InvalidSentinel","","This trait indicates that a type has an \"invalid\" sentinel value.",N,N],[10,"invalid_sentinel","","Returns the type's \"invalid\" sentinel value.",15,[[],["self"]]],[8,"SignedInfinity","","This trait indicates that a type has positive and negative \"infinity\" values.",N,N],[10,"neg_infinity","","Returns the type's positive infinity value.",16,[[],["self"]]],[10,"pos_infinity","","Returns the type's negative infinity value.",16,[[],["self"]]],[8,"ApproxFrom","conv","This trait is used to perform a conversion that is permitted to approximate the result, but not to wrap or saturate the result to fit into the destination type's representable range.",N,N],[16,"Err","","The error type produced by a failed conversion.",17,N],[10,"approx_from","","Convert the given value into an approximately equivalent representation.",17,[[["src"]],["result"]]],[8,"ApproxInto","","This is the dual of `ApproxFrom`; see that trait for information.",N,N],[16,"Err","","The error type produced by a failed conversion.",18,N],[10,"approx_into","","Convert the subject into an approximately equivalent representation.",18,[[["self"]],["result"]]],[8,"ApproxScheme","","This trait is used to mark approximation scheme types.",N,N],[8,"TryFrom","","This trait is used to perform a conversion between different semantic types which might fail.",N,N],[16,"Err","","The error type produced by a failed conversion.",19,N],[10,"try_from","","Convert the given value into the subject type.",19,[[["src"]],["result"]]],[8,"TryInto","","This is the dual of `TryFrom`; see that trait for information.",N,N],[16,"Err","","The error type produced by a failed conversion.",20,N],[10,"try_into","","Convert the subject into the destination type.",20,[[["self"]],["result"]]],[8,"ValueFrom","","This trait is used to perform an exact, value-preserving conversion.",N,N],[16,"Err","","The error type produced by a failed conversion.",21,N],[10,"value_from","","Convert the given value into an exactly equivalent representation.",21,[[["src"]],["result"]]],[8,"ValueInto","","This is the dual of `ValueFrom`; see that trait for information.",N,N],[16,"Err","","The error type produced by a failed conversion.",22,N],[10,"value_into","","Convert the subject into an exactly equivalent representation.",22,[[["self"]],["result"]]],[8,"ConvUtil","","This extension trait exists to simplify using various conversions.",N,N],[11,"approx_as","","Approximate the subject to a given type with the default scheme.",23,[[["self"]],["result"]]],[11,"approx_as_by","","Approximate the subject to a given type with a specific scheme.",23,[[["self"]],["result"]]],[11,"into_as","","Convert the subject to a given type.",23,[[["self"]],["dst"]]],[11,"try_as","","Attempt to convert the subject to a given type.",23,[[["self"]],["result"]]],[11,"value_as","","Attempt a value conversion of the subject to a given type.",23,[[["self"]],["result"]]],[8,"ConvAsUtil","","This extension trait exists to simplify using various conversions.",N,N],[11,"approx","","Approximate the subject with the default scheme.",24,[[["self"]],["result"]]],[11,"approx_by","","Approximate the subject with a specific scheme.",24,[[["self"]],["result"]]],[14,"TryFrom","","See the documentation for the `macros` module for details.",N,N]],"paths":[[3,"Unrepresentable"],[3,"NegOverflow"],[3,"PosOverflow"],[4,"GeneralError"],[4,"GeneralErrorKind"],[4,"FloatError"],[4,"RangeError"],[4,"RangeErrorKind"],[8,"Saturate"],[8,"UnwrapOk"],[8,"UnwrapOrInf"],[8,"UnwrapOrInvalid"],[8,"UnwrapOrSaturate"],[4,"NoError"],[8,"Saturated"],[8,"InvalidSentinel"],[8,"SignedInfinity"],[8,"ApproxFrom"],[8,"ApproxInto"],[8,"TryFrom"],[8,"TryInto"],[8,"ValueFrom"],[8,"ValueInto"],[8,"ConvUtil"],[8,"ConvAsUtil"]]};
searchIndex["crossbeam_deque"]={"doc":"A concurrent work-stealing deque.","items":[[3,"Deque","crossbeam_deque","A concurrent work-stealing deque.",N,N],[3,"Stealer","","A stealer that steals elements from the top of a deque.",N,N],[4,"Steal","","Possible outcomes of a steal operation.",N,N],[13,"Empty","","The deque was empty at the time of stealing.",0,N],[13,"Data","","Some data has been successfully stolen.",0,N],[13,"Retry","","Lost the race for stealing data to another concurrent operation. Try again.",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["steal"]],["bool"]]],[11,"ne","","",0,[[["self"],["steal"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["steal"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["steal"]],["bool"]]],[11,"le","","",0,[[["self"],["steal"]],["bool"]]],[11,"gt","","",0,[[["self"],["steal"]],["bool"]]],[11,"ge","","",0,[[["self"],["steal"]],["bool"]]],[11,"cmp","","",0,[[["self"],["steal"]],["ordering"]]],[11,"clone","","",0,[[["self"]],["steal"]]],[11,"new","","Returns a new deque.",1,[[],["deque"]]],[11,"with_min_capacity","","Returns a new deque with the specified minimum capacity.",1,[[["usize"]],["deque"]]],[11,"is_empty","","Returns `true` if the deque is empty.",1,[[["self"]],["bool"]]],[11,"len","","Returns the number of elements in the deque.",1,[[["self"]],["usize"]]],[11,"push","","Pushes an element into the bottom of the deque.",1,[[["self"],["t"]]]],[11,"pop","","Pops an element from the bottom of the deque.",1,[[["self"]],["option"]]],[11,"steal","","Steals an element from the top of the deque.",1,[[["self"]],["steal"]]],[11,"stealer","","Creates a stealer that can be shared with other threads.",1,[[["self"]],["stealer"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"default","","",1,[[],["deque"]]],[11,"is_empty","","Returns `true` if the deque is empty.",2,[[["self"]],["bool"]]],[11,"len","","Returns the number of elements in the deque.",2,[[["self"]],["usize"]]],[11,"steal","","Steals an element from the top of the deque.",2,[[["self"]],["steal"]]],[11,"clone","","Creates another stealer.",2,[[["self"]],["stealer"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"Steal"],[3,"Deque"],[3,"Stealer"]]};
searchIndex["crossbeam_epoch"]={"doc":"Epoch-based memory reclamation.","items":[[3,"Atomic","crossbeam_epoch","An atomic pointer that can be safely shared between threads.",N,N],[3,"CompareAndSetError","","The error returned on failed compare-and-set operation.",N,N],[12,"current","","The value in the atomic pointer at the time of the failed operation.",0,N],[12,"new","","The new value, which the operation failed to store.",0,N],[3,"Owned","","An owned heap-allocated object.",N,N],[3,"Shared","","A pointer to an object protected by the epoch GC.",N,N],[3,"Guard","","A guard that keeps the current thread pinned.",N,N],[3,"Collector","","An epoch-based garbage collector.",N,N],[3,"Handle","","A handle to a garbage collector.",N,N],[5,"unprotected","","Returns a reference to a dummy guard that allows unprotected access to [`Atomic`]s.",N,[[],["guard"]]],[5,"default_handle","","Returns the default handle associated with the current thread.",N,[[],["handle"]]],[5,"is_pinned","","Returns `true` if the current thread is pinned.",N,[[],["bool"]]],[5,"pin","","Pins the current thread.",N,[[],["guard"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"null","","Returns a new null atomic pointer.",1,[[],["atomic"]]],[11,"new","","Allocates `value` on the heap and returns a new atomic pointer pointing to it.",1,[[["t"]],["atomic"]]],[11,"load","","Loads a `Shared` from the atomic pointer.",1,[[["self"],["ordering"],["guard"]],["shared"]]],[11,"store","","Stores a `Shared` or `Owned` pointer into the atomic pointer.",1,[[["self"],["p"],["ordering"]]]],[11,"swap","","Stores a `Shared` or `Owned` pointer into the atomic pointer, returning the previous `Shared`.",1,[[["self"],["p"],["ordering"],["guard"]],["shared"]]],[11,"compare_and_set","","Stores the pointer `new` (either `Shared` or `Owned`) into the atomic pointer if the current value is the same as `current`. The tag is also taken into account, so two pointers to the same object, but with different tags, will not be considered equal.",1,[[["self"],["shared"],["p"],["o"],["guard"]],["result",["shared","compareandseterror"]]]],[11,"compare_and_set_weak","","Stores the pointer `new` (either `Shared` or `Owned`) into the atomic pointer if the current value is the same as `current`. The tag is also taken into account, so two pointers to the same object, but with different tags, will not be considered equal.",1,[[["self"],["shared"],["p"],["o"],["guard"]],["result",["shared","compareandseterror"]]]],[11,"fetch_and","","Bitwise \"and\" with the current tag.",1,[[["self"],["usize"],["ordering"],["guard"]],["shared"]]],[11,"fetch_or","","Bitwise \"or\" with the current tag.",1,[[["self"],["usize"],["ordering"],["guard"]],["shared"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current tag.",1,[[["self"],["usize"],["ordering"],["guard"]],["shared"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","Returns a copy of the atomic value.",1,[[["self"]],["self"]]],[11,"default","","",1,[[],["self"]]],[11,"from","","Returns a new atomic pointer pointing to `owned`.",1,[[["owned"]],["self"]]],[11,"from","","",1,[[["box"]],["self"]]],[11,"from","","",1,[[["t"]],["self"]]],[11,"from","","Returns a new atomic pointer pointing to `ptr`.",1,[[["shared"]],["self"]]],[11,"from","","Returns a new atomic pointer pointing to `raw`.",1,N],[11,"new","","Allocates `value` on the heap and returns a new owned pointer pointing to it.",2,[[["t"]],["owned"]]],[11,"from_raw","","Returns a new owned pointer pointing to `raw`.",2,N],[11,"into_shared","","Converts the owned pointer into a [`Shared`].",2,[[["self"],["guard"]],["shared"]]],[11,"into_box","","Converts the owned pointer into a `Box`.",2,[[["self"]],["box"]]],[11,"tag","","Returns the tag stored within the pointer.",2,[[["self"]],["usize"]]],[11,"with_tag","","Returns the same pointer, but tagged with `tag`. `tag` is truncated to be fit into the unused bits of the pointer to `T`.",2,[[["self"],["usize"]],["owned"]]],[11,"drop","","",2,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"deref","","",2,[[["self"]],["t"]]],[11,"deref_mut","","",2,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["self"]]],[11,"from","","Returns a new owned pointer pointing to `b`.",2,[[["box"]],["self"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"as_ref","","",2,[[["self"]],["t"]]],[11,"as_mut","","",2,[[["self"]],["t"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"null","","Returns a new null pointer.",3,[[],["shared"]]],[11,"is_null","","Returns `true` if the pointer is null.",3,[[["self"]],["bool"]]],[11,"as_raw","","Converts the pointer to a raw pointer (without the tag).",3,N],[11,"deref","","Dereferences the pointer.",3,[[["self"]],["t"]]],[11,"as_ref","","Converts the pointer to a reference.",3,[[["self"]],["option"]]],[11,"into_owned","","Takes ownership of the pointee.",3,[[["self"]],["owned"]]],[11,"tag","","Returns the tag stored within the pointer.",3,[[["self"]],["usize"]]],[11,"with_tag","","Returns the same pointer, but tagged with `tag`. `tag` is truncated to be fit into the unused bits of the pointer to `T`.",3,[[["self"],["usize"]],["shared"]]],[11,"from","","Returns a new pointer pointing to `raw`.",3,N],[11,"eq","","",3,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",3,[[["self"],["self"]],["ordering"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["self"]]],[11,"new","","Creates a new collector.",4,[[],["self"]]],[11,"handle","","Creates a new handle for the collector.",4,[[["self"]],["handle"]]],[11,"clone","","Creates another reference to the same garbage collector.",4,[[["self"]],["self"]]],[11,"pin","","Pins the handle.",5,[[["self"]],["guard"]]],[11,"is_pinned","","Returns `true` if the handle is pinned.",5,[[["self"]],["bool"]]],[11,"drop","","",5,[[["self"]]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"defer","","Stores a function so that it can be executed at some point after all currently pinned threads get unpinned.",6,[[["self"],["f"]]]],[11,"flush","","Clears up the thread-local cache of deferred functions by executing them or moving into the global cache.",6,[[["self"]]]],[11,"repin","","Unpins and then immediately re-pins the thread.",6,[[["self"]]]],[11,"repin_after","","Temporarily unpins the thread, executes the given function and then re-pins the thread.",6,[[["self"],["f"]],["r"]]],[11,"drop","","",6,[[["self"]]]],[11,"clone","","",6,[[["self"]],["guard"]]],[8,"CompareAndSetOrdering","","Memory orderings for compare-and-set operations.",N,N],[10,"success","","The ordering of the operation when it succeeds.",7,[[["self"]],["ordering"]]],[10,"failure","","The ordering of the operation when it fails.",7,[[["self"]],["ordering"]]]],"paths":[[3,"CompareAndSetError"],[3,"Atomic"],[3,"Owned"],[3,"Shared"],[3,"Collector"],[3,"Handle"],[3,"Guard"],[8,"CompareAndSetOrdering"]]};
searchIndex["crossbeam_utils"]={"doc":"","items":[[0,"cache_padded","crossbeam_utils","",N,N],[3,"CachePadded","crossbeam_utils::cache_padded","Pads `T` to the length of a cache line.",N,N],[11,"drop","","",0,[[["self"]]]],[11,"new","","Pads a value to the length of a cache line.",0,[[["t"]],["cachepadded"]]],[11,"deref","","",0,[[["self"]],["t"]]],[11,"deref_mut","","",0,[[["self"]],["t"]]],[11,"default","","",0,[[],["self"]]],[11,"clone","","",0,[[["self"]],["self"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["t"]],["self"]]],[0,"atomic_option","crossbeam_utils","",N,N],[3,"AtomicOption","crossbeam_utils::atomic_option","",N,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"drop","","",1,[[["self"]]]],[11,"new","","",1,[[],["self"]]],[11,"swap_box","","",1,[[["self"],["box"],["ordering"]],["option",["box"]]]],[11,"swap","","",1,[[["self"],["t"],["ordering"]],["option"]]],[11,"take","","",1,[[["self"],["ordering"]],["option"]]],[11,"default","","",1,[[],["self"]]],[0,"scoped","crossbeam_utils","",N,N],[3,"Scope","crossbeam_utils::scoped","",N,N],[3,"ScopedJoinHandle","","A handle to a scoped thread",N,N],[3,"ScopedThreadBuilder","","Scoped thread configuration. Provides detailed control over the properties and behavior of new scoped threads.",N,N],[5,"spawn_unsafe","","Like `std::thread::spawn`, but without the closure bounds.",N,[[["f"]],["joinhandle"]]],[5,"builder_spawn_unsafe","","Like `std::thread::Builder::spawn`, but without the closure bounds.",N,[[["builder"],["f"]],["result",["joinhandle"]]]],[5,"scope","","Create a new `scope`, for deferred destructors.",N,[[["f"]],["r"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"defer","","Schedule code to be executed when exiting the scope.",2,[[["self"],["f"]]]],[11,"spawn","","Create a scoped thread.",2,[[["self"],["f"]],["scopedjoinhandle"]]],[11,"builder","","Generates the base configuration for spawning a scoped thread, from which configuration methods can be chained.",2,[[["self"]],["scopedthreadbuilder"]]],[11,"name","","Names the thread-to-be. Currently the name is used for identification only in panic messages.",4,[[["self"],["string"]],["scopedthreadbuilder"]]],[11,"stack_size","","Sets the size of the stack for the new thread.",4,[[["self"],["usize"]],["scopedthreadbuilder"]]],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",4,[[["self"],["f"]],["result",["scopedjoinhandle"]]]],[11,"join","","Join the scoped thread, returning the result it produced.",3,[[["self"]],["t"]]],[11,"thread","","Get the underlying thread handle.",3,[[["self"]],["thread"]]],[11,"drop","","",2,[[["self"]]]]],"paths":[[3,"CachePadded"],[3,"AtomicOption"],[3,"Scope"],[3,"ScopedJoinHandle"],[3,"ScopedThreadBuilder"]]};
searchIndex["custom_derive"]={"doc":"Note: This crate has been superseded by `macro-attr`.","items":[],"paths":[]};
searchIndex["deflate"]={"doc":"An implementation an encoder using DEFLATE compression algorightm in pure rust.","items":[[3,"CompressionOptions","deflate","A struct describing the options for a compressor or compression function.",N,N],[12,"max_hash_checks","","The maximum number of checks to make in the hash table for matches.",0,N],[12,"lazy_if_less_than","","Only lazy match if we have a length less than this value.",0,N],[12,"matching_type","","Whether to use lazy or greedy matching.",0,N],[12,"special","","Force fixed/stored blocks (Not implemented yet). * Default value: `SpecialOptions::Normal`",0,N],[4,"SpecialOptions","","Enum allowing some special options (not implemented yet)!",N,N],[13,"Normal","","Compress normally.",1,N],[13,"_ForceFixed","","Force fixed huffman tables. (Unimplemented!).",1,N],[13,"_ForceStored","","Force stored (uncompressed) blocks only. (Unimplemented!).",1,N],[4,"Compression","","An enum describing the level of compression to be used by the encoder",N,N],[13,"Fast","","Fast minimal compression (`CompressionOptions::fast()`).",2,N],[13,"Default","","Default level (`CompressionOptions::default()`).",2,N],[13,"Best","","Higher compression level (`CompressionOptions::high()`).",2,N],[4,"MatchingType","","An enum describing whether we use lazy or greedy matching.",N,N],[13,"Greedy","","Use greedy matching: the matching algorithm simply uses a match right away if found.",3,N],[13,"Lazy","","Use lazy matching: after finding a match, the next input byte is checked, to see if there is a better match starting at that byte.",3,N],[5,"deflate_bytes_conf","","Compress the given slice of bytes with DEFLATE compression.",N,N],[5,"deflate_bytes","","Compress the given slice of bytes with DEFLATE compression using the default compression level.",N,N],[5,"deflate_bytes_zlib_conf","","Compress the given slice of bytes with DEFLATE compression, including a zlib header and trailer.",N,N],[5,"deflate_bytes_zlib","","Compress the given slice of bytes with DEFLATE compression, including a zlib header and trailer, using the default compression level.",N,N],[11,"clone","","",2,[[["self"]],["compression"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["compression"]],["bool"]]],[11,"cmp","","",2,[[["self"],["compression"]],["ordering"]]],[11,"partial_cmp","","",2,[[["self"],["compression"]],["option",["ordering"]]]],[11,"hash","","",2,N],[11,"default","","",2,[[],["compression"]]],[11,"clone","","",1,[[["self"]],["specialoptions"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["specialoptions"]],["bool"]]],[11,"hash","","",1,N],[11,"default","","",1,[[],["specialoptions"]]],[11,"clone","","",0,[[["self"]],["compressionoptions"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["compressionoptions"]],["bool"]]],[11,"ne","","",0,[[["self"],["compressionoptions"]],["bool"]]],[11,"hash","","",0,N],[11,"high","","Returns compression settings rouhgly corresponding to the `HIGH(9)` setting in miniz.",0,[[],["compressionoptions"]]],[11,"fast","","Returns  a fast set of compression settings",0,[[],["compressionoptions"]]],[11,"huffman_only","","Returns a set of compression settings that makes the compressor only compress using huffman coding. (Ignoring any length/distance matching)",0,[[],["compressionoptions"]]],[11,"rle","","Returns a set of compression settings that makes the compressor compress only using run-length encoding (i.e only looking for matches one byte back).",0,[[],["compressionoptions"]]],[11,"default","","Returns the options describing the default compression level.",0,[[],["compressionoptions"]]],[11,"from","","",0,[[["compression"]],["compressionoptions"]]],[11,"clone","","",3,[[["self"]],["matchingtype"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["matchingtype"]],["bool"]]],[11,"cmp","","",3,[[["self"],["matchingtype"]],["ordering"]]],[11,"partial_cmp","","",3,[[["self"],["matchingtype"]],["option",["ordering"]]]],[11,"hash","","",3,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[0,"write","","Encoders implementing a `Write` interface.",N,N],[3,"DeflateEncoder","deflate::write","A DEFLATE encoder/compressor.",N,N],[3,"ZlibEncoder","","A Zlib encoder/compressor.",N,N],[11,"new","","Creates a new encoder using the provided compression options.",4,[[["w"],["o"]],["deflateencoder"]]],[11,"finish","","Encode all pending data to the contained writer, consume this `DeflateEncoder`, and return the contained writer if writing succeeds.",4,[[["self"]],["result"]]],[11,"reset","","Resets the encoder (except the compression options), replacing the current writer with a new one, returning the old one.",4,[[["self"],["w"]],["result"]]],[11,"write","","",4,N],[11,"flush","","Flush the encoder.",4,[[["self"]],["result"]]],[11,"drop","","When the encoder is dropped, output the rest of the data.",4,[[["self"]]]],[11,"new","","Create a new `ZlibEncoder` using the provided compression options.",5,[[["w"],["o"]],["zlibencoder"]]],[11,"finish","","Encode all pending data to the contained writer, consume this `ZlibEncoder`, and return the contained writer if writing succeeds.",5,[[["self"]],["result"]]],[11,"reset","","Resets the encoder (except the compression options), replacing the current writer with a new one, returning the old one.",5,[[["self"],["w"]],["result"]]],[11,"checksum","","Return the adler32 checksum of the currently consumed data.",5,[[["self"]],["u32"]]],[11,"write","","",5,N],[11,"flush","","Flush the encoder.",5,[[["self"]],["result"]]],[11,"drop","","When the encoder is dropped, output the rest of the data.",5,[[["self"]]]]],"paths":[[3,"CompressionOptions"],[4,"SpecialOptions"],[4,"Compression"],[4,"MatchingType"],[3,"DeflateEncoder"],[3,"ZlibEncoder"]]};
searchIndex["either"]={"doc":"The enum [`Either`] with variants `Left` and `Right` is a general purpose sum type with two cases.","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",N,N],[13,"Left","","A value of type `L`.",0,N],[13,"Right","","A value of type `R`.",0,N],[11,"clone","","",0,[[["self"]],["either"]]],[11,"eq","","",0,[[["self"],["either"]],["bool"]]],[11,"ne","","",0,[[["self"],["either"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["either"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["either"]],["bool"]]],[11,"le","","",0,[[["self"],["either"]],["bool"]]],[11,"gt","","",0,[[["self"],["either"]],["bool"]]],[11,"ge","","",0,[[["self"],["either"]],["bool"]]],[11,"cmp","","",0,[[["self"],["either"]],["ordering"]]],[11,"hash","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"is_left","","Return true if the value is the `Left` variant.",0,[[["self"]],["bool"]]],[11,"is_right","","Return true if the value is the `Right` variant.",0,[[["self"]],["bool"]]],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,[[["self"]],["option"]]],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,[[["self"]],["option"]]],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,[[["self"]],["either"]]],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,[[["self"]],["either"]]],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,[[["self"]],["either"]]],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,[[["self"],["f"]],["either"]]],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,[[["self"],["f"]],["either"]]],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,[[["self"],["f"],["g"]],["t"]]],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,[[["self"],["ctx"],["f"],["g"]],["t"]]],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"into_iter","","Convert the inner value to an iterator.",0,[[["self"]],["either"]]],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,[[["self"]],["t"]]],[11,"from","","",0,[[["result"]],["self"]]],[11,"into","","",0,[[["self"]],["result"]]],[11,"extend","","",0,[[["self"],["t"]]]],[11,"next","","",0,[[["self"]],["option"]]],[11,"size_hint","","",0,N],[11,"fold","","",0,[[["self"],["acc"],["g"]],["acc"]]],[11,"count","","",0,[[["self"]],["usize"]]],[11,"last","","",0,[[["self"]],["option"]]],[11,"nth","","",0,[[["self"],["usize"]],["option"]]],[11,"collect","","",0,[[["self"]],["b"]]],[11,"all","","",0,[[["self"],["f"]],["bool"]]],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"as_ref","","",0,[[["self"]],["target"]]],[11,"as_mut","","",0,[[["self"]],["target"]]],[11,"deref","","",0,N],[11,"deref_mut","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",N,N],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",N,N]],"paths":[[4,"Either"]]};
searchIndex["env_logger"]={"doc":"A simple logger configured via environment variables which writes to stdout or stderr, for use with the logging facade exposed by the [`log` crate][log-crate-url].","items":[[3,"Env","env_logger","Set of environment variables to configure from.",N,N],[3,"Logger","","The env logger.",N,N],[3,"Builder","","`Builder` acts as builder for initializing a `Logger`.",N,N],[5,"try_init","","Attempts to initialize the global logger with an env logger.",N,[[],["result",["setloggererror"]]]],[5,"init","","Initializes the global logger with an env logger.",N,[[]]],[5,"try_init_from_env","","Attempts to initialize the global logger with an env logger from the given environment variables.",N,[[["e"]],["result",["setloggererror"]]]],[5,"init_from_env","","Initializes the global logger with an env logger from the given environment variables.",N,[[["e"]]]],[0,"filter","","Filtering for log records.",N,N],[3,"Filter","env_logger::filter","A log filter.",N,N],[3,"Builder","","A builder for a log filter.",N,N],[11,"filter","","Returns the maximum `LevelFilter` that this filter instance is configured to output.",0,[[["self"]],["levelfilter"]]],[11,"matches","","Checks if this record matches the configured filter.",0,[[["self"],["record"]],["bool"]]],[11,"enabled","","Determines if a log message with the specified metadata would be logged.",0,[[["self"],["metadata"]],["bool"]]],[11,"new","","Initializes the filter builder with defaults.",1,[[],["builder"]]],[11,"from_env","","Initializes the filter builder from an environment.",1,[[["str"]],["builder"]]],[11,"filter_module","","Adds a directive to the filter for a specific module.",1,[[["self"],["str"],["levelfilter"]],["self"]]],[11,"filter_level","","Adds a directive to the filter for all modules.",1,[[["self"],["levelfilter"]],["self"]]],[11,"filter","","Adds a directive to the filter.",1,[[["self"],["option",["str"]],["levelfilter"]],["self"]]],[11,"parse","","Parses the directives string.",1,[[["self"],["str"]],["self"]]],[11,"build","","Build a log filter.",1,[[["self"]],["filter"]]],[11,"default","","",1,[[],["self"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[0,"fmt","env_logger","Formatting for log records.",N,N],[3,"Formatter","env_logger::fmt","A formatter to write logs into.",N,N],[3,"Style","","A set of styles to apply to the terminal output.",N,N],[3,"StyledValue","","A value that can be printed using the given styles.",N,N],[3,"Timestamp","","An [RFC3339] formatted timestamp.",N,N],[3,"ParseColorError","","An error from parsing an invalid color specification.",N,N],[4,"Target","","Log target, either `stdout` or `stderr`.",N,N],[13,"Stdout","","Logs will be sent to standard output.",2,N],[13,"Stderr","","Logs will be sent to standard error.",2,N],[4,"WriteStyle","","Whether or not to print styles to the target.",N,N],[13,"Auto","","Try to print styles, but don't force the issue.",3,N],[13,"Always","","Try very hard to print styles.",3,N],[13,"Never","","Never print styles.",3,N],[4,"Color","","The set of available colors for the terminal foreground/background.",N,N],[13,"Black","","",4,N],[13,"Blue","","",4,N],[13,"Green","","",4,N],[13,"Red","","",4,N],[13,"Cyan","","",4,N],[13,"Magenta","","",4,N],[13,"Yellow","","",4,N],[13,"White","","",4,N],[13,"Ansi256","","",4,N],[13,"Rgb","","",4,N],[11,"clone","","",5,[[["self"]],["style"]]],[11,"clone","","",2,[[["self"]],["target"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"hash","","",2,N],[11,"eq","","",2,[[["self"],["target"]],["bool"]]],[11,"default","","",2,[[],["self"]]],[11,"clone","","",3,[[["self"]],["writestyle"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"hash","","",3,N],[11,"eq","","",3,[[["self"],["writestyle"]],["bool"]]],[11,"default","","",3,[[],["self"]]],[11,"set_color","","Set the text color.",5,[[["self"],["color"]],["style"]]],[11,"set_bold","","Set the text weight.",5,[[["self"],["bool"]],["style"]]],[11,"set_intense","","Set the text intensity.",5,[[["self"],["bool"]],["style"]]],[11,"set_bg","","Set the background color.",5,[[["self"],["color"]],["style"]]],[11,"value","","Wrap a value in the style.",5,[[["self"],["t"]],["styledvalue"]]],[11,"style","","Begin a new [`Style`].",6,[[["self"]],["style"]]],[11,"timestamp","","Get a [`Timestamp`] for the current date and time in UTC.",6,[[["self"]],["timestamp"]]],[11,"write","","",6,N],[11,"flush","","",6,[[["self"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["color"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["color"]],["bool"]]],[11,"ne","","",4,[[["self"],["color"]],["bool"]]],[11,"clone","","",9,[[["self"]],["parsecolorerror"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["parsecolorerror"]],["bool"]]],[11,"ne","","",9,[[["self"],["parsecolorerror"]],["bool"]]],[11,"invalid","","Return the string that couldn't be parsed as a valid color.",9,[[["self"]],["str"]]],[11,"description","","",9,[[["self"]],["str"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",4,[[["str"]],["result",["color","parsecolorerror"]]]],[11,"fmt","env_logger","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[17,"DEFAULT_FILTER_ENV","","The default name for the environment variable to read filters from.",N,N],[17,"DEFAULT_WRITE_STYLE_ENV","","The default name for the environment variable to read style preferences from.",N,N],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"default","","",11,[[],["builder"]]],[11,"new","","Initializes the log builder with defaults.",11,[[],["builder"]]],[11,"from_env","","Initializes the log builder from the environment.",11,[[["e"]],["self"]]],[11,"from_default_env","","Initializes the log builder from the environment using default variable names.",11,[[],["self"]]],[11,"format","","Sets the format function for formatting the log output.",11,[[["self"],["f"]],["self"]]],[11,"default_format","","Use the default format.",11,[[["self"]],["self"]]],[11,"default_format_level","","Whether or not to write the level in the default format.",11,[[["self"],["bool"]],["self"]]],[11,"default_format_module_path","","Whether or not to write the module path in the default format.",11,[[["self"],["bool"]],["self"]]],[11,"default_format_timestamp","","Whether or not to write the timestamp in the default format.",11,[[["self"],["bool"]],["self"]]],[11,"filter_module","","Adds a directive to the filter for a specific module.",11,[[["self"],["str"],["levelfilter"]],["self"]]],[11,"filter_level","","Adds a directive to the filter for all modules.",11,[[["self"],["levelfilter"]],["self"]]],[11,"filter","","Adds filters to the logger.",11,[[["self"],["option",["str"]],["levelfilter"]],["self"]]],[11,"parse","","Parses the directives string in the same form as the `RUST_LOG` environment variable.",11,[[["self"],["str"]],["self"]]],[11,"target","","Sets the target for the log output.",11,[[["self"],["target"]],["self"]]],[11,"write_style","","Sets whether or not styles will be written.",11,[[["self"],["writestyle"]],["self"]]],[11,"parse_write_style","","Parses whether or not to write styles in the same form as the `RUST_LOG_STYLE` environment variable.",11,[[["self"],["str"]],["self"]]],[11,"try_init","","Initializes the global logger with the built env logger.",11,[[["self"]],["result",["setloggererror"]]]],[11,"init","","Initializes the global logger with the built env logger.",11,[[["self"]]]],[11,"build","","Build an env logger.",11,[[["self"]],["logger"]]],[11,"from_env","","Creates the logger from the environment.",10,[[["e"]],["self"]]],[11,"from_default_env","","Creates the logger from the environment using default variable names.",10,[[],["self"]]],[11,"filter","","Returns the maximum `LevelFilter` that this env logger instance is configured to output.",10,[[["self"]],["levelfilter"]]],[11,"matches","","Checks if this record matches the configured filter.",10,[[["self"],["record"]],["bool"]]],[11,"enabled","","",10,[[["self"],["metadata"]],["bool"]]],[11,"log","","",10,[[["self"],["record"]]]],[11,"flush","","",10,[[["self"]]]],[11,"new","","Get a default set of environment variables.",12,[[],["self"]]],[11,"filter","","Specify an environment variable to read the filter from.",12,[[["self"],["e"]],["self"]]],[11,"filter_or","","Specify an environment variable to read the filter from.",12,[[["self"],["e"],["v"]],["self"]]],[11,"write_style","","Specify an environment variable to read the style from.",12,[[["self"],["e"]],["self"]]],[11,"write_style_or","","Specify an environment variable to read the style from.",12,[[["self"],["e"],["v"]],["self"]]],[11,"from","","",12,[[["t"]],["self"]]],[11,"default","","",12,[[],["self"]]]],"paths":[[3,"Filter"],[3,"Builder"],[4,"Target"],[4,"WriteStyle"],[4,"Color"],[3,"Style"],[3,"Formatter"],[3,"Timestamp"],[3,"StyledValue"],[3,"ParseColorError"],[3,"Logger"],[3,"Builder"],[3,"Env"]]};
searchIndex["generic_array"]={"doc":"This crate implements a structure that can be used as a generic array type.use Core Rust array types `[T; N]` can't be used generically with respect to `N`, so for example this:","items":[[3,"GenericArray","generic_array","Struct representing a generic array - `GenericArray<T, N>` works like [T; N]",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["self"]]],[11,"clone","","",0,[[["self"]],["genericarray"]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["genericarray"]],["option",["ordering"]]]],[11,"cmp","","",0,[[["self"],["genericarray"]],["ordering"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"borrow","","",0,N],[11,"borrow_mut","","",0,N],[11,"as_ref","","",0,N],[11,"as_mut","","",0,N],[11,"hash","","",0,[[["self"],["h"]]]],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[11,"from","","",0,N],[0,"arr","","Implementation for `arr!` macro.",N,N],[6,"Inc","generic_array::arr","Helper type for `arr!` macro",N,N],[8,"AddLength","","Helper trait for `arr!` macro",N,N],[16,"Output","","Resulting length",1,N],[0,"iter","generic_array","`GenericArray` iterator implementation.",N,N],[3,"GenericArrayIter","generic_array::iter","An iterator that moves out of a `GenericArray`",N,N],[11,"as_slice","","Returns the remaining items of this iterator as a slice",2,N],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable slice",2,N],[11,"into_iter","generic_array","",0,N],[11,"fmt","generic_array::iter","",2,[[["self"],["formatter"]],["result"]]],[11,"drop","","",2,[[["self"]]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"size_hint","","",2,N],[11,"count","","",2,[[["self"]],["usize"]]],[11,"nth","","",2,[[["self"],["usize"]],["option"]]],[11,"last","","",2,[[["self"]],["option"]]],[11,"next_back","","",2,[[["self"]],["option"]]],[11,"len","","",2,[[["self"]],["usize"]]],[0,"sequence","generic_array","Useful traits for manipulating sequences of data stored in `GenericArray`s",N,N],[6,"SequenceItem","generic_array::sequence","Accessor for `GenericSequence` item type, which is really `IntoIterator::Item`",N,N],[8,"GenericSequence","","Defines some sequence with an associated length and iteration capabilities.",N,N],[16,"Length","","`GenericArray` associated length",3,N],[16,"Sequence","","Concrete sequence type used in conjuction with reference implementations of `GenericSequence`",3,N],[10,"generate","","Initializes a new sequence instance using the given function.",3,N],[8,"Lengthen","","Defines any `GenericSequence` which can be lengthened or extended by appending or prepending an element to it.",N,N],[16,"Longer","","`GenericSequence` that has one more element than `Self`",4,N],[10,"append","","Returns a new array with the given element appended to the end of it.",4,N],[10,"prepend","","Returns a new array with the given element prepended to the front of it.",4,N],[8,"Shorten","","Defines a `GenericSequence` which can be shortened by removing the first or last element from it.",N,N],[16,"Shorter","","`GenericSequence` that has one less element than `Self`",5,N],[10,"pop_back","","Returns a new array without the last element, and the last element.",5,N],[10,"pop_front","","Returns a new array without the first element, and the first element. Example:",5,N],[8,"Split","","Defines a `GenericSequence` that can be split into two parts at a given pivot index.",N,N],[16,"First","","First part of the resulting split array",6,N],[16,"Second","","Second part of the resulting split array",6,N],[10,"split","","Splits an array at the given index, returning the separate parts of the array.",6,N],[8,"Concat","","Defines `GenericSequence`s which can be joined together, forming a larger array.",N,N],[16,"Rest","","Sequence to be concatenated with `self`",7,N],[16,"Output","","Resulting sequence formed by the concatenation.",7,N],[10,"concat","","Concatenate, or join, two sequences.",7,N],[11,"append","generic_array","",0,N],[11,"prepend","","",0,N],[11,"pop_back","","",0,N],[11,"pop_front","","",0,N],[11,"split","","",0,N],[11,"concat","","",0,N],[0,"functional","","Functional programming with generic sequences",N,N],[6,"MappedSequence","generic_array::functional","Accessor type for a mapped generic sequence",N,N],[8,"MappedGenericSequence","","Defines the relationship between one generic sequence and another, for operations such as `map` and `zip`.",N,N],[16,"Mapped","","Mapped sequence type",8,N],[8,"FunctionalSequence","","Defines functional programming methods for generic sequences",N,N],[11,"map","","Maps a `GenericSequence` to another `GenericSequence`.",9,[[["self"],["f"]],["mappedsequence"]]],[11,"zip","","Combines two `GenericSequence` instances and iterates through both of them, initializing a new `GenericSequence` with the result of the zipped mapping function.",9,[[["self"],["rhs"],["f"]],["mappedsequence"]]],[11,"fold","","Folds (or reduces) a sequence of data into a single value.",9,[[["self"],["u"],["f"]],["u"]]],[8,"ArrayLength","generic_array","Trait making `GenericArray` work, marking types to be used as length of an array",N,N],[16,"ArrayType","","Associated type representing the array type for the number",10,N],[11,"deref","","",0,N],[11,"deref_mut","","",0,N],[11,"from_iter","","",0,[[["i"]],["genericarray"]]],[11,"generate","","",0,[[["f"]],["genericarray"]]],[11,"map","","",0,[[["self"],["f"]],["mappedsequence"]]],[11,"zip","","",0,[[["self"],["rhs"],["f"]],["mappedsequence"]]],[11,"fold","","",0,[[["self"],["u"],["f"]],["u"]]],[11,"as_slice","","Extracts a slice containing the entire array.",0,N],[11,"as_mut_slice","","Extracts a mutable slice containing the entire array.",0,N],[11,"from_slice","","Converts slice to a generic array reference with inferred length;",0,N],[11,"from_mut_slice","","Converts mutable slice to a mutable generic array reference",0,N],[11,"clone_from_slice","","Construct a `GenericArray` from a slice by cloning its content",0,N],[11,"from_exact_iter","","Creates a new `GenericArray` instance from an iterator with a known exact size.",0,[[["i"]],["option"]]],[14,"arr","","Macro allowing for easy generation of Generic Arrays. Example: `let test = arr![u32; 1, 2, 3];`",N,N]],"paths":[[3,"GenericArray"],[8,"AddLength"],[3,"GenericArrayIter"],[8,"GenericSequence"],[8,"Lengthen"],[8,"Shorten"],[8,"Split"],[8,"Concat"],[8,"MappedGenericSequence"],[8,"FunctionalSequence"],[8,"ArrayLength"]]};
searchIndex["gif"]={"doc":"GIF en- and decoding library Build Status","items":[[3,"Frame","gif","A GIF frame",N,N],[12,"delay","","Frame delay in units of 10 ms.",0,N],[12,"dispose","","Disposal method.",0,N],[12,"transparent","","Transparent index (if available).",0,N],[12,"needs_user_input","","True if the frame needs user input to be displayed.",0,N],[12,"top","","Offset from the top border of the canvas.",0,N],[12,"left","","Offset from the left border of the canvas.",0,N],[12,"width","","Width of the frame.",0,N],[12,"height","","Height of the frame.",0,N],[12,"interlaced","","True if the image is interlaced.",0,N],[12,"palette","","Frame local color palette if available.",0,N],[12,"buffer","","Buffer containing the image data. Only indices unless configured differently.",0,N],[3,"StreamingDecoder","","GIF decoder which supports streaming",N,N],[3,"MemoryLimit","","Memory limit in bytes. `MemoryLimit::Some(0)` means that there is no memory limit set.",N,N],[12,"0","","",1,N],[3,"Reader","","GIF decoder",N,N],[3,"Decoder","","GIF decoder",N,N],[3,"Encoder","","GIF encoder.",N,N],[4,"Block","","Known GIF block types",N,N],[13,"Image","","Image block.",2,N],[13,"Extension","","Extension block.",2,N],[13,"Trailer","","Image trailer.",2,N],[4,"Extension","","Known GIF extensions",N,N],[13,"Text","","Text extension.",3,N],[13,"Control","","Control extension.",3,N],[13,"Comment","","Comment extension.",3,N],[13,"Application","","Application extension.",3,N],[4,"DisposalMethod","","Disposal method",N,N],[13,"Any","","StreamingDecoder is not required to take any action.",4,N],[13,"Keep","","Do not dispose.",4,N],[13,"Background","","Restore to background color.",4,N],[13,"Previous","","Restore to previous.",4,N],[4,"Decoded","","Indicates whether a certain object has been decoded",N,N],[13,"Nothing","","Decoded nothing.",5,N],[13,"GlobalPalette","","Global palette.",5,N],[13,"BackgroundColor","","Index of the background color in the global palette.",5,N],[13,"Trailer","","Decoded the image trailer.",5,N],[13,"BlockStart","","The start of a block.",5,N],[13,"SubBlockFinished","","Decoded a sub-block. More sub-block are available.",5,N],[13,"BlockFinished","","Decoded the last (or only) sub-block of a block.",5,N],[13,"Frame","","Decoded all information of the next frame. The returned frame does not any image data.",5,N],[13,"Data","","Decoded some data of the current frame.",5,N],[13,"DataEnd","","No more data available the current frame.",5,N],[4,"DecodingError","","Decoding error.",N,N],[13,"Format","","Returned if the image is found to be malformed.",6,N],[13,"Internal","","Internal (logic) error.",6,N],[13,"Io","","Wraps `std::io::Error`.",6,N],[4,"ColorOutput","","Output mode for the image data",N,N],[13,"RGBA","","The decoder expands the image data to 32bit RGBA. This affects:",7,N],[13,"Indexed","","The decoder returns the raw indexed data.",7,N],[4,"Extensions","","Configures how extensions should be handled",N,N],[13,"Save","","Saves all extention data",8,N],[13,"Skip","","Skips the data of unknown extensions and extracts the data from known ones",8,N],[4,"ExtensionData","","Extension data.",N,N],[13,"Control","","Control extension. Use `ExtensionData::new_control_ext` to construct.",9,N],[12,"flags","gif::ExtensionData","Flags.",9,N],[12,"delay","","Frame delay.",9,N],[12,"trns","","Transparent index.",9,N],[13,"Repetitions","gif","Sets the number of repetitions",9,N],[4,"Repeat","","Number of repetitions",N,N],[13,"Finite","","Finite number of repetitions",10,N],[13,"Infinite","","Infinite number of repetitions",10,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["disposalmethod"]]],[11,"eq","","",4,[[["self"],["disposalmethod"]],["bool"]]],[11,"from_u8","","Converts `u8` to `Option<Self>`",4,[[["u8"]],["option",["disposalmethod"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["block"]]],[11,"eq","","",2,[[["self"],["block"]],["bool"]]],[11,"from_u8","","Converts `u8` to `Option<Self>`",2,[[["u8"]],["option",["block"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["extension"]]],[11,"eq","","",3,[[["self"],["extension"]],["bool"]]],[11,"from_u8","","Converts `u8` to `Option<Self>`",3,[[["u8"]],["option",["extension"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["frame"]]],[11,"default","","",0,[[],["frame"]]],[11,"from_rgba","","Creates a frame from pixels in RGBA format.",0,N],[11,"from_palette_pixels","","Creates a frame from a palette and indexed pixels",0,N],[11,"from_indexed_pixels","","Creates a frame from indexed pixels in the global palette",0,N],[11,"from_rgb","","Creates a frame from pixels in RGB format.",0,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"description","","",6,[[["self"]],["str"]]],[11,"cause","","",6,[[["self"]],["option",["error"]]]],[11,"from","","",6,[[["error"]],["self"]]],[11,"eq","","",8,[[["self"],["extensions"]],["bool"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"set_param","","",8,[[["self"],["streamingdecoder"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new streaming decoder",11,[[],["streamingdecoder"]]],[11,"update","","Updates the internal state of the decoder. ",11,N],[11,"last_ext","","Returns the data of the last extension that has been decoded.",11,N],[11,"current_frame_mut","","Current frame info as a mutable ref.",11,[[["self"]],["frame"]]],[11,"current_frame","","Current frame info as a ref.",11,[[["self"]],["frame"]]],[11,"width","","Width of the image",11,[[["self"]],["u16"]]],[11,"height","","Height of the image",11,[[["self"]],["u16"]]],[11,"eq","","",7,[[["self"],["coloroutput"]],["bool"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"set_param","","",7,[[["self"],["decoder"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"set_param","","",1,[[["self"],["decoder"]]]],[11,"new","","Creates a new decoder builder",12,[[["r"]],["decoder"]]],[11,"read_info","","Reads the logical screen descriptor including the global color palette",12,[[["self"]],["result",["reader","decodingerror"]]]],[11,"next_frame_info","","Returns the next frame info",13,[[["self"]],["result",["option","decodingerror"]]]],[11,"read_next_frame","","Reads the next frame from the image.",13,[[["self"]],["result",["option","decodingerror"]]]],[11,"read_into_buffer","","Reads the data of the current frame into a pre-allocated buffer.",13,N],[11,"fill_buffer","","Reads data of the current frame into a pre-allocated buffer until the buffer has been filled completely.",13,N],[11,"buffer_size","","Output buffer size",13,[[["self"]],["usize"]]],[11,"line_length","","Line length of the current frame",13,[[["self"]],["usize"]]],[11,"palette","","Returns the color palette relevant for the current (next) frame",13,[[["self"]],["result",["decodingerror"]]]],[11,"global_palette","","The global color palette",13,[[["self"]],["option"]]],[11,"width","","Width of the image",13,[[["self"]],["u16"]]],[11,"height","","Height of the image",13,[[["self"]],["u16"]]],[11,"bg_color","","Index of the background color in the global palette",13,[[["self"]],["option",["usize"]]]],[11,"set_param","","",10,N],[11,"new_control_ext","","Constructor for control extension data.",9,[[["u16"],["disposalmethod"],["bool"],["option",["u8"]]],["extensiondata"]]],[11,"new","","Creates a new encoder.",14,N],[11,"write_global_palette","","Writes the global color palette.",14,N],[11,"write_frame","","Writes a frame to the image.",14,[[["self"],["frame"]],["result"]]],[11,"write_extension","","Writes an extension to the image.",14,[[["self"],["extensiondata"]],["result"]]],[11,"write_raw_extension","","Writes a raw extension to the image.",14,N],[11,"drop","","",14,[[["self"]]]],[8,"SetParameter","","Implemented for objects that have parameters.",N,N],[11,"set","","Sets `value` as a parameter of `self`.",15,N],[8,"Parameter","","Configuration parameter trait.",N,N],[16,"Result","","Result type of `set_param`.",16,N],[10,"set_param","","Sets `self` as a parameter of `Object`.",16,N],[11,"set","","Sets `value` as a parameter of `self`.",15,N]],"paths":[[3,"Frame"],[3,"MemoryLimit"],[4,"Block"],[4,"Extension"],[4,"DisposalMethod"],[4,"Decoded"],[4,"DecodingError"],[4,"ColorOutput"],[4,"Extensions"],[4,"ExtensionData"],[4,"Repeat"],[3,"StreamingDecoder"],[3,"Decoder"],[3,"Reader"],[3,"Encoder"],[8,"SetParameter"],[8,"Parameter"]]};
searchIndex["humantime"]={"doc":"Human-friendly time parser and formatter","items":[[3,"FormattedDuration","humantime","A wrapper type that allows you to Display a Duration",N,N],[3,"Duration","","A wrapper for duration that has `FromStr` implementation",N,N],[3,"Timestamp","","A wrapper for SystemTime that has `FromStr` implementation",N,N],[3,"Rfc3339Timestamp","","A wrapper type that allows you to Display a SystemTime",N,N],[4,"DurationError","","Error parsing human-friendly duration",N,N],[13,"InvalidCharacter","","Invalid character during parsing",0,N],[13,"NumberExpected","","Non-numeric value where number is expected",0,N],[13,"UnknownUnit","","Unit in the number is not one of allowed units",0,N],[13,"NumberOverflow","","The numeric value is too large",0,N],[13,"Empty","","The value was an empty string (or consists only whitespace)",0,N],[4,"TimestampError","","Error parsing datetime (timestamp)",N,N],[13,"OutOfRange","","Numeric component is out of range",1,N],[13,"InvalidDigit","","Bad character where digit is expected",1,N],[13,"InvalidFormat","","Other formatting errors",1,N],[5,"parse_duration","","Parse duration object `1hour 12min 5s`",N,[[["str"]],["result",["duration","error"]]]],[5,"format_duration","","Formats duration into a human-readable string",N,[[["duration"]],["formattedduration"]]],[5,"parse_rfc3339","","Parse RFC3339 timestamp `2018-02-14T00:28:07Z`",N,[[["str"]],["result",["systemtime","error"]]]],[5,"parse_rfc3339_weak","","Parse RFC3339-like timestamp `2018-02-14 00:28:07`",N,[[["str"]],["result",["systemtime","error"]]]],[5,"format_rfc3339","","Format an RFC3339 timestamp `2018-02-14T00:28:07Z`",N,[[["systemtime"]],["rfc3339timestamp"]]],[5,"format_rfc3339_seconds","","Format an RFC3339 timestamp `2018-02-14T00:28:07Z`",N,[[["systemtime"]],["rfc3339timestamp"]]],[5,"format_rfc3339_nanos","","Format an RFC3339 timestamp `2018-02-14T00:28:07.000000000Z`",N,[[["systemtime"]],["rfc3339timestamp"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"clone","","",0,[[["self"]],["error"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["duration"]],["bool"]]],[11,"ne","","",3,[[["self"],["duration"]],["bool"]]],[11,"hash","","",3,N],[11,"clone","","",3,[[["self"]],["duration"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["timestamp"]],["bool"]]],[11,"ne","","",4,[[["self"],["timestamp"]],["bool"]]],[11,"clone","","",4,[[["self"]],["timestamp"]]],[11,"as_ref","","",3,[[["self"]],["stdduration"]]],[11,"deref","","",3,[[["self"]],["stdduration"]]],[11,"into","","",3,[[["self"]],["stdduration"]]],[11,"from","","",3,[[["stdduration"]],["duration"]]],[11,"from_str","","",3,[[["str"]],["result",["duration"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"as_ref","","",4,[[["self"]],["systemtime"]]],[11,"deref","","",4,[[["self"]],["systemtime"]]],[11,"into","","",4,[[["self"]],["systemtime"]]],[11,"from","","",4,[[["systemtime"]],["timestamp"]]],[11,"from_str","","",4,[[["str"]],["result",["timestamp"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"clone","","",1,[[["self"]],["error"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"DurationError"],[4,"TimestampError"],[3,"FormattedDuration"],[3,"Duration"],[3,"Timestamp"],[3,"Rfc3339Timestamp"]]};
searchIndex["image"]={"doc":"This crate provides native rust implementations of image encoders and decoders and basic image manipulation functions.","items":[[3,"Luma","image","Grayscale colors",N,N],[12,"data","","",0,N],[3,"LumaA","","Grayscale colors + alpha channel",N,N],[12,"data","","",1,N],[3,"Rgb","","RGB colors",N,N],[12,"data","","",2,N],[3,"Rgba","","RGB colors + alpha channel",N,N],[12,"data","","",3,N],[3,"SubImage","","A View into another image",N,N],[3,"Pixels","","Immutable pixel iterator",N,N],[3,"MutPixels","","Mutable pixel iterator",N,N],[3,"ImageBuffer","","Generic image buffer",N,N],[3,"Frame","","A single animation frame",N,N],[3,"Frames","","Holds the frames of the animated image",N,N],[4,"ColorType","","An enumeration over supported color types and their bit depths",N,N],[13,"Gray","","Pixel is grayscale",4,N],[13,"RGB","","Pixel contains R, G and B channels",4,N],[13,"Palette","","Pixel is an index into a color palette",4,N],[13,"GrayA","","Pixel is grayscale with an alpha channel",4,N],[13,"RGBA","","Pixel is RGB with an alpha channel",4,N],[4,"ImageError","","An enumeration of Image errors",N,N],[13,"FormatError","","The Image is not formatted properly",5,N],[13,"DimensionError","","The Image's dimensions are either too small or too large",5,N],[13,"UnsupportedError","","The Decoder does not support this image format",5,N],[13,"UnsupportedColor","","The Decoder does not support this color type",5,N],[13,"NotEnoughData","","Not enough data was provided to the Decoder to decode the image",5,N],[13,"IoError","","An I/O Error occurred while decoding the image",5,N],[13,"ImageEnd","","The end of the image has been reached",5,N],[4,"DecodingResult","","Result of a decoding process",N,N],[13,"U8","","A vector of unsigned bytes",6,N],[13,"U16","","A vector of unsigned words",6,N],[4,"FilterType","","Available Sampling Filters",N,N],[13,"Nearest","","Nearest Neighbor",7,N],[13,"Triangle","","Linear Filter",7,N],[13,"CatmullRom","","Cubic Filter",7,N],[13,"Gaussian","","Gaussian Filter",7,N],[13,"Lanczos3","","Lanczos with window 3",7,N],[4,"ImageFormat","","An enumeration of supported image formats. Not all formats support both encoding and decoding.",N,N],[13,"PNG","","An Image in PNG Format",8,N],[13,"JPEG","","An Image in JPEG Format",8,N],[13,"GIF","","An Image in GIF Format",8,N],[13,"WEBP","","An Image in WEBP Format",8,N],[13,"PNM","","An Image in general PNM Format",8,N],[13,"TIFF","","An Image in TIFF Format",8,N],[13,"TGA","","An Image in TGA Format",8,N],[13,"BMP","","An Image in BMP Format",8,N],[13,"ICO","","An Image in ICO Format",8,N],[13,"HDR","","An Image in Radiance HDR Format",8,N],[4,"ImageOutputFormat","","An enumeration of supported image formats for encoding.",N,N],[13,"PNG","","An Image in PNG Format",9,N],[13,"JPEG","","An Image in JPEG Format with specified quality",9,N],[13,"PNM","","An Image in one of the PNM Formats",9,N],[13,"GIF","","An Image in GIF Format",9,N],[13,"ICO","","An Image in ICO Format",9,N],[13,"BMP","","An Image in BMP Format",9,N],[13,"Unsupported","","A value for signalling an error: An unsupported format was requested",9,N],[4,"DynamicImage","","A Dynamic Image",N,N],[13,"ImageLuma8","","Each pixel in this image is 8-bit Luma",10,N],[13,"ImageLumaA8","","Each pixel in this image is 8-bit Luma with alpha",10,N],[13,"ImageRgb8","","Each pixel in this image is 8-bit Rgb",10,N],[13,"ImageRgba8","","Each pixel in this image is 8-bit Rgb with alpha",10,N],[5,"Luma","","",N,N],[5,"LumaA","","",N,N],[5,"Rgb","","",N,N],[5,"Rgba","","",N,N],[5,"open","","Open the image located at the path specified. The image's format is determined from the path's file extension.",N,[[["p"]],["imageresult",["dynamicimage"]]]],[5,"load","","Create a new image from a Reader",N,[[["r"],["imageformat"]],["imageresult",["dynamicimage"]]]],[5,"load_from_memory","","Create a new image from a byte slice",N,N],[5,"load_from_memory_with_format","","Create a new image from a byte slice",N,N],[5,"guess_format","","Guess image format from memory block",N,N],[5,"save_buffer","","Saves the supplied buffer to a file at the path specified.",N,N],[0,"math","","Mathematical helper functions and types.",N,N],[0,"utils","image::math","Shared mathematical utility functions.",N,N],[5,"clamp","image::math::utils","Cut value to be inside given range",N,[[["n"],["n"],["n"]],["n"]]],[0,"nq","image::math","NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994. See \"Kohonen neural networks for optimal colour quantization\" in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367. for a discussion of the algorithm. See also http://www.acm.org/~dekker/NEUQUANT.HTML",N,N],[3,"NeuQuant","image::math::nq","Neural network color quantizer",N,N],[11,"new","","Creates a new neural network and trains it with the supplied data",11,N],[11,"init","","Initializes the neural network and trains it with the supplied data",11,N],[11,"map_pixel","","Maps the pixel in-place to the best-matching color in the color map",11,N],[11,"index_of","","Finds the best-matching index in the color map for `pixel`",11,N],[0,"imageops","image","Image Processing Functions",N,N],[4,"FilterType","image::imageops","Available Sampling Filters",N,N],[13,"Nearest","","Nearest Neighbor",7,N],[13,"Triangle","","Linear Filter",7,N],[13,"CatmullRom","","Cubic Filter",7,N],[13,"Gaussian","","Gaussian Filter",7,N],[13,"Lanczos3","","Lanczos with window 3",7,N],[5,"rotate90","","Rotate an image 90 degrees clockwise.",N,[[["i"]],["imagebuffer",["vec"]]]],[5,"rotate180","","Rotate an image 180 degrees clockwise.",N,[[["i"]],["imagebuffer",["vec"]]]],[5,"rotate270","","Rotate an image 270 degrees clockwise.",N,[[["i"]],["imagebuffer",["vec"]]]],[5,"flip_horizontal","","Flip an image horizontally",N,[[["i"]],["imagebuffer",["vec"]]]],[5,"flip_vertical","","Flip an image vertically",N,[[["i"]],["imagebuffer",["vec"]]]],[5,"filter3x3","","Perform a 3x3 box filter on the supplied image. `kernel` is an array of the filter weights of length 9.",N,N],[5,"resize","","Resize the supplied image to the specified dimensions. `nwidth` and `nheight` are the new dimensions. `filter` is the sampling filter to use.",N,[[["i"],["u32"],["u32"],["filtertype"]],["imagebuffer",["vec"]]]],[5,"thumbnail","","Resize the supplied image down to the specific dimensions.",N,[[["i"],["u32"],["u32"]],["imagebuffer",["vec"]]]],[5,"blur","","Performs a Gaussian blur on the supplied image. `sigma` is a measure of how much to blur by.",N,[[["i"],["f32"]],["imagebuffer",["vec"]]]],[5,"unsharpen","","Performs an unsharpen mask on the supplied image. `sigma` is the amount to blur the image by. `threshold` is the threshold for the difference between",N,[[["i"],["f32"],["i32"]],["imagebuffer",["vec"]]]],[5,"crop","","Return a mutable view into an image",N,[[["i"],["u32"],["u32"],["u32"],["u32"]],["subimage"]]],[5,"overlay","","Overlay an image at a given coordinate (x, y)",N,[[["i"],["i"],["u32"],["u32"]]]],[5,"replace","","Replace the contents of an image at a given coordinate (x, y)",N,[[["i"],["i"],["u32"],["u32"]]]],[0,"colorops","","Functions for altering and converting the color of pixelbufs",N,N],[3,"BiLevel","image::imageops::colorops","A bi-level color map",N,N],[5,"grayscale","","Convert the supplied image to grayscale",N,[[["i"]],["imagebuffer",["luma","vec"]]]],[5,"invert","","Invert each pixel within the supplied image. This function operates in place.",N,[[["i"]]]],[5,"contrast","","Adjust the contrast of the supplied image. `contrast` is the amount to adjust the contrast by. Negative values decrease the contrast and positive values increase the contrast.",N,[[["i"],["f32"]],["imagebuffer",["vec"]]]],[5,"brighten","","Brighten the supplied image. `value` is the amount to brighten each pixel by. Negative values decrease the brightness and positive values increase it.",N,[[["i"],["i32"]],["imagebuffer",["vec"]]]],[5,"huerotate","","Hue rotate the supplied image. `value` is the degrees to rotate each pixel by. 0 and 360 do nothing, the rest rotates by the given degree value. just like the css webkit filter hue-rotate(180)",N,[[["i"],["i32"]],["imagebuffer",["vec"]]]],[5,"dither","","Reduces the colors of the image using the supplied `color_map` while applying Floyd-Steinberg dithering to improve the visual conception",N,[[["imagebuffer"],["map"]]]],[5,"index_colors","","Reduces the colors using the supplied `color_map` and returns an image of the indices",N,[[["imagebuffer"],["map"]],["imagebuffer",["luma","vec"]]]],[8,"ColorMap","","A color map",N,N],[16,"Color","","The color type on which the map operates on",12,N],[10,"index_of","","Returns the index of the closed match of `color` in the color map.",12,N],[10,"map_color","","Maps `color` to the closest color in the color map.",12,N],[11,"clone","","",13,[[["self"]],["bilevel"]]],[11,"index_of","","",13,[[["self"],["luma"]],["usize"]]],[11,"map_color","","",13,[[["self"],["luma"]]]],[11,"index_of","image::math::nq","",11,[[["self"],["rgba"]],["usize"]]],[11,"map_color","","",11,[[["self"],["rgba"]]]],[11,"clone","image","",7,[[["self"]],["filtertype"]]],[0,"webp","","Decoding of Webp Images",N,N],[3,"WebpDecoder","image::webp","A Representation of a Webp Image format decoder.",N,N],[11,"new","","Create a new WebpDecoder from the Reader `r`. This function takes ownership of the Reader.",14,[[["r"]],["webpdecoder"]]],[11,"dimensions","","",14,[[["self"]],["imageresult"]]],[11,"colortype","","",14,[[["self"]],["imageresult",["colortype"]]]],[11,"row_len","","",14,[[["self"]],["imageresult",["usize"]]]],[11,"read_scanline","","",14,N],[11,"read_image","","",14,[[["self"]],["imageresult",["decodingresult"]]]],[0,"vp8","","An implementation of the VP8 Video Codec",N,N],[3,"Frame","image::webp::vp8","A Representation of the last decoded video frame",N,N],[12,"width","","The width of the luma plane",15,N],[12,"height","","The height of the luma plane",15,N],[12,"ybuf","","The luma plane of the frame",15,N],[12,"keyframe","","Indicates whether this frame is a keyframe",15,N],[12,"for_display","","Indicates whether this frame is intended for display",15,N],[12,"pixel_type","","The pixel type of the frame as defined by Section 9.2 of the VP8 Specification",15,N],[3,"VP8Decoder","","VP8 Decoder",N,N],[11,"default","","",15,[[],["frame"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["frame"]]],[11,"new","","Create a new decoder. The reader must present a raw vp8 bitstream to the decoder",16,[[["r"]],["vp8decoder"]]],[11,"decode_frame","","Decodes the current frame and returns a reference to it",16,[[["self"]],["result",["frame"]]]],[0,"pnm","image","Decoding of netpbm image formats (pbm, pgm, ppm and pam).",N,N],[3,"PNMDecoder","image::pnm","PNM decoder",N,N],[3,"PNMEncoder","","Encodes images to any of the `pnm` image formats.",N,N],[3,"PNMHeader","","Stores the complete header data of a file.",N,N],[3,"ArbitraryHeader","","Header produced by a `pam` file (\"Portable Arbitrary Map\")",N,N],[12,"height","","Height of the image file",17,N],[12,"width","","Width of the image file",17,N],[12,"depth","","Number of color channels",17,N],[12,"maxval","","Maximum sample value within the image",17,N],[12,"tupltype","","Color interpretation of image pixels",17,N],[3,"BitmapHeader","","Header produced by a `pbm` file (\"Portable Bit Map\")",N,N],[12,"encoding","","Binary or Ascii encoded file",18,N],[12,"height","","Height of the image file",18,N],[12,"width","","Width of the image file",18,N],[3,"GraymapHeader","","Header produced by a `pgm` file (\"Portable Gray Map\")",N,N],[12,"encoding","","Binary or Ascii encoded file",19,N],[12,"height","","Height of the image file",19,N],[12,"width","","Width of the image file",19,N],[12,"maxwhite","","Maximum sample value within the image",19,N],[3,"PixmapHeader","","Header produced by a `ppm` file (\"Portable Pixel Map\")",N,N],[12,"encoding","","Binary or Ascii encoded file",20,N],[12,"height","","Height of the image file",20,N],[12,"width","","Width of the image file",20,N],[12,"maxval","","Maximum sample value within the image",20,N],[4,"PNMSubtype","","Denotes the category of the magic number",N,N],[13,"Bitmap","","Magic numbers P1 and P4",21,N],[13,"Graymap","","Magic numbers P2 and P5",21,N],[13,"Pixmap","","Magic numbers P3 and P6",21,N],[13,"ArbitraryMap","","Magic number P7",21,N],[4,"SampleEncoding","","The kind of encoding used to store sample values",N,N],[13,"Binary","","Samples are unsigned binary integers in big endian",22,N],[13,"Ascii","","Samples are encoded as decimal ascii strings separated by whitespace",22,N],[4,"ArbitraryTuplType","","Standardized tuple type specifiers in the header of a `pam`.",N,N],[13,"BlackAndWhite","","Pixels are either black (0) or white (1)",23,N],[13,"BlackAndWhiteAlpha","","Pixels are either black (0) or white (1) and a second alpha channel",23,N],[13,"Grayscale","","Pixels represent the amount of white",23,N],[13,"GrayscaleAlpha","","Grayscale with an additional alpha channel",23,N],[13,"RGB","","Three channels: Red, Green, Blue",23,N],[13,"RGBAlpha","","Four channels: Red, Green, Blue, Alpha",23,N],[13,"Custom","","An image format which is not standardized",23,N],[11,"new","","Create a new decoder that decodes from the stream `read`",24,[[["r"]],["imageresult",["pnmdecoder"]]]],[11,"into_inner","","Extract the reader and header after an image has been read.",24,N],[11,"dimensions","","",24,[[["self"]],["imageresult"]]],[11,"colortype","","",24,[[["self"]],["imageresult",["colortype"]]]],[11,"row_len","","",24,[[["self"]],["imageresult",["usize"]]]],[11,"read_scanline","","",24,N],[11,"read_image","","",24,[[["self"]],["imageresult",["decodingresult"]]]],[11,"subtype","","Get the pnm subtype, depending on the magic constant contained in the header",24,[[["self"]],["pnmsubtype"]]],[11,"new","","Create new PNMEncoder from the `writer`.",25,[[["w"]],["self"]]],[11,"with_subtype","","Encode a specific pnm subtype image.",25,[[["self"],["pnmsubtype"]],["self"]]],[11,"with_header","","Enforce the use of a chosen header.",25,[[["self"],["pnmheader"]],["self"]]],[11,"with_dynamic_header","","Create the header dynamically for each image.",25,[[["self"]],["self"]]],[11,"encode","","Encode an image whose samples are represented as `u8`.",25,[[["self"],["s"],["u32"],["u32"],["colortype"]],["result"]]],[11,"clone","","",22,[[["self"]],["sampleencoding"]]],[11,"eq","","",22,[[["self"],["sampleencoding"]],["bool"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["pnmsubtype"]]],[11,"eq","","",21,[[["self"],["pnmsubtype"]],["bool"]]],[11,"ne","","",21,[[["self"],["pnmsubtype"]],["bool"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",18,[[["self"]],["bitmapheader"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"clone","","",19,[[["self"]],["graymapheader"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["pixmapheader"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["arbitraryheader"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",23,[[["self"]],["arbitrarytupltype"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"magic_constant","","Get the two magic constant bytes corresponding to this format subtype.",21,N],[11,"sample_encoding","","Whether samples are stored as binary or as decimal ascii",21,[[["self"]],["sampleencoding"]]],[11,"subtype","","Retrieve the format subtype from which the header was created.",26,[[["self"]],["pnmsubtype"]]],[11,"width","","The width of the image this header is for.",26,[[["self"]],["u32"]]],[11,"height","","The height of the image this header is for.",26,[[["self"]],["u32"]]],[11,"maximal_sample","","The biggest value a sample can have. In other words, the colour resolution.",26,[[["self"]],["u32"]]],[11,"as_bitmap","","Retrieve the underlying bitmap header if any",26,[[["self"]],["option",["bitmapheader"]]]],[11,"as_graymap","","Retrieve the underlying graymap header if any",26,[[["self"]],["option",["graymapheader"]]]],[11,"as_pixmap","","Retrieve the underlying pixmap header if any",26,[[["self"]],["option",["pixmapheader"]]]],[11,"as_arbitrary","","Retrieve the underlying arbitrary header if any",26,[[["self"]],["option",["arbitraryheader"]]]],[11,"write","","Write the header back into a binary stream",26,[[["self"],["write"]],["result"]]],[11,"from","","",26,[[["bitmapheader"]],["self"]]],[11,"from","","",26,[[["graymapheader"]],["self"]]],[11,"from","","",26,[[["pixmapheader"]],["self"]]],[11,"from","","",26,[[["arbitraryheader"]],["self"]]],[0,"png","image","Decoding and Encoding of PNG Images",N,N],[3,"PNGDecoder","image::png","PNG decoder",N,N],[3,"PNGEncoder","","PNG encoder",N,N],[11,"new","","Creates a new decoder that decodes from the stream `r`",27,[[["r"]],["pngdecoder"]]],[11,"dimensions","","",27,[[["self"]],["imageresult"]]],[11,"colortype","","",27,[[["self"]],["imageresult",["colortype"]]]],[11,"row_len","","",27,[[["self"]],["imageresult",["usize"]]]],[11,"read_scanline","","",27,N],[11,"read_image","","",27,[[["self"]],["imageresult",["decodingresult"]]]],[11,"new","","Create a new encoder that writes its output to `w`",28,[[["w"]],["pngencoder"]]],[11,"encode","","Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`",28,N],[11,"from","image","",4,N],[11,"from","","",5,[[["decodingerror"]],["imageerror"]]],[0,"ico","","Decoding and Encoding of ICO files",N,N],[3,"ICODecoder","image::ico","An ico decoder",N,N],[3,"ICOEncoder","","ICO encoder",N,N],[11,"new","","Create a new decoder that decodes from the stream `r`",29,[[["r"]],["imageresult",["icodecoder"]]]],[11,"dimensions","","",29,[[["self"]],["imageresult"]]],[11,"colortype","","",29,[[["self"]],["imageresult",["colortype"]]]],[11,"row_len","","",29,[[["self"]],["imageresult",["usize"]]]],[11,"read_scanline","","",29,N],[11,"read_image","","",29,[[["self"]],["imageresult",["decodingresult"]]]],[11,"new","","Create a new encoder that writes its output to `w`.",30,[[["w"]],["icoencoder"]]],[11,"encode","","Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`.  The dimensions of the image must be between 1 and 256 (inclusive) or an error will be returned.",30,N],[0,"jpeg","image","Decoding and Encoding of JPEG Images",N,N],[3,"JPEGDecoder","image::jpeg","JPEG decoder",N,N],[3,"JPEGEncoder","","The representation of a JPEG encoder",N,N],[11,"new","","Create a new encoder that writes its output to `w`",31,[[["w"]],["jpegencoder"]]],[11,"new_with_quality","","Create a new encoder that writes its output to `w`, and has the quality parameter `quality` with a value in the range 1-100 where 1 is the worst and 100 is the best.",31,[[["w"],["u8"]],["jpegencoder"]]],[11,"encode","","Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`",31,N],[11,"new","","Create a new decoder that decodes from the stream `r`",32,[[["r"]],["jpegdecoder"]]],[11,"dimensions","","",32,[[["self"]],["imageresult"]]],[11,"colortype","","",32,[[["self"]],["imageresult",["colortype"]]]],[11,"row_len","","",32,[[["self"]],["imageresult",["usize"]]]],[11,"read_scanline","","",32,N],[11,"read_image","","",32,[[["self"]],["imageresult",["decodingresult"]]]],[11,"from","image","",4,[[["pixelformat"]],["colortype"]]],[11,"from","","",5,[[["error"]],["imageerror"]]],[0,"gif","","Decoding of GIF Images",N,N],[3,"Frame","image::gif","A GIF frame",N,N],[12,"delay","","Frame delay in units of 10 ms.",33,N],[12,"dispose","","Disposal method.",33,N],[12,"transparent","","Transparent index (if available).",33,N],[12,"needs_user_input","","True if the frame needs user input to be displayed.",33,N],[12,"top","","Offset from the top border of the canvas.",33,N],[12,"left","","Offset from the left border of the canvas.",33,N],[12,"width","","Width of the frame.",33,N],[12,"height","","Height of the frame.",33,N],[12,"interlaced","","True if the image is interlaced.",33,N],[12,"palette","","Frame local color palette if available.",33,N],[12,"buffer","","Buffer containing the image data. Only indices unless configured differently.",33,N],[4,"DisposalMethod","","Disposal method",N,N],[13,"Any","","StreamingDecoder is not required to take any action.",34,N],[13,"Keep","","Do not dispose.",34,N],[13,"Background","","Restore to background color.",34,N],[13,"Previous","","Restore to previous.",34,N],[3,"Decoder","","GIF decoder",N,N],[3,"Encoder","","GIF encoder.",N,N],[11,"new","","Creates a new decoder that decodes the input steam `r`",35,[[["r"]],["decoder"]]],[11,"dimensions","","",35,[[["self"]],["imageresult"]]],[11,"colortype","","",35,[[["self"]],["imageresult",["colortype"]]]],[11,"row_len","","",35,[[["self"]],["imageresult",["usize"]]]],[11,"read_scanline","","",35,N],[11,"read_image","","",35,[[["self"]],["imageresult",["decodingresult"]]]],[11,"is_animated","","",35,[[["self"]],["imageresult",["bool"]]]],[11,"into_frames","","",35,[[["self"]],["imageresult",["image_frames"]]]],[11,"new","","Creates a new GIF encoder.",36,[[["w"]],["encoder"]]],[11,"encode","","Encodes a frame.",36,[[["self"],["frame"]],["imageresult"]]],[11,"from","image","",5,[[["decodingerror"]],["imageerror"]]],[0,"tiff","","Decoding and Encoding of TIFF Images",N,N],[3,"TIFFDecoder","image::tiff","The representation of a TIFF decoder",N,N],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new decoder that decodes from the stream `r`",37,[[["r"]],["imageresult",["tiffdecoder"]]]],[11,"init","","Initializes the decoder.",37,[[["self"]],["imageresult",["tiffdecoder"]]]],[11,"next_image","","Reads in the next image. If there is no further image in the TIFF file a format error is returned. To determine whether there are more images call `TIFFDecoder::more_images` instead.",37,[[["self"]],["imageresult",["tiffdecoder"]]]],[11,"more_images","","Returns `true` if there is at least one more image available.",37,[[["self"]],["bool"]]],[11,"byte_order","","Returns the byte_order",37,[[["self"]],["byteorder"]]],[11,"read_short","","Reads a TIFF short value",37,[[["self"]],["result",["u16","error"]]]],[11,"read_long","","Reads a TIFF long value",37,[[["self"]],["result",["u32","error"]]]],[11,"read_offset","","Reads a TIFF IFA offset/value field",37,[[["self"]],["result",["error"]]]],[11,"goto_offset","","Moves the cursor to the specified offset",37,[[["self"],["u32"]],["result"]]],[11,"dimensions","","",37,[[["self"]],["imageresult"]]],[11,"colortype","","",37,[[["self"]],["imageresult",["colortype"]]]],[11,"row_len","","",37,[[["self"]],["imageresult",["usize"]]]],[11,"read_scanline","","",37,N],[11,"read_image","","",37,[[["self"]],["imageresult",["decodingresult"]]]],[0,"tga","image","Decoding of TGA Images",N,N],[3,"TGADecoder","image::tga","The representation of a TGA decoder",N,N],[11,"new","","Create a new decoder that decodes from the stream `r`",38,[[["r"]],["tgadecoder"]]],[11,"dimensions","","",38,[[["self"]],["imageresult"]]],[11,"colortype","","",38,[[["self"]],["imageresult",["colortype"]]]],[11,"row_len","","",38,[[["self"]],["imageresult",["usize"]]]],[11,"read_scanline","","",38,N],[11,"read_image","","",38,[[["self"]],["imageresult",["decodingresult"]]]],[0,"bmp","image","Decoding and Encoding of BMP Images",N,N],[3,"BMPEncoder","image::bmp","The representation of a BMP encoder.",N,N],[3,"BMPDecoder","","A bmp decoder",N,N],[11,"new","","Create a new encoder that writes its output to `w`.",39,[[["w"]],["self"]]],[11,"encode","","Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`.",39,N],[11,"new","","Create a new decoder that decodes from the stream `r`",40,[[["r"]],["bmpdecoder"]]],[11,"dimensions","","",40,[[["self"]],["imageresult"]]],[11,"colortype","","",40,[[["self"]],["imageresult",["colortype"]]]],[11,"row_len","","",40,[[["self"]],["imageresult",["usize"]]]],[11,"read_scanline","","",40,N],[11,"read_image","","",40,[[["self"]],["imageresult",["decodingresult"]]]],[0,"hdr","image","Decoding of Radiance HDR Images",N,N],[3,"HDRAdapter","image::hdr","Adapter to conform to `ImageDecoder` trait",N,N],[3,"HDRDecoder","","An Radiance HDR decoder",N,N],[3,"RGBE8Pixel","","Refer to wikipedia",N,N],[12,"c","","Color components",41,N],[12,"e","","Exponent",41,N],[3,"HDRImageDecoderIterator","","Scanline buffered pixel by pixel iterator",N,N],[3,"HDRMetadata","","Metadata for Radiance HDR image",N,N],[12,"width","","Width of decoded image. It could be either scanline length, or scanline count, depending on image orientation.",42,N],[12,"height","","Height of decoded image. It depends on orientation too.",42,N],[12,"orientation","","Orientation matrix. For standard orientation it is ((1,0),(0,1)) - left to right, top to bottom. First pair tells how resulting pixel coordinates change along a scanline. Second pair tells how they change from one scanline to the next.",42,N],[12,"exposure","","Divide color values by exposure to get to get physical radiance in watts/steradian/m2",42,N],[12,"color_correction","","Divide color values by corresponding tuple member (r, g, b) to get to get physical radiance in watts/steradian/m2",42,N],[12,"pixel_aspect_ratio","","Pixel height divided by pixel width",42,N],[12,"custom_attributes","","All lines contained in image header are put here. Ordering of lines is preserved. Lines in the form \"key=value\" are represented as (\"key\", \"value\"). All other lines are (\"\", \"line\")",42,N],[3,"HDREncoder","","Radiance HDR encoder",N,N],[5,"rgbe8","","Creates `RGBE8Pixel` from components",N,[[["u8"],["u8"],["u8"],["u8"]],["rgbe8pixel"]]],[5,"read_raw_file","","Helper function for reading raw 3-channel f32 images",N,[[["p"]],["result",["vec"]]]],[5,"to_rgbe8","","Converts `Rgb<f32>` into `RGBE8Pixel`",N,[[["rgb",["f32"]]],["rgbe8pixel"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates adapter",43,[[["r"]],["imageresult",["hdradapter"]]]],[11,"new_nonstrict","","Allows reading old Radiance HDR images",43,[[["r"]],["imageresult",["hdradapter"]]]],[11,"dimensions","","",43,[[["self"]],["imageresult"]]],[11,"colortype","","",43,[[["self"]],["imageresult",["colortype"]]]],[11,"row_len","","",43,[[["self"]],["imageresult",["usize"]]]],[11,"read_scanline","","",43,N],[11,"read_image","","",43,[[["self"]],["imageresult",["decodingresult"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"clone","","",41,[[["self"]],["rgbe8pixel"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"eq","","",41,[[["self"],["rgbe8pixel"]],["bool"]]],[11,"ne","","",41,[[["self"],["rgbe8pixel"]],["bool"]]],[11,"to_hdr","","Converts `RGBE8Pixel` into `Rgb<f32>` linearly",41,[[["self"]],["rgb",["f32"]]]],[11,"to_ldr","","Converts `RGBE8Pixel` into `Rgb<T>` with scale=1 and gamma=2.2",41,[[["self"]],["rgb"]]],[11,"to_ldr_scale_gamma","","Converts RGBE8Pixel into Rgb using provided scale and gamma",41,[[["self"],["f32"],["f32"]],["rgb"]]],[11,"new","","Reads Radiance HDR image header from stream `r` if the header is valid, creates HDRDecoder strict mode is enabled",44,[[["r"]],["imageresult",["hdrdecoder"]]]],[11,"with_strictness","","Reads Radiance HDR image header from stream `reader`, if the header is valid, creates `HDRDecoder`.",44,[[["r"],["bool"]],["imageresult",["hdrdecoder"]]]],[11,"metadata","","Returns file metadata. Refer to `HDRMetadata` for details.",44,[[["self"]],["hdrmetadata"]]],[11,"read_image_native","","Consumes decoder and returns a vector of RGBE8 pixels",44,[[["self"]],["imageresult",["vec"]]]],[11,"read_image_transform","","Consumes decoder and returns a vector of transformed pixels",44,[[["self"],["f"]],["imageresult",["vec"]]]],[11,"read_image_ldr","","Consumes decoder and returns a vector of Rgb pixels. scale = 1, gamma = 2.2",44,[[["self"]],["imageresult",["vec"]]]],[11,"read_image_hdr","","Consumes decoder and returns a vector of Rgb pixels.",44,[[["self"]],["imageresult",["vec"]]]],[11,"into_iter","","",44,N],[11,"next","","",45,[[["self"]],["option"]]],[11,"size_hint","","",45,N],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"clone","","",42,[[["self"]],["hdrmetadata"]]],[11,"new","","Creates encoder",46,[[["w"]],["hdrencoder"]]],[11,"encode","","Encodes the image `data` that has dimensions `width` and `height`",46,N],[17,"SIGNATURE","","Radiance HDR file signature",N,N],[0,"dxt","image","Decoding of DXT (S3TC) compression",N,N],[3,"DXTDecoder","image::dxt","DXT decoder",N,N],[3,"DXTEncoder","","DXT encoder",N,N],[4,"DXTVariant","","What version of DXT compression are we using? Note that DXT2 and DXT4 are left away as they're just DXT3 and DXT5 with premultiplied alpha",N,N],[13,"DXT1","","The DXT1 format. 48 bytes of RGB data in a 4x4 pixel square is compressed into an 8 byte block of DXT1 data",47,N],[13,"DXT3","","The DXT3 format. 64 bytes of RGBA data in a 4x4 pixel square is compressed into a 16 byte block of DXT3 data",47,N],[13,"DXT5","","The DXT5 format. 64 bytes of RGBA data in a 4x4 pixel square is compressed into a 16 byte block of DXT5 data",47,N],[11,"clone","","",47,[[["self"]],["dxtvariant"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"eq","","",47,[[["self"],["dxtvariant"]],["bool"]]],[11,"colortype","","Returns the colortype that is stored in this DXT variant",47,[[["self"]],["colortype"]]],[11,"new","","Create a new DXT decoder that decodes from the stream `r`. As DXT is often stored as raw buffers with the width/height somewhere else the width and height of the image need to be passed in `width` and `height`, as well as the DXT variant in `variant`. width and height are required to be powers of 2 and at least 4. otherwise an error will be returned",48,[[["r"],["u32"],["u32"],["dxtvariant"]],["result",["dxtdecoder","imageerror"]]]],[11,"dimensions","","",48,[[["self"]],["imageresult"]]],[11,"colortype","","",48,[[["self"]],["imageresult",["colortype"]]]],[11,"row_len","","",48,[[["self"]],["imageresult",["usize"]]]],[11,"read_scanline","","",48,N],[11,"read_image","","",48,[[["self"]],["imageresult",["decodingresult"]]]],[11,"new","","Create a new encoder that writes its output to `w`",49,[[["w"]],["dxtencoder"]]],[11,"encode","","Encodes the image data `data` that has dimensions `width` and `height` in `DXTVariant` `variant` data is assumed to be in variant.colortype()",49,N],[11,"fmt","image","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"cause","","",5,[[["self"]],["option",["error"]]]],[11,"from","","",5,[[["error"]],["imageerror"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["imageformat"]]],[11,"eq","","",8,[[["self"],["imageformat"]],["bool"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["imageoutputformat"]]],[11,"eq","","",9,[[["self"],["imageoutputformat"]],["bool"]]],[11,"ne","","",9,[[["self"],["imageoutputformat"]],["bool"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"from","","",9,[[["imageformat"]],["self"]]],[11,"next","","",50,[[["self"]],["option"]]],[11,"next","","",51,[[["self"]],["option"]]],[11,"new","","Construct a new subimage",52,[[["i"],["u32"],["u32"],["u32"],["u32"]],["subimage"]]],[11,"inner_mut","","Returns a mutable reference to the wrapped image.",52,[[["self"]],["i"]]],[11,"change_bounds","","Change the coordinates of this subimage.",52,[[["self"],["u32"],["u32"],["u32"],["u32"]]]],[11,"to_image","","Convert this subimage to an ImageBuffer",52,[[["self"]],["imagebuffer",["vec"]]]],[11,"dimensions","","",52,N],[11,"bounds","","",52,N],[11,"get_pixel","","",52,N],[11,"put_pixel","","",52,N],[11,"blend_pixel","","DEPRECATED: This method will be removed. Blend the pixel directly instead.",52,N],[11,"get_pixel_mut","","",52,N],[11,"clone","","",10,[[["self"]],["dynamicimage"]]],[11,"new_luma8","","Creates a dynamic image backed by a buffer of grey pixels.",10,[[["u32"],["u32"]],["dynamicimage"]]],[11,"new_luma_a8","","Creates a dynamic image backed by a buffer of grey pixels with transparency.",10,[[["u32"],["u32"]],["dynamicimage"]]],[11,"new_rgb8","","Creates a dynamic image backed by a buffer of RGB pixels.",10,[[["u32"],["u32"]],["dynamicimage"]]],[11,"new_rgba8","","Creates a dynamic image backed by a buffer of RGBA pixels.",10,[[["u32"],["u32"]],["dynamicimage"]]],[11,"to_rgb","","Returns a copy of this image as an RGB image.",10,[[["self"]],["rgbimage"]]],[11,"to_rgba","","Returns a copy of this image as an RGBA image.",10,[[["self"]],["rgbaimage"]]],[11,"to_luma","","Returns a copy of this image as a Luma image.",10,[[["self"]],["grayimage"]]],[11,"to_luma_alpha","","Returns a copy of this image as a LumaA image.",10,[[["self"]],["grayalphaimage"]]],[11,"crop","","Return a cut out of this image delimited by the bounding rectangle.",10,[[["self"],["u32"],["u32"],["u32"],["u32"]],["dynamicimage"]]],[11,"as_rgb8","","Return a reference to an 8bit RGB image",10,[[["self"]],["option",["rgbimage"]]]],[11,"as_mut_rgb8","","Return a mutable reference to an 8bit RGB image",10,[[["self"]],["option",["rgbimage"]]]],[11,"as_rgba8","","Return a reference to an 8bit RGBA image",10,[[["self"]],["option",["rgbaimage"]]]],[11,"as_mut_rgba8","","Return a mutable reference to an 8bit RGBA image",10,[[["self"]],["option",["rgbaimage"]]]],[11,"as_luma8","","Return a reference to an 8bit Grayscale image",10,[[["self"]],["option",["grayimage"]]]],[11,"as_mut_luma8","","Return a mutable reference to an 8bit Grayscale image",10,[[["self"]],["option",["grayimage"]]]],[11,"as_luma_alpha8","","Return a reference to an 8bit Grayscale image with an alpha channel",10,[[["self"]],["option",["grayalphaimage"]]]],[11,"as_mut_luma_alpha8","","Return a mutable reference to an 8bit Grayscale image with an alpha channel",10,[[["self"]],["option",["grayalphaimage"]]]],[11,"raw_pixels","","Return this image's pixels as a byte vector.",10,[[["self"]],["vec",["u8"]]]],[11,"color","","Return this image's color type.",10,[[["self"]],["colortype"]]],[11,"grayscale","","Return a grayscale version of this image.",10,[[["self"]],["dynamicimage"]]],[11,"invert","","Invert the colors of this image. This method operates inplace.",10,[[["self"]]]],[11,"resize","","Resize this image using the specified filter algorithm. Returns a new image. The image's aspect ratio is preserved. The image is scaled to the maximum possible size that fits within the bounds specified by `nwidth` and `nheight`.",10,[[["self"],["u32"],["u32"],["filtertype"]],["dynamicimage"]]],[11,"resize_exact","","Resize this image using the specified filter algorithm. Returns a new image. Does not preserve aspect ratio. `nwidth` and `nheight` are the new image's dimensions",10,[[["self"],["u32"],["u32"],["filtertype"]],["dynamicimage"]]],[11,"thumbnail","","Scale this image down to fit within a specific size. Returns a new image. The image's aspect ratio is preserved. The image is scaled to the maximum possible size that fits within the bounds specified by `nwidth` and `nheight`.",10,[[["self"],["u32"],["u32"]],["dynamicimage"]]],[11,"thumbnail_exact","","Scale this image down to a specific size. Returns a new image. Does not preserve aspect ratio. `nwidth` and `nheight` are the new image's dimensions. This method uses a fast integer algorithm where each source pixel contributes to exactly one target pixel. May give aliasing artifacts if new size is close to old size.",10,[[["self"],["u32"],["u32"]],["dynamicimage"]]],[11,"resize_to_fill","","Resize this image using the specified filter algorithm. Returns a new image. The image's aspect ratio is preserved. The image is scaled to the maximum possible size that fits within the larger (relative to aspect ratio) of the bounds specified by `nwidth` and `nheight`, then cropped to fit within the other bound.",10,[[["self"],["u32"],["u32"],["filtertype"]],["dynamicimage"]]],[11,"blur","","Performs a Gaussian blur on this image. `sigma` is a measure of how much to blur by.",10,[[["self"],["f32"]],["dynamicimage"]]],[11,"unsharpen","","Performs an unsharpen mask on this image. `sigma` is the amount to blur the image by. `threshold` is a control of how much to sharpen.",10,[[["self"],["f32"],["i32"]],["dynamicimage"]]],[11,"filter3x3","","Filters this image with the specified 3x3 kernel.",10,N],[11,"adjust_contrast","","Adjust the contrast of this image. `contrast` is the amount to adjust the contrast by. Negative values decrease the contrast and positive values increase the contrast.",10,[[["self"],["f32"]],["dynamicimage"]]],[11,"brighten","","Brighten the pixels of this image. `value` is the amount to brighten each pixel by. Negative values decrease the brightness and positive values increase it.",10,[[["self"],["i32"]],["dynamicimage"]]],[11,"huerotate","","Hue rotate the supplied image. `value` is the degrees to rotate each pixel by. 0 and 360 do nothing, the rest rotates by the given degree value. just like the css webkit filter hue-rotate(180)",10,[[["self"],["i32"]],["dynamicimage"]]],[11,"flipv","","Flip this image vertically",10,[[["self"]],["dynamicimage"]]],[11,"fliph","","Flip this image horizontally",10,[[["self"]],["dynamicimage"]]],[11,"rotate90","","Rotate this image 90 degrees clockwise.",10,[[["self"]],["dynamicimage"]]],[11,"rotate180","","Rotate this image 180 degrees clockwise.",10,[[["self"]],["dynamicimage"]]],[11,"rotate270","","Rotate this image 270 degrees clockwise.",10,[[["self"]],["dynamicimage"]]],[11,"write_to","","Encode this image and write it to `w`",10,[[["self"],["w"],["f"]],["imageresult"]]],[11,"save","","Saves the buffer to a file at the path specified.",10,[[["self"],["q"]],["result"]]],[11,"dimensions","","",10,N],[11,"bounds","","",10,N],[11,"get_pixel","","",10,[[["self"],["u32"],["u32"]],["rgba",["u8"]]]],[11,"put_pixel","","",10,[[["self"],["u32"],["u32"],["rgba",["u8"]]]]],[11,"blend_pixel","","DEPRECATED: Use iterator `pixels_mut` to blend the pixels directly.",10,[[["self"],["u32"],["u32"],["rgba",["u8"]]]]],[11,"get_pixel_mut","","DEPRECATED: Do not use is function: It is unimplemented!",10,[[["self"],["u32"],["u32"]],["rgba"]]],[11,"eq","","",4,[[["self"],["colortype"]],["bool"]]],[11,"ne","","",4,[[["self"],["colortype"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["colortype"]]],[11,"hash","","",4,N],[11,"eq","","",2,[[["self"],["rgb"]],["bool"]]],[11,"ne","","",2,[[["self"],["rgb"]],["bool"]]],[11,"clone","","",2,[[["self"]],["rgb"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"hash","","",2,N],[11,"channel_count","","",2,[[],["u8"]]],[11,"color_model","","",2,[[],["str"]]],[11,"color_type","","",2,[[],["colortype"]]],[11,"channels","","",2,N],[11,"channels_mut","","",2,N],[11,"channels4","","",2,N],[11,"from_channels","","",2,[[["t"],["t"],["t"],["t"]],["rgb"]]],[11,"from_slice","","",2,N],[11,"from_slice_mut","","",2,N],[11,"to_rgb","","",2,[[["self"]],["rgb"]]],[11,"to_rgba","","",2,[[["self"]],["rgba"]]],[11,"to_luma","","",2,[[["self"]],["luma"]]],[11,"to_luma_alpha","","",2,[[["self"]],["lumaa"]]],[11,"map","","",2,[[["self"],["f"]],["rgb"]]],[11,"apply","","",2,[[["self"],["f"]]]],[11,"map_with_alpha","","",2,[[["self"],["f"],["g"]],["rgb"]]],[11,"apply_with_alpha","","",2,[[["self"],["f"],["g"]]]],[11,"map2","","",2,[[["self"],["self"],["f"]],["rgb"]]],[11,"apply2","","",2,[[["self"],["rgb"],["f"]]]],[11,"invert","","",2,[[["self"]]]],[11,"blend","","",2,[[["self"],["rgb"]]]],[11,"index","","",2,[[["self"],["usize"]],["t"]]],[11,"index_mut","","",2,[[["self"],["usize"]],["t"]]],[11,"eq","","",0,[[["self"],["luma"]],["bool"]]],[11,"ne","","",0,[[["self"],["luma"]],["bool"]]],[11,"clone","","",0,[[["self"]],["luma"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"channel_count","","",0,[[],["u8"]]],[11,"color_model","","",0,[[],["str"]]],[11,"color_type","","",0,[[],["colortype"]]],[11,"channels","","",0,N],[11,"channels_mut","","",0,N],[11,"channels4","","",0,N],[11,"from_channels","","",0,[[["t"],["t"],["t"],["t"]],["luma"]]],[11,"from_slice","","",0,N],[11,"from_slice_mut","","",0,N],[11,"to_rgb","","",0,[[["self"]],["rgb"]]],[11,"to_rgba","","",0,[[["self"]],["rgba"]]],[11,"to_luma","","",0,[[["self"]],["luma"]]],[11,"to_luma_alpha","","",0,[[["self"]],["lumaa"]]],[11,"map","","",0,[[["self"],["f"]],["luma"]]],[11,"apply","","",0,[[["self"],["f"]]]],[11,"map_with_alpha","","",0,[[["self"],["f"],["g"]],["luma"]]],[11,"apply_with_alpha","","",0,[[["self"],["f"],["g"]]]],[11,"map2","","",0,[[["self"],["self"],["f"]],["luma"]]],[11,"apply2","","",0,[[["self"],["luma"],["f"]]]],[11,"invert","","",0,[[["self"]]]],[11,"blend","","",0,[[["self"],["luma"]]]],[11,"index","","",0,[[["self"],["usize"]],["t"]]],[11,"index_mut","","",0,[[["self"],["usize"]],["t"]]],[11,"eq","","",3,[[["self"],["rgba"]],["bool"]]],[11,"ne","","",3,[[["self"],["rgba"]],["bool"]]],[11,"clone","","",3,[[["self"]],["rgba"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"hash","","",3,N],[11,"channel_count","","",3,[[],["u8"]]],[11,"color_model","","",3,[[],["str"]]],[11,"color_type","","",3,[[],["colortype"]]],[11,"channels","","",3,N],[11,"channels_mut","","",3,N],[11,"channels4","","",3,N],[11,"from_channels","","",3,[[["t"],["t"],["t"],["t"]],["rgba"]]],[11,"from_slice","","",3,N],[11,"from_slice_mut","","",3,N],[11,"to_rgb","","",3,[[["self"]],["rgb"]]],[11,"to_rgba","","",3,[[["self"]],["rgba"]]],[11,"to_luma","","",3,[[["self"]],["luma"]]],[11,"to_luma_alpha","","",3,[[["self"]],["lumaa"]]],[11,"map","","",3,[[["self"],["f"]],["rgba"]]],[11,"apply","","",3,[[["self"],["f"]]]],[11,"map_with_alpha","","",3,[[["self"],["f"],["g"]],["rgba"]]],[11,"apply_with_alpha","","",3,[[["self"],["f"],["g"]]]],[11,"map2","","",3,[[["self"],["self"],["f"]],["rgba"]]],[11,"apply2","","",3,[[["self"],["rgba"],["f"]]]],[11,"invert","","",3,[[["self"]]]],[11,"blend","","",3,[[["self"],["rgba"]]]],[11,"index","","",3,[[["self"],["usize"]],["t"]]],[11,"index_mut","","",3,[[["self"],["usize"]],["t"]]],[11,"eq","","",1,[[["self"],["lumaa"]],["bool"]]],[11,"ne","","",1,[[["self"],["lumaa"]],["bool"]]],[11,"clone","","",1,[[["self"]],["lumaa"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"channel_count","","",1,[[],["u8"]]],[11,"color_model","","",1,[[],["str"]]],[11,"color_type","","",1,[[],["colortype"]]],[11,"channels","","",1,N],[11,"channels_mut","","",1,N],[11,"channels4","","",1,N],[11,"from_channels","","",1,[[["t"],["t"],["t"],["t"]],["lumaa"]]],[11,"from_slice","","",1,N],[11,"from_slice_mut","","",1,N],[11,"to_rgb","","",1,[[["self"]],["rgb"]]],[11,"to_rgba","","",1,[[["self"]],["rgba"]]],[11,"to_luma","","",1,[[["self"]],["luma"]]],[11,"to_luma_alpha","","",1,[[["self"]],["lumaa"]]],[11,"map","","",1,[[["self"],["f"]],["lumaa"]]],[11,"apply","","",1,[[["self"],["f"]]]],[11,"map_with_alpha","","",1,[[["self"],["f"],["g"]],["lumaa"]]],[11,"apply_with_alpha","","",1,[[["self"],["f"],["g"]]]],[11,"map2","","",1,[[["self"],["self"],["f"]],["lumaa"]]],[11,"apply2","","",1,[[["self"],["lumaa"],["f"]]]],[11,"invert","","",1,[[["self"]]]],[11,"blend","","",1,[[["self"],["lumaa"]]]],[11,"index","","",1,[[["self"],["usize"]],["t"]]],[11,"index_mut","","",1,[[["self"],["usize"]],["t"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"from_raw","","Contructs a buffer from a generic container (for example a `Vec` or a slice)",53,[[["u32"],["u32"],["container"]],["option",["imagebuffer"]]]],[11,"into_raw","","Returns the underlying raw buffer",53,[[["self"]],["container"]]],[11,"dimensions","","The width and height of this image.",53,N],[11,"width","","The width of this image.",53,[[["self"]],["u32"]]],[11,"height","","The height of this image.",53,[[["self"]],["u32"]]],[11,"pixels","","Returns an iterator over the pixels of this image.",53,[[["self"]],["pixels"]]],[11,"enumerate_pixels","","Enumerates over the pixels of the image. The iterator yields the coordinates of each pixel along with a reference to them.",53,[[["self"]],["enumeratepixels"]]],[11,"get_pixel","","Gets a reference to the pixel at location `(x, y)`",53,[[["self"],["u32"],["u32"]],["p"]]],[11,"pixels_mut","","Returns an iterator over the mutable pixels of this image.",53,[[["self"]],["pixelsmut"]]],[11,"enumerate_pixels_mut","","Enumerates over the pixels of the image. The iterator yields the coordinates of each pixel along with a mutable reference to them.",53,[[["self"]],["enumeratepixelsmut"]]],[11,"get_pixel_mut","","Gets a reference to the mutable pixel at location `(x, y)`",53,[[["self"],["u32"],["u32"]],["p"]]],[11,"put_pixel","","Puts a pixel at location `(x, y)`",53,[[["self"],["u32"],["u32"],["p"]]]],[11,"save","","Saves the buffer to a file at the path specified.",53,[[["self"],["q"]],["result"]]],[11,"deref","","",53,N],[11,"deref_mut","","",53,N],[11,"index","","",53,N],[11,"index_mut","","",53,N],[11,"clone","","",53,[[["self"]],["imagebuffer"]]],[11,"dimensions","","",53,N],[11,"bounds","","",53,N],[11,"get_pixel","","",53,[[["self"],["u32"],["u32"]],["p"]]],[11,"get_pixel_mut","","",53,[[["self"],["u32"],["u32"]],["p"]]],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y), ignoring bounds checking.",53,[[["self"],["u32"],["u32"]],["p"]]],[11,"put_pixel","","",53,[[["self"],["u32"],["u32"],["p"]]]],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y), ignoring bounds checking.",53,[[["self"],["u32"],["u32"],["p"]]]],[11,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",53,[[["self"],["u32"],["u32"],["p"]]]],[11,"new","","Creates a new image buffer based on a `Vec<P::Subpixel>`.",53,[[["u32"],["u32"]],["imagebuffer",["vec"]]]],[11,"from_pixel","","Constructs a new ImageBuffer by copying a pixel",53,[[["u32"],["u32"],["p"]],["imagebuffer",["vec"]]]],[11,"from_fn","","Constructs a new ImageBuffer by repeated application of the supplied function. The arguments to the function are the pixel's x and y coordinates.",53,[[["u32"],["u32"],["f"]],["imagebuffer",["vec"]]]],[11,"from_vec","","Creates an image buffer out of an existing buffer. Returns None if the buffer is not big enough.",53,[[["u32"],["u32"],["vec"]],["option",["imagebuffer"]]]],[11,"into_vec","","Consumes the image buffer and returns the underlying data as an owned buffer",53,[[["self"]],["vec"]]],[11,"convert","","",53,[[["self"]],["imagebuffer",["vec"]]]],[11,"new","","Contructs a new frame iterator",54,[[["vec",["frame"]]],["frames"]]],[11,"clone","","",55,[[["self"]],["frame"]]],[11,"new","","Contructs a new frame",55,[[["rgbaimage"]],["frame"]]],[11,"from_parts","","Contructs a new frame",55,[[["rgbaimage"],["u32"],["u32"],["ratio",["u16"]]],["frame"]]],[11,"delay","","Delay of this frame",55,[[["self"]],["ratio",["u16"]]]],[11,"buffer","","Returns the image buffer",55,[[["self"]],["rgbaimage"]]],[11,"into_buffer","","Returns the image buffer",55,[[["self"]],["rgbaimage"]]],[11,"left","","Returns the x offset",55,[[["self"]],["u32"]]],[11,"top","","Returns the y offset",55,[[["self"]],["u32"]]],[11,"next","","",54,[[["self"]],["option",["frame"]]]],[6,"ImageResult","","Result of an image decoding/encoding process",N,N],[6,"RgbImage","","Sendable Rgb image buffer",N,N],[6,"RgbaImage","","Sendable Rgb + alpha channel image buffer",N,N],[6,"GrayImage","","Sendable grayscale image buffer",N,N],[6,"GrayAlphaImage","","Sendable grayscale + alpha channel image buffer",N,N],[8,"ImageDecoder","","The trait that all decoders implement",N,N],[10,"dimensions","","Returns a tuple containing the width and height of the image",56,[[["self"]],["imageresult"]]],[10,"colortype","","Returns the color type of the image e.g. RGB(8) (8bit RGB)",56,[[["self"]],["imageresult",["colortype"]]]],[10,"row_len","","Returns the length in bytes of one decoded row of the image",56,[[["self"]],["imageresult",["usize"]]]],[10,"read_scanline","","Reads one row from the image into `buf` and returns the row index",56,N],[10,"read_image","","Decodes the entire image and return it as a Vector",56,[[["self"]],["imageresult",["decodingresult"]]]],[11,"is_animated","","Returns true if the image is animated",56,[[["self"]],["imageresult",["bool"]]]],[11,"into_frames","","Returns the frames of the image",56,[[["self"]],["imageresult",["frames"]]]],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle starting from `x` and `y` and having `length` and `width`",56,[[["self"],["u32"],["u32"],["u32"],["u32"]],["imageresult",["vec"]]]],[8,"GenericImage","","A trait for manipulating images.",N,N],[16,"Pixel","","The type of pixel.",57,N],[10,"dimensions","","The width and height of this image.",57,N],[11,"width","","The width of this image.",57,[[["self"]],["u32"]]],[11,"height","","The height of this image.",57,[[["self"]],["u32"]]],[10,"bounds","","The bounding rectangle of this image.",57,N],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",57,[[["self"],["u32"],["u32"]],["bool"]]],[10,"get_pixel","","Returns the pixel located at (x, y)",57,N],[10,"get_pixel_mut","","Puts a pixel at location (x, y)",57,N],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",57,N],[10,"put_pixel","","Put a pixel at location (x, y)",57,N],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",57,N],[10,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",57,N],[11,"pixels","","Returns an Iterator over the pixels of this image. The iterator yields the coordinates of each pixel along with their value",57,[[["self"]],["pixels"]]],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image. The iterator yields the coordinates of each pixel along with a mutable reference to them.",57,[[["self"]],["mutpixels"]]],[11,"copy_from","","Copies all of the pixels from another image into this image.",57,[[["self"],["o"],["u32"],["u32"]],["bool"]]],[11,"sub_image","","Returns a subimage that is a view into this image.",57,[[["self"],["u32"],["u32"],["u32"],["u32"]],["subimage"]]],[8,"Pixel","","A generalized pixel.",N,N],[16,"Subpixel","","The underlying subpixel type.",58,N],[10,"channel_count","","Returns the number of channels of this pixel type.",58,[[],["u8"]]],[10,"channels","","Returns the components as a slice.",58,N],[10,"channels_mut","","Returns the components as a mutable slice",58,N],[10,"color_model","","Returns a string that can help to interpret the meaning each channel See gimp babl.",58,[[],["str"]]],[10,"color_type","","Returns the ColorType for this pixel format",58,[[],["colortype"]]],[10,"channels4","","Returns the channels of this pixel as a 4 tuple. If the pixel has less than 4 channels the remainder is filled with the maximum value",58,N],[10,"from_channels","","Construct a pixel from the 4 channels a, b, c and d. If the pixel does not contain 4 channels the extra are ignored.",58,N],[10,"from_slice","","Returns a view into a slice.",58,N],[10,"from_slice_mut","","Returns mutable view into a mutable slice.",58,N],[10,"to_rgb","","Convert this pixel to RGB",58,[[["self"]],["rgb"]]],[10,"to_rgba","","Convert this pixel to RGB with an alpha channel",58,[[["self"]],["rgba"]]],[10,"to_luma","","Convert this pixel to luma",58,[[["self"]],["luma"]]],[10,"to_luma_alpha","","Convert this pixel to luma with an alpha channel",58,[[["self"]],["lumaa"]]],[10,"map","","Apply the function `f` to each channel of this pixel.",58,[[["self"],["f"]],["self"]]],[10,"apply","","Apply the function `f` to each channel of this pixel.",58,[[["self"],["f"]]]],[10,"map_with_alpha","","Apply the function `f` to each channel except the alpha channel. Apply the function `g` to the alpha channel.",58,[[["self"],["f"],["g"]],["self"]]],[10,"apply_with_alpha","","Apply the function `f` to each channel except the alpha channel. Apply the function `g` to the alpha channel. Works in-place.",58,[[["self"],["f"],["g"]]]],[10,"map2","","Apply the function `f` to each channel of this pixel and `other` pairwise.",58,[[["self"],["self"],["f"]],["self"]]],[10,"apply2","","Apply the function `f` to each channel of this pixel and `other` pairwise. Works in-place.",58,[[["self"],["self"],["f"]]]],[10,"invert","","Invert this pixel",58,[[["self"]]]],[10,"blend","","Blend the color of a given pixel into ourself, taking into account alpha channels",58,[[["self"],["self"]]]],[8,"ConvertBuffer","","Provides color conversions for whole image buffers.",N,N],[10,"convert","","Converts `self` to a buffer of type T",59,[[["self"]],["t"]]],[8,"Primitive","","Primitive trait from old stdlib",N,N],[11,"from_rgba","image::gif","Creates a frame from pixels in RGBA format.",33,N],[11,"from_palette_pixels","","Creates a frame from a palette and indexed pixels",33,N],[11,"from_indexed_pixels","","Creates a frame from indexed pixels in the global palette",33,N],[11,"from_rgb","","Creates a frame from pixels in RGB format.",33,N],[11,"default","","",33,[[],["frame"]]],[11,"eq","","",34,[[["self"],["disposalmethod"]],["bool"]]],[11,"clone","","",33,[[["self"]],["frame"]]],[11,"clone","","",34,[[["self"]],["disposalmethod"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_u8","","Converts `u8` to `Option<Self>`",34,[[["u8"]],["option",["disposalmethod"]]]],[11,"is_animated","image","Returns true if the image is animated",56,[[["self"]],["imageresult",["bool"]]]],[11,"into_frames","","Returns the frames of the image",56,[[["self"]],["imageresult",["frames"]]]],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle starting from `x` and `y` and having `length` and `width`",56,[[["self"],["u32"],["u32"],["u32"],["u32"]],["imageresult",["vec"]]]],[11,"width","","The width of this image.",57,[[["self"]],["u32"]]],[11,"height","","The height of this image.",57,[[["self"]],["u32"]]],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",57,[[["self"],["u32"],["u32"]],["bool"]]],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",57,N],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",57,N],[11,"pixels","","Returns an Iterator over the pixels of this image. The iterator yields the coordinates of each pixel along with their value",57,[[["self"]],["pixels"]]],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image. The iterator yields the coordinates of each pixel along with a mutable reference to them.",57,[[["self"]],["mutpixels"]]],[11,"copy_from","","Copies all of the pixels from another image into this image.",57,[[["self"],["o"],["u32"],["u32"]],["bool"]]],[11,"sub_image","","Returns a subimage that is a view into this image.",57,[[["self"],["u32"],["u32"],["u32"],["u32"]],["subimage"]]],[11,"expand_palette","","Expands a color palette by re-using the existing buffer. Assumes 8 bit per pixel. Uses an optionally transparent index to adjust it's alpha value accordingly.",60,N]],"paths":[[3,"Luma"],[3,"LumaA"],[3,"Rgb"],[3,"Rgba"],[4,"ColorType"],[4,"ImageError"],[4,"DecodingResult"],[4,"FilterType"],[4,"ImageFormat"],[4,"ImageOutputFormat"],[4,"DynamicImage"],[3,"NeuQuant"],[8,"ColorMap"],[3,"BiLevel"],[3,"WebpDecoder"],[3,"Frame"],[3,"VP8Decoder"],[3,"ArbitraryHeader"],[3,"BitmapHeader"],[3,"GraymapHeader"],[3,"PixmapHeader"],[4,"PNMSubtype"],[4,"SampleEncoding"],[4,"ArbitraryTuplType"],[3,"PNMDecoder"],[3,"PNMEncoder"],[3,"PNMHeader"],[3,"PNGDecoder"],[3,"PNGEncoder"],[3,"ICODecoder"],[3,"ICOEncoder"],[3,"JPEGEncoder"],[3,"JPEGDecoder"],[3,"Frame"],[4,"DisposalMethod"],[3,"Decoder"],[3,"Encoder"],[3,"TIFFDecoder"],[3,"TGADecoder"],[3,"BMPEncoder"],[3,"BMPDecoder"],[3,"RGBE8Pixel"],[3,"HDRMetadata"],[3,"HDRAdapter"],[3,"HDRDecoder"],[3,"HDRImageDecoderIterator"],[3,"HDREncoder"],[4,"DXTVariant"],[3,"DXTDecoder"],[3,"DXTEncoder"],[3,"Pixels"],[3,"MutPixels"],[3,"SubImage"],[3,"ImageBuffer"],[3,"Frames"],[3,"Frame"],[8,"ImageDecoder"],[8,"GenericImage"],[8,"Pixel"],[8,"ConvertBuffer"],[6,"GrayImage"]]};
searchIndex["imageproc"]={"doc":"An image processing library, based on the image crate.","items":[[0,"utils","imageproc","Utils for testing and debugging.",N,N],[3,"Diff","imageproc::utils","A difference between two images",N,N],[12,"x","","x-coordinate of diff.",0,N],[12,"y","","y-coordinate of diff.",0,N],[12,"expected","","Pixel value in expected image.",0,N],[12,"actual","","Pixel value in actual image.",0,N],[5,"pixel_diff_summary","","Human readable description of some of the pixels that differ between left and right, or None if all pixels match.",N,[[["i"],["j"]],["option",["string"]]]],[5,"significant_pixel_diff_summary","","Human readable description of some of the pixels that differ signifcantly (according to provided function) between left and right, or None if all pixels match.",N,[[["i"],["j"],["f"]],["option",["string"]]]],[5,"pixel_diffs","","Lists pixels that differ between left and right images.",N,[[["i"],["j"],["f"]],["vec",["diff"]]]],[5,"describe_pixel_diffs","","Gives a summary description of a list of pixel diffs for use in error messages.",N,N],[5,"load_image_or_panic","","Loads image at given path, panicking on failure.",N,[[["p"]],["dynamicimage"]]],[5,"gray_bench_image","","Gray image to use in benchmarks. This is neither noise nor similar to natural images - it's just a convenience method to produce an image that's not constant.",N,[[["u32"],["u32"]],["grayimage"]]],[5,"rgb_bench_image","","RGB image to use in benchmarks. See comment on `gray_bench_image`.",N,[[["u32"],["u32"]],["rgbimage"]]],[0,"affine","imageproc","Functions for affine transformations of images.",N,N],[4,"Interpolation","imageproc::affine","How to handle pixels whose pre-image lies between input pixels.",N,N],[13,"Nearest","","Choose the nearest pixel to the pre-image of the output pixel.",1,N],[13,"Bilinear","","Bilinearly interpolate between the four pixels closest to the pre-image of the output pixel.",1,N],[5,"affine","","Applies an affine transformation to an image, or None if the provided transformation is not invertible. The output image has the same dimensions as the input. Output pixels whose pre-image lies outside the input image are set to black.",N,[[["image"],["affine2",["f32"]],["interpolation"]],["option",["image"]]]],[5,"affine_with_default","","Applies an affine transformation to an image, or None if the provided transformation is not invertible. The output image has the same dimensions as the input. Output pixels whose pre-image lies outside the input image are set to default.",N,[[["image"],["affine2",["f32"]],["p"],["interpolation"]],["option",["image"]]]],[5,"rotate","","Rotate an image clockwise about provided center by theta radians. The output image has the same dimensions as the input. Output pixels whose pre-image lies outside the input image are black.",N,N],[5,"rotate_about_center","","Rotate an image clockwise about its center by theta radians. The output image has the same dimensions as the input. Output pixels whose pre-image lies outside the input image are black.",N,[[["image"],["f32"],["interpolation"]],["image"]]],[5,"rotate_with_default","","Rotate an image clockwise about provided center by theta radians. The output image has the same dimensions as the input. Output pixels whose pre-image lies outside the input image are set to default.",N,N],[5,"translate","","Translates the input image by t. Note that image coordinates increase from top left to bottom right. Output pixels whose pre-image are not in the input image are set to the boundary pixel in the input image nearest to their pre-image.",N,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["interpolation"]],["bool"]]],[11,"clone","","",1,[[["self"]],["interpolation"]]],[0,"contrast","imageproc","Functions for manipulating the contrast of images.",N,N],[5,"adaptive_threshold","imageproc::contrast","Applies an adaptive threshold to an image.",N,[[["grayimage"],["u32"]],["grayimage"]]],[5,"otsu_level","","Returns the [Otsu threshold level] of an 8bpp image.",N,[[["grayimage"]],["u8"]]],[5,"threshold","","Returns a binarized image from an input 8bpp grayscale image obtained by applying the given threshold. Pixels with intensity equal to the threshold are assigned to the background.",N,[[["grayimage"],["u8"]],["grayimage"]]],[5,"threshold_mut","","Mutates given image to form a binarized version produced by applying the given threshold. Pixels with intensity equal to the threshold are assigned to the background.",N,[[["grayimage"],["u8"]]]],[5,"equalize_histogram_mut","","Equalises the histogram of an 8bpp grayscale image in place. See also histogram equalization (wikipedia).",N,[[["grayimage"]]]],[5,"equalize_histogram","","Equalises the histogram of an 8bpp grayscale image. See also histogram equalization (wikipedia).",N,[[["grayimage"]],["grayimage"]]],[5,"match_histogram_mut","","Adjusts contrast of an 8bpp grayscale image in place so that its histogram is as close as possible to that of the target image.",N,[[["grayimage"],["grayimage"]]]],[5,"match_histogram","","Adjusts contrast of an 8bpp grayscale image so that its histogram is as close as possible to that of the target image.",N,[[["grayimage"],["grayimage"]],["grayimage"]]],[5,"stretch_contrast","","Linearly stretches the contrast in an image, sending `lower` to `0u8` and `upper` to `2558u8`.",N,[[["grayimage"],["u8"],["u8"]],["grayimage"]]],[5,"stretch_contrast_mut","","Linearly stretches the contrast in an image in place, sending `lower` to `0u8` and `upper` to `2558u8`.",N,[[["grayimage"],["u8"],["u8"]]]],[0,"corners","imageproc","Functions for detecting corners, also known as interest points.",N,N],[3,"Corner","imageproc::corners","A location and score for a detected corner. The scores need not be comparable between different corner detectors.",N,N],[12,"x","","x-coordinate of the corner.",2,N],[12,"y","","y-coordinate of the corner.",2,N],[12,"score","","Score of the detected corner.",2,N],[4,"Fast","","Variants of the FAST corner detector. These classify a point based on its intensity relative to the 16 pixels in the Bresenham circle of radius 3 around it. A point P with intensity I is detected as a corner if all pixels in a sufficiently long contiguous section of this circle either all have intensity greater than I + t or all have intensity less than I - t, for some user-provided threshold t. The score of a corner is the greatest threshold for which the given pixel still qualifies as a corner.",N,N],[13,"Nine","","Corners require a section of length as least nine.",3,N],[13,"Twelve","","Corners require a section of length as least twelve.",3,N],[5,"corners_fast12","","Finds corners using FAST-12 features. See comment on Fast enum.",N,[[["grayimage"],["u8"]],["vec",["corner"]]]],[5,"corners_fast9","","Finds corners using FAST-9 features. See comment on Fast enum.",N,[[["grayimage"],["u8"]],["vec",["corner"]]]],[5,"fast_corner_score","","The score of a corner detected using the FAST detector is the largest threshold for which this pixel is still a corner. We input the threshold at which the corner was detected as a lower bound on the search. Note that the corner check uses a strict inequality, so if the smallest intensity difference between the center pixel and a corner pixel is n then the corner will have a score of n - 1.",N,[[["grayimage"],["u8"],["u32"],["u32"],["fast"]],["u8"]]],[11,"clone","","",2,[[["self"]],["corner"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["corner"]],["bool"]]],[11,"ne","","",2,[[["self"],["corner"]],["bool"]]],[11,"new","","A corner at location (x, y) with score `score`.",2,[[["u32"],["u32"],["f32"]],["corner"]]],[11,"x","","x-coordinate of the corner.",2,[[["self"]],["u32"]]],[11,"y","","y-coordinate of the corner.",2,[[["self"]],["u32"]]],[11,"score","","",2,[[["self"]],["f32"]]],[0,"definitions","imageproc","Trait definitions and type aliases.",N,N],[6,"Image","imageproc::definitions","An `ImageBuffer` containing Pixels of type P with storage `Vec<P::Subpixel>`. Most operations in this library only support inputs of type `Image`, rather than arbitrary `image::GenericImage`s. This is obviously less flexible, but has the advantage of allowing many functions to be more performant. We may want to add more flexibility later, but this should not be at the expense of performance. When specialisation lands we should be able to do this by defining traits for images with contiguous storage.",N,N],[8,"HasBlack","","Pixels which have a named Black value.",N,N],[10,"black","","Returns a black pixel of this type.",4,[[],["self"]]],[8,"HasWhite","","Pixels which have a named White value.",N,N],[10,"white","","Returns a white pixel of this type.",5,[[],["self"]]],[8,"Position","","Something with a 2d position.",N,N],[10,"x","","x-coordinate.",6,[[["self"]],["u32"]]],[10,"y","","y-coordinate.",6,[[["self"]],["u32"]]],[8,"Score","","Something with a score.",N,N],[10,"score","","Score of this item.",7,[[["self"]],["f32"]]],[8,"Clamp","","A type to which we can clamp a value of type T. Implementations are not required to handle `NaN`s gracefully.",N,N],[10,"clamp","","Clamp `x` to a valid value for this type.",8,[[["t"]],["self"]]],[0,"distance_transform","imageproc","Functions for computing distance transforms - the distance of each pixel in an image from the nearest pixel of interest.",N,N],[4,"Norm","imageproc::distance_transform","How to measure distance between coordinates. See the `distance_transform` documentation for examples.",N,N],[13,"L1","","Defines d((x1, y1), (x2, y2)) to be abs(x1 - x2) + abs(y1 - y2). Also known as the Manhattan or city block norm.",9,N],[13,"LInf","","Defines d((x1, y1), (x2, y2)) to be max(abs(x1 - x2), abs(y1 - y2)). Also known as the chessboard norm.",9,N],[5,"distance_transform","","Returns an image showing the distance of each pixel from a foreground pixel in the original image.",N,[[["grayimage"],["norm"]],["grayimage"]]],[5,"distance_transform_mut","","Updates an image in place so that each pixel contains its distance from a foreground pixel in the original image.",N,[[["grayimage"],["norm"]]]],[5,"euclidean_squared_distance_transform","","Computes the square of the `L2` (Euclidean) distance transform of `image`. Distances are to the nearest foreground pixel, where a pixel is counted as foreground if it has non-zero value.",N,[[["image"]],["image",["luma"]]]],[11,"clone","","",9,[[["self"]],["norm"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["norm"]],["bool"]]],[0,"drawing","imageproc","Helpers for drawing basic shapes on images.",N,N],[3,"BresenhamLineIter","imageproc::drawing","Iterates over the coordinates in a line segment using Bresenham's line drawing algorithm.",N,N],[3,"BresenhamLinePixelIter","","Iterates over the image pixels in a line segment using Bresenham's line drawing algorithm.",N,N],[3,"BresenhamLinePixelIterMut","","Iterates over the image pixels in a line segment using Bresenham's line drawing algorithm.",N,N],[3,"Point","","A 2D point.",N,N],[5,"draw_cubic_bezier_curve","","Draws as much of a cubic bezier curve as lies within image bounds.",N,N],[5,"draw_cubic_bezier_curve_mut","","Draws as much of a cubic bezier curve as lies within image bounds.",N,N],[5,"draw_hollow_ellipse","","Draw as much of an ellipse as lies inside the image bounds. Uses Midpoint Ellipse Drawing Algorithm. (Modified from Bresenham's algorithm) (http://tutsheap.com/c/mid-point-ellipse-drawing-algorithm/)",N,N],[5,"draw_hollow_ellipse_mut","","Draw as much of an ellipse as lies inside the image bounds. Uses Midpoint Ellipse Drawing Algorithm. (Modified from Bresenham's algorithm) (http://tutsheap.com/c/mid-point-ellipse-drawing-algorithm/)",N,N],[5,"draw_filled_ellipse","","Draw as much of an ellipse, including its contents, as lies inside the image bounds. Uses Midpoint Ellipse Drawing Algorithm. (Modified from Bresenham's algorithm) (http://tutsheap.com/c/mid-point-ellipse-drawing-algorithm/)",N,N],[5,"draw_filled_ellipse_mut","","Draw as much of an ellipse, including its contents, as lies inside the image bounds. Uses Midpoint Ellipse Drawing Algorithm. (Modified from Bresenham's algorithm) (http://tutsheap.com/c/mid-point-ellipse-drawing-algorithm/)",N,N],[5,"draw_hollow_circle","","Draw as much of a circle as lies inside the image bounds.",N,N],[5,"draw_hollow_circle_mut","","Draw as much of a circle as lies inside the image bounds.",N,N],[5,"draw_filled_circle","","Draw as much of a circle and its contents as lies inside the image bounds.",N,N],[5,"draw_filled_circle_mut","","Draw as much of a circle, including its contents, as lies inside the image bounds.",N,N],[5,"draw_cross","","Draws a colored cross on an image. Handles coordinates outside image bounds.",N,N],[5,"draw_cross_mut","","Draws a colored cross on an image in place. Handles coordinates outside image bounds.",N,N],[5,"draw_line_segment","","Draws as much of the line segment between start and end as lies inside the image bounds. Uses Bresenham's line drawing algorithm.",N,N],[5,"draw_line_segment_mut","","Draws as much of the line segment between start and end as lies inside the image bounds. Uses Bresenham's line drawing algorithm.",N,N],[5,"draw_antialiased_line_segment","","Draws as much of the line segment between start and end as lies inside the image bounds. The parameters of blend are (line color, original color, line weight). Consider using `interpolate` for blend. Uses Xu's line drawing algorithm.",N,N],[5,"draw_antialiased_line_segment_mut","","Draws as much of the line segment between start and end as lies inside the image bounds. The parameters of blend are (line color, original color, line weight). Consider using `interpolate` for blend. Uses Xu's line drawing algorithm.",N,N],[5,"draw_convex_polygon","","Draws as much of a filled convex polygon as lies within image bounds. The provided list of points should be an open path, i.e. the first and last points must not be equal. An implicit edge is added from the last to the first point in the slice.",N,N],[5,"draw_convex_polygon_mut","","Draws as much of a filled convex polygon as lies within image bounds. The provided list of points should be an open path, i.e. the first and last points must not be equal. An implicit edge is added from the last to the first point in the slice.",N,N],[5,"draw_hollow_rect","","Draws as much of the boundary of a rectangle as lies inside the image bounds.",N,N],[5,"draw_hollow_rect_mut","","Draws as much of the boundary of a rectangle as lies inside the image bounds.",N,N],[5,"draw_filled_rect","","Draw as much of a rectangle, including its boundary, as lies inside the image bounds.",N,N],[5,"draw_filled_rect_mut","","Draw as much of a rectangle, including its boundary, as lies inside the image bounds.",N,N],[5,"draw_text","","Draws colored text on an image in place. `scale` is augmented font scaling on both the x and y axis (in pixels). Note that this function does not support newlines, you must do this manually",N,N],[5,"draw_text_mut","","Draws colored text on an image in place. `scale` is augmented font scaling on both the x and y axis (in pixels). Note that this function does not support newlines, you must do this manually",N,N],[11,"new","","Creates a `BresenhamLineIter` which will iterate over the integer coordinates between `start` and `end`.",10,N],[11,"next","","",10,[[["self"]],["option"]]],[11,"new","","Creates a `BresenhamLinePixelIter` which will iterate over the image pixels with coordinates between `start` and `end`.",11,N],[11,"next","","",11,[[["self"]],["option"]]],[11,"new","","Creates a `BresenhamLinePixelIterMut` which will iterate over the image pixels with coordinates between `start` and `end`.",12,N],[11,"next","","",12,[[["self"]],["option"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["point"]]],[11,"eq","","",13,[[["self"],["point"]],["bool"]]],[11,"ne","","",13,[[["self"],["point"]],["bool"]]],[11,"new","","Construct a point at (x, y).",13,[[["t"],["t"]],["point"]]],[0,"edges","imageproc","Functions for detecting edges in images.",N,N],[5,"canny","imageproc::edges","Runs the canny edge detection algorithm.",N,[[["grayimage"],["f32"],["f32"]],["grayimage"]]],[0,"filter","imageproc","Functions for filtering images.",N,N],[3,"Kernel","imageproc::filter","A 2D kernel, used to filter images via convolution.",N,N],[5,"median_filter","","Applies a median filter of given `radius` to an image. Each output pixel is the median of the pixels in a `2 * radius + 1` square of pixels in the input image.",N,[[["image"],["u32"]],["image"]]],[5,"box_filter","","Convolves an 8bpp grayscale image with a kernel of width (2 * `x_radius` + 1) and height (2 * `y_radius` + 1) whose entries are equal and sum to one. i.e. each output pixel is the unweighted mean of a rectangular region surrounding its corresponding input pixel. We handle locations where the kernel would extend past the image's boundary by treating the image as if its boundary pixels were repeated indefinitely.",N,[[["grayimage"],["u32"],["u32"]],["image",["luma"]]]],[5,"gaussian_blur_f32","","Blurs an image using a Gaussian of standard deviation sigma. The kernel used has type f32 and all intermediate calculations are performed at this type.",N,[[["image"],["f32"]],["image"]]],[5,"separable_filter","","Returns 2d correlation of view with the outer product of the 1d kernels `h_kernel` and `v_kernel`.",N,N],[5,"separable_filter_equal","","Returns 2d correlation of an image with the outer product of the 1d kernel filter with itself.",N,N],[5,"filter3x3","","Returns 2d correlation of an image with a 3x3 row-major kernel. Intermediate calculations are performed at type K, and the results clamped to subpixel type S. Pads by continuity.",N,N],[5,"horizontal_filter","","Returns horizontal correlations between an image and a 1d kernel. Pads by continuity. Intermediate calculations are performed at type K.",N,N],[5,"vertical_filter","","Returns horizontal correlations between an image and a 1d kernel. Pads by continuity.",N,N],[11,"new","","Construct a kernel from a slice and its dimensions. The input slice is in row-major form.",14,N],[11,"filter","","Returns 2d correlation of an image. Intermediate calculations are performed at type K, and the results converted to pixel Q via f. Pads by continuity.",14,[[["self"],["image"],["f"]],["image"]]],[0,"gradients","imageproc","Functions for computing gradients of image intensities.",N,N],[5,"horizontal_sobel","imageproc::gradients","Convolves an image with the `HORIZONTAL_SOBEL` kernel to detect horizontal gradients.",N,[[["grayimage"]],["image",["luma"]]]],[5,"vertical_sobel","","Convolves an image with the `VERTICAL_SOBEL` kernel to detect vertical gradients.",N,[[["grayimage"]],["image",["luma"]]]],[5,"horizontal_prewitt","","Convolves an image with the `HORIZONTAL_PREWITT` kernel to detect horizontal gradients.",N,[[["grayimage"]],["image",["luma"]]]],[5,"vertical_prewitt","","Convolves an image with the `VERTICAL_PREWITT` kernel to detect vertical gradients.",N,[[["grayimage"]],["image",["luma"]]]],[5,"sobel_gradients","","Returns the magnitudes of gradients in an image using Sobel filters.",N,[[["grayimage"]],["image",["luma"]]]],[5,"sobel_gradient_map","","Computes per-channel gradients using Sobel filters and calls `f` to compute each output pixel.",N,[[["image"],["f"]],["image"]]],[5,"prewitt_gradients","","Returns the magnitudes of gradients in an image using Prewitt filters.",N,[[["grayimage"]],["image",["luma"]]]],[7,"VERTICAL_SOBEL","","Sobel filter for detecting vertical gradients.",N,N],[7,"HORIZONTAL_SOBEL","","Sobel filter for detecting horizontal gradients.",N,N],[7,"VERTICAL_PREWITT","","Prewitt filter for detecting vertical gradients.",N,N],[7,"HORIZONTAL_PREWITT","","Prewitt filter for detecting horizontal gradients.",N,N],[0,"haar","imageproc","Functions for creating and evaluating [Haar-like features].",N,N],[3,"HaarFeature","imageproc::haar","A [Haar-like feature].",N,N],[4,"HaarFeatureType","","The type of a Haar-like feature determines the number of regions it contains and their orientation. The diagrams in the comments for each variant use the symbols (*, &) to represent either (+, -) or (-, +), depending on which `Sign` the feature type is used with.",N,N],[13,"TwoRegionHorizontal","","Two horizontally-adjacent regions of equal width.       -----------     |  *  |  &  |      ----------- ",15,N],[13,"ThreeRegionHorizontal","","Three horizontally-adjacent regions of equal width.       -----------------     |  *  |  &  |  *  |      ----------------- ",15,N],[13,"TwoRegionVertical","","Two vertically-adjacent regions of equal height.       -----     |  *  |      -----     |  &  |      ----- ",15,N],[13,"ThreeRegionVertical","","Three vertically-adjacent regions of equal height.       -----     |  *  |      -----     |  &  |      -----     |  *  |      ----- ",15,N],[13,"FourRegion","","Four regions arranged in a two-by-two grid. The two columns have equal width and the two rows have equal height.       -----------     |  *  |  &  |       -----------     |  &  |  *  |      ----------- ",15,N],[5,"enumerate_haar_features","","Returns a vector of all valid Haar-like features for an image with given width and height.",N,[[["u8"],["u8"]],["vec",["haarfeature"]]]],[5,"number_of_haar_features","","Returns the number of distinct Haar-like features for an image of the given dimensions.",N,[[["u32"],["u32"]],["u32"]]],[5,"draw_haar_feature","","Draws the given Haar-like feature on an image, drawing pixels with a positive sign white and those with a negative sign black.",N,[[["i"],["haarfeature"]],["image"]]],[5,"draw_haar_feature_mut","","Draws the given Haar-like feature on an image in place, drawing pixels with a positive sign white and those with a negative sign black.",N,[[["i"],["haarfeature"]]]],[11,"clone","","",16,[[["self"]],["haarfeature"]]],[11,"eq","","",16,[[["self"],["haarfeature"]],["bool"]]],[11,"ne","","",16,[[["self"],["haarfeature"]],["bool"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["haarfeaturetype"]]],[11,"hash","","",15,N],[11,"eq","","",15,[[["self"],["haarfeaturetype"]],["bool"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"evaluate","","Evaluates the Haar-like feature on an integral image.",16,[[["self"],["image"]],["i32"]]],[0,"hog","imageproc","HoG features and helpers for visualizing them.",N,N],[3,"HogOptions","imageproc::hog","Parameters for HoG descriptors.",N,N],[12,"orientations","","Number of gradient orientation bins.",17,N],[12,"signed","","Whether gradients in opposite directions are treated as equal.",17,N],[12,"cell_side","","Width and height of cell in pixels.",17,N],[12,"block_side","","Width and height of block in cells.",17,N],[12,"block_stride","","Offset of the start of one block from the next in cells.",17,N],[3,"HogSpec","","HoG options plus values calculated from these options and the desired image dimensions. Validation must occur when instances of this struct are created - functions receiving a spec will assume that it is valid.",N,N],[3,"Array3d","","A 3d array that owns its data.",N,N],[3,"View3d","","A view into a 3d array.",N,N],[5,"hog","","Computes the HoG descriptor of an image, or None if the provided options are incompatible with the image size.",N,[[["grayimage"],["hogoptions"]],["result",["vec","string"]]]],[5,"cell_histograms","","Computes orientation histograms for each cell of an image. Assumes that the provided dimensions are valid.",N,[[["grayimage"],["hogspec"]],["array3d",["f32"]]]],[5,"render_hist_grid","","Visualises an array of orientation histograms. The dimensions of the provided Array3d are orientation bucket, horizontal location of the cell, then vertical location of the cell. Note that we ignore block-level aggregation or normalisation here. Each rendered star has side length `star_side`, so the image will have width grid.lengths[1] * `star_side` and height grid.lengths[2] * `star_side`.",N,[[["u32"],["view3d"],["bool"]],["image",["luma"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["hogoptions"]]],[11,"eq","","",17,[[["self"],["hogoptions"]],["bool"]]],[11,"ne","","",17,[[["self"],["hogoptions"]],["bool"]]],[11,"new","","User-provided options, prior to validation.",17,[[["usize"],["bool"],["usize"],["usize"],["usize"]],["hogoptions"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"clone","","",18,[[["self"]],["hogspec"]]],[11,"eq","","",18,[[["self"],["hogspec"]],["bool"]]],[11,"ne","","",18,[[["self"],["hogspec"]],["bool"]]],[11,"from_options","","Returns an error message if image dimensions aren't compatible with the provided options.",18,[[["u32"],["u32"],["hogoptions"]],["result",["hogspec","string"]]]],[11,"descriptor_length","","The total size in floats of the HoG descriptor with these dimensions.",18,[[["self"]],["usize"]]],[11,"view_mut","","Provides a 3d view of the data.",19,[[["self"]],["view3d"]]],[0,"hough","imageproc","Line detection via the [Hough transform].",N,N],[3,"PolarLine","imageproc::hough","A detected line, in polar coordinates.",N,N],[12,"r","","Distance of the line from the origin (top-left of the image), in pixels.",20,N],[12,"angle_in_degrees","","Clockwise angle in degrees between the x-axis and the line.",20,N],[3,"LineDetectionOptions","","Options for Hough line detection.",N,N],[12,"vote_threshold","","Number of votes required to be detected as a line.",21,N],[12,"suppression_radius","","Non-maxima suppression is applied to accumulator buckets before returning lines. Only lines which have the greatest vote in the block centred on them of side length `2 * suppression_radius + 1` are returned. Set to `0` if you don't want to apply non-maxima suppression.",21,N],[5,"detect_lines","","Detects lines in a binary input image using the Hough transform.",N,[[["grayimage"],["linedetectionoptions"]],["vec",["polarline"]]]],[5,"draw_polar_lines","","Draws each element of `lines` on `image` in the provided `color`.",N,N],[5,"draw_polar_lines_mut","","Draws each element of `lines` on `image` in the provided `color`.",N,N],[11,"clone","","",20,[[["self"]],["polarline"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"eq","","",20,[[["self"],["polarline"]],["bool"]]],[11,"ne","","",20,[[["self"],["polarline"]],["bool"]]],[11,"clone","","",21,[[["self"]],["linedetectionoptions"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"eq","","",21,[[["self"],["linedetectionoptions"]],["bool"]]],[11,"ne","","",21,[[["self"],["linedetectionoptions"]],["bool"]]],[0,"integral_image","imageproc","Functions for computing integral images and running sums of rows and columns.",N,N],[5,"integral_image","imageproc::integral_image","Computes the 2d running sum of an image. Channels are summed independently.",N,[[["image"]],["image",["channelmap"]]]],[5,"integral_squared_image","","Computes the 2d running sum of the squares of the intensities in an image. Channels are summed independently.",N,[[["image"]],["image",["channelmap"]]]],[5,"sum_image_pixels","","Sums the pixels in positions [left, right] * [top, bottom] in F, where `integral_image` is the integral image of F.",N,[[["image"],["u32"],["u32"],["u32"],["u32"]],["u32"]]],[5,"variance","","Computes the variance of [left, right] * [top, bottom] in F, where `integral_image` is the  integral image of F and `integral_squared_image` is the integral image of the squares of the  pixels in F.",N,[[["image"],["image"],["u32"],["u32"],["u32"],["u32"]],["f64"]]],[5,"row_running_sum","","Computes the running sum of one row of image, padded at the beginning and end. The padding is by continuity. Takes a reference to buffer so that this can be reused for all rows in an image.",N,N],[5,"column_running_sum","","Computes the running sum of one column of image, padded at the top and bottom. The padding is by continuity. Takes a reference to buffer so that this can be reused for all columns in an image.",N,N],[0,"local_binary_patterns","imageproc","Functions for computing local binary patterns.",N,N],[5,"local_binary_pattern","imageproc::local_binary_patterns","Computes the basic local binary pattern of a pixel, or None if it's too close to the image boundary.",N,[[["i"],["u32"],["u32"]],["option",["u8"]]]],[5,"min_shift","","Returns the least value of all rotations of a byte.",N,[[["u8"]],["u8"]]],[5,"count_transitions","","Number of bit transitions in a byte, counting the last and final bits as adjacent.",N,[[["u8"]],["u32"]]],[7,"UNIFORM_REPRESENTATIVE_2","","Maps uniform bytes (i.e. those with at most two bit transitions) to their least circular shifts, and non-uniform bytes to 10101010 (an arbitrarily chosen non-uniform representative).",N,N],[7,"MIN_SHIFT","","Lookup table for the least circular shift of a byte.",N,N],[0,"map","imageproc","Functions for mapping over pixels, colors or subpixels of images.",N,N],[5,"map_subpixels","imageproc::map","Applies `f` to each subpixel of the input image.",N,[[["i"],["f"]],["image",["channelmap"]]]],[5,"map_colors","","Applies `f` to the color of each pixel in the input image.",N,[[["i"],["f"]],["image"]]],[5,"map_colors2","","Applies `f` to the colors of the pixels in the input images.",N,[[["i"],["j"],["f"]],["image"]]],[5,"map_pixels","","Applies `f` to each pixel in the input image.",N,[[["i"],["f"]],["image"]]],[5,"red_channel","","Creates a grayscale image by extracting the red channel of an RGB image.",N,[[["i"]],["image",["luma"]]]],[5,"as_red_channel","","Creates an RGB image by embedding a grayscale image in its red channel.",N,[[["i"]],["image",["rgb"]]]],[5,"green_channel","","Creates a grayscale image by extracting the green channel of an RGB image.",N,[[["i"]],["image",["luma"]]]],[5,"as_green_channel","","Creates an RGB image by embedding a grayscale image in its green channel.",N,[[["i"]],["image",["rgb"]]]],[5,"blue_channel","","Creates a grayscale image by extracting the blue channel of an RGB image.",N,[[["i"]],["image",["luma"]]]],[5,"as_blue_channel","","Creates an RGB image by embedding a grayscale image in its blue channel.",N,[[["i"]],["image",["rgb"]]]],[6,"ChannelMap","","Alias to make uses of `WithChannel` less syntactically noisy.",N,N],[8,"WithChannel","","The type obtained by replacing the channel type of a given `Pixel` type. The output type must have the same name of channels as the input type, or several algorithms will produce incorrect results or panic.",N,N],[16,"Pixel","","The new pixel type.",22,N],[0,"math","imageproc","Assorted mathematical helper functions.",N,N],[5,"l2_norm","imageproc::math","L2 norm of a vector.",N,N],[5,"cast","","Helper for a conversion that we know can't fail.",N,[[["t"]],["u"]]],[0,"morphology","imageproc","Functions for computing [morphological operators].",N,N],[5,"dilate","imageproc::morphology","Sets all pixels within distance `k` of a foreground pixel to white.",N,[[["grayimage"],["norm"],["u8"]],["grayimage"]]],[5,"dilate_mut","","Sets all pixels within distance `k` of a foreground pixel to white.",N,[[["grayimage"],["norm"],["u8"]]]],[5,"erode","","Sets all pixels within distance `k` of a background pixel to black.",N,[[["grayimage"],["norm"],["u8"]],["grayimage"]]],[5,"erode_mut","","Sets all pixels within distance `k` of a background pixel to black.",N,[[["grayimage"],["norm"],["u8"]]]],[5,"open","","Erosion followed by dilation.",N,[[["grayimage"],["norm"],["u8"]],["grayimage"]]],[5,"open_mut","","Erosion followed by dilation.",N,[[["grayimage"],["norm"],["u8"]]]],[5,"close","","Dilation followed by erosion.",N,[[["grayimage"],["norm"],["u8"]],["grayimage"]]],[5,"close_mut","","Dilation followed by erosion.",N,[[["grayimage"],["norm"],["u8"]]]],[0,"noise","imageproc","Functions for adding synthetic noise to images.",N,N],[5,"gaussian_noise","imageproc::noise","Adds independent additive Gaussian noise to all channels of an image, with the given mean and standard deviation.",N,[[["i"],["f64"],["f64"],["usize"]],["image"]]],[5,"gaussian_noise_mut","","Adds independent additive Gaussian noise to all channels of an image in place, with the given mean and standard deviation.",N,[[["i"],["f64"],["f64"],["usize"]]]],[5,"salt_and_pepper_noise","","Converts pixels to black or white at the given `rate` (between 0.0 and 1.0). Black and white occur with equal probability.",N,[[["i"],["f64"],["usize"]],["image"]]],[5,"salt_and_pepper_noise_mut","","Converts pixels to black or white in place at the given `rate` (between 0.0 and 1.0). Black and white occur with equal probability.",N,[[["i"],["f64"],["usize"]]]],[0,"pixelops","imageproc","Pixel manipulations.",N,N],[5,"weighted_sum","imageproc::pixelops","Adds pixels with the given weights. Results are clamped to prevent arithmetical overflows.",N,[[["p"],["p"],["f32"],["f32"]],["p"]]],[5,"interpolate","","Equivalent to `weighted_sum(left, right, left_weight, 1 - left_weight)`.",N,[[["p"],["p"],["f32"]],["p"]]],[0,"property_testing","imageproc","Utilities to help with writing property-based tests (e.g. [quickcheck] tests) for image processing functions.",N,N],[3,"TestBuffer","imageproc::property_testing","Wrapper for image buffers to allow us to write an Arbitrary instance.",N,N],[12,"0","","",23,N],[6,"GrayTestImage","","8bpp grayscale `TestBuffer`.",N,N],[6,"RgbTestImage","","24bpp RGB `TestBuffer`.",N,N],[8,"ArbitraryPixel","","Workaround for not being able to define Arbitrary instances for pixel types defines in other modules.",N,N],[10,"arbitrary","","Generate an arbitrary instance of this pixel type.",24,[[["g"]],["self"]]],[11,"clone","","",23,[[["self"]],["testbuffer"]]],[11,"arbitrary","","",23,[[["g"]],["self"]]],[11,"shrink","","",23,[[["self"]],["box",["iterator"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[0,"rect","imageproc","Basic manipulation of rectangles.",N,N],[3,"Rect","imageproc::rect","A rectangular region of non-zero width and height. # Examples ``` use imageproc::rect::Rect; use imageproc::rect::Region;",N,N],[3,"RectPosition","","Position of the top left of a rectangle. Only used when building a `Rect`.",N,N],[8,"Region","","A geometrical representation of a set of 2D points with coordinate type T.",N,N],[10,"contains","","Whether this region contains the given point.",25,[[["self"],["t"],["t"]],["bool"]]],[11,"clone","","",26,[[["self"]],["rect"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"eq","","",26,[[["self"],["rect"]],["bool"]]],[11,"ne","","",26,[[["self"],["rect"]],["bool"]]],[11,"at","","Reduces possibility of confusing coordinates and dimensions when specifying rects.",26,[[["i32"],["i32"]],["rectposition"]]],[11,"top","","Smallest y-coordinate reached by rect.",26,[[["self"]],["i32"]]],[11,"left","","Smallest x-coordinate reached by rect.",26,[[["self"]],["i32"]]],[11,"bottom","","Greatest y-coordinate reached by rect.",26,[[["self"]],["i32"]]],[11,"right","","Greatest x-coordinate reached by rect.",26,[[["self"]],["i32"]]],[11,"width","","Width of rect.",26,[[["self"]],["u32"]]],[11,"height","","Height of rect.",26,[[["self"]],["u32"]]],[11,"intersect","","Returns the intersection of self and other, or none if they are are disjoint.",26,[[["self"],["rect"]],["option",["rect"]]]],[11,"contains","","",26,[[["self"],["i32"],["i32"]],["bool"]]],[11,"contains","","",26,[[["self"],["f32"],["f32"]],["bool"]]],[11,"clone","","",27,[[["self"]],["rectposition"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"eq","","",27,[[["self"],["rectposition"]],["bool"]]],[11,"ne","","",27,[[["self"],["rectposition"]],["bool"]]],[11,"of_size","","Construct a rectangle from a position and size. Width and height are required to be strictly positive.",27,[[["self"],["u32"],["u32"]],["rect"]]],[0,"region_labelling","imageproc","Functions for finding and labelling connected components of an image.",N,N],[4,"Connectivity","imageproc::region_labelling","Determines which neighbors of a pixel we consider to be connected to it.",N,N],[13,"Four","","A pixel is connected to its N, S, E and W neighbors.",28,N],[13,"Eight","","A pixel is connected to all of its neighbors.",28,N],[5,"connected_components","","Returns an image of the same size as the input, where each pixel is labelled by the connected foreground component it belongs to, or 0 if it's in the background. Input pixels are treated as belonging to the background if and only if they are equal to the provided background pixel.",N,N],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"eq","","",28,[[["self"],["connectivity"]],["bool"]]],[11,"clone","","",28,[[["self"]],["connectivity"]]],[0,"seam_carving","imageproc","An implementation of [seam carving]. Currently in a pretty rough state. See examples/seam_carving.rs for an example.",N,N],[3,"VerticalSeam","imageproc::seam_carving","An image seam connecting the bottom of an image to its top (in that order).",N,N],[5,"shrink_width","","Reduces the width of an image using seam carving.",N,[[["image"],["u32"]],["image"]]],[5,"find_vertical_seam","","Computes an 8-connected path from the bottom of the image to the top whose sum of gradient magnitudes is minimal.",N,[[["image"]],["verticalseam"]]],[5,"remove_vertical_seam","","Returns the result of removing `seam` from `image`.",N,[[["image"],["verticalseam"]],["image"]]],[5,"draw_vertical_seams","","Draws a series of `seams` on `image` in red. Assumes that the provided seams were removed in the given order from the input image.",N,N],[0,"stats","imageproc","Statistical properties of images.",N,N],[5,"histogram","imageproc::stats","Returns the histogram of grayscale values in an 8bpp grayscale image.",N,N],[5,"cumulative_histogram","","Returns the cumulative histogram of grayscale values in an 8bpp grayscale image.",N,N],[5,"percentile","","Returns the `p`th percentile of the pixel intensities in an image.",N,[[["grayimage"],["u8"]],["u8"]]],[5,"root_mean_squared_error","","Returns the square root of the mean of the squares of differences between all subpixels in left and right. All channels are considered equally. If you do not want this (e.g. if using RGBA) then change image formats first.",N,[[["i"],["j"]],["f64"]]],[5,"peak_signal_to_noise_ratio","","Returns the peak signal to noise ratio for a clean image and its noisy aproximation. All channels are considered equally. If you do not want this (e.g. if using RGBA) then change image formats first. See also peak signal-to-noise ratio (wikipedia).",N,[[["i"],["j"]],["f64"]]],[0,"suppress","imageproc","Functions for suppressing non-maximal values.",N,N],[5,"suppress_non_maximum","imageproc::suppress","Returned image has zeroes for all inputs pixels which do not have the greatest intensity in the (2 * radius + 1) square block centred on them. Ties are resolved lexicographically.",N,[[["i"],["u32"]],["imagebuffer",["luma","vec"]]]],[5,"local_maxima","","Returns all items which have the highest score in the (2 * radius + 1) square block centred on them. Ties are resolved lexicographically.",N,N],[0,"template_matching","imageproc","Functions for performing template matching.",N,N],[3,"Extremes","imageproc::template_matching","The largest and smallest values in an image, together with their locations.",N,N],[12,"max_value","","The largest value in an image.",29,N],[12,"min_value","","The smallest value in an image.",29,N],[12,"max_value_location","","The coordinates of the largest value in an image.",29,N],[12,"min_value_location","","The coordinates of the smallest value in an image.",29,N],[4,"MatchTemplateMethod","","Method used to compute the matching score between a template and an image region.",N,N],[13,"SumOfSquaredErrors","","Sum of the squares of the difference between image and template pixel intensities.",30,N],[13,"SumOfSquaredErrorsNormalized","","Divides the sum computed using `SumOfSquaredErrors` by a normalization term.",30,N],[5,"match_template","","Slides a `template` over an `image` and scores the match at each point using the requested `method`.",N,[[["grayimage"],["grayimage"],["matchtemplatemethod"]],["image",["luma"]]]],[5,"find_extremes","","Finds the largest and smallest values in an image and their locations. If there are multiple such values then the lexicographically smallest is returned.",N,[[["image"]],["extremes"]]],[11,"clone","","",30,[[["self"]],["matchtemplatemethod"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"eq","","",30,[[["self"],["matchtemplatemethod"]],["bool"]]],[11,"clone","","",29,[[["self"]],["extremes"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"eq","","",29,[[["self"],["extremes"]],["bool"]]],[11,"ne","","",29,[[["self"],["extremes"]],["bool"]]],[0,"union_find","imageproc","An implementation of disjoint set forests for union find.",N,N],[3,"DisjointSetForest","imageproc::union_find","Data structure for efficient union find.",N,N],[11,"new","","Constructs forest of singletons with count elements.",31,[[["usize"]],["disjointsetforest"]]],[11,"num_trees","","Returns the number of trees in the forest.",31,[[["self"]],["usize"]]],[11,"root","","Returns index of the root of the tree containing i. Needs mutable reference to self for path compression.",31,[[["self"],["usize"]],["usize"]]],[11,"find","","Returns true if i and j are in the same tree. Need mutable reference to self for path compression.",31,[[["self"],["usize"],["usize"]],["bool"]]],[11,"union","","Unions the trees containing i and j.",31,[[["self"],["usize"],["usize"]]]],[11,"trees","","Returns the elements of each tree.",31,[[["self"]],["vec",["vec"]]]],[14,"gray_image","imageproc","Helper for defining greyscale images.",N,N],[14,"rgb_image","","Helper for defining RGB images.",N,N],[14,"assert_pixels_eq","","Panics if any pixels differ between the two input images.",N,N],[14,"assert_pixels_eq_within","","Panics if any pixels differ between the two images by more than the given tolerance in a single channel.",N,N],[14,"assert_dimensions_match","","Panics if image dimensions do not match.",N,N]],"paths":[[3,"Diff"],[4,"Interpolation"],[3,"Corner"],[4,"Fast"],[8,"HasBlack"],[8,"HasWhite"],[8,"Position"],[8,"Score"],[8,"Clamp"],[4,"Norm"],[3,"BresenhamLineIter"],[3,"BresenhamLinePixelIter"],[3,"BresenhamLinePixelIterMut"],[3,"Point"],[3,"Kernel"],[4,"HaarFeatureType"],[3,"HaarFeature"],[3,"HogOptions"],[3,"HogSpec"],[3,"Array3d"],[3,"PolarLine"],[3,"LineDetectionOptions"],[8,"WithChannel"],[3,"TestBuffer"],[8,"ArbitraryPixel"],[8,"Region"],[3,"Rect"],[3,"RectPosition"],[4,"Connectivity"],[3,"Extremes"],[4,"MatchTemplateMethod"],[3,"DisjointSetForest"]]};
searchIndex["inflate"]={"doc":"A DEFLATE decoder written in rust.","items":[[3,"InflateWriter","inflate","A DEFLATE decoder.",N,N],[3,"DeflateDecoder","","A DEFLATE decoder/decompressor.",N,N],[3,"DeflateDecoderBuf","","A DEFLATE decoder/decompressor.",N,N],[3,"InflateStream","","",N,N],[5,"inflate_bytes","","Decompress the given slice of DEFLATE compressed data.",N,N],[5,"inflate_bytes_zlib","","Decompress the given slice of DEFLATE compressed (with zlib headers and trailers) data.",N,N],[5,"inflate_bytes_zlib_no_checksum","","Decompress the given slice of DEFLATE compressed (with zlib headers and trailers) data, without calculating and validating the checksum.",N,N],[11,"new","","",0,[[["w"]],["inflatewriter"]]],[11,"from_zlib","","",0,[[["w"]],["inflatewriter"]]],[11,"finish","","",0,[[["self"]],["result"]]],[11,"write","","",0,N],[11,"flush","","",0,[[["self"]],["result"]]],[11,"new","","Create a new `Deflatedecoderbuf` to read from a raw deflate stream.",1,[[["r"]],["deflatedecoderbuf"]]],[11,"from_zlib","","Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream.",1,[[["r"]],["deflatedecoderbuf"]]],[11,"from_zlib_no_checksum","","Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream. without calculating and validating the checksum.",1,[[["r"]],["deflatedecoderbuf"]]],[11,"reset","","Resets the decompressor, and replaces the current inner `BufRead` instance by `r`. without doing any extra reallocations.",1,[[["self"],["r"]],["r"]]],[11,"reset_data","","Resets the decoder, but continue to read from the same reader.",1,[[["self"]]]],[11,"get_ref","","Returns a reference to the underlying `BufRead` instance.",1,[[["self"]],["r"]]],[11,"get_mut","","Returns a mutable reference to the underlying `BufRead` instance.",1,[[["self"]],["r"]]],[11,"into_inner","","Drops the decoder and return the inner `BufRead` instance.",1,[[["self"]],["r"]]],[11,"total_in","","Returns the total bytes read from the underlying `BufRead` instance.",1,[[["self"]],["u64"]]],[11,"total_out","","Returns the total number of bytes output from this decoder.",1,[[["self"]],["u64"]]],[11,"current_checksum","","Returns the calculated checksum value of the currently decoded data.",1,[[["self"]],["u32"]]],[11,"read","","",1,N],[11,"new","","Create a new `Deflatedecoderbuf` to read from a raw deflate stream.",2,[[["r"]],["deflatedecoder"]]],[11,"from_zlib","","Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream.",2,[[["r"]],["deflatedecoder"]]],[11,"from_zlib_no_checksum","","Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream. without calculating and validating the checksum.",2,[[["r"]],["deflatedecoder"]]],[11,"reset","","Resets the decompressor, and replaces the current inner `BufRead` instance by `r`. without doing any extra reallocations.",2,[[["self"],["r"]],["r"]]],[11,"get_ref","","Returns a reference to the underlying reader.",2,[[["self"]],["r"]]],[11,"get_mut","","Returns a mutable reference to the underlying reader.",2,[[["self"]],["r"]]],[11,"into_inner","","Returns the total number of bytes output from this decoder.",2,[[["self"]],["r"]]],[11,"reset_data","","Resets the decoder, but continue to read from the same reader.",2,[[["self"]]]],[11,"total_in","","Returns the total bytes read from the underlying reader.",2,[[["self"]],["u64"]]],[11,"total_out","","Returns the total number of bytes output from this decoder.",2,[[["self"]],["u64"]]],[11,"current_checksum","","Returns the calculated checksum value of the currently decoded data.",2,[[["self"]],["u32"]]],[11,"read","","",2,N],[11,"new","","Create a new stream for decoding raw deflate encoded data.",3,[[],["inflatestream"]]],[11,"from_zlib","","Create a new stream for decoding deflate encoded data with a zlib header and footer",3,[[],["inflatestream"]]],[11,"from_zlib_no_checksum","","Create a new stream for decoding deflate encoded data with a zlib header and footer",3,[[],["inflatestream"]]],[11,"reset","","",3,[[["self"]]]],[11,"reset_to_zlib","","",3,[[["self"]]]],[11,"update","","Try to uncompress/decode the data in `data`.",3,N],[11,"current_checksum","","Returns the calculated checksum value of the currently decoded data.",3,[[["self"]],["u32"]]]],"paths":[[3,"InflateWriter"],[3,"DeflateDecoderBuf"],[3,"DeflateDecoder"],[3,"InflateStream"]]};
searchIndex["itertools"]={"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[4,"Either","itertools","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",N,N],[13,"Left","","A value of type `L`.",0,N],[13,"Right","","A value of type `R`.",0,N],[4,"Diff","","A type returned by the `diff_with` function.",N,N],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator's remaining elements starting with the first mis-match.",1,N],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",1,N],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",1,N],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for more detail.",N,N],[13,"NoElements","","Empty iterator",2,N],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",2,N],[13,"MinMax","","More than one element in the iterator, the first element is not larger than the second",2,N],[4,"Position","","A value yielded by `WithPosition`. Indicates the position of this element in the iterator results.",N,N],[13,"First","","This is the first element.",3,N],[13,"Middle","","This is neither the first nor the last element.",3,N],[13,"Last","","This is the last element.",3,N],[13,"Only","","This is the only element.",3,N],[4,"EitherOrBoth","","Value that either holds a single A or B, or both.",N,N],[13,"Both","","Both values are present.",4,N],[13,"Left","","Only the left value of type `A` is present.",4,N],[13,"Right","","Only the right value of type `B` is present.",4,N],[4,"FoldWhile","","An enum used for controlling the execution of `.fold_while()`.",N,N],[13,"Continue","","Continue folding with this value",5,N],[13,"Done","","Fold is complete and will return this value",5,N],[5,"flatten","","Flatten an iterable of iterables into a single combined sequence of all the elements in the iterables.",N,[[["i"]],["flatten"]]],[5,"concat","","Combine all an iterator's elements into one element by using `Extend`.",N,N],[5,"cons_tuples","","Create an iterator that maps for example iterators of `((A, B), C)` to `(A, B, C)`.",N,[[["i"]],["constuples"]]],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and returns a `Diff` which describes how `j` differs from `i`.",N,[[["i"],["j"],["f"]],["option",["diff"]]]],[5,"kmerge_by","","Create an iterator that merges elements of the contained iterators.",N,[[["i"],["f"]],["kmergeby"]]],[5,"process_results","","“Lift” a function of the values of an iterator so that it can process an iterator of `Result` values instead.",N,[[["i"],["f"]],["result"]]],[5,"repeat_n","","Create an iterator that produces `n` repetitions of `element`.",N,[[["a"],["usize"]],["repeatn"]]],[5,"repeat_call","","An iterator source that produces elements indefinitely by calling a given closure.",N,[[["f"]],["repeatcall"]]],[5,"unfold","","Creates a new unfold source with the specified closure as the \"iterator function\" and an initial state to eventually pass to the closure",N,[[["st"],["f"]],["unfold"]]],[5,"iterate","","Creates a new iterator that infinitely applies function to value and yields results.",N,[[["st"],["f"]],["iterate"]]],[5,"multizip","","An iterator that generalizes .zip() and allows running multiple iterators in lockstep.",N,[[["u"]],["zip"]]],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",N,[[["i"],["j"]],["interleave"]]],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",N,[[["i"],["j"]],["merge"]]],[5,"put_back","","Create an iterator where you can put back a single item",N,[[["i"]],["putback"]]],[5,"put_back_n","","Create an iterator where you can put back multiple values to the front of the iteration.",N,[[["i"]],["putbackn"]]],[5,"multipeek","","An iterator adaptor that allows the user to peek at multiple `.next()` values without advancing the base iterator.",N,[[["i"]],["multipeek"]]],[5,"kmerge","","Create an iterator that merges elements of the contained iterators using the ordering function.",N,[[["i"]],["kmerge"]]],[5,"zip_eq","","Iterate `i` and `j` in lock step.",N,[[["i"],["j"]],["zipeq"]]],[5,"merge_join_by","","Return an iterator adaptor that merge-joins items from the two base iterators in ascending order.",N,[[["i"],["j"],["f"]],["mergejoinby"]]],[5,"rciter","","Return an iterator inside a `Rc<RefCell<_>>` wrapper.",N,[[["i"]],["rciter"]]],[5,"enumerate","","Iterate `iterable` with a running index.",N,[[["i"]],["enumerate"]]],[5,"rev","","Iterate `iterable` in reverse.",N,[[["i"]],["rev"]]],[5,"zip","","Iterate `i` and `j` in lock step.",N,[[["i"],["j"]],["zip"]]],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",N,[[["i"],["j"]],["chain"]]],[5,"cloned","","Create an iterator that clones each element from &T to T",N,[[["i"]],["cloned"]]],[5,"fold","","Perform a fold operation over the iterable.",N,[[["i"],["b"],["f"]],["b"]]],[5,"all","","Test whether the predicate holds for all elements in the iterable.",N,[[["i"],["f"]],["bool"]]],[5,"any","","Test whether the predicate holds for any elements in the iterable.",N,[[["i"],["f"]],["bool"]]],[5,"max","","Return the maximum value of the iterable.",N,[[["i"]],["option"]]],[5,"min","","Return the minimum value of the iterable.",N,[[["i"]],["option"]]],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",N,[[["i"],["str"]],["string"]]],[5,"sorted","","Collect all the iterable's elements into a sorted vector in ascending order.",N,[[["i"]],["vec"]]],[5,"equal","","Return `true` if both iterables produce equal sequences (elements pairwise equal and sequences of the same length), `false` otherwise.",N,[[["i"],["j"]],["bool"]]],[5,"assert_equal","","Assert that two iterables produce equal sequences, with the same semantics as equal(a, b).",N,[[["i"],["j"]]]],[5,"partition","","Partition a sequence using predicate `pred` so that elements that map to `true` are placed before elements which map to `false`.",N,[[["i"],["f"]],["usize"]]],[0,"structs","","The concrete iterator types.",N,N],[3,"Dedup","itertools::structs","An iterator adaptor that removes repeated duplicates.",N,N],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both run out.",N,N],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until one of them runs out.",N,N],[3,"Product","","An iterator adaptor that iterates over the cartesian product of the element sets of two iterators `I` and `J`.",N,N],[3,"PutBack","","An iterator adaptor that allows putting back a single item to the front of the iterator.",N,N],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",N,N],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator for each iteration.",N,N],[3,"MapResults","","An iterator adapter to apply a transformation within a nested `Result`.",N,N],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",N,N],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",N,N],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate returns `true`.",N,N],[3,"WhileSome","","An iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",N,N],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",N,N],[3,"TupleCombinations","","An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples of a specific size.",N,N],[3,"Flatten","","An iterator adapter to simply flatten a structure.",N,N],[3,"Positions","","An iterator adapter to get the positions of each element that matches a predicate.",N,N],[3,"Update","","An iterator adapter to apply a mutating function to each element before yielding it.",N,N],[3,"MultiProduct","","An iterator adaptor that iterates over the cartesian product of multiple iterators of type `I`.",N,N],[3,"Combinations","","An iterator to iterate through all the `n`-length combinations in an iterator.",N,N],[3,"ConsTuples","","An iterator that maps an iterator of tuples like `((A, B), C)` to an iterator of `(A, B, C)`.",N,N],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",N,N],[3,"FormatWith","","Format all iterator elements lazily, separated by `sep`.",N,N],[3,"IntoChunks","","`ChunkLazy` is the storage for a lazy chunking operation.",N,N],[3,"Chunk","","An iterator for the elements in a single chunk.",N,N],[3,"Chunks","","An iterator that yields the Chunk iterators.",N,N],[3,"GroupBy","","`GroupBy` is the storage for the lazy grouping operation.",N,N],[3,"Group","","An iterator for the elements in a single group.",N,N],[3,"Groups","","An iterator that yields the Group iterators.",N,N],[3,"Intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",N,N],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base iterators in ascending order. If all base iterators are sorted (ascending), the result is sorted.",N,N],[3,"KMergeBy","","An iterator adaptor that merges an abitrary number of base iterators according to an ordering function.",N,N],[3,"MergeJoinBy","","An iterator adaptor that merge-joins items from the two base iterators in ascending order.",N,N],[3,"MultiPeek","","See `multipeek()` for more information.",N,N],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling missing elements using a closure.",N,N],[3,"PeekingTakeWhile","","An iterator adaptor that takes items while a closure returns `true`.",N,N],[3,"ProcessResults","","An iterator that produces only the `T` values as long as the inner iterator produces `Ok(T)`.",N,N],[3,"PutBackN","","An iterator adaptor that allows putting multiple items in front of the iterator.",N,N],[3,"RcIter","","A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.",N,N],[12,"rciter","","The boxed iterator.",6,N],[3,"RepeatN","","An iterator that produces n repetitions of an element.",N,N],[3,"RepeatCall","","See `repeat_call` for more information.",N,N],[3,"Unfold","","See `unfold` for more information.",N,N],[12,"state","","Internal state that will be passed to the closure on the next iteration",7,N],[3,"Iterate","","An iterator that infinitely applies function to value and yields results.",N,N],[3,"Tee","","One half of an iterator pair where both return the same elements.",N,N],[3,"TupleBuffer","","An iterator over a incomplete tuple.",N,N],[3,"TupleWindows","","An iterator over all contiguous windows that produces tuples of a specific size.",N,N],[3,"Tuples","","An iterator that groups the items in tuples of a specific size.",N,N],[3,"Unique","","An iterator adapter to filter out duplicate elements.",N,N],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",N,N],[3,"WithPosition","","An iterator adaptor that wraps each element in an `Position`.",N,N],[3,"ZipEq","","An iterator which iterates two other iterators simultaneously",N,N],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",N,N],[3,"Zip","","See `multizip` for more information.",N,N],[11,"clone","","",8,[[["self"]],["multiproduct"]]],[11,"next","","",8,[[["self"]],["option"]]],[11,"count","","",8,[[["self"]],["usize"]]],[11,"size_hint","","",8,N],[11,"last","","",8,[[["self"]],["option"]]],[11,"clone","","",9,[[["self"]],["interleave"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"next","","",9,[[["self"]],["option"]]],[11,"size_hint","","",9,N],[11,"clone","","",10,[[["self"]],["interleaveshortest"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"next","","",10,[[["self"]],["option"]]],[11,"size_hint","","",10,N],[11,"clone","","",11,[[["self"]],["putback"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"with_value","","put back value `value` (builder method)",11,N],[11,"into_parts","","Split the `PutBack` into its parts.",11,N],[11,"put_back","","Put back a single value to the front of the iterator.",11,N],[11,"next","","",11,[[["self"]],["option"]]],[11,"size_hint","","",11,N],[11,"all","","",11,[[["self"],["g"]],["bool"]]],[11,"fold","","",11,[[["self"],["acc"],["g"]],["acc"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["product"]]],[11,"next","","",12,[[["self"]],["option"]]],[11,"size_hint","","",12,N],[11,"fold","","",12,[[["self"],["acc"],["g"]],["acc"]]],[11,"clone","","",13,[[["self"]],["batching"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"size_hint","","",13,N],[11,"clone","","",14,[[["self"]],["step"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"next","","",14,[[["self"]],["option"]]],[11,"size_hint","","",14,N],[11,"clone","","",15,[[["self"]],["self"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"next","","",15,[[["self"]],["option"]]],[11,"size_hint","","",15,N],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["self"]]],[11,"next","","",16,[[["self"]],["option"]]],[11,"size_hint","","",16,N],[11,"clone","","",17,[[["self"]],["self"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"next","","",17,[[["self"]],["option"]]],[11,"size_hint","","",17,N],[11,"clone","","",18,[[["self"]],["self"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"next","","",18,[[["self"]],["option"]]],[11,"size_hint","","",18,N],[11,"fold","","",18,[[["self"],["acc"],["g"]],["acc"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"next","","",19,[[["self"]],["option"]]],[11,"size_hint","","",19,N],[11,"clone","","",20,[[["self"]],["whilesome"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"next","","",20,[[["self"]],["option"]]],[11,"size_hint","","",20,N],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"next","","",21,[[["self"]],["option"]]],[11,"clone","","",22,[[["self"]],["flatten"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"next","","",22,[[["self"]],["option"]]],[11,"fold","","",22,[[["self"],["acc"],["g"]],["acc"]]],[11,"next","","",23,[[["self"]],["option"]]],[11,"size_hint","","",23,N],[11,"fold","","",23,[[["self"],["acc"],["fold"]],["acc"]]],[11,"collect","","",23,[[["self"]],["c"]]],[11,"next","","",24,[[["self"]],["option"]]],[11,"size_hint","","",24,N],[11,"next_back","","",24,[[["self"]],["option"]]],[11,"next","","",25,[[["self"]],["option"]]],[11,"size_hint","","",25,N],[11,"fold","","",25,[[["self"],["acc"],["g"]],["acc"]]],[11,"collect","","",25,[[["self"]],["c"]]],[11,"next_back","","",25,[[["self"]],["option"]]],[11,"clone","itertools","",4,[[["self"]],["eitherorboth"]]],[11,"eq","","",4,[[["self"],["eitherorboth"]],["bool"]]],[11,"ne","","",4,[[["self"],["eitherorboth"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"next","itertools::structs","",26,[[["self"]],["option"]]],[11,"size_hint","","",26,N],[11,"fold","","",26,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",26,[[["self"]],["option"]]],[11,"next","","",26,[[["self"]],["option"]]],[11,"size_hint","","",26,N],[11,"fold","","",26,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",26,[[["self"]],["option"]]],[11,"next","","",26,[[["self"]],["option"]]],[11,"size_hint","","",26,N],[11,"fold","","",26,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",26,[[["self"]],["option"]]],[11,"next","","",26,[[["self"]],["option"]]],[11,"size_hint","","",26,N],[11,"fold","","",26,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",26,[[["self"]],["option"]]],[11,"next","","",26,[[["self"]],["option"]]],[11,"size_hint","","",26,N],[11,"fold","","",26,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",26,[[["self"]],["option"]]],[11,"next","","",26,[[["self"]],["option"]]],[11,"size_hint","","",26,N],[11,"fold","","",26,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",26,[[["self"]],["option"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"clone","","",26,[[["self"]],["self"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"next","","",27,[[["self"]],["option"]]],[11,"clone","","",28,[[["self"]],["format"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"next","","",30,[[["self"]],["option"]]],[11,"drop","","",31,[[["self"]]]],[11,"next","","",31,[[["self"]],["option"]]],[11,"next","","",32,[[["self"]],["option"]]],[11,"drop","","",33,[[["self"]]]],[11,"next","","",33,[[["self"]],["option"]]],[11,"clone","","",34,[[["self"]],["intersperse"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"next","","",34,[[["self"]],["option"]]],[11,"size_hint","","",34,N],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"clone","","",35,[[["self"]],["kmerge"]]],[11,"next","","",35,[[["self"]],["option"]]],[11,"size_hint","","",35,N],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"next","","",36,[[["self"]],["option"]]],[11,"size_hint","","",36,N],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"next","","",37,[[["self"]],["option"]]],[11,"size_hint","","",37,N],[11,"clone","itertools","",2,[[["self"]],["minmaxresult"]]],[11,"eq","","",2,[[["self"],["minmaxresult"]],["bool"]]],[11,"ne","","",2,[[["self"],["minmaxresult"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The returned `Option` has variant `None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`. If the `MinMaxResult` has variant `OneElement(x)`, performing this operation will make one clone of `x`.",2,[[["self"]],["option"]]],[11,"clone","itertools::structs","",38,[[["self"]],["multipeek"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"reset_peek","","Reset the peeking “cursor”",38,[[["self"]]]],[11,"peek","","Works exactly like `.next()` with the only difference that it doesn't advance itself. `.peek()` can be called multiple times, to peek further ahead.",38,[[["self"]],["option"]]],[11,"peeking_next","","",38,[[["self"],["f"]],["option"]]],[11,"next","","",38,[[["self"]],["option"]]],[11,"size_hint","","",38,N],[11,"clone","","",39,[[["self"]],["padusing"]]],[11,"next","","",39,[[["self"]],["option"]]],[11,"size_hint","","",39,N],[11,"next_back","","",39,[[["self"]],["option"]]],[11,"peeking_next","","",11,[[["self"],["f"]],["option"]]],[11,"peeking_next","","",40,[[["self"],["f"]],["option"]]],[11,"next","","",41,[[["self"]],["option"]]],[11,"size_hint","","",41,N],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"next","","",42,[[["self"]],["option"]]],[11,"size_hint","","",42,N],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"clone","","",40,[[["self"]],["putbackn"]]],[11,"put_back","","Puts x in front of the iterator. The values are yielded in order of the most recently put back values first.",40,N],[11,"next","","",40,[[["self"]],["option"]]],[11,"size_hint","","",40,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["rciter"]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"next_back","","",6,[[["self"]],["option"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"next","","",43,[[["self"]],["option"]]],[11,"size_hint","","",43,N],[11,"next_back","","",43,[[["self"]],["option"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"next","","",44,[[["self"]],["option"]]],[11,"size_hint","","",44,N],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["unfold"]]],[11,"next","","",7,[[["self"]],["option"]]],[11,"size_hint","","",7,N],[11,"clone","","",45,[[["self"]],["iterate"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"next","","",45,[[["self"]],["option"]]],[11,"size_hint","","",45,N],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"next","","",46,[[["self"]],["option"]]],[11,"size_hint","","",46,N],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"next","","",47,[[["self"]],["option"]]],[11,"size_hint","","",47,N],[11,"next","","",48,[[["self"]],["option"]]],[11,"into_buffer","","Return a buffer with the produced items that was not enough to be grouped in a tuple.",48,[[["self"]],["tuplebuffer"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"next","","",49,[[["self"]],["option"]]],[11,"clone","","",50,[[["self"]],["uniqueby"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"next","","",50,[[["self"]],["option"]]],[11,"size_hint","","",50,N],[11,"count","","",50,[[["self"]],["usize"]]],[11,"next","","",51,[[["self"]],["option"]]],[11,"size_hint","","",51,N],[11,"count","","",51,[[["self"]],["usize"]]],[11,"clone","","",51,[[["self"]],["unique"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"clone","itertools","",3,[[["self"]],["position"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["position"]],["bool"]]],[11,"ne","","",3,[[["self"],["position"]],["bool"]]],[11,"into_inner","","Return the inner value.",3,[[["self"]],["t"]]],[11,"next","itertools::structs","",52,[[["self"]],["option"]]],[11,"size_hint","","",52,N],[11,"clone","","",53,[[["self"]],["zipeq"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"next","","",53,[[["self"]],["option"]]],[11,"size_hint","","",53,N],[11,"clone","","",54,[[["self"]],["ziplongest"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"next","","",54,[[["self"]],["option"]]],[11,"size_hint","","",54,N],[11,"next_back","","",54,[[["self"]],["option"]]],[11,"clone","","",55,[[["self"]],["zip"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"from","","",55,N],[11,"next","","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,N],[11,"from","","",55,N],[11,"next","","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,N],[11,"from","","",55,N],[11,"next","","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,N],[11,"from","","",55,N],[11,"next","","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,N],[11,"from","","",55,N],[11,"next","","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,N],[11,"from","","",55,N],[11,"next","","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,N],[11,"from","","",55,N],[11,"next","","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,N],[11,"from","","",55,N],[11,"next","","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,N],[8,"PeekingNext","itertools","An iterator that allows peeking at an element before deciding to accept it.",N,N],[10,"peeking_next","","Pass a reference to the next iterator element to the closure `accept`; if `accept` returns true, return it as the next element, else None.",56,[[["self"],["f"]],["option"]]],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",N,N],[11,"interleave","","Alternate elements from two iterators until both have run out.",57,[[["self"],["j"]],["interleave"]]],[11,"interleave_shortest","","Alternate elements from two iterators until at least one of them has run out.",57,[[["self"],["j"]],["interleaveshortest"]]],[11,"intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",57,N],[11,"zip_longest","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of two optional elements.",57,[[["self"],["j"]],["ziplongest"]]],[11,"zip_eq","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of elements.",57,[[["self"],["j"]],["zipeq"]]],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",57,[[["self"],["f"]],["batching"]]],[11,"group_by","","Return an iterable that can group iterator elements. Consecutive elements that map to the same key (“runs”), are assigned to the same group.",57,[[["self"],["f"]],["groupby"]]],[11,"chunks","","Return an iterable that can chunk the iterator.",57,[[["self"],["usize"]],["intochunks"]]],[11,"tuple_windows","","Return an iterator over all contiguous windows producing tuples of a specific size (up to 4).",57,[[["self"]],["tuplewindows"]]],[11,"tuples","","Return an iterator that groups the items in tuples of a specific size (up to 4).",57,[[["self"]],["tuples"]]],[11,"tee","","Split into an iterator pair that both yield all elements from the original iterator.",57,N],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator for each iteration.",57,[[["self"],["usize"]],["step"]]],[11,"map_results","","Return an iterator adaptor that applies the provided closure to every `Result::Ok` value. `Result::Err` values are unchanged.",57,[[["self"],["f"]],["mapresults"]]],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.  If both base iterators are sorted (ascending), the result is sorted.",57,[[["self"],["j"]],["merge"]]],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order. This is much like `.merge()` but allows for a custom ordering.",57,[[["self"],["j"],["f"]],["mergeby"]]],[11,"merge_join_by","","Create an iterator that merges items from both this and the specified iterator in ascending order.",57,[[["self"],["j"],["f"]],["mergejoinby"]]],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by merging them in ascending order.",57,[[["self"]],["kmerge"]]],[11,"kmerge_by","","Return an iterator adaptor that flattens an iterator of iterators by merging them according to the given closure.",57,[[["self"],["f"]],["kmergeby"]]],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of the element sets of two iterators `self` and `J`.",57,[[["self"],["j"]],["product"]]],[11,"multi_cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of all subiterators returned by meta-iterator `self`.",57,[[["self"]],["multiproduct"]]],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to optionally merge together consecutive elements.",57,[[["self"],["f"]],["coalesce"]]],[11,"dedup","","Remove duplicates from sections of consecutive identical elements. If the iterator is sorted, all elements will be unique.",57,[[["self"]],["dedup"]]],[11,"unique","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration. Duplicates are detected using hash and equality.",57,[[["self"]],["unique"]]],[11,"unique_by","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration.",57,[[["self"],["f"]],["uniqueby"]]],[11,"peeking_take_while","","Return an iterator adaptor that borrows from this iterator and takes items while the closure `accept` returns `true`.",57,[[["self"],["f"]],["peekingtakewhile"]]],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate `accept` returns `true`.",57,[[["self"],["f"]],["takewhileref"]]],[11,"while_some","","Return an iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",57,[[["self"]],["whilesome"]]],[11,"tuple_combinations","","Return an iterator adaptor that iterates over the combinations of the elements from an iterator.",57,[[["self"]],["tuplecombinations"]]],[11,"combinations","","Return an iterator adaptor that iterates over the `n`-length combinations of the elements from an iterator.",57,[[["self"],["usize"]],["combinations"]]],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of `min` by filling missing elements using a closure `f`.",57,[[["self"],["usize"],["f"]],["padusing"]]],[11,"flatten","","Flatten an iterator of iterables into a single combined sequence of all the elements in the iterables.",57,[[["self"]],["flatten"]]],[11,"with_position","","Return an iterator adaptor that wraps each element in a `Position` to ease special-case handling of the first or last elements.",57,[[["self"]],["withposition"]]],[11,"positions","","Return an iterator adaptor that yields the indices of all elements satisfying a predicate, counted from the start of the iterator.",57,[[["self"],["p"]],["positions"]]],[11,"update","","Return an iterator adaptor that applies a mutating function to each element before yielding it.",57,[[["self"],["f"]],["update"]]],[11,"next_tuple","","Advances the iterator and returns the next items grouped in a tuple of a specific size (up to 4).",57,[[["self"]],["option"]]],[11,"collect_tuple","","Collects all items from the iterator into a tuple of a specific size (up to 4).",57,[[["self"]],["option"]]],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",57,[[["self"],["p"]],["option"]]],[11,"all_equal","","Check whether all elements compare equal.",57,[[["self"]],["bool"]]],[11,"dropping","","Consume the first `n` elements from the iterator eagerly, and return the same iterator again.",57,[[["self"],["usize"]],["self"]]],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly, and return the same iterator again.",57,[[["self"],["usize"]],["self"]]],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",57,[[["self"],["f"]]]],[11,"concat","","Combine all an iterator's elements into one element by using `Extend`.",57,N],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`, for convenience.",57,[[["self"]],["vec"]]],[11,"set_from","","Assign to each reference in `self` from the `from` iterator, stopping at the shortest of the two iterators.",57,[[["self"],["j"]],["usize"]]],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",57,[[["self"],["str"]],["string"]]],[11,"format","","Format all iterator elements, separated by `sep`.",57,[[["self"],["str"]],["format"]]],[11,"format_with","","Format all iterator elements, separated by `sep`.",57,[[["self"],["str"],["f"]],["formatwith"]]],[11,"fold_results","","Fold `Result` values from an iterator.",57,[[["self"],["b"],["f"]],["result"]]],[11,"fold_options","","Fold `Option` values from an iterator.",57,[[["self"],["b"],["f"]],["option"]]],[11,"fold1","","Accumulator of the elements in the iterator.",57,[[["self"],["f"]],["option"]]],[11,"tree_fold1","","Accumulate the elements in the iterator in a tree-like manner.",57,[[["self"],["f"]],["option"]]],[11,"fold_while","","An iterator method that applies a function, producing a single, final value.",57,[[["self"],["b"],["f"]],["foldwhile"]]],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",57,[[["self"]],["vec"]]],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",57,[[["self"],["f"]],["vec"]]],[11,"sorted_by_key","","Collect all iterator elements into a sorted vector.",57,[[["self"],["f"]],["vec"]]],[11,"partition_map","","Collect all iterator elements into one of two partitions. Unlike `Iterator::partition`, each partition may have a distinct type.",57,N],[11,"into_group_map","","Return a `HashMap` of keys mapped to `Vec`s of values. Keys and values are taken from `(Key, Value)` tuple pairs yielded by the input iterator.",57,[[["self"]],["hashmap",["vec"]]]],[11,"minmax","","Return the minimum and maximum elements in the iterator.",57,[[["self"]],["minmaxresult"]]],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as determined by the specified function.",57,[[["self"],["f"]],["minmaxresult"]]],[11,"minmax_by","","Return the minimum and maximum element of an iterator, as determined by the specified comparison function.",57,[[["self"],["f"]],["minmaxresult"]]],[11,"clone","","",5,[[["self"]],["foldwhile"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"into_inner","","Return the value in the continue or done.",5,[[["self"]],["t"]]],[11,"is_done","","Return true if `self` is `Done`, false if it is `Continue`.",5,[[["self"]],["bool"]]],[14,"iproduct","","Create an iterator over the “cartesian product” of iterators.",N,N],[14,"izip","","Create an iterator running multiple iterators in lockstep.",N,N],[11,"is_left","","Return true if the value is the `Left` variant.",0,[[["self"]],["bool"]]],[11,"is_right","","Return true if the value is the `Right` variant.",0,[[["self"]],["bool"]]],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,[[["self"]],["option"]]],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,[[["self"]],["option"]]],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,[[["self"]],["either"]]],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,[[["self"]],["either"]]],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,[[["self"]],["either"]]],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,[[["self"],["f"]],["either"]]],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,[[["self"],["f"]],["either"]]],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,[[["self"],["f"],["g"]],["t"]]],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,[[["self"],["ctx"],["f"],["g"]],["t"]]],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"into_iter","","Convert the inner value to an iterator.",0,[[["self"]],["either"]]],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,[[["self"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"into","","",0,[[["self"]],["result"]]],[11,"clone","","",0,[[["self"]],["either"]]],[11,"hash","","",0,N],[11,"eq","","",0,[[["self"],["either"]],["bool"]]],[11,"ne","","",0,[[["self"],["either"]],["bool"]]],[11,"as_ref","","",0,[[["self"]],["target"]]],[11,"deref_mut","","",0,N],[11,"deref","","",0,N],[11,"next","","",0,[[["self"]],["option"]]],[11,"size_hint","","",0,N],[11,"fold","","",0,[[["self"],["acc"],["g"]],["acc"]]],[11,"count","","",0,[[["self"]],["usize"]]],[11,"last","","",0,[[["self"]],["option"]]],[11,"nth","","",0,[[["self"],["usize"]],["option"]]],[11,"collect","","",0,[[["self"]],["b"]]],[11,"all","","",0,[[["self"],["f"]],["bool"]]],[11,"from","","",0,[[["result"]],["either"]]],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",0,[[["self"],["either"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["either"]],["bool"]]],[11,"le","","",0,[[["self"],["either"]],["bool"]]],[11,"gt","","",0,[[["self"],["either"]],["bool"]]],[11,"ge","","",0,[[["self"],["either"]],["bool"]]],[11,"cmp","","",0,[[["self"],["either"]],["ordering"]]],[11,"extend","","",0,N],[11,"as_mut","","",0,[[["self"]],["target"]]]],"paths":[[4,"Either"],[4,"Diff"],[4,"MinMaxResult"],[4,"Position"],[4,"EitherOrBoth"],[4,"FoldWhile"],[3,"RcIter"],[3,"Unfold"],[3,"MultiProduct"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"Product"],[3,"Batching"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"Coalesce"],[3,"Dedup"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"TupleCombinations"],[3,"Flatten"],[3,"MapResults"],[3,"Positions"],[3,"Update"],[3,"ConsTuples"],[3,"Combinations"],[3,"Format"],[3,"FormatWith"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"KMerge"],[3,"KMergeBy"],[3,"MergeJoinBy"],[3,"MultiPeek"],[3,"PadUsing"],[3,"PutBackN"],[3,"PeekingTakeWhile"],[3,"ProcessResults"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Iterate"],[3,"Tee"],[3,"TupleBuffer"],[3,"Tuples"],[3,"TupleWindows"],[3,"UniqueBy"],[3,"Unique"],[3,"WithPosition"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"],[8,"PeekingNext"],[8,"Itertools"]]};
searchIndex["jpeg_decoder"]={"doc":"This crate contains a JPEG decoder.","items":[[3,"Decoder","jpeg_decoder","JPEG decoder",N,N],[3,"ImageInfo","","Represents metadata of an image.",N,N],[12,"width","","The width of the image, in pixels.",0,N],[12,"height","","The height of the image, in pixels.",0,N],[12,"pixel_format","","The pixel format of the image.",0,N],[4,"PixelFormat","","An enumeration over combinations of color spaces and bit depths a pixel can have.",N,N],[13,"L8","","Luminance (grayscale), 8 bits",1,N],[13,"RGB24","","RGB, 8 bits per channel",1,N],[13,"CMYK32","","CMYK, 8 bits per channel",1,N],[4,"Error","","Errors that can occur while decoding a JPEG image.",N,N],[13,"Format","","The image is not formatted properly. The string contains detailed information about the error.",2,N],[13,"Unsupported","","The image makes use of a JPEG feature not (currently) supported by this library.",2,N],[13,"Io","","An I/O error occurred while decoding the image.",2,N],[13,"Internal","","An internal error occurred while decoding the image.",2,N],[4,"UnsupportedFeature","","An enumeration over JPEG features (currently) unsupported by this library.",N,N],[13,"Hierarchical","","Hierarchical JPEG.",3,N],[13,"Lossless","","Lossless JPEG.",3,N],[13,"ArithmeticEntropyCoding","","JPEG using arithmetic entropy coding instead of Huffman coding.",3,N],[13,"SamplePrecision","","Sample precision in bits. 8 bit sample precision is what is currently supported.",3,N],[13,"ComponentCount","","Number of components in an image. 1, 3 and 4 components are currently supported.",3,N],[13,"DNL","","An image can specify a zero height in the frame header and use the DNL (Define Number of Lines) marker at the end of the first scan to define the number of lines in the frame.",3,N],[13,"SubsamplingRatio","","Subsampling ratio.",3,N],[13,"NonIntegerSubsamplingRatio","","A subsampling ratio not representable as an integer.",3,N],[11,"clone","","",1,[[["self"]],["pixelformat"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["pixelformat"]],["bool"]]],[11,"clone","","",0,[[["self"]],["imageinfo"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["imageinfo"]],["bool"]]],[11,"ne","","",0,[[["self"],["imageinfo"]],["bool"]]],[11,"new","","Creates a new `Decoder` using the reader `reader`.",4,[[["r"]],["decoder"]]],[11,"info","","Returns metadata about the image.",4,[[["self"]],["option",["imageinfo"]]]],[11,"read_info","","Tries to read metadata from the image without decoding it.",4,[[["self"]],["result",["error"]]]],[11,"decode","","Decodes the image and returns the decoded pixels if successful.",4,[[["self"]],["result",["vec","error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"cause","","",2,[[["self"]],["option",["stderror"]]]],[11,"from","","",2,[[["ioerror"]],["error"]]],[11,"from","","",2,[[["recverror"]],["error"]]],[11,"from","","",2,[[["senderror"]],["error"]]]],"paths":[[3,"ImageInfo"],[4,"PixelFormat"],[4,"Error"],[4,"UnsupportedFeature"],[3,"Decoder"]]};
searchIndex["lazy_static"]={"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",N,[[["t"]]]],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",N,N],[14,"lazy_static","","",N,N]],"paths":[]};
searchIndex["libc"]={"doc":"Crate docs","items":[[3,"group","libc","",N,N],[12,"gr_name","","",0,N],[12,"gr_passwd","","",0,N],[12,"gr_gid","","",0,N],[12,"gr_mem","","",0,N],[3,"utimbuf","","",N,N],[12,"actime","","",1,N],[12,"modtime","","",1,N],[3,"timeval","","",N,N],[12,"tv_sec","","",2,N],[12,"tv_usec","","",2,N],[3,"timespec","","",N,N],[12,"tv_sec","","",3,N],[12,"tv_nsec","","",3,N],[3,"rlimit","","",N,N],[12,"rlim_cur","","",4,N],[12,"rlim_max","","",4,N],[3,"rusage","","",N,N],[12,"ru_utime","","",5,N],[12,"ru_stime","","",5,N],[12,"ru_maxrss","","",5,N],[12,"ru_ixrss","","",5,N],[12,"ru_idrss","","",5,N],[12,"ru_isrss","","",5,N],[12,"ru_minflt","","",5,N],[12,"ru_majflt","","",5,N],[12,"ru_nswap","","",5,N],[12,"ru_inblock","","",5,N],[12,"ru_oublock","","",5,N],[12,"ru_msgsnd","","",5,N],[12,"ru_msgrcv","","",5,N],[12,"ru_nsignals","","",5,N],[12,"ru_nvcsw","","",5,N],[12,"ru_nivcsw","","",5,N],[3,"in_addr","","",N,N],[12,"s_addr","","",6,N],[3,"in6_addr","","",N,N],[12,"s6_addr","","",7,N],[3,"ip_mreq","","",N,N],[12,"imr_multiaddr","","",8,N],[12,"imr_interface","","",8,N],[3,"ipv6_mreq","","",N,N],[12,"ipv6mr_multiaddr","","",9,N],[12,"ipv6mr_interface","","",9,N],[3,"hostent","","",N,N],[12,"h_name","","",10,N],[12,"h_aliases","","",10,N],[12,"h_addrtype","","",10,N],[12,"h_length","","",10,N],[12,"h_addr_list","","",10,N],[3,"iovec","","",N,N],[12,"iov_base","","",11,N],[12,"iov_len","","",11,N],[3,"pollfd","","",N,N],[12,"fd","","",12,N],[12,"events","","",12,N],[12,"revents","","",12,N],[3,"winsize","","",N,N],[12,"ws_row","","",13,N],[12,"ws_col","","",13,N],[12,"ws_xpixel","","",13,N],[12,"ws_ypixel","","",13,N],[3,"linger","","",N,N],[12,"l_onoff","","",14,N],[12,"l_linger","","",14,N],[3,"sigval","","",N,N],[12,"sival_ptr","","",15,N],[3,"itimerval","","",N,N],[12,"it_interval","","",16,N],[12,"it_value","","",16,N],[3,"tms","","",N,N],[12,"tms_utime","","",17,N],[12,"tms_stime","","",17,N],[12,"tms_cutime","","",17,N],[12,"tms_cstime","","",17,N],[3,"servent","","",N,N],[12,"s_name","","",18,N],[12,"s_aliases","","",18,N],[12,"s_port","","",18,N],[12,"s_proto","","",18,N],[3,"protoent","","",N,N],[12,"p_name","","",19,N],[12,"p_aliases","","",19,N],[12,"p_proto","","",19,N],[3,"sockaddr","","",N,N],[12,"sa_family","","",20,N],[12,"sa_data","","",20,N],[3,"sockaddr_in","","",N,N],[12,"sin_family","","",21,N],[12,"sin_port","","",21,N],[12,"sin_addr","","",21,N],[12,"sin_zero","","",21,N],[3,"sockaddr_in6","","",N,N],[12,"sin6_family","","",22,N],[12,"sin6_port","","",22,N],[12,"sin6_flowinfo","","",22,N],[12,"sin6_addr","","",22,N],[12,"sin6_scope_id","","",22,N],[3,"sockaddr_un","","",N,N],[12,"sun_family","","",23,N],[12,"sun_path","","",23,N],[3,"sockaddr_storage","","",N,N],[12,"ss_family","","",24,N],[3,"addrinfo","","",N,N],[12,"ai_flags","","",25,N],[12,"ai_family","","",25,N],[12,"ai_socktype","","",25,N],[12,"ai_protocol","","",25,N],[12,"ai_addrlen","","",25,N],[12,"ai_addr","","",25,N],[12,"ai_canonname","","",25,N],[12,"ai_next","","",25,N],[3,"sockaddr_nl","","",N,N],[12,"nl_family","","",26,N],[12,"nl_pid","","",26,N],[12,"nl_groups","","",26,N],[3,"sockaddr_ll","","",N,N],[12,"sll_family","","",27,N],[12,"sll_protocol","","",27,N],[12,"sll_ifindex","","",27,N],[12,"sll_hatype","","",27,N],[12,"sll_pkttype","","",27,N],[12,"sll_halen","","",27,N],[12,"sll_addr","","",27,N],[3,"fd_set","","",N,N],[3,"tm","","",N,N],[12,"tm_sec","","",28,N],[12,"tm_min","","",28,N],[12,"tm_hour","","",28,N],[12,"tm_mday","","",28,N],[12,"tm_mon","","",28,N],[12,"tm_year","","",28,N],[12,"tm_wday","","",28,N],[12,"tm_yday","","",28,N],[12,"tm_isdst","","",28,N],[12,"tm_gmtoff","","",28,N],[12,"tm_zone","","",28,N],[3,"sched_param","","",N,N],[12,"sched_priority","","",29,N],[3,"Dl_info","","",N,N],[12,"dli_fname","","",30,N],[12,"dli_fbase","","",30,N],[12,"dli_sname","","",30,N],[12,"dli_saddr","","",30,N],[3,"epoll_event","","",N,N],[12,"events","","",31,N],[12,"u64","","",31,N],[3,"utsname","","",N,N],[12,"sysname","","",32,N],[12,"nodename","","",32,N],[12,"release","","",32,N],[12,"version","","",32,N],[12,"machine","","",32,N],[12,"domainname","","",32,N],[3,"lconv","","",N,N],[12,"decimal_point","","",33,N],[12,"thousands_sep","","",33,N],[12,"grouping","","",33,N],[12,"int_curr_symbol","","",33,N],[12,"currency_symbol","","",33,N],[12,"mon_decimal_point","","",33,N],[12,"mon_thousands_sep","","",33,N],[12,"mon_grouping","","",33,N],[12,"positive_sign","","",33,N],[12,"negative_sign","","",33,N],[12,"int_frac_digits","","",33,N],[12,"frac_digits","","",33,N],[12,"p_cs_precedes","","",33,N],[12,"p_sep_by_space","","",33,N],[12,"n_cs_precedes","","",33,N],[12,"n_sep_by_space","","",33,N],[12,"p_sign_posn","","",33,N],[12,"n_sign_posn","","",33,N],[12,"int_p_cs_precedes","","",33,N],[12,"int_p_sep_by_space","","",33,N],[12,"int_n_cs_precedes","","",33,N],[12,"int_n_sep_by_space","","",33,N],[12,"int_p_sign_posn","","",33,N],[12,"int_n_sign_posn","","",33,N],[3,"sigevent","","",N,N],[12,"sigev_value","","",34,N],[12,"sigev_signo","","",34,N],[12,"sigev_notify","","",34,N],[12,"sigev_notify_thread_id","","",34,N],[3,"in_pktinfo","","",N,N],[12,"ipi_ifindex","","",35,N],[12,"ipi_spec_dst","","",35,N],[12,"ipi_addr","","",35,N],[3,"ifaddrs","","",N,N],[12,"ifa_next","","",36,N],[12,"ifa_name","","",36,N],[12,"ifa_flags","","",36,N],[12,"ifa_addr","","",36,N],[12,"ifa_netmask","","",36,N],[12,"ifa_ifu","","",36,N],[12,"ifa_data","","",36,N],[3,"in6_rtmsg","","",N,N],[3,"dirent","","",N,N],[12,"d_ino","","",37,N],[12,"d_off","","",37,N],[12,"d_reclen","","",37,N],[12,"d_type","","",37,N],[12,"d_name","","",37,N],[3,"dirent64","","",N,N],[12,"d_ino","","",38,N],[12,"d_off","","",38,N],[12,"d_reclen","","",38,N],[12,"d_type","","",38,N],[12,"d_name","","",38,N],[3,"rlimit64","","",N,N],[12,"rlim_cur","","",39,N],[12,"rlim_max","","",39,N],[3,"glob_t","","",N,N],[12,"gl_pathc","","",40,N],[12,"gl_pathv","","",40,N],[12,"gl_offs","","",40,N],[12,"gl_flags","","",40,N],[3,"pthread_mutex_t","","",N,N],[3,"pthread_rwlock_t","","",N,N],[3,"pthread_mutexattr_t","","",N,N],[3,"pthread_rwlockattr_t","","",N,N],[3,"pthread_cond_t","","",N,N],[3,"pthread_condattr_t","","",N,N],[3,"passwd","","",N,N],[12,"pw_name","","",41,N],[12,"pw_passwd","","",41,N],[12,"pw_uid","","",41,N],[12,"pw_gid","","",41,N],[12,"pw_gecos","","",41,N],[12,"pw_dir","","",41,N],[12,"pw_shell","","",41,N],[3,"spwd","","",N,N],[12,"sp_namp","","",42,N],[12,"sp_pwdp","","",42,N],[12,"sp_lstchg","","",42,N],[12,"sp_min","","",42,N],[12,"sp_max","","",42,N],[12,"sp_warn","","",42,N],[12,"sp_inact","","",42,N],[12,"sp_expire","","",42,N],[12,"sp_flag","","",42,N],[3,"dqblk","","",N,N],[12,"dqb_bhardlimit","","",43,N],[12,"dqb_bsoftlimit","","",43,N],[12,"dqb_curspace","","",43,N],[12,"dqb_ihardlimit","","",43,N],[12,"dqb_isoftlimit","","",43,N],[12,"dqb_curinodes","","",43,N],[12,"dqb_btime","","",43,N],[12,"dqb_itime","","",43,N],[12,"dqb_valid","","",43,N],[3,"signalfd_siginfo","","",N,N],[12,"ssi_signo","","",44,N],[12,"ssi_errno","","",44,N],[12,"ssi_code","","",44,N],[12,"ssi_pid","","",44,N],[12,"ssi_uid","","",44,N],[12,"ssi_fd","","",44,N],[12,"ssi_tid","","",44,N],[12,"ssi_band","","",44,N],[12,"ssi_overrun","","",44,N],[12,"ssi_trapno","","",44,N],[12,"ssi_status","","",44,N],[12,"ssi_int","","",44,N],[12,"ssi_ptr","","",44,N],[12,"ssi_utime","","",44,N],[12,"ssi_stime","","",44,N],[12,"ssi_addr","","",44,N],[3,"itimerspec","","",N,N],[12,"it_interval","","",45,N],[12,"it_value","","",45,N],[3,"fsid_t","","",N,N],[3,"mq_attr","","",N,N],[12,"mq_flags","","",46,N],[12,"mq_maxmsg","","",46,N],[12,"mq_msgsize","","",46,N],[12,"mq_curmsgs","","",46,N],[3,"cpu_set_t","","",N,N],[3,"if_nameindex","","",N,N],[12,"if_index","","",47,N],[12,"if_name","","",47,N],[3,"msginfo","","",N,N],[12,"msgpool","","",48,N],[12,"msgmap","","",48,N],[12,"msgmax","","",48,N],[12,"msgmnb","","",48,N],[12,"msgmni","","",48,N],[12,"msgssz","","",48,N],[12,"msgtql","","",48,N],[12,"msgseg","","",48,N],[3,"mmsghdr","","",N,N],[12,"msg_hdr","","",49,N],[12,"msg_len","","",49,N],[3,"sembuf","","",N,N],[12,"sem_num","","",50,N],[12,"sem_op","","",50,N],[12,"sem_flg","","",50,N],[3,"input_event","","",N,N],[12,"time","","",51,N],[12,"type_","","",51,N],[12,"code","","",51,N],[12,"value","","",51,N],[3,"input_id","","",N,N],[12,"bustype","","",52,N],[12,"vendor","","",52,N],[12,"product","","",52,N],[12,"version","","",52,N],[3,"input_absinfo","","",N,N],[12,"value","","",53,N],[12,"minimum","","",53,N],[12,"maximum","","",53,N],[12,"fuzz","","",53,N],[12,"flat","","",53,N],[12,"resolution","","",53,N],[3,"input_keymap_entry","","",N,N],[12,"flags","","",54,N],[12,"len","","",54,N],[12,"index","","",54,N],[12,"keycode","","",54,N],[12,"scancode","","",54,N],[3,"input_mask","","",N,N],[12,"type_","","",55,N],[12,"codes_size","","",55,N],[12,"codes_ptr","","",55,N],[3,"ff_replay","","",N,N],[12,"length","","",56,N],[12,"delay","","",56,N],[3,"ff_trigger","","",N,N],[12,"button","","",57,N],[12,"interval","","",57,N],[3,"ff_envelope","","",N,N],[12,"attack_length","","",58,N],[12,"attack_level","","",58,N],[12,"fade_length","","",58,N],[12,"fade_level","","",58,N],[3,"ff_constant_effect","","",N,N],[12,"level","","",59,N],[12,"envelope","","",59,N],[3,"ff_ramp_effect","","",N,N],[12,"start_level","","",60,N],[12,"end_level","","",60,N],[12,"envelope","","",60,N],[3,"ff_condition_effect","","",N,N],[12,"right_saturation","","",61,N],[12,"left_saturation","","",61,N],[12,"right_coeff","","",61,N],[12,"left_coeff","","",61,N],[12,"deadband","","",61,N],[12,"center","","",61,N],[3,"ff_periodic_effect","","",N,N],[12,"waveform","","",62,N],[12,"period","","",62,N],[12,"magnitude","","",62,N],[12,"offset","","",62,N],[12,"phase","","",62,N],[12,"envelope","","",62,N],[12,"custom_len","","",62,N],[12,"custom_data","","",62,N],[3,"ff_rumble_effect","","",N,N],[12,"strong_magnitude","","",63,N],[12,"weak_magnitude","","",63,N],[3,"ff_effect","","",N,N],[12,"type_","","",64,N],[12,"id","","",64,N],[12,"direction","","",64,N],[12,"trigger","","",64,N],[12,"replay","","",64,N],[12,"u","","",64,N],[3,"dl_phdr_info","","",N,N],[12,"dlpi_addr","","",65,N],[12,"dlpi_name","","",65,N],[12,"dlpi_phdr","","",65,N],[12,"dlpi_phnum","","",65,N],[12,"dlpi_adds","","",65,N],[12,"dlpi_subs","","",65,N],[12,"dlpi_tls_modid","","",65,N],[12,"dlpi_tls_data","","",65,N],[3,"Elf32_Phdr","","",N,N],[12,"p_type","","",66,N],[12,"p_offset","","",66,N],[12,"p_vaddr","","",66,N],[12,"p_paddr","","",66,N],[12,"p_filesz","","",66,N],[12,"p_memsz","","",66,N],[12,"p_flags","","",66,N],[12,"p_align","","",66,N],[3,"Elf64_Phdr","","",N,N],[12,"p_type","","",67,N],[12,"p_flags","","",67,N],[12,"p_offset","","",67,N],[12,"p_vaddr","","",67,N],[12,"p_paddr","","",67,N],[12,"p_filesz","","",67,N],[12,"p_memsz","","",67,N],[12,"p_align","","",67,N],[3,"ucred","","",N,N],[12,"pid","","",68,N],[12,"uid","","",68,N],[12,"gid","","",68,N],[3,"mntent","","",N,N],[12,"mnt_fsname","","",69,N],[12,"mnt_dir","","",69,N],[12,"mnt_type","","",69,N],[12,"mnt_opts","","",69,N],[12,"mnt_freq","","",69,N],[12,"mnt_passno","","",69,N],[3,"posix_spawn_file_actions_t","","",N,N],[3,"posix_spawnattr_t","","",N,N],[3,"genlmsghdr","","",N,N],[12,"cmd","","",70,N],[12,"version","","",70,N],[12,"reserved","","",70,N],[3,"in6_pktinfo","","",N,N],[12,"ipi6_addr","","",71,N],[12,"ipi6_ifindex","","",71,N],[3,"aiocb","","",N,N],[12,"aio_fildes","","",72,N],[12,"aio_lio_opcode","","",72,N],[12,"aio_reqprio","","",72,N],[12,"aio_buf","","",72,N],[12,"aio_nbytes","","",72,N],[12,"aio_sigevent","","",72,N],[12,"aio_offset","","",72,N],[3,"__exit_status","","",N,N],[12,"e_termination","","",73,N],[12,"e_exit","","",73,N],[3,"__timeval","","",N,N],[12,"tv_sec","","",74,N],[12,"tv_usec","","",74,N],[3,"utmpx","","",N,N],[12,"ut_type","","",75,N],[12,"ut_pid","","",75,N],[12,"ut_line","","",75,N],[12,"ut_id","","",75,N],[12,"ut_user","","",75,N],[12,"ut_host","","",75,N],[12,"ut_exit","","",75,N],[12,"ut_session","","",75,N],[12,"ut_tv","","",75,N],[12,"ut_addr_v6","","",75,N],[3,"sigaction","","",N,N],[12,"sa_sigaction","","",76,N],[12,"sa_mask","","",76,N],[12,"sa_flags","","",76,N],[12,"sa_restorer","","",76,N],[3,"stack_t","","",N,N],[12,"ss_sp","","",77,N],[12,"ss_flags","","",77,N],[12,"ss_size","","",77,N],[3,"siginfo_t","","",N,N],[12,"si_signo","","",78,N],[12,"si_errno","","",78,N],[12,"si_code","","",78,N],[12,"_pad","","",78,N],[3,"glob64_t","","",N,N],[12,"gl_pathc","","",79,N],[12,"gl_pathv","","",79,N],[12,"gl_offs","","",79,N],[12,"gl_flags","","",79,N],[3,"statfs","","",N,N],[12,"f_type","","",80,N],[12,"f_bsize","","",80,N],[12,"f_blocks","","",80,N],[12,"f_bfree","","",80,N],[12,"f_bavail","","",80,N],[12,"f_files","","",80,N],[12,"f_ffree","","",80,N],[12,"f_fsid","","",80,N],[12,"f_namelen","","",80,N],[12,"f_frsize","","",80,N],[3,"msghdr","","",N,N],[12,"msg_name","","",81,N],[12,"msg_namelen","","",81,N],[12,"msg_iov","","",81,N],[12,"msg_iovlen","","",81,N],[12,"msg_control","","",81,N],[12,"msg_controllen","","",81,N],[12,"msg_flags","","",81,N],[3,"cmsghdr","","",N,N],[12,"cmsg_len","","",82,N],[12,"cmsg_level","","",82,N],[12,"cmsg_type","","",82,N],[3,"termios","","",N,N],[12,"c_iflag","","",83,N],[12,"c_oflag","","",83,N],[12,"c_cflag","","",83,N],[12,"c_lflag","","",83,N],[12,"c_line","","",83,N],[12,"c_cc","","",83,N],[12,"c_ispeed","","",83,N],[12,"c_ospeed","","",83,N],[3,"flock","","",N,N],[12,"l_type","","",84,N],[12,"l_whence","","",84,N],[12,"l_start","","",84,N],[12,"l_len","","",84,N],[12,"l_pid","","",84,N],[3,"sem_t","","",N,N],[3,"mallinfo","","",N,N],[12,"arena","","",85,N],[12,"ordblks","","",85,N],[12,"smblks","","",85,N],[12,"hblks","","",85,N],[12,"hblkhd","","",85,N],[12,"usmblks","","",85,N],[12,"fsmblks","","",85,N],[12,"uordblks","","",85,N],[12,"fordblks","","",85,N],[12,"keepcost","","",85,N],[3,"nlmsghdr","","",N,N],[12,"nlmsg_len","","",86,N],[12,"nlmsg_type","","",86,N],[12,"nlmsg_flags","","",86,N],[12,"nlmsg_seq","","",86,N],[12,"nlmsg_pid","","",86,N],[3,"nlmsgerr","","",N,N],[12,"error","","",87,N],[12,"msg","","",87,N],[3,"nl_pktinfo","","",N,N],[12,"group","","",88,N],[3,"nl_mmap_req","","",N,N],[12,"nm_block_size","","",89,N],[12,"nm_block_nr","","",89,N],[12,"nm_frame_size","","",89,N],[12,"nm_frame_nr","","",89,N],[3,"nl_mmap_hdr","","",N,N],[12,"nm_status","","",90,N],[12,"nm_len","","",90,N],[12,"nm_group","","",90,N],[12,"nm_pid","","",90,N],[12,"nm_uid","","",90,N],[12,"nm_gid","","",90,N],[3,"nlattr","","",N,N],[12,"nla_len","","",91,N],[12,"nla_type","","",91,N],[3,"rtentry","","",N,N],[12,"rt_pad1","","",92,N],[12,"rt_dst","","",92,N],[12,"rt_gateway","","",92,N],[12,"rt_genmask","","",92,N],[12,"rt_flags","","",92,N],[12,"rt_pad2","","",92,N],[12,"rt_pad3","","",92,N],[12,"rt_tos","","",92,N],[12,"rt_class","","",92,N],[12,"rt_pad4","","",92,N],[12,"rt_metric","","",92,N],[12,"rt_dev","","",92,N],[12,"rt_mtu","","",92,N],[12,"rt_window","","",92,N],[12,"rt_irtt","","",92,N],[3,"sigset_t","","",N,N],[3,"sysinfo","","",N,N],[12,"uptime","","",93,N],[12,"loads","","",93,N],[12,"totalram","","",93,N],[12,"freeram","","",93,N],[12,"sharedram","","",93,N],[12,"bufferram","","",93,N],[12,"totalswap","","",93,N],[12,"freeswap","","",93,N],[12,"procs","","",93,N],[12,"pad","","",93,N],[12,"totalhigh","","",93,N],[12,"freehigh","","",93,N],[12,"mem_unit","","",93,N],[12,"_f","","",93,N],[3,"msqid_ds","","",N,N],[12,"msg_perm","","",94,N],[12,"msg_stime","","",94,N],[12,"msg_rtime","","",94,N],[12,"msg_ctime","","",94,N],[12,"msg_qnum","","",94,N],[12,"msg_qbytes","","",94,N],[12,"msg_lspid","","",94,N],[12,"msg_lrpid","","",94,N],[3,"stat","","",N,N],[12,"st_dev","","",95,N],[12,"st_ino","","",95,N],[12,"st_nlink","","",95,N],[12,"st_mode","","",95,N],[12,"st_uid","","",95,N],[12,"st_gid","","",95,N],[12,"st_rdev","","",95,N],[12,"st_size","","",95,N],[12,"st_blksize","","",95,N],[12,"st_blocks","","",95,N],[12,"st_atime","","",95,N],[12,"st_atime_nsec","","",95,N],[12,"st_mtime","","",95,N],[12,"st_mtime_nsec","","",95,N],[12,"st_ctime","","",95,N],[12,"st_ctime_nsec","","",95,N],[3,"stat64","","",N,N],[12,"st_dev","","",96,N],[12,"st_ino","","",96,N],[12,"st_nlink","","",96,N],[12,"st_mode","","",96,N],[12,"st_uid","","",96,N],[12,"st_gid","","",96,N],[12,"st_rdev","","",96,N],[12,"st_size","","",96,N],[12,"st_blksize","","",96,N],[12,"st_blocks","","",96,N],[12,"st_atime","","",96,N],[12,"st_atime_nsec","","",96,N],[12,"st_mtime","","",96,N],[12,"st_mtime_nsec","","",96,N],[12,"st_ctime","","",96,N],[12,"st_ctime_nsec","","",96,N],[3,"statfs64","","",N,N],[12,"f_type","","",97,N],[12,"f_bsize","","",97,N],[12,"f_blocks","","",97,N],[12,"f_bfree","","",97,N],[12,"f_bavail","","",97,N],[12,"f_files","","",97,N],[12,"f_ffree","","",97,N],[12,"f_fsid","","",97,N],[12,"f_namelen","","",97,N],[12,"f_frsize","","",97,N],[12,"f_flags","","",97,N],[12,"f_spare","","",97,N],[3,"statvfs64","","",N,N],[12,"f_bsize","","",98,N],[12,"f_frsize","","",98,N],[12,"f_blocks","","",98,N],[12,"f_bfree","","",98,N],[12,"f_bavail","","",98,N],[12,"f_files","","",98,N],[12,"f_ffree","","",98,N],[12,"f_favail","","",98,N],[12,"f_fsid","","",98,N],[12,"f_flag","","",98,N],[12,"f_namemax","","",98,N],[3,"pthread_attr_t","","",N,N],[3,"_libc_fpxreg","","",N,N],[12,"significand","","",99,N],[12,"exponent","","",99,N],[3,"_libc_xmmreg","","",N,N],[12,"element","","",100,N],[3,"_libc_fpstate","","",N,N],[12,"cwd","","",101,N],[12,"swd","","",101,N],[12,"ftw","","",101,N],[12,"fop","","",101,N],[12,"rip","","",101,N],[12,"rdp","","",101,N],[12,"mxcsr","","",101,N],[12,"mxcr_mask","","",101,N],[12,"_st","","",101,N],[12,"_xmm","","",101,N],[3,"user_fpregs_struct","","",N,N],[12,"cwd","","",102,N],[12,"swd","","",102,N],[12,"ftw","","",102,N],[12,"fop","","",102,N],[12,"rip","","",102,N],[12,"rdp","","",102,N],[12,"mxcsr","","",102,N],[12,"mxcr_mask","","",102,N],[12,"st_space","","",102,N],[12,"xmm_space","","",102,N],[3,"user_regs_struct","","",N,N],[12,"r15","","",103,N],[12,"r14","","",103,N],[12,"r13","","",103,N],[12,"r12","","",103,N],[12,"rbp","","",103,N],[12,"rbx","","",103,N],[12,"r11","","",103,N],[12,"r10","","",103,N],[12,"r9","","",103,N],[12,"r8","","",103,N],[12,"rax","","",103,N],[12,"rcx","","",103,N],[12,"rdx","","",103,N],[12,"rsi","","",103,N],[12,"rdi","","",103,N],[12,"orig_rax","","",103,N],[12,"rip","","",103,N],[12,"cs","","",103,N],[12,"eflags","","",103,N],[12,"rsp","","",103,N],[12,"ss","","",103,N],[12,"fs_base","","",103,N],[12,"gs_base","","",103,N],[12,"ds","","",103,N],[12,"es","","",103,N],[12,"fs","","",103,N],[12,"gs","","",103,N],[3,"user","","",N,N],[12,"regs","","",104,N],[12,"u_fpvalid","","",104,N],[12,"i387","","",104,N],[12,"u_tsize","","",104,N],[12,"u_dsize","","",104,N],[12,"u_ssize","","",104,N],[12,"start_code","","",104,N],[12,"start_stack","","",104,N],[12,"signal","","",104,N],[12,"u_ar0","","",104,N],[12,"u_fpstate","","",104,N],[12,"magic","","",104,N],[12,"u_comm","","",104,N],[12,"u_debugreg","","",104,N],[3,"mcontext_t","","",N,N],[12,"gregs","","",105,N],[12,"fpregs","","",105,N],[3,"ucontext_t","","",N,N],[12,"uc_flags","","",106,N],[12,"uc_link","","",106,N],[12,"uc_stack","","",106,N],[12,"uc_mcontext","","",106,N],[12,"uc_sigmask","","",106,N],[3,"ipc_perm","","",N,N],[12,"__key","","",107,N],[12,"uid","","",107,N],[12,"gid","","",107,N],[12,"cuid","","",107,N],[12,"cgid","","",107,N],[12,"mode","","",107,N],[12,"__seq","","",107,N],[3,"shmid_ds","","",N,N],[12,"shm_perm","","",108,N],[12,"shm_segsz","","",108,N],[12,"shm_atime","","",108,N],[12,"shm_dtime","","",108,N],[12,"shm_ctime","","",108,N],[12,"shm_cpid","","",108,N],[12,"shm_lpid","","",108,N],[12,"shm_nattch","","",108,N],[3,"termios2","","",N,N],[12,"c_iflag","","",109,N],[12,"c_oflag","","",109,N],[12,"c_cflag","","",109,N],[12,"c_lflag","","",109,N],[12,"c_line","","",109,N],[12,"c_cc","","",109,N],[12,"c_ispeed","","",109,N],[12,"c_ospeed","","",109,N],[3,"statvfs","","",N,N],[12,"f_bsize","","",110,N],[12,"f_frsize","","",110,N],[12,"f_blocks","","",110,N],[12,"f_bfree","","",110,N],[12,"f_bavail","","",110,N],[12,"f_files","","",110,N],[12,"f_ffree","","",110,N],[12,"f_favail","","",110,N],[12,"f_fsid","","",110,N],[12,"f_flag","","",110,N],[12,"f_namemax","","",110,N],[4,"c_void","","",N,N],[4,"FILE","","",N,N],[4,"fpos_t","","",N,N],[4,"DIR","","",N,N],[4,"locale_t","","",N,N],[4,"timezone","","",N,N],[4,"fpos64_t","","",N,N],[5,"FD_CLR","","",N,N],[5,"FD_ISSET","","",N,N],[5,"FD_SET","","",N,N],[5,"FD_ZERO","","",N,N],[5,"WIFSTOPPED","","",N,[[["c_int"]],["bool"]]],[5,"WSTOPSIG","","",N,[[["c_int"]],["c_int"]]],[5,"WIFCONTINUED","","",N,[[["c_int"]],["bool"]]],[5,"WIFSIGNALED","","",N,[[["c_int"]],["bool"]]],[5,"WTERMSIG","","",N,[[["c_int"]],["c_int"]]],[5,"WIFEXITED","","",N,[[["c_int"]],["bool"]]],[5,"WEXITSTATUS","","",N,[[["c_int"]],["c_int"]]],[5,"WCOREDUMP","","",N,[[["c_int"]],["bool"]]],[5,"QCMD","","",N,[[["c_int"],["c_int"]],["c_int"]]],[5,"IPOPT_COPIED","","",N,[[["u8"]],["u8"]]],[5,"IPOPT_CLASS","","",N,[[["u8"]],["u8"]]],[5,"IPOPT_NUMBER","","",N,[[["u8"]],["u8"]]],[5,"CPU_ZERO","","",N,N],[5,"CPU_SET","","",N,N],[5,"CPU_CLR","","",N,N],[5,"CPU_ISSET","","",N,[[["usize"],["cpu_set_t"]],["bool"]]],[5,"CPU_EQUAL","","",N,[[["cpu_set_t"],["cpu_set_t"]],["bool"]]],[5,"major","","",N,[[["dev_t"]],["c_uint"]]],[5,"minor","","",N,[[["dev_t"]],["c_uint"]]],[5,"makedev","","",N,[[["c_uint"],["c_uint"]],["dev_t"]]],[5,"IPTOS_TOS","","",N,[[["u8"]],["u8"]]],[5,"IPTOS_PREC","","",N,[[["u8"]],["u8"]]],[5,"RT_TOS","","",N,[[["u8"]],["u8"]]],[5,"RT_ADDRCLASS","","",N,[[["u32"]],["u32"]]],[5,"RT_LOCALADDR","","",N,[[["u32"]],["bool"]]],[5,"NLA_ALIGN","","",N,[[["c_int"]],["c_int"]]],[5,"isalnum","","",N,N],[5,"isalpha","","",N,N],[5,"iscntrl","","",N,N],[5,"isdigit","","",N,N],[5,"isgraph","","",N,N],[5,"islower","","",N,N],[5,"isprint","","",N,N],[5,"ispunct","","",N,N],[5,"isspace","","",N,N],[5,"isupper","","",N,N],[5,"isxdigit","","",N,N],[5,"tolower","","",N,N],[5,"toupper","","",N,N],[5,"fopen","","",N,N],[5,"freopen","","",N,N],[5,"fflush","","",N,N],[5,"fclose","","",N,N],[5,"remove","","",N,N],[5,"rename","","",N,N],[5,"tmpfile","","",N,N],[5,"setvbuf","","",N,N],[5,"setbuf","","",N,N],[5,"getchar","","",N,N],[5,"putchar","","",N,N],[5,"fgetc","","",N,N],[5,"fgets","","",N,N],[5,"fputc","","",N,N],[5,"fputs","","",N,N],[5,"puts","","",N,N],[5,"ungetc","","",N,N],[5,"fread","","",N,N],[5,"fwrite","","",N,N],[5,"fseek","","",N,N],[5,"ftell","","",N,N],[5,"rewind","","",N,N],[5,"fgetpos","","",N,N],[5,"fsetpos","","",N,N],[5,"feof","","",N,N],[5,"ferror","","",N,N],[5,"perror","","",N,N],[5,"atoi","","",N,N],[5,"strtod","","",N,N],[5,"strtol","","",N,N],[5,"strtoul","","",N,N],[5,"calloc","","",N,N],[5,"malloc","","",N,N],[5,"realloc","","",N,N],[5,"free","","",N,N],[5,"abort","","",N,N],[5,"exit","","",N,N],[5,"_exit","","",N,N],[5,"atexit","","",N,N],[5,"system","","",N,N],[5,"getenv","","",N,N],[5,"strcpy","","",N,N],[5,"strncpy","","",N,N],[5,"strcat","","",N,N],[5,"strncat","","",N,N],[5,"strcmp","","",N,N],[5,"strncmp","","",N,N],[5,"strcoll","","",N,N],[5,"strchr","","",N,N],[5,"strrchr","","",N,N],[5,"strspn","","",N,N],[5,"strcspn","","",N,N],[5,"strdup","","",N,N],[5,"strpbrk","","",N,N],[5,"strstr","","",N,N],[5,"strlen","","",N,N],[5,"strnlen","","",N,N],[5,"strerror","","",N,N],[5,"strtok","","",N,N],[5,"strxfrm","","",N,N],[5,"wcslen","","",N,N],[5,"wcstombs","","",N,N],[5,"memchr","","",N,N],[5,"memcmp","","",N,N],[5,"memcpy","","",N,N],[5,"memmove","","",N,N],[5,"memset","","",N,N],[5,"abs","","",N,N],[5,"atof","","",N,N],[5,"labs","","",N,N],[5,"rand","","",N,N],[5,"srand","","",N,N],[5,"getpwnam","","",N,N],[5,"getpwuid","","",N,N],[5,"fprintf","","",N,N],[5,"printf","","",N,N],[5,"snprintf","","",N,N],[5,"sprintf","","",N,N],[5,"fscanf","","",N,N],[5,"scanf","","",N,N],[5,"sscanf","","",N,N],[5,"getchar_unlocked","","",N,N],[5,"putchar_unlocked","","",N,N],[5,"socket","","",N,N],[5,"connect","","",N,N],[5,"listen","","",N,N],[5,"accept","","",N,N],[5,"getpeername","","",N,N],[5,"getsockname","","",N,N],[5,"setsockopt","","",N,N],[5,"socketpair","","",N,N],[5,"sendto","","",N,N],[5,"shutdown","","",N,N],[5,"chmod","","",N,N],[5,"fchmod","","",N,N],[5,"fstat","","",N,N],[5,"mkdir","","",N,N],[5,"stat","","",N,N],[5,"pclose","","",N,N],[5,"fdopen","","",N,N],[5,"fileno","","",N,N],[5,"open","","",N,N],[5,"creat","","",N,N],[5,"fcntl","","",N,N],[5,"opendir","","",N,N],[5,"readdir","","",N,N],[5,"readdir_r","","",N,N],[5,"closedir","","",N,N],[5,"rewinddir","","",N,N],[5,"openat","","",N,N],[5,"fchmodat","","",N,N],[5,"fchown","","",N,N],[5,"fchownat","","",N,N],[5,"fstatat","","",N,N],[5,"linkat","","",N,N],[5,"mkdirat","","",N,N],[5,"readlinkat","","",N,N],[5,"renameat","","",N,N],[5,"symlinkat","","",N,N],[5,"unlinkat","","",N,N],[5,"access","","",N,N],[5,"alarm","","",N,N],[5,"chdir","","",N,N],[5,"fchdir","","",N,N],[5,"chown","","",N,N],[5,"lchown","","",N,N],[5,"close","","",N,N],[5,"dup","","",N,N],[5,"dup2","","",N,N],[5,"execl","","",N,N],[5,"execle","","",N,N],[5,"execlp","","",N,N],[5,"execv","","",N,N],[5,"execve","","",N,N],[5,"execvp","","",N,N],[5,"fork","","",N,N],[5,"fpathconf","","",N,N],[5,"getcwd","","",N,N],[5,"getegid","","",N,N],[5,"geteuid","","",N,N],[5,"getgid","","",N,N],[5,"getgroups","","",N,N],[5,"getlogin","","",N,N],[5,"getopt","","",N,N],[5,"getpgid","","",N,N],[5,"getpgrp","","",N,N],[5,"getpid","","",N,N],[5,"getppid","","",N,N],[5,"getuid","","",N,N],[5,"isatty","","",N,N],[5,"link","","",N,N],[5,"lseek","","",N,N],[5,"pathconf","","",N,N],[5,"pause","","",N,N],[5,"pipe","","",N,N],[5,"posix_memalign","","",N,N],[5,"read","","",N,N],[5,"rmdir","","",N,N],[5,"seteuid","","",N,N],[5,"setgid","","",N,N],[5,"setpgid","","",N,N],[5,"setsid","","",N,N],[5,"setuid","","",N,N],[5,"sleep","","",N,N],[5,"nanosleep","","",N,N],[5,"tcgetpgrp","","",N,N],[5,"tcsetpgrp","","",N,N],[5,"ttyname","","",N,N],[5,"unlink","","",N,N],[5,"wait","","",N,N],[5,"waitpid","","",N,N],[5,"write","","",N,N],[5,"pread","","",N,N],[5,"pwrite","","",N,N],[5,"umask","","",N,N],[5,"utime","","",N,N],[5,"kill","","",N,N],[5,"killpg","","",N,N],[5,"mlock","","",N,N],[5,"munlock","","",N,N],[5,"mlockall","","",N,N],[5,"munlockall","","",N,N],[5,"mmap","","",N,N],[5,"munmap","","",N,N],[5,"if_nametoindex","","",N,N],[5,"if_indextoname","","",N,N],[5,"lstat","","",N,N],[5,"fsync","","",N,N],[5,"setenv","","",N,N],[5,"unsetenv","","",N,N],[5,"symlink","","",N,N],[5,"ftruncate","","",N,N],[5,"signal","","",N,N],[5,"getrlimit","","",N,N],[5,"setrlimit","","",N,N],[5,"getrusage","","",N,N],[5,"realpath","","",N,N],[5,"flock","","",N,N],[5,"gettimeofday","","",N,N],[5,"times","","",N,N],[5,"pthread_self","","",N,N],[5,"pthread_join","","",N,N],[5,"pthread_exit","","",N,N],[5,"pthread_attr_init","","",N,N],[5,"pthread_attr_destroy","","",N,N],[5,"pthread_attr_setstacksize","","",N,N],[5,"pthread_attr_setdetachstate","","",N,N],[5,"pthread_detach","","",N,N],[5,"sched_yield","","",N,N],[5,"pthread_key_create","","",N,N],[5,"pthread_key_delete","","",N,N],[5,"pthread_getspecific","","",N,N],[5,"pthread_setspecific","","",N,N],[5,"pthread_mutex_init","","",N,N],[5,"pthread_mutex_destroy","","",N,N],[5,"pthread_mutex_lock","","",N,N],[5,"pthread_mutex_trylock","","",N,N],[5,"pthread_mutex_unlock","","",N,N],[5,"pthread_mutexattr_init","","",N,N],[5,"pthread_mutexattr_destroy","","",N,N],[5,"pthread_mutexattr_settype","","",N,N],[5,"pthread_cond_init","","",N,N],[5,"pthread_cond_wait","","",N,N],[5,"pthread_cond_timedwait","","",N,N],[5,"pthread_cond_signal","","",N,N],[5,"pthread_cond_broadcast","","",N,N],[5,"pthread_cond_destroy","","",N,N],[5,"pthread_condattr_init","","",N,N],[5,"pthread_condattr_destroy","","",N,N],[5,"pthread_rwlock_init","","",N,N],[5,"pthread_rwlock_destroy","","",N,N],[5,"pthread_rwlock_rdlock","","",N,N],[5,"pthread_rwlock_tryrdlock","","",N,N],[5,"pthread_rwlock_wrlock","","",N,N],[5,"pthread_rwlock_trywrlock","","",N,N],[5,"pthread_rwlock_unlock","","",N,N],[5,"pthread_rwlockattr_init","","",N,N],[5,"pthread_rwlockattr_destroy","","",N,N],[5,"strerror_r","","",N,N],[5,"getsockopt","","",N,N],[5,"raise","","",N,N],[5,"sigaction","","",N,N],[5,"utimes","","",N,N],[5,"dlopen","","",N,N],[5,"dlerror","","",N,N],[5,"dlsym","","",N,N],[5,"dlclose","","",N,N],[5,"dladdr","","",N,N],[5,"getaddrinfo","","",N,N],[5,"freeaddrinfo","","",N,N],[5,"gai_strerror","","",N,N],[5,"res_init","","",N,N],[5,"gmtime_r","","",N,N],[5,"localtime_r","","",N,N],[5,"mktime","","",N,N],[5,"time","","",N,N],[5,"gmtime","","",N,N],[5,"localtime","","",N,N],[5,"difftime","","",N,N],[5,"mknod","","",N,N],[5,"uname","","",N,N],[5,"gethostname","","",N,N],[5,"getservbyname","","",N,N],[5,"getprotobyname","","",N,N],[5,"getprotobynumber","","",N,N],[5,"chroot","","",N,N],[5,"usleep","","",N,N],[5,"send","","",N,N],[5,"recv","","",N,N],[5,"putenv","","",N,N],[5,"poll","","",N,N],[5,"select","","",N,N],[5,"setlocale","","",N,N],[5,"localeconv","","",N,N],[5,"sem_destroy","","",N,N],[5,"sem_wait","","",N,N],[5,"sem_trywait","","",N,N],[5,"sem_post","","",N,N],[5,"sem_init","","",N,N],[5,"statvfs","","",N,N],[5,"fstatvfs","","",N,N],[5,"readlink","","",N,N],[5,"sigemptyset","","",N,N],[5,"sigaddset","","",N,N],[5,"sigfillset","","",N,N],[5,"sigdelset","","",N,N],[5,"sigismember","","",N,N],[5,"sigprocmask","","",N,N],[5,"sigpending","","",N,N],[5,"timegm","","",N,N],[5,"getsid","","",N,N],[5,"sysconf","","",N,N],[5,"mkfifo","","",N,N],[5,"pselect","","",N,N],[5,"fseeko","","",N,N],[5,"ftello","","",N,N],[5,"tcdrain","","",N,N],[5,"cfgetispeed","","",N,N],[5,"cfgetospeed","","",N,N],[5,"cfmakeraw","","",N,N],[5,"cfsetispeed","","",N,N],[5,"cfsetospeed","","",N,N],[5,"cfsetspeed","","",N,N],[5,"tcgetattr","","",N,N],[5,"tcsetattr","","",N,N],[5,"tcflow","","",N,N],[5,"tcflush","","",N,N],[5,"tcgetsid","","",N,N],[5,"tcsendbreak","","",N,N],[5,"mkstemp","","",N,N],[5,"mkdtemp","","",N,N],[5,"tmpnam","","",N,N],[5,"openlog","","",N,N],[5,"closelog","","",N,N],[5,"setlogmask","","",N,N],[5,"syslog","","",N,N],[5,"nice","","",N,N],[5,"grantpt","","",N,N],[5,"posix_openpt","","",N,N],[5,"ptsname","","",N,N],[5,"unlockpt","","",N,N],[5,"fdatasync","","",N,N],[5,"mincore","","",N,N],[5,"clock_getres","","",N,N],[5,"clock_gettime","","",N,N],[5,"clock_settime","","",N,N],[5,"dirfd","","",N,N],[5,"pthread_getattr_np","","",N,N],[5,"pthread_attr_getstack","","",N,N],[5,"memalign","","",N,N],[5,"setgroups","","",N,N],[5,"pipe2","","",N,N],[5,"statfs","","",N,N],[5,"statfs64","","",N,N],[5,"fstatfs","","",N,N],[5,"fstatfs64","","",N,N],[5,"statvfs64","","",N,N],[5,"fstatvfs64","","",N,N],[5,"memrchr","","",N,N],[5,"posix_fadvise","","",N,N],[5,"futimens","","",N,N],[5,"utimensat","","",N,N],[5,"duplocale","","",N,N],[5,"freelocale","","",N,N],[5,"newlocale","","",N,N],[5,"uselocale","","",N,N],[5,"creat64","","",N,N],[5,"fstat64","","",N,N],[5,"fstatat64","","",N,N],[5,"ftruncate64","","",N,N],[5,"getrlimit64","","",N,N],[5,"lseek64","","",N,N],[5,"lstat64","","",N,N],[5,"mmap64","","",N,N],[5,"open64","","",N,N],[5,"openat64","","",N,N],[5,"pread64","","",N,N],[5,"preadv64","","",N,N],[5,"pwrite64","","",N,N],[5,"pwritev64","","",N,N],[5,"readdir64","","",N,N],[5,"readdir64_r","","",N,N],[5,"setrlimit64","","",N,N],[5,"stat64","","",N,N],[5,"truncate64","","",N,N],[5,"fdopendir","","",N,N],[5,"mknodat","","",N,N],[5,"pthread_condattr_getclock","","",N,N],[5,"pthread_condattr_setclock","","",N,N],[5,"pthread_condattr_setpshared","","",N,N],[5,"accept4","","",N,N],[5,"pthread_mutexattr_setpshared","","",N,N],[5,"pthread_rwlockattr_getpshared","","",N,N],[5,"pthread_rwlockattr_setpshared","","",N,N],[5,"ptsname_r","","",N,N],[5,"clearenv","","",N,N],[5,"waitid","","",N,N],[5,"setreuid","","",N,N],[5,"setregid","","",N,N],[5,"getresuid","","",N,N],[5,"getresgid","","",N,N],[5,"acct","","",N,N],[5,"brk","","",N,N],[5,"sbrk","","",N,N],[5,"vfork","","",N,N],[5,"setresgid","","",N,N],[5,"setresuid","","",N,N],[5,"wait4","","",N,N],[5,"openpty","","",N,N],[5,"execvpe","","",N,N],[5,"fexecve","","",N,N],[5,"getifaddrs","","",N,N],[5,"freeifaddrs","","",N,N],[5,"bind","","",N,N],[5,"writev","","",N,N],[5,"readv","","",N,N],[5,"sendmsg","","",N,N],[5,"recvmsg","","",N,N],[5,"aio_read","","",N,N],[5,"aio_write","","",N,N],[5,"aio_fsync","","",N,N],[5,"aio_error","","",N,N],[5,"aio_return","","",N,N],[5,"aio_suspend","","",N,N],[5,"aio_cancel","","",N,N],[5,"lio_listio","","",N,N],[5,"lutimes","","",N,N],[5,"setpwent","","",N,N],[5,"endpwent","","",N,N],[5,"getpwent","","",N,N],[5,"setgrent","","",N,N],[5,"endgrent","","",N,N],[5,"getgrent","","",N,N],[5,"setspent","","",N,N],[5,"endspent","","",N,N],[5,"getspent","","",N,N],[5,"getspnam","","",N,N],[5,"shm_open","","",N,N],[5,"shmget","","",N,N],[5,"shmat","","",N,N],[5,"shmdt","","",N,N],[5,"shmctl","","",N,N],[5,"ftok","","",N,N],[5,"semget","","",N,N],[5,"semop","","",N,N],[5,"semctl","","",N,N],[5,"msgctl","","",N,N],[5,"msgget","","",N,N],[5,"msgrcv","","",N,N],[5,"msgsnd","","",N,N],[5,"mprotect","","",N,N],[5,"__errno_location","","",N,N],[5,"fopen64","","",N,N],[5,"freopen64","","",N,N],[5,"tmpfile64","","",N,N],[5,"fgetpos64","","",N,N],[5,"fsetpos64","","",N,N],[5,"fseeko64","","",N,N],[5,"ftello64","","",N,N],[5,"fallocate","","",N,N],[5,"posix_fallocate","","",N,N],[5,"readahead","","",N,N],[5,"getxattr","","",N,N],[5,"lgetxattr","","",N,N],[5,"fgetxattr","","",N,N],[5,"setxattr","","",N,N],[5,"lsetxattr","","",N,N],[5,"fsetxattr","","",N,N],[5,"listxattr","","",N,N],[5,"llistxattr","","",N,N],[5,"flistxattr","","",N,N],[5,"removexattr","","",N,N],[5,"lremovexattr","","",N,N],[5,"fremovexattr","","",N,N],[5,"signalfd","","",N,N],[5,"timerfd_create","","",N,N],[5,"timerfd_gettime","","",N,N],[5,"timerfd_settime","","",N,N],[5,"pwritev","","",N,N],[5,"preadv","","",N,N],[5,"quotactl","","",N,N],[5,"mq_open","","",N,N],[5,"mq_close","","",N,N],[5,"mq_unlink","","",N,N],[5,"mq_receive","","",N,N],[5,"mq_send","","",N,N],[5,"mq_getattr","","",N,N],[5,"mq_setattr","","",N,N],[5,"epoll_pwait","","",N,N],[5,"dup3","","",N,N],[5,"mkostemp","","",N,N],[5,"mkostemps","","",N,N],[5,"sigtimedwait","","",N,N],[5,"sigwaitinfo","","",N,N],[5,"nl_langinfo_l","","",N,N],[5,"getnameinfo","","",N,N],[5,"pthread_setschedprio","","",N,N],[5,"prlimit","","",N,N],[5,"prlimit64","","",N,N],[5,"getloadavg","","",N,N],[5,"process_vm_readv","","",N,N],[5,"process_vm_writev","","",N,N],[5,"reboot","","",N,N],[5,"setfsgid","","",N,N],[5,"setfsuid","","",N,N],[5,"mkfifoat","","",N,N],[5,"if_nameindex","","",N,N],[5,"if_freenameindex","","",N,N],[5,"sync_file_range","","",N,N],[5,"mremap","","",N,N],[5,"glob","","",N,N],[5,"globfree","","",N,N],[5,"posix_madvise","","",N,N],[5,"shm_unlink","","",N,N],[5,"seekdir","","",N,N],[5,"telldir","","",N,N],[5,"madvise","","",N,N],[5,"msync","","",N,N],[5,"remap_file_pages","","",N,N],[5,"recvfrom","","",N,N],[5,"mkstemps","","",N,N],[5,"futimes","","",N,N],[5,"nl_langinfo","","",N,N],[5,"getdomainname","","",N,N],[5,"setdomainname","","",N,N],[5,"vhangup","","",N,N],[5,"sendmmsg","","",N,N],[5,"recvmmsg","","",N,N],[5,"sync","","",N,N],[5,"syscall","","",N,N],[5,"sched_getaffinity","","",N,N],[5,"sched_setaffinity","","",N,N],[5,"epoll_create","","",N,N],[5,"epoll_create1","","",N,N],[5,"epoll_wait","","",N,N],[5,"epoll_ctl","","",N,N],[5,"pthread_getschedparam","","",N,N],[5,"unshare","","",N,N],[5,"umount","","",N,N],[5,"sched_get_priority_max","","",N,N],[5,"tee","","",N,N],[5,"settimeofday","","",N,N],[5,"splice","","",N,N],[5,"eventfd","","",N,N],[5,"sched_rr_get_interval","","",N,N],[5,"sem_timedwait","","",N,N],[5,"sem_getvalue","","",N,N],[5,"sched_setparam","","",N,N],[5,"setns","","",N,N],[5,"swapoff","","",N,N],[5,"vmsplice","","",N,N],[5,"mount","","",N,N],[5,"personality","","",N,N],[5,"prctl","","",N,N],[5,"sched_getparam","","",N,N],[5,"ppoll","","",N,N],[5,"pthread_mutex_timedlock","","",N,N],[5,"clone","","",N,N],[5,"sched_getscheduler","","",N,N],[5,"clock_nanosleep","","",N,N],[5,"pthread_attr_getguardsize","","",N,N],[5,"sethostname","","",N,N],[5,"sched_get_priority_min","","",N,N],[5,"pthread_condattr_getpshared","","",N,N],[5,"sysinfo","","",N,N],[5,"umount2","","",N,N],[5,"pthread_setschedparam","","",N,N],[5,"swapon","","",N,N],[5,"sched_setscheduler","","",N,N],[5,"sendfile","","",N,N],[5,"sigsuspend","","",N,N],[5,"getgrgid_r","","",N,N],[5,"sigaltstack","","",N,N],[5,"sem_close","","",N,N],[5,"getdtablesize","","",N,N],[5,"getgrnam_r","","",N,N],[5,"initgroups","","",N,N],[5,"pthread_sigmask","","",N,N],[5,"sem_open","","",N,N],[5,"getgrnam","","",N,N],[5,"pthread_cancel","","",N,N],[5,"pthread_kill","","",N,N],[5,"sem_unlink","","",N,N],[5,"daemon","","",N,N],[5,"getpwnam_r","","",N,N],[5,"getpwuid_r","","",N,N],[5,"sigwait","","",N,N],[5,"pthread_atfork","","",N,N],[5,"getgrgid","","",N,N],[5,"getgrouplist","","",N,N],[5,"pthread_mutexattr_getpshared","","",N,N],[5,"popen","","",N,N],[5,"faccessat","","",N,N],[5,"pthread_create","","",N,N],[5,"dl_iterate_phdr","","",N,N],[5,"setmntent","","",N,N],[5,"getmntent","","",N,N],[5,"addmntent","","",N,N],[5,"endmntent","","",N,N],[5,"hasmntopt","","",N,N],[5,"posix_spawn","","",N,N],[5,"posix_spawnp","","",N,N],[5,"posix_spawnattr_init","","",N,N],[5,"posix_spawnattr_destroy","","",N,N],[5,"posix_spawnattr_getsigdefault","","",N,N],[5,"posix_spawnattr_setsigdefault","","",N,N],[5,"posix_spawnattr_getsigmask","","",N,N],[5,"posix_spawnattr_setsigmask","","",N,N],[5,"posix_spawnattr_getflags","","",N,N],[5,"posix_spawnattr_setflags","","",N,N],[5,"posix_spawnattr_getpgroup","","",N,N],[5,"posix_spawnattr_setpgroup","","",N,N],[5,"posix_spawnattr_getschedpolicy","","",N,N],[5,"posix_spawnattr_setschedpolicy","","",N,N],[5,"posix_spawnattr_getschedparam","","",N,N],[5,"posix_spawnattr_setschedparam","","",N,N],[5,"posix_spawn_file_actions_init","","",N,N],[5,"posix_spawn_file_actions_destroy","","",N,N],[5,"posix_spawn_file_actions_addopen","","",N,N],[5,"posix_spawn_file_actions_addclose","","",N,N],[5,"posix_spawn_file_actions_adddup2","","",N,N],[5,"fread_unlocked","","",N,N],[5,"utmpxname","","",N,N],[5,"getutxent","","",N,N],[5,"getutxid","","",N,N],[5,"getutxline","","",N,N],[5,"pututxline","","",N,N],[5,"setutxent","","",N,N],[5,"endutxent","","",N,N],[5,"getpt","","",N,N],[5,"ioctl","","",N,N],[5,"backtrace","","",N,N],[5,"glob64","","",N,N],[5,"globfree64","","",N,N],[5,"ptrace","","",N,N],[5,"pthread_attr_getaffinity_np","","",N,N],[5,"pthread_attr_setaffinity_np","","",N,N],[5,"getpriority","","",N,N],[5,"setpriority","","",N,N],[5,"pthread_getaffinity_np","","",N,N],[5,"pthread_setaffinity_np","","",N,N],[5,"pthread_rwlockattr_getkind_np","","",N,N],[5,"pthread_rwlockattr_setkind_np","","",N,N],[5,"sched_getcpu","","",N,N],[5,"mallinfo","","",N,N],[5,"malloc_usable_size","","",N,N],[5,"getauxval","","",N,N],[5,"getpwent_r","","",N,N],[5,"getgrent_r","","",N,N],[5,"getcontext","","",N,N],[5,"setcontext","","",N,N],[5,"makecontext","","",N,N],[5,"swapcontext","","",N,N],[5,"iopl","","",N,N],[5,"ioperm","","",N,N],[5,"sysctl","","",N,N],[11,"clone","","",95,[[["self"]],["stat"]]],[11,"clone","","",96,[[["self"]],["stat64"]]],[11,"clone","","",97,[[["self"]],["statfs64"]]],[11,"clone","","",98,[[["self"]],["statvfs64"]]],[11,"clone","","",111,[[["self"]],["pthread_attr_t"]]],[11,"clone","","",99,[[["self"]],["_libc_fpxreg"]]],[11,"clone","","",100,[[["self"]],["_libc_xmmreg"]]],[11,"clone","","",101,[[["self"]],["_libc_fpstate"]]],[11,"clone","","",102,[[["self"]],["user_fpregs_struct"]]],[11,"clone","","",103,[[["self"]],["user_regs_struct"]]],[11,"clone","","",104,[[["self"]],["user"]]],[11,"clone","","",105,[[["self"]],["mcontext_t"]]],[11,"clone","","",106,[[["self"]],["ucontext_t"]]],[11,"clone","","",107,[[["self"]],["ipc_perm"]]],[11,"clone","","",108,[[["self"]],["shmid_ds"]]],[11,"clone","","",109,[[["self"]],["termios2"]]],[11,"clone","","",110,[[["self"]],["statvfs"]]],[11,"clone","","",112,[[["self"]],["sigset_t"]]],[11,"clone","","",93,[[["self"]],["sysinfo"]]],[11,"clone","","",94,[[["self"]],["msqid_ds"]]],[11,"clone","","",72,[[["self"]],["aiocb"]]],[11,"clone","","",73,[[["self"]],["__exit_status"]]],[11,"clone","","",74,[[["self"]],["__timeval"]]],[11,"clone","","",75,[[["self"]],["utmpx"]]],[11,"clone","","",76,[[["self"]],["sigaction"]]],[11,"clone","","",77,[[["self"]],["stack_t"]]],[11,"clone","","",78,[[["self"]],["siginfo_t"]]],[11,"clone","","",79,[[["self"]],["glob64_t"]]],[11,"clone","","",80,[[["self"]],["statfs"]]],[11,"clone","","",81,[[["self"]],["msghdr"]]],[11,"clone","","",82,[[["self"]],["cmsghdr"]]],[11,"clone","","",83,[[["self"]],["termios"]]],[11,"clone","","",84,[[["self"]],["flock"]]],[11,"clone","","",113,[[["self"]],["sem_t"]]],[11,"clone","","",85,[[["self"]],["mallinfo"]]],[11,"clone","","",86,[[["self"]],["nlmsghdr"]]],[11,"clone","","",87,[[["self"]],["nlmsgerr"]]],[11,"clone","","",88,[[["self"]],["nl_pktinfo"]]],[11,"clone","","",89,[[["self"]],["nl_mmap_req"]]],[11,"clone","","",90,[[["self"]],["nl_mmap_hdr"]]],[11,"clone","","",91,[[["self"]],["nlattr"]]],[11,"clone","","",92,[[["self"]],["rtentry"]]],[11,"clone","","",37,[[["self"]],["dirent"]]],[11,"clone","","",38,[[["self"]],["dirent64"]]],[11,"clone","","",39,[[["self"]],["rlimit64"]]],[11,"clone","","",40,[[["self"]],["glob_t"]]],[11,"clone","","",114,[[["self"]],["pthread_mutex_t"]]],[11,"clone","","",115,[[["self"]],["pthread_rwlock_t"]]],[11,"clone","","",116,[[["self"]],["pthread_mutexattr_t"]]],[11,"clone","","",117,[[["self"]],["pthread_rwlockattr_t"]]],[11,"clone","","",118,[[["self"]],["pthread_cond_t"]]],[11,"clone","","",119,[[["self"]],["pthread_condattr_t"]]],[11,"clone","","",41,[[["self"]],["passwd"]]],[11,"clone","","",42,[[["self"]],["spwd"]]],[11,"clone","","",43,[[["self"]],["dqblk"]]],[11,"clone","","",44,[[["self"]],["signalfd_siginfo"]]],[11,"clone","","",45,[[["self"]],["itimerspec"]]],[11,"clone","","",120,[[["self"]],["fsid_t"]]],[11,"clone","","",46,[[["self"]],["mq_attr"]]],[11,"clone","","",121,[[["self"]],["cpu_set_t"]]],[11,"clone","","",47,[[["self"]],["if_nameindex"]]],[11,"clone","","",48,[[["self"]],["msginfo"]]],[11,"clone","","",49,[[["self"]],["mmsghdr"]]],[11,"clone","","",50,[[["self"]],["sembuf"]]],[11,"clone","","",51,[[["self"]],["input_event"]]],[11,"clone","","",52,[[["self"]],["input_id"]]],[11,"clone","","",53,[[["self"]],["input_absinfo"]]],[11,"clone","","",54,[[["self"]],["input_keymap_entry"]]],[11,"clone","","",55,[[["self"]],["input_mask"]]],[11,"clone","","",56,[[["self"]],["ff_replay"]]],[11,"clone","","",57,[[["self"]],["ff_trigger"]]],[11,"clone","","",58,[[["self"]],["ff_envelope"]]],[11,"clone","","",59,[[["self"]],["ff_constant_effect"]]],[11,"clone","","",60,[[["self"]],["ff_ramp_effect"]]],[11,"clone","","",61,[[["self"]],["ff_condition_effect"]]],[11,"clone","","",62,[[["self"]],["ff_periodic_effect"]]],[11,"clone","","",63,[[["self"]],["ff_rumble_effect"]]],[11,"clone","","",64,[[["self"]],["ff_effect"]]],[11,"clone","","",65,[[["self"]],["dl_phdr_info"]]],[11,"clone","","",66,[[["self"]],["elf32_phdr"]]],[11,"clone","","",67,[[["self"]],["elf64_phdr"]]],[11,"clone","","",68,[[["self"]],["ucred"]]],[11,"clone","","",69,[[["self"]],["mntent"]]],[11,"clone","","",122,[[["self"]],["posix_spawn_file_actions_t"]]],[11,"clone","","",123,[[["self"]],["posix_spawnattr_t"]]],[11,"clone","","",70,[[["self"]],["genlmsghdr"]]],[11,"clone","","",71,[[["self"]],["in6_pktinfo"]]],[11,"clone","","",20,[[["self"]],["sockaddr"]]],[11,"clone","","",21,[[["self"]],["sockaddr_in"]]],[11,"clone","","",22,[[["self"]],["sockaddr_in6"]]],[11,"clone","","",23,[[["self"]],["sockaddr_un"]]],[11,"clone","","",24,[[["self"]],["sockaddr_storage"]]],[11,"clone","","",25,[[["self"]],["addrinfo"]]],[11,"clone","","",26,[[["self"]],["sockaddr_nl"]]],[11,"clone","","",27,[[["self"]],["sockaddr_ll"]]],[11,"clone","","",124,[[["self"]],["fd_set"]]],[11,"clone","","",28,[[["self"]],["tm"]]],[11,"clone","","",29,[[["self"]],["sched_param"]]],[11,"clone","","",30,[[["self"]],["dl_info"]]],[11,"clone","","",31,[[["self"]],["epoll_event"]]],[11,"clone","","",32,[[["self"]],["utsname"]]],[11,"clone","","",33,[[["self"]],["lconv"]]],[11,"clone","","",34,[[["self"]],["sigevent"]]],[11,"clone","","",35,[[["self"]],["in_pktinfo"]]],[11,"clone","","",36,[[["self"]],["ifaddrs"]]],[11,"clone","","",125,[[["self"]],["in6_rtmsg"]]],[11,"clone","","",0,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["utimbuf"]]],[11,"clone","","",2,[[["self"]],["timeval"]]],[11,"clone","","",3,[[["self"]],["timespec"]]],[11,"clone","","",4,[[["self"]],["rlimit"]]],[11,"clone","","",5,[[["self"]],["rusage"]]],[11,"clone","","",6,[[["self"]],["in_addr"]]],[11,"clone","","",7,[[["self"]],["in6_addr"]]],[11,"clone","","",8,[[["self"]],["ip_mreq"]]],[11,"clone","","",9,[[["self"]],["ipv6_mreq"]]],[11,"clone","","",10,[[["self"]],["hostent"]]],[11,"clone","","",11,[[["self"]],["iovec"]]],[11,"clone","","",12,[[["self"]],["pollfd"]]],[11,"clone","","",13,[[["self"]],["winsize"]]],[11,"clone","","",14,[[["self"]],["linger"]]],[11,"clone","","",15,[[["self"]],["sigval"]]],[11,"clone","","",16,[[["self"]],["itimerval"]]],[11,"clone","","",17,[[["self"]],["tms"]]],[11,"clone","","",18,[[["self"]],["servent"]]],[11,"clone","","",19,[[["self"]],["protoent"]]],[6,"int8_t","","",N,N],[6,"int16_t","","",N,N],[6,"int32_t","","",N,N],[6,"int64_t","","",N,N],[6,"uint8_t","","",N,N],[6,"uint16_t","","",N,N],[6,"uint32_t","","",N,N],[6,"uint64_t","","",N,N],[6,"c_schar","","",N,N],[6,"c_uchar","","",N,N],[6,"c_short","","",N,N],[6,"c_ushort","","",N,N],[6,"c_int","","",N,N],[6,"c_uint","","",N,N],[6,"c_float","","",N,N],[6,"c_double","","",N,N],[6,"c_longlong","","",N,N],[6,"c_ulonglong","","",N,N],[6,"intmax_t","","",N,N],[6,"uintmax_t","","",N,N],[6,"size_t","","",N,N],[6,"ptrdiff_t","","",N,N],[6,"intptr_t","","",N,N],[6,"uintptr_t","","",N,N],[6,"ssize_t","","",N,N],[6,"pid_t","","",N,N],[6,"uid_t","","",N,N],[6,"gid_t","","",N,N],[6,"in_addr_t","","",N,N],[6,"in_port_t","","",N,N],[6,"sighandler_t","","",N,N],[6,"cc_t","","",N,N],[6,"sa_family_t","","",N,N],[6,"pthread_key_t","","",N,N],[6,"speed_t","","",N,N],[6,"tcflag_t","","",N,N],[6,"clockid_t","","",N,N],[6,"key_t","","",N,N],[6,"id_t","","",N,N],[6,"useconds_t","","",N,N],[6,"dev_t","","",N,N],[6,"socklen_t","","",N,N],[6,"pthread_t","","",N,N],[6,"mode_t","","",N,N],[6,"ino64_t","","",N,N],[6,"off64_t","","",N,N],[6,"blkcnt64_t","","",N,N],[6,"rlim64_t","","",N,N],[6,"mqd_t","","",N,N],[6,"nfds_t","","",N,N],[6,"nl_item","","",N,N],[6,"idtype_t","","",N,N],[6,"loff_t","","",N,N],[6,"__u8","","",N,N],[6,"__u16","","",N,N],[6,"__s16","","",N,N],[6,"__u32","","",N,N],[6,"__s32","","",N,N],[6,"Elf32_Half","","",N,N],[6,"Elf32_Word","","",N,N],[6,"Elf32_Off","","",N,N],[6,"Elf32_Addr","","",N,N],[6,"Elf64_Half","","",N,N],[6,"Elf64_Word","","",N,N],[6,"Elf64_Off","","",N,N],[6,"Elf64_Addr","","",N,N],[6,"Elf64_Xword","","",N,N],[6,"__priority_which_t","","",N,N],[6,"clock_t","","",N,N],[6,"time_t","","",N,N],[6,"ino_t","","",N,N],[6,"off_t","","",N,N],[6,"blkcnt_t","","",N,N],[6,"__fsword_t","","",N,N],[6,"shmatt_t","","",N,N],[6,"msgqnum_t","","",N,N],[6,"msglen_t","","",N,N],[6,"fsblkcnt_t","","",N,N],[6,"fsfilcnt_t","","",N,N],[6,"rlim_t","","",N,N],[6,"c_char","","",N,N],[6,"wchar_t","","",N,N],[6,"nlink_t","","",N,N],[6,"blksize_t","","",N,N],[6,"greg_t","","",N,N],[6,"suseconds_t","","",N,N],[6,"__u64","","",N,N],[6,"c_long","","",N,N],[6,"c_ulong","","",N,N],[17,"INT_MIN","","",N,N],[17,"INT_MAX","","",N,N],[17,"SIG_DFL","","",N,N],[17,"SIG_IGN","","",N,N],[17,"SIG_ERR","","",N,N],[17,"DT_UNKNOWN","","",N,N],[17,"DT_FIFO","","",N,N],[17,"DT_CHR","","",N,N],[17,"DT_DIR","","",N,N],[17,"DT_BLK","","",N,N],[17,"DT_REG","","",N,N],[17,"DT_LNK","","",N,N],[17,"DT_SOCK","","",N,N],[17,"FD_CLOEXEC","","",N,N],[17,"USRQUOTA","","",N,N],[17,"GRPQUOTA","","",N,N],[17,"SIGIOT","","",N,N],[17,"S_ISUID","","",N,N],[17,"S_ISGID","","",N,N],[17,"S_ISVTX","","",N,N],[17,"IF_NAMESIZE","","",N,N],[17,"IFNAMSIZ","","",N,N],[17,"LOG_EMERG","","",N,N],[17,"LOG_ALERT","","",N,N],[17,"LOG_CRIT","","",N,N],[17,"LOG_ERR","","",N,N],[17,"LOG_WARNING","","",N,N],[17,"LOG_NOTICE","","",N,N],[17,"LOG_INFO","","",N,N],[17,"LOG_DEBUG","","",N,N],[17,"LOG_KERN","","",N,N],[17,"LOG_USER","","",N,N],[17,"LOG_MAIL","","",N,N],[17,"LOG_DAEMON","","",N,N],[17,"LOG_AUTH","","",N,N],[17,"LOG_SYSLOG","","",N,N],[17,"LOG_LPR","","",N,N],[17,"LOG_NEWS","","",N,N],[17,"LOG_UUCP","","",N,N],[17,"LOG_LOCAL0","","",N,N],[17,"LOG_LOCAL1","","",N,N],[17,"LOG_LOCAL2","","",N,N],[17,"LOG_LOCAL3","","",N,N],[17,"LOG_LOCAL4","","",N,N],[17,"LOG_LOCAL5","","",N,N],[17,"LOG_LOCAL6","","",N,N],[17,"LOG_LOCAL7","","",N,N],[17,"LOG_PID","","",N,N],[17,"LOG_CONS","","",N,N],[17,"LOG_ODELAY","","",N,N],[17,"LOG_NDELAY","","",N,N],[17,"LOG_NOWAIT","","",N,N],[17,"LOG_PRIMASK","","",N,N],[17,"LOG_FACMASK","","",N,N],[17,"PRIO_PROCESS","","",N,N],[17,"PRIO_PGRP","","",N,N],[17,"PRIO_USER","","",N,N],[17,"PRIO_MIN","","",N,N],[17,"PRIO_MAX","","",N,N],[17,"IPPROTO_ICMP","","",N,N],[17,"IPPROTO_ICMPV6","","",N,N],[17,"IPPROTO_TCP","","",N,N],[17,"IPPROTO_UDP","","",N,N],[17,"IPPROTO_IP","","",N,N],[17,"IPPROTO_IPV6","","",N,N],[17,"INADDR_LOOPBACK","","",N,N],[17,"INADDR_ANY","","",N,N],[17,"INADDR_BROADCAST","","",N,N],[17,"INADDR_NONE","","",N,N],[17,"EXIT_FAILURE","","",N,N],[17,"EXIT_SUCCESS","","",N,N],[17,"RAND_MAX","","",N,N],[17,"EOF","","",N,N],[17,"SEEK_SET","","",N,N],[17,"SEEK_CUR","","",N,N],[17,"SEEK_END","","",N,N],[17,"_IOFBF","","",N,N],[17,"_IONBF","","",N,N],[17,"_IOLBF","","",N,N],[17,"F_DUPFD","","",N,N],[17,"F_GETFD","","",N,N],[17,"F_SETFD","","",N,N],[17,"F_GETFL","","",N,N],[17,"F_SETFL","","",N,N],[17,"F_SETLEASE","","",N,N],[17,"F_GETLEASE","","",N,N],[17,"F_NOTIFY","","",N,N],[17,"F_CANCELLK","","",N,N],[17,"F_DUPFD_CLOEXEC","","",N,N],[17,"F_SETPIPE_SZ","","",N,N],[17,"F_GETPIPE_SZ","","",N,N],[17,"F_ADD_SEALS","","",N,N],[17,"F_GET_SEALS","","",N,N],[17,"F_SEAL_SEAL","","",N,N],[17,"F_SEAL_SHRINK","","",N,N],[17,"F_SEAL_GROW","","",N,N],[17,"F_SEAL_WRITE","","",N,N],[17,"SIGTRAP","","",N,N],[17,"PTHREAD_CREATE_JOINABLE","","",N,N],[17,"PTHREAD_CREATE_DETACHED","","",N,N],[17,"CLOCK_REALTIME","","",N,N],[17,"CLOCK_MONOTONIC","","",N,N],[17,"CLOCK_PROCESS_CPUTIME_ID","","",N,N],[17,"CLOCK_THREAD_CPUTIME_ID","","",N,N],[17,"CLOCK_MONOTONIC_RAW","","",N,N],[17,"CLOCK_REALTIME_COARSE","","",N,N],[17,"CLOCK_MONOTONIC_COARSE","","",N,N],[17,"CLOCK_BOOTTIME","","",N,N],[17,"CLOCK_REALTIME_ALARM","","",N,N],[17,"CLOCK_BOOTTIME_ALARM","","",N,N],[17,"TIMER_ABSTIME","","",N,N],[17,"RLIMIT_CPU","","",N,N],[17,"RLIMIT_FSIZE","","",N,N],[17,"RLIMIT_DATA","","",N,N],[17,"RLIMIT_STACK","","",N,N],[17,"RLIMIT_CORE","","",N,N],[17,"RLIMIT_LOCKS","","",N,N],[17,"RLIMIT_SIGPENDING","","",N,N],[17,"RLIMIT_MSGQUEUE","","",N,N],[17,"RLIMIT_NICE","","",N,N],[17,"RLIMIT_RTPRIO","","",N,N],[17,"RUSAGE_SELF","","",N,N],[17,"O_RDONLY","","",N,N],[17,"O_WRONLY","","",N,N],[17,"O_RDWR","","",N,N],[17,"SOCK_CLOEXEC","","",N,N],[17,"S_IFIFO","","",N,N],[17,"S_IFCHR","","",N,N],[17,"S_IFBLK","","",N,N],[17,"S_IFDIR","","",N,N],[17,"S_IFREG","","",N,N],[17,"S_IFLNK","","",N,N],[17,"S_IFSOCK","","",N,N],[17,"S_IFMT","","",N,N],[17,"S_IRWXU","","",N,N],[17,"S_IXUSR","","",N,N],[17,"S_IWUSR","","",N,N],[17,"S_IRUSR","","",N,N],[17,"S_IRWXG","","",N,N],[17,"S_IXGRP","","",N,N],[17,"S_IWGRP","","",N,N],[17,"S_IRGRP","","",N,N],[17,"S_IRWXO","","",N,N],[17,"S_IXOTH","","",N,N],[17,"S_IWOTH","","",N,N],[17,"S_IROTH","","",N,N],[17,"F_OK","","",N,N],[17,"R_OK","","",N,N],[17,"W_OK","","",N,N],[17,"X_OK","","",N,N],[17,"STDIN_FILENO","","",N,N],[17,"STDOUT_FILENO","","",N,N],[17,"STDERR_FILENO","","",N,N],[17,"SIGHUP","","",N,N],[17,"SIGINT","","",N,N],[17,"SIGQUIT","","",N,N],[17,"SIGILL","","",N,N],[17,"SIGABRT","","",N,N],[17,"SIGFPE","","",N,N],[17,"SIGKILL","","",N,N],[17,"SIGSEGV","","",N,N],[17,"SIGPIPE","","",N,N],[17,"SIGALRM","","",N,N],[17,"SIGTERM","","",N,N],[17,"PROT_NONE","","",N,N],[17,"PROT_READ","","",N,N],[17,"PROT_WRITE","","",N,N],[17,"PROT_EXEC","","",N,N],[17,"LC_CTYPE","","",N,N],[17,"LC_NUMERIC","","",N,N],[17,"LC_TIME","","",N,N],[17,"LC_COLLATE","","",N,N],[17,"LC_MONETARY","","",N,N],[17,"LC_MESSAGES","","",N,N],[17,"LC_ALL","","",N,N],[17,"LC_CTYPE_MASK","","",N,N],[17,"LC_NUMERIC_MASK","","",N,N],[17,"LC_TIME_MASK","","",N,N],[17,"LC_COLLATE_MASK","","",N,N],[17,"LC_MONETARY_MASK","","",N,N],[17,"LC_MESSAGES_MASK","","",N,N],[17,"MAP_FILE","","",N,N],[17,"MAP_SHARED","","",N,N],[17,"MAP_PRIVATE","","",N,N],[17,"MAP_FIXED","","",N,N],[17,"MAP_FAILED","","",N,N],[17,"MS_ASYNC","","",N,N],[17,"MS_INVALIDATE","","",N,N],[17,"MS_SYNC","","",N,N],[17,"MS_RDONLY","","",N,N],[17,"MS_NOSUID","","",N,N],[17,"MS_NODEV","","",N,N],[17,"MS_NOEXEC","","",N,N],[17,"MS_SYNCHRONOUS","","",N,N],[17,"MS_REMOUNT","","",N,N],[17,"MS_MANDLOCK","","",N,N],[17,"MS_DIRSYNC","","",N,N],[17,"MS_NOATIME","","",N,N],[17,"MS_NODIRATIME","","",N,N],[17,"MS_BIND","","",N,N],[17,"MS_MOVE","","",N,N],[17,"MS_REC","","",N,N],[17,"MS_SILENT","","",N,N],[17,"MS_POSIXACL","","",N,N],[17,"MS_UNBINDABLE","","",N,N],[17,"MS_PRIVATE","","",N,N],[17,"MS_SLAVE","","",N,N],[17,"MS_SHARED","","",N,N],[17,"MS_RELATIME","","",N,N],[17,"MS_KERNMOUNT","","",N,N],[17,"MS_I_VERSION","","",N,N],[17,"MS_STRICTATIME","","",N,N],[17,"MS_ACTIVE","","",N,N],[17,"MS_NOUSER","","",N,N],[17,"MS_MGC_VAL","","",N,N],[17,"MS_MGC_MSK","","",N,N],[17,"MS_RMT_MASK","","",N,N],[17,"EPERM","","",N,N],[17,"ENOENT","","",N,N],[17,"ESRCH","","",N,N],[17,"EINTR","","",N,N],[17,"EIO","","",N,N],[17,"ENXIO","","",N,N],[17,"E2BIG","","",N,N],[17,"ENOEXEC","","",N,N],[17,"EBADF","","",N,N],[17,"ECHILD","","",N,N],[17,"EAGAIN","","",N,N],[17,"ENOMEM","","",N,N],[17,"EACCES","","",N,N],[17,"EFAULT","","",N,N],[17,"ENOTBLK","","",N,N],[17,"EBUSY","","",N,N],[17,"EEXIST","","",N,N],[17,"EXDEV","","",N,N],[17,"ENODEV","","",N,N],[17,"ENOTDIR","","",N,N],[17,"EISDIR","","",N,N],[17,"EINVAL","","",N,N],[17,"ENFILE","","",N,N],[17,"EMFILE","","",N,N],[17,"ENOTTY","","",N,N],[17,"ETXTBSY","","",N,N],[17,"EFBIG","","",N,N],[17,"ENOSPC","","",N,N],[17,"ESPIPE","","",N,N],[17,"EROFS","","",N,N],[17,"EMLINK","","",N,N],[17,"EPIPE","","",N,N],[17,"EDOM","","",N,N],[17,"ERANGE","","",N,N],[17,"EWOULDBLOCK","","",N,N],[17,"SCM_RIGHTS","","",N,N],[17,"SCM_CREDENTIALS","","",N,N],[17,"PROT_GROWSDOWN","","",N,N],[17,"PROT_GROWSUP","","",N,N],[17,"MAP_TYPE","","",N,N],[17,"MADV_NORMAL","","",N,N],[17,"MADV_RANDOM","","",N,N],[17,"MADV_SEQUENTIAL","","",N,N],[17,"MADV_WILLNEED","","",N,N],[17,"MADV_DONTNEED","","",N,N],[17,"MADV_FREE","","",N,N],[17,"MADV_REMOVE","","",N,N],[17,"MADV_DONTFORK","","",N,N],[17,"MADV_DOFORK","","",N,N],[17,"MADV_MERGEABLE","","",N,N],[17,"MADV_UNMERGEABLE","","",N,N],[17,"MADV_HUGEPAGE","","",N,N],[17,"MADV_NOHUGEPAGE","","",N,N],[17,"MADV_DONTDUMP","","",N,N],[17,"MADV_DODUMP","","",N,N],[17,"MADV_HWPOISON","","",N,N],[17,"MADV_SOFT_OFFLINE","","",N,N],[17,"IFF_UP","","",N,N],[17,"IFF_BROADCAST","","",N,N],[17,"IFF_DEBUG","","",N,N],[17,"IFF_LOOPBACK","","",N,N],[17,"IFF_POINTOPOINT","","",N,N],[17,"IFF_NOTRAILERS","","",N,N],[17,"IFF_RUNNING","","",N,N],[17,"IFF_NOARP","","",N,N],[17,"IFF_PROMISC","","",N,N],[17,"IFF_ALLMULTI","","",N,N],[17,"IFF_MASTER","","",N,N],[17,"IFF_SLAVE","","",N,N],[17,"IFF_MULTICAST","","",N,N],[17,"IFF_PORTSEL","","",N,N],[17,"IFF_AUTOMEDIA","","",N,N],[17,"IFF_DYNAMIC","","",N,N],[17,"SOL_IP","","",N,N],[17,"SOL_TCP","","",N,N],[17,"SOL_UDP","","",N,N],[17,"SOL_IPV6","","",N,N],[17,"SOL_ICMPV6","","",N,N],[17,"SOL_RAW","","",N,N],[17,"SOL_DECNET","","",N,N],[17,"SOL_X25","","",N,N],[17,"SOL_PACKET","","",N,N],[17,"SOL_ATM","","",N,N],[17,"SOL_AAL","","",N,N],[17,"SOL_IRDA","","",N,N],[17,"SOL_NETBEUI","","",N,N],[17,"SOL_LLC","","",N,N],[17,"SOL_DCCP","","",N,N],[17,"SOL_NETLINK","","",N,N],[17,"SOL_TIPC","","",N,N],[17,"AF_UNSPEC","","",N,N],[17,"AF_UNIX","","",N,N],[17,"AF_LOCAL","","",N,N],[17,"AF_INET","","",N,N],[17,"AF_AX25","","",N,N],[17,"AF_IPX","","",N,N],[17,"AF_APPLETALK","","",N,N],[17,"AF_NETROM","","",N,N],[17,"AF_BRIDGE","","",N,N],[17,"AF_ATMPVC","","",N,N],[17,"AF_X25","","",N,N],[17,"AF_INET6","","",N,N],[17,"AF_ROSE","","",N,N],[17,"AF_DECnet","","",N,N],[17,"AF_NETBEUI","","",N,N],[17,"AF_SECURITY","","",N,N],[17,"AF_KEY","","",N,N],[17,"AF_NETLINK","","",N,N],[17,"AF_ROUTE","","",N,N],[17,"AF_PACKET","","",N,N],[17,"AF_ASH","","",N,N],[17,"AF_ECONET","","",N,N],[17,"AF_ATMSVC","","",N,N],[17,"AF_RDS","","",N,N],[17,"AF_SNA","","",N,N],[17,"AF_IRDA","","",N,N],[17,"AF_PPPOX","","",N,N],[17,"AF_WANPIPE","","",N,N],[17,"AF_LLC","","",N,N],[17,"AF_CAN","","",N,N],[17,"AF_TIPC","","",N,N],[17,"AF_BLUETOOTH","","",N,N],[17,"AF_IUCV","","",N,N],[17,"AF_RXRPC","","",N,N],[17,"AF_ISDN","","",N,N],[17,"AF_PHONET","","",N,N],[17,"AF_IEEE802154","","",N,N],[17,"AF_CAIF","","",N,N],[17,"AF_ALG","","",N,N],[17,"PF_UNSPEC","","",N,N],[17,"PF_UNIX","","",N,N],[17,"PF_LOCAL","","",N,N],[17,"PF_INET","","",N,N],[17,"PF_AX25","","",N,N],[17,"PF_IPX","","",N,N],[17,"PF_APPLETALK","","",N,N],[17,"PF_NETROM","","",N,N],[17,"PF_BRIDGE","","",N,N],[17,"PF_ATMPVC","","",N,N],[17,"PF_X25","","",N,N],[17,"PF_INET6","","",N,N],[17,"PF_ROSE","","",N,N],[17,"PF_DECnet","","",N,N],[17,"PF_NETBEUI","","",N,N],[17,"PF_SECURITY","","",N,N],[17,"PF_KEY","","",N,N],[17,"PF_NETLINK","","",N,N],[17,"PF_ROUTE","","",N,N],[17,"PF_PACKET","","",N,N],[17,"PF_ASH","","",N,N],[17,"PF_ECONET","","",N,N],[17,"PF_ATMSVC","","",N,N],[17,"PF_RDS","","",N,N],[17,"PF_SNA","","",N,N],[17,"PF_IRDA","","",N,N],[17,"PF_PPPOX","","",N,N],[17,"PF_WANPIPE","","",N,N],[17,"PF_LLC","","",N,N],[17,"PF_CAN","","",N,N],[17,"PF_TIPC","","",N,N],[17,"PF_BLUETOOTH","","",N,N],[17,"PF_IUCV","","",N,N],[17,"PF_RXRPC","","",N,N],[17,"PF_ISDN","","",N,N],[17,"PF_PHONET","","",N,N],[17,"PF_IEEE802154","","",N,N],[17,"PF_CAIF","","",N,N],[17,"PF_ALG","","",N,N],[17,"SOMAXCONN","","",N,N],[17,"MSG_OOB","","",N,N],[17,"MSG_PEEK","","",N,N],[17,"MSG_DONTROUTE","","",N,N],[17,"MSG_CTRUNC","","",N,N],[17,"MSG_TRUNC","","",N,N],[17,"MSG_DONTWAIT","","",N,N],[17,"MSG_EOR","","",N,N],[17,"MSG_WAITALL","","",N,N],[17,"MSG_FIN","","",N,N],[17,"MSG_SYN","","",N,N],[17,"MSG_CONFIRM","","",N,N],[17,"MSG_RST","","",N,N],[17,"MSG_ERRQUEUE","","",N,N],[17,"MSG_NOSIGNAL","","",N,N],[17,"MSG_MORE","","",N,N],[17,"MSG_WAITFORONE","","",N,N],[17,"MSG_FASTOPEN","","",N,N],[17,"MSG_CMSG_CLOEXEC","","",N,N],[17,"SCM_TIMESTAMP","","",N,N],[17,"SOCK_RAW","","",N,N],[17,"SOCK_RDM","","",N,N],[17,"IP_MULTICAST_IF","","",N,N],[17,"IP_MULTICAST_TTL","","",N,N],[17,"IP_MULTICAST_LOOP","","",N,N],[17,"IP_TTL","","",N,N],[17,"IP_HDRINCL","","",N,N],[17,"IP_PKTINFO","","",N,N],[17,"IP_ADD_MEMBERSHIP","","",N,N],[17,"IP_DROP_MEMBERSHIP","","",N,N],[17,"IP_TRANSPARENT","","",N,N],[17,"IPV6_UNICAST_HOPS","","",N,N],[17,"IPV6_MULTICAST_IF","","",N,N],[17,"IPV6_MULTICAST_HOPS","","",N,N],[17,"IPV6_MULTICAST_LOOP","","",N,N],[17,"IPV6_ADD_MEMBERSHIP","","",N,N],[17,"IPV6_DROP_MEMBERSHIP","","",N,N],[17,"IPV6_V6ONLY","","",N,N],[17,"IPV6_RECVPKTINFO","","",N,N],[17,"IPV6_PKTINFO","","",N,N],[17,"TCP_NODELAY","","",N,N],[17,"TCP_MAXSEG","","",N,N],[17,"TCP_CORK","","",N,N],[17,"TCP_KEEPIDLE","","",N,N],[17,"TCP_KEEPINTVL","","",N,N],[17,"TCP_KEEPCNT","","",N,N],[17,"TCP_SYNCNT","","",N,N],[17,"TCP_LINGER2","","",N,N],[17,"TCP_DEFER_ACCEPT","","",N,N],[17,"TCP_WINDOW_CLAMP","","",N,N],[17,"TCP_INFO","","",N,N],[17,"TCP_QUICKACK","","",N,N],[17,"TCP_CONGESTION","","",N,N],[17,"SO_DEBUG","","",N,N],[17,"SHUT_RD","","",N,N],[17,"SHUT_WR","","",N,N],[17,"SHUT_RDWR","","",N,N],[17,"LOCK_SH","","",N,N],[17,"LOCK_EX","","",N,N],[17,"LOCK_NB","","",N,N],[17,"LOCK_UN","","",N,N],[17,"SS_ONSTACK","","",N,N],[17,"SS_DISABLE","","",N,N],[17,"PATH_MAX","","",N,N],[17,"FD_SETSIZE","","",N,N],[17,"EPOLLIN","","",N,N],[17,"EPOLLPRI","","",N,N],[17,"EPOLLOUT","","",N,N],[17,"EPOLLRDNORM","","",N,N],[17,"EPOLLRDBAND","","",N,N],[17,"EPOLLWRNORM","","",N,N],[17,"EPOLLWRBAND","","",N,N],[17,"EPOLLMSG","","",N,N],[17,"EPOLLERR","","",N,N],[17,"EPOLLHUP","","",N,N],[17,"EPOLLET","","",N,N],[17,"EPOLL_CTL_ADD","","",N,N],[17,"EPOLL_CTL_MOD","","",N,N],[17,"EPOLL_CTL_DEL","","",N,N],[17,"MNT_DETACH","","",N,N],[17,"MNT_EXPIRE","","",N,N],[17,"Q_GETFMT","","",N,N],[17,"Q_GETINFO","","",N,N],[17,"Q_SETINFO","","",N,N],[17,"QIF_BLIMITS","","",N,N],[17,"QIF_SPACE","","",N,N],[17,"QIF_ILIMITS","","",N,N],[17,"QIF_INODES","","",N,N],[17,"QIF_BTIME","","",N,N],[17,"QIF_ITIME","","",N,N],[17,"QIF_LIMITS","","",N,N],[17,"QIF_USAGE","","",N,N],[17,"QIF_TIMES","","",N,N],[17,"QIF_ALL","","",N,N],[17,"MNT_FORCE","","",N,N],[17,"Q_SYNC","","",N,N],[17,"Q_QUOTAON","","",N,N],[17,"Q_QUOTAOFF","","",N,N],[17,"Q_GETQUOTA","","",N,N],[17,"Q_SETQUOTA","","",N,N],[17,"TCIOFF","","",N,N],[17,"TCION","","",N,N],[17,"TCOOFF","","",N,N],[17,"TCOON","","",N,N],[17,"TCIFLUSH","","",N,N],[17,"TCOFLUSH","","",N,N],[17,"TCIOFLUSH","","",N,N],[17,"NL0","","",N,N],[17,"NL1","","",N,N],[17,"TAB0","","",N,N],[17,"CR0","","",N,N],[17,"FF0","","",N,N],[17,"BS0","","",N,N],[17,"VT0","","",N,N],[17,"VERASE","","",N,N],[17,"VKILL","","",N,N],[17,"VINTR","","",N,N],[17,"VQUIT","","",N,N],[17,"VLNEXT","","",N,N],[17,"IGNBRK","","",N,N],[17,"BRKINT","","",N,N],[17,"IGNPAR","","",N,N],[17,"PARMRK","","",N,N],[17,"INPCK","","",N,N],[17,"ISTRIP","","",N,N],[17,"INLCR","","",N,N],[17,"IGNCR","","",N,N],[17,"ICRNL","","",N,N],[17,"IXANY","","",N,N],[17,"IMAXBEL","","",N,N],[17,"OPOST","","",N,N],[17,"CS5","","",N,N],[17,"CRTSCTS","","",N,N],[17,"ECHO","","",N,N],[17,"OCRNL","","",N,N],[17,"ONOCR","","",N,N],[17,"ONLRET","","",N,N],[17,"OFILL","","",N,N],[17,"OFDEL","","",N,N],[17,"CLONE_VM","","",N,N],[17,"CLONE_FS","","",N,N],[17,"CLONE_FILES","","",N,N],[17,"CLONE_SIGHAND","","",N,N],[17,"CLONE_PTRACE","","",N,N],[17,"CLONE_VFORK","","",N,N],[17,"CLONE_PARENT","","",N,N],[17,"CLONE_THREAD","","",N,N],[17,"CLONE_NEWNS","","",N,N],[17,"CLONE_SYSVSEM","","",N,N],[17,"CLONE_SETTLS","","",N,N],[17,"CLONE_PARENT_SETTID","","",N,N],[17,"CLONE_CHILD_CLEARTID","","",N,N],[17,"CLONE_DETACHED","","",N,N],[17,"CLONE_UNTRACED","","",N,N],[17,"CLONE_CHILD_SETTID","","",N,N],[17,"CLONE_NEWUTS","","",N,N],[17,"CLONE_NEWIPC","","",N,N],[17,"CLONE_NEWUSER","","",N,N],[17,"CLONE_NEWPID","","",N,N],[17,"CLONE_NEWNET","","",N,N],[17,"CLONE_IO","","",N,N],[17,"CLONE_NEWCGROUP","","",N,N],[17,"WNOHANG","","",N,N],[17,"WUNTRACED","","",N,N],[17,"WSTOPPED","","",N,N],[17,"WEXITED","","",N,N],[17,"WCONTINUED","","",N,N],[17,"WNOWAIT","","",N,N],[17,"PTRACE_O_TRACESYSGOOD","","",N,N],[17,"PTRACE_O_TRACEFORK","","",N,N],[17,"PTRACE_O_TRACEVFORK","","",N,N],[17,"PTRACE_O_TRACECLONE","","",N,N],[17,"PTRACE_O_TRACEEXEC","","",N,N],[17,"PTRACE_O_TRACEVFORKDONE","","",N,N],[17,"PTRACE_O_TRACEEXIT","","",N,N],[17,"PTRACE_O_TRACESECCOMP","","",N,N],[17,"PTRACE_O_EXITKILL","","",N,N],[17,"PTRACE_O_SUSPEND_SECCOMP","","",N,N],[17,"PTRACE_O_MASK","","",N,N],[17,"PTRACE_EVENT_FORK","","",N,N],[17,"PTRACE_EVENT_VFORK","","",N,N],[17,"PTRACE_EVENT_CLONE","","",N,N],[17,"PTRACE_EVENT_EXEC","","",N,N],[17,"PTRACE_EVENT_VFORK_DONE","","",N,N],[17,"PTRACE_EVENT_EXIT","","",N,N],[17,"PTRACE_EVENT_SECCOMP","","",N,N],[17,"__WNOTHREAD","","",N,N],[17,"__WALL","","",N,N],[17,"__WCLONE","","",N,N],[17,"SPLICE_F_MOVE","","",N,N],[17,"SPLICE_F_NONBLOCK","","",N,N],[17,"SPLICE_F_MORE","","",N,N],[17,"SPLICE_F_GIFT","","",N,N],[17,"RTLD_LOCAL","","",N,N],[17,"RTLD_LAZY","","",N,N],[17,"POSIX_FADV_NORMAL","","",N,N],[17,"POSIX_FADV_RANDOM","","",N,N],[17,"POSIX_FADV_SEQUENTIAL","","",N,N],[17,"POSIX_FADV_WILLNEED","","",N,N],[17,"AT_FDCWD","","",N,N],[17,"AT_SYMLINK_NOFOLLOW","","",N,N],[17,"AT_REMOVEDIR","","",N,N],[17,"AT_SYMLINK_FOLLOW","","",N,N],[17,"AT_NO_AUTOMOUNT","","",N,N],[17,"AT_EMPTY_PATH","","",N,N],[17,"LOG_CRON","","",N,N],[17,"LOG_AUTHPRIV","","",N,N],[17,"LOG_FTP","","",N,N],[17,"LOG_PERROR","","",N,N],[17,"PIPE_BUF","","",N,N],[17,"SI_LOAD_SHIFT","","",N,N],[17,"SIGEV_SIGNAL","","",N,N],[17,"SIGEV_NONE","","",N,N],[17,"SIGEV_THREAD","","",N,N],[17,"P_ALL","","",N,N],[17,"P_PID","","",N,N],[17,"P_PGID","","",N,N],[17,"UTIME_OMIT","","",N,N],[17,"UTIME_NOW","","",N,N],[17,"POLLIN","","",N,N],[17,"POLLPRI","","",N,N],[17,"POLLOUT","","",N,N],[17,"POLLERR","","",N,N],[17,"POLLHUP","","",N,N],[17,"POLLNVAL","","",N,N],[17,"POLLRDNORM","","",N,N],[17,"POLLRDBAND","","",N,N],[17,"IPTOS_LOWDELAY","","",N,N],[17,"IPTOS_THROUGHPUT","","",N,N],[17,"IPTOS_RELIABILITY","","",N,N],[17,"IPTOS_MINCOST","","",N,N],[17,"IPTOS_PREC_NETCONTROL","","",N,N],[17,"IPTOS_PREC_INTERNETCONTROL","","",N,N],[17,"IPTOS_PREC_CRITIC_ECP","","",N,N],[17,"IPTOS_PREC_FLASHOVERRIDE","","",N,N],[17,"IPTOS_PREC_FLASH","","",N,N],[17,"IPTOS_PREC_IMMEDIATE","","",N,N],[17,"IPTOS_PREC_PRIORITY","","",N,N],[17,"IPTOS_PREC_ROUTINE","","",N,N],[17,"IPOPT_COPY","","",N,N],[17,"IPOPT_CLASS_MASK","","",N,N],[17,"IPOPT_NUMBER_MASK","","",N,N],[17,"IPOPT_CONTROL","","",N,N],[17,"IPOPT_RESERVED1","","",N,N],[17,"IPOPT_MEASUREMENT","","",N,N],[17,"IPOPT_RESERVED2","","",N,N],[17,"IPOPT_END","","",N,N],[17,"IPOPT_NOOP","","",N,N],[17,"IPOPT_SEC","","",N,N],[17,"IPOPT_LSRR","","",N,N],[17,"IPOPT_TIMESTAMP","","",N,N],[17,"IPOPT_RR","","",N,N],[17,"IPOPT_SID","","",N,N],[17,"IPOPT_SSRR","","",N,N],[17,"IPOPT_RA","","",N,N],[17,"IPVERSION","","",N,N],[17,"MAXTTL","","",N,N],[17,"IPDEFTTL","","",N,N],[17,"IPOPT_OPTVAL","","",N,N],[17,"IPOPT_OLEN","","",N,N],[17,"IPOPT_OFFSET","","",N,N],[17,"IPOPT_MINOFF","","",N,N],[17,"MAX_IPOPTLEN","","",N,N],[17,"IPOPT_NOP","","",N,N],[17,"IPOPT_EOL","","",N,N],[17,"IPOPT_TS","","",N,N],[17,"IPOPT_TS_TSONLY","","",N,N],[17,"IPOPT_TS_TSANDADDR","","",N,N],[17,"IPOPT_TS_PRESPEC","","",N,N],[17,"ABDAY_1","","",N,N],[17,"ABDAY_2","","",N,N],[17,"ABDAY_3","","",N,N],[17,"ABDAY_4","","",N,N],[17,"ABDAY_5","","",N,N],[17,"ABDAY_6","","",N,N],[17,"ABDAY_7","","",N,N],[17,"DAY_1","","",N,N],[17,"DAY_2","","",N,N],[17,"DAY_3","","",N,N],[17,"DAY_4","","",N,N],[17,"DAY_5","","",N,N],[17,"DAY_6","","",N,N],[17,"DAY_7","","",N,N],[17,"ABMON_1","","",N,N],[17,"ABMON_2","","",N,N],[17,"ABMON_3","","",N,N],[17,"ABMON_4","","",N,N],[17,"ABMON_5","","",N,N],[17,"ABMON_6","","",N,N],[17,"ABMON_7","","",N,N],[17,"ABMON_8","","",N,N],[17,"ABMON_9","","",N,N],[17,"ABMON_10","","",N,N],[17,"ABMON_11","","",N,N],[17,"ABMON_12","","",N,N],[17,"MON_1","","",N,N],[17,"MON_2","","",N,N],[17,"MON_3","","",N,N],[17,"MON_4","","",N,N],[17,"MON_5","","",N,N],[17,"MON_6","","",N,N],[17,"MON_7","","",N,N],[17,"MON_8","","",N,N],[17,"MON_9","","",N,N],[17,"MON_10","","",N,N],[17,"MON_11","","",N,N],[17,"MON_12","","",N,N],[17,"AM_STR","","",N,N],[17,"PM_STR","","",N,N],[17,"D_T_FMT","","",N,N],[17,"D_FMT","","",N,N],[17,"T_FMT","","",N,N],[17,"T_FMT_AMPM","","",N,N],[17,"ERA","","",N,N],[17,"ERA_D_FMT","","",N,N],[17,"ALT_DIGITS","","",N,N],[17,"ERA_D_T_FMT","","",N,N],[17,"ERA_T_FMT","","",N,N],[17,"CODESET","","",N,N],[17,"CRNCYSTR","","",N,N],[17,"RUSAGE_THREAD","","",N,N],[17,"RUSAGE_CHILDREN","","",N,N],[17,"RADIXCHAR","","",N,N],[17,"THOUSEP","","",N,N],[17,"YESEXPR","","",N,N],[17,"NOEXPR","","",N,N],[17,"YESSTR","","",N,N],[17,"NOSTR","","",N,N],[17,"FILENAME_MAX","","",N,N],[17,"L_tmpnam","","",N,N],[17,"_PC_LINK_MAX","","",N,N],[17,"_PC_MAX_CANON","","",N,N],[17,"_PC_MAX_INPUT","","",N,N],[17,"_PC_NAME_MAX","","",N,N],[17,"_PC_PATH_MAX","","",N,N],[17,"_PC_PIPE_BUF","","",N,N],[17,"_PC_CHOWN_RESTRICTED","","",N,N],[17,"_PC_NO_TRUNC","","",N,N],[17,"_PC_VDISABLE","","",N,N],[17,"_PC_SYNC_IO","","",N,N],[17,"_PC_ASYNC_IO","","",N,N],[17,"_PC_PRIO_IO","","",N,N],[17,"_PC_SOCK_MAXBUF","","",N,N],[17,"_PC_FILESIZEBITS","","",N,N],[17,"_PC_REC_INCR_XFER_SIZE","","",N,N],[17,"_PC_REC_MAX_XFER_SIZE","","",N,N],[17,"_PC_REC_MIN_XFER_SIZE","","",N,N],[17,"_PC_REC_XFER_ALIGN","","",N,N],[17,"_PC_ALLOC_SIZE_MIN","","",N,N],[17,"_PC_SYMLINK_MAX","","",N,N],[17,"_PC_2_SYMLINKS","","",N,N],[17,"_SC_ARG_MAX","","",N,N],[17,"_SC_CHILD_MAX","","",N,N],[17,"_SC_CLK_TCK","","",N,N],[17,"_SC_NGROUPS_MAX","","",N,N],[17,"_SC_OPEN_MAX","","",N,N],[17,"_SC_STREAM_MAX","","",N,N],[17,"_SC_TZNAME_MAX","","",N,N],[17,"_SC_JOB_CONTROL","","",N,N],[17,"_SC_SAVED_IDS","","",N,N],[17,"_SC_REALTIME_SIGNALS","","",N,N],[17,"_SC_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_TIMERS","","",N,N],[17,"_SC_ASYNCHRONOUS_IO","","",N,N],[17,"_SC_PRIORITIZED_IO","","",N,N],[17,"_SC_SYNCHRONIZED_IO","","",N,N],[17,"_SC_FSYNC","","",N,N],[17,"_SC_MAPPED_FILES","","",N,N],[17,"_SC_MEMLOCK","","",N,N],[17,"_SC_MEMLOCK_RANGE","","",N,N],[17,"_SC_MEMORY_PROTECTION","","",N,N],[17,"_SC_MESSAGE_PASSING","","",N,N],[17,"_SC_SEMAPHORES","","",N,N],[17,"_SC_SHARED_MEMORY_OBJECTS","","",N,N],[17,"_SC_AIO_LISTIO_MAX","","",N,N],[17,"_SC_AIO_MAX","","",N,N],[17,"_SC_AIO_PRIO_DELTA_MAX","","",N,N],[17,"_SC_DELAYTIMER_MAX","","",N,N],[17,"_SC_MQ_OPEN_MAX","","",N,N],[17,"_SC_MQ_PRIO_MAX","","",N,N],[17,"_SC_VERSION","","",N,N],[17,"_SC_PAGESIZE","","",N,N],[17,"_SC_PAGE_SIZE","","",N,N],[17,"_SC_RTSIG_MAX","","",N,N],[17,"_SC_SEM_NSEMS_MAX","","",N,N],[17,"_SC_SEM_VALUE_MAX","","",N,N],[17,"_SC_SIGQUEUE_MAX","","",N,N],[17,"_SC_TIMER_MAX","","",N,N],[17,"_SC_BC_BASE_MAX","","",N,N],[17,"_SC_BC_DIM_MAX","","",N,N],[17,"_SC_BC_SCALE_MAX","","",N,N],[17,"_SC_BC_STRING_MAX","","",N,N],[17,"_SC_COLL_WEIGHTS_MAX","","",N,N],[17,"_SC_EXPR_NEST_MAX","","",N,N],[17,"_SC_LINE_MAX","","",N,N],[17,"_SC_RE_DUP_MAX","","",N,N],[17,"_SC_2_VERSION","","",N,N],[17,"_SC_2_C_BIND","","",N,N],[17,"_SC_2_C_DEV","","",N,N],[17,"_SC_2_FORT_DEV","","",N,N],[17,"_SC_2_FORT_RUN","","",N,N],[17,"_SC_2_SW_DEV","","",N,N],[17,"_SC_2_LOCALEDEF","","",N,N],[17,"_SC_UIO_MAXIOV","","",N,N],[17,"_SC_IOV_MAX","","",N,N],[17,"_SC_THREADS","","",N,N],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",N,N],[17,"_SC_GETGR_R_SIZE_MAX","","",N,N],[17,"_SC_GETPW_R_SIZE_MAX","","",N,N],[17,"_SC_LOGIN_NAME_MAX","","",N,N],[17,"_SC_TTY_NAME_MAX","","",N,N],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",N,N],[17,"_SC_THREAD_KEYS_MAX","","",N,N],[17,"_SC_THREAD_STACK_MIN","","",N,N],[17,"_SC_THREAD_THREADS_MAX","","",N,N],[17,"_SC_THREAD_ATTR_STACKADDR","","",N,N],[17,"_SC_THREAD_ATTR_STACKSIZE","","",N,N],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_THREAD_PRIO_INHERIT","","",N,N],[17,"_SC_THREAD_PRIO_PROTECT","","",N,N],[17,"_SC_THREAD_PROCESS_SHARED","","",N,N],[17,"_SC_NPROCESSORS_CONF","","",N,N],[17,"_SC_NPROCESSORS_ONLN","","",N,N],[17,"_SC_PHYS_PAGES","","",N,N],[17,"_SC_AVPHYS_PAGES","","",N,N],[17,"_SC_ATEXIT_MAX","","",N,N],[17,"_SC_PASS_MAX","","",N,N],[17,"_SC_XOPEN_VERSION","","",N,N],[17,"_SC_XOPEN_XCU_VERSION","","",N,N],[17,"_SC_XOPEN_UNIX","","",N,N],[17,"_SC_XOPEN_CRYPT","","",N,N],[17,"_SC_XOPEN_ENH_I18N","","",N,N],[17,"_SC_XOPEN_SHM","","",N,N],[17,"_SC_2_CHAR_TERM","","",N,N],[17,"_SC_2_UPE","","",N,N],[17,"_SC_XOPEN_XPG2","","",N,N],[17,"_SC_XOPEN_XPG3","","",N,N],[17,"_SC_XOPEN_XPG4","","",N,N],[17,"_SC_NZERO","","",N,N],[17,"_SC_XBS5_ILP32_OFF32","","",N,N],[17,"_SC_XBS5_ILP32_OFFBIG","","",N,N],[17,"_SC_XBS5_LP64_OFF64","","",N,N],[17,"_SC_XBS5_LPBIG_OFFBIG","","",N,N],[17,"_SC_XOPEN_LEGACY","","",N,N],[17,"_SC_XOPEN_REALTIME","","",N,N],[17,"_SC_XOPEN_REALTIME_THREADS","","",N,N],[17,"_SC_ADVISORY_INFO","","",N,N],[17,"_SC_BARRIERS","","",N,N],[17,"_SC_CLOCK_SELECTION","","",N,N],[17,"_SC_CPUTIME","","",N,N],[17,"_SC_THREAD_CPUTIME","","",N,N],[17,"_SC_MONOTONIC_CLOCK","","",N,N],[17,"_SC_READER_WRITER_LOCKS","","",N,N],[17,"_SC_SPIN_LOCKS","","",N,N],[17,"_SC_REGEXP","","",N,N],[17,"_SC_SHELL","","",N,N],[17,"_SC_SPAWN","","",N,N],[17,"_SC_SPORADIC_SERVER","","",N,N],[17,"_SC_THREAD_SPORADIC_SERVER","","",N,N],[17,"_SC_TIMEOUTS","","",N,N],[17,"_SC_TYPED_MEMORY_OBJECTS","","",N,N],[17,"_SC_2_PBS","","",N,N],[17,"_SC_2_PBS_ACCOUNTING","","",N,N],[17,"_SC_2_PBS_LOCATE","","",N,N],[17,"_SC_2_PBS_MESSAGE","","",N,N],[17,"_SC_2_PBS_TRACK","","",N,N],[17,"_SC_SYMLOOP_MAX","","",N,N],[17,"_SC_STREAMS","","",N,N],[17,"_SC_2_PBS_CHECKPOINT","","",N,N],[17,"_SC_V6_ILP32_OFF32","","",N,N],[17,"_SC_V6_ILP32_OFFBIG","","",N,N],[17,"_SC_V6_LP64_OFF64","","",N,N],[17,"_SC_V6_LPBIG_OFFBIG","","",N,N],[17,"_SC_HOST_NAME_MAX","","",N,N],[17,"_SC_TRACE","","",N,N],[17,"_SC_TRACE_EVENT_FILTER","","",N,N],[17,"_SC_TRACE_INHERIT","","",N,N],[17,"_SC_TRACE_LOG","","",N,N],[17,"_SC_IPV6","","",N,N],[17,"_SC_RAW_SOCKETS","","",N,N],[17,"_SC_V7_ILP32_OFF32","","",N,N],[17,"_SC_V7_ILP32_OFFBIG","","",N,N],[17,"_SC_V7_LP64_OFF64","","",N,N],[17,"_SC_V7_LPBIG_OFFBIG","","",N,N],[17,"_SC_SS_REPL_MAX","","",N,N],[17,"_SC_TRACE_EVENT_NAME_MAX","","",N,N],[17,"_SC_TRACE_NAME_MAX","","",N,N],[17,"_SC_TRACE_SYS_MAX","","",N,N],[17,"_SC_TRACE_USER_EVENT_MAX","","",N,N],[17,"_SC_XOPEN_STREAMS","","",N,N],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",N,N],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",N,N],[17,"RLIM_SAVED_MAX","","",N,N],[17,"RLIM_SAVED_CUR","","",N,N],[17,"GLOB_ERR","","",N,N],[17,"GLOB_MARK","","",N,N],[17,"GLOB_NOSORT","","",N,N],[17,"GLOB_DOOFFS","","",N,N],[17,"GLOB_NOCHECK","","",N,N],[17,"GLOB_APPEND","","",N,N],[17,"GLOB_NOESCAPE","","",N,N],[17,"GLOB_NOSPACE","","",N,N],[17,"GLOB_ABORTED","","",N,N],[17,"GLOB_NOMATCH","","",N,N],[17,"POSIX_MADV_NORMAL","","",N,N],[17,"POSIX_MADV_RANDOM","","",N,N],[17,"POSIX_MADV_SEQUENTIAL","","",N,N],[17,"POSIX_MADV_WILLNEED","","",N,N],[17,"S_IEXEC","","",N,N],[17,"S_IWRITE","","",N,N],[17,"S_IREAD","","",N,N],[17,"F_LOCK","","",N,N],[17,"F_TEST","","",N,N],[17,"F_TLOCK","","",N,N],[17,"F_ULOCK","","",N,N],[17,"IFF_LOWER_UP","","",N,N],[17,"IFF_DORMANT","","",N,N],[17,"IFF_ECHO","","",N,N],[17,"IFF_TUN","","",N,N],[17,"IFF_TAP","","",N,N],[17,"IFF_NO_PI","","",N,N],[17,"TUN_READQ_SIZE","","",N,N],[17,"TUN_TUN_DEV","","",N,N],[17,"TUN_TAP_DEV","","",N,N],[17,"TUN_TYPE_MASK","","",N,N],[17,"IFF_ONE_QUEUE","","",N,N],[17,"IFF_VNET_HDR","","",N,N],[17,"IFF_TUN_EXCL","","",N,N],[17,"IFF_MULTI_QUEUE","","",N,N],[17,"IFF_ATTACH_QUEUE","","",N,N],[17,"IFF_DETACH_QUEUE","","",N,N],[17,"IFF_PERSIST","","",N,N],[17,"IFF_NOFILTER","","",N,N],[17,"ST_RDONLY","","",N,N],[17,"ST_NOSUID","","",N,N],[17,"ST_NODEV","","",N,N],[17,"ST_NOEXEC","","",N,N],[17,"ST_SYNCHRONOUS","","",N,N],[17,"ST_MANDLOCK","","",N,N],[17,"ST_WRITE","","",N,N],[17,"ST_APPEND","","",N,N],[17,"ST_IMMUTABLE","","",N,N],[17,"ST_NOATIME","","",N,N],[17,"ST_NODIRATIME","","",N,N],[17,"RTLD_NEXT","","",N,N],[17,"RTLD_DEFAULT","","",N,N],[17,"RTLD_NODELETE","","",N,N],[17,"RTLD_NOW","","",N,N],[17,"TCP_MD5SIG","","",N,N],[17,"PTHREAD_MUTEX_INITIALIZER","","",N,N],[17,"PTHREAD_COND_INITIALIZER","","",N,N],[17,"PTHREAD_RWLOCK_INITIALIZER","","",N,N],[17,"PTHREAD_MUTEX_NORMAL","","",N,N],[17,"PTHREAD_MUTEX_RECURSIVE","","",N,N],[17,"PTHREAD_MUTEX_ERRORCHECK","","",N,N],[17,"PTHREAD_MUTEX_DEFAULT","","",N,N],[17,"PTHREAD_PROCESS_PRIVATE","","",N,N],[17,"PTHREAD_PROCESS_SHARED","","",N,N],[17,"__SIZEOF_PTHREAD_COND_T","","",N,N],[17,"RENAME_NOREPLACE","","",N,N],[17,"RENAME_EXCHANGE","","",N,N],[17,"RENAME_WHITEOUT","","",N,N],[17,"SCHED_OTHER","","",N,N],[17,"SCHED_FIFO","","",N,N],[17,"SCHED_RR","","",N,N],[17,"SCHED_BATCH","","",N,N],[17,"SCHED_IDLE","","",N,N],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",N,N],[17,"IPPROTO_IGMP","","group mgmt protocol",N,N],[17,"IPPROTO_IPIP","","for compatibility",N,N],[17,"IPPROTO_EGP","","exterior gateway protocol",N,N],[17,"IPPROTO_PUP","","pup",N,N],[17,"IPPROTO_IDP","","xns idp",N,N],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",N,N],[17,"IPPROTO_DCCP","","DCCP",N,N],[17,"IPPROTO_ROUTING","","IP6 routing header",N,N],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",N,N],[17,"IPPROTO_RSVP","","resource reservation",N,N],[17,"IPPROTO_GRE","","General Routing Encap.",N,N],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",N,N],[17,"IPPROTO_AH","","IP6 Auth Header",N,N],[17,"IPPROTO_NONE","","IP6 no next header",N,N],[17,"IPPROTO_DSTOPTS","","IP6 destination option",N,N],[17,"IPPROTO_MTP","","",N,N],[17,"IPPROTO_BEETPH","","",N,N],[17,"IPPROTO_ENCAP","","encapsulation header",N,N],[17,"IPPROTO_PIM","","Protocol indep. multicast",N,N],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",N,N],[17,"IPPROTO_SCTP","","SCTP",N,N],[17,"IPPROTO_MH","","",N,N],[17,"IPPROTO_UDPLITE","","",N,N],[17,"IPPROTO_MPLS","","",N,N],[17,"IPPROTO_RAW","","raw IP packet",N,N],[17,"IPPROTO_MAX","","",N,N],[17,"AF_IB","","",N,N],[17,"AF_MPLS","","",N,N],[17,"AF_NFC","","",N,N],[17,"AF_VSOCK","","",N,N],[17,"PF_IB","","",N,N],[17,"PF_MPLS","","",N,N],[17,"PF_NFC","","",N,N],[17,"PF_VSOCK","","",N,N],[17,"IPC_PRIVATE","","",N,N],[17,"IPC_CREAT","","",N,N],[17,"IPC_EXCL","","",N,N],[17,"IPC_NOWAIT","","",N,N],[17,"IPC_RMID","","",N,N],[17,"IPC_SET","","",N,N],[17,"IPC_STAT","","",N,N],[17,"IPC_INFO","","",N,N],[17,"MSG_STAT","","",N,N],[17,"MSG_INFO","","",N,N],[17,"MSG_NOERROR","","",N,N],[17,"MSG_EXCEPT","","",N,N],[17,"MSG_COPY","","",N,N],[17,"SHM_R","","",N,N],[17,"SHM_W","","",N,N],[17,"SHM_RDONLY","","",N,N],[17,"SHM_RND","","",N,N],[17,"SHM_REMAP","","",N,N],[17,"SHM_EXEC","","",N,N],[17,"SHM_LOCK","","",N,N],[17,"SHM_UNLOCK","","",N,N],[17,"SHM_HUGETLB","","",N,N],[17,"SHM_NORESERVE","","",N,N],[17,"EPOLLRDHUP","","",N,N],[17,"EPOLLEXCLUSIVE","","",N,N],[17,"EPOLLONESHOT","","",N,N],[17,"QFMT_VFS_OLD","","",N,N],[17,"QFMT_VFS_V0","","",N,N],[17,"QFMT_VFS_V1","","",N,N],[17,"EFD_SEMAPHORE","","",N,N],[17,"LOG_NFACILITIES","","",N,N],[17,"SEM_FAILED","","",N,N],[17,"RB_AUTOBOOT","","",N,N],[17,"RB_HALT_SYSTEM","","",N,N],[17,"RB_ENABLE_CAD","","",N,N],[17,"RB_DISABLE_CAD","","",N,N],[17,"RB_POWER_OFF","","",N,N],[17,"RB_SW_SUSPEND","","",N,N],[17,"RB_KEXEC","","",N,N],[17,"AI_PASSIVE","","",N,N],[17,"AI_CANONNAME","","",N,N],[17,"AI_NUMERICHOST","","",N,N],[17,"AI_V4MAPPED","","",N,N],[17,"AI_ALL","","",N,N],[17,"AI_ADDRCONFIG","","",N,N],[17,"AI_NUMERICSERV","","",N,N],[17,"EAI_BADFLAGS","","",N,N],[17,"EAI_NONAME","","",N,N],[17,"EAI_AGAIN","","",N,N],[17,"EAI_FAIL","","",N,N],[17,"EAI_NODATA","","",N,N],[17,"EAI_FAMILY","","",N,N],[17,"EAI_SOCKTYPE","","",N,N],[17,"EAI_SERVICE","","",N,N],[17,"EAI_MEMORY","","",N,N],[17,"EAI_SYSTEM","","",N,N],[17,"EAI_OVERFLOW","","",N,N],[17,"NI_NUMERICHOST","","",N,N],[17,"NI_NUMERICSERV","","",N,N],[17,"NI_NOFQDN","","",N,N],[17,"NI_NAMEREQD","","",N,N],[17,"NI_DGRAM","","",N,N],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",N,N],[17,"SYNC_FILE_RANGE_WRITE","","",N,N],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",N,N],[17,"AIO_CANCELED","","",N,N],[17,"AIO_NOTCANCELED","","",N,N],[17,"AIO_ALLDONE","","",N,N],[17,"LIO_READ","","",N,N],[17,"LIO_WRITE","","",N,N],[17,"LIO_NOP","","",N,N],[17,"LIO_WAIT","","",N,N],[17,"LIO_NOWAIT","","",N,N],[17,"MREMAP_MAYMOVE","","",N,N],[17,"MREMAP_FIXED","","",N,N],[17,"PR_SET_PDEATHSIG","","",N,N],[17,"PR_GET_PDEATHSIG","","",N,N],[17,"PR_GET_DUMPABLE","","",N,N],[17,"PR_SET_DUMPABLE","","",N,N],[17,"PR_GET_UNALIGN","","",N,N],[17,"PR_SET_UNALIGN","","",N,N],[17,"PR_UNALIGN_NOPRINT","","",N,N],[17,"PR_UNALIGN_SIGBUS","","",N,N],[17,"PR_GET_KEEPCAPS","","",N,N],[17,"PR_SET_KEEPCAPS","","",N,N],[17,"PR_GET_FPEMU","","",N,N],[17,"PR_SET_FPEMU","","",N,N],[17,"PR_FPEMU_NOPRINT","","",N,N],[17,"PR_FPEMU_SIGFPE","","",N,N],[17,"PR_GET_FPEXC","","",N,N],[17,"PR_SET_FPEXC","","",N,N],[17,"PR_FP_EXC_SW_ENABLE","","",N,N],[17,"PR_FP_EXC_DIV","","",N,N],[17,"PR_FP_EXC_OVF","","",N,N],[17,"PR_FP_EXC_UND","","",N,N],[17,"PR_FP_EXC_RES","","",N,N],[17,"PR_FP_EXC_INV","","",N,N],[17,"PR_FP_EXC_DISABLED","","",N,N],[17,"PR_FP_EXC_NONRECOV","","",N,N],[17,"PR_FP_EXC_ASYNC","","",N,N],[17,"PR_FP_EXC_PRECISE","","",N,N],[17,"PR_GET_TIMING","","",N,N],[17,"PR_SET_TIMING","","",N,N],[17,"PR_TIMING_STATISTICAL","","",N,N],[17,"PR_TIMING_TIMESTAMP","","",N,N],[17,"PR_SET_NAME","","",N,N],[17,"PR_GET_NAME","","",N,N],[17,"PR_GET_ENDIAN","","",N,N],[17,"PR_SET_ENDIAN","","",N,N],[17,"PR_ENDIAN_BIG","","",N,N],[17,"PR_ENDIAN_LITTLE","","",N,N],[17,"PR_ENDIAN_PPC_LITTLE","","",N,N],[17,"PR_GET_SECCOMP","","",N,N],[17,"PR_SET_SECCOMP","","",N,N],[17,"PR_CAPBSET_READ","","",N,N],[17,"PR_CAPBSET_DROP","","",N,N],[17,"PR_GET_TSC","","",N,N],[17,"PR_SET_TSC","","",N,N],[17,"PR_TSC_ENABLE","","",N,N],[17,"PR_TSC_SIGSEGV","","",N,N],[17,"PR_GET_SECUREBITS","","",N,N],[17,"PR_SET_SECUREBITS","","",N,N],[17,"PR_SET_TIMERSLACK","","",N,N],[17,"PR_GET_TIMERSLACK","","",N,N],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",N,N],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",N,N],[17,"PR_MCE_KILL","","",N,N],[17,"PR_MCE_KILL_CLEAR","","",N,N],[17,"PR_MCE_KILL_SET","","",N,N],[17,"PR_MCE_KILL_LATE","","",N,N],[17,"PR_MCE_KILL_EARLY","","",N,N],[17,"PR_MCE_KILL_DEFAULT","","",N,N],[17,"PR_MCE_KILL_GET","","",N,N],[17,"PR_SET_MM","","",N,N],[17,"PR_SET_MM_START_CODE","","",N,N],[17,"PR_SET_MM_END_CODE","","",N,N],[17,"PR_SET_MM_START_DATA","","",N,N],[17,"PR_SET_MM_END_DATA","","",N,N],[17,"PR_SET_MM_START_STACK","","",N,N],[17,"PR_SET_MM_START_BRK","","",N,N],[17,"PR_SET_MM_BRK","","",N,N],[17,"PR_SET_MM_ARG_START","","",N,N],[17,"PR_SET_MM_ARG_END","","",N,N],[17,"PR_SET_MM_ENV_START","","",N,N],[17,"PR_SET_MM_ENV_END","","",N,N],[17,"PR_SET_MM_AUXV","","",N,N],[17,"PR_SET_MM_EXE_FILE","","",N,N],[17,"PR_SET_MM_MAP","","",N,N],[17,"PR_SET_MM_MAP_SIZE","","",N,N],[17,"PR_SET_PTRACER","","",N,N],[17,"PR_SET_CHILD_SUBREAPER","","",N,N],[17,"PR_GET_CHILD_SUBREAPER","","",N,N],[17,"PR_SET_NO_NEW_PRIVS","","",N,N],[17,"PR_GET_NO_NEW_PRIVS","","",N,N],[17,"PR_GET_TID_ADDRESS","","",N,N],[17,"PR_SET_THP_DISABLE","","",N,N],[17,"PR_GET_THP_DISABLE","","",N,N],[17,"PR_MPX_ENABLE_MANAGEMENT","","",N,N],[17,"PR_MPX_DISABLE_MANAGEMENT","","",N,N],[17,"PR_SET_FP_MODE","","",N,N],[17,"PR_GET_FP_MODE","","",N,N],[17,"PR_FP_MODE_FR","","",N,N],[17,"PR_FP_MODE_FRE","","",N,N],[17,"PR_CAP_AMBIENT","","",N,N],[17,"PR_CAP_AMBIENT_IS_SET","","",N,N],[17,"PR_CAP_AMBIENT_RAISE","","",N,N],[17,"PR_CAP_AMBIENT_LOWER","","",N,N],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",N,N],[17,"GRND_NONBLOCK","","",N,N],[17,"GRND_RANDOM","","",N,N],[17,"SECCOMP_MODE_DISABLED","","",N,N],[17,"SECCOMP_MODE_STRICT","","",N,N],[17,"SECCOMP_MODE_FILTER","","",N,N],[17,"ITIMER_REAL","","",N,N],[17,"ITIMER_VIRTUAL","","",N,N],[17,"ITIMER_PROF","","",N,N],[17,"TFD_CLOEXEC","","",N,N],[17,"TFD_NONBLOCK","","",N,N],[17,"TFD_TIMER_ABSTIME","","",N,N],[17,"XATTR_CREATE","","",N,N],[17,"XATTR_REPLACE","","",N,N],[17,"_POSIX_VDISABLE","","",N,N],[17,"FALLOC_FL_KEEP_SIZE","","",N,N],[17,"FALLOC_FL_PUNCH_HOLE","","",N,N],[17,"FALLOC_FL_COLLAPSE_RANGE","","",N,N],[17,"FALLOC_FL_ZERO_RANGE","","",N,N],[17,"FALLOC_FL_INSERT_RANGE","","",N,N],[17,"FALLOC_FL_UNSHARE_RANGE","","",N,N],[17,"ENOATTR","","",N,N],[17,"SO_ORIGINAL_DST","","",N,N],[17,"IUTF8","","",N,N],[17,"CMSPAR","","",N,N],[17,"MFD_CLOEXEC","","",N,N],[17,"MFD_ALLOW_SEALING","","",N,N],[17,"PT_NULL","","",N,N],[17,"PT_LOAD","","",N,N],[17,"PT_DYNAMIC","","",N,N],[17,"PT_INTERP","","",N,N],[17,"PT_NOTE","","",N,N],[17,"PT_SHLIB","","",N,N],[17,"PT_PHDR","","",N,N],[17,"PT_TLS","","",N,N],[17,"PT_NUM","","",N,N],[17,"PT_LOOS","","",N,N],[17,"PT_GNU_EH_FRAME","","",N,N],[17,"PT_GNU_STACK","","",N,N],[17,"PT_GNU_RELRO","","",N,N],[17,"ETH_ALEN","","",N,N],[17,"ETH_HLEN","","",N,N],[17,"ETH_ZLEN","","",N,N],[17,"ETH_DATA_LEN","","",N,N],[17,"ETH_FRAME_LEN","","",N,N],[17,"ETH_FCS_LEN","","",N,N],[17,"ETH_P_LOOP","","",N,N],[17,"ETH_P_PUP","","",N,N],[17,"ETH_P_PUPAT","","",N,N],[17,"ETH_P_IP","","",N,N],[17,"ETH_P_X25","","",N,N],[17,"ETH_P_ARP","","",N,N],[17,"ETH_P_BPQ","","",N,N],[17,"ETH_P_IEEEPUP","","",N,N],[17,"ETH_P_IEEEPUPAT","","",N,N],[17,"ETH_P_BATMAN","","",N,N],[17,"ETH_P_DEC","","",N,N],[17,"ETH_P_DNA_DL","","",N,N],[17,"ETH_P_DNA_RC","","",N,N],[17,"ETH_P_DNA_RT","","",N,N],[17,"ETH_P_LAT","","",N,N],[17,"ETH_P_DIAG","","",N,N],[17,"ETH_P_CUST","","",N,N],[17,"ETH_P_SCA","","",N,N],[17,"ETH_P_TEB","","",N,N],[17,"ETH_P_RARP","","",N,N],[17,"ETH_P_ATALK","","",N,N],[17,"ETH_P_AARP","","",N,N],[17,"ETH_P_8021Q","","",N,N],[17,"ETH_P_IPX","","",N,N],[17,"ETH_P_IPV6","","",N,N],[17,"ETH_P_PAUSE","","",N,N],[17,"ETH_P_SLOW","","",N,N],[17,"ETH_P_WCCP","","",N,N],[17,"ETH_P_MPLS_UC","","",N,N],[17,"ETH_P_MPLS_MC","","",N,N],[17,"ETH_P_ATMMPOA","","",N,N],[17,"ETH_P_PPP_DISC","","",N,N],[17,"ETH_P_PPP_SES","","",N,N],[17,"ETH_P_LINK_CTL","","",N,N],[17,"ETH_P_ATMFATE","","",N,N],[17,"ETH_P_PAE","","",N,N],[17,"ETH_P_AOE","","",N,N],[17,"ETH_P_8021AD","","",N,N],[17,"ETH_P_802_EX1","","",N,N],[17,"ETH_P_TIPC","","",N,N],[17,"ETH_P_MACSEC","","",N,N],[17,"ETH_P_8021AH","","",N,N],[17,"ETH_P_MVRP","","",N,N],[17,"ETH_P_1588","","",N,N],[17,"ETH_P_PRP","","",N,N],[17,"ETH_P_FCOE","","",N,N],[17,"ETH_P_TDLS","","",N,N],[17,"ETH_P_FIP","","",N,N],[17,"ETH_P_80221","","",N,N],[17,"ETH_P_LOOPBACK","","",N,N],[17,"ETH_P_QINQ1","","",N,N],[17,"ETH_P_QINQ2","","",N,N],[17,"ETH_P_QINQ3","","",N,N],[17,"ETH_P_EDSA","","",N,N],[17,"ETH_P_AF_IUCV","","",N,N],[17,"ETH_P_802_3_MIN","","",N,N],[17,"ETH_P_802_3","","",N,N],[17,"ETH_P_AX25","","",N,N],[17,"ETH_P_ALL","","",N,N],[17,"ETH_P_802_2","","",N,N],[17,"ETH_P_SNAP","","",N,N],[17,"ETH_P_DDCMP","","",N,N],[17,"ETH_P_WAN_PPP","","",N,N],[17,"ETH_P_PPP_MP","","",N,N],[17,"ETH_P_LOCALTALK","","",N,N],[17,"ETH_P_CANFD","","",N,N],[17,"ETH_P_PPPTALK","","",N,N],[17,"ETH_P_TR_802_2","","",N,N],[17,"ETH_P_MOBITEX","","",N,N],[17,"ETH_P_CONTROL","","",N,N],[17,"ETH_P_IRDA","","",N,N],[17,"ETH_P_ECONET","","",N,N],[17,"ETH_P_HDLC","","",N,N],[17,"ETH_P_ARCNET","","",N,N],[17,"ETH_P_DSA","","",N,N],[17,"ETH_P_TRAILER","","",N,N],[17,"ETH_P_PHONET","","",N,N],[17,"ETH_P_IEEE802154","","",N,N],[17,"ETH_P_CAIF","","",N,N],[17,"POSIX_SPAWN_RESETIDS","","",N,N],[17,"POSIX_SPAWN_SETPGROUP","","",N,N],[17,"POSIX_SPAWN_SETSIGDEF","","",N,N],[17,"POSIX_SPAWN_SETSIGMASK","","",N,N],[17,"POSIX_SPAWN_SETSCHEDPARAM","","",N,N],[17,"POSIX_SPAWN_SETSCHEDULER","","",N,N],[17,"NLMSG_NOOP","","",N,N],[17,"NLMSG_ERROR","","",N,N],[17,"NLMSG_DONE","","",N,N],[17,"NLMSG_OVERRUN","","",N,N],[17,"NLMSG_MIN_TYPE","","",N,N],[17,"GENL_NAMSIZ","","",N,N],[17,"GENL_MIN_ID","","",N,N],[17,"GENL_MAX_ID","","",N,N],[17,"GENL_ADMIN_PERM","","",N,N],[17,"GENL_CMD_CAP_DO","","",N,N],[17,"GENL_CMD_CAP_DUMP","","",N,N],[17,"GENL_CMD_CAP_HASPOL","","",N,N],[17,"GENL_ID_CTRL","","",N,N],[17,"CTRL_CMD_UNSPEC","","",N,N],[17,"CTRL_CMD_NEWFAMILY","","",N,N],[17,"CTRL_CMD_DELFAMILY","","",N,N],[17,"CTRL_CMD_GETFAMILY","","",N,N],[17,"CTRL_CMD_NEWOPS","","",N,N],[17,"CTRL_CMD_DELOPS","","",N,N],[17,"CTRL_CMD_GETOPS","","",N,N],[17,"CTRL_CMD_NEWMCAST_GRP","","",N,N],[17,"CTRL_CMD_DELMCAST_GRP","","",N,N],[17,"CTRL_CMD_GETMCAST_GRP","","",N,N],[17,"CTRL_ATTR_UNSPEC","","",N,N],[17,"CTRL_ATTR_FAMILY_ID","","",N,N],[17,"CTRL_ATTR_FAMILY_NAME","","",N,N],[17,"CTRL_ATTR_VERSION","","",N,N],[17,"CTRL_ATTR_HDRSIZE","","",N,N],[17,"CTRL_ATTR_MAXATTR","","",N,N],[17,"CTRL_ATTR_OPS","","",N,N],[17,"CTRL_ATTR_MCAST_GROUPS","","",N,N],[17,"CTRL_ATTR_OP_UNSPEC","","",N,N],[17,"CTRL_ATTR_OP_ID","","",N,N],[17,"CTRL_ATTR_OP_FLAGS","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_UNSPEC","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_NAME","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_ID","","",N,N],[17,"NF_DROP","","",N,N],[17,"NF_ACCEPT","","",N,N],[17,"NF_STOLEN","","",N,N],[17,"NF_QUEUE","","",N,N],[17,"NF_REPEAT","","",N,N],[17,"NF_STOP","","",N,N],[17,"NF_MAX_VERDICT","","",N,N],[17,"NF_VERDICT_MASK","","",N,N],[17,"NF_VERDICT_FLAG_QUEUE_BYPASS","","",N,N],[17,"NF_VERDICT_QMASK","","",N,N],[17,"NF_VERDICT_QBITS","","",N,N],[17,"NF_VERDICT_BITS","","",N,N],[17,"NF_INET_PRE_ROUTING","","",N,N],[17,"NF_INET_LOCAL_IN","","",N,N],[17,"NF_INET_FORWARD","","",N,N],[17,"NF_INET_LOCAL_OUT","","",N,N],[17,"NF_INET_POST_ROUTING","","",N,N],[17,"NF_INET_NUMHOOKS","","",N,N],[17,"NFPROTO_UNSPEC","","",N,N],[17,"NFPROTO_IPV4","","",N,N],[17,"NFPROTO_ARP","","",N,N],[17,"NFPROTO_BRIDGE","","",N,N],[17,"NFPROTO_IPV6","","",N,N],[17,"NFPROTO_DECNET","","",N,N],[17,"NFPROTO_NUMPROTO","","",N,N],[17,"NF_IP_PRE_ROUTING","","",N,N],[17,"NF_IP_LOCAL_IN","","",N,N],[17,"NF_IP_FORWARD","","",N,N],[17,"NF_IP_LOCAL_OUT","","",N,N],[17,"NF_IP_POST_ROUTING","","",N,N],[17,"NF_IP_NUMHOOKS","","",N,N],[17,"NF_IP_PRI_FIRST","","",N,N],[17,"NF_IP_PRI_CONNTRACK_DEFRAG","","",N,N],[17,"NF_IP_PRI_RAW","","",N,N],[17,"NF_IP_PRI_SELINUX_FIRST","","",N,N],[17,"NF_IP_PRI_CONNTRACK","","",N,N],[17,"NF_IP_PRI_MANGLE","","",N,N],[17,"NF_IP_PRI_NAT_DST","","",N,N],[17,"NF_IP_PRI_FILTER","","",N,N],[17,"NF_IP_PRI_SECURITY","","",N,N],[17,"NF_IP_PRI_NAT_SRC","","",N,N],[17,"NF_IP_PRI_SELINUX_LAST","","",N,N],[17,"NF_IP_PRI_CONNTRACK_HELPER","","",N,N],[17,"NF_IP_PRI_CONNTRACK_CONFIRM","","",N,N],[17,"NF_IP_PRI_LAST","","",N,N],[17,"NF_IP6_PRE_ROUTING","","",N,N],[17,"NF_IP6_LOCAL_IN","","",N,N],[17,"NF_IP6_FORWARD","","",N,N],[17,"NF_IP6_LOCAL_OUT","","",N,N],[17,"NF_IP6_POST_ROUTING","","",N,N],[17,"NF_IP6_NUMHOOKS","","",N,N],[17,"NF_IP6_PRI_FIRST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK_DEFRAG","","",N,N],[17,"NF_IP6_PRI_RAW","","",N,N],[17,"NF_IP6_PRI_SELINUX_FIRST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK","","",N,N],[17,"NF_IP6_PRI_MANGLE","","",N,N],[17,"NF_IP6_PRI_NAT_DST","","",N,N],[17,"NF_IP6_PRI_FILTER","","",N,N],[17,"NF_IP6_PRI_SECURITY","","",N,N],[17,"NF_IP6_PRI_NAT_SRC","","",N,N],[17,"NF_IP6_PRI_SELINUX_LAST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK_HELPER","","",N,N],[17,"NF_IP6_PRI_LAST","","",N,N],[17,"SIOCADDRT","","",N,N],[17,"SIOCDELRT","","",N,N],[17,"SIOCGIFNAME","","",N,N],[17,"SIOCSIFLINK","","",N,N],[17,"SIOCGIFCONF","","",N,N],[17,"SIOCGIFFLAGS","","",N,N],[17,"SIOCSIFFLAGS","","",N,N],[17,"SIOCGIFADDR","","",N,N],[17,"SIOCSIFADDR","","",N,N],[17,"SIOCGIFDSTADDR","","",N,N],[17,"SIOCSIFDSTADDR","","",N,N],[17,"SIOCGIFBRDADDR","","",N,N],[17,"SIOCSIFBRDADDR","","",N,N],[17,"SIOCGIFNETMASK","","",N,N],[17,"SIOCSIFNETMASK","","",N,N],[17,"SIOCGIFMETRIC","","",N,N],[17,"SIOCSIFMETRIC","","",N,N],[17,"SIOCGIFMEM","","",N,N],[17,"SIOCSIFMEM","","",N,N],[17,"SIOCGIFMTU","","",N,N],[17,"SIOCSIFMTU","","",N,N],[17,"SIOCSIFHWADDR","","",N,N],[17,"SIOCGIFENCAP","","",N,N],[17,"SIOCSIFENCAP","","",N,N],[17,"SIOCGIFHWADDR","","",N,N],[17,"SIOCGIFSLAVE","","",N,N],[17,"SIOCSIFSLAVE","","",N,N],[17,"SIOCADDMULTI","","",N,N],[17,"SIOCDELMULTI","","",N,N],[17,"SIOCDARP","","",N,N],[17,"SIOCGARP","","",N,N],[17,"SIOCSARP","","",N,N],[17,"SIOCDRARP","","",N,N],[17,"SIOCGRARP","","",N,N],[17,"SIOCSRARP","","",N,N],[17,"SIOCGIFMAP","","",N,N],[17,"SIOCSIFMAP","","",N,N],[17,"IPTOS_TOS_MASK","","",N,N],[17,"IPTOS_PREC_MASK","","",N,N],[17,"RTF_UP","","",N,N],[17,"RTF_GATEWAY","","",N,N],[17,"RTF_HOST","","",N,N],[17,"RTF_REINSTATE","","",N,N],[17,"RTF_DYNAMIC","","",N,N],[17,"RTF_MODIFIED","","",N,N],[17,"RTF_MTU","","",N,N],[17,"RTF_MSS","","",N,N],[17,"RTF_WINDOW","","",N,N],[17,"RTF_IRTT","","",N,N],[17,"RTF_REJECT","","",N,N],[17,"RTF_STATIC","","",N,N],[17,"RTF_XRESOLVE","","",N,N],[17,"RTF_NOFORWARD","","",N,N],[17,"RTF_THROW","","",N,N],[17,"RTF_NOPMTUDISC","","",N,N],[17,"RTF_DEFAULT","","",N,N],[17,"RTF_ALLONLINK","","",N,N],[17,"RTF_ADDRCONF","","",N,N],[17,"RTF_LINKRT","","",N,N],[17,"RTF_NONEXTHOP","","",N,N],[17,"RTF_CACHE","","",N,N],[17,"RTF_FLOW","","",N,N],[17,"RTF_POLICY","","",N,N],[17,"RTCF_VALVE","","",N,N],[17,"RTCF_MASQ","","",N,N],[17,"RTCF_NAT","","",N,N],[17,"RTCF_DOREDIRECT","","",N,N],[17,"RTCF_LOG","","",N,N],[17,"RTCF_DIRECTSRC","","",N,N],[17,"RTF_LOCAL","","",N,N],[17,"RTF_INTERFACE","","",N,N],[17,"RTF_MULTICAST","","",N,N],[17,"RTF_BROADCAST","","",N,N],[17,"RTF_NAT","","",N,N],[17,"RTF_ADDRCLASSMASK","","",N,N],[17,"RT_CLASS_UNSPEC","","",N,N],[17,"RT_CLASS_DEFAULT","","",N,N],[17,"RT_CLASS_MAIN","","",N,N],[17,"RT_CLASS_LOCAL","","",N,N],[17,"RT_CLASS_MAX","","",N,N],[17,"RTMSG_OVERRUN","","",N,N],[17,"RTMSG_NEWDEVICE","","",N,N],[17,"RTMSG_DELDEVICE","","",N,N],[17,"RTMSG_NEWROUTE","","",N,N],[17,"RTMSG_DELROUTE","","",N,N],[17,"RTMSG_NEWRULE","","",N,N],[17,"RTMSG_DELRULE","","",N,N],[17,"RTMSG_CONTROL","","",N,N],[17,"RTMSG_AR_FAILED","","",N,N],[17,"__UT_LINESIZE","","",N,N],[17,"__UT_NAMESIZE","","",N,N],[17,"__UT_HOSTSIZE","","",N,N],[17,"EMPTY","","",N,N],[17,"RUN_LVL","","",N,N],[17,"BOOT_TIME","","",N,N],[17,"NEW_TIME","","",N,N],[17,"OLD_TIME","","",N,N],[17,"INIT_PROCESS","","",N,N],[17,"LOGIN_PROCESS","","",N,N],[17,"USER_PROCESS","","",N,N],[17,"DEAD_PROCESS","","",N,N],[17,"ACCOUNTING","","",N,N],[17,"RLIMIT_RSS","","",N,N],[17,"RLIMIT_AS","","",N,N],[17,"RLIMIT_MEMLOCK","","",N,N],[17,"RLIM_INFINITY","","",N,N],[17,"RLIMIT_RTTIME","","",N,N],[17,"RLIMIT_NLIMITS","","",N,N],[17,"SOCK_NONBLOCK","","",N,N],[17,"SOL_RXRPC","","",N,N],[17,"SOL_PPPOL2TP","","",N,N],[17,"SOL_BLUETOOTH","","",N,N],[17,"SOL_PNPIPE","","",N,N],[17,"SOL_RDS","","",N,N],[17,"SOL_IUCV","","",N,N],[17,"SOL_CAIF","","",N,N],[17,"SOL_ALG","","",N,N],[17,"SOL_NFC","","",N,N],[17,"MSG_TRYHARD","","",N,N],[17,"LC_PAPER","","",N,N],[17,"LC_NAME","","",N,N],[17,"LC_ADDRESS","","",N,N],[17,"LC_TELEPHONE","","",N,N],[17,"LC_MEASUREMENT","","",N,N],[17,"LC_IDENTIFICATION","","",N,N],[17,"LC_PAPER_MASK","","",N,N],[17,"LC_NAME_MASK","","",N,N],[17,"LC_ADDRESS_MASK","","",N,N],[17,"LC_TELEPHONE_MASK","","",N,N],[17,"LC_MEASUREMENT_MASK","","",N,N],[17,"LC_IDENTIFICATION_MASK","","",N,N],[17,"LC_ALL_MASK","","",N,N],[17,"MAP_ANON","","",N,N],[17,"MAP_ANONYMOUS","","",N,N],[17,"MAP_DENYWRITE","","",N,N],[17,"MAP_EXECUTABLE","","",N,N],[17,"MAP_POPULATE","","",N,N],[17,"MAP_NONBLOCK","","",N,N],[17,"MAP_STACK","","",N,N],[17,"ENOTSUP","","",N,N],[17,"EUCLEAN","","",N,N],[17,"ENOTNAM","","",N,N],[17,"ENAVAIL","","",N,N],[17,"EISNAM","","",N,N],[17,"EREMOTEIO","","",N,N],[17,"SOCK_STREAM","","",N,N],[17,"SOCK_DGRAM","","",N,N],[17,"SOCK_SEQPACKET","","",N,N],[17,"SOCK_DCCP","","",N,N],[17,"SOCK_PACKET","","",N,N],[17,"TCP_COOKIE_TRANSACTIONS","","",N,N],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",N,N],[17,"TCP_THIN_DUPACK","","",N,N],[17,"TCP_USER_TIMEOUT","","",N,N],[17,"TCP_REPAIR","","",N,N],[17,"TCP_REPAIR_QUEUE","","",N,N],[17,"TCP_QUEUE_SEQ","","",N,N],[17,"TCP_REPAIR_OPTIONS","","",N,N],[17,"TCP_FASTOPEN","","",N,N],[17,"TCP_TIMESTAMP","","",N,N],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",N,N],[17,"DCCP_SOCKOPT_SERVICE","","",N,N],[17,"DCCP_SOCKOPT_CHANGE_L","","",N,N],[17,"DCCP_SOCKOPT_CHANGE_R","","",N,N],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",N,N],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",N,N],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",N,N],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",N,N],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",N,N],[17,"DCCP_SOCKOPT_CCID","","",N,N],[17,"DCCP_SOCKOPT_TX_CCID","","",N,N],[17,"DCCP_SOCKOPT_RX_CCID","","",N,N],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",N,N],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",N,N],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",N,N],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",N,N],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",N,N],[17,"SIGTTIN","","",N,N],[17,"SIGTTOU","","",N,N],[17,"SIGXCPU","","",N,N],[17,"SIGXFSZ","","",N,N],[17,"SIGVTALRM","","",N,N],[17,"SIGPROF","","",N,N],[17,"SIGWINCH","","",N,N],[17,"SIGEV_THREAD_ID","","",N,N],[17,"BUFSIZ","","",N,N],[17,"TMP_MAX","","",N,N],[17,"FOPEN_MAX","","",N,N],[17,"POSIX_FADV_DONTNEED","","",N,N],[17,"POSIX_FADV_NOREUSE","","",N,N],[17,"POSIX_MADV_DONTNEED","","",N,N],[17,"_SC_EQUIV_CLASS_MAX","","",N,N],[17,"_SC_CHARCLASS_NAME_MAX","","",N,N],[17,"_SC_PII","","",N,N],[17,"_SC_PII_XTI","","",N,N],[17,"_SC_PII_SOCKET","","",N,N],[17,"_SC_PII_INTERNET","","",N,N],[17,"_SC_PII_OSI","","",N,N],[17,"_SC_POLL","","",N,N],[17,"_SC_SELECT","","",N,N],[17,"_SC_PII_INTERNET_STREAM","","",N,N],[17,"_SC_PII_INTERNET_DGRAM","","",N,N],[17,"_SC_PII_OSI_COTS","","",N,N],[17,"_SC_PII_OSI_CLTS","","",N,N],[17,"_SC_PII_OSI_M","","",N,N],[17,"_SC_T_IOV_MAX","","",N,N],[17,"_SC_2_C_VERSION","","",N,N],[17,"_SC_CHAR_BIT","","",N,N],[17,"_SC_CHAR_MAX","","",N,N],[17,"_SC_CHAR_MIN","","",N,N],[17,"_SC_INT_MAX","","",N,N],[17,"_SC_INT_MIN","","",N,N],[17,"_SC_LONG_BIT","","",N,N],[17,"_SC_WORD_BIT","","",N,N],[17,"_SC_MB_LEN_MAX","","",N,N],[17,"_SC_SSIZE_MAX","","",N,N],[17,"_SC_SCHAR_MAX","","",N,N],[17,"_SC_SCHAR_MIN","","",N,N],[17,"_SC_SHRT_MAX","","",N,N],[17,"_SC_SHRT_MIN","","",N,N],[17,"_SC_UCHAR_MAX","","",N,N],[17,"_SC_UINT_MAX","","",N,N],[17,"_SC_ULONG_MAX","","",N,N],[17,"_SC_USHRT_MAX","","",N,N],[17,"_SC_NL_ARGMAX","","",N,N],[17,"_SC_NL_LANGMAX","","",N,N],[17,"_SC_NL_MSGMAX","","",N,N],[17,"_SC_NL_NMAX","","",N,N],[17,"_SC_NL_SETMAX","","",N,N],[17,"_SC_NL_TEXTMAX","","",N,N],[17,"_SC_BASE","","",N,N],[17,"_SC_C_LANG_SUPPORT","","",N,N],[17,"_SC_C_LANG_SUPPORT_R","","",N,N],[17,"_SC_DEVICE_IO","","",N,N],[17,"_SC_DEVICE_SPECIFIC","","",N,N],[17,"_SC_DEVICE_SPECIFIC_R","","",N,N],[17,"_SC_FD_MGMT","","",N,N],[17,"_SC_FIFO","","",N,N],[17,"_SC_PIPE","","",N,N],[17,"_SC_FILE_ATTRIBUTES","","",N,N],[17,"_SC_FILE_LOCKING","","",N,N],[17,"_SC_FILE_SYSTEM","","",N,N],[17,"_SC_MULTI_PROCESS","","",N,N],[17,"_SC_SINGLE_PROCESS","","",N,N],[17,"_SC_NETWORKING","","",N,N],[17,"_SC_REGEX_VERSION","","",N,N],[17,"_SC_SIGNALS","","",N,N],[17,"_SC_SYSTEM_DATABASE","","",N,N],[17,"_SC_SYSTEM_DATABASE_R","","",N,N],[17,"_SC_USER_GROUPS","","",N,N],[17,"_SC_USER_GROUPS_R","","",N,N],[17,"_SC_LEVEL1_ICACHE_SIZE","","",N,N],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",N,N],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL1_DCACHE_SIZE","","",N,N],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",N,N],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL2_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL2_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL3_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL3_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL4_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL4_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",N,N],[17,"O_ACCMODE","","",N,N],[17,"ST_RELATIME","","",N,N],[17,"NI_MAXHOST","","",N,N],[17,"ADFS_SUPER_MAGIC","","",N,N],[17,"AFFS_SUPER_MAGIC","","",N,N],[17,"CODA_SUPER_MAGIC","","",N,N],[17,"CRAMFS_MAGIC","","",N,N],[17,"EFS_SUPER_MAGIC","","",N,N],[17,"EXT2_SUPER_MAGIC","","",N,N],[17,"EXT3_SUPER_MAGIC","","",N,N],[17,"EXT4_SUPER_MAGIC","","",N,N],[17,"HPFS_SUPER_MAGIC","","",N,N],[17,"HUGETLBFS_MAGIC","","",N,N],[17,"ISOFS_SUPER_MAGIC","","",N,N],[17,"JFFS2_SUPER_MAGIC","","",N,N],[17,"MINIX_SUPER_MAGIC","","",N,N],[17,"MINIX_SUPER_MAGIC2","","",N,N],[17,"MINIX2_SUPER_MAGIC","","",N,N],[17,"MINIX2_SUPER_MAGIC2","","",N,N],[17,"MSDOS_SUPER_MAGIC","","",N,N],[17,"NCP_SUPER_MAGIC","","",N,N],[17,"NFS_SUPER_MAGIC","","",N,N],[17,"OPENPROM_SUPER_MAGIC","","",N,N],[17,"PROC_SUPER_MAGIC","","",N,N],[17,"QNX4_SUPER_MAGIC","","",N,N],[17,"REISERFS_SUPER_MAGIC","","",N,N],[17,"SMB_SUPER_MAGIC","","",N,N],[17,"TMPFS_MAGIC","","",N,N],[17,"USBDEVICE_SUPER_MAGIC","","",N,N],[17,"VEOF","","",N,N],[17,"CPU_SETSIZE","","",N,N],[17,"PTRACE_TRACEME","","",N,N],[17,"PTRACE_PEEKTEXT","","",N,N],[17,"PTRACE_PEEKDATA","","",N,N],[17,"PTRACE_PEEKUSER","","",N,N],[17,"PTRACE_POKETEXT","","",N,N],[17,"PTRACE_POKEDATA","","",N,N],[17,"PTRACE_POKEUSER","","",N,N],[17,"PTRACE_CONT","","",N,N],[17,"PTRACE_KILL","","",N,N],[17,"PTRACE_SINGLESTEP","","",N,N],[17,"PTRACE_ATTACH","","",N,N],[17,"PTRACE_SYSCALL","","",N,N],[17,"PTRACE_SETOPTIONS","","",N,N],[17,"PTRACE_GETEVENTMSG","","",N,N],[17,"PTRACE_GETSIGINFO","","",N,N],[17,"PTRACE_SETSIGINFO","","",N,N],[17,"PTRACE_GETREGSET","","",N,N],[17,"PTRACE_SETREGSET","","",N,N],[17,"PTRACE_SEIZE","","",N,N],[17,"PTRACE_INTERRUPT","","",N,N],[17,"PTRACE_LISTEN","","",N,N],[17,"PTRACE_PEEKSIGINFO","","",N,N],[17,"EPOLLWAKEUP","","",N,N],[17,"MAP_HUGETLB","","",N,N],[17,"SEEK_DATA","","",N,N],[17,"SEEK_HOLE","","",N,N],[17,"TCSANOW","","",N,N],[17,"TCSADRAIN","","",N,N],[17,"TCSAFLUSH","","",N,N],[17,"TIOCLINUX","","",N,N],[17,"TIOCGSERIAL","","",N,N],[17,"RTLD_DEEPBIND","","",N,N],[17,"RTLD_GLOBAL","","",N,N],[17,"RTLD_NOLOAD","","",N,N],[17,"LINUX_REBOOT_MAGIC1","","",N,N],[17,"LINUX_REBOOT_MAGIC2","","",N,N],[17,"LINUX_REBOOT_MAGIC2A","","",N,N],[17,"LINUX_REBOOT_MAGIC2B","","",N,N],[17,"LINUX_REBOOT_MAGIC2C","","",N,N],[17,"LINUX_REBOOT_CMD_RESTART","","",N,N],[17,"LINUX_REBOOT_CMD_HALT","","",N,N],[17,"LINUX_REBOOT_CMD_CAD_ON","","",N,N],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",N,N],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",N,N],[17,"LINUX_REBOOT_CMD_RESTART2","","",N,N],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",N,N],[17,"LINUX_REBOOT_CMD_KEXEC","","",N,N],[17,"NETLINK_ROUTE","","",N,N],[17,"NETLINK_UNUSED","","",N,N],[17,"NETLINK_USERSOCK","","",N,N],[17,"NETLINK_FIREWALL","","",N,N],[17,"NETLINK_SOCK_DIAG","","",N,N],[17,"NETLINK_NFLOG","","",N,N],[17,"NETLINK_XFRM","","",N,N],[17,"NETLINK_SELINUX","","",N,N],[17,"NETLINK_ISCSI","","",N,N],[17,"NETLINK_AUDIT","","",N,N],[17,"NETLINK_FIB_LOOKUP","","",N,N],[17,"NETLINK_CONNECTOR","","",N,N],[17,"NETLINK_NETFILTER","","",N,N],[17,"NETLINK_IP6_FW","","",N,N],[17,"NETLINK_DNRTMSG","","",N,N],[17,"NETLINK_KOBJECT_UEVENT","","",N,N],[17,"NETLINK_GENERIC","","",N,N],[17,"NETLINK_SCSITRANSPORT","","",N,N],[17,"NETLINK_ECRYPTFS","","",N,N],[17,"NETLINK_RDMA","","",N,N],[17,"NETLINK_CRYPTO","","",N,N],[17,"NETLINK_INET_DIAG","","",N,N],[17,"MAX_LINKS","","",N,N],[17,"NLM_F_REQUEST","","",N,N],[17,"NLM_F_MULTI","","",N,N],[17,"NLM_F_ACK","","",N,N],[17,"NLM_F_ECHO","","",N,N],[17,"NLM_F_DUMP_INTR","","",N,N],[17,"NLM_F_DUMP_FILTERED","","",N,N],[17,"NLM_F_ROOT","","",N,N],[17,"NLM_F_MATCH","","",N,N],[17,"NLM_F_ATOMIC","","",N,N],[17,"NLM_F_DUMP","","",N,N],[17,"NLM_F_REPLACE","","",N,N],[17,"NLM_F_EXCL","","",N,N],[17,"NLM_F_CREATE","","",N,N],[17,"NLM_F_APPEND","","",N,N],[17,"NETLINK_ADD_MEMBERSHIP","","",N,N],[17,"NETLINK_DROP_MEMBERSHIP","","",N,N],[17,"NETLINK_PKTINFO","","",N,N],[17,"NETLINK_BROADCAST_ERROR","","",N,N],[17,"NETLINK_NO_ENOBUFS","","",N,N],[17,"NETLINK_RX_RING","","",N,N],[17,"NETLINK_TX_RING","","",N,N],[17,"NETLINK_LISTEN_ALL_NSID","","",N,N],[17,"NETLINK_LIST_MEMBERSHIPS","","",N,N],[17,"NETLINK_CAP_ACK","","",N,N],[17,"NLA_F_NESTED","","",N,N],[17,"NLA_F_NET_BYTEORDER","","",N,N],[17,"NLA_TYPE_MASK","","",N,N],[17,"NLA_ALIGNTO","","",N,N],[17,"GENL_UNS_ADMIN_PERM","","",N,N],[17,"GENL_ID_VFS_DQUOT","","",N,N],[17,"GENL_ID_PMCRAID","","",N,N],[17,"TIOCM_LE","","",N,N],[17,"TIOCM_DTR","","",N,N],[17,"TIOCM_RTS","","",N,N],[17,"TIOCM_ST","","",N,N],[17,"TIOCM_SR","","",N,N],[17,"TIOCM_CTS","","",N,N],[17,"TIOCM_CAR","","",N,N],[17,"TIOCM_RNG","","",N,N],[17,"TIOCM_DSR","","",N,N],[17,"TIOCM_CD","","",N,N],[17,"TIOCM_RI","","",N,N],[17,"NF_NETDEV_INGRESS","","",N,N],[17,"NF_NETDEV_NUMHOOKS","","",N,N],[17,"NFPROTO_INET","","",N,N],[17,"NFPROTO_NETDEV","","",N,N],[17,"NFT_TABLE_MAXNAMELEN","","",N,N],[17,"NFT_CHAIN_MAXNAMELEN","","",N,N],[17,"NFT_SET_MAXNAMELEN","","",N,N],[17,"NFT_OBJ_MAXNAMELEN","","",N,N],[17,"NFT_USERDATA_MAXLEN","","",N,N],[17,"NFT_REG_VERDICT","","",N,N],[17,"NFT_REG_1","","",N,N],[17,"NFT_REG_2","","",N,N],[17,"NFT_REG_3","","",N,N],[17,"NFT_REG_4","","",N,N],[17,"__NFT_REG_MAX","","",N,N],[17,"NFT_REG32_00","","",N,N],[17,"NFT_REG32_01","","",N,N],[17,"NFT_REG32_02","","",N,N],[17,"NFT_REG32_03","","",N,N],[17,"NFT_REG32_04","","",N,N],[17,"NFT_REG32_05","","",N,N],[17,"NFT_REG32_06","","",N,N],[17,"NFT_REG32_07","","",N,N],[17,"NFT_REG32_08","","",N,N],[17,"NFT_REG32_09","","",N,N],[17,"NFT_REG32_10","","",N,N],[17,"NFT_REG32_11","","",N,N],[17,"NFT_REG32_12","","",N,N],[17,"NFT_REG32_13","","",N,N],[17,"NFT_REG32_14","","",N,N],[17,"NFT_REG32_15","","",N,N],[17,"NFT_REG_SIZE","","",N,N],[17,"NFT_REG32_SIZE","","",N,N],[17,"NFT_CONTINUE","","",N,N],[17,"NFT_BREAK","","",N,N],[17,"NFT_JUMP","","",N,N],[17,"NFT_GOTO","","",N,N],[17,"NFT_RETURN","","",N,N],[17,"NFT_MSG_NEWTABLE","","",N,N],[17,"NFT_MSG_GETTABLE","","",N,N],[17,"NFT_MSG_DELTABLE","","",N,N],[17,"NFT_MSG_NEWCHAIN","","",N,N],[17,"NFT_MSG_GETCHAIN","","",N,N],[17,"NFT_MSG_DELCHAIN","","",N,N],[17,"NFT_MSG_NEWRULE","","",N,N],[17,"NFT_MSG_GETRULE","","",N,N],[17,"NFT_MSG_DELRULE","","",N,N],[17,"NFT_MSG_NEWSET","","",N,N],[17,"NFT_MSG_GETSET","","",N,N],[17,"NFT_MSG_DELSET","","",N,N],[17,"NFT_MSG_NEWSETELEM","","",N,N],[17,"NFT_MSG_GETSETELEM","","",N,N],[17,"NFT_MSG_DELSETELEM","","",N,N],[17,"NFT_MSG_NEWGEN","","",N,N],[17,"NFT_MSG_GETGEN","","",N,N],[17,"NFT_MSG_TRACE","","",N,N],[17,"NFT_MSG_NEWOBJ","","",N,N],[17,"NFT_MSG_GETOBJ","","",N,N],[17,"NFT_MSG_DELOBJ","","",N,N],[17,"NFT_MSG_GETOBJ_RESET","","",N,N],[17,"NFT_MSG_MAX","","",N,N],[17,"NFT_SET_ANONYMOUS","","",N,N],[17,"NFT_SET_CONSTANT","","",N,N],[17,"NFT_SET_INTERVAL","","",N,N],[17,"NFT_SET_MAP","","",N,N],[17,"NFT_SET_TIMEOUT","","",N,N],[17,"NFT_SET_EVAL","","",N,N],[17,"NFT_SET_POL_PERFORMANCE","","",N,N],[17,"NFT_SET_POL_MEMORY","","",N,N],[17,"NFT_SET_ELEM_INTERVAL_END","","",N,N],[17,"NFT_DATA_VALUE","","",N,N],[17,"NFT_DATA_VERDICT","","",N,N],[17,"NFT_DATA_RESERVED_MASK","","",N,N],[17,"NFT_DATA_VALUE_MAXLEN","","",N,N],[17,"NFT_BYTEORDER_NTOH","","",N,N],[17,"NFT_BYTEORDER_HTON","","",N,N],[17,"NFT_CMP_EQ","","",N,N],[17,"NFT_CMP_NEQ","","",N,N],[17,"NFT_CMP_LT","","",N,N],[17,"NFT_CMP_LTE","","",N,N],[17,"NFT_CMP_GT","","",N,N],[17,"NFT_CMP_GTE","","",N,N],[17,"NFT_RANGE_EQ","","",N,N],[17,"NFT_RANGE_NEQ","","",N,N],[17,"NFT_LOOKUP_F_INV","","",N,N],[17,"NFT_DYNSET_OP_ADD","","",N,N],[17,"NFT_DYNSET_OP_UPDATE","","",N,N],[17,"NFT_DYNSET_F_INV","","",N,N],[17,"NFT_PAYLOAD_LL_HEADER","","",N,N],[17,"NFT_PAYLOAD_NETWORK_HEADER","","",N,N],[17,"NFT_PAYLOAD_TRANSPORT_HEADER","","",N,N],[17,"NFT_PAYLOAD_CSUM_NONE","","",N,N],[17,"NFT_PAYLOAD_CSUM_INET","","",N,N],[17,"NFT_META_LEN","","",N,N],[17,"NFT_META_PROTOCOL","","",N,N],[17,"NFT_META_PRIORITY","","",N,N],[17,"NFT_META_MARK","","",N,N],[17,"NFT_META_IIF","","",N,N],[17,"NFT_META_OIF","","",N,N],[17,"NFT_META_IIFNAME","","",N,N],[17,"NFT_META_OIFNAME","","",N,N],[17,"NFT_META_IIFTYPE","","",N,N],[17,"NFT_META_OIFTYPE","","",N,N],[17,"NFT_META_SKUID","","",N,N],[17,"NFT_META_SKGID","","",N,N],[17,"NFT_META_NFTRACE","","",N,N],[17,"NFT_META_RTCLASSID","","",N,N],[17,"NFT_META_SECMARK","","",N,N],[17,"NFT_META_NFPROTO","","",N,N],[17,"NFT_META_L4PROTO","","",N,N],[17,"NFT_META_BRI_IIFNAME","","",N,N],[17,"NFT_META_BRI_OIFNAME","","",N,N],[17,"NFT_META_PKTTYPE","","",N,N],[17,"NFT_META_CPU","","",N,N],[17,"NFT_META_IIFGROUP","","",N,N],[17,"NFT_META_OIFGROUP","","",N,N],[17,"NFT_META_CGROUP","","",N,N],[17,"NFT_META_PRANDOM","","",N,N],[17,"NFT_CT_STATE","","",N,N],[17,"NFT_CT_DIRECTION","","",N,N],[17,"NFT_CT_STATUS","","",N,N],[17,"NFT_CT_MARK","","",N,N],[17,"NFT_CT_SECMARK","","",N,N],[17,"NFT_CT_EXPIRATION","","",N,N],[17,"NFT_CT_HELPER","","",N,N],[17,"NFT_CT_L3PROTOCOL","","",N,N],[17,"NFT_CT_SRC","","",N,N],[17,"NFT_CT_DST","","",N,N],[17,"NFT_CT_PROTOCOL","","",N,N],[17,"NFT_CT_PROTO_SRC","","",N,N],[17,"NFT_CT_PROTO_DST","","",N,N],[17,"NFT_CT_LABELS","","",N,N],[17,"NFT_CT_PKTS","","",N,N],[17,"NFT_CT_BYTES","","",N,N],[17,"NFT_LIMIT_PKTS","","",N,N],[17,"NFT_LIMIT_PKT_BYTES","","",N,N],[17,"NFT_LIMIT_F_INV","","",N,N],[17,"NFT_QUEUE_FLAG_BYPASS","","",N,N],[17,"NFT_QUEUE_FLAG_CPU_FANOUT","","",N,N],[17,"NFT_QUEUE_FLAG_MASK","","",N,N],[17,"NFT_QUOTA_F_INV","","",N,N],[17,"NFT_REJECT_ICMP_UNREACH","","",N,N],[17,"NFT_REJECT_TCP_RST","","",N,N],[17,"NFT_REJECT_ICMPX_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_NO_ROUTE","","",N,N],[17,"NFT_REJECT_ICMPX_PORT_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_HOST_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_ADMIN_PROHIBITED","","",N,N],[17,"NFT_NAT_SNAT","","",N,N],[17,"NFT_NAT_DNAT","","",N,N],[17,"NFT_TRACETYPE_UNSPEC","","",N,N],[17,"NFT_TRACETYPE_POLICY","","",N,N],[17,"NFT_TRACETYPE_RETURN","","",N,N],[17,"NFT_TRACETYPE_RULE","","",N,N],[17,"NFT_NG_INCREMENTAL","","",N,N],[17,"NFT_NG_RANDOM","","",N,N],[17,"PTHREAD_STACK_MIN","","",N,N],[17,"PTHREAD_MUTEX_ADAPTIVE_NP","","",N,N],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",N,N],[17,"O_LARGEFILE","","",N,N],[17,"TIOCGSOFTCAR","","",N,N],[17,"TIOCSSOFTCAR","","",N,N],[17,"RLIMIT_NOFILE","","",N,N],[17,"RLIMIT_NPROC","","",N,N],[17,"O_APPEND","","",N,N],[17,"O_CREAT","","",N,N],[17,"O_EXCL","","",N,N],[17,"O_NOCTTY","","",N,N],[17,"O_NONBLOCK","","",N,N],[17,"O_SYNC","","",N,N],[17,"O_RSYNC","","",N,N],[17,"O_DSYNC","","",N,N],[17,"O_FSYNC","","",N,N],[17,"O_NOATIME","","",N,N],[17,"O_PATH","","",N,N],[17,"O_TMPFILE","","",N,N],[17,"MAP_GROWSDOWN","","",N,N],[17,"EDEADLK","","",N,N],[17,"ENAMETOOLONG","","",N,N],[17,"ENOLCK","","",N,N],[17,"ENOSYS","","",N,N],[17,"ENOTEMPTY","","",N,N],[17,"ELOOP","","",N,N],[17,"ENOMSG","","",N,N],[17,"EIDRM","","",N,N],[17,"ECHRNG","","",N,N],[17,"EL2NSYNC","","",N,N],[17,"EL3HLT","","",N,N],[17,"EL3RST","","",N,N],[17,"ELNRNG","","",N,N],[17,"EUNATCH","","",N,N],[17,"ENOCSI","","",N,N],[17,"EL2HLT","","",N,N],[17,"EBADE","","",N,N],[17,"EBADR","","",N,N],[17,"EXFULL","","",N,N],[17,"ENOANO","","",N,N],[17,"EBADRQC","","",N,N],[17,"EBADSLT","","",N,N],[17,"EMULTIHOP","","",N,N],[17,"EOVERFLOW","","",N,N],[17,"ENOTUNIQ","","",N,N],[17,"EBADFD","","",N,N],[17,"EBADMSG","","",N,N],[17,"EREMCHG","","",N,N],[17,"ELIBACC","","",N,N],[17,"ELIBBAD","","",N,N],[17,"ELIBSCN","","",N,N],[17,"ELIBMAX","","",N,N],[17,"ELIBEXEC","","",N,N],[17,"EILSEQ","","",N,N],[17,"ERESTART","","",N,N],[17,"ESTRPIPE","","",N,N],[17,"EUSERS","","",N,N],[17,"ENOTSOCK","","",N,N],[17,"EDESTADDRREQ","","",N,N],[17,"EMSGSIZE","","",N,N],[17,"EPROTOTYPE","","",N,N],[17,"ENOPROTOOPT","","",N,N],[17,"EPROTONOSUPPORT","","",N,N],[17,"ESOCKTNOSUPPORT","","",N,N],[17,"EOPNOTSUPP","","",N,N],[17,"EPFNOSUPPORT","","",N,N],[17,"EAFNOSUPPORT","","",N,N],[17,"EADDRINUSE","","",N,N],[17,"EADDRNOTAVAIL","","",N,N],[17,"ENETDOWN","","",N,N],[17,"ENETUNREACH","","",N,N],[17,"ENETRESET","","",N,N],[17,"ECONNABORTED","","",N,N],[17,"ECONNRESET","","",N,N],[17,"ENOBUFS","","",N,N],[17,"EISCONN","","",N,N],[17,"ENOTCONN","","",N,N],[17,"ESHUTDOWN","","",N,N],[17,"ETOOMANYREFS","","",N,N],[17,"ETIMEDOUT","","",N,N],[17,"ECONNREFUSED","","",N,N],[17,"EHOSTDOWN","","",N,N],[17,"EHOSTUNREACH","","",N,N],[17,"EALREADY","","",N,N],[17,"EINPROGRESS","","",N,N],[17,"ESTALE","","",N,N],[17,"EDQUOT","","",N,N],[17,"ENOMEDIUM","","",N,N],[17,"EMEDIUMTYPE","","",N,N],[17,"ECANCELED","","",N,N],[17,"ENOKEY","","",N,N],[17,"EKEYEXPIRED","","",N,N],[17,"EKEYREVOKED","","",N,N],[17,"EKEYREJECTED","","",N,N],[17,"EOWNERDEAD","","",N,N],[17,"ENOTRECOVERABLE","","",N,N],[17,"EHWPOISON","","",N,N],[17,"ERFKILL","","",N,N],[17,"SOL_SOCKET","","",N,N],[17,"SO_REUSEADDR","","",N,N],[17,"SO_TYPE","","",N,N],[17,"SO_ERROR","","",N,N],[17,"SO_DONTROUTE","","",N,N],[17,"SO_BROADCAST","","",N,N],[17,"SO_SNDBUF","","",N,N],[17,"SO_RCVBUF","","",N,N],[17,"SO_SNDBUFFORCE","","",N,N],[17,"SO_RCVBUFFORCE","","",N,N],[17,"SO_KEEPALIVE","","",N,N],[17,"SO_OOBINLINE","","",N,N],[17,"SO_NO_CHECK","","",N,N],[17,"SO_PRIORITY","","",N,N],[17,"SO_LINGER","","",N,N],[17,"SO_BSDCOMPAT","","",N,N],[17,"SO_REUSEPORT","","",N,N],[17,"SO_PASSCRED","","",N,N],[17,"SO_PEERCRED","","",N,N],[17,"SO_RCVLOWAT","","",N,N],[17,"SO_SNDLOWAT","","",N,N],[17,"SO_RCVTIMEO","","",N,N],[17,"SO_SNDTIMEO","","",N,N],[17,"SO_SECURITY_AUTHENTICATION","","",N,N],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",N,N],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",N,N],[17,"SO_BINDTODEVICE","","",N,N],[17,"SO_ATTACH_FILTER","","",N,N],[17,"SO_DETACH_FILTER","","",N,N],[17,"SO_GET_FILTER","","",N,N],[17,"SO_PEERNAME","","",N,N],[17,"SO_TIMESTAMP","","",N,N],[17,"SO_ACCEPTCONN","","",N,N],[17,"SO_PEERSEC","","",N,N],[17,"SO_PASSSEC","","",N,N],[17,"SO_TIMESTAMPNS","","",N,N],[17,"SCM_TIMESTAMPNS","","",N,N],[17,"SO_MARK","","",N,N],[17,"SO_TIMESTAMPING","","",N,N],[17,"SCM_TIMESTAMPING","","",N,N],[17,"SO_PROTOCOL","","",N,N],[17,"SO_DOMAIN","","",N,N],[17,"SO_RXQ_OVFL","","",N,N],[17,"SO_WIFI_STATUS","","",N,N],[17,"SCM_WIFI_STATUS","","",N,N],[17,"SO_PEEK_OFF","","",N,N],[17,"SO_NOFCS","","",N,N],[17,"SO_LOCK_FILTER","","",N,N],[17,"SO_SELECT_ERR_QUEUE","","",N,N],[17,"SO_BUSY_POLL","","",N,N],[17,"SO_MAX_PACING_RATE","","",N,N],[17,"SO_BPF_EXTENSIONS","","",N,N],[17,"SO_INCOMING_CPU","","",N,N],[17,"SO_ATTACH_BPF","","",N,N],[17,"SO_DETACH_BPF","","",N,N],[17,"SA_ONSTACK","","",N,N],[17,"SA_SIGINFO","","",N,N],[17,"SA_NOCLDWAIT","","",N,N],[17,"SIGCHLD","","",N,N],[17,"SIGBUS","","",N,N],[17,"SIGUSR1","","",N,N],[17,"SIGUSR2","","",N,N],[17,"SIGCONT","","",N,N],[17,"SIGSTOP","","",N,N],[17,"SIGTSTP","","",N,N],[17,"SIGURG","","",N,N],[17,"SIGIO","","",N,N],[17,"SIGSYS","","",N,N],[17,"SIGSTKFLT","","",N,N],[17,"SIGUNUSED","","",N,N],[17,"SIGPOLL","","",N,N],[17,"SIGPWR","","",N,N],[17,"SIG_SETMASK","","",N,N],[17,"SIG_BLOCK","","",N,N],[17,"SIG_UNBLOCK","","",N,N],[17,"POLLWRNORM","","",N,N],[17,"POLLWRBAND","","",N,N],[17,"O_ASYNC","","",N,N],[17,"O_NDELAY","","",N,N],[17,"PTRACE_DETACH","","",N,N],[17,"EFD_NONBLOCK","","",N,N],[17,"F_GETLK","","",N,N],[17,"F_GETOWN","","",N,N],[17,"F_SETOWN","","",N,N],[17,"F_SETLK","","",N,N],[17,"F_SETLKW","","",N,N],[17,"F_RDLCK","","",N,N],[17,"F_WRLCK","","",N,N],[17,"F_UNLCK","","",N,N],[17,"SFD_NONBLOCK","","",N,N],[17,"TIOCEXCL","","",N,N],[17,"TIOCNXCL","","",N,N],[17,"TIOCSCTTY","","",N,N],[17,"TIOCSTI","","",N,N],[17,"TIOCMGET","","",N,N],[17,"TIOCMBIS","","",N,N],[17,"TIOCMBIC","","",N,N],[17,"TIOCMSET","","",N,N],[17,"TIOCCONS","","",N,N],[17,"SFD_CLOEXEC","","",N,N],[17,"NCCS","","",N,N],[17,"O_TRUNC","","",N,N],[17,"O_CLOEXEC","","",N,N],[17,"EBFONT","","",N,N],[17,"ENOSTR","","",N,N],[17,"ENODATA","","",N,N],[17,"ETIME","","",N,N],[17,"ENOSR","","",N,N],[17,"ENONET","","",N,N],[17,"ENOPKG","","",N,N],[17,"EREMOTE","","",N,N],[17,"ENOLINK","","",N,N],[17,"EADV","","",N,N],[17,"ESRMNT","","",N,N],[17,"ECOMM","","",N,N],[17,"EPROTO","","",N,N],[17,"EDOTDOT","","",N,N],[17,"SA_NODEFER","","",N,N],[17,"SA_RESETHAND","","",N,N],[17,"SA_RESTART","","",N,N],[17,"SA_NOCLDSTOP","","",N,N],[17,"EPOLL_CLOEXEC","","",N,N],[17,"EFD_CLOEXEC","","",N,N],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",N,N],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",N,N],[17,"O_DIRECT","","",N,N],[17,"O_DIRECTORY","","",N,N],[17,"O_NOFOLLOW","","",N,N],[17,"MAP_LOCKED","","",N,N],[17,"MAP_NORESERVE","","",N,N],[17,"MAP_32BIT","","",N,N],[17,"EDEADLOCK","","",N,N],[17,"FIOCLEX","","",N,N],[17,"FIONBIO","","",N,N],[17,"PTRACE_GETFPREGS","","",N,N],[17,"PTRACE_SETFPREGS","","",N,N],[17,"PTRACE_GETFPXREGS","","",N,N],[17,"PTRACE_SETFPXREGS","","",N,N],[17,"PTRACE_GETREGS","","",N,N],[17,"PTRACE_SETREGS","","",N,N],[17,"PTRACE_PEEKSIGINFO_SHARED","","",N,N],[17,"MCL_CURRENT","","",N,N],[17,"MCL_FUTURE","","",N,N],[17,"SIGSTKSZ","","",N,N],[17,"MINSIGSTKSZ","","",N,N],[17,"CBAUD","","",N,N],[17,"TAB1","","",N,N],[17,"TAB2","","",N,N],[17,"TAB3","","",N,N],[17,"CR1","","",N,N],[17,"CR2","","",N,N],[17,"CR3","","",N,N],[17,"FF1","","",N,N],[17,"BS1","","",N,N],[17,"VT1","","",N,N],[17,"VWERASE","","",N,N],[17,"VREPRINT","","",N,N],[17,"VSUSP","","",N,N],[17,"VSTART","","",N,N],[17,"VSTOP","","",N,N],[17,"VDISCARD","","",N,N],[17,"VTIME","","",N,N],[17,"IXON","","",N,N],[17,"IXOFF","","",N,N],[17,"ONLCR","","",N,N],[17,"CSIZE","","",N,N],[17,"CS6","","",N,N],[17,"CS7","","",N,N],[17,"CS8","","",N,N],[17,"CSTOPB","","",N,N],[17,"CREAD","","",N,N],[17,"PARENB","","",N,N],[17,"PARODD","","",N,N],[17,"HUPCL","","",N,N],[17,"CLOCAL","","",N,N],[17,"ECHOKE","","",N,N],[17,"ECHOE","","",N,N],[17,"ECHOK","","",N,N],[17,"ECHONL","","",N,N],[17,"ECHOPRT","","",N,N],[17,"ECHOCTL","","",N,N],[17,"ISIG","","",N,N],[17,"ICANON","","",N,N],[17,"PENDIN","","",N,N],[17,"NOFLSH","","",N,N],[17,"CIBAUD","","",N,N],[17,"CBAUDEX","","",N,N],[17,"VSWTC","","",N,N],[17,"OLCUC","","",N,N],[17,"NLDLY","","",N,N],[17,"CRDLY","","",N,N],[17,"TABDLY","","",N,N],[17,"BSDLY","","",N,N],[17,"FFDLY","","",N,N],[17,"VTDLY","","",N,N],[17,"XTABS","","",N,N],[17,"B0","","",N,N],[17,"B50","","",N,N],[17,"B75","","",N,N],[17,"B110","","",N,N],[17,"B134","","",N,N],[17,"B150","","",N,N],[17,"B200","","",N,N],[17,"B300","","",N,N],[17,"B600","","",N,N],[17,"B1200","","",N,N],[17,"B1800","","",N,N],[17,"B2400","","",N,N],[17,"B4800","","",N,N],[17,"B9600","","",N,N],[17,"B19200","","",N,N],[17,"B38400","","",N,N],[17,"EXTA","","",N,N],[17,"EXTB","","",N,N],[17,"BOTHER","","",N,N],[17,"B57600","","",N,N],[17,"B115200","","",N,N],[17,"B230400","","",N,N],[17,"B460800","","",N,N],[17,"B500000","","",N,N],[17,"B576000","","",N,N],[17,"B921600","","",N,N],[17,"B1000000","","",N,N],[17,"B1152000","","",N,N],[17,"B1500000","","",N,N],[17,"B2000000","","",N,N],[17,"B2500000","","",N,N],[17,"B3000000","","",N,N],[17,"B3500000","","",N,N],[17,"B4000000","","",N,N],[17,"VEOL","","",N,N],[17,"VEOL2","","",N,N],[17,"VMIN","","",N,N],[17,"IEXTEN","","",N,N],[17,"TOSTOP","","",N,N],[17,"FLUSHO","","",N,N],[17,"EXTPROC","","",N,N],[17,"TCGETS","","",N,N],[17,"TCSETS","","",N,N],[17,"TCSETSW","","",N,N],[17,"TCSETSF","","",N,N],[17,"TCGETA","","",N,N],[17,"TCSETA","","",N,N],[17,"TCSETAW","","",N,N],[17,"TCSETAF","","",N,N],[17,"TCSBRK","","",N,N],[17,"TCXONC","","",N,N],[17,"TCFLSH","","",N,N],[17,"TIOCINQ","","",N,N],[17,"TIOCGPGRP","","",N,N],[17,"TIOCSPGRP","","",N,N],[17,"TIOCOUTQ","","",N,N],[17,"TIOCGWINSZ","","",N,N],[17,"TIOCSWINSZ","","",N,N],[17,"FIONREAD","","",N,N],[17,"R15","","",N,N],[17,"R14","","",N,N],[17,"R13","","",N,N],[17,"R12","","",N,N],[17,"RBP","","",N,N],[17,"RBX","","",N,N],[17,"R11","","",N,N],[17,"R10","","",N,N],[17,"R9","","",N,N],[17,"R8","","",N,N],[17,"RAX","","",N,N],[17,"RCX","","",N,N],[17,"RDX","","",N,N],[17,"RSI","","",N,N],[17,"RDI","","",N,N],[17,"ORIG_RAX","","",N,N],[17,"RIP","","",N,N],[17,"CS","","",N,N],[17,"EFLAGS","","",N,N],[17,"RSP","","",N,N],[17,"SS","","",N,N],[17,"FS_BASE","","",N,N],[17,"GS_BASE","","",N,N],[17,"DS","","",N,N],[17,"ES","","",N,N],[17,"FS","","",N,N],[17,"GS","","",N,N],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",N,N],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",N,N],[17,"PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","","",N,N],[17,"PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","","",N,N],[17,"PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","","",N,N],[17,"SYS_read","","",N,N],[17,"SYS_write","","",N,N],[17,"SYS_open","","",N,N],[17,"SYS_close","","",N,N],[17,"SYS_stat","","",N,N],[17,"SYS_fstat","","",N,N],[17,"SYS_lstat","","",N,N],[17,"SYS_poll","","",N,N],[17,"SYS_lseek","","",N,N],[17,"SYS_mmap","","",N,N],[17,"SYS_mprotect","","",N,N],[17,"SYS_munmap","","",N,N],[17,"SYS_brk","","",N,N],[17,"SYS_rt_sigaction","","",N,N],[17,"SYS_rt_sigprocmask","","",N,N],[17,"SYS_rt_sigreturn","","",N,N],[17,"SYS_ioctl","","",N,N],[17,"SYS_pread64","","",N,N],[17,"SYS_pwrite64","","",N,N],[17,"SYS_readv","","",N,N],[17,"SYS_writev","","",N,N],[17,"SYS_access","","",N,N],[17,"SYS_pipe","","",N,N],[17,"SYS_select","","",N,N],[17,"SYS_sched_yield","","",N,N],[17,"SYS_mremap","","",N,N],[17,"SYS_msync","","",N,N],[17,"SYS_mincore","","",N,N],[17,"SYS_madvise","","",N,N],[17,"SYS_shmget","","",N,N],[17,"SYS_shmat","","",N,N],[17,"SYS_shmctl","","",N,N],[17,"SYS_dup","","",N,N],[17,"SYS_dup2","","",N,N],[17,"SYS_pause","","",N,N],[17,"SYS_nanosleep","","",N,N],[17,"SYS_getitimer","","",N,N],[17,"SYS_alarm","","",N,N],[17,"SYS_setitimer","","",N,N],[17,"SYS_getpid","","",N,N],[17,"SYS_sendfile","","",N,N],[17,"SYS_socket","","",N,N],[17,"SYS_connect","","",N,N],[17,"SYS_accept","","",N,N],[17,"SYS_sendto","","",N,N],[17,"SYS_recvfrom","","",N,N],[17,"SYS_sendmsg","","",N,N],[17,"SYS_recvmsg","","",N,N],[17,"SYS_shutdown","","",N,N],[17,"SYS_bind","","",N,N],[17,"SYS_listen","","",N,N],[17,"SYS_getsockname","","",N,N],[17,"SYS_getpeername","","",N,N],[17,"SYS_socketpair","","",N,N],[17,"SYS_setsockopt","","",N,N],[17,"SYS_getsockopt","","",N,N],[17,"SYS_clone","","",N,N],[17,"SYS_fork","","",N,N],[17,"SYS_vfork","","",N,N],[17,"SYS_execve","","",N,N],[17,"SYS_exit","","",N,N],[17,"SYS_wait4","","",N,N],[17,"SYS_kill","","",N,N],[17,"SYS_uname","","",N,N],[17,"SYS_semget","","",N,N],[17,"SYS_semop","","",N,N],[17,"SYS_semctl","","",N,N],[17,"SYS_shmdt","","",N,N],[17,"SYS_msgget","","",N,N],[17,"SYS_msgsnd","","",N,N],[17,"SYS_msgrcv","","",N,N],[17,"SYS_msgctl","","",N,N],[17,"SYS_fcntl","","",N,N],[17,"SYS_flock","","",N,N],[17,"SYS_fsync","","",N,N],[17,"SYS_fdatasync","","",N,N],[17,"SYS_truncate","","",N,N],[17,"SYS_ftruncate","","",N,N],[17,"SYS_getdents","","",N,N],[17,"SYS_getcwd","","",N,N],[17,"SYS_chdir","","",N,N],[17,"SYS_fchdir","","",N,N],[17,"SYS_rename","","",N,N],[17,"SYS_mkdir","","",N,N],[17,"SYS_rmdir","","",N,N],[17,"SYS_creat","","",N,N],[17,"SYS_link","","",N,N],[17,"SYS_unlink","","",N,N],[17,"SYS_symlink","","",N,N],[17,"SYS_readlink","","",N,N],[17,"SYS_chmod","","",N,N],[17,"SYS_fchmod","","",N,N],[17,"SYS_chown","","",N,N],[17,"SYS_fchown","","",N,N],[17,"SYS_lchown","","",N,N],[17,"SYS_umask","","",N,N],[17,"SYS_gettimeofday","","",N,N],[17,"SYS_getrlimit","","",N,N],[17,"SYS_getrusage","","",N,N],[17,"SYS_sysinfo","","",N,N],[17,"SYS_times","","",N,N],[17,"SYS_ptrace","","",N,N],[17,"SYS_getuid","","",N,N],[17,"SYS_syslog","","",N,N],[17,"SYS_getgid","","",N,N],[17,"SYS_setuid","","",N,N],[17,"SYS_setgid","","",N,N],[17,"SYS_geteuid","","",N,N],[17,"SYS_getegid","","",N,N],[17,"SYS_setpgid","","",N,N],[17,"SYS_getppid","","",N,N],[17,"SYS_getpgrp","","",N,N],[17,"SYS_setsid","","",N,N],[17,"SYS_setreuid","","",N,N],[17,"SYS_setregid","","",N,N],[17,"SYS_getgroups","","",N,N],[17,"SYS_setgroups","","",N,N],[17,"SYS_setresuid","","",N,N],[17,"SYS_getresuid","","",N,N],[17,"SYS_setresgid","","",N,N],[17,"SYS_getresgid","","",N,N],[17,"SYS_getpgid","","",N,N],[17,"SYS_setfsuid","","",N,N],[17,"SYS_setfsgid","","",N,N],[17,"SYS_getsid","","",N,N],[17,"SYS_capget","","",N,N],[17,"SYS_capset","","",N,N],[17,"SYS_rt_sigpending","","",N,N],[17,"SYS_rt_sigtimedwait","","",N,N],[17,"SYS_rt_sigqueueinfo","","",N,N],[17,"SYS_rt_sigsuspend","","",N,N],[17,"SYS_sigaltstack","","",N,N],[17,"SYS_utime","","",N,N],[17,"SYS_mknod","","",N,N],[17,"SYS_uselib","","",N,N],[17,"SYS_personality","","",N,N],[17,"SYS_ustat","","",N,N],[17,"SYS_statfs","","",N,N],[17,"SYS_fstatfs","","",N,N],[17,"SYS_sysfs","","",N,N],[17,"SYS_getpriority","","",N,N],[17,"SYS_setpriority","","",N,N],[17,"SYS_sched_setparam","","",N,N],[17,"SYS_sched_getparam","","",N,N],[17,"SYS_sched_setscheduler","","",N,N],[17,"SYS_sched_getscheduler","","",N,N],[17,"SYS_sched_get_priority_max","","",N,N],[17,"SYS_sched_get_priority_min","","",N,N],[17,"SYS_sched_rr_get_interval","","",N,N],[17,"SYS_mlock","","",N,N],[17,"SYS_munlock","","",N,N],[17,"SYS_mlockall","","",N,N],[17,"SYS_munlockall","","",N,N],[17,"SYS_vhangup","","",N,N],[17,"SYS_modify_ldt","","",N,N],[17,"SYS_pivot_root","","",N,N],[17,"SYS__sysctl","","",N,N],[17,"SYS_prctl","","",N,N],[17,"SYS_arch_prctl","","",N,N],[17,"SYS_adjtimex","","",N,N],[17,"SYS_setrlimit","","",N,N],[17,"SYS_chroot","","",N,N],[17,"SYS_sync","","",N,N],[17,"SYS_acct","","",N,N],[17,"SYS_settimeofday","","",N,N],[17,"SYS_mount","","",N,N],[17,"SYS_umount2","","",N,N],[17,"SYS_swapon","","",N,N],[17,"SYS_swapoff","","",N,N],[17,"SYS_reboot","","",N,N],[17,"SYS_sethostname","","",N,N],[17,"SYS_setdomainname","","",N,N],[17,"SYS_iopl","","",N,N],[17,"SYS_ioperm","","",N,N],[17,"SYS_create_module","","",N,N],[17,"SYS_init_module","","",N,N],[17,"SYS_delete_module","","",N,N],[17,"SYS_get_kernel_syms","","",N,N],[17,"SYS_query_module","","",N,N],[17,"SYS_quotactl","","",N,N],[17,"SYS_nfsservctl","","",N,N],[17,"SYS_getpmsg","","",N,N],[17,"SYS_putpmsg","","",N,N],[17,"SYS_afs_syscall","","",N,N],[17,"SYS_tuxcall","","",N,N],[17,"SYS_security","","",N,N],[17,"SYS_gettid","","",N,N],[17,"SYS_readahead","","",N,N],[17,"SYS_setxattr","","",N,N],[17,"SYS_lsetxattr","","",N,N],[17,"SYS_fsetxattr","","",N,N],[17,"SYS_getxattr","","",N,N],[17,"SYS_lgetxattr","","",N,N],[17,"SYS_fgetxattr","","",N,N],[17,"SYS_listxattr","","",N,N],[17,"SYS_llistxattr","","",N,N],[17,"SYS_flistxattr","","",N,N],[17,"SYS_removexattr","","",N,N],[17,"SYS_lremovexattr","","",N,N],[17,"SYS_fremovexattr","","",N,N],[17,"SYS_tkill","","",N,N],[17,"SYS_time","","",N,N],[17,"SYS_futex","","",N,N],[17,"SYS_sched_setaffinity","","",N,N],[17,"SYS_sched_getaffinity","","",N,N],[17,"SYS_set_thread_area","","",N,N],[17,"SYS_io_setup","","",N,N],[17,"SYS_io_destroy","","",N,N],[17,"SYS_io_getevents","","",N,N],[17,"SYS_io_submit","","",N,N],[17,"SYS_io_cancel","","",N,N],[17,"SYS_get_thread_area","","",N,N],[17,"SYS_lookup_dcookie","","",N,N],[17,"SYS_epoll_create","","",N,N],[17,"SYS_epoll_ctl_old","","",N,N],[17,"SYS_epoll_wait_old","","",N,N],[17,"SYS_remap_file_pages","","",N,N],[17,"SYS_getdents64","","",N,N],[17,"SYS_set_tid_address","","",N,N],[17,"SYS_restart_syscall","","",N,N],[17,"SYS_semtimedop","","",N,N],[17,"SYS_fadvise64","","",N,N],[17,"SYS_timer_create","","",N,N],[17,"SYS_timer_settime","","",N,N],[17,"SYS_timer_gettime","","",N,N],[17,"SYS_timer_getoverrun","","",N,N],[17,"SYS_timer_delete","","",N,N],[17,"SYS_clock_settime","","",N,N],[17,"SYS_clock_gettime","","",N,N],[17,"SYS_clock_getres","","",N,N],[17,"SYS_clock_nanosleep","","",N,N],[17,"SYS_exit_group","","",N,N],[17,"SYS_epoll_wait","","",N,N],[17,"SYS_epoll_ctl","","",N,N],[17,"SYS_tgkill","","",N,N],[17,"SYS_utimes","","",N,N],[17,"SYS_vserver","","",N,N],[17,"SYS_mbind","","",N,N],[17,"SYS_set_mempolicy","","",N,N],[17,"SYS_get_mempolicy","","",N,N],[17,"SYS_mq_open","","",N,N],[17,"SYS_mq_unlink","","",N,N],[17,"SYS_mq_timedsend","","",N,N],[17,"SYS_mq_timedreceive","","",N,N],[17,"SYS_mq_notify","","",N,N],[17,"SYS_mq_getsetattr","","",N,N],[17,"SYS_kexec_load","","",N,N],[17,"SYS_waitid","","",N,N],[17,"SYS_add_key","","",N,N],[17,"SYS_request_key","","",N,N],[17,"SYS_keyctl","","",N,N],[17,"SYS_ioprio_set","","",N,N],[17,"SYS_ioprio_get","","",N,N],[17,"SYS_inotify_init","","",N,N],[17,"SYS_inotify_add_watch","","",N,N],[17,"SYS_inotify_rm_watch","","",N,N],[17,"SYS_migrate_pages","","",N,N],[17,"SYS_openat","","",N,N],[17,"SYS_mkdirat","","",N,N],[17,"SYS_mknodat","","",N,N],[17,"SYS_fchownat","","",N,N],[17,"SYS_futimesat","","",N,N],[17,"SYS_newfstatat","","",N,N],[17,"SYS_unlinkat","","",N,N],[17,"SYS_renameat","","",N,N],[17,"SYS_linkat","","",N,N],[17,"SYS_symlinkat","","",N,N],[17,"SYS_readlinkat","","",N,N],[17,"SYS_fchmodat","","",N,N],[17,"SYS_faccessat","","",N,N],[17,"SYS_pselect6","","",N,N],[17,"SYS_ppoll","","",N,N],[17,"SYS_unshare","","",N,N],[17,"SYS_set_robust_list","","",N,N],[17,"SYS_get_robust_list","","",N,N],[17,"SYS_splice","","",N,N],[17,"SYS_tee","","",N,N],[17,"SYS_sync_file_range","","",N,N],[17,"SYS_vmsplice","","",N,N],[17,"SYS_move_pages","","",N,N],[17,"SYS_utimensat","","",N,N],[17,"SYS_epoll_pwait","","",N,N],[17,"SYS_signalfd","","",N,N],[17,"SYS_timerfd_create","","",N,N],[17,"SYS_eventfd","","",N,N],[17,"SYS_fallocate","","",N,N],[17,"SYS_timerfd_settime","","",N,N],[17,"SYS_timerfd_gettime","","",N,N],[17,"SYS_accept4","","",N,N],[17,"SYS_signalfd4","","",N,N],[17,"SYS_eventfd2","","",N,N],[17,"SYS_epoll_create1","","",N,N],[17,"SYS_dup3","","",N,N],[17,"SYS_pipe2","","",N,N],[17,"SYS_inotify_init1","","",N,N],[17,"SYS_preadv","","",N,N],[17,"SYS_pwritev","","",N,N],[17,"SYS_rt_tgsigqueueinfo","","",N,N],[17,"SYS_perf_event_open","","",N,N],[17,"SYS_recvmmsg","","",N,N],[17,"SYS_fanotify_init","","",N,N],[17,"SYS_fanotify_mark","","",N,N],[17,"SYS_prlimit64","","",N,N],[17,"SYS_name_to_handle_at","","",N,N],[17,"SYS_open_by_handle_at","","",N,N],[17,"SYS_clock_adjtime","","",N,N],[17,"SYS_syncfs","","",N,N],[17,"SYS_sendmmsg","","",N,N],[17,"SYS_setns","","",N,N],[17,"SYS_getcpu","","",N,N],[17,"SYS_process_vm_readv","","",N,N],[17,"SYS_process_vm_writev","","",N,N],[17,"SYS_kcmp","","",N,N],[17,"SYS_finit_module","","",N,N],[17,"SYS_sched_setattr","","",N,N],[17,"SYS_sched_getattr","","",N,N],[17,"SYS_renameat2","","",N,N],[17,"SYS_seccomp","","",N,N],[17,"SYS_getrandom","","",N,N],[17,"SYS_memfd_create","","",N,N],[17,"SYS_kexec_file_load","","",N,N],[17,"SYS_bpf","","",N,N],[17,"SYS_execveat","","",N,N],[17,"SYS_userfaultfd","","",N,N],[17,"SYS_membarrier","","",N,N],[17,"SYS_mlock2","","",N,N],[17,"SYS_copy_file_range","","",N,N],[17,"SYS_preadv2","","",N,N],[17,"SYS_pwritev2","","",N,N],[17,"SYS_pkey_mprotect","","",N,N],[17,"SYS_pkey_alloc","","",N,N],[17,"SYS_pkey_free","","",N,N]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"in_pktinfo"],[3,"ifaddrs"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"passwd"],[3,"spwd"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"genlmsghdr"],[3,"in6_pktinfo"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"mallinfo"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"nlattr"],[3,"rtentry"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"statvfs"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"fd_set"],[3,"in6_rtmsg"]]};
searchIndex["log"]={"doc":"A lightweight logging facade.","items":[[3,"Record","log","The \"payload\" of a log message.",N,N],[3,"RecordBuilder","","Builder for `Record`.",N,N],[3,"Metadata","","Metadata about a log message.",N,N],[3,"MetadataBuilder","","Builder for `Metadata`.",N,N],[3,"SetLoggerError","","The type returned by [`set_logger`] if [`set_logger`] has already been called.",N,N],[3,"ParseLevelError","","The type returned by [`from_str`] when the string doesn't match any of the log levels.",N,N],[4,"Level","","An enum representing the available verbosity levels of the logger.",N,N],[13,"Error","","The \"error\" level.",0,N],[13,"Warn","","The \"warn\" level.",0,N],[13,"Info","","The \"info\" level.",0,N],[13,"Debug","","The \"debug\" level.",0,N],[13,"Trace","","The \"trace\" level.",0,N],[4,"LevelFilter","","An enum representing the available verbosity level filters of the logger.",N,N],[13,"Off","","A level lower than all log levels.",1,N],[13,"Error","","Corresponds to the `Error` log level.",1,N],[13,"Warn","","Corresponds to the `Warn` log level.",1,N],[13,"Info","","Corresponds to the `Info` log level.",1,N],[13,"Debug","","Corresponds to the `Debug` log level.",1,N],[13,"Trace","","Corresponds to the `Trace` log level.",1,N],[5,"set_max_level","","Sets the global maximum log level.",N,[[["levelfilter"]]]],[5,"max_level","","Returns the current maximum log level.",N,[[],["levelfilter"]]],[5,"set_boxed_logger","","Sets the global logger to a `Box<Log>`.",N,[[["box",["log"]]],["result",["setloggererror"]]]],[5,"set_logger","","Sets the global logger to a `&'static Log`.",N,[[["log"]],["result",["setloggererror"]]]],[5,"logger","","Returns a reference to the logger.",N,[[],["log"]]],[17,"STATIC_MAX_LEVEL","","The statically resolved maximum log level.",N,N],[8,"Log","","A trait encapsulating the operations required of a logger.",N,N],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,[[["self"],["metadata"]],["bool"]]],[10,"log","","Logs the `Record`.",2,[[["self"],["record"]]]],[10,"flush","","Flushes any buffered records.",2,[[["self"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"clone","","",0,[[["self"]],["level"]]],[11,"eq","","",0,[[["self"],["level"]],["bool"]]],[11,"eq","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["level"]],["bool"]]],[11,"le","","",0,[[["self"],["level"]],["bool"]]],[11,"gt","","",0,[[["self"],["level"]],["bool"]]],[11,"ge","","",0,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["levelfilter"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"le","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"gt","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"ge","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"cmp","","",0,[[["self"],["level"]],["ordering"]]],[11,"from_str","","",0,[[["str"]],["result",["level"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"max","","Returns the most verbose logging level.",0,[[],["level"]]],[11,"to_level_filter","","Converts the `Level` to the equivalent `LevelFilter`.",0,[[["self"]],["levelfilter"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"clone","","",1,[[["self"]],["levelfilter"]]],[11,"eq","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"eq","","",1,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["levelfilter"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"le","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"gt","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"ge","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["level"]],["bool"]]],[11,"le","","",1,[[["self"],["level"]],["bool"]]],[11,"gt","","",1,[[["self"],["level"]],["bool"]]],[11,"ge","","",1,[[["self"],["level"]],["bool"]]],[11,"cmp","","",1,[[["self"],["levelfilter"]],["ordering"]]],[11,"from_str","","",1,[[["str"]],["result",["levelfilter"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"max","","Returns the most verbose logging level filter.",1,[[],["levelfilter"]]],[11,"to_level","","Converts `self` to the equivalent `Level`.",1,[[["self"]],["option",["level"]]]],[11,"clone","","",3,[[["self"]],["record"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"builder","","Returns a new builder.",3,[[],["recordbuilder"]]],[11,"args","","The message body.",3,[[["self"]],["arguments"]]],[11,"metadata","","Metadata about the log directive.",3,[[["self"]],["metadata"]]],[11,"level","","The verbosity level of the message.",3,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",3,[[["self"]],["str"]]],[11,"module_path","","The module path of the message.",3,[[["self"]],["option",["str"]]]],[11,"file","","The source file containing the message.",3,[[["self"]],["option",["str"]]]],[11,"line","","The line containing the message.",3,[[["self"]],["option",["u32"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct new `RecordBuilder`.",4,[[],["recordbuilder"]]],[11,"args","","Set `args`.",4,[[["self"],["arguments"]],["recordbuilder"]]],[11,"metadata","","Set `metadata`. Construct a `Metadata` object with `MetadataBuilder`.",4,[[["self"],["metadata"]],["recordbuilder"]]],[11,"level","","Set `Metadata::level`.",4,[[["self"],["level"]],["recordbuilder"]]],[11,"target","","Set `Metadata::target`",4,[[["self"],["str"]],["recordbuilder"]]],[11,"module_path","","Set `module_path`",4,[[["self"],["option",["str"]]],["recordbuilder"]]],[11,"file","","Set `file`",4,[[["self"],["option",["str"]]],["recordbuilder"]]],[11,"line","","Set `line`",4,[[["self"],["option",["u32"]]],["recordbuilder"]]],[11,"build","","Invoke the builder and return a `Record`",4,[[["self"]],["record"]]],[11,"clone","","",5,[[["self"]],["metadata"]]],[11,"eq","","",5,[[["self"],["metadata"]],["bool"]]],[11,"ne","","",5,[[["self"],["metadata"]],["bool"]]],[11,"cmp","","",5,[[["self"],["metadata"]],["ordering"]]],[11,"partial_cmp","","",5,[[["self"],["metadata"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["metadata"]],["bool"]]],[11,"le","","",5,[[["self"],["metadata"]],["bool"]]],[11,"gt","","",5,[[["self"],["metadata"]],["bool"]]],[11,"ge","","",5,[[["self"],["metadata"]],["bool"]]],[11,"hash","","",5,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"builder","","Returns a new builder.",5,[[],["metadatabuilder"]]],[11,"level","","The verbosity level of the message.",5,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",5,[[["self"]],["str"]]],[11,"eq","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"ne","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"cmp","","",6,[[["self"],["metadatabuilder"]],["ordering"]]],[11,"partial_cmp","","",6,[[["self"],["metadatabuilder"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"le","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"gt","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"ge","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"hash","","",6,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `MetadataBuilder`.",6,[[],["metadatabuilder"]]],[11,"level","","Setter for `level`.",6,[[["self"],["level"]],["metadatabuilder"]]],[11,"target","","Setter for `target`.",6,[[["self"],["str"]],["metadatabuilder"]]],[11,"build","","Returns a `Metadata` object.",6,[[["self"]],["metadata"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"description","","",7,[[["self"]],["str"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["parselevelerror"]],["bool"]]],[11,"ne","","",8,[[["self"],["parselevelerror"]],["bool"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"description","","",8,[[["self"]],["str"]]],[14,"log","","The standard logging macro.",N,N],[14,"error","","Logs a message at the error level.",N,N],[14,"warn","","Logs a message at the warn level.",N,N],[14,"info","","Logs a message at the info level.",N,N],[14,"debug","","Logs a message at the debug level.",N,N],[14,"trace","","Logs a message at the trace level.",N,N],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",N,N]],"paths":[[4,"Level"],[4,"LevelFilter"],[8,"Log"],[3,"Record"],[3,"RecordBuilder"],[3,"Metadata"],[3,"MetadataBuilder"],[3,"SetLoggerError"],[3,"ParseLevelError"]]};
searchIndex["lzw"]={"doc":"LZW decoder and encoder","items":[[3,"Decoder","lzw","Decoder for a LZW compressed stream (this algorithm is used for GIF files).",N,N],[3,"DecoderEarlyChange","","Decoder for a LZW compressed stream using an “early change” algorithm (used in TIFF files).",N,N],[3,"Encoder","","LZW encoder using the algorithm of GIF files.",N,N],[3,"LsbReader","","Reads bits from a byte stream, LSB first.",N,N],[3,"LsbWriter","","Writes bits to a byte stream, LSB first.",N,N],[3,"MsbReader","","Reads bits from a byte stream, MSB first.",N,N],[3,"MsbWriter","","Writes bits to a byte stream, MSB first.",N,N],[4,"Bits","","Containes either the consumed bytes and reconstructed bits or only the consumed bytes if the supplied buffer was not bit enough",N,N],[13,"Some","","Consumed bytes, reconstructed bits",0,N],[13,"None","","Consumed bytes",0,N],[5,"encode","","Convenience function that reads and compresses all bytes from `R`.",N,[[["r"],["w"],["u8"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new LZW decoder. ",1,[[["r"],["u8"]],["decoder"]]],[11,"decode_bytes","","Tries to obtain and decode a code word from `bytes`.",1,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new LZW decoder. ",2,[[["r"],["u8"]],["decoderearlychange"]]],[11,"decode_bytes","","Tries to obtain and decode a code word from `bytes`.",2,N],[11,"new","","Creates a new LZW encoder.",3,[[["w"],["u8"]],["result",["encoder"]]]],[11,"encode_bytes","","Compresses `bytes` and writes the result into the writer.",3,N],[11,"drop","","",3,[[["self"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new bit reader",4,[[],["lsbreader"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new bit reader",5,[[],["msbreader"]]],[11,"read_bits","","",4,N],[11,"read_bits","","",5,N],[11,"new","","Creates a new bit reader",6,[[["w"]],["lsbwriter"]]],[11,"write","","",6,N],[11,"flush","","",6,[[["self"]],["result"]]],[11,"new","","Creates a new bit reader",7,[[["w"]],["msbwriter"]]],[11,"write","","",7,N],[11,"flush","","",7,[[["self"]],["result"]]],[11,"write_bits","","",6,[[["self"],["u16"],["u8"]],["result"]]],[11,"write_bits","","",7,[[["self"],["u16"],["u8"]],["result"]]],[8,"BitReader","","A bit reader.",N,N],[10,"read_bits","","Returns the next `n` bits.",8,N],[8,"BitWriter","","A bit writer.",N,N],[10,"write_bits","","Writes the next `n` bits.",9,[[["self"],["u16"],["u8"]],["result"]]]],"paths":[[4,"Bits"],[3,"Decoder"],[3,"DecoderEarlyChange"],[3,"Encoder"],[3,"LsbReader"],[3,"MsbReader"],[3,"LsbWriter"],[3,"MsbWriter"],[8,"BitReader"],[8,"BitWriter"]]};
searchIndex["matrixmultiply"]={"doc":"General matrix multiplication for f32, f64 matrices.","items":[[5,"sgemm","matrixmultiply","General matrix multiplication (f32)",N,N],[5,"dgemm","","General matrix multiplication (f64)",N,N]],"paths":[]};
searchIndex["memchr"]={"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface to the corresponding functions in `libc`.","items":[[3,"Memchr","memchr","An iterator for memchr",N,N],[3,"Memchr2","","An iterator for Memchr2",N,N],[3,"Memchr3","","An iterator for Memchr3",N,N],[5,"memchr","","A safe interface to `memchr`.",N,N],[5,"memrchr","","A safe interface to `memrchr`.",N,N],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",N,N],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",N,N],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",0,N],[11,"next","","",0,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",0,N],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",1,N],[11,"next","","",1,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",1,N],[11,"new","","Create a new Memchr2 that's initalized to zero with a haystack",2,N],[11,"next","","",2,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",2,N]],"paths":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["memoffset"]={"doc":"A crate used for calculating offsets of struct members and their spans.","items":[[14,"offset_of","memoffset","Calculates the offset of the specified field from the start of the struct. This macro supports arbitrary amount of subscripts and recursive member-accesses.",N,N],[14,"span_of","","Produces a range instance representing the sub-slice containing the specified member.",N,N]],"paths":[]};
searchIndex["nalgebra"]={"doc":"nalgebra","items":[[3,"Id","nalgebra","The universal identity element wrt. a given operator, usually noted `Id` with a context-dependent subscript.",N,N],[8,"Real","","Trait shared by all reals.",N,N],[10,"floor","","",0,[[["self"]],["self"]]],[10,"ceil","","",0,[[["self"]],["self"]]],[10,"round","","",0,[[["self"]],["self"]]],[10,"trunc","","",0,[[["self"]],["self"]]],[10,"fract","","",0,[[["self"]],["self"]]],[10,"abs","","",0,[[["self"]],["self"]]],[10,"signum","","",0,[[["self"]],["self"]]],[10,"is_sign_positive","","",0,[[["self"]],["bool"]]],[10,"is_sign_negative","","",0,[[["self"]],["bool"]]],[10,"mul_add","","",0,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","",0,[[["self"]],["self"]]],[10,"powi","","",0,[[["self"],["i32"]],["self"]]],[10,"powf","","",0,[[["self"],["self"]],["self"]]],[10,"sqrt","","",0,[[["self"]],["self"]]],[10,"exp","","",0,[[["self"]],["self"]]],[10,"exp2","","",0,[[["self"]],["self"]]],[10,"ln","","",0,[[["self"]],["self"]]],[10,"log","","",0,[[["self"],["self"]],["self"]]],[10,"log2","","",0,[[["self"]],["self"]]],[10,"log10","","",0,[[["self"]],["self"]]],[10,"max","","",0,[[["self"],["self"]],["self"]]],[10,"min","","",0,[[["self"],["self"]],["self"]]],[10,"cbrt","","",0,[[["self"]],["self"]]],[10,"hypot","","",0,[[["self"],["self"]],["self"]]],[10,"sin","","",0,[[["self"]],["self"]]],[10,"cos","","",0,[[["self"]],["self"]]],[10,"tan","","",0,[[["self"]],["self"]]],[10,"asin","","",0,[[["self"]],["self"]]],[10,"acos","","",0,[[["self"]],["self"]]],[10,"atan","","",0,[[["self"]],["self"]]],[10,"atan2","","",0,[[["self"],["self"]],["self"]]],[10,"sin_cos","","",0,N],[10,"exp_m1","","",0,[[["self"]],["self"]]],[10,"ln_1p","","",0,[[["self"]],["self"]]],[10,"sinh","","",0,[[["self"]],["self"]]],[10,"cosh","","",0,[[["self"]],["self"]]],[10,"tanh","","",0,[[["self"]],["self"]]],[10,"asinh","","",0,[[["self"]],["self"]]],[10,"acosh","","",0,[[["self"]],["self"]]],[10,"atanh","","",0,[[["self"]],["self"]]],[10,"pi","","",0,[[],["self"]]],[10,"two_pi","","",0,[[],["self"]]],[10,"frac_pi_2","","",0,[[],["self"]]],[10,"frac_pi_3","","",0,[[],["self"]]],[10,"frac_pi_4","","",0,[[],["self"]]],[10,"frac_pi_6","","",0,[[],["self"]]],[10,"frac_pi_8","","",0,[[],["self"]]],[10,"frac_1_pi","","",0,[[],["self"]]],[10,"frac_2_pi","","",0,[[],["self"]]],[10,"frac_2_sqrt_pi","","",0,[[],["self"]]],[10,"e","","",0,[[],["self"]]],[10,"log2_e","","",0,[[],["self"]]],[10,"log10_e","","",0,[[],["self"]]],[10,"ln_2","","",0,[[],["self"]]],[10,"ln_10","","",0,[[],["self"]]],[5,"id","","Gets the ubiquitous multiplicative identity element.",N,[[],["id"]]],[5,"one","","Gets the multiplicative identity element.",N,[[],["t"]]],[5,"zero","","Gets the additive identity element.",N,[[],["t"]]],[5,"origin","","Gets the origin of the given point.",N,[[],["p"]]],[5,"dimension","","The dimension of the given algebraic entity seen as a vector space.",N,[[],["usize"]]],[5,"wrap","","Wraps `val` into the range `[min, max]` using modular arithmetics.",N,[[["t"],["t"],["t"]],["t"]]],[5,"clamp","","Returns a reference to the input value clamped to the interval `[min, max]`.",N,[[["t"],["t"],["t"]],["t"]]],[5,"max","","Same as `cmp::max`.",N,[[["t"],["t"]],["t"]]],[5,"min","","Same as `cmp::min`.",N,[[["t"],["t"]],["t"]]],[5,"abs","","The absolute value of `a`.",N,[[["t"]],["t"]]],[5,"inf","","Returns the infimum of `a` and `b`.",N,[[["t"],["t"]],["t"]]],[5,"sup","","Returns the supremum of `a` and `b`.",N,[[["t"],["t"]],["t"]]],[5,"inf_sup","","Returns simultaneously the infimum and supremum of `a` and `b`.",N,N],[5,"partial_cmp","","Compare `a` and `b` using a partial ordering relation.",N,[[["t"],["t"]],["option",["ordering"]]]],[5,"partial_lt","","Returns `true` iff `a` and `b` are comparable and `a < b`.",N,[[["t"],["t"]],["bool"]]],[5,"partial_le","","Returns `true` iff `a` and `b` are comparable and `a <= b`.",N,[[["t"],["t"]],["bool"]]],[5,"partial_gt","","Returns `true` iff `a` and `b` are comparable and `a > b`.",N,[[["t"],["t"]],["bool"]]],[5,"partial_ge","","Returns `true` iff `a` and `b` are comparable and `a >= b`.",N,[[["t"],["t"]],["bool"]]],[5,"partial_min","","Return the minimum of `a` and `b` if they are comparable.",N,[[["t"],["t"]],["option"]]],[5,"partial_max","","Return the maximum of `a` and `b` if they are comparable.",N,[[["t"],["t"]],["option"]]],[5,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to `min` or `max`.",N,[[["t"],["t"],["t"]],["option"]]],[5,"partial_sort2","","Sorts two values in increasing order using a partial ordering.",N,[[["t"],["t"]],["option"]]],[5,"try_inverse","","Tries to gets an inverted copy of a square matrix.",N,[[["m"]],["option"]]],[5,"inverse","","Computes the multiplicative inverse of an (always invertible) algebraic entity.",N,[[["m"]],["m"]]],[5,"dot","","Computes the dot product of two vectors.",N,N],[5,"angle","","Computes the smallest angle between two vectors.",N,N],[5,"norm","","Computes the L2 (euclidean) norm of a vector.",N,N],[5,"norm_squared","","Computes the squared L2 (euclidean) norm of the vector `v`.",N,N],[5,"normalize","","Computes the normalized version of the vector `v`.",N,[[["v"]],["v"]]],[5,"try_normalize","","Computes the normalized version of the vector `v` or returns `None` if its norm is smaller than `min_norm`.",N,N],[5,"center","","The center of two points.",N,[[["p"],["p"]],["p"]]],[5,"distance","","The distance between two points.",N,N],[5,"distance_squared","","The squared distance between two points.",N,N],[5,"convert","","Converts an object from one type to an equivalent or more general one.",N,[[["from"]],["to"]]],[5,"try_convert","","Attempts to convert an object to a more specific one.",N,[[["from"]],["option"]]],[5,"is_convertible","","Indicates if `::try_convert` will succeed without actually performing the conversion.",N,[[["from"]],["bool"]]],[5,"convert_unchecked","","Use with care! Same as `try_convert` but without any property checks.",N,[[["from"]],["to"]]],[5,"convert_ref","","Converts an object from one type to an equivalent or more general one.",N,[[["from"]],["to"]]],[5,"try_convert_ref","","Attempts to convert an object to a more specific one.",N,[[["from"]],["option"]]],[5,"convert_ref_unchecked","","Use with care! Same as `try_convert` but without any property checks.",N,[[["from"]],["to"]]],[0,"base","","[Reexported at the root of this crate.] Data structures for vector and matrix computations.",N,N],[3,"Matrix","nalgebra::base","The most generic column-major matrix (and vector) type.",N,N],[12,"data","","The data storage that contains all the matrix components and informations about its number of rows and column (if needed).",1,N],[3,"Unit","","A wrapper that ensures the undelying algebraic entity has a unit norm.",N,N],[3,"MatrixArray","","A array-based statically sized matrix data storage.",N,N],[3,"SliceStorage","","A matrix data storage for a matrix slice. Only contains an internal reference to another matrix data storage.",N,N],[3,"SliceStorageMut","","A mutable matrix data storage for mutable matrix slice. Only contains an internal mutable reference to another matrix data storage.",N,N],[3,"MatrixVec","","A Vec-based matrix data storage. It may be dynamically-sized.",N,N],[0,"allocator","","Abstract definition of a matrix data storage allocator.",N,N],[6,"SameShapeR","nalgebra::base::allocator","The number of rows of the result of a componentwise operation on two matrices.",N,N],[6,"SameShapeC","","The number of columns of the result of a componentwise operation on two matrices.",N,N],[8,"Allocator","","A matrix allocator of a memory buffer that may contain `R::to_usize() * C::to_usize()` elements of type `N`.",N,N],[16,"Buffer","","The type of buffer this allocator can instanciate.",2,N],[10,"allocate_uninitialized","","Allocates a buffer with the given number of rows and columns without initializing its content.",2,N],[10,"allocate_from_iterator","","Allocates a buffer initialized with the content of the given iterator.",2,N],[8,"Reallocator","","A matrix reallocator. Changes the size of the memory buffer that initially contains (RFrom × CFrom) elements to a smaller or larger size (RTo, CTo).",N,N],[10,"reallocate_copy","","Reallocates a buffer of shape `(RTo, CTo)`, possibly reusing a previously allocated buffer `buf`. Data stored by `buf` are linearly copied to the output:",3,N],[8,"SameShapeAllocator","","Restricts the given number of rows and columns to be respectively the same.",N,N],[8,"SameShapeVectorAllocator","","Restricts the given number of rows to be equal.",N,N],[11,"iamax_full","nalgebra::base","Computes the index of the matrix component with the largest absolute value.",1,N],[11,"dot","","The dot product between two matrices (seen as vectors).",1,[[["self"],["matrix"]],["n"]]],[11,"tr_dot","","The dot product between the transpose of `self` and `rhs`.",1,[[["self"],["matrix"]],["n"]]],[11,"ger","","Computes `self = alpha * x * y.transpose() + beta * self`.",1,[[["self"],["n"],["vector"],["vector"],["n"]]]],[11,"gemm","","Computes `self = alpha * a * b + beta * self`, where `a, b, self` are matrices. `alpha` and `beta` are scalar.",1,[[["self"],["n"],["matrix"],["matrix"],["n"]]]],[11,"gemm_tr","","Computes `self = alpha * a.transpose() * b + beta * self`, where `a, b, self` are matrices. `alpha` and `beta` are scalar.",1,[[["self"],["n"],["matrix"],["matrix"],["n"]]]],[11,"ger_symm","","Computes `self = alpha * x * y.transpose() + beta * self`, where `self` is a symmetric matrix.",1,[[["self"],["n"],["vector"],["vector"],["n"]]]],[0,"constraint","","Compatibility constraints between matrix shapes, e.g., for addition or multiplication.",N,N],[3,"ShapeConstraint","nalgebra::base::constraint","A type used in `where` clauses for enforcing constraints.",N,N],[8,"AreMultipliable","","Constraints `C1` and `R2` to be equivalent.",N,N],[8,"DimEq","","Constraints `D1` and `D2` to be equivalent.",N,N],[16,"Representative","","This is either equal to `D1` or `D2`, always choosing the one (if any) which is a type-level constant.",4,N],[8,"SameNumberOfRows","","Constraints `D1` and `D2` to be equivalent. They are both assumed to be the number of rows of a matrix.",N,N],[16,"Representative","","This is either equal to `D1` or `D2`, always choosing the one (if any) which is a type-level constant.",5,N],[8,"SameNumberOfColumns","","Constraints `D1` and `D2` to be equivalent. They are both assumed to be the number of columns of a matrix.",N,N],[16,"Representative","","This is either equal to `D1` or `D2`, always choosing the one (if any) which is a type-level constant.",6,N],[8,"SameDimension","","Constraints D1 and D2 to be equivalent, where they both designate dimensions of algebraic entities (e.g. square matrices).",N,N],[16,"Representative","","This is either equal to `D1` or `D2`, always choosing the one (if any) which is a type-level constant.",7,N],[0,"coordinates","nalgebra::base","Structures to which matrices and vector can be auto-dereferenced (through `Deref`) to access components using their names. For example, if `v` is a 3D vector, one can write `v.z` instead of `v[2]`.",N,N],[3,"X","nalgebra::base::coordinates","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"x","","",8,N],[3,"XY","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"x","","",9,N],[12,"y","","",9,N],[3,"XYZ","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"x","","",10,N],[12,"y","","",10,N],[12,"z","","",10,N],[3,"XYZW","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"x","","",11,N],[12,"y","","",11,N],[12,"z","","",11,N],[12,"w","","",11,N],[3,"XYZWA","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"x","","",12,N],[12,"y","","",12,N],[12,"z","","",12,N],[12,"w","","",12,N],[12,"a","","",12,N],[3,"XYZWAB","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"x","","",13,N],[12,"y","","",13,N],[12,"z","","",13,N],[12,"w","","",13,N],[12,"a","","",13,N],[12,"b","","",13,N],[3,"IJKW","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"i","","",14,N],[12,"j","","",14,N],[12,"k","","",14,N],[12,"w","","",14,N],[3,"M2x2","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"m11","","",15,N],[12,"m21","","",15,N],[12,"m12","","",15,N],[12,"m22","","",15,N],[3,"M2x3","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"m11","","",16,N],[12,"m21","","",16,N],[12,"m12","","",16,N],[12,"m22","","",16,N],[12,"m13","","",16,N],[12,"m23","","",16,N],[3,"M2x4","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"m11","","",17,N],[12,"m21","","",17,N],[12,"m12","","",17,N],[12,"m22","","",17,N],[12,"m13","","",17,N],[12,"m23","","",17,N],[12,"m14","","",17,N],[12,"m24","","",17,N],[3,"M2x5","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"m11","","",18,N],[12,"m21","","",18,N],[12,"m12","","",18,N],[12,"m22","","",18,N],[12,"m13","","",18,N],[12,"m23","","",18,N],[12,"m14","","",18,N],[12,"m24","","",18,N],[12,"m15","","",18,N],[12,"m25","","",18,N],[3,"M2x6","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"m11","","",19,N],[12,"m21","","",19,N],[12,"m12","","",19,N],[12,"m22","","",19,N],[12,"m13","","",19,N],[12,"m23","","",19,N],[12,"m14","","",19,N],[12,"m24","","",19,N],[12,"m15","","",19,N],[12,"m25","","",19,N],[12,"m16","","",19,N],[12,"m26","","",19,N],[3,"M3x2","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"m11","","",20,N],[12,"m21","","",20,N],[12,"m31","","",20,N],[12,"m12","","",20,N],[12,"m22","","",20,N],[12,"m32","","",20,N],[3,"M3x3","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"m11","","",21,N],[12,"m21","","",21,N],[12,"m31","","",21,N],[12,"m12","","",21,N],[12,"m22","","",21,N],[12,"m32","","",21,N],[12,"m13","","",21,N],[12,"m23","","",21,N],[12,"m33","","",21,N],[3,"M3x4","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"m11","","",22,N],[12,"m21","","",22,N],[12,"m31","","",22,N],[12,"m12","","",22,N],[12,"m22","","",22,N],[12,"m32","","",22,N],[12,"m13","","",22,N],[12,"m23","","",22,N],[12,"m33","","",22,N],[12,"m14","","",22,N],[12,"m24","","",22,N],[12,"m34","","",22,N],[3,"M3x5","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"m11","","",23,N],[12,"m21","","",23,N],[12,"m31","","",23,N],[12,"m12","","",23,N],[12,"m22","","",23,N],[12,"m32","","",23,N],[12,"m13","","",23,N],[12,"m23","","",23,N],[12,"m33","","",23,N],[12,"m14","","",23,N],[12,"m24","","",23,N],[12,"m34","","",23,N],[12,"m15","","",23,N],[12,"m25","","",23,N],[12,"m35","","",23,N],[3,"M3x6","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"m11","","",24,N],[12,"m21","","",24,N],[12,"m31","","",24,N],[12,"m12","","",24,N],[12,"m22","","",24,N],[12,"m32","","",24,N],[12,"m13","","",24,N],[12,"m23","","",24,N],[12,"m33","","",24,N],[12,"m14","","",24,N],[12,"m24","","",24,N],[12,"m34","","",24,N],[12,"m15","","",24,N],[12,"m25","","",24,N],[12,"m35","","",24,N],[12,"m16","","",24,N],[12,"m26","","",24,N],[12,"m36","","",24,N],[3,"M4x2","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"m11","","",25,N],[12,"m21","","",25,N],[12,"m31","","",25,N],[12,"m41","","",25,N],[12,"m12","","",25,N],[12,"m22","","",25,N],[12,"m32","","",25,N],[12,"m42","","",25,N],[3,"M4x3","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"m11","","",26,N],[12,"m21","","",26,N],[12,"m31","","",26,N],[12,"m41","","",26,N],[12,"m12","","",26,N],[12,"m22","","",26,N],[12,"m32","","",26,N],[12,"m42","","",26,N],[12,"m13","","",26,N],[12,"m23","","",26,N],[12,"m33","","",26,N],[12,"m43","","",26,N],[3,"M4x4","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"m11","","",27,N],[12,"m21","","",27,N],[12,"m31","","",27,N],[12,"m41","","",27,N],[12,"m12","","",27,N],[12,"m22","","",27,N],[12,"m32","","",27,N],[12,"m42","","",27,N],[12,"m13","","",27,N],[12,"m23","","",27,N],[12,"m33","","",27,N],[12,"m43","","",27,N],[12,"m14","","",27,N],[12,"m24","","",27,N],[12,"m34","","",27,N],[12,"m44","","",27,N],[3,"M4x5","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"m11","","",28,N],[12,"m21","","",28,N],[12,"m31","","",28,N],[12,"m41","","",28,N],[12,"m12","","",28,N],[12,"m22","","",28,N],[12,"m32","","",28,N],[12,"m42","","",28,N],[12,"m13","","",28,N],[12,"m23","","",28,N],[12,"m33","","",28,N],[12,"m43","","",28,N],[12,"m14","","",28,N],[12,"m24","","",28,N],[12,"m34","","",28,N],[12,"m44","","",28,N],[12,"m15","","",28,N],[12,"m25","","",28,N],[12,"m35","","",28,N],[12,"m45","","",28,N],[3,"M4x6","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"m11","","",29,N],[12,"m21","","",29,N],[12,"m31","","",29,N],[12,"m41","","",29,N],[12,"m12","","",29,N],[12,"m22","","",29,N],[12,"m32","","",29,N],[12,"m42","","",29,N],[12,"m13","","",29,N],[12,"m23","","",29,N],[12,"m33","","",29,N],[12,"m43","","",29,N],[12,"m14","","",29,N],[12,"m24","","",29,N],[12,"m34","","",29,N],[12,"m44","","",29,N],[12,"m15","","",29,N],[12,"m25","","",29,N],[12,"m35","","",29,N],[12,"m45","","",29,N],[12,"m16","","",29,N],[12,"m26","","",29,N],[12,"m36","","",29,N],[12,"m46","","",29,N],[3,"M5x2","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"m11","","",30,N],[12,"m21","","",30,N],[12,"m31","","",30,N],[12,"m41","","",30,N],[12,"m51","","",30,N],[12,"m12","","",30,N],[12,"m22","","",30,N],[12,"m32","","",30,N],[12,"m42","","",30,N],[12,"m52","","",30,N],[3,"M5x3","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"m11","","",31,N],[12,"m21","","",31,N],[12,"m31","","",31,N],[12,"m41","","",31,N],[12,"m51","","",31,N],[12,"m12","","",31,N],[12,"m22","","",31,N],[12,"m32","","",31,N],[12,"m42","","",31,N],[12,"m52","","",31,N],[12,"m13","","",31,N],[12,"m23","","",31,N],[12,"m33","","",31,N],[12,"m43","","",31,N],[12,"m53","","",31,N],[3,"M5x4","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"m11","","",32,N],[12,"m21","","",32,N],[12,"m31","","",32,N],[12,"m41","","",32,N],[12,"m51","","",32,N],[12,"m12","","",32,N],[12,"m22","","",32,N],[12,"m32","","",32,N],[12,"m42","","",32,N],[12,"m52","","",32,N],[12,"m13","","",32,N],[12,"m23","","",32,N],[12,"m33","","",32,N],[12,"m43","","",32,N],[12,"m53","","",32,N],[12,"m14","","",32,N],[12,"m24","","",32,N],[12,"m34","","",32,N],[12,"m44","","",32,N],[12,"m54","","",32,N],[3,"M5x5","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"m11","","",33,N],[12,"m21","","",33,N],[12,"m31","","",33,N],[12,"m41","","",33,N],[12,"m51","","",33,N],[12,"m12","","",33,N],[12,"m22","","",33,N],[12,"m32","","",33,N],[12,"m42","","",33,N],[12,"m52","","",33,N],[12,"m13","","",33,N],[12,"m23","","",33,N],[12,"m33","","",33,N],[12,"m43","","",33,N],[12,"m53","","",33,N],[12,"m14","","",33,N],[12,"m24","","",33,N],[12,"m34","","",33,N],[12,"m44","","",33,N],[12,"m54","","",33,N],[12,"m15","","",33,N],[12,"m25","","",33,N],[12,"m35","","",33,N],[12,"m45","","",33,N],[12,"m55","","",33,N],[3,"M5x6","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"m11","","",34,N],[12,"m21","","",34,N],[12,"m31","","",34,N],[12,"m41","","",34,N],[12,"m51","","",34,N],[12,"m12","","",34,N],[12,"m22","","",34,N],[12,"m32","","",34,N],[12,"m42","","",34,N],[12,"m52","","",34,N],[12,"m13","","",34,N],[12,"m23","","",34,N],[12,"m33","","",34,N],[12,"m43","","",34,N],[12,"m53","","",34,N],[12,"m14","","",34,N],[12,"m24","","",34,N],[12,"m34","","",34,N],[12,"m44","","",34,N],[12,"m54","","",34,N],[12,"m15","","",34,N],[12,"m25","","",34,N],[12,"m35","","",34,N],[12,"m45","","",34,N],[12,"m55","","",34,N],[12,"m16","","",34,N],[12,"m26","","",34,N],[12,"m36","","",34,N],[12,"m46","","",34,N],[12,"m56","","",34,N],[3,"M6x2","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"m11","","",35,N],[12,"m21","","",35,N],[12,"m31","","",35,N],[12,"m41","","",35,N],[12,"m51","","",35,N],[12,"m61","","",35,N],[12,"m12","","",35,N],[12,"m22","","",35,N],[12,"m32","","",35,N],[12,"m42","","",35,N],[12,"m52","","",35,N],[12,"m62","","",35,N],[3,"M6x3","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"m11","","",36,N],[12,"m21","","",36,N],[12,"m31","","",36,N],[12,"m41","","",36,N],[12,"m51","","",36,N],[12,"m61","","",36,N],[12,"m12","","",36,N],[12,"m22","","",36,N],[12,"m32","","",36,N],[12,"m42","","",36,N],[12,"m52","","",36,N],[12,"m62","","",36,N],[12,"m13","","",36,N],[12,"m23","","",36,N],[12,"m33","","",36,N],[12,"m43","","",36,N],[12,"m53","","",36,N],[12,"m63","","",36,N],[3,"M6x4","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"m11","","",37,N],[12,"m21","","",37,N],[12,"m31","","",37,N],[12,"m41","","",37,N],[12,"m51","","",37,N],[12,"m61","","",37,N],[12,"m12","","",37,N],[12,"m22","","",37,N],[12,"m32","","",37,N],[12,"m42","","",37,N],[12,"m52","","",37,N],[12,"m62","","",37,N],[12,"m13","","",37,N],[12,"m23","","",37,N],[12,"m33","","",37,N],[12,"m43","","",37,N],[12,"m53","","",37,N],[12,"m63","","",37,N],[12,"m14","","",37,N],[12,"m24","","",37,N],[12,"m34","","",37,N],[12,"m44","","",37,N],[12,"m54","","",37,N],[12,"m64","","",37,N],[3,"M6x5","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"m11","","",38,N],[12,"m21","","",38,N],[12,"m31","","",38,N],[12,"m41","","",38,N],[12,"m51","","",38,N],[12,"m61","","",38,N],[12,"m12","","",38,N],[12,"m22","","",38,N],[12,"m32","","",38,N],[12,"m42","","",38,N],[12,"m52","","",38,N],[12,"m62","","",38,N],[12,"m13","","",38,N],[12,"m23","","",38,N],[12,"m33","","",38,N],[12,"m43","","",38,N],[12,"m53","","",38,N],[12,"m63","","",38,N],[12,"m14","","",38,N],[12,"m24","","",38,N],[12,"m34","","",38,N],[12,"m44","","",38,N],[12,"m54","","",38,N],[12,"m64","","",38,N],[12,"m15","","",38,N],[12,"m25","","",38,N],[12,"m35","","",38,N],[12,"m45","","",38,N],[12,"m55","","",38,N],[12,"m65","","",38,N],[3,"M6x6","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",N,N],[12,"m11","","",39,N],[12,"m21","","",39,N],[12,"m31","","",39,N],[12,"m41","","",39,N],[12,"m51","","",39,N],[12,"m61","","",39,N],[12,"m12","","",39,N],[12,"m22","","",39,N],[12,"m32","","",39,N],[12,"m42","","",39,N],[12,"m52","","",39,N],[12,"m62","","",39,N],[12,"m13","","",39,N],[12,"m23","","",39,N],[12,"m33","","",39,N],[12,"m43","","",39,N],[12,"m53","","",39,N],[12,"m63","","",39,N],[12,"m14","","",39,N],[12,"m24","","",39,N],[12,"m34","","",39,N],[12,"m44","","",39,N],[12,"m54","","",39,N],[12,"m64","","",39,N],[12,"m15","","",39,N],[12,"m25","","",39,N],[12,"m35","","",39,N],[12,"m45","","",39,N],[12,"m55","","",39,N],[12,"m65","","",39,N],[12,"m16","","",39,N],[12,"m26","","",39,N],[12,"m36","","",39,N],[12,"m46","","",39,N],[12,"m56","","",39,N],[12,"m66","","",39,N],[11,"eq","","",8,[[["self"],["x"]],["bool"]]],[11,"ne","","",8,[[["self"],["x"]],["bool"]]],[11,"clone","","",8,[[["self"]],["x"]]],[11,"hash","","",8,N],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["xy"]],["bool"]]],[11,"ne","","",9,[[["self"],["xy"]],["bool"]]],[11,"clone","","",9,[[["self"]],["xy"]]],[11,"hash","","",9,N],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["xyz"]],["bool"]]],[11,"ne","","",10,[[["self"],["xyz"]],["bool"]]],[11,"clone","","",10,[[["self"]],["xyz"]]],[11,"hash","","",10,N],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["xyzw"]],["bool"]]],[11,"ne","","",11,[[["self"],["xyzw"]],["bool"]]],[11,"clone","","",11,[[["self"]],["xyzw"]]],[11,"hash","","",11,N],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["xyzwa"]],["bool"]]],[11,"ne","","",12,[[["self"],["xyzwa"]],["bool"]]],[11,"clone","","",12,[[["self"]],["xyzwa"]]],[11,"hash","","",12,N],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",13,[[["self"],["xyzwab"]],["bool"]]],[11,"ne","","",13,[[["self"],["xyzwab"]],["bool"]]],[11,"clone","","",13,[[["self"]],["xyzwab"]]],[11,"hash","","",13,N],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"eq","","",14,[[["self"],["ijkw"]],["bool"]]],[11,"ne","","",14,[[["self"],["ijkw"]],["bool"]]],[11,"clone","","",14,[[["self"]],["ijkw"]]],[11,"hash","","",14,N],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"eq","","",15,[[["self"],["m2x2"]],["bool"]]],[11,"ne","","",15,[[["self"],["m2x2"]],["bool"]]],[11,"clone","","",15,[[["self"]],["m2x2"]]],[11,"hash","","",15,N],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"eq","","",16,[[["self"],["m2x3"]],["bool"]]],[11,"ne","","",16,[[["self"],["m2x3"]],["bool"]]],[11,"clone","","",16,[[["self"]],["m2x3"]]],[11,"hash","","",16,N],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"eq","","",17,[[["self"],["m2x4"]],["bool"]]],[11,"ne","","",17,[[["self"],["m2x4"]],["bool"]]],[11,"clone","","",17,[[["self"]],["m2x4"]]],[11,"hash","","",17,N],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"eq","","",18,[[["self"],["m2x5"]],["bool"]]],[11,"ne","","",18,[[["self"],["m2x5"]],["bool"]]],[11,"clone","","",18,[[["self"]],["m2x5"]]],[11,"hash","","",18,N],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"eq","","",19,[[["self"],["m2x6"]],["bool"]]],[11,"ne","","",19,[[["self"],["m2x6"]],["bool"]]],[11,"clone","","",19,[[["self"]],["m2x6"]]],[11,"hash","","",19,N],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"eq","","",20,[[["self"],["m3x2"]],["bool"]]],[11,"ne","","",20,[[["self"],["m3x2"]],["bool"]]],[11,"clone","","",20,[[["self"]],["m3x2"]]],[11,"hash","","",20,N],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"eq","","",21,[[["self"],["m3x3"]],["bool"]]],[11,"ne","","",21,[[["self"],["m3x3"]],["bool"]]],[11,"clone","","",21,[[["self"]],["m3x3"]]],[11,"hash","","",21,N],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"eq","","",22,[[["self"],["m3x4"]],["bool"]]],[11,"ne","","",22,[[["self"],["m3x4"]],["bool"]]],[11,"clone","","",22,[[["self"]],["m3x4"]]],[11,"hash","","",22,N],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"eq","","",23,[[["self"],["m3x5"]],["bool"]]],[11,"ne","","",23,[[["self"],["m3x5"]],["bool"]]],[11,"clone","","",23,[[["self"]],["m3x5"]]],[11,"hash","","",23,N],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"eq","","",24,[[["self"],["m3x6"]],["bool"]]],[11,"ne","","",24,[[["self"],["m3x6"]],["bool"]]],[11,"clone","","",24,[[["self"]],["m3x6"]]],[11,"hash","","",24,N],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"eq","","",25,[[["self"],["m4x2"]],["bool"]]],[11,"ne","","",25,[[["self"],["m4x2"]],["bool"]]],[11,"clone","","",25,[[["self"]],["m4x2"]]],[11,"hash","","",25,N],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"eq","","",26,[[["self"],["m4x3"]],["bool"]]],[11,"ne","","",26,[[["self"],["m4x3"]],["bool"]]],[11,"clone","","",26,[[["self"]],["m4x3"]]],[11,"hash","","",26,N],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"eq","","",27,[[["self"],["m4x4"]],["bool"]]],[11,"ne","","",27,[[["self"],["m4x4"]],["bool"]]],[11,"clone","","",27,[[["self"]],["m4x4"]]],[11,"hash","","",27,N],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"eq","","",28,[[["self"],["m4x5"]],["bool"]]],[11,"ne","","",28,[[["self"],["m4x5"]],["bool"]]],[11,"clone","","",28,[[["self"]],["m4x5"]]],[11,"hash","","",28,N],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"eq","","",29,[[["self"],["m4x6"]],["bool"]]],[11,"ne","","",29,[[["self"],["m4x6"]],["bool"]]],[11,"clone","","",29,[[["self"]],["m4x6"]]],[11,"hash","","",29,N],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"eq","","",30,[[["self"],["m5x2"]],["bool"]]],[11,"ne","","",30,[[["self"],["m5x2"]],["bool"]]],[11,"clone","","",30,[[["self"]],["m5x2"]]],[11,"hash","","",30,N],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"eq","","",31,[[["self"],["m5x3"]],["bool"]]],[11,"ne","","",31,[[["self"],["m5x3"]],["bool"]]],[11,"clone","","",31,[[["self"]],["m5x3"]]],[11,"hash","","",31,N],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"eq","","",32,[[["self"],["m5x4"]],["bool"]]],[11,"ne","","",32,[[["self"],["m5x4"]],["bool"]]],[11,"clone","","",32,[[["self"]],["m5x4"]]],[11,"hash","","",32,N],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"eq","","",33,[[["self"],["m5x5"]],["bool"]]],[11,"ne","","",33,[[["self"],["m5x5"]],["bool"]]],[11,"clone","","",33,[[["self"]],["m5x5"]]],[11,"hash","","",33,N],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"eq","","",34,[[["self"],["m5x6"]],["bool"]]],[11,"ne","","",34,[[["self"],["m5x6"]],["bool"]]],[11,"clone","","",34,[[["self"]],["m5x6"]]],[11,"hash","","",34,N],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"eq","","",35,[[["self"],["m6x2"]],["bool"]]],[11,"ne","","",35,[[["self"],["m6x2"]],["bool"]]],[11,"clone","","",35,[[["self"]],["m6x2"]]],[11,"hash","","",35,N],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"eq","","",36,[[["self"],["m6x3"]],["bool"]]],[11,"ne","","",36,[[["self"],["m6x3"]],["bool"]]],[11,"clone","","",36,[[["self"]],["m6x3"]]],[11,"hash","","",36,N],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"eq","","",37,[[["self"],["m6x4"]],["bool"]]],[11,"ne","","",37,[[["self"],["m6x4"]],["bool"]]],[11,"clone","","",37,[[["self"]],["m6x4"]]],[11,"hash","","",37,N],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"eq","","",38,[[["self"],["m6x5"]],["bool"]]],[11,"ne","","",38,[[["self"],["m6x5"]],["bool"]]],[11,"clone","","",38,[[["self"]],["m6x5"]]],[11,"hash","","",38,N],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"eq","","",39,[[["self"],["m6x6"]],["bool"]]],[11,"ne","","",39,[[["self"],["m6x6"]],["bool"]]],[11,"clone","","",39,[[["self"]],["m6x6"]]],[11,"hash","","",39,N],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"deref","nalgebra::base","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[0,"default_allocator","","The default matrix data storage allocator.",N,N],[3,"DefaultAllocator","nalgebra::base::default_allocator","An allocator based on `GenericArray` and `MatrixVec` for statically-sized and dynamically-sized matrices respectively.",N,N],[11,"allocate_uninitialized","","",40,N],[11,"allocate_from_iterator","","",40,N],[11,"allocate_uninitialized","","",40,N],[11,"allocate_from_iterator","","",40,N],[11,"allocate_uninitialized","","",40,N],[11,"allocate_from_iterator","","",40,N],[11,"reallocate_copy","","",40,N],[11,"reallocate_copy","","",40,[[["dynamic"],["cto"],["matrixarray"]],["matrixvec",["dynamic"]]]],[11,"reallocate_copy","","",40,[[["rto"],["dynamic"],["matrixarray"]],["matrixvec",["dynamic"]]]],[11,"reallocate_copy","","",40,[[["dynamic"],["cto"],["matrixvec",["dynamic"]]],["matrixvec",["dynamic"]]]],[11,"reallocate_copy","","",40,[[["rto"],["dynamic"],["matrixvec",["dynamic"]]],["matrixvec",["dynamic"]]]],[11,"reallocate_copy","","",40,[[["dynamic"],["cto"],["matrixvec",["dynamic"]]],["matrixvec",["dynamic"]]]],[11,"reallocate_copy","","",40,[[["rto"],["dynamic"],["matrixvec",["dynamic"]]],["matrixvec",["dynamic"]]]],[0,"dimension","nalgebra::base","Traits and tags for identifying the dimension of all algebraic entities.",N,N],[3,"Dynamic","nalgebra::base::dimension","Dim of dynamically-sized algebraic entities.",N,N],[3,"U1","","",N,N],[3,"U0","","",N,N],[3,"U2","","",N,N],[3,"U3","","",N,N],[3,"U4","","",N,N],[3,"U5","","",N,N],[3,"U6","","",N,N],[3,"U7","","",N,N],[3,"U8","","",N,N],[3,"U9","","",N,N],[3,"U10","","",N,N],[3,"U11","","",N,N],[3,"U12","","",N,N],[3,"U13","","",N,N],[3,"U14","","",N,N],[3,"U15","","",N,N],[3,"U16","","",N,N],[3,"U17","","",N,N],[3,"U18","","",N,N],[3,"U19","","",N,N],[3,"U20","","",N,N],[3,"U21","","",N,N],[3,"U22","","",N,N],[3,"U23","","",N,N],[3,"U24","","",N,N],[3,"U25","","",N,N],[3,"U26","","",N,N],[3,"U27","","",N,N],[3,"U28","","",N,N],[3,"U29","","",N,N],[3,"U30","","",N,N],[3,"U31","","",N,N],[3,"U32","","",N,N],[3,"U33","","",N,N],[3,"U34","","",N,N],[3,"U35","","",N,N],[3,"U36","","",N,N],[3,"U37","","",N,N],[3,"U38","","",N,N],[3,"U39","","",N,N],[3,"U40","","",N,N],[3,"U41","","",N,N],[3,"U42","","",N,N],[3,"U43","","",N,N],[3,"U44","","",N,N],[3,"U45","","",N,N],[3,"U46","","",N,N],[3,"U47","","",N,N],[3,"U48","","",N,N],[3,"U49","","",N,N],[3,"U50","","",N,N],[3,"U51","","",N,N],[3,"U52","","",N,N],[3,"U53","","",N,N],[3,"U54","","",N,N],[3,"U55","","",N,N],[3,"U56","","",N,N],[3,"U57","","",N,N],[3,"U58","","",N,N],[3,"U59","","",N,N],[3,"U60","","",N,N],[3,"U61","","",N,N],[3,"U62","","",N,N],[3,"U63","","",N,N],[3,"U64","","",N,N],[3,"U65","","",N,N],[3,"U66","","",N,N],[3,"U67","","",N,N],[3,"U68","","",N,N],[3,"U69","","",N,N],[3,"U70","","",N,N],[3,"U71","","",N,N],[3,"U72","","",N,N],[3,"U73","","",N,N],[3,"U74","","",N,N],[3,"U75","","",N,N],[3,"U76","","",N,N],[3,"U77","","",N,N],[3,"U78","","",N,N],[3,"U79","","",N,N],[3,"U80","","",N,N],[3,"U81","","",N,N],[3,"U82","","",N,N],[3,"U83","","",N,N],[3,"U84","","",N,N],[3,"U85","","",N,N],[3,"U86","","",N,N],[3,"U87","","",N,N],[3,"U88","","",N,N],[3,"U89","","",N,N],[3,"U90","","",N,N],[3,"U91","","",N,N],[3,"U92","","",N,N],[3,"U93","","",N,N],[3,"U94","","",N,N],[3,"U95","","",N,N],[3,"U96","","",N,N],[3,"U97","","",N,N],[3,"U98","","",N,N],[3,"U99","","",N,N],[3,"U100","","",N,N],[3,"U101","","",N,N],[3,"U102","","",N,N],[3,"U103","","",N,N],[3,"U104","","",N,N],[3,"U105","","",N,N],[3,"U106","","",N,N],[3,"U107","","",N,N],[3,"U108","","",N,N],[3,"U109","","",N,N],[3,"U110","","",N,N],[3,"U111","","",N,N],[3,"U112","","",N,N],[3,"U113","","",N,N],[3,"U114","","",N,N],[3,"U115","","",N,N],[3,"U116","","",N,N],[3,"U117","","",N,N],[3,"U118","","",N,N],[3,"U119","","",N,N],[3,"U120","","",N,N],[3,"U121","","",N,N],[3,"U122","","",N,N],[3,"U123","","",N,N],[3,"U124","","",N,N],[3,"U125","","",N,N],[3,"U126","","",N,N],[3,"U127","","",N,N],[6,"DimSum","","",N,N],[6,"DimNameSum","","",N,N],[6,"DimProd","","",N,N],[6,"DimNameProd","","",N,N],[6,"DimDiff","","",N,N],[6,"DimNameDiff","","",N,N],[6,"DimQuot","","",N,N],[6,"DimNameQuot","","",N,N],[6,"DimMinimum","","",N,N],[6,"DimNameNimimum","","",N,N],[6,"DimMaximum","","",N,N],[6,"DimNameMaximum","","",N,N],[8,"IsDynamic","","Trait implemented by `Dynamic`.",N,N],[8,"IsNotStaticOne","","Trait implemented by `Dynamic` and type-level integers different from `U1`.",N,N],[8,"Dim","","Trait implemented by any type that can be used as a dimension. This includes type-level integers and `Dynamic` (for dimensions not known at compile-time).",N,N],[11,"is","","",41,[[],["bool"]]],[10,"try_to_usize","","Gets the compile-time value of `Self`. Returns `None` if it is not known, i.e., if `Self = Dynamic`.",41,[[],["option",["usize"]]]],[10,"value","","Gets the run-time value of `self`. For type-level integers, this is the same as `Self::try_to_usize().unwrap()`.",41,[[["self"]],["usize"]]],[10,"from_usize","","Builds an instance of `Self` from a run-time value. Panics if `Self` is a type-level integer and `dim != Self::try_to_usize().unwrap()`.",41,[[["usize"]],["self"]]],[8,"DimAdd","","",N,N],[16,"Output","","",42,N],[10,"add","","",42,N],[8,"DimNameAdd","","",N,N],[16,"Output","","",43,N],[10,"add","","",43,N],[8,"DimMul","","",N,N],[16,"Output","","",44,N],[10,"mul","","",44,N],[8,"DimNameMul","","",N,N],[16,"Output","","",45,N],[10,"mul","","",45,N],[8,"DimSub","","",N,N],[16,"Output","","",46,N],[10,"sub","","",46,N],[8,"DimNameSub","","",N,N],[16,"Output","","",47,N],[10,"sub","","",47,N],[8,"DimDiv","","",N,N],[16,"Output","","",48,N],[10,"div","","",48,N],[8,"DimNameDiv","","",N,N],[16,"Output","","",49,N],[10,"div","","",49,N],[8,"DimMin","","",N,N],[16,"Output","","",50,N],[10,"min","","",50,N],[8,"DimNameMin","","",N,N],[16,"Output","","",51,N],[10,"min","","",51,N],[8,"DimMax","","",N,N],[16,"Output","","",52,N],[10,"max","","",52,N],[8,"DimNameMax","","",N,N],[16,"Output","","",53,N],[10,"max","","",53,N],[8,"DimName","","Trait implemented exclusively by type-level integers.",N,N],[16,"Value","","",54,N],[10,"name","","The name of this dimension, i.e., the singleton `Self`.",54,[[],["self"]]],[11,"dim","","The value of this dimension.",54,[[],["usize"]]],[8,"NamedDim","","",N,N],[16,"Name","","",55,N],[11,"clone","","",56,[[["self"]],["dynamic"]]],[11,"eq","","",56,[[["self"],["dynamic"]],["bool"]]],[11,"ne","","",56,[[["self"],["dynamic"]],["bool"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"new","","A dynamic size equal to `value`.",56,[[["usize"]],["dynamic"]]],[11,"try_to_usize","","",56,[[],["option",["usize"]]]],[11,"from_usize","","",56,[[["usize"]],["self"]]],[11,"value","","",56,[[["self"]],["usize"]]],[11,"add","","",56,[[["self"],["usize"]],["dynamic"]]],[11,"sub","","",56,[[["self"],["usize"]],["dynamic"]]],[11,"add","","",56,[[["self"],["d"]],["dynamic"]]],[11,"mul","","",56,[[["self"],["d"]],["dynamic"]]],[11,"sub","","",56,[[["self"],["d"]],["dynamic"]]],[11,"div","","",56,[[["self"],["d"]],["dynamic"]]],[11,"min","","",56,[[["self"],["d"]],["dynamic"]]],[11,"max","","",56,[[["self"],["d"]],["dynamic"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"clone","","",57,[[["self"]],["u1"]]],[11,"hash","","",57,N],[11,"eq","","",57,[[["self"],["u1"]],["bool"]]],[11,"try_to_usize","","",57,[[],["option",["usize"]]]],[11,"from_usize","","",57,[[["usize"]],["self"]]],[11,"value","","",57,[[["self"]],["usize"]]],[11,"name","","",57,[[],["self"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"clone","","",58,[[["self"]],["u0"]]],[11,"hash","","",58,N],[11,"eq","","",58,[[["self"],["u0"]],["bool"]]],[11,"try_to_usize","","",58,[[],["option",["usize"]]]],[11,"from_usize","","",58,[[["usize"]],["self"]]],[11,"value","","",58,[[["self"]],["usize"]]],[11,"name","","",58,[[],["self"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"clone","","",59,[[["self"]],["u2"]]],[11,"hash","","",59,N],[11,"eq","","",59,[[["self"],["u2"]],["bool"]]],[11,"try_to_usize","","",59,[[],["option",["usize"]]]],[11,"from_usize","","",59,[[["usize"]],["self"]]],[11,"value","","",59,[[["self"]],["usize"]]],[11,"name","","",59,[[],["self"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"clone","","",60,[[["self"]],["u3"]]],[11,"hash","","",60,N],[11,"eq","","",60,[[["self"],["u3"]],["bool"]]],[11,"try_to_usize","","",60,[[],["option",["usize"]]]],[11,"from_usize","","",60,[[["usize"]],["self"]]],[11,"value","","",60,[[["self"]],["usize"]]],[11,"name","","",60,[[],["self"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"clone","","",61,[[["self"]],["u4"]]],[11,"hash","","",61,N],[11,"eq","","",61,[[["self"],["u4"]],["bool"]]],[11,"try_to_usize","","",61,[[],["option",["usize"]]]],[11,"from_usize","","",61,[[["usize"]],["self"]]],[11,"value","","",61,[[["self"]],["usize"]]],[11,"name","","",61,[[],["self"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"clone","","",62,[[["self"]],["u5"]]],[11,"hash","","",62,N],[11,"eq","","",62,[[["self"],["u5"]],["bool"]]],[11,"try_to_usize","","",62,[[],["option",["usize"]]]],[11,"from_usize","","",62,[[["usize"]],["self"]]],[11,"value","","",62,[[["self"]],["usize"]]],[11,"name","","",62,[[],["self"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"clone","","",63,[[["self"]],["u6"]]],[11,"hash","","",63,N],[11,"eq","","",63,[[["self"],["u6"]],["bool"]]],[11,"try_to_usize","","",63,[[],["option",["usize"]]]],[11,"from_usize","","",63,[[["usize"]],["self"]]],[11,"value","","",63,[[["self"]],["usize"]]],[11,"name","","",63,[[],["self"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"clone","","",64,[[["self"]],["u7"]]],[11,"hash","","",64,N],[11,"eq","","",64,[[["self"],["u7"]],["bool"]]],[11,"try_to_usize","","",64,[[],["option",["usize"]]]],[11,"from_usize","","",64,[[["usize"]],["self"]]],[11,"value","","",64,[[["self"]],["usize"]]],[11,"name","","",64,[[],["self"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"clone","","",65,[[["self"]],["u8"]]],[11,"hash","","",65,N],[11,"eq","","",65,[[["self"],["u8"]],["bool"]]],[11,"try_to_usize","","",65,[[],["option",["usize"]]]],[11,"from_usize","","",65,[[["usize"]],["self"]]],[11,"value","","",65,[[["self"]],["usize"]]],[11,"name","","",65,[[],["self"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"clone","","",66,[[["self"]],["u9"]]],[11,"hash","","",66,N],[11,"eq","","",66,[[["self"],["u9"]],["bool"]]],[11,"try_to_usize","","",66,[[],["option",["usize"]]]],[11,"from_usize","","",66,[[["usize"]],["self"]]],[11,"value","","",66,[[["self"]],["usize"]]],[11,"name","","",66,[[],["self"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"clone","","",67,[[["self"]],["u10"]]],[11,"hash","","",67,N],[11,"eq","","",67,[[["self"],["u10"]],["bool"]]],[11,"try_to_usize","","",67,[[],["option",["usize"]]]],[11,"from_usize","","",67,[[["usize"]],["self"]]],[11,"value","","",67,[[["self"]],["usize"]]],[11,"name","","",67,[[],["self"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"clone","","",68,[[["self"]],["u11"]]],[11,"hash","","",68,N],[11,"eq","","",68,[[["self"],["u11"]],["bool"]]],[11,"try_to_usize","","",68,[[],["option",["usize"]]]],[11,"from_usize","","",68,[[["usize"]],["self"]]],[11,"value","","",68,[[["self"]],["usize"]]],[11,"name","","",68,[[],["self"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"clone","","",69,[[["self"]],["u12"]]],[11,"hash","","",69,N],[11,"eq","","",69,[[["self"],["u12"]],["bool"]]],[11,"try_to_usize","","",69,[[],["option",["usize"]]]],[11,"from_usize","","",69,[[["usize"]],["self"]]],[11,"value","","",69,[[["self"]],["usize"]]],[11,"name","","",69,[[],["self"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"clone","","",70,[[["self"]],["u13"]]],[11,"hash","","",70,N],[11,"eq","","",70,[[["self"],["u13"]],["bool"]]],[11,"try_to_usize","","",70,[[],["option",["usize"]]]],[11,"from_usize","","",70,[[["usize"]],["self"]]],[11,"value","","",70,[[["self"]],["usize"]]],[11,"name","","",70,[[],["self"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"clone","","",71,[[["self"]],["u14"]]],[11,"hash","","",71,N],[11,"eq","","",71,[[["self"],["u14"]],["bool"]]],[11,"try_to_usize","","",71,[[],["option",["usize"]]]],[11,"from_usize","","",71,[[["usize"]],["self"]]],[11,"value","","",71,[[["self"]],["usize"]]],[11,"name","","",71,[[],["self"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"clone","","",72,[[["self"]],["u15"]]],[11,"hash","","",72,N],[11,"eq","","",72,[[["self"],["u15"]],["bool"]]],[11,"try_to_usize","","",72,[[],["option",["usize"]]]],[11,"from_usize","","",72,[[["usize"]],["self"]]],[11,"value","","",72,[[["self"]],["usize"]]],[11,"name","","",72,[[],["self"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"clone","","",73,[[["self"]],["u16"]]],[11,"hash","","",73,N],[11,"eq","","",73,[[["self"],["u16"]],["bool"]]],[11,"try_to_usize","","",73,[[],["option",["usize"]]]],[11,"from_usize","","",73,[[["usize"]],["self"]]],[11,"value","","",73,[[["self"]],["usize"]]],[11,"name","","",73,[[],["self"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"clone","","",74,[[["self"]],["u17"]]],[11,"hash","","",74,N],[11,"eq","","",74,[[["self"],["u17"]],["bool"]]],[11,"try_to_usize","","",74,[[],["option",["usize"]]]],[11,"from_usize","","",74,[[["usize"]],["self"]]],[11,"value","","",74,[[["self"]],["usize"]]],[11,"name","","",74,[[],["self"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"clone","","",75,[[["self"]],["u18"]]],[11,"hash","","",75,N],[11,"eq","","",75,[[["self"],["u18"]],["bool"]]],[11,"try_to_usize","","",75,[[],["option",["usize"]]]],[11,"from_usize","","",75,[[["usize"]],["self"]]],[11,"value","","",75,[[["self"]],["usize"]]],[11,"name","","",75,[[],["self"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"clone","","",76,[[["self"]],["u19"]]],[11,"hash","","",76,N],[11,"eq","","",76,[[["self"],["u19"]],["bool"]]],[11,"try_to_usize","","",76,[[],["option",["usize"]]]],[11,"from_usize","","",76,[[["usize"]],["self"]]],[11,"value","","",76,[[["self"]],["usize"]]],[11,"name","","",76,[[],["self"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"clone","","",77,[[["self"]],["u20"]]],[11,"hash","","",77,N],[11,"eq","","",77,[[["self"],["u20"]],["bool"]]],[11,"try_to_usize","","",77,[[],["option",["usize"]]]],[11,"from_usize","","",77,[[["usize"]],["self"]]],[11,"value","","",77,[[["self"]],["usize"]]],[11,"name","","",77,[[],["self"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"clone","","",78,[[["self"]],["u21"]]],[11,"hash","","",78,N],[11,"eq","","",78,[[["self"],["u21"]],["bool"]]],[11,"try_to_usize","","",78,[[],["option",["usize"]]]],[11,"from_usize","","",78,[[["usize"]],["self"]]],[11,"value","","",78,[[["self"]],["usize"]]],[11,"name","","",78,[[],["self"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"clone","","",79,[[["self"]],["u22"]]],[11,"hash","","",79,N],[11,"eq","","",79,[[["self"],["u22"]],["bool"]]],[11,"try_to_usize","","",79,[[],["option",["usize"]]]],[11,"from_usize","","",79,[[["usize"]],["self"]]],[11,"value","","",79,[[["self"]],["usize"]]],[11,"name","","",79,[[],["self"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"clone","","",80,[[["self"]],["u23"]]],[11,"hash","","",80,N],[11,"eq","","",80,[[["self"],["u23"]],["bool"]]],[11,"try_to_usize","","",80,[[],["option",["usize"]]]],[11,"from_usize","","",80,[[["usize"]],["self"]]],[11,"value","","",80,[[["self"]],["usize"]]],[11,"name","","",80,[[],["self"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"clone","","",81,[[["self"]],["u24"]]],[11,"hash","","",81,N],[11,"eq","","",81,[[["self"],["u24"]],["bool"]]],[11,"try_to_usize","","",81,[[],["option",["usize"]]]],[11,"from_usize","","",81,[[["usize"]],["self"]]],[11,"value","","",81,[[["self"]],["usize"]]],[11,"name","","",81,[[],["self"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"clone","","",82,[[["self"]],["u25"]]],[11,"hash","","",82,N],[11,"eq","","",82,[[["self"],["u25"]],["bool"]]],[11,"try_to_usize","","",82,[[],["option",["usize"]]]],[11,"from_usize","","",82,[[["usize"]],["self"]]],[11,"value","","",82,[[["self"]],["usize"]]],[11,"name","","",82,[[],["self"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"clone","","",83,[[["self"]],["u26"]]],[11,"hash","","",83,N],[11,"eq","","",83,[[["self"],["u26"]],["bool"]]],[11,"try_to_usize","","",83,[[],["option",["usize"]]]],[11,"from_usize","","",83,[[["usize"]],["self"]]],[11,"value","","",83,[[["self"]],["usize"]]],[11,"name","","",83,[[],["self"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"clone","","",84,[[["self"]],["u27"]]],[11,"hash","","",84,N],[11,"eq","","",84,[[["self"],["u27"]],["bool"]]],[11,"try_to_usize","","",84,[[],["option",["usize"]]]],[11,"from_usize","","",84,[[["usize"]],["self"]]],[11,"value","","",84,[[["self"]],["usize"]]],[11,"name","","",84,[[],["self"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"clone","","",85,[[["self"]],["u28"]]],[11,"hash","","",85,N],[11,"eq","","",85,[[["self"],["u28"]],["bool"]]],[11,"try_to_usize","","",85,[[],["option",["usize"]]]],[11,"from_usize","","",85,[[["usize"]],["self"]]],[11,"value","","",85,[[["self"]],["usize"]]],[11,"name","","",85,[[],["self"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"clone","","",86,[[["self"]],["u29"]]],[11,"hash","","",86,N],[11,"eq","","",86,[[["self"],["u29"]],["bool"]]],[11,"try_to_usize","","",86,[[],["option",["usize"]]]],[11,"from_usize","","",86,[[["usize"]],["self"]]],[11,"value","","",86,[[["self"]],["usize"]]],[11,"name","","",86,[[],["self"]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"clone","","",87,[[["self"]],["u30"]]],[11,"hash","","",87,N],[11,"eq","","",87,[[["self"],["u30"]],["bool"]]],[11,"try_to_usize","","",87,[[],["option",["usize"]]]],[11,"from_usize","","",87,[[["usize"]],["self"]]],[11,"value","","",87,[[["self"]],["usize"]]],[11,"name","","",87,[[],["self"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"clone","","",88,[[["self"]],["u31"]]],[11,"hash","","",88,N],[11,"eq","","",88,[[["self"],["u31"]],["bool"]]],[11,"try_to_usize","","",88,[[],["option",["usize"]]]],[11,"from_usize","","",88,[[["usize"]],["self"]]],[11,"value","","",88,[[["self"]],["usize"]]],[11,"name","","",88,[[],["self"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"clone","","",89,[[["self"]],["u32"]]],[11,"hash","","",89,N],[11,"eq","","",89,[[["self"],["u32"]],["bool"]]],[11,"try_to_usize","","",89,[[],["option",["usize"]]]],[11,"from_usize","","",89,[[["usize"]],["self"]]],[11,"value","","",89,[[["self"]],["usize"]]],[11,"name","","",89,[[],["self"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"clone","","",90,[[["self"]],["u33"]]],[11,"hash","","",90,N],[11,"eq","","",90,[[["self"],["u33"]],["bool"]]],[11,"try_to_usize","","",90,[[],["option",["usize"]]]],[11,"from_usize","","",90,[[["usize"]],["self"]]],[11,"value","","",90,[[["self"]],["usize"]]],[11,"name","","",90,[[],["self"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"clone","","",91,[[["self"]],["u34"]]],[11,"hash","","",91,N],[11,"eq","","",91,[[["self"],["u34"]],["bool"]]],[11,"try_to_usize","","",91,[[],["option",["usize"]]]],[11,"from_usize","","",91,[[["usize"]],["self"]]],[11,"value","","",91,[[["self"]],["usize"]]],[11,"name","","",91,[[],["self"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"clone","","",92,[[["self"]],["u35"]]],[11,"hash","","",92,N],[11,"eq","","",92,[[["self"],["u35"]],["bool"]]],[11,"try_to_usize","","",92,[[],["option",["usize"]]]],[11,"from_usize","","",92,[[["usize"]],["self"]]],[11,"value","","",92,[[["self"]],["usize"]]],[11,"name","","",92,[[],["self"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"clone","","",93,[[["self"]],["u36"]]],[11,"hash","","",93,N],[11,"eq","","",93,[[["self"],["u36"]],["bool"]]],[11,"try_to_usize","","",93,[[],["option",["usize"]]]],[11,"from_usize","","",93,[[["usize"]],["self"]]],[11,"value","","",93,[[["self"]],["usize"]]],[11,"name","","",93,[[],["self"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"clone","","",94,[[["self"]],["u37"]]],[11,"hash","","",94,N],[11,"eq","","",94,[[["self"],["u37"]],["bool"]]],[11,"try_to_usize","","",94,[[],["option",["usize"]]]],[11,"from_usize","","",94,[[["usize"]],["self"]]],[11,"value","","",94,[[["self"]],["usize"]]],[11,"name","","",94,[[],["self"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"clone","","",95,[[["self"]],["u38"]]],[11,"hash","","",95,N],[11,"eq","","",95,[[["self"],["u38"]],["bool"]]],[11,"try_to_usize","","",95,[[],["option",["usize"]]]],[11,"from_usize","","",95,[[["usize"]],["self"]]],[11,"value","","",95,[[["self"]],["usize"]]],[11,"name","","",95,[[],["self"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"clone","","",96,[[["self"]],["u39"]]],[11,"hash","","",96,N],[11,"eq","","",96,[[["self"],["u39"]],["bool"]]],[11,"try_to_usize","","",96,[[],["option",["usize"]]]],[11,"from_usize","","",96,[[["usize"]],["self"]]],[11,"value","","",96,[[["self"]],["usize"]]],[11,"name","","",96,[[],["self"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"clone","","",97,[[["self"]],["u40"]]],[11,"hash","","",97,N],[11,"eq","","",97,[[["self"],["u40"]],["bool"]]],[11,"try_to_usize","","",97,[[],["option",["usize"]]]],[11,"from_usize","","",97,[[["usize"]],["self"]]],[11,"value","","",97,[[["self"]],["usize"]]],[11,"name","","",97,[[],["self"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"clone","","",98,[[["self"]],["u41"]]],[11,"hash","","",98,N],[11,"eq","","",98,[[["self"],["u41"]],["bool"]]],[11,"try_to_usize","","",98,[[],["option",["usize"]]]],[11,"from_usize","","",98,[[["usize"]],["self"]]],[11,"value","","",98,[[["self"]],["usize"]]],[11,"name","","",98,[[],["self"]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result"]]],[11,"clone","","",99,[[["self"]],["u42"]]],[11,"hash","","",99,N],[11,"eq","","",99,[[["self"],["u42"]],["bool"]]],[11,"try_to_usize","","",99,[[],["option",["usize"]]]],[11,"from_usize","","",99,[[["usize"]],["self"]]],[11,"value","","",99,[[["self"]],["usize"]]],[11,"name","","",99,[[],["self"]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result"]]],[11,"clone","","",100,[[["self"]],["u43"]]],[11,"hash","","",100,N],[11,"eq","","",100,[[["self"],["u43"]],["bool"]]],[11,"try_to_usize","","",100,[[],["option",["usize"]]]],[11,"from_usize","","",100,[[["usize"]],["self"]]],[11,"value","","",100,[[["self"]],["usize"]]],[11,"name","","",100,[[],["self"]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"clone","","",101,[[["self"]],["u44"]]],[11,"hash","","",101,N],[11,"eq","","",101,[[["self"],["u44"]],["bool"]]],[11,"try_to_usize","","",101,[[],["option",["usize"]]]],[11,"from_usize","","",101,[[["usize"]],["self"]]],[11,"value","","",101,[[["self"]],["usize"]]],[11,"name","","",101,[[],["self"]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result"]]],[11,"clone","","",102,[[["self"]],["u45"]]],[11,"hash","","",102,N],[11,"eq","","",102,[[["self"],["u45"]],["bool"]]],[11,"try_to_usize","","",102,[[],["option",["usize"]]]],[11,"from_usize","","",102,[[["usize"]],["self"]]],[11,"value","","",102,[[["self"]],["usize"]]],[11,"name","","",102,[[],["self"]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result"]]],[11,"clone","","",103,[[["self"]],["u46"]]],[11,"hash","","",103,N],[11,"eq","","",103,[[["self"],["u46"]],["bool"]]],[11,"try_to_usize","","",103,[[],["option",["usize"]]]],[11,"from_usize","","",103,[[["usize"]],["self"]]],[11,"value","","",103,[[["self"]],["usize"]]],[11,"name","","",103,[[],["self"]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result"]]],[11,"clone","","",104,[[["self"]],["u47"]]],[11,"hash","","",104,N],[11,"eq","","",104,[[["self"],["u47"]],["bool"]]],[11,"try_to_usize","","",104,[[],["option",["usize"]]]],[11,"from_usize","","",104,[[["usize"]],["self"]]],[11,"value","","",104,[[["self"]],["usize"]]],[11,"name","","",104,[[],["self"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"clone","","",105,[[["self"]],["u48"]]],[11,"hash","","",105,N],[11,"eq","","",105,[[["self"],["u48"]],["bool"]]],[11,"try_to_usize","","",105,[[],["option",["usize"]]]],[11,"from_usize","","",105,[[["usize"]],["self"]]],[11,"value","","",105,[[["self"]],["usize"]]],[11,"name","","",105,[[],["self"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"clone","","",106,[[["self"]],["u49"]]],[11,"hash","","",106,N],[11,"eq","","",106,[[["self"],["u49"]],["bool"]]],[11,"try_to_usize","","",106,[[],["option",["usize"]]]],[11,"from_usize","","",106,[[["usize"]],["self"]]],[11,"value","","",106,[[["self"]],["usize"]]],[11,"name","","",106,[[],["self"]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"clone","","",107,[[["self"]],["u50"]]],[11,"hash","","",107,N],[11,"eq","","",107,[[["self"],["u50"]],["bool"]]],[11,"try_to_usize","","",107,[[],["option",["usize"]]]],[11,"from_usize","","",107,[[["usize"]],["self"]]],[11,"value","","",107,[[["self"]],["usize"]]],[11,"name","","",107,[[],["self"]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result"]]],[11,"clone","","",108,[[["self"]],["u51"]]],[11,"hash","","",108,N],[11,"eq","","",108,[[["self"],["u51"]],["bool"]]],[11,"try_to_usize","","",108,[[],["option",["usize"]]]],[11,"from_usize","","",108,[[["usize"]],["self"]]],[11,"value","","",108,[[["self"]],["usize"]]],[11,"name","","",108,[[],["self"]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"clone","","",109,[[["self"]],["u52"]]],[11,"hash","","",109,N],[11,"eq","","",109,[[["self"],["u52"]],["bool"]]],[11,"try_to_usize","","",109,[[],["option",["usize"]]]],[11,"from_usize","","",109,[[["usize"]],["self"]]],[11,"value","","",109,[[["self"]],["usize"]]],[11,"name","","",109,[[],["self"]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"clone","","",110,[[["self"]],["u53"]]],[11,"hash","","",110,N],[11,"eq","","",110,[[["self"],["u53"]],["bool"]]],[11,"try_to_usize","","",110,[[],["option",["usize"]]]],[11,"from_usize","","",110,[[["usize"]],["self"]]],[11,"value","","",110,[[["self"]],["usize"]]],[11,"name","","",110,[[],["self"]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[11,"clone","","",111,[[["self"]],["u54"]]],[11,"hash","","",111,N],[11,"eq","","",111,[[["self"],["u54"]],["bool"]]],[11,"try_to_usize","","",111,[[],["option",["usize"]]]],[11,"from_usize","","",111,[[["usize"]],["self"]]],[11,"value","","",111,[[["self"]],["usize"]]],[11,"name","","",111,[[],["self"]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"clone","","",112,[[["self"]],["u55"]]],[11,"hash","","",112,N],[11,"eq","","",112,[[["self"],["u55"]],["bool"]]],[11,"try_to_usize","","",112,[[],["option",["usize"]]]],[11,"from_usize","","",112,[[["usize"]],["self"]]],[11,"value","","",112,[[["self"]],["usize"]]],[11,"name","","",112,[[],["self"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"clone","","",113,[[["self"]],["u56"]]],[11,"hash","","",113,N],[11,"eq","","",113,[[["self"],["u56"]],["bool"]]],[11,"try_to_usize","","",113,[[],["option",["usize"]]]],[11,"from_usize","","",113,[[["usize"]],["self"]]],[11,"value","","",113,[[["self"]],["usize"]]],[11,"name","","",113,[[],["self"]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"clone","","",114,[[["self"]],["u57"]]],[11,"hash","","",114,N],[11,"eq","","",114,[[["self"],["u57"]],["bool"]]],[11,"try_to_usize","","",114,[[],["option",["usize"]]]],[11,"from_usize","","",114,[[["usize"]],["self"]]],[11,"value","","",114,[[["self"]],["usize"]]],[11,"name","","",114,[[],["self"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"clone","","",115,[[["self"]],["u58"]]],[11,"hash","","",115,N],[11,"eq","","",115,[[["self"],["u58"]],["bool"]]],[11,"try_to_usize","","",115,[[],["option",["usize"]]]],[11,"from_usize","","",115,[[["usize"]],["self"]]],[11,"value","","",115,[[["self"]],["usize"]]],[11,"name","","",115,[[],["self"]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[11,"clone","","",116,[[["self"]],["u59"]]],[11,"hash","","",116,N],[11,"eq","","",116,[[["self"],["u59"]],["bool"]]],[11,"try_to_usize","","",116,[[],["option",["usize"]]]],[11,"from_usize","","",116,[[["usize"]],["self"]]],[11,"value","","",116,[[["self"]],["usize"]]],[11,"name","","",116,[[],["self"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"clone","","",117,[[["self"]],["u60"]]],[11,"hash","","",117,N],[11,"eq","","",117,[[["self"],["u60"]],["bool"]]],[11,"try_to_usize","","",117,[[],["option",["usize"]]]],[11,"from_usize","","",117,[[["usize"]],["self"]]],[11,"value","","",117,[[["self"]],["usize"]]],[11,"name","","",117,[[],["self"]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"clone","","",118,[[["self"]],["u61"]]],[11,"hash","","",118,N],[11,"eq","","",118,[[["self"],["u61"]],["bool"]]],[11,"try_to_usize","","",118,[[],["option",["usize"]]]],[11,"from_usize","","",118,[[["usize"]],["self"]]],[11,"value","","",118,[[["self"]],["usize"]]],[11,"name","","",118,[[],["self"]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"clone","","",119,[[["self"]],["u62"]]],[11,"hash","","",119,N],[11,"eq","","",119,[[["self"],["u62"]],["bool"]]],[11,"try_to_usize","","",119,[[],["option",["usize"]]]],[11,"from_usize","","",119,[[["usize"]],["self"]]],[11,"value","","",119,[[["self"]],["usize"]]],[11,"name","","",119,[[],["self"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"clone","","",120,[[["self"]],["u63"]]],[11,"hash","","",120,N],[11,"eq","","",120,[[["self"],["u63"]],["bool"]]],[11,"try_to_usize","","",120,[[],["option",["usize"]]]],[11,"from_usize","","",120,[[["usize"]],["self"]]],[11,"value","","",120,[[["self"]],["usize"]]],[11,"name","","",120,[[],["self"]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"clone","","",121,[[["self"]],["u64"]]],[11,"hash","","",121,N],[11,"eq","","",121,[[["self"],["u64"]],["bool"]]],[11,"try_to_usize","","",121,[[],["option",["usize"]]]],[11,"from_usize","","",121,[[["usize"]],["self"]]],[11,"value","","",121,[[["self"]],["usize"]]],[11,"name","","",121,[[],["self"]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result"]]],[11,"clone","","",122,[[["self"]],["u65"]]],[11,"hash","","",122,N],[11,"eq","","",122,[[["self"],["u65"]],["bool"]]],[11,"try_to_usize","","",122,[[],["option",["usize"]]]],[11,"from_usize","","",122,[[["usize"]],["self"]]],[11,"value","","",122,[[["self"]],["usize"]]],[11,"name","","",122,[[],["self"]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result"]]],[11,"clone","","",123,[[["self"]],["u66"]]],[11,"hash","","",123,N],[11,"eq","","",123,[[["self"],["u66"]],["bool"]]],[11,"try_to_usize","","",123,[[],["option",["usize"]]]],[11,"from_usize","","",123,[[["usize"]],["self"]]],[11,"value","","",123,[[["self"]],["usize"]]],[11,"name","","",123,[[],["self"]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"clone","","",124,[[["self"]],["u67"]]],[11,"hash","","",124,N],[11,"eq","","",124,[[["self"],["u67"]],["bool"]]],[11,"try_to_usize","","",124,[[],["option",["usize"]]]],[11,"from_usize","","",124,[[["usize"]],["self"]]],[11,"value","","",124,[[["self"]],["usize"]]],[11,"name","","",124,[[],["self"]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"clone","","",125,[[["self"]],["u68"]]],[11,"hash","","",125,N],[11,"eq","","",125,[[["self"],["u68"]],["bool"]]],[11,"try_to_usize","","",125,[[],["option",["usize"]]]],[11,"from_usize","","",125,[[["usize"]],["self"]]],[11,"value","","",125,[[["self"]],["usize"]]],[11,"name","","",125,[[],["self"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"clone","","",126,[[["self"]],["u69"]]],[11,"hash","","",126,N],[11,"eq","","",126,[[["self"],["u69"]],["bool"]]],[11,"try_to_usize","","",126,[[],["option",["usize"]]]],[11,"from_usize","","",126,[[["usize"]],["self"]]],[11,"value","","",126,[[["self"]],["usize"]]],[11,"name","","",126,[[],["self"]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"clone","","",127,[[["self"]],["u70"]]],[11,"hash","","",127,N],[11,"eq","","",127,[[["self"],["u70"]],["bool"]]],[11,"try_to_usize","","",127,[[],["option",["usize"]]]],[11,"from_usize","","",127,[[["usize"]],["self"]]],[11,"value","","",127,[[["self"]],["usize"]]],[11,"name","","",127,[[],["self"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"clone","","",128,[[["self"]],["u71"]]],[11,"hash","","",128,N],[11,"eq","","",128,[[["self"],["u71"]],["bool"]]],[11,"try_to_usize","","",128,[[],["option",["usize"]]]],[11,"from_usize","","",128,[[["usize"]],["self"]]],[11,"value","","",128,[[["self"]],["usize"]]],[11,"name","","",128,[[],["self"]]],[11,"fmt","","",129,[[["self"],["formatter"]],["result"]]],[11,"clone","","",129,[[["self"]],["u72"]]],[11,"hash","","",129,N],[11,"eq","","",129,[[["self"],["u72"]],["bool"]]],[11,"try_to_usize","","",129,[[],["option",["usize"]]]],[11,"from_usize","","",129,[[["usize"]],["self"]]],[11,"value","","",129,[[["self"]],["usize"]]],[11,"name","","",129,[[],["self"]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result"]]],[11,"clone","","",130,[[["self"]],["u73"]]],[11,"hash","","",130,N],[11,"eq","","",130,[[["self"],["u73"]],["bool"]]],[11,"try_to_usize","","",130,[[],["option",["usize"]]]],[11,"from_usize","","",130,[[["usize"]],["self"]]],[11,"value","","",130,[[["self"]],["usize"]]],[11,"name","","",130,[[],["self"]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result"]]],[11,"clone","","",131,[[["self"]],["u74"]]],[11,"hash","","",131,N],[11,"eq","","",131,[[["self"],["u74"]],["bool"]]],[11,"try_to_usize","","",131,[[],["option",["usize"]]]],[11,"from_usize","","",131,[[["usize"]],["self"]]],[11,"value","","",131,[[["self"]],["usize"]]],[11,"name","","",131,[[],["self"]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result"]]],[11,"clone","","",132,[[["self"]],["u75"]]],[11,"hash","","",132,N],[11,"eq","","",132,[[["self"],["u75"]],["bool"]]],[11,"try_to_usize","","",132,[[],["option",["usize"]]]],[11,"from_usize","","",132,[[["usize"]],["self"]]],[11,"value","","",132,[[["self"]],["usize"]]],[11,"name","","",132,[[],["self"]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result"]]],[11,"clone","","",133,[[["self"]],["u76"]]],[11,"hash","","",133,N],[11,"eq","","",133,[[["self"],["u76"]],["bool"]]],[11,"try_to_usize","","",133,[[],["option",["usize"]]]],[11,"from_usize","","",133,[[["usize"]],["self"]]],[11,"value","","",133,[[["self"]],["usize"]]],[11,"name","","",133,[[],["self"]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result"]]],[11,"clone","","",134,[[["self"]],["u77"]]],[11,"hash","","",134,N],[11,"eq","","",134,[[["self"],["u77"]],["bool"]]],[11,"try_to_usize","","",134,[[],["option",["usize"]]]],[11,"from_usize","","",134,[[["usize"]],["self"]]],[11,"value","","",134,[[["self"]],["usize"]]],[11,"name","","",134,[[],["self"]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result"]]],[11,"clone","","",135,[[["self"]],["u78"]]],[11,"hash","","",135,N],[11,"eq","","",135,[[["self"],["u78"]],["bool"]]],[11,"try_to_usize","","",135,[[],["option",["usize"]]]],[11,"from_usize","","",135,[[["usize"]],["self"]]],[11,"value","","",135,[[["self"]],["usize"]]],[11,"name","","",135,[[],["self"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"clone","","",136,[[["self"]],["u79"]]],[11,"hash","","",136,N],[11,"eq","","",136,[[["self"],["u79"]],["bool"]]],[11,"try_to_usize","","",136,[[],["option",["usize"]]]],[11,"from_usize","","",136,[[["usize"]],["self"]]],[11,"value","","",136,[[["self"]],["usize"]]],[11,"name","","",136,[[],["self"]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result"]]],[11,"clone","","",137,[[["self"]],["u80"]]],[11,"hash","","",137,N],[11,"eq","","",137,[[["self"],["u80"]],["bool"]]],[11,"try_to_usize","","",137,[[],["option",["usize"]]]],[11,"from_usize","","",137,[[["usize"]],["self"]]],[11,"value","","",137,[[["self"]],["usize"]]],[11,"name","","",137,[[],["self"]]],[11,"fmt","","",138,[[["self"],["formatter"]],["result"]]],[11,"clone","","",138,[[["self"]],["u81"]]],[11,"hash","","",138,N],[11,"eq","","",138,[[["self"],["u81"]],["bool"]]],[11,"try_to_usize","","",138,[[],["option",["usize"]]]],[11,"from_usize","","",138,[[["usize"]],["self"]]],[11,"value","","",138,[[["self"]],["usize"]]],[11,"name","","",138,[[],["self"]]],[11,"fmt","","",139,[[["self"],["formatter"]],["result"]]],[11,"clone","","",139,[[["self"]],["u82"]]],[11,"hash","","",139,N],[11,"eq","","",139,[[["self"],["u82"]],["bool"]]],[11,"try_to_usize","","",139,[[],["option",["usize"]]]],[11,"from_usize","","",139,[[["usize"]],["self"]]],[11,"value","","",139,[[["self"]],["usize"]]],[11,"name","","",139,[[],["self"]]],[11,"fmt","","",140,[[["self"],["formatter"]],["result"]]],[11,"clone","","",140,[[["self"]],["u83"]]],[11,"hash","","",140,N],[11,"eq","","",140,[[["self"],["u83"]],["bool"]]],[11,"try_to_usize","","",140,[[],["option",["usize"]]]],[11,"from_usize","","",140,[[["usize"]],["self"]]],[11,"value","","",140,[[["self"]],["usize"]]],[11,"name","","",140,[[],["self"]]],[11,"fmt","","",141,[[["self"],["formatter"]],["result"]]],[11,"clone","","",141,[[["self"]],["u84"]]],[11,"hash","","",141,N],[11,"eq","","",141,[[["self"],["u84"]],["bool"]]],[11,"try_to_usize","","",141,[[],["option",["usize"]]]],[11,"from_usize","","",141,[[["usize"]],["self"]]],[11,"value","","",141,[[["self"]],["usize"]]],[11,"name","","",141,[[],["self"]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result"]]],[11,"clone","","",142,[[["self"]],["u85"]]],[11,"hash","","",142,N],[11,"eq","","",142,[[["self"],["u85"]],["bool"]]],[11,"try_to_usize","","",142,[[],["option",["usize"]]]],[11,"from_usize","","",142,[[["usize"]],["self"]]],[11,"value","","",142,[[["self"]],["usize"]]],[11,"name","","",142,[[],["self"]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result"]]],[11,"clone","","",143,[[["self"]],["u86"]]],[11,"hash","","",143,N],[11,"eq","","",143,[[["self"],["u86"]],["bool"]]],[11,"try_to_usize","","",143,[[],["option",["usize"]]]],[11,"from_usize","","",143,[[["usize"]],["self"]]],[11,"value","","",143,[[["self"]],["usize"]]],[11,"name","","",143,[[],["self"]]],[11,"fmt","","",144,[[["self"],["formatter"]],["result"]]],[11,"clone","","",144,[[["self"]],["u87"]]],[11,"hash","","",144,N],[11,"eq","","",144,[[["self"],["u87"]],["bool"]]],[11,"try_to_usize","","",144,[[],["option",["usize"]]]],[11,"from_usize","","",144,[[["usize"]],["self"]]],[11,"value","","",144,[[["self"]],["usize"]]],[11,"name","","",144,[[],["self"]]],[11,"fmt","","",145,[[["self"],["formatter"]],["result"]]],[11,"clone","","",145,[[["self"]],["u88"]]],[11,"hash","","",145,N],[11,"eq","","",145,[[["self"],["u88"]],["bool"]]],[11,"try_to_usize","","",145,[[],["option",["usize"]]]],[11,"from_usize","","",145,[[["usize"]],["self"]]],[11,"value","","",145,[[["self"]],["usize"]]],[11,"name","","",145,[[],["self"]]],[11,"fmt","","",146,[[["self"],["formatter"]],["result"]]],[11,"clone","","",146,[[["self"]],["u89"]]],[11,"hash","","",146,N],[11,"eq","","",146,[[["self"],["u89"]],["bool"]]],[11,"try_to_usize","","",146,[[],["option",["usize"]]]],[11,"from_usize","","",146,[[["usize"]],["self"]]],[11,"value","","",146,[[["self"]],["usize"]]],[11,"name","","",146,[[],["self"]]],[11,"fmt","","",147,[[["self"],["formatter"]],["result"]]],[11,"clone","","",147,[[["self"]],["u90"]]],[11,"hash","","",147,N],[11,"eq","","",147,[[["self"],["u90"]],["bool"]]],[11,"try_to_usize","","",147,[[],["option",["usize"]]]],[11,"from_usize","","",147,[[["usize"]],["self"]]],[11,"value","","",147,[[["self"]],["usize"]]],[11,"name","","",147,[[],["self"]]],[11,"fmt","","",148,[[["self"],["formatter"]],["result"]]],[11,"clone","","",148,[[["self"]],["u91"]]],[11,"hash","","",148,N],[11,"eq","","",148,[[["self"],["u91"]],["bool"]]],[11,"try_to_usize","","",148,[[],["option",["usize"]]]],[11,"from_usize","","",148,[[["usize"]],["self"]]],[11,"value","","",148,[[["self"]],["usize"]]],[11,"name","","",148,[[],["self"]]],[11,"fmt","","",149,[[["self"],["formatter"]],["result"]]],[11,"clone","","",149,[[["self"]],["u92"]]],[11,"hash","","",149,N],[11,"eq","","",149,[[["self"],["u92"]],["bool"]]],[11,"try_to_usize","","",149,[[],["option",["usize"]]]],[11,"from_usize","","",149,[[["usize"]],["self"]]],[11,"value","","",149,[[["self"]],["usize"]]],[11,"name","","",149,[[],["self"]]],[11,"fmt","","",150,[[["self"],["formatter"]],["result"]]],[11,"clone","","",150,[[["self"]],["u93"]]],[11,"hash","","",150,N],[11,"eq","","",150,[[["self"],["u93"]],["bool"]]],[11,"try_to_usize","","",150,[[],["option",["usize"]]]],[11,"from_usize","","",150,[[["usize"]],["self"]]],[11,"value","","",150,[[["self"]],["usize"]]],[11,"name","","",150,[[],["self"]]],[11,"fmt","","",151,[[["self"],["formatter"]],["result"]]],[11,"clone","","",151,[[["self"]],["u94"]]],[11,"hash","","",151,N],[11,"eq","","",151,[[["self"],["u94"]],["bool"]]],[11,"try_to_usize","","",151,[[],["option",["usize"]]]],[11,"from_usize","","",151,[[["usize"]],["self"]]],[11,"value","","",151,[[["self"]],["usize"]]],[11,"name","","",151,[[],["self"]]],[11,"fmt","","",152,[[["self"],["formatter"]],["result"]]],[11,"clone","","",152,[[["self"]],["u95"]]],[11,"hash","","",152,N],[11,"eq","","",152,[[["self"],["u95"]],["bool"]]],[11,"try_to_usize","","",152,[[],["option",["usize"]]]],[11,"from_usize","","",152,[[["usize"]],["self"]]],[11,"value","","",152,[[["self"]],["usize"]]],[11,"name","","",152,[[],["self"]]],[11,"fmt","","",153,[[["self"],["formatter"]],["result"]]],[11,"clone","","",153,[[["self"]],["u96"]]],[11,"hash","","",153,N],[11,"eq","","",153,[[["self"],["u96"]],["bool"]]],[11,"try_to_usize","","",153,[[],["option",["usize"]]]],[11,"from_usize","","",153,[[["usize"]],["self"]]],[11,"value","","",153,[[["self"]],["usize"]]],[11,"name","","",153,[[],["self"]]],[11,"fmt","","",154,[[["self"],["formatter"]],["result"]]],[11,"clone","","",154,[[["self"]],["u97"]]],[11,"hash","","",154,N],[11,"eq","","",154,[[["self"],["u97"]],["bool"]]],[11,"try_to_usize","","",154,[[],["option",["usize"]]]],[11,"from_usize","","",154,[[["usize"]],["self"]]],[11,"value","","",154,[[["self"]],["usize"]]],[11,"name","","",154,[[],["self"]]],[11,"fmt","","",155,[[["self"],["formatter"]],["result"]]],[11,"clone","","",155,[[["self"]],["u98"]]],[11,"hash","","",155,N],[11,"eq","","",155,[[["self"],["u98"]],["bool"]]],[11,"try_to_usize","","",155,[[],["option",["usize"]]]],[11,"from_usize","","",155,[[["usize"]],["self"]]],[11,"value","","",155,[[["self"]],["usize"]]],[11,"name","","",155,[[],["self"]]],[11,"fmt","","",156,[[["self"],["formatter"]],["result"]]],[11,"clone","","",156,[[["self"]],["u99"]]],[11,"hash","","",156,N],[11,"eq","","",156,[[["self"],["u99"]],["bool"]]],[11,"try_to_usize","","",156,[[],["option",["usize"]]]],[11,"from_usize","","",156,[[["usize"]],["self"]]],[11,"value","","",156,[[["self"]],["usize"]]],[11,"name","","",156,[[],["self"]]],[11,"fmt","","",157,[[["self"],["formatter"]],["result"]]],[11,"clone","","",157,[[["self"]],["u100"]]],[11,"hash","","",157,N],[11,"eq","","",157,[[["self"],["u100"]],["bool"]]],[11,"try_to_usize","","",157,[[],["option",["usize"]]]],[11,"from_usize","","",157,[[["usize"]],["self"]]],[11,"value","","",157,[[["self"]],["usize"]]],[11,"name","","",157,[[],["self"]]],[11,"fmt","","",158,[[["self"],["formatter"]],["result"]]],[11,"clone","","",158,[[["self"]],["u101"]]],[11,"hash","","",158,N],[11,"eq","","",158,[[["self"],["u101"]],["bool"]]],[11,"try_to_usize","","",158,[[],["option",["usize"]]]],[11,"from_usize","","",158,[[["usize"]],["self"]]],[11,"value","","",158,[[["self"]],["usize"]]],[11,"name","","",158,[[],["self"]]],[11,"fmt","","",159,[[["self"],["formatter"]],["result"]]],[11,"clone","","",159,[[["self"]],["u102"]]],[11,"hash","","",159,N],[11,"eq","","",159,[[["self"],["u102"]],["bool"]]],[11,"try_to_usize","","",159,[[],["option",["usize"]]]],[11,"from_usize","","",159,[[["usize"]],["self"]]],[11,"value","","",159,[[["self"]],["usize"]]],[11,"name","","",159,[[],["self"]]],[11,"fmt","","",160,[[["self"],["formatter"]],["result"]]],[11,"clone","","",160,[[["self"]],["u103"]]],[11,"hash","","",160,N],[11,"eq","","",160,[[["self"],["u103"]],["bool"]]],[11,"try_to_usize","","",160,[[],["option",["usize"]]]],[11,"from_usize","","",160,[[["usize"]],["self"]]],[11,"value","","",160,[[["self"]],["usize"]]],[11,"name","","",160,[[],["self"]]],[11,"fmt","","",161,[[["self"],["formatter"]],["result"]]],[11,"clone","","",161,[[["self"]],["u104"]]],[11,"hash","","",161,N],[11,"eq","","",161,[[["self"],["u104"]],["bool"]]],[11,"try_to_usize","","",161,[[],["option",["usize"]]]],[11,"from_usize","","",161,[[["usize"]],["self"]]],[11,"value","","",161,[[["self"]],["usize"]]],[11,"name","","",161,[[],["self"]]],[11,"fmt","","",162,[[["self"],["formatter"]],["result"]]],[11,"clone","","",162,[[["self"]],["u105"]]],[11,"hash","","",162,N],[11,"eq","","",162,[[["self"],["u105"]],["bool"]]],[11,"try_to_usize","","",162,[[],["option",["usize"]]]],[11,"from_usize","","",162,[[["usize"]],["self"]]],[11,"value","","",162,[[["self"]],["usize"]]],[11,"name","","",162,[[],["self"]]],[11,"fmt","","",163,[[["self"],["formatter"]],["result"]]],[11,"clone","","",163,[[["self"]],["u106"]]],[11,"hash","","",163,N],[11,"eq","","",163,[[["self"],["u106"]],["bool"]]],[11,"try_to_usize","","",163,[[],["option",["usize"]]]],[11,"from_usize","","",163,[[["usize"]],["self"]]],[11,"value","","",163,[[["self"]],["usize"]]],[11,"name","","",163,[[],["self"]]],[11,"fmt","","",164,[[["self"],["formatter"]],["result"]]],[11,"clone","","",164,[[["self"]],["u107"]]],[11,"hash","","",164,N],[11,"eq","","",164,[[["self"],["u107"]],["bool"]]],[11,"try_to_usize","","",164,[[],["option",["usize"]]]],[11,"from_usize","","",164,[[["usize"]],["self"]]],[11,"value","","",164,[[["self"]],["usize"]]],[11,"name","","",164,[[],["self"]]],[11,"fmt","","",165,[[["self"],["formatter"]],["result"]]],[11,"clone","","",165,[[["self"]],["u108"]]],[11,"hash","","",165,N],[11,"eq","","",165,[[["self"],["u108"]],["bool"]]],[11,"try_to_usize","","",165,[[],["option",["usize"]]]],[11,"from_usize","","",165,[[["usize"]],["self"]]],[11,"value","","",165,[[["self"]],["usize"]]],[11,"name","","",165,[[],["self"]]],[11,"fmt","","",166,[[["self"],["formatter"]],["result"]]],[11,"clone","","",166,[[["self"]],["u109"]]],[11,"hash","","",166,N],[11,"eq","","",166,[[["self"],["u109"]],["bool"]]],[11,"try_to_usize","","",166,[[],["option",["usize"]]]],[11,"from_usize","","",166,[[["usize"]],["self"]]],[11,"value","","",166,[[["self"]],["usize"]]],[11,"name","","",166,[[],["self"]]],[11,"fmt","","",167,[[["self"],["formatter"]],["result"]]],[11,"clone","","",167,[[["self"]],["u110"]]],[11,"hash","","",167,N],[11,"eq","","",167,[[["self"],["u110"]],["bool"]]],[11,"try_to_usize","","",167,[[],["option",["usize"]]]],[11,"from_usize","","",167,[[["usize"]],["self"]]],[11,"value","","",167,[[["self"]],["usize"]]],[11,"name","","",167,[[],["self"]]],[11,"fmt","","",168,[[["self"],["formatter"]],["result"]]],[11,"clone","","",168,[[["self"]],["u111"]]],[11,"hash","","",168,N],[11,"eq","","",168,[[["self"],["u111"]],["bool"]]],[11,"try_to_usize","","",168,[[],["option",["usize"]]]],[11,"from_usize","","",168,[[["usize"]],["self"]]],[11,"value","","",168,[[["self"]],["usize"]]],[11,"name","","",168,[[],["self"]]],[11,"fmt","","",169,[[["self"],["formatter"]],["result"]]],[11,"clone","","",169,[[["self"]],["u112"]]],[11,"hash","","",169,N],[11,"eq","","",169,[[["self"],["u112"]],["bool"]]],[11,"try_to_usize","","",169,[[],["option",["usize"]]]],[11,"from_usize","","",169,[[["usize"]],["self"]]],[11,"value","","",169,[[["self"]],["usize"]]],[11,"name","","",169,[[],["self"]]],[11,"fmt","","",170,[[["self"],["formatter"]],["result"]]],[11,"clone","","",170,[[["self"]],["u113"]]],[11,"hash","","",170,N],[11,"eq","","",170,[[["self"],["u113"]],["bool"]]],[11,"try_to_usize","","",170,[[],["option",["usize"]]]],[11,"from_usize","","",170,[[["usize"]],["self"]]],[11,"value","","",170,[[["self"]],["usize"]]],[11,"name","","",170,[[],["self"]]],[11,"fmt","","",171,[[["self"],["formatter"]],["result"]]],[11,"clone","","",171,[[["self"]],["u114"]]],[11,"hash","","",171,N],[11,"eq","","",171,[[["self"],["u114"]],["bool"]]],[11,"try_to_usize","","",171,[[],["option",["usize"]]]],[11,"from_usize","","",171,[[["usize"]],["self"]]],[11,"value","","",171,[[["self"]],["usize"]]],[11,"name","","",171,[[],["self"]]],[11,"fmt","","",172,[[["self"],["formatter"]],["result"]]],[11,"clone","","",172,[[["self"]],["u115"]]],[11,"hash","","",172,N],[11,"eq","","",172,[[["self"],["u115"]],["bool"]]],[11,"try_to_usize","","",172,[[],["option",["usize"]]]],[11,"from_usize","","",172,[[["usize"]],["self"]]],[11,"value","","",172,[[["self"]],["usize"]]],[11,"name","","",172,[[],["self"]]],[11,"fmt","","",173,[[["self"],["formatter"]],["result"]]],[11,"clone","","",173,[[["self"]],["u116"]]],[11,"hash","","",173,N],[11,"eq","","",173,[[["self"],["u116"]],["bool"]]],[11,"try_to_usize","","",173,[[],["option",["usize"]]]],[11,"from_usize","","",173,[[["usize"]],["self"]]],[11,"value","","",173,[[["self"]],["usize"]]],[11,"name","","",173,[[],["self"]]],[11,"fmt","","",174,[[["self"],["formatter"]],["result"]]],[11,"clone","","",174,[[["self"]],["u117"]]],[11,"hash","","",174,N],[11,"eq","","",174,[[["self"],["u117"]],["bool"]]],[11,"try_to_usize","","",174,[[],["option",["usize"]]]],[11,"from_usize","","",174,[[["usize"]],["self"]]],[11,"value","","",174,[[["self"]],["usize"]]],[11,"name","","",174,[[],["self"]]],[11,"fmt","","",175,[[["self"],["formatter"]],["result"]]],[11,"clone","","",175,[[["self"]],["u118"]]],[11,"hash","","",175,N],[11,"eq","","",175,[[["self"],["u118"]],["bool"]]],[11,"try_to_usize","","",175,[[],["option",["usize"]]]],[11,"from_usize","","",175,[[["usize"]],["self"]]],[11,"value","","",175,[[["self"]],["usize"]]],[11,"name","","",175,[[],["self"]]],[11,"fmt","","",176,[[["self"],["formatter"]],["result"]]],[11,"clone","","",176,[[["self"]],["u119"]]],[11,"hash","","",176,N],[11,"eq","","",176,[[["self"],["u119"]],["bool"]]],[11,"try_to_usize","","",176,[[],["option",["usize"]]]],[11,"from_usize","","",176,[[["usize"]],["self"]]],[11,"value","","",176,[[["self"]],["usize"]]],[11,"name","","",176,[[],["self"]]],[11,"fmt","","",177,[[["self"],["formatter"]],["result"]]],[11,"clone","","",177,[[["self"]],["u120"]]],[11,"hash","","",177,N],[11,"eq","","",177,[[["self"],["u120"]],["bool"]]],[11,"try_to_usize","","",177,[[],["option",["usize"]]]],[11,"from_usize","","",177,[[["usize"]],["self"]]],[11,"value","","",177,[[["self"]],["usize"]]],[11,"name","","",177,[[],["self"]]],[11,"fmt","","",178,[[["self"],["formatter"]],["result"]]],[11,"clone","","",178,[[["self"]],["u121"]]],[11,"hash","","",178,N],[11,"eq","","",178,[[["self"],["u121"]],["bool"]]],[11,"try_to_usize","","",178,[[],["option",["usize"]]]],[11,"from_usize","","",178,[[["usize"]],["self"]]],[11,"value","","",178,[[["self"]],["usize"]]],[11,"name","","",178,[[],["self"]]],[11,"fmt","","",179,[[["self"],["formatter"]],["result"]]],[11,"clone","","",179,[[["self"]],["u122"]]],[11,"hash","","",179,N],[11,"eq","","",179,[[["self"],["u122"]],["bool"]]],[11,"try_to_usize","","",179,[[],["option",["usize"]]]],[11,"from_usize","","",179,[[["usize"]],["self"]]],[11,"value","","",179,[[["self"]],["usize"]]],[11,"name","","",179,[[],["self"]]],[11,"fmt","","",180,[[["self"],["formatter"]],["result"]]],[11,"clone","","",180,[[["self"]],["u123"]]],[11,"hash","","",180,N],[11,"eq","","",180,[[["self"],["u123"]],["bool"]]],[11,"try_to_usize","","",180,[[],["option",["usize"]]]],[11,"from_usize","","",180,[[["usize"]],["self"]]],[11,"value","","",180,[[["self"]],["usize"]]],[11,"name","","",180,[[],["self"]]],[11,"fmt","","",181,[[["self"],["formatter"]],["result"]]],[11,"clone","","",181,[[["self"]],["u124"]]],[11,"hash","","",181,N],[11,"eq","","",181,[[["self"],["u124"]],["bool"]]],[11,"try_to_usize","","",181,[[],["option",["usize"]]]],[11,"from_usize","","",181,[[["usize"]],["self"]]],[11,"value","","",181,[[["self"]],["usize"]]],[11,"name","","",181,[[],["self"]]],[11,"fmt","","",182,[[["self"],["formatter"]],["result"]]],[11,"clone","","",182,[[["self"]],["u125"]]],[11,"hash","","",182,N],[11,"eq","","",182,[[["self"],["u125"]],["bool"]]],[11,"try_to_usize","","",182,[[],["option",["usize"]]]],[11,"from_usize","","",182,[[["usize"]],["self"]]],[11,"value","","",182,[[["self"]],["usize"]]],[11,"name","","",182,[[],["self"]]],[11,"fmt","","",183,[[["self"],["formatter"]],["result"]]],[11,"clone","","",183,[[["self"]],["u126"]]],[11,"hash","","",183,N],[11,"eq","","",183,[[["self"],["u126"]],["bool"]]],[11,"try_to_usize","","",183,[[],["option",["usize"]]]],[11,"from_usize","","",183,[[["usize"]],["self"]]],[11,"value","","",183,[[["self"]],["usize"]]],[11,"name","","",183,[[],["self"]]],[11,"fmt","","",184,[[["self"],["formatter"]],["result"]]],[11,"clone","","",184,[[["self"]],["u127"]]],[11,"hash","","",184,N],[11,"eq","","",184,[[["self"],["u127"]],["bool"]]],[11,"try_to_usize","","",184,[[],["option",["usize"]]]],[11,"from_usize","","",184,[[["usize"]],["self"]]],[11,"value","","",184,[[["self"]],["usize"]]],[11,"name","","",184,[[],["self"]]],[0,"iter","nalgebra::base","Matrix iterators.",N,N],[3,"MatrixIter","nalgebra::base::iter","An iterator through a dense matrix with arbitrary strides matrix.",N,N],[3,"MatrixIterMut","","An iterator through a dense matrix with arbitrary strides matrix.",N,N],[11,"new","","Creates a new iterator for the given matrix storage.",185,[[["s"]],["matrixiter"]]],[11,"next","","",185,[[["self"]],["option"]]],[11,"size_hint","","",185,N],[11,"count","","",185,[[["self"]],["usize"]]],[11,"len","","",185,[[["self"]],["usize"]]],[11,"new","","Creates a new iterator for the given matrix storage.",186,[[["s"]],["matrixitermut"]]],[11,"next","","",186,[[["self"]],["option"]]],[11,"size_hint","","",186,N],[11,"count","","",186,[[["self"]],["usize"]]],[11,"len","","",186,[[["self"]],["usize"]]],[11,"index","nalgebra::base","",1,[[["self"],["usize"]],["n"]]],[11,"index","","",1,N],[11,"index_mut","","",1,[[["self"],["usize"]],["n"]]],[11,"index_mut","","",1,N],[11,"neg","","",1,N],[11,"neg_mut","","Negates `self` in-place.",1,[[["self"]]]],[11,"add_to","","Equivalent to `self + rhs` but stores the result into `out` to avoid allocations.",1,[[["self"],["matrix"],["matrix"]]]],[11,"add","","",1,N],[11,"add","","",1,N],[11,"add_assign","","",1,[[["self"],["matrix"]]]],[11,"add_assign","","",1,[[["self"],["matrix"]]]],[11,"sub_to","","Equivalent to `self + rhs` but stores the result into `out` to avoid allocations.",1,[[["self"],["matrix"],["matrix"]]]],[11,"sub","","",1,N],[11,"sub","","",1,N],[11,"sub_assign","","",1,[[["self"],["matrix"]]]],[11,"sub_assign","","",1,[[["self"],["matrix"]]]],[11,"mul","","",1,N],[11,"mul_assign","","",1,[[["self"],["n"]]]],[11,"div","","",1,N],[11,"div_assign","","",1,[[["self"],["n"]]]],[11,"mul","","",1,N],[11,"mul","","",1,N],[11,"mul_assign","","",1,[[["self"],["matrix"]]]],[11,"mul_assign","","",1,[[["self"],["matrix"]]]],[11,"tr_mul","","Equivalent to `self.transpose() * rhs`.",1,[[["self"],["matrix"]],["matrixmn"]]],[11,"tr_mul_to","","Equivalent to `self.transpose() * rhs` but stores the result into `out` to avoid allocations.",1,[[["self"],["matrix"],["matrix"]]]],[11,"mul_to","","Equivalent to `self * rhs` but stores the result into `out` to avoid allocations.",1,[[["self"],["matrix"],["matrix"]]]],[11,"kronecker","","The kronecker product of two matrices (aka. tensor product of the corresponding linear maps).",1,[[["self"],["matrix"]],["matrixmn",["dimprod","dimprod"]]]],[11,"add_scalar","","Adds a scalar to `self`.",1,[[["self"],["n"]],["matrixmn"]]],[11,"add_scalar_mut","","Adds a scalar to `self` in-place.",1,[[["self"],["n"]]]],[11,"amax","","Returns the absolute value of the coefficient with the largest absolute value.",1,[[["self"]],["n"]]],[11,"amin","","Returns the absolute value of the coefficient with the smallest absolute value.",1,[[["self"]],["n"]]],[0,"storage","","Abstract definition of a matrix data storage.",N,N],[6,"SameShapeStorage","nalgebra::base::storage","The data storage for the sum of two matrices with dimensions `(R1, C1)` and `(R2, C2)`.",N,N],[6,"Owned","","The owned data storage that can be allocated from `S`.",N,N],[6,"RStride","","The row-stride of the owned data storage for a buffer of dimension `(R, C)`.",N,N],[6,"CStride","","The column-stride of the owned data storage for a buffer of dimension `(R, C)`.",N,N],[8,"Storage","","The trait shared by all matrix data storage.",N,N],[16,"RStride","","The static stride of this storage's rows.",187,N],[16,"CStride","","The static stride of this storage's columns.",187,N],[10,"ptr","","The matrix data pointer.",187,N],[10,"shape","","The dimension of the matrix at run-time. Arr length of zero indicates the additive identity element of any dimension. Must be equal to `Self::dimension()` if it is not `None`.",187,N],[10,"strides","","The spacing between concecutive row elements and consecutive column elements.",187,N],[11,"linear_index","","Compute the index corresponding to the irow-th row and icol-th column of this matrix. The index must be such that the following holds:",187,[[["self"],["usize"],["usize"]],["usize"]]],[11,"get_address_unchecked_linear","","Gets the address of the i-th matrix component without performing bound-checking.",187,N],[11,"get_address_unchecked","","Gets the address of the i-th matrix component without performing bound-checking.",187,N],[11,"get_unchecked_linear","","Retrieves a reference to the i-th element without bound-checking.",187,[[["self"],["usize"]],["n"]]],[11,"get_unchecked","","Retrieves a reference to the i-th element without bound-checking.",187,[[["self"],["usize"],["usize"]],["n"]]],[10,"is_contiguous","","Indicates whether this data buffer stores its elements contiguously.",187,[[["self"]],["bool"]]],[10,"as_slice","","Retrieves the data buffer as a contiguous slice.",187,N],[10,"into_owned","","Builds a matrix data storage that does not contain any reference.",187,[[["self"]],["owned"]]],[10,"clone_owned","","Clones this data storage to one that does not contain any reference.",187,[[["self"]],["owned"]]],[8,"StorageMut","","Trait implemented by matrix data storage that can provide a mutable access to its elements.",N,N],[10,"ptr_mut","","The matrix mutable data pointer.",188,N],[11,"get_address_unchecked_linear_mut","","Gets the mutable address of the i-th matrix component without performing bound-checking.",188,N],[11,"get_address_unchecked_mut","","Gets the mutable address of the i-th matrix component without performing bound-checking.",188,N],[11,"get_unchecked_linear_mut","","Retrieves a mutable reference to the i-th element without bound-checking.",188,[[["self"],["usize"]],["n"]]],[11,"get_unchecked_mut","","Retrieves a mutable reference to the element at `(irow, icol)` without bound-checking.",188,[[["self"],["usize"],["usize"]],["n"]]],[11,"swap_unchecked_linear","","Swaps two elements using their linear index without bound-checking.",188,[[["self"],["usize"],["usize"]]]],[11,"swap_unchecked","","Swaps two elements without bound-checking.",188,N],[10,"as_mut_slice","","Retrieves the mutable data buffer as a contiguous slice.",188,N],[8,"ContiguousStorage","","A matrix storage that is stored contiguously in memory.",N,N],[8,"ContiguousStorageMut","","A mutable matrix storage that is stored contiguously in memory.",N,N],[11,"abs","nalgebra::base","Computes the componentwise absolute value.",1,[[["self"]],["matrixmn"]]],[11,"component_mul","","Componentwise matrix multiplication.",1,[[["self"],["matrix"]],["matrixsum"]]],[11,"cmpy","","Computes componentwise `self[i] = alpha * a[i] * b[i] + beta * self[i]`.",1,[[["self"],["n"],["matrix"],["matrix"],["n"]]]],[11,"component_mul_assign","","Inplace componentwise matrix multiplication.",1,[[["self"],["matrix"]]]],[11,"component_mul_mut","","Inplace componentwise matrix multiplication.",1,[[["self"],["matrix"]]]],[11,"component_div","","Componentwise matrix division.",1,[[["self"],["matrix"]],["matrixsum"]]],[11,"cdpy","","Computes componentwise `self[i] = alpha * a[i] / b[i] + beta * self[i]`.",1,[[["self"],["n"],["matrix"],["matrix"],["n"]]]],[11,"component_div_assign","","Inplace componentwise matrix division.",1,[[["self"],["matrix"]]]],[11,"component_div_mut","","Inplace componentwise matrix division.",1,[[["self"],["matrix"]]]],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[11,"upper_triangle","","Extracts the upper triangular part of this matrix (including the diagonal).",1,[[["self"]],["matrixmn"]]],[11,"lower_triangle","","Extracts the upper triangular part of this matrix (including the diagonal).",1,[[["self"]],["matrixmn"]]],[11,"fill","","Sets all the elements of this matrix to `val`.",1,[[["self"],["n"]]]],[11,"fill_with_identity","","Fills `self` with the identity matrix.",1,[[["self"]]]],[11,"fill_diagonal","","Sets all the diagonal elements of this matrix to `val`.",1,[[["self"],["n"]]]],[11,"fill_row","","Sets all the elements of the selected row to `val`.",1,[[["self"],["usize"],["n"]]]],[11,"fill_column","","Sets all the elements of the selected column to `val`.",1,[[["self"],["usize"],["n"]]]],[11,"set_diagonal","","Fills the diagonal of this matrix with the content of the given vector.",1,[[["self"],["vector"]]]],[11,"set_row","","Fills the selected row of this matrix with the content of the given vector.",1,[[["self"],["usize"],["rowvector"]]]],[11,"set_column","","Fills the selected column of this matrix with the content of the given vector.",1,[[["self"],["usize"],["vector"]]]],[11,"fill_lower_triangle","","Sets all the elements of the lower-triangular part of this matrix to `val`.",1,[[["self"],["n"],["usize"]]]],[11,"fill_upper_triangle","","Sets all the elements of the lower-triangular part of this matrix to `val`.",1,[[["self"],["n"],["usize"]]]],[11,"swap_rows","","Swaps two rows in-place.",1,[[["self"],["usize"],["usize"]]]],[11,"swap_columns","","Swaps two columns in-place.",1,[[["self"],["usize"],["usize"]]]],[11,"fill_lower_triangle_with_upper_triangle","","Copies the upper-triangle of this matrix to its lower-triangular part.",1,[[["self"]]]],[11,"fill_upper_triangle_with_lower_triangle","","Copies the upper-triangle of this matrix to its upper-triangular part.",1,[[["self"]]]],[11,"remove_column","","Removes the `i`-th column from this matrix.",1,[[["self"],["usize"]],["matrixmn",["dimdiff"]]]],[11,"remove_fixed_columns","","Removes `D::dim()` consecutive columns from this matrix, starting with the `i`-th (included).",1,[[["self"],["usize"]],["matrixmn",["dimdiff"]]]],[11,"remove_columns","","Removes `n` consecutive columns from this matrix, starting with the `i`-th (included).",1,[[["self"],["usize"],["usize"]],["matrixmn",["dynamic"]]]],[11,"remove_columns_generic","","Removes `nremove.value()` columns from this matrix, starting with the `i`-th (included).",1,[[["self"],["usize"],["d"]],["matrixmn",["dimdiff"]]]],[11,"remove_row","","Removes the `i`-th row from this matrix.",1,[[["self"],["usize"]],["matrixmn",["dimdiff"]]]],[11,"remove_fixed_rows","","Removes `D::dim()` consecutive rows from this matrix, starting with the `i`-th (included).",1,[[["self"],["usize"]],["matrixmn",["dimdiff"]]]],[11,"remove_rows","","Removes `n` consecutive rows from this matrix, starting with the `i`-th (included).",1,[[["self"],["usize"],["usize"]],["matrixmn",["dynamic"]]]],[11,"remove_rows_generic","","Removes `nremove.value()` rows from this matrix, starting with the `i`-th (included).",1,[[["self"],["usize"],["d"]],["matrixmn",["dimdiff"]]]],[11,"insert_column","","Inserts a column filled with `val` at the `i-th` position.",1,[[["self"],["usize"],["n"]],["matrixmn",["dimsum"]]]],[11,"insert_fixed_columns","","Inserts `D::dim()` columns filled with `val` starting at the `i-th` position.",1,[[["self"],["usize"],["n"]],["matrixmn",["dimsum"]]]],[11,"insert_columns","","Inserts `n` columns filled with `val` starting at the `i-th` position.",1,[[["self"],["usize"],["usize"],["n"]],["matrixmn",["dynamic"]]]],[11,"insert_columns_generic_uninitialized","","Inserts `ninsert.value()` columns starting at the `i-th` place of this matrix.",1,[[["self"],["usize"],["d"]],["matrixmn",["dimsum"]]]],[11,"insert_row","","Inserts a row filled with `val` at the `i-th` position.",1,[[["self"],["usize"],["n"]],["matrixmn",["dimsum"]]]],[11,"insert_fixed_rows","","Inserts `D::dim()` rows filled with `val` starting at the `i-th` position.",1,[[["self"],["usize"],["n"]],["matrixmn",["dimsum"]]]],[11,"insert_rows","","Inserts `n` rows filled with `val` starting at the `i-th` position.",1,[[["self"],["usize"],["usize"],["n"]],["matrixmn",["dynamic"]]]],[11,"insert_rows_generic_uninitialized","","Inserts `ninsert.value()` rows at the `i-th` place of this matrix.",1,[[["self"],["usize"],["d"]],["matrixmn",["dimsum"]]]],[11,"resize","","Resizes this matrix so that it contains `new_nrows` rows and `new_ncols` columns.",1,[[["self"],["usize"],["usize"],["n"]],["dmatrix"]]],[11,"fixed_resize","","Resizes this matrix so that it contains `R2::value()` rows and `C2::value()` columns.",1,[[["self"],["n"]],["matrixmn"]]],[11,"resize_generic","","Resizes `self` such that it has dimensions `new_nrows × now_ncols`.",1,[[["self"],["r2"],["c2"],["n"]],["matrixmn"]]],[11,"hash","","",1,N],[11,"clone","","",1,[[["self"]],["matrix"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_data_statically_unchecked","","Creates a new matrix with the given data without statically checking that the matrix dimension matches the storage dimension.",1,[[["s"]],["matrix"]]],[11,"from_data","","Creates a new matrix with the given data.",1,[[["s"]],["matrix"]]],[11,"len","","The total number of elements of this matrix.",1,[[["self"]],["usize"]]],[11,"shape","","The shape of this matrix returned as the tuple (number of rows, number of columns).",1,N],[11,"nrows","","The number of rows of this matrix.",1,[[["self"]],["usize"]]],[11,"ncols","","The number of columns of this matrix.",1,[[["self"]],["usize"]]],[11,"strides","","The strides (row stride, column stride) of this matrix.",1,N],[11,"iter","","Iterates through this matrix coordinates.",1,[[["self"]],["matrixiter"]]],[11,"vector_to_matrix_index","","Computes the row and column coordinates of the i-th element of this matrix seen as a vector.",1,N],[11,"get_unchecked","","Gets a reference to the element of this matrix at row `irow` and column `icol` without bound-checking.",1,[[["self"],["usize"],["usize"]],["n"]]],[11,"relative_eq","","Tests whether `self` and `rhs` are equal up to a given epsilon.",1,N],[11,"eq","","Tests whether `self` and `rhs` are exactly equal.",1,[[["self"],["matrix"]],["bool"]]],[11,"into_owned","","Moves this matrix into one that owns its data.",1,[[["self"]],["matrixmn"]]],[11,"into_owned_sum","","Moves this matrix into one that owns its data. The actual type of the result depends on matrix storage combination rules for addition.",1,[[["self"]],["matrixsum"]]],[11,"clone_owned","","Clones this matrix to one that owns its data.",1,[[["self"]],["matrixmn"]]],[11,"clone_owned_sum","","Clones this matrix into one that owns its data. The actual type of the result depends on matrix storage combination rules for addition.",1,[[["self"]],["matrixsum"]]],[11,"map","","Returns a matrix containing the result of `f` applied to each of its entries.",1,[[["self"],["f"]],["matrixmn"]]],[11,"zip_map","","Returns a matrix containing the result of `f` applied to each entries of `self` and `rhs`.",1,[[["self"],["matrix"],["f"]],["matrixmn"]]],[11,"transpose_to","","Transposes `self` and store the result into `out`.",1,[[["self"],["matrix"]]]],[11,"transpose","","Transposes `self`.",1,[[["self"]],["matrixmn"]]],[11,"iter_mut","","Mutably iterates through this matrix coordinates.",1,[[["self"]],["matrixitermut"]]],[11,"get_unchecked_mut","","Gets a mutable reference to the i-th element of this matrix.",1,[[["self"],["usize"],["usize"]],["n"]]],[11,"swap_unchecked","","Swaps two entries without bound-checking.",1,N],[11,"swap","","Swaps two entries.",1,N],[11,"copy_from","","Fills this matrix with the content of another one. Both must have the same shape.",1,[[["self"],["matrix"]]]],[11,"tr_copy_from","","Fills this matrix with the content of the transpose another one.",1,[[["self"],["matrix"]]]],[11,"apply","","Replaces each component of `self` by the result of a closure `f` applied on it.",1,[[["self"],["f"]]]],[11,"as_slice","","Extracts a slice containing the entire matrix entries ordered column-by-columns.",1,N],[11,"as_mut_slice","","Extracts a mutable slice containing the entire matrix entries ordered column-by-columns.",1,N],[11,"transpose_mut","","Transposes the square matrix `self` in-place.",1,[[["self"]]]],[11,"conjugate_transpose_to","","Takes the conjugate and transposes `self` and store the result into `out`.",1,[[["self"],["matrix"]]]],[11,"conjugate_transpose","","The conjugate transposition of `self`.",1,[[["self"]],["matrixmn",["complex"]]]],[11,"conjugate_transpose_mut","","Sets `self` to its conjugate transpose.",1,[[["self"]]]],[11,"default_epsilon","","",1,N],[11,"abs_diff_eq","","",1,N],[11,"default_max_relative","","",1,N],[11,"relative_eq","","",1,N],[11,"default_max_ulps","","",1,[[],["u32"]]],[11,"ulps_eq","","",1,N],[11,"partial_cmp","","",1,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["self"]],["bool"]]],[11,"le","","",1,[[["self"],["self"]],["bool"]]],[11,"gt","","",1,[[["self"],["self"]],["bool"]]],[11,"ge","","",1,[[["self"],["self"]],["bool"]]],[11,"eq","","",1,[[["self"],["matrix"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"perp","","The perpendicular product between two 2D column vectors, i.e. `a.x * b.y - a.y * b.x`.",1,[[["self"],["matrix"]],["n"]]],[11,"cross","","The 3D cross product between two vectors.",1,[[["self"],["matrix"]],["matrixcross"]]],[11,"angle","","The smallest angle between two vectors.",1,[[["self"],["matrix"]],["n"]]],[11,"norm_squared","","The squared L2 norm of this vector.",1,[[["self"]],["n"]]],[11,"norm","","The L2 norm of this matrix.",1,[[["self"]],["n"]]],[11,"normalize","","Returns a normalized version of this matrix.",1,[[["self"]],["matrixmn"]]],[11,"try_normalize","","Returns a normalized version of this matrix unless its norm as smaller or equal to `eps`.",1,[[["self"],["n"]],["option",["matrixmn"]]]],[11,"normalize_mut","","Normalizes this matrix in-place and returns its norm.",1,[[["self"]],["n"]]],[11,"try_normalize_mut","","Normalizes this matrix in-place or does nothing if its norm is smaller or equal to `eps`.",1,[[["self"],["n"]],["option"]]],[11,"default_epsilon","","",189,N],[11,"abs_diff_eq","","",189,N],[11,"default_max_relative","","",189,N],[11,"relative_eq","","",189,N],[11,"default_max_ulps","","",189,[[],["u32"]]],[11,"ulps_eq","","",189,N],[11,"hash","","",190,[[["self"],["h"]]]],[11,"deref","","",190,N],[11,"deref_mut","","",190,N],[11,"fmt","","",190,[[["self"],["formatter"]],["result"]]],[11,"clone","","",190,[[["self"]],["self"]]],[11,"eq","","",190,[[["self"],["self"]],["bool"]]],[11,"ptr","","",190,N],[11,"shape","","",190,N],[11,"strides","","",190,N],[11,"is_contiguous","","",190,[[["self"]],["bool"]]],[11,"into_owned","","",190,[[["self"]],["owned"]]],[11,"clone_owned","","",190,[[["self"]],["owned"]]],[11,"as_slice","","",190,N],[11,"ptr_mut","","",190,N],[11,"as_mut_slice","","",190,N],[11,"fmt","","",191,[[["self"],["formatter"]],["result"]]],[11,"from_raw_parts","","Create a new matrix slice without bound checking and from a raw pointer.",191,N],[11,"new_unchecked","","Create a new matrix slice without bound checking.",191,N],[11,"new_with_strides_unchecked","","Create a new matrix slice without bound checking.",191,N],[11,"fmt","","",192,[[["self"],["formatter"]],["result"]]],[11,"from_raw_parts","","Create a new matrix slice without bound checking and from a raw pointer.",192,N],[11,"new_unchecked","","Create a new matrix slice without bound checking.",192,N],[11,"new_with_strides_unchecked","","Create a new matrix slice without bound checking.",192,N],[11,"clone","","",191,[[["self"]],["self"]]],[11,"ptr","","",191,N],[11,"shape","","",191,N],[11,"strides","","",191,N],[11,"is_contiguous","","",191,[[["self"]],["bool"]]],[11,"into_owned","","",191,[[["self"]],["owned"]]],[11,"clone_owned","","",191,[[["self"]],["owned"]]],[11,"as_slice","","",191,N],[11,"ptr","","",192,N],[11,"shape","","",192,N],[11,"strides","","",192,N],[11,"is_contiguous","","",192,[[["self"]],["bool"]]],[11,"into_owned","","",192,[[["self"]],["owned"]]],[11,"clone_owned","","",192,[[["self"]],["owned"]]],[11,"as_slice","","",192,N],[11,"ptr_mut","","",192,N],[11,"as_mut_slice","","",192,N],[11,"row","","Returns a slice containing the i-th row of this matrix.",1,[[["self"],["usize"]],["matrixslice",["u1"]]]],[11,"row_part","","Returns a slice containing the `n` first elements of the i-th row of this matrix.",1,[[["self"],["usize"],["usize"]],["matrixslice",["u1","dynamic"]]]],[11,"rows","","Extracts from this matrix a set of consecutive rows.",1,[[["self"],["usize"],["usize"]],["matrixslice",["dynamic"]]]],[11,"rows_with_step","","Extracts from this matrix a set of consecutive rows regularly skipping `step` rows.",1,[[["self"],["usize"],["usize"],["usize"]],["matrixslice",["dynamic","dynamic"]]]],[11,"fixed_rows","","Extracts a compile-time number of consecutive rows from this matrix.",1,[[["self"],["usize"]],["matrixslice"]]],[11,"fixed_rows_with_step","","Extracts from this matrix a compile-time number of rows regularly skipping `step` rows.",1,[[["self"],["usize"],["usize"]],["matrixslice",["dynamic"]]]],[11,"rows_generic","","Extracts from this matrix `nrows` rows regularly skipping `step` rows. Both argument may or may not be values known at compile-time.",1,[[["self"],["usize"],["rslice"]],["matrixslice"]]],[11,"rows_generic_with_step","","Extracts from this matrix `nrows` rows regularly skipping `step` rows. Both argument may or may not be values known at compile-time.",1,[[["self"],["usize"],["rslice"],["usize"]],["matrixslice",["dynamic"]]]],[11,"column","","Returns a slice containing the i-th column of this matrix.",1,[[["self"],["usize"]],["matrixslice",["u1"]]]],[11,"column_part","","Returns a slice containing the `n` first elements of the i-th column of this matrix.",1,[[["self"],["usize"],["usize"]],["matrixslice",["dynamic","u1"]]]],[11,"columns","","Extracts from this matrix a set of consecutive columns.",1,[[["self"],["usize"],["usize"]],["matrixslice",["dynamic"]]]],[11,"columns_with_step","","Extracts from this matrix a set of consecutive columns regularly skipping `step` columns.",1,[[["self"],["usize"],["usize"],["usize"]],["matrixslice",["dynamic","dynamic"]]]],[11,"fixed_columns","","Extracts a compile-time number of consecutive columns from this matrix.",1,[[["self"],["usize"]],["matrixslice"]]],[11,"fixed_columns_with_step","","Extracts from this matrix a compile-time number of columns regularly skipping `step` columns.",1,[[["self"],["usize"],["usize"]],["matrixslice",["dynamic"]]]],[11,"columns_generic","","Extracts from this matrix `ncols` columns. The number of columns may or may not be known at compile-time.",1,[[["self"],["usize"],["cslice"]],["matrixslice"]]],[11,"columns_generic_with_step","","Extracts from this matrix `ncols` columns skipping `step` columns. Both argument may or may not be values known at compile-time.",1,[[["self"],["usize"],["cslice"],["usize"]],["matrixslice",["dynamic"]]]],[11,"slice","","Slices this matrix starting at its component `(irow, icol)` and with `(nrows, ncols)` consecutive elements.",1,N],[11,"slice_with_steps","","Slices this matrix starting at its component `(start.0, start.1)` and with `(shape.0, shape.1)` components. Each row (resp. column) of the sliced matrix is separated by `steps.0` (resp. `steps.1`) ignored rows (resp. columns) of the original matrix.",1,N],[11,"fixed_slice","","Slices this matrix starting at its component `(irow, icol)` and with `(R::dim(), CSlice::dim())` consecutive components.",1,[[["self"],["usize"],["usize"]],["matrixslice"]]],[11,"fixed_slice_with_steps","","Slices this matrix starting at its component `(start.0, start.1)` and with `(R::dim(), CSlice::dim())` components. Each row (resp. column) of the sliced matrix is separated by `steps.0` (resp. `steps.1`) ignored rows (resp. columns) of the original matrix.",1,N],[11,"generic_slice","","Creates a slice that may or may not have a fixed size and stride.",1,N],[11,"generic_slice_with_steps","","Creates a slice that may or may not have a fixed size and stride.",1,N],[11,"rows_range_pair","","Splits this NxM matrix into two parts delimited by two ranges.",1,N],[11,"columns_range_pair","","Splits this NxM matrix into two parts delimited by two ranges.",1,N],[11,"row_mut","","Returns a slice containing the i-th row of this matrix.",1,[[["self"],["usize"]],["matrixslicemut",["u1"]]]],[11,"row_part_mut","","Returns a slice containing the `n` first elements of the i-th row of this matrix.",1,[[["self"],["usize"],["usize"]],["matrixslicemut",["u1","dynamic"]]]],[11,"rows_mut","","Extracts from this matrix a set of consecutive rows.",1,[[["self"],["usize"],["usize"]],["matrixslicemut",["dynamic"]]]],[11,"rows_with_step_mut","","Extracts from this matrix a set of consecutive rows regularly skipping `step` rows.",1,[[["self"],["usize"],["usize"],["usize"]],["matrixslicemut",["dynamic","dynamic"]]]],[11,"fixed_rows_mut","","Extracts a compile-time number of consecutive rows from this matrix.",1,[[["self"],["usize"]],["matrixslicemut"]]],[11,"fixed_rows_with_step_mut","","Extracts from this matrix a compile-time number of rows regularly skipping `step` rows.",1,[[["self"],["usize"],["usize"]],["matrixslicemut",["dynamic"]]]],[11,"rows_generic_mut","","Extracts from this matrix `nrows` rows regularly skipping `step` rows. Both argument may or may not be values known at compile-time.",1,[[["self"],["usize"],["rslice"]],["matrixslicemut"]]],[11,"rows_generic_with_step_mut","","Extracts from this matrix `nrows` rows regularly skipping `step` rows. Both argument may or may not be values known at compile-time.",1,[[["self"],["usize"],["rslice"],["usize"]],["matrixslicemut",["dynamic"]]]],[11,"column_mut","","Returns a slice containing the i-th column of this matrix.",1,[[["self"],["usize"]],["matrixslicemut",["u1"]]]],[11,"column_part_mut","","Returns a slice containing the `n` first elements of the i-th column of this matrix.",1,[[["self"],["usize"],["usize"]],["matrixslicemut",["dynamic","u1"]]]],[11,"columns_mut","","Extracts from this matrix a set of consecutive columns.",1,[[["self"],["usize"],["usize"]],["matrixslicemut",["dynamic"]]]],[11,"columns_with_step_mut","","Extracts from this matrix a set of consecutive columns regularly skipping `step` columns.",1,[[["self"],["usize"],["usize"],["usize"]],["matrixslicemut",["dynamic","dynamic"]]]],[11,"fixed_columns_mut","","Extracts a compile-time number of consecutive columns from this matrix.",1,[[["self"],["usize"]],["matrixslicemut"]]],[11,"fixed_columns_with_step_mut","","Extracts from this matrix a compile-time number of columns regularly skipping `step` columns.",1,[[["self"],["usize"],["usize"]],["matrixslicemut",["dynamic"]]]],[11,"columns_generic_mut","","Extracts from this matrix `ncols` columns. The number of columns may or may not be known at compile-time.",1,[[["self"],["usize"],["cslice"]],["matrixslicemut"]]],[11,"columns_generic_with_step_mut","","Extracts from this matrix `ncols` columns skipping `step` columns. Both argument may or may not be values known at compile-time.",1,[[["self"],["usize"],["cslice"],["usize"]],["matrixslicemut",["dynamic"]]]],[11,"slice_mut","","Slices this matrix starting at its component `(irow, icol)` and with `(nrows, ncols)` consecutive elements.",1,N],[11,"slice_with_steps_mut","","Slices this matrix starting at its component `(start.0, start.1)` and with `(shape.0, shape.1)` components. Each row (resp. column) of the sliced matrix is separated by `steps.0` (resp. `steps.1`) ignored rows (resp. columns) of the original matrix.",1,N],[11,"fixed_slice_mut","","Slices this matrix starting at its component `(irow, icol)` and with `(R::dim(), CSlice::dim())` consecutive components.",1,[[["self"],["usize"],["usize"]],["matrixslicemut"]]],[11,"fixed_slice_with_steps_mut","","Slices this matrix starting at its component `(start.0, start.1)` and with `(R::dim(), CSlice::dim())` components. Each row (resp. column) of the sliced matrix is separated by `steps.0` (resp. `steps.1`) ignored rows (resp. columns) of the original matrix.",1,N],[11,"generic_slice_mut","","Creates a slice that may or may not have a fixed size and stride.",1,N],[11,"generic_slice_with_steps_mut","","Creates a slice that may or may not have a fixed size and stride.",1,N],[11,"rows_range_pair_mut","","Splits this NxM matrix into two parts delimited by two ranges.",1,N],[11,"columns_range_pair_mut","","Splits this NxM matrix into two parts delimited by two ranges.",1,N],[11,"slice_range","","Slices a sub-matrix containing the rows indexed by the range `rows` and the columns indexed by the range `cols`.",1,[[["self"],["rowrange"],["colrange"]],["matrixslice"]]],[11,"rows_range","","Slice containing all the rows indexed by the range `rows`.",1,[[["self"],["rowrange"]],["matrixslice"]]],[11,"columns_range","","Slice containing all the columns indexed by the range `rows`.",1,[[["self"],["colrange"]],["matrixslice"]]],[11,"slice_range_mut","","Slices a mutable sub-matrix containing the rows indexed by the range `rows` and the columns indexed by the range `cols`.",1,[[["self"],["rowrange"],["colrange"]],["matrixslicemut"]]],[11,"rows_range_mut","","Slice containing all the rows indexed by the range `rows`.",1,[[["self"],["rowrange"]],["matrixslicemut"]]],[11,"columns_range_mut","","Slice containing all the columns indexed by the range `cols`.",1,[[["self"],["colrange"]],["matrixslicemut"]]],[11,"fmt","","",193,[[["self"],["formatter"]],["result"]]],[11,"clone","","",193,[[["self"]],["matrixvec"]]],[11,"eq","","",193,[[["self"],["matrixvec"]],["bool"]]],[11,"ne","","",193,[[["self"],["matrixvec"]],["bool"]]],[11,"new","","Creates a new dynamic matrix data storage from the given vector and shape.",193,[[["r"],["c"],["vec"]],["matrixvec"]]],[11,"data","","The underlying data storage.",193,[[["self"]],["vec"]]],[11,"data_mut","","The underlying mutable data storage.",193,[[["self"]],["vec"]]],[11,"resize","","Resizes the undelying mutable data storage and unrwaps it.",193,[[["self"],["usize"]],["vec"]]],[11,"deref","","",193,N],[11,"ptr","","",193,N],[11,"shape","","",193,N],[11,"strides","","",193,N],[11,"is_contiguous","","",193,[[["self"]],["bool"]]],[11,"into_owned","","",193,[[["self"]],["owned",["dynamic"]]]],[11,"clone_owned","","",193,[[["self"]],["owned",["dynamic"]]]],[11,"as_slice","","",193,N],[11,"ptr","","",193,N],[11,"shape","","",193,N],[11,"strides","","",193,N],[11,"is_contiguous","","",193,[[["self"]],["bool"]]],[11,"into_owned","","",193,[[["self"]],["owned",["dynamic"]]]],[11,"clone_owned","","",193,[[["self"]],["owned",["dynamic"]]]],[11,"as_slice","","",193,N],[11,"ptr_mut","","",193,N],[11,"as_mut_slice","","",193,N],[11,"ptr_mut","","",193,N],[11,"as_mut_slice","","",193,N],[11,"is_empty","","Indicates if this is an empty matrix.",1,[[["self"]],["bool"]]],[11,"is_square","","Indicates if this is a square matrix.",1,[[["self"]],["bool"]]],[11,"is_identity","","Indicated if this is the identity matrix within a relative error of `eps`.",1,N],[11,"is_orthogonal","","Checks that `Mᵀ × M = Id`.",1,N],[11,"eq","","",189,[[["self"],["unit"]],["bool"]]],[11,"ne","","",189,[[["self"],["unit"]],["bool"]]],[11,"clone","","",189,[[["self"]],["unit"]]],[11,"hash","","",189,N],[11,"fmt","","",189,[[["self"],["formatter"]],["result"]]],[11,"new_normalize","","Normalize the given value and return it wrapped on a `Unit` structure.",189,[[["t"]],["self"]]],[11,"try_new","","Attempts to normalize the given value and return it wrapped on a `Unit` structure.",189,N],[11,"new_and_get","","Normalize the given value and return it wrapped on a `Unit` structure and its norm.",189,N],[11,"try_new_and_get","","Normalize the given value and return it wrapped on a `Unit` structure and its norm.",189,N],[11,"renormalize","","Normalizes this value again. This is useful when repeated computations might cause a drift in the norm because of float inaccuracies.",189,N],[11,"new_unchecked","","Wraps the given value, assuming it is already normalized.",189,[[["t"]],["self"]]],[11,"unwrap","","Retrieves the underlying value.",189,[[["self"]],["t"]]],[11,"as_mut_unchecked","","Returns a mutable reference to the underlying value. This is `_unchecked` because modifying the underlying value in such a way that it no longer has unit length may lead to unexpected results.",189,[[["self"]],["t"]]],[11,"as_ref","","",189,[[["self"]],["t"]]],[11,"to_superset","","",189,[[["self"]],["t"]]],[11,"is_in_subset","","",189,[[["t"]],["bool"]]],[11,"from_superset_unchecked","","",189,[[["t"]],["self"]]],[11,"neg","","",189,N],[11,"deref","","",189,[[["self"]],["t"]]],[6,"SquareMatrix","","A square matrix.",N,N],[6,"Vector","","A matrix with one column and `D` rows.",N,N],[6,"RowVector","","A matrix with one row and `D` columns .",N,N],[6,"MatrixSum","","The type of the result of a matrix sum.",N,N],[6,"VectorSum","","The type of the result of a matrix sum.",N,N],[6,"MatrixCross","","The type of the result of a matrix cross product.",N,N],[6,"MatrixNM","","A staticaly sized column-major matrix with `R` rows and `C` columns.",N,N],[6,"MatrixMN","","A staticaly sized column-major matrix with `R` rows and `C` columns.",N,N],[6,"MatrixN","","A staticaly sized column-major square matrix with `D` rows and columns.",N,N],[6,"DMatrix","","A dynamically sized column-major matrix.",N,N],[6,"Matrix1","","A stack-allocated, column-major, 1x1 square matrix.",N,N],[6,"Matrix2","","A stack-allocated, column-major, 2x2 square matrix.",N,N],[6,"Matrix3","","A stack-allocated, column-major, 3x3 square matrix.",N,N],[6,"Matrix4","","A stack-allocated, column-major, 4x4 square matrix.",N,N],[6,"Matrix5","","A stack-allocated, column-major, 5x5 square matrix.",N,N],[6,"Matrix6","","A stack-allocated, column-major, 6x6 square matrix.",N,N],[6,"Matrix1x2","","A stack-allocated, column-major, 1x2 square matrix.",N,N],[6,"Matrix1x3","","A stack-allocated, column-major, 1x3 square matrix.",N,N],[6,"Matrix1x4","","A stack-allocated, column-major, 1x4 square matrix.",N,N],[6,"Matrix1x5","","A stack-allocated, column-major, 1x5 square matrix.",N,N],[6,"Matrix1x6","","A stack-allocated, column-major, 1x6 square matrix.",N,N],[6,"Matrix2x3","","A stack-allocated, column-major, 2x3 square matrix.",N,N],[6,"Matrix2x4","","A stack-allocated, column-major, 2x4 square matrix.",N,N],[6,"Matrix2x5","","A stack-allocated, column-major, 2x5 square matrix.",N,N],[6,"Matrix2x6","","A stack-allocated, column-major, 2x6 square matrix.",N,N],[6,"Matrix3x4","","A stack-allocated, column-major, 3x4 square matrix.",N,N],[6,"Matrix3x5","","A stack-allocated, column-major, 3x5 square matrix.",N,N],[6,"Matrix3x6","","A stack-allocated, column-major, 3x6 square matrix.",N,N],[6,"Matrix4x5","","A stack-allocated, column-major, 4x5 square matrix.",N,N],[6,"Matrix4x6","","A stack-allocated, column-major, 4x6 square matrix.",N,N],[6,"Matrix5x6","","A stack-allocated, column-major, 5x6 square matrix.",N,N],[6,"Matrix2x1","","A stack-allocated, column-major, 2x1 square matrix.",N,N],[6,"Matrix3x1","","A stack-allocated, column-major, 3x1 square matrix.",N,N],[6,"Matrix4x1","","A stack-allocated, column-major, 4x1 square matrix.",N,N],[6,"Matrix5x1","","A stack-allocated, column-major, 5x1 square matrix.",N,N],[6,"Matrix6x1","","A stack-allocated, column-major, 6x1 square matrix.",N,N],[6,"Matrix3x2","","A stack-allocated, column-major, 3x2 square matrix.",N,N],[6,"Matrix4x2","","A stack-allocated, column-major, 4x2 square matrix.",N,N],[6,"Matrix5x2","","A stack-allocated, column-major, 5x2 square matrix.",N,N],[6,"Matrix6x2","","A stack-allocated, column-major, 6x2 square matrix.",N,N],[6,"Matrix4x3","","A stack-allocated, column-major, 4x3 square matrix.",N,N],[6,"Matrix5x3","","A stack-allocated, column-major, 5x3 square matrix.",N,N],[6,"Matrix6x3","","A stack-allocated, column-major, 6x3 square matrix.",N,N],[6,"Matrix5x4","","A stack-allocated, column-major, 5x4 square matrix.",N,N],[6,"Matrix6x4","","A stack-allocated, column-major, 6x4 square matrix.",N,N],[6,"Matrix6x5","","A stack-allocated, column-major, 6x5 square matrix.",N,N],[6,"DVector","","A dynamically sized column vector.",N,N],[6,"VectorN","","A statically sized D-dimensional column vector.",N,N],[6,"Vector1","","A stack-allocated, 1-dimensional column vector.",N,N],[6,"Vector2","","A stack-allocated, 2-dimensional column vector.",N,N],[6,"Vector3","","A stack-allocated, 3-dimensional column vector.",N,N],[6,"Vector4","","A stack-allocated, 4-dimensional column vector.",N,N],[6,"Vector5","","A stack-allocated, 5-dimensional column vector.",N,N],[6,"Vector6","","A stack-allocated, 6-dimensional column vector.",N,N],[6,"RowDVector","","A dynamically sized row vector.",N,N],[6,"RowVectorN","","A statically sized D-dimensional row vector.",N,N],[6,"RowVector1","","A stack-allocated, 1-dimensional row vector.",N,N],[6,"RowVector2","","A stack-allocated, 2-dimensional row vector.",N,N],[6,"RowVector3","","A stack-allocated, 3-dimensional row vector.",N,N],[6,"RowVector4","","A stack-allocated, 4-dimensional row vector.",N,N],[6,"RowVector5","","A stack-allocated, 5-dimensional row vector.",N,N],[6,"RowVector6","","A stack-allocated, 6-dimensional row vector.",N,N],[6,"MatrixSliceMN","","A column-major matrix slice with `R` rows and `C` columns.",N,N],[6,"MatrixSliceN","","A column-major matrix slice with `D` rows and columns.",N,N],[6,"DMatrixSlice","","A column-major matrix slice dynamic numbers of rows and columns.",N,N],[6,"MatrixSlice1","","A column-major 1x1 matrix slice.",N,N],[6,"MatrixSlice2","","A column-major 2x2 matrix slice.",N,N],[6,"MatrixSlice3","","A column-major 3x3 matrix slice.",N,N],[6,"MatrixSlice4","","A column-major 4x4 matrix slice.",N,N],[6,"MatrixSlice5","","A column-major 5x5 matrix slice.",N,N],[6,"MatrixSlice6","","A column-major 6x6 matrix slice.",N,N],[6,"MatrixSlice1x2","","A column-major 1x2 matrix slice.",N,N],[6,"MatrixSlice1x3","","A column-major 1x3 matrix slice.",N,N],[6,"MatrixSlice1x4","","A column-major 1x4 matrix slice.",N,N],[6,"MatrixSlice1x5","","A column-major 1x5 matrix slice.",N,N],[6,"MatrixSlice1x6","","A column-major 1x6 matrix slice.",N,N],[6,"MatrixSlice2x1","","A column-major 2x1 matrix slice.",N,N],[6,"MatrixSlice2x3","","A column-major 2x3 matrix slice.",N,N],[6,"MatrixSlice2x4","","A column-major 2x4 matrix slice.",N,N],[6,"MatrixSlice2x5","","A column-major 2x5 matrix slice.",N,N],[6,"MatrixSlice2x6","","A column-major 2x6 matrix slice.",N,N],[6,"MatrixSlice3x1","","A column-major 3x1 matrix slice.",N,N],[6,"MatrixSlice3x2","","A column-major 3x2 matrix slice.",N,N],[6,"MatrixSlice3x4","","A column-major 3x4 matrix slice.",N,N],[6,"MatrixSlice3x5","","A column-major 3x5 matrix slice.",N,N],[6,"MatrixSlice3x6","","A column-major 3x6 matrix slice.",N,N],[6,"MatrixSlice4x1","","A column-major 4x1 matrix slice.",N,N],[6,"MatrixSlice4x2","","A column-major 4x2 matrix slice.",N,N],[6,"MatrixSlice4x3","","A column-major 4x3 matrix slice.",N,N],[6,"MatrixSlice4x5","","A column-major 4x5 matrix slice.",N,N],[6,"MatrixSlice4x6","","A column-major 4x6 matrix slice.",N,N],[6,"MatrixSlice5x1","","A column-major 5x1 matrix slice.",N,N],[6,"MatrixSlice5x2","","A column-major 5x2 matrix slice.",N,N],[6,"MatrixSlice5x3","","A column-major 5x3 matrix slice.",N,N],[6,"MatrixSlice5x4","","A column-major 5x4 matrix slice.",N,N],[6,"MatrixSlice5x6","","A column-major 5x6 matrix slice.",N,N],[6,"MatrixSlice6x1","","A column-major 6x1 matrix slice.",N,N],[6,"MatrixSlice6x2","","A column-major 6x2 matrix slice.",N,N],[6,"MatrixSlice6x3","","A column-major 6x3 matrix slice.",N,N],[6,"MatrixSlice6x4","","A column-major 6x4 matrix slice.",N,N],[6,"MatrixSlice6x5","","A column-major 6x5 matrix slice.",N,N],[6,"MatrixSlice1xX","","A column-major matrix slice with 1 row and a number of columns chosen at runtime.",N,N],[6,"MatrixSlice2xX","","A column-major matrix slice with 2 rows and a number of columns chosen at runtime.",N,N],[6,"MatrixSlice3xX","","A column-major matrix slice with 3 rows and a number of columns chosen at runtime.",N,N],[6,"MatrixSlice4xX","","A column-major matrix slice with 4 rows and a number of columns chosen at runtime.",N,N],[6,"MatrixSlice5xX","","A column-major matrix slice with 5 rows and a number of columns chosen at runtime.",N,N],[6,"MatrixSlice6xX","","A column-major matrix slice with 6 rows and a number of columns chosen at runtime.",N,N],[6,"MatrixSliceXx1","","A column-major matrix slice with a number of rows chosen at runtime and 1 column.",N,N],[6,"MatrixSliceXx2","","A column-major matrix slice with a number of rows chosen at runtime and 2 columns.",N,N],[6,"MatrixSliceXx3","","A column-major matrix slice with a number of rows chosen at runtime and 3 columns.",N,N],[6,"MatrixSliceXx4","","A column-major matrix slice with a number of rows chosen at runtime and 4 columns.",N,N],[6,"MatrixSliceXx5","","A column-major matrix slice with a number of rows chosen at runtime and 5 columns.",N,N],[6,"MatrixSliceXx6","","A column-major matrix slice with a number of rows chosen at runtime and 6 columns.",N,N],[6,"VectorSliceN","","A column vector slice with `D` rows.",N,N],[6,"DVectorSlice","","A column vector slice dynamic numbers of rows and columns.",N,N],[6,"VectorSlice1","","A 1D column vector slice.",N,N],[6,"VectorSlice2","","A 2D column vector slice.",N,N],[6,"VectorSlice3","","A 3D column vector slice.",N,N],[6,"VectorSlice4","","A 4D column vector slice.",N,N],[6,"VectorSlice5","","A 5D column vector slice.",N,N],[6,"VectorSlice6","","A 6D column vector slice.",N,N],[6,"MatrixSliceMutMN","","A column-major mutable matrix slice with `R` rows and `C` columns.",N,N],[6,"MatrixSliceMutN","","A column-major mutable matrix slice with `D` rows and columns.",N,N],[6,"DMatrixSliceMut","","A column-major mutable matrix slice dynamic numbers of rows and columns.",N,N],[6,"MatrixSliceMut1","","A column-major 1x1 mutable matrix slice.",N,N],[6,"MatrixSliceMut2","","A column-major 2x2 mutable matrix slice.",N,N],[6,"MatrixSliceMut3","","A column-major 3x3 mutable matrix slice.",N,N],[6,"MatrixSliceMut4","","A column-major 4x4 mutable matrix slice.",N,N],[6,"MatrixSliceMut5","","A column-major 5x5 mutable matrix slice.",N,N],[6,"MatrixSliceMut6","","A column-major 6x6 mutable matrix slice.",N,N],[6,"MatrixSliceMut1x2","","A column-major 1x2 mutable matrix slice.",N,N],[6,"MatrixSliceMut1x3","","A column-major 1x3 mutable matrix slice.",N,N],[6,"MatrixSliceMut1x4","","A column-major 1x4 mutable matrix slice.",N,N],[6,"MatrixSliceMut1x5","","A column-major 1x5 mutable matrix slice.",N,N],[6,"MatrixSliceMut1x6","","A column-major 1x6 mutable matrix slice.",N,N],[6,"MatrixSliceMut2x1","","A column-major 2x1 mutable matrix slice.",N,N],[6,"MatrixSliceMut2x3","","A column-major 2x3 mutable matrix slice.",N,N],[6,"MatrixSliceMut2x4","","A column-major 2x4 mutable matrix slice.",N,N],[6,"MatrixSliceMut2x5","","A column-major 2x5 mutable matrix slice.",N,N],[6,"MatrixSliceMut2x6","","A column-major 2x6 mutable matrix slice.",N,N],[6,"MatrixSliceMut3x1","","A column-major 3x1 mutable matrix slice.",N,N],[6,"MatrixSliceMut3x2","","A column-major 3x2 mutable matrix slice.",N,N],[6,"MatrixSliceMut3x4","","A column-major 3x4 mutable matrix slice.",N,N],[6,"MatrixSliceMut3x5","","A column-major 3x5 mutable matrix slice.",N,N],[6,"MatrixSliceMut3x6","","A column-major 3x6 mutable matrix slice.",N,N],[6,"MatrixSliceMut4x1","","A column-major 4x1 mutable matrix slice.",N,N],[6,"MatrixSliceMut4x2","","A column-major 4x2 mutable matrix slice.",N,N],[6,"MatrixSliceMut4x3","","A column-major 4x3 mutable matrix slice.",N,N],[6,"MatrixSliceMut4x5","","A column-major 4x5 mutable matrix slice.",N,N],[6,"MatrixSliceMut4x6","","A column-major 4x6 mutable matrix slice.",N,N],[6,"MatrixSliceMut5x1","","A column-major 5x1 mutable matrix slice.",N,N],[6,"MatrixSliceMut5x2","","A column-major 5x2 mutable matrix slice.",N,N],[6,"MatrixSliceMut5x3","","A column-major 5x3 mutable matrix slice.",N,N],[6,"MatrixSliceMut5x4","","A column-major 5x4 mutable matrix slice.",N,N],[6,"MatrixSliceMut5x6","","A column-major 5x6 mutable matrix slice.",N,N],[6,"MatrixSliceMut6x1","","A column-major 6x1 mutable matrix slice.",N,N],[6,"MatrixSliceMut6x2","","A column-major 6x2 mutable matrix slice.",N,N],[6,"MatrixSliceMut6x3","","A column-major 6x3 mutable matrix slice.",N,N],[6,"MatrixSliceMut6x4","","A column-major 6x4 mutable matrix slice.",N,N],[6,"MatrixSliceMut6x5","","A column-major 6x5 mutable matrix slice.",N,N],[6,"MatrixSliceMut1xX","","A column-major mutable matrix slice with 1 row and a number of columns chosen at runtime.",N,N],[6,"MatrixSliceMut2xX","","A column-major mutable matrix slice with 2 rows and a number of columns chosen at runtime.",N,N],[6,"MatrixSliceMut3xX","","A column-major mutable matrix slice with 3 rows and a number of columns chosen at runtime.",N,N],[6,"MatrixSliceMut4xX","","A column-major mutable matrix slice with 4 rows and a number of columns chosen at runtime.",N,N],[6,"MatrixSliceMut5xX","","A column-major mutable matrix slice with 5 rows and a number of columns chosen at runtime.",N,N],[6,"MatrixSliceMut6xX","","A column-major mutable matrix slice with 6 rows and a number of columns chosen at runtime.",N,N],[6,"MatrixSliceMutXx1","","A column-major mutable matrix slice with a number of rows chosen at runtime and 1 column.",N,N],[6,"MatrixSliceMutXx2","","A column-major mutable matrix slice with a number of rows chosen at runtime and 2 columns.",N,N],[6,"MatrixSliceMutXx3","","A column-major mutable matrix slice with a number of rows chosen at runtime and 3 columns.",N,N],[6,"MatrixSliceMutXx4","","A column-major mutable matrix slice with a number of rows chosen at runtime and 4 columns.",N,N],[6,"MatrixSliceMutXx5","","A column-major mutable matrix slice with a number of rows chosen at runtime and 5 columns.",N,N],[6,"MatrixSliceMutXx6","","A column-major mutable matrix slice with a number of rows chosen at runtime and 6 columns.",N,N],[6,"VectorSliceMutN","","A mutable column vector slice with `D` rows.",N,N],[6,"DVectorSliceMut","","A mutable column vector slice dynamic numbers of rows and columns.",N,N],[6,"VectorSliceMut1","","A 1D mutable column vector slice.",N,N],[6,"VectorSliceMut2","","A 2D mutable column vector slice.",N,N],[6,"VectorSliceMut3","","A 3D mutable column vector slice.",N,N],[6,"VectorSliceMut4","","A 4D mutable column vector slice.",N,N],[6,"VectorSliceMut5","","A 5D mutable column vector slice.",N,N],[6,"VectorSliceMut6","","A 6D mutable column vector slice.",N,N],[6,"MatrixSlice","","A matrix slice.",N,N],[6,"MatrixSliceMut","","A matrix slice.",N,N],[8,"Scalar","","The basic scalar type for all structures of `nalgebra`.",N,N],[11,"is","","Tests if `Self` the the same as the type `T`",194,[[],["bool"]]],[8,"SliceRange","","A range with a size that may be known at compile-time.",N,N],[16,"Size","","Type of the range size. May be a type-level integer.",195,N],[10,"begin","","The start index of the range.",195,[[["self"],["d"]],["usize"]]],[10,"end","","The index immediatly after the last index inside of the range.",195,[[["self"],["d"]],["usize"]]],[10,"size","","The number of elements of the range, i.e., `self.end - self.begin`.",195,N],[0,"geometry","nalgebra","[Reexported at the root of this crate.] Data structures for points and usual transformations (rotations, isometries, etc.)",N,N],[3,"Point","nalgebra::geometry","A point in a n-dimensional euclidean space.",N,N],[12,"coords","","The coordinates of this point, i.e., the shift from the origin.",196,N],[3,"Rotation","","A rotation matrix.",N,N],[3,"Quaternion","","A quaternion. See the type alias `UnitQuaternion = Unit<Quaternion>` for a quaternion that may be used as a rotation.",N,N],[12,"coords","","This quaternion as a 4D vector of coordinates in the `[ x, y, z, w ]` storage order.",197,N],[3,"Translation","","A translation.",N,N],[12,"vector","","The translation coordinates, i.e., how much is added to a point's coordinates when it is translated.",198,N],[3,"Isometry","","A direct isometry, i.e., a rotation followed by a translation.",N,N],[12,"rotation","","The pure rotational part of this isometry.",199,N],[12,"translation","","The pure translational part of this isometry.",199,N],[3,"Similarity","","A similarity, i.e., an uniform scaling, followed by a rotation, followed by a translation.",N,N],[12,"isometry","","The part of this similarity that does not include the scaling factor.",200,N],[3,"Transform","","A transformation matrix in homogeneous coordinates.",N,N],[3,"Reflection","","A reflection wrt. a plane.",N,N],[3,"Orthographic3","","A 3D orthographic projection stored as an homogeneous 4x4 matrix.",N,N],[3,"Perspective3","","A 3D perspective projection stored as an homogeneous 4x4 matrix.",N,N],[4,"TGeneral","","Tag representing the most general (not necessarily inversible) `Transform` type.",N,N],[4,"TProjective","","Tag representing the most general inversible `Transform` type.",N,N],[4,"TAffine","","Tag representing an affine `Transform`. Its bottom-row is equal to `(0, 0 ... 0, 1)`.",N,N],[11,"fmt","","",196,[[["self"],["formatter"]],["result"]]],[11,"hash","","",196,[[["self"],["h"]]]],[11,"clone","","",196,[[["self"]],["self"]]],[11,"clone","","Clones this point into one that owns its data.",196,[[["self"]],["point"]]],[11,"to_homogeneous","","Converts this point into a vector in homogeneous coordinates, i.e., appends a `1` at the end of it.",196,[[["self"]],["vectorn",["dimnamesum"]]]],[11,"from_coordinates","","Creates a new point with the given coordinates.",196,[[["vectorn"]],["point"]]],[11,"len","","The dimension of this point.",196,[[["self"]],["usize"]]],[11,"stride","","The stride of this point. This is the number of buffer element separating each component of this point.",196,[[["self"]],["usize"]]],[11,"iter","","Iterates through this point coordinates.",196,[[["self"]],["matrixiter",["u1"]]]],[11,"get_unchecked","","Gets a reference to i-th element of this point without bound-checking.",196,[[["self"],["usize"]],["n"]]],[11,"iter_mut","","Mutably iterates through this point coordinates.",196,[[["self"]],["matrixitermut",["u1"]]]],[11,"get_unchecked_mut","","Gets a mutable reference to i-th element of this point without bound-checking.",196,[[["self"],["usize"]],["n"]]],[11,"swap_unchecked","","Swaps two entries without bound-checking.",196,[[["self"],["usize"],["usize"]]]],[11,"default_epsilon","","",196,N],[11,"abs_diff_eq","","",196,N],[11,"default_max_relative","","",196,N],[11,"relative_eq","","",196,N],[11,"default_max_ulps","","",196,[[],["u32"]]],[11,"ulps_eq","","",196,N],[11,"eq","","",196,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",196,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",196,[[["self"],["self"]],["bool"]]],[11,"le","","",196,[[["self"],["self"]],["bool"]]],[11,"gt","","",196,[[["self"],["self"]],["bool"]]],[11,"ge","","",196,[[["self"],["self"]],["bool"]]],[11,"fmt","","",196,[[["self"],["formatter"]],["result"]]],[11,"new_uninitialized","","Creates a new point with uninitialized coordinates.",196,[[],["self"]]],[11,"origin","","Creates a new point with all coordinates equal to zero.",196,[[],["self"]]],[11,"from_homogeneous","","Creates a new point from its homogeneous vector representation.",196,[[["vectorn",["dimnamesum"]]],["option"]]],[11,"max_value","","",196,[[],["self"]]],[11,"min_value","","",196,[[],["self"]]],[11,"new","","Initializes this matrix from its components.",196,[[["n"]],["point",["u1"]]]],[11,"new","","Initializes this matrix from its components.",196,[[["n"],["n"]],["point",["u2"]]]],[11,"new","","Initializes this matrix from its components.",196,[[["n"],["n"],["n"]],["point",["u3"]]]],[11,"new","","Initializes this matrix from its components.",196,[[["n"],["n"],["n"],["n"]],["point",["u4"]]]],[11,"new","","Initializes this matrix from its components.",196,[[["n"],["n"],["n"],["n"],["n"]],["point",["u5"]]]],[11,"new","","Initializes this matrix from its components.",196,[[["n"],["n"],["n"],["n"],["n"],["n"]],["point",["u6"]]]],[11,"from","","",196,N],[11,"from","","",196,N],[11,"from","","",196,N],[11,"from","","",196,N],[11,"from","","",196,N],[11,"from","","",196,N],[11,"index","","",196,N],[11,"index_mut","","",196,N],[11,"neg","","",196,N],[11,"sub","","",196,N],[11,"sub","","",196,N],[11,"sub","","",196,N],[11,"sub","","",196,N],[11,"add","","",196,N],[11,"add","","",196,N],[11,"add_assign","","",196,[[["self"],["vector"]]]],[11,"add_assign","","",196,[[["self"],["vector"]]]],[11,"sub_assign","","",196,[[["self"],["vector"]]]],[11,"sub_assign","","",196,[[["self"],["vector"]]]],[11,"mul","nalgebra::base","",1,N],[11,"mul","","",1,N],[11,"mul","nalgebra::geometry","",196,N],[11,"mul_assign","","",196,[[["self"],["n"]]]],[11,"div","","",196,N],[11,"div_assign","","",196,[[["self"],["n"]]]],[11,"origin","","",196,[[],["self"]]],[11,"coordinates","","",196,N],[11,"from_coordinates","","",196,N],[11,"scale_by","","",196,[[["self"],["n"]],["self"]]],[11,"meet","","",196,[[["self"],["self"]],["self"]]],[11,"join","","",196,[[["self"],["self"]],["self"]]],[11,"meet_join","","",196,N],[11,"to_superset","","",196,[[["self"]],["point"]]],[11,"is_in_subset","","",196,[[["point"]],["bool"]]],[11,"from_superset_unchecked","","",196,[[["point"]],["self"]]],[11,"to_superset","","",196,[[["self"]],["vectorn",["dimnamesum"]]]],[11,"is_in_subset","","",196,[[["vectorn"]],["bool"]]],[11,"from_superset_unchecked","","",196,[[["vectorn"]],["self"]]],[11,"deref","","",196,N],[11,"deref_mut","","",196,N],[11,"deref","","",196,N],[11,"deref_mut","","",196,N],[11,"deref","","",196,N],[11,"deref_mut","","",196,N],[11,"deref","","",196,N],[11,"deref_mut","","",196,N],[11,"deref","","",196,N],[11,"deref_mut","","",196,N],[11,"deref","","",196,N],[11,"deref_mut","","",196,N],[11,"fmt","","",201,[[["self"],["formatter"]],["result"]]],[11,"hash","","",201,[[["self"],["h"]]]],[11,"clone","","",201,[[["self"]],["self"]]],[11,"matrix","","A reference to the underlying matrix representation of this rotation.",201,[[["self"]],["matrixn"]]],[11,"matrix_mut","","A mutable reference to the underlying matrix representation of this rotation.",201,[[["self"]],["matrixn"]]],[11,"unwrap","","Unwraps the underlying matrix.",201,[[["self"]],["matrixn"]]],[11,"to_homogeneous","","Converts this rotation into its equivalent homogeneous transformation matrix.",201,[[["self"]],["matrixn",["dimnamesum"]]]],[11,"from_matrix_unchecked","","Creates a new rotation from the given square matrix.",201,[[["matrixn"]],["rotation"]]],[11,"transpose","","Transposes `self`.",201,[[["self"]],["rotation"]]],[11,"inverse","","Inverts `self`.",201,[[["self"]],["rotation"]]],[11,"transpose_mut","","Transposes `self` in-place.",201,[[["self"]]]],[11,"inverse_mut","","Inverts `self` in-place.",201,[[["self"]]]],[11,"eq","","",201,[[["self"],["rotation"]],["bool"]]],[11,"default_epsilon","","",201,N],[11,"abs_diff_eq","","",201,N],[11,"default_max_relative","","",201,N],[11,"relative_eq","","",201,N],[11,"default_max_ulps","","",201,[[],["u32"]]],[11,"ulps_eq","","",201,N],[11,"fmt","","",201,[[["self"],["formatter"]],["result"]]],[11,"identity","","Creates a new square identity rotation of the given `dimension`.",201,[[],["rotation"]]],[11,"one","","",201,[[],["self"]]],[11,"index","","",201,N],[11,"mul","","",201,N],[11,"mul","","",201,N],[11,"div","","",201,N],[11,"div","","",201,N],[11,"mul","","",201,N],[11,"mul","","",201,N],[11,"mul","nalgebra::base","",1,N],[11,"mul","","",1,N],[11,"div","","",1,N],[11,"div","","",1,N],[11,"mul","nalgebra::geometry","",201,N],[11,"mul","","",201,N],[11,"mul_assign","","",201,[[["self"],["rotation"]]]],[11,"mul_assign","","",201,[[["self"],["rotation"]]]],[11,"div_assign","","",201,[[["self"],["rotation"]]]],[11,"div_assign","","",201,[[["self"],["rotation"]]]],[11,"mul_assign","nalgebra::geometry::rotation_ops","",202,[[["self"],["rotation"]]]],[11,"mul_assign","","",202,[[["self"],["rotation"]]]],[11,"div_assign","","",202,[[["self"],["rotation"]]]],[11,"div_assign","","",202,[[["self"],["rotation"]]]],[11,"identity","nalgebra::geometry","",201,[[],["self"]]],[11,"inverse","","",201,[[["self"]],["self"]]],[11,"inverse_mut","","",201,[[["self"]]]],[11,"operate","","",201,[[["self"],["self"]],["self"]]],[11,"transform_point","","",201,[[["self"],["point"]],["point"]]],[11,"transform_vector","","",201,[[["self"],["vectorn"]],["vectorn"]]],[11,"inverse_transform_point","","",201,[[["self"],["point"]],["point"]]],[11,"inverse_transform_vector","","",201,[[["self"],["vectorn"]],["vectorn"]]],[11,"decompose","","",201,N],[11,"append_translation","","",201,N],[11,"prepend_translation","","",201,N],[11,"append_rotation","","",201,N],[11,"prepend_rotation","","",201,N],[11,"append_scaling","","",201,N],[11,"prepend_scaling","","",201,N],[11,"translation","","",201,[[["self"]],["id"]]],[11,"rotation","","",201,[[["self"]],["self"]]],[11,"scaling","","",201,[[["self"]],["id"]]],[11,"powf","","",201,[[["self"],["n"]],["option"]]],[11,"rotation_between","","",201,[[["vectorn"],["vectorn"]],["option"]]],[11,"scaled_rotation_between","","",201,[[["vectorn"],["vectorn"],["n"]],["option"]]],[11,"to_superset","","",201,[[["self"]],["rotation"]]],[11,"is_in_subset","","",201,[[["rotation"]],["bool"]]],[11,"from_superset_unchecked","","",201,[[["rotation"]],["self"]]],[11,"to_superset","","",201,[[["self"]],["isometry"]]],[11,"is_in_subset","","",201,[[["isometry"]],["bool"]]],[11,"from_superset_unchecked","","",201,[[["isometry"]],["self"]]],[11,"to_superset","","",201,[[["self"]],["similarity"]]],[11,"is_in_subset","","",201,[[["similarity"]],["bool"]]],[11,"from_superset_unchecked","","",201,[[["similarity"]],["self"]]],[11,"to_superset","","",201,[[["self"]],["transform"]]],[11,"is_in_subset","","",201,[[["transform"]],["bool"]]],[11,"from_superset_unchecked","","",201,[[["transform"]],["self"]]],[11,"to_superset","","",201,[[["self"]],["matrixn",["dimnamesum"]]]],[11,"is_in_subset","","",201,[[["matrixn"]],["bool"]]],[11,"from_superset_unchecked","","",201,[[["matrixn"]],["self"]]],[11,"fmt","","",197,[[["self"],["formatter"]],["result"]]],[11,"eq","","",197,[[["self"],["self"]],["bool"]]],[11,"hash","","",197,[[["self"],["h"]]]],[11,"clone","","",197,[[["self"]],["self"]]],[11,"into_owned","","Moves this unit quaternion into one that owns its data.",197,[[["self"]],["quaternion"]]],[11,"clone_owned","","Clones this unit quaternion into one that owns its data.",197,[[["self"]],["quaternion"]]],[11,"normalize","","Normalizes this quaternion.",197,[[["self"]],["quaternion"]]],[11,"conjugate","","Compute the conjugate of this quaternion.",197,[[["self"]],["quaternion"]]],[11,"try_inverse","","Inverts this quaternion if it is not zero.",197,[[["self"]],["option",["quaternion"]]]],[11,"lerp","","Linear interpolation between two quaternion.",197,[[["self"],["quaternion"],["n"]],["quaternion"]]],[11,"vector","","The vector part `(i, j, k)` of this quaternion.",197,[[["self"]],["matrixslice",["u3","u1","rstride","cstride"]]]],[11,"scalar","","The scalar part `w` of this quaternion.",197,[[["self"]],["n"]]],[11,"as_vector","","Reinterprets this quaternion as a 4D vector.",197,[[["self"]],["vector4"]]],[11,"norm","","The norm of this quaternion.",197,[[["self"]],["n"]]],[11,"norm_squared","","The squared norm of this quaternion.",197,[[["self"]],["n"]]],[11,"polar_decomposition","","The polar decomposition of this quaternion.",197,N],[11,"exp","","Compute the exponential of a quaternion.",197,[[["self"]],["quaternion"]]],[11,"exp_eps","","Compute the exponential of a quaternion.",197,[[["self"],["n"]],["quaternion"]]],[11,"ln","","Compute the natural logarithm of a quaternion.",197,[[["self"]],["quaternion"]]],[11,"powf","","Raise the quaternion to a given floating power.",197,[[["self"],["n"]],["quaternion"]]],[11,"as_vector_mut","","Transforms this quaternion into its 4D vector form (Vector part, Scalar part).",197,[[["self"]],["vector4"]]],[11,"vector_mut","","The mutable vector part `(i, j, k)` of this quaternion.",197,[[["self"]],["matrixslicemut",["u3","u1","rstride","cstride"]]]],[11,"conjugate_mut","","Replaces this quaternion by its conjugate.",197,[[["self"]]]],[11,"try_inverse_mut","","Inverts this quaternion in-place if it is not zero.",197,[[["self"]],["bool"]]],[11,"normalize_mut","","Normalizes this quaternion.",197,[[["self"]],["n"]]],[11,"default_epsilon","","",197,N],[11,"abs_diff_eq","","",197,N],[11,"default_max_relative","","",197,N],[11,"relative_eq","","",197,N],[11,"default_max_ulps","","",197,[[],["u32"]]],[11,"ulps_eq","","",197,N],[11,"fmt","","",197,[[["self"],["formatter"]],["result"]]],[11,"from_vector","","Creates a quaternion from a 4D vector. The quaternion scalar part corresponds to the `w` vector component.",197,[[["vector4"]],["self"]]],[11,"new","","Creates a new quaternion from its individual components. Note that the arguments order does not follow the storage order.",197,[[["n"],["n"],["n"],["n"]],["self"]]],[11,"from_parts","","Creates a new quaternion from its scalar and vector parts. Note that the arguments order does not follow the storage order.",197,[[["n"],["vector",["u3"]]],["self"]]],[11,"from_polar_decomposition","","Creates a new quaternion from its polar decomposition.",197,[[["n"],["n"],["unit",["vector"]]],["self"]]],[11,"identity","","The quaternion multiplicative identity.",197,[[],["self"]]],[11,"one","","",197,[[],["self"]]],[11,"zero","","",197,[[],["self"]]],[11,"is_zero","","",197,[[["self"]],["bool"]]],[11,"index","","",197,[[["self"],["usize"]],["n"]]],[11,"index_mut","","",197,[[["self"],["usize"]],["n"]]],[11,"add","","",197,N],[11,"add","","",197,N],[11,"sub","","",197,N],[11,"sub","","",197,N],[11,"mul","","",197,N],[11,"mul","","",197,N],[11,"mul","","",201,N],[11,"mul","","",201,N],[11,"div","","",201,N],[11,"div","","",201,N],[11,"mul","","",197,N],[11,"mul_assign","","",197,[[["self"],["n"]]]],[11,"div","","",197,N],[11,"div_assign","","",197,[[["self"],["n"]]]],[11,"neg","","",197,N],[11,"add_assign","","",197,[[["self"],["quaternion"]]]],[11,"add_assign","","",197,[[["self"],["quaternion"]]]],[11,"sub_assign","","",197,[[["self"],["quaternion"]]]],[11,"sub_assign","","",197,[[["self"],["quaternion"]]]],[11,"mul_assign","","",197,[[["self"],["quaternion"]]]],[11,"mul_assign","","",197,[[["self"],["quaternion"]]]],[11,"identity","","",197,[[],["self"]]],[11,"identity","","",197,[[],["self"]]],[11,"operate","","",197,[[["self"],["self"]],["self"]]],[11,"operate","","",197,[[["self"],["self"]],["self"]]],[11,"inverse","","",197,[[["self"]],["self"]]],[11,"multiply_by","","",197,[[["self"],["n"]],["self"]]],[11,"dimension","","",197,[[],["usize"]]],[11,"canonical_basis_element","","",197,[[["usize"]],["self"]]],[11,"dot","","",197,[[["self"],["self"]],["n"]]],[11,"component_unchecked","","",197,[[["self"],["usize"]],["n"]]],[11,"component_unchecked_mut","","",197,[[["self"],["usize"]],["n"]]],[11,"norm_squared","","",197,[[["self"]],["n"]]],[11,"norm","","",197,[[["self"]],["n"]]],[11,"normalize","","",197,[[["self"]],["self"]]],[11,"normalize_mut","","",197,[[["self"]],["n"]]],[11,"try_normalize","","",197,[[["self"],["n"]],["option"]]],[11,"try_normalize_mut","","",197,[[["self"],["n"]],["option"]]],[11,"to_superset","","",197,[[["self"]],["quaternion"]]],[11,"is_in_subset","","",197,[[["quaternion"]],["bool"]]],[11,"from_superset_unchecked","","",197,[[["quaternion"]],["self"]]],[11,"deref","","",197,N],[11,"deref_mut","","",197,N],[11,"mul","","",201,N],[11,"mul","","",201,N],[11,"div","","",201,N],[11,"div","","",201,N],[11,"mul","","",198,N],[11,"mul","","",198,N],[11,"mul_assign","","",201,[[["self"],["unitcomplex"]]]],[11,"mul_assign","","",201,[[["self"],["unitcomplex"]]]],[11,"div_assign","","",201,[[["self"],["unitcomplex"]]]],[11,"div_assign","","",201,[[["self"],["unitcomplex"]]]],[11,"fmt","","",198,[[["self"],["formatter"]],["result"]]],[11,"hash","","",198,[[["self"],["h"]]]],[11,"clone","","",198,[[["self"]],["self"]]],[11,"from_vector","","Creates a new translation from the given vector.",198,[[["vectorn"]],["translation"]]],[11,"inverse","","Inverts `self`.",198,[[["self"]],["translation"]]],[11,"to_homogeneous","","Converts this translation into its equivalent homogeneous transformation matrix.",198,[[["self"]],["matrixn",["dimnamesum"]]]],[11,"inverse_mut","","Inverts `self` in-place.",198,[[["self"]]]],[11,"eq","","",198,[[["self"],["translation"]],["bool"]]],[11,"default_epsilon","","",198,N],[11,"abs_diff_eq","","",198,N],[11,"default_max_relative","","",198,N],[11,"relative_eq","","",198,N],[11,"default_max_ulps","","",198,[[],["u32"]]],[11,"ulps_eq","","",198,N],[11,"fmt","","",198,[[["self"],["formatter"]],["result"]]],[11,"identity","","Creates a new square identity rotation of the given `dimension`.",198,[[],["translation"]]],[11,"one","","",198,[[],["self"]]],[11,"new","","Initializes this matrix from its components.",198,[[["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",198,[[["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",198,[[["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",198,[[["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",198,[[["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",198,[[["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"mul","","",198,N],[11,"mul","","",198,N],[11,"div","","",198,N],[11,"div","","",198,N],[11,"mul","","",198,N],[11,"mul","","",198,N],[11,"mul_assign","","",198,[[["self"],["translation"]]]],[11,"mul_assign","","",198,[[["self"],["translation"]]]],[11,"div_assign","","",198,[[["self"],["translation"]]]],[11,"div_assign","","",198,[[["self"],["translation"]]]],[11,"identity","","",198,[[],["self"]]],[11,"inverse","","",198,[[["self"]],["self"]]],[11,"inverse_mut","","",198,[[["self"]]]],[11,"operate","","",198,[[["self"],["self"]],["self"]]],[11,"transform_point","","",198,[[["self"],["point"]],["point"]]],[11,"transform_vector","","",198,[[["self"],["vectorn"]],["vectorn"]]],[11,"inverse_transform_point","","",198,[[["self"],["point"]],["point"]]],[11,"inverse_transform_vector","","",198,[[["self"],["vectorn"]],["vectorn"]]],[11,"decompose","","",198,N],[11,"append_translation","","",198,N],[11,"prepend_translation","","",198,N],[11,"append_rotation","","",198,N],[11,"prepend_rotation","","",198,N],[11,"append_scaling","","",198,N],[11,"prepend_scaling","","",198,N],[11,"translation","","",198,[[["self"]],["self"]]],[11,"rotation","","",198,[[["self"]],["id"]]],[11,"scaling","","",198,[[["self"]],["id"]]],[11,"to_vector","","",198,[[["self"]],["vectorn"]]],[11,"from_vector","","",198,[[["vectorn"]],["option"]]],[11,"powf","","",198,[[["self"],["n"]],["option"]]],[11,"translation_between","","",198,[[["point"],["point"]],["option"]]],[11,"to_superset","","",198,[[["self"]],["translation"]]],[11,"is_in_subset","","",198,[[["translation"]],["bool"]]],[11,"from_superset_unchecked","","",198,[[["translation"]],["self"]]],[11,"to_superset","","",198,[[["self"]],["isometry"]]],[11,"is_in_subset","","",198,[[["isometry"]],["bool"]]],[11,"from_superset_unchecked","","",198,[[["isometry"]],["self"]]],[11,"to_superset","","",198,[[["self"]],["similarity"]]],[11,"is_in_subset","","",198,[[["similarity"]],["bool"]]],[11,"from_superset_unchecked","","",198,[[["similarity"]],["self"]]],[11,"to_superset","","",198,[[["self"]],["transform"]]],[11,"is_in_subset","","",198,[[["transform"]],["bool"]]],[11,"from_superset_unchecked","","",198,[[["transform"]],["self"]]],[11,"to_superset","","",198,[[["self"]],["matrixn",["dimnamesum"]]]],[11,"is_in_subset","","",198,[[["matrixn"]],["bool"]]],[11,"from_superset_unchecked","","",198,[[["matrixn"]],["self"]]],[11,"fmt","","",199,[[["self"],["formatter"]],["result"]]],[11,"hash","","",199,[[["self"],["h"]]]],[11,"clone","","",199,[[["self"]],["self"]]],[11,"from_parts","","Creates a new isometry from its rotational and translational parts.",199,[[["translation"],["r"]],["isometry"]]],[11,"inverse","","Inverts `self`.",199,[[["self"]],["isometry"]]],[11,"inverse_mut","","Inverts `self`.",199,[[["self"]]]],[11,"append_translation_mut","","Appends to `self` the given translation in-place.",199,[[["self"],["translation"]]]],[11,"append_rotation_mut","","Appends to `self` the given rotation in-place.",199,[[["self"],["r"]]]],[11,"append_rotation_wrt_point_mut","","Appends in-place to `self` a rotation centered at the point `p`, i.e., the rotation that lets `p` invariant.",199,[[["self"],["r"],["point"]]]],[11,"append_rotation_wrt_center_mut","","Appends in-place to `self` a rotation centered at the point with coordinates `self.translation`.",199,[[["self"],["r"]]]],[11,"to_homogeneous","","Converts this isometry into its equivalent homogeneous transformation matrix.",199,[[["self"]],["matrixn",["dimnamesum"]]]],[11,"eq","","",199,[[["self"],["isometry"]],["bool"]]],[11,"default_epsilon","","",199,N],[11,"abs_diff_eq","","",199,N],[11,"default_max_relative","","",199,N],[11,"relative_eq","","",199,N],[11,"default_max_ulps","","",199,[[],["u32"]]],[11,"ulps_eq","","",199,N],[11,"fmt","","",199,[[["self"],["formatter"]],["result"]]],[11,"identity","","Creates a new identity isometry.",199,[[],["self"]]],[11,"rotation_wrt_point","","The isometry that applies the rotation `r` with its axis passing through the point `p`. This effectively lets `p` invariant.",199,[[["r"],["point"]],["self"]]],[11,"one","","Creates a new identity isometry.",199,[[],["self"]]],[11,"new","","Creates a new isometry from a translation and a rotation angle.",199,[[["vector2"],["n"]],["self"]]],[11,"new","","Creates a new isometry from a translation and a rotation angle.",199,[[["vector2"],["n"]],["self"]]],[11,"new","","Creates a new isometry from a translation and a rotation axis-angle.",199,[[["vector3"],["vector3"]],["self"]]],[11,"new_observer_frame","","Creates an isometry that corresponds to the local frame of an observer standing at the point `eye` and looking toward `target`.",199,[[["point3"],["point3"],["vector3"]],["self"]]],[11,"look_at_rh","","Builds a right-handed look-at view matrix.",199,[[["point3"],["point3"],["vector3"]],["self"]]],[11,"look_at_lh","","Builds a left-handed look-at view matrix.",199,[[["point3"],["point3"],["vector3"]],["self"]]],[11,"new","","Creates a new isometry from a translation and a rotation axis-angle.",199,[[["vector3"],["vector3"]],["self"]]],[11,"new_observer_frame","","Creates an isometry that corresponds to the local frame of an observer standing at the point `eye` and looking toward `target`.",199,[[["point3"],["point3"],["vector3"]],["self"]]],[11,"look_at_rh","","Builds a right-handed look-at view matrix.",199,[[["point3"],["point3"],["vector3"]],["self"]]],[11,"look_at_lh","","Builds a left-handed look-at view matrix.",199,[[["point3"],["point3"],["vector3"]],["self"]]],[11,"mul","","",199,N],[11,"mul","","",199,N],[11,"div","","",199,N],[11,"div","","",199,N],[11,"mul_assign","","",199,[[["self"],["translation"]]]],[11,"mul_assign","","",199,[[["self"],["translation"]]]],[11,"mul_assign","","",199,[[["self"],["isometry"]]]],[11,"mul_assign","","",199,[[["self"],["isometry"]]]],[11,"div_assign","","",199,[[["self"],["isometry"]]]],[11,"div_assign","","",199,[[["self"],["isometry"]]]],[11,"mul_assign","","",199,[[["self"],["r"]]]],[11,"mul_assign","","",199,[[["self"],["r"]]]],[11,"div_assign","","",199,[[["self"],["r"]]]],[11,"div_assign","","",199,[[["self"],["r"]]]],[11,"mul","","",199,N],[11,"mul","","",199,N],[11,"div","","",199,N],[11,"div","","",199,N],[11,"mul","","",199,N],[11,"mul","","",199,N],[11,"mul","","",199,N],[11,"mul","","",199,N],[11,"mul","","",199,N],[11,"mul","","",199,N],[11,"mul","","",199,N],[11,"mul","","",199,N],[11,"mul","","",198,N],[11,"mul","","",198,N],[11,"mul","","",201,N],[11,"mul","","",201,N],[11,"mul","","",201,N],[11,"mul","","",201,N],[11,"div","","",201,N],[11,"div","","",201,N],[11,"mul","","",198,N],[11,"mul","","",198,N],[11,"mul","","",198,N],[11,"mul","","",198,N],[11,"identity","","",199,[[],["self"]]],[11,"inverse","","",199,[[["self"]],["self"]]],[11,"inverse_mut","","",199,[[["self"]]]],[11,"operate","","",199,[[["self"],["self"]],["self"]]],[11,"transform_point","","",199,[[["self"],["point"]],["point"]]],[11,"transform_vector","","",199,[[["self"],["vectorn"]],["vectorn"]]],[11,"inverse_transform_point","","",199,[[["self"],["point"]],["point"]]],[11,"inverse_transform_vector","","",199,[[["self"],["vectorn"]],["vectorn"]]],[11,"decompose","","",199,N],[11,"append_translation","","",199,N],[11,"prepend_translation","","",199,N],[11,"append_rotation","","",199,N],[11,"prepend_rotation","","",199,N],[11,"append_scaling","","",199,N],[11,"prepend_scaling","","",199,N],[11,"append_rotation_wrt_point","","",199,N],[11,"translation","","",199,[[["self"]],["translation"]]],[11,"rotation","","",199,[[["self"]],["r"]]],[11,"scaling","","",199,[[["self"]],["id"]]],[11,"to_superset","","",199,[[["self"]],["isometry"]]],[11,"is_in_subset","","",199,[[["isometry"]],["bool"]]],[11,"from_superset_unchecked","","",199,[[["isometry"]],["self"]]],[11,"to_superset","","",199,[[["self"]],["similarity"]]],[11,"is_in_subset","","",199,[[["similarity"]],["bool"]]],[11,"from_superset_unchecked","","",199,[[["similarity"]],["self"]]],[11,"to_superset","","",199,[[["self"]],["transform"]]],[11,"is_in_subset","","",199,[[["transform"]],["bool"]]],[11,"from_superset_unchecked","","",199,[[["transform"]],["self"]]],[11,"to_superset","","",199,[[["self"]],["matrixn",["dimnamesum"]]]],[11,"is_in_subset","","",199,[[["matrixn"]],["bool"]]],[11,"from_superset_unchecked","","",199,[[["matrixn"]],["self"]]],[11,"fmt","","",200,[[["self"],["formatter"]],["result"]]],[11,"hash","","",200,[[["self"],["h"]]]],[11,"clone","","",200,[[["self"]],["self"]]],[11,"from_parts","","Creates a new similarity from its rotational and translational parts.",200,[[["translation"],["r"],["n"]],["similarity"]]],[11,"from_isometry","","Creates a new similarity from its rotational and translational parts.",200,[[["isometry"],["n"]],["similarity"]]],[11,"from_scaling","","Creates a new similarity that applies only a scaling factor.",200,[[["n"]],["similarity"]]],[11,"inverse","","Inverts `self`.",200,[[["self"]],["similarity"]]],[11,"inverse_mut","","Inverts `self` in-place.",200,[[["self"]]]],[11,"set_scaling","","The scaling factor of this similarity transformation.",200,[[["self"],["n"]]]],[11,"scaling","","The scaling factor of this similarity transformation.",200,[[["self"]],["n"]]],[11,"prepend_scaling","","The similarity transformation that applies a scaling factor `scaling` before `self`.",200,[[["self"],["n"]],["self"]]],[11,"append_scaling","","The similarity transformation that applies a scaling factor `scaling` after `self`.",200,[[["self"],["n"]],["self"]]],[11,"prepend_scaling_mut","","Sets `self` to the similarity transformation that applies a scaling factor `scaling` before `self`.",200,[[["self"],["n"]]]],[11,"append_scaling_mut","","Sets `self` to the similarity transformation that applies a scaling factor `scaling` after `self`.",200,[[["self"],["n"]]]],[11,"append_translation_mut","","Appends to `self` the given translation in-place.",200,[[["self"],["translation"]]]],[11,"append_rotation_mut","","Appends to `self` the given rotation in-place.",200,[[["self"],["r"]]]],[11,"append_rotation_wrt_point_mut","","Appends in-place to `self` a rotation centered at the point `p`, i.e., the rotation that lets `p` invariant.",200,[[["self"],["r"],["point"]]]],[11,"append_rotation_wrt_center_mut","","Appends in-place to `self` a rotation centered at the point with coordinates `self.translation`.",200,[[["self"],["r"]]]],[11,"to_homogeneous","","Converts this similarity into its equivalent homogeneous transformation matrix.",200,[[["self"]],["matrixn",["dimnamesum"]]]],[11,"eq","","",200,[[["self"],["similarity"]],["bool"]]],[11,"default_epsilon","","",200,N],[11,"abs_diff_eq","","",200,N],[11,"default_max_relative","","",200,N],[11,"relative_eq","","",200,N],[11,"default_max_ulps","","",200,[[],["u32"]]],[11,"ulps_eq","","",200,N],[11,"fmt","","",200,[[["self"],["formatter"]],["result"]]],[11,"identity","","Creates a new identity similarity.",200,[[],["self"]]],[11,"one","","Creates a new identity similarity.",200,[[],["self"]]],[11,"rotation_wrt_point","","The similarity that applies tha scaling factor `scaling`, followed by the rotation `r` with its axis passing through the point `p`.",200,[[["r"],["point"],["n"]],["self"]]],[11,"new","","Creates a new similarity from a translation and a rotation angle.",200,[[["vector2"],["n"],["n"]],["self"]]],[11,"new","","Creates a new similarity from a translation and a rotation angle.",200,[[["vector2"],["n"],["n"]],["self"]]],[11,"new","","Creates a new similarity from a translation, rotation axis-angle, and scaling factor.",200,[[["vector3"],["vector3"],["n"]],["self"]]],[11,"new_observer_frame","","Creates an similarity that corresponds to the a scaling factor and a local frame of an observer standing at the point `eye` and looking toward `target`.",200,[[["point3"],["point3"],["vector3"],["n"]],["self"]]],[11,"look_at_rh","","Builds a right-handed look-at view matrix including scaling factor.",200,[[["point3"],["point3"],["vector3"],["n"]],["self"]]],[11,"look_at_lh","","Builds a left-handed look-at view matrix including a scaling factor.",200,[[["point3"],["point3"],["vector3"],["n"]],["self"]]],[11,"new","","Creates a new similarity from a translation, rotation axis-angle, and scaling factor.",200,[[["vector3"],["vector3"],["n"]],["self"]]],[11,"new_observer_frame","","Creates an similarity that corresponds to the a scaling factor and a local frame of an observer standing at the point `eye` and looking toward `target`.",200,[[["point3"],["point3"],["vector3"],["n"]],["self"]]],[11,"look_at_rh","","Builds a right-handed look-at view matrix including scaling factor.",200,[[["point3"],["point3"],["vector3"],["n"]],["self"]]],[11,"look_at_lh","","Builds a left-handed look-at view matrix including a scaling factor.",200,[[["point3"],["point3"],["vector3"],["n"]],["self"]]],[11,"mul","","",200,N],[11,"mul","","",200,N],[11,"div","","",200,N],[11,"div","","",200,N],[11,"mul_assign","","",200,[[["self"],["translation"]]]],[11,"mul_assign","","",200,[[["self"],["translation"]]]],[11,"mul_assign","","",200,[[["self"],["similarity"]]]],[11,"mul_assign","","",200,[[["self"],["similarity"]]]],[11,"div_assign","","",200,[[["self"],["similarity"]]]],[11,"div_assign","","",200,[[["self"],["similarity"]]]],[11,"mul_assign","","",200,[[["self"],["isometry"]]]],[11,"mul_assign","","",200,[[["self"],["isometry"]]]],[11,"div_assign","","",200,[[["self"],["isometry"]]]],[11,"div_assign","","",200,[[["self"],["isometry"]]]],[11,"mul_assign","","",200,[[["self"],["r"]]]],[11,"mul_assign","","",200,[[["self"],["r"]]]],[11,"div_assign","","",200,[[["self"],["r"]]]],[11,"div_assign","","",200,[[["self"],["r"]]]],[11,"mul","","",200,N],[11,"mul","","",200,N],[11,"div","","",200,N],[11,"div","","",200,N],[11,"mul","","",200,N],[11,"mul","","",200,N],[11,"div","","",200,N],[11,"div","","",200,N],[11,"mul","","",199,N],[11,"mul","","",199,N],[11,"div","","",199,N],[11,"div","","",199,N],[11,"mul","","",200,N],[11,"mul","","",200,N],[11,"mul","","",200,N],[11,"mul","","",200,N],[11,"mul","","",200,N],[11,"mul","","",200,N],[11,"mul","","",198,N],[11,"mul","","",198,N],[11,"mul","","",201,N],[11,"mul","","",201,N],[11,"div","","",201,N],[11,"div","","",201,N],[11,"identity","","",200,[[],["self"]]],[11,"inverse","","",200,[[["self"]],["self"]]],[11,"inverse_mut","","",200,[[["self"]]]],[11,"operate","","",200,[[["self"],["self"]],["self"]]],[11,"transform_point","","",200,[[["self"],["point"]],["point"]]],[11,"transform_vector","","",200,[[["self"],["vectorn"]],["vectorn"]]],[11,"inverse_transform_point","","",200,[[["self"],["point"]],["point"]]],[11,"inverse_transform_vector","","",200,[[["self"],["vectorn"]],["vectorn"]]],[11,"decompose","","",200,N],[11,"append_translation","","",200,N],[11,"prepend_translation","","",200,N],[11,"append_rotation","","",200,N],[11,"prepend_rotation","","",200,N],[11,"append_scaling","","",200,N],[11,"prepend_scaling","","",200,N],[11,"append_rotation_wrt_point","","",200,N],[11,"translation","","",200,[[["self"]],["translation"]]],[11,"rotation","","",200,[[["self"]],["r"]]],[11,"scaling","","",200,[[["self"]],["n"]]],[11,"to_superset","","",200,[[["self"]],["similarity"]]],[11,"is_in_subset","","",200,[[["similarity"]],["bool"]]],[11,"from_superset_unchecked","","",200,[[["similarity"]],["self"]]],[11,"to_superset","","",200,[[["self"]],["transform"]]],[11,"is_in_subset","","",200,[[["transform"]],["bool"]]],[11,"from_superset_unchecked","","",200,[[["transform"]],["self"]]],[11,"to_superset","","",200,[[["self"]],["matrixn",["dimnamesum"]]]],[11,"is_in_subset","","",200,[[["matrixn"]],["bool"]]],[11,"from_superset_unchecked","","",200,[[["matrixn"]],["self"]]],[11,"fmt","","",203,[[["self"],["formatter"]],["result"]]],[11,"clone","","",203,[[["self"]],["tgeneral"]]],[11,"hash","","",203,N],[11,"eq","","",203,[[["self"],["tgeneral"]],["bool"]]],[11,"fmt","","",204,[[["self"],["formatter"]],["result"]]],[11,"clone","","",204,[[["self"]],["tprojective"]]],[11,"hash","","",204,N],[11,"eq","","",204,[[["self"],["tprojective"]],["bool"]]],[11,"fmt","","",205,[[["self"],["formatter"]],["result"]]],[11,"clone","","",205,[[["self"]],["taffine"]]],[11,"hash","","",205,N],[11,"eq","","",205,[[["self"],["taffine"]],["bool"]]],[11,"check_homogeneous_invariants","","",203,[[["matrixn"]],["bool"]]],[11,"check_homogeneous_invariants","","",204,[[["matrixn"]],["bool"]]],[11,"has_normalizer","","",205,[[],["bool"]]],[11,"check_homogeneous_invariants","","",205,[[["matrixn"]],["bool"]]],[11,"fmt","","",206,[[["self"],["formatter"]],["result"]]],[11,"clone","","",206,[[["self"]],["self"]]],[11,"eq","","",206,[[["self"],["self"]],["bool"]]],[11,"from_matrix_unchecked","","Creates a new transformation from the given homogeneous matrix. The transformation category of `Self` is not checked to be verified by the given matrix.",206,[[["matrixn",["dimnamesum"]]],["self"]]],[11,"unwrap","","The underlying matrix.",206,[[["self"]],["matrixn",["dimnamesum"]]]],[11,"matrix","","A reference to the underlynig matrix.",206,[[["self"]],["matrixn"]]],[11,"matrix_mut_unchecked","","A mutable reference to the underlying matrix.",206,[[["self"]],["matrixn"]]],[11,"set_category","","Sets the category of this transform.",206,[[["self"]],["transform"]]],[11,"clone_owned","","Clones this transform into one that owns its data.",206,[[["self"]],["transform"]]],[11,"to_homogeneous","","Converts this transform into its equivalent homogeneous transformation matrix.",206,[[["self"]],["matrixn",["dimnamesum"]]]],[11,"try_inverse","","Attempts to invert this transformation. You may use `.inverse` instead of this transformation has a subcategory of `TProjective`.",206,[[["self"]],["option",["transform"]]]],[11,"inverse","","Inverts this transformation. Use `.try_inverse` if this transform has the `TGeneral` category (it may not be invertible).",206,[[["self"]],["transform"]]],[11,"try_inverse_mut","","Attempts to invert this transformation in-place. You may use `.inverse_mut` instead of this transformation has a subcategory of `TProjective`.",206,[[["self"]],["bool"]]],[11,"inverse_mut","","Inverts this transformation in-place. Use `.try_inverse_mut` if this transform has the `TGeneral` category (it may not be invertible).",206,[[["self"]]]],[11,"matrix_mut","","A mutable reference to underlying matrix. Use `.matrix_mut_unchecked` instead if this transformation category is not `TGeneral`.",206,[[["self"]],["matrixn"]]],[11,"identity","","Creates a new identity transform.",206,[[],["self"]]],[11,"one","","Creates a new identity transform.",206,[[],["self"]]],[11,"index","","",206,N],[11,"index_mut","","",206,N],[11,"mul","","",206,N],[11,"mul","","",206,N],[11,"mul","","",206,N],[11,"mul","","",206,N],[11,"mul","","",206,N],[11,"mul","","",206,N],[11,"mul","","",206,N],[11,"mul","","",206,N],[11,"mul","","",201,N],[11,"mul","","",201,N],[11,"mul","","",206,N],[11,"mul","","",206,N],[11,"mul","","",206,N],[11,"mul","","",206,N],[11,"mul","","",199,N],[11,"mul","","",199,N],[11,"mul","","",206,N],[11,"mul","","",206,N],[11,"mul","","",200,N],[11,"mul","","",200,N],[11,"mul","","",206,N],[11,"mul","","",206,N],[11,"mul","","",198,N],[11,"mul","","",198,N],[11,"div","","",206,N],[11,"div","","",206,N],[11,"div","","",206,N],[11,"div","","",206,N],[11,"div","","",201,N],[11,"div","","",201,N],[11,"div","","",206,N],[11,"div","","",206,N],[11,"div","","",206,N],[11,"div","","",206,N],[11,"div","","",198,N],[11,"div","","",198,N],[11,"mul_assign","","",206,[[["self"],["transform"]]]],[11,"mul_assign","","",206,[[["self"],["transform"]]]],[11,"mul_assign","","",206,[[["self"],["similarity"]]]],[11,"mul_assign","","",206,[[["self"],["similarity"]]]],[11,"mul_assign","","",206,[[["self"],["isometry"]]]],[11,"mul_assign","","",206,[[["self"],["isometry"]]]],[11,"mul_assign","","",206,[[["self"],["translation"]]]],[11,"mul_assign","","",206,[[["self"],["translation"]]]],[11,"mul_assign","","",206,[[["self"],["rotation"]]]],[11,"mul_assign","","",206,[[["self"],["rotation"]]]],[11,"mul_assign","","",206,[[["self"],["unitquaternion"]]]],[11,"mul_assign","","",206,[[["self"],["unitquaternion"]]]],[11,"div_assign","","",206,[[["self"],["transform"]]]],[11,"div_assign","","",206,[[["self"],["transform"]]]],[11,"div_assign","","",206,[[["self"],["translation"]]]],[11,"div_assign","","",206,[[["self"],["translation"]]]],[11,"div_assign","","",206,[[["self"],["rotation"]]]],[11,"div_assign","","",206,[[["self"],["rotation"]]]],[11,"div_assign","","",206,[[["self"],["unitquaternion"]]]],[11,"div_assign","","",206,[[["self"],["unitquaternion"]]]],[11,"identity","","",206,[[],["self"]]],[11,"inverse","","",206,[[["self"]],["self"]]],[11,"inverse_mut","","",206,[[["self"]]]],[11,"operate","","",206,[[["self"],["self"]],["self"]]],[11,"transform_point","","",206,[[["self"],["point"]],["point"]]],[11,"transform_vector","","",206,[[["self"],["vectorn"]],["vectorn"]]],[11,"inverse_transform_point","","",206,[[["self"],["point"]],["point"]]],[11,"inverse_transform_vector","","",206,[[["self"],["vectorn"]],["vectorn"]]],[11,"to_superset","","",206,[[["self"]],["transform"]]],[11,"is_in_subset","","",206,[[["transform"]],["bool"]]],[11,"from_superset_unchecked","","",206,[[["transform"]],["self"]]],[11,"to_superset","","",206,[[["self"]],["matrixn",["dimnamesum"]]]],[11,"is_in_subset","","",206,[[["matrixn"]],["bool"]]],[11,"from_superset_unchecked","","",206,[[["matrixn"]],["self"]]],[11,"new","","Creates a new reflection wrt the plane orthogonal to the given axis and bias.",207,[[["unit",["vector"]],["n"]],["reflection"]]],[11,"new_containing_point","","Creates a new reflection wrt. the plane orthogonal to the given axis and that contains the point `pt`.",207,[[["unit",["vector"]],["point"]],["reflection"]]],[11,"axis","","The reflexion axis.",207,[[["self"]],["vector"]]],[11,"reflect","","Applies the reflection to the columns of `rhs`.",207,[[["self"],["matrix"]]]],[11,"reflect_rows","","Applies the reflection to the rows of `rhs`.",207,[[["self"],["matrix"],["vector"]]]],[11,"clone","","",208,[[["self"]],["self"]]],[11,"fmt","","",208,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",208,[[["self"],["self"]],["bool"]]],[11,"new","","Creates a new orthographic projection matrix.",208,[[["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"from_matrix_unchecked","","Wraps the given matrix to interpret it as a 3D orthographic matrix.",208,[[["matrix4"]],["self"]]],[11,"from_fov","","Creates a new orthographic projection matrix from an aspect ratio and the vertical field of view.",208,[[["n"],["n"],["n"],["n"]],["self"]]],[11,"inverse","","Retrieves the inverse of the underlying homogeneous matrix.",208,[[["self"]],["matrix4"]]],[11,"to_homogeneous","","Computes the corresponding homogeneous matrix.",208,[[["self"]],["matrix4"]]],[11,"as_matrix","","A reference to the underlying homogeneous transformation matrix.",208,[[["self"]],["matrix4"]]],[11,"unwrap","","Retrieves the underlying homogeneous matrix.",208,[[["self"]],["matrix4"]]],[11,"left","","The smallest x-coordinate of the view cuboid.",208,[[["self"]],["n"]]],[11,"right","","The largest x-coordinate of the view cuboid.",208,[[["self"]],["n"]]],[11,"bottom","","The smallest y-coordinate of the view cuboid.",208,[[["self"]],["n"]]],[11,"top","","The largest y-coordinate of the view cuboid.",208,[[["self"]],["n"]]],[11,"znear","","The near plane offset of the view cuboid.",208,[[["self"]],["n"]]],[11,"zfar","","The far plane offset of the view cuboid.",208,[[["self"]],["n"]]],[11,"project_point","","Projects a point. Faster than matrix multiplication.",208,[[["self"],["point3"]],["point3"]]],[11,"unproject_point","","Un-projects a point. Faster than multiplication by the underlying matrix inverse.",208,[[["self"],["point3"]],["point3"]]],[11,"project_vector","","Projects a vector. Faster than matrix multiplication.",208,[[["self"],["vector"]],["vector3"]]],[11,"set_left","","Sets the smallest x-coordinate of the view cuboid.",208,[[["self"],["n"]]]],[11,"set_right","","Sets the largest x-coordinate of the view cuboid.",208,[[["self"],["n"]]]],[11,"set_bottom","","Sets the smallest y-coordinate of the view cuboid.",208,[[["self"],["n"]]]],[11,"set_top","","Sets the largest y-coordinate of the view cuboid.",208,[[["self"],["n"]]]],[11,"set_znear","","Sets the near plane offset of the view cuboid.",208,[[["self"],["n"]]]],[11,"set_zfar","","Sets the far plane offset of the view cuboid.",208,[[["self"],["n"]]]],[11,"set_left_and_right","","Sets the view cuboid coordinates along the `x` axis.",208,[[["self"],["n"],["n"]]]],[11,"set_bottom_and_top","","Sets the view cuboid coordinates along the `y` axis.",208,[[["self"],["n"],["n"]]]],[11,"set_znear_and_zfar","","Sets the near and far plane offsets of the view cuboid.",208,[[["self"],["n"],["n"]]]],[11,"clone","","",209,[[["self"]],["self"]]],[11,"fmt","","",209,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",209,[[["self"],["self"]],["bool"]]],[11,"new","","Creates a new perspective matrix from the aspect ratio, y field of view, and near/far planes.",209,[[["n"],["n"],["n"],["n"]],["self"]]],[11,"from_matrix_unchecked","","Wraps the given matrix to interpret it as a 3D perspective matrix.",209,[[["matrix4"]],["self"]]],[11,"inverse","","Retrieves the inverse of the underlying homogeneous matrix.",209,[[["self"]],["matrix4"]]],[11,"to_homogeneous","","Computes the corresponding homogeneous matrix.",209,[[["self"]],["matrix4"]]],[11,"as_matrix","","A reference to the underlying homogeneous transformation matrix.",209,[[["self"]],["matrix4"]]],[11,"unwrap","","Retrieves the underlying homogeneous matrix.",209,[[["self"]],["matrix4"]]],[11,"aspect","","Gets the `width / height` aspect ratio of the view frustrum.",209,[[["self"]],["n"]]],[11,"fovy","","Gets the y field of view of the view frustrum.",209,[[["self"]],["n"]]],[11,"znear","","Gets the near plane offset of the view frustrum.",209,[[["self"]],["n"]]],[11,"zfar","","Gets the far plane offset of the view frustrum.",209,[[["self"]],["n"]]],[11,"project_point","","Projects a point. Faster than matrix multiplication.",209,[[["self"],["point3"]],["point3"]]],[11,"unproject_point","","Un-projects a point. Faster than multiplication by the matrix inverse.",209,[[["self"],["point3"]],["point3"]]],[11,"project_vector","","Projects a vector. Faster than matrix multiplication.",209,[[["self"],["vector"]],["vector3"]]],[11,"set_aspect","","Updates this perspective matrix with a new `width / height` aspect ratio of the view frustrum.",209,[[["self"],["n"]]]],[11,"set_fovy","","Updates this perspective with a new y field of view of the view frustrum.",209,[[["self"],["n"]]]],[11,"set_znear","","Updates this perspective matrix with a new near plane offset of the view frustrum.",209,[[["self"],["n"]]]],[11,"set_zfar","","Updates this perspective matrix with a new far plane offset of the view frustrum.",209,[[["self"],["n"]]]],[11,"set_znear_and_zfar","","Updates this perspective matrix with new near and far plane offsets of the view frustrum.",209,[[["self"],["n"],["n"]]]],[6,"Point1","","A statically sized 1-dimensional column point.",N,N],[6,"Point2","","A statically sized 2-dimensional column point.",N,N],[6,"Point3","","A statically sized 3-dimensional column point.",N,N],[6,"Point4","","A statically sized 4-dimensional column point.",N,N],[6,"Point5","","A statically sized 5-dimensional column point.",N,N],[6,"Point6","","A statically sized 6-dimensional column point.",N,N],[6,"Rotation2","","A 2-dimensional rotation matrix.",N,N],[6,"Rotation3","","A 3-dimensional rotation matrix.",N,N],[6,"UnitQuaternion","","A unit quaternions. May be used to represent a rotation.",N,N],[6,"UnitComplex","","A complex number with a norm equal to 1.",N,N],[6,"Translation2","","A 2-dimensional translation.",N,N],[6,"Translation3","","A 3-dimensional translation.",N,N],[6,"Isometry2","","A 2-dimensional direct isometry using a unit complex number for its rotational part.",N,N],[6,"Isometry3","","A 3-dimensional direct isometry using a unit quaternion for its rotational part.",N,N],[6,"IsometryMatrix2","","A 2-dimensional direct isometry using a rotation matrix for its rotational part.",N,N],[6,"IsometryMatrix3","","A 3-dimensional direct isometry using a rotation matrix for its rotational part.",N,N],[6,"Similarity2","","A 2-dimensional similarity.",N,N],[6,"Similarity3","","A 3-dimensional similarity.",N,N],[6,"SimilarityMatrix2","","A 2-dimensional similarity using a rotation matrix for its rotation part.",N,N],[6,"SimilarityMatrix3","","A 3-dimensional similarity using a rotation matrix for its rotation part.",N,N],[6,"Transform2","","A 2D general transformation that may not be inversible. Stored as an homogeneous 3x3 matrix.",N,N],[6,"Projective2","","An inversible 2D general transformation. Stored as an homogeneous 3x3 matrix.",N,N],[6,"Affine2","","A 2D affine transformation. Stored as an homogeneous 3x3 matrix.",N,N],[6,"Transform3","","A 3D general transformation that may not be inversible. Stored as an homogeneous 4x4 matrix.",N,N],[6,"Projective3","","An inversible 3D general transformation. Stored as an homogeneous 4x4 matrix.",N,N],[6,"Affine3","","A 3D affine transformation. Stored as an homogeneous 4x4 matrix.",N,N],[8,"TCategory","","Trait implemented by phantom types identifying the projective transformation type.",N,N],[11,"has_normalizer","","Indicates whether a `Transform` with the category `Self` has a bottom-row different from `0 0 .. 1`.",210,[[],["bool"]]],[10,"check_homogeneous_invariants","","Checks that the given matrix is a valid homogeneous representation of an element of the category `Self`.",210,[[["matrixn"]],["bool"]]],[8,"TCategoryMul","","Traits that gives the `Transform` category that is compatible with the result of the multiplication of transformations with categories `Self` and `Other`.",N,N],[16,"Representative","","The transform category that results from the multiplication of a `Transform<Self>` to a `Transform<Other>`. This is usually equal to `Self` or `Other`, whichever is the most general category.",211,N],[8,"SuperTCategoryOf","","Indicates that `Self` is a more general `Transform` category than `Other`.",N,N],[8,"SubTCategoryOf","","Indicates that `Self` is a more specific `Transform` category than `Other`.",N,N],[0,"linalg","nalgebra","[Reexported at the root of this crate.] Factorization of real matrices.",N,N],[3,"PermutationSequence","nalgebra::linalg","A sequence of row or column permutations.",N,N],[3,"QR","","The QR decomposition of a general matrix.",N,N],[3,"Hessenberg","","Hessenberg decomposition of a general matrix.",N,N],[3,"Bidiagonal","","The bidiagonalization of a general matrix.",N,N],[12,"diagonal","","The diagonal elements of the decomposed matrix.",212,N],[12,"off_diagonal","","The off-diagonal elements of the decomposed matrix.",212,N],[3,"Cholesky","","The Cholesky decomposion of a symmetric-definite-positive matrix.",N,N],[3,"LU","","LU decomposition with partial (row) pivoting.",N,N],[3,"FullPivLU","","LU decomposition with full row and column pivoting.",N,N],[3,"RealSchur","","Real Schur decomposition of a square matrix.",N,N],[3,"SVD","","Singular Value Decomposition of a general matrix.",N,N],[12,"u","","The left-singular vectors `U` of this SVD.",213,N],[12,"v_t","","The right-singular vectors `V^t` of this SVD.",213,N],[12,"singular_values","","The singular values of this SVD.",213,N],[3,"SymmetricTridiagonal","","Tridiagonalization of a symmetric matrix.",N,N],[3,"SymmetricEigen","","Eigendecomposition of a symmetric matrix.",N,N],[12,"eigenvectors","","The eigenvectors of the decomposed matrix.",214,N],[12,"eigenvalues","","The unsorted eigenvalues of the decomposed matrix.",214,N],[5,"try_invert_to","","Performs a LU decomposition to overwrite `out` with the inverse of `matrix`.",N,[[["matrixn"],["matrix"]],["bool"]]],[5,"wilkinson_shift","","Computes the wilkinson shift, i.e., the 2x2 symmetric matrix eigenvalue to its tailing component `tnn`.",N,[[["n"],["n"],["n"]],["n"]]],[11,"solve_lower_triangular","nalgebra::linalg::solve","Computes the solution of the linear system `self . x = b` where `x` is the unknown and only the lower-triangular part of `self` (including the diagonal) is concidered not-zero.",215,[[["self"],["matrix"]],["option",["matrixmn"]]]],[11,"solve_upper_triangular","","Computes the solution of the linear system `self . x = b` where `x` is the unknown and only the upper-triangular part of `self` (including the diagonal) is concidered not-zero.",215,[[["self"],["matrix"]],["option",["matrixmn"]]]],[11,"solve_lower_triangular_mut","","Solves the linear system `self . x = b` where `x` is the unknown and only the lower-triangular part of `self` (including the diagonal) is concidered not-zero.",215,[[["self"],["matrix"]],["bool"]]],[11,"solve_lower_triangular_with_diag_mut","","Solves the linear system `self . x = b` where `x` is the unknown and only the lower-triangular part of `self` is concidered not-zero. The diagonal is never read as it is assumed to be equal to `diag`. Returns `false` and does not modify its inputs if `diag` is zero.",215,[[["self"],["matrix"],["n"]],["bool"]]],[11,"solve_upper_triangular_mut","","Solves the linear system `self . x = b` where `x` is the unknown and only the upper-triangular part of `self` (including the diagonal) is concidered not-zero.",215,[[["self"],["matrix"]],["bool"]]],[11,"tr_solve_lower_triangular","","Computes the solution of the linear system `self.transpose() . x = b` where `x` is the unknown and only the lower-triangular part of `self` (including the diagonal) is concidered not-zero.",215,[[["self"],["matrix"]],["option",["matrixmn"]]]],[11,"tr_solve_upper_triangular","","Computes the solution of the linear system `self.transpose() . x = b` where `x` is the unknown and only the upper-triangular part of `self` (including the diagonal) is concidered not-zero.",215,[[["self"],["matrix"]],["option",["matrixmn"]]]],[11,"tr_solve_lower_triangular_mut","","Solves the linear system `self.transpose() . x = b` where `x` is the unknown and only the lower-triangular part of `self` (including the diagonal) is concidered not-zero.",215,[[["self"],["matrix"]],["bool"]]],[11,"tr_solve_upper_triangular_mut","","Solves the linear system `self.transpose() . x = b` where `x` is the unknown and only the upper-triangular part of `self` (including the diagonal) is concidered not-zero.",215,[[["self"],["matrix"]],["bool"]]],[11,"determinant","nalgebra::linalg::determinant","Computes the matrix determinant.",215,[[["self"]],["n"]]],[11,"try_inverse","nalgebra::linalg::inverse","Attempts to invert this matrix.",215,[[["self"]],["option",["matrixn"]]]],[11,"try_inverse_mut","","Attempts to invert this matrix in-place. Returns `false` and leaves `self` untouched if inversion fails.",215,[[["self"]],["bool"]]],[0,"householder","nalgebra::linalg","Construction of householder elementary reflections.",N,N],[0,"givens","","Construction of givens rotations.",N,N],[5,"cancel_y","nalgebra::linalg::givens","Computes the rotation `R` required such that the `y` component of `R * v` is zero.",N,[[["vector"]],["option"]]],[5,"cancel_x","","Computes the rotation `R` required such that the `x` component of `R * v` is zero.",N,[[["vector"]],["option"]]],[0,"balancing","nalgebra::linalg","Functions for balancing a matrix.",N,N],[5,"balance_parlett_reinsch","nalgebra::linalg::balancing","Applies in-place a modified Parlett and Reinsch matrix balancing with 2-norm to the matrix `m` and returns the corresponding diagonal transformation.",N,[[["matrixn"]],["vectorn"]]],[5,"unbalance","","Computes in-place `D * m * D.inverse()`, where `D` is the matrix with diagonal `d`.",N,[[["matrixn"],["vectorn"]]]],[11,"clone","nalgebra::linalg","",216,[[["self"]],["permutationsequence"]]],[11,"fmt","","",216,[[["self"],["formatter"]],["result"]]],[11,"identity","","Creates a new statically-allocated sequence of `D` identity permutations.",216,[[],["self"]]],[11,"identity","","Creates a new dynamically-allocated sequence of `n` identity permutations.",216,[[["usize"]],["self"]]],[11,"identity_generic","","Creates a new sequence of D identity permutations.",216,[[["d"]],["self"]]],[11,"append_permutation","","Adds the interchange of the row (or column) `i` with the row (or column) `i2` to this sequence of permutations.",216,[[["self"],["usize"],["usize"]]]],[11,"permute_rows","","Applies this sequence of permutations to the rows of `rhs`.",216,[[["self"],["matrix"]]]],[11,"inv_permute_rows","","Applies this sequence of permutations in reverse to the rows of `rhs`.",216,[[["self"],["matrix"]]]],[11,"permute_columns","","Applies this sequence of permutations to the columns of `rhs`.",216,[[["self"],["matrix"]]]],[11,"inv_permute_columns","","Applies this sequence of permutations in reverse to the columns of `rhs`.",216,[[["self"],["matrix"]]]],[11,"len","","The number of non-identity permutations applied by this sequence.",216,[[["self"]],["usize"]]],[11,"determinant","","The determinant of the matrix corresponding to this permutation.",216,[[["self"]],["n"]]],[11,"clone","","",217,[[["self"]],["qr"]]],[11,"fmt","","",217,[[["self"],["formatter"]],["result"]]],[11,"new","","Computes the QR decomposition using householder reflections.",217,[[["matrixmn"]],["self"]]],[11,"r","","Retrieves the upper trapezoidal submatrix `R` of this decomposition.",217,[[["self"]],["matrixmn",["dimminimum"]]]],[11,"unpack_r","","Retrieves the upper trapezoidal submatrix `R` of this decomposition.",217,[[["self"]],["matrixmn",["dimminimum"]]]],[11,"q","","Computes the orthogonal matrix `Q` of this decomposition.",217,[[["self"]],["matrixmn",["dimminimum"]]]],[11,"unpack","","Unpacks this decomposition into its two matrix factors.",217,N],[11,"q_tr_mul","","Multiplies the provided matrix by the transpose of the `Q` matrix of this decomposition.",217,[[["self"],["matrix"]]]],[11,"solve","","Solves the linear system `self * x = b`, where `x` is the unknown to be determined.",217,[[["self"],["matrix"]],["option",["matrixmn"]]]],[11,"solve_mut","","Solves the linear system `self * x = b`, where `x` is the unknown to be determined.",217,[[["self"],["matrix"]],["bool"]]],[11,"try_inverse","","Computes the inverse of the decomposed matrix.",217,[[["self"]],["option",["matrixn"]]]],[11,"is_invertible","","Indicates if the decomposed matrix is invertible.",217,[[["self"]],["bool"]]],[11,"qr","nalgebra::base","Computes the QR decomposition of this matrix.",1,[[["self"]],["qr"]]],[11,"clone","nalgebra::linalg","",218,[[["self"]],["hessenberg"]]],[11,"fmt","","",218,[[["self"],["formatter"]],["result"]]],[11,"new","","Computes the Hessenberg decomposition using householder reflections.",218,[[["matrixn"]],["self"]]],[11,"new_with_workspace","","Computes the Hessenberg decomposition using householder reflections.",218,[[["matrixn"],["vectorn"]],["self"]]],[11,"unpack","","Retrieves `(q, h)` with `q` the orthogonal matrix of this decomposition and `h` the hessenberg matrix.",218,N],[11,"unpack_h","","Retrieves the upper trapezoidal submatrix `H` of this decomposition.",218,[[["self"]],["matrixn"]]],[11,"h","","Retrieves the upper trapezoidal submatrix `H` of this decomposition.",218,[[["self"]],["matrixn"]]],[11,"q","","Computes the orthogonal matrix `Q` of this decomposition.",218,[[["self"]],["matrixn"]]],[11,"hessenberg","nalgebra::linalg::hessenberg","Computes the Hessenberg decomposition of this matrix using householder reflections.",215,[[["self"]],["hessenberg"]]],[11,"clone","nalgebra::linalg","",212,[[["self"]],["bidiagonal"]]],[11,"fmt","","",212,[[["self"],["formatter"]],["result"]]],[11,"new","","Computes the Bidiagonal decomposition using householder reflections.",212,[[["matrixmn"]],["self"]]],[11,"is_upper_diagonal","","Indicates whether this decomposition contains an upper-diagonal matrix.",212,[[["self"]],["bool"]]],[11,"unpack","","Unpacks this decomposition into its three matrix factors `(U, D, V^t)`.",212,N],[11,"d","","Retrieves the upper trapezoidal submatrix `R` of this decomposition.",212,[[["self"]],["matrixn",["dimminimum"]]]],[11,"u","","Computes the orthogonal matrix `U` of this `U * D * V` decomposition.",212,[[["self"]],["matrixmn",["dimminimum"]]]],[11,"v_t","","Computes the orthogonal matrix `V` of this `U * D * V` decomposition.",212,[[["self"]],["matrixmn",["dimminimum"]]]],[11,"diagonal","","The diagonal part of this decomposed matrix.",212,[[["self"]],["vectorn"]]],[11,"off_diagonal","","The off-diagonal part of this decomposed matrix.",212,[[["self"]],["vectorn"]]],[11,"bidiagonalize","nalgebra::base","Computes the bidiagonalization using householder reflections.",1,[[["self"]],["bidiagonal"]]],[11,"clone","nalgebra::linalg","",219,[[["self"]],["symmetrictridiagonal"]]],[11,"fmt","","",219,[[["self"],["formatter"]],["result"]]],[11,"new","","Computes the tridiagonalization of the symmetric matrix `m`.",219,[[["matrixn"]],["self"]]],[11,"unpack","","Retrieve the orthogonal transformation, diagonal, and off diagonal elements of this decomposition.",219,N],[11,"unpack_tridiagonal","","Retrieve the diagonal, and off diagonal elements of this decomposition.",219,N],[11,"diagonal","","The diagonal components of this decomposition.",219,[[["self"]],["vectorn"]]],[11,"off_diagonal","","The off-diagonal components of this decomposition.",219,[[["self"]],["vectorn"]]],[11,"q","","Computes the orthogonal matrix `Q` of this decomposition.",219,[[["self"]],["matrixn"]]],[11,"recompose","","Recomputes the original symmetric matrix.",219,[[["self"]],["matrixn"]]],[11,"symmetric_tridiagonalize","nalgebra::linalg::symmetric_tridiagonal","Computes the tridiagonalization of this symmetric matrix.",215,[[["self"]],["symmetrictridiagonal"]]],[11,"clone","nalgebra::linalg","",220,[[["self"]],["cholesky"]]],[11,"fmt","","",220,[[["self"],["formatter"]],["result"]]],[11,"new","","Attempts to compute the Cholesky decomposition of `matrix`.",220,[[["matrixn"]],["option"]]],[11,"unpack","","Retrieves the lower-triangular factor of the Cholesky decomposition with its strictly upper-triangular part filled with zeros.",220,[[["self"]],["matrixn"]]],[11,"unpack_dirty","","Retrieves the lower-triangular factor of the Cholesky decomposition, without zeroing-out its strict upper-triangular part.",220,[[["self"]],["matrixn"]]],[11,"l","","Retrieves the lower-triangular factor of the Cholesky decomposition with its strictly uppen-triangular part filled with zeros.",220,[[["self"]],["matrixn"]]],[11,"l_dirty","","Retrieves the lower-triangular factor of the Cholesky decomposition, without zeroing-out its strict upper-triangular part.",220,[[["self"]],["matrixn"]]],[11,"solve_mut","","Solves the system `self * x = b` where `self` is the decomposed matrix and `x` the unknown.",220,[[["self"],["matrix"]]]],[11,"solve","","Returns the solution of the system `self * x = b` where `self` is the decomposed matrix and `x` the unknown.",220,[[["self"],["matrix"]],["matrixmn"]]],[11,"inverse","","Computes the inverse of the decomposed matrix.",220,[[["self"]],["matrixn"]]],[11,"cholesky","nalgebra::linalg::cholesky","Attempts to compute the Cholesky decomposition of this matrix.",215,[[["self"]],["option",["cholesky"]]]],[11,"clone","nalgebra::linalg","",221,[[["self"]],["lu"]]],[11,"fmt","","",221,[[["self"],["formatter"]],["result"]]],[11,"new","","Computes the LU decomposition with partial (row) pivoting of `matrix`.",221,[[["matrixmn"]],["self"]]],[11,"l","","The lower triangular matrix of this decomposition.",221,[[["self"]],["matrixmn",["dimminimum"]]]],[11,"l_unpack","","The lower triangular matrix of this decomposition.",221,[[["self"]],["matrixmn",["dimminimum"]]]],[11,"u","","The upper triangular matrix of this decomposition.",221,[[["self"]],["matrixmn",["dimminimum"]]]],[11,"p","","The row permutations of this decomposition.",221,[[["self"]],["permutationsequence"]]],[11,"unpack","","The row permutations and two triangular matrices of this decomposition: `(P, L, U)`.",221,N],[11,"solve","","Solves the linear system `self * x = b`, where `x` is the unknown to be determined.",221,[[["self"],["matrix"]],["option",["matrixmn"]]]],[11,"solve_mut","","Solves the linear system `self * x = b`, where `x` is the unknown to be determined.",221,[[["self"],["matrix"]],["bool"]]],[11,"try_inverse","","Computes the inverse of the decomposed matrix.",221,[[["self"]],["option",["matrixn"]]]],[11,"try_inverse_to","","Computes the inverse of the decomposed matrix and outputs the result to `out`.",221,[[["self"],["matrix"]],["bool"]]],[11,"determinant","","Computes the determinant of the decomposed matrix.",221,[[["self"]],["n"]]],[11,"is_invertible","","Indicates if the decomposed matrix is invertible.",221,[[["self"]],["bool"]]],[11,"lu","nalgebra::base","Computes the LU decomposition with partial (row) pivoting of `matrix`.",1,[[["self"]],["lu"]]],[11,"clone","nalgebra::linalg","",222,[[["self"]],["fullpivlu"]]],[11,"fmt","","",222,[[["self"],["formatter"]],["result"]]],[11,"new","","Computes the LU decomposition with full pivoting of `matrix`.",222,[[["matrixmn"]],["self"]]],[11,"l","","The lower triangular matrix of this decomposition.",222,[[["self"]],["matrixmn",["dimminimum"]]]],[11,"u","","The upper triangular matrix of this decomposition.",222,[[["self"]],["matrixmn",["dimminimum"]]]],[11,"p","","The row permutations of this decomposition.",222,[[["self"]],["permutationsequence"]]],[11,"q","","The column permutations of this decomposition.",222,[[["self"]],["permutationsequence"]]],[11,"unpack","","The two matrices of this decomposition and the row and column permutations: `(P, L, U, Q)`.",222,N],[11,"solve","","Solves the linear system `self * x = b`, where `x` is the unknown to be determined.",222,[[["self"],["matrix"]],["option",["matrixmn"]]]],[11,"solve_mut","","Solves the linear system `self * x = b`, where `x` is the unknown to be determined.",222,[[["self"],["matrix"]],["bool"]]],[11,"try_inverse","","Computes the inverse of the decomposed matrix.",222,[[["self"]],["option",["matrixn"]]]],[11,"is_invertible","","Indicates if the decomposed matrix is invertible.",222,[[["self"]],["bool"]]],[11,"determinant","","Computes the determinant of the decomposed matrix.",222,[[["self"]],["n"]]],[11,"full_piv_lu","nalgebra::base","Computes the LU decomposition with full pivoting of `matrix`.",1,[[["self"]],["fullpivlu"]]],[11,"clone","nalgebra::linalg","",223,[[["self"]],["realschur"]]],[11,"fmt","","",223,[[["self"],["formatter"]],["result"]]],[11,"new","","Computes the Schur decomposition of a square matrix.",223,[[["matrixn"]],["realschur"]]],[11,"try_new","","Attempts to compute the Schur decomposition of a square matrix.",223,[[["matrixn"],["n"],["usize"]],["option",["realschur"]]]],[11,"unpack","","Retrieves the unitary matrix `Q` and the upper-quasitriangular matrix `T` such that the decomposed matrix equals `Q * T * Q.transpose()`.",223,N],[11,"eigenvalues","","Computes the real eigenvalues of the decomposed matrix.",223,[[["self"]],["option",["vectorn"]]]],[11,"complex_eigenvalues","","Computes the complex eigenvalues of the decomposed matrix.",223,[[["self"]],["vectorn",["complex"]]]],[11,"real_schur","nalgebra::linalg::schur","Computes the Schur decomposition of a square matrix.",215,[[["self"]],["realschur"]]],[11,"try_real_schur","","Attempts to compute the Schur decomposition of a square matrix.",215,[[["self"],["n"],["usize"]],["option",["realschur"]]]],[11,"eigenvalues","","Computes the eigenvalues of this matrix.",215,[[["self"]],["option",["vectorn"]]]],[11,"complex_eigenvalues","","Computes the eigenvalues of this matrix.",215,[[["self"]],["vectorn",["complex"]]]],[11,"clone","nalgebra::linalg","",213,[[["self"]],["svd"]]],[11,"fmt","","",213,[[["self"],["formatter"]],["result"]]],[11,"new","","Computes the Singular Value Decomposition of `matrix` using implicit shift.",213,[[["matrixmn"],["bool"],["bool"]],["self"]]],[11,"try_new","","Attempts to compute the Singular Value Decomposition of `matrix` using implicit shift.",213,[[["matrixmn"],["bool"],["bool"],["n"],["usize"]],["option"]]],[11,"rank","","Computes the rank of the decomposed matrix, i.e., the number of singular values greater than `eps`.",213,[[["self"],["n"]],["usize"]]],[11,"recompose","","Rebuild the original matrix.",213,[[["self"]],["matrixmn"]]],[11,"pseudo_inverse","","Computes the pseudo-inverse of the decomposed matrix.",213,[[["self"],["n"]],["matrixmn"]]],[11,"solve","","Solves the system `self * x = b` where `self` is the decomposed matrix and `x` the unknown.",213,[[["self"],["matrix"],["n"]],["matrixmn"]]],[11,"svd","nalgebra::base","Computes the Singular Value Decomposition using implicit shift.",1,[[["self"],["bool"],["bool"]],["svd"]]],[11,"try_svd","","Attempts to compute the Singular Value Decomposition of `matrix` using implicit shift.",1,[[["self"],["bool"],["bool"],["n"],["usize"]],["option",["svd"]]]],[11,"singular_values","","Computes the singular values of this matrix.",1,[[["self"]],["vectorn",["dimminimum"]]]],[11,"rank","","Computes the rank of this matrix.",1,[[["self"],["n"]],["usize"]]],[11,"pseudo_inverse","","Computes the pseudo-inverse of this matrix.",1,[[["self"],["n"]],["matrixmn"]]],[11,"clone","nalgebra::linalg","",214,[[["self"]],["symmetriceigen"]]],[11,"fmt","","",214,[[["self"],["formatter"]],["result"]]],[11,"new","","Computes the eigendecomposition of the given symmetric matrix.",214,[[["matrixn"]],["self"]]],[11,"try_new","","Computes the eigendecomposition of the given symmetric matrix with user-specified convergence parameters.",214,[[["matrixn"],["n"],["usize"]],["option"]]],[11,"recompose","","Rebuild the original matrix.",214,[[["self"]],["matrixn"]]],[11,"symmetric_eigen","nalgebra::linalg::symmetric_eigen","Computes the eigendecomposition of this symmetric matrix.",215,[[["self"]],["symmetriceigen"]]],[11,"try_symmetric_eigen","","Computes the eigendecomposition of the given symmetric matrix with user-specified convergence parameters.",215,[[["self"],["n"],["usize"]],["option",["symmetriceigen"]]]],[11,"symmetric_eigenvalues","","Computes the eigenvalues of this symmetric matrix.",215,[[["self"]],["vectorn"]]],[11,"new","nalgebra","Creates a new identity element.",224,[[],["id"]]],[11,"join","","",224,[[["self"],["id"]],["id"]]],[11,"mul","","",224,[[["self"],["id",["multiplicative"]]],["id",["multiplicative"]]]],[11,"div","","",224,[[["self"],["id",["multiplicative"]]],["id",["multiplicative"]]]],[11,"default_max_relative","","",224,N],[11,"relative_eq","","",224,N],[11,"eq","","",224,[[["self"],["id"]],["bool"]]],[11,"add","","",224,[[["self"],["id",["additive"]]],["id",["additive"]]]],[11,"default_epsilon","","",224,N],[11,"abs_diff_eq","","",224,N],[11,"inverse","","",224,[[["self"]],["id"]]],[11,"inverse_mut","","",224,N],[11,"add_assign","","",224,N],[11,"meet","","",224,[[["self"],["id"]],["id"]]],[11,"zero","","",224,[[],["id",["additive"]]]],[11,"is_zero","","",224,[[["self"]],["bool"]]],[11,"one","","",224,[[],["id",["multiplicative"]]]],[11,"clone","","",224,[[["self"]],["id"]]],[11,"fmt","","",224,[[["self"],["formatter"]],["result",["error"]]]],[11,"translation","","",224,N],[11,"rotation","","",224,N],[11,"scaling","","",224,N],[11,"decompose","","",224,N],[11,"append_translation","","",224,N],[11,"prepend_translation","","",224,N],[11,"append_rotation","","",224,N],[11,"prepend_rotation","","",224,N],[11,"append_scaling","","",224,N],[11,"prepend_scaling","","",224,N],[11,"inverse_transform_point","","",224,[[["self"],["e"]],["e"]]],[11,"inverse_transform_vector","","",224,N],[11,"transform_point","","",224,[[["self"],["e"]],["e"]]],[11,"transform_vector","","",224,N],[11,"operate","","",224,[[["self"],["id"]],["id"]]],[11,"powf","","",224,N],[11,"rotation_between","","",224,N],[11,"scaled_rotation_between","","",224,N],[11,"partial_cmp","","",224,[[["self"],["id"]],["option",["ordering"]]]],[11,"identity","","",224,[[],["id"]]],[11,"fmt","","",224,[[["self"],["formatter"]],["result",["error"]]]],[11,"div_assign","","",224,N],[11,"mul_assign","","",224,N],[11,"to_superset","","",224,[[["self"]],["t"]]],[11,"is_in_subset","","",224,[[["t"]],["bool"]]],[11,"from_superset_unchecked","","",224,[[["t"]],["id"]]],[11,"default_max_ulps","","",224,[[],["u32"]]],[11,"ulps_eq","","",224,N],[11,"to_vector","","",224,N],[11,"from_vector","","",224,N],[11,"imax","nalgebra::base","Computes the index of the vector component with the largest value.",225,[[["self"]],["usize"]]],[11,"iamax","","Computes the index of the vector component with the largest absolute value.",225,[[["self"]],["usize"]]],[11,"imin","","Computes the index of the vector component with the smallest value.",225,[[["self"]],["usize"]]],[11,"iamin","","Computes the index of the vector component with the smallest absolute value.",225,[[["self"]],["usize"]]],[11,"axpy","","Computes `self = a * x + b * self`.",225,[[["self"],["n"],["vector"],["n"]]]],[11,"gemv","","Computes `self = alpha * a * x + beta * self`, where `a` is a matrix, `x` a vector, and `alpha, beta` two scalars.",225,[[["self"],["n"],["matrix"],["vector"],["n"]]]],[11,"gemv_symm","","Computes `self = alpha * a * x + beta * self`, where `a` is a symmetric matrix, `x` a vector, and `alpha, beta` two scalars.",225,[[["self"],["n"],["squarematrix"],["vector"],["n"]]]],[11,"gemv_tr","","Computes `self = alpha * a.transpose() * x + beta * self`, where `a` is a matrix, `x` a vector, and `alpha, beta` two scalars.",225,[[["self"],["n"],["matrix"],["vector"],["n"]]]],[11,"quadform_tr_with_workspace","","Computes the quadratic form `self = alpha * lhs * mid * lhs.transpose() + beta * self`.",215,[[["self"],["vector"],["n"],["matrix"],["squarematrix"],["n"]]]],[11,"quadform_tr","","Computes the quadratic form `self = alpha * lhs * mid * lhs.transpose() + beta * self`.",215,[[["self"],["n"],["matrix"],["squarematrix"],["n"]]]],[11,"quadform_with_workspace","","Computes the quadratic form `self = alpha * rhs.transpose() * mid * rhs + beta * self`.",215,[[["self"],["vector"],["n"],["squarematrix"],["matrix"],["n"]]]],[11,"quadform","","Computes the quadratic form `self = alpha * rhs.transpose() * mid * rhs + beta * self`.",215,[[["self"],["n"],["squarematrix"],["matrix"],["n"]]]],[11,"sum","","",202,[[["i"]],["matrixmn"]]],[11,"sum","","",202,[[["i"]],["matrixmn"]]],[11,"product","","",226,[[["i"]],["matrixn"]]],[11,"product","","",226,[[["i"]],["matrixn"]]],[11,"new_scaling","","Creates a new homogeneous matrix that applies the same scaling factor on each dimension.",226,[[["n"]],["self"]]],[11,"new_nonuniform_scaling","","Creates a new homogeneous matrix that applies a distinct scaling factor for each dimension.",226,[[["vector"]],["self"]]],[11,"new_translation","","Creates a new homogeneous matrix that applies a pure translation.",226,[[["vector"]],["self"]]],[11,"new_rotation","","Builds a 2 dimensional homogeneous rotation matrix from an angle in radian.",227,[[["n"]],["self"]]],[11,"new_rotation","","Builds a 3D homogeneous rotation matrix from an axis and an angle (multiplied together).",228,[[["vector3"]],["self"]]],[11,"new_rotation_wrt_point","","Builds a 3D homogeneous rotation matrix from an axis and an angle (multiplied together).",228,[[["vector3"],["point3"]],["self"]]],[11,"from_scaled_axis","","Builds a 3D homogeneous rotation matrix from an axis and an angle (multiplied together).",228,[[["vector3"]],["self"]]],[11,"from_euler_angles","","Creates a new rotation from Euler angles.",228,[[["n"],["n"],["n"]],["self"]]],[11,"from_axis_angle","","Builds a 3D homogeneous rotation matrix from an axis and a rotation angle.",228,[[["unit"],["n"]],["self"]]],[11,"new_orthographic","","Creates a new homogeneous matrix for an orthographic projection.",228,[[["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new_perspective","","Creates a new homogeneous matrix for a perspective projection.",228,[[["n"],["n"],["n"],["n"]],["self"]]],[11,"new_observer_frame","","Creates an isometry that corresponds to the local frame of an observer standing at the point `eye` and looking toward `target`.",228,[[["point3"],["point3"],["vector3"]],["self"]]],[11,"look_at_rh","","Builds a right-handed look-at view matrix.",228,[[["point3"],["point3"],["vector3"]],["self"]]],[11,"look_at_lh","","Builds a left-handed look-at view matrix.",228,[[["point3"],["point3"],["vector3"]],["self"]]],[11,"append_scaling","","Computes the transformation equal to `self` followed by an uniform scaling factor.",215,[[["self"],["n"]],["matrixn"]]],[11,"prepend_scaling","","Computes the transformation equal to an uniform scaling factor followed by `self`.",215,[[["self"],["n"]],["matrixn"]]],[11,"append_nonuniform_scaling","","Computes the transformation equal to `self` followed by a non-uniform scaling factor.",215,[[["self"],["vector"]],["matrixn"]]],[11,"prepend_nonuniform_scaling","","Computes the transformation equal to a non-uniform scaling factor followed by `self`.",215,[[["self"],["vector"]],["matrixn"]]],[11,"append_translation","","Computes the transformation equal to `self` followed by a translation.",215,[[["self"],["vector"]],["matrixn"]]],[11,"prepend_translation","","Computes the transformation equal to a translation followed by `self`.",215,[[["self"],["vector"]],["matrixn"]]],[11,"append_scaling_mut","","Computes in-place the transformation equal to `self` followed by an uniform scaling factor.",215,[[["self"],["n"]]]],[11,"prepend_scaling_mut","","Computes in-place the transformation equal to an uniform scaling factor followed by `self`.",215,[[["self"],["n"]]]],[11,"append_nonuniform_scaling_mut","","Computes in-place the transformation equal to `self` followed by a non-uniform scaling factor.",215,[[["self"],["vector"]]]],[11,"prepend_nonuniform_scaling_mut","","Computes in-place the transformation equal to a non-uniform scaling factor followed by `self`.",215,[[["self"],["vector"]]]],[11,"append_translation_mut","","Computes the transformation equal to `self` followed by a translation.",215,[[["self"],["vector"]]]],[11,"prepend_translation_mut","","Computes the transformation equal to a translation followed by `self`.",215,[[["self"],["vector"]]]],[11,"transform_vector","","",226,[[["self"],["vectorn"]],["vectorn",["dimnamediff"]]]],[11,"transform_point","","",226,[[["self"],["point"]],["point",["dimnamediff"]]]],[11,"new_uninitialized_generic","","Creates a new uninitialized matrix. If the matrix has a compile-time dimension, this panics if `nrows != R::to_usize()` or `ncols != C::to_usize()`.",202,[[["r"],["c"]],["self"]]],[11,"from_element_generic","","Creates a matrix with all its elements set to `elem`.",202,[[["r"],["c"],["n"]],["self"]]],[11,"repeat_generic","","Creates a matrix with all its elements set to `elem`.",202,[[["r"],["c"],["n"]],["self"]]],[11,"zeros_generic","","Creates a matrix with all its elements set to 0.",202,[[["r"],["c"]],["self"]]],[11,"from_iterator_generic","","Creates a matrix with all its elements filled by an iterator.",202,[[["r"],["c"],["i"]],["self"]]],[11,"from_row_slice_generic","","Creates a matrix with its elements filled with the components provided by a slice in row-major order.",202,N],[11,"from_column_slice_generic","","Creates a matrix with its elements filled with the components provided by a slice. The components must have the same layout as the matrix data storage (i.e. column-major).",202,N],[11,"from_fn_generic","","Creates a matrix filled with the results of a function applied to each of its component coordinates.",202,[[["r"],["c"],["f"]],["self"]]],[11,"identity_generic","","Creates a new identity matrix.",202,[[["r"],["c"]],["self"]]],[11,"from_diagonal_element_generic","","Creates a new matrix with its diagonal filled with copies of `elt`.",202,[[["r"],["c"],["n"]],["self"]]],[11,"from_partial_diagonal_generic","","Creates a new matrix that may be rectangular. The first `elts.len()` diagonal elements are filled with the content of `elts`. Others are set to 0.",202,N],[11,"from_rows","","Builds a new matrix from its rows.",202,N],[11,"from_columns","","Builds a new matrix from its columns.",202,N],[11,"new_random_generic","","Creates a matrix filled with random values.",202,[[["r"],["c"]],["self"]]],[11,"from_distribution_generic","","Creates a matrix filled with random values from the given distribution.",202,[[["r"],["c"],["distr"],["g"]],["self"]]],[11,"from_diagonal","","Creates a square matrix with its diagonal set to `diag` and all other entries set to 0.",226,[[["vector"]],["self"]]],[11,"new_uninitialized","","Creates a new uninitialized matrix.",202,[[],["self"]]],[11,"from_element","","Creates a matrix with all its elements set to `elem`.",202,[[["n"]],["self"]]],[11,"repeat","","Creates a matrix with all its elements set to `elem`.",202,[[["n"]],["self"]]],[11,"zeros","","Creates a matrix with all its elements set to `0`.",202,[[],["self"]]],[11,"from_iterator","","Creates a matrix with all its elements filled by an iterator.",202,[[["i"]],["self"]]],[11,"from_row_slice","","Creates a matrix with its elements filled with the components provided by a slice in row-major order.",202,N],[11,"from_column_slice","","Creates a matrix with its elements filled with the components provided by a slice in column-major order.",202,N],[11,"from_fn","","Creates a matrix filled with the results of a function applied to each of its component coordinates.",202,[[["f"]],["self"]]],[11,"identity","","Creates an identity matrix. If the matrix is not square, the largest square submatrix (starting at the first row and column) is set to the identity while all other entries are set to zero.",202,[[],["self"]]],[11,"from_diagonal_element","","Creates a matrix filled with its diagonal filled with `elt` and all other components set to zero.",202,[[["n"]],["self"]]],[11,"from_partial_diagonal","","Creates a new matrix that may be rectangular. The first `elts.len()` diagonal elements are filled with the content of `elts`. Others are set to 0.",202,N],[11,"from_distribution","","Creates a matrix filled with random values from the given distribution.",202,[[["distr"],["g"]],["self"]]],[11,"new_random","","Creates a matrix filled with random values.",202,[[],["self"]]],[11,"new_uninitialized","","Creates a new uninitialized matrix.",202,[[["usize"]],["self"]]],[11,"from_element","","Creates a matrix with all its elements set to `elem`.",202,[[["usize"],["n"]],["self"]]],[11,"repeat","","Creates a matrix with all its elements set to `elem`.",202,[[["usize"],["n"]],["self"]]],[11,"zeros","","Creates a matrix with all its elements set to `0`.",202,[[["usize"]],["self"]]],[11,"from_iterator","","Creates a matrix with all its elements filled by an iterator.",202,[[["usize"],["i"]],["self"]]],[11,"from_row_slice","","Creates a matrix with its elements filled with the components provided by a slice in row-major order.",202,N],[11,"from_column_slice","","Creates a matrix with its elements filled with the components provided by a slice in column-major order.",202,N],[11,"from_fn","","Creates a matrix filled with the results of a function applied to each of its component coordinates.",202,[[["usize"],["f"]],["self"]]],[11,"identity","","Creates an identity matrix. If the matrix is not square, the largest square submatrix (starting at the first row and column) is set to the identity while all other entries are set to zero.",202,[[["usize"]],["self"]]],[11,"from_diagonal_element","","Creates a matrix filled with its diagonal filled with `elt` and all other components set to zero.",202,[[["usize"],["n"]],["self"]]],[11,"from_partial_diagonal","","Creates a new matrix that may be rectangular. The first `elts.len()` diagonal elements are filled with the content of `elts`. Others are set to 0.",202,N],[11,"from_distribution","","Creates a matrix filled with random values from the given distribution.",202,[[["usize"],["distr"],["g"]],["self"]]],[11,"new_random","","Creates a matrix filled with random values.",202,[[["usize"]],["self"]]],[11,"new_uninitialized","","Creates a new uninitialized matrix.",202,[[["usize"]],["self"]]],[11,"from_element","","Creates a matrix with all its elements set to `elem`.",202,[[["usize"],["n"]],["self"]]],[11,"repeat","","Creates a matrix with all its elements set to `elem`.",202,[[["usize"],["n"]],["self"]]],[11,"zeros","","Creates a matrix with all its elements set to `0`.",202,[[["usize"]],["self"]]],[11,"from_iterator","","Creates a matrix with all its elements filled by an iterator.",202,[[["usize"],["i"]],["self"]]],[11,"from_row_slice","","Creates a matrix with its elements filled with the components provided by a slice in row-major order.",202,N],[11,"from_column_slice","","Creates a matrix with its elements filled with the components provided by a slice in column-major order.",202,N],[11,"from_fn","","Creates a matrix filled with the results of a function applied to each of its component coordinates.",202,[[["usize"],["f"]],["self"]]],[11,"identity","","Creates an identity matrix. If the matrix is not square, the largest square submatrix (starting at the first row and column) is set to the identity while all other entries are set to zero.",202,[[["usize"]],["self"]]],[11,"from_diagonal_element","","Creates a matrix filled with its diagonal filled with `elt` and all other components set to zero.",202,[[["usize"],["n"]],["self"]]],[11,"from_partial_diagonal","","Creates a new matrix that may be rectangular. The first `elts.len()` diagonal elements are filled with the content of `elts`. Others are set to 0.",202,N],[11,"from_distribution","","Creates a matrix filled with random values from the given distribution.",202,[[["usize"],["distr"],["g"]],["self"]]],[11,"new_random","","Creates a matrix filled with random values.",202,[[["usize"]],["self"]]],[11,"new_uninitialized","","Creates a new uninitialized matrix.",202,[[["usize"],["usize"]],["self"]]],[11,"from_element","","Creates a matrix with all its elements set to `elem`.",202,[[["usize"],["usize"],["n"]],["self"]]],[11,"repeat","","Creates a matrix with all its elements set to `elem`.",202,[[["usize"],["usize"],["n"]],["self"]]],[11,"zeros","","Creates a matrix with all its elements set to `0`.",202,[[["usize"],["usize"]],["self"]]],[11,"from_iterator","","Creates a matrix with all its elements filled by an iterator.",202,[[["usize"],["usize"],["i"]],["self"]]],[11,"from_row_slice","","Creates a matrix with its elements filled with the components provided by a slice in row-major order.",202,N],[11,"from_column_slice","","Creates a matrix with its elements filled with the components provided by a slice in column-major order.",202,N],[11,"from_fn","","Creates a matrix filled with the results of a function applied to each of its component coordinates.",202,[[["usize"],["usize"],["f"]],["self"]]],[11,"identity","","Creates an identity matrix. If the matrix is not square, the largest square submatrix (starting at the first row and column) is set to the identity while all other entries are set to zero.",202,[[["usize"],["usize"]],["self"]]],[11,"from_diagonal_element","","Creates a matrix filled with its diagonal filled with `elt` and all other components set to zero.",202,[[["usize"],["usize"],["n"]],["self"]]],[11,"from_partial_diagonal","","Creates a new matrix that may be rectangular. The first `elts.len()` diagonal elements are filled with the content of `elts`. Others are set to 0.",202,N],[11,"from_distribution","","Creates a matrix filled with random values from the given distribution.",202,[[["usize"],["usize"],["distr"],["g"]],["self"]]],[11,"new_random","","Creates a matrix filled with random values.",202,[[["usize"],["usize"]],["self"]]],[11,"zero","","",202,[[],["self"]]],[11,"is_zero","","",202,[[["self"]],["bool"]]],[11,"one","","",226,[[],["self"]]],[11,"max_value","","",202,[[],["self"]]],[11,"min_value","","",202,[[],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"new","","Initializes this matrix from its components.",202,[[["n"],["n"],["n"],["n"],["n"],["n"]],["self"]]],[11,"x","","The column vector with a 1 as its first component, and zero elsewhere.",229,[[],["self"]]],[11,"y","","The column vector with a 1 as its second component, and zero elsewhere.",229,[[],["self"]]],[11,"z","","The column vector with a 1 as its third component, and zero elsewhere.",229,[[],["self"]]],[11,"w","","The column vector with a 1 as its fourth component, and zero elsewhere.",229,[[],["self"]]],[11,"a","","The column vector with a 1 as its fifth component, and zero elsewhere.",229,[[],["self"]]],[11,"b","","The column vector with a 1 as its sixth component, and zero elsewhere.",229,[[],["self"]]],[11,"x_axis","","The unit column vector with a 1 as its first component, and zero elsewhere.",229,[[],["unit"]]],[11,"y_axis","","The unit column vector with a 1 as its second component, and zero elsewhere.",229,[[],["unit"]]],[11,"z_axis","","The unit column vector with a 1 as its third component, and zero elsewhere.",229,[[],["unit"]]],[11,"w_axis","","The unit column vector with a 1 as its fourth component, and zero elsewhere.",229,[[],["unit"]]],[11,"a_axis","","The unit column vector with a 1 as its fifth component, and zero elsewhere.",229,[[],["unit"]]],[11,"b_axis","","The unit column vector with a 1 as its sixth component, and zero elsewhere.",229,[[],["unit"]]],[11,"from_slice_with_strides_generic_unchecked","","Creates, without bound-checking, a matrix slice from an array and with dimensions and strides specified by generic types instances.",230,N],[11,"from_slice_with_strides_generic","","Creates a matrix slice from an array and with dimensions and strides specified by generic types instances.",230,N],[11,"from_slice_with_strides_generic_unchecked","","Creates, without bound-checking, a mutable matrix slice from an array and with dimensions and strides specified by generic types instances.",231,N],[11,"from_slice_with_strides_generic","","Creates a mutable matrix slice from an array and with dimensions and strides specified by generic types instances.",231,N],[11,"from_slice_generic_unchecked","","Creates, without bound-checking, a matrix slice from an array and with dimensions specified by generic types instances.",230,N],[11,"from_slice_generic","","Creates a matrix slice from an array and with dimensions and strides specified by generic types instances.",230,N],[11,"from_slice_generic_unchecked","","Creates, without bound-checking, a mutable matrix slice from an array and with dimensions specified by generic types instances.",231,N],[11,"from_slice_generic","","Creates a mutable matrix slice from an array and with dimensions and strides specified by generic types instances.",231,N],[11,"from_slice","","Creates a new matrix slice from the given data array.",230,N],[11,"from_slice_unchecked","","Creates, without bound checking, a new matrix slice from the given data array.",230,N],[11,"from_slice_with_strides","","Creates a new matrix slice with the specified strides from the given data array.",230,N],[11,"from_slice_with_strides_unchecked","","Creates, without bound checking, a new matrix slice with the specified strides from the given data array.",230,N],[11,"from_slice","","Creates a new matrix slice from the given data array.",230,N],[11,"from_slice_unchecked","","Creates, without bound checking, a new matrix slice from the given data array.",230,N],[11,"from_slice_with_strides","","Creates a new matrix slice with the specified strides from the given data array.",230,N],[11,"from_slice_with_strides_unchecked","","Creates, without bound checking, a new matrix slice with the specified strides from the given data array.",230,N],[11,"from_slice","","Creates a new matrix slice from the given data array.",230,N],[11,"from_slice_unchecked","","Creates, without bound checking, a new matrix slice from the given data array.",230,N],[11,"from_slice_with_strides","","Creates a new matrix slice with the specified strides from the given data array.",230,N],[11,"from_slice_with_strides_unchecked","","Creates, without bound checking, a new matrix slice with the specified strides from the given data array.",230,N],[11,"from_slice","","Creates a new matrix slice from the given data array.",230,N],[11,"from_slice_unchecked","","Creates, without bound checking, a new matrix slice from the given data array.",230,N],[11,"from_slice_with_strides","","Creates a new matrix slice with the specified strides from the given data array.",230,N],[11,"from_slice_with_strides_unchecked","","Creates, without bound checking, a new matrix slice with the specified strides from the given data array.",230,N],[11,"from_slice","","Creates a new mutable matrix slice from the given data array.",231,N],[11,"from_slice_unchecked","","Creates, without bound checking, a new mutable matrix slice from the given data array.",231,N],[11,"from_slice_with_strides_mut","","Creates a new mutable matrix slice with the specified strides from the given data array.",231,N],[11,"from_slice_with_strides_unchecked","","Creates, without bound checking, a new mutable matrix slice with the specified strides from the given data array.",231,N],[11,"from_slice","","Creates a new mutable matrix slice from the given data array.",231,N],[11,"from_slice_unchecked","","Creates, without bound checking, a new mutable matrix slice from the given data array.",231,N],[11,"from_slice_with_strides_mut","","Creates a new mutable matrix slice with the specified strides from the given data array.",231,N],[11,"from_slice_with_strides_unchecked","","Creates, without bound checking, a new mutable matrix slice with the specified strides from the given data array.",231,N],[11,"from_slice","","Creates a new mutable matrix slice from the given data array.",231,N],[11,"from_slice_unchecked","","Creates, without bound checking, a new mutable matrix slice from the given data array.",231,N],[11,"from_slice_with_strides_mut","","Creates a new mutable matrix slice with the specified strides from the given data array.",231,N],[11,"from_slice_with_strides_unchecked","","Creates, without bound checking, a new mutable matrix slice with the specified strides from the given data array.",231,N],[11,"from_slice","","Creates a new mutable matrix slice from the given data array.",231,N],[11,"from_slice_unchecked","","Creates, without bound checking, a new mutable matrix slice from the given data array.",231,N],[11,"from_slice_with_strides_mut","","Creates a new mutable matrix slice with the specified strides from the given data array.",231,N],[11,"from_slice_with_strides_unchecked","","Creates, without bound checking, a new mutable matrix slice with the specified strides from the given data array.",231,N],[11,"to_superset","","",202,[[["self"]],["matrixmn"]]],[11,"is_in_subset","","",202,[[["matrixmn"]],["bool"]]],[11,"from_superset_unchecked","","",202,[[["matrixmn"]],["self"]]],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"from","","",202,N],[11,"vget_unchecked","","Gets a reference to the i-th element of this column vector without bound checking.",225,[[["self"],["usize"]],["n"]]],[11,"vget_unchecked_mut","","Gets a mutable reference to the i-th element of this column vector without bound checking.",225,[[["self"],["usize"]],["n"]]],[11,"diagonal","","Creates a square matrix with its diagonal set to `diag` and all other entries set to 0.",215,[[["self"]],["vectorn"]]],[11,"trace","","Computes a trace of a square matrix, i.e., the sum of its diagonal elements.",215,[[["self"]],["n"]]],[11,"to_homogeneous","","Computes the coordinates in projective space of this vector, i.e., appends a `0` to its coordinates.",225,[[["self"]],["vectorn",["dimsum"]]]],[11,"from_homogeneous","","Constructs a vector from coordinates in projective space, i.e., removes a `0` at the end of `self`. Returns `None` if this last component is not zero.",225,[[["vector",["dimsum"]]],["option",["vectorn"]]]],[11,"cross_matrix","","Computes the matrix `M` such that for all vector `v` we have `M * v == self.cross(&v)`.",225,[[["self"]],["matrixn",["u3"]]]],[11,"identity","","",202,[[],["self"]]],[11,"operate","","",202,[[["self"],["self"]],["self"]]],[11,"inverse","","",202,[[["self"]],["matrixmn"]]],[11,"inverse_mut","","",202,[[["self"]]]],[11,"multiply_by","","",202,[[["self"],["n"]],["self"]]],[11,"dimension","","",202,[[],["usize"]]],[11,"canonical_basis_element","","",202,[[["usize"]],["self"]]],[11,"dot","","",202,[[["self"],["self"]],["n"]]],[11,"component_unchecked","","",202,[[["self"],["usize"]],["n"]]],[11,"component_unchecked_mut","","",202,[[["self"],["usize"]],["n"]]],[11,"norm_squared","","",202,[[["self"]],["n"]]],[11,"norm","","",202,[[["self"]],["n"]]],[11,"normalize","","",202,[[["self"]],["self"]]],[11,"normalize_mut","","",202,[[["self"]],["n"]]],[11,"try_normalize","","",202,[[["self"],["n"]],["option"]]],[11,"try_normalize_mut","","",202,[[["self"],["n"]],["option"]]],[11,"angle","","",202,[[["self"],["self"]],["n"]]],[11,"inner_product","","",202,[[["self"],["self"]],["n"]]],[11,"orthonormalize","","",202,N],[11,"orthonormal_subspace_basis","","",202,N],[11,"identity","","",226,[[],["self"]]],[11,"operate","","",226,[[["self"],["self"]],["self"]]],[11,"meet","","",202,[[["self"],["self"]],["self"]]],[11,"join","","",202,[[["self"],["self"]],["self"]]],[11,"meet_join","","",202,N],[11,"is_special_orthogonal","","Checks that this matrix is orthogonal and has a determinant equal to 1.",215,[[["self"],["n"]],["bool"]]],[11,"is_invertible","","Returns `true` if this matrix is invertible.",215,[[["self"]],["bool"]]],[11,"is","","Tests if `Self` the the same as the type `T`",194,[[],["bool"]]],[11,"to_superset","nalgebra::geometry","",232,[[["self"]],["unitquaternion"]]],[11,"is_in_subset","","",232,[[["unitquaternion"]],["bool"]]],[11,"from_superset_unchecked","","",232,[[["unitquaternion"]],["self"]]],[11,"to_superset","","",233,[[["self"]],["unitcomplex"]]],[11,"is_in_subset","","",233,[[["unitcomplex"]],["bool"]]],[11,"from_superset_unchecked","","",233,[[["unitcomplex"]],["self"]]],[11,"new","","Builds a 2 dimensional rotation matrix from an angle in radian.",233,[[["n"]],["self"]]],[11,"from_scaled_axis","","Builds a 2 dimensional rotation matrix from an angle in radian wrapped in a 1-dimensional vector.",233,[[["vector",["u1"]]],["self"]]],[11,"rotation_between","","The rotation matrix required to align `a` and `b` but with its angl.",233,[[["vector"],["vector"]],["self"]]],[11,"scaled_rotation_between","","The smallest rotation needed to make `a` and `b` collinear and point toward the same direction, raised to the power `s`.",233,[[["vector"],["vector"],["n"]],["self"]]],[11,"angle","","The rotation angle.",233,[[["self"]],["n"]]],[11,"angle_to","","The rotation angle needed to make `self` and `other` coincide.",233,[[["self"],["rotation2"]],["n"]]],[11,"rotation_to","","The rotation matrix needed to make `self` and `other` coincide.",233,[[["self"],["rotation2"]],["rotation2"]]],[11,"powf","","Raise the quaternion to a given floating power, i.e., returns the rotation with the angle of `self` multiplied by `n`.",233,[[["self"],["n"]],["rotation2"]]],[11,"scaled_axis","","The rotation angle returned as a 1-dimensional vector.",233,[[["self"]],["vectorn",["u1"]]]],[11,"new","","Builds a 3 dimensional rotation matrix from an axis and an angle.",232,[[["vector",["u3"]]],["self"]]],[11,"from_scaled_axis","","Builds a 3D rotation matrix from an axis scaled by the rotation angle.",232,[[["vector",["u3"]]],["self"]]],[11,"from_axis_angle","","Builds a 3D rotation matrix from an axis and a rotation angle.",232,[[["unit"],["n"]],["self"]]],[11,"from_euler_angles","","Creates a new rotation from Euler angles.",232,[[["n"],["n"],["n"]],["self"]]],[11,"to_euler_angles","","Creates Euler angles from a rotation.",232,N],[11,"new_observer_frame","","Creates a rotation that corresponds to the local frame of an observer standing at the origin and looking toward `dir`.",232,[[["vector"],["vector"]],["self"]]],[11,"look_at_rh","","Builds a right-handed look-at view matrix without translation.",232,[[["vector"],["vector"]],["self"]]],[11,"look_at_lh","","Builds a left-handed look-at view matrix without translation.",232,[[["vector"],["vector"]],["self"]]],[11,"rotation_between","","The rotation matrix required to align `a` and `b` but with its angl.",232,[[["vector"],["vector"]],["option"]]],[11,"scaled_rotation_between","","The smallest rotation needed to make `a` and `b` collinear and point toward the same direction, raised to the power `s`.",232,[[["vector"],["vector"],["n"]],["option"]]],[11,"angle","","The rotation angle.",232,[[["self"]],["n"]]],[11,"axis","","The rotation axis. Returns `None` if the rotation angle is zero or PI.",232,[[["self"]],["option",["unit"]]]],[11,"scaled_axis","","The rotation axis multiplied by the rotation angle.",232,[[["self"]],["vector3"]]],[11,"angle_to","","The rotation angle needed to make `self` and `other` coincide.",232,[[["self"],["rotation3"]],["n"]]],[11,"rotation_to","","The rotation matrix needed to make `self` and `other` coincide.",232,[[["self"],["rotation3"]],["rotation3"]]],[11,"powf","","Raise the quaternion to a given floating power, i.e., returns the rotation with the same axis as `self` and an angle equal to `self.angle()` multiplied by `n`.",232,[[["self"],["n"]],["rotation3"]]],[11,"into_owned","","Moves this unit quaternion into one that owns its data.",234,[[["self"]],["unitquaternion"]]],[11,"clone_owned","","Clones this unit quaternion into one that owns its data.",234,[[["self"]],["unitquaternion"]]],[11,"angle","","The rotation angle in [0; pi] of this unit quaternion.",234,[[["self"]],["n"]]],[11,"quaternion","","The underlying quaternion.",234,[[["self"]],["quaternion"]]],[11,"conjugate","","Compute the conjugate of this unit quaternion.",234,[[["self"]],["unitquaternion"]]],[11,"inverse","","Inverts this quaternion if it is not zero.",234,[[["self"]],["unitquaternion"]]],[11,"angle_to","","The rotation angle needed to make `self` and `other` coincide.",234,[[["self"],["unitquaternion"]],["n"]]],[11,"rotation_to","","The unit quaternion needed to make `self` and `other` coincide.",234,[[["self"],["unitquaternion"]],["unitquaternion"]]],[11,"lerp","","Linear interpolation between two unit quaternions.",234,[[["self"],["unitquaternion"],["n"]],["quaternion"]]],[11,"nlerp","","Normalized linear interpolation between two unit quaternions.",234,[[["self"],["unitquaternion"],["n"]],["unitquaternion"]]],[11,"slerp","","Spherical linear interpolation between two unit quaternions.",234,[[["self"],["unitquaternion"],["n"]],["unitquaternion"]]],[11,"try_slerp","","Computes the spherical linear interpolation between two unit quaternions or returns `None` if both quaternions are approximately 180 degrees apart (in which case the interpolation is not well-defined).",234,[[["self"],["unitquaternion"],["n"],["n"]],["option",["unitquaternion"]]]],[11,"conjugate_mut","","Compute the conjugate of this unit quaternion in-place.",234,[[["self"]]]],[11,"inverse_mut","","Inverts this quaternion if it is not zero.",234,[[["self"]]]],[11,"axis","","The rotation axis of this unit quaternion or `None` if the rotation is zero.",234,[[["self"]],["option",["unit"]]]],[11,"scaled_axis","","The rotation axis of this unit quaternion multiplied by the rotation agle.",234,[[["self"]],["vector3"]]],[11,"axis_angle","","The rotation axis and angle in ]0, pi] of this unit quaternion.",234,[[["self"]],["option"]]],[11,"exp","","Compute the exponential of a quaternion.",234,[[["self"]],["quaternion"]]],[11,"ln","","Compute the natural logarithm of a quaternion.",234,[[["self"]],["quaternion"]]],[11,"powf","","Raise the quaternion to a given floating power.",234,[[["self"],["n"]],["unitquaternion"]]],[11,"to_rotation_matrix","","Builds a rotation matrix from this unit quaternion.",234,[[["self"]],["rotation",["u3"]]]],[11,"to_euler_angles","","Converts this unit quaternion into its equivalent Euler angles.",234,N],[11,"to_homogeneous","","Converts this unit quaternion into its equivalent homogeneous transformation matrix.",234,[[["self"]],["matrixn",["u4"]]]],[11,"fmt","","",234,[[["self"],["formatter"]],["result"]]],[11,"default_epsilon","","",234,N],[11,"abs_diff_eq","","",234,N],[11,"default_max_relative","","",234,N],[11,"relative_eq","","",234,N],[11,"default_max_ulps","","",234,[[],["u32"]]],[11,"ulps_eq","","",234,N],[11,"identity","","The quaternion multiplicative identity.",234,[[],["self"]]],[11,"from_axis_angle","","Creates a new quaternion from a unit vector (the rotation axis) and an angle (the rotation angle).",234,[[["unit"],["n"]],["self"]]],[11,"from_quaternion","","Creates a new unit quaternion from a quaternion.",234,[[["quaternion"]],["self"]]],[11,"from_euler_angles","","Creates a new unit quaternion from Euler angles.",234,[[["n"],["n"],["n"]],["self"]]],[11,"from_rotation_matrix","","Builds an unit quaternion from a rotation matrix.",234,[[["rotation"]],["self"]]],[11,"rotation_between","","The unit quaternion needed to make `a` and `b` be collinear and point toward the same direction.",234,[[["vector"],["vector"]],["option"]]],[11,"scaled_rotation_between","","The smallest rotation needed to make `a` and `b` collinear and point toward the same direction, raised to the power `s`.",234,[[["vector"],["vector"],["n"]],["option"]]],[11,"rotation_between_axis","","The unit quaternion needed to make `a` and `b` be collinear and point toward the same direction.",234,[[["unit"],["unit"]],["option"]]],[11,"scaled_rotation_between_axis","","The smallest rotation needed to make `a` and `b` collinear and point toward the same direction, raised to the power `s`.",234,[[["unit"],["unit"],["n"]],["option"]]],[11,"new_observer_frame","","Creates an unit quaternion that corresponds to the local frame of an observer standing at the origin and looking toward `dir`.",234,[[["vector"],["vector"]],["self"]]],[11,"look_at_rh","","Builds a right-handed look-at view matrix without translation.",234,[[["vector"],["vector"]],["self"]]],[11,"look_at_lh","","Builds a left-handed look-at view matrix without translation.",234,[[["vector"],["vector"]],["self"]]],[11,"new","","Creates a new unit quaternion rotation from a rotation axis scaled by the rotation angle.",234,[[["vector",["u3"]]],["self"]]],[11,"new_eps","","Creates a new unit quaternion rotation from a rotation axis scaled by the rotation angle.",234,[[["vector",["u3"]],["n"]],["self"]]],[11,"from_scaled_axis","","Creates a new unit quaternion rotation from a rotation axis scaled by the rotation angle.",234,[[["vector",["u3"]]],["self"]]],[11,"from_scaled_axis_eps","","Creates a new unit quaternion rotation from a rotation axis scaled by the rotation angle.",234,[[["vector",["u3"]],["n"]],["self"]]],[11,"one","","",234,[[],["self"]]],[11,"mul","","",234,N],[11,"mul","","",234,N],[11,"div","","",234,N],[11,"div","","",234,N],[11,"mul","","",234,N],[11,"mul","","",234,N],[11,"div","","",234,N],[11,"div","","",234,N],[11,"mul","","",234,N],[11,"mul","","",234,N],[11,"mul","","",234,N],[11,"mul","","",234,N],[11,"mul","","",234,N],[11,"mul","","",234,N],[11,"mul_assign","","",234,[[["self"],["unitquaternion"]]]],[11,"mul_assign","","",234,[[["self"],["unitquaternion"]]]],[11,"div_assign","","",234,[[["self"],["unitquaternion"]]]],[11,"div_assign","","",234,[[["self"],["unitquaternion"]]]],[11,"mul_assign","","",234,[[["self"],["rotation"]]]],[11,"mul_assign","","",234,[[["self"],["rotation",["u3"]]]]],[11,"div_assign","","",234,[[["self"],["rotation"]]]],[11,"div_assign","","",234,[[["self"],["rotation",["u3"]]]]],[11,"identity","","",234,[[],["self"]]],[11,"operate","","",234,[[["self"],["self"]],["self"]]],[11,"inverse","","",234,[[["self"]],["self"]]],[11,"inverse_mut","","",234,[[["self"]]]],[11,"transform_point","","",234,[[["self"],["point3"]],["point3"]]],[11,"transform_vector","","",234,[[["self"],["vector3"]],["vector3"]]],[11,"inverse_transform_point","","",234,[[["self"],["point3"]],["point3"]]],[11,"inverse_transform_vector","","",234,[[["self"],["vector3"]],["vector3"]]],[11,"decompose","","",234,N],[11,"append_translation","","",234,N],[11,"prepend_translation","","",234,N],[11,"append_rotation","","",234,N],[11,"prepend_rotation","","",234,N],[11,"append_scaling","","",234,N],[11,"prepend_scaling","","",234,N],[11,"translation","","",234,[[["self"]],["id"]]],[11,"rotation","","",234,[[["self"]],["self"]]],[11,"scaling","","",234,[[["self"]],["id"]]],[11,"powf","","",234,[[["self"],["n"]],["option"]]],[11,"rotation_between","","",234,[[["vector3"],["vector3"]],["option"]]],[11,"scaled_rotation_between","","",234,[[["vector3"],["vector3"],["n"]],["option"]]],[11,"to_superset","","",234,[[["self"]],["unitquaternion"]]],[11,"is_in_subset","","",234,[[["unitquaternion"]],["bool"]]],[11,"from_superset_unchecked","","",234,[[["unitquaternion"]],["self"]]],[11,"to_superset","","",234,[[["self"]],["rotation3"]]],[11,"is_in_subset","","",234,[[["rotation3"]],["bool"]]],[11,"from_superset_unchecked","","",234,[[["rotation3"]],["self"]]],[11,"to_superset","","",234,[[["self"]],["isometry",["u3"]]]],[11,"is_in_subset","","",234,[[["isometry"]],["bool"]]],[11,"from_superset_unchecked","","",234,[[["isometry"]],["self"]]],[11,"to_superset","","",234,[[["self"]],["similarity",["u3"]]]],[11,"is_in_subset","","",234,[[["similarity"]],["bool"]]],[11,"from_superset_unchecked","","",234,[[["similarity"]],["self"]]],[11,"to_superset","","",234,[[["self"]],["transform",["u3"]]]],[11,"is_in_subset","","",234,[[["transform"]],["bool"]]],[11,"from_superset_unchecked","","",234,[[["transform"]],["self"]]],[11,"to_superset","","",234,[[["self"]],["matrix4"]]],[11,"is_in_subset","","",234,[[["matrix4"]],["bool"]]],[11,"from_superset_unchecked","","",234,[[["matrix4"]],["self"]]],[11,"angle","","The rotation angle in `]-pi; pi]` of this unit complex number.",235,[[["self"]],["n"]]],[11,"sin_angle","","The sine of the rotation angle.",235,[[["self"]],["n"]]],[11,"cos_angle","","The cosine of the rotation angle.",235,[[["self"]],["n"]]],[11,"scaled_axis","","The rotation angle returned as a 1-dimensional vector.",235,[[["self"]],["vector1"]]],[11,"axis_angle","","The rotation axis and angle in ]0, pi] of this complex number.",235,[[["self"]],["option"]]],[11,"complex","","The underlying complex number.",235,[[["self"]],["complex"]]],[11,"conjugate","","Compute the conjugate of this unit complex number.",235,[[["self"]],["self"]]],[11,"inverse","","Inverts this complex number if it is not zero.",235,[[["self"]],["self"]]],[11,"angle_to","","The rotation angle needed to make `self` and `other` coincide.",235,[[["self"],["self"]],["n"]]],[11,"rotation_to","","The unit complex number needed to make `self` and `other` coincide.",235,[[["self"],["self"]],["self"]]],[11,"conjugate_mut","","Compute in-place the conjugate of this unit complex number.",235,[[["self"]]]],[11,"inverse_mut","","Inverts in-place this unit complex number.",235,[[["self"]]]],[11,"powf","","Raise this unit complex number to a given floating power.",235,[[["self"],["n"]],["self"]]],[11,"to_rotation_matrix","","Builds the rotation matrix corresponding to this unit complex number.",235,[[["self"]],["rotation2"]]],[11,"to_homogeneous","","Converts this unit complex number into its equivalent homogeneous transformation matrix.",235,[[["self"]],["matrix3"]]],[11,"fmt","","",235,[[["self"],["formatter"]],["result"]]],[11,"default_epsilon","","",235,N],[11,"abs_diff_eq","","",235,N],[11,"default_max_relative","","",235,N],[11,"relative_eq","","",235,N],[11,"default_max_ulps","","",235,[[],["u32"]]],[11,"ulps_eq","","",235,N],[11,"identity","","The unit complex number multiplicative identity.",235,[[],["self"]]],[11,"new","","Builds the unit complex number corresponding to the rotation with the angle.",235,[[["n"]],["self"]]],[11,"from_angle","","Builds the unit complex number corresponding to the rotation with the angle.",235,[[["n"]],["self"]]],[11,"from_cos_sin_unchecked","","Builds the unit complex number frow the sinus and cosinus of the rotation angle.",235,[[["n"],["n"]],["self"]]],[11,"from_scaled_axis","","Builds a unit complex rotation from an angle in radian wrapped in a 1-dimensional vector.",235,[[["vector",["u1"]]],["self"]]],[11,"from_complex","","Creates a new unit complex number from a complex number.",235,[[["complex"]],["self"]]],[11,"from_complex_and_get","","Creates a new unit complex number from a complex number.",235,N],[11,"from_rotation_matrix","","Builds the unit complex number from the corresponding 2D rotation matrix.",235,[[["rotation"]],["self"]]],[11,"rotation_between","","The unit complex needed to make `a` and `b` be collinear and point toward the same direction.",235,[[["vector"],["vector"]],["self"]]],[11,"scaled_rotation_between","","The smallest rotation needed to make `a` and `b` collinear and point toward the same direction, raised to the power `s`.",235,[[["vector"],["vector"],["n"]],["self"]]],[11,"rotation_between_axis","","The unit complex needed to make `a` and `b` be collinear and point toward the same direction.",235,[[["unit"],["unit"]],["self"]]],[11,"scaled_rotation_between_axis","","The smallest rotation needed to make `a` and `b` collinear and point toward the same direction, raised to the power `s`.",235,[[["unit"],["unit"],["n"]],["self"]]],[11,"one","","",235,[[],["self"]]],[11,"mul","","",235,[[["self"],["unitcomplex"]],["unitcomplex"]]],[11,"mul","","",235,[[["self"],["unitcomplex"]],["unitcomplex"]]],[11,"div","","",235,[[["self"],["unitcomplex"]],["unitcomplex"]]],[11,"div","","",235,[[["self"],["unitcomplex"]],["unitcomplex"]]],[11,"mul","","",235,N],[11,"mul","","",235,N],[11,"div","","",235,N],[11,"div","","",235,N],[11,"mul","","",235,N],[11,"mul","","",235,N],[11,"mul","","",235,N],[11,"mul","","",235,N],[11,"mul","","",235,N],[11,"mul","","",235,N],[11,"mul","","",235,N],[11,"mul","","",235,N],[11,"mul","","",235,N],[11,"mul","","",235,N],[11,"mul","","",235,N],[11,"mul","","",235,N],[11,"mul_assign","","",235,[[["self"],["unitcomplex"]]]],[11,"mul_assign","","",235,[[["self"],["unitcomplex"]]]],[11,"div_assign","","",235,[[["self"],["unitcomplex"]]]],[11,"div_assign","","",235,[[["self"],["unitcomplex"]]]],[11,"mul_assign","","",235,[[["self"],["rotation",["u2"]]]]],[11,"mul_assign","","",235,[[["self"],["rotation"]]]],[11,"div_assign","","",235,[[["self"],["rotation",["u2"]]]]],[11,"div_assign","","",235,[[["self"],["rotation"]]]],[11,"rotate","","Performs the multiplication `rhs = self * rhs` in-place.",235,[[["self"],["matrix"]]]],[11,"rotate_rows","","Performs the multiplication `lhs = lhs * self` in-place.",235,[[["self"],["matrix"]]]],[11,"identity","","",235,[[],["self"]]],[11,"operate","","",235,[[["self"],["self"]],["self"]]],[11,"inverse","","",235,[[["self"]],["self"]]],[11,"inverse_mut","","",235,[[["self"]]]],[11,"transform_point","","",235,[[["self"],["point2"]],["point2"]]],[11,"transform_vector","","",235,[[["self"],["vector2"]],["vector2"]]],[11,"inverse_transform_point","","",235,[[["self"],["point2"]],["point2"]]],[11,"inverse_transform_vector","","",235,[[["self"],["vector2"]],["vector2"]]],[11,"decompose","","",235,N],[11,"append_translation","","",235,N],[11,"prepend_translation","","",235,N],[11,"append_rotation","","",235,N],[11,"prepend_rotation","","",235,N],[11,"append_scaling","","",235,N],[11,"prepend_scaling","","",235,N],[11,"translation","","",235,[[["self"]],["id"]]],[11,"rotation","","",235,[[["self"]],["self"]]],[11,"scaling","","",235,[[["self"]],["id"]]],[11,"powf","","",235,[[["self"],["n"]],["option"]]],[11,"rotation_between","","",235,[[["vector2"],["vector2"]],["option"]]],[11,"scaled_rotation_between","","",235,[[["vector2"],["vector2"],["n"]],["option"]]],[11,"to_superset","","",235,[[["self"]],["unitcomplex"]]],[11,"is_in_subset","","",235,[[["unitcomplex"]],["bool"]]],[11,"from_superset_unchecked","","",235,[[["unitcomplex"]],["self"]]],[11,"to_superset","","",235,[[["self"]],["rotation2"]]],[11,"is_in_subset","","",235,[[["rotation2"]],["bool"]]],[11,"from_superset_unchecked","","",235,[[["rotation2"]],["self"]]],[11,"to_superset","","",235,[[["self"]],["isometry",["u2"]]]],[11,"is_in_subset","","",235,[[["isometry"]],["bool"]]],[11,"from_superset_unchecked","","",235,[[["isometry"]],["self"]]],[11,"to_superset","","",235,[[["self"]],["similarity",["u2"]]]],[11,"is_in_subset","","",235,[[["similarity"]],["bool"]]],[11,"from_superset_unchecked","","",235,[[["similarity"]],["self"]]],[11,"to_superset","","",235,[[["self"]],["transform",["u2"]]]],[11,"is_in_subset","","",235,[[["transform"]],["bool"]]],[11,"from_superset_unchecked","","",235,[[["transform"]],["self"]]],[11,"to_superset","","",235,[[["self"]],["matrix3"]]],[11,"is_in_subset","","",235,[[["matrix3"]],["bool"]]],[11,"from_superset_unchecked","","",235,[[["matrix3"]],["self"]]],[11,"mul","","",234,N],[11,"mul","","",234,N],[11,"mul","","",234,N],[11,"mul","","",234,N],[11,"div","","",234,N],[11,"div","","",234,N],[11,"mul","","",234,N],[11,"mul","","",234,N],[11,"div","","",234,N],[11,"div","","",234,N],[11,"has_normalizer","","Indicates whether a `Transform` with the category `Self` has a bottom-row different from `0 0 .. 1`.",210,[[],["bool"]]],[11,"mul","","",234,N],[11,"mul","","",234,N],[11,"div","","",234,N],[11,"div","","",234,N]],"paths":[[8,"Real"],[3,"Matrix"],[8,"Allocator"],[8,"Reallocator"],[8,"DimEq"],[8,"SameNumberOfRows"],[8,"SameNumberOfColumns"],[8,"SameDimension"],[3,"X"],[3,"XY"],[3,"XYZ"],[3,"XYZW"],[3,"XYZWA"],[3,"XYZWAB"],[3,"IJKW"],[3,"M2x2"],[3,"M2x3"],[3,"M2x4"],[3,"M2x5"],[3,"M2x6"],[3,"M3x2"],[3,"M3x3"],[3,"M3x4"],[3,"M3x5"],[3,"M3x6"],[3,"M4x2"],[3,"M4x3"],[3,"M4x4"],[3,"M4x5"],[3,"M4x6"],[3,"M5x2"],[3,"M5x3"],[3,"M5x4"],[3,"M5x5"],[3,"M5x6"],[3,"M6x2"],[3,"M6x3"],[3,"M6x4"],[3,"M6x5"],[3,"M6x6"],[3,"DefaultAllocator"],[8,"Dim"],[8,"DimAdd"],[8,"DimNameAdd"],[8,"DimMul"],[8,"DimNameMul"],[8,"DimSub"],[8,"DimNameSub"],[8,"DimDiv"],[8,"DimNameDiv"],[8,"DimMin"],[8,"DimNameMin"],[8,"DimMax"],[8,"DimNameMax"],[8,"DimName"],[8,"NamedDim"],[3,"Dynamic"],[3,"U1"],[3,"U0"],[3,"U2"],[3,"U3"],[3,"U4"],[3,"U5"],[3,"U6"],[3,"U7"],[3,"U8"],[3,"U9"],[3,"U10"],[3,"U11"],[3,"U12"],[3,"U13"],[3,"U14"],[3,"U15"],[3,"U16"],[3,"U17"],[3,"U18"],[3,"U19"],[3,"U20"],[3,"U21"],[3,"U22"],[3,"U23"],[3,"U24"],[3,"U25"],[3,"U26"],[3,"U27"],[3,"U28"],[3,"U29"],[3,"U30"],[3,"U31"],[3,"U32"],[3,"U33"],[3,"U34"],[3,"U35"],[3,"U36"],[3,"U37"],[3,"U38"],[3,"U39"],[3,"U40"],[3,"U41"],[3,"U42"],[3,"U43"],[3,"U44"],[3,"U45"],[3,"U46"],[3,"U47"],[3,"U48"],[3,"U49"],[3,"U50"],[3,"U51"],[3,"U52"],[3,"U53"],[3,"U54"],[3,"U55"],[3,"U56"],[3,"U57"],[3,"U58"],[3,"U59"],[3,"U60"],[3,"U61"],[3,"U62"],[3,"U63"],[3,"U64"],[3,"U65"],[3,"U66"],[3,"U67"],[3,"U68"],[3,"U69"],[3,"U70"],[3,"U71"],[3,"U72"],[3,"U73"],[3,"U74"],[3,"U75"],[3,"U76"],[3,"U77"],[3,"U78"],[3,"U79"],[3,"U80"],[3,"U81"],[3,"U82"],[3,"U83"],[3,"U84"],[3,"U85"],[3,"U86"],[3,"U87"],[3,"U88"],[3,"U89"],[3,"U90"],[3,"U91"],[3,"U92"],[3,"U93"],[3,"U94"],[3,"U95"],[3,"U96"],[3,"U97"],[3,"U98"],[3,"U99"],[3,"U100"],[3,"U101"],[3,"U102"],[3,"U103"],[3,"U104"],[3,"U105"],[3,"U106"],[3,"U107"],[3,"U108"],[3,"U109"],[3,"U110"],[3,"U111"],[3,"U112"],[3,"U113"],[3,"U114"],[3,"U115"],[3,"U116"],[3,"U117"],[3,"U118"],[3,"U119"],[3,"U120"],[3,"U121"],[3,"U122"],[3,"U123"],[3,"U124"],[3,"U125"],[3,"U126"],[3,"U127"],[3,"MatrixIter"],[3,"MatrixIterMut"],[8,"Storage"],[8,"StorageMut"],[3,"Unit"],[3,"MatrixArray"],[3,"SliceStorage"],[3,"SliceStorageMut"],[3,"MatrixVec"],[8,"Scalar"],[8,"SliceRange"],[3,"Point"],[3,"Quaternion"],[3,"Translation"],[3,"Isometry"],[3,"Similarity"],[3,"Rotation"],[6,"MatrixMN"],[4,"TGeneral"],[4,"TProjective"],[4,"TAffine"],[3,"Transform"],[3,"Reflection"],[3,"Orthographic3"],[3,"Perspective3"],[8,"TCategory"],[8,"TCategoryMul"],[3,"Bidiagonal"],[3,"SVD"],[3,"SymmetricEigen"],[6,"SquareMatrix"],[3,"PermutationSequence"],[3,"QR"],[3,"Hessenberg"],[3,"SymmetricTridiagonal"],[3,"Cholesky"],[3,"LU"],[3,"FullPivLU"],[3,"RealSchur"],[3,"Id"],[6,"Vector"],[6,"MatrixN"],[6,"Matrix3"],[6,"Matrix4"],[6,"VectorN"],[6,"MatrixSliceMN"],[6,"MatrixSliceMutMN"],[6,"Rotation3"],[6,"Rotation2"],[6,"UnitQuaternion"],[6,"UnitComplex"]]};
searchIndex["nodrop"]={"doc":"The nodrop crate has the following cargo feature flags:","items":[[3,"NoDrop","nodrop","A type holding T that will not call its destructor on drop",N,N],[11,"new","","Create a new NoDrop.",0,[[["t"]],["nodrop"]]],[11,"into_inner","","Extract the inner value.",0,[[["self"]],["t"]]],[11,"drop","","",0,[[["self"]]]],[11,"deref","","",0,[[["self"]],["t"]]],[11,"deref_mut","","",0,[[["self"]],["t"]]]],"paths":[[3,"NoDrop"]]};
searchIndex["num"]={"doc":"A collection of numeric types and traits for Rust.","items":[[3,"BigInt","num","A big signed integer type.",N,N],[3,"BigUint","","A big unsigned integer type.",N,N],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",N,N],[6,"BigRational","","Alias for arbitrary precision rationals.",N,N],[3,"Complex","","A complex number in Cartesian form.",N,N],[12,"re","","Real portion of the complex number",0,N],[12,"im","","Imaginary portion of the complex number",0,N],[8,"Integer","","",N,N],[10,"div_floor","","Floored integer division.",1,[[["self"],["self"]],["self"]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[["self"],["self"]],["self"]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[["self"],["self"]],["self"]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[["self"],["self"]],["self"]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[["self"],["self"]],["bool"]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[["self"],["self"]],["bool"]]],[10,"is_even","","Returns `true` if the number is even.",1,[[["self"]],["bool"]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[["self"]],["bool"]]],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,N],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,N],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",N,[[["a"],["a"]],["range"]]],[5,"range_inclusive","","Return an iterator over the range [start, stop]",N,[[["a"],["a"]],["rangeinclusive"]]],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",N,[[["a"],["a"],["a"]],["rangestep"]]],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",N,[[["a"],["a"],["a"]],["rangestepinclusive"]]],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",N,N],[16,"FromStrRadixErr","","",2,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,[[["str"],["u32"]],["result"]]],[8,"Zero","","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,[[["self"]],["bool"]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",5,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",5,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",5,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[8,"Bounded","","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",6,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",6,[[],["self"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[8,"Saturating","","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",7,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",7,[[["self"],["self"]],["self"]]],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",8,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",9,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",10,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",11,[[["self"],["self"]],["option"]]],[8,"PrimInt","","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",12,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",12,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",12,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",12,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",12,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",12,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",12,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",12,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,[[["self"],["u32"]],["self"]]],[8,"Float","","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",13,[[],["self"]]],[10,"infinity","","Returns the infinite value.",13,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",13,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",13,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",13,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",13,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",13,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",13,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",13,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",13,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",13,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",13,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",13,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",13,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",13,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",13,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",13,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",13,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",13,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",13,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",13,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",13,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",13,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",13,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",13,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",13,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",13,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",13,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",13,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",13,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",13,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",13,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",13,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",13,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",13,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",13,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",13,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",13,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",13,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",13,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",13,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",13,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",13,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",13,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",13,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",13,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",13,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",13,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",13,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",13,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",13,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",13,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",13,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",13,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",13,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",13,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",13,N],[8,"ToPrimitive","","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",14,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",14,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,[[["self"]],["option",["f64"]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",15,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["f64"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,[[["t"]],["option"]]],[0,"cast","","",N,N],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",14,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",14,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,[[["self"]],["option",["f64"]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",15,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["f64"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,[[["t"]],["option"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",17,[[["self"]],["t"]]],[5,"cast","num","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[0,"pow","","",N,N],[8,"Pow","num::pow","Binary operator for raising a value to a power.",N,N],[16,"Output","","The result after applying the operator.",18,N],[10,"pow","","Returns `self` to the power `rhs`.",18,N],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[5,"pow","num","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[5,"clamp","","A value bounded by a minimum and a maximum",N,[[["t"],["t"],["t"]],["t"]]],[0,"bigint","","",N,N],[4,"ParseBigIntError","num::bigint","",N,N],[13,"ParseInt","","",19,N],[13,"Other","","",19,N],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",N,N],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",20,[[["self"]],["option",["biguint"]]]],[3,"BigInt","","A big signed integer type.",N,N],[8,"RandBigInt","","",N,N],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",21,[[["self"],["usize"]],["biguint"]]],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",21,[[["self"],["usize"]],["bigint"]]],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails when the bound is zero.",21,[[["self"],["biguint"]],["biguint"]]],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",21,[[["self"],["biguint"],["biguint"]],["biguint"]]],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",21,[[["self"],["bigint"],["bigint"]],["bigint"]]],[3,"BigUint","","A big unsigned integer type.",N,N],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",N,N],[4,"Sign","","A Sign is a `BigInt`'s composing element.",N,N],[13,"Minus","","",22,N],[13,"NoSign","","",22,N],[13,"Plus","","",22,N],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",N,N],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",23,[[["self"]],["option",["bigint"]]]],[0,"big_digit","","",N,N],[6,"BigDigit","num::bigint::big_digit","A `BigDigit` is a `BigUint`'s composing element.",N,N],[17,"ZERO_BIG_DIGIT","","",N,N],[17,"BITS","","",N,N],[17,"BASE","","",N,N],[5,"from_doublebigdigit","","Split one `DoubleBigDigit` into two `BigDigit`s.",N,N],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",N,[[["u32"],["u32"]],["u64"]]],[0,"complex","num","",N,N],[3,"Complex","num::complex","A complex number in Cartesian form.",N,N],[12,"re","","Real portion of the complex number",0,N],[12,"im","","Imaginary portion of the complex number",0,N],[6,"Complex32","","",N,N],[6,"Complex64","","",N,N],[3,"ParseComplexError","","",N,N],[0,"integer","num","",N,N],[8,"Integer","num::integer","",N,N],[10,"div_floor","","Floored integer division.",1,[[["self"],["self"]],["self"]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[["self"],["self"]],["self"]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[["self"],["self"]],["self"]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[["self"],["self"]],["self"]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[["self"],["self"]],["bool"]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[["self"],["self"]],["bool"]]],[10,"is_even","","Returns `true` if the number is even.",1,[[["self"]],["bool"]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[["self"]],["bool"]]],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,N],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,N],[5,"div_rem","","Simultaneous integer division and modulus",N,N],[5,"div_floor","","Floored integer division",N,[[["t"],["t"]],["t"]]],[5,"mod_floor","","Floored integer modulus",N,[[["t"],["t"]],["t"]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",N,N],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",N,[[["t"],["t"]],["t"]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",N,[[["t"],["t"]],["t"]]],[3,"IterBinomial","","An iterator over binomial coefficients.",N,N],[5,"binomial","","Calculate the binomial coefficient.",N,[[["t"],["t"]],["t"]]],[5,"multinomial","","Calculate the multinomial coefficient.",N,N],[5,"nth_root","","Returns the truncated principal `n`th root of an integer -- see Roots::nth_root.",N,[[["t"],["u32"]],["t"]]],[5,"sqrt","","Returns the truncated principal square root of an integer -- see Roots::sqrt.",N,[[["t"]],["t"]]],[8,"Roots","","Provides methods to compute an integer's square root, cube root, and arbitrary `n`th root.",N,N],[10,"nth_root","","Returns the truncated principal `n`th root of an integer -- `if x >= 0 { ⌊ⁿ√x⌋ } else { ⌈ⁿ√x⌉ }`",24,[[["self"],["u32"]],["self"]]],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",24,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",24,[[["self"]],["self"]]],[5,"cbrt","","Returns the truncated principal cube root of an integer -- see Roots::cbrt.",N,[[["t"]],["t"]]],[0,"iter","num","",N,N],[3,"Range","num::iter","An iterator over the range [start, stop)",N,N],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",N,[[["a"],["a"]],["range"]]],[3,"RangeInclusive","","An iterator over the range [start, stop]",N,N],[5,"range_inclusive","","Return an iterator over the range [start, stop]",N,[[["a"],["a"]],["rangeinclusive"]]],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",N,N],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",N,[[["a"],["a"],["a"]],["rangestep"]]],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",N,N],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",N,[[["a"],["a"],["a"]],["rangestepinclusive"]]],[0,"traits","num","",N,N],[0,"identities","num::traits","",N,N],[8,"Zero","num::traits::identities","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,[[["self"]],["bool"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[0,"sign","num::traits","",N,N],[8,"Signed","num::traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",5,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",5,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",5,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,[[["self"]],["bool"]]],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[0,"ops","num::traits","",N,N],[0,"saturating","num::traits::ops","",N,N],[8,"Saturating","num::traits::ops::saturating","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",7,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",7,[[["self"],["self"]],["self"]]],[0,"checked","num::traits::ops","",N,N],[8,"CheckedAdd","num::traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",8,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",9,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",10,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",11,[[["self"],["self"]],["option"]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",25,[[["self"],["self"]],["option"]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can't be represented.",N,N],[10,"checked_neg","","Negates a number, returning `None` for results that can't be represented, like signed `MIN` values that can't be positive, or non-zero unsigned values that can't be negative.",26,[[["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",27,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",28,[[["self"],["u32"]],["option"]]],[0,"wrapping","num::traits::ops","",N,N],[8,"WrappingAdd","num::traits::ops::wrapping","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",29,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",30,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",31,[[["self"],["self"]],["self"]]],[0,"inv","num::traits::ops","",N,N],[8,"Inv","num::traits::ops::inv","Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.",N,N],[16,"Output","","The result after applying the operator.",32,N],[10,"inv","","Returns the multiplicative inverse of `self`.",32,N],[0,"mul_add","num::traits::ops","",N,N],[8,"MulAdd","num::traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",N,N],[16,"Output","","The resulting type after applying the fused multiply-add.",33,N],[10,"mul_add","","Performs the fused multiply-add operation.",33,N],[8,"MulAddAssign","","The fused multiply-add assignment operation.",N,N],[10,"mul_add_assign","","Performs the fused multiply-add operation.",34,N],[0,"bounds","num::traits","",N,N],[8,"Bounded","num::traits::bounds","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",6,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",6,[[],["self"]]],[0,"float","num::traits","",N,N],[8,"FloatCore","num::traits::float","Generic trait for floating point numbers that works with `no_std`.",N,N],[10,"infinity","","Returns positive infinity.",35,[[],["self"]]],[10,"neg_infinity","","Returns negative infinity.",35,[[],["self"]]],[10,"nan","","Returns NaN.",35,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",35,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",35,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",35,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",35,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",35,[[],["self"]]],[11,"is_nan","","Returns `true` if the number is NaN.",35,[[["self"]],["bool"]]],[11,"is_infinite","","Returns `true` if the number is infinite.",35,[[["self"]],["bool"]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",35,[[["self"]],["bool"]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite, subnormal or NaN.",35,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",35,[[["self"]],["fpcategory"]]],[11,"floor","","Returns the largest integer less than or equal to a number.",35,[[["self"]],["self"]]],[11,"ceil","","Returns the smallest integer greater than or equal to a number.",35,[[["self"]],["self"]]],[11,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",35,[[["self"]],["self"]]],[11,"trunc","","Return the integer part of a number.",35,[[["self"]],["self"]]],[11,"fract","","Returns the fractional part of a number.",35,[[["self"]],["self"]]],[11,"abs","","Computes the absolute value of `self`. Returns `FloatCore::nan()` if the number is `FloatCore::nan()`.",35,[[["self"]],["self"]]],[11,"signum","","Returns a number that represents the sign of `self`.",35,[[["self"]],["self"]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `FloatCore::infinity()`, and since Rust 1.20 also `FloatCore::nan()`.",35,[[["self"]],["bool"]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `FloatCore::neg_infinity()`, and since Rust 1.20 also `-FloatCore::nan()`.",35,[[["self"]],["bool"]]],[11,"min","","Returns the minimum of the two numbers.",35,[[["self"],["self"]],["self"]]],[11,"max","","Returns the maximum of the two numbers.",35,[[["self"],["self"]],["self"]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the number.",35,[[["self"]],["self"]]],[11,"powi","","Raise a number to an integer power.",35,[[["self"],["i32"]],["self"]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",35,[[["self"]],["self"]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",35,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",35,N],[8,"Float","","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",13,[[],["self"]]],[10,"infinity","","Returns the infinite value.",13,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",13,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",13,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",13,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",13,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",13,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",13,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",13,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",13,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",13,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",13,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",13,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",13,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",13,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",13,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",13,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",13,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",13,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",13,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",13,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",13,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",13,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",13,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",13,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",13,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",13,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",13,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",13,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",13,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",13,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",13,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",13,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",13,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",13,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",13,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",13,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",13,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",13,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",13,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",13,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",13,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",13,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",13,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",13,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",13,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",13,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",13,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",13,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",13,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",13,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",13,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",13,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",13,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",13,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",13,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",13,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",36,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",36,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",36,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",36,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",36,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",36,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",36,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",36,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",36,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",36,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",36,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",36,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",36,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",36,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",36,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",36,[[],["self"]]],[0,"real","num::traits","",N,N],[8,"Real","num::traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",N,N],[10,"min_value","","Returns the smallest finite value that this type can represent.",37,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",37,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",37,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",37,[[],["self"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",37,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",37,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",37,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",37,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",37,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",37,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",37,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",37,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",37,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",37,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",37,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",37,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a real number power.",37,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",37,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",37,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",37,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",37,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",37,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",37,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",37,[[["self"]],["self"]]],[10,"to_degrees","","Converts radians to degrees.",37,[[["self"]],["self"]]],[10,"to_radians","","Converts degrees to radians.",37,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",37,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",37,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",37,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",37,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",37,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",37,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",37,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",37,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",37,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",37,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",37,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",37,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",37,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",37,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",37,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",37,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",37,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",37,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",37,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",37,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",37,[[["self"]],["self"]]],[0,"cast","num::traits","",N,N],[8,"ToPrimitive","num::traits::cast","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",14,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",14,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,[[["self"]],["option",["f64"]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",15,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,[[["f64"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,[[["t"]],["option"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",17,[[["self"]],["t"]]],[0,"int","num::traits","",N,N],[8,"PrimInt","num::traits::int","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",12,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",12,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",12,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",12,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",12,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",12,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",12,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",12,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,[[["self"],["u32"]],["self"]]],[0,"pow","num::traits","",N,N],[8,"Pow","num::traits::pow","Binary operator for raising a value to a power.",N,N],[16,"Output","","The result after applying the operator.",18,N],[10,"pow","","Returns `self` to the power `rhs`.",18,N],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[8,"Num","num::traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",N,N],[16,"FromStrRadixErr","","",2,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,[[["str"],["u32"]],["result"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",N,N],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",N,N],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",N,N],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",N,N],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",N,N],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",N,N],[4,"FloatErrorKind","","",N,N],[13,"Empty","","",38,N],[13,"Invalid","","",38,N],[3,"ParseFloatError","","",N,N],[12,"kind","","",39,N],[5,"clamp","","A value bounded by a minimum and a maximum",N,[[["t"],["t"],["t"]],["t"]]],[0,"rational","num","",N,N],[3,"Ratio","num::rational","Represents the ratio between 2 numbers.",N,N],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",N,N],[6,"Rational32","","",N,N],[6,"Rational64","","",N,N],[6,"BigRational","","Alias for arbitrary precision rationals.",N,N],[3,"ParseRatioError","","",N,N],[11,"new","num::bigint","Creates and initializes a BigInt.",40,[[["sign"],["vec",["u32"]]],["bigint"]]],[11,"from_biguint","","Creates and initializes a `BigInt`.",40,[[["sign"],["biguint"]],["bigint"]]],[11,"from_slice","","Creates and initializes a `BigInt`.",40,N],[11,"assign_from_slice","","Reinitializes a `BigInt`.",40,N],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",40,N],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",40,N],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes in two's complement binary representation.",40,N],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes in two's complement.",40,N],[11,"parse_bytes","","Creates and initializes a `BigInt`.",40,N],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",40,N],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",40,N],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",40,N],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",40,N],[11,"to_signed_bytes_be","","Returns the two's complement byte representation of the `BigInt` in big-endian byte order.",40,[[["self"]],["vec",["u8"]]]],[11,"to_signed_bytes_le","","Returns the two's complement byte representation of the `BigInt` in little-endian byte order.",40,[[["self"]],["vec",["u8"]]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",40,[[["self"],["u32"]],["string"]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",40,N],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",40,N],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",40,[[["self"]],["sign"]]],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",40,[[["self"]],["usize"]]],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",40,[[["self"]],["option",["biguint"]]]],[11,"checked_add","","",40,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_sub","","",40,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_mul","","",40,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_div","","",40,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",40,[[["self"],["bigint"],["bigint"]],["bigint"]]],[11,"fmt","num::traits","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"next","num::integer","",41,[[["self"]],["option"]]],[11,"clone","num::iter","",42,[[["self"]],["rangestepinclusive"]]],[11,"clone","","",43,[[["self"]],["rangeinclusive"]]],[11,"clone","","",44,[[["self"]],["rangestep"]]],[11,"clone","","",45,[[["self"]],["range"]]],[11,"next","","",44,[[["self"]],["option"]]],[11,"next","","",45,[[["self"]],["option"]]],[11,"size_hint","","",45,N],[11,"next","","",42,[[["self"]],["option"]]],[11,"next","","",43,[[["self"]],["option"]]],[11,"size_hint","","",43,N],[11,"next_back","","",45,[[["self"]],["option"]]],[11,"next_back","","",43,[[["self"]],["option"]]],[11,"mul","num::complex","",0,[[["self"],["t"]],["complex"]]],[11,"mul","","",0,[[["self"],["complex"]],["complex"]]],[11,"mul","","",0,[[["self"],["complex"]],["complex"]]],[11,"mul","","",0,[[["self"],["t"]],["complex"]]],[11,"rem_assign","","",0,N],[11,"rem_assign","","",0,N],[11,"rem_assign","","",0,N],[11,"rem_assign","","",0,N],[11,"encode","","",0,[[["self"],["__st"]],["result"]]],[11,"default","","",0,[[],["complex"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"div","","",0,[[["self"],["t"]],["complex"]]],[11,"div","","",0,[[["self"],["t"]],["complex"]]],[11,"div","","",0,[[["self"],["complex"]],["complex"]]],[11,"div","","",0,[[["self"],["complex"]],["complex"]]],[11,"one","","",0,[[],["complex"]]],[11,"eq","","",0,[[["self"],["complex"]],["bool"]]],[11,"ne","","",0,[[["self"],["complex"]],["bool"]]],[11,"eq","","",46,[[["self"],["parsecomplexerror"]],["bool"]]],[11,"ne","","",46,[[["self"],["parsecomplexerror"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"hash","","",0,N],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,[[["str"]],["result",["complex"]]]],[11,"add","","",0,[[["self"],["t"]],["complex"]]],[11,"add","","",0,[[["self"],["complex"]],["complex"]]],[11,"add","","",0,[[["self"],["t"]],["complex"]]],[11,"add","","",0,[[["self"],["complex"]],["complex"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,[[["str"],["u32"]],["result",["complex"]]]],[11,"decode","","",0,[[["__dt"]],["result",["complex"]]]],[11,"sub","","",0,[[["self"],["t"]],["complex"]]],[11,"sub","","",0,[[["self"],["complex"]],["complex"]]],[11,"sub","","",0,[[["self"],["t"]],["complex"]]],[11,"sub","","",0,[[["self"],["complex"]],["complex"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",0,[[["t"]],["complex"]]],[11,"from","","",0,[[["t"]],["complex"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"rem","","",0,[[["self"],["t"]],["complex"]]],[11,"rem","","",0,[[["self"],["complex"]],["complex"]]],[11,"rem","","",0,[[["self"],["complex"]],["complex"]]],[11,"rem","","",0,[[["self"],["t"]],["complex"]]],[11,"sub_assign","","",0,N],[11,"sub_assign","","",0,N],[11,"sub_assign","","",0,N],[11,"sub_assign","","",0,N],[11,"add_assign","","",0,N],[11,"add_assign","","",0,N],[11,"add_assign","","",0,N],[11,"add_assign","","",0,N],[11,"div_assign","","",0,N],[11,"div_assign","","",0,N],[11,"div_assign","","",0,N],[11,"div_assign","","",0,N],[11,"mul_assign","","",0,N],[11,"mul_assign","","",0,N],[11,"mul_assign","","",0,N],[11,"mul_assign","","",0,N],[11,"description","","",46,[[["self"]],["str"]]],[11,"clone","","",0,[[["self"]],["complex"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"neg","","",0,[[["self"]],["complex"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"zero","","",0,[[],["complex"]]],[11,"is_zero","","",0,[[["self"]],["bool"]]],[11,"mul","num::bigint","",40,[[["self"],["u8"]],["bigint"]]],[11,"mul","","",47,[[["self"],["biguint"]],["biguint"]]],[11,"mul","","",40,[[["self"],["isize"]],["bigint"]]],[11,"mul","","",40,[[["self"],["u32"]],["bigint"]]],[11,"mul","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"mul","","",47,[[["self"],["usize"]],["biguint"]]],[11,"mul","","",40,[[["self"],["i64"]],["bigint"]]],[11,"mul","","",47,[[["self"],["u64"]],["biguint"]]],[11,"mul","","",22,[[["self"],["sign"]],["sign"]]],[11,"mul","","",40,[[["self"],["i32"]],["bigint"]]],[11,"mul","","",47,[[["self"],["u16"]],["biguint"]]],[11,"mul","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"mul","","",47,[[["self"],["usize"]],["biguint"]]],[11,"mul","","",40,[[["self"],["i32"]],["bigint"]]],[11,"mul","","",40,[[["self"],["i16"]],["bigint"]]],[11,"mul","","",40,[[["self"],["usize"]],["bigint"]]],[11,"mul","","",47,[[["self"],["u8"]],["biguint"]]],[11,"mul","","",47,[[["self"],["biguint"]],["biguint"]]],[11,"mul","","",40,[[["self"],["i8"]],["bigint"]]],[11,"mul","","",40,[[["self"],["isize"]],["bigint"]]],[11,"mul","","",40,[[["self"],["u64"]],["bigint"]]],[11,"mul","","",47,[[["self"],["u64"]],["biguint"]]],[11,"mul","","",40,[[["self"],["usize"]],["bigint"]]],[11,"mul","","",40,[[["self"],["u16"]],["bigint"]]],[11,"mul","","",47,[[["self"],["u16"]],["biguint"]]],[11,"mul","","",40,[[["self"],["i64"]],["bigint"]]],[11,"mul","","",47,[[["self"],["u32"]],["biguint"]]],[11,"mul","","",40,[[["self"],["u64"]],["bigint"]]],[11,"mul","","",40,[[["self"],["i8"]],["bigint"]]],[11,"mul","","",40,[[["self"],["i16"]],["bigint"]]],[11,"mul","","",40,[[["self"],["u16"]],["bigint"]]],[11,"mul","","",47,[[["self"],["u32"]],["biguint"]]],[11,"mul","","",40,[[["self"],["u32"]],["bigint"]]],[11,"mul","","",40,[[["self"],["u8"]],["bigint"]]],[11,"mul","","",47,[[["self"],["u8"]],["biguint"]]],[11,"rem_assign","","",47,N],[11,"rem_assign","","",47,N],[11,"rem_assign","","",47,N],[11,"rem_assign","","",47,N],[11,"rem_assign","","",47,N],[11,"rem_assign","","",47,N],[11,"rem_assign","","",47,N],[11,"abs","","",40,[[["self"]],["bigint"]]],[11,"abs_sub","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"signum","","",40,[[["self"]],["bigint"]]],[11,"is_positive","","",40,[[["self"]],["bool"]]],[11,"is_negative","","",40,[[["self"]],["bool"]]],[11,"to_i64","","",40,[[["self"]],["option",["i64"]]]],[11,"to_u64","","",40,[[["self"]],["option",["u64"]]]],[11,"to_f32","","",40,[[["self"]],["option",["f32"]]]],[11,"to_f64","","",40,[[["self"]],["option",["f64"]]]],[11,"to_i64","","",47,[[["self"]],["option",["i64"]]]],[11,"to_u64","","",47,[[["self"]],["option",["u64"]]]],[11,"to_f32","","",47,[[["self"]],["option",["f32"]]]],[11,"to_f64","","",47,[[["self"]],["option",["f64"]]]],[11,"shr","","",47,[[["self"],["usize"]],["biguint"]]],[11,"shr","","",40,[[["self"],["usize"]],["bigint"]]],[11,"default","","",40,[[],["bigint"]]],[11,"default","","",47,[[],["biguint"]]],[11,"checked_add","","",47,[[["self"],["biguint"]],["option",["biguint"]]]],[11,"checked_add","","",40,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"from_i64","","",47,[[["i64"]],["option",["biguint"]]]],[11,"from_u64","","",47,[[["u64"]],["option",["biguint"]]]],[11,"from_f64","","",47,[[["f64"]],["option",["biguint"]]]],[11,"from_i64","","",40,[[["i64"]],["option",["bigint"]]]],[11,"from_u64","","",40,[[["u64"]],["option",["bigint"]]]],[11,"from_f64","","",40,[[["f64"]],["option",["bigint"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"shl_assign","","",47,N],[11,"bitxor_assign","","",47,N],[11,"bitxor_assign","","",47,N],[11,"div","","",40,[[["self"],["u64"]],["bigint"]]],[11,"div","","",47,[[["self"],["usize"]],["biguint"]]],[11,"div","","",40,[[["self"],["u16"]],["bigint"]]],[11,"div","","",40,[[["self"],["i8"]],["bigint"]]],[11,"div","","",47,[[["self"],["u64"]],["biguint"]]],[11,"div","","",40,[[["self"],["i64"]],["bigint"]]],[11,"div","","",40,[[["self"],["u64"]],["bigint"]]],[11,"div","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"div","","",47,[[["self"],["u16"]],["biguint"]]],[11,"div","","",47,[[["self"],["u16"]],["biguint"]]],[11,"div","","",40,[[["self"],["u8"]],["bigint"]]],[11,"div","","",40,[[["self"],["i16"]],["bigint"]]],[11,"div","","",40,[[["self"],["i8"]],["bigint"]]],[11,"div","","",47,[[["self"],["u32"]],["biguint"]]],[11,"div","","",47,[[["self"],["u32"]],["biguint"]]],[11,"div","","",40,[[["self"],["u8"]],["bigint"]]],[11,"div","","",40,[[["self"],["u16"]],["bigint"]]],[11,"div","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"div","","",40,[[["self"],["usize"]],["bigint"]]],[11,"div","","",40,[[["self"],["u32"]],["bigint"]]],[11,"div","","",47,[[["self"],["biguint"]],["biguint"]]],[11,"div","","",47,[[["self"],["u8"]],["biguint"]]],[11,"div","","",40,[[["self"],["isize"]],["bigint"]]],[11,"div","","",47,[[["self"],["biguint"]],["biguint"]]],[11,"div","","",40,[[["self"],["i16"]],["bigint"]]],[11,"div","","",40,[[["self"],["isize"]],["bigint"]]],[11,"div","","",40,[[["self"],["i64"]],["bigint"]]],[11,"div","","",40,[[["self"],["i32"]],["bigint"]]],[11,"div","","",47,[[["self"],["u64"]],["biguint"]]],[11,"div","","",40,[[["self"],["usize"]],["bigint"]]],[11,"div","","",40,[[["self"],["i32"]],["bigint"]]],[11,"div","","",40,[[["self"],["u32"]],["bigint"]]],[11,"div","","",47,[[["self"],["u8"]],["biguint"]]],[11,"div","","",47,[[["self"],["usize"]],["biguint"]]],[11,"eq","","",19,[[["self"],["parsebiginterror"]],["bool"]]],[11,"ne","","",19,[[["self"],["parsebiginterror"]],["bool"]]],[11,"eq","","",22,[[["self"],["sign"]],["bool"]]],[11,"eq","","",47,[[["self"],["biguint"]],["bool"]]],[11,"eq","","",40,[[["self"],["bigint"]],["bool"]]],[11,"shr_assign","","",47,N],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"hash","","",47,N],[11,"hash","","",22,N],[11,"hash","","",40,N],[11,"from_str","","",47,[[["str"]],["result",["biguint","parsebiginterror"]]]],[11,"from_str","","",40,[[["str"]],["result",["bigint","parsebiginterror"]]]],[11,"add","","",47,[[["self"],["u64"]],["biguint"]]],[11,"add","","",40,[[["self"],["i8"]],["bigint"]]],[11,"add","","",40,[[["self"],["u8"]],["bigint"]]],[11,"add","","",40,[[["self"],["i8"]],["bigint"]]],[11,"add","","",47,[[["self"],["u8"]],["biguint"]]],[11,"add","","",40,[[["self"],["usize"]],["bigint"]]],[11,"add","","",40,[[["self"],["u64"]],["bigint"]]],[11,"add","","",40,[[["self"],["isize"]],["bigint"]]],[11,"add","","",40,[[["self"],["u16"]],["bigint"]]],[11,"add","","",40,[[["self"],["i16"]],["bigint"]]],[11,"add","","",40,[[["self"],["i16"]],["bigint"]]],[11,"add","","",40,[[["self"],["u8"]],["bigint"]]],[11,"add","","",47,[[["self"],["u64"]],["biguint"]]],[11,"add","","",40,[[["self"],["u32"]],["bigint"]]],[11,"add","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"add","","",40,[[["self"],["i64"]],["bigint"]]],[11,"add","","",47,[[["self"],["biguint"]],["biguint"]]],[11,"add","","",47,[[["self"],["u16"]],["biguint"]]],[11,"add","","",40,[[["self"],["isize"]],["bigint"]]],[11,"add","","",47,[[["self"],["u8"]],["biguint"]]],[11,"add","","",40,[[["self"],["u64"]],["bigint"]]],[11,"add","","",40,[[["self"],["i32"]],["bigint"]]],[11,"add","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"add","","",40,[[["self"],["i32"]],["bigint"]]],[11,"add","","",47,[[["self"],["u32"]],["biguint"]]],[11,"add","","",40,[[["self"],["i64"]],["bigint"]]],[11,"add","","",47,[[["self"],["u16"]],["biguint"]]],[11,"add","","",40,[[["self"],["usize"]],["bigint"]]],[11,"add","","",47,[[["self"],["biguint"]],["biguint"]]],[11,"add","","",47,[[["self"],["usize"]],["biguint"]]],[11,"add","","",40,[[["self"],["u16"]],["bigint"]]],[11,"add","","",40,[[["self"],["u32"]],["bigint"]]],[11,"add","","",47,[[["self"],["u32"]],["biguint"]]],[11,"add","","",47,[[["self"],["usize"]],["biguint"]]],[11,"checked_mul","","",47,[[["self"],["biguint"]],["option",["biguint"]]]],[11,"checked_mul","","",40,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"bitand_assign","","",47,N],[11,"bitand_assign","","",47,N],[11,"sub","","",40,[[["self"],["i16"]],["bigint"]]],[11,"sub","","",40,[[["self"],["i64"]],["bigint"]]],[11,"sub","","",40,[[["self"],["isize"]],["bigint"]]],[11,"sub","","",40,[[["self"],["i32"]],["bigint"]]],[11,"sub","","",40,[[["self"],["usize"]],["bigint"]]],[11,"sub","","",40,[[["self"],["isize"]],["bigint"]]],[11,"sub","","",40,[[["self"],["i8"]],["bigint"]]],[11,"sub","","",40,[[["self"],["u64"]],["bigint"]]],[11,"sub","","",40,[[["self"],["u8"]],["bigint"]]],[11,"sub","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"sub","","",40,[[["self"],["i16"]],["bigint"]]],[11,"sub","","",47,[[["self"],["u16"]],["biguint"]]],[11,"sub","","",47,[[["self"],["u8"]],["biguint"]]],[11,"sub","","",47,[[["self"],["u16"]],["biguint"]]],[11,"sub","","",40,[[["self"],["i32"]],["bigint"]]],[11,"sub","","",40,[[["self"],["usize"]],["bigint"]]],[11,"sub","","",47,[[["self"],["u64"]],["biguint"]]],[11,"sub","","",47,[[["self"],["biguint"]],["biguint"]]],[11,"sub","","",47,[[["self"],["u64"]],["biguint"]]],[11,"sub","","",40,[[["self"],["i64"]],["bigint"]]],[11,"sub","","",40,[[["self"],["u16"]],["bigint"]]],[11,"sub","","",40,[[["self"],["u32"]],["bigint"]]],[11,"sub","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"sub","","",40,[[["self"],["i8"]],["bigint"]]],[11,"sub","","",40,[[["self"],["u64"]],["bigint"]]],[11,"sub","","",47,[[["self"],["biguint"]],["biguint"]]],[11,"sub","","",47,[[["self"],["u32"]],["biguint"]]],[11,"sub","","",47,[[["self"],["usize"]],["biguint"]]],[11,"sub","","",40,[[["self"],["u8"]],["bigint"]]],[11,"sub","","",47,[[["self"],["usize"]],["biguint"]]],[11,"sub","","",40,[[["self"],["u32"]],["bigint"]]],[11,"sub","","",47,[[["self"],["u32"]],["biguint"]]],[11,"sub","","",40,[[["self"],["u16"]],["bigint"]]],[11,"sub","","",47,[[["self"],["u8"]],["biguint"]]],[11,"cmp","","",47,[[["self"],["biguint"]],["ordering"]]],[11,"cmp","","",22,[[["self"],["sign"]],["ordering"]]],[11,"cmp","","",40,[[["self"],["bigint"]],["ordering"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",40,[[["self"],["bigint"]],["option",["ordering"]]]],[11,"partial_cmp","","",22,[[["self"],["sign"]],["option",["ordering"]]]],[11,"partial_cmp","","",47,[[["self"],["biguint"]],["option",["ordering"]]]],[11,"from","","",40,[[["u64"]],["bigint"]]],[11,"from","","",40,[[["u8"]],["bigint"]]],[11,"from","","",47,[[["u32"]],["biguint"]]],[11,"from","","",40,[[["i64"]],["bigint"]]],[11,"from","","",40,[[["u16"]],["bigint"]]],[11,"from","","",40,[[["isize"]],["bigint"]]],[11,"from","","",47,[[["u16"]],["biguint"]]],[11,"from","","",47,[[["u64"]],["biguint"]]],[11,"from","","",40,[[["i32"]],["bigint"]]],[11,"from","","",19,[[["parseinterror"]],["parsebiginterror"]]],[11,"from","","",40,[[["i8"]],["bigint"]]],[11,"from","","",40,[[["i16"]],["bigint"]]],[11,"from","","",47,[[["usize"]],["biguint"]]],[11,"from","","",40,[[["biguint"]],["bigint"]]],[11,"from","","",40,[[["u32"]],["bigint"]]],[11,"from","","",47,[[["u8"]],["biguint"]]],[11,"from","","",40,[[["usize"]],["bigint"]]],[11,"div_rem","","",40,N],[11,"div_floor","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"mod_floor","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"div_mod_floor","","",40,N],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",40,[[["self"],["bigint"]],["bigint"]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",40,[[["self"],["bigint"]],["bigint"]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",40,[[["self"],["bigint"]],["bool"]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",40,[[["self"],["bigint"]],["bool"]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",40,[[["self"]],["bool"]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",40,[[["self"]],["bool"]]],[11,"div_rem","","",47,N],[11,"div_floor","","",47,[[["self"],["biguint"]],["biguint"]]],[11,"mod_floor","","",47,[[["self"],["biguint"]],["biguint"]]],[11,"div_mod_floor","","",47,N],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",47,[[["self"],["biguint"]],["biguint"]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",47,[[["self"],["biguint"]],["biguint"]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",47,[[["self"],["biguint"]],["bool"]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",47,[[["self"],["biguint"]],["bool"]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",47,[[["self"]],["bool"]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",47,[[["self"]],["bool"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"bitxor","","",47,[[["self"],["biguint"]],["biguint"]]],[11,"bitxor","","",47,[[["self"],["biguint"]],["biguint"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"one","","",47,[[],["biguint"]]],[11,"one","","",40,[[],["bigint"]]],[11,"rem","","",40,[[["self"],["usize"]],["bigint"]]],[11,"rem","","",40,[[["self"],["i8"]],["bigint"]]],[11,"rem","","",40,[[["self"],["isize"]],["bigint"]]],[11,"rem","","",40,[[["self"],["i16"]],["bigint"]]],[11,"rem","","",47,[[["self"],["u16"]],["biguint"]]],[11,"rem","","",40,[[["self"],["usize"]],["bigint"]]],[11,"rem","","",47,[[["self"],["u64"]],["biguint"]]],[11,"rem","","",47,[[["self"],["u32"]],["biguint"]]],[11,"rem","","",40,[[["self"],["u8"]],["bigint"]]],[11,"rem","","",47,[[["self"],["u8"]],["biguint"]]],[11,"rem","","",47,[[["self"],["usize"]],["biguint"]]],[11,"rem","","",40,[[["self"],["u16"]],["bigint"]]],[11,"rem","","",47,[[["self"],["u8"]],["biguint"]]],[11,"rem","","",40,[[["self"],["u16"]],["bigint"]]],[11,"rem","","",40,[[["self"],["u8"]],["bigint"]]],[11,"rem","","",40,[[["self"],["u64"]],["bigint"]]],[11,"rem","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"rem","","",40,[[["self"],["i8"]],["bigint"]]],[11,"rem","","",40,[[["self"],["i64"]],["bigint"]]],[11,"rem","","",40,[[["self"],["i32"]],["bigint"]]],[11,"rem","","",40,[[["self"],["u32"]],["bigint"]]],[11,"rem","","",47,[[["self"],["biguint"]],["biguint"]]],[11,"rem","","",47,[[["self"],["u32"]],["biguint"]]],[11,"rem","","",40,[[["self"],["u64"]],["bigint"]]],[11,"rem","","",47,[[["self"],["u16"]],["biguint"]]],[11,"rem","","",47,[[["self"],["usize"]],["biguint"]]],[11,"rem","","",40,[[["self"],["i16"]],["bigint"]]],[11,"rem","","",40,[[["self"],["i32"]],["bigint"]]],[11,"rem","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"rem","","",40,[[["self"],["isize"]],["bigint"]]],[11,"rem","","",40,[[["self"],["i64"]],["bigint"]]],[11,"rem","","",47,[[["self"],["biguint"]],["biguint"]]],[11,"rem","","",40,[[["self"],["u32"]],["bigint"]]],[11,"rem","","",47,[[["self"],["u64"]],["biguint"]]],[11,"to_biguint","","",40,[[["self"]],["option",["biguint"]]]],[11,"to_biguint","","",47,[[["self"]],["option",["biguint"]]]],[11,"checked_sub","","",40,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_sub","","",47,[[["self"],["biguint"]],["option",["biguint"]]]],[11,"sub_assign","","",47,N],[11,"sub_assign","","",47,N],[11,"sub_assign","","",47,N],[11,"sub_assign","","",47,N],[11,"sub_assign","","",47,N],[11,"sub_assign","","",47,N],[11,"sub_assign","","",47,N],[11,"add_assign","","",47,N],[11,"add_assign","","",47,N],[11,"add_assign","","",47,N],[11,"add_assign","","",47,N],[11,"add_assign","","",47,N],[11,"add_assign","","",47,N],[11,"add_assign","","",47,N],[11,"zero","","",40,[[],["bigint"]]],[11,"is_zero","","",40,[[["self"]],["bool"]]],[11,"zero","","",47,[[],["biguint"]]],[11,"is_zero","","",47,[[["self"]],["bool"]]],[11,"shl","","",40,[[["self"],["usize"]],["bigint"]]],[11,"shl","","",47,[[["self"],["usize"]],["biguint"]]],[11,"div_assign","","",47,N],[11,"div_assign","","",47,N],[11,"div_assign","","",47,N],[11,"div_assign","","",47,N],[11,"div_assign","","",47,N],[11,"div_assign","","",47,N],[11,"div_assign","","",47,N],[11,"mul_assign","","",47,N],[11,"mul_assign","","",47,N],[11,"mul_assign","","",47,N],[11,"mul_assign","","",47,N],[11,"mul_assign","","",47,N],[11,"mul_assign","","",47,N],[11,"mul_assign","","",47,N],[11,"description","","",19,[[["self"]],["str"]]],[11,"from_str_radix","","Creates and initializes a BigInt.",40,[[["str"],["u32"]],["result",["bigint","parsebiginterror"]]]],[11,"from_str_radix","","Creates and initializes a `BigUint`.",47,[[["str"],["u32"]],["result",["biguint","parsebiginterror"]]]],[11,"bitand","","",47,[[["self"],["biguint"]],["biguint"]]],[11,"bitand","","",47,[[["self"],["biguint"]],["biguint"]]],[11,"clone","","",40,[[["self"]],["bigint"]]],[11,"clone","","",47,[[["self"]],["biguint"]]],[11,"clone","","",22,[[["self"]],["sign"]]],[11,"bitor_assign","","",47,N],[11,"bitor_assign","","",47,N],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"encode","","",22,[[["self"],["__s"]],["result"]]],[11,"encode","","",40,[[["self"],["__s"]],["result"]]],[11,"encode","","",47,[[["self"],["__s"]],["result"]]],[11,"neg","","",40,[[["self"]],["bigint"]]],[11,"neg","","",47,[[["self"]],["biguint"]]],[11,"neg","","Negate Sign value.",22,[[["self"]],["sign"]]],[11,"decode","","",47,[[["__d"]],["result",["biguint"]]]],[11,"decode","","",40,[[["__d"]],["result",["bigint"]]]],[11,"decode","","",22,[[["__d"]],["result",["sign"]]]],[11,"bitor","","",47,[[["self"],["biguint"]],["biguint"]]],[11,"bitor","","",47,[[["self"],["biguint"]],["biguint"]]],[11,"to_bigint","","",40,[[["self"]],["option",["bigint"]]]],[11,"to_bigint","","",47,[[["self"]],["option",["bigint"]]]],[11,"checked_div","","",40,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_div","","",47,[[["self"],["biguint"]],["option",["biguint"]]]],[11,"mul","num::rational","",48,[[["self"],["ratio"]],["ratio"]]],[11,"mul","","",48,[[["self"],["t"]],["ratio"]]],[11,"mul","","",48,[[["self"],["ratio"]],["ratio"]]],[11,"mul","","",48,[[["self"],["t"]],["ratio"]]],[11,"rem_assign","","",48,N],[11,"rem_assign","","",48,N],[11,"rem_assign","","",48,N],[11,"rem_assign","","",48,N],[11,"zero","","",48,[[],["ratio"]]],[11,"is_zero","","",48,[[["self"]],["bool"]]],[11,"one","","",48,[[],["ratio"]]],[11,"div","","",48,[[["self"],["ratio"]],["ratio"]]],[11,"div","","",48,[[["self"],["t"]],["ratio"]]],[11,"div","","",48,[[["self"],["t"]],["ratio"]]],[11,"div","","",48,[[["self"],["ratio"]],["ratio"]]],[11,"eq","","",48,[[["self"],["ratio"]],["bool"]]],[11,"eq","","",49,[[["self"],["parseratioerror"]],["bool"]]],[11,"ne","","",49,[[["self"],["parseratioerror"]],["bool"]]],[11,"hash","","",48,N],[11,"decode","","",48,[[["__dt"]],["result",["ratio"]]]],[11,"from_str","","Parses `numer/denom` or just `numer`.",48,[[["str"]],["result",["ratio","parseratioerror"]]]],[11,"add","","",48,[[["self"],["ratio"]],["ratio"]]],[11,"add","","",48,[[["self"],["ratio"]],["ratio"]]],[11,"add","","",48,[[["self"],["t"]],["ratio"]]],[11,"add","","",48,[[["self"],["t"]],["ratio"]]],[11,"encode","","",48,[[["self"],["__st"]],["result"]]],[11,"checked_sub","","",48,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"sub","","",48,[[["self"],["t"]],["ratio"]]],[11,"sub","","",48,[[["self"],["ratio"]],["ratio"]]],[11,"sub","","",48,[[["self"],["t"]],["ratio"]]],[11,"sub","","",48,[[["self"],["ratio"]],["ratio"]]],[11,"cmp","","",48,[[["self"],["ratio"]],["ordering"]]],[11,"partial_cmp","","",48,[[["self"],["ratio"]],["option",["ordering"]]]],[11,"from","","",48,N],[11,"from","","",48,[[["t"]],["ratio"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"rem","","",48,[[["self"],["ratio"]],["ratio"]]],[11,"rem","","",48,[[["self"],["t"]],["ratio"]]],[11,"rem","","",48,[[["self"],["ratio"]],["ratio"]]],[11,"rem","","",48,[[["self"],["t"]],["ratio"]]],[11,"sub_assign","","",48,N],[11,"sub_assign","","",48,N],[11,"sub_assign","","",48,N],[11,"sub_assign","","",48,N],[11,"add_assign","","",48,N],[11,"add_assign","","",48,N],[11,"add_assign","","",48,N],[11,"add_assign","","",48,N],[11,"checked_add","","",48,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"div_assign","","",48,N],[11,"div_assign","","",48,N],[11,"div_assign","","",48,N],[11,"div_assign","","",48,N],[11,"checked_mul","","",48,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"mul_assign","","",48,N],[11,"mul_assign","","",48,N],[11,"mul_assign","","",48,N],[11,"mul_assign","","",48,N],[11,"description","","",49,[[["self"]],["str"]]],[11,"checked_div","","",48,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"clone","","",48,[[["self"]],["ratio"]]],[11,"clone","","",49,[[["self"]],["parseratioerror"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"into","","",48,N],[11,"neg","","",48,[[["self"]],["ratio"]]],[11,"from_i64","","",48,[[["i64"]],["option",["ratio"]]]],[11,"from_u64","","",48,[[["u64"]],["option",["ratio"]]]],[11,"from_f32","","",48,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",48,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",48,[[["i64"]],["option",["ratio"]]]],[11,"from_u64","","",48,[[["u64"]],["option",["ratio"]]]],[11,"from_f32","","",48,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",48,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",48,[[["i64"]],["option",["ratio"]]]],[11,"from_u64","","",48,[[["u64"]],["option",["ratio"]]]],[11,"from_f32","","",48,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",48,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",48,[[["i64"]],["option",["ratio"]]]],[11,"from_u64","","",48,[[["u64"]],["option",["ratio"]]]],[11,"from_f32","","",48,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",48,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",48,[[["i64"]],["option",["ratio"]]]],[11,"from_u64","","",48,[[["u64"]],["option",["ratio"]]]],[11,"from_f32","","",48,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",48,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",48,[[["i64"]],["option",["ratio"]]]],[11,"from_u64","","",48,[[["u64"]],["option",["ratio"]]]],[11,"from_f32","","",48,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",48,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",48,[[["i64"]],["option",["ratio"]]]],[11,"from_u64","","",48,[[["u64"]],["option",["ratio"]]]],[11,"from_f32","","",48,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",48,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",48,[[["i64"]],["option",["ratio"]]]],[11,"from_u64","","",48,[[["u64"]],["option",["ratio"]]]],[11,"from_f32","","",48,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",48,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",48,[[["i64"]],["option",["ratio"]]]],[11,"from_u64","","",48,[[["u64"]],["option",["ratio"]]]],[11,"from_f32","","",48,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",48,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",48,[[["i64"]],["option",["ratio"]]]],[11,"from_u64","","",48,[[["u64"]],["option",["ratio"]]]],[11,"from_f32","","",48,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",48,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",48,[[["i64"]],["option",["ratio"]]]],[11,"from_u64","","",48,[[["u64"]],["option",["ratio"]]]],[11,"from_f32","","",48,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",48,[[["f64"]],["option",["ratio"]]]],[11,"abs","","",48,[[["self"]],["ratio"]]],[11,"abs_sub","","",48,[[["self"],["ratio"]],["ratio"]]],[11,"signum","","",48,[[["self"]],["ratio"]]],[11,"is_positive","","",48,[[["self"]],["bool"]]],[11,"is_negative","","",48,[[["self"]],["bool"]]],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",48,[[["str"],["u32"]],["result",["ratio","parseratioerror"]]]],[11,"new","num::bigint","Creates and initializes a `BigUint`.",47,[[["vec",["u32"]]],["biguint"]]],[11,"from_slice","","Creates and initializes a `BigUint`.",47,N],[11,"assign_from_slice","","Assign a value to a `BigUint`.",47,N],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",47,N],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",47,N],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must contain ascii/utf8 characters in [0-9a-zA-Z]. `radix` must be in the range `2...36`.",47,N],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",47,N],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",47,N],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",47,[[["self"]],["vec",["u8"]]]],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",47,[[["self"]],["vec",["u8"]]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",47,[[["self"],["u32"]],["string"]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",47,[[["self"],["u32"]],["vec",["u8"]]]],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",47,[[["self"],["u32"]],["vec",["u8"]]]],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",47,[[["self"]],["usize"]]],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",47,[[["self"],["biguint"],["biguint"]],["biguint"]]],[11,"new","num::complex","Create a new Complex",0,[[["t"],["t"]],["complex"]]],[11,"i","","Returns imaginary unit",0,[[],["complex"]]],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,[[["self"]],["t"]]],[11,"scale","","Multiplies `self` by the scalar `t`.",0,[[["self"],["t"]],["complex"]]],[11,"unscale","","Divides `self` by the scalar `t`.",0,[[["self"],["t"]],["complex"]]],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,[[["self"]],["complex"]]],[11,"inv","","Returns `1/self`",0,[[["self"]],["complex"]]],[11,"norm","","Calculate |self|",0,[[["self"]],["t"]]],[11,"arg","","Calculate the principal Arg of self.",0,[[["self"]],["t"]]],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,N],[11,"from_polar","","Convert a polar representation into a complex number.",0,[[["t"],["t"]],["complex"]]],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,[[["self"]],["complex"]]],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,[[["self"]],["complex"]]],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,[[["self"]],["complex"]]],[11,"powf","","Raises `self` to a floating point power.",0,[[["self"],["t"]],["complex"]]],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,[[["self"],["t"]],["complex"]]],[11,"powc","","Raises `self` to a complex power.",0,[[["self"],["complex"]],["complex"]]],[11,"expf","","Raises a floating point number to the complex power `self`.",0,[[["self"],["t"]],["complex"]]],[11,"sin","","Computes the sine of `self`.",0,[[["self"]],["complex"]]],[11,"cos","","Computes the cosine of `self`.",0,[[["self"]],["complex"]]],[11,"tan","","Computes the tangent of `self`.",0,[[["self"]],["complex"]]],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,[[["self"]],["complex"]]],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,[[["self"]],["complex"]]],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,[[["self"]],["complex"]]],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,[[["self"]],["complex"]]],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,[[["self"]],["complex"]]],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,[[["self"]],["complex"]]],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,[[["self"]],["complex"]]],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,[[["self"]],["complex"]]],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,[[["self"]],["complex"]]],[11,"is_nan","","Checks if the given complex number is NaN",0,[[["self"]],["bool"]]],[11,"is_infinite","","Checks if the given complex number is infinite",0,[[["self"]],["bool"]]],[11,"is_finite","","Checks if the given complex number is finite",0,[[["self"]],["bool"]]],[11,"is_normal","","Checks if the given complex number is normal",0,[[["self"]],["bool"]]],[11,"new","num::integer","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",41,[[["t"]],["iterbinomial"]]],[11,"new","num::rational","Creates a new `Ratio`. Fails if `denom` is zero.",48,[[["t"],["t"]],["ratio"]]],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",48,[[["t"]],["ratio"]]],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",48,[[["t"],["t"]],["ratio"]]],[11,"to_integer","","Converts to an integer, rounding towards zero.",48,[[["self"]],["t"]]],[11,"numer","","Gets an immutable reference to the numerator.",48,[[["self"]],["t"]]],[11,"denom","","Gets an immutable reference to the denominator.",48,[[["self"]],["t"]]],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",48,[[["self"]],["bool"]]],[11,"reduced","","Returns a reduced copy of self.",48,[[["self"]],["ratio"]]],[11,"recip","","Returns the reciprocal.",48,[[["self"]],["ratio"]]],[11,"floor","","Rounds towards minus infinity.",48,[[["self"]],["ratio"]]],[11,"ceil","","Rounds towards plus infinity.",48,[[["self"]],["ratio"]]],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",48,[[["self"]],["ratio"]]],[11,"trunc","","Rounds towards zero.",48,[[["self"]],["ratio"]]],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",48,[[["self"]],["ratio"]]],[11,"pow","","Raises the `Ratio` to the power of an exponent.",48,[[["self"],["i32"]],["ratio"]]],[11,"from_float","","Converts a float into a rational number.",48,[[["t"]],["option",["ratio"]]]],[11,"approximate_float","","",48,[[["f"]],["option",["ratio"]]]]],"paths":[[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"Pow"],[4,"ParseBigIntError"],[8,"ToBigUint"],[8,"RandBigInt"],[4,"Sign"],[8,"ToBigInt"],[8,"Roots"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"FloatCore"],[8,"FloatConst"],[8,"Real"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[3,"BigInt"],[3,"IterBinomial"],[3,"RangeStepInclusive"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"Range"],[3,"ParseComplexError"],[3,"BigUint"],[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_bigint"]={"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"BigUint","num_bigint","A big unsigned integer type.",N,N],[3,"BigInt","","A big signed integer type.",N,N],[4,"ParseBigIntError","","",N,N],[13,"ParseInt","","",0,N],[13,"Other","","",0,N],[4,"Sign","","A Sign is a `BigInt`'s composing element.",N,N],[13,"Minus","","",1,N],[13,"NoSign","","",1,N],[13,"Plus","","",1,N],[11,"clone","","",2,[[["self"]],["biguint"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"hash","","",2,N],[11,"encode","","",2,[[["self"],["__s"]],["result"]]],[11,"decode","","",2,[[["__d"]],["result",["biguint"]]]],[11,"eq","","",2,[[["self"],["biguint"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["biguint"]],["option",["ordering"]]]],[11,"cmp","","",2,[[["self"],["biguint"]],["ordering"]]],[11,"default","","",2,[[],["biguint"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",2,[[["str"]],["result",["biguint","parsebiginterror"]]]],[11,"from_str_radix","","Creates and initializes a `BigUint`.",2,[[["str"],["u32"]],["result",["biguint","parsebiginterror"]]]],[11,"bitand","","",2,[[["self"],["biguint"]],["biguint"]]],[11,"bitand_assign","","",2,[[["self"],["biguint"]]]],[11,"bitand","","",2,[[["self"],["biguint"]],["biguint"]]],[11,"bitand_assign","","",2,[[["self"],["biguint"]]]],[11,"bitor","","",2,[[["self"],["biguint"]],["biguint"]]],[11,"bitor_assign","","",2,[[["self"],["biguint"]]]],[11,"bitor","","",2,[[["self"],["biguint"]],["biguint"]]],[11,"bitor_assign","","",2,[[["self"],["biguint"]]]],[11,"bitxor","","",2,[[["self"],["biguint"]],["biguint"]]],[11,"bitxor_assign","","",2,[[["self"],["biguint"]]]],[11,"bitxor","","",2,[[["self"],["biguint"]],["biguint"]]],[11,"bitxor_assign","","",2,[[["self"],["biguint"]]]],[11,"shl","","",2,[[["self"],["usize"]],["biguint"]]],[11,"shl_assign","","",2,[[["self"],["usize"]]]],[11,"shr","","",2,[[["self"],["usize"]],["biguint"]]],[11,"shr_assign","","",2,[[["self"],["usize"]]]],[11,"zero","","",2,[[],["biguint"]]],[11,"is_zero","","",2,[[["self"]],["bool"]]],[11,"one","","",2,[[],["biguint"]]],[11,"add","","",2,[[["self"],["biguint"]],["biguint"]]],[11,"add_assign","","",2,[[["self"],["biguint"]]]],[11,"add","","",2,[[["self"],["biguint"]],["biguint"]]],[11,"add_assign","","",2,[[["self"],["biguint"]]]],[11,"add","","",2,[[["self"],["u8"]],["biguint"]]],[11,"add","","",2,[[["self"],["u8"]],["biguint"]]],[11,"add","","",2,[[["self"],["u16"]],["biguint"]]],[11,"add","","",2,[[["self"],["u16"]],["biguint"]]],[11,"add","","",2,[[["self"],["usize"]],["biguint"]]],[11,"add","","",2,[[["self"],["usize"]],["biguint"]]],[11,"add_assign","","",2,[[["self"],["u8"]]]],[11,"add_assign","","",2,[[["self"],["u16"]]]],[11,"add_assign","","",2,[[["self"],["usize"]]]],[11,"add","","",2,[[["self"],["bigdigit"]],["biguint"]]],[11,"add","","",2,[[["self"],["doublebigdigit"]],["biguint"]]],[11,"add","","",2,[[["self"],["bigdigit"]],["biguint"]]],[11,"add_assign","","",2,[[["self"],["bigdigit"]]]],[11,"add","","",2,[[["self"],["doublebigdigit"]],["biguint"]]],[11,"add_assign","","",2,[[["self"],["doublebigdigit"]]]],[11,"sub","","",2,[[["self"],["biguint"]],["biguint"]]],[11,"sub_assign","","",2,[[["self"],["biguint"]]]],[11,"sub","","",2,[[["self"],["biguint"]],["biguint"]]],[11,"sub_assign","","",2,[[["self"],["biguint"]]]],[11,"sub","","",2,[[["self"],["u8"]],["biguint"]]],[11,"sub","","",2,[[["self"],["u8"]],["biguint"]]],[11,"sub","","",2,[[["self"],["u16"]],["biguint"]]],[11,"sub","","",2,[[["self"],["u16"]],["biguint"]]],[11,"sub","","",2,[[["self"],["usize"]],["biguint"]]],[11,"sub","","",2,[[["self"],["usize"]],["biguint"]]],[11,"sub_assign","","",2,[[["self"],["u8"]]]],[11,"sub_assign","","",2,[[["self"],["u16"]]]],[11,"sub_assign","","",2,[[["self"],["usize"]]]],[11,"sub","","",2,[[["self"],["bigdigit"]],["biguint"]]],[11,"sub","","",2,[[["self"],["doublebigdigit"]],["biguint"]]],[11,"sub","","",2,[[["self"],["bigdigit"]],["biguint"]]],[11,"sub_assign","","",2,[[["self"],["bigdigit"]]]],[11,"sub","","",2,[[["self"],["doublebigdigit"]],["biguint"]]],[11,"sub_assign","","",2,[[["self"],["doublebigdigit"]]]],[11,"mul","","",2,[[["self"],["biguint"]],["biguint"]]],[11,"mul","","",2,[[["self"],["biguint"]],["biguint"]]],[11,"mul_assign","","",2,[[["self"],["biguint"]]]],[11,"mul_assign","","",2,[[["self"],["biguint"]]]],[11,"mul","","",2,[[["self"],["u8"]],["biguint"]]],[11,"mul","","",2,[[["self"],["u8"]],["biguint"]]],[11,"mul","","",2,[[["self"],["u16"]],["biguint"]]],[11,"mul","","",2,[[["self"],["u16"]],["biguint"]]],[11,"mul","","",2,[[["self"],["usize"]],["biguint"]]],[11,"mul","","",2,[[["self"],["usize"]],["biguint"]]],[11,"mul_assign","","",2,[[["self"],["u8"]]]],[11,"mul_assign","","",2,[[["self"],["u16"]]]],[11,"mul_assign","","",2,[[["self"],["usize"]]]],[11,"mul","","",2,[[["self"],["bigdigit"]],["biguint"]]],[11,"mul","","",2,[[["self"],["doublebigdigit"]],["biguint"]]],[11,"mul","","",2,[[["self"],["bigdigit"]],["biguint"]]],[11,"mul_assign","","",2,[[["self"],["bigdigit"]]]],[11,"mul","","",2,[[["self"],["doublebigdigit"]],["biguint"]]],[11,"mul_assign","","",2,[[["self"],["doublebigdigit"]]]],[11,"div","","",2,[[["self"],["biguint"]],["biguint"]]],[11,"div","","",2,[[["self"],["biguint"]],["biguint"]]],[11,"div_assign","","",2,[[["self"],["biguint"]]]],[11,"div_assign","","",2,[[["self"],["biguint"]]]],[11,"div","","",2,[[["self"],["u8"]],["biguint"]]],[11,"div","","",2,[[["self"],["u8"]],["biguint"]]],[11,"div","","",2,[[["self"],["u16"]],["biguint"]]],[11,"div","","",2,[[["self"],["u16"]],["biguint"]]],[11,"div","","",2,[[["self"],["usize"]],["biguint"]]],[11,"div","","",2,[[["self"],["usize"]],["biguint"]]],[11,"div_assign","","",2,[[["self"],["u8"]]]],[11,"div_assign","","",2,[[["self"],["u16"]]]],[11,"div_assign","","",2,[[["self"],["usize"]]]],[11,"div","","",2,[[["self"],["bigdigit"]],["biguint"]]],[11,"div","","",2,[[["self"],["doublebigdigit"]],["biguint"]]],[11,"div","","",2,[[["self"],["bigdigit"]],["biguint"]]],[11,"div_assign","","",2,[[["self"],["bigdigit"]]]],[11,"div","","",2,[[["self"],["doublebigdigit"]],["biguint"]]],[11,"div_assign","","",2,[[["self"],["doublebigdigit"]]]],[11,"rem","","",2,[[["self"],["biguint"]],["biguint"]]],[11,"rem","","",2,[[["self"],["biguint"]],["biguint"]]],[11,"rem_assign","","",2,[[["self"],["biguint"]]]],[11,"rem_assign","","",2,[[["self"],["biguint"]]]],[11,"rem","","",2,[[["self"],["u8"]],["biguint"]]],[11,"rem","","",2,[[["self"],["u8"]],["biguint"]]],[11,"rem","","",2,[[["self"],["u16"]],["biguint"]]],[11,"rem","","",2,[[["self"],["u16"]],["biguint"]]],[11,"rem","","",2,[[["self"],["usize"]],["biguint"]]],[11,"rem","","",2,[[["self"],["usize"]],["biguint"]]],[11,"rem_assign","","",2,[[["self"],["u8"]]]],[11,"rem_assign","","",2,[[["self"],["u16"]]]],[11,"rem_assign","","",2,[[["self"],["usize"]]]],[11,"rem","","",2,[[["self"],["bigdigit"]],["biguint"]]],[11,"rem","","",2,[[["self"],["doublebigdigit"]],["biguint"]]],[11,"rem","","",2,[[["self"],["bigdigit"]],["biguint"]]],[11,"rem_assign","","",2,[[["self"],["bigdigit"]]]],[11,"rem","","",2,[[["self"],["doublebigdigit"]],["biguint"]]],[11,"rem_assign","","",2,[[["self"],["doublebigdigit"]]]],[11,"neg","","",2,[[["self"]],["biguint"]]],[11,"checked_add","","",2,[[["self"],["biguint"]],["option",["biguint"]]]],[11,"checked_sub","","",2,[[["self"],["biguint"]],["option",["biguint"]]]],[11,"checked_mul","","",2,[[["self"],["biguint"]],["option",["biguint"]]]],[11,"checked_div","","",2,[[["self"],["biguint"]],["option",["biguint"]]]],[11,"div_rem","","",2,N],[11,"div_floor","","",2,[[["self"],["biguint"]],["biguint"]]],[11,"mod_floor","","",2,[[["self"],["biguint"]],["biguint"]]],[11,"div_mod_floor","","",2,N],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",2,[[["self"],["self"]],["self"]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",2,[[["self"],["biguint"]],["biguint"]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",2,[[["self"],["biguint"]],["bool"]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",2,[[["self"],["biguint"]],["bool"]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",2,[[["self"]],["bool"]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",2,[[["self"]],["bool"]]],[11,"to_i64","","",2,[[["self"]],["option",["i64"]]]],[11,"to_u64","","",2,[[["self"]],["option",["u64"]]]],[11,"to_f32","","",2,[[["self"]],["option",["f32"]]]],[11,"to_f64","","",2,[[["self"]],["option",["f64"]]]],[11,"from_i64","","",2,[[["i64"]],["option",["biguint"]]]],[11,"from_u64","","",2,[[["u64"]],["option",["biguint"]]]],[11,"from_f64","","",2,[[["f64"]],["option",["biguint"]]]],[11,"from","","",2,[[["u64"]],["self"]]],[11,"from","","",2,[[["u8"]],["self"]]],[11,"from","","",2,[[["u16"]],["self"]]],[11,"from","","",2,[[["u32"]],["self"]]],[11,"from","","",2,[[["usize"]],["self"]]],[11,"to_biguint","","",2,[[["self"]],["option",["biguint"]]]],[11,"new","","Creates and initializes a `BigUint`.",2,[[["vec",["bigdigit"]]],["biguint"]]],[11,"from_slice","","Creates and initializes a `BigUint`.",2,N],[11,"assign_from_slice","","Assign a value to a `BigUint`.",2,N],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",2,N],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",2,N],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must contain ascii/utf8 characters in [0-9a-zA-Z]. `radix` must be in the range `2...36`.",2,N],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",2,N],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",2,N],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",2,[[["self"]],["vec",["u8"]]]],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",2,[[["self"]],["vec",["u8"]]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",2,[[["self"],["u32"]],["string"]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",2,[[["self"],["u32"]],["vec",["u8"]]]],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",2,[[["self"],["u32"]],["vec",["u8"]]]],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",2,[[["self"]],["usize"]]],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",2,[[["self"],["self"],["self"]],["self"]]],[11,"eq","","",1,[[["self"],["sign"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["sign"]],["option",["ordering"]]]],[11,"cmp","","",1,[[["self"],["sign"]],["ordering"]]],[11,"clone","","",1,[[["self"]],["sign"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"encode","","",1,[[["self"],["__s"]],["result"]]],[11,"decode","","",1,[[["__d"]],["result",["sign"]]]],[11,"neg","","Negate Sign value.",1,[[["self"]],["sign"]]],[11,"mul","","",1,[[["self"],["sign"]],["sign"]]],[11,"clone","","",3,[[["self"]],["bigint"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"hash","","",3,N],[11,"encode","","",3,[[["self"],["__s"]],["result"]]],[11,"decode","","",3,[[["__d"]],["result",["bigint"]]]],[11,"eq","","",3,[[["self"],["bigint"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["bigint"]],["option",["ordering"]]]],[11,"cmp","","",3,[[["self"],["bigint"]],["ordering"]]],[11,"default","","",3,[[],["bigint"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",3,[[["str"]],["result",["bigint","parsebiginterror"]]]],[11,"from_str_radix","","Creates and initializes a BigInt.",3,[[["str"],["u32"]],["result",["bigint","parsebiginterror"]]]],[11,"shl","","",3,[[["self"],["usize"]],["bigint"]]],[11,"shr","","",3,[[["self"],["usize"]],["bigint"]]],[11,"zero","","",3,[[],["bigint"]]],[11,"is_zero","","",3,[[["self"]],["bool"]]],[11,"one","","",3,[[],["bigint"]]],[11,"abs","","",3,[[["self"]],["bigint"]]],[11,"abs_sub","","",3,[[["self"],["bigint"]],["bigint"]]],[11,"signum","","",3,[[["self"]],["bigint"]]],[11,"is_positive","","",3,[[["self"]],["bool"]]],[11,"is_negative","","",3,[[["self"]],["bool"]]],[11,"add","","",3,[[["self"],["bigint"]],["bigint"]]],[11,"add","","",3,[[["self"],["bigint"]],["bigint"]]],[11,"add","","",3,[[["self"],["u8"]],["bigint"]]],[11,"add","","",3,[[["self"],["u8"]],["bigint"]]],[11,"add","","",3,[[["self"],["u16"]],["bigint"]]],[11,"add","","",3,[[["self"],["u16"]],["bigint"]]],[11,"add","","",3,[[["self"],["usize"]],["bigint"]]],[11,"add","","",3,[[["self"],["usize"]],["bigint"]]],[11,"add","","",3,[[["self"],["i8"]],["bigint"]]],[11,"add","","",3,[[["self"],["i8"]],["bigint"]]],[11,"add","","",3,[[["self"],["i16"]],["bigint"]]],[11,"add","","",3,[[["self"],["i16"]],["bigint"]]],[11,"add","","",3,[[["self"],["isize"]],["bigint"]]],[11,"add","","",3,[[["self"],["isize"]],["bigint"]]],[11,"add","","",3,[[["self"],["bigdigit"]],["bigint"]]],[11,"add","","",3,[[["self"],["doublebigdigit"]],["bigint"]]],[11,"add","","",3,[[["self"],["bigdigit"]],["bigint"]]],[11,"add","","",3,[[["self"],["doublebigdigit"]],["bigint"]]],[11,"add","","",3,[[["self"],["i32"]],["bigint"]]],[11,"add","","",3,[[["self"],["i64"]],["bigint"]]],[11,"add","","",3,[[["self"],["i32"]],["bigint"]]],[11,"add","","",3,[[["self"],["i64"]],["bigint"]]],[11,"sub","","",3,[[["self"],["bigint"]],["bigint"]]],[11,"sub","","",3,[[["self"],["bigint"]],["bigint"]]],[11,"sub","","",3,[[["self"],["u8"]],["bigint"]]],[11,"sub","","",3,[[["self"],["u8"]],["bigint"]]],[11,"sub","","",3,[[["self"],["u16"]],["bigint"]]],[11,"sub","","",3,[[["self"],["u16"]],["bigint"]]],[11,"sub","","",3,[[["self"],["usize"]],["bigint"]]],[11,"sub","","",3,[[["self"],["usize"]],["bigint"]]],[11,"sub","","",3,[[["self"],["i8"]],["bigint"]]],[11,"sub","","",3,[[["self"],["i8"]],["bigint"]]],[11,"sub","","",3,[[["self"],["i16"]],["bigint"]]],[11,"sub","","",3,[[["self"],["i16"]],["bigint"]]],[11,"sub","","",3,[[["self"],["isize"]],["bigint"]]],[11,"sub","","",3,[[["self"],["isize"]],["bigint"]]],[11,"sub","","",3,[[["self"],["bigdigit"]],["bigint"]]],[11,"sub","","",3,[[["self"],["doublebigdigit"]],["bigint"]]],[11,"sub","","",3,[[["self"],["bigdigit"]],["bigint"]]],[11,"sub","","",3,[[["self"],["doublebigdigit"]],["bigint"]]],[11,"sub","","",3,[[["self"],["i32"]],["bigint"]]],[11,"sub","","",3,[[["self"],["i64"]],["bigint"]]],[11,"sub","","",3,[[["self"],["i32"]],["bigint"]]],[11,"sub","","",3,[[["self"],["i64"]],["bigint"]]],[11,"mul","","",3,[[["self"],["bigint"]],["bigint"]]],[11,"mul","","",3,[[["self"],["bigint"]],["bigint"]]],[11,"mul","","",3,[[["self"],["u8"]],["bigint"]]],[11,"mul","","",3,[[["self"],["u8"]],["bigint"]]],[11,"mul","","",3,[[["self"],["u16"]],["bigint"]]],[11,"mul","","",3,[[["self"],["u16"]],["bigint"]]],[11,"mul","","",3,[[["self"],["usize"]],["bigint"]]],[11,"mul","","",3,[[["self"],["usize"]],["bigint"]]],[11,"mul","","",3,[[["self"],["i8"]],["bigint"]]],[11,"mul","","",3,[[["self"],["i8"]],["bigint"]]],[11,"mul","","",3,[[["self"],["i16"]],["bigint"]]],[11,"mul","","",3,[[["self"],["i16"]],["bigint"]]],[11,"mul","","",3,[[["self"],["isize"]],["bigint"]]],[11,"mul","","",3,[[["self"],["isize"]],["bigint"]]],[11,"mul","","",3,[[["self"],["bigdigit"]],["bigint"]]],[11,"mul","","",3,[[["self"],["doublebigdigit"]],["bigint"]]],[11,"mul","","",3,[[["self"],["bigdigit"]],["bigint"]]],[11,"mul","","",3,[[["self"],["doublebigdigit"]],["bigint"]]],[11,"mul","","",3,[[["self"],["i32"]],["bigint"]]],[11,"mul","","",3,[[["self"],["i64"]],["bigint"]]],[11,"mul","","",3,[[["self"],["i32"]],["bigint"]]],[11,"mul","","",3,[[["self"],["i64"]],["bigint"]]],[11,"div","","",3,[[["self"],["bigint"]],["bigint"]]],[11,"div","","",3,[[["self"],["bigint"]],["bigint"]]],[11,"div","","",3,[[["self"],["u8"]],["bigint"]]],[11,"div","","",3,[[["self"],["u8"]],["bigint"]]],[11,"div","","",3,[[["self"],["u16"]],["bigint"]]],[11,"div","","",3,[[["self"],["u16"]],["bigint"]]],[11,"div","","",3,[[["self"],["usize"]],["bigint"]]],[11,"div","","",3,[[["self"],["usize"]],["bigint"]]],[11,"div","","",3,[[["self"],["i8"]],["bigint"]]],[11,"div","","",3,[[["self"],["i8"]],["bigint"]]],[11,"div","","",3,[[["self"],["i16"]],["bigint"]]],[11,"div","","",3,[[["self"],["i16"]],["bigint"]]],[11,"div","","",3,[[["self"],["isize"]],["bigint"]]],[11,"div","","",3,[[["self"],["isize"]],["bigint"]]],[11,"div","","",3,[[["self"],["bigdigit"]],["bigint"]]],[11,"div","","",3,[[["self"],["doublebigdigit"]],["bigint"]]],[11,"div","","",3,[[["self"],["bigdigit"]],["bigint"]]],[11,"div","","",3,[[["self"],["doublebigdigit"]],["bigint"]]],[11,"div","","",3,[[["self"],["i32"]],["bigint"]]],[11,"div","","",3,[[["self"],["i64"]],["bigint"]]],[11,"div","","",3,[[["self"],["i32"]],["bigint"]]],[11,"div","","",3,[[["self"],["i64"]],["bigint"]]],[11,"rem","","",3,[[["self"],["bigint"]],["bigint"]]],[11,"rem","","",3,[[["self"],["bigint"]],["bigint"]]],[11,"rem","","",3,[[["self"],["u8"]],["bigint"]]],[11,"rem","","",3,[[["self"],["u8"]],["bigint"]]],[11,"rem","","",3,[[["self"],["u16"]],["bigint"]]],[11,"rem","","",3,[[["self"],["u16"]],["bigint"]]],[11,"rem","","",3,[[["self"],["usize"]],["bigint"]]],[11,"rem","","",3,[[["self"],["usize"]],["bigint"]]],[11,"rem","","",3,[[["self"],["i8"]],["bigint"]]],[11,"rem","","",3,[[["self"],["i8"]],["bigint"]]],[11,"rem","","",3,[[["self"],["i16"]],["bigint"]]],[11,"rem","","",3,[[["self"],["i16"]],["bigint"]]],[11,"rem","","",3,[[["self"],["isize"]],["bigint"]]],[11,"rem","","",3,[[["self"],["isize"]],["bigint"]]],[11,"rem","","",3,[[["self"],["bigdigit"]],["bigint"]]],[11,"rem","","",3,[[["self"],["doublebigdigit"]],["bigint"]]],[11,"rem","","",3,[[["self"],["bigdigit"]],["bigint"]]],[11,"rem","","",3,[[["self"],["doublebigdigit"]],["bigint"]]],[11,"rem","","",3,[[["self"],["i32"]],["bigint"]]],[11,"rem","","",3,[[["self"],["i64"]],["bigint"]]],[11,"rem","","",3,[[["self"],["i32"]],["bigint"]]],[11,"rem","","",3,[[["self"],["i64"]],["bigint"]]],[11,"neg","","",3,[[["self"]],["bigint"]]],[11,"checked_add","","",3,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_sub","","",3,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_mul","","",3,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_div","","",3,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"div_rem","","",3,N],[11,"div_floor","","",3,[[["self"],["bigint"]],["bigint"]]],[11,"mod_floor","","",3,[[["self"],["bigint"]],["bigint"]]],[11,"div_mod_floor","","",3,N],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",3,[[["self"],["bigint"]],["bigint"]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",3,[[["self"],["bigint"]],["bigint"]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",3,[[["self"],["bigint"]],["bool"]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",3,[[["self"],["bigint"]],["bool"]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",3,[[["self"]],["bool"]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",3,[[["self"]],["bool"]]],[11,"to_i64","","",3,[[["self"]],["option",["i64"]]]],[11,"to_u64","","",3,[[["self"]],["option",["u64"]]]],[11,"to_f32","","",3,[[["self"]],["option",["f32"]]]],[11,"to_f64","","",3,[[["self"]],["option",["f64"]]]],[11,"from_i64","","",3,[[["i64"]],["option",["bigint"]]]],[11,"from_u64","","",3,[[["u64"]],["option",["bigint"]]]],[11,"from_f64","","",3,[[["f64"]],["option",["bigint"]]]],[11,"from","","",3,[[["i64"]],["self"]]],[11,"from","","",3,[[["i8"]],["self"]]],[11,"from","","",3,[[["i16"]],["self"]]],[11,"from","","",3,[[["i32"]],["self"]]],[11,"from","","",3,[[["isize"]],["self"]]],[11,"from","","",3,[[["u64"]],["self"]]],[11,"from","","",3,[[["u8"]],["self"]]],[11,"from","","",3,[[["u16"]],["self"]]],[11,"from","","",3,[[["u32"]],["self"]]],[11,"from","","",3,[[["usize"]],["self"]]],[11,"from","","",3,[[["biguint"]],["self"]]],[11,"to_bigint","","",3,[[["self"]],["option",["bigint"]]]],[11,"to_bigint","","",2,[[["self"]],["option",["bigint"]]]],[11,"to_biguint","","",3,[[["self"]],["option",["biguint"]]]],[11,"new","","Creates and initializes a BigInt.",3,[[["sign"],["vec",["bigdigit"]]],["bigint"]]],[11,"from_biguint","","Creates and initializes a `BigInt`.",3,[[["sign"],["biguint"]],["bigint"]]],[11,"from_slice","","Creates and initializes a `BigInt`.",3,N],[11,"assign_from_slice","","Reinitializes a `BigInt`.",3,N],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",3,N],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",3,N],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes in two's complement binary representation.",3,N],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes in two's complement.",3,N],[11,"parse_bytes","","Creates and initializes a `BigInt`.",3,N],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",3,N],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",3,N],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",3,N],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",3,N],[11,"to_signed_bytes_be","","Returns the two's complement byte representation of the `BigInt` in big-endian byte order.",3,[[["self"]],["vec",["u8"]]]],[11,"to_signed_bytes_le","","Returns the two's complement byte representation of the `BigInt` in little-endian byte order.",3,[[["self"]],["vec",["u8"]]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",3,[[["self"],["u32"]],["string"]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",3,N],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",3,N],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",3,[[["self"]],["sign"]]],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",3,[[["self"]],["usize"]]],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",3,[[["self"]],["option",["biguint"]]]],[11,"checked_add","","",3,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_sub","","",3,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_mul","","",3,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_div","","",3,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",3,[[["self"],["self"],["self"]],["self"]]],[0,"big_digit","","",N,N],[5,"from_doublebigdigit","num_bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",N,N],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",N,[[["bigdigit"],["bigdigit"]],["doublebigdigit"]]],[6,"BigDigit","","A `BigDigit` is a `BigUint`'s composing element.",N,N],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",N,N],[17,"ZERO_BIG_DIGIT","","",N,N],[17,"BITS","","",N,N],[17,"BASE","","",N,N],[6,"BigDigit","num_bigint","A `BigDigit` is a `BigUint`'s composing element.",N,N],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",N,N],[17,"ZERO_BIG_DIGIT","","",N,N],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",N,N],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",4,[[["self"]],["option",["biguint"]]]],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",N,N],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",5,[[["self"]],["option",["bigint"]]]],[8,"RandBigInt","","",N,N],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",6,[[["self"],["usize"]],["biguint"]]],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",6,[[["self"],["usize"]],["bigint"]]],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails when the bound is zero.",6,[[["self"],["biguint"]],["biguint"]]],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,[[["self"],["biguint"],["biguint"]],["biguint"]]],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,[[["self"],["bigint"],["bigint"]],["bigint"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["parsebiginterror"]],["bool"]]],[11,"ne","","",0,[[["self"],["parsebiginterror"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"from","","",0,[[["parseinterror"]],["parsebiginterror"]]],[11,"add","num_bigint::big_digit","",7,[[["self"],["biguint"]],["biguint"]]],[11,"add","","",7,[[["self"],["biguint"]],["biguint"]]],[11,"add","","",8,[[["self"],["biguint"]],["biguint"]]],[11,"add","","",8,[[["self"],["biguint"]],["biguint"]]],[11,"sub","","",7,[[["self"],["biguint"]],["biguint"]]],[11,"sub","","",8,[[["self"],["biguint"]],["biguint"]]],[11,"sub","","",7,[[["self"],["biguint"]],["biguint"]]],[11,"sub","","",8,[[["self"],["biguint"]],["biguint"]]],[11,"mul","","",7,[[["self"],["biguint"]],["biguint"]]],[11,"mul","","",7,[[["self"],["biguint"]],["biguint"]]],[11,"mul","","",8,[[["self"],["biguint"]],["biguint"]]],[11,"mul","","",8,[[["self"],["biguint"]],["biguint"]]],[11,"div","","",7,[[["self"],["biguint"]],["biguint"]]],[11,"div","","",8,[[["self"],["biguint"]],["biguint"]]],[11,"div","","",7,[[["self"],["biguint"]],["biguint"]]],[11,"div","","",8,[[["self"],["biguint"]],["biguint"]]],[11,"rem","","",7,[[["self"],["biguint"]],["biguint"]]],[11,"rem","","",8,[[["self"],["biguint"]],["biguint"]]],[11,"rem","","",7,[[["self"],["biguint"]],["biguint"]]],[11,"rem","","",8,[[["self"],["biguint"]],["biguint"]]],[11,"add","","",7,[[["self"],["bigint"]],["bigint"]]],[11,"add","","",7,[[["self"],["bigint"]],["bigint"]]],[11,"add","","",8,[[["self"],["bigint"]],["bigint"]]],[11,"add","","",8,[[["self"],["bigint"]],["bigint"]]],[11,"sub","","",7,[[["self"],["bigint"]],["bigint"]]],[11,"sub","","",8,[[["self"],["bigint"]],["bigint"]]],[11,"sub","","",7,[[["self"],["bigint"]],["bigint"]]],[11,"sub","","",8,[[["self"],["bigint"]],["bigint"]]],[11,"mul","","",7,[[["self"],["bigint"]],["bigint"]]],[11,"mul","","",7,[[["self"],["bigint"]],["bigint"]]],[11,"mul","","",8,[[["self"],["bigint"]],["bigint"]]],[11,"mul","","",8,[[["self"],["bigint"]],["bigint"]]],[11,"div","","",7,[[["self"],["bigint"]],["bigint"]]],[11,"div","","",8,[[["self"],["bigint"]],["bigint"]]],[11,"div","","",7,[[["self"],["bigint"]],["bigint"]]],[11,"div","","",8,[[["self"],["bigint"]],["bigint"]]],[11,"rem","","",7,[[["self"],["bigint"]],["bigint"]]],[11,"rem","","",8,[[["self"],["bigint"]],["bigint"]]],[11,"rem","","",7,[[["self"],["bigint"]],["bigint"]]],[11,"rem","","",8,[[["self"],["bigint"]],["bigint"]]]],"paths":[[4,"ParseBigIntError"],[4,"Sign"],[3,"BigUint"],[3,"BigInt"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[6,"BigDigit"],[6,"DoubleBigDigit"]]};
searchIndex["num_complex"]={"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",N,N],[12,"re","","Real portion of the complex number",0,N],[12,"im","","Imaginary portion of the complex number",0,N],[3,"ParseComplexError","","",N,N],[11,"add_assign","","",0,[[["self"],["complex"]]]],[11,"sub_assign","","",0,[[["self"],["complex"]]]],[11,"mul_assign","","",0,[[["self"],["complex"]]]],[11,"div_assign","","",0,[[["self"],["complex"]]]],[11,"rem_assign","","",0,[[["self"],["complex"]]]],[11,"add_assign","","",0,[[["self"],["t"]]]],[11,"sub_assign","","",0,[[["self"],["t"]]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[11,"add_assign","","",0,[[["self"],["complex"]]]],[11,"add_assign","","",0,[[["self"],["t"]]]],[11,"sub_assign","","",0,[[["self"],["complex"]]]],[11,"sub_assign","","",0,[[["self"],["t"]]]],[11,"mul_assign","","",0,[[["self"],["complex"]]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"div_assign","","",0,[[["self"],["complex"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"rem_assign","","",0,[[["self"],["complex"]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[6,"Complex32","","",N,N],[6,"Complex64","","",N,N],[11,"eq","","",0,[[["self"],["complex"]],["bool"]]],[11,"ne","","",0,[[["self"],["complex"]],["bool"]]],[11,"clone","","",0,[[["self"]],["complex"]]],[11,"hash","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["complex"]]],[11,"encode","","",0,[[["self"],["__st"]],["result"]]],[11,"decode","","",0,[[["__dt"]],["result",["complex"]]]],[11,"new","","Create a new Complex",0,[[["t"],["t"]],["complex"]]],[11,"i","","Returns imaginary unit",0,[[],["complex"]]],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,[[["self"]],["t"]]],[11,"scale","","Multiplies `self` by the scalar `t`.",0,[[["self"],["t"]],["complex"]]],[11,"unscale","","Divides `self` by the scalar `t`.",0,[[["self"],["t"]],["complex"]]],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,[[["self"]],["complex"]]],[11,"inv","","Returns `1/self`",0,[[["self"]],["complex"]]],[11,"norm","","Calculate |self|",0,[[["self"]],["t"]]],[11,"arg","","Calculate the principal Arg of self.",0,[[["self"]],["t"]]],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,N],[11,"from_polar","","Convert a polar representation into a complex number.",0,[[["t"],["t"]],["complex"]]],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,[[["self"]],["complex"]]],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,[[["self"]],["complex"]]],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,[[["self"]],["complex"]]],[11,"powf","","Raises `self` to a floating point power.",0,[[["self"],["t"]],["complex"]]],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,[[["self"],["t"]],["complex"]]],[11,"powc","","Raises `self` to a complex power.",0,[[["self"],["complex"]],["complex"]]],[11,"expf","","Raises a floating point number to the complex power `self`.",0,[[["self"],["t"]],["complex"]]],[11,"sin","","Computes the sine of `self`.",0,[[["self"]],["complex"]]],[11,"cos","","Computes the cosine of `self`.",0,[[["self"]],["complex"]]],[11,"tan","","Computes the tangent of `self`.",0,[[["self"]],["complex"]]],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,[[["self"]],["complex"]]],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,[[["self"]],["complex"]]],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,[[["self"]],["complex"]]],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,[[["self"]],["complex"]]],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,[[["self"]],["complex"]]],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,[[["self"]],["complex"]]],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,[[["self"]],["complex"]]],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,[[["self"]],["complex"]]],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,[[["self"]],["complex"]]],[11,"is_nan","","Checks if the given complex number is NaN",0,[[["self"]],["bool"]]],[11,"is_infinite","","Checks if the given complex number is infinite",0,[[["self"]],["bool"]]],[11,"is_finite","","Checks if the given complex number is finite",0,[[["self"]],["bool"]]],[11,"is_normal","","Checks if the given complex number is normal",0,[[["self"]],["bool"]]],[11,"from","","",0,[[["t"]],["complex"]]],[11,"from","","",0,[[["t"]],["complex"]]],[11,"add","","",0,[[["self"],["complex"]],["complex"]]],[11,"add","","",0,[[["self"],["complex"]],["complex"]]],[11,"sub","","",0,[[["self"],["complex"]],["complex"]]],[11,"sub","","",0,[[["self"],["complex"]],["complex"]]],[11,"mul","","",0,[[["self"],["complex"]],["complex"]]],[11,"mul","","",0,[[["self"],["complex"]],["complex"]]],[11,"div","","",0,[[["self"],["complex"]],["complex"]]],[11,"div","","",0,[[["self"],["complex"]],["complex"]]],[11,"rem","","",0,[[["self"],["complex"]],["complex"]]],[11,"rem","","",0,[[["self"],["complex"]],["self"]]],[11,"neg","","",0,[[["self"]],["complex"]]],[11,"add","","",0,[[["self"],["t"]],["complex"]]],[11,"sub","","",0,[[["self"],["t"]],["complex"]]],[11,"mul","","",0,[[["self"],["t"]],["complex"]]],[11,"div","","",0,[[["self"],["t"]],["complex"]]],[11,"rem","","",0,[[["self"],["t"]],["complex"]]],[11,"add","","",0,[[["self"],["t"]],["complex"]]],[11,"sub","","",0,[[["self"],["t"]],["complex"]]],[11,"mul","","",0,[[["self"],["t"]],["complex"]]],[11,"div","","",0,[[["self"],["t"]],["complex"]]],[11,"rem","","",0,[[["self"],["t"]],["complex"]]],[11,"zero","","",0,[[],["complex"]]],[11,"is_zero","","",0,[[["self"]],["bool"]]],[11,"one","","",0,[[],["complex"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,[[["str"]],["result"]]],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,[[["str"],["u32"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["parsecomplexerror"]],["bool"]]],[11,"ne","","",1,[[["self"],["parsecomplexerror"]],["bool"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Complex"],[3,"ParseComplexError"]]};
searchIndex["num_cpus"]={"doc":"A crate with utilities to determine the number of CPUs available on the current system.","items":[[5,"get","num_cpus","Returns the number of available CPUs of the current system.",N,[[],["usize"]]],[5,"get_physical","","Returns the number of physical cores of the current system.",N,[[],["usize"]]]],"paths":[]};
searchIndex["num_derive"]={"doc":"Procedural macros to derive numeric traits in Rust.","items":[[5,"from_primitive","num_derive","Derives [`num_traits::FromPrimitive`][from] for simple enums.",N,[[["tokenstream"]],["tokenstream"]]],[5,"to_primitive","","Derives [`num_traits::ToPrimitive`][to] for simple enums.",N,[[["tokenstream"]],["tokenstream"]]]],"paths":[]};
searchIndex["num_integer"]={"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",N,N],[5,"sqrt","","Returns the truncated principal square root of an integer -- see Roots::sqrt.",N,[[["t"]],["t"]]],[5,"cbrt","","Returns the truncated principal cube root of an integer -- see Roots::cbrt.",N,[[["t"]],["t"]]],[5,"nth_root","","Returns the truncated principal `n`th root of an integer -- see Roots::nth_root.",N,[[["t"],["u32"]],["t"]]],[5,"div_rem","","Simultaneous integer division and modulus",N,N],[5,"div_floor","","Floored integer division",N,[[["t"],["t"]],["t"]]],[5,"mod_floor","","Floored integer modulus",N,[[["t"],["t"]],["t"]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",N,N],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",N,[[["t"],["t"]],["t"]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",N,[[["t"],["t"]],["t"]]],[5,"binomial","","Calculate the binomial coefficient.",N,[[["t"],["t"]],["t"]]],[5,"multinomial","","Calculate the multinomial coefficient.",N,N],[8,"Roots","","Provides methods to compute an integer's square root, cube root, and arbitrary `n`th root.",N,N],[10,"nth_root","","Returns the truncated principal `n`th root of an integer -- `if x >= 0 { ⌊ⁿ√x⌋ } else { ⌈ⁿ√x⌉ }`",0,[[["self"],["u32"]],["self"]]],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",0,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",0,[[["self"]],["self"]]],[8,"Integer","","",N,N],[10,"div_floor","","Floored integer division.",1,[[["self"],["self"]],["self"]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[["self"],["self"]],["self"]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[["self"],["self"]],["self"]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[["self"],["self"]],["self"]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[["self"],["self"]],["bool"]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[["self"],["self"]],["bool"]]],[10,"is_even","","Returns `true` if the number is even.",1,[[["self"]],["bool"]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[["self"]],["bool"]]],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,N],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,N],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",2,[[["t"]],["iterbinomial"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",0,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",0,[[["self"]],["self"]]]],"paths":[[8,"Roots"],[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_iter"]={"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",N,N],[3,"RangeInclusive","","An iterator over the range [start, stop]",N,N],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",N,N],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",N,N],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",N,[[["a"],["a"]],["range"]]],[5,"range_inclusive","","Return an iterator over the range [start, stop]",N,[[["a"],["a"]],["rangeinclusive"]]],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",N,[[["a"],["a"],["a"]],["rangestep"]]],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",N,[[["a"],["a"],["a"]],["rangestepinclusive"]]],[11,"clone","","",0,[[["self"]],["range"]]],[11,"next","","",0,[[["self"]],["option"]]],[11,"size_hint","","",0,N],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"clone","","",1,[[["self"]],["rangeinclusive"]]],[11,"next","","",1,[[["self"]],["option"]]],[11,"size_hint","","",1,N],[11,"next_back","","",1,[[["self"]],["option"]]],[11,"clone","","",2,[[["self"]],["rangestep"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"clone","","",3,[[["self"]],["rangestepinclusive"]]],[11,"next","","",3,[[["self"]],["option"]]]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_rational"]={"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",N,N],[3,"ParseRatioError","","",N,N],[11,"add_assign","","",0,[[["self"],["ratio"]]]],[11,"div_assign","","",0,[[["self"],["ratio"]]]],[11,"mul_assign","","",0,[[["self"],["ratio"]]]],[11,"rem_assign","","",0,[[["self"],["ratio"]]]],[11,"sub_assign","","",0,[[["self"],["ratio"]]]],[11,"add_assign","","",0,[[["self"],["t"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[11,"sub_assign","","",0,[[["self"],["t"]]]],[11,"add_assign","","",0,[[["self"],["ratio"]]]],[11,"add_assign","","",0,[[["self"],["t"]]]],[11,"div_assign","","",0,[[["self"],["ratio"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"mul_assign","","",0,[[["self"],["ratio"]]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"rem_assign","","",0,[[["self"],["ratio"]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[11,"sub_assign","","",0,[[["self"],["ratio"]]]],[11,"sub_assign","","",0,[[["self"],["t"]]]],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",N,N],[6,"Rational32","","",N,N],[6,"Rational64","","",N,N],[6,"BigRational","","Alias for arbitrary precision rationals.",N,N],[11,"clone","","",0,[[["self"]],["ratio"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"encode","","",0,[[["self"],["__st"]],["result"]]],[11,"decode","","",0,[[["__dt"]],["result",["ratio"]]]],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,[[["t"],["t"]],["ratio"]]],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,[[["t"]],["ratio"]]],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",0,[[["t"],["t"]],["ratio"]]],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,[[["self"]],["t"]]],[11,"numer","","Gets an immutable reference to the numerator.",0,[[["self"]],["t"]]],[11,"denom","","Gets an immutable reference to the denominator.",0,[[["self"]],["t"]]],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,[[["self"]],["bool"]]],[11,"reduced","","Returns a reduced copy of self.",0,[[["self"]],["ratio"]]],[11,"recip","","Returns the reciprocal.",0,[[["self"]],["ratio"]]],[11,"floor","","Rounds towards minus infinity.",0,[[["self"]],["ratio"]]],[11,"ceil","","Rounds towards plus infinity.",0,[[["self"]],["ratio"]]],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,[[["self"]],["ratio"]]],[11,"trunc","","Rounds towards zero.",0,[[["self"]],["ratio"]]],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",0,[[["self"]],["ratio"]]],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,[[["self"],["i32"]],["ratio"]]],[11,"from_float","","Converts a float into a rational number.",0,[[["t"]],["option",["bigrational"]]]],[11,"from","","",0,[[["t"]],["ratio"]]],[11,"from","","",0,N],[11,"cmp","","",0,[[["self"],["self"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"mul","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"mul","","",0,[[["self"],["t"]],["ratio"]]],[11,"mul","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"mul","","",0,[[["self"],["t"]],["ratio"]]],[11,"div","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"div","","",0,[[["self"],["t"]],["ratio"]]],[11,"div","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"div","","",0,[[["self"],["t"]],["ratio"]]],[11,"add","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"add","","",0,[[["self"],["t"]],["ratio"]]],[11,"add","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"add","","",0,[[["self"],["t"]],["ratio"]]],[11,"sub","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"sub","","",0,[[["self"],["t"]],["ratio"]]],[11,"sub","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"sub","","",0,[[["self"],["t"]],["ratio"]]],[11,"rem","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"rem","","",0,[[["self"],["t"]],["ratio"]]],[11,"rem","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"rem","","",0,[[["self"],["t"]],["ratio"]]],[11,"checked_mul","","",0,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"checked_div","","",0,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"checked_add","","",0,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"checked_sub","","",0,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"neg","","",0,[[["self"]],["ratio"]]],[11,"zero","","",0,[[],["ratio"]]],[11,"is_zero","","",0,[[["self"]],["bool"]]],[11,"one","","",0,[[],["ratio"]]],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,[[["str"],["u32"]],["result",["ratio","parseratioerror"]]]],[11,"abs","","",0,[[["self"]],["ratio"]]],[11,"abs_sub","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"signum","","",0,[[["self"]],["ratio"]]],[11,"is_positive","","",0,[[["self"]],["bool"]]],[11,"is_negative","","",0,[[["self"]],["bool"]]],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,[[["self"],["formatter"]],["result"]]],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,[[["str"]],["result",["ratio","parseratioerror"]]]],[11,"into","","",0,N],[11,"clone","","",1,[[["self"]],["parseratioerror"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["parseratioerror"]],["bool"]]],[11,"ne","","",1,[[["self"],["parseratioerror"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"approximate_float","","",0,[[["f"]],["option",["ratio"]]]]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_traits"]={"doc":"Numeric traits for generic mathematics","items":[[8,"Bounded","num_traits","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",0,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",0,[[],["self"]]],[8,"Float","","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",1,[[],["self"]]],[10,"infinity","","Returns the infinite value.",1,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",1,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",1,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",1,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",1,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",1,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",1,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",1,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",1,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",1,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",1,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",1,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",1,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",1,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",1,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",1,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",1,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",1,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",1,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",1,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",1,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",1,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",1,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",1,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",2,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",2,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",2,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",2,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",2,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",2,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,[[],["self"]]],[8,"Zero","","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,[[["self"]],["bool"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,[[["self"],["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,[[["self"],["u32"]],["option"]]],[8,"WrappingAdd","","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,[[["self"],["self"]],["self"]]],[8,"Saturating","","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",15,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",15,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",15,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[["self"]],["t"]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",17,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f64"]],["option"]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",18,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",18,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,[[["self"]],["option",["f64"]]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,[[["t"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[8,"PrimInt","","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",20,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,[[["self"],["u32"]],["self"]]],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",N,N],[16,"FromStrRadixErr","","",21,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",21,[[["str"],["u32"]],["result"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",N,N],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",N,N],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",N,N],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",N,N],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",N,N],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",N,N],[4,"FloatErrorKind","","",N,N],[13,"Empty","","",22,N],[13,"Invalid","","",22,N],[3,"ParseFloatError","","",N,N],[12,"kind","","",23,N],[5,"clamp","","A value bounded by a minimum and a maximum",N,[[["t"],["t"],["t"]],["t"]]],[0,"identities","","",N,N],[8,"Zero","num_traits::identities","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,[[["self"]],["bool"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[0,"sign","num_traits","",N,N],[8,"Signed","num_traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",15,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",15,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",15,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[0,"ops","num_traits","",N,N],[0,"saturating","num_traits::ops","",N,N],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[0,"checked","num_traits::ops","",N,N],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,[[["self"],["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,[[["self"],["u32"]],["option"]]],[0,"wrapping","num_traits::ops","",N,N],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,[[["self"],["self"]],["self"]]],[0,"bounds","num_traits","",N,N],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",0,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",0,[[],["self"]]],[0,"float","num_traits","",N,N],[8,"Float","num_traits::float","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",1,[[],["self"]]],[10,"infinity","","Returns the infinite value.",1,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",1,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",1,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",1,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",1,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",1,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",1,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",1,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",1,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",1,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",1,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",1,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",1,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",1,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",1,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",1,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",1,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",1,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",1,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",1,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",1,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",1,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",1,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",1,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",2,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",2,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",2,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",2,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",2,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",2,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,[[],["self"]]],[0,"real","num_traits","",N,N],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",N,N],[10,"min_value","","Returns the smallest finite value that this type can represent.",24,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",24,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",24,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",24,[[],["self"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",24,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",24,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",24,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",24,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",24,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",24,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",24,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",24,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",24,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",24,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",24,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",24,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a real number power.",24,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",24,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",24,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",24,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",24,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",24,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",24,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",24,[[["self"]],["self"]]],[10,"to_degrees","","Converts radians to degrees.",24,[[["self"]],["self"]]],[10,"to_radians","","Converts degrees to radians.",24,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",24,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",24,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",24,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",24,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",24,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",24,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",24,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",24,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",24,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",24,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",24,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",24,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",24,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",24,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",24,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",24,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",24,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",24,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",24,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",24,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",24,[[["self"]],["self"]]],[0,"cast","num_traits","",N,N],[8,"AsPrimitive","num_traits::cast","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[["self"]],["t"]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",17,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f64"]],["option"]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",18,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",18,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,[[["self"]],["option",["f64"]]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,[[["t"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[0,"int","num_traits","",N,N],[8,"PrimInt","num_traits::int","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",20,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,[[["self"],["u32"]],["self"]]],[0,"pow","num_traits","",N,N],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[11,"fmt","num_traits","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]]],"paths":[[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingSub"],[8,"Saturating"],[8,"Signed"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"ToPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"Real"]]};
searchIndex["ordered_float"]={"doc":"Wrappers for total order on Floats.","items":[[3,"OrderedFloat","ordered_float","A wrapper around Floats providing an implementation of Ord and Hash.",N,N],[12,"0","","",0,N],[3,"NotNaN","","A wrapper around Floats providing an implementation of Ord and Hash.",N,N],[3,"FloatIsNaN","","An error indicating an attempt to construct NotNaN from a NaN",N,N],[11,"partial_cmp","","",0,[[["self"],["orderedfloat"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["orderedfloat"]],["bool"]]],[11,"le","","",0,[[["self"],["orderedfloat"]],["bool"]]],[11,"gt","","",0,[[["self"],["orderedfloat"]],["bool"]]],[11,"ge","","",0,[[["self"],["orderedfloat"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["orderedfloat"]]],[11,"clone","","",0,[[["self"]],["orderedfloat"]]],[11,"into_inner","","Get the value out.",0,[[["self"]],["t"]]],[11,"as_ref","","",0,[[["self"]],["t"]]],[11,"as_mut","","",0,[[["self"]],["t"]]],[11,"cmp","","",0,[[["self"],["orderedfloat"]],["ordering"]]],[11,"eq","","",0,[[["self"],["orderedfloat"]],["bool"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"into","","",0,[[["self"]],["f32"]]],[11,"into","","",0,[[["self"]],["f64"]]],[11,"from","","",0,[[["t"]],["self"]]],[11,"deref","","",0,N],[11,"deref_mut","","",0,N],[11,"partial_cmp","","",1,[[["self"],["notnan"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["notnan"]],["bool"]]],[11,"le","","",1,[[["self"],["notnan"]],["bool"]]],[11,"gt","","",1,[[["self"],["notnan"]],["bool"]]],[11,"ge","","",1,[[["self"],["notnan"]],["bool"]]],[11,"eq","","",1,[[["self"],["notnan"]],["bool"]]],[11,"ne","","",1,[[["self"],["notnan"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"default","","",1,[[],["notnan"]]],[11,"clone","","",1,[[["self"]],["notnan"]]],[11,"new","","Create a NotNaN value.",1,[[["t"]],["result",["floatisnan"]]]],[11,"unchecked_new","","Create a NotNaN value from a value that is guaranteed to not be NaN",1,[[["t"]],["self"]]],[11,"into_inner","","Get the value out.",1,[[["self"]],["t"]]],[11,"as_ref","","",1,[[["self"]],["t"]]],[11,"cmp","","",1,[[["self"],["notnan"]],["ordering"]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"into","","",1,[[["self"]],["f32"]]],[11,"into","","",1,[[["self"]],["f64"]]],[11,"from","","",1,[[["t"]],["self"]]],[11,"deref","","",1,N],[11,"add","","",1,[[["self"],["self"]],["self"]]],[11,"add","","",1,[[["self"],["t"]],["self"]]],[11,"add_assign","","",1,[[["self"],["self"]]]],[11,"add_assign","","",1,[[["self"],["self"]]]],[11,"add_assign","","",1,[[["self"],["f64"]]]],[11,"add_assign","","",1,[[["self"],["f32"]]]],[11,"sub","","",1,[[["self"],["self"]],["self"]]],[11,"sub","","",1,[[["self"],["t"]],["self"]]],[11,"sub_assign","","",1,[[["self"],["self"]]]],[11,"sub_assign","","",1,[[["self"],["self"]]]],[11,"sub_assign","","",1,[[["self"],["f64"]]]],[11,"sub_assign","","",1,[[["self"],["f32"]]]],[11,"mul","","",1,[[["self"],["self"]],["self"]]],[11,"mul","","",1,[[["self"],["t"]],["self"]]],[11,"mul_assign","","",1,[[["self"],["self"]]]],[11,"mul_assign","","",1,[[["self"],["self"]]]],[11,"mul_assign","","",1,[[["self"],["f64"]]]],[11,"mul_assign","","",1,[[["self"],["f32"]]]],[11,"div","","",1,[[["self"],["self"]],["self"]]],[11,"div","","",1,[[["self"],["t"]],["self"]]],[11,"div_assign","","",1,[[["self"],["self"]]]],[11,"div_assign","","",1,[[["self"],["self"]]]],[11,"div_assign","","",1,[[["self"],["f64"]]]],[11,"div_assign","","",1,[[["self"],["f32"]]]],[11,"rem","","",1,[[["self"],["self"]],["self"]]],[11,"rem","","",1,[[["self"],["t"]],["self"]]],[11,"rem_assign","","",1,[[["self"],["self"]]]],[11,"rem_assign","","",1,[[["self"],["self"]]]],[11,"rem_assign","","",1,[[["self"],["f64"]]]],[11,"rem_assign","","",1,[[["self"],["f32"]]]],[11,"neg","","",1,[[["self"]],["self"]]],[11,"clone","","",2,[[["self"]],["floatisnan"]]],[11,"eq","","",2,[[["self"],["floatisnan"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"into","","",2,[[["self"]],["error"]]]],"paths":[[3,"OrderedFloat"],[3,"NotNaN"],[3,"FloatIsNaN"]]};
searchIndex["png"]={"doc":"PNG encoder and decoder This crate contains a PNG encoder and decoder. It supports reading of single lines or whole frames. ## The decoder The most important types for decoding purposes are `Decoder` and `Reader`. They both wrap a `std::io::Read`. `Decoder` serves as a builder for `Reader`. Calling `Decoder::read_info` reads from the `Read` until the image data is reached. ### Using the decoder     use std::fs::File;","items":[[3,"PixelDimensions","png","Pixel dimensions information",N,N],[12,"xppu","","Pixels per unit, X axis",0,N],[12,"yppu","","Pixels per unit, Y axis",0,N],[12,"unit","","Either Meter or Unspecified",0,N],[3,"FrameControl","","Frame control information",N,N],[12,"sequence_number","","Sequence number of the animation chunk, starting from 0",1,N],[12,"width","","Width of the following frame",1,N],[12,"height","","Height of the following frame",1,N],[12,"x_offset","","X position at which to render the following frame",1,N],[12,"y_offset","","Y position at which to render the following frame",1,N],[12,"delay_num","","Frame delay fraction numerator",1,N],[12,"delay_den","","Frame delay fraction denominator",1,N],[12,"dispose_op","","Type of frame area disposal to be done after rendering this frame",1,N],[12,"blend_op","","Type of frame area rendering for this frame",1,N],[3,"AnimationControl","","Animation control information",N,N],[12,"num_frames","","Number of frames",2,N],[12,"num_plays","","Number of times to loop this APNG.  0 indicates infinite looping.",2,N],[3,"Info","","PNG info struct",N,N],[12,"width","","",3,N],[12,"height","","",3,N],[12,"bit_depth","","",3,N],[12,"color_type","","",3,N],[12,"interlaced","","",3,N],[12,"trns","","",3,N],[12,"pixel_dims","","",3,N],[12,"palette","","",3,N],[12,"frame_control","","",3,N],[12,"animation_control","","",3,N],[3,"Transformations","","Output transformations",N,N],[3,"Decoder","","PNG Decoder",N,N],[3,"Reader","","PNG reader (mostly high-level interface)",N,N],[3,"OutputInfo","","Output info",N,N],[12,"width","","",4,N],[12,"height","","",4,N],[12,"color_type","","",4,N],[12,"bit_depth","","",4,N],[12,"line_size","","",4,N],[3,"StreamingDecoder","","PNG StreamingDecoder (low-level interface)",N,N],[3,"Encoder","","PNG Encoder",N,N],[3,"Writer","","PNG writer",N,N],[4,"ColorType","","",N,N],[13,"Grayscale","","",5,N],[13,"RGB","","",5,N],[13,"Indexed","","",5,N],[13,"GrayscaleAlpha","","",5,N],[13,"RGBA","","",5,N],[4,"BitDepth","","Bit depth of the png file",N,N],[13,"One","","",6,N],[13,"Two","","",6,N],[13,"Four","","",6,N],[13,"Eight","","",6,N],[13,"Sixteen","","",6,N],[4,"Unit","","Physical unit of the pixel dimensions",N,N],[13,"Unspecified","","",7,N],[13,"Meter","","",7,N],[4,"Decoded","","Result of the decoding process",N,N],[13,"Nothing","","Nothing decoded yet",8,N],[13,"Header","","",8,N],[13,"ChunkBegin","","",8,N],[13,"ChunkComplete","","",8,N],[13,"PixelDimensions","","",8,N],[13,"AnimationControl","","",8,N],[13,"FrameControl","","",8,N],[13,"ImageData","","Decoded raw image data.",8,N],[13,"PartialChunk","","",8,N],[13,"ImageEnd","","",8,N],[4,"DecodingError","","",N,N],[13,"IoError","","",9,N],[13,"Format","","",9,N],[13,"InvalidSignature","","",9,N],[13,"CrcMismatch","","",9,N],[12,"recover","png::DecodingError","bytes to skip to try to recover from this error",9,N],[12,"crc_val","","Stored CRC32 value",9,N],[12,"crc_sum","","Calculated CRC32 sum",9,N],[12,"chunk","","",9,N],[13,"Other","png","",9,N],[13,"CorruptFlateStream","","",9,N],[4,"EncodingError","","",N,N],[13,"IoError","","",10,N],[13,"Format","","",10,N],[0,"chunk","","Chunk types and functions",N,N],[5,"is_critical","png::chunk","Returns true if the chunk is critical.",N,[[["chunktype"]],["bool"]]],[5,"is_private","","Returns true if the chunk is private.",N,[[["chunktype"]],["bool"]]],[5,"reserved_set","","Checks whether the reserved bit of the chunk name is set. If it is set the chunk name is invalid.",N,[[["chunktype"]],["bool"]]],[5,"safe_to_copy","","Returns true if the chunk is safe to copy if unknown.",N,[[["chunktype"]],["bool"]]],[6,"ChunkType","","",N,N],[17,"IHDR","","Image header",N,N],[17,"PLTE","","Palette",N,N],[17,"IDAT","","Image data",N,N],[17,"IEND","","Image trailer",N,N],[17,"tRNS","","Transparency",N,N],[17,"bKGD","","Background colour",N,N],[17,"tIME","","Image last-modification time",N,N],[17,"pHYs","","Physical pixel dimensions",N,N],[17,"acTL","","Animation control",N,N],[17,"fcTL","","Frame control",N,N],[17,"fdAT","","Frame data",N,N],[11,"fmt","png","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"description","","",9,[[["self"]],["str"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",9,[[["error"]],["decodingerror"]]],[11,"from","","",9,[[["string"]],["decodingerror"]]],[11,"new","","Creates a new StreamingDecoder",11,[[],["streamingdecoder"]]],[11,"reset","","Resets the StreamingDecoder",11,[[["self"]]]],[11,"update","","Low level StreamingDecoder interface.",11,N],[11,"set_param","","",12,[[["self"],["decoder"]]]],[11,"buffer_size","","Returns the size needed to hold a decoded frame",4,[[["self"]],["usize"]]],[11,"new","","",13,[[["r"]],["decoder"]]],[11,"read_info","","Reads all meta data until the first IDAT chunk",13,[[["self"]],["result",["decodingerror"]]]],[11,"info","","",14,[[["self"]],["info"]]],[11,"next_frame","","Decodes the next frame into `buf`",14,N],[11,"next_row","","Returns the next processed row of the image",14,[[["self"]],["result",["option","decodingerror"]]]],[11,"next_interlaced_row","","Returns the next processed row of the image",14,[[["self"]],["result",["option","decodingerror"]]]],[11,"output_color_type","","Returns the color type and the number of bits per sample of the data returned by `Reader::next_row` and Reader::frames`.",14,N],[11,"output_buffer_size","","Returns the number of bytes required to hold a deinterlaced image frame that is decoded using the given input transformations.",14,[[["self"]],["usize"]]],[11,"output_line_size","","Returns the number of bytes required to hold a deinterlaced row.",14,[[["self"],["u32"]],["usize"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"description","","",10,[[["self"]],["str"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",10,[[["error"]],["encodingerror"]]],[11,"new","","",15,[[["w"],["u32"],["u32"]],["encoder"]]],[11,"write_header","","",15,[[["self"]],["result",["writer","encodingerror"]]]],[11,"set_param","","",5,[[["self"],["encoder"]]]],[11,"set_param","","",6,[[["self"],["encoder"]]]],[11,"write_chunk","","",16,N],[11,"write_image_data","","Writes the image data.",16,N],[11,"drop","","",16,[[["self"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["colortype"]]],[11,"eq","","",5,[[["self"],["colortype"]],["bool"]]],[11,"samples","","Returns the number of samples used per pixel of `ColorType`",5,[[["self"]],["usize"]]],[11,"from_u8","","u8 -> Self. Temporary solution until Rust provides a canonical one.",5,[[["u8"]],["option",["colortype"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["bitdepth"]]],[11,"eq","","",6,[[["self"],["bitdepth"]],["bool"]]],[11,"from_u8","","u8 -> Self. Temporary solution until Rust provides a canonical one.",6,[[["u8"]],["option",["bitdepth"]]]],[11,"clone","","",0,[[["self"]],["pixeldimensions"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["unit"]]],[11,"eq","","",7,[[["self"],["unit"]],["bool"]]],[11,"from_u8","","u8 -> Self. Temporary solution until Rust provides a canonical one.",7,[[["u8"]],["option",["unit"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["animationcontrol"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["info"]]],[11,"size","","Size of the image",3,N],[11,"is_animated","","Returns true if the image is an APNG image.",3,[[["self"]],["bool"]]],[11,"animation_control","","Returns the frame control information of the image",3,[[["self"]],["option",["animationcontrol"]]]],[11,"frame_control","","Returns the frame control information of the current frame",3,[[["self"]],["option",["framecontrol"]]]],[11,"bits_per_pixel","","Returns the bits per pixel",3,[[["self"]],["usize"]]],[11,"bytes_per_pixel","","Returns the bytes per pixel",3,[[["self"]],["usize"]]],[11,"raw_bytes","","Returns the number of bytes needed for one deinterlaced image",3,[[["self"]],["usize"]]],[11,"raw_row_length","","Returns the number of bytes needed for one deinterlaced row ",3,[[["self"]],["usize"]]],[11,"raw_row_length_from_width","","Returns the number of bytes needed for one deinterlaced row of width `width`",3,[[["self"],["u32"]],["usize"]]],[11,"eq","","",12,[[["self"],["transformations"]],["bool"]]],[11,"ne","","",12,[[["self"],["transformations"]],["bool"]]],[11,"clone","","",12,[[["self"]],["transformations"]]],[11,"partial_cmp","","",12,[[["self"],["transformations"]],["option",["ordering"]]]],[11,"lt","","",12,[[["self"],["transformations"]],["bool"]]],[11,"le","","",12,[[["self"],["transformations"]],["bool"]]],[11,"gt","","",12,[[["self"],["transformations"]],["bool"]]],[11,"ge","","",12,[[["self"],["transformations"]],["bool"]]],[11,"cmp","","",12,[[["self"],["transformations"]],["ordering"]]],[11,"hash","","",12,N],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[18,"IDENTITY","","No transformation",12,N],[18,"STRIP_16","","Strip 16-bit samples to 8 bits",12,N],[18,"STRIP_ALPHA","","Discard the alpha channel",12,N],[18,"PACKING","","Expand 1; 2 and 4-bit samples to bytes",12,N],[18,"PACKSWAP","","Change order of packed pixels to LSB first",12,N],[18,"EXPAND","","Expand paletted images to RGB; expand grayscale images of less than 8-bit depth to 8-bit depth; and expand tRNS chunks to alpha channels.",12,N],[18,"INVERT_MONO","","Invert monochrome images",12,N],[18,"SHIFT","","Normalize pixels to the sBIT depth",12,N],[18,"BGR","","Flip RGB to BGR; RGBA to BGRA",12,N],[18,"SWAP_ALPHA","","Flip RGBA to ARGB or GA to AG",12,N],[18,"SWAP_ENDIAN","","Byte-swap 16-bit samples",12,N],[18,"INVERT_ALPHA","","Change alpha from opacity to transparency",12,N],[18,"STRIP_FILLER","","",12,N],[18,"STRIP_FILLER_BEFORE","","",12,N],[18,"STRIP_FILLER_AFTER","","",12,N],[18,"GRAY_TO_RGB","","",12,N],[18,"EXPAND_16","","",12,N],[18,"SCALE_16","","",12,N],[11,"empty","","Returns an empty set of flags.",12,[[],["transformations"]]],[11,"all","","Returns the set containing all flags.",12,[[],["transformations"]]],[11,"bits","","Returns the raw value of the flags currently stored.",12,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",12,[[["u32"]],["option",["transformations"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",12,[[["u32"]],["transformations"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",12,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",12,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",12,[[["self"],["transformations"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",12,[[["self"],["transformations"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",12,[[["self"],["transformations"]]]],[11,"remove","","Removes the specified flags in-place.",12,[[["self"],["transformations"]]]],[11,"toggle","","Toggles the specified flags in-place.",12,[[["self"],["transformations"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",12,[[["self"],["transformations"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",12,[[["self"],["transformations"]],["transformations"]]],[11,"bitor_assign","","Adds the set of flags.",12,[[["self"],["transformations"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",12,[[["self"],["transformations"]],["transformations"]]],[11,"bitxor_assign","","Toggles the set of flags.",12,[[["self"],["transformations"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",12,[[["self"],["transformations"]],["transformations"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",12,[[["self"],["transformations"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",12,[[["self"],["transformations"]],["transformations"]]],[11,"sub_assign","","Disables all flags enabled in the set.",12,[[["self"],["transformations"]]]],[11,"not","","Returns the complement of this set of flags.",12,[[["self"]],["transformations"]]],[11,"extend","","",12,[[["self"],["t"]]]],[11,"from_iter","","",12,[[["t"]],["transformations"]]],[8,"Parameter","","Configuration parameter trait",N,N],[10,"set_param","","",17,[[["self"],["object"]]]],[8,"HasParameters","","Object has parameters",N,N],[11,"set","","",18,[[["self"],["t"]],["self"]]],[11,"set","","",18,[[["self"],["t"]],["self"]]]],"paths":[[3,"PixelDimensions"],[3,"FrameControl"],[3,"AnimationControl"],[3,"Info"],[3,"OutputInfo"],[4,"ColorType"],[4,"BitDepth"],[4,"Unit"],[4,"Decoded"],[4,"DecodingError"],[4,"EncodingError"],[3,"StreamingDecoder"],[3,"Transformations"],[3,"Decoder"],[3,"Reader"],[3,"Encoder"],[3,"Writer"],[8,"Parameter"],[8,"HasParameters"]]};
searchIndex["proc_macro2"]={"doc":"A \"shim crate\" intended to multiplex the [`proc_macro`] API on to stable Rust.","items":[[3,"TokenStream","proc_macro2","An abstract stream of tokens, or more concretely a sequence of token trees.",N,N],[3,"LexError","","Error returned from `TokenStream::from_str`.",N,N],[3,"Span","","A region of source code, along with macro expansion information.",N,N],[3,"Group","","A delimited token stream.",N,N],[3,"Punct","","An `Punct` is an single punctuation character like `+`, `-` or `#`.",N,N],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",N,N],[3,"Literal","","A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).",N,N],[4,"TokenTree","","A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).",N,N],[13,"Group","","A token stream surrounded by bracket delimiters.",0,N],[13,"Ident","","An identifier.",0,N],[13,"Punct","","A single punctuation character (`+`, `,`, `$`, etc.).",0,N],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.",0,N],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",N,N],[13,"Parenthesis","","`( ... )`",1,N],[13,"Brace","","`{ ... }`",1,N],[13,"Bracket","","`[ ... ]`",1,N],[13,"None","","`Ø ... Ø`",1,N],[4,"Spacing","","Whether an `Punct` is followed immediately by another `Punct` or followed by another token or whitespace.",N,N],[13,"Alone","","E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.",2,N],[13,"Joint","","E.g. `+` is `Joint` in `+=` or `'#`.",2,N],[0,"token_stream","","Public implementation details for the `TokenStream` type, such as iterators.",N,N],[3,"IntoIter","proc_macro2::token_stream","An iterator over `TokenStream`'s `TokenTree`s.",N,N],[11,"next","","",3,[[["self"]],["option",["tokentree"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"into_iter","proc_macro2","",4,[[["self"]],["intoiter"]]],[11,"clone","","",4,[[["self"]],["tokenstream"]]],[11,"new","","Returns an empty `TokenStream` containing no token trees.",4,[[],["tokenstream"]]],[11,"empty","","",4,[[],["tokenstream"]]],[11,"is_empty","","Checks if this `TokenStream` is empty.",4,[[["self"]],["bool"]]],[11,"default","","",4,[[],["self"]]],[11,"from_str","","",4,[[["str"]],["result",["tokenstream","lexerror"]]]],[11,"from","","",4,[[["tokenstream"]],["tokenstream"]]],[11,"extend","","",4,[[["self"],["i"]]]],[11,"from_iter","","",4,[[["i"]],["self"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["span"]]],[11,"call_site","","The span of the invocation of the current procedural macro.",6,[[],["span"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["tokentree"]]],[11,"span","","Returns the span of this tree, delegating to the `span` method of the contained token or a delimited stream.",0,[[["self"]],["span"]]],[11,"set_span","","Configures the span for only this token.",0,[[["self"],["span"]]]],[11,"from","","",0,[[["group"]],["tokentree"]]],[11,"from","","",0,[[["ident"]],["tokentree"]]],[11,"from","","",0,[[["punct"]],["tokentree"]]],[11,"from","","",0,[[["literal"]],["tokentree"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["delimiter"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["delimiter"]],["bool"]]],[11,"new","","Creates a new `Group` with the given delimiter and token stream.",7,[[["delimiter"],["tokenstream"]],["group"]]],[11,"delimiter","","Returns the delimiter of this `Group`",7,[[["self"]],["delimiter"]]],[11,"stream","","Returns the `TokenStream` of tokens that are delimited in this `Group`.",7,[[["self"]],["tokenstream"]]],[11,"span","","Returns the span for the delimiters of this token stream, spanning the entire `Group`.",7,[[["self"]],["span"]]],[11,"set_span","","Configures the span for this `Group`'s delimiters, but not its internal tokens.",7,[[["self"],["span"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["punct"]]],[11,"clone","","",2,[[["self"]],["spacing"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["spacing"]],["bool"]]],[11,"new","","Creates a new `Punct` from the given character and spacing.",8,[[["char"],["spacing"]],["punct"]]],[11,"as_char","","Returns the value of this punctuation character as `char`.",8,[[["self"]],["char"]]],[11,"spacing","","Returns the spacing of this punctuation character, indicating whether it's immediately followed by another `Punct` in the token stream, so they can potentially be combined into a multicharacter operator (`Joint`), or it's followed by some other token or whitespace (`Alone`) so the operator has certainly ended.",8,[[["self"]],["spacing"]]],[11,"span","","Returns the span for this punctuation character.",8,[[["self"]],["span"]]],[11,"set_span","","Configure the span for this punctuation character.",8,[[["self"],["span"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["ident"]]],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",9,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",9,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",9,[[["self"],["span"]]]],[11,"eq","","",9,[[["self"],["ident"]],["bool"]]],[11,"eq","","",9,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["ident"]],["option",["ordering"]]]],[11,"cmp","","",9,[[["self"],["ident"]],["ordering"]]],[11,"hash","","",9,[[["self"],["h"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["literal"]]],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u8"]],["literal"]]],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u16"]],["literal"]]],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u32"]],["literal"]]],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u64"]],["literal"]]],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["usize"]],["literal"]]],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i8"]],["literal"]]],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i16"]],["literal"]]],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i32"]],["literal"]]],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i64"]],["literal"]]],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["isize"]],["literal"]]],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u8"]],["literal"]]],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u16"]],["literal"]]],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u32"]],["literal"]]],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u64"]],["literal"]]],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["usize"]],["literal"]]],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i8"]],["literal"]]],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i16"]],["literal"]]],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i32"]],["literal"]]],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i64"]],["literal"]]],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["isize"]],["literal"]]],[11,"f64_unsuffixed","","",10,[[["f64"]],["literal"]]],[11,"f64_suffixed","","",10,[[["f64"]],["literal"]]],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",10,[[["f32"]],["literal"]]],[11,"f32_suffixed","","",10,[[["f32"]],["literal"]]],[11,"string","","",10,[[["str"]],["literal"]]],[11,"character","","",10,[[["char"]],["literal"]]],[11,"byte_string","","",10,N],[11,"span","","",10,[[["self"]],["span"]]],[11,"set_span","","",10,[[["self"],["span"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"IntoIter"],[3,"TokenStream"],[3,"LexError"],[3,"Span"],[3,"Group"],[3,"Punct"],[3,"Ident"],[3,"Literal"]]};
searchIndex["quick_error"]={"doc":"A macro which makes errors easy to write","items":[[3,"Context","quick_error","Generic context type",N,N],[12,"0","","",0,N],[12,"1","","",0,N],[8,"ResultExt","","Result extension trait adding a `context` method",N,N],[10,"context","","The method is use to add context information to current operation",1,[[["self"],["x"]],["result",["context"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[14,"quick_error","","Main macro that does all the work",N,N]],"paths":[[3,"Context"],[8,"ResultExt"]]};
searchIndex["quickcheck"]={"doc":"This crate is a port of Haskell's QuickCheck.","items":[[8,"Rng","quickcheck","A random number generator.",N,N],[10,"next_u32","","Return the next random u32.",0,[[["self"]],["u32"]]],[11,"next_u64","","Return the next random u64.",0,[[["self"]],["u64"]]],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",0,[[["self"]],["f32"]]],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",0,[[["self"]],["f64"]]],[11,"fill_bytes","","Fill `dest` with random data.",0,N],[11,"gen","","Return a random value of a `Rand` type.",0,[[["self"]],["t"]]],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",0,[[["self"]],["generator"]]],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",0,[[["self"],["t"],["t"]],["t"]]],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",0,[[["self"],["u32"]],["bool"]]],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",0,[[["self"]],["asciigenerator"]]],[11,"choose","","Return a random element from `values`.",0,N],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",0,N],[11,"shuffle","","Shuffle a mutable slice in place.",0,N],[3,"StdGen","","StdGen is the default implementation of `Gen`.",N,N],[3,"QuickCheck","","The main QuickCheck type for setting configuration and running QuickCheck.",N,N],[3,"TestResult","","Describes the status of a single instance of a test.",N,N],[5,"empty_shrinker","","Creates a shrinker with zero elements.",N,[[],["box",["iterator"]]]],[5,"single_shrinker","","Creates a shrinker with a single element.",N,[[["a"]],["box",["iterator"]]]],[5,"quickcheck","","Convenience function for running QuickCheck.",N,[[["a"]]]],[11,"new","","",1,[[["r"],["usize"]],["stdgen"]]],[11,"next_u32","","",1,[[["self"]],["u32"]]],[11,"next_u64","","",1,[[["self"]],["u64"]]],[11,"fill_bytes","","",1,N],[11,"size","","",1,[[["self"]],["usize"]]],[11,"new","","Creates a new QuickCheck value.",2,[[],["quickcheck",["stdgen"]]]],[11,"tests","","Set the number of tests to run.",2,[[["self"],["u64"]],["quickcheck"]]],[11,"with_gen","","Create a new instance of `QuickCheck` using the given generator.",2,[[["g"]],["quickcheck"]]],[11,"max_tests","","Set the maximum number of tests to run.",2,[[["self"],["u64"]],["quickcheck"]]],[11,"gen","","Set the random number generator to be used by QuickCheck.",2,[[["self"],["n"]],["quickcheck"]]],[11,"min_tests_passed","","Set the minimum number of tests that needs to pass.",2,[[["self"],["u64"]],["quickcheck"]]],[11,"quicktest","","Tests a property and returns the result.",2,[[["self"],["a"]],["result",["u64","testresult"]]]],[11,"quickcheck","","Tests a property and calls `panic!` on failure.",2,[[["self"],["a"]]]],[11,"clone","","",3,[[["self"]],["testresult"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"passed","","Produces a test result that indicates the current test has passed.",3,[[],["testresult"]]],[11,"failed","","Produces a test result that indicates the current test has failed.",3,[[],["testresult"]]],[11,"error","","Produces a test result that indicates failure from a runtime error.",3,[[["s"]],["testresult"]]],[11,"discard","","Produces a test result that instructs `quickcheck` to ignore it. This is useful for restricting the domain of your properties. When a test is discarded, `quickcheck` will replace it with a fresh one (up to a certain limit).",3,[[],["testresult"]]],[11,"from_bool","","Converts a `bool` to a `TestResult`. A `true` value indicates that the test has passed and a `false` value indicates that the test has failed.",3,[[["bool"]],["testresult"]]],[11,"must_fail","","Tests if a \"procedure\" fails when executed. The test passes only if `f` generates a task failure during its execution.",3,[[["f"]],["testresult"]]],[11,"is_failure","","Returns `true` if and only if this test result describes a failing test.",3,[[["self"]],["bool"]]],[11,"is_error","","Returns `true` if and only if this test result describes a failing test as a result of a run time error.",3,[[["self"]],["bool"]]],[11,"result","","",3,[[["self"],["g"]],["testresult"]]],[8,"Arbitrary","","`Arbitrary` describes types whose values can be randomly generated and shrunk.",N,N],[10,"arbitrary","","",4,[[["g"]],["self"]]],[11,"shrink","","",4,[[["self"]],["box",["iterator"]]]],[8,"Gen","","`Gen` wraps a `rand::Rng` with parameters to control the distribution of random values.",N,N],[10,"size","","",5,[[["self"]],["usize"]]],[8,"Testable","","`Testable` describes types (e.g., a function) whose values can be tested.",N,N],[10,"result","","",6,[[["self"],["g"]],["testresult"]]],[14,"quickcheck","","A macro for writing quickcheck tests.",N,N],[11,"shrink","","",4,[[["self"]],["box",["iterator"]]]]],"paths":[[8,"Rng"],[3,"StdGen"],[3,"QuickCheck"],[3,"TestResult"],[8,"Arbitrary"],[8,"Gen"],[8,"Testable"]]};
searchIndex["quote"]={"doc":"This crate provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code.","items":[[8,"TokenStreamExt","quote","TokenStream extension trait with methods for appending tokens.",N,N],[10,"append","","",0,[[["self"],["u"]]]],[10,"append_all","","",0,[[["self"],["i"]]]],[10,"append_separated","","",0,[[["self"],["i"],["u"]]]],[10,"append_terminated","","",0,[[["self"],["i"],["u"]]]],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",N,N],[10,"to_tokens","","Write `self` to the given `TokenStream`.",1,[[["self"],["tokenstream"]]]],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,[[["self"]],["tokenstream"]]],[14,"quote","","The whole point.",N,N],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",N,N],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,[[["self"]],["tokenstream"]]]],"paths":[[8,"TokenStreamExt"],[8,"ToTokens"]]};
searchIndex["rand"]={"doc":"Utilities for random number generation","items":[[8,"RngCore","rand","The core of a random number generator.",N,N],[10,"next_u32","","Return the next random `u32`.",0,[[["self"]],["u32"]]],[10,"next_u64","","Return the next random `u64`.",0,[[["self"]],["u64"]]],[10,"fill_bytes","","Fill `dest` with random data.",0,N],[10,"try_fill_bytes","","Fill `dest` entirely with random data.",0,N],[8,"CryptoRng","","A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`] implementation is supposed to be cryptographically secure.",N,N],[8,"SeedableRng","","A random number generator that can be explicitly seeded.",N,N],[16,"Seed","","Seed type, which is restricted to types mutably-dereferencable as `u8` arrays (we recommend `[u8; N]` for some `N`).",1,N],[10,"from_seed","","Create a new PRNG using the given seed.",1,N],[11,"from_rng","","Create a new PRNG seeded from another `Rng`.",1,[[["r"]],["result",["error"]]]],[4,"ErrorKind","","Error kind which can be matched over.",N,N],[13,"Unavailable","","Feature is not available; not recoverable.",2,N],[13,"Unexpected","","General failure; there may be a chance of recovery on retry.",2,N],[13,"Transient","","A transient failure which likely can be resolved or worked around.",2,N],[13,"NotReady","","Not ready yet: recommended to try again a little later.",2,N],[3,"Error","","Error type of random number generators",N,N],[12,"kind","","The error kind",3,N],[12,"msg","","The error message",3,N],[3,"Generator","","Iterator which will generate a stream of random items.",N,N],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",N,N],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`, or cached locally, e.g. `let mut rng = thread_rng();`.",N,[[],["threadrng"]]],[5,"weak_rng","","DEPRECATED: use [`SmallRng`] instead.",N,[[],["xorshiftrng"]]],[5,"random","","Generates a random value using the thread-local random number generator.",N,[[],["t"]]],[5,"sample","","DEPRECATED: use `seq::sample_iter` instead.",N,[[["r"],["i"],["usize"]],["vec"]]],[0,"distributions","","Generating random samples from probability distributions.",N,N],[3,"Alphanumeric","rand::distributions","Sample a `char`, uniformly distributed over ASCII letters and numbers: a-z, A-Z and 0-9.",N,N],[3,"Uniform","","Sample values uniformly between two bounds.",N,N],[3,"OpenClosed01","","A distribution to sample floating point numbers uniformly in the half-open interval `(0, 1]`, i.e. including 1 but not 0.",N,N],[3,"Open01","","A distribution to sample floating point numbers uniformly in the open interval `(0, 1)`, i.e. not including either endpoint.",N,N],[3,"Gamma","","The Gamma distribution `Gamma(shape, scale)` distribution.",N,N],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",N,N],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",N,N],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",N,N],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",N,N],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",N,N],[3,"StandardNormal","","Samples floating-point numbers according to the normal distribution `N(0, 1)` (a.k.a. a standard normal, or Gaussian). This is equivalent to `Normal::new(0.0, 1.0)` but faster.",N,N],[3,"Exp","","The exponential distribution `Exp(lambda)`.",N,N],[3,"Exp1","","Samples floating-point numbers according to the exponential distribution, with rate parameter `λ = 1`. This is equivalent to `Exp::new(1.0)` or sampling with `-rng.gen::<f64>().ln()`, but faster.",N,N],[3,"Pareto","","Samples floating-point numbers according to the Pareto distribution",N,N],[3,"Poisson","","The Poisson distribution `Poisson(lambda)`.",N,N],[3,"Binomial","","The binomial distribution `Binomial(n, p)`.",N,N],[3,"Bernoulli","","The Bernoulli distribution.",N,N],[3,"Cauchy","","The Cauchy distribution `Cauchy(median, scale)`.",N,N],[3,"DistIter","","An iterator that generates random values of `T` with distribution `D`, using `R` as the source of randomness.",N,N],[3,"Standard","","A generic random value distribution, implemented for many primitive types. Usually generates values with a numerically uniform distribution, and with a range appropriate to the type.",N,N],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",N,N],[12,"weight","","The numerical weight of this item",4,N],[12,"item","","The actual item which is being weighted",4,N],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",N,N],[0,"uniform","","A distribution uniformly sampling numbers within a given range.",N,N],[3,"Uniform","rand::distributions::uniform","Sample values uniformly between two bounds.",N,N],[3,"UniformInt","","The back-end implementing [`UniformSampler`] for integer types.",N,N],[3,"UniformFloat","","The back-end implementing [`UniformSampler`] for floating-point types.",N,N],[3,"UniformDuration","","The back-end implementing [`UniformSampler`] for `Duration`.",N,N],[8,"SampleUniform","","Helper trait for creating objects using the correct implementation of [`UniformSampler`] for the sampling type.",N,N],[16,"Sampler","","The `UniformSampler` implementation supporting type `X`.",5,N],[8,"UniformSampler","","Helper trait handling actual uniform sampling.",N,N],[16,"X","","The type sampled by this implementation.",6,N],[10,"new","","Construct self, with inclusive lower bound and exclusive upper bound `[low, high)`.",6,N],[10,"new_inclusive","","Construct self, with inclusive bounds `[low, high]`.",6,N],[10,"sample","","Sample a value.",6,N],[11,"sample_single","","Sample a single value uniformly from a range with inclusive lower bound and exclusive upper bound `[low, high)`.",6,N],[11,"clone","","",7,[[["self"]],["uniform"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `Uniform` instance which samples uniformly from the half open range `[low, high)` (excluding `high`). Panics if `low >= high`.",7,[[["x"],["x"]],["uniform"]]],[11,"new_inclusive","","Create a new `Uniform` instance which samples uniformly from the closed range `[low, high]` (inclusive). Panics if `low > high`.",7,[[["x"],["x"]],["uniform"]]],[11,"sample","","",7,[[["self"],["r"]],["x"]]],[11,"from","","",7,[[["range"]],["uniform"]]],[11,"clone","","",8,[[["self"]],["uniformint"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"clone","","",9,[[["self"]],["uniformfloat"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"new","","",9,N],[11,"new_inclusive","","",9,N],[11,"sample","","",9,N],[11,"sample_single","","",9,N],[11,"new","","",9,N],[11,"new_inclusive","","",9,N],[11,"sample","","",9,N],[11,"sample_single","","",9,N],[11,"clone","","",10,[[["self"]],["uniformduration"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"new","","",10,[[["duration"],["duration"]],["uniformduration"]]],[11,"new_inclusive","","",10,[[["duration"],["duration"]],["uniformduration"]]],[11,"sample","","",10,[[["self"],["r"]],["duration"]]],[11,"clone","rand::distributions","",11,[[["self"]],["gamma"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",11,[[["f64"],["f64"]],["gamma"]]],[11,"sample","","",11,[[["self"],["r"]],["f64"]]],[11,"clone","","",12,[[["self"]],["chisquared"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",12,[[["f64"]],["chisquared"]]],[11,"sample","","",12,[[["self"],["r"]],["f64"]]],[11,"clone","","",13,[[["self"]],["fisherf"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",13,[[["f64"],["f64"]],["fisherf"]]],[11,"sample","","",13,[[["self"],["r"]],["f64"]]],[11,"clone","","",14,[[["self"]],["studentt"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",14,[[["f64"]],["studentt"]]],[11,"sample","","",14,[[["self"],["r"]],["f64"]]],[11,"clone","","",15,[[["self"]],["standardnormal"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"sample","","",15,[[["self"],["r"]],["f64"]]],[11,"clone","","",16,[[["self"]],["normal"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",16,[[["f64"],["f64"]],["normal"]]],[11,"sample","","",16,[[["self"],["r"]],["f64"]]],[11,"clone","","",17,[[["self"]],["lognormal"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",17,[[["f64"],["f64"]],["lognormal"]]],[11,"sample","","",17,[[["self"],["r"]],["f64"]]],[11,"clone","","",18,[[["self"]],["exp1"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"sample","","",18,[[["self"],["r"]],["f64"]]],[11,"clone","","",19,[[["self"]],["exp"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",19,[[["f64"]],["exp"]]],[11,"sample","","",19,[[["self"],["r"]],["f64"]]],[11,"clone","","",20,[[["self"]],["pareto"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new Pareto distribution with given `scale` and `shape`.",20,[[["f64"],["f64"]],["pareto"]]],[11,"sample","","",20,[[["self"],["r"]],["f64"]]],[11,"clone","","",21,[[["self"]],["poisson"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `Poisson` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",21,[[["f64"]],["poisson"]]],[11,"sample","","",21,[[["self"],["r"]],["u64"]]],[11,"clone","","",22,[[["self"]],["binomial"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `Binomial` with the given shape parameters `n` (number of trials) and `p` (probability of success).",22,[[["u64"],["f64"]],["binomial"]]],[11,"sample","","",22,[[["self"],["r"]],["u64"]]],[11,"clone","","",23,[[["self"]],["bernoulli"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `Bernoulli` with the given probability of success `p`.",23,[[["f64"]],["bernoulli"]]],[11,"sample","","",23,[[["self"],["r"]],["bool"]]],[11,"clone","","",24,[[["self"]],["cauchy"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `Cauchy` with the given shape parameters `median` the peak location and `scale` the scale factor. Panics if `scale <= 0`.",24,[[["f64"],["f64"]],["cauchy"]]],[11,"sample","","",24,[[["self"],["r"]],["f64"]]],[11,"clone","","",25,[[["self"]],["openclosed01"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"clone","","",26,[[["self"]],["open01"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"sample","","",27,[[["self"],["r"]],["f32"]]],[11,"sample","","",25,[[["self"],["r"]],["f32"]]],[11,"sample","","",26,[[["self"],["r"]],["f32"]]],[11,"sample","","",27,[[["self"],["r"]],["f64"]]],[11,"sample","","",25,[[["self"],["r"]],["f64"]]],[11,"sample","","",26,[[["self"],["r"]],["f64"]]],[11,"sample","","",27,[[["self"],["r"]],["u8"]]],[11,"sample","","",27,[[["self"],["r"]],["u16"]]],[11,"sample","","",27,[[["self"],["r"]],["u32"]]],[11,"sample","","",27,[[["self"],["r"]],["u64"]]],[11,"sample","","",27,[[["self"],["r"]],["usize"]]],[11,"sample","","",27,[[["self"],["r"]],["i8"]]],[11,"sample","","",27,[[["self"],["r"]],["i16"]]],[11,"sample","","",27,[[["self"],["r"]],["i32"]]],[11,"sample","","",27,[[["self"],["r"]],["i64"]]],[11,"sample","","",27,[[["self"],["r"]],["isize"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"sample","","",27,[[["self"],["r"]],["char"]]],[11,"sample","","",28,[[["self"],["r"]],["char"]]],[11,"sample","","",27,[[["self"],["r"]],["bool"]]],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,[[["self"],["r"]],["option"]]],[11,"sample","","",27,[[["self"],["r"]],["wrapping"]]],[0,"range","","DEPRECATED: Use `distributions::uniform` instead.",N,N],[11,"sample","","",29,[[["self"],["r"]],["t"]]],[11,"ind_sample","","",29,[[["self"],["r"]],["t"]]],[11,"sample","rand::distributions::uniform","",7,[[["self"],["r"]],["t"]]],[11,"ind_sample","","",7,[[["self"],["r"]],["t"]]],[11,"sample","rand::distributions","",19,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",19,[[["self"],["r"]],["f64"]]],[11,"sample","","",11,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",11,[[["self"],["r"]],["f64"]]],[11,"sample","","",12,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",12,[[["self"],["r"]],["f64"]]],[11,"sample","","",13,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",13,[[["self"],["r"]],["f64"]]],[11,"sample","","",14,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",14,[[["self"],["r"]],["f64"]]],[11,"sample","","",16,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",16,[[["self"],["r"]],["f64"]]],[11,"sample","","",17,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",17,[[["self"],["r"]],["f64"]]],[8,"Sample","","Types that can be used to create a random instance of `Support`.",N,N],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",30,[[["self"],["r"]],["support"]]],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",N,N],[10,"ind_sample","","Generate a random value.",31,[[["self"],["r"]],["support"]]],[8,"Distribution","","Types (distributions) that can be used to create a random instance of `T`.",N,N],[10,"sample","","Generate a random value of `T`, using `rng` as the source of randomness.",32,[[["self"],["r"]],["t"]]],[11,"sample_iter","","Create an iterator that generates random values of `T`, using `rng` as the source of randomness.",32,[[["self"],["r"]],["distiter"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"next","","",33,[[["self"]],["option"]]],[11,"size_hint","","",33,N],[11,"clone","","",27,[[["self"]],["standard"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["weighted"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `WeightedChoice`.",29,N],[11,"sample","","",29,[[["self"],["r"]],["t"]]],[0,"prelude","rand","Convenience re-export of common members",N,N],[0,"prng","","Pseudo-random number generators.",N,N],[3,"XorShiftRng","rand::prng","An Xorshift random number generator.",N,N],[0,"chacha","","The ChaCha random number generator.",N,N],[3,"ChaChaRng","rand::prng::chacha","A cryptographically secure random number generator that uses the ChaCha algorithm.",N,N],[3,"ChaChaCore","","The core of `ChaChaRng`, used with `BlockRng`.",N,N],[11,"clone","","",34,[[["self"]],["chacharng"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",34,[[["self"]],["u32"]]],[11,"next_u64","","",34,[[["self"]],["u64"]]],[11,"fill_bytes","","",34,N],[11,"try_fill_bytes","","",34,N],[11,"from_seed","","",34,N],[11,"from_rng","","",34,[[["r"]],["result",["error"]]]],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",34,[[],["chacharng"]]],[11,"set_stream","","Set the stream number.",34,[[["self"],["u64"]]]],[11,"clone","","",35,[[["self"]],["chachacore"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"generate","","",35,N],[11,"from_seed","","",35,N],[11,"from","","",34,[[["chachacore"]],["self"]]],[0,"hc128","rand::prng","The HC-128 random number generator.",N,N],[3,"Hc128Rng","rand::prng::hc128","A cryptographically secure random number generator that uses the HC-128 algorithm.",N,N],[3,"Hc128Core","","The core of `Hc128Rng`, used with `BlockRng`.",N,N],[11,"clone","","",36,[[["self"]],["hc128rng"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",36,[[["self"]],["u32"]]],[11,"next_u64","","",36,[[["self"]],["u64"]]],[11,"fill_bytes","","",36,N],[11,"try_fill_bytes","","",36,N],[11,"from_seed","","",36,N],[11,"from_rng","","",36,[[["r"]],["result",["error"]]]],[11,"clone","","",37,[[["self"]],["hc128core"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"generate","","",37,N],[11,"from_seed","","Create an HC-128 random number generator with a seed. The seed has to be 256 bits in length, matching the 128 bit `key` followed by 128 bit `iv` when HC-128 where to be used as a stream cipher.",37,N],[0,"isaac","rand::prng","The ISAAC random number generator.",N,N],[3,"IsaacRng","rand::prng::isaac","A random number generator that uses the ISAAC algorithm.",N,N],[3,"IsaacCore","","The core of `IsaacRng`, used with `BlockRng`.",N,N],[11,"clone","","",38,[[["self"]],["isaacrng"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",38,[[["self"]],["u32"]]],[11,"next_u64","","",38,[[["self"]],["u64"]]],[11,"fill_bytes","","",38,N],[11,"try_fill_bytes","","",38,N],[11,"from_seed","","",38,N],[11,"from_rng","","",38,[[["s"]],["result",["error"]]]],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",38,[[],["self"]]],[11,"new_from_u64","","Create an ISAAC random number generator using an `u64` as seed. If `seed == 0` this will produce the same stream of random numbers as the reference implementation when used unseeded.",38,[[["u64"]],["self"]]],[11,"clone","","",39,[[["self"]],["isaaccore"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"generate","","Refills the output buffer, `results`. See also the pseudocode desciption of the algorithm in the [`IsaacRng`] documentation.",39,[[["self"],["isaacarray"]]]],[11,"from_seed","","",39,N],[11,"from_rng","","",39,[[["r"]],["result",["error"]]]],[0,"isaac64","rand::prng","The ISAAC-64 random number generator.",N,N],[3,"Isaac64Rng","rand::prng::isaac64","A random number generator that uses ISAAC-64, the 64-bit variant of the ISAAC algorithm.",N,N],[3,"Isaac64Core","","The core of `Isaac64Rng`, used with `BlockRng`.",N,N],[11,"clone","","",40,[[["self"]],["isaac64rng"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",40,[[["self"]],["u32"]]],[11,"next_u64","","",40,[[["self"]],["u64"]]],[11,"fill_bytes","","",40,N],[11,"try_fill_bytes","","",40,N],[11,"from_seed","","",40,N],[11,"from_rng","","",40,[[["s"]],["result",["error"]]]],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",40,[[],["self"]]],[11,"new_from_u64","","Create an ISAAC-64 random number generator using an `u64` as seed. If `seed == 0` this will produce the same stream of random numbers as the reference implementation when used unseeded.",40,[[["u64"]],["self"]]],[11,"clone","","",41,[[["self"]],["isaac64core"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"generate","","Refills the output buffer, `results`. See also the pseudocode desciption of the algorithm in the [`Isaac64Rng`] documentation.",41,[[["self"],["isaacarray"]]]],[11,"new_from_u64","","Create an ISAAC-64 random number generator using an `u64` as seed. If `seed == 0` this will produce the same stream of random numbers as the reference implementation when used unseeded.",41,[[["u64"]],["self"]]],[11,"from_seed","","",41,N],[11,"from_rng","","",41,[[["r"]],["result",["error"]]]],[11,"clone","rand::prng","",42,[[["self"]],["xorshiftrng"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",42,[[],["xorshiftrng"]]],[11,"next_u32","","",42,[[["self"]],["u32"]]],[11,"next_u64","","",42,[[["self"]],["u64"]]],[11,"fill_bytes","","",42,N],[11,"try_fill_bytes","","",42,N],[11,"from_seed","","",42,N],[11,"from_rng","","",42,[[["r"]],["result",["error"]]]],[0,"rngs","rand","Random number generators and adapters for common usage:",N,N],[3,"JitterRng","rand::rngs","A true random number generator based on jitter in the CPU execution time, and jitter in memory access time.",N,N],[3,"EntropyRng","","An interface returning random data from external source(s), provided specifically for securely seeding algorithmic generators (PRNGs).",N,N],[3,"SmallRng","","An RNG recommended when small state, cheap initialization and good performance are required. The PRNG algorithm in `SmallRng` is chosen to be efficient on the current platform, without consideration for cryptography or security. The size of its state is much smaller than for [`StdRng`].",N,N],[3,"StdRng","","The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient on the current platform, to be statistically strong and unpredictable (meaning a cryptographically secure PRNG).",N,N],[3,"ThreadRng","","The type returned by [`thread_rng`], essentially just a reference to the PRNG in thread-local memory.",N,N],[3,"OsRng","","A random number generator that retrieves randomness straight from the operating system.",N,N],[4,"TimerError","","An error that can occur when [`JitterRng::test_timer`] fails.",N,N],[13,"NoTimer","","No timer available.",43,N],[13,"CoarseTimer","","Timer too coarse to use as an entropy source.",43,N],[13,"NotMonotonic","","Timer is not monotonically increasing.",43,N],[13,"TinyVariantions","","Variations of deltas of time too small.",43,N],[13,"TooManyStuck","","Too many stuck results (indicating no added entropy).",43,N],[0,"adapter","","Wrappers / adapters forming RNGs",N,N],[3,"ReadRng","rand::rngs::adapter","An RNG that reads random bytes straight from any type supporting `std::io::Read`, for example files.",N,N],[3,"ReseedingRng","","A wrapper around any PRNG which reseeds the underlying PRNG after it has generated a certain number of random bytes.",N,N],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `ReadRng` from a `Read`.",44,[[["r"]],["readrng"]]],[11,"next_u32","","",44,[[["self"]],["u32"]]],[11,"next_u64","","",44,[[["self"]],["u64"]]],[11,"fill_bytes","","",44,N],[11,"try_fill_bytes","","",44,N],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `ReseedingRng` with the given parameters.",45,[[["r"],["u64"],["rsdr"]],["self"]]],[11,"reseed","","Reseed the internal PRNG.",45,[[["self"]],["result",["error"]]]],[11,"next_u32","","",45,[[["self"]],["u32"]]],[11,"next_u64","","",45,[[["self"]],["u64"]]],[11,"fill_bytes","","",45,N],[11,"try_fill_bytes","","",45,N],[11,"clone","","",45,[[["self"]],["reseedingrng"]]],[11,"fmt","rand::rngs","",46,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `EntropyRng`.",46,[[],["self"]]],[11,"default","","",46,[[],["self"]]],[11,"next_u32","","",46,[[["self"]],["u32"]]],[11,"next_u64","","",46,[[["self"]],["u64"]]],[11,"fill_bytes","","",46,N],[11,"try_fill_bytes","","",46,N],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"clone","","",47,[[["self"]],["jitterrng"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"clone","","",43,[[["self"]],["timererror"]]],[11,"eq","","",43,[[["self"],["timererror"]],["bool"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"description","","",43,[[["self"]],["str"]]],[11,"from","rand","",3,[[["timererror"]],["error"]]],[11,"new","rand::rngs","Create a new `JitterRng`. Makes use of `std::time` for a timer, or a platform-specific function with higher accuracy if necessary and available.",47,[[],["result",["jitterrng","timererror"]]]],[11,"new_with_timer","","Create a new `JitterRng`. A custom timer can be supplied, making it possible to use `JitterRng` in `no_std` environments.",47,N],[11,"set_rounds","","Configures how many rounds are used to generate each 64-bit value. This must be greater than zero, and has a big impact on performance and output quality.",47,[[["self"],["u8"]]]],[11,"test_timer","","Basic quality tests on the timer, by measuring CPU timing jitter a few hundred times.",47,[[["self"]],["result",["u8","timererror"]]]],[11,"timer_stats","","Statistical test: return the timer delta of one normal run of the `JitterRng` entropy collector.",47,[[["self"],["bool"]],["i64"]]],[11,"next_u32","","",47,[[["self"]],["u32"]]],[11,"next_u64","","",47,[[["self"]],["u64"]]],[11,"fill_bytes","","",47,N],[11,"try_fill_bytes","","",47,N],[0,"mock","","Mock random number generator",N,N],[3,"StepRng","rand::rngs::mock","A simple implementation of `RngCore` for testing purposes.",N,N],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"clone","","",48,[[["self"]],["steprng"]]],[11,"new","","Create a `StepRng`, yielding an arithmetic sequence starting with `initial` and incremented by `increment` each time.",48,[[["u64"],["u64"]],["self"]]],[11,"next_u32","","",48,[[["self"]],["u32"]]],[11,"next_u64","","",48,[[["self"]],["u64"]]],[11,"fill_bytes","","",48,N],[11,"try_fill_bytes","","",48,N],[11,"clone","rand::rngs","",49,[[["self"]],["smallrng"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",49,[[["self"]],["u32"]]],[11,"next_u64","","",49,[[["self"]],["u64"]]],[11,"fill_bytes","","",49,N],[11,"try_fill_bytes","","",49,N],[11,"from_seed","","",49,N],[11,"from_rng","","",49,[[["r"]],["result",["error"]]]],[11,"clone","","",50,[[["self"]],["stdrng"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",50,[[["self"]],["u32"]]],[11,"next_u64","","",50,[[["self"]],["u64"]]],[11,"fill_bytes","","",50,N],[11,"try_fill_bytes","","",50,N],[11,"from_seed","","",50,N],[11,"from_rng","","",50,[[["r"]],["result",["error"]]]],[11,"clone","","",51,[[["self"]],["threadrng"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",51,[[["self"]],["u32"]]],[11,"next_u64","","",51,[[["self"]],["u64"]]],[11,"fill_bytes","","",51,N],[11,"try_fill_bytes","","",51,N],[11,"clone","","",52,[[["self"]],["osrng"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `OsRng`.",52,[[],["result",["osrng","error"]]]],[11,"next_u32","","",52,[[["self"]],["u32"]]],[11,"next_u64","","",52,[[["self"]],["u64"]]],[11,"fill_bytes","","",52,N],[11,"try_fill_bytes","","",52,N],[0,"seq","rand","Functions for randomly accessing and sampling sequences.",N,N],[5,"sample_iter","rand::seq","Randomly sample `amount` elements from a finite iterator.",N,[[["r"],["i"],["usize"]],["result",["vec","vec"]]]],[5,"sample_slice","","Randomly sample exactly `amount` values from `slice`.",N,N],[5,"sample_slice_ref","","Randomly sample exactly `amount` references from `slice`.",N,N],[5,"sample_indices","","Randomly sample exactly `amount` indices from `0..length`.",N,[[["r"],["usize"],["usize"]],["vec",["usize"]]]],[8,"Rand","rand","A type that can be randomly generated using an [`Rng`].",N,N],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",53,[[["r"]],["self"]]],[8,"Rng","","An automatically-implemented extension trait on [`RngCore`] providing high-level generic methods for sampling values and other convenience methods.",N,N],[11,"gen","","Return a random value supporting the [`Standard`] distribution.",54,[[["self"]],["t"]]],[11,"gen_range","","Generate a random value in the range [`low`, `high`), i.e. inclusive of `low` and exclusive of `high`.",54,[[["self"],["t"],["t"]],["t"]]],[11,"sample","","Sample a new value, using the given distribution.",54,[[["self"],["d"]],["t"]]],[11,"sample_iter","","Create an iterator that generates values using the given distribution.",54,[[["self"],["d"]],["distiter"]]],[11,"fill","","Fill `dest` entirely with random bytes (uniform value distribution), where `dest` is any type supporting [`AsByteSliceMut`], namely slices and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).",54,[[["self"],["t"]]]],[11,"try_fill","","Fill `dest` entirely with random bytes (uniform value distribution), where `dest` is any type supporting [`AsByteSliceMut`], namely slices and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).",54,[[["self"],["t"]],["result",["error"]]]],[11,"gen_bool","","Return a bool with a probability `p` of being true.",54,[[["self"],["f64"]],["bool"]]],[11,"choose","","Return a random element from `values`.",54,N],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",54,N],[11,"shuffle","","Shuffle a mutable slice in place.",54,N],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",54,[[["self"]],["generator"]]],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",54,[[["self"],["u32"]],["bool"]]],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",54,[[["self"]],["asciigenerator"]]],[8,"AsByteSliceMut","","Trait for casting types to byte slices",N,N],[10,"as_byte_slice_mut","","Return a mutable reference to self as a byte slice",55,N],[10,"to_le","","Call `to_le` on each element (i.e. byte-swap on Big Endian platforms).",55,[[["self"]]]],[8,"FromEntropy","","A convenience extension to [`SeedableRng`] allowing construction from fresh entropy. This trait is automatically implemented for any PRNG implementing [`SeedableRng`] and is not intended to be implemented by users.",N,N],[10,"from_entropy","","Creates a new instance, automatically seeded with fresh entropy.",56,[[],["self"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"next","","",57,[[["self"]],["option"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"next","","",58,[[["self"]],["option",["char"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",2,[[["self"],["errorkind"]],["bool"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"cause","","",3,[[["self"]],["option",["error"]]]],[11,"clone","","",2,[[["self"]],["errorkind"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"read","","",0,N],[11,"should_retry","","True if this kind of error may resolve itself on retry.",2,[[["self"]],["bool"]]],[11,"should_wait","","True if we should retry but wait before retrying",2,[[["self"]],["bool"]]],[11,"description","","A description of this error kind",2,[[["self"]],["str"]]],[11,"new","","Create a new instance, with specified kind and a message.",3,[[["errorkind"],["str"]],["error"]]],[11,"with_cause","","Create a new instance, with specified kind, message, and a chained cause.",3,[[["errorkind"],["str"],["e"]],["error"]]],[11,"take_cause","","Take the cause, if any. This allows the embedded cause to be extracted. This uses `Option::take`, leaving `self` with no cause.",3,[[["self"]],["option",["box"]]]]],"paths":[[8,"RngCore"],[8,"SeedableRng"],[4,"ErrorKind"],[3,"Error"],[3,"Weighted"],[8,"SampleUniform"],[8,"UniformSampler"],[3,"Uniform"],[3,"UniformInt"],[3,"UniformFloat"],[3,"UniformDuration"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[3,"Pareto"],[3,"Poisson"],[3,"Binomial"],[3,"Bernoulli"],[3,"Cauchy"],[3,"OpenClosed01"],[3,"Open01"],[3,"Standard"],[3,"Alphanumeric"],[3,"WeightedChoice"],[8,"Sample"],[8,"IndependentSample"],[8,"Distribution"],[3,"DistIter"],[3,"ChaChaRng"],[3,"ChaChaCore"],[3,"Hc128Rng"],[3,"Hc128Core"],[3,"IsaacRng"],[3,"IsaacCore"],[3,"Isaac64Rng"],[3,"Isaac64Core"],[3,"XorShiftRng"],[4,"TimerError"],[3,"ReadRng"],[3,"ReseedingRng"],[3,"EntropyRng"],[3,"JitterRng"],[3,"StepRng"],[3,"SmallRng"],[3,"StdRng"],[3,"ThreadRng"],[3,"OsRng"],[8,"Rand"],[8,"Rng"],[8,"AsByteSliceMut"],[8,"FromEntropy"],[3,"Generator"],[3,"AsciiGenerator"]]};
searchIndex["rand_core"]={"doc":"Random number generation traits","items":[[3,"Error","rand_core","Error type of random number generators",N,N],[12,"kind","","The error kind",0,N],[12,"msg","","The error message",0,N],[4,"ErrorKind","","Error kind which can be matched over.",N,N],[13,"Unavailable","","Feature is not available; not recoverable.",1,N],[13,"Unexpected","","General failure; there may be a chance of recovery on retry.",1,N],[13,"Transient","","A transient failure which likely can be resolved or worked around.",1,N],[13,"NotReady","","Not ready yet: recommended to try again a little later.",1,N],[11,"eq","","",1,[[["self"],["errorkind"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["errorkind"]]],[11,"should_retry","","True if this kind of error may resolve itself on retry.",1,[[["self"]],["bool"]]],[11,"should_wait","","True if we should retry but wait before retrying",1,[[["self"]],["bool"]]],[11,"description","","A description of this error kind",1,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new instance, with specified kind and a message.",0,[[["errorkind"],["str"]],["self"]]],[11,"with_cause","","Create a new instance, with specified kind, message, and a chained cause.",0,[[["errorkind"],["str"],["e"]],["self"]]],[11,"take_cause","","Take the cause, if any. This allows the embedded cause to be extracted. This uses `Option::take`, leaving `self` with no cause.",0,[[["self"]],["option",["box"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["stderror"]]]],[0,"block","","The `BlockRngCore` trait and implementation helpers",N,N],[3,"BlockRng","rand_core::block","A wrapper type implementing [`RngCore`] for some type implementing [`BlockRngCore`] with `u32` array buffer; i.e. this can be used to implement a full RNG from just a `generate` function.",N,N],[12,"core","","The core part of the RNG, implementing the `generate` function.",2,N],[3,"BlockRng64","","A wrapper type implementing [`RngCore`] for some type implementing [`BlockRngCore`] with `u64` array buffer; i.e. this can be used to implement a full RNG from just a `generate` function.",N,N],[12,"core","","The core part of the RNG, implementing the `generate` function.",3,N],[8,"BlockRngCore","","A trait for RNGs which do not generate random numbers individually, but in blocks (typically `[u32; N]`). This technique is commonly used by cryptographic RNGs to improve performance.",N,N],[16,"Item","","Results element type, e.g. `u32`.",4,N],[16,"Results","","Results type. This is the 'block' an RNG implementing `BlockRngCore` generates, which will usually be an array like `[u32; 16]`.",4,N],[10,"generate","","Generate a new block of results.",4,N],[11,"clone","","",2,[[["self"]],["blockrng"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `BlockRng` from an existing RNG implementing `BlockRngCore`. Results will be generated on first use.",2,[[["r"]],["blockrng"]]],[11,"index","","Get the index into the result buffer.",2,[[["self"]],["usize"]]],[11,"reset","","Reset the number of available results. This will force a new set of results to be generated on next use.",2,[[["self"]]]],[11,"generate_and_set","","Generate a new set of results immediately, setting the index to the given value.",2,[[["self"],["usize"]]]],[11,"next_u32","","",2,[[["self"]],["u32"]]],[11,"next_u64","","",2,[[["self"]],["u64"]]],[11,"fill_bytes","","",2,N],[11,"try_fill_bytes","","",2,N],[11,"from_seed","","",2,N],[11,"from_rng","","",2,[[["s"]],["result",["error"]]]],[11,"clone","","",3,[[["self"]],["blockrng64"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `BlockRng` from an existing RNG implementing `BlockRngCore`. Results will be generated on first use.",3,[[["r"]],["blockrng64"]]],[11,"index","","Get the index into the result buffer.",3,[[["self"]],["usize"]]],[11,"reset","","Reset the number of available results. This will force a new set of results to be generated on next use.",3,[[["self"]]]],[11,"generate_and_set","","Generate a new set of results immediately, setting the index to the given value.",3,[[["self"],["usize"]]]],[11,"next_u32","","",3,[[["self"]],["u32"]]],[11,"next_u64","","",3,[[["self"]],["u64"]]],[11,"fill_bytes","","",3,N],[11,"try_fill_bytes","","",3,N],[11,"from_seed","","",3,N],[11,"from_rng","","",3,[[["s"]],["result",["error"]]]],[0,"impls","rand_core","Helper functions for implementing `RngCore` functions.",N,N],[5,"next_u64_via_u32","rand_core::impls","Implement `next_u64` via `next_u32`, little-endian order.",N,[[["r"]],["u64"]]],[5,"fill_bytes_via_next","","Implement `fill_bytes` via `next_u64` and `next_u32`, little-endian order.",N,N],[5,"fill_via_u32_chunks","","Implement `fill_bytes` by reading chunks from the output buffer of a block based RNG.",N,N],[5,"fill_via_u64_chunks","","Implement `fill_bytes` by reading chunks from the output buffer of a block based RNG.",N,N],[5,"next_u32_via_fill","","Implement `next_u32` via `fill_bytes`, little-endian order.",N,[[["r"]],["u32"]]],[5,"next_u64_via_fill","","Implement `next_u64` via `fill_bytes`, little-endian order.",N,[[["r"]],["u64"]]],[0,"le","rand_core","Little-Endian utilities",N,N],[5,"read_u32_into","rand_core::le","Reads unsigned 32 bit integers from `src` into `dst`. Borrowed from the `byteorder` crate.",N,N],[5,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`. Borrowed from the `byteorder` crate.",N,N],[8,"RngCore","rand_core","The core of a random number generator.",N,N],[10,"next_u32","","Return the next random `u32`.",5,[[["self"]],["u32"]]],[10,"next_u64","","Return the next random `u64`.",5,[[["self"]],["u64"]]],[10,"fill_bytes","","Fill `dest` with random data.",5,N],[10,"try_fill_bytes","","Fill `dest` entirely with random data.",5,N],[8,"CryptoRng","","A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`] implementation is supposed to be cryptographically secure.",N,N],[8,"SeedableRng","","A random number generator that can be explicitly seeded.",N,N],[16,"Seed","","Seed type, which is restricted to types mutably-dereferencable as `u8` arrays (we recommend `[u8; N]` for some `N`).",6,N],[10,"from_seed","","Create a new PRNG using the given seed.",6,N],[11,"from_rng","","Create a new PRNG seeded from another `Rng`.",6,[[["r"]],["result",["error"]]]],[11,"read","","",5,N]],"paths":[[3,"Error"],[4,"ErrorKind"],[3,"BlockRng"],[3,"BlockRng64"],[8,"BlockRngCore"],[8,"RngCore"],[8,"SeedableRng"]]};
searchIndex["rawpointer"]={"doc":"","items":[[5,"ptrdistance","rawpointer","Return the number of elements of `T` from `start` to `end`. Return the arithmetic difference if `T` is zero size.",N,N],[8,"PointerExt","","Extension methods for raw pointers",N,N],[10,"offset","","",0,[[["self"],["isize"]],["self"]]],[11,"pre_inc","","Increment the pointer by 1, and return its new value.",0,[[["self"]],["self"]]],[11,"post_inc","","Increment the pointer by 1, but return its old value.",0,[[["self"]],["self"]]],[11,"pre_dec","","Decrement the pointer by 1, and return its new value.",0,[[["self"]],["self"]]],[11,"post_dec","","Decrement the pointer by 1, but return its old value.",0,[[["self"]],["self"]]],[11,"inc","","Increment by 1",0,[[["self"]]]],[11,"dec","","Decrement by 1",0,[[["self"]]]],[11,"stride_offset","","Offset the pointer by `s` multiplied by `index`.",0,[[["self"],["isize"],["usize"]],["self"]]]],"paths":[[8,"PointerExt"]]};
searchIndex["rayon"]={"doc":"Data-parallelism library that makes it easy to convert sequential computations into parallel","items":[[5,"current_num_threads","rayon","Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.",N,[[],["usize"]]],[3,"ThreadPool","","Represents a user created [thread-pool].",N,N],[3,"ThreadPoolBuilder","","Used to create a new [`ThreadPool`] or to configure the global rayon thread pool. ## Creating a ThreadPool The following creates a thread pool with 22 threads.",N,N],[3,"ThreadPoolBuildError","","Error when initializing a thread pool.",N,N],[5,"join","","Takes two closures and potentially runs them in parallel. It returns a pair of the results from those closures.",N,N],[5,"join_context","","Identical to `join`, except that the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they're executing on a different thread than where `join_context` was called.  This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.",N,N],[3,"FnContext","","Provides the calling context to a closure called by `join_context`.",N,N],[5,"scope","","Create a \"fork-join\" scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.",N,[[["op"]],["r"]]],[3,"Scope","","Represents a fork-join scope which can be used to spawn any number of tasks. See [`scope()`] for more information.",N,N],[5,"spawn","","Fires off a task into the Rayon threadpool in the \"static\" or \"global\" scope.  Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function][scope] to create a scope.",N,N],[0,"collections","","Parallel iterator types for [standard collections][std::collections]",N,N],[0,"binary_heap","rayon::collections","This module contains the parallel iterator types for heaps (`BinaryHeap<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",N,N],[3,"IntoIter","rayon::collections::binary_heap","Parallel iterator over a binary heap",N,N],[3,"Iter","","Parallel iterator over an immutable reference to a binary heap",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["intoiter"]]],[11,"drive_unindexed","","",0,N],[11,"opt_len","","",0,[[["self"]],["option",["usize"]]]],[11,"drive","","",0,N],[11,"len","","",0,[[["self"]],["usize"]]],[11,"with_producer","","",0,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"drive_unindexed","","",1,N],[11,"opt_len","","",1,[[["self"]],["option",["usize"]]]],[11,"drive","","",1,N],[11,"len","","",1,[[["self"]],["usize"]]],[11,"with_producer","","",1,N],[0,"btree_map","rayon::collections","This module contains the parallel iterator types for B-Tree maps (`BTreeMap<K, V>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",N,N],[3,"IntoIter","rayon::collections::btree_map","Parallel iterator over a B-Tree map",N,N],[3,"Iter","","Parallel iterator over an immutable reference to a B-Tree map",N,N],[3,"IterMut","","Parallel iterator over a mutable reference to a B-Tree map",N,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",2,N],[11,"opt_len","","",2,[[["self"]],["option",["usize"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"drive_unindexed","","",3,N],[11,"opt_len","","",3,[[["self"]],["option",["usize"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",4,N],[11,"opt_len","","",4,[[["self"]],["option",["usize"]]]],[0,"btree_set","rayon::collections","This module contains the parallel iterator types for B-Tree sets (`BTreeSet<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",N,N],[3,"IntoIter","rayon::collections::btree_set","Parallel iterator over a B-Tree set",N,N],[3,"Iter","","Parallel iterator over an immutable reference to a B-Tree set",N,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",5,N],[11,"opt_len","","",5,[[["self"]],["option",["usize"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"drive_unindexed","","",6,N],[11,"opt_len","","",6,[[["self"]],["option",["usize"]]]],[0,"hash_map","rayon::collections","This module contains the parallel iterator types for hash maps (`HashMap<K, V>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",N,N],[3,"IntoIter","rayon::collections::hash_map","Parallel iterator over a hash map",N,N],[3,"Iter","","Parallel iterator over an immutable reference to a hash map",N,N],[3,"IterMut","","Parallel iterator over a mutable reference to a hash map",N,N],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",7,N],[11,"opt_len","","",7,[[["self"]],["option",["usize"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["self"]]],[11,"drive_unindexed","","",8,N],[11,"opt_len","","",8,[[["self"]],["option",["usize"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",9,N],[11,"opt_len","","",9,[[["self"]],["option",["usize"]]]],[0,"hash_set","rayon::collections","This module contains the parallel iterator types for hash sets (`HashSet<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",N,N],[3,"IntoIter","rayon::collections::hash_set","Parallel iterator over a hash set",N,N],[3,"Iter","","Parallel iterator over an immutable reference to a hash set",N,N],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",10,N],[11,"opt_len","","",10,[[["self"]],["option",["usize"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["self"]]],[11,"drive_unindexed","","",11,N],[11,"opt_len","","",11,[[["self"]],["option",["usize"]]]],[0,"linked_list","rayon::collections","This module contains the parallel iterator types for linked lists (`LinkedList<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",N,N],[3,"IntoIter","rayon::collections::linked_list","Parallel iterator over a linked list",N,N],[3,"Iter","","Parallel iterator over an immutable reference to a linked list",N,N],[3,"IterMut","","Parallel iterator over a mutable reference to a linked list",N,N],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["intoiter"]]],[11,"drive_unindexed","","",12,N],[11,"opt_len","","",12,[[["self"]],["option",["usize"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["self"]]],[11,"drive_unindexed","","",13,N],[11,"opt_len","","",13,[[["self"]],["option",["usize"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",14,N],[11,"opt_len","","",14,[[["self"]],["option",["usize"]]]],[0,"vec_deque","rayon::collections","This module contains the parallel iterator types for double-ended queues (`VecDeque<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",N,N],[3,"IntoIter","rayon::collections::vec_deque","Parallel iterator over a double-ended queue",N,N],[3,"Iter","","Parallel iterator over an immutable reference to a double-ended queue",N,N],[3,"IterMut","","Parallel iterator over a mutable reference to a double-ended queue",N,N],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["intoiter"]]],[11,"drive_unindexed","","",15,N],[11,"opt_len","","",15,[[["self"]],["option",["usize"]]]],[11,"drive","","",15,N],[11,"len","","",15,[[["self"]],["usize"]]],[11,"with_producer","","",15,N],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["self"]]],[11,"drive_unindexed","","",16,N],[11,"opt_len","","",16,[[["self"]],["option",["usize"]]]],[11,"drive","","",16,N],[11,"len","","",16,[[["self"]],["usize"]]],[11,"with_producer","","",16,N],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",17,N],[11,"opt_len","","",17,[[["self"]],["option",["usize"]]]],[11,"drive","","",17,N],[11,"len","","",17,[[["self"]],["usize"]]],[11,"with_producer","","",17,N],[0,"iter","rayon","Traits for writing parallel programs using an iterator-style interface",N,N],[4,"Either","rayon::iter","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",N,N],[13,"Left","","A value of type `L`.",18,N],[13,"Right","","A value of type `R`.",18,N],[3,"IterBridge","","`IterBridge` is a parallel iterator that wraps a sequential iterator.",N,N],[3,"Chain","","`Chain` is an iterator that joins `b` after `a` in one continuous iterator. This struct is created by the [`chain()`] method on [`ParallelIterator`]",N,N],[3,"Chunks","","`Chunks` is an iterator that groups elements of an underlying iterator.",N,N],[3,"Enumerate","","`Enumerate` is an iterator that returns the current count along with the element. This struct is created by the [`enumerate()`] method on [`IndexedParallelIterator`]",N,N],[3,"Filter","","`Filter` takes a predicate `filter_op` and filters out elements that match. This struct is created by the [`filter()`] method on [`ParallelIterator`]",N,N],[3,"FilterMap","","`FilterMap` creates an iterator that uses `filter_op` to both filter and map elements. This struct is created by the [`filter_map()`] method on [`ParallelIterator`].",N,N],[3,"FlatMap","","`FlatMap` maps each element to an iterator, then flattens these iterators together. This struct is created by the [`flat_map()`] method on [`ParallelIterator`]",N,N],[3,"Flatten","","`Flatten` turns each element to an iterator, then flattens these iterators together. This struct is created by the [`flatten()`] method on [`ParallelIterator`].",N,N],[3,"Fold","","`Fold` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`fold()`] method on [`ParallelIterator`]",N,N],[3,"FoldWith","","`FoldWith` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`fold_with()`] method on [`ParallelIterator`]",N,N],[3,"TryFold","","`TryFold` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`try_fold()`] method on [`ParallelIterator`]",N,N],[3,"TryFoldWith","","`TryFoldWith` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`try_fold_with()`] method on [`ParallelIterator`]",N,N],[3,"Skip","","`Skip` is an iterator that skips over the first `n` elements. This struct is created by the [`skip()`] method on [`IndexedParallelIterator`]",N,N],[3,"Split","","`Split` is a parallel iterator using arbitrary data and a splitting function. This struct is created by the [`split()`] function.",N,N],[3,"Take","","`Take` is an iterator that iterates over the first `n` elements. This struct is created by the [`take()`] method on [`IndexedParallelIterator`]",N,N],[3,"Map","","`Map` is an iterator that transforms the elements of an underlying iterator.",N,N],[3,"MapWith","","`MapWith` is an iterator that transforms the elements of an underlying iterator.",N,N],[3,"Zip","","`Zip` is an iterator that zips up `a` and `b` into a single iterator of pairs. This struct is created by the [`zip()`] method on [`IndexedParallelIterator`]",N,N],[3,"ZipEq","","An [`IndexedParallelIterator`] that iterates over two parallel iterators of equal length simultaneously.",N,N],[3,"Interleave","","`Interleave` is an iterator that interleaves elements of iterators `i` and `j` in one continuous iterator. This struct is created by the [`interleave()`] method on [`IndexedParallelIterator`]",N,N],[3,"InterleaveShortest","","`InterleaveShortest` is an iterator that works similarly to `Interleave`, but this version stops returning elements once one of the iterators run out.",N,N],[3,"Intersperse","","`Intersperse` is an iterator that inserts a particular item between each item of the adapted iterator.  This struct is created by the [`intersperse()`] method on [`ParallelIterator`]",N,N],[3,"Update","","`Update` is an iterator that mutates the elements of an underlying iterator before they are yielded.",N,N],[3,"Rev","","`Rev` is an iterator that produces elements in reverse order. This struct is created by the [`rev()`] method on [`IndexedParallelIterator`]",N,N],[3,"MinLen","","`MinLen` is an iterator that imposes a minimum length on iterator splits. This struct is created by the [`min_len()`] method on [`IndexedParallelIterator`]",N,N],[3,"MaxLen","","`MaxLen` is an iterator that imposes a maximum length on iterator splits. This struct is created by the [`max_len()`] method on [`IndexedParallelIterator`]",N,N],[3,"Cloned","","`Cloned` is an iterator that clones the elements of an underlying iterator.",N,N],[3,"Inspect","","`Inspect` is an iterator that calls a function with a reference to each element before yielding it.",N,N],[3,"WhileSome","","`WhileSome` is an iterator that yields the `Some` elements of an iterator, halting as soon as any `None` is produced.",N,N],[3,"Repeat","","Iterator adaptor for the `repeat()` function.",N,N],[3,"RepeatN","","Iterator adaptor for the `repeatn()` function.",N,N],[3,"Empty","","Iterator adaptor for the `empty()` function.",N,N],[3,"Once","","Iterator adaptor for the `once()` function.",N,N],[5,"split","","The `split` function takes arbitrary data and a closure that knows how to split it, and turns this into a `ParallelIterator`.",N,[[["d"],["s"]],["split"]]],[5,"repeat","","Creates a parallel iterator that endlessly repeats `elt` (by cloning it). Note that this iterator has \"infinite\" length, so typically you would want to use `zip` or `take` or some other means to shorten it, or consider using the `repeatn()` function instead.",N,[[["t"]],["repeat"]]],[5,"repeatn","","Creates a parallel iterator that produces `n` repeats of `elt` (by cloning it).",N,[[["t"],["usize"]],["repeatn"]]],[5,"empty","","Creates a parallel iterator that produces nothing.",N,[[],["empty"]]],[5,"once","","Creates a parallel iterator that produces an element exactly once.",N,[[["t"]],["once"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",19,[[["self"]],["iterbridge"]]],[11,"drive_unindexed","","",19,N],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["chain"]]],[11,"drive_unindexed","","",20,N],[11,"opt_len","","",20,[[["self"]],["option",["usize"]]]],[11,"drive","","",20,N],[11,"len","","",20,[[["self"]],["usize"]]],[11,"with_producer","","",20,N],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["chunks"]]],[11,"drive_unindexed","","",21,N],[11,"opt_len","","",21,[[["self"]],["option",["usize"]]]],[11,"drive","","",21,N],[11,"len","","",21,[[["self"]],["usize"]]],[11,"with_producer","","",21,N],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["enumerate"]]],[11,"drive_unindexed","","",22,N],[11,"opt_len","","",22,[[["self"]],["option",["usize"]]]],[11,"drive","","",22,N],[11,"len","","",22,[[["self"]],["usize"]]],[11,"with_producer","","",22,N],[11,"clone","","",23,[[["self"]],["filter"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",23,N],[11,"clone","","",24,[[["self"]],["filtermap"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",24,N],[11,"clone","","",25,[[["self"]],["flatmap"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",25,N],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"clone","","",26,[[["self"]],["flatten"]]],[11,"drive_unindexed","","",26,N],[0,"plumbing","","Traits and functions used to implement parallel iteration.  These are low-level details -- users of parallel iterators should not need to interact with them directly.  See [the `plumbing` README][r] for a high-level overview.",N,N],[5,"bridge","rayon::iter::plumbing","This helper function is used to \"connect\" a parallel iterator to a consumer. It will convert the `par_iter` into a producer P and then pull items from P and feed them to `consumer`, splitting and creating parallel threads as needed.",N,N],[5,"bridge_producer_consumer","","This helper function is used to \"connect\" a producer and a consumer. You may prefer to call [`bridge`], which wraps this function. This function will draw items from `producer` and feed them to `consumer`, splitting and creating parallel tasks when needed.",N,N],[5,"bridge_unindexed","","A variant of [`bridge_producer_consumer`] where the producer is an unindexed producer.",N,N],[8,"ProducerCallback","","The `ProducerCallback` trait is a kind of generic closure, [analogous to `FnOnce`][FnOnce]. See [the corresponding section in the plumbing README][r] for more details.",N,N],[16,"Output","","The type of value returned by this callback. Analogous to [`Output` from the `FnOnce` trait][Output].",27,N],[10,"callback","","Invokes the callback with the given producer as argument. The key point of this trait is that this method is generic over `P`, and hence implementors must be defined for any producer.",27,N],[8,"Producer","","A `Producer` is effectively a \"splittable `IntoIterator`\". That is, a producer is a value which can be converted into an iterator at any time: at that point, it simply produces items on demand, like any iterator. But what makes a `Producer` special is that, before we convert to an iterator, we can also split it at a particular point using the `split_at` method. This will yield up two producers, one producing the items before that point, and one producing the items after that point (these two producers can then independently be split further, or be converted into iterators). In Rayon, this splitting is used to divide between threads. See [the `plumbing` README][r] for further details.",N,N],[16,"Item","","The type of item that will be produced by this producer once it is converted into an iterator.",28,N],[16,"IntoIter","","The type of iterator we will become.",28,N],[10,"into_iter","","Convert `self` into an iterator; at this point, no more parallel splits are possible.",28,N],[11,"min_len","","The minimum number of items that we will process sequentially. Defaults to 1, which means that we will split all the way down to a single item. This can be raised higher using the [`with_min_len`] method, which will force us to create sequential tasks at a larger granularity. Note that Rayon automatically normally attempts to adjust the size of parallel splits to reduce overhead, so this should not be needed.",28,[[["self"]],["usize"]]],[11,"max_len","","The maximum number of items that we will process sequentially. Defaults to MAX, which means that we can choose not to split at all. This can be lowered using the [`with_max_len`] method, which will force us to create more parallel tasks. Note that Rayon automatically normally attempts to adjust the size of parallel splits to reduce overhead, so this should not be needed.",28,[[["self"]],["usize"]]],[10,"split_at","","Split into two producers; one produces items `0..index`, the other `index..N`. Index must be less than or equal to `N`.",28,N],[11,"fold_with","","Iterate the producer, feeding each element to `folder`, and stop when the folder is full (or all elements have been consumed).",28,[[["self"],["f"]],["f"]]],[8,"Consumer","","A consumer is effectively a [generalized \"fold\" operation][fold], and in fact each consumer will eventually be converted into a [`Folder`]. What makes a consumer special is that, like a [`Producer`], it can be split into multiple consumers using the `split_at` method. When a consumer is split, it produces two consumers, as well as a reducer. The two consumers can be fed items independently, and when they are done the reducer is used to combine their two results into one. See [the `plumbing` README][r] for further details.",N,N],[16,"Folder","","The type of folder that this consumer can be converted into.",29,N],[16,"Reducer","","The type of reducer that is produced if this consumer is split.",29,N],[16,"Result","","The type of result that this consumer will ultimately produce.",29,N],[10,"split_at","","Divide the consumer into two consumers, one processing items `0..index` and one processing items from `index..`. Also produces a reducer that can be used to reduce the results at the end.",29,N],[10,"into_folder","","Convert the consumer into a folder that can consume items sequentially, eventually producing a final result.",29,N],[10,"full","","Hint whether this `Consumer` would like to stop processing further items, e.g. if a search has been completed.",29,[[["self"]],["bool"]]],[8,"Folder","","The `Folder` trait encapsulates [the standard fold operation][fold].  It can be fed many items using the `consume` method. At the end, once all items have been consumed, it can then be converted (using `complete`) into a final value.",N,N],[16,"Result","","The type of result that will ultimately be produced by the folder.",30,N],[10,"consume","","Consume next item and return new sequential state.",30,[[["self"],["item"]],["self"]]],[11,"consume_iter","","Consume items from the iterator until full, and return new sequential state.",30,[[["self"],["i"]],["self"]]],[10,"complete","","Finish consuming items, produce final result.",30,N],[10,"full","","Hint whether this `Folder` would like to stop processing further items, e.g. if a search has been completed.",30,[[["self"]],["bool"]]],[8,"Reducer","","The reducer is the final step of a `Consumer` -- after a consumer has been split into two parts, and each of those parts has been fully processed, we are left with two results. The reducer is then used to combine those two results into one. See [the `plumbing` README][r] for further details.",N,N],[10,"reduce","","Reduce two final results into one; this is executed after a split.",31,[[["self"],["result"],["result"]],["result"]]],[8,"UnindexedConsumer","","A stateless consumer can be freely copied. These consumers can be used like regular consumers, but they also support a `split_off_left` method that does not take an index to split, but simply splits at some arbitrary point (`for_each`, for example, produces an unindexed consumer).",N,N],[10,"split_off_left","","Splits off a \"left\" consumer and returns it. The `self` consumer should then be used to consume the \"right\" portion of the data. (The ordering matters for methods like find_first -- values produced by the returned value are given precedence over values produced by `self`.) Once the left and right halves have been fully consumed, you should reduce the results with the result of `to_reducer`.",32,[[["self"]],["self"]]],[10,"to_reducer","","Creates a reducer that can be used to combine the results from a split consumer.",32,N],[8,"UnindexedProducer","","A variant on `Producer` which does not know its exact length or cannot represent it in a `usize`. These producers act like ordinary producers except that they cannot be told to split at a particular point. Instead, you just ask them to split 'somewhere'.",N,N],[16,"Item","","The type of item returned by this producer.",33,N],[10,"split","","Split midway into a new producer if possible, otherwise return `None`.",33,N],[10,"fold_with","","Iterate the producer, feeding each element to `folder`, and stop when the folder is full (or all elements have been consumed).",33,[[["self"],["f"]],["f"]]],[11,"clone","rayon::iter","",34,[[["self"]],["fold"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",34,N],[11,"clone","","",35,[[["self"]],["foldwith"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",35,N],[11,"clone","","",36,[[["self"]],["tryfold"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",36,N],[11,"clone","","",37,[[["self"]],["tryfoldwith"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",37,N],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"clone","","",38,[[["self"]],["skip"]]],[11,"drive_unindexed","","",38,N],[11,"opt_len","","",38,[[["self"]],["option",["usize"]]]],[11,"len","","",38,[[["self"]],["usize"]]],[11,"drive","","",38,N],[11,"with_producer","","",38,N],[11,"clone","","",39,[[["self"]],["split"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",39,N],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"clone","","",40,[[["self"]],["take"]]],[11,"drive_unindexed","","",40,N],[11,"opt_len","","",40,[[["self"]],["option",["usize"]]]],[11,"len","","",40,[[["self"]],["usize"]]],[11,"drive","","",40,N],[11,"with_producer","","",40,N],[11,"clone","","",41,[[["self"]],["map"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",41,N],[11,"opt_len","","",41,[[["self"]],["option",["usize"]]]],[11,"drive","","",41,N],[11,"len","","",41,[[["self"]],["usize"]]],[11,"with_producer","","",41,N],[11,"clone","","",42,[[["self"]],["mapwith"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",42,N],[11,"opt_len","","",42,[[["self"]],["option",["usize"]]]],[11,"drive","","",42,N],[11,"len","","",42,[[["self"]],["usize"]]],[11,"with_producer","","",42,N],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"clone","","",43,[[["self"]],["zip"]]],[11,"drive_unindexed","","",43,N],[11,"opt_len","","",43,[[["self"]],["option",["usize"]]]],[11,"drive","","",43,N],[11,"len","","",43,[[["self"]],["usize"]]],[11,"with_producer","","",43,N],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"clone","","",44,[[["self"]],["zipeq"]]],[11,"drive_unindexed","","",44,N],[11,"opt_len","","",44,[[["self"]],["option",["usize"]]]],[11,"drive","","",44,N],[11,"len","","",44,[[["self"]],["usize"]]],[11,"with_producer","","",44,N],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"clone","","",45,[[["self"]],["interleave"]]],[11,"drive_unindexed","","",45,N],[11,"opt_len","","",45,[[["self"]],["option",["usize"]]]],[11,"drive","","",45,N],[11,"len","","",45,[[["self"]],["usize"]]],[11,"with_producer","","",45,N],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"clone","","",46,[[["self"]],["interleaveshortest"]]],[11,"drive_unindexed","","",46,N],[11,"opt_len","","",46,[[["self"]],["option",["usize"]]]],[11,"drive","","",46,N],[11,"len","","",46,[[["self"]],["usize"]]],[11,"with_producer","","",46,N],[11,"clone","","",47,[[["self"]],["intersperse"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",47,N],[11,"opt_len","","",47,[[["self"]],["option",["usize"]]]],[11,"drive","","",47,N],[11,"len","","",47,[[["self"]],["usize"]]],[11,"with_producer","","",47,N],[11,"clone","","",48,[[["self"]],["update"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",48,N],[11,"opt_len","","",48,[[["self"]],["option",["usize"]]]],[11,"drive","","",48,N],[11,"len","","",48,[[["self"]],["usize"]]],[11,"with_producer","","",48,N],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"clone","","",49,[[["self"]],["rev"]]],[11,"drive_unindexed","","",49,N],[11,"opt_len","","",49,[[["self"]],["option",["usize"]]]],[11,"drive","","",49,N],[11,"len","","",49,[[["self"]],["usize"]]],[11,"with_producer","","",49,N],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"clone","","",50,[[["self"]],["minlen"]]],[11,"drive_unindexed","","",50,N],[11,"opt_len","","",50,[[["self"]],["option",["usize"]]]],[11,"drive","","",50,N],[11,"len","","",50,[[["self"]],["usize"]]],[11,"with_producer","","",50,N],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"clone","","",51,[[["self"]],["maxlen"]]],[11,"drive_unindexed","","",51,N],[11,"opt_len","","",51,[[["self"]],["option",["usize"]]]],[11,"drive","","",51,N],[11,"len","","",51,[[["self"]],["usize"]]],[11,"with_producer","","",51,N],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"clone","","",52,[[["self"]],["cloned"]]],[11,"drive_unindexed","","",52,N],[11,"opt_len","","",52,[[["self"]],["option",["usize"]]]],[11,"drive","","",52,N],[11,"len","","",52,[[["self"]],["usize"]]],[11,"with_producer","","",52,N],[11,"clone","","",53,[[["self"]],["inspect"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",53,N],[11,"opt_len","","",53,[[["self"]],["option",["usize"]]]],[11,"drive","","",53,N],[11,"len","","",53,[[["self"]],["usize"]]],[11,"with_producer","","",53,N],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"clone","","",54,[[["self"]],["whilesome"]]],[11,"drive_unindexed","","",54,N],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"clone","","",55,[[["self"]],["repeat"]]],[11,"take","","Take only `n` repeats of the element, similar to the general `take()`.",55,[[["self"],["usize"]],["repeatn"]]],[11,"zip","","Iterate tuples repeating the element with items from another iterator, similar to the general `zip()`.",55,[[["self"],["z"]],["zip",["repeatn"]]]],[11,"drive_unindexed","","",55,N],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"clone","","",56,[[["self"]],["repeatn"]]],[11,"drive_unindexed","","",56,N],[11,"opt_len","","",56,[[["self"]],["option",["usize"]]]],[11,"drive","","",56,N],[11,"with_producer","","",56,N],[11,"len","","",56,[[["self"]],["usize"]]],[11,"clone","","",57,[[["self"]],["self"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",57,N],[11,"opt_len","","",57,[[["self"]],["option",["usize"]]]],[11,"drive","","",57,N],[11,"len","","",57,[[["self"]],["usize"]]],[11,"with_producer","","",57,N],[11,"clone","","",58,[[["self"]],["once"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",58,N],[11,"opt_len","","",58,[[["self"]],["option",["usize"]]]],[11,"drive","","",58,N],[11,"len","","",58,[[["self"]],["usize"]]],[11,"with_producer","","",58,N],[8,"ParallelBridge","","Conversion trait to convert an `Iterator` to a `ParallelIterator`.",N,N],[10,"par_bridge","","Create a bridge from this type to a `ParallelIterator`.",59,[[["self"]],["iterbridge"]]],[8,"IntoParallelIterator","","`IntoParallelIterator` implements the conversion to a [`ParallelIterator`].",N,N],[16,"Iter","","The parallel iterator type that will be created.",60,N],[16,"Item","","The type of item that the parallel iterator will produce.",60,N],[10,"into_par_iter","","Converts `self` into a parallel iterator.",60,N],[8,"IntoParallelRefIterator","","`IntoParallelRefIterator` implements the conversion to a [`ParallelIterator`], providing shared references to the data.",N,N],[16,"Iter","","The type of the parallel iterator that will be returned.",61,N],[16,"Item","","The type of item that the parallel iterator will produce. This will typically be an `&'data T` reference type.",61,N],[10,"par_iter","","Converts `self` into a parallel iterator.",61,N],[8,"IntoParallelRefMutIterator","","`IntoParallelRefMutIterator` implements the conversion to a [`ParallelIterator`], providing mutable references to the data.",N,N],[16,"Iter","","The type of iterator that will be created.",62,N],[16,"Item","","The type of item that will be produced; this is typically an `&'data mut T` reference.",62,N],[10,"par_iter_mut","","Creates the parallel iterator from `self`.",62,N],[8,"ParallelIterator","","Parallel version of the standard iterator trait.",N,N],[16,"Item","","The type of item that this parallel iterator produces. For example, if you use the [`for_each`] method, this is the type of item that your closure will be invoked with.",63,N],[11,"for_each","","Executes `OP` on each item produced by the iterator, in parallel.",63,[[["self"],["op"]]]],[11,"for_each_with","","Executes `OP` on the given `init` value with each item produced by the iterator, in parallel.",63,[[["self"],["t"],["op"]]]],[11,"try_for_each","","Executes a fallible `OP` on each item produced by the iterator, in parallel.",63,[[["self"],["op"]],["r"]]],[11,"try_for_each_with","","Executes a fallible `OP` on the given `init` value with each item produced by the iterator, in parallel.",63,[[["self"],["t"],["op"]],["r"]]],[11,"count","","Counts the number of items in this parallel iterator.",63,[[["self"]],["usize"]]],[11,"map","","Applies `map_op` to each item of this iterator, producing a new iterator with the results.",63,[[["self"],["f"]],["map"]]],[11,"map_with","","Applies `map_op` to the given `init` value with each item of this iterator, producing a new iterator with the results.",63,[[["self"],["t"],["f"]],["mapwith"]]],[11,"cloned","","Creates an iterator which clones all of its elements.  This may be useful when you have an iterator over `&T`, but you need `T`.",63,[[["self"]],["cloned"]]],[11,"inspect","","Applies `inspect_op` to a reference to each item of this iterator, producing a new iterator passing through the original items.  This is often useful for debugging to see what's happening in iterator stages.",63,[[["self"],["op"]],["inspect"]]],[11,"update","","Mutates each item of this iterator before yielding it.",63,[[["self"],["f"]],["update"]]],[11,"filter","","Applies `filter_op` to each item of this iterator, producing a new iterator with only the items that gave `true` results.",63,[[["self"],["p"]],["filter"]]],[11,"filter_map","","Applies `filter_op` to each item of this iterator to get an `Option`, producing a new iterator with only the items from `Some` results.",63,[[["self"],["p"]],["filtermap"]]],[11,"flat_map","","Applies `map_op` to each item of this iterator to get nested iterators, producing a new iterator that flattens these back into one.",63,[[["self"],["f"]],["flatmap"]]],[11,"flatten","","An adaptor that flattens iterable `Item`s into one large iterator",63,[[["self"]],["flatten"]]],[11,"reduce","","Reduces the items in the iterator into one item using `op`. The argument `identity` should be a closure that can produce \"identity\" value which may be inserted into the sequence as needed to create opportunities for parallel execution. So, for example, if you are doing a summation, then `identity()` ought to produce something that represents the zero for your type (but consider just calling `sum()` in that case).",63,N],[11,"reduce_with","","Reduces the items in the iterator into one item using `op`. If the iterator is empty, `None` is returned; otherwise, `Some` is returned.",63,[[["self"],["op"]],["option"]]],[11,"try_reduce","","Reduces the items in the iterator into one item using a fallible `op`. The `identity` argument is used the same way as in [`reduce()`].",63,N],[11,"try_reduce_with","","Reduces the items in the iterator into one item using a fallible `op`.",63,[[["self"],["op"]],["option"]]],[11,"fold","","Parallel fold is similar to sequential fold except that the sequence of items may be subdivided before it is folded. Consider a list of numbers like `22 3 77 89 46`. If you used sequential fold to add them (`fold(0, |a,b| a+b)`, you would wind up first adding 0 + 22, then 22 + 3, then 25 + 77, and so forth. The parallel fold works similarly except that it first breaks up your list into sublists, and hence instead of yielding up a single sum at the end, it yields up multiple sums. The number of results is nondeterministic, as is the point where the breaks occur.",63,[[["self"],["id"],["f"]],["fold"]]],[11,"fold_with","","Applies `fold_op` to the given `init` value with each item of this iterator, finally producing the value for further use.",63,[[["self"],["t"],["f"]],["foldwith"]]],[11,"try_fold","","Perform a fallible parallel fold.",63,[[["self"],["id"],["f"]],["tryfold"]]],[11,"try_fold_with","","Perform a fallible parallel fold with a cloneable `init` value.",63,[[["self"],["t"],["f"]],["tryfoldwith"]]],[11,"sum","","Sums up the items in the iterator.",63,[[["self"]],["s"]]],[11,"product","","Multiplies all the items in the iterator.",63,[[["self"]],["p"]]],[11,"min","","Computes the minimum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",63,[[["self"]],["option"]]],[11,"min_by","","Computes the minimum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",63,[[["self"],["f"]],["option"]]],[11,"min_by_key","","Computes the item that yields the minimum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",63,[[["self"],["f"]],["option"]]],[11,"max","","Computes the maximum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(max)` is returned.",63,[[["self"]],["option"]]],[11,"max_by","","Computes the maximum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",63,[[["self"],["f"]],["option"]]],[11,"max_by_key","","Computes the item that yields the maximum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",63,[[["self"],["f"]],["option"]]],[11,"chain","","Takes two iterators and creates a new iterator over both.",63,[[["self"],["c"]],["chain"]]],[11,"find_any","","Searches for some item in the parallel iterator that matches the given predicate and returns it. This operation is similar to [`find` on sequential iterators][find] but the item returned may not be the first one in the parallel sequence which matches, since we search the entire sequence in parallel.",63,[[["self"],["p"]],["option"]]],[11,"find_first","","Searches for the sequentially first item in the parallel iterator that matches the given predicate and returns it.",63,[[["self"],["p"]],["option"]]],[11,"find_last","","Searches for the sequentially last item in the parallel iterator that matches the given predicate and returns it.",63,[[["self"],["p"]],["option"]]],[11,"any","","Searches for some item in the parallel iterator that matches the given predicate, and if so returns true.  Once a match is found, we'll attempt to stop process the rest of the items.  Proving that there's no match, returning false, does require visiting every item.",63,[[["self"],["p"]],["bool"]]],[11,"all","","Tests that every item in the parallel iterator matches the given predicate, and if so returns true.  If a counter-example is found, we'll attempt to stop processing more items, then return false.",63,[[["self"],["p"]],["bool"]]],[11,"while_some","","Creates an iterator over the `Some` items of this iterator, halting as soon as any `None` is found.",63,[[["self"]],["whilesome"]]],[11,"collect","","Create a fresh collection containing all the element produced by this parallel iterator.",63,[[["self"]],["c"]]],[11,"unzip","","Unzips the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.",63,N],[11,"partition","","Partitions the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  Items for which the `predicate` returns true go into the first container, and the rest go into the second.",63,N],[11,"partition_map","","Partitions and maps the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  `Either::Left` items go into the first container, and `Either::Right` items go into the second.",63,N],[11,"intersperse","","Intersperses clones of an element between items of this iterator.",63,N],[10,"drive_unindexed","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",63,N],[11,"opt_len","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",63,[[["self"]],["option",["usize"]]]],[8,"IndexedParallelIterator","","An iterator that supports \"random access\" to its data, meaning that you can split it at arbitrary indices and draw data from those points.",N,N],[11,"collect_into_vec","","Collects the results of the iterator into the specified vector. The vector is always truncated before execution begins. If possible, reusing the vector across calls can lead to better performance since it reuses the same backing buffer.",64,[[["self"],["vec"]]]],[11,"unzip_into_vecs","","Unzips the results of the iterator into the specified vectors. The vectors are always truncated before execution begins. If possible, reusing the vectors across calls can lead to better performance since they reuse the same backing buffer.",64,[[["self"],["vec"],["vec"]]]],[11,"zip","","Iterate over tuples `(A, B)`, where the items `A` are from this iterator and `B` are from the iterator given as argument. Like the `zip` method on ordinary iterators, if the two iterators are of unequal length, you only get the items they have in common.",64,[[["self"],["z"]],["zip"]]],[11,"zip_eq","","The same as `Zip`, but requires that both iterators have the same length.",64,[[["self"],["z"]],["zipeq"]]],[11,"interleave","","Interleave elements of this iterator and the other given iterator. Alternately yields elements from this iterator and the given iterator, until both are exhausted. If one iterator is exhausted before the other, the last elements are provided from the other.",64,[[["self"],["i"]],["interleave"]]],[11,"interleave_shortest","","Interleave elements of this iterator and the other given iterator, until one is exhausted.",64,[[["self"],["i"]],["interleaveshortest"]]],[11,"chunks","","Split an iterator up into fixed-size chunks.",64,[[["self"],["usize"]],["chunks"]]],[11,"cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",64,[[["self"],["i"]],["ordering"]]],[11,"partial_cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",64,[[["self"],["i"]],["option",["ordering"]]]],[11,"eq","","Determines if the elements of this `ParallelIterator` are equal to those of another",64,[[["self"],["i"]],["bool"]]],[11,"ne","","Determines if the elements of this `ParallelIterator` are unequal to those of another",64,[[["self"],["i"]],["bool"]]],[11,"lt","","Determines if the elements of this `ParallelIterator` are lexicographically less than those of another.",64,[[["self"],["i"]],["bool"]]],[11,"le","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",64,[[["self"],["i"]],["bool"]]],[11,"gt","","Determines if the elements of this `ParallelIterator` are lexicographically greater than those of another.",64,[[["self"],["i"]],["bool"]]],[11,"ge","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",64,[[["self"],["i"]],["bool"]]],[11,"enumerate","","Yields an index along with each item.",64,[[["self"]],["enumerate"]]],[11,"skip","","Creates an iterator that skips the first `n` elements.",64,[[["self"],["usize"]],["skip"]]],[11,"take","","Creates an iterator that yields the first `n` elements.",64,[[["self"],["usize"]],["take"]]],[11,"position_any","","Searches for some item in the parallel iterator that matches the given predicate, and returns its index.  Like `ParallelIterator::find_any`, the parallel search will not necessarily find the first match, and once a match is found we'll attempt to stop processing any more.",64,[[["self"],["p"]],["option",["usize"]]]],[11,"position_first","","Searches for the sequentially first item in the parallel iterator that matches the given predicate, and returns its index.",64,[[["self"],["p"]],["option",["usize"]]]],[11,"position_last","","Searches for the sequentially last item in the parallel iterator that matches the given predicate, and returns its index.",64,[[["self"],["p"]],["option",["usize"]]]],[11,"rev","","Produces a new iterator with the elements of this iterator in reverse order.",64,[[["self"]],["rev"]]],[11,"with_min_len","","Sets the minimum length of iterators desired to process in each thread.  Rayon will not split any smaller than this length, but of course an iterator could already be smaller to begin with.",64,[[["self"],["usize"]],["minlen"]]],[11,"with_max_len","","Sets the maximum length of iterators desired to process in each thread.  Rayon will try to split at least below this length, unless that would put it below the length from `with_min_len()`. For example, given min=10 and max=15, a length of 16 will not be split any further.",64,[[["self"],["usize"]],["maxlen"]]],[10,"len","","Produces an exact count of how many items this iterator will produce, presuming no panic occurs.",64,[[["self"]],["usize"]]],[10,"drive","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",64,N],[10,"with_producer","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",64,N],[8,"FromParallelIterator","","`FromParallelIterator` implements the creation of a collection from a [`ParallelIterator`]. By implementing `FromParallelIterator` for a given type, you define how it will be created from an iterator.",N,N],[10,"from_par_iter","","Creates an instance of the collection from the parallel iterator `par_iter`.",65,[[["i"]],["self"]]],[8,"ParallelExtend","","`ParallelExtend` extends an existing collection with items from a [`ParallelIterator`].",N,N],[10,"par_extend","","Extends an instance of the collection with the elements drawn from the parallel iterator `par_iter`.",66,[[["self"],["i"]]]],[0,"option","rayon","Parallel iterator types for [options][std::option]",N,N],[3,"IntoIter","rayon::option","A parallel iterator over the value in [`Some`] variant of an [`Option`].",N,N],[3,"Iter","","A parallel iterator over a reference to the [`Some`] variant of an [`Option`].",N,N],[3,"IterMut","","A parallel iterator over a mutable reference to the [`Some`] variant of an [`Option`].",N,N],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"clone","","",67,[[["self"]],["intoiter"]]],[11,"drive_unindexed","","",67,N],[11,"opt_len","","",67,[[["self"]],["option",["usize"]]]],[11,"drive","","",67,N],[11,"len","","",67,[[["self"]],["usize"]]],[11,"with_producer","","",67,N],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"clone","","",68,[[["self"]],["self"]]],[11,"drive_unindexed","","",68,N],[11,"opt_len","","",68,[[["self"]],["option",["usize"]]]],[11,"drive","","",68,N],[11,"len","","",68,[[["self"]],["usize"]]],[11,"with_producer","","",68,N],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",69,N],[11,"opt_len","","",69,[[["self"]],["option",["usize"]]]],[11,"drive","","",69,N],[11,"len","","",69,[[["self"]],["usize"]]],[11,"with_producer","","",69,N],[0,"prelude","rayon","The rayon prelude imports the various `ParallelIterator` traits. The intention is that one can include `use rayon::prelude::*` and have easy access to the various traits and methods you will need.",N,N],[8,"ParallelBridge","rayon::prelude","Conversion trait to convert an `Iterator` to a `ParallelIterator`.",N,N],[10,"par_bridge","","Create a bridge from this type to a `ParallelIterator`.",59,[[["self"]],["iterbridge"]]],[0,"range","rayon","Parallel iterator types for [ranges][std::range], the type for values created by `a..b` expressions",N,N],[3,"Iter","rayon::range","Parallel iterator over a range, implemented for all integer types.",N,N],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"clone","","",70,[[["self"]],["iter"]]],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive","","",70,N],[11,"len","","",70,[[["self"]],["usize"]]],[11,"with_producer","","",70,N],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive","","",70,N],[11,"len","","",70,[[["self"]],["usize"]]],[11,"with_producer","","",70,N],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive","","",70,N],[11,"len","","",70,[[["self"]],["usize"]]],[11,"with_producer","","",70,N],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive","","",70,N],[11,"len","","",70,[[["self"]],["usize"]]],[11,"with_producer","","",70,N],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive","","",70,N],[11,"len","","",70,[[["self"]],["usize"]]],[11,"with_producer","","",70,N],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive","","",70,N],[11,"len","","",70,[[["self"]],["usize"]]],[11,"with_producer","","",70,N],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive","","",70,N],[11,"len","","",70,[[["self"]],["usize"]]],[11,"with_producer","","",70,N],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive","","",70,N],[11,"len","","",70,[[["self"]],["usize"]]],[11,"with_producer","","",70,N],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[0,"result","rayon","Parallel iterator types for [results][std::result]",N,N],[3,"IntoIter","rayon::result","Parallel iterator over a result",N,N],[3,"Iter","","Parallel iterator over an immutable reference to a result",N,N],[3,"IterMut","","Parallel iterator over a mutable reference to a result",N,N],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"clone","","",71,[[["self"]],["intoiter"]]],[11,"drive_unindexed","","",71,N],[11,"opt_len","","",71,[[["self"]],["option",["usize"]]]],[11,"drive","","",71,N],[11,"len","","",71,[[["self"]],["usize"]]],[11,"with_producer","","",71,N],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"clone","","",72,[[["self"]],["self"]]],[11,"drive_unindexed","","",72,N],[11,"opt_len","","",72,[[["self"]],["option",["usize"]]]],[11,"drive","","",72,N],[11,"len","","",72,[[["self"]],["usize"]]],[11,"with_producer","","",72,N],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",73,N],[11,"opt_len","","",73,[[["self"]],["option",["usize"]]]],[11,"drive","","",73,N],[11,"len","","",73,[[["self"]],["usize"]]],[11,"with_producer","","",73,N],[0,"slice","rayon","Parallel iterator types for [slices][std::slice]",N,N],[3,"Iter","rayon::slice","Parallel iterator over immutable items in a slice",N,N],[3,"Chunks","","Parallel iterator over immutable non-overlapping chunks of a slice",N,N],[3,"Windows","","Parallel iterator over immutable overlapping windows of a slice",N,N],[3,"IterMut","","Parallel iterator over mutable items in a slice",N,N],[3,"ChunksMut","","Parallel iterator over mutable non-overlapping chunks of a slice",N,N],[3,"Split","","Parallel iterator over slices separated by a predicate",N,N],[3,"SplitMut","","Parallel iterator over mutable slices separated by a predicate",N,N],[8,"ParallelSlice","","Parallel extensions for slices.",N,N],[10,"as_parallel_slice","","Returns a plain slice, which is used to implement the rest of the parallel methods.",74,N],[11,"par_split","","Returns a parallel iterator over subslices separated by elements that match the separator.",74,[[["self"],["p"]],["split"]]],[11,"par_windows","","Returns a parallel iterator over all contiguous windows of length `window_size`. The windows overlap.",74,[[["self"],["usize"]],["windows"]]],[11,"par_chunks","","Returns a parallel iterator over at most `chunk_size` elements of `self` at a time. The chunks do not overlap.",74,[[["self"],["usize"]],["chunks"]]],[8,"ParallelSliceMut","","Parallel extensions for mutable slices.",N,N],[10,"as_parallel_slice_mut","","Returns a plain mutable slice, which is used to implement the rest of the parallel methods.",75,N],[11,"par_split_mut","","Returns a parallel iterator over mutable subslices separated by elements that match the separator.",75,[[["self"],["p"]],["splitmut"]]],[11,"par_chunks_mut","","Returns a parallel iterator over at most `chunk_size` elements of `self` at a time. The chunks are mutable and do not overlap.",75,[[["self"],["usize"]],["chunksmut"]]],[11,"par_sort","","Sorts the slice in parallel.",75,[[["self"]]]],[11,"par_sort_by","","Sorts the slice in parallel with a comparator function.",75,[[["self"],["f"]]]],[11,"par_sort_by_key","","Sorts the slice in parallel with a key extraction function.",75,[[["self"],["f"]]]],[11,"par_sort_unstable","","Sorts the slice in parallel, but may not preserve the order of equal elements.",75,[[["self"]]]],[11,"par_sort_unstable_by","","Sorts the slice in parallel with a comparator function, but may not preserve the order of equal elements.",75,[[["self"],["f"]]]],[11,"par_sort_unstable_by_key","","Sorts the slice in parallel with a key extraction function, but may not preserve the order of equal elements.",75,[[["self"],["f"]]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"clone","","",76,[[["self"]],["self"]]],[11,"drive_unindexed","","",76,N],[11,"opt_len","","",76,[[["self"]],["option",["usize"]]]],[11,"drive","","",76,N],[11,"len","","",76,[[["self"]],["usize"]]],[11,"with_producer","","",76,N],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"clone","","",77,[[["self"]],["self"]]],[11,"drive_unindexed","","",77,N],[11,"opt_len","","",77,[[["self"]],["option",["usize"]]]],[11,"drive","","",77,N],[11,"len","","",77,[[["self"]],["usize"]]],[11,"with_producer","","",77,N],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"clone","","",78,[[["self"]],["self"]]],[11,"drive_unindexed","","",78,N],[11,"opt_len","","",78,[[["self"]],["option",["usize"]]]],[11,"drive","","",78,N],[11,"len","","",78,[[["self"]],["usize"]]],[11,"with_producer","","",78,N],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",79,N],[11,"opt_len","","",79,[[["self"]],["option",["usize"]]]],[11,"drive","","",79,N],[11,"len","","",79,[[["self"]],["usize"]]],[11,"with_producer","","",79,N],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",80,N],[11,"opt_len","","",80,[[["self"]],["option",["usize"]]]],[11,"drive","","",80,N],[11,"len","","",80,[[["self"]],["usize"]]],[11,"with_producer","","",80,N],[11,"clone","","",81,[[["self"]],["self"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",81,N],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",82,N],[0,"str","rayon","Parallel iterator types for [strings][std::str]",N,N],[3,"Chars","rayon::str","Parallel iterator over the characters of a string",N,N],[3,"CharIndices","","Parallel iterator over the characters of a string, with their positions",N,N],[3,"Bytes","","Parallel iterator over the bytes of a string",N,N],[3,"EncodeUtf16","","Parallel iterator over a string encoded as UTF-16",N,N],[3,"Split","","Parallel iterator over substrings separated by a pattern",N,N],[3,"SplitTerminator","","Parallel iterator over substrings separated by a terminator pattern",N,N],[3,"Lines","","Parallel iterator over lines in a string",N,N],[3,"SplitWhitespace","","Parallel iterator over substrings separated by whitespace",N,N],[3,"Matches","","Parallel iterator over substrings that match a pattern",N,N],[3,"MatchIndices","","Parallel iterator over substrings that match a pattern, with their positions",N,N],[8,"ParallelString","","Parallel extensions for strings.",N,N],[10,"as_parallel_string","","Returns a plain string slice, which is used to implement the rest of the parallel methods.",83,[[["self"]],["str"]]],[11,"par_chars","","Returns a parallel iterator over the characters of a string.",83,[[["self"]],["chars"]]],[11,"par_char_indices","","Returns a parallel iterator over the characters of a string, with their positions.",83,[[["self"]],["charindices"]]],[11,"par_bytes","","Returns a parallel iterator over the bytes of a string.",83,[[["self"]],["bytes"]]],[11,"par_encode_utf16","","Returns a parallel iterator over a string encoded as UTF-16.",83,[[["self"]],["encodeutf16"]]],[11,"par_split","","Returns a parallel iterator over substrings separated by a given character or predicate, similar to `str::split`.",83,[[["self"],["p"]],["split"]]],[11,"par_split_terminator","","Returns a parallel iterator over substrings terminated by a given character or predicate, similar to `str::split_terminator`. It's equivalent to `par_split`, except it doesn't produce an empty substring after a trailing terminator.",83,[[["self"],["p"]],["splitterminator"]]],[11,"par_lines","","Returns a parallel iterator over the lines of a string, ending with an optional carriage return and with a newline (`\\r\\n` or just `\\n`). The final line ending is optional, and line endings are not included in the output strings.",83,[[["self"]],["lines"]]],[11,"par_split_whitespace","","Returns a parallel iterator over the sub-slices of a string that are separated by any amount of whitespace.",83,[[["self"]],["splitwhitespace"]]],[11,"par_matches","","Returns a parallel iterator over substrings that match a given character or predicate, similar to `str::matches`.",83,[[["self"],["p"]],["matches"]]],[11,"par_match_indices","","Returns a parallel iterator over substrings that match a given character or predicate, with their positions, similar to `str::match_indices`.",83,[[["self"],["p"]],["matchindices"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"clone","","",84,[[["self"]],["chars"]]],[11,"drive_unindexed","","",84,N],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"clone","","",85,[[["self"]],["charindices"]]],[11,"drive_unindexed","","",85,N],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"clone","","",86,[[["self"]],["bytes"]]],[11,"drive_unindexed","","",86,N],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"clone","","",87,[[["self"]],["encodeutf16"]]],[11,"drive_unindexed","","",87,N],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"clone","","",88,[[["self"]],["split"]]],[11,"drive_unindexed","","",88,N],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"clone","","",89,[[["self"]],["splitterminator"]]],[11,"drive_unindexed","","",89,N],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"clone","","",90,[[["self"]],["lines"]]],[11,"drive_unindexed","","",90,N],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"clone","","",91,[[["self"]],["splitwhitespace"]]],[11,"drive_unindexed","","",91,N],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"clone","","",92,[[["self"]],["matches"]]],[11,"drive_unindexed","","",92,N],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"clone","","",93,[[["self"]],["matchindices"]]],[11,"drive_unindexed","","",93,N],[0,"vec","rayon","Parallel iterator types for [vectors][std::vec] (`Vec<T>`)",N,N],[3,"IntoIter","rayon::vec","Parallel iterator that moves out of a vector.",N,N],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"clone","","",94,[[["self"]],["intoiter"]]],[11,"drive_unindexed","","",94,N],[11,"opt_len","","",94,[[["self"]],["option",["usize"]]]],[11,"drive","","",94,N],[11,"len","","",94,[[["self"]],["usize"]]],[11,"with_producer","","",94,N],[11,"drive_unindexed","rayon::iter","",18,N],[11,"opt_len","","",18,[[["self"]],["option",["usize"]]]],[11,"drive","","",18,N],[11,"len","","",18,[[["self"]],["usize"]]],[11,"with_producer","","",18,N],[11,"par_extend","","",18,[[["self"],["i"]]]],[11,"new","rayon","Deprecated in favor of `ThreadPoolBuilder::build`.",95,[[["configuration"]],["result",["threadpool","box"]]]],[11,"install","","Executes `op` within the threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool.",95,[[["self"],["op"]],["r"]]],[11,"current_num_threads","","Returns the (current) number of threads in the thread pool.",95,[[["self"]],["usize"]]],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",95,[[["self"]],["option",["usize"]]]],[11,"current_thread_has_pending_tasks","","Returns true if the current worker thread currently has \"local tasks\" pending. This can be useful as part of a heuristic for deciding whether to spawn a new task or execute code on the current thread, particularly in breadth-first schedulers. However, keep in mind that this is an inherently racy check, as other worker threads may be actively \"stealing\" tasks from our local deque.",95,[[["self"]],["option",["bool"]]]],[11,"join","","Execute `oper_a` and `oper_b` in the thread-pool and return the results. Equivalent to `self.install(|| join(oper_a, oper_b))`.",95,N],[11,"scope","","Creates a scope that executes within this thread-pool. Equivalent to `self.install(|| scope(...))`.",95,[[["self"],["op"]],["r"]]],[11,"spawn","","Spawns an asynchronous task in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame -- therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).",95,N],[11,"fmt","","",96,[[["self"],["formatter"]],["result",["error"]]]],[11,"default","","",97,[[],["threadpoolbuilder"]]],[11,"description","","",96,[[["self"]],["str"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","","",95,N],[11,"fmt","rayon::iter","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"into","","",18,[[["self"]],["result"]]],[11,"clone","","",18,[[["self"]],["either"]]],[11,"hash","","",18,N],[11,"eq","","",18,[[["self"],["either"]],["bool"]]],[11,"ne","","",18,[[["self"],["either"]],["bool"]]],[11,"as_ref","","",18,[[["self"]],["target"]]],[11,"deref_mut","","",18,N],[11,"deref","","",18,N],[11,"next","","",18,[[["self"]],["option"]]],[11,"size_hint","","",18,N],[11,"fold","","",18,[[["self"],["acc"],["g"]],["acc"]]],[11,"count","","",18,[[["self"]],["usize"]]],[11,"last","","",18,[[["self"]],["option"]]],[11,"nth","","",18,[[["self"],["usize"]],["option"]]],[11,"collect","","",18,[[["self"]],["b"]]],[11,"all","","",18,[[["self"],["f"]],["bool"]]],[11,"from","","",18,[[["result"]],["either"]]],[11,"next_back","","",18,[[["self"]],["option"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",18,[[["self"],["either"]],["option",["ordering"]]]],[11,"lt","","",18,[[["self"],["either"]],["bool"]]],[11,"le","","",18,[[["self"],["either"]],["bool"]]],[11,"gt","","",18,[[["self"],["either"]],["bool"]]],[11,"ge","","",18,[[["self"],["either"]],["bool"]]],[11,"cmp","","",18,[[["self"],["either"]],["ordering"]]],[11,"extend","","",18,N],[11,"as_mut","","",18,[[["self"]],["target"]]],[11,"new","rayon","Creates and returns a valid rayon thread pool builder, but does not initialize it.",97,[[],["threadpoolbuilder"]]],[11,"build","","Create a new `ThreadPool` initialized using this configuration.",97,[[["self"]],["result",["threadpool","threadpoolbuilderror"]]]],[11,"build_global","","Initializes the global thread pool. This initialization is optional.  If you do not call this function, the thread pool will be automatically initialized with the default configuration. Calling `build_global` is not recommended, except in two scenarios:",97,[[["self"]],["result",["threadpoolbuilderror"]]]],[11,"thread_name","","Set a closure which takes a thread index and returns the thread's name.",97,[[["self"],["f"]],["threadpoolbuilder"]]],[11,"num_threads","","Set the number of threads to be used in the rayon threadpool.",97,[[["self"],["usize"]],["threadpoolbuilder"]]],[11,"panic_handler","","Normally, whenever Rayon catches a panic, it tries to propagate it to someplace sensible, to try and reflect the semantics of sequential execution. But in some cases, particularly with the `spawn()` APIs, there is no obvious place where we should propagate the panic to. In that case, this panic handler is invoked.",97,[[["self"],["h"]],["threadpoolbuilder"]]],[11,"stack_size","","Set the stack size of the worker threads",97,[[["self"],["usize"]],["threadpoolbuilder"]]],[11,"breadth_first","","Suggest to worker threads that they execute spawned jobs in a \"breadth-first\" fashion. Typically, when a worker thread is idle or blocked, it will attempt to execute the job from the top of its local deque of work (i.e., the job most recently spawned). If this flag is set to true, however, workers will prefer to execute in a breadth-first fashion -- that is, they will search for jobs at the bottom of their local deque. (At present, workers always steal from the bottom of other worker's deques, regardless of the setting of this flag.)",97,[[["self"]],["threadpoolbuilder"]]],[11,"start_handler","","Set a callback to be invoked on thread start.",97,[[["self"],["h"]],["threadpoolbuilder"]]],[11,"exit_handler","","Set a callback to be invoked on thread exit.",97,[[["self"],["h"]],["threadpoolbuilder"]]],[11,"migrated","","Returns `true` if the closure was called from a different thread than it was provided from.",98,[[["self"]],["bool"]]],[11,"spawn","","Spawns a job into the fork-join scope `self`. This job will execute sometime before the fork-join scope completes.  The job is specified as a closure, and this closure receives its own reference to the scope `self` as argument. This can be used to inject new jobs into `self`.",99,N],[11,"is_left","rayon::iter","Return true if the value is the `Left` variant.",18,[[["self"]],["bool"]]],[11,"is_right","","Return true if the value is the `Right` variant.",18,[[["self"]],["bool"]]],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",18,[[["self"]],["option"]]],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",18,[[["self"]],["option"]]],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",18,[[["self"]],["either"]]],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",18,[[["self"]],["either"]]],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",18,[[["self"]],["either"]]],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",18,[[["self"],["f"]],["either"]]],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",18,[[["self"],["f"]],["either"]]],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",18,[[["self"],["f"],["g"]],["t"]]],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",18,[[["self"],["ctx"],["f"],["g"]],["t"]]],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",18,[[["self"],["f"]],["either"]]],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",18,[[["self"],["f"]],["either"]]],[11,"into_iter","","Convert the inner value to an iterator.",18,[[["self"]],["either"]]],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",18,N],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",18,N],[11,"into_inner","","Extract the value of an either over two equivalent types.",18,[[["self"]],["t"]]]],"paths":[[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[4,"Either"],[3,"IterBridge"],[3,"Chain"],[3,"Chunks"],[3,"Enumerate"],[3,"Filter"],[3,"FilterMap"],[3,"FlatMap"],[3,"Flatten"],[8,"ProducerCallback"],[8,"Producer"],[8,"Consumer"],[8,"Folder"],[8,"Reducer"],[8,"UnindexedConsumer"],[8,"UnindexedProducer"],[3,"Fold"],[3,"FoldWith"],[3,"TryFold"],[3,"TryFoldWith"],[3,"Skip"],[3,"Split"],[3,"Take"],[3,"Map"],[3,"MapWith"],[3,"Zip"],[3,"ZipEq"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"Intersperse"],[3,"Update"],[3,"Rev"],[3,"MinLen"],[3,"MaxLen"],[3,"Cloned"],[3,"Inspect"],[3,"WhileSome"],[3,"Repeat"],[3,"RepeatN"],[3,"Empty"],[3,"Once"],[8,"ParallelBridge"],[8,"IntoParallelIterator"],[8,"IntoParallelRefIterator"],[8,"IntoParallelRefMutIterator"],[8,"ParallelIterator"],[8,"IndexedParallelIterator"],[8,"FromParallelIterator"],[8,"ParallelExtend"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"ParallelSlice"],[8,"ParallelSliceMut"],[3,"Iter"],[3,"Chunks"],[3,"Windows"],[3,"IterMut"],[3,"ChunksMut"],[3,"Split"],[3,"SplitMut"],[8,"ParallelString"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"EncodeUtf16"],[3,"Split"],[3,"SplitTerminator"],[3,"Lines"],[3,"SplitWhitespace"],[3,"Matches"],[3,"MatchIndices"],[3,"IntoIter"],[3,"ThreadPool"],[3,"ThreadPoolBuildError"],[3,"ThreadPoolBuilder"],[3,"FnContext"],[3,"Scope"]]};
searchIndex["rayon_core"]={"doc":"Under construction","items":[[3,"ThreadPool","rayon_core","Represents a user created [thread-pool].",N,N],[3,"Scope","","Represents a fork-join scope which can be used to spawn any number of tasks. See [`scope()`] for more information.",N,N],[3,"ThreadPoolBuildError","","Error when initializing a thread pool.",N,N],[3,"ThreadPoolBuilder","","Used to create a new [`ThreadPool`] or to configure the global rayon thread pool. ## Creating a ThreadPool The following creates a thread pool with 22 threads.",N,N],[3,"Configuration","","Contains the rayon thread pool configuration. Use [`ThreadPoolBuilder`] instead.",N,N],[3,"FnContext","","Provides the calling context to a closure called by `join_context`.",N,N],[5,"current_thread_index","","If called from a Rayon worker thread, returns the index of that thread within its current pool; if not called from a Rayon thread, returns `None`.",N,[[],["option",["usize"]]]],[5,"current_thread_has_pending_tasks","","If called from a Rayon worker thread, indicates whether that thread's local deque still has pending tasks. Otherwise, returns `None`. For more information, see [the `ThreadPool::current_thread_has_pending_tasks()` method][m].",N,[[],["option",["bool"]]]],[5,"join","","Takes two closures and potentially runs them in parallel. It returns a pair of the results from those closures.",N,N],[5,"join_context","","Identical to `join`, except that the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they're executing on a different thread than where `join_context` was called.  This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.",N,N],[5,"scope","","Create a \"fork-join\" scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.",N,[[["op"]],["r"]]],[5,"spawn","","Fires off a task into the Rayon threadpool in the \"static\" or \"global\" scope.  Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function][scope] to create a scope.",N,[[["f"]]]],[5,"current_num_threads","","Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.",N,[[],["usize"]]],[5,"initialize","","Deprecated in favor of `ThreadPoolBuilder::build_global`.",N,[[["configuration"]],["result",["box"]]]],[11,"spawn","","Spawns a job into the fork-join scope `self`. This job will execute sometime before the fork-join scope completes.  The job is specified as a closure, and this closure receives its own reference to the scope `self` as argument. This can be used to inject new jobs into `self`.",0,[[["self"],["body"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Deprecated in favor of `ThreadPoolBuilder::build`.",1,[[["configuration"]],["result",["threadpool","box"]]]],[11,"install","","Executes `op` within the threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool.",1,[[["self"],["op"]],["r"]]],[11,"current_num_threads","","Returns the (current) number of threads in the thread pool.",1,[[["self"]],["usize"]]],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",1,[[["self"]],["option",["usize"]]]],[11,"current_thread_has_pending_tasks","","Returns true if the current worker thread currently has \"local tasks\" pending. This can be useful as part of a heuristic for deciding whether to spawn a new task or execute code on the current thread, particularly in breadth-first schedulers. However, keep in mind that this is an inherently racy check, as other worker threads may be actively \"stealing\" tasks from our local deque.",1,[[["self"]],["option",["bool"]]]],[11,"join","","Execute `oper_a` and `oper_b` in the thread-pool and return the results. Equivalent to `self.install(|| join(oper_a, oper_b))`.",1,N],[11,"scope","","Creates a scope that executes within this thread-pool. Equivalent to `self.install(|| scope(...))`.",1,[[["self"],["op"]],["r"]]],[11,"spawn","","Spawns an asynchronous task in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame -- therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).",1,[[["self"],["op"]]]],[11,"drop","","",1,[[["self"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["threadpoolbuilder"]]],[11,"default","","",4,[[],["configuration"]]],[11,"new","","Creates and returns a valid rayon thread pool builder, but does not initialize it.",3,[[],["threadpoolbuilder"]]],[11,"build","","Create a new `ThreadPool` initialized using this configuration.",3,[[["self"]],["result",["threadpool","threadpoolbuilderror"]]]],[11,"build_global","","Initializes the global thread pool. This initialization is optional.  If you do not call this function, the thread pool will be automatically initialized with the default configuration. Calling `build_global` is not recommended, except in two scenarios:",3,[[["self"]],["result",["threadpoolbuilderror"]]]],[11,"thread_name","","Set a closure which takes a thread index and returns the thread's name.",3,[[["self"],["f"]],["self"]]],[11,"num_threads","","Set the number of threads to be used in the rayon threadpool.",3,[[["self"],["usize"]],["threadpoolbuilder"]]],[11,"panic_handler","","Normally, whenever Rayon catches a panic, it tries to propagate it to someplace sensible, to try and reflect the semantics of sequential execution. But in some cases, particularly with the `spawn()` APIs, there is no obvious place where we should propagate the panic to. In that case, this panic handler is invoked.",3,[[["self"],["h"]],["threadpoolbuilder"]]],[11,"stack_size","","Set the stack size of the worker threads",3,[[["self"],["usize"]],["self"]]],[11,"breadth_first","","Suggest to worker threads that they execute spawned jobs in a \"breadth-first\" fashion. Typically, when a worker thread is idle or blocked, it will attempt to execute the job from the top of its local deque of work (i.e., the job most recently spawned). If this flag is set to true, however, workers will prefer to execute in a breadth-first fashion -- that is, they will search for jobs at the bottom of their local deque. (At present, workers always steal from the bottom of other worker's deques, regardless of the setting of this flag.)",3,[[["self"]],["self"]]],[11,"start_handler","","Set a callback to be invoked on thread start.",3,[[["self"],["h"]],["threadpoolbuilder"]]],[11,"exit_handler","","Set a callback to be invoked on thread exit.",3,[[["self"],["h"]],["threadpoolbuilder"]]],[11,"new","","Creates and return a valid rayon thread pool configuration, but does not initialize it.",4,[[],["configuration"]]],[11,"build","","Deprecated in favor of `ThreadPoolBuilder::build`.",4,[[["self"]],["result",["threadpool","box"]]]],[11,"thread_name","","Deprecated in favor of `ThreadPoolBuilder::thread_name`.",4,[[["self"],["f"]],["self"]]],[11,"num_threads","","Deprecated in favor of `ThreadPoolBuilder::num_threads`.",4,[[["self"],["usize"]],["configuration"]]],[11,"panic_handler","","Deprecated in favor of `ThreadPoolBuilder::panic_handler`.",4,[[["self"],["h"]],["configuration"]]],[11,"stack_size","","Deprecated in favor of `ThreadPoolBuilder::stack_size`.",4,[[["self"],["usize"]],["self"]]],[11,"breadth_first","","Deprecated in favor of `ThreadPoolBuilder::breadth_first`.",4,[[["self"]],["self"]]],[11,"start_handler","","Deprecated in favor of `ThreadPoolBuilder::start_handler`.",4,[[["self"],["h"]],["configuration"]]],[11,"exit_handler","","Deprecated in favor of `ThreadPoolBuilder::exit_handler`.",4,[[["self"],["h"]],["configuration"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"migrated","","Returns `true` if the closure was called from a different thread than it was provided from.",5,[[["self"]],["bool"]]]],"paths":[[3,"Scope"],[3,"ThreadPool"],[3,"ThreadPoolBuildError"],[3,"ThreadPoolBuilder"],[3,"Configuration"],[3,"FnContext"]]};
searchIndex["regex"]={"doc":"This crate provides a library for parsing, compiling, and executing regular expressions. Its syntax is similar to Perl-style regular expressions, but lacks a few features like look around and backreferences. In exchange, all searches execute in linear time with respect to the size of the regular expression and search text.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",N,N],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",N,N],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",N,N],[3,"SetMatches","","A set of matches returned by a regex set.",N,N],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",N,N],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",N,N],[3,"Regex","","A compiled regular expression for matching Unicode strings.",N,N],[3,"Match","","Match represents a single match of a regex in a haystack.",N,N],[3,"Captures","","Captures represents a group of captured strings for a single match.",N,N],[3,"CaptureNames","","An iterator over the names of all possible captures.",N,N],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",N,N],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",N,N],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",N,N],[3,"CaptureLocations","","CaptureLocations is a low level representation of the raw offsets of each submatch.",N,N],[3,"ReplacerRef","","By-reference adaptor for a `Replacer`",N,N],[3,"NoExpand","","`NoExpand` indicates literal string replacement.",N,N],[12,"0","","",0,N],[3,"Split","","Yields all substrings delimited by a regular expression match.",N,N],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",N,N],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",N,N],[13,"Syntax","","A syntax error.",1,N],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",1,N],[5,"escape","","Escapes all regular expression meta characters in `text`.",N,[[["str"]],["string"]]],[0,"bytes","","Match regular expressions on arbitrary bytes.",N,N],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",N,N],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",N,N],[3,"Match","","Match represents a single match of a regex in a haystack.",N,N],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",N,N],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",N,N],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",N,N],[3,"Split","","Yields all substrings delimited by a regular expression match.",N,N],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",N,N],[3,"CaptureNames","","An iterator over the names of all possible captures.",N,N],[3,"CaptureLocations","","CaptureLocations is a low level representation of the raw offsets of each submatch.",N,N],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",N,N],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",N,N],[3,"ReplacerRef","","By-reference adaptor for a `Replacer`",N,N],[3,"NoExpand","","`NoExpand` indicates literal byte string replacement.",N,N],[12,"0","","",2,N],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",N,N],[3,"SetMatches","","A set of matches returned by a regex set.",N,N],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",N,N],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",N,N],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",N,N],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,[[["self"]],["option",["cow"]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",3,[[["self"]],["replacerref"]]],[11,"clone","regex","",1,[[["self"]],["error"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"ne","","",1,[[["self"],["error"]],["bool"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,[[["str"]],["regexbuilder"]]],[11,"build","","Consume the builder and compile the regular expression.",4,[[["self"]],["result",["regex","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,[[["self"],["usize"]],["regexbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,[[["self"],["usize"]],["regexbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",4,[[["self"],["u32"]],["regexbuilder"]]],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,[[["str"]],["regexbuilder"]]],[11,"build","","Consume the builder and compile the regular expression.",5,[[["self"]],["result",["regex","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,[[["self"],["usize"]],["regexbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,[[["self"],["usize"]],["regexbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",5,[[["self"],["u32"]],["regexbuilder"]]],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",6,[[["i"]],["regexsetbuilder"]]],[11,"build","","Consume the builder and compile the regular expressions into a set.",6,[[["self"]],["result",["regexset","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",6,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",6,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",6,[[["self"],["u32"]],["regexsetbuilder"]]],[11,"new","regex","Create a new regular expression builder with the given pattern.",7,[[["i"]],["regexsetbuilder"]]],[11,"build","","Consume the builder and compile the regular expressions into a set.",7,[[["self"]],["result",["regexset","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",7,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",7,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",7,[[["self"],["u32"]],["regexsetbuilder"]]],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,[[["self"]],["option",["cow"]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",3,[[["self"]],["replacerref"]]],[11,"clone","","",8,[[["self"]],["match"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["match"]],["bool"]]],[11,"ne","","",8,[[["self"],["match"]],["bool"]]],[11,"start","","Returns the starting byte offset of the match in the haystack.",8,[[["self"]],["usize"]]],[11,"end","","Returns the ending byte offset of the match in the haystack.",8,[[["self"]],["usize"]]],[11,"as_bytes","","Returns the matched text.",8,N],[11,"clone","","",9,[[["self"]],["regex"]]],[11,"fmt","","Shows the original regular expression.",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Shows the original regular expression.",9,[[["self"],["formatter"]],["result"]]],[11,"from_str","","Attempts to parse a string into a regular expression",9,[[["str"]],["result",["regex","error"]]]],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",9,[[["str"]],["result",["regex","error"]]]],[11,"is_match","","Returns true if and only if the regex matches the string given.",9,N],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",9,N],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",9,N],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",9,N],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",9,N],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",9,N],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",9,N],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular byte string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced byte string.",9,N],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",9,N],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",9,N],[11,"shortest_match","","Returns the end location of a match in the text given.",9,N],[11,"shortest_match_at","","Returns the same as shortest_match, but starts the search at the given offset.",9,N],[11,"is_match_at","","Returns the same as is_match, but starts the search at the given offset.",9,N],[11,"find_at","","Returns the same as find, but starts the search at the given offset.",9,N],[11,"captures_read","","This is like `captures`, but uses `CaptureLocations` instead of `Captures` in order to amortize allocations.",9,N],[11,"captures_read_at","","Returns the same as `captures_read`, but starts the search at the given offset and populates the capture locations given.",9,N],[11,"as_str","","Returns the original string of this regex.",9,[[["self"]],["str"]]],[11,"capture_names","","Returns an iterator over the capture names.",9,[[["self"]],["capturenames"]]],[11,"captures_len","","Returns the number of captures.",9,[[["self"]],["usize"]]],[11,"capture_locations","","Returns an empty set of capture locations that can be reused in multiple calls to `captures_read` or `captures_read_at`.",9,[[["self"]],["capturelocations"]]],[11,"next","","",10,[[["self"]],["option",["match"]]]],[11,"next","","",11,[[["self"]],["option",["captures"]]]],[11,"next","","",12,[[["self"]],["option"]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"next","","",14,[[["self"]],["option",["option"]]]],[11,"size_hint","","",14,N],[11,"clone","","",15,[[["self"]],["capturelocations"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"get","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original string matched.",15,[[["self"],["usize"]],["option"]]],[11,"len","","Returns the total number of capturing groups.",15,[[["self"]],["usize"]]],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",16,[[["self"],["usize"]],["option",["match"]]]],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",16,[[["self"],["str"]],["option",["match"]]]],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",16,[[["self"]],["subcapturematches"]]],[11,"expand","","Expands all instances of `$name` in `replacement` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",16,N],[11,"len","","Returns the number of captured groups.",16,[[["self"]],["usize"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"index","","",16,N],[11,"index","","",16,N],[11,"next","","",17,[[["self"]],["option",["option"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"replace_append","","",18,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","",18,[[["self"]],["option",["cow"]]]],[11,"replace_append","","",2,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","",2,[[["self"]],["option",["cow"]]]],[11,"clone","regex","",19,[[["self"]],["regexset"]]],[11,"new","","Create a new regex set with the given regular expressions.",19,[[["i"]],["result",["regexset","error"]]]],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",19,[[["self"],["str"]],["bool"]]],[11,"matches","","Returns the set of regular expressions that match in the given text.",19,[[["self"],["str"]],["setmatches"]]],[11,"len","","Returns the total number of regular expressions in this set.",19,[[["self"]],["usize"]]],[11,"clone","","",20,[[["self"]],["setmatches"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"matched_any","","Whether this set contains any matches.",20,[[["self"]],["bool"]]],[11,"matched","","Whether the regex at the given index matched.",20,[[["self"],["usize"]],["bool"]]],[11,"len","","The total number of regexes in the set that created these matches.",20,[[["self"]],["usize"]]],[11,"iter","","Returns an iterator over indexes in the regex that matched.",20,[[["self"]],["setmatchesiter"]]],[11,"into_iter","","",20,N],[11,"next","","",21,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",21,N],[11,"next_back","","",21,[[["self"]],["option",["usize"]]]],[11,"clone","","",22,[[["self"]],["setmatchesiter"]]],[11,"next","","",22,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",22,N],[11,"next_back","","",22,[[["self"]],["option",["usize"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","regex::bytes","",23,[[["self"]],["regexset"]]],[11,"new","","Create a new regex set with the given regular expressions.",23,[[["i"]],["result",["regexset","error"]]]],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",23,N],[11,"matches","","Returns the set of regular expressions that match in the given text.",23,N],[11,"len","","Returns the total number of regular expressions in this set.",23,[[["self"]],["usize"]]],[11,"clone","","",24,[[["self"]],["setmatches"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"matched_any","","Whether this set contains any matches.",24,[[["self"]],["bool"]]],[11,"matched","","Whether the regex at the given index matched.",24,[[["self"],["usize"]],["bool"]]],[11,"len","","The total number of regexes in the set that created these matches.",24,[[["self"]],["usize"]]],[11,"iter","","Returns an iterator over indexes in the regex that matched.",24,[[["self"]],["setmatchesiter"]]],[11,"into_iter","","",24,N],[11,"next","","",25,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",25,N],[11,"next_back","","",25,[[["self"]],["option",["usize"]]]],[11,"clone","","",26,[[["self"]],["setmatchesiter"]]],[11,"next","","",26,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",26,N],[11,"next_back","","",26,[[["self"]],["option",["usize"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","regex","",27,[[["self"]],["match"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"eq","","",27,[[["self"],["match"]],["bool"]]],[11,"ne","","",27,[[["self"],["match"]],["bool"]]],[11,"start","","Returns the starting byte offset of the match in the haystack.",27,[[["self"]],["usize"]]],[11,"end","","Returns the ending byte offset of the match in the haystack.",27,[[["self"]],["usize"]]],[11,"as_str","","Returns the matched text.",27,[[["self"]],["str"]]],[11,"clone","","",28,[[["self"]],["regex"]]],[11,"fmt","","Shows the original regular expression.",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Shows the original regular expression.",28,[[["self"],["formatter"]],["result"]]],[11,"from_str","","Attempts to parse a string into a regular expression",28,[[["str"]],["result",["regex","error"]]]],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",28,[[["str"]],["result",["regex","error"]]]],[11,"is_match","","Returns true if and only if the regex matches the string given.",28,[[["self"],["str"]],["bool"]]],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",28,[[["self"],["str"]],["option",["match"]]]],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",28,[[["self"],["str"]],["matches"]]],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",28,[[["self"],["str"]],["option",["captures"]]]],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",28,[[["self"],["str"]],["capturematches"]]],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",28,[[["self"],["str"]],["split"]]],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",28,[[["self"],["str"],["usize"]],["splitn"]]],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced string.",28,[[["self"],["str"],["r"]],["cow",["str"]]]],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",28,[[["self"],["str"],["r"]],["cow",["str"]]]],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",28,[[["self"],["str"],["usize"],["r"]],["cow",["str"]]]],[11,"shortest_match","","Returns the end location of a match in the text given.",28,[[["self"],["str"]],["option",["usize"]]]],[11,"shortest_match_at","","Returns the same as shortest_match, but starts the search at the given offset.",28,[[["self"],["str"],["usize"]],["option",["usize"]]]],[11,"is_match_at","","Returns the same as is_match, but starts the search at the given offset.",28,[[["self"],["str"],["usize"]],["bool"]]],[11,"find_at","","Returns the same as find, but starts the search at the given offset.",28,[[["self"],["str"],["usize"]],["option",["match"]]]],[11,"captures_read","","This is like `captures`, but uses `CaptureLocations` instead of `Captures` in order to amortize allocations.",28,[[["self"],["capturelocations"],["str"]],["option",["match"]]]],[11,"captures_read_at","","Returns the same as captures, but starts the search at the given offset and populates the capture locations given.",28,[[["self"],["capturelocations"],["str"],["usize"]],["option",["match"]]]],[11,"as_str","","Returns the original string of this regex.",28,[[["self"]],["str"]]],[11,"capture_names","","Returns an iterator over the capture names.",28,[[["self"]],["capturenames"]]],[11,"captures_len","","Returns the number of captures.",28,[[["self"]],["usize"]]],[11,"capture_locations","","Returns an empty set of capture locations that can be reused in multiple calls to `captures_read` or `captures_read_at`.",28,[[["self"]],["capturelocations"]]],[11,"next","","",29,[[["self"]],["option",["option"]]]],[11,"size_hint","","",29,N],[11,"next","","",30,[[["self"]],["option",["str"]]]],[11,"next","","",31,[[["self"]],["option",["str"]]]],[11,"clone","","",32,[[["self"]],["capturelocations"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"get","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original string matched.",32,[[["self"],["usize"]],["option"]]],[11,"len","","Returns the total number of capturing groups.",32,[[["self"]],["usize"]]],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",33,[[["self"],["usize"]],["option",["match"]]]],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",33,[[["self"],["str"]],["option",["match"]]]],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",33,[[["self"]],["subcapturematches"]]],[11,"expand","","Expands all instances of `$name` in `replacement` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",33,[[["self"],["str"],["string"]]]],[11,"len","","Returns the number of captured groups.",33,[[["self"]],["usize"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"index","","",33,[[["self"],["usize"]],["str"]]],[11,"index","","",33,[[["self"],["str"]],["str"]]],[11,"next","","",34,[[["self"]],["option",["option"]]]],[11,"next","","",35,[[["self"]],["option",["captures"]]]],[11,"next","","",36,[[["self"]],["option",["match"]]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"replace_append","","",37,[[["self"],["captures"],["string"]]]],[11,"no_expansion","","",37,[[["self"]],["option",["cow"]]]],[11,"replace_append","","",0,[[["self"],["captures"],["string"]]]],[11,"no_expansion","","",0,[[["self"]],["option",["cow"]]]],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",N,N],[10,"replace_append","","Appends text to `dst` to replace the current match.",38,[[["self"],["captures"],["string"]]]],[11,"no_expansion","","Return a fixed unchanging replacement string.",38,[[["self"]],["option",["cow"]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",38,[[["self"]],["replacerref"]]],[11,"no_expansion","","Return a fixed unchanging replacement string.",38,[[["self"]],["option",["cow"]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",38,[[["self"]],["replacerref"]]]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"RegexSetBuilder"],[3,"Match"],[3,"Regex"],[3,"Matches"],[3,"CaptureMatches"],[3,"Split"],[3,"SplitN"],[3,"CaptureNames"],[3,"CaptureLocations"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"ReplacerRef"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Match"],[3,"Regex"],[3,"CaptureNames"],[3,"Split"],[3,"SplitN"],[3,"CaptureLocations"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"CaptureMatches"],[3,"Matches"],[3,"ReplacerRef"],[8,"Replacer"]]};
searchIndex["regex_syntax"]={"doc":"This crate provides a robust regular expression parser.","items":[[3,"Parser","regex_syntax","A convenience parser for regular expressions.",N,N],[3,"ParserBuilder","","A builder for a regular expression parser.",N,N],[4,"Error","","This error type encompasses any error that can be returned by this crate.",N,N],[13,"Parse","","An error that occurred while translating concrete syntax into abstract syntax (AST).",0,N],[13,"Translate","","An error that occurred while translating abstract syntax into a high level intermediate representation (HIR).",0,N],[5,"escape","","Escapes all regular expression meta characters in `text`.",N,[[["str"]],["string"]]],[5,"escape_into","","Escapes all meta characters in `text` and writes the result into `buf`.",N,[[["str"],["string"]]]],[5,"is_meta_character","","Returns true if the give character has significance in a regex.",N,[[["char"]],["bool"]]],[5,"is_word_character","","Returns true if and only if the given character is a Unicode word character.",N,[[["char"]],["bool"]]],[5,"is_word_byte","","Returns true if and only if the given character is an ASCII word character.",N,[[["u8"]],["bool"]]],[0,"ast","","Defines an abstract syntax for regular expressions.",N,N],[3,"Error","regex_syntax::ast","An error that occurred while parsing a regular expression into an abstract syntax tree.",N,N],[3,"Span","","Span represents the position information of a single AST item.",N,N],[12,"start","","The start byte offset.",1,N],[12,"end","","The end byte offset.",1,N],[3,"Position","","A single position in a regular expression.",N,N],[12,"offset","","The absolute offset of this position, starting at `0` from the beginning of the regular expression pattern string.",2,N],[12,"line","","The line number, starting at `1`.",2,N],[12,"column","","The approximate column number, starting at `1`.",2,N],[3,"WithComments","","An abstract syntax tree for a singular expression along with comments found.",N,N],[12,"ast","","The actual ast.",3,N],[12,"comments","","All comments found in the original regular expression.",3,N],[3,"Comment","","A comment from a regular expression with an associated span.",N,N],[12,"span","","The span of this comment, including the beginning `#` and ending `\\n`.",4,N],[12,"comment","","The comment text, starting with the first character following the `#` and ending with the last character preceding the `\\n`.",4,N],[3,"Alternation","","An alternation of regular expressions.",N,N],[12,"span","","The span of this alternation.",5,N],[12,"asts","","The alternate regular expressions.",5,N],[3,"Concat","","A concatenation of regular expressions.",N,N],[12,"span","","The span of this concatenation.",6,N],[12,"asts","","The concatenation regular expressions.",6,N],[3,"Literal","","A single literal expression.",N,N],[12,"span","","The span of this literal.",7,N],[12,"kind","","The kind of this literal.",7,N],[12,"c","","The Unicode scalar value corresponding to this literal.",7,N],[3,"ClassPerl","","A Perl character class.",N,N],[12,"span","","The span of this class.",8,N],[12,"kind","","The kind of Perl class.",8,N],[12,"negated","","Whether the class is negated or not. e.g., `\\d` is not negated but `\\D` is.",8,N],[3,"ClassAscii","","An ASCII character class.",N,N],[12,"span","","The span of this class.",9,N],[12,"kind","","The kind of ASCII class.",9,N],[12,"negated","","Whether the class is negated or not. e.g., `[[:alpha:]]` is not negated but `[[:^alpha:]]` is.",9,N],[3,"ClassUnicode","","A Unicode character class.",N,N],[12,"span","","The span of this class.",10,N],[12,"negated","","Whether this class is negated or not.",10,N],[12,"kind","","The kind of Unicode class.",10,N],[3,"ClassBracketed","","A bracketed character class, e.g., `[a-z0-9]`.",N,N],[12,"span","","The span of this class.",11,N],[12,"negated","","Whether this class is negated or not. e.g., `[a]` is not negated but `[^a]` is.",11,N],[12,"kind","","The type of this set. A set is either a normal union of things, e.g., `[abc]` or a result of applying set operations, e.g., `[\\pL--c]`.",11,N],[3,"ClassSetRange","","A single character class range in a set.",N,N],[12,"span","","The span of this range.",12,N],[12,"start","","The start of this range.",12,N],[12,"end","","The end of this range.",12,N],[3,"ClassSetUnion","","A union of items inside a character class set.",N,N],[12,"span","","The span of the items in this operation. e.g., the `a-z0-9` in `[^a-z0-9]`",13,N],[12,"items","","The sequence of items that make up this union.",13,N],[3,"ClassSetBinaryOp","","A Unicode character class set operation.",N,N],[12,"span","","The span of this operation. e.g., the `a-z--[h-p]` in `[a-z--h-p]`.",14,N],[12,"kind","","The type of this set operation.",14,N],[12,"lhs","","The left hand side of the operation.",14,N],[12,"rhs","","The right hand side of the operation.",14,N],[3,"Assertion","","A single zero-width assertion.",N,N],[12,"span","","The span of this assertion.",15,N],[12,"kind","","The assertion kind, e.g., `\\b` or `^`.",15,N],[3,"Repetition","","A repetition operation applied to a regular expression.",N,N],[12,"span","","The span of this operation.",16,N],[12,"op","","The actual operation.",16,N],[12,"greedy","","Whether this operation was applied greedily or not.",16,N],[12,"ast","","The regular expression under repetition.",16,N],[3,"RepetitionOp","","The repetition operator itself.",N,N],[12,"span","","The span of this operator. This includes things like `+`, `*?` and `{m,n}`.",17,N],[12,"kind","","The type of operation.",17,N],[3,"Group","","A grouped regular expression.",N,N],[12,"span","","The span of this group.",18,N],[12,"kind","","The kind of this group.",18,N],[12,"ast","","The regular expression in this group.",18,N],[3,"CaptureName","","A capture name.",N,N],[12,"span","","The span of this capture name.",19,N],[12,"name","","The capture name.",19,N],[12,"index","","The capture index.",19,N],[3,"SetFlags","","A group of flags that is not applied to a particular regular expression.",N,N],[12,"span","","The span of these flags, including the grouping parentheses.",20,N],[12,"flags","","The actual sequence of flags.",20,N],[3,"Flags","","A group of flags.",N,N],[12,"span","","The span of this group of flags.",21,N],[12,"items","","A sequence of flag items. Each item is either a flag or a negation operator.",21,N],[3,"FlagsItem","","A single item in a group of flags.",N,N],[12,"span","","The span of this item.",22,N],[12,"kind","","The kind of this item.",22,N],[4,"ErrorKind","","The type of an error that occurred while building an AST.",N,N],[13,"CaptureLimitExceeded","","The capturing group limit was exceeded.",23,N],[13,"ClassEscapeInvalid","","An invalid escape sequence was found in a character class set.",23,N],[13,"ClassRangeInvalid","","An invalid character class range was found. An invalid range is any range where the start is greater than the end.",23,N],[13,"ClassRangeLiteral","","An invalid range boundary was found in a character class. Range boundaries must be a single literal codepoint, but this error indicates that something else was found, such as a nested class.",23,N],[13,"ClassUnclosed","","An opening `[` was found with no corresponding closing `]`.",23,N],[13,"DecimalEmpty","","An empty decimal number was given where one was expected.",23,N],[13,"DecimalInvalid","","An invalid decimal number was given where one was expected.",23,N],[13,"EscapeHexEmpty","","A bracketed hex literal was empty.",23,N],[13,"EscapeHexInvalid","","A bracketed hex literal did not correspond to a Unicode scalar value.",23,N],[13,"EscapeHexInvalidDigit","","An invalid hexadecimal digit was found.",23,N],[13,"EscapeUnexpectedEof","","EOF was found before an escape sequence was completed.",23,N],[13,"EscapeUnrecognized","","An unrecognized escape sequence.",23,N],[13,"FlagDanglingNegation","","A dangling negation was used when setting flags, e.g., `i-`.",23,N],[13,"FlagDuplicate","","A flag was used twice, e.g., `i-i`.",23,N],[12,"original","regex_syntax::ast::ErrorKind","The position of the original flag. The error position points to the duplicate flag.",23,N],[13,"FlagRepeatedNegation","regex_syntax::ast","The negation operator was used twice, e.g., `-i-s`.",23,N],[12,"original","regex_syntax::ast::ErrorKind","The position of the original negation operator. The error position points to the duplicate negation operator.",23,N],[13,"FlagUnexpectedEof","regex_syntax::ast","Expected a flag but got EOF, e.g., `(?`.",23,N],[13,"FlagUnrecognized","","Unrecognized flag, e.g., `a`.",23,N],[13,"GroupNameDuplicate","","A duplicate capture name was found.",23,N],[12,"original","regex_syntax::ast::ErrorKind","The position of the initial occurrence of the capture name. The error position itself points to the duplicate occurrence.",23,N],[13,"GroupNameEmpty","regex_syntax::ast","A capture group name is empty, e.g., `(?P<>abc)`.",23,N],[13,"GroupNameInvalid","","An invalid character was seen for a capture group name. This includes errors where the first character is a digit (even though subsequent characters are allowed to be digits).",23,N],[13,"GroupNameUnexpectedEof","","A closing `>` could not be found for a capture group name.",23,N],[13,"GroupUnclosed","","An unclosed group, e.g., `(ab`.",23,N],[13,"GroupUnopened","","An unopened group, e.g., `ab)`.",23,N],[13,"NestLimitExceeded","","The nest limit was exceeded. The limit stored here is the limit configured in the parser.",23,N],[13,"RepetitionCountInvalid","","The range provided in a counted repetition operator is invalid. The range is invalid if the start is greater than the end.",23,N],[13,"RepetitionCountUnclosed","","An opening `{` was found with no corresponding closing `}`.",23,N],[13,"RepetitionMissing","","A repetition operator was applied to a missing sub-expression. This occurs, for example, in the regex consisting of just a `*` or even `(?i)*`. It is, however, possible to create a repetition operating on an empty sub-expression. For example, `()*` is still considered valid.",23,N],[13,"UnsupportedBackreference","","When octal support is disabled, this error is produced when an octal escape is used. The octal escape is assumed to be an invocation of a backreference, which is the common case.",23,N],[13,"UnsupportedLookAround","","When syntax similar to PCRE's look-around is used, this error is returned. Some example syntaxes that are rejected include, but are not necessarily limited to, `(?=re)`, `(?!re)`, `(?<=re)` and `(?<!re)`. Note that all of these syntaxes are otherwise invalid; this error is used to improve the user experience.",23,N],[4,"Ast","","An abstract syntax tree for a single regular expression.",N,N],[13,"Empty","","An empty regex that matches everything.",24,N],[13,"Flags","","A set of flags, e.g., `(?is)`.",24,N],[13,"Literal","","A single character literal, which includes escape sequences.",24,N],[13,"Dot","","The \"any character\" class.",24,N],[13,"Assertion","","A single zero-width assertion.",24,N],[13,"Class","","A single character class. This includes all forms of character classes except for `.`. e.g., `\\d`, `\\pN`, `[a-z]` and `[[:alpha:]]`.",24,N],[13,"Repetition","","A repetition operator applied to an arbitrary regular expression.",24,N],[13,"Group","","A grouped regular expression.",24,N],[13,"Alternation","","An alternation of regular expressions.",24,N],[13,"Concat","","A concatenation of regular expressions.",24,N],[4,"LiteralKind","","The kind of a single literal expression.",N,N],[13,"Verbatim","","The literal is written verbatim, e.g., `a` or `☃`.",25,N],[13,"Punctuation","","The literal is written as an escape because it is punctuation, e.g., `\\*` or `\\[`.",25,N],[13,"Octal","","The literal is written as an octal escape, e.g., `\\141`.",25,N],[13,"HexFixed","","The literal is written as a hex code with a fixed number of digits depending on the type of the escape, e.g., `\\x61` or or `\\u0061` or `\\U00000061`.",25,N],[13,"HexBrace","","The literal is written as a hex code with a bracketed number of digits. The only restriction is that the bracketed hex code must refer to a valid Unicode scalar value.",25,N],[13,"Special","","The literal is written as a specially recognized escape, e.g., `\\f` or `\\n`.",25,N],[4,"SpecialLiteralKind","","The type of a special literal.",N,N],[13,"Bell","","Bell, spelled `\\a` (`\\x07`).",26,N],[13,"FormFeed","","Form feed, spelled `\\f` (`\\x0C`).",26,N],[13,"Tab","","Tab, spelled `\\t` (`\\x09`).",26,N],[13,"LineFeed","","Line feed, spelled `\\n` (`\\x0A`).",26,N],[13,"CarriageReturn","","Carriage return, spelled `\\r` (`\\x0D`).",26,N],[13,"VerticalTab","","Vertical tab, spelled `\\v` (`\\x0B`).",26,N],[13,"Space","","Space, spelled `\\` (`\\x20`). Note that this can only appear when parsing in verbose mode.",26,N],[4,"HexLiteralKind","","The type of a Unicode hex literal.",N,N],[13,"X","","A `\\x` prefix. When used without brackets, this form is limited to two digits.",27,N],[13,"UnicodeShort","","A `\\u` prefix. When used without brackets, this form is limited to four digits.",27,N],[13,"UnicodeLong","","A `\\U` prefix. When used without brackets, this form is limited to eight digits.",27,N],[4,"Class","","A single character class expression.",N,N],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",28,N],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",28,N],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",28,N],[4,"ClassPerlKind","","The available Perl character classes.",N,N],[13,"Digit","","Decimal numbers.",29,N],[13,"Space","","Whitespace.",29,N],[13,"Word","","Word characters.",29,N],[4,"ClassAsciiKind","","The available ASCII character classes.",N,N],[13,"Alnum","","`[0-9A-Za-z]`",30,N],[13,"Alpha","","`[A-Za-z]`",30,N],[13,"Ascii","","`[\\x00-\\x7F]`",30,N],[13,"Blank","","`[ \\t]`",30,N],[13,"Cntrl","","`[\\x00-\\x1F\\x7F]`",30,N],[13,"Digit","","`[0-9]`",30,N],[13,"Graph","","`[!-~]`",30,N],[13,"Lower","","`[a-z]`",30,N],[13,"Print","","`[ -~]`",30,N],[13,"Punct","","`[!-/:-@\\[-`{-~]`",30,N],[13,"Space","","`[\\t\\n\\v\\f\\r ]`",30,N],[13,"Upper","","`[A-Z]`",30,N],[13,"Word","","`[0-9A-Za-z_]`",30,N],[13,"Xdigit","","`[0-9A-Fa-f]`",30,N],[4,"ClassUnicodeKind","","The available forms of Unicode character classes.",N,N],[13,"OneLetter","","A one letter abbreviated class, e.g., `\\pN`.",31,N],[13,"Named","","A binary property, general category or script. The string may be empty.",31,N],[13,"NamedValue","","A property name and an associated value.",31,N],[12,"op","regex_syntax::ast::ClassUnicodeKind","The type of Unicode op used to associate `name` with `value`.",31,N],[12,"name","","The property name (which may be empty).",31,N],[12,"value","","The property value (which may be empty).",31,N],[4,"ClassUnicodeOpKind","regex_syntax::ast","The type of op used in a Unicode character class.",N,N],[13,"Equal","","A property set to a specific value, e.g., `\\p{scx=Katakana}`.",32,N],[13,"Colon","","A property set to a specific value using a colon, e.g., `\\p{scx:Katakana}`.",32,N],[13,"NotEqual","","A property that isn't a particular value, e.g., `\\p{scx!=Katakana}`.",32,N],[4,"ClassSet","","A character class set.",N,N],[13,"Item","","An item, which can be a single literal, range, nested character class or a union of items.",33,N],[13,"BinaryOp","","A single binary operation (i.e., &&, -- or ~~).",33,N],[4,"ClassSetItem","","A single component of a character class set.",N,N],[13,"Empty","","An empty item.",34,N],[13,"Literal","","A single literal.",34,N],[13,"Range","","A range between two literals.",34,N],[13,"Ascii","","An ASCII character class, e.g., `[:alnum:]` or `[:punct:]`.",34,N],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",34,N],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",34,N],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",34,N],[13,"Union","","A union of items.",34,N],[4,"ClassSetBinaryOpKind","","The type of a Unicode character class set operation.",N,N],[13,"Intersection","","The intersection of two sets, e.g., `\\pN&&[a-z]`.",35,N],[13,"Difference","","The difference of two sets, e.g., `\\pN--[0-9]`.",35,N],[13,"SymmetricDifference","","The symmetric difference of two sets. The symmetric difference is the set of elements belonging to one but not both sets. e.g., `[\\pL~~[:ascii:]]`.",35,N],[4,"AssertionKind","","An assertion kind.",N,N],[13,"StartLine","","`^`",36,N],[13,"EndLine","","`$`",36,N],[13,"StartText","","`\\A`",36,N],[13,"EndText","","`\\z`",36,N],[13,"WordBoundary","","`\\b`",36,N],[13,"NotWordBoundary","","`\\B`",36,N],[4,"RepetitionKind","","The kind of a repetition operator.",N,N],[13,"ZeroOrOne","","`?`",37,N],[13,"ZeroOrMore","","`*`",37,N],[13,"OneOrMore","","`+`",37,N],[13,"Range","","`{m,n}`",37,N],[4,"RepetitionRange","","A range repetition operator.",N,N],[13,"Exactly","","`{m}`",38,N],[13,"AtLeast","","`{m,}`",38,N],[13,"Bounded","","`{m,n}`",38,N],[4,"GroupKind","","The kind of a group.",N,N],[13,"CaptureIndex","","`(a)`",39,N],[13,"CaptureName","","`(?P<name>a)`",39,N],[13,"NonCapturing","","`(?:a)` and `(?i:a)`",39,N],[4,"FlagsItemKind","","The kind of an item in a group of flags.",N,N],[13,"Negation","","A negation operator applied to all subsequent flags in the enclosing group.",40,N],[13,"Flag","","A single flag in a group.",40,N],[4,"Flag","","A single flag.",N,N],[13,"CaseInsensitive","","`i`",41,N],[13,"MultiLine","","`m`",41,N],[13,"DotMatchesNewLine","","`s`",41,N],[13,"SwapGreed","","`U`",41,N],[13,"Unicode","","`u`",41,N],[13,"IgnoreWhitespace","","`x`",41,N],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",N,[[["ast"],["v"]],["result"]]],[0,"parse","","This module provides a regular expression parser.",N,N],[3,"ParserBuilder","regex_syntax::ast::parse","A builder for a regular expression parser.",N,N],[3,"Parser","","A regular expression parser.",N,N],[11,"clone","","",42,[[["self"]],["parserbuilder"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"default","","",42,[[],["parserbuilder"]]],[11,"new","","Create a new parser builder with a default configuration.",42,[[],["parserbuilder"]]],[11,"build","","Build a parser from this configuration with the given pattern.",42,[[["self"]],["parser"]]],[11,"nest_limit","","Set the nesting limit for this parser.",42,[[["self"],["u32"]],["parserbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",42,[[["self"],["bool"]],["parserbuilder"]]],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",42,[[["self"],["bool"]],["parserbuilder"]]],[11,"clone","","",43,[[["self"]],["parser"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new parser with a default configuration.",43,[[],["parser"]]],[11,"parse","","Parse the regular expression into an abstract syntax tree.",43,[[["self"],["str"]],["result",["ast","error"]]]],[11,"parse_with_comments","","Parse the regular expression and return an abstract syntax tree with all of the comments found in the pattern.",43,[[["self"],["str"]],["result",["withcomments","error"]]]],[0,"print","regex_syntax::ast","This module provides a regular expression printer for `Ast`.",N,N],[3,"Printer","regex_syntax::ast::print","A printer for a regular expression abstract syntax tree.",N,N],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new printer.",44,[[],["printer"]]],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",44,[[["self"],["ast"],["w"]],["result"]]],[8,"Visitor","regex_syntax::ast","A trait for visiting an abstract syntax tree (AST) in depth first order.",N,N],[16,"Output","","The result of visiting an AST.",45,N],[16,"Err","","An error that visiting an AST might return.",45,N],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the AST or an error.",45,[[["self"]],["result"]]],[11,"start","","This method is called before beginning traversal of the AST.",45,[[["self"]]]],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,[[["self"]],["result"]]],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"clone","","",46,[[["self"]],["error"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"eq","","",46,[[["self"],["error"]],["bool"]]],[11,"ne","","",46,[[["self"],["error"]],["bool"]]],[11,"kind","","Return the type of this error.",46,[[["self"]],["errorkind"]]],[11,"pattern","","The original pattern string in which this error occurred.",46,[[["self"]],["str"]]],[11,"span","","Return the span at which this error occurred.",46,[[["self"]],["span"]]],[11,"auxiliary_span","","Return an auxiliary span. This span exists only for some errors that benefit from being able to point to two locations in the original regular expression. For example, \"duplicate\" errors will have the main error position set to the duplicate occurrence while its auxiliary span will be set to the initial occurrence.",46,[[["self"]],["option",["span"]]]],[11,"clone","","",23,[[["self"]],["errorkind"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"eq","","",23,[[["self"],["errorkind"]],["bool"]]],[11,"ne","","",23,[[["self"],["errorkind"]],["bool"]]],[11,"description","","",46,[[["self"]],["str"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["span"]]],[11,"eq","","",1,[[["self"],["span"]],["bool"]]],[11,"ne","","",1,[[["self"],["span"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"cmp","","",1,[[["self"],["span"]],["ordering"]]],[11,"partial_cmp","","",1,[[["self"],["span"]],["option",["ordering"]]]],[11,"clone","","",2,[[["self"]],["position"]]],[11,"eq","","",2,[[["self"],["position"]],["bool"]]],[11,"ne","","",2,[[["self"],["position"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"cmp","","",2,[[["self"],["position"]],["ordering"]]],[11,"partial_cmp","","",2,[[["self"],["position"]],["option",["ordering"]]]],[11,"new","","Create a new span with the given positions.",1,[[["position"],["position"]],["span"]]],[11,"splat","","Create a new span using the given position as the start and end.",1,[[["position"]],["span"]]],[11,"with_start","","Create a new span by replacing the starting the position with the one given.",1,[[["self"],["position"]],["span"]]],[11,"with_end","","Create a new span by replacing the ending the position with the one given.",1,[[["self"],["position"]],["span"]]],[11,"is_one_line","","Returns true if and only if this span occurs on a single line.",1,[[["self"]],["bool"]]],[11,"is_empty","","Returns true if and only if this span is empty. That is, it points to a single position in the concrete syntax of a regular expression.",1,[[["self"]],["bool"]]],[11,"new","","Create a new position with the given information.",2,[[["usize"],["usize"],["usize"]],["position"]]],[11,"clone","","",3,[[["self"]],["withcomments"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["withcomments"]],["bool"]]],[11,"ne","","",3,[[["self"],["withcomments"]],["bool"]]],[11,"clone","","",4,[[["self"]],["comment"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["comment"]],["bool"]]],[11,"ne","","",4,[[["self"],["comment"]],["bool"]]],[11,"clone","","",24,[[["self"]],["ast"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"eq","","",24,[[["self"],["ast"]],["bool"]]],[11,"ne","","",24,[[["self"],["ast"]],["bool"]]],[11,"span","","Return the span of this abstract syntax tree.",24,[[["self"]],["span"]]],[11,"is_empty","","Return true if and only if this Ast is empty.",24,[[["self"]],["bool"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["alternation"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["alternation"]],["bool"]]],[11,"ne","","",5,[[["self"],["alternation"]],["bool"]]],[11,"into_ast","","Return this alternation as an AST.",5,[[["self"]],["ast"]]],[11,"clone","","",6,[[["self"]],["concat"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["concat"]],["bool"]]],[11,"ne","","",6,[[["self"],["concat"]],["bool"]]],[11,"into_ast","","Return this concatenation as an AST.",6,[[["self"]],["ast"]]],[11,"clone","","",7,[[["self"]],["literal"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["literal"]],["bool"]]],[11,"ne","","",7,[[["self"],["literal"]],["bool"]]],[11,"byte","","If this literal was written as a `\\x` hex escape, then this returns the corresponding byte value. Otherwise, this returns `None`.",7,[[["self"]],["option",["u8"]]]],[11,"clone","","",25,[[["self"]],["literalkind"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"eq","","",25,[[["self"],["literalkind"]],["bool"]]],[11,"ne","","",25,[[["self"],["literalkind"]],["bool"]]],[11,"clone","","",26,[[["self"]],["specialliteralkind"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"eq","","",26,[[["self"],["specialliteralkind"]],["bool"]]],[11,"clone","","",27,[[["self"]],["hexliteralkind"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"eq","","",27,[[["self"],["hexliteralkind"]],["bool"]]],[11,"digits","","The number of digits that must be used with this literal form when used without brackets. When used with brackets, there is no restriction on the number of digits.",27,[[["self"]],["u32"]]],[11,"clone","","",28,[[["self"]],["class"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"eq","","",28,[[["self"],["class"]],["bool"]]],[11,"ne","","",28,[[["self"],["class"]],["bool"]]],[11,"span","","Return the span of this character class.",28,[[["self"]],["span"]]],[11,"clone","","",8,[[["self"]],["classperl"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["classperl"]],["bool"]]],[11,"ne","","",8,[[["self"],["classperl"]],["bool"]]],[11,"clone","","",29,[[["self"]],["classperlkind"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"eq","","",29,[[["self"],["classperlkind"]],["bool"]]],[11,"clone","","",9,[[["self"]],["classascii"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["classascii"]],["bool"]]],[11,"ne","","",9,[[["self"],["classascii"]],["bool"]]],[11,"clone","","",30,[[["self"]],["classasciikind"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"eq","","",30,[[["self"],["classasciikind"]],["bool"]]],[11,"from_name","","Return the corresponding ClassAsciiKind variant for the given name.",30,[[["str"]],["option",["classasciikind"]]]],[11,"clone","","",10,[[["self"]],["classunicode"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["classunicode"]],["bool"]]],[11,"ne","","",10,[[["self"],["classunicode"]],["bool"]]],[11,"is_negated","","Returns true if this class has been negated.",10,[[["self"]],["bool"]]],[11,"clone","","",31,[[["self"]],["classunicodekind"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"eq","","",31,[[["self"],["classunicodekind"]],["bool"]]],[11,"ne","","",31,[[["self"],["classunicodekind"]],["bool"]]],[11,"clone","","",32,[[["self"]],["classunicodeopkind"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"eq","","",32,[[["self"],["classunicodeopkind"]],["bool"]]],[11,"is_equal","","Whether the op is an equality op or not.",32,[[["self"]],["bool"]]],[11,"clone","","",11,[[["self"]],["classbracketed"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["classbracketed"]],["bool"]]],[11,"ne","","",11,[[["self"],["classbracketed"]],["bool"]]],[11,"clone","","",33,[[["self"]],["classset"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"eq","","",33,[[["self"],["classset"]],["bool"]]],[11,"ne","","",33,[[["self"],["classset"]],["bool"]]],[11,"union","","Build a set from a union.",33,[[["classsetunion"]],["classset"]]],[11,"span","","Return the span of this character class set.",33,[[["self"]],["span"]]],[11,"clone","","",34,[[["self"]],["classsetitem"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"eq","","",34,[[["self"],["classsetitem"]],["bool"]]],[11,"ne","","",34,[[["self"],["classsetitem"]],["bool"]]],[11,"span","","Return the span of this character class set item.",34,[[["self"]],["span"]]],[11,"clone","","",12,[[["self"]],["classsetrange"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["classsetrange"]],["bool"]]],[11,"ne","","",12,[[["self"],["classsetrange"]],["bool"]]],[11,"is_valid","","Returns true if and only if this character class range is valid.",12,[[["self"]],["bool"]]],[11,"clone","","",13,[[["self"]],["classsetunion"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"eq","","",13,[[["self"],["classsetunion"]],["bool"]]],[11,"ne","","",13,[[["self"],["classsetunion"]],["bool"]]],[11,"push","","Push a new item in this union.",13,[[["self"],["classsetitem"]]]],[11,"into_item","","Return this union as a character class set item.",13,[[["self"]],["classsetitem"]]],[11,"clone","","",14,[[["self"]],["classsetbinaryop"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"eq","","",14,[[["self"],["classsetbinaryop"]],["bool"]]],[11,"ne","","",14,[[["self"],["classsetbinaryop"]],["bool"]]],[11,"clone","","",35,[[["self"]],["classsetbinaryopkind"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"eq","","",35,[[["self"],["classsetbinaryopkind"]],["bool"]]],[11,"clone","","",15,[[["self"]],["assertion"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"eq","","",15,[[["self"],["assertion"]],["bool"]]],[11,"ne","","",15,[[["self"],["assertion"]],["bool"]]],[11,"clone","","",36,[[["self"]],["assertionkind"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"eq","","",36,[[["self"],["assertionkind"]],["bool"]]],[11,"clone","","",16,[[["self"]],["repetition"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"eq","","",16,[[["self"],["repetition"]],["bool"]]],[11,"ne","","",16,[[["self"],["repetition"]],["bool"]]],[11,"clone","","",17,[[["self"]],["repetitionop"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"eq","","",17,[[["self"],["repetitionop"]],["bool"]]],[11,"ne","","",17,[[["self"],["repetitionop"]],["bool"]]],[11,"clone","","",37,[[["self"]],["repetitionkind"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"eq","","",37,[[["self"],["repetitionkind"]],["bool"]]],[11,"ne","","",37,[[["self"],["repetitionkind"]],["bool"]]],[11,"clone","","",38,[[["self"]],["repetitionrange"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"eq","","",38,[[["self"],["repetitionrange"]],["bool"]]],[11,"ne","","",38,[[["self"],["repetitionrange"]],["bool"]]],[11,"is_valid","","Returns true if and only if this repetition range is valid.",38,[[["self"]],["bool"]]],[11,"clone","","",18,[[["self"]],["group"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"eq","","",18,[[["self"],["group"]],["bool"]]],[11,"ne","","",18,[[["self"],["group"]],["bool"]]],[11,"flags","","If this group is non-capturing, then this returns the (possibly empty) set of flags. Otherwise, `None` is returned.",18,[[["self"]],["option",["flags"]]]],[11,"is_capturing","","Returns true if and only if this group is capturing.",18,[[["self"]],["bool"]]],[11,"capture_index","","Returns the capture index of this group, if this is a capturing group.",18,[[["self"]],["option",["u32"]]]],[11,"clone","","",39,[[["self"]],["groupkind"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"eq","","",39,[[["self"],["groupkind"]],["bool"]]],[11,"ne","","",39,[[["self"],["groupkind"]],["bool"]]],[11,"clone","","",19,[[["self"]],["capturename"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"eq","","",19,[[["self"],["capturename"]],["bool"]]],[11,"ne","","",19,[[["self"],["capturename"]],["bool"]]],[11,"clone","","",20,[[["self"]],["setflags"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"eq","","",20,[[["self"],["setflags"]],["bool"]]],[11,"ne","","",20,[[["self"],["setflags"]],["bool"]]],[11,"clone","","",21,[[["self"]],["flags"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"eq","","",21,[[["self"],["flags"]],["bool"]]],[11,"ne","","",21,[[["self"],["flags"]],["bool"]]],[11,"add_item","","Add the given item to this sequence of flags.",21,[[["self"],["flagsitem"]],["option",["usize"]]]],[11,"flag_state","","Returns the state of the given flag in this set.",21,[[["self"],["flag"]],["option",["bool"]]]],[11,"clone","","",22,[[["self"]],["flagsitem"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"eq","","",22,[[["self"],["flagsitem"]],["bool"]]],[11,"ne","","",22,[[["self"],["flagsitem"]],["bool"]]],[11,"clone","","",40,[[["self"]],["flagsitemkind"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"eq","","",40,[[["self"],["flagsitemkind"]],["bool"]]],[11,"ne","","",40,[[["self"],["flagsitemkind"]],["bool"]]],[11,"is_negation","","Returns true if and only if this item is a negation operator.",40,[[["self"]],["bool"]]],[11,"clone","","",41,[[["self"]],["flag"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"eq","","",41,[[["self"],["flag"]],["bool"]]],[11,"drop","","",24,[[["self"]]]],[11,"drop","","",33,[[["self"]]]],[11,"clone","regex_syntax","",0,[[["self"]],["error"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[0,"hir","","Defines a high-level intermediate representation for regular expressions.",N,N],[3,"Error","regex_syntax::hir","An error that can occur while translating an `Ast` to a `Hir`.",N,N],[3,"Hir","","A high-level intermediate representation (HIR) for a regular expression.",N,N],[3,"ClassUnicode","","A set of characters represented by Unicode scalar values.",N,N],[3,"ClassUnicodeIter","","An iterator over all ranges in a Unicode character class.",N,N],[3,"ClassUnicodeRange","","A single range of characters represented by Unicode scalar values.",N,N],[3,"ClassBytes","","A set of characters represented by arbitrary bytes (where one byte corresponds to one character).",N,N],[3,"ClassBytesIter","","An iterator over all ranges in a byte character class.",N,N],[3,"ClassBytesRange","","A single range of characters represented by arbitrary bytes.",N,N],[3,"Group","","The high-level intermediate representation for a group.",N,N],[12,"kind","","The kind of this group. If it is a capturing group, then the kind contains the capture group index (and the name, if it is a named group).",47,N],[12,"hir","","The expression inside the capturing group, which may be empty.",47,N],[3,"Repetition","","The high-level intermediate representation of a repetition operator.",N,N],[12,"kind","","The kind of this repetition operator.",48,N],[12,"greedy","","Whether this repetition operator is greedy or not. A greedy operator will match as much as it can. A non-greedy operator will match as little as it can.",48,N],[12,"hir","","The expression being repeated.",48,N],[4,"ErrorKind","","The type of an error that occurred while building an `Hir`.",N,N],[13,"UnicodeNotAllowed","","This error occurs when a Unicode feature is used when Unicode support is disabled. For example `(?-u:\\pL)` would trigger this error.",49,N],[13,"InvalidUtf8","","This error occurs when translating a pattern that could match a byte sequence that isn't UTF-8 and `allow_invalid_utf8` was disabled.",49,N],[13,"UnicodePropertyNotFound","","This occurs when an unrecognized Unicode property name could not be found.",49,N],[13,"UnicodePropertyValueNotFound","","This occurs when an unrecognized Unicode property value could not be found.",49,N],[13,"EmptyClassNotAllowed","","This occurs when the translator attempts to construct a character class that is empty.",49,N],[4,"HirKind","","The kind of an arbitrary `Hir` expression.",N,N],[13,"Empty","","The empty regular expression, which matches everything, including the empty string.",50,N],[13,"Literal","","A single literal character that matches exactly this character.",50,N],[13,"Class","","A single character class that matches any of the characters in the class. A class can either consist of Unicode scalar values as characters, or it can use bytes.",50,N],[13,"Anchor","","An anchor assertion. An anchor assertion match always has zero length.",50,N],[13,"WordBoundary","","A word boundary assertion, which may or may not be Unicode aware. A word boundary assertion match always has zero length.",50,N],[13,"Repetition","","A repetition operation applied to a child expression.",50,N],[13,"Group","","A possibly capturing group, which contains a child expression.",50,N],[13,"Concat","","A concatenation of expressions. A concatenation always has at least two child expressions.",50,N],[13,"Alternation","","An alternation of expressions. An alternation always has at least two child expressions.",50,N],[4,"Literal","","The high-level intermediate representation of a literal.",N,N],[13,"Unicode","","A single character represented by a Unicode scalar value.",51,N],[13,"Byte","","A single character represented by an arbitrary byte.",51,N],[4,"Class","","The high-level intermediate representation of a character class.",N,N],[13,"Unicode","","A set of characters represented by Unicode scalar values.",52,N],[13,"Bytes","","A set of characters represented by arbitrary bytes (one byte per character).",52,N],[4,"Anchor","","The high-level intermediate representation for an anchor assertion.",N,N],[13,"StartLine","","Match the beginning of a line or the beginning of text. Specifically, this matches at the starting position of the input, or at the position immediately following a `\\n` character.",53,N],[13,"EndLine","","Match the end of a line or the end of text. Specifically, this matches at the end position of the input, or at the position immediately preceding a `\\n` character.",53,N],[13,"StartText","","Match the beginning of text. Specifically, this matches at the starting position of the input.",53,N],[13,"EndText","","Match the end of text. Specifically, this matches at the ending position of the input.",53,N],[4,"WordBoundary","","The high-level intermediate representation for a word-boundary assertion.",N,N],[13,"Unicode","","Match a Unicode-aware word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,N],[13,"UnicodeNegate","","Match a Unicode-aware negation of a word boundary.",54,N],[13,"Ascii","","Match an ASCII-only word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,N],[13,"AsciiNegate","","Match an ASCII-only negation of a word boundary.",54,N],[4,"GroupKind","","The kind of group.",N,N],[13,"CaptureIndex","","A normal unnamed capturing group.",55,N],[13,"CaptureName","","A named capturing group.",55,N],[12,"name","regex_syntax::hir::GroupKind","The name of the group.",55,N],[12,"index","","The capture index of the group.",55,N],[13,"NonCapturing","regex_syntax::hir","A non-capturing group.",55,N],[4,"RepetitionKind","","The kind of a repetition operator.",N,N],[13,"ZeroOrOne","","Matches a sub-expression zero or one times.",56,N],[13,"ZeroOrMore","","Matches a sub-expression zero or more times.",56,N],[13,"OneOrMore","","Matches a sub-expression one or more times.",56,N],[13,"Range","","Matches a sub-expression within a bounded range of times.",56,N],[4,"RepetitionRange","","The kind of a counted repetition operator.",N,N],[13,"Exactly","","Matches a sub-expression exactly this many times.",57,N],[13,"AtLeast","","Matches a sub-expression at least this many times.",57,N],[13,"Bounded","","Matches a sub-expression at least `m` times and at most `n` times.",57,N],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",N,[[["hir"],["v"]],["result"]]],[0,"literal","","Provides routines for extracting literal prefixes and suffixes from an `Hir`.",N,N],[3,"Literals","regex_syntax::hir::literal","A set of literal byte strings extracted from a regular expression.",N,N],[3,"Literal","","A single member of a set of literals extracted from a regular expression.",N,N],[11,"clone","","",58,[[["self"]],["literals"]]],[11,"eq","","",58,[[["self"],["literals"]],["bool"]]],[11,"ne","","",58,[[["self"],["literals"]],["bool"]]],[11,"clone","","",59,[[["self"]],["literal"]]],[11,"cmp","","",59,[[["self"],["literal"]],["ordering"]]],[11,"empty","","Returns a new empty set of literals using default limits.",58,[[],["literals"]]],[11,"prefixes","","Returns a set of literal prefixes extracted from the given `Hir`.",58,[[["hir"]],["literals"]]],[11,"suffixes","","Returns a set of literal suffixes extracted from the given `Hir`.",58,[[["hir"]],["literals"]]],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",58,[[["self"]],["usize"]]],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",58,[[["self"],["usize"]],["literals"]]],[11,"limit_class","","Get the character class size limit for this set.",58,[[["self"]],["usize"]]],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",58,[[["self"],["usize"]],["literals"]]],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",58,N],[11,"min_len","","Returns the length of the smallest literal.",58,[[["self"]],["option",["usize"]]]],[11,"all_complete","","Returns true if all members in this set are complete.",58,[[["self"]],["bool"]]],[11,"any_complete","","Returns true if any member in this set is complete.",58,[[["self"]],["bool"]]],[11,"contains_empty","","Returns true if this set contains an empty literal.",58,[[["self"]],["bool"]]],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",58,[[["self"]],["bool"]]],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",58,[[["self"]],["literals"]]],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",58,N],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",58,N],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed from the suffix of each literal.",58,[[["self"],["usize"]],["option",["literals"]]]],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are guaranteed to be unambiguous.",58,[[["self"]],["literals"]]],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are guaranteed to be unambiguous.",58,[[["self"]],["literals"]]],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",58,[[["self"],["hir"]],["bool"]]],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",58,[[["self"],["hir"]],["bool"]]],[11,"union","","Unions this set with another set.",58,[[["self"],["literals"]],["bool"]]],[11,"cross_product","","Extends this set with another set.",58,[[["self"],["literals"]],["bool"]]],[11,"cross_add","","Extends each literal in this set with the bytes given.",58,N],[11,"add","","Adds the given literal to this set.",58,[[["self"],["literal"]],["bool"]]],[11,"add_char_class","","Extends each literal in this set with the character class given.",58,[[["self"],["classunicode"]],["bool"]]],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",58,[[["self"],["classbytes"]],["bool"]]],[11,"cut","","Cuts every member of this set. When a member is cut, it can never be extended.",58,[[["self"]]]],[11,"reverse","","Reverses all members in place.",58,[[["self"]]]],[11,"clear","","Clears this set of all members.",58,[[["self"]]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"new","","Returns a new complete literal with the bytes given.",59,[[["vec",["u8"]]],["literal"]]],[11,"empty","","Returns a new complete empty literal.",59,[[],["literal"]]],[11,"is_cut","","Returns true if this literal was \"cut.\"",59,[[["self"]],["bool"]]],[11,"cut","","Cuts this literal.",59,[[["self"]]]],[11,"eq","","",59,[[["self"],["literal"]],["bool"]]],[11,"partial_cmp","","",59,[[["self"],["literal"]],["option",["ordering"]]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"as_ref","","",59,N],[11,"deref","","",59,[[["self"]],["vec"]]],[11,"deref_mut","","",59,[[["self"]],["vec"]]],[0,"print","regex_syntax::hir","This module provides a regular expression printer for `Hir`.",N,N],[3,"Printer","regex_syntax::hir::print","A printer for a regular expression's high-level intermediate representation.",N,N],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new printer.",60,[[],["printer"]]],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",60,[[["self"],["hir"],["w"]],["result"]]],[0,"translate","regex_syntax::hir","Defines a translator that converts an `Ast` to an `Hir`.",N,N],[3,"TranslatorBuilder","regex_syntax::hir::translate","A builder for constructing an AST->HIR translator.",N,N],[3,"Translator","","A translator maps abstract syntax to a high level intermediate representation.",N,N],[11,"clone","","",61,[[["self"]],["translatorbuilder"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"default","","",61,[[],["translatorbuilder"]]],[11,"new","","Create a new translator builder with a default c onfiguration.",61,[[],["translatorbuilder"]]],[11,"build","","Build a translator using the current configuration.",61,[[["self"]],["translator"]]],[11,"allow_invalid_utf8","","When enabled, translation will permit the construction of a regular expression that may match invalid UTF-8.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"case_insensitive","","Enable or disable the case insensitive flag (`i`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"multi_line","","Enable or disable the multi-line matching flag (`m`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag (`s`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"swap_greed","","Enable or disable the \"swap greed\" flag (`U`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"clone","","",62,[[["self"]],["translator"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new translator using the default configuration.",62,[[],["translator"]]],[11,"translate","","Translate the given abstract syntax tree (AST) into a high level intermediate representation (HIR).",62,[[["self"],["str"],["ast"]],["result",["hir","error"]]]],[8,"Visitor","regex_syntax::hir","A trait for visiting the high-level IR (HIR) in depth first order.",N,N],[16,"Output","","The result of visiting an HIR.",63,N],[16,"Err","","An error that visiting an HIR might return.",63,N],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the HIR or an error.",63,[[["self"]],["result"]]],[11,"start","","This method is called before beginning traversal of the HIR.",63,[[["self"]]]],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,[[["self"]],["result"]]],[11,"clone","","",64,[[["self"]],["error"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"eq","","",64,[[["self"],["error"]],["bool"]]],[11,"ne","","",64,[[["self"],["error"]],["bool"]]],[11,"kind","","Return the type of this error.",64,[[["self"]],["errorkind"]]],[11,"pattern","","The original pattern string in which this error occurred.",64,[[["self"]],["str"]]],[11,"span","","Return the span at which this error occurred.",64,[[["self"]],["span"]]],[11,"clone","","",49,[[["self"]],["errorkind"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"eq","","",49,[[["self"],["errorkind"]],["bool"]]],[11,"description","","",64,[[["self"]],["str"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"clone","","",65,[[["self"]],["hir"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"eq","","",65,[[["self"],["hir"]],["bool"]]],[11,"ne","","",65,[[["self"],["hir"]],["bool"]]],[11,"clone","","",50,[[["self"]],["hirkind"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"eq","","",50,[[["self"],["hirkind"]],["bool"]]],[11,"ne","","",50,[[["self"],["hirkind"]],["bool"]]],[11,"kind","","Returns a reference to the underlying HIR kind.",65,[[["self"]],["hirkind"]]],[11,"into_kind","","Consumes ownership of this HIR expression and returns its underlying `HirKind`.",65,[[["self"]],["hirkind"]]],[11,"empty","","Returns an empty HIR expression.",65,[[],["hir"]]],[11,"literal","","Creates a literal HIR expression.",65,[[["literal"]],["hir"]]],[11,"class","","Creates a class HIR expression.",65,[[["class"]],["hir"]]],[11,"anchor","","Creates an anchor assertion HIR expression.",65,[[["anchor"]],["hir"]]],[11,"word_boundary","","Creates a word boundary assertion HIR expression.",65,[[["wordboundary"]],["hir"]]],[11,"repetition","","Creates a repetition HIR expression.",65,[[["repetition"]],["hir"]]],[11,"group","","Creates a group HIR expression.",65,[[["group"]],["hir"]]],[11,"concat","","Returns the concatenation of the given expressions.",65,[[["vec",["hir"]]],["hir"]]],[11,"alternation","","Returns the alternation of the given expressions.",65,[[["vec",["hir"]]],["hir"]]],[11,"dot","","Build an HIR expression for `.`.",65,[[["bool"]],["hir"]]],[11,"any","","Build an HIR expression for `(?s).`.",65,[[["bool"]],["hir"]]],[11,"is_always_utf8","","Return true if and only if this HIR will always match valid UTF-8.",65,[[["self"]],["bool"]]],[11,"is_all_assertions","","Returns true if and only if this entire HIR expression is made up of zero-width assertions.",65,[[["self"]],["bool"]]],[11,"is_anchored_start","","Return true if and only if this HIR is required to match from the beginning of text. This includes expressions like `^foo`, `^(foo|bar)`, `^foo|^bar` but not `^foo|bar`.",65,[[["self"]],["bool"]]],[11,"is_anchored_end","","Return true if and only if this HIR is required to match at the end of text. This includes expressions like `foo$`, `(foo|bar)$`, `foo$|bar$` but not `foo$|bar`.",65,[[["self"]],["bool"]]],[11,"is_any_anchored_start","","Return true if and only if this HIR contains any sub-expression that is required to match at the beginning of text. Specifically, this returns true if the `^` symbol (when multiline mode is disabled) or the `\\A` escape appear anywhere in the regex.",65,[[["self"]],["bool"]]],[11,"is_any_anchored_end","","Return true if and only if this HIR contains any sub-expression that is required to match at the end of text. Specifically, this returns true if the `$` symbol (when multiline mode is disabled) or the `\\z` escape appear anywhere in the regex.",65,[[["self"]],["bool"]]],[11,"is_match_empty","","Return true if and only if the empty string is part of the language matched by this regular expression.",65,[[["self"]],["bool"]]],[11,"is_empty","","Return true if and only if this HIR is the empty regular expression.",50,[[["self"]],["bool"]]],[11,"has_subexprs","","Returns true if and only if this kind has any (including possibly empty) subexpressions.",50,[[["self"]],["bool"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"clone","","",51,[[["self"]],["literal"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"eq","","",51,[[["self"],["literal"]],["bool"]]],[11,"ne","","",51,[[["self"],["literal"]],["bool"]]],[11,"is_unicode","","Returns true if and only if this literal corresponds to a Unicode scalar value.",51,[[["self"]],["bool"]]],[11,"clone","","",52,[[["self"]],["class"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"eq","","",52,[[["self"],["class"]],["bool"]]],[11,"ne","","",52,[[["self"],["class"]],["bool"]]],[11,"case_fold_simple","","Apply Unicode simple case folding to this character class, in place. The character class will be expanded to include all simple case folded character variants.",52,[[["self"]]]],[11,"negate","","Negate this character class in place.",52,[[["self"]]]],[11,"is_always_utf8","","Returns true if and only if this character class will only ever match valid UTF-8.",52,[[["self"]],["bool"]]],[11,"clone","","",66,[[["self"]],["classunicode"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"eq","","",66,[[["self"],["classunicode"]],["bool"]]],[11,"ne","","",66,[[["self"],["classunicode"]],["bool"]]],[11,"new","","Create a new class from a sequence of ranges.",66,[[["i"]],["classunicode"]]],[11,"empty","","Create a new class with no ranges.",66,[[],["classunicode"]]],[11,"push","","Add a new range to this set.",66,[[["self"],["classunicoderange"]]]],[11,"iter","","Return an iterator over all ranges in this class.",66,[[["self"]],["classunicodeiter"]]],[11,"ranges","","Return the underlying ranges as a slice.",66,N],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters, according to Unicode's \"simple\" mapping. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",66,[[["self"]]]],[11,"negate","","Negate this character class.",66,[[["self"]]]],[11,"union","","Union this character class with the given character class, in place.",66,[[["self"],["classunicode"]]]],[11,"intersect","","Intersect this character class with the given character class, in place.",66,[[["self"],["classunicode"]]]],[11,"difference","","Subtract the given character class from this character class, in place.",66,[[["self"],["classunicode"]]]],[11,"symmetric_difference","","Compute the symmetric difference of the given character classes, in place.",66,[[["self"],["classunicode"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"next","","",67,[[["self"]],["option",["classunicoderange"]]]],[11,"clone","","",68,[[["self"]],["classunicoderange"]]],[11,"default","","",68,[[],["classunicoderange"]]],[11,"eq","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"ne","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"partial_cmp","","",68,[[["self"],["classunicoderange"]],["option",["ordering"]]]],[11,"lt","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"le","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"gt","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"ge","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"cmp","","",68,[[["self"],["classunicoderange"]],["ordering"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new Unicode scalar value range for a character class.",68,[[["char"],["char"]],["classunicoderange"]]],[11,"start","","Return the start of this range.",68,[[["self"]],["char"]]],[11,"end","","Return the end of this range.",68,[[["self"]],["char"]]],[11,"clone","","",69,[[["self"]],["classbytes"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"eq","","",69,[[["self"],["classbytes"]],["bool"]]],[11,"ne","","",69,[[["self"],["classbytes"]],["bool"]]],[11,"new","","Create a new class from a sequence of ranges.",69,[[["i"]],["classbytes"]]],[11,"empty","","Create a new class with no ranges.",69,[[],["classbytes"]]],[11,"push","","Add a new range to this set.",69,[[["self"],["classbytesrange"]]]],[11,"iter","","Return an iterator over all ranges in this class.",69,[[["self"]],["classbytesiter"]]],[11,"ranges","","Return the underlying ranges as a slice.",69,N],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",69,[[["self"]]]],[11,"negate","","Negate this byte class.",69,[[["self"]]]],[11,"union","","Union this byte class with the given byte class, in place.",69,[[["self"],["classbytes"]]]],[11,"intersect","","Intersect this byte class with the given byte class, in place.",69,[[["self"],["classbytes"]]]],[11,"difference","","Subtract the given byte class from this byte class, in place.",69,[[["self"],["classbytes"]]]],[11,"symmetric_difference","","Compute the symmetric difference of the given byte classes, in place.",69,[[["self"],["classbytes"]]]],[11,"is_all_ascii","","Returns true if and only if this character class will either match nothing or only ASCII bytes. Stated differently, this returns false if and only if this class contains a non-ASCII byte.",69,[[["self"]],["bool"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"next","","",70,[[["self"]],["option",["classbytesrange"]]]],[11,"clone","","",71,[[["self"]],["classbytesrange"]]],[11,"default","","",71,[[],["classbytesrange"]]],[11,"eq","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"ne","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"partial_cmp","","",71,[[["self"],["classbytesrange"]],["option",["ordering"]]]],[11,"lt","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"le","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"gt","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"ge","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"cmp","","",71,[[["self"],["classbytesrange"]],["ordering"]]],[11,"new","","Create a new byte range for a character class.",71,[[["u8"],["u8"]],["classbytesrange"]]],[11,"start","","Return the start of this range.",71,[[["self"]],["u8"]]],[11,"end","","Return the end of this range.",71,[[["self"]],["u8"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"clone","","",53,[[["self"]],["anchor"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"eq","","",53,[[["self"],["anchor"]],["bool"]]],[11,"clone","","",54,[[["self"]],["wordboundary"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"eq","","",54,[[["self"],["wordboundary"]],["bool"]]],[11,"is_negated","","Returns true if and only if this word boundary assertion is negated.",54,[[["self"]],["bool"]]],[11,"clone","","",47,[[["self"]],["group"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"eq","","",47,[[["self"],["group"]],["bool"]]],[11,"ne","","",47,[[["self"],["group"]],["bool"]]],[11,"clone","","",55,[[["self"]],["groupkind"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"eq","","",55,[[["self"],["groupkind"]],["bool"]]],[11,"ne","","",55,[[["self"],["groupkind"]],["bool"]]],[11,"clone","","",48,[[["self"]],["repetition"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"eq","","",48,[[["self"],["repetition"]],["bool"]]],[11,"ne","","",48,[[["self"],["repetition"]],["bool"]]],[11,"is_match_empty","","Returns true if and only if this repetition operator makes it possible to match the empty string.",48,[[["self"]],["bool"]]],[11,"clone","","",56,[[["self"]],["repetitionkind"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"eq","","",56,[[["self"],["repetitionkind"]],["bool"]]],[11,"ne","","",56,[[["self"],["repetitionkind"]],["bool"]]],[11,"clone","","",57,[[["self"]],["repetitionrange"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"eq","","",57,[[["self"],["repetitionrange"]],["bool"]]],[11,"ne","","",57,[[["self"],["repetitionrange"]],["bool"]]],[11,"drop","","",65,[[["self"]]]],[11,"clone","regex_syntax","",72,[[["self"]],["parserbuilder"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"default","","",72,[[],["parserbuilder"]]],[11,"new","","Create a new parser builder with a default configuration.",72,[[],["parserbuilder"]]],[11,"build","","Build a parser from this configuration with the given pattern.",72,[[["self"]],["parser"]]],[11,"nest_limit","","Set the nesting limit for this parser.",72,[[["self"],["u32"]],["parserbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"allow_invalid_utf8","","When enabled, the parser will permit the construction of a regular expression that may match invalid UTF-8.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"case_insensitive","","Enable or disable the case insensitive flag by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"multi_line","","Enable or disable the multi-line matching flag by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"swap_greed","","Enable or disable the \"swap greed\" flag by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"clone","","",73,[[["self"]],["parser"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new parser with a default configuration.",73,[[],["parser"]]],[11,"parse","","Parse the regular expression into a high level intermediate representation.",73,[[["self"],["str"]],["result",["hir"]]]],[6,"Result","","A type alias for dealing with errors returned by this crate.",N,N],[11,"start","regex_syntax::ast","This method is called before beginning traversal of the AST.",45,[[["self"]]]],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,[[["self"]],["result"]]],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"start","regex_syntax::hir","This method is called before beginning traversal of the HIR.",63,[[["self"]]]],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,[[["self"]],["result"]]]],"paths":[[4,"Error"],[3,"Span"],[3,"Position"],[3,"WithComments"],[3,"Comment"],[3,"Alternation"],[3,"Concat"],[3,"Literal"],[3,"ClassPerl"],[3,"ClassAscii"],[3,"ClassUnicode"],[3,"ClassBracketed"],[3,"ClassSetRange"],[3,"ClassSetUnion"],[3,"ClassSetBinaryOp"],[3,"Assertion"],[3,"Repetition"],[3,"RepetitionOp"],[3,"Group"],[3,"CaptureName"],[3,"SetFlags"],[3,"Flags"],[3,"FlagsItem"],[4,"ErrorKind"],[4,"Ast"],[4,"LiteralKind"],[4,"SpecialLiteralKind"],[4,"HexLiteralKind"],[4,"Class"],[4,"ClassPerlKind"],[4,"ClassAsciiKind"],[4,"ClassUnicodeKind"],[4,"ClassUnicodeOpKind"],[4,"ClassSet"],[4,"ClassSetItem"],[4,"ClassSetBinaryOpKind"],[4,"AssertionKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[4,"GroupKind"],[4,"FlagsItemKind"],[4,"Flag"],[3,"ParserBuilder"],[3,"Parser"],[3,"Printer"],[8,"Visitor"],[3,"Error"],[3,"Group"],[3,"Repetition"],[4,"ErrorKind"],[4,"HirKind"],[4,"Literal"],[4,"Class"],[4,"Anchor"],[4,"WordBoundary"],[4,"GroupKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[3,"Literals"],[3,"Literal"],[3,"Printer"],[3,"TranslatorBuilder"],[3,"Translator"],[8,"Visitor"],[3,"Error"],[3,"Hir"],[3,"ClassUnicode"],[3,"ClassUnicodeIter"],[3,"ClassUnicodeRange"],[3,"ClassBytes"],[3,"ClassBytesIter"],[3,"ClassBytesRange"],[3,"ParserBuilder"],[3,"Parser"]]};
searchIndex["rustc_serialize"]={"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",N,N],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",N,N],[12,"char_set","","Character set to use",0,N],[12,"newline","","Newline to use",0,N],[12,"pad","","True to pad output with `=` characters",0,N],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,N],[4,"CharacterSet","","Available encoding character sets",N,N],[13,"Standard","","The standard character set (uses `+` and `/`)",1,N],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,N],[4,"Newline","","Available newline types",N,N],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,N],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,N],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",N,N],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,N],[13,"InvalidBase64Length","","The input had an invalid length",3,N],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",N,N],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",N,N],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",N,N],[8,"ToBase64","","A trait for converting a value to base64 encoding.",N,N],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified format configuration, returning the owned string.",4,[[["self"],["config"]],["string"]]],[8,"FromBase64","","A trait for converting from base64 encoded values.",N,N],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into an owned vector of bytes, returning the vector.",5,[[["self"]],["result",["vec","frombase64error"]]]],[11,"clone","","",1,[[["self"]],["characterset"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["newline"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["config"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["frombase64error"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[0,"hex","rustc_serialize","Hex binary-to-text encoding",N,N],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",N,N],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,N],[13,"InvalidHexLength","","The input had an invalid length",6,N],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",N,N],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",7,[[["self"]],["string"]]],[8,"FromHex","","A trait for converting hexadecimal encoded values",N,N],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",8,[[["self"]],["result",["vec","fromhexerror"]]]],[11,"clone","","",6,[[["self"]],["fromhexerror"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"description","","",6,[[["self"]],["str"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[0,"json","rustc_serialize","JSON parsing and serialization",N,N],[3,"PrettyJson","rustc_serialize::json","",N,N],[3,"AsJson","","",N,N],[3,"AsPrettyJson","","",N,N],[3,"Encoder","","A structure for implementing serialization to JSON.",N,N],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",N,N],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",N,N],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",N,N],[3,"Decoder","","A structure to decode JSON to values in rust.",N,N],[4,"Json","","Represents a json value",N,N],[13,"I64","","",9,N],[13,"U64","","",9,N],[13,"F64","","",9,N],[13,"String","","",9,N],[13,"Boolean","","",9,N],[13,"Array","","",9,N],[13,"Object","","",9,N],[13,"Null","","",9,N],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",N,N],[13,"InvalidSyntax","","",10,N],[13,"InvalidNumber","","",10,N],[13,"EOFWhileParsingObject","","",10,N],[13,"EOFWhileParsingArray","","",10,N],[13,"EOFWhileParsingValue","","",10,N],[13,"EOFWhileParsingString","","",10,N],[13,"KeyMustBeAString","","",10,N],[13,"ExpectedColon","","",10,N],[13,"TrailingCharacters","","",10,N],[13,"TrailingComma","","",10,N],[13,"InvalidEscape","","",10,N],[13,"InvalidUnicodeCodePoint","","",10,N],[13,"LoneLeadingSurrogateInHexEscape","","",10,N],[13,"UnexpectedEndOfHexEscape","","",10,N],[13,"UnrecognizedHex","","",10,N],[13,"NotFourDigit","","",10,N],[13,"ControlCharacterInString","","",10,N],[13,"NotUtf8","","",10,N],[4,"ParserError","","",N,N],[13,"SyntaxError","","msg, line, col",11,N],[13,"IoError","","",11,N],[4,"DecoderError","","",N,N],[13,"ParseError","","",12,N],[13,"ExpectedError","","",12,N],[13,"MissingFieldError","","",12,N],[13,"UnknownVariantError","","",12,N],[13,"ApplicationError","","",12,N],[13,"EOF","","",12,N],[4,"EncoderError","","",N,N],[13,"FmtError","","",13,N],[13,"BadHashmapKey","","",13,N],[4,"JsonEvent","","The output of the streaming parser.",N,N],[13,"ObjectStart","","",14,N],[13,"ObjectEnd","","",14,N],[13,"ArrayStart","","",14,N],[13,"ArrayEnd","","",14,N],[13,"BooleanValue","","",14,N],[13,"I64Value","","",14,N],[13,"U64Value","","",14,N],[13,"F64Value","","",14,N],[13,"StringValue","","",14,N],[13,"NullValue","","",14,N],[13,"Error","","",14,N],[4,"StackElement","","StackElements compose a Stack. For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",N,N],[13,"Index","","",15,N],[13,"Key","","",15,N],[5,"error_str","","Returns a readable error string for a given error code.",N,[[["errorcode"]],["str"]]],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",N,[[["str"]],["decoderesult"]]],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",N,[[["t"]],["encoderesult",["string"]]]],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",N,[[["t"]],["asjson"]]],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",N,[[["t"]],["asprettyjson"]]],[6,"Array","","",N,N],[6,"Object","","",N,N],[6,"BuilderError","","",N,N],[6,"EncodeResult","","",N,N],[6,"DecodeResult","","",N,N],[8,"ToJson","","A trait for converting values to JSON",N,N],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,[[["self"]],["json"]]],[11,"clone","","",9,[[["self"]],["json"]]],[11,"eq","","",9,[[["self"],["json"]],["bool"]]],[11,"ne","","",9,[[["self"],["json"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["json"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["json"]],["bool"]]],[11,"le","","",9,[[["self"],["json"]],["bool"]]],[11,"gt","","",9,[[["self"],["json"]],["bool"]]],[11,"ge","","",9,[[["self"],["json"]],["bool"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["errorcode"]]],[11,"eq","","",10,[[["self"],["errorcode"]],["bool"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["parsererror"]],["bool"]]],[11,"eq","","",12,[[["self"],["decodererror"]],["bool"]]],[11,"ne","","",12,[[["self"],["decodererror"]],["bool"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"eq","","",13,[[["self"],["encodererror"]],["bool"]]],[11,"clone","","",13,[[["self"]],["self"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"description","","",12,[[["self"]],["str"]]],[11,"cause","","",12,[[["self"]],["option",["stderror"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"from","","",12,[[["parsererror"]],["decodererror"]]],[11,"description","","",11,[[["self"]],["str"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"from","","",11,[[["error"]],["parsererror"]]],[11,"description","","",13,[[["self"]],["str"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"from","","",13,[[["error"]],["encodererror"]]],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable JSON to the specified writer",17,[[["write"]],["encoder"]]],[11,"new","","Creates a new encoder whose output will be written in compact JSON to the specified writer",17,[[["write"]],["encoder"]]],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",17,[[["self"],["u32"]],["result"]]],[11,"emit_nil","","",17,[[["self"]],["encoderesult"]]],[11,"emit_usize","","",17,[[["self"],["usize"]],["encoderesult"]]],[11,"emit_u64","","",17,[[["self"],["u64"]],["encoderesult"]]],[11,"emit_u32","","",17,[[["self"],["u32"]],["encoderesult"]]],[11,"emit_u16","","",17,[[["self"],["u16"]],["encoderesult"]]],[11,"emit_u8","","",17,[[["self"],["u8"]],["encoderesult"]]],[11,"emit_isize","","",17,[[["self"],["isize"]],["encoderesult"]]],[11,"emit_i64","","",17,[[["self"],["i64"]],["encoderesult"]]],[11,"emit_i32","","",17,[[["self"],["i32"]],["encoderesult"]]],[11,"emit_i16","","",17,[[["self"],["i16"]],["encoderesult"]]],[11,"emit_i8","","",17,[[["self"],["i8"]],["encoderesult"]]],[11,"emit_bool","","",17,[[["self"],["bool"]],["encoderesult"]]],[11,"emit_f64","","",17,[[["self"],["f64"]],["encoderesult"]]],[11,"emit_f32","","",17,[[["self"],["f32"]],["encoderesult"]]],[11,"emit_char","","",17,[[["self"],["char"]],["encoderesult"]]],[11,"emit_str","","",17,[[["self"],["str"]],["encoderesult"]]],[11,"emit_enum","","",17,[[["self"],["str"],["f"]],["encoderesult"]]],[11,"emit_enum_variant","","",17,[[["self"],["str"],["usize"],["usize"],["f"]],["encoderesult"]]],[11,"emit_enum_variant_arg","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_enum_struct_variant","","",17,[[["self"],["str"],["usize"],["usize"],["f"]],["encoderesult"]]],[11,"emit_enum_struct_variant_field","","",17,[[["self"],["str"],["usize"],["f"]],["encoderesult"]]],[11,"emit_struct","","",17,[[["self"],["str"],["usize"],["f"]],["encoderesult"]]],[11,"emit_struct_field","","",17,[[["self"],["str"],["usize"],["f"]],["encoderesult"]]],[11,"emit_tuple","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_tuple_arg","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_tuple_struct","","",17,[[["self"],["str"],["usize"],["f"]],["encoderesult"]]],[11,"emit_tuple_struct_arg","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_option","","",17,[[["self"],["f"]],["encoderesult"]]],[11,"emit_option_none","","",17,[[["self"]],["encoderesult"]]],[11,"emit_option_some","","",17,[[["self"],["f"]],["encoderesult"]]],[11,"emit_seq","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_seq_elt","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_map","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_map_elt_key","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_map_elt_val","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"encode","","",9,[[["self"],["s"]],["result"]]],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",9,[[["read"]],["result",["buildererror"]]]],[11,"from_str","","Decodes a json value from a string",9,[[["str"]],["result",["buildererror"]]]],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",9,[[["self"]],["prettyjson"]]],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,[[["self"],["str"]],["option",["json"]]]],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",9,N],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",9,[[["self"],["str"]],["option",["json"]]]],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap. Returns None otherwise.",9,[[["self"]],["option",["object"]]]],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap. Returns None otherwise.",9,[[["self"]],["option",["object"]]]],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",9,[[["self"]],["option",["object"]]]],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector. Returns None otherwise.",9,[[["self"]],["option",["array"]]]],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector. Returns None otherwise.",9,[[["self"]],["option",["array"]]]],[11,"into_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",9,[[["self"]],["option",["array"]]]],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",9,[[["self"]],["option",["str"]]]],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",9,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",9,[[["self"]],["option",["u64"]]]],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",9,[[["self"]],["option",["f64"]]]],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",9,[[["self"]],["option",["bool"]]]],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",9,[[["self"]],["option"]]],[11,"index","","",9,[[["self"],["str"]],["json"]]],[11,"index","","",9,[[["self"],["usize"]],["json"]]],[11,"eq","","",14,[[["self"],["jsonevent"]],["bool"]]],[11,"ne","","",14,[[["self"],["jsonevent"]],["bool"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"eq","","",15,[[["self"],["stackelement"]],["bool"]]],[11,"ne","","",15,[[["self"],["stackelement"]],["bool"]]],[11,"clone","","",15,[[["self"]],["stackelement"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"new","","",18,[[],["stack"]]],[11,"len","","Returns The number of elements in the Stack.",18,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the stack is empty.",18,[[["self"]],["bool"]]],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",18,[[["self"],["usize"]],["stackelement"]]],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,N],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",18,N],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",18,N],[11,"top","","Returns the top-most element (if any).",18,[[["self"]],["option",["stackelement"]]]],[11,"next","","",19,[[["self"]],["option",["jsonevent"]]]],[11,"new","","Creates the JSON parser.",19,[[["t"]],["parser"]]],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",19,[[["self"]],["stack"]]],[11,"new","","Create a JSON Builder.",20,[[["t"]],["builder"]]],[11,"build","","",20,[[["self"]],["result",["json","buildererror"]]]],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,[[["json"]],["decoder"]]],[11,"read_nil","","",21,[[["self"]],["decoderesult"]]],[11,"read_usize","","",21,[[["self"]],["decoderesult",["usize"]]]],[11,"read_u8","","",21,[[["self"]],["decoderesult",["u8"]]]],[11,"read_u16","","",21,[[["self"]],["decoderesult",["u16"]]]],[11,"read_u32","","",21,[[["self"]],["decoderesult",["u32"]]]],[11,"read_u64","","",21,[[["self"]],["decoderesult",["u64"]]]],[11,"read_isize","","",21,[[["self"]],["decoderesult",["isize"]]]],[11,"read_i8","","",21,[[["self"]],["decoderesult",["i8"]]]],[11,"read_i16","","",21,[[["self"]],["decoderesult",["i16"]]]],[11,"read_i32","","",21,[[["self"]],["decoderesult",["i32"]]]],[11,"read_i64","","",21,[[["self"]],["decoderesult",["i64"]]]],[11,"read_f32","","",21,[[["self"]],["decoderesult",["f32"]]]],[11,"read_f64","","",21,[[["self"]],["decoderesult",["f64"]]]],[11,"read_bool","","",21,[[["self"]],["decoderesult",["bool"]]]],[11,"read_char","","",21,[[["self"]],["decoderesult",["char"]]]],[11,"read_str","","",21,[[["self"]],["decoderesult",["string"]]]],[11,"read_enum","","",21,[[["self"],["str"],["f"]],["decoderesult"]]],[11,"read_enum_variant","","",21,N],[11,"read_enum_variant_arg","","",21,[[["self"],["usize"],["f"]],["decoderesult"]]],[11,"read_enum_struct_variant","","",21,N],[11,"read_enum_struct_variant_field","","",21,[[["self"],["str"],["usize"],["f"]],["decoderesult"]]],[11,"read_struct","","",21,[[["self"],["str"],["usize"],["f"]],["decoderesult"]]],[11,"read_struct_field","","",21,[[["self"],["str"],["usize"],["f"]],["decoderesult"]]],[11,"read_tuple","","",21,[[["self"],["usize"],["f"]],["decoderesult"]]],[11,"read_tuple_arg","","",21,[[["self"],["usize"],["f"]],["decoderesult"]]],[11,"read_tuple_struct","","",21,[[["self"],["str"],["usize"],["f"]],["decoderesult"]]],[11,"read_tuple_struct_arg","","",21,[[["self"],["usize"],["f"]],["decoderesult"]]],[11,"read_option","","",21,[[["self"],["f"]],["decoderesult"]]],[11,"read_seq","","",21,[[["self"],["f"]],["decoderesult"]]],[11,"read_seq_elt","","",21,[[["self"],["usize"],["f"]],["decoderesult"]]],[11,"read_map","","",21,[[["self"],["f"]],["decoderesult"]]],[11,"read_map_elt_key","","",21,[[["self"],["usize"],["f"]],["decoderesult"]]],[11,"read_map_elt_val","","",21,[[["self"],["usize"],["f"]],["decoderesult"]]],[11,"error","","",21,[[["self"],["str"]],["decodererror"]]],[11,"to_json","","",9,[[["self"]],["json"]]],[11,"fmt","","Encodes a json value into a string",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Encodes a json value into a string",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Encodes a json value into a string",23,[[["self"],["formatter"]],["result"]]],[11,"indent","","Set the indentation level for the emitted JSON",24,[[["self"],["u32"]],["asprettyjson"]]],[11,"fmt","","Encodes a json value into a string",24,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",9,[[["str"]],["result",["json","parsererror"]]]],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",N,N],[16,"Error","","The error type for method results.",25,N],[10,"read_nil","","Read a nil value.",25,[[["self"]],["result"]]],[10,"read_usize","","Read a usize value.",25,[[["self"]],["result",["usize"]]]],[10,"read_u64","","Read a u64 value.",25,[[["self"]],["result",["u64"]]]],[10,"read_u32","","Read a u32 value.",25,[[["self"]],["result",["u32"]]]],[10,"read_u16","","Read a u16 value.",25,[[["self"]],["result",["u16"]]]],[10,"read_u8","","Read a u8 value.",25,[[["self"]],["result",["u8"]]]],[10,"read_isize","","Read a isize value.",25,[[["self"]],["result",["isize"]]]],[10,"read_i64","","Read a i64 value.",25,[[["self"]],["result",["i64"]]]],[10,"read_i32","","Read a i32 value.",25,[[["self"]],["result",["i32"]]]],[10,"read_i16","","Read a i16 value.",25,[[["self"]],["result",["i16"]]]],[10,"read_i8","","Read a i8 value.",25,[[["self"]],["result",["i8"]]]],[10,"read_bool","","Read a bool value.",25,[[["self"]],["result",["bool"]]]],[10,"read_f64","","Read a f64 value.",25,[[["self"]],["result",["f64"]]]],[10,"read_f32","","Read a f32 value.",25,[[["self"]],["result",["f32"]]]],[10,"read_char","","Read a char value.",25,[[["self"]],["result",["char"]]]],[10,"read_str","","Read a string value.",25,[[["self"]],["result",["string"]]]],[10,"read_enum","","Read an enumeration value.",25,[[["self"],["str"],["f"]],["result"]]],[10,"read_enum_variant","","Read an enumeration value.",25,N],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,[[["self"],["usize"],["f"]],["result"]]],[10,"read_enum_struct_variant","","Read an enumeration value.",25,N],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"read_struct","","Read an struct value.",25,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"read_struct_field","","Read a field for a struct value.",25,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"read_tuple","","Read a tuple value.",25,[[["self"],["usize"],["f"]],["result"]]],[10,"read_tuple_arg","","Read a data item for a tuple.",25,[[["self"],["usize"],["f"]],["result"]]],[10,"read_tuple_struct","","Read a tuple struct value.",25,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,[[["self"],["usize"],["f"]],["result"]]],[10,"read_option","","Read an optional value.",25,[[["self"],["f"]],["result"]]],[10,"read_seq","","Read a sequence of values.",25,[[["self"],["f"]],["result"]]],[10,"read_seq_elt","","Read an element in the sequence.",25,[[["self"],["usize"],["f"]],["result"]]],[10,"read_map","","Read an associative container (map).",25,[[["self"],["f"]],["result"]]],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,[[["self"],["usize"],["f"]],["result"]]],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,[[["self"],["usize"],["f"]],["result"]]],[10,"error","","Record a decoding error.",25,N],[8,"Encoder","","Trait for writing out an encoding when serializing.",N,N],[16,"Error","","The error type for method results.",26,N],[10,"emit_nil","","Emit a nil value.",26,[[["self"]],["result"]]],[10,"emit_usize","","Emit a usize value.",26,[[["self"],["usize"]],["result"]]],[10,"emit_u64","","Emit a u64 value.",26,[[["self"],["u64"]],["result"]]],[10,"emit_u32","","Emit a u32 value.",26,[[["self"],["u32"]],["result"]]],[10,"emit_u16","","Emit a u16 value.",26,[[["self"],["u16"]],["result"]]],[10,"emit_u8","","Emit a u8 value.",26,[[["self"],["u8"]],["result"]]],[10,"emit_isize","","Emit a isize value.",26,[[["self"],["isize"]],["result"]]],[10,"emit_i64","","Emit a i64 value.",26,[[["self"],["i64"]],["result"]]],[10,"emit_i32","","Emit a i32 value.",26,[[["self"],["i32"]],["result"]]],[10,"emit_i16","","Emit a i16 value.",26,[[["self"],["i16"]],["result"]]],[10,"emit_i8","","Emit a i8 value.",26,[[["self"],["i8"]],["result"]]],[10,"emit_bool","","Emit a bool value.",26,[[["self"],["bool"]],["result"]]],[10,"emit_f64","","Emit a f64 value.",26,[[["self"],["f64"]],["result"]]],[10,"emit_f32","","Emit a f32 value.",26,[[["self"],["f32"]],["result"]]],[10,"emit_char","","Emit a char value.",26,[[["self"],["char"]],["result"]]],[10,"emit_str","","Emit a string value.",26,[[["self"],["str"]],["result"]]],[10,"emit_enum","","Emit an enumeration value.",26,[[["self"],["str"],["f"]],["result"]]],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,[[["self"],["str"],["usize"],["usize"],["f"]],["result"]]],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,[[["self"],["str"],["usize"],["usize"],["f"]],["result"]]],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"emit_struct","","Emit a struct value.",26,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"emit_struct_field","","Emit a field item for a struct.",26,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"emit_tuple","","Emit a tuple value.",26,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_option","","Emit an optional value.",26,[[["self"],["f"]],["result"]]],[10,"emit_option_none","","Emit the `None` optional value.",26,[[["self"]],["result"]]],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,[[["self"],["f"]],["result"]]],[10,"emit_seq","","Emit a sequence of values.",26,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_seq_elt","","Emit an element in a sequence.",26,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_map","","Emit an associative container (map).",26,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,[[["self"],["usize"],["f"]],["result"]]],[8,"Decodable","","Trait for deserializing a type.",N,N],[10,"decode","","Deserialize a value using a `Decoder`.",27,[[["d"]],["result"]]],[8,"Encodable","","Trait for serializing a type.",N,N],[10,"encode","","Serialize a value using an `Encoder`.",28,[[["self"],["s"]],["result"]]],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",N,N],[10,"read_to_vec","","Read a sequence into a vector.",29,[[["self"],["f"]],["result",["vec"]]]],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",N,N],[10,"emit_from_vec","","Emit a vector as a sequence.",30,N]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["rusttype"]={"doc":"RustType is a pure Rust alternative to libraries like FreeType.","items":[[3,"Curve","rusttype","A quadratic Bezier curve, starting at `p[0]`, ending at `p[2]`, with control point `p[1]`.",N,N],[12,"p","","",0,N],[3,"Line","","A straight line between two points, `p[0]` and `p[1]`",N,N],[12,"p","","",1,N],[3,"Point","","A point in 2-dimensional space, with each dimension of type `N`.",N,N],[12,"x","","",2,N],[12,"y","","",2,N],[3,"Rect","","A rectangle, with top-left corner at `min`, and bottom-right corner at `max`.",N,N],[12,"min","","",3,N],[12,"max","","",3,N],[3,"Vector","","A vector in 2-dimensional space, with each dimension of type `N`.",N,N],[12,"x","","",4,N],[12,"y","","",4,N],[3,"FontCollection","","A collection of fonts read straight from a font file's data. The data in the collection is not validated. This structure may or may not own the font data.",N,N],[3,"Font","","A single font. This may or may not own the font data.",N,N],[3,"Codepoint","","Represents a Unicode code point.",N,N],[12,"0","","",5,N],[3,"GlyphId","","Represents a glyph identifier for a particular font. This identifier will not necessarily correspond to the correct glyph in a font other than the one that it was obtained from.",N,N],[12,"0","","",6,N],[3,"Glyph","","A single glyph of a font. this may either be a thin wrapper referring to the font and the glyph id, or it may be a standalone glyph that owns the data needed by it.",N,N],[3,"SharedGlyphData","","",N,N],[12,"id","","",7,N],[12,"extents","","",7,N],[12,"scale_for_1_pixel","","",7,N],[12,"unit_h_metrics","","",7,N],[12,"shape","","",7,N],[3,"HMetrics","","The \"horizontal metrics\" of a glyph. This is useful for calculating the horizontal offset of a glyph from the previous one in a string when laying a string out horizontally.",N,N],[12,"advance_width","","The horizontal offset that the origin of the next glyph should be from the origin of this glyph.",8,N],[12,"left_side_bearing","","The horizontal offset between the origin of this glyph and the leftmost edge/point of the glyph.",8,N],[3,"VMetrics","","The \"vertical metrics\" of a font at a particular scale. This is useful for calculating the amount of vertical space to give a line of text, and for computing the vertical offset between successive lines.",N,N],[12,"ascent","","The highest point that any glyph in the font extends to above the baseline. Typically positive.",9,N],[12,"descent","","The lowest point that any glyph in the font extends to below the baseline. Typically negative.",9,N],[12,"line_gap","","The gap to leave between the descent of one line and the ascent of the next. This is of course only a guideline given by the font's designers.",9,N],[3,"ScaledGlyph","","A glyph augmented with scaling information. You can query such a glyph for information that depends on the scale of the glyph.",N,N],[3,"PositionedGlyph","","A glyph augmented with positioning and scaling information. You can query such a glyph for information that depends on the scale and position of the glyph.",N,N],[3,"Scale","","Defines the size of a rendered face of a font, in pixels, horizontally and vertically. A vertical scale of `y` pixels means that the distance betwen the ascent and descent lines (see `VMetrics`) of the face will be `y` pixels. If `x` and `y` are equal the scaling is uniform. Non-uniform scaling by a factor f in the horizontal direction is achieved by setting `x` equal to f times `y`.",N,N],[12,"x","","Horizontal scale, in pixels.",10,N],[12,"y","","Vertical scale, in pixels.",10,N],[3,"IntoFontsIter","","",N,N],[3,"GlyphIter","","",N,N],[3,"LayoutIter","","",N,N],[3,"Contour","","A closed loop consisting of a sequence of `Segment`s.",N,N],[12,"segments","","",11,N],[4,"SharedBytes","","`SharedBytes` handles the lifetime of font data used in RustType. The data is either a shared reference to externally owned data, or managed by reference counting. `SharedBytes` can be conveniently used with `From` and `Into`, and dereferences to the contained bytes.",N,N],[13,"ByRef","","",12,N],[13,"ByArc","","",12,N],[4,"Segment","","Part of a `Contour`, either a `Line` or a `Curve`.",N,N],[13,"Line","","",13,N],[13,"Curve","","",13,N],[4,"Error","","The type for errors returned by rusttype.",N,N],[13,"UnrecognizedFormat","","Font data presented to rusttype is not in a format that the library recognizes.",14,N],[13,"IllFormed","","Font data presented to rusttype was ill-formed (lacking necessary tables, for example).",14,N],[13,"CollectionIndexOutOfBounds","","The caller tried to access the `i`'th font from a `FontCollection`, but the collection doesn't contain that many fonts.",14,N],[13,"CollectionContainsMultipleFonts","","The caller tried to convert a `FontCollection` into a font via `into_font`, but the `FontCollection` contains more than one font.",14,N],[5,"point","","A convenience function for generating `Point`s.",N,[[["n"],["n"]],["point"]]],[5,"vector","","A convenience function for generating `Vector`s.",N,[[["n"],["n"]],["vector"]]],[11,"clone","","",2,[[["self"]],["point"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",2,[[["self"],["point"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["point"]],["bool"]]],[11,"le","","",2,[[["self"],["point"]],["bool"]]],[11,"gt","","",2,[[["self"],["point"]],["bool"]]],[11,"ge","","",2,[[["self"],["point"]],["bool"]]],[11,"cmp","","",2,[[["self"],["point"]],["ordering"]]],[11,"eq","","",2,[[["self"],["point"]],["bool"]]],[11,"ne","","",2,[[["self"],["point"]],["bool"]]],[11,"hash","","",2,N],[11,"clone","","",4,[[["self"]],["vector"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",4,[[["self"],["vector"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["vector"]],["bool"]]],[11,"le","","",4,[[["self"],["vector"]],["bool"]]],[11,"gt","","",4,[[["self"],["vector"]],["bool"]]],[11,"ge","","",4,[[["self"],["vector"]],["bool"]]],[11,"cmp","","",4,[[["self"],["vector"]],["ordering"]]],[11,"eq","","",4,[[["self"],["vector"]],["bool"]]],[11,"ne","","",4,[[["self"],["vector"]],["bool"]]],[11,"hash","","",4,N],[11,"sub","","",2,[[["self"],["point"]],["vector"]]],[11,"add","","",4,[[["self"],["vector"]],["vector"]]],[11,"sub","","",4,[[["self"],["vector"]],["vector"]]],[11,"mul","","",4,[[["self"],["f32"]],["vector",["f32"]]]],[11,"mul","","",4,[[["self"],["f64"]],["vector",["f64"]]]],[11,"div","","",4,[[["self"],["f32"]],["vector",["f32"]]]],[11,"div","","",4,[[["self"],["f64"]],["vector",["f64"]]]],[11,"add","","",2,[[["self"],["vector"]],["point"]]],[11,"sub","","",2,[[["self"],["vector"]],["point"]]],[11,"add","","",4,[[["self"],["point"]],["point"]]],[11,"clone","","",1,[[["self"]],["line"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["line"]],["bool"]]],[11,"ne","","",1,[[["self"],["line"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["line"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["line"]],["bool"]]],[11,"le","","",1,[[["self"],["line"]],["bool"]]],[11,"gt","","",1,[[["self"],["line"]],["bool"]]],[11,"ge","","",1,[[["self"],["line"]],["bool"]]],[11,"clone","","",0,[[["self"]],["curve"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["curve"]],["bool"]]],[11,"ne","","",0,[[["self"],["curve"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["curve"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["curve"]],["bool"]]],[11,"le","","",0,[[["self"],["curve"]],["bool"]]],[11,"gt","","",0,[[["self"],["curve"]],["bool"]]],[11,"ge","","",0,[[["self"],["curve"]],["bool"]]],[11,"clone","","",3,[[["self"]],["rect"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["rect"]],["bool"]]],[11,"ne","","",3,[[["self"],["rect"]],["bool"]]],[11,"hash","","",3,N],[11,"partial_cmp","","",3,[[["self"],["rect"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["rect"]],["bool"]]],[11,"le","","",3,[[["self"],["rect"]],["bool"]]],[11,"gt","","",3,[[["self"],["rect"]],["bool"]]],[11,"ge","","",3,[[["self"],["rect"]],["bool"]]],[11,"cmp","","",3,[[["self"],["rect"]],["ordering"]]],[11,"width","","",3,[[["self"]],["n"]]],[11,"height","","",3,[[["self"]],["n"]]],[8,"IntoGlyphId","","A trait for types that can be converted into a `GlyphId`, in the context of a specific font.",N,N],[10,"into_glyph_id","","Convert `self` into a `GlyphId`, consulting the index map of `font` if necessary.",15,[[["self"],["font"]],["glyphid"]]],[11,"clone","","",16,[[["self"]],["fontcollection"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["font"]]],[11,"clone","","",12,[[["self"]],["sharedbytes"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"deref","","",12,N],[11,"from","","",12,N],[11,"from","","",12,[[["arc"]],["sharedbytes"]]],[11,"from","","",12,[[["box"]],["sharedbytes"]]],[11,"from","","",12,[[["vec",["u8"]]],["sharedbytes"]]],[11,"clone","","",5,[[["self"]],["codepoint"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["codepoint"]],["bool"]]],[11,"ne","","",5,[[["self"],["codepoint"]],["bool"]]],[11,"hash","","",5,N],[11,"partial_cmp","","",5,[[["self"],["codepoint"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["codepoint"]],["bool"]]],[11,"le","","",5,[[["self"],["codepoint"]],["bool"]]],[11,"gt","","",5,[[["self"],["codepoint"]],["bool"]]],[11,"ge","","",5,[[["self"],["codepoint"]],["bool"]]],[11,"cmp","","",5,[[["self"],["codepoint"]],["ordering"]]],[11,"clone","","",6,[[["self"]],["glyphid"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["glyphid"]],["bool"]]],[11,"ne","","",6,[[["self"],["glyphid"]],["bool"]]],[11,"hash","","",6,N],[11,"partial_cmp","","",6,[[["self"],["glyphid"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["glyphid"]],["bool"]]],[11,"le","","",6,[[["self"],["glyphid"]],["bool"]]],[11,"gt","","",6,[[["self"],["glyphid"]],["bool"]]],[11,"ge","","",6,[[["self"],["glyphid"]],["bool"]]],[11,"cmp","","",6,[[["self"],["glyphid"]],["ordering"]]],[11,"clone","","",18,[[["self"]],["glyph"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["hmetrics"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["hmetrics"]],["bool"]]],[11,"ne","","",8,[[["self"],["hmetrics"]],["bool"]]],[11,"partial_cmp","","",8,[[["self"],["hmetrics"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["hmetrics"]],["bool"]]],[11,"le","","",8,[[["self"],["hmetrics"]],["bool"]]],[11,"gt","","",8,[[["self"],["hmetrics"]],["bool"]]],[11,"ge","","",8,[[["self"],["hmetrics"]],["bool"]]],[11,"clone","","",9,[[["self"]],["vmetrics"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["vmetrics"]],["bool"]]],[11,"ne","","",9,[[["self"],["vmetrics"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["vmetrics"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["vmetrics"]],["bool"]]],[11,"le","","",9,[[["self"],["vmetrics"]],["bool"]]],[11,"gt","","",9,[[["self"],["vmetrics"]],["bool"]]],[11,"ge","","",9,[[["self"],["vmetrics"]],["bool"]]],[11,"from","","",9,[[["vmetrics"]],["self"]]],[11,"mul","","",9,[[["self"],["f32"]],["self"]]],[11,"clone","","",19,[[["self"]],["scaledglyph"]]],[11,"clone","","",20,[[["self"]],["positionedglyph"]]],[11,"clone","","",10,[[["self"]],["scale"]]],[11,"eq","","",10,[[["self"],["scale"]],["bool"]]],[11,"ne","","",10,[[["self"],["scale"]],["bool"]]],[11,"partial_cmp","","",10,[[["self"],["scale"]],["option",["ordering"]]]],[11,"lt","","",10,[[["self"],["scale"]],["bool"]]],[11,"le","","",10,[[["self"],["scale"]],["bool"]]],[11,"gt","","",10,[[["self"],["scale"]],["bool"]]],[11,"ge","","",10,[[["self"],["scale"]],["bool"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"uniform","","Uniform scaling, equivalent to `Scale { x: s, y: s }`.",10,[[["f32"]],["scale"]]],[11,"into_glyph_id","","",5,[[["self"],["font"]],["glyphid"]]],[11,"into_glyph_id","","",6,[[["self"],["font"]],["glyphid"]]],[11,"from_bytes","","Constructs a font collection from an array of bytes, typically loaded from a font file, which may be a single font or a TrueType Collection holding a number of fonts. This array may be owned (e.g. `Vec<u8>`), or borrowed (`&[u8]`). As long as `From<T>` is implemented for `Bytes` for some type `T`, `T` can be used as input.",16,[[["b"]],["result",["fontcollection","error"]]]],[11,"into_font","","If this `FontCollection` holds a single font, or a TrueType Collection containing only one font, return that as a `Font`. The `FontCollection` is consumed.",16,[[["self"]],["result",["font","error"]]]],[11,"font_at","","Gets the font at index `i` in the font collection, if it exists and is valid. The produced font borrows the font data that is either borrowed or owned by this font collection.",16,[[["self"],["usize"]],["result",["font","error"]]]],[11,"into_fonts","","Converts `self` into an `Iterator` yielding each `Font` that exists within the collection.",16,[[["self"]],["intofontsiter"]]],[11,"next","","",21,[[["self"]],["option"]]],[11,"from_bytes","","Constructs a font from an array of bytes, this is a shortcut for `FontCollection::from_bytes` for collections comprised of a single font.",17,[[["b"]],["result",["font","error"]]]],[11,"v_metrics","","The \"vertical metrics\" for this font at a given scale. These metrics are shared by all of the glyphs in the font. See `VMetrics` for more detail.",17,[[["self"],["scale"]],["vmetrics"]]],[11,"v_metrics_unscaled","","Get the unscaled VMetrics for this font, shared by all glyphs. See `VMetrics` for more detail.",17,[[["self"]],["vmetrics"]]],[11,"units_per_em","","Returns the units per EM square of this font",17,[[["self"]],["u16"]]],[11,"glyph_count","","The number of glyphs present in this font. Glyph identifiers for this font will always be in the range `0..self.glyph_count()`",17,[[["self"]],["usize"]]],[11,"glyph","","Returns the corresponding glyph for a Unicode code point or a glyph id for this font.",17,[[["self"],["c"]],["glyph"]]],[11,"glyphs_for","","A convenience function.",17,[[["self"],["i"]],["glyphiter"]]],[11,"font_name_strings","","Returns an iterator over the names for this font.",17,[[["self"]],["fontnameiter",["sharedbytes"]]]],[11,"layout","","A convenience function for laying out glyphs for a string horizontally. It does not take control characters like line breaks into account, as treatment of these is likely to depend on the application.",17,[[["self"],["str"],["scale"],["point",["f32"]]],["layoutiter"]]],[11,"pair_kerning","","Returns additional kerning to apply as well as that given by HMetrics for a particular pair of glyphs.",17,[[["self"],["scale"],["a"],["b"]],["f32"]]],[11,"clone","","",22,[[["self"]],["glyphiter"]]],[11,"next","","",22,[[["self"]],["option",["glyph"]]]],[11,"clone","","",23,[[["self"]],["layoutiter"]]],[11,"next","","",23,[[["self"]],["option",["positionedglyph"]]]],[11,"font","","The font to which this glyph belongs. If the glyph is a standalone glyph that owns its resources, it no longer has a reference to the font which it was created from (using `standalone()`). In which case, `None` is returned.",18,[[["self"]],["option",["font"]]]],[11,"id","","The glyph identifier for this glyph.",18,[[["self"]],["glyphid"]]],[11,"scaled","","Augments this glyph with scaling information, making methods that depend on the scale of the glyph available.",18,[[["self"],["scale"]],["scaledglyph"]]],[11,"standalone","","Turns a `Glyph<'a>` into a `Glyph<'static>`. This produces a glyph that owns its resources, extracted from the font. This glyph can outlive the font that it comes from.",18,[[["self"]],["glyph"]]],[11,"get_data","","Get the data from this glyph (such as width, extents, vertices, etc.). Only possible if the glyph is a shared glyph.",18,[[["self"]],["option",["arc"]]]],[11,"clone","","",13,[[["self"]],["segment"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["contour"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"id","","The glyph identifier for this glyph.",19,[[["self"]],["glyphid"]]],[11,"font","","The font to which this glyph belongs. If the glyph is a standalone glyph that owns its resources, it no longer has a reference to the font which it was created from (using `standalone()`). In which case, `None` is returned.",19,[[["self"]],["option",["font"]]]],[11,"into_unscaled","","A reference to this glyph without the scaling",19,[[["self"]],["glyph"]]],[11,"unscaled","","Removes the scaling from this glyph",19,[[["self"]],["glyph"]]],[11,"positioned","","Augments this glyph with positioning information, making methods that depend on the position of the glyph available.",19,[[["self"],["point",["f32"]]],["positionedglyph"]]],[11,"scale","","",19,[[["self"]],["scale"]]],[11,"h_metrics","","Retrieves the \"horizontal metrics\" of this glyph. See `HMetrics` for more detail.",19,[[["self"]],["hmetrics"]]],[11,"shape","","Produces a list of the contours that make up the shape of this glyph. Each contour consists of a sequence of segments. Each segment is either a straight `Line` or a `Curve`.",19,[[["self"]],["option",["vec"]]]],[11,"exact_bounding_box","","The bounding box of the shape of this glyph, not to be confused with `pixel_bounding_box`, the conservative pixel-boundary bounding box. The coordinates are relative to the glyph's origin.",19,[[["self"]],["option",["rect"]]]],[11,"standalone","","Constructs a glyph that owns its data from this glyph. This is similar to `Glyph::standalone`. See that function for more details.",19,[[["self"]],["scaledglyph"]]],[11,"id","","The glyph identifier for this glyph.",20,[[["self"]],["glyphid"]]],[11,"font","","The font to which this glyph belongs. If the glyph is a standalone glyph that owns its resources, it no longer has a reference to the font which it was created from (using `standalone()`). In which case, `None` is returned.",20,[[["self"]],["option",["font"]]]],[11,"unpositioned","","A reference to this glyph without positioning",20,[[["self"]],["scaledglyph"]]],[11,"into_unpositioned","","Removes the positioning from this glyph",20,[[["self"]],["scaledglyph"]]],[11,"pixel_bounding_box","","The conservative pixel-boundary bounding box for this glyph. This is the smallest rectangle aligned to pixel boundaries that encloses the shape of this glyph at this position.",20,[[["self"]],["option",["rect"]]]],[11,"shape","","Similar to `ScaledGlyph::shape()`, but with the position of the glyph taken into account.",20,[[["self"]],["option",["vec"]]]],[11,"scale","","",20,[[["self"]],["scale"]]],[11,"position","","",20,[[["self"]],["point",["f32"]]]],[11,"draw","","Rasterises this glyph. For each pixel in the rect given by `pixel_bounding_box()`, `o` is called:",20,[[["self"],["o"]]]],[11,"standalone","","Constructs a glyph that owns its data from this glyph. This is similar to `Glyph::standalone`. See that function for more details.",20,[[["self"]],["positionedglyph"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",14,[[["self"]],["str"]]]],"paths":[[3,"Curve"],[3,"Line"],[3,"Point"],[3,"Rect"],[3,"Vector"],[3,"Codepoint"],[3,"GlyphId"],[3,"SharedGlyphData"],[3,"HMetrics"],[3,"VMetrics"],[3,"Scale"],[3,"Contour"],[4,"SharedBytes"],[4,"Segment"],[4,"Error"],[8,"IntoGlyphId"],[3,"FontCollection"],[3,"Font"],[3,"Glyph"],[3,"ScaledGlyph"],[3,"PositionedGlyph"],[3,"IntoFontsIter"],[3,"GlyphIter"],[3,"LayoutIter"]]};
searchIndex["scoped_threadpool"]={"doc":"This crate provides a stable, safe and scoped threadpool.","items":[[3,"Pool","scoped_threadpool","A threadpool that acts as a handle to a number of threads spawned at construction.",N,N],[3,"Scope","","Handle to the scope during which the threadpool is borrowed.",N,N],[11,"drop","","",0,[[["self"]]]],[11,"new","","Construct a threadpool with the given number of threads. Minimum value is `1`.",0,[[["u32"]],["pool"]]],[11,"scoped","","Borrows the pool and allows executing jobs on other threads during that scope via the argument of the closure.",0,[[["self"],["f"]],["r"]]],[11,"thread_count","","Returns the number of threads inside this pool.",0,[[["self"]],["u32"]]],[11,"execute","","Execute a job on the threadpool.",1,[[["self"],["f"]]]],[11,"join_all","","Blocks until all currently queued jobs have run to completion.",1,[[["self"]]]],[11,"drop","","",1,[[["self"]]]]],"paths":[[3,"Pool"],[3,"Scope"]]};
searchIndex["scopeguard"]={"doc":"A scope guard will run a given closure when it goes out of scope, even if the code between panics. (as long as panic doesn't abort)","items":[[3,"ScopeGuard","scopeguard","`ScopeGuard` is a scope guard that may own a protected value.",N,N],[4,"Always","","Always run on scope exit.",N,N],[5,"guard","","Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.",N,[[["t"],["f"]],["scopeguard",["always"]]]],[8,"Strategy","","",N,N],[10,"should_run","","Return `true` if the guard’s associated code should run (in the context where this method is called).",0,[[],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"should_run","","",1,[[],["bool"]]],[11,"with_strategy","","Create a `ScopeGuard` that owns `v` (accessible through deref) and calls `dropfn` when its destructor runs.",2,[[["t"],["f"]],["scopeguard"]]],[11,"deref","","",2,[[["self"]],["t"]]],[11,"deref_mut","","",2,[[["self"]],["t"]]],[11,"drop","","",2,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[14,"defer","","Macro to create a `ScopeGuard` (always run).",N,N],[14,"defer_on_unwind","","Macro to create a `ScopeGuard` (run on unwinding from panic).",N,N]],"paths":[[8,"Strategy"],[4,"Always"],[3,"ScopeGuard"]]};
searchIndex["stb_truetype"]={"doc":"","items":[[3,"FontInfo","stb_truetype","",N,N],[3,"Vertex","","",N,N],[12,"x","","",0,N],[12,"y","","",0,N],[12,"cx","","",0,N],[12,"cy","","",0,N],[3,"Rect","","",N,N],[12,"x0","","",1,N],[12,"y0","","",1,N],[12,"x1","","",1,N],[12,"y1","","",1,N],[3,"HMetrics","","",N,N],[12,"advance_width","","",2,N],[12,"left_side_bearing","","",2,N],[3,"VMetrics","","",N,N],[12,"ascent","","",3,N],[12,"descent","","",3,N],[12,"line_gap","","",3,N],[3,"FontNameIter","","",N,N],[4,"VertexType","","",N,N],[13,"MoveTo","","",4,N],[13,"LineTo","","",4,N],[13,"CurveTo","","",4,N],[4,"PlatformId","","",N,N],[13,"Unicode","","",5,N],[13,"Mac","","",5,N],[13,"Iso","","",5,N],[13,"Microsoft","","",5,N],[4,"UnicodeEid","","",N,N],[13,"Unicode_1_0","","",6,N],[13,"Unicode_1_1","","",6,N],[13,"Iso_10646","","",6,N],[13,"Unicode_2_0_Bmp","","",6,N],[13,"Unicode_2_0_Full","","",6,N],[4,"MicrosoftEid","","",N,N],[13,"Symbol","","",7,N],[13,"UnicodeBMP","","",7,N],[13,"Shiftjis","","",7,N],[13,"UnicodeFull","","",7,N],[4,"MacEid","","",N,N],[13,"Roman","","",8,N],[13,"Arabic","","",8,N],[13,"Japanese","","",8,N],[13,"Hebrew","","",8,N],[13,"ChineseTrad","","",8,N],[13,"Greek","","",8,N],[13,"Korean","","",8,N],[13,"Russian","","",8,N],[4,"MicrosoftLang","","",N,N],[13,"English","","",9,N],[13,"Italian","","",9,N],[13,"Chinese","","",9,N],[13,"Japanese","","",9,N],[13,"Dutch","","",9,N],[13,"Korean","","",9,N],[13,"French","","",9,N],[13,"Russian","","",9,N],[13,"German","","",9,N],[13,"Hebrew","","",9,N],[13,"Swedish","","",9,N],[4,"MacLang","","",N,N],[13,"English","","",10,N],[13,"Japanese","","",10,N],[13,"Arabic","","",10,N],[13,"Korean","","",10,N],[13,"Dutch","","",10,N],[13,"Russian","","",10,N],[13,"French","","",10,N],[13,"Spanish","","",10,N],[13,"German","","",10,N],[13,"Swedish","","",10,N],[13,"Hebrew","","",10,N],[13,"ChineseSimplified","","",10,N],[13,"Italian","","",10,N],[13,"ChineseTrad","","",10,N],[4,"PlatformEncodingLanguageId","","",N,N],[13,"Unicode","","",11,N],[13,"Mac","","",11,N],[13,"Iso","","",11,N],[13,"Microsoft","","",11,N],[5,"is_font","","",N,N],[5,"get_font_offset_for_index","","Each .ttf/.ttc file may have more than one font. Each font has a sequential index number starting from 0. Call this function to get the font offset for a given index; it returns None if the index is out of range. A regular .ttf file will only define one font and it always be at offset 0, so it will return Some(0) for index 0, and None for all other indices. You can just skip this step if you know it's that kind of font.",N,N],[11,"clone","","",12,[[["self"]],["fontinfo"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["vertex"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"vertex_type","","",0,[[["self"]],["vertextype"]]],[11,"clone","","",4,[[["self"]],["vertextype"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["rect"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["hmetrics"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["vmetrics"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["platformid"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["platformid"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["platformid"]],["option",["ordering"]]]],[11,"cmp","","",5,[[["self"],["platformid"]],["ordering"]]],[11,"hash","","",5,N],[11,"clone","","",6,[[["self"]],["unicodeeid"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["unicodeeid"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["unicodeeid"]],["option",["ordering"]]]],[11,"cmp","","",6,[[["self"],["unicodeeid"]],["ordering"]]],[11,"hash","","",6,N],[11,"clone","","",7,[[["self"]],["microsofteid"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["microsofteid"]],["bool"]]],[11,"partial_cmp","","",7,[[["self"],["microsofteid"]],["option",["ordering"]]]],[11,"cmp","","",7,[[["self"],["microsofteid"]],["ordering"]]],[11,"hash","","",7,N],[11,"clone","","",8,[[["self"]],["maceid"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["maceid"]],["bool"]]],[11,"partial_cmp","","",8,[[["self"],["maceid"]],["option",["ordering"]]]],[11,"cmp","","",8,[[["self"],["maceid"]],["ordering"]]],[11,"hash","","",8,N],[11,"clone","","",9,[[["self"]],["microsoftlang"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["microsoftlang"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["microsoftlang"]],["option",["ordering"]]]],[11,"cmp","","",9,[[["self"],["microsoftlang"]],["ordering"]]],[11,"hash","","",9,N],[11,"clone","","",10,[[["self"]],["maclang"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["maclang"]],["bool"]]],[11,"partial_cmp","","",10,[[["self"],["maclang"]],["option",["ordering"]]]],[11,"cmp","","",10,[[["self"],["maclang"]],["ordering"]]],[11,"hash","","",10,N],[11,"clone","","",11,[[["self"]],["platformencodinglanguageid"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["platformencodinglanguageid"]],["bool"]]],[11,"ne","","",11,[[["self"],["platformencodinglanguageid"]],["bool"]]],[11,"partial_cmp","","",11,[[["self"],["platformencodinglanguageid"]],["option",["ordering"]]]],[11,"lt","","",11,[[["self"],["platformencodinglanguageid"]],["bool"]]],[11,"le","","",11,[[["self"],["platformencodinglanguageid"]],["bool"]]],[11,"gt","","",11,[[["self"],["platformencodinglanguageid"]],["bool"]]],[11,"ge","","",11,[[["self"],["platformencodinglanguageid"]],["bool"]]],[11,"cmp","","",11,[[["self"],["platformencodinglanguageid"]],["ordering"]]],[11,"hash","","",11,N],[11,"new","","Given an offset into the file that defines a font, this function builds the necessary cached info for the rest of the system.",12,[[["data"],["usize"]],["option",["fontinfo"]]]],[11,"get_num_glyphs","","",12,[[["self"]],["u32"]]],[11,"find_glyph_index","","If you're going to perform multiple operations on the same character and you want a speed-up, call this function with the character you're going to process, then use glyph-based functions instead of the codepoint-based functions.",12,[[["self"],["u32"]],["u32"]]],[11,"get_codepoint_shape","","Returns the series of vertices encoding the shape of the glyph for this codepoint.",12,[[["self"],["u32"]],["option",["vec"]]]],[11,"get_glyph_box","","Like `get_codepoint_box`, but takes a glyph index. Use this if you have cached the glyph index for a codepoint.",12,[[["self"],["u32"]],["option",["rect"]]]],[11,"get_codepoint_box","","Gets the bounding box of the visible part of the glyph, in unscaled coordinates",12,[[["self"],["u32"]],["option",["rect"]]]],[11,"is_glyph_empty","","returns true if nothing is drawn for this glyph",12,[[["self"],["u32"]],["bool"]]],[11,"get_glyph_shape","","Like `get_codepoint_shape`, but takes a glyph index instead. Use this if you have cached the glyph index for a codepoint.",12,[[["self"],["u32"]],["option",["vec"]]]],[11,"get_glyph_h_metrics","","like `get_codepoint_h_metrics`, but takes a glyph index instead. Use this if you have cached the glyph index for a codepoint.",12,[[["self"],["u32"]],["hmetrics"]]],[11,"get_glyph_kern_advance","","like `get_codepoint_kern_advance`, but takes glyph indices instead. Use this if you have cached the glyph indices for the codepoints.",12,[[["self"],["u32"],["u32"]],["i32"]]],[11,"get_codepoint_kern_advance","","an additional amount to add to the 'advance' value between cp1 and cp2",12,[[["self"],["u32"],["u32"]],["i32"]]],[11,"get_codepoint_h_metrics","","`left_side_bearing` is the offset from the current horizontal position to the left edge of the character `advance_width` is the offset from the current horizontal position to the next horizontal position these are expressed in unscaled coordinates",12,[[["self"],["u32"]],["hmetrics"]]],[11,"get_v_metrics","","`ascent` is the coordinate above the baseline the font extends; descent is the coordinate below the baseline the font extends (i.e. it is typically negative) `line_gap` is the spacing between one row's descent and the next row's ascent... so you should advance the vertical position by `ascent - descent + line_gap` these are expressed in unscaled coordinates, so you must multiply by the scale factor for a given size",12,[[["self"]],["vmetrics"]]],[11,"get_bounding_box","","the bounding box around all possible characters",12,[[["self"]],["rect",["i16"]]]],[11,"scale_for_pixel_height","","computes a scale factor to produce a font whose \"height\" is 'pixels' tall. Height is measured as the distance from the highest ascender to the lowest descender; in other words, it's equivalent to calling GetFontVMetrics and computing:       scale = pixels / (ascent - descent) so if you prefer to measure height by the ascent only, use a similar calculation.",12,[[["self"],["f32"]],["f32"]]],[11,"units_per_em","","Returns the units per EM square of this font.",12,[[["self"]],["u16"]]],[11,"scale_for_mapping_em_to_pixels","","computes a scale factor to produce a font whose EM size is mapped to `pixels` tall. This is probably what traditional APIs compute, but I'm not positive.",12,[[["self"],["f32"]],["f32"]]],[11,"get_glyph_bitmap_box_subpixel","","like `get_codepoint_bitmap_box_subpixel`, but takes a glyph index instead of a codepoint.",12,[[["self"],["u32"],["f32"],["f32"],["f32"],["f32"]],["option",["rect"]]]],[11,"get_glyph_bitmap_box","","like `get_codepoint_bitmap_box`, but takes a glyph index instead of a codepoint.",12,[[["self"],["u32"],["f32"],["f32"]],["option",["rect"]]]],[11,"get_codepoint_bitmap_box_subpixel","","same as get_codepoint_bitmap_box, but you can specify a subpixel shift for the character",12,[[["self"],["u32"],["f32"],["f32"],["f32"],["f32"]],["option",["rect"]]]],[11,"get_codepoint_bitmap_box","","get the bounding box of the bitmap centered around the glyph origin; so the bitmap width is x1-x0, height is y1-y0, and location to place the bitmap top left is (left_side_bearing*scale, y0). (Note that the bitmap uses y-increases-down, but the shape uses y-increases-up, so CodepointBitmapBox and CodepointBox are inverted.)",12,[[["self"],["u32"],["f32"],["f32"]],["option",["rect"]]]],[11,"get_font_name_strings","","",12,[[["self"]],["fontnameiter"]]],[11,"clone","","",13,[[["self"]],["fontnameiter"]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"size_hint","","",13,N],[11,"count","","",13,[[["self"]],["usize"]]],[11,"last","","",13,[[["self"]],["option"]]],[11,"nth","","",13,[[["self"],["usize"]],["option"]]]],"paths":[[3,"Vertex"],[3,"Rect"],[3,"HMetrics"],[3,"VMetrics"],[4,"VertexType"],[4,"PlatformId"],[4,"UnicodeEid"],[4,"MicrosoftEid"],[4,"MacEid"],[4,"MicrosoftLang"],[4,"MacLang"],[4,"PlatformEncodingLanguageId"],[3,"FontInfo"],[3,"FontNameIter"]]};
searchIndex["syn"]={"doc":"Syn is a parsing library for parsing a stream of Rust tokens into a syntax tree of Rust source code.","items":[[3,"Ident","syn","A word of Rust code, which may be a keyword or legal variable name.",N,N],[3,"Attribute","","An attribute like `#[repr(transparent)]`.",N,N],[12,"pound_token","","",0,N],[12,"style","","",0,N],[12,"bracket_token","","",0,N],[12,"path","","",0,N],[12,"tts","","",0,N],[12,"is_sugared_doc","","",0,N],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",N,N],[12,"ident","","",1,N],[12,"paren_token","","",1,N],[12,"nested","","",1,N],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",N,N],[12,"ident","","",2,N],[12,"eq_token","","",2,N],[12,"lit","","",2,N],[3,"Field","","A field of a struct or enum variant.",N,N],[12,"attrs","","Attributes tagged on the field.",3,N],[12,"vis","","Visibility of the field.",3,N],[12,"ident","","Name of the field, if any.",3,N],[12,"colon_token","","",3,N],[12,"ty","","Type of the field.",3,N],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",N,N],[12,"brace_token","","",4,N],[12,"named","","",4,N],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",N,N],[12,"paren_token","","",5,N],[12,"unnamed","","",5,N],[3,"Variant","","An enum variant.",N,N],[12,"attrs","","Attributes tagged on the variant.",6,N],[12,"ident","","Name of the variant.",6,N],[12,"fields","","Content stored in the variant.",6,N],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,N],[3,"VisCrate","","A crate-level visibility: `crate`.",N,N],[12,"crate_token","","",7,N],[3,"VisPublic","","A public visibility level: `pub`.",N,N],[12,"pub_token","","",8,N],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",N,N],[12,"pub_token","","",9,N],[12,"paren_token","","",9,N],[12,"in_token","","",9,N],[12,"path","","",9,N],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",N,N],[3,"ExprAssign","","An assignment expression: `a = compute()`.",N,N],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",N,N],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",N,N],[12,"attrs","","",10,N],[12,"left","","",10,N],[12,"op","","",10,N],[12,"right","","",10,N],[3,"ExprBlock","","A blocked scope: `{ ... }`.",N,N],[3,"ExprBox","","A box expression: `box f`.",N,N],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",N,N],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",N,N],[12,"attrs","","",11,N],[12,"func","","",11,N],[12,"paren_token","","",11,N],[12,"args","","",11,N],[3,"ExprCast","","A cast expression: `foo as f64`.",N,N],[12,"attrs","","",12,N],[12,"expr","","",12,N],[12,"as_token","","",12,N],[12,"ty","","",12,N],[3,"ExprCatch","","A catch expression: `do catch { ... }`.",N,N],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",N,N],[3,"ExprContinue","","A `continue`, with an optional label.",N,N],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",N,N],[12,"attrs","","",13,N],[12,"base","","",13,N],[12,"dot_token","","",13,N],[12,"member","","",13,N],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",N,N],[3,"ExprGroup","","An expression contained within invisible delimiters.",N,N],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",N,N],[3,"ExprIfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",N,N],[3,"ExprInPlace","","A placement expression: `place <- value`.",N,N],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",N,N],[12,"attrs","","",14,N],[12,"expr","","",14,N],[12,"bracket_token","","",14,N],[12,"index","","",14,N],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",N,N],[12,"attrs","","",15,N],[12,"lit","","",15,N],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",N,N],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",N,N],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",N,N],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",N,N],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",N,N],[12,"attrs","","",16,N],[12,"paren_token","","",16,N],[12,"expr","","",16,N],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",N,N],[12,"attrs","","",17,N],[12,"qself","","",17,N],[12,"path","","",17,N],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",N,N],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",N,N],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",N,N],[3,"ExprReturn","","A `return`, with an optional value to be returned.",N,N],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",N,N],[3,"ExprTry","","A try-expression: `expr?`.",N,N],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",N,N],[3,"ExprType","","A type ascription expression: `foo: f64`.",N,N],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",N,N],[12,"attrs","","",18,N],[12,"op","","",18,N],[12,"expr","","",18,N],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",N,N],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",N,N],[12,"tts","","",19,N],[3,"ExprWhile","","A while loop: `while expr { ... }`.",N,N],[3,"ExprWhileLet","","A while-let loop: `while let pat = expr { ... }`.",N,N],[3,"ExprYield","","A yield expression: `yield expr`.",N,N],[3,"Index","","The index of an unnamed tuple struct field.",N,N],[12,"index","","",20,N],[12,"span","","",20,N],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",N,N],[12,"for_token","","",21,N],[12,"lt_token","","",21,N],[12,"lifetimes","","",21,N],[12,"gt_token","","",21,N],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",N,N],[12,"attrs","","",22,N],[12,"const_token","","",22,N],[12,"ident","","",22,N],[12,"colon_token","","",22,N],[12,"ty","","",22,N],[12,"eq_token","","",22,N],[12,"default","","",22,N],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",N,N],[12,"lt_token","","",23,N],[12,"params","","",23,N],[12,"gt_token","","",23,N],[12,"where_clause","","",23,N],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",N,N],[12,"attrs","","",24,N],[12,"lifetime","","",24,N],[12,"colon_token","","",24,N],[12,"bounds","","",24,N],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",N,N],[12,"lhs_ty","","",25,N],[12,"eq_token","","",25,N],[12,"rhs_ty","","",25,N],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",N,N],[12,"lifetime","","",26,N],[12,"colon_token","","",26,N],[12,"bounds","","",26,N],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",N,N],[12,"lifetimes","","Any lifetimes from a `for` binding",27,N],[12,"bounded_ty","","The type being bounded",27,N],[12,"colon_token","","",27,N],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",27,N],[3,"TraitBound","","A trait used as a bound on a type parameter.",N,N],[12,"paren_token","","",28,N],[12,"modifier","","",28,N],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",28,N],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",28,N],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",N,N],[12,"attrs","","",29,N],[12,"ident","","",29,N],[12,"colon_token","","",29,N],[12,"bounds","","",29,N],[12,"eq_token","","",29,N],[12,"default","","",29,N],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",N,N],[12,"where_token","","",30,N],[12,"predicates","","",30,N],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",N,N],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"Lifetime","","A Rust lifetime: `'a`.",N,N],[12,"apostrophe","","",31,N],[12,"ident","","",31,N],[3,"LitBool","","A boolean literal: `true` or `false`.",N,N],[12,"value","","",32,N],[12,"span","","",32,N],[3,"LitByte","","A byte literal: `b'f'`.",N,N],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",N,N],[3,"LitChar","","A character literal: `'a'`.",N,N],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",N,N],[3,"LitInt","","An integer literal: `1` or `1u16`.",N,N],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",N,N],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",N,N],[12,"token","","",33,N],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",N,N],[12,"path","","",34,N],[12,"bang_token","","",34,N],[12,"delimiter","","",34,N],[12,"tts","","",34,N],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",N,N],[12,"enum_token","","",35,N],[12,"brace_token","","",35,N],[12,"variants","","",35,N],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",N,N],[12,"struct_token","","",36,N],[12,"fields","","",36,N],[12,"semi_token","","",36,N],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",N,N],[12,"union_token","","",37,N],[12,"fields","","",37,N],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",N,N],[12,"attrs","","Attributes tagged on the whole struct or enum.",38,N],[12,"vis","","Visibility of the struct or enum.",38,N],[12,"ident","","Name of the struct or enum.",38,N],[12,"generics","","Generics required to complete the definition.",38,N],[12,"data","","Data within the struct or enum.",38,N],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",N,N],[12,"extern_token","","",39,N],[12,"name","","",39,N],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",N,N],[12,"name","","",40,N],[12,"ty","","",40,N],[3,"TypeArray","","A fixed size array type: `[T; n]`.",N,N],[12,"bracket_token","","",41,N],[12,"elem","","",41,N],[12,"semi_token","","",41,N],[12,"len","","",41,N],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",N,N],[12,"unsafety","","",42,N],[12,"abi","","",42,N],[12,"fn_token","","",42,N],[12,"lifetimes","","",42,N],[12,"paren_token","","",42,N],[12,"inputs","","",42,N],[12,"variadic","","",42,N],[12,"output","","",42,N],[3,"TypeGroup","","A type contained within invisible delimiters.",N,N],[12,"group_token","","",43,N],[12,"elem","","",43,N],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",N,N],[12,"impl_token","","",44,N],[12,"bounds","","",44,N],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",N,N],[12,"underscore_token","","",45,N],[3,"TypeMacro","","A macro in the type position.",N,N],[12,"mac","","",46,N],[3,"TypeNever","","The never type: `!`.",N,N],[12,"bang_token","","",47,N],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",N,N],[12,"paren_token","","",48,N],[12,"elem","","",48,N],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",N,N],[12,"qself","","",49,N],[12,"path","","",49,N],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",N,N],[12,"star_token","","",50,N],[12,"const_token","","",50,N],[12,"mutability","","",50,N],[12,"elem","","",50,N],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",N,N],[12,"and_token","","",51,N],[12,"lifetime","","",51,N],[12,"mutability","","",51,N],[12,"elem","","",51,N],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",N,N],[12,"bracket_token","","",52,N],[12,"elem","","",52,N],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",N,N],[12,"dyn_token","","",53,N],[12,"bounds","","",53,N],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",N,N],[12,"paren_token","","",54,N],[12,"elems","","",54,N],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",N,N],[12,"tts","","",55,N],[3,"PathTokens","","A helper for printing a self-type qualified path as tokens.",N,N],[12,"0","","",56,N],[12,"1","","",56,N],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",N,N],[12,"colon2_token","","",57,N],[12,"lt_token","","",57,N],[12,"args","","",57,N],[12,"gt_token","","",57,N],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",N,N],[12,"ident","","",58,N],[12,"eq_token","","",58,N],[12,"ty","","",58,N],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",N,N],[12,"paren_token","","",59,N],[12,"inputs","","`(A, B)`",59,N],[12,"output","","`C`",59,N],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",N,N],[12,"leading_colon","","",60,N],[12,"segments","","",60,N],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",N,N],[12,"ident","","",61,N],[12,"arguments","","",61,N],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",N,N],[12,"lt_token","","",62,N],[12,"ty","","",62,N],[12,"position","","",62,N],[12,"as_token","","",62,N],[12,"gt_token","","",62,N],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",N,N],[13,"Outer","","",63,N],[13,"Inner","","",63,N],[4,"Meta","","Content of a compile-time structured attribute.",N,N],[13,"Word","","",64,N],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",64,N],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",64,N],[4,"NestedMeta","","Element of a compile-time attribute list.",N,N],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",65,N],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",65,N],[4,"Fields","","Data stored within an enum variant or struct.",N,N],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",66,N],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",66,N],[13,"Unit","","Unit struct or unit variant such as `None`.",66,N],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",N,N],[13,"Public","","A public visibility level: `pub`.",67,N],[13,"Crate","","A crate-level visibility: `crate`.",67,N],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",67,N],[13,"Inherited","","An inherited visibility, which usually means private.",67,N],[4,"Expr","","A Rust expression.",N,N],[13,"Box","","A box expression: `box f`.",68,N],[13,"InPlace","","A placement expression: `place <- value`.",68,N],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",68,N],[13,"Call","","A function call expression: `invoke(a, b)`.",68,N],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",68,N],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",68,N],[13,"Binary","","A binary operation: `a + b`, `a * b`.",68,N],[13,"Unary","","A unary operation: `!x`, `*x`.",68,N],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",68,N],[13,"Cast","","A cast expression: `foo as f64`.",68,N],[13,"Type","","A type ascription expression: `foo: f64`.",68,N],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",68,N],[13,"IfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",68,N],[13,"While","","A while loop: `while expr { ... }`.",68,N],[13,"WhileLet","","A while-let loop: `while let pat = expr { ... }`.",68,N],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",68,N],[13,"Loop","","Conditionless loop: `loop { ... }`.",68,N],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",68,N],[13,"Closure","","A closure expression: `|a, b| a + b`.",68,N],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",68,N],[13,"Block","","A blocked scope: `{ ... }`.",68,N],[13,"Assign","","An assignment expression: `a = compute()`.",68,N],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",68,N],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",68,N],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",68,N],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",68,N],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",68,N],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",68,N],[13,"Break","","A `break`, with an optional label to break and an optional expression.",68,N],[13,"Continue","","A `continue`, with an optional label.",68,N],[13,"Return","","A `return`, with an optional value to be returned.",68,N],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",68,N],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",68,N],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",68,N],[13,"Paren","","A parenthesized expression: `(a + b)`.",68,N],[13,"Group","","An expression contained within invisible delimiters.",68,N],[13,"Try","","A try-expression: `expr?`.",68,N],[13,"Catch","","A catch expression: `do catch { ... }`.",68,N],[13,"Yield","","A yield expression: `yield expr`.",68,N],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",68,N],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",N,N],[13,"Named","","A named field like `self.x`.",69,N],[13,"Unnamed","","An unnamed field like `self.0`.",69,N],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",N,N],[13,"Type","","A generic type parameter: `T: Into<String>`.",70,N],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",70,N],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",70,N],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",N,N],[13,"None","","",71,N],[13,"Maybe","","",71,N],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",N,N],[13,"Trait","","",72,N],[13,"Lifetime","","",72,N],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",N,N],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",73,N],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",73,N],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",73,N],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",N,N],[13,"F32","","",74,N],[13,"F64","","",74,N],[13,"None","","",74,N],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",N,N],[13,"I8","","",75,N],[13,"I16","","",75,N],[13,"I32","","",75,N],[13,"I64","","",75,N],[13,"I128","","",75,N],[13,"Isize","","",75,N],[13,"U8","","",75,N],[13,"U16","","",75,N],[13,"U32","","",75,N],[13,"U64","","",75,N],[13,"U128","","",75,N],[13,"Usize","","",75,N],[13,"None","","",75,N],[4,"Lit","","A Rust literal such as a string or integer or boolean.",N,N],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",76,N],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",76,N],[13,"Byte","","A byte literal: `b'f'`.",76,N],[13,"Char","","A character literal: `'a'`.",76,N],[13,"Int","","An integer literal: `1` or `1u16`.",76,N],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",76,N],[13,"Bool","","A boolean literal: `true` or `false`.",76,N],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",76,N],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",N,N],[13,"Cooked","","An ordinary string like `\"data\"`.",77,N],[13,"Raw","","A raw string like `r##\"data\"##`.",77,N],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",N,N],[13,"Paren","","",78,N],[13,"Brace","","",78,N],[13,"Bracket","","",78,N],[4,"Data","","The storage of a struct, enum or union data structure.",N,N],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",79,N],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",79,N],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",79,N],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",N,N],[13,"Add","","The `+` operator (addition)",80,N],[13,"Sub","","The `-` operator (subtraction)",80,N],[13,"Mul","","The `*` operator (multiplication)",80,N],[13,"Div","","The `/` operator (division)",80,N],[13,"Rem","","The `%` operator (modulus)",80,N],[13,"And","","The `&&` operator (logical and)",80,N],[13,"Or","","The `||` operator (logical or)",80,N],[13,"BitXor","","The `^` operator (bitwise xor)",80,N],[13,"BitAnd","","The `&` operator (bitwise and)",80,N],[13,"BitOr","","The `|` operator (bitwise or)",80,N],[13,"Shl","","The `<<` operator (shift left)",80,N],[13,"Shr","","The `>>` operator (shift right)",80,N],[13,"Eq","","The `==` operator (equality)",80,N],[13,"Lt","","The `<` operator (less than)",80,N],[13,"Le","","The `<=` operator (less than or equal to)",80,N],[13,"Ne","","The `!=` operator (not equal to)",80,N],[13,"Ge","","The `>=` operator (greater than or equal to)",80,N],[13,"Gt","","The `>` operator (greater than)",80,N],[13,"AddEq","","The `+=` operator",80,N],[13,"SubEq","","The `-=` operator",80,N],[13,"MulEq","","The `*=` operator",80,N],[13,"DivEq","","The `/=` operator",80,N],[13,"RemEq","","The `%=` operator",80,N],[13,"BitXorEq","","The `^=` operator",80,N],[13,"BitAndEq","","The `&=` operator",80,N],[13,"BitOrEq","","The `|=` operator",80,N],[13,"ShlEq","","The `<<=` operator",80,N],[13,"ShrEq","","The `>>=` operator",80,N],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",N,N],[13,"Deref","","The `*` operator for dereferencing",81,N],[13,"Not","","The `!` operator for logical inversion",81,N],[13,"Neg","","The `-` operator for negation",81,N],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",N,N],[13,"Named","","Argument given a name.",82,N],[13,"Wild","","Argument not given a name, matched with `_`.",82,N],[4,"ReturnType","","Return type of a function signature.",N,N],[13,"Default","","Return type is not specified.",83,N],[13,"Type","","A particular type is returned.",83,N],[4,"Type","","The possible types that a Rust value could have.",N,N],[13,"Slice","","A dynamically sized slice type: `[T]`.",84,N],[13,"Array","","A fixed size array type: `[T; n]`.",84,N],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",84,N],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",84,N],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",84,N],[13,"Never","","The never type: `!`.",84,N],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",84,N],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",84,N],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",84,N],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",84,N],[13,"Paren","","A parenthesized type equivalent to the inner type.",84,N],[13,"Group","","A type contained within invisible delimiters.",84,N],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",84,N],[13,"Macro","","A macro in the type position.",84,N],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",84,N],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",N,N],[13,"Lifetime","","A lifetime argument.",85,N],[13,"Type","","A type argument.",85,N],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",85,N],[13,"Const","","A const expression. Must be inside of a block.",85,N],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",N,N],[13,"None","","",86,N],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",86,N],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",86,N],[5,"parse","","Parse tokens of source code into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["parseerror"]]]],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["parseerror"]]]],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",N,[[["str"]],["result",["parseerror"]]]],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",N,N],[3,"Underscore","syn::token","`_`",N,N],[12,"0","","",87,N],[3,"Apostrophe","","`'`",N,N],[12,"0","","",88,N],[3,"Add","","`+`",N,N],[12,"0","","",89,N],[3,"AddEq","","`+=`",N,N],[12,"0","","",90,N],[3,"And","","`&`",N,N],[12,"0","","",91,N],[3,"AndAnd","","`&&`",N,N],[12,"0","","",92,N],[3,"AndEq","","`&=`",N,N],[12,"0","","",93,N],[3,"At","","`@`",N,N],[12,"0","","",94,N],[3,"Bang","","`!`",N,N],[12,"0","","",95,N],[3,"Caret","","`^`",N,N],[12,"0","","",96,N],[3,"CaretEq","","`^=`",N,N],[12,"0","","",97,N],[3,"Colon","","`:`",N,N],[12,"0","","",98,N],[3,"Colon2","","`::`",N,N],[12,"0","","",99,N],[3,"Comma","","`,`",N,N],[12,"0","","",100,N],[3,"Div","","`/`",N,N],[12,"0","","",101,N],[3,"DivEq","","`/=`",N,N],[12,"0","","",102,N],[3,"Dollar","","`$`",N,N],[12,"0","","",103,N],[3,"Dot","","`.`",N,N],[12,"0","","",104,N],[3,"Dot2","","`..`",N,N],[12,"0","","",105,N],[3,"Dot3","","`...`",N,N],[12,"0","","",106,N],[3,"DotDotEq","","`..=`",N,N],[12,"0","","",107,N],[3,"Eq","","`=`",N,N],[12,"0","","",108,N],[3,"EqEq","","`==`",N,N],[12,"0","","",109,N],[3,"Ge","","`>=`",N,N],[12,"0","","",110,N],[3,"Gt","","`>`",N,N],[12,"0","","",111,N],[3,"Le","","`<=`",N,N],[12,"0","","",112,N],[3,"Lt","","`<`",N,N],[12,"0","","",113,N],[3,"MulEq","","`*=`",N,N],[12,"0","","",114,N],[3,"Ne","","`!=`",N,N],[12,"0","","",115,N],[3,"Or","","`|`",N,N],[12,"0","","",116,N],[3,"OrEq","","`|=`",N,N],[12,"0","","",117,N],[3,"OrOr","","`||`",N,N],[12,"0","","",118,N],[3,"Pound","","`#`",N,N],[12,"0","","",119,N],[3,"Question","","`?`",N,N],[12,"0","","",120,N],[3,"RArrow","","`->`",N,N],[12,"0","","",121,N],[3,"LArrow","","`<-`",N,N],[12,"0","","",122,N],[3,"Rem","","`%`",N,N],[12,"0","","",123,N],[3,"RemEq","","`%=`",N,N],[12,"0","","",124,N],[3,"FatArrow","","`=>`",N,N],[12,"0","","",125,N],[3,"Semi","","`;`",N,N],[12,"0","","",126,N],[3,"Shl","","`<<`",N,N],[12,"0","","",127,N],[3,"ShlEq","","`<<=`",N,N],[12,"0","","",128,N],[3,"Shr","","`>>`",N,N],[12,"0","","",129,N],[3,"ShrEq","","`>>=`",N,N],[12,"0","","",130,N],[3,"Star","","`*`",N,N],[12,"0","","",131,N],[3,"Sub","","`-`",N,N],[12,"0","","",132,N],[3,"SubEq","","`-=`",N,N],[12,"0","","",133,N],[3,"Brace","","`{...}`",N,N],[12,"0","","",134,N],[3,"Bracket","","`[...]`",N,N],[12,"0","","",135,N],[3,"Paren","","`(...)`",N,N],[12,"0","","",136,N],[3,"Group","","None-delimited group",N,N],[12,"0","","",137,N],[3,"As","","`as`",N,N],[12,"0","","",138,N],[3,"Auto","","`auto`",N,N],[12,"0","","",139,N],[3,"Box","","`box`",N,N],[12,"0","","",140,N],[3,"Break","","`break`",N,N],[12,"0","","",141,N],[3,"CapSelf","","`Self`",N,N],[12,"0","","",142,N],[3,"Catch","","`catch`",N,N],[12,"0","","",143,N],[3,"Const","","`const`",N,N],[12,"0","","",144,N],[3,"Continue","","`continue`",N,N],[12,"0","","",145,N],[3,"Crate","","`crate`",N,N],[12,"0","","",146,N],[3,"Default","","`default`",N,N],[12,"0","","",147,N],[3,"Do","","`do`",N,N],[12,"0","","",148,N],[3,"Dyn","","`dyn`",N,N],[12,"0","","",149,N],[3,"Else","","`else`",N,N],[12,"0","","",150,N],[3,"Enum","","`enum`",N,N],[12,"0","","",151,N],[3,"Extern","","`extern`",N,N],[12,"0","","",152,N],[3,"Fn","","`fn`",N,N],[12,"0","","",153,N],[3,"For","","`for`",N,N],[12,"0","","",154,N],[3,"If","","`if`",N,N],[12,"0","","",155,N],[3,"Impl","","`impl`",N,N],[12,"0","","",156,N],[3,"In","","`in`",N,N],[12,"0","","",157,N],[3,"Let","","`let`",N,N],[12,"0","","",158,N],[3,"Loop","","`loop`",N,N],[12,"0","","",159,N],[3,"Macro","","`macro`",N,N],[12,"0","","",160,N],[3,"Match","","`match`",N,N],[12,"0","","",161,N],[3,"Mod","","`mod`",N,N],[12,"0","","",162,N],[3,"Move","","`move`",N,N],[12,"0","","",163,N],[3,"Mut","","`mut`",N,N],[12,"0","","",164,N],[3,"Pub","","`pub`",N,N],[12,"0","","",165,N],[3,"Ref","","`ref`",N,N],[12,"0","","",166,N],[3,"Return","","`return`",N,N],[12,"0","","",167,N],[3,"Self_","","`self`",N,N],[12,"0","","",168,N],[3,"Static","","`static`",N,N],[12,"0","","",169,N],[3,"Struct","","`struct`",N,N],[12,"0","","",170,N],[3,"Super","","`super`",N,N],[12,"0","","",171,N],[3,"Trait","","`trait`",N,N],[12,"0","","",172,N],[3,"Type","","`type`",N,N],[12,"0","","",173,N],[3,"Union","","`union`",N,N],[12,"0","","",174,N],[3,"Unsafe","","`unsafe`",N,N],[12,"0","","",175,N],[3,"Use","","`use`",N,N],[12,"0","","",176,N],[3,"Where","","`where`",N,N],[12,"0","","",177,N],[3,"While","","`while`",N,N],[12,"0","","",178,N],[3,"Yield","","`yield`",N,N],[12,"0","","",179,N],[11,"clone","","",87,[[["self"]],["underscore"]]],[11,"new","","",87,[[["span"]],["self"]]],[11,"default","","",87,[[],["self"]]],[11,"from","","",87,[[["span"]],["self"]]],[11,"to_tokens","","",87,[[["self"],["tokenstream"]]]],[11,"parse","","",87,[[["cursor"]],["presult",["underscore"]]]],[11,"description","","",87,[[],["option",["str"]]]],[11,"clone","","",88,[[["self"]],["apostrophe"]]],[11,"new","","",88,[[["span"]],["self"]]],[11,"default","","",88,[[],["self"]]],[11,"from","","",88,[[["span"]],["self"]]],[11,"to_tokens","","",88,[[["self"],["tokenstream"]]]],[11,"parse","","",88,[[["cursor"]],["presult",["apostrophe"]]]],[11,"description","","",88,[[],["option",["str"]]]],[11,"clone","","",89,[[["self"]],["add"]]],[11,"new","","",89,[[["span"]],["self"]]],[11,"default","","",89,[[],["self"]]],[11,"from","","",89,[[["span"]],["self"]]],[11,"clone","","",90,[[["self"]],["addeq"]]],[11,"new","","",90,[[["span"]],["self"]]],[11,"default","","",90,[[],["self"]]],[11,"from","","",90,[[["span"]],["self"]]],[11,"clone","","",91,[[["self"]],["and"]]],[11,"new","","",91,[[["span"]],["self"]]],[11,"default","","",91,[[],["self"]]],[11,"from","","",91,[[["span"]],["self"]]],[11,"clone","","",92,[[["self"]],["andand"]]],[11,"new","","",92,[[["span"]],["self"]]],[11,"default","","",92,[[],["self"]]],[11,"from","","",92,[[["span"]],["self"]]],[11,"clone","","",93,[[["self"]],["andeq"]]],[11,"new","","",93,[[["span"]],["self"]]],[11,"default","","",93,[[],["self"]]],[11,"from","","",93,[[["span"]],["self"]]],[11,"clone","","",94,[[["self"]],["at"]]],[11,"new","","",94,[[["span"]],["self"]]],[11,"default","","",94,[[],["self"]]],[11,"from","","",94,[[["span"]],["self"]]],[11,"clone","","",95,[[["self"]],["bang"]]],[11,"new","","",95,[[["span"]],["self"]]],[11,"default","","",95,[[],["self"]]],[11,"from","","",95,[[["span"]],["self"]]],[11,"clone","","",96,[[["self"]],["caret"]]],[11,"new","","",96,[[["span"]],["self"]]],[11,"default","","",96,[[],["self"]]],[11,"from","","",96,[[["span"]],["self"]]],[11,"clone","","",97,[[["self"]],["careteq"]]],[11,"new","","",97,[[["span"]],["self"]]],[11,"default","","",97,[[],["self"]]],[11,"from","","",97,[[["span"]],["self"]]],[11,"clone","","",98,[[["self"]],["colon"]]],[11,"new","","",98,[[["span"]],["self"]]],[11,"default","","",98,[[],["self"]]],[11,"from","","",98,[[["span"]],["self"]]],[11,"clone","","",99,[[["self"]],["colon2"]]],[11,"new","","",99,[[["span"]],["self"]]],[11,"default","","",99,[[],["self"]]],[11,"from","","",99,[[["span"]],["self"]]],[11,"clone","","",100,[[["self"]],["comma"]]],[11,"new","","",100,[[["span"]],["self"]]],[11,"default","","",100,[[],["self"]]],[11,"from","","",100,[[["span"]],["self"]]],[11,"clone","","",101,[[["self"]],["div"]]],[11,"new","","",101,[[["span"]],["self"]]],[11,"default","","",101,[[],["self"]]],[11,"from","","",101,[[["span"]],["self"]]],[11,"clone","","",102,[[["self"]],["diveq"]]],[11,"new","","",102,[[["span"]],["self"]]],[11,"default","","",102,[[],["self"]]],[11,"from","","",102,[[["span"]],["self"]]],[11,"clone","","",103,[[["self"]],["dollar"]]],[11,"new","","",103,[[["span"]],["self"]]],[11,"default","","",103,[[],["self"]]],[11,"from","","",103,[[["span"]],["self"]]],[11,"clone","","",104,[[["self"]],["dot"]]],[11,"new","","",104,[[["span"]],["self"]]],[11,"default","","",104,[[],["self"]]],[11,"from","","",104,[[["span"]],["self"]]],[11,"clone","","",105,[[["self"]],["dot2"]]],[11,"new","","",105,[[["span"]],["self"]]],[11,"default","","",105,[[],["self"]]],[11,"from","","",105,[[["span"]],["self"]]],[11,"clone","","",106,[[["self"]],["dot3"]]],[11,"new","","",106,[[["span"]],["self"]]],[11,"default","","",106,[[],["self"]]],[11,"from","","",106,[[["span"]],["self"]]],[11,"clone","","",107,[[["self"]],["dotdoteq"]]],[11,"new","","",107,[[["span"]],["self"]]],[11,"default","","",107,[[],["self"]]],[11,"from","","",107,[[["span"]],["self"]]],[11,"clone","","",108,[[["self"]],["eq"]]],[11,"new","","",108,[[["span"]],["self"]]],[11,"default","","",108,[[],["self"]]],[11,"from","","",108,[[["span"]],["self"]]],[11,"clone","","",109,[[["self"]],["eqeq"]]],[11,"new","","",109,[[["span"]],["self"]]],[11,"default","","",109,[[],["self"]]],[11,"from","","",109,[[["span"]],["self"]]],[11,"clone","","",110,[[["self"]],["ge"]]],[11,"new","","",110,[[["span"]],["self"]]],[11,"default","","",110,[[],["self"]]],[11,"from","","",110,[[["span"]],["self"]]],[11,"clone","","",111,[[["self"]],["gt"]]],[11,"new","","",111,[[["span"]],["self"]]],[11,"default","","",111,[[],["self"]]],[11,"from","","",111,[[["span"]],["self"]]],[11,"clone","","",112,[[["self"]],["le"]]],[11,"new","","",112,[[["span"]],["self"]]],[11,"default","","",112,[[],["self"]]],[11,"from","","",112,[[["span"]],["self"]]],[11,"clone","","",113,[[["self"]],["lt"]]],[11,"new","","",113,[[["span"]],["self"]]],[11,"default","","",113,[[],["self"]]],[11,"from","","",113,[[["span"]],["self"]]],[11,"clone","","",114,[[["self"]],["muleq"]]],[11,"new","","",114,[[["span"]],["self"]]],[11,"default","","",114,[[],["self"]]],[11,"from","","",114,[[["span"]],["self"]]],[11,"clone","","",115,[[["self"]],["ne"]]],[11,"new","","",115,[[["span"]],["self"]]],[11,"default","","",115,[[],["self"]]],[11,"from","","",115,[[["span"]],["self"]]],[11,"clone","","",116,[[["self"]],["or"]]],[11,"new","","",116,[[["span"]],["self"]]],[11,"default","","",116,[[],["self"]]],[11,"from","","",116,[[["span"]],["self"]]],[11,"clone","","",117,[[["self"]],["oreq"]]],[11,"new","","",117,[[["span"]],["self"]]],[11,"default","","",117,[[],["self"]]],[11,"from","","",117,[[["span"]],["self"]]],[11,"clone","","",118,[[["self"]],["oror"]]],[11,"new","","",118,[[["span"]],["self"]]],[11,"default","","",118,[[],["self"]]],[11,"from","","",118,[[["span"]],["self"]]],[11,"clone","","",119,[[["self"]],["pound"]]],[11,"new","","",119,[[["span"]],["self"]]],[11,"default","","",119,[[],["self"]]],[11,"from","","",119,[[["span"]],["self"]]],[11,"clone","","",120,[[["self"]],["question"]]],[11,"new","","",120,[[["span"]],["self"]]],[11,"default","","",120,[[],["self"]]],[11,"from","","",120,[[["span"]],["self"]]],[11,"clone","","",121,[[["self"]],["rarrow"]]],[11,"new","","",121,[[["span"]],["self"]]],[11,"default","","",121,[[],["self"]]],[11,"from","","",121,[[["span"]],["self"]]],[11,"clone","","",122,[[["self"]],["larrow"]]],[11,"new","","",122,[[["span"]],["self"]]],[11,"default","","",122,[[],["self"]]],[11,"from","","",122,[[["span"]],["self"]]],[11,"clone","","",123,[[["self"]],["rem"]]],[11,"new","","",123,[[["span"]],["self"]]],[11,"default","","",123,[[],["self"]]],[11,"from","","",123,[[["span"]],["self"]]],[11,"clone","","",124,[[["self"]],["remeq"]]],[11,"new","","",124,[[["span"]],["self"]]],[11,"default","","",124,[[],["self"]]],[11,"from","","",124,[[["span"]],["self"]]],[11,"clone","","",125,[[["self"]],["fatarrow"]]],[11,"new","","",125,[[["span"]],["self"]]],[11,"default","","",125,[[],["self"]]],[11,"from","","",125,[[["span"]],["self"]]],[11,"clone","","",126,[[["self"]],["semi"]]],[11,"new","","",126,[[["span"]],["self"]]],[11,"default","","",126,[[],["self"]]],[11,"from","","",126,[[["span"]],["self"]]],[11,"clone","","",127,[[["self"]],["shl"]]],[11,"new","","",127,[[["span"]],["self"]]],[11,"default","","",127,[[],["self"]]],[11,"from","","",127,[[["span"]],["self"]]],[11,"clone","","",128,[[["self"]],["shleq"]]],[11,"new","","",128,[[["span"]],["self"]]],[11,"default","","",128,[[],["self"]]],[11,"from","","",128,[[["span"]],["self"]]],[11,"clone","","",129,[[["self"]],["shr"]]],[11,"new","","",129,[[["span"]],["self"]]],[11,"default","","",129,[[],["self"]]],[11,"from","","",129,[[["span"]],["self"]]],[11,"clone","","",130,[[["self"]],["shreq"]]],[11,"new","","",130,[[["span"]],["self"]]],[11,"default","","",130,[[],["self"]]],[11,"from","","",130,[[["span"]],["self"]]],[11,"clone","","",131,[[["self"]],["star"]]],[11,"new","","",131,[[["span"]],["self"]]],[11,"default","","",131,[[],["self"]]],[11,"from","","",131,[[["span"]],["self"]]],[11,"clone","","",132,[[["self"]],["sub"]]],[11,"new","","",132,[[["span"]],["self"]]],[11,"default","","",132,[[],["self"]]],[11,"from","","",132,[[["span"]],["self"]]],[11,"clone","","",133,[[["self"]],["subeq"]]],[11,"new","","",133,[[["span"]],["self"]]],[11,"default","","",133,[[],["self"]]],[11,"from","","",133,[[["span"]],["self"]]],[11,"to_tokens","","",89,[[["self"],["tokenstream"]]]],[11,"parse","","",89,[[["cursor"]],["presult",["add"]]]],[11,"description","","",89,[[],["option",["str"]]]],[11,"to_tokens","","",90,[[["self"],["tokenstream"]]]],[11,"parse","","",90,[[["cursor"]],["presult",["addeq"]]]],[11,"description","","",90,[[],["option",["str"]]]],[11,"to_tokens","","",91,[[["self"],["tokenstream"]]]],[11,"parse","","",91,[[["cursor"]],["presult",["and"]]]],[11,"description","","",91,[[],["option",["str"]]]],[11,"to_tokens","","",92,[[["self"],["tokenstream"]]]],[11,"parse","","",92,[[["cursor"]],["presult",["andand"]]]],[11,"description","","",92,[[],["option",["str"]]]],[11,"to_tokens","","",93,[[["self"],["tokenstream"]]]],[11,"parse","","",93,[[["cursor"]],["presult",["andeq"]]]],[11,"description","","",93,[[],["option",["str"]]]],[11,"to_tokens","","",94,[[["self"],["tokenstream"]]]],[11,"parse","","",94,[[["cursor"]],["presult",["at"]]]],[11,"description","","",94,[[],["option",["str"]]]],[11,"to_tokens","","",95,[[["self"],["tokenstream"]]]],[11,"parse","","",95,[[["cursor"]],["presult",["bang"]]]],[11,"description","","",95,[[],["option",["str"]]]],[11,"to_tokens","","",96,[[["self"],["tokenstream"]]]],[11,"parse","","",96,[[["cursor"]],["presult",["caret"]]]],[11,"description","","",96,[[],["option",["str"]]]],[11,"to_tokens","","",97,[[["self"],["tokenstream"]]]],[11,"parse","","",97,[[["cursor"]],["presult",["careteq"]]]],[11,"description","","",97,[[],["option",["str"]]]],[11,"to_tokens","","",98,[[["self"],["tokenstream"]]]],[11,"parse","","",98,[[["cursor"]],["presult",["colon"]]]],[11,"description","","",98,[[],["option",["str"]]]],[11,"to_tokens","","",99,[[["self"],["tokenstream"]]]],[11,"parse","","",99,[[["cursor"]],["presult",["colon2"]]]],[11,"description","","",99,[[],["option",["str"]]]],[11,"to_tokens","","",100,[[["self"],["tokenstream"]]]],[11,"parse","","",100,[[["cursor"]],["presult",["comma"]]]],[11,"description","","",100,[[],["option",["str"]]]],[11,"to_tokens","","",101,[[["self"],["tokenstream"]]]],[11,"parse","","",101,[[["cursor"]],["presult",["div"]]]],[11,"description","","",101,[[],["option",["str"]]]],[11,"to_tokens","","",102,[[["self"],["tokenstream"]]]],[11,"parse","","",102,[[["cursor"]],["presult",["diveq"]]]],[11,"description","","",102,[[],["option",["str"]]]],[11,"to_tokens","","",103,[[["self"],["tokenstream"]]]],[11,"parse","","",103,[[["cursor"]],["presult",["dollar"]]]],[11,"description","","",103,[[],["option",["str"]]]],[11,"to_tokens","","",104,[[["self"],["tokenstream"]]]],[11,"parse","","",104,[[["cursor"]],["presult",["dot"]]]],[11,"description","","",104,[[],["option",["str"]]]],[11,"to_tokens","","",105,[[["self"],["tokenstream"]]]],[11,"parse","","",105,[[["cursor"]],["presult",["dot2"]]]],[11,"description","","",105,[[],["option",["str"]]]],[11,"to_tokens","","",106,[[["self"],["tokenstream"]]]],[11,"parse","","",106,[[["cursor"]],["presult",["dot3"]]]],[11,"description","","",106,[[],["option",["str"]]]],[11,"to_tokens","","",107,[[["self"],["tokenstream"]]]],[11,"parse","","",107,[[["cursor"]],["presult",["dotdoteq"]]]],[11,"description","","",107,[[],["option",["str"]]]],[11,"to_tokens","","",108,[[["self"],["tokenstream"]]]],[11,"parse","","",108,[[["cursor"]],["presult",["eq"]]]],[11,"description","","",108,[[],["option",["str"]]]],[11,"to_tokens","","",109,[[["self"],["tokenstream"]]]],[11,"parse","","",109,[[["cursor"]],["presult",["eqeq"]]]],[11,"description","","",109,[[],["option",["str"]]]],[11,"to_tokens","","",110,[[["self"],["tokenstream"]]]],[11,"parse","","",110,[[["cursor"]],["presult",["ge"]]]],[11,"description","","",110,[[],["option",["str"]]]],[11,"to_tokens","","",111,[[["self"],["tokenstream"]]]],[11,"parse","","",111,[[["cursor"]],["presult",["gt"]]]],[11,"description","","",111,[[],["option",["str"]]]],[11,"to_tokens","","",112,[[["self"],["tokenstream"]]]],[11,"parse","","",112,[[["cursor"]],["presult",["le"]]]],[11,"description","","",112,[[],["option",["str"]]]],[11,"to_tokens","","",113,[[["self"],["tokenstream"]]]],[11,"parse","","",113,[[["cursor"]],["presult",["lt"]]]],[11,"description","","",113,[[],["option",["str"]]]],[11,"to_tokens","","",114,[[["self"],["tokenstream"]]]],[11,"parse","","",114,[[["cursor"]],["presult",["muleq"]]]],[11,"description","","",114,[[],["option",["str"]]]],[11,"to_tokens","","",115,[[["self"],["tokenstream"]]]],[11,"parse","","",115,[[["cursor"]],["presult",["ne"]]]],[11,"description","","",115,[[],["option",["str"]]]],[11,"to_tokens","","",116,[[["self"],["tokenstream"]]]],[11,"parse","","",116,[[["cursor"]],["presult",["or"]]]],[11,"description","","",116,[[],["option",["str"]]]],[11,"to_tokens","","",117,[[["self"],["tokenstream"]]]],[11,"parse","","",117,[[["cursor"]],["presult",["oreq"]]]],[11,"description","","",117,[[],["option",["str"]]]],[11,"to_tokens","","",118,[[["self"],["tokenstream"]]]],[11,"parse","","",118,[[["cursor"]],["presult",["oror"]]]],[11,"description","","",118,[[],["option",["str"]]]],[11,"to_tokens","","",119,[[["self"],["tokenstream"]]]],[11,"parse","","",119,[[["cursor"]],["presult",["pound"]]]],[11,"description","","",119,[[],["option",["str"]]]],[11,"to_tokens","","",120,[[["self"],["tokenstream"]]]],[11,"parse","","",120,[[["cursor"]],["presult",["question"]]]],[11,"description","","",120,[[],["option",["str"]]]],[11,"to_tokens","","",121,[[["self"],["tokenstream"]]]],[11,"parse","","",121,[[["cursor"]],["presult",["rarrow"]]]],[11,"description","","",121,[[],["option",["str"]]]],[11,"to_tokens","","",122,[[["self"],["tokenstream"]]]],[11,"parse","","",122,[[["cursor"]],["presult",["larrow"]]]],[11,"description","","",122,[[],["option",["str"]]]],[11,"to_tokens","","",123,[[["self"],["tokenstream"]]]],[11,"parse","","",123,[[["cursor"]],["presult",["rem"]]]],[11,"description","","",123,[[],["option",["str"]]]],[11,"to_tokens","","",124,[[["self"],["tokenstream"]]]],[11,"parse","","",124,[[["cursor"]],["presult",["remeq"]]]],[11,"description","","",124,[[],["option",["str"]]]],[11,"to_tokens","","",125,[[["self"],["tokenstream"]]]],[11,"parse","","",125,[[["cursor"]],["presult",["fatarrow"]]]],[11,"description","","",125,[[],["option",["str"]]]],[11,"to_tokens","","",126,[[["self"],["tokenstream"]]]],[11,"parse","","",126,[[["cursor"]],["presult",["semi"]]]],[11,"description","","",126,[[],["option",["str"]]]],[11,"to_tokens","","",127,[[["self"],["tokenstream"]]]],[11,"parse","","",127,[[["cursor"]],["presult",["shl"]]]],[11,"description","","",127,[[],["option",["str"]]]],[11,"to_tokens","","",128,[[["self"],["tokenstream"]]]],[11,"parse","","",128,[[["cursor"]],["presult",["shleq"]]]],[11,"description","","",128,[[],["option",["str"]]]],[11,"to_tokens","","",129,[[["self"],["tokenstream"]]]],[11,"parse","","",129,[[["cursor"]],["presult",["shr"]]]],[11,"description","","",129,[[],["option",["str"]]]],[11,"to_tokens","","",130,[[["self"],["tokenstream"]]]],[11,"parse","","",130,[[["cursor"]],["presult",["shreq"]]]],[11,"description","","",130,[[],["option",["str"]]]],[11,"to_tokens","","",131,[[["self"],["tokenstream"]]]],[11,"parse","","",131,[[["cursor"]],["presult",["star"]]]],[11,"description","","",131,[[],["option",["str"]]]],[11,"to_tokens","","",132,[[["self"],["tokenstream"]]]],[11,"parse","","",132,[[["cursor"]],["presult",["sub"]]]],[11,"description","","",132,[[],["option",["str"]]]],[11,"to_tokens","","",133,[[["self"],["tokenstream"]]]],[11,"parse","","",133,[[["cursor"]],["presult",["subeq"]]]],[11,"description","","",133,[[],["option",["str"]]]],[11,"clone","","",134,[[["self"]],["brace"]]],[11,"default","","",134,[[],["self"]]],[11,"surround","","",134,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",134,[[["cursor"],["f"]],["presult"]]],[11,"from","","",134,[[["span"]],["self"]]],[11,"clone","","",135,[[["self"]],["bracket"]]],[11,"default","","",135,[[],["self"]]],[11,"surround","","",135,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",135,[[["cursor"],["f"]],["presult"]]],[11,"from","","",135,[[["span"]],["self"]]],[11,"clone","","",136,[[["self"]],["paren"]]],[11,"default","","",136,[[],["self"]]],[11,"surround","","",136,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",136,[[["cursor"],["f"]],["presult"]]],[11,"from","","",136,[[["span"]],["self"]]],[11,"clone","","",137,[[["self"]],["group"]]],[11,"default","","",137,[[],["self"]]],[11,"surround","","",137,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",137,[[["cursor"],["f"]],["presult"]]],[11,"from","","",137,[[["span"]],["self"]]],[11,"clone","","",138,[[["self"]],["as"]]],[11,"default","","",138,[[],["self"]]],[11,"to_tokens","","",138,[[["self"],["tokenstream"]]]],[11,"parse","","",138,[[["cursor"]],["presult",["as"]]]],[11,"description","","",138,[[],["option",["str"]]]],[11,"from","","",138,[[["span"]],["self"]]],[11,"clone","","",139,[[["self"]],["auto"]]],[11,"default","","",139,[[],["self"]]],[11,"to_tokens","","",139,[[["self"],["tokenstream"]]]],[11,"parse","","",139,[[["cursor"]],["presult",["auto"]]]],[11,"description","","",139,[[],["option",["str"]]]],[11,"from","","",139,[[["span"]],["self"]]],[11,"clone","","",140,[[["self"]],["box"]]],[11,"default","","",140,[[],["self"]]],[11,"to_tokens","","",140,[[["self"],["tokenstream"]]]],[11,"parse","","",140,[[["cursor"]],["presult",["box"]]]],[11,"description","","",140,[[],["option",["str"]]]],[11,"from","","",140,[[["span"]],["self"]]],[11,"clone","","",141,[[["self"]],["break"]]],[11,"default","","",141,[[],["self"]]],[11,"to_tokens","","",141,[[["self"],["tokenstream"]]]],[11,"parse","","",141,[[["cursor"]],["presult",["break"]]]],[11,"description","","",141,[[],["option",["str"]]]],[11,"from","","",141,[[["span"]],["self"]]],[11,"clone","","",142,[[["self"]],["capself"]]],[11,"default","","",142,[[],["self"]]],[11,"to_tokens","","",142,[[["self"],["tokenstream"]]]],[11,"parse","","",142,[[["cursor"]],["presult",["capself"]]]],[11,"description","","",142,[[],["option",["str"]]]],[11,"from","","",142,[[["span"]],["self"]]],[11,"clone","","",143,[[["self"]],["catch"]]],[11,"default","","",143,[[],["self"]]],[11,"to_tokens","","",143,[[["self"],["tokenstream"]]]],[11,"parse","","",143,[[["cursor"]],["presult",["catch"]]]],[11,"description","","",143,[[],["option",["str"]]]],[11,"from","","",143,[[["span"]],["self"]]],[11,"clone","","",144,[[["self"]],["const"]]],[11,"default","","",144,[[],["self"]]],[11,"to_tokens","","",144,[[["self"],["tokenstream"]]]],[11,"parse","","",144,[[["cursor"]],["presult",["const"]]]],[11,"description","","",144,[[],["option",["str"]]]],[11,"from","","",144,[[["span"]],["self"]]],[11,"clone","","",145,[[["self"]],["continue"]]],[11,"default","","",145,[[],["self"]]],[11,"to_tokens","","",145,[[["self"],["tokenstream"]]]],[11,"parse","","",145,[[["cursor"]],["presult",["continue"]]]],[11,"description","","",145,[[],["option",["str"]]]],[11,"from","","",145,[[["span"]],["self"]]],[11,"clone","","",146,[[["self"]],["crate"]]],[11,"default","","",146,[[],["self"]]],[11,"to_tokens","","",146,[[["self"],["tokenstream"]]]],[11,"parse","","",146,[[["cursor"]],["presult",["crate"]]]],[11,"description","","",146,[[],["option",["str"]]]],[11,"from","","",146,[[["span"]],["self"]]],[11,"clone","","",147,[[["self"]],["default"]]],[11,"default","","",147,[[],["self"]]],[11,"to_tokens","","",147,[[["self"],["tokenstream"]]]],[11,"parse","","",147,[[["cursor"]],["presult",["default"]]]],[11,"description","","",147,[[],["option",["str"]]]],[11,"from","","",147,[[["span"]],["self"]]],[11,"clone","","",148,[[["self"]],["do"]]],[11,"default","","",148,[[],["self"]]],[11,"to_tokens","","",148,[[["self"],["tokenstream"]]]],[11,"parse","","",148,[[["cursor"]],["presult",["do"]]]],[11,"description","","",148,[[],["option",["str"]]]],[11,"from","","",148,[[["span"]],["self"]]],[11,"clone","","",149,[[["self"]],["dyn"]]],[11,"default","","",149,[[],["self"]]],[11,"to_tokens","","",149,[[["self"],["tokenstream"]]]],[11,"parse","","",149,[[["cursor"]],["presult",["dyn"]]]],[11,"description","","",149,[[],["option",["str"]]]],[11,"from","","",149,[[["span"]],["self"]]],[11,"clone","","",150,[[["self"]],["else"]]],[11,"default","","",150,[[],["self"]]],[11,"to_tokens","","",150,[[["self"],["tokenstream"]]]],[11,"parse","","",150,[[["cursor"]],["presult",["else"]]]],[11,"description","","",150,[[],["option",["str"]]]],[11,"from","","",150,[[["span"]],["self"]]],[11,"clone","","",151,[[["self"]],["enum"]]],[11,"default","","",151,[[],["self"]]],[11,"to_tokens","","",151,[[["self"],["tokenstream"]]]],[11,"parse","","",151,[[["cursor"]],["presult",["enum"]]]],[11,"description","","",151,[[],["option",["str"]]]],[11,"from","","",151,[[["span"]],["self"]]],[11,"clone","","",152,[[["self"]],["extern"]]],[11,"default","","",152,[[],["self"]]],[11,"to_tokens","","",152,[[["self"],["tokenstream"]]]],[11,"parse","","",152,[[["cursor"]],["presult",["extern"]]]],[11,"description","","",152,[[],["option",["str"]]]],[11,"from","","",152,[[["span"]],["self"]]],[11,"clone","","",153,[[["self"]],["fn"]]],[11,"default","","",153,[[],["self"]]],[11,"to_tokens","","",153,[[["self"],["tokenstream"]]]],[11,"parse","","",153,[[["cursor"]],["presult",["fn"]]]],[11,"description","","",153,[[],["option",["str"]]]],[11,"from","","",153,[[["span"]],["self"]]],[11,"clone","","",154,[[["self"]],["for"]]],[11,"default","","",154,[[],["self"]]],[11,"to_tokens","","",154,[[["self"],["tokenstream"]]]],[11,"parse","","",154,[[["cursor"]],["presult",["for"]]]],[11,"description","","",154,[[],["option",["str"]]]],[11,"from","","",154,[[["span"]],["self"]]],[11,"clone","","",155,[[["self"]],["if"]]],[11,"default","","",155,[[],["self"]]],[11,"to_tokens","","",155,[[["self"],["tokenstream"]]]],[11,"parse","","",155,[[["cursor"]],["presult",["if"]]]],[11,"description","","",155,[[],["option",["str"]]]],[11,"from","","",155,[[["span"]],["self"]]],[11,"clone","","",156,[[["self"]],["impl"]]],[11,"default","","",156,[[],["self"]]],[11,"to_tokens","","",156,[[["self"],["tokenstream"]]]],[11,"parse","","",156,[[["cursor"]],["presult",["impl"]]]],[11,"description","","",156,[[],["option",["str"]]]],[11,"from","","",156,[[["span"]],["self"]]],[11,"clone","","",157,[[["self"]],["in"]]],[11,"default","","",157,[[],["self"]]],[11,"to_tokens","","",157,[[["self"],["tokenstream"]]]],[11,"parse","","",157,[[["cursor"]],["presult",["in"]]]],[11,"description","","",157,[[],["option",["str"]]]],[11,"from","","",157,[[["span"]],["self"]]],[11,"clone","","",158,[[["self"]],["let"]]],[11,"default","","",158,[[],["self"]]],[11,"to_tokens","","",158,[[["self"],["tokenstream"]]]],[11,"parse","","",158,[[["cursor"]],["presult",["let"]]]],[11,"description","","",158,[[],["option",["str"]]]],[11,"from","","",158,[[["span"]],["self"]]],[11,"clone","","",159,[[["self"]],["loop"]]],[11,"default","","",159,[[],["self"]]],[11,"to_tokens","","",159,[[["self"],["tokenstream"]]]],[11,"parse","","",159,[[["cursor"]],["presult",["loop"]]]],[11,"description","","",159,[[],["option",["str"]]]],[11,"from","","",159,[[["span"]],["self"]]],[11,"clone","","",160,[[["self"]],["macro"]]],[11,"default","","",160,[[],["self"]]],[11,"to_tokens","","",160,[[["self"],["tokenstream"]]]],[11,"parse","","",160,[[["cursor"]],["presult",["macro"]]]],[11,"description","","",160,[[],["option",["str"]]]],[11,"from","","",160,[[["span"]],["self"]]],[11,"clone","","",161,[[["self"]],["match"]]],[11,"default","","",161,[[],["self"]]],[11,"to_tokens","","",161,[[["self"],["tokenstream"]]]],[11,"parse","","",161,[[["cursor"]],["presult",["match"]]]],[11,"description","","",161,[[],["option",["str"]]]],[11,"from","","",161,[[["span"]],["self"]]],[11,"clone","","",162,[[["self"]],["mod"]]],[11,"default","","",162,[[],["self"]]],[11,"to_tokens","","",162,[[["self"],["tokenstream"]]]],[11,"parse","","",162,[[["cursor"]],["presult",["mod"]]]],[11,"description","","",162,[[],["option",["str"]]]],[11,"from","","",162,[[["span"]],["self"]]],[11,"clone","","",163,[[["self"]],["move"]]],[11,"default","","",163,[[],["self"]]],[11,"to_tokens","","",163,[[["self"],["tokenstream"]]]],[11,"parse","","",163,[[["cursor"]],["presult",["move"]]]],[11,"description","","",163,[[],["option",["str"]]]],[11,"from","","",163,[[["span"]],["self"]]],[11,"clone","","",164,[[["self"]],["mut"]]],[11,"default","","",164,[[],["self"]]],[11,"to_tokens","","",164,[[["self"],["tokenstream"]]]],[11,"parse","","",164,[[["cursor"]],["presult",["mut"]]]],[11,"description","","",164,[[],["option",["str"]]]],[11,"from","","",164,[[["span"]],["self"]]],[11,"clone","","",165,[[["self"]],["pub"]]],[11,"default","","",165,[[],["self"]]],[11,"to_tokens","","",165,[[["self"],["tokenstream"]]]],[11,"parse","","",165,[[["cursor"]],["presult",["pub"]]]],[11,"description","","",165,[[],["option",["str"]]]],[11,"from","","",165,[[["span"]],["self"]]],[11,"clone","","",166,[[["self"]],["ref"]]],[11,"default","","",166,[[],["self"]]],[11,"to_tokens","","",166,[[["self"],["tokenstream"]]]],[11,"parse","","",166,[[["cursor"]],["presult",["ref"]]]],[11,"description","","",166,[[],["option",["str"]]]],[11,"from","","",166,[[["span"]],["self"]]],[11,"clone","","",167,[[["self"]],["return"]]],[11,"default","","",167,[[],["self"]]],[11,"to_tokens","","",167,[[["self"],["tokenstream"]]]],[11,"parse","","",167,[[["cursor"]],["presult",["return"]]]],[11,"description","","",167,[[],["option",["str"]]]],[11,"from","","",167,[[["span"]],["self"]]],[11,"clone","","",168,[[["self"]],["self_"]]],[11,"default","","",168,[[],["self"]]],[11,"to_tokens","","",168,[[["self"],["tokenstream"]]]],[11,"parse","","",168,[[["cursor"]],["presult",["self_"]]]],[11,"description","","",168,[[],["option",["str"]]]],[11,"from","","",168,[[["span"]],["self"]]],[11,"clone","","",169,[[["self"]],["static"]]],[11,"default","","",169,[[],["self"]]],[11,"to_tokens","","",169,[[["self"],["tokenstream"]]]],[11,"parse","","",169,[[["cursor"]],["presult",["static"]]]],[11,"description","","",169,[[],["option",["str"]]]],[11,"from","","",169,[[["span"]],["self"]]],[11,"clone","","",170,[[["self"]],["struct"]]],[11,"default","","",170,[[],["self"]]],[11,"to_tokens","","",170,[[["self"],["tokenstream"]]]],[11,"parse","","",170,[[["cursor"]],["presult",["struct"]]]],[11,"description","","",170,[[],["option",["str"]]]],[11,"from","","",170,[[["span"]],["self"]]],[11,"clone","","",171,[[["self"]],["super"]]],[11,"default","","",171,[[],["self"]]],[11,"to_tokens","","",171,[[["self"],["tokenstream"]]]],[11,"parse","","",171,[[["cursor"]],["presult",["super"]]]],[11,"description","","",171,[[],["option",["str"]]]],[11,"from","","",171,[[["span"]],["self"]]],[11,"clone","","",172,[[["self"]],["trait"]]],[11,"default","","",172,[[],["self"]]],[11,"to_tokens","","",172,[[["self"],["tokenstream"]]]],[11,"parse","","",172,[[["cursor"]],["presult",["trait"]]]],[11,"description","","",172,[[],["option",["str"]]]],[11,"from","","",172,[[["span"]],["self"]]],[11,"clone","","",173,[[["self"]],["type"]]],[11,"default","","",173,[[],["self"]]],[11,"to_tokens","","",173,[[["self"],["tokenstream"]]]],[11,"parse","","",173,[[["cursor"]],["presult",["type"]]]],[11,"description","","",173,[[],["option",["str"]]]],[11,"from","","",173,[[["span"]],["self"]]],[11,"clone","","",174,[[["self"]],["union"]]],[11,"default","","",174,[[],["self"]]],[11,"to_tokens","","",174,[[["self"],["tokenstream"]]]],[11,"parse","","",174,[[["cursor"]],["presult",["union"]]]],[11,"description","","",174,[[],["option",["str"]]]],[11,"from","","",174,[[["span"]],["self"]]],[11,"clone","","",175,[[["self"]],["unsafe"]]],[11,"default","","",175,[[],["self"]]],[11,"to_tokens","","",175,[[["self"],["tokenstream"]]]],[11,"parse","","",175,[[["cursor"]],["presult",["unsafe"]]]],[11,"description","","",175,[[],["option",["str"]]]],[11,"from","","",175,[[["span"]],["self"]]],[11,"clone","","",176,[[["self"]],["use"]]],[11,"default","","",176,[[],["self"]]],[11,"to_tokens","","",176,[[["self"],["tokenstream"]]]],[11,"parse","","",176,[[["cursor"]],["presult",["use"]]]],[11,"description","","",176,[[],["option",["str"]]]],[11,"from","","",176,[[["span"]],["self"]]],[11,"clone","","",177,[[["self"]],["where"]]],[11,"default","","",177,[[],["self"]]],[11,"to_tokens","","",177,[[["self"],["tokenstream"]]]],[11,"parse","","",177,[[["cursor"]],["presult",["where"]]]],[11,"description","","",177,[[],["option",["str"]]]],[11,"from","","",177,[[["span"]],["self"]]],[11,"clone","","",178,[[["self"]],["while"]]],[11,"default","","",178,[[],["self"]]],[11,"to_tokens","","",178,[[["self"],["tokenstream"]]]],[11,"parse","","",178,[[["cursor"]],["presult",["while"]]]],[11,"description","","",178,[[],["option",["str"]]]],[11,"from","","",178,[[["span"]],["self"]]],[11,"clone","","",179,[[["self"]],["yield"]]],[11,"default","","",179,[[],["self"]]],[11,"to_tokens","","",179,[[["self"],["tokenstream"]]]],[11,"parse","","",179,[[["cursor"]],["presult",["yield"]]]],[11,"description","","",179,[[],["option",["str"]]]],[11,"from","","",179,[[["span"]],["self"]]],[11,"from","syn","",180,[[["self_"]],["ident"]]],[11,"from","","",180,[[["capself"]],["ident"]]],[11,"from","","",180,[[["super"]],["ident"]]],[11,"from","","",180,[[["crate"]],["ident"]]],[11,"parse_inner","","",0,[[["cursor"]],["presult"]]],[11,"parse_outer","","",0,[[["cursor"]],["presult"]]],[11,"to_tokens","","",0,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",1,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",2,[[["self"],["tokenstream"]]]],[11,"clone","","",0,[[["self"]],["attribute"]]],[11,"interpret_meta","","Parses the tokens after the path as a `Meta` if possible.",0,[[["self"]],["option",["meta"]]]],[11,"clone","","",63,[[["self"]],["attrstyle"]]],[11,"clone","","",64,[[["self"]],["meta"]]],[11,"from","","",64,[[["ident"]],["meta"]]],[11,"clone","","",1,[[["self"]],["metalist"]]],[11,"from","","",64,[[["metalist"]],["meta"]]],[11,"clone","","",2,[[["self"]],["metanamevalue"]]],[11,"from","","",64,[[["metanamevalue"]],["meta"]]],[11,"to_tokens","","",64,[[["self"],["tokenstream"]]]],[11,"name","","Returns the identifier that begins this structured meta item.",64,[[["self"]],["ident"]]],[11,"clone","","",65,[[["self"]],["nestedmeta"]]],[11,"from","","",65,[[["meta"]],["nestedmeta"]]],[11,"from","","",65,[[["lit"]],["nestedmeta"]]],[11,"to_tokens","","",65,[[["self"],["tokenstream"]]]],[11,"parse","","",6,[[["cursor"]],["presult"]]],[11,"description","","",6,[[],["option",["str"]]]],[11,"parse","","",4,[[["cursor"]],["presult"]]],[11,"description","","",4,[[],["option",["str"]]]],[11,"parse","","",5,[[["cursor"]],["presult"]]],[11,"description","","",5,[[],["option",["str"]]]],[11,"parse_named","","",3,[[["cursor"]],["presult"]]],[11,"parse_unnamed","","",3,[[["cursor"]],["presult"]]],[11,"parse","","",67,[[["cursor"]],["presult"]]],[11,"description","","",67,[[],["option",["str"]]]],[11,"to_tokens","","",6,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",4,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",5,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",3,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",8,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",7,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",9,[[["self"],["tokenstream"]]]],[11,"clone","","",6,[[["self"]],["variant"]]],[11,"clone","","",66,[[["self"]],["fields"]]],[11,"clone","","",4,[[["self"]],["fieldsnamed"]]],[11,"from","","",66,[[["fieldsnamed"]],["fields"]]],[11,"clone","","",5,[[["self"]],["fieldsunnamed"]]],[11,"from","","",66,[[["fieldsunnamed"]],["fields"]]],[11,"to_tokens","","",66,[[["self"],["tokenstream"]]]],[11,"iter","","Get an iterator over the [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",66,[[["self"]],["iter",["field"]]]],[11,"clone","","",3,[[["self"]],["field"]]],[11,"clone","","",67,[[["self"]],["visibility"]]],[11,"clone","","",8,[[["self"]],["vispublic"]]],[11,"from","","",67,[[["vispublic"]],["visibility"]]],[11,"clone","","",7,[[["self"]],["viscrate"]]],[11,"from","","",67,[[["viscrate"]],["visibility"]]],[11,"clone","","",9,[[["self"]],["visrestricted"]]],[11,"from","","",67,[[["visrestricted"]],["visibility"]]],[11,"to_tokens","","",67,[[["self"],["tokenstream"]]]],[11,"parse","","",68,[[["cursor"]],["presult"]]],[11,"description","","",68,[[],["option",["str"]]]],[11,"parse","","",15,[[["cursor"]],["presult"]]],[11,"description","","",15,[[],["option",["str"]]]],[11,"parse","","",16,[[["cursor"]],["presult"]]],[11,"description","","",16,[[],["option",["str"]]]],[11,"parse","","",17,[[["cursor"]],["presult"]]],[11,"description","","",17,[[],["option",["str"]]]],[11,"parse","","",69,[[["cursor"]],["presult"]]],[11,"description","","",69,[[],["option",["str"]]]],[11,"parse","","",20,[[["cursor"]],["presult"]]],[11,"description","","",20,[[],["option",["str"]]]],[11,"to_tokens","","",11,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",10,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",18,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",15,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",12,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",13,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",69,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",20,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",14,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",17,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",16,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",19,[[["self"],["tokenstream"]]]],[11,"clone","","",68,[[["self"]],["expr"]]],[11,"clone","","",181,[[["self"]],["exprbox"]]],[11,"from","","",68,[[["exprbox"]],["expr"]]],[11,"clone","","",182,[[["self"]],["exprinplace"]]],[11,"from","","",68,[[["exprinplace"]],["expr"]]],[11,"clone","","",183,[[["self"]],["exprarray"]]],[11,"from","","",68,[[["exprarray"]],["expr"]]],[11,"clone","","",11,[[["self"]],["exprcall"]]],[11,"from","","",68,[[["exprcall"]],["expr"]]],[11,"clone","","",184,[[["self"]],["exprmethodcall"]]],[11,"from","","",68,[[["exprmethodcall"]],["expr"]]],[11,"clone","","",185,[[["self"]],["exprtuple"]]],[11,"from","","",68,[[["exprtuple"]],["expr"]]],[11,"clone","","",10,[[["self"]],["exprbinary"]]],[11,"from","","",68,[[["exprbinary"]],["expr"]]],[11,"clone","","",18,[[["self"]],["exprunary"]]],[11,"from","","",68,[[["exprunary"]],["expr"]]],[11,"clone","","",15,[[["self"]],["exprlit"]]],[11,"from","","",68,[[["exprlit"]],["expr"]]],[11,"clone","","",12,[[["self"]],["exprcast"]]],[11,"from","","",68,[[["exprcast"]],["expr"]]],[11,"clone","","",186,[[["self"]],["exprtype"]]],[11,"from","","",68,[[["exprtype"]],["expr"]]],[11,"clone","","",187,[[["self"]],["exprif"]]],[11,"from","","",68,[[["exprif"]],["expr"]]],[11,"clone","","",188,[[["self"]],["expriflet"]]],[11,"from","","",68,[[["expriflet"]],["expr"]]],[11,"clone","","",189,[[["self"]],["exprwhile"]]],[11,"from","","",68,[[["exprwhile"]],["expr"]]],[11,"clone","","",190,[[["self"]],["exprwhilelet"]]],[11,"from","","",68,[[["exprwhilelet"]],["expr"]]],[11,"clone","","",191,[[["self"]],["exprforloop"]]],[11,"from","","",68,[[["exprforloop"]],["expr"]]],[11,"clone","","",192,[[["self"]],["exprloop"]]],[11,"from","","",68,[[["exprloop"]],["expr"]]],[11,"clone","","",193,[[["self"]],["exprmatch"]]],[11,"from","","",68,[[["exprmatch"]],["expr"]]],[11,"clone","","",194,[[["self"]],["exprclosure"]]],[11,"from","","",68,[[["exprclosure"]],["expr"]]],[11,"clone","","",195,[[["self"]],["exprunsafe"]]],[11,"from","","",68,[[["exprunsafe"]],["expr"]]],[11,"clone","","",196,[[["self"]],["exprblock"]]],[11,"from","","",68,[[["exprblock"]],["expr"]]],[11,"clone","","",197,[[["self"]],["exprassign"]]],[11,"from","","",68,[[["exprassign"]],["expr"]]],[11,"clone","","",198,[[["self"]],["exprassignop"]]],[11,"from","","",68,[[["exprassignop"]],["expr"]]],[11,"clone","","",13,[[["self"]],["exprfield"]]],[11,"from","","",68,[[["exprfield"]],["expr"]]],[11,"clone","","",14,[[["self"]],["exprindex"]]],[11,"from","","",68,[[["exprindex"]],["expr"]]],[11,"clone","","",199,[[["self"]],["exprrange"]]],[11,"from","","",68,[[["exprrange"]],["expr"]]],[11,"clone","","",17,[[["self"]],["exprpath"]]],[11,"from","","",68,[[["exprpath"]],["expr"]]],[11,"clone","","",200,[[["self"]],["exprreference"]]],[11,"from","","",68,[[["exprreference"]],["expr"]]],[11,"clone","","",201,[[["self"]],["exprbreak"]]],[11,"from","","",68,[[["exprbreak"]],["expr"]]],[11,"clone","","",202,[[["self"]],["exprcontinue"]]],[11,"from","","",68,[[["exprcontinue"]],["expr"]]],[11,"clone","","",203,[[["self"]],["exprreturn"]]],[11,"from","","",68,[[["exprreturn"]],["expr"]]],[11,"clone","","",204,[[["self"]],["exprmacro"]]],[11,"from","","",68,[[["exprmacro"]],["expr"]]],[11,"clone","","",205,[[["self"]],["exprstruct"]]],[11,"from","","",68,[[["exprstruct"]],["expr"]]],[11,"clone","","",206,[[["self"]],["exprrepeat"]]],[11,"from","","",68,[[["exprrepeat"]],["expr"]]],[11,"clone","","",16,[[["self"]],["exprparen"]]],[11,"from","","",68,[[["exprparen"]],["expr"]]],[11,"clone","","",207,[[["self"]],["exprgroup"]]],[11,"from","","",68,[[["exprgroup"]],["expr"]]],[11,"clone","","",208,[[["self"]],["exprtry"]]],[11,"from","","",68,[[["exprtry"]],["expr"]]],[11,"clone","","",209,[[["self"]],["exprcatch"]]],[11,"from","","",68,[[["exprcatch"]],["expr"]]],[11,"clone","","",210,[[["self"]],["expryield"]]],[11,"from","","",68,[[["expryield"]],["expr"]]],[11,"clone","","",19,[[["self"]],["exprverbatim"]]],[11,"from","","",68,[[["exprverbatim"]],["expr"]]],[11,"to_tokens","","",68,[[["self"],["tokenstream"]]]],[11,"clone","","",69,[[["self"]],["member"]]],[11,"clone","","",20,[[["self"]],["index"]]],[11,"from","","",20,[[["usize"]],["index"]]],[11,"parse","","",23,[[["cursor"]],["presult"]]],[11,"description","","",23,[[],["option",["str"]]]],[11,"parse","","",70,[[["cursor"]],["presult"]]],[11,"description","","",70,[[],["option",["str"]]]],[11,"parse","","",24,[[["cursor"]],["presult"]]],[11,"description","","",24,[[],["option",["str"]]]],[11,"parse","","",21,[[["cursor"]],["presult"]]],[11,"description","","",21,[[],["option",["str"]]]],[11,"parse","","",29,[[["cursor"]],["presult"]]],[11,"description","","",29,[[],["option",["str"]]]],[11,"parse","","",72,[[["cursor"]],["presult"]]],[11,"description","","",72,[[],["option",["str"]]]],[11,"parse","","",28,[[["cursor"]],["presult"]]],[11,"description","","",28,[[],["option",["str"]]]],[11,"parse","","",71,[[["cursor"]],["presult"]]],[11,"description","","",71,[[],["option",["str"]]]],[11,"parse","","",22,[[["cursor"]],["presult"]]],[11,"description","","",22,[[],["option",["str"]]]],[11,"parse","","",30,[[["cursor"]],["presult"]]],[11,"description","","",30,[[],["option",["str"]]]],[11,"parse","","",73,[[["cursor"]],["presult"]]],[11,"description","","",73,[[],["option",["str"]]]],[11,"to_tokens","","",23,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",211,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",212,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",213,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",21,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",24,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",29,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",28,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",71,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",22,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",30,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",27,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",26,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",25,[[["self"],["tokenstream"]]]],[11,"default","","",23,[[],["generics"]]],[11,"clone","","",23,[[["self"]],["generics"]]],[11,"clone","","",70,[[["self"]],["genericparam"]]],[11,"clone","","",29,[[["self"]],["typeparam"]]],[11,"from","","",70,[[["typeparam"]],["genericparam"]]],[11,"clone","","",24,[[["self"]],["lifetimedef"]]],[11,"from","","",70,[[["lifetimedef"]],["genericparam"]]],[11,"clone","","",22,[[["self"]],["constparam"]]],[11,"from","","",70,[[["constparam"]],["genericparam"]]],[11,"to_tokens","","",70,[[["self"],["tokenstream"]]]],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",23,[[["self"]],["typeparams"]]],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",23,[[["self"]],["typeparamsmut"]]],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",23,[[["self"]],["lifetimes"]]],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",23,[[["self"]],["lifetimesmut"]]],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",23,[[["self"]],["constparams"]]],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",23,[[["self"]],["constparamsmut"]]],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one present already.",23,[[["self"]],["whereclause"]]],[11,"clone","","",211,[[["self"]],["implgenerics"]]],[11,"clone","","",212,[[["self"]],["typegenerics"]]],[11,"clone","","",213,[[["self"]],["turbofish"]]],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",23,N],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",212,[[["self"]],["turbofish"]]],[11,"default","","",21,[[],["boundlifetimes"]]],[11,"clone","","",21,[[["self"]],["boundlifetimes"]]],[11,"new","","",24,[[["lifetime"]],["self"]]],[11,"from","","",29,[[["ident"]],["self"]]],[11,"clone","","",72,[[["self"]],["typeparambound"]]],[11,"from","","",72,[[["traitbound"]],["typeparambound"]]],[11,"from","","",72,[[["lifetime"]],["typeparambound"]]],[11,"to_tokens","","",72,[[["self"],["tokenstream"]]]],[11,"clone","","",28,[[["self"]],["traitbound"]]],[11,"clone","","",71,[[["self"]],["traitboundmodifier"]]],[11,"clone","","",30,[[["self"]],["whereclause"]]],[11,"clone","","",73,[[["self"]],["wherepredicate"]]],[11,"clone","","",27,[[["self"]],["predicatetype"]]],[11,"from","","",73,[[["predicatetype"]],["wherepredicate"]]],[11,"clone","","",26,[[["self"]],["predicatelifetime"]]],[11,"from","","",73,[[["predicatelifetime"]],["wherepredicate"]]],[11,"clone","","",25,[[["self"]],["predicateeq"]]],[11,"from","","",73,[[["predicateeq"]],["wherepredicate"]]],[11,"to_tokens","","",73,[[["self"],["tokenstream"]]]],[11,"parse","","",31,[[["cursor"]],["presult"]]],[11,"description","","",31,[[],["option",["str"]]]],[11,"to_tokens","","",31,[[["self"],["tokenstream"]]]],[11,"clone","","",31,[[["self"]],["lifetime"]]],[11,"new","","",31,[[["str"],["span"]],["self"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"eq","","",31,[[["self"],["lifetime"]],["bool"]]],[11,"partial_cmp","","",31,[[["self"],["lifetime"]],["option",["ordering"]]]],[11,"cmp","","",31,[[["self"],["lifetime"]],["ordering"]]],[11,"hash","","",31,[[["self"],["h"]]]],[11,"parse","","",76,[[["cursor"]],["presult"]]],[11,"description","","",76,[[],["option",["str"]]]],[11,"parse","","",214,[[["cursor"]],["presult"]]],[11,"description","","",214,[[],["option",["str"]]]],[11,"parse","","",215,[[["cursor"]],["presult"]]],[11,"description","","",215,[[],["option",["str"]]]],[11,"parse","","",216,[[["cursor"]],["presult"]]],[11,"description","","",216,[[],["option",["str"]]]],[11,"parse","","",217,[[["cursor"]],["presult"]]],[11,"description","","",217,[[],["option",["str"]]]],[11,"parse","","",218,[[["cursor"]],["presult"]]],[11,"description","","",218,[[],["option",["str"]]]],[11,"parse","","",219,[[["cursor"]],["presult"]]],[11,"description","","",219,[[],["option",["str"]]]],[11,"parse","","",32,[[["cursor"]],["presult"]]],[11,"description","","",32,[[],["option",["str"]]]],[11,"to_tokens","","",214,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",215,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",216,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",217,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",218,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",219,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",32,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",33,[[["self"],["tokenstream"]]]],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",76,[[["literal"]],["self"]]],[11,"clone","","",76,[[["self"]],["lit"]]],[11,"clone","","",214,[[["self"]],["litstr"]]],[11,"from","","",76,[[["litstr"]],["lit"]]],[11,"clone","","",215,[[["self"]],["litbytestr"]]],[11,"from","","",76,[[["litbytestr"]],["lit"]]],[11,"clone","","",216,[[["self"]],["litbyte"]]],[11,"from","","",76,[[["litbyte"]],["lit"]]],[11,"clone","","",217,[[["self"]],["litchar"]]],[11,"from","","",76,[[["litchar"]],["lit"]]],[11,"clone","","",218,[[["self"]],["litint"]]],[11,"from","","",76,[[["litint"]],["lit"]]],[11,"clone","","",219,[[["self"]],["litfloat"]]],[11,"from","","",76,[[["litfloat"]],["lit"]]],[11,"clone","","",32,[[["self"]],["litbool"]]],[11,"from","","",76,[[["litbool"]],["lit"]]],[11,"clone","","",33,[[["self"]],["litverbatim"]]],[11,"from","","",76,[[["litverbatim"]],["lit"]]],[11,"to_tokens","","",76,[[["self"],["tokenstream"]]]],[11,"new","","",214,[[["str"],["span"]],["self"]]],[11,"value","","",214,[[["self"]],["string"]]],[11,"parse","","Parse a syntax tree node from the content of this string literal.",214,[[["self"]],["result",["parseerror"]]]],[11,"span","","",214,[[["self"]],["span"]]],[11,"set_span","","",214,[[["self"],["span"]]]],[11,"new","","",215,N],[11,"value","","",215,[[["self"]],["vec",["u8"]]]],[11,"span","","",215,[[["self"]],["span"]]],[11,"set_span","","",215,[[["self"],["span"]]]],[11,"new","","",216,[[["u8"],["span"]],["self"]]],[11,"value","","",216,[[["self"]],["u8"]]],[11,"span","","",216,[[["self"]],["span"]]],[11,"set_span","","",216,[[["self"],["span"]]]],[11,"new","","",217,[[["char"],["span"]],["self"]]],[11,"value","","",217,[[["self"]],["char"]]],[11,"span","","",217,[[["self"]],["span"]]],[11,"set_span","","",217,[[["self"],["span"]]]],[11,"new","","",218,[[["u64"],["intsuffix"],["span"]],["self"]]],[11,"value","","",218,[[["self"]],["u64"]]],[11,"suffix","","",218,[[["self"]],["intsuffix"]]],[11,"span","","",218,[[["self"]],["span"]]],[11,"set_span","","",218,[[["self"],["span"]]]],[11,"new","","",219,[[["f64"],["floatsuffix"],["span"]],["self"]]],[11,"value","","",219,[[["self"]],["f64"]]],[11,"suffix","","",219,[[["self"]],["floatsuffix"]]],[11,"span","","",219,[[["self"]],["span"]]],[11,"set_span","","",219,[[["self"],["span"]]]],[11,"span","","",33,[[["self"]],["span"]]],[11,"set_span","","",33,[[["self"],["span"]]]],[11,"clone","","",77,[[["self"]],["strstyle"]]],[11,"clone","","",75,[[["self"]],["intsuffix"]]],[11,"clone","","",74,[[["self"]],["floatsuffix"]]],[11,"parse","","",34,[[["cursor"]],["presult"]]],[11,"description","","",34,[[],["option",["str"]]]],[11,"to_tokens","","",34,[[["self"],["tokenstream"]]]],[11,"clone","","",34,[[["self"]],["macro"]]],[11,"clone","","",78,[[["self"]],["macrodelimiter"]]],[11,"parse","","",38,[[["cursor"]],["presult"]]],[11,"description","","",38,[[],["option",["str"]]]],[11,"to_tokens","","",38,[[["self"],["tokenstream"]]]],[11,"clone","","",38,[[["self"]],["deriveinput"]]],[11,"clone","","",79,[[["self"]],["data"]]],[11,"clone","","",36,[[["self"]],["datastruct"]]],[11,"from","","",79,[[["datastruct"]],["data"]]],[11,"clone","","",35,[[["self"]],["dataenum"]]],[11,"from","","",79,[[["dataenum"]],["data"]]],[11,"clone","","",37,[[["self"]],["dataunion"]]],[11,"from","","",79,[[["dataunion"]],["data"]]],[11,"parse_binop","","",80,[[["cursor"]],["presult"]]],[11,"parse","","",81,[[["cursor"]],["presult"]]],[11,"description","","",81,[[],["option",["str"]]]],[11,"to_tokens","","",80,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",81,[[["self"],["tokenstream"]]]],[11,"clone","","",80,[[["self"]],["binop"]]],[11,"clone","","",81,[[["self"]],["unop"]]],[11,"parse","","",84,[[["cursor"]],["presult"]]],[11,"description","","",84,[[],["option",["str"]]]],[11,"without_plus","","",84,[[["cursor"]],["presult"]]],[11,"parse","","",52,[[["cursor"]],["presult"]]],[11,"description","","",52,[[],["option",["str"]]]],[11,"parse","","",41,[[["cursor"]],["presult"]]],[11,"description","","",41,[[],["option",["str"]]]],[11,"parse","","",50,[[["cursor"]],["presult"]]],[11,"description","","",50,[[],["option",["str"]]]],[11,"parse","","",51,[[["cursor"]],["presult"]]],[11,"description","","",51,[[],["option",["str"]]]],[11,"parse","","",42,[[["cursor"]],["presult"]]],[11,"description","","",42,[[],["option",["str"]]]],[11,"parse","","",47,[[["cursor"]],["presult"]]],[11,"description","","",47,[[],["option",["str"]]]],[11,"parse","","",45,[[["cursor"]],["presult"]]],[11,"description","","",45,[[],["option",["str"]]]],[11,"parse","","",54,[[["cursor"]],["presult"]]],[11,"description","","",54,[[],["option",["str"]]]],[11,"parse","","",46,[[["cursor"]],["presult"]]],[11,"description","","",46,[[],["option",["str"]]]],[11,"parse","","",49,[[["cursor"]],["presult"]]],[11,"description","","",49,[[],["option",["str"]]]],[11,"without_plus","","",83,[[["cursor"]],["presult"]]],[11,"parse","","",83,[[["cursor"]],["presult"]]],[11,"description","","",83,[[],["option",["str"]]]],[11,"parse","","",53,[[["cursor"]],["presult"]]],[11,"description","","",53,[[],["option",["str"]]]],[11,"without_plus","","",53,[[["cursor"]],["presult"]]],[11,"parse","","",44,[[["cursor"]],["presult"]]],[11,"description","","",44,[[],["option",["str"]]]],[11,"parse","","",43,[[["cursor"]],["presult"]]],[11,"description","","",43,[[],["option",["str"]]]],[11,"parse","","",48,[[["cursor"]],["presult"]]],[11,"description","","",48,[[],["option",["str"]]]],[11,"parse","","",40,[[["cursor"]],["presult"]]],[11,"description","","",40,[[],["option",["str"]]]],[11,"parse","","",82,[[["cursor"]],["presult"]]],[11,"description","","",82,[[],["option",["str"]]]],[11,"parse","","",39,[[["cursor"]],["presult"]]],[11,"description","","",39,[[],["option",["str"]]]],[11,"to_tokens","","",52,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",41,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",50,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",51,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",42,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",47,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",54,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",49,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",53,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",44,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",43,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",48,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",45,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",46,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",55,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",83,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",40,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",82,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",39,[[["self"],["tokenstream"]]]],[11,"clone","","",84,[[["self"]],["type"]]],[11,"clone","","",52,[[["self"]],["typeslice"]]],[11,"from","","",84,[[["typeslice"]],["type"]]],[11,"clone","","",41,[[["self"]],["typearray"]]],[11,"from","","",84,[[["typearray"]],["type"]]],[11,"clone","","",50,[[["self"]],["typeptr"]]],[11,"from","","",84,[[["typeptr"]],["type"]]],[11,"clone","","",51,[[["self"]],["typereference"]]],[11,"from","","",84,[[["typereference"]],["type"]]],[11,"clone","","",42,[[["self"]],["typebarefn"]]],[11,"from","","",84,[[["typebarefn"]],["type"]]],[11,"clone","","",47,[[["self"]],["typenever"]]],[11,"from","","",84,[[["typenever"]],["type"]]],[11,"clone","","",54,[[["self"]],["typetuple"]]],[11,"from","","",84,[[["typetuple"]],["type"]]],[11,"clone","","",49,[[["self"]],["typepath"]]],[11,"from","","",84,[[["typepath"]],["type"]]],[11,"clone","","",53,[[["self"]],["typetraitobject"]]],[11,"from","","",84,[[["typetraitobject"]],["type"]]],[11,"clone","","",44,[[["self"]],["typeimpltrait"]]],[11,"from","","",84,[[["typeimpltrait"]],["type"]]],[11,"clone","","",48,[[["self"]],["typeparen"]]],[11,"from","","",84,[[["typeparen"]],["type"]]],[11,"clone","","",43,[[["self"]],["typegroup"]]],[11,"from","","",84,[[["typegroup"]],["type"]]],[11,"clone","","",45,[[["self"]],["typeinfer"]]],[11,"from","","",84,[[["typeinfer"]],["type"]]],[11,"clone","","",46,[[["self"]],["typemacro"]]],[11,"from","","",84,[[["typemacro"]],["type"]]],[11,"clone","","",55,[[["self"]],["typeverbatim"]]],[11,"from","","",84,[[["typeverbatim"]],["type"]]],[11,"to_tokens","","",84,[[["self"],["tokenstream"]]]],[11,"clone","","",39,[[["self"]],["abi"]]],[11,"clone","","",40,[[["self"]],["barefnarg"]]],[11,"clone","","",82,[[["self"]],["barefnargname"]]],[11,"clone","","",83,[[["self"]],["returntype"]]],[11,"parse","","",60,[[["cursor"]],["presult"]]],[11,"description","","",60,[[],["option",["str"]]]],[11,"parse","","",85,[[["cursor"]],["presult"]]],[11,"parse","","",57,[[["cursor"]],["presult"]]],[11,"description","","",57,[[],["option",["str"]]]],[11,"parse","","",59,[[["cursor"]],["presult"]]],[11,"description","","",59,[[],["option",["str"]]]],[11,"parse","","",61,[[["cursor"]],["presult"]]],[11,"description","","",61,[[],["option",["str"]]]],[11,"parse","","",58,[[["cursor"]],["presult"]]],[11,"description","","",58,[[],["option",["str"]]]],[11,"parse_mod_style","","",60,[[["cursor"]],["presult"]]],[11,"to_tokens","","",60,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",61,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",86,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",85,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",57,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",58,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",59,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",56,[[["self"],["tokenstream"]]]],[11,"clone","","",60,[[["self"]],["path"]]],[11,"global","","",60,[[["self"]],["bool"]]],[11,"clone","","",56,[[["self"]],["pathtokens"]]],[11,"from","","",60,[[["t"]],["self"]]],[11,"clone","","",61,[[["self"]],["pathsegment"]]],[11,"from","","",61,[[["t"]],["self"]]],[11,"clone","","",86,[[["self"]],["patharguments"]]],[11,"default","","",86,[[],["self"]]],[11,"is_empty","","",86,[[["self"]],["bool"]]],[11,"clone","","",85,[[["self"]],["genericargument"]]],[11,"clone","","",57,[[["self"]],["anglebracketedgenericarguments"]]],[11,"clone","","",58,[[["self"]],["binding"]]],[11,"clone","","",59,[[["self"]],["parenthesizedgenericarguments"]]],[11,"clone","","",62,[[["self"]],["qself"]]],[0,"buffer","","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",N,N],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",N,N],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",N,N],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",220,[[["tokenstream"]],["tokenbuffer"]]],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",220,[[["tokenstream"]],["tokenbuffer"]]],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",220,[[["self"]],["cursor"]]],[11,"clone","","",221,[[["self"]],["cursor"]]],[11,"eq","","",221,[[["self"],["cursor"]],["bool"]]],[11,"ne","","",221,[[["self"],["cursor"]],["bool"]]],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",221,[[],["self"]]],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",221,[[["self"]],["bool"]]],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",221,[[["self"],["delimiter"]],["option"]]],[11,"ident","","If the cursor is pointing at a `Ident`, returns it along with a cursor pointing at the next `TokenTree`.",221,[[["self"]],["option"]]],[11,"punct","","If the cursor is pointing at an `Punct`, returns it along with a cursor pointing at the next `TokenTree`.",221,[[["self"]],["option"]]],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",221,[[["self"]],["option"]]],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",221,[[["self"]],["tokenstream"]]],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",221,[[["self"]],["option"]]],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",221,[[["self"]],["span"]]],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by punctuation.",N,N],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",N,N],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",N,N],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",N,N],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",N,N],[3,"IntoIter","","An iterator over owned values of type `T`.",N,N],[3,"Iter","","An iterator over borrowed values of type `&T`.",N,N],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",N,N],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",N,N],[13,"Punctuated","","",222,N],[13,"End","","",222,N],[11,"to_tokens","","",223,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",222,[[["self"],["tokenstream"]]]],[11,"clone","","",223,[[["self"]],["punctuated"]]],[11,"new","","Creates an empty punctuated sequence.",223,[[],["punctuated"]]],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",223,[[["self"]],["bool"]]],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",223,[[["self"]],["usize"]]],[11,"first","","Borrows the first punctuated pair in this sequence.",223,[[["self"]],["option",["pair"]]]],[11,"last","","Borrows the last punctuated pair in this sequence.",223,[[["self"]],["option",["pair"]]]],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",223,[[["self"]],["option",["pair"]]]],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",223,[[["self"]],["iter"]]],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",223,[[["self"]],["itermut"]]],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",223,[[["self"]],["pairs"]]],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",223,[[["self"]],["pairsmut"]]],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",223,[[["self"]],["intopairs"]]],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",223,[[["self"],["t"]]]],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",223,[[["self"],["p"]]]],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",223,[[["self"]],["option",["pair"]]]],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",223,[[["self"]],["bool"]]],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",223,[[["self"]],["bool"]]],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",223,[[["self"],["t"]]]],[11,"insert","","Inserts an element at position `index`.",223,[[["self"],["usize"],["t"]]]],[11,"from_iter","","",223,[[["i"]],["self"]]],[11,"extend","","",223,[[["self"],["i"]]]],[11,"from_iter","","",223,[[["i"]],["self"]]],[11,"extend","","",223,[[["self"],["i"]]]],[11,"into_iter","","",223,N],[11,"default","","",223,[[],["self"]]],[11,"next","","",224,[[["self"]],["option"]]],[11,"len","","",224,[[["self"]],["usize"]]],[11,"next","","",225,[[["self"]],["option"]]],[11,"len","","",225,[[["self"]],["usize"]]],[11,"next","","",226,[[["self"]],["option"]]],[11,"len","","",226,[[["self"]],["usize"]]],[11,"next","","",227,[[["self"]],["option"]]],[11,"len","","",227,[[["self"]],["usize"]]],[11,"next","","",228,[[["self"]],["option"]]],[11,"len","","",228,[[["self"]],["usize"]]],[11,"next","","",229,[[["self"]],["option"]]],[11,"len","","",229,[[["self"]],["usize"]]],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",222,[[["self"]],["t"]]],[11,"value","","Borrows the syntax tree node from this punctuated pair.",222,[[["self"]],["t"]]],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",222,[[["self"]],["t"]]],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",222,[[["self"]],["option"]]],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",222,[[["t"],["option"]],["self"]]],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",222,N],[11,"index","","",223,N],[11,"index_mut","","",223,N],[11,"parse_separated","","Parse zero or more syntax tree nodes with punctuation in between and no trailing punctuation.",223,[[["cursor"]],["presult"]]],[11,"parse_separated_nonempty","","Parse one or more syntax tree nodes with punctuation in bewteen and no trailing punctuation. allowing trailing punctuation.",223,[[["cursor"]],["presult"]]],[11,"parse_terminated","","Parse zero or more syntax tree nodes with punctuation in between and optional trailing punctuation.",223,[[["cursor"]],["presult"]]],[11,"parse_terminated_nonempty","","Parse one or more syntax tree nodes with punctuation in between and optional trailing punctuation.",223,[[["cursor"]],["presult"]]],[11,"parse_separated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",223,N],[11,"parse_separated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",223,N],[11,"parse_terminated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",223,N],[11,"parse_terminated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",223,N],[0,"synom","syn","Parsing interface for parsing a token stream into a syntax tree node.",N,N],[3,"ParseError","syn::synom","Error returned when a `Synom` parser cannot parse the input tokens.",N,N],[0,"ext","","Extension traits that are made available within the `call!` parser.",N,N],[8,"IdentExt","syn::synom::ext","Additional parsing methods for `Ident`.",N,N],[10,"parse_any","","Parses any identifier including keywords.",230,[[["cursor"]],["presult"]]],[11,"parse_any","syn","",180,[[["cursor"]],["presult"]]],[6,"PResult","syn::synom","The result of a `Synom` parser.",N,N],[8,"Synom","","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",N,N],[10,"parse","","",231,[[["cursor"]],["presult"]]],[11,"description","","A short name of the type being parsed.",231,[[],["option",["str"]]]],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",N,N],[16,"Output","","",232,N],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",232,[[["self"],["tokenstream"]],["result",["parseerror"]]]],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",232,[[["self"],["tokenstream"]],["result",["parseerror"]]]],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",232,[[["self"],["str"]],["result",["parseerror"]]]],[11,"parse","syn","",180,[[["cursor"]],["presult"]]],[11,"description","","",180,[[],["option",["str"]]]],[0,"spanned","","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",233,[[["self"]],["span"]]],[11,"fmt","syn::synom","",234,[[["self"],["formatter"]],["result"]]],[11,"description","","",234,[[["self"]],["str"]]],[11,"fmt","","",234,[[["self"],["formatter"]],["result"]]],[14,"named","syn","Define a parser function with the signature expected by syn parser combinators.",N,N],[14,"call","","Invoke the given parser function with zero or more arguments.",N,N],[14,"map","","Transform the result of a parser by applying a function or closure.",N,N],[14,"not","","Invert the result of a parser by parsing successfully if the given parser fails to parse and vice versa.",N,N],[14,"cond","","Execute a parser only if a condition is met, otherwise return None.",N,N],[14,"cond_reduce","","Execute a parser only if a condition is met, otherwise fail to parse.",N,N],[14,"many0","","Parse zero or more values using the given parser.",N,N],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",N,N],[14,"value","","Produce the given value without parsing anything.",N,N],[14,"reject","","Unconditionally fail to parse anything.",N,N],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",N,N],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",N,N],[14,"do_parse","","Run a series of parsers, optionally naming each intermediate result, followed by a step to combine the intermediate results.",N,N],[14,"input_end","","Parse nothing and succeed only if the end of the enclosing block has been reached.",N,N],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",N,N],[14,"epsilon","","Parses nothing and always succeeds.",N,N],[14,"syn","","Parse any type that implements the `Synom` trait.",N,N],[14,"custom_keyword","","Parse the given word as a keyword.",N,N],[14,"parens","","Parse inside of `(` `)` parentheses.",N,N],[14,"brackets","","Parse inside of `[` `]` square brackets.",N,N],[14,"braces","","Parse inside of `{` `}` curly braces.",N,N],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",N,N],[14,"punct","","Parse a single Rust punctuation token.",N,N],[14,"keyword","","Parse a single Rust keyword token.",N,N],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",N,N],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",180,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",180,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",180,N],[11,"fmt","","",180,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",180,[[["self"],["t"]],["bool"]]],[11,"eq","","",180,[[["self"],["ident"]],["bool"]]],[11,"hash","","",180,N],[11,"clone","","",180,[[["self"]],["ident"]]],[11,"fmt","","",180,[[["self"],["formatter"]],["result",["error"]]]],[11,"cmp","","",180,[[["self"],["ident"]],["ordering"]]],[11,"partial_cmp","","",180,[[["self"],["ident"]],["option",["ordering"]]]],[11,"to_tokens","","",180,N]],"paths":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprBinary"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprField"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[3,"ExprVerbatim"],[3,"Index"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"Lifetime"],[3,"LitBool"],[3,"LitVerbatim"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"PathTokens"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Underscore"],[3,"Apostrophe"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"As"],[3,"Auto"],[3,"Box"],[3,"Break"],[3,"CapSelf"],[3,"Catch"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Self_"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Type"],[3,"Union"],[3,"Unsafe"],[3,"Use"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Ident"],[3,"ExprBox"],[3,"ExprInPlace"],[3,"ExprArray"],[3,"ExprMethodCall"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprIf"],[3,"ExprIfLet"],[3,"ExprWhile"],[3,"ExprWhileLet"],[3,"ExprForLoop"],[3,"ExprLoop"],[3,"ExprMatch"],[3,"ExprClosure"],[3,"ExprUnsafe"],[3,"ExprBlock"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprBreak"],[3,"ExprContinue"],[3,"ExprReturn"],[3,"ExprMacro"],[3,"ExprStruct"],[3,"ExprRepeat"],[3,"ExprGroup"],[3,"ExprTry"],[3,"ExprCatch"],[3,"ExprYield"],[3,"ImplGenerics"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Pair"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"IdentExt"],[8,"Synom"],[8,"Parser"],[8,"Spanned"],[3,"ParseError"]]};
searchIndex["termcolor"]={"doc":"This crate provides a cross platform abstraction for writing colored text to a terminal. Colors are written using either ANSI escape sequences or by communicating with a Windows console. Much of this API was motivated by use inside command line applications, where colors or styles can be configured by the end user and/or the environment.","items":[[3,"StandardStream","termcolor","Satisfies `io::Write` and `WriteColor`, and supports optional coloring to either of the standard output streams, stdout and stderr.",N,N],[3,"StandardStreamLock","","`StandardStreamLock` is a locked reference to a `StandardStream`.",N,N],[3,"BufferWriter","","Writes colored buffers to stdout or stderr.",N,N],[3,"Buffer","","Write colored text to memory.",N,N],[3,"NoColor","","Satisfies `WriteColor` but ignores all color options.",N,N],[3,"Ansi","","Satisfies `WriteColor` using standard ANSI escape sequences.",N,N],[3,"ColorSpec","","A color specification.",N,N],[3,"ParseColorError","","An error from parsing an invalid color specification.",N,N],[4,"ColorChoice","","ColorChoice represents the color preferences of an end user.",N,N],[13,"Always","","Try very hard to emit colors. This includes emitting ANSI colors on Windows if the console API is unavailable.",0,N],[13,"AlwaysAnsi","","AlwaysAnsi is like Always, except it never tries to use anything other than emitting ANSI color codes.",0,N],[13,"Auto","","Try to use colors, but don't force the issue. If the console isn't available on Windows, or if TERM=dumb, for example, then don't use colors.",0,N],[13,"Never","","Never emit colors.",0,N],[4,"Color","","The set of available colors for the terminal foreground/background.",N,N],[13,"Black","","",1,N],[13,"Blue","","",1,N],[13,"Green","","",1,N],[13,"Red","","",1,N],[13,"Cyan","","",1,N],[13,"Magenta","","",1,N],[13,"Yellow","","",1,N],[13,"White","","",1,N],[13,"Ansi256","","",1,N],[13,"Rgb","","",1,N],[8,"WriteColor","","This trait describes the behavior of writers that support colored output.",N,N],[10,"supports_color","","Returns true if and only if the underlying writer supports colors.",2,[[["self"]],["bool"]]],[10,"set_color","","Set the color settings of the writer.",2,[[["self"],["colorspec"]],["result"]]],[10,"reset","","Reset the current color settings to their original settings.",2,[[["self"]],["result"]]],[11,"clone","","",0,[[["self"]],["colorchoice"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["colorchoice"]],["bool"]]],[11,"stdout","","Create a new `StandardStream` with the given color preferences that writes to standard output.",3,[[["colorchoice"]],["standardstream"]]],[11,"stderr","","Create a new `StandardStream` with the given color preferences that writes to standard error.",3,[[["colorchoice"]],["standardstream"]]],[11,"lock","","Lock the underlying writer.",3,[[["self"]],["standardstreamlock"]]],[11,"write","","",3,N],[11,"flush","","",3,[[["self"]],["result"]]],[11,"supports_color","","",3,[[["self"]],["bool"]]],[11,"set_color","","",3,[[["self"],["colorspec"]],["result"]]],[11,"reset","","",3,[[["self"]],["result"]]],[11,"write","","",4,N],[11,"flush","","",4,[[["self"]],["result"]]],[11,"supports_color","","",4,[[["self"]],["bool"]]],[11,"set_color","","",4,[[["self"],["colorspec"]],["result"]]],[11,"reset","","",4,[[["self"]],["result"]]],[11,"stdout","","Create a new `BufferWriter` that writes to stdout with the given color preferences.",5,[[["colorchoice"]],["bufferwriter"]]],[11,"stderr","","Create a new `BufferWriter` that writes to stderr with the given color preferences.",5,[[["colorchoice"]],["bufferwriter"]]],[11,"separator","","If set, the separator given is printed between buffers. By default, no separator is printed.",5,[[["self"],["option",["vec"]]]]],[11,"buffer","","Creates a new `Buffer` with the current color preferences.",5,[[["self"]],["buffer"]]],[11,"print","","Prints the contents of the given buffer.",5,[[["self"],["buffer"]],["result"]]],[11,"no_color","","Create a buffer that drops all color information.",6,[[],["buffer"]]],[11,"ansi","","Create a buffer that uses ANSI escape sequences.",6,[[],["buffer"]]],[11,"is_empty","","Returns true if and only if this buffer is empty.",6,[[["self"]],["bool"]]],[11,"len","","Returns the length of this buffer in bytes.",6,[[["self"]],["usize"]]],[11,"clear","","Clears this buffer.",6,[[["self"]]]],[11,"into_inner","","Consume this buffer and return the underlying raw data.",6,[[["self"]],["vec",["u8"]]]],[11,"as_slice","","Return the underlying data of the buffer.",6,N],[11,"as_mut_slice","","Return the underlying data of the buffer as a mutable slice.",6,N],[11,"write","","",6,N],[11,"flush","","",6,[[["self"]],["result"]]],[11,"supports_color","","",6,[[["self"]],["bool"]]],[11,"set_color","","",6,[[["self"],["colorspec"]],["result"]]],[11,"reset","","",6,[[["self"]],["result"]]],[11,"new","","Create a new writer that satisfies `WriteColor` but drops all color information.",7,[[["w"]],["nocolor"]]],[11,"into_inner","","Consume this `NoColor` value and return the inner writer.",7,[[["self"]],["w"]]],[11,"get_ref","","Return a reference to the inner writer.",7,[[["self"]],["w"]]],[11,"get_mut","","Return a mutable reference to the inner writer.",7,[[["self"]],["w"]]],[11,"write","","",7,N],[11,"flush","","",7,[[["self"]],["result"]]],[11,"supports_color","","",7,[[["self"]],["bool"]]],[11,"set_color","","",7,[[["self"],["colorspec"]],["result"]]],[11,"reset","","",7,[[["self"]],["result"]]],[11,"new","","Create a new writer that satisfies `WriteColor` using standard ANSI escape sequences.",8,[[["w"]],["ansi"]]],[11,"into_inner","","Consume this `Ansi` value and return the inner writer.",8,[[["self"]],["w"]]],[11,"get_ref","","Return a reference to the inner writer.",8,[[["self"]],["w"]]],[11,"get_mut","","Return a mutable reference to the inner writer.",8,[[["self"]],["w"]]],[11,"write","","",8,N],[11,"flush","","",8,[[["self"]],["result"]]],[11,"supports_color","","",8,[[["self"]],["bool"]]],[11,"set_color","","",8,[[["self"],["colorspec"]],["result"]]],[11,"reset","","",8,[[["self"]],["result"]]],[11,"clone","","",9,[[["self"]],["colorspec"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"default","","",9,[[],["colorspec"]]],[11,"eq","","",9,[[["self"],["colorspec"]],["bool"]]],[11,"ne","","",9,[[["self"],["colorspec"]],["bool"]]],[11,"new","","Create a new color specification that has no colors or styles.",9,[[],["colorspec"]]],[11,"fg","","Get the foreground color.",9,[[["self"]],["option",["color"]]]],[11,"set_fg","","Set the foreground color.",9,[[["self"],["option",["color"]]],["colorspec"]]],[11,"bg","","Get the background color.",9,[[["self"]],["option",["color"]]]],[11,"set_bg","","Set the background color.",9,[[["self"],["option",["color"]]],["colorspec"]]],[11,"bold","","Get whether this is bold or not.",9,[[["self"]],["bool"]]],[11,"set_bold","","Set whether the text is bolded or not.",9,[[["self"],["bool"]],["colorspec"]]],[11,"underline","","Get whether this is underline or not.",9,[[["self"]],["bool"]]],[11,"set_underline","","Set whether the text is underlined or not.",9,[[["self"],["bool"]],["colorspec"]]],[11,"intense","","Get whether this is intense or not.",9,[[["self"]],["bool"]]],[11,"set_intense","","Set whether the text is intense or not.",9,[[["self"],["bool"]],["colorspec"]]],[11,"is_none","","Returns true if this color specification has no colors or styles.",9,[[["self"]],["bool"]]],[11,"clear","","Clears this color specification so that it has no color/style settings.",9,[[["self"]]]],[11,"clone","","",1,[[["self"]],["color"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["color"]],["bool"]]],[11,"ne","","",1,[[["self"],["color"]],["bool"]]],[11,"clone","","",10,[[["self"]],["parsecolorerror"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["parsecolorerror"]],["bool"]]],[11,"ne","","",10,[[["self"],["parsecolorerror"]],["bool"]]],[11,"invalid","","Return the string that couldn't be parsed as a valid color.",10,[[["self"]],["str"]]],[11,"description","","",10,[[["self"]],["str"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",1,[[["str"]],["result",["color","parsecolorerror"]]]]],"paths":[[4,"ColorChoice"],[4,"Color"],[8,"WriteColor"],[3,"StandardStream"],[3,"StandardStreamLock"],[3,"BufferWriter"],[3,"Buffer"],[3,"NoColor"],[3,"Ansi"],[3,"ColorSpec"],[3,"ParseColorError"]]};
searchIndex["thread_local"]={"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",N,N],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",N,N],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",N,N],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",N,N],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",N,N],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",N,N],[11,"default","","",0,[[],["threadlocal"]]],[11,"drop","","",0,[[["self"]]]],[11,"new","","Creates a new empty `ThreadLocal`.",0,[[],["threadlocal"]]],[11,"get","","Returns the element for the current thread, if it exists.",0,[[["self"]],["option"]]],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,[[["self"],["f"]],["t"]]],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,[[["self"],["f"]],["result"]]],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,[[["self"]],["itermut"]]],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,[[["self"]]]],[11,"into_iter","","",0,[[["self"]],["intoiter"]]],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,[[["self"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"next","","",1,[[["self"]],["option",["box"]]]],[11,"size_hint","","",1,N],[11,"next","","",2,[[["self"]],["option",["box"]]]],[11,"size_hint","","",2,N],[11,"default","","",3,[[],["cachedthreadlocal"]]],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,[[],["cachedthreadlocal"]]],[11,"get","","Returns the element for the current thread, if it exists.",3,[[["self"]],["option"]]],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",3,[[["self"],["f"]],["t"]]],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",3,[[["self"],["f"]],["result"]]],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,[[["self"]],["cacheditermut"]]],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",3,[[["self"]]]],[11,"into_iter","","",3,[[["self"]],["cachedintoiter"]]],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",3,[[["self"]],["t"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["typenum"]={"doc":"This crate provides type-level numbers evaluated at compile time. It depends only on libcore.","items":[[3,"Greater","typenum","A potential output from `Cmp`, this is the type equivalent to the enum variant `core::cmp::Ordering::Greater`.",N,N],[3,"Less","","A potential output from `Cmp`, this is the type equivalent to the enum variant `core::cmp::Ordering::Less`.",N,N],[3,"Equal","","A potential output from `Cmp`, this is the type equivalent to the enum variant `core::cmp::Ordering::Equal`.",N,N],[0,"consts","","Type aliases for many constants.",N,N],[6,"True","typenum::consts","",N,N],[6,"False","","",N,N],[6,"U0","","",N,N],[6,"U1","","",N,N],[6,"P1","","",N,N],[6,"N1","","",N,N],[6,"U2","","",N,N],[6,"P2","","",N,N],[6,"N2","","",N,N],[6,"U3","","",N,N],[6,"P3","","",N,N],[6,"N3","","",N,N],[6,"U4","","",N,N],[6,"P4","","",N,N],[6,"N4","","",N,N],[6,"U5","","",N,N],[6,"P5","","",N,N],[6,"N5","","",N,N],[6,"U6","","",N,N],[6,"P6","","",N,N],[6,"N6","","",N,N],[6,"U7","","",N,N],[6,"P7","","",N,N],[6,"N7","","",N,N],[6,"U8","","",N,N],[6,"P8","","",N,N],[6,"N8","","",N,N],[6,"U9","","",N,N],[6,"P9","","",N,N],[6,"N9","","",N,N],[6,"U10","","",N,N],[6,"P10","","",N,N],[6,"N10","","",N,N],[6,"U11","","",N,N],[6,"P11","","",N,N],[6,"N11","","",N,N],[6,"U12","","",N,N],[6,"P12","","",N,N],[6,"N12","","",N,N],[6,"U13","","",N,N],[6,"P13","","",N,N],[6,"N13","","",N,N],[6,"U14","","",N,N],[6,"P14","","",N,N],[6,"N14","","",N,N],[6,"U15","","",N,N],[6,"P15","","",N,N],[6,"N15","","",N,N],[6,"U16","","",N,N],[6,"P16","","",N,N],[6,"N16","","",N,N],[6,"U17","","",N,N],[6,"P17","","",N,N],[6,"N17","","",N,N],[6,"U18","","",N,N],[6,"P18","","",N,N],[6,"N18","","",N,N],[6,"U19","","",N,N],[6,"P19","","",N,N],[6,"N19","","",N,N],[6,"U20","","",N,N],[6,"P20","","",N,N],[6,"N20","","",N,N],[6,"U21","","",N,N],[6,"P21","","",N,N],[6,"N21","","",N,N],[6,"U22","","",N,N],[6,"P22","","",N,N],[6,"N22","","",N,N],[6,"U23","","",N,N],[6,"P23","","",N,N],[6,"N23","","",N,N],[6,"U24","","",N,N],[6,"P24","","",N,N],[6,"N24","","",N,N],[6,"U25","","",N,N],[6,"P25","","",N,N],[6,"N25","","",N,N],[6,"U26","","",N,N],[6,"P26","","",N,N],[6,"N26","","",N,N],[6,"U27","","",N,N],[6,"P27","","",N,N],[6,"N27","","",N,N],[6,"U28","","",N,N],[6,"P28","","",N,N],[6,"N28","","",N,N],[6,"U29","","",N,N],[6,"P29","","",N,N],[6,"N29","","",N,N],[6,"U30","","",N,N],[6,"P30","","",N,N],[6,"N30","","",N,N],[6,"U31","","",N,N],[6,"P31","","",N,N],[6,"N31","","",N,N],[6,"U32","","",N,N],[6,"P32","","",N,N],[6,"N32","","",N,N],[6,"U33","","",N,N],[6,"P33","","",N,N],[6,"N33","","",N,N],[6,"U34","","",N,N],[6,"P34","","",N,N],[6,"N34","","",N,N],[6,"U35","","",N,N],[6,"P35","","",N,N],[6,"N35","","",N,N],[6,"U36","","",N,N],[6,"P36","","",N,N],[6,"N36","","",N,N],[6,"U37","","",N,N],[6,"P37","","",N,N],[6,"N37","","",N,N],[6,"U38","","",N,N],[6,"P38","","",N,N],[6,"N38","","",N,N],[6,"U39","","",N,N],[6,"P39","","",N,N],[6,"N39","","",N,N],[6,"U40","","",N,N],[6,"P40","","",N,N],[6,"N40","","",N,N],[6,"U41","","",N,N],[6,"P41","","",N,N],[6,"N41","","",N,N],[6,"U42","","",N,N],[6,"P42","","",N,N],[6,"N42","","",N,N],[6,"U43","","",N,N],[6,"P43","","",N,N],[6,"N43","","",N,N],[6,"U44","","",N,N],[6,"P44","","",N,N],[6,"N44","","",N,N],[6,"U45","","",N,N],[6,"P45","","",N,N],[6,"N45","","",N,N],[6,"U46","","",N,N],[6,"P46","","",N,N],[6,"N46","","",N,N],[6,"U47","","",N,N],[6,"P47","","",N,N],[6,"N47","","",N,N],[6,"U48","","",N,N],[6,"P48","","",N,N],[6,"N48","","",N,N],[6,"U49","","",N,N],[6,"P49","","",N,N],[6,"N49","","",N,N],[6,"U50","","",N,N],[6,"P50","","",N,N],[6,"N50","","",N,N],[6,"U51","","",N,N],[6,"P51","","",N,N],[6,"N51","","",N,N],[6,"U52","","",N,N],[6,"P52","","",N,N],[6,"N52","","",N,N],[6,"U53","","",N,N],[6,"P53","","",N,N],[6,"N53","","",N,N],[6,"U54","","",N,N],[6,"P54","","",N,N],[6,"N54","","",N,N],[6,"U55","","",N,N],[6,"P55","","",N,N],[6,"N55","","",N,N],[6,"U56","","",N,N],[6,"P56","","",N,N],[6,"N56","","",N,N],[6,"U57","","",N,N],[6,"P57","","",N,N],[6,"N57","","",N,N],[6,"U58","","",N,N],[6,"P58","","",N,N],[6,"N58","","",N,N],[6,"U59","","",N,N],[6,"P59","","",N,N],[6,"N59","","",N,N],[6,"U60","","",N,N],[6,"P60","","",N,N],[6,"N60","","",N,N],[6,"U61","","",N,N],[6,"P61","","",N,N],[6,"N61","","",N,N],[6,"U62","","",N,N],[6,"P62","","",N,N],[6,"N62","","",N,N],[6,"U63","","",N,N],[6,"P63","","",N,N],[6,"N63","","",N,N],[6,"U64","","",N,N],[6,"P64","","",N,N],[6,"N64","","",N,N],[6,"U65","","",N,N],[6,"P65","","",N,N],[6,"N65","","",N,N],[6,"U66","","",N,N],[6,"P66","","",N,N],[6,"N66","","",N,N],[6,"U67","","",N,N],[6,"P67","","",N,N],[6,"N67","","",N,N],[6,"U68","","",N,N],[6,"P68","","",N,N],[6,"N68","","",N,N],[6,"U69","","",N,N],[6,"P69","","",N,N],[6,"N69","","",N,N],[6,"U70","","",N,N],[6,"P70","","",N,N],[6,"N70","","",N,N],[6,"U71","","",N,N],[6,"P71","","",N,N],[6,"N71","","",N,N],[6,"U72","","",N,N],[6,"P72","","",N,N],[6,"N72","","",N,N],[6,"U73","","",N,N],[6,"P73","","",N,N],[6,"N73","","",N,N],[6,"U74","","",N,N],[6,"P74","","",N,N],[6,"N74","","",N,N],[6,"U75","","",N,N],[6,"P75","","",N,N],[6,"N75","","",N,N],[6,"U76","","",N,N],[6,"P76","","",N,N],[6,"N76","","",N,N],[6,"U77","","",N,N],[6,"P77","","",N,N],[6,"N77","","",N,N],[6,"U78","","",N,N],[6,"P78","","",N,N],[6,"N78","","",N,N],[6,"U79","","",N,N],[6,"P79","","",N,N],[6,"N79","","",N,N],[6,"U80","","",N,N],[6,"P80","","",N,N],[6,"N80","","",N,N],[6,"U81","","",N,N],[6,"P81","","",N,N],[6,"N81","","",N,N],[6,"U82","","",N,N],[6,"P82","","",N,N],[6,"N82","","",N,N],[6,"U83","","",N,N],[6,"P83","","",N,N],[6,"N83","","",N,N],[6,"U84","","",N,N],[6,"P84","","",N,N],[6,"N84","","",N,N],[6,"U85","","",N,N],[6,"P85","","",N,N],[6,"N85","","",N,N],[6,"U86","","",N,N],[6,"P86","","",N,N],[6,"N86","","",N,N],[6,"U87","","",N,N],[6,"P87","","",N,N],[6,"N87","","",N,N],[6,"U88","","",N,N],[6,"P88","","",N,N],[6,"N88","","",N,N],[6,"U89","","",N,N],[6,"P89","","",N,N],[6,"N89","","",N,N],[6,"U90","","",N,N],[6,"P90","","",N,N],[6,"N90","","",N,N],[6,"U91","","",N,N],[6,"P91","","",N,N],[6,"N91","","",N,N],[6,"U92","","",N,N],[6,"P92","","",N,N],[6,"N92","","",N,N],[6,"U93","","",N,N],[6,"P93","","",N,N],[6,"N93","","",N,N],[6,"U94","","",N,N],[6,"P94","","",N,N],[6,"N94","","",N,N],[6,"U95","","",N,N],[6,"P95","","",N,N],[6,"N95","","",N,N],[6,"U96","","",N,N],[6,"P96","","",N,N],[6,"N96","","",N,N],[6,"U97","","",N,N],[6,"P97","","",N,N],[6,"N97","","",N,N],[6,"U98","","",N,N],[6,"P98","","",N,N],[6,"N98","","",N,N],[6,"U99","","",N,N],[6,"P99","","",N,N],[6,"N99","","",N,N],[6,"U100","","",N,N],[6,"P100","","",N,N],[6,"N100","","",N,N],[6,"U101","","",N,N],[6,"P101","","",N,N],[6,"N101","","",N,N],[6,"U102","","",N,N],[6,"P102","","",N,N],[6,"N102","","",N,N],[6,"U103","","",N,N],[6,"P103","","",N,N],[6,"N103","","",N,N],[6,"U104","","",N,N],[6,"P104","","",N,N],[6,"N104","","",N,N],[6,"U105","","",N,N],[6,"P105","","",N,N],[6,"N105","","",N,N],[6,"U106","","",N,N],[6,"P106","","",N,N],[6,"N106","","",N,N],[6,"U107","","",N,N],[6,"P107","","",N,N],[6,"N107","","",N,N],[6,"U108","","",N,N],[6,"P108","","",N,N],[6,"N108","","",N,N],[6,"U109","","",N,N],[6,"P109","","",N,N],[6,"N109","","",N,N],[6,"U110","","",N,N],[6,"P110","","",N,N],[6,"N110","","",N,N],[6,"U111","","",N,N],[6,"P111","","",N,N],[6,"N111","","",N,N],[6,"U112","","",N,N],[6,"P112","","",N,N],[6,"N112","","",N,N],[6,"U113","","",N,N],[6,"P113","","",N,N],[6,"N113","","",N,N],[6,"U114","","",N,N],[6,"P114","","",N,N],[6,"N114","","",N,N],[6,"U115","","",N,N],[6,"P115","","",N,N],[6,"N115","","",N,N],[6,"U116","","",N,N],[6,"P116","","",N,N],[6,"N116","","",N,N],[6,"U117","","",N,N],[6,"P117","","",N,N],[6,"N117","","",N,N],[6,"U118","","",N,N],[6,"P118","","",N,N],[6,"N118","","",N,N],[6,"U119","","",N,N],[6,"P119","","",N,N],[6,"N119","","",N,N],[6,"U120","","",N,N],[6,"P120","","",N,N],[6,"N120","","",N,N],[6,"U121","","",N,N],[6,"P121","","",N,N],[6,"N121","","",N,N],[6,"U122","","",N,N],[6,"P122","","",N,N],[6,"N122","","",N,N],[6,"U123","","",N,N],[6,"P123","","",N,N],[6,"N123","","",N,N],[6,"U124","","",N,N],[6,"P124","","",N,N],[6,"N124","","",N,N],[6,"U125","","",N,N],[6,"P125","","",N,N],[6,"N125","","",N,N],[6,"U126","","",N,N],[6,"P126","","",N,N],[6,"N126","","",N,N],[6,"U127","","",N,N],[6,"P127","","",N,N],[6,"N127","","",N,N],[6,"U128","","",N,N],[6,"P128","","",N,N],[6,"N128","","",N,N],[6,"U129","","",N,N],[6,"P129","","",N,N],[6,"N129","","",N,N],[6,"U130","","",N,N],[6,"P130","","",N,N],[6,"N130","","",N,N],[6,"U131","","",N,N],[6,"P131","","",N,N],[6,"N131","","",N,N],[6,"U132","","",N,N],[6,"P132","","",N,N],[6,"N132","","",N,N],[6,"U133","","",N,N],[6,"P133","","",N,N],[6,"N133","","",N,N],[6,"U134","","",N,N],[6,"P134","","",N,N],[6,"N134","","",N,N],[6,"U135","","",N,N],[6,"P135","","",N,N],[6,"N135","","",N,N],[6,"U136","","",N,N],[6,"P136","","",N,N],[6,"N136","","",N,N],[6,"U137","","",N,N],[6,"P137","","",N,N],[6,"N137","","",N,N],[6,"U138","","",N,N],[6,"P138","","",N,N],[6,"N138","","",N,N],[6,"U139","","",N,N],[6,"P139","","",N,N],[6,"N139","","",N,N],[6,"U140","","",N,N],[6,"P140","","",N,N],[6,"N140","","",N,N],[6,"U141","","",N,N],[6,"P141","","",N,N],[6,"N141","","",N,N],[6,"U142","","",N,N],[6,"P142","","",N,N],[6,"N142","","",N,N],[6,"U143","","",N,N],[6,"P143","","",N,N],[6,"N143","","",N,N],[6,"U144","","",N,N],[6,"P144","","",N,N],[6,"N144","","",N,N],[6,"U145","","",N,N],[6,"P145","","",N,N],[6,"N145","","",N,N],[6,"U146","","",N,N],[6,"P146","","",N,N],[6,"N146","","",N,N],[6,"U147","","",N,N],[6,"P147","","",N,N],[6,"N147","","",N,N],[6,"U148","","",N,N],[6,"P148","","",N,N],[6,"N148","","",N,N],[6,"U149","","",N,N],[6,"P149","","",N,N],[6,"N149","","",N,N],[6,"U150","","",N,N],[6,"P150","","",N,N],[6,"N150","","",N,N],[6,"U151","","",N,N],[6,"P151","","",N,N],[6,"N151","","",N,N],[6,"U152","","",N,N],[6,"P152","","",N,N],[6,"N152","","",N,N],[6,"U153","","",N,N],[6,"P153","","",N,N],[6,"N153","","",N,N],[6,"U154","","",N,N],[6,"P154","","",N,N],[6,"N154","","",N,N],[6,"U155","","",N,N],[6,"P155","","",N,N],[6,"N155","","",N,N],[6,"U156","","",N,N],[6,"P156","","",N,N],[6,"N156","","",N,N],[6,"U157","","",N,N],[6,"P157","","",N,N],[6,"N157","","",N,N],[6,"U158","","",N,N],[6,"P158","","",N,N],[6,"N158","","",N,N],[6,"U159","","",N,N],[6,"P159","","",N,N],[6,"N159","","",N,N],[6,"U160","","",N,N],[6,"P160","","",N,N],[6,"N160","","",N,N],[6,"U161","","",N,N],[6,"P161","","",N,N],[6,"N161","","",N,N],[6,"U162","","",N,N],[6,"P162","","",N,N],[6,"N162","","",N,N],[6,"U163","","",N,N],[6,"P163","","",N,N],[6,"N163","","",N,N],[6,"U164","","",N,N],[6,"P164","","",N,N],[6,"N164","","",N,N],[6,"U165","","",N,N],[6,"P165","","",N,N],[6,"N165","","",N,N],[6,"U166","","",N,N],[6,"P166","","",N,N],[6,"N166","","",N,N],[6,"U167","","",N,N],[6,"P167","","",N,N],[6,"N167","","",N,N],[6,"U168","","",N,N],[6,"P168","","",N,N],[6,"N168","","",N,N],[6,"U169","","",N,N],[6,"P169","","",N,N],[6,"N169","","",N,N],[6,"U170","","",N,N],[6,"P170","","",N,N],[6,"N170","","",N,N],[6,"U171","","",N,N],[6,"P171","","",N,N],[6,"N171","","",N,N],[6,"U172","","",N,N],[6,"P172","","",N,N],[6,"N172","","",N,N],[6,"U173","","",N,N],[6,"P173","","",N,N],[6,"N173","","",N,N],[6,"U174","","",N,N],[6,"P174","","",N,N],[6,"N174","","",N,N],[6,"U175","","",N,N],[6,"P175","","",N,N],[6,"N175","","",N,N],[6,"U176","","",N,N],[6,"P176","","",N,N],[6,"N176","","",N,N],[6,"U177","","",N,N],[6,"P177","","",N,N],[6,"N177","","",N,N],[6,"U178","","",N,N],[6,"P178","","",N,N],[6,"N178","","",N,N],[6,"U179","","",N,N],[6,"P179","","",N,N],[6,"N179","","",N,N],[6,"U180","","",N,N],[6,"P180","","",N,N],[6,"N180","","",N,N],[6,"U181","","",N,N],[6,"P181","","",N,N],[6,"N181","","",N,N],[6,"U182","","",N,N],[6,"P182","","",N,N],[6,"N182","","",N,N],[6,"U183","","",N,N],[6,"P183","","",N,N],[6,"N183","","",N,N],[6,"U184","","",N,N],[6,"P184","","",N,N],[6,"N184","","",N,N],[6,"U185","","",N,N],[6,"P185","","",N,N],[6,"N185","","",N,N],[6,"U186","","",N,N],[6,"P186","","",N,N],[6,"N186","","",N,N],[6,"U187","","",N,N],[6,"P187","","",N,N],[6,"N187","","",N,N],[6,"U188","","",N,N],[6,"P188","","",N,N],[6,"N188","","",N,N],[6,"U189","","",N,N],[6,"P189","","",N,N],[6,"N189","","",N,N],[6,"U190","","",N,N],[6,"P190","","",N,N],[6,"N190","","",N,N],[6,"U191","","",N,N],[6,"P191","","",N,N],[6,"N191","","",N,N],[6,"U192","","",N,N],[6,"P192","","",N,N],[6,"N192","","",N,N],[6,"U193","","",N,N],[6,"P193","","",N,N],[6,"N193","","",N,N],[6,"U194","","",N,N],[6,"P194","","",N,N],[6,"N194","","",N,N],[6,"U195","","",N,N],[6,"P195","","",N,N],[6,"N195","","",N,N],[6,"U196","","",N,N],[6,"P196","","",N,N],[6,"N196","","",N,N],[6,"U197","","",N,N],[6,"P197","","",N,N],[6,"N197","","",N,N],[6,"U198","","",N,N],[6,"P198","","",N,N],[6,"N198","","",N,N],[6,"U199","","",N,N],[6,"P199","","",N,N],[6,"N199","","",N,N],[6,"U200","","",N,N],[6,"P200","","",N,N],[6,"N200","","",N,N],[6,"U201","","",N,N],[6,"P201","","",N,N],[6,"N201","","",N,N],[6,"U202","","",N,N],[6,"P202","","",N,N],[6,"N202","","",N,N],[6,"U203","","",N,N],[6,"P203","","",N,N],[6,"N203","","",N,N],[6,"U204","","",N,N],[6,"P204","","",N,N],[6,"N204","","",N,N],[6,"U205","","",N,N],[6,"P205","","",N,N],[6,"N205","","",N,N],[6,"U206","","",N,N],[6,"P206","","",N,N],[6,"N206","","",N,N],[6,"U207","","",N,N],[6,"P207","","",N,N],[6,"N207","","",N,N],[6,"U208","","",N,N],[6,"P208","","",N,N],[6,"N208","","",N,N],[6,"U209","","",N,N],[6,"P209","","",N,N],[6,"N209","","",N,N],[6,"U210","","",N,N],[6,"P210","","",N,N],[6,"N210","","",N,N],[6,"U211","","",N,N],[6,"P211","","",N,N],[6,"N211","","",N,N],[6,"U212","","",N,N],[6,"P212","","",N,N],[6,"N212","","",N,N],[6,"U213","","",N,N],[6,"P213","","",N,N],[6,"N213","","",N,N],[6,"U214","","",N,N],[6,"P214","","",N,N],[6,"N214","","",N,N],[6,"U215","","",N,N],[6,"P215","","",N,N],[6,"N215","","",N,N],[6,"U216","","",N,N],[6,"P216","","",N,N],[6,"N216","","",N,N],[6,"U217","","",N,N],[6,"P217","","",N,N],[6,"N217","","",N,N],[6,"U218","","",N,N],[6,"P218","","",N,N],[6,"N218","","",N,N],[6,"U219","","",N,N],[6,"P219","","",N,N],[6,"N219","","",N,N],[6,"U220","","",N,N],[6,"P220","","",N,N],[6,"N220","","",N,N],[6,"U221","","",N,N],[6,"P221","","",N,N],[6,"N221","","",N,N],[6,"U222","","",N,N],[6,"P222","","",N,N],[6,"N222","","",N,N],[6,"U223","","",N,N],[6,"P223","","",N,N],[6,"N223","","",N,N],[6,"U224","","",N,N],[6,"P224","","",N,N],[6,"N224","","",N,N],[6,"U225","","",N,N],[6,"P225","","",N,N],[6,"N225","","",N,N],[6,"U226","","",N,N],[6,"P226","","",N,N],[6,"N226","","",N,N],[6,"U227","","",N,N],[6,"P227","","",N,N],[6,"N227","","",N,N],[6,"U228","","",N,N],[6,"P228","","",N,N],[6,"N228","","",N,N],[6,"U229","","",N,N],[6,"P229","","",N,N],[6,"N229","","",N,N],[6,"U230","","",N,N],[6,"P230","","",N,N],[6,"N230","","",N,N],[6,"U231","","",N,N],[6,"P231","","",N,N],[6,"N231","","",N,N],[6,"U232","","",N,N],[6,"P232","","",N,N],[6,"N232","","",N,N],[6,"U233","","",N,N],[6,"P233","","",N,N],[6,"N233","","",N,N],[6,"U234","","",N,N],[6,"P234","","",N,N],[6,"N234","","",N,N],[6,"U235","","",N,N],[6,"P235","","",N,N],[6,"N235","","",N,N],[6,"U236","","",N,N],[6,"P236","","",N,N],[6,"N236","","",N,N],[6,"U237","","",N,N],[6,"P237","","",N,N],[6,"N237","","",N,N],[6,"U238","","",N,N],[6,"P238","","",N,N],[6,"N238","","",N,N],[6,"U239","","",N,N],[6,"P239","","",N,N],[6,"N239","","",N,N],[6,"U240","","",N,N],[6,"P240","","",N,N],[6,"N240","","",N,N],[6,"U241","","",N,N],[6,"P241","","",N,N],[6,"N241","","",N,N],[6,"U242","","",N,N],[6,"P242","","",N,N],[6,"N242","","",N,N],[6,"U243","","",N,N],[6,"P243","","",N,N],[6,"N243","","",N,N],[6,"U244","","",N,N],[6,"P244","","",N,N],[6,"N244","","",N,N],[6,"U245","","",N,N],[6,"P245","","",N,N],[6,"N245","","",N,N],[6,"U246","","",N,N],[6,"P246","","",N,N],[6,"N246","","",N,N],[6,"U247","","",N,N],[6,"P247","","",N,N],[6,"N247","","",N,N],[6,"U248","","",N,N],[6,"P248","","",N,N],[6,"N248","","",N,N],[6,"U249","","",N,N],[6,"P249","","",N,N],[6,"N249","","",N,N],[6,"U250","","",N,N],[6,"P250","","",N,N],[6,"N250","","",N,N],[6,"U251","","",N,N],[6,"P251","","",N,N],[6,"N251","","",N,N],[6,"U252","","",N,N],[6,"P252","","",N,N],[6,"N252","","",N,N],[6,"U253","","",N,N],[6,"P253","","",N,N],[6,"N253","","",N,N],[6,"U254","","",N,N],[6,"P254","","",N,N],[6,"N254","","",N,N],[6,"U255","","",N,N],[6,"P255","","",N,N],[6,"N255","","",N,N],[6,"U256","","",N,N],[6,"P256","","",N,N],[6,"N256","","",N,N],[6,"U257","","",N,N],[6,"P257","","",N,N],[6,"N257","","",N,N],[6,"U258","","",N,N],[6,"P258","","",N,N],[6,"N258","","",N,N],[6,"U259","","",N,N],[6,"P259","","",N,N],[6,"N259","","",N,N],[6,"U260","","",N,N],[6,"P260","","",N,N],[6,"N260","","",N,N],[6,"U261","","",N,N],[6,"P261","","",N,N],[6,"N261","","",N,N],[6,"U262","","",N,N],[6,"P262","","",N,N],[6,"N262","","",N,N],[6,"U263","","",N,N],[6,"P263","","",N,N],[6,"N263","","",N,N],[6,"U264","","",N,N],[6,"P264","","",N,N],[6,"N264","","",N,N],[6,"U265","","",N,N],[6,"P265","","",N,N],[6,"N265","","",N,N],[6,"U266","","",N,N],[6,"P266","","",N,N],[6,"N266","","",N,N],[6,"U267","","",N,N],[6,"P267","","",N,N],[6,"N267","","",N,N],[6,"U268","","",N,N],[6,"P268","","",N,N],[6,"N268","","",N,N],[6,"U269","","",N,N],[6,"P269","","",N,N],[6,"N269","","",N,N],[6,"U270","","",N,N],[6,"P270","","",N,N],[6,"N270","","",N,N],[6,"U271","","",N,N],[6,"P271","","",N,N],[6,"N271","","",N,N],[6,"U272","","",N,N],[6,"P272","","",N,N],[6,"N272","","",N,N],[6,"U273","","",N,N],[6,"P273","","",N,N],[6,"N273","","",N,N],[6,"U274","","",N,N],[6,"P274","","",N,N],[6,"N274","","",N,N],[6,"U275","","",N,N],[6,"P275","","",N,N],[6,"N275","","",N,N],[6,"U276","","",N,N],[6,"P276","","",N,N],[6,"N276","","",N,N],[6,"U277","","",N,N],[6,"P277","","",N,N],[6,"N277","","",N,N],[6,"U278","","",N,N],[6,"P278","","",N,N],[6,"N278","","",N,N],[6,"U279","","",N,N],[6,"P279","","",N,N],[6,"N279","","",N,N],[6,"U280","","",N,N],[6,"P280","","",N,N],[6,"N280","","",N,N],[6,"U281","","",N,N],[6,"P281","","",N,N],[6,"N281","","",N,N],[6,"U282","","",N,N],[6,"P282","","",N,N],[6,"N282","","",N,N],[6,"U283","","",N,N],[6,"P283","","",N,N],[6,"N283","","",N,N],[6,"U284","","",N,N],[6,"P284","","",N,N],[6,"N284","","",N,N],[6,"U285","","",N,N],[6,"P285","","",N,N],[6,"N285","","",N,N],[6,"U286","","",N,N],[6,"P286","","",N,N],[6,"N286","","",N,N],[6,"U287","","",N,N],[6,"P287","","",N,N],[6,"N287","","",N,N],[6,"U288","","",N,N],[6,"P288","","",N,N],[6,"N288","","",N,N],[6,"U289","","",N,N],[6,"P289","","",N,N],[6,"N289","","",N,N],[6,"U290","","",N,N],[6,"P290","","",N,N],[6,"N290","","",N,N],[6,"U291","","",N,N],[6,"P291","","",N,N],[6,"N291","","",N,N],[6,"U292","","",N,N],[6,"P292","","",N,N],[6,"N292","","",N,N],[6,"U293","","",N,N],[6,"P293","","",N,N],[6,"N293","","",N,N],[6,"U294","","",N,N],[6,"P294","","",N,N],[6,"N294","","",N,N],[6,"U295","","",N,N],[6,"P295","","",N,N],[6,"N295","","",N,N],[6,"U296","","",N,N],[6,"P296","","",N,N],[6,"N296","","",N,N],[6,"U297","","",N,N],[6,"P297","","",N,N],[6,"N297","","",N,N],[6,"U298","","",N,N],[6,"P298","","",N,N],[6,"N298","","",N,N],[6,"U299","","",N,N],[6,"P299","","",N,N],[6,"N299","","",N,N],[6,"U300","","",N,N],[6,"P300","","",N,N],[6,"N300","","",N,N],[6,"U301","","",N,N],[6,"P301","","",N,N],[6,"N301","","",N,N],[6,"U302","","",N,N],[6,"P302","","",N,N],[6,"N302","","",N,N],[6,"U303","","",N,N],[6,"P303","","",N,N],[6,"N303","","",N,N],[6,"U304","","",N,N],[6,"P304","","",N,N],[6,"N304","","",N,N],[6,"U305","","",N,N],[6,"P305","","",N,N],[6,"N305","","",N,N],[6,"U306","","",N,N],[6,"P306","","",N,N],[6,"N306","","",N,N],[6,"U307","","",N,N],[6,"P307","","",N,N],[6,"N307","","",N,N],[6,"U308","","",N,N],[6,"P308","","",N,N],[6,"N308","","",N,N],[6,"U309","","",N,N],[6,"P309","","",N,N],[6,"N309","","",N,N],[6,"U310","","",N,N],[6,"P310","","",N,N],[6,"N310","","",N,N],[6,"U311","","",N,N],[6,"P311","","",N,N],[6,"N311","","",N,N],[6,"U312","","",N,N],[6,"P312","","",N,N],[6,"N312","","",N,N],[6,"U313","","",N,N],[6,"P313","","",N,N],[6,"N313","","",N,N],[6,"U314","","",N,N],[6,"P314","","",N,N],[6,"N314","","",N,N],[6,"U315","","",N,N],[6,"P315","","",N,N],[6,"N315","","",N,N],[6,"U316","","",N,N],[6,"P316","","",N,N],[6,"N316","","",N,N],[6,"U317","","",N,N],[6,"P317","","",N,N],[6,"N317","","",N,N],[6,"U318","","",N,N],[6,"P318","","",N,N],[6,"N318","","",N,N],[6,"U319","","",N,N],[6,"P319","","",N,N],[6,"N319","","",N,N],[6,"U320","","",N,N],[6,"P320","","",N,N],[6,"N320","","",N,N],[6,"U321","","",N,N],[6,"P321","","",N,N],[6,"N321","","",N,N],[6,"U322","","",N,N],[6,"P322","","",N,N],[6,"N322","","",N,N],[6,"U323","","",N,N],[6,"P323","","",N,N],[6,"N323","","",N,N],[6,"U324","","",N,N],[6,"P324","","",N,N],[6,"N324","","",N,N],[6,"U325","","",N,N],[6,"P325","","",N,N],[6,"N325","","",N,N],[6,"U326","","",N,N],[6,"P326","","",N,N],[6,"N326","","",N,N],[6,"U327","","",N,N],[6,"P327","","",N,N],[6,"N327","","",N,N],[6,"U328","","",N,N],[6,"P328","","",N,N],[6,"N328","","",N,N],[6,"U329","","",N,N],[6,"P329","","",N,N],[6,"N329","","",N,N],[6,"U330","","",N,N],[6,"P330","","",N,N],[6,"N330","","",N,N],[6,"U331","","",N,N],[6,"P331","","",N,N],[6,"N331","","",N,N],[6,"U332","","",N,N],[6,"P332","","",N,N],[6,"N332","","",N,N],[6,"U333","","",N,N],[6,"P333","","",N,N],[6,"N333","","",N,N],[6,"U334","","",N,N],[6,"P334","","",N,N],[6,"N334","","",N,N],[6,"U335","","",N,N],[6,"P335","","",N,N],[6,"N335","","",N,N],[6,"U336","","",N,N],[6,"P336","","",N,N],[6,"N336","","",N,N],[6,"U337","","",N,N],[6,"P337","","",N,N],[6,"N337","","",N,N],[6,"U338","","",N,N],[6,"P338","","",N,N],[6,"N338","","",N,N],[6,"U339","","",N,N],[6,"P339","","",N,N],[6,"N339","","",N,N],[6,"U340","","",N,N],[6,"P340","","",N,N],[6,"N340","","",N,N],[6,"U341","","",N,N],[6,"P341","","",N,N],[6,"N341","","",N,N],[6,"U342","","",N,N],[6,"P342","","",N,N],[6,"N342","","",N,N],[6,"U343","","",N,N],[6,"P343","","",N,N],[6,"N343","","",N,N],[6,"U344","","",N,N],[6,"P344","","",N,N],[6,"N344","","",N,N],[6,"U345","","",N,N],[6,"P345","","",N,N],[6,"N345","","",N,N],[6,"U346","","",N,N],[6,"P346","","",N,N],[6,"N346","","",N,N],[6,"U347","","",N,N],[6,"P347","","",N,N],[6,"N347","","",N,N],[6,"U348","","",N,N],[6,"P348","","",N,N],[6,"N348","","",N,N],[6,"U349","","",N,N],[6,"P349","","",N,N],[6,"N349","","",N,N],[6,"U350","","",N,N],[6,"P350","","",N,N],[6,"N350","","",N,N],[6,"U351","","",N,N],[6,"P351","","",N,N],[6,"N351","","",N,N],[6,"U352","","",N,N],[6,"P352","","",N,N],[6,"N352","","",N,N],[6,"U353","","",N,N],[6,"P353","","",N,N],[6,"N353","","",N,N],[6,"U354","","",N,N],[6,"P354","","",N,N],[6,"N354","","",N,N],[6,"U355","","",N,N],[6,"P355","","",N,N],[6,"N355","","",N,N],[6,"U356","","",N,N],[6,"P356","","",N,N],[6,"N356","","",N,N],[6,"U357","","",N,N],[6,"P357","","",N,N],[6,"N357","","",N,N],[6,"U358","","",N,N],[6,"P358","","",N,N],[6,"N358","","",N,N],[6,"U359","","",N,N],[6,"P359","","",N,N],[6,"N359","","",N,N],[6,"U360","","",N,N],[6,"P360","","",N,N],[6,"N360","","",N,N],[6,"U361","","",N,N],[6,"P361","","",N,N],[6,"N361","","",N,N],[6,"U362","","",N,N],[6,"P362","","",N,N],[6,"N362","","",N,N],[6,"U363","","",N,N],[6,"P363","","",N,N],[6,"N363","","",N,N],[6,"U364","","",N,N],[6,"P364","","",N,N],[6,"N364","","",N,N],[6,"U365","","",N,N],[6,"P365","","",N,N],[6,"N365","","",N,N],[6,"U366","","",N,N],[6,"P366","","",N,N],[6,"N366","","",N,N],[6,"U367","","",N,N],[6,"P367","","",N,N],[6,"N367","","",N,N],[6,"U368","","",N,N],[6,"P368","","",N,N],[6,"N368","","",N,N],[6,"U369","","",N,N],[6,"P369","","",N,N],[6,"N369","","",N,N],[6,"U370","","",N,N],[6,"P370","","",N,N],[6,"N370","","",N,N],[6,"U371","","",N,N],[6,"P371","","",N,N],[6,"N371","","",N,N],[6,"U372","","",N,N],[6,"P372","","",N,N],[6,"N372","","",N,N],[6,"U373","","",N,N],[6,"P373","","",N,N],[6,"N373","","",N,N],[6,"U374","","",N,N],[6,"P374","","",N,N],[6,"N374","","",N,N],[6,"U375","","",N,N],[6,"P375","","",N,N],[6,"N375","","",N,N],[6,"U376","","",N,N],[6,"P376","","",N,N],[6,"N376","","",N,N],[6,"U377","","",N,N],[6,"P377","","",N,N],[6,"N377","","",N,N],[6,"U378","","",N,N],[6,"P378","","",N,N],[6,"N378","","",N,N],[6,"U379","","",N,N],[6,"P379","","",N,N],[6,"N379","","",N,N],[6,"U380","","",N,N],[6,"P380","","",N,N],[6,"N380","","",N,N],[6,"U381","","",N,N],[6,"P381","","",N,N],[6,"N381","","",N,N],[6,"U382","","",N,N],[6,"P382","","",N,N],[6,"N382","","",N,N],[6,"U383","","",N,N],[6,"P383","","",N,N],[6,"N383","","",N,N],[6,"U384","","",N,N],[6,"P384","","",N,N],[6,"N384","","",N,N],[6,"U385","","",N,N],[6,"P385","","",N,N],[6,"N385","","",N,N],[6,"U386","","",N,N],[6,"P386","","",N,N],[6,"N386","","",N,N],[6,"U387","","",N,N],[6,"P387","","",N,N],[6,"N387","","",N,N],[6,"U388","","",N,N],[6,"P388","","",N,N],[6,"N388","","",N,N],[6,"U389","","",N,N],[6,"P389","","",N,N],[6,"N389","","",N,N],[6,"U390","","",N,N],[6,"P390","","",N,N],[6,"N390","","",N,N],[6,"U391","","",N,N],[6,"P391","","",N,N],[6,"N391","","",N,N],[6,"U392","","",N,N],[6,"P392","","",N,N],[6,"N392","","",N,N],[6,"U393","","",N,N],[6,"P393","","",N,N],[6,"N393","","",N,N],[6,"U394","","",N,N],[6,"P394","","",N,N],[6,"N394","","",N,N],[6,"U395","","",N,N],[6,"P395","","",N,N],[6,"N395","","",N,N],[6,"U396","","",N,N],[6,"P396","","",N,N],[6,"N396","","",N,N],[6,"U397","","",N,N],[6,"P397","","",N,N],[6,"N397","","",N,N],[6,"U398","","",N,N],[6,"P398","","",N,N],[6,"N398","","",N,N],[6,"U399","","",N,N],[6,"P399","","",N,N],[6,"N399","","",N,N],[6,"U400","","",N,N],[6,"P400","","",N,N],[6,"N400","","",N,N],[6,"U401","","",N,N],[6,"P401","","",N,N],[6,"N401","","",N,N],[6,"U402","","",N,N],[6,"P402","","",N,N],[6,"N402","","",N,N],[6,"U403","","",N,N],[6,"P403","","",N,N],[6,"N403","","",N,N],[6,"U404","","",N,N],[6,"P404","","",N,N],[6,"N404","","",N,N],[6,"U405","","",N,N],[6,"P405","","",N,N],[6,"N405","","",N,N],[6,"U406","","",N,N],[6,"P406","","",N,N],[6,"N406","","",N,N],[6,"U407","","",N,N],[6,"P407","","",N,N],[6,"N407","","",N,N],[6,"U408","","",N,N],[6,"P408","","",N,N],[6,"N408","","",N,N],[6,"U409","","",N,N],[6,"P409","","",N,N],[6,"N409","","",N,N],[6,"U410","","",N,N],[6,"P410","","",N,N],[6,"N410","","",N,N],[6,"U411","","",N,N],[6,"P411","","",N,N],[6,"N411","","",N,N],[6,"U412","","",N,N],[6,"P412","","",N,N],[6,"N412","","",N,N],[6,"U413","","",N,N],[6,"P413","","",N,N],[6,"N413","","",N,N],[6,"U414","","",N,N],[6,"P414","","",N,N],[6,"N414","","",N,N],[6,"U415","","",N,N],[6,"P415","","",N,N],[6,"N415","","",N,N],[6,"U416","","",N,N],[6,"P416","","",N,N],[6,"N416","","",N,N],[6,"U417","","",N,N],[6,"P417","","",N,N],[6,"N417","","",N,N],[6,"U418","","",N,N],[6,"P418","","",N,N],[6,"N418","","",N,N],[6,"U419","","",N,N],[6,"P419","","",N,N],[6,"N419","","",N,N],[6,"U420","","",N,N],[6,"P420","","",N,N],[6,"N420","","",N,N],[6,"U421","","",N,N],[6,"P421","","",N,N],[6,"N421","","",N,N],[6,"U422","","",N,N],[6,"P422","","",N,N],[6,"N422","","",N,N],[6,"U423","","",N,N],[6,"P423","","",N,N],[6,"N423","","",N,N],[6,"U424","","",N,N],[6,"P424","","",N,N],[6,"N424","","",N,N],[6,"U425","","",N,N],[6,"P425","","",N,N],[6,"N425","","",N,N],[6,"U426","","",N,N],[6,"P426","","",N,N],[6,"N426","","",N,N],[6,"U427","","",N,N],[6,"P427","","",N,N],[6,"N427","","",N,N],[6,"U428","","",N,N],[6,"P428","","",N,N],[6,"N428","","",N,N],[6,"U429","","",N,N],[6,"P429","","",N,N],[6,"N429","","",N,N],[6,"U430","","",N,N],[6,"P430","","",N,N],[6,"N430","","",N,N],[6,"U431","","",N,N],[6,"P431","","",N,N],[6,"N431","","",N,N],[6,"U432","","",N,N],[6,"P432","","",N,N],[6,"N432","","",N,N],[6,"U433","","",N,N],[6,"P433","","",N,N],[6,"N433","","",N,N],[6,"U434","","",N,N],[6,"P434","","",N,N],[6,"N434","","",N,N],[6,"U435","","",N,N],[6,"P435","","",N,N],[6,"N435","","",N,N],[6,"U436","","",N,N],[6,"P436","","",N,N],[6,"N436","","",N,N],[6,"U437","","",N,N],[6,"P437","","",N,N],[6,"N437","","",N,N],[6,"U438","","",N,N],[6,"P438","","",N,N],[6,"N438","","",N,N],[6,"U439","","",N,N],[6,"P439","","",N,N],[6,"N439","","",N,N],[6,"U440","","",N,N],[6,"P440","","",N,N],[6,"N440","","",N,N],[6,"U441","","",N,N],[6,"P441","","",N,N],[6,"N441","","",N,N],[6,"U442","","",N,N],[6,"P442","","",N,N],[6,"N442","","",N,N],[6,"U443","","",N,N],[6,"P443","","",N,N],[6,"N443","","",N,N],[6,"U444","","",N,N],[6,"P444","","",N,N],[6,"N444","","",N,N],[6,"U445","","",N,N],[6,"P445","","",N,N],[6,"N445","","",N,N],[6,"U446","","",N,N],[6,"P446","","",N,N],[6,"N446","","",N,N],[6,"U447","","",N,N],[6,"P447","","",N,N],[6,"N447","","",N,N],[6,"U448","","",N,N],[6,"P448","","",N,N],[6,"N448","","",N,N],[6,"U449","","",N,N],[6,"P449","","",N,N],[6,"N449","","",N,N],[6,"U450","","",N,N],[6,"P450","","",N,N],[6,"N450","","",N,N],[6,"U451","","",N,N],[6,"P451","","",N,N],[6,"N451","","",N,N],[6,"U452","","",N,N],[6,"P452","","",N,N],[6,"N452","","",N,N],[6,"U453","","",N,N],[6,"P453","","",N,N],[6,"N453","","",N,N],[6,"U454","","",N,N],[6,"P454","","",N,N],[6,"N454","","",N,N],[6,"U455","","",N,N],[6,"P455","","",N,N],[6,"N455","","",N,N],[6,"U456","","",N,N],[6,"P456","","",N,N],[6,"N456","","",N,N],[6,"U457","","",N,N],[6,"P457","","",N,N],[6,"N457","","",N,N],[6,"U458","","",N,N],[6,"P458","","",N,N],[6,"N458","","",N,N],[6,"U459","","",N,N],[6,"P459","","",N,N],[6,"N459","","",N,N],[6,"U460","","",N,N],[6,"P460","","",N,N],[6,"N460","","",N,N],[6,"U461","","",N,N],[6,"P461","","",N,N],[6,"N461","","",N,N],[6,"U462","","",N,N],[6,"P462","","",N,N],[6,"N462","","",N,N],[6,"U463","","",N,N],[6,"P463","","",N,N],[6,"N463","","",N,N],[6,"U464","","",N,N],[6,"P464","","",N,N],[6,"N464","","",N,N],[6,"U465","","",N,N],[6,"P465","","",N,N],[6,"N465","","",N,N],[6,"U466","","",N,N],[6,"P466","","",N,N],[6,"N466","","",N,N],[6,"U467","","",N,N],[6,"P467","","",N,N],[6,"N467","","",N,N],[6,"U468","","",N,N],[6,"P468","","",N,N],[6,"N468","","",N,N],[6,"U469","","",N,N],[6,"P469","","",N,N],[6,"N469","","",N,N],[6,"U470","","",N,N],[6,"P470","","",N,N],[6,"N470","","",N,N],[6,"U471","","",N,N],[6,"P471","","",N,N],[6,"N471","","",N,N],[6,"U472","","",N,N],[6,"P472","","",N,N],[6,"N472","","",N,N],[6,"U473","","",N,N],[6,"P473","","",N,N],[6,"N473","","",N,N],[6,"U474","","",N,N],[6,"P474","","",N,N],[6,"N474","","",N,N],[6,"U475","","",N,N],[6,"P475","","",N,N],[6,"N475","","",N,N],[6,"U476","","",N,N],[6,"P476","","",N,N],[6,"N476","","",N,N],[6,"U477","","",N,N],[6,"P477","","",N,N],[6,"N477","","",N,N],[6,"U478","","",N,N],[6,"P478","","",N,N],[6,"N478","","",N,N],[6,"U479","","",N,N],[6,"P479","","",N,N],[6,"N479","","",N,N],[6,"U480","","",N,N],[6,"P480","","",N,N],[6,"N480","","",N,N],[6,"U481","","",N,N],[6,"P481","","",N,N],[6,"N481","","",N,N],[6,"U482","","",N,N],[6,"P482","","",N,N],[6,"N482","","",N,N],[6,"U483","","",N,N],[6,"P483","","",N,N],[6,"N483","","",N,N],[6,"U484","","",N,N],[6,"P484","","",N,N],[6,"N484","","",N,N],[6,"U485","","",N,N],[6,"P485","","",N,N],[6,"N485","","",N,N],[6,"U486","","",N,N],[6,"P486","","",N,N],[6,"N486","","",N,N],[6,"U487","","",N,N],[6,"P487","","",N,N],[6,"N487","","",N,N],[6,"U488","","",N,N],[6,"P488","","",N,N],[6,"N488","","",N,N],[6,"U489","","",N,N],[6,"P489","","",N,N],[6,"N489","","",N,N],[6,"U490","","",N,N],[6,"P490","","",N,N],[6,"N490","","",N,N],[6,"U491","","",N,N],[6,"P491","","",N,N],[6,"N491","","",N,N],[6,"U492","","",N,N],[6,"P492","","",N,N],[6,"N492","","",N,N],[6,"U493","","",N,N],[6,"P493","","",N,N],[6,"N493","","",N,N],[6,"U494","","",N,N],[6,"P494","","",N,N],[6,"N494","","",N,N],[6,"U495","","",N,N],[6,"P495","","",N,N],[6,"N495","","",N,N],[6,"U496","","",N,N],[6,"P496","","",N,N],[6,"N496","","",N,N],[6,"U497","","",N,N],[6,"P497","","",N,N],[6,"N497","","",N,N],[6,"U498","","",N,N],[6,"P498","","",N,N],[6,"N498","","",N,N],[6,"U499","","",N,N],[6,"P499","","",N,N],[6,"N499","","",N,N],[6,"U500","","",N,N],[6,"P500","","",N,N],[6,"N500","","",N,N],[6,"U501","","",N,N],[6,"P501","","",N,N],[6,"N501","","",N,N],[6,"U502","","",N,N],[6,"P502","","",N,N],[6,"N502","","",N,N],[6,"U503","","",N,N],[6,"P503","","",N,N],[6,"N503","","",N,N],[6,"U504","","",N,N],[6,"P504","","",N,N],[6,"N504","","",N,N],[6,"U505","","",N,N],[6,"P505","","",N,N],[6,"N505","","",N,N],[6,"U506","","",N,N],[6,"P506","","",N,N],[6,"N506","","",N,N],[6,"U507","","",N,N],[6,"P507","","",N,N],[6,"N507","","",N,N],[6,"U508","","",N,N],[6,"P508","","",N,N],[6,"N508","","",N,N],[6,"U509","","",N,N],[6,"P509","","",N,N],[6,"N509","","",N,N],[6,"U510","","",N,N],[6,"P510","","",N,N],[6,"N510","","",N,N],[6,"U511","","",N,N],[6,"P511","","",N,N],[6,"N511","","",N,N],[6,"U512","","",N,N],[6,"P512","","",N,N],[6,"N512","","",N,N],[6,"U513","","",N,N],[6,"P513","","",N,N],[6,"N513","","",N,N],[6,"U514","","",N,N],[6,"P514","","",N,N],[6,"N514","","",N,N],[6,"U515","","",N,N],[6,"P515","","",N,N],[6,"N515","","",N,N],[6,"U516","","",N,N],[6,"P516","","",N,N],[6,"N516","","",N,N],[6,"U517","","",N,N],[6,"P517","","",N,N],[6,"N517","","",N,N],[6,"U518","","",N,N],[6,"P518","","",N,N],[6,"N518","","",N,N],[6,"U519","","",N,N],[6,"P519","","",N,N],[6,"N519","","",N,N],[6,"U520","","",N,N],[6,"P520","","",N,N],[6,"N520","","",N,N],[6,"U521","","",N,N],[6,"P521","","",N,N],[6,"N521","","",N,N],[6,"U522","","",N,N],[6,"P522","","",N,N],[6,"N522","","",N,N],[6,"U523","","",N,N],[6,"P523","","",N,N],[6,"N523","","",N,N],[6,"U524","","",N,N],[6,"P524","","",N,N],[6,"N524","","",N,N],[6,"U525","","",N,N],[6,"P525","","",N,N],[6,"N525","","",N,N],[6,"U526","","",N,N],[6,"P526","","",N,N],[6,"N526","","",N,N],[6,"U527","","",N,N],[6,"P527","","",N,N],[6,"N527","","",N,N],[6,"U528","","",N,N],[6,"P528","","",N,N],[6,"N528","","",N,N],[6,"U529","","",N,N],[6,"P529","","",N,N],[6,"N529","","",N,N],[6,"U530","","",N,N],[6,"P530","","",N,N],[6,"N530","","",N,N],[6,"U531","","",N,N],[6,"P531","","",N,N],[6,"N531","","",N,N],[6,"U532","","",N,N],[6,"P532","","",N,N],[6,"N532","","",N,N],[6,"U533","","",N,N],[6,"P533","","",N,N],[6,"N533","","",N,N],[6,"U534","","",N,N],[6,"P534","","",N,N],[6,"N534","","",N,N],[6,"U535","","",N,N],[6,"P535","","",N,N],[6,"N535","","",N,N],[6,"U536","","",N,N],[6,"P536","","",N,N],[6,"N536","","",N,N],[6,"U537","","",N,N],[6,"P537","","",N,N],[6,"N537","","",N,N],[6,"U538","","",N,N],[6,"P538","","",N,N],[6,"N538","","",N,N],[6,"U539","","",N,N],[6,"P539","","",N,N],[6,"N539","","",N,N],[6,"U540","","",N,N],[6,"P540","","",N,N],[6,"N540","","",N,N],[6,"U541","","",N,N],[6,"P541","","",N,N],[6,"N541","","",N,N],[6,"U542","","",N,N],[6,"P542","","",N,N],[6,"N542","","",N,N],[6,"U543","","",N,N],[6,"P543","","",N,N],[6,"N543","","",N,N],[6,"U544","","",N,N],[6,"P544","","",N,N],[6,"N544","","",N,N],[6,"U545","","",N,N],[6,"P545","","",N,N],[6,"N545","","",N,N],[6,"U546","","",N,N],[6,"P546","","",N,N],[6,"N546","","",N,N],[6,"U547","","",N,N],[6,"P547","","",N,N],[6,"N547","","",N,N],[6,"U548","","",N,N],[6,"P548","","",N,N],[6,"N548","","",N,N],[6,"U549","","",N,N],[6,"P549","","",N,N],[6,"N549","","",N,N],[6,"U550","","",N,N],[6,"P550","","",N,N],[6,"N550","","",N,N],[6,"U551","","",N,N],[6,"P551","","",N,N],[6,"N551","","",N,N],[6,"U552","","",N,N],[6,"P552","","",N,N],[6,"N552","","",N,N],[6,"U553","","",N,N],[6,"P553","","",N,N],[6,"N553","","",N,N],[6,"U554","","",N,N],[6,"P554","","",N,N],[6,"N554","","",N,N],[6,"U555","","",N,N],[6,"P555","","",N,N],[6,"N555","","",N,N],[6,"U556","","",N,N],[6,"P556","","",N,N],[6,"N556","","",N,N],[6,"U557","","",N,N],[6,"P557","","",N,N],[6,"N557","","",N,N],[6,"U558","","",N,N],[6,"P558","","",N,N],[6,"N558","","",N,N],[6,"U559","","",N,N],[6,"P559","","",N,N],[6,"N559","","",N,N],[6,"U560","","",N,N],[6,"P560","","",N,N],[6,"N560","","",N,N],[6,"U561","","",N,N],[6,"P561","","",N,N],[6,"N561","","",N,N],[6,"U562","","",N,N],[6,"P562","","",N,N],[6,"N562","","",N,N],[6,"U563","","",N,N],[6,"P563","","",N,N],[6,"N563","","",N,N],[6,"U564","","",N,N],[6,"P564","","",N,N],[6,"N564","","",N,N],[6,"U565","","",N,N],[6,"P565","","",N,N],[6,"N565","","",N,N],[6,"U566","","",N,N],[6,"P566","","",N,N],[6,"N566","","",N,N],[6,"U567","","",N,N],[6,"P567","","",N,N],[6,"N567","","",N,N],[6,"U568","","",N,N],[6,"P568","","",N,N],[6,"N568","","",N,N],[6,"U569","","",N,N],[6,"P569","","",N,N],[6,"N569","","",N,N],[6,"U570","","",N,N],[6,"P570","","",N,N],[6,"N570","","",N,N],[6,"U571","","",N,N],[6,"P571","","",N,N],[6,"N571","","",N,N],[6,"U572","","",N,N],[6,"P572","","",N,N],[6,"N572","","",N,N],[6,"U573","","",N,N],[6,"P573","","",N,N],[6,"N573","","",N,N],[6,"U574","","",N,N],[6,"P574","","",N,N],[6,"N574","","",N,N],[6,"U575","","",N,N],[6,"P575","","",N,N],[6,"N575","","",N,N],[6,"U576","","",N,N],[6,"P576","","",N,N],[6,"N576","","",N,N],[6,"U577","","",N,N],[6,"P577","","",N,N],[6,"N577","","",N,N],[6,"U578","","",N,N],[6,"P578","","",N,N],[6,"N578","","",N,N],[6,"U579","","",N,N],[6,"P579","","",N,N],[6,"N579","","",N,N],[6,"U580","","",N,N],[6,"P580","","",N,N],[6,"N580","","",N,N],[6,"U581","","",N,N],[6,"P581","","",N,N],[6,"N581","","",N,N],[6,"U582","","",N,N],[6,"P582","","",N,N],[6,"N582","","",N,N],[6,"U583","","",N,N],[6,"P583","","",N,N],[6,"N583","","",N,N],[6,"U584","","",N,N],[6,"P584","","",N,N],[6,"N584","","",N,N],[6,"U585","","",N,N],[6,"P585","","",N,N],[6,"N585","","",N,N],[6,"U586","","",N,N],[6,"P586","","",N,N],[6,"N586","","",N,N],[6,"U587","","",N,N],[6,"P587","","",N,N],[6,"N587","","",N,N],[6,"U588","","",N,N],[6,"P588","","",N,N],[6,"N588","","",N,N],[6,"U589","","",N,N],[6,"P589","","",N,N],[6,"N589","","",N,N],[6,"U590","","",N,N],[6,"P590","","",N,N],[6,"N590","","",N,N],[6,"U591","","",N,N],[6,"P591","","",N,N],[6,"N591","","",N,N],[6,"U592","","",N,N],[6,"P592","","",N,N],[6,"N592","","",N,N],[6,"U593","","",N,N],[6,"P593","","",N,N],[6,"N593","","",N,N],[6,"U594","","",N,N],[6,"P594","","",N,N],[6,"N594","","",N,N],[6,"U595","","",N,N],[6,"P595","","",N,N],[6,"N595","","",N,N],[6,"U596","","",N,N],[6,"P596","","",N,N],[6,"N596","","",N,N],[6,"U597","","",N,N],[6,"P597","","",N,N],[6,"N597","","",N,N],[6,"U598","","",N,N],[6,"P598","","",N,N],[6,"N598","","",N,N],[6,"U599","","",N,N],[6,"P599","","",N,N],[6,"N599","","",N,N],[6,"U600","","",N,N],[6,"P600","","",N,N],[6,"N600","","",N,N],[6,"U601","","",N,N],[6,"P601","","",N,N],[6,"N601","","",N,N],[6,"U602","","",N,N],[6,"P602","","",N,N],[6,"N602","","",N,N],[6,"U603","","",N,N],[6,"P603","","",N,N],[6,"N603","","",N,N],[6,"U604","","",N,N],[6,"P604","","",N,N],[6,"N604","","",N,N],[6,"U605","","",N,N],[6,"P605","","",N,N],[6,"N605","","",N,N],[6,"U606","","",N,N],[6,"P606","","",N,N],[6,"N606","","",N,N],[6,"U607","","",N,N],[6,"P607","","",N,N],[6,"N607","","",N,N],[6,"U608","","",N,N],[6,"P608","","",N,N],[6,"N608","","",N,N],[6,"U609","","",N,N],[6,"P609","","",N,N],[6,"N609","","",N,N],[6,"U610","","",N,N],[6,"P610","","",N,N],[6,"N610","","",N,N],[6,"U611","","",N,N],[6,"P611","","",N,N],[6,"N611","","",N,N],[6,"U612","","",N,N],[6,"P612","","",N,N],[6,"N612","","",N,N],[6,"U613","","",N,N],[6,"P613","","",N,N],[6,"N613","","",N,N],[6,"U614","","",N,N],[6,"P614","","",N,N],[6,"N614","","",N,N],[6,"U615","","",N,N],[6,"P615","","",N,N],[6,"N615","","",N,N],[6,"U616","","",N,N],[6,"P616","","",N,N],[6,"N616","","",N,N],[6,"U617","","",N,N],[6,"P617","","",N,N],[6,"N617","","",N,N],[6,"U618","","",N,N],[6,"P618","","",N,N],[6,"N618","","",N,N],[6,"U619","","",N,N],[6,"P619","","",N,N],[6,"N619","","",N,N],[6,"U620","","",N,N],[6,"P620","","",N,N],[6,"N620","","",N,N],[6,"U621","","",N,N],[6,"P621","","",N,N],[6,"N621","","",N,N],[6,"U622","","",N,N],[6,"P622","","",N,N],[6,"N622","","",N,N],[6,"U623","","",N,N],[6,"P623","","",N,N],[6,"N623","","",N,N],[6,"U624","","",N,N],[6,"P624","","",N,N],[6,"N624","","",N,N],[6,"U625","","",N,N],[6,"P625","","",N,N],[6,"N625","","",N,N],[6,"U626","","",N,N],[6,"P626","","",N,N],[6,"N626","","",N,N],[6,"U627","","",N,N],[6,"P627","","",N,N],[6,"N627","","",N,N],[6,"U628","","",N,N],[6,"P628","","",N,N],[6,"N628","","",N,N],[6,"U629","","",N,N],[6,"P629","","",N,N],[6,"N629","","",N,N],[6,"U630","","",N,N],[6,"P630","","",N,N],[6,"N630","","",N,N],[6,"U631","","",N,N],[6,"P631","","",N,N],[6,"N631","","",N,N],[6,"U632","","",N,N],[6,"P632","","",N,N],[6,"N632","","",N,N],[6,"U633","","",N,N],[6,"P633","","",N,N],[6,"N633","","",N,N],[6,"U634","","",N,N],[6,"P634","","",N,N],[6,"N634","","",N,N],[6,"U635","","",N,N],[6,"P635","","",N,N],[6,"N635","","",N,N],[6,"U636","","",N,N],[6,"P636","","",N,N],[6,"N636","","",N,N],[6,"U637","","",N,N],[6,"P637","","",N,N],[6,"N637","","",N,N],[6,"U638","","",N,N],[6,"P638","","",N,N],[6,"N638","","",N,N],[6,"U639","","",N,N],[6,"P639","","",N,N],[6,"N639","","",N,N],[6,"U640","","",N,N],[6,"P640","","",N,N],[6,"N640","","",N,N],[6,"U641","","",N,N],[6,"P641","","",N,N],[6,"N641","","",N,N],[6,"U642","","",N,N],[6,"P642","","",N,N],[6,"N642","","",N,N],[6,"U643","","",N,N],[6,"P643","","",N,N],[6,"N643","","",N,N],[6,"U644","","",N,N],[6,"P644","","",N,N],[6,"N644","","",N,N],[6,"U645","","",N,N],[6,"P645","","",N,N],[6,"N645","","",N,N],[6,"U646","","",N,N],[6,"P646","","",N,N],[6,"N646","","",N,N],[6,"U647","","",N,N],[6,"P647","","",N,N],[6,"N647","","",N,N],[6,"U648","","",N,N],[6,"P648","","",N,N],[6,"N648","","",N,N],[6,"U649","","",N,N],[6,"P649","","",N,N],[6,"N649","","",N,N],[6,"U650","","",N,N],[6,"P650","","",N,N],[6,"N650","","",N,N],[6,"U651","","",N,N],[6,"P651","","",N,N],[6,"N651","","",N,N],[6,"U652","","",N,N],[6,"P652","","",N,N],[6,"N652","","",N,N],[6,"U653","","",N,N],[6,"P653","","",N,N],[6,"N653","","",N,N],[6,"U654","","",N,N],[6,"P654","","",N,N],[6,"N654","","",N,N],[6,"U655","","",N,N],[6,"P655","","",N,N],[6,"N655","","",N,N],[6,"U656","","",N,N],[6,"P656","","",N,N],[6,"N656","","",N,N],[6,"U657","","",N,N],[6,"P657","","",N,N],[6,"N657","","",N,N],[6,"U658","","",N,N],[6,"P658","","",N,N],[6,"N658","","",N,N],[6,"U659","","",N,N],[6,"P659","","",N,N],[6,"N659","","",N,N],[6,"U660","","",N,N],[6,"P660","","",N,N],[6,"N660","","",N,N],[6,"U661","","",N,N],[6,"P661","","",N,N],[6,"N661","","",N,N],[6,"U662","","",N,N],[6,"P662","","",N,N],[6,"N662","","",N,N],[6,"U663","","",N,N],[6,"P663","","",N,N],[6,"N663","","",N,N],[6,"U664","","",N,N],[6,"P664","","",N,N],[6,"N664","","",N,N],[6,"U665","","",N,N],[6,"P665","","",N,N],[6,"N665","","",N,N],[6,"U666","","",N,N],[6,"P666","","",N,N],[6,"N666","","",N,N],[6,"U667","","",N,N],[6,"P667","","",N,N],[6,"N667","","",N,N],[6,"U668","","",N,N],[6,"P668","","",N,N],[6,"N668","","",N,N],[6,"U669","","",N,N],[6,"P669","","",N,N],[6,"N669","","",N,N],[6,"U670","","",N,N],[6,"P670","","",N,N],[6,"N670","","",N,N],[6,"U671","","",N,N],[6,"P671","","",N,N],[6,"N671","","",N,N],[6,"U672","","",N,N],[6,"P672","","",N,N],[6,"N672","","",N,N],[6,"U673","","",N,N],[6,"P673","","",N,N],[6,"N673","","",N,N],[6,"U674","","",N,N],[6,"P674","","",N,N],[6,"N674","","",N,N],[6,"U675","","",N,N],[6,"P675","","",N,N],[6,"N675","","",N,N],[6,"U676","","",N,N],[6,"P676","","",N,N],[6,"N676","","",N,N],[6,"U677","","",N,N],[6,"P677","","",N,N],[6,"N677","","",N,N],[6,"U678","","",N,N],[6,"P678","","",N,N],[6,"N678","","",N,N],[6,"U679","","",N,N],[6,"P679","","",N,N],[6,"N679","","",N,N],[6,"U680","","",N,N],[6,"P680","","",N,N],[6,"N680","","",N,N],[6,"U681","","",N,N],[6,"P681","","",N,N],[6,"N681","","",N,N],[6,"U682","","",N,N],[6,"P682","","",N,N],[6,"N682","","",N,N],[6,"U683","","",N,N],[6,"P683","","",N,N],[6,"N683","","",N,N],[6,"U684","","",N,N],[6,"P684","","",N,N],[6,"N684","","",N,N],[6,"U685","","",N,N],[6,"P685","","",N,N],[6,"N685","","",N,N],[6,"U686","","",N,N],[6,"P686","","",N,N],[6,"N686","","",N,N],[6,"U687","","",N,N],[6,"P687","","",N,N],[6,"N687","","",N,N],[6,"U688","","",N,N],[6,"P688","","",N,N],[6,"N688","","",N,N],[6,"U689","","",N,N],[6,"P689","","",N,N],[6,"N689","","",N,N],[6,"U690","","",N,N],[6,"P690","","",N,N],[6,"N690","","",N,N],[6,"U691","","",N,N],[6,"P691","","",N,N],[6,"N691","","",N,N],[6,"U692","","",N,N],[6,"P692","","",N,N],[6,"N692","","",N,N],[6,"U693","","",N,N],[6,"P693","","",N,N],[6,"N693","","",N,N],[6,"U694","","",N,N],[6,"P694","","",N,N],[6,"N694","","",N,N],[6,"U695","","",N,N],[6,"P695","","",N,N],[6,"N695","","",N,N],[6,"U696","","",N,N],[6,"P696","","",N,N],[6,"N696","","",N,N],[6,"U697","","",N,N],[6,"P697","","",N,N],[6,"N697","","",N,N],[6,"U698","","",N,N],[6,"P698","","",N,N],[6,"N698","","",N,N],[6,"U699","","",N,N],[6,"P699","","",N,N],[6,"N699","","",N,N],[6,"U700","","",N,N],[6,"P700","","",N,N],[6,"N700","","",N,N],[6,"U701","","",N,N],[6,"P701","","",N,N],[6,"N701","","",N,N],[6,"U702","","",N,N],[6,"P702","","",N,N],[6,"N702","","",N,N],[6,"U703","","",N,N],[6,"P703","","",N,N],[6,"N703","","",N,N],[6,"U704","","",N,N],[6,"P704","","",N,N],[6,"N704","","",N,N],[6,"U705","","",N,N],[6,"P705","","",N,N],[6,"N705","","",N,N],[6,"U706","","",N,N],[6,"P706","","",N,N],[6,"N706","","",N,N],[6,"U707","","",N,N],[6,"P707","","",N,N],[6,"N707","","",N,N],[6,"U708","","",N,N],[6,"P708","","",N,N],[6,"N708","","",N,N],[6,"U709","","",N,N],[6,"P709","","",N,N],[6,"N709","","",N,N],[6,"U710","","",N,N],[6,"P710","","",N,N],[6,"N710","","",N,N],[6,"U711","","",N,N],[6,"P711","","",N,N],[6,"N711","","",N,N],[6,"U712","","",N,N],[6,"P712","","",N,N],[6,"N712","","",N,N],[6,"U713","","",N,N],[6,"P713","","",N,N],[6,"N713","","",N,N],[6,"U714","","",N,N],[6,"P714","","",N,N],[6,"N714","","",N,N],[6,"U715","","",N,N],[6,"P715","","",N,N],[6,"N715","","",N,N],[6,"U716","","",N,N],[6,"P716","","",N,N],[6,"N716","","",N,N],[6,"U717","","",N,N],[6,"P717","","",N,N],[6,"N717","","",N,N],[6,"U718","","",N,N],[6,"P718","","",N,N],[6,"N718","","",N,N],[6,"U719","","",N,N],[6,"P719","","",N,N],[6,"N719","","",N,N],[6,"U720","","",N,N],[6,"P720","","",N,N],[6,"N720","","",N,N],[6,"U721","","",N,N],[6,"P721","","",N,N],[6,"N721","","",N,N],[6,"U722","","",N,N],[6,"P722","","",N,N],[6,"N722","","",N,N],[6,"U723","","",N,N],[6,"P723","","",N,N],[6,"N723","","",N,N],[6,"U724","","",N,N],[6,"P724","","",N,N],[6,"N724","","",N,N],[6,"U725","","",N,N],[6,"P725","","",N,N],[6,"N725","","",N,N],[6,"U726","","",N,N],[6,"P726","","",N,N],[6,"N726","","",N,N],[6,"U727","","",N,N],[6,"P727","","",N,N],[6,"N727","","",N,N],[6,"U728","","",N,N],[6,"P728","","",N,N],[6,"N728","","",N,N],[6,"U729","","",N,N],[6,"P729","","",N,N],[6,"N729","","",N,N],[6,"U730","","",N,N],[6,"P730","","",N,N],[6,"N730","","",N,N],[6,"U731","","",N,N],[6,"P731","","",N,N],[6,"N731","","",N,N],[6,"U732","","",N,N],[6,"P732","","",N,N],[6,"N732","","",N,N],[6,"U733","","",N,N],[6,"P733","","",N,N],[6,"N733","","",N,N],[6,"U734","","",N,N],[6,"P734","","",N,N],[6,"N734","","",N,N],[6,"U735","","",N,N],[6,"P735","","",N,N],[6,"N735","","",N,N],[6,"U736","","",N,N],[6,"P736","","",N,N],[6,"N736","","",N,N],[6,"U737","","",N,N],[6,"P737","","",N,N],[6,"N737","","",N,N],[6,"U738","","",N,N],[6,"P738","","",N,N],[6,"N738","","",N,N],[6,"U739","","",N,N],[6,"P739","","",N,N],[6,"N739","","",N,N],[6,"U740","","",N,N],[6,"P740","","",N,N],[6,"N740","","",N,N],[6,"U741","","",N,N],[6,"P741","","",N,N],[6,"N741","","",N,N],[6,"U742","","",N,N],[6,"P742","","",N,N],[6,"N742","","",N,N],[6,"U743","","",N,N],[6,"P743","","",N,N],[6,"N743","","",N,N],[6,"U744","","",N,N],[6,"P744","","",N,N],[6,"N744","","",N,N],[6,"U745","","",N,N],[6,"P745","","",N,N],[6,"N745","","",N,N],[6,"U746","","",N,N],[6,"P746","","",N,N],[6,"N746","","",N,N],[6,"U747","","",N,N],[6,"P747","","",N,N],[6,"N747","","",N,N],[6,"U748","","",N,N],[6,"P748","","",N,N],[6,"N748","","",N,N],[6,"U749","","",N,N],[6,"P749","","",N,N],[6,"N749","","",N,N],[6,"U750","","",N,N],[6,"P750","","",N,N],[6,"N750","","",N,N],[6,"U751","","",N,N],[6,"P751","","",N,N],[6,"N751","","",N,N],[6,"U752","","",N,N],[6,"P752","","",N,N],[6,"N752","","",N,N],[6,"U753","","",N,N],[6,"P753","","",N,N],[6,"N753","","",N,N],[6,"U754","","",N,N],[6,"P754","","",N,N],[6,"N754","","",N,N],[6,"U755","","",N,N],[6,"P755","","",N,N],[6,"N755","","",N,N],[6,"U756","","",N,N],[6,"P756","","",N,N],[6,"N756","","",N,N],[6,"U757","","",N,N],[6,"P757","","",N,N],[6,"N757","","",N,N],[6,"U758","","",N,N],[6,"P758","","",N,N],[6,"N758","","",N,N],[6,"U759","","",N,N],[6,"P759","","",N,N],[6,"N759","","",N,N],[6,"U760","","",N,N],[6,"P760","","",N,N],[6,"N760","","",N,N],[6,"U761","","",N,N],[6,"P761","","",N,N],[6,"N761","","",N,N],[6,"U762","","",N,N],[6,"P762","","",N,N],[6,"N762","","",N,N],[6,"U763","","",N,N],[6,"P763","","",N,N],[6,"N763","","",N,N],[6,"U764","","",N,N],[6,"P764","","",N,N],[6,"N764","","",N,N],[6,"U765","","",N,N],[6,"P765","","",N,N],[6,"N765","","",N,N],[6,"U766","","",N,N],[6,"P766","","",N,N],[6,"N766","","",N,N],[6,"U767","","",N,N],[6,"P767","","",N,N],[6,"N767","","",N,N],[6,"U768","","",N,N],[6,"P768","","",N,N],[6,"N768","","",N,N],[6,"U769","","",N,N],[6,"P769","","",N,N],[6,"N769","","",N,N],[6,"U770","","",N,N],[6,"P770","","",N,N],[6,"N770","","",N,N],[6,"U771","","",N,N],[6,"P771","","",N,N],[6,"N771","","",N,N],[6,"U772","","",N,N],[6,"P772","","",N,N],[6,"N772","","",N,N],[6,"U773","","",N,N],[6,"P773","","",N,N],[6,"N773","","",N,N],[6,"U774","","",N,N],[6,"P774","","",N,N],[6,"N774","","",N,N],[6,"U775","","",N,N],[6,"P775","","",N,N],[6,"N775","","",N,N],[6,"U776","","",N,N],[6,"P776","","",N,N],[6,"N776","","",N,N],[6,"U777","","",N,N],[6,"P777","","",N,N],[6,"N777","","",N,N],[6,"U778","","",N,N],[6,"P778","","",N,N],[6,"N778","","",N,N],[6,"U779","","",N,N],[6,"P779","","",N,N],[6,"N779","","",N,N],[6,"U780","","",N,N],[6,"P780","","",N,N],[6,"N780","","",N,N],[6,"U781","","",N,N],[6,"P781","","",N,N],[6,"N781","","",N,N],[6,"U782","","",N,N],[6,"P782","","",N,N],[6,"N782","","",N,N],[6,"U783","","",N,N],[6,"P783","","",N,N],[6,"N783","","",N,N],[6,"U784","","",N,N],[6,"P784","","",N,N],[6,"N784","","",N,N],[6,"U785","","",N,N],[6,"P785","","",N,N],[6,"N785","","",N,N],[6,"U786","","",N,N],[6,"P786","","",N,N],[6,"N786","","",N,N],[6,"U787","","",N,N],[6,"P787","","",N,N],[6,"N787","","",N,N],[6,"U788","","",N,N],[6,"P788","","",N,N],[6,"N788","","",N,N],[6,"U789","","",N,N],[6,"P789","","",N,N],[6,"N789","","",N,N],[6,"U790","","",N,N],[6,"P790","","",N,N],[6,"N790","","",N,N],[6,"U791","","",N,N],[6,"P791","","",N,N],[6,"N791","","",N,N],[6,"U792","","",N,N],[6,"P792","","",N,N],[6,"N792","","",N,N],[6,"U793","","",N,N],[6,"P793","","",N,N],[6,"N793","","",N,N],[6,"U794","","",N,N],[6,"P794","","",N,N],[6,"N794","","",N,N],[6,"U795","","",N,N],[6,"P795","","",N,N],[6,"N795","","",N,N],[6,"U796","","",N,N],[6,"P796","","",N,N],[6,"N796","","",N,N],[6,"U797","","",N,N],[6,"P797","","",N,N],[6,"N797","","",N,N],[6,"U798","","",N,N],[6,"P798","","",N,N],[6,"N798","","",N,N],[6,"U799","","",N,N],[6,"P799","","",N,N],[6,"N799","","",N,N],[6,"U800","","",N,N],[6,"P800","","",N,N],[6,"N800","","",N,N],[6,"U801","","",N,N],[6,"P801","","",N,N],[6,"N801","","",N,N],[6,"U802","","",N,N],[6,"P802","","",N,N],[6,"N802","","",N,N],[6,"U803","","",N,N],[6,"P803","","",N,N],[6,"N803","","",N,N],[6,"U804","","",N,N],[6,"P804","","",N,N],[6,"N804","","",N,N],[6,"U805","","",N,N],[6,"P805","","",N,N],[6,"N805","","",N,N],[6,"U806","","",N,N],[6,"P806","","",N,N],[6,"N806","","",N,N],[6,"U807","","",N,N],[6,"P807","","",N,N],[6,"N807","","",N,N],[6,"U808","","",N,N],[6,"P808","","",N,N],[6,"N808","","",N,N],[6,"U809","","",N,N],[6,"P809","","",N,N],[6,"N809","","",N,N],[6,"U810","","",N,N],[6,"P810","","",N,N],[6,"N810","","",N,N],[6,"U811","","",N,N],[6,"P811","","",N,N],[6,"N811","","",N,N],[6,"U812","","",N,N],[6,"P812","","",N,N],[6,"N812","","",N,N],[6,"U813","","",N,N],[6,"P813","","",N,N],[6,"N813","","",N,N],[6,"U814","","",N,N],[6,"P814","","",N,N],[6,"N814","","",N,N],[6,"U815","","",N,N],[6,"P815","","",N,N],[6,"N815","","",N,N],[6,"U816","","",N,N],[6,"P816","","",N,N],[6,"N816","","",N,N],[6,"U817","","",N,N],[6,"P817","","",N,N],[6,"N817","","",N,N],[6,"U818","","",N,N],[6,"P818","","",N,N],[6,"N818","","",N,N],[6,"U819","","",N,N],[6,"P819","","",N,N],[6,"N819","","",N,N],[6,"U820","","",N,N],[6,"P820","","",N,N],[6,"N820","","",N,N],[6,"U821","","",N,N],[6,"P821","","",N,N],[6,"N821","","",N,N],[6,"U822","","",N,N],[6,"P822","","",N,N],[6,"N822","","",N,N],[6,"U823","","",N,N],[6,"P823","","",N,N],[6,"N823","","",N,N],[6,"U824","","",N,N],[6,"P824","","",N,N],[6,"N824","","",N,N],[6,"U825","","",N,N],[6,"P825","","",N,N],[6,"N825","","",N,N],[6,"U826","","",N,N],[6,"P826","","",N,N],[6,"N826","","",N,N],[6,"U827","","",N,N],[6,"P827","","",N,N],[6,"N827","","",N,N],[6,"U828","","",N,N],[6,"P828","","",N,N],[6,"N828","","",N,N],[6,"U829","","",N,N],[6,"P829","","",N,N],[6,"N829","","",N,N],[6,"U830","","",N,N],[6,"P830","","",N,N],[6,"N830","","",N,N],[6,"U831","","",N,N],[6,"P831","","",N,N],[6,"N831","","",N,N],[6,"U832","","",N,N],[6,"P832","","",N,N],[6,"N832","","",N,N],[6,"U833","","",N,N],[6,"P833","","",N,N],[6,"N833","","",N,N],[6,"U834","","",N,N],[6,"P834","","",N,N],[6,"N834","","",N,N],[6,"U835","","",N,N],[6,"P835","","",N,N],[6,"N835","","",N,N],[6,"U836","","",N,N],[6,"P836","","",N,N],[6,"N836","","",N,N],[6,"U837","","",N,N],[6,"P837","","",N,N],[6,"N837","","",N,N],[6,"U838","","",N,N],[6,"P838","","",N,N],[6,"N838","","",N,N],[6,"U839","","",N,N],[6,"P839","","",N,N],[6,"N839","","",N,N],[6,"U840","","",N,N],[6,"P840","","",N,N],[6,"N840","","",N,N],[6,"U841","","",N,N],[6,"P841","","",N,N],[6,"N841","","",N,N],[6,"U842","","",N,N],[6,"P842","","",N,N],[6,"N842","","",N,N],[6,"U843","","",N,N],[6,"P843","","",N,N],[6,"N843","","",N,N],[6,"U844","","",N,N],[6,"P844","","",N,N],[6,"N844","","",N,N],[6,"U845","","",N,N],[6,"P845","","",N,N],[6,"N845","","",N,N],[6,"U846","","",N,N],[6,"P846","","",N,N],[6,"N846","","",N,N],[6,"U847","","",N,N],[6,"P847","","",N,N],[6,"N847","","",N,N],[6,"U848","","",N,N],[6,"P848","","",N,N],[6,"N848","","",N,N],[6,"U849","","",N,N],[6,"P849","","",N,N],[6,"N849","","",N,N],[6,"U850","","",N,N],[6,"P850","","",N,N],[6,"N850","","",N,N],[6,"U851","","",N,N],[6,"P851","","",N,N],[6,"N851","","",N,N],[6,"U852","","",N,N],[6,"P852","","",N,N],[6,"N852","","",N,N],[6,"U853","","",N,N],[6,"P853","","",N,N],[6,"N853","","",N,N],[6,"U854","","",N,N],[6,"P854","","",N,N],[6,"N854","","",N,N],[6,"U855","","",N,N],[6,"P855","","",N,N],[6,"N855","","",N,N],[6,"U856","","",N,N],[6,"P856","","",N,N],[6,"N856","","",N,N],[6,"U857","","",N,N],[6,"P857","","",N,N],[6,"N857","","",N,N],[6,"U858","","",N,N],[6,"P858","","",N,N],[6,"N858","","",N,N],[6,"U859","","",N,N],[6,"P859","","",N,N],[6,"N859","","",N,N],[6,"U860","","",N,N],[6,"P860","","",N,N],[6,"N860","","",N,N],[6,"U861","","",N,N],[6,"P861","","",N,N],[6,"N861","","",N,N],[6,"U862","","",N,N],[6,"P862","","",N,N],[6,"N862","","",N,N],[6,"U863","","",N,N],[6,"P863","","",N,N],[6,"N863","","",N,N],[6,"U864","","",N,N],[6,"P864","","",N,N],[6,"N864","","",N,N],[6,"U865","","",N,N],[6,"P865","","",N,N],[6,"N865","","",N,N],[6,"U866","","",N,N],[6,"P866","","",N,N],[6,"N866","","",N,N],[6,"U867","","",N,N],[6,"P867","","",N,N],[6,"N867","","",N,N],[6,"U868","","",N,N],[6,"P868","","",N,N],[6,"N868","","",N,N],[6,"U869","","",N,N],[6,"P869","","",N,N],[6,"N869","","",N,N],[6,"U870","","",N,N],[6,"P870","","",N,N],[6,"N870","","",N,N],[6,"U871","","",N,N],[6,"P871","","",N,N],[6,"N871","","",N,N],[6,"U872","","",N,N],[6,"P872","","",N,N],[6,"N872","","",N,N],[6,"U873","","",N,N],[6,"P873","","",N,N],[6,"N873","","",N,N],[6,"U874","","",N,N],[6,"P874","","",N,N],[6,"N874","","",N,N],[6,"U875","","",N,N],[6,"P875","","",N,N],[6,"N875","","",N,N],[6,"U876","","",N,N],[6,"P876","","",N,N],[6,"N876","","",N,N],[6,"U877","","",N,N],[6,"P877","","",N,N],[6,"N877","","",N,N],[6,"U878","","",N,N],[6,"P878","","",N,N],[6,"N878","","",N,N],[6,"U879","","",N,N],[6,"P879","","",N,N],[6,"N879","","",N,N],[6,"U880","","",N,N],[6,"P880","","",N,N],[6,"N880","","",N,N],[6,"U881","","",N,N],[6,"P881","","",N,N],[6,"N881","","",N,N],[6,"U882","","",N,N],[6,"P882","","",N,N],[6,"N882","","",N,N],[6,"U883","","",N,N],[6,"P883","","",N,N],[6,"N883","","",N,N],[6,"U884","","",N,N],[6,"P884","","",N,N],[6,"N884","","",N,N],[6,"U885","","",N,N],[6,"P885","","",N,N],[6,"N885","","",N,N],[6,"U886","","",N,N],[6,"P886","","",N,N],[6,"N886","","",N,N],[6,"U887","","",N,N],[6,"P887","","",N,N],[6,"N887","","",N,N],[6,"U888","","",N,N],[6,"P888","","",N,N],[6,"N888","","",N,N],[6,"U889","","",N,N],[6,"P889","","",N,N],[6,"N889","","",N,N],[6,"U890","","",N,N],[6,"P890","","",N,N],[6,"N890","","",N,N],[6,"U891","","",N,N],[6,"P891","","",N,N],[6,"N891","","",N,N],[6,"U892","","",N,N],[6,"P892","","",N,N],[6,"N892","","",N,N],[6,"U893","","",N,N],[6,"P893","","",N,N],[6,"N893","","",N,N],[6,"U894","","",N,N],[6,"P894","","",N,N],[6,"N894","","",N,N],[6,"U895","","",N,N],[6,"P895","","",N,N],[6,"N895","","",N,N],[6,"U896","","",N,N],[6,"P896","","",N,N],[6,"N896","","",N,N],[6,"U897","","",N,N],[6,"P897","","",N,N],[6,"N897","","",N,N],[6,"U898","","",N,N],[6,"P898","","",N,N],[6,"N898","","",N,N],[6,"U899","","",N,N],[6,"P899","","",N,N],[6,"N899","","",N,N],[6,"U900","","",N,N],[6,"P900","","",N,N],[6,"N900","","",N,N],[6,"U901","","",N,N],[6,"P901","","",N,N],[6,"N901","","",N,N],[6,"U902","","",N,N],[6,"P902","","",N,N],[6,"N902","","",N,N],[6,"U903","","",N,N],[6,"P903","","",N,N],[6,"N903","","",N,N],[6,"U904","","",N,N],[6,"P904","","",N,N],[6,"N904","","",N,N],[6,"U905","","",N,N],[6,"P905","","",N,N],[6,"N905","","",N,N],[6,"U906","","",N,N],[6,"P906","","",N,N],[6,"N906","","",N,N],[6,"U907","","",N,N],[6,"P907","","",N,N],[6,"N907","","",N,N],[6,"U908","","",N,N],[6,"P908","","",N,N],[6,"N908","","",N,N],[6,"U909","","",N,N],[6,"P909","","",N,N],[6,"N909","","",N,N],[6,"U910","","",N,N],[6,"P910","","",N,N],[6,"N910","","",N,N],[6,"U911","","",N,N],[6,"P911","","",N,N],[6,"N911","","",N,N],[6,"U912","","",N,N],[6,"P912","","",N,N],[6,"N912","","",N,N],[6,"U913","","",N,N],[6,"P913","","",N,N],[6,"N913","","",N,N],[6,"U914","","",N,N],[6,"P914","","",N,N],[6,"N914","","",N,N],[6,"U915","","",N,N],[6,"P915","","",N,N],[6,"N915","","",N,N],[6,"U916","","",N,N],[6,"P916","","",N,N],[6,"N916","","",N,N],[6,"U917","","",N,N],[6,"P917","","",N,N],[6,"N917","","",N,N],[6,"U918","","",N,N],[6,"P918","","",N,N],[6,"N918","","",N,N],[6,"U919","","",N,N],[6,"P919","","",N,N],[6,"N919","","",N,N],[6,"U920","","",N,N],[6,"P920","","",N,N],[6,"N920","","",N,N],[6,"U921","","",N,N],[6,"P921","","",N,N],[6,"N921","","",N,N],[6,"U922","","",N,N],[6,"P922","","",N,N],[6,"N922","","",N,N],[6,"U923","","",N,N],[6,"P923","","",N,N],[6,"N923","","",N,N],[6,"U924","","",N,N],[6,"P924","","",N,N],[6,"N924","","",N,N],[6,"U925","","",N,N],[6,"P925","","",N,N],[6,"N925","","",N,N],[6,"U926","","",N,N],[6,"P926","","",N,N],[6,"N926","","",N,N],[6,"U927","","",N,N],[6,"P927","","",N,N],[6,"N927","","",N,N],[6,"U928","","",N,N],[6,"P928","","",N,N],[6,"N928","","",N,N],[6,"U929","","",N,N],[6,"P929","","",N,N],[6,"N929","","",N,N],[6,"U930","","",N,N],[6,"P930","","",N,N],[6,"N930","","",N,N],[6,"U931","","",N,N],[6,"P931","","",N,N],[6,"N931","","",N,N],[6,"U932","","",N,N],[6,"P932","","",N,N],[6,"N932","","",N,N],[6,"U933","","",N,N],[6,"P933","","",N,N],[6,"N933","","",N,N],[6,"U934","","",N,N],[6,"P934","","",N,N],[6,"N934","","",N,N],[6,"U935","","",N,N],[6,"P935","","",N,N],[6,"N935","","",N,N],[6,"U936","","",N,N],[6,"P936","","",N,N],[6,"N936","","",N,N],[6,"U937","","",N,N],[6,"P937","","",N,N],[6,"N937","","",N,N],[6,"U938","","",N,N],[6,"P938","","",N,N],[6,"N938","","",N,N],[6,"U939","","",N,N],[6,"P939","","",N,N],[6,"N939","","",N,N],[6,"U940","","",N,N],[6,"P940","","",N,N],[6,"N940","","",N,N],[6,"U941","","",N,N],[6,"P941","","",N,N],[6,"N941","","",N,N],[6,"U942","","",N,N],[6,"P942","","",N,N],[6,"N942","","",N,N],[6,"U943","","",N,N],[6,"P943","","",N,N],[6,"N943","","",N,N],[6,"U944","","",N,N],[6,"P944","","",N,N],[6,"N944","","",N,N],[6,"U945","","",N,N],[6,"P945","","",N,N],[6,"N945","","",N,N],[6,"U946","","",N,N],[6,"P946","","",N,N],[6,"N946","","",N,N],[6,"U947","","",N,N],[6,"P947","","",N,N],[6,"N947","","",N,N],[6,"U948","","",N,N],[6,"P948","","",N,N],[6,"N948","","",N,N],[6,"U949","","",N,N],[6,"P949","","",N,N],[6,"N949","","",N,N],[6,"U950","","",N,N],[6,"P950","","",N,N],[6,"N950","","",N,N],[6,"U951","","",N,N],[6,"P951","","",N,N],[6,"N951","","",N,N],[6,"U952","","",N,N],[6,"P952","","",N,N],[6,"N952","","",N,N],[6,"U953","","",N,N],[6,"P953","","",N,N],[6,"N953","","",N,N],[6,"U954","","",N,N],[6,"P954","","",N,N],[6,"N954","","",N,N],[6,"U955","","",N,N],[6,"P955","","",N,N],[6,"N955","","",N,N],[6,"U956","","",N,N],[6,"P956","","",N,N],[6,"N956","","",N,N],[6,"U957","","",N,N],[6,"P957","","",N,N],[6,"N957","","",N,N],[6,"U958","","",N,N],[6,"P958","","",N,N],[6,"N958","","",N,N],[6,"U959","","",N,N],[6,"P959","","",N,N],[6,"N959","","",N,N],[6,"U960","","",N,N],[6,"P960","","",N,N],[6,"N960","","",N,N],[6,"U961","","",N,N],[6,"P961","","",N,N],[6,"N961","","",N,N],[6,"U962","","",N,N],[6,"P962","","",N,N],[6,"N962","","",N,N],[6,"U963","","",N,N],[6,"P963","","",N,N],[6,"N963","","",N,N],[6,"U964","","",N,N],[6,"P964","","",N,N],[6,"N964","","",N,N],[6,"U965","","",N,N],[6,"P965","","",N,N],[6,"N965","","",N,N],[6,"U966","","",N,N],[6,"P966","","",N,N],[6,"N966","","",N,N],[6,"U967","","",N,N],[6,"P967","","",N,N],[6,"N967","","",N,N],[6,"U968","","",N,N],[6,"P968","","",N,N],[6,"N968","","",N,N],[6,"U969","","",N,N],[6,"P969","","",N,N],[6,"N969","","",N,N],[6,"U970","","",N,N],[6,"P970","","",N,N],[6,"N970","","",N,N],[6,"U971","","",N,N],[6,"P971","","",N,N],[6,"N971","","",N,N],[6,"U972","","",N,N],[6,"P972","","",N,N],[6,"N972","","",N,N],[6,"U973","","",N,N],[6,"P973","","",N,N],[6,"N973","","",N,N],[6,"U974","","",N,N],[6,"P974","","",N,N],[6,"N974","","",N,N],[6,"U975","","",N,N],[6,"P975","","",N,N],[6,"N975","","",N,N],[6,"U976","","",N,N],[6,"P976","","",N,N],[6,"N976","","",N,N],[6,"U977","","",N,N],[6,"P977","","",N,N],[6,"N977","","",N,N],[6,"U978","","",N,N],[6,"P978","","",N,N],[6,"N978","","",N,N],[6,"U979","","",N,N],[6,"P979","","",N,N],[6,"N979","","",N,N],[6,"U980","","",N,N],[6,"P980","","",N,N],[6,"N980","","",N,N],[6,"U981","","",N,N],[6,"P981","","",N,N],[6,"N981","","",N,N],[6,"U982","","",N,N],[6,"P982","","",N,N],[6,"N982","","",N,N],[6,"U983","","",N,N],[6,"P983","","",N,N],[6,"N983","","",N,N],[6,"U984","","",N,N],[6,"P984","","",N,N],[6,"N984","","",N,N],[6,"U985","","",N,N],[6,"P985","","",N,N],[6,"N985","","",N,N],[6,"U986","","",N,N],[6,"P986","","",N,N],[6,"N986","","",N,N],[6,"U987","","",N,N],[6,"P987","","",N,N],[6,"N987","","",N,N],[6,"U988","","",N,N],[6,"P988","","",N,N],[6,"N988","","",N,N],[6,"U989","","",N,N],[6,"P989","","",N,N],[6,"N989","","",N,N],[6,"U990","","",N,N],[6,"P990","","",N,N],[6,"N990","","",N,N],[6,"U991","","",N,N],[6,"P991","","",N,N],[6,"N991","","",N,N],[6,"U992","","",N,N],[6,"P992","","",N,N],[6,"N992","","",N,N],[6,"U993","","",N,N],[6,"P993","","",N,N],[6,"N993","","",N,N],[6,"U994","","",N,N],[6,"P994","","",N,N],[6,"N994","","",N,N],[6,"U995","","",N,N],[6,"P995","","",N,N],[6,"N995","","",N,N],[6,"U996","","",N,N],[6,"P996","","",N,N],[6,"N996","","",N,N],[6,"U997","","",N,N],[6,"P997","","",N,N],[6,"N997","","",N,N],[6,"U998","","",N,N],[6,"P998","","",N,N],[6,"N998","","",N,N],[6,"U999","","",N,N],[6,"P999","","",N,N],[6,"N999","","",N,N],[6,"U1000","","",N,N],[6,"P1000","","",N,N],[6,"N1000","","",N,N],[6,"U1001","","",N,N],[6,"P1001","","",N,N],[6,"N1001","","",N,N],[6,"U1002","","",N,N],[6,"P1002","","",N,N],[6,"N1002","","",N,N],[6,"U1003","","",N,N],[6,"P1003","","",N,N],[6,"N1003","","",N,N],[6,"U1004","","",N,N],[6,"P1004","","",N,N],[6,"N1004","","",N,N],[6,"U1005","","",N,N],[6,"P1005","","",N,N],[6,"N1005","","",N,N],[6,"U1006","","",N,N],[6,"P1006","","",N,N],[6,"N1006","","",N,N],[6,"U1007","","",N,N],[6,"P1007","","",N,N],[6,"N1007","","",N,N],[6,"U1008","","",N,N],[6,"P1008","","",N,N],[6,"N1008","","",N,N],[6,"U1009","","",N,N],[6,"P1009","","",N,N],[6,"N1009","","",N,N],[6,"U1010","","",N,N],[6,"P1010","","",N,N],[6,"N1010","","",N,N],[6,"U1011","","",N,N],[6,"P1011","","",N,N],[6,"N1011","","",N,N],[6,"U1012","","",N,N],[6,"P1012","","",N,N],[6,"N1012","","",N,N],[6,"U1013","","",N,N],[6,"P1013","","",N,N],[6,"N1013","","",N,N],[6,"U1014","","",N,N],[6,"P1014","","",N,N],[6,"N1014","","",N,N],[6,"U1015","","",N,N],[6,"P1015","","",N,N],[6,"N1015","","",N,N],[6,"U1016","","",N,N],[6,"P1016","","",N,N],[6,"N1016","","",N,N],[6,"U1017","","",N,N],[6,"P1017","","",N,N],[6,"N1017","","",N,N],[6,"U1018","","",N,N],[6,"P1018","","",N,N],[6,"N1018","","",N,N],[6,"U1019","","",N,N],[6,"P1019","","",N,N],[6,"N1019","","",N,N],[6,"U1020","","",N,N],[6,"P1020","","",N,N],[6,"N1020","","",N,N],[6,"U1021","","",N,N],[6,"P1021","","",N,N],[6,"N1021","","",N,N],[6,"U1022","","",N,N],[6,"P1022","","",N,N],[6,"N1022","","",N,N],[6,"U1023","","",N,N],[6,"P1023","","",N,N],[6,"N1023","","",N,N],[6,"U1024","","",N,N],[6,"P1024","","",N,N],[6,"N1024","","",N,N],[6,"U2048","","",N,N],[6,"P2048","","",N,N],[6,"N2048","","",N,N],[6,"U4096","","",N,N],[6,"P4096","","",N,N],[6,"N4096","","",N,N],[6,"U8192","","",N,N],[6,"P8192","","",N,N],[6,"N8192","","",N,N],[6,"U16384","","",N,N],[6,"P16384","","",N,N],[6,"N16384","","",N,N],[6,"U32768","","",N,N],[6,"P32768","","",N,N],[6,"N32768","","",N,N],[6,"U65536","","",N,N],[6,"P65536","","",N,N],[6,"N65536","","",N,N],[6,"U131072","","",N,N],[6,"P131072","","",N,N],[6,"N131072","","",N,N],[6,"U262144","","",N,N],[6,"P262144","","",N,N],[6,"N262144","","",N,N],[6,"U524288","","",N,N],[6,"P524288","","",N,N],[6,"N524288","","",N,N],[6,"U1048576","","",N,N],[6,"P1048576","","",N,N],[6,"N1048576","","",N,N],[6,"U2097152","","",N,N],[6,"P2097152","","",N,N],[6,"N2097152","","",N,N],[6,"U4194304","","",N,N],[6,"P4194304","","",N,N],[6,"N4194304","","",N,N],[6,"U8388608","","",N,N],[6,"P8388608","","",N,N],[6,"N8388608","","",N,N],[6,"U16777216","","",N,N],[6,"P16777216","","",N,N],[6,"N16777216","","",N,N],[6,"U33554432","","",N,N],[6,"P33554432","","",N,N],[6,"N33554432","","",N,N],[6,"U67108864","","",N,N],[6,"P67108864","","",N,N],[6,"N67108864","","",N,N],[6,"U134217728","","",N,N],[6,"P134217728","","",N,N],[6,"N134217728","","",N,N],[6,"U268435456","","",N,N],[6,"P268435456","","",N,N],[6,"N268435456","","",N,N],[6,"U536870912","","",N,N],[6,"P536870912","","",N,N],[6,"N536870912","","",N,N],[6,"U1073741824","","",N,N],[6,"P1073741824","","",N,N],[6,"N1073741824","","",N,N],[6,"U2147483648","","",N,N],[6,"P2147483648","","",N,N],[6,"N2147483648","","",N,N],[6,"U4294967296","","",N,N],[6,"P4294967296","","",N,N],[6,"N4294967296","","",N,N],[6,"U8589934592","","",N,N],[6,"P8589934592","","",N,N],[6,"N8589934592","","",N,N],[6,"U17179869184","","",N,N],[6,"P17179869184","","",N,N],[6,"N17179869184","","",N,N],[6,"U34359738368","","",N,N],[6,"P34359738368","","",N,N],[6,"N34359738368","","",N,N],[6,"U68719476736","","",N,N],[6,"P68719476736","","",N,N],[6,"N68719476736","","",N,N],[6,"U137438953472","","",N,N],[6,"P137438953472","","",N,N],[6,"N137438953472","","",N,N],[6,"U274877906944","","",N,N],[6,"P274877906944","","",N,N],[6,"N274877906944","","",N,N],[6,"U549755813888","","",N,N],[6,"P549755813888","","",N,N],[6,"N549755813888","","",N,N],[6,"U1099511627776","","",N,N],[6,"P1099511627776","","",N,N],[6,"N1099511627776","","",N,N],[6,"U2199023255552","","",N,N],[6,"P2199023255552","","",N,N],[6,"N2199023255552","","",N,N],[6,"U4398046511104","","",N,N],[6,"P4398046511104","","",N,N],[6,"N4398046511104","","",N,N],[6,"U8796093022208","","",N,N],[6,"P8796093022208","","",N,N],[6,"N8796093022208","","",N,N],[6,"U17592186044416","","",N,N],[6,"P17592186044416","","",N,N],[6,"N17592186044416","","",N,N],[6,"U35184372088832","","",N,N],[6,"P35184372088832","","",N,N],[6,"N35184372088832","","",N,N],[6,"U70368744177664","","",N,N],[6,"P70368744177664","","",N,N],[6,"N70368744177664","","",N,N],[6,"U140737488355328","","",N,N],[6,"P140737488355328","","",N,N],[6,"N140737488355328","","",N,N],[6,"U281474976710656","","",N,N],[6,"P281474976710656","","",N,N],[6,"N281474976710656","","",N,N],[6,"U562949953421312","","",N,N],[6,"P562949953421312","","",N,N],[6,"N562949953421312","","",N,N],[6,"U1125899906842624","","",N,N],[6,"P1125899906842624","","",N,N],[6,"N1125899906842624","","",N,N],[6,"U2251799813685248","","",N,N],[6,"P2251799813685248","","",N,N],[6,"N2251799813685248","","",N,N],[6,"U4503599627370496","","",N,N],[6,"P4503599627370496","","",N,N],[6,"N4503599627370496","","",N,N],[6,"U9007199254740992","","",N,N],[6,"P9007199254740992","","",N,N],[6,"N9007199254740992","","",N,N],[6,"U18014398509481984","","",N,N],[6,"P18014398509481984","","",N,N],[6,"N18014398509481984","","",N,N],[6,"U36028797018963968","","",N,N],[6,"P36028797018963968","","",N,N],[6,"N36028797018963968","","",N,N],[6,"U72057594037927936","","",N,N],[6,"P72057594037927936","","",N,N],[6,"N72057594037927936","","",N,N],[6,"U144115188075855872","","",N,N],[6,"P144115188075855872","","",N,N],[6,"N144115188075855872","","",N,N],[6,"U288230376151711744","","",N,N],[6,"P288230376151711744","","",N,N],[6,"N288230376151711744","","",N,N],[6,"U576460752303423488","","",N,N],[6,"P576460752303423488","","",N,N],[6,"N576460752303423488","","",N,N],[6,"U1152921504606846976","","",N,N],[6,"P1152921504606846976","","",N,N],[6,"N1152921504606846976","","",N,N],[6,"U2305843009213693952","","",N,N],[6,"P2305843009213693952","","",N,N],[6,"N2305843009213693952","","",N,N],[6,"U4611686018427387904","","",N,N],[6,"P4611686018427387904","","",N,N],[6,"N4611686018427387904","","",N,N],[6,"U9223372036854775808","","",N,N],[6,"U10000","","",N,N],[6,"P10000","","",N,N],[6,"N10000","","",N,N],[6,"U100000","","",N,N],[6,"P100000","","",N,N],[6,"N100000","","",N,N],[6,"U1000000","","",N,N],[6,"P1000000","","",N,N],[6,"N1000000","","",N,N],[6,"U10000000","","",N,N],[6,"P10000000","","",N,N],[6,"N10000000","","",N,N],[6,"U100000000","","",N,N],[6,"P100000000","","",N,N],[6,"N100000000","","",N,N],[6,"U1000000000","","",N,N],[6,"P1000000000","","",N,N],[6,"N1000000000","","",N,N],[6,"U10000000000","","",N,N],[6,"P10000000000","","",N,N],[6,"N10000000000","","",N,N],[6,"U100000000000","","",N,N],[6,"P100000000000","","",N,N],[6,"N100000000000","","",N,N],[6,"U1000000000000","","",N,N],[6,"P1000000000000","","",N,N],[6,"N1000000000000","","",N,N],[6,"U10000000000000","","",N,N],[6,"P10000000000000","","",N,N],[6,"N10000000000000","","",N,N],[6,"U100000000000000","","",N,N],[6,"P100000000000000","","",N,N],[6,"N100000000000000","","",N,N],[6,"U1000000000000000","","",N,N],[6,"P1000000000000000","","",N,N],[6,"N1000000000000000","","",N,N],[6,"U10000000000000000","","",N,N],[6,"P10000000000000000","","",N,N],[6,"N10000000000000000","","",N,N],[6,"U100000000000000000","","",N,N],[6,"P100000000000000000","","",N,N],[6,"N100000000000000000","","",N,N],[6,"U1000000000000000000","","",N,N],[6,"P1000000000000000000","","",N,N],[6,"N1000000000000000000","","",N,N],[6,"U10000000000000000000","","",N,N],[0,"bit","typenum","Type-level bits.",N,N],[3,"B0","typenum::bit","The type-level bit 0.",N,N],[3,"B1","","The type-level bit 1.",N,N],[11,"eq","","",0,[[["self"],["b0"]],["bool"]]],[11,"cmp","","",0,[[["self"],["b0"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"],["b0"]],["option",["ordering"]]]],[11,"clone","","",0,[[["self"]],["b0"]]],[11,"hash","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["b0"]]],[11,"new","","Instantiates a singleton representing this bit.",0,[[],["b0"]]],[11,"eq","","",1,[[["self"],["b1"]],["bool"]]],[11,"cmp","","",1,[[["self"],["b1"]],["ordering"]]],[11,"partial_cmp","","",1,[[["self"],["b1"]],["option",["ordering"]]]],[11,"clone","","",1,[[["self"]],["b1"]]],[11,"hash","","",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"default","","",1,[[],["b1"]]],[11,"new","","Instantiates a singleton representing this bit.",1,[[],["b1"]]],[11,"to_u8","","",0,[[],["u8"]]],[11,"to_bool","","",0,[[],["bool"]]],[11,"to_u8","","",1,[[],["u8"]]],[11,"to_bool","","",1,[[],["bool"]]],[11,"not","","",0,N],[11,"not","","",1,N],[11,"bitand","","",0,N],[11,"bitand","","",1,N],[11,"bitand","","",1,N],[11,"bitor","","",0,N],[11,"bitor","","",0,N],[11,"bitor","","",1,N],[11,"bitxor","","",0,N],[11,"bitxor","","",1,N],[11,"bitxor","","",0,N],[11,"bitxor","","",1,N],[11,"min","","",0,[[["self"],["b0"]],["b0"]]],[11,"min","","",0,[[["self"],["b1"]],["b0"]]],[11,"min","","",1,[[["self"],["b0"]],["b0"]]],[11,"min","","",1,[[["self"],["b1"]],["b1"]]],[11,"max","","",0,[[["self"],["b0"]],["b0"]]],[11,"max","","",0,[[["self"],["b1"]],["b1"]]],[11,"max","","",1,[[["self"],["b0"]],["b1"]]],[11,"max","","",1,[[["self"],["b1"]],["b1"]]],[0,"uint","typenum","Type-level unsigned integers.",N,N],[3,"UTerm","typenum::uint","The terminating type for `UInt`; it always comes after the most significant bit. `UTerm` by itself represents zero, which is aliased to `U0`.",N,N],[3,"UInt","","`UInt` is defined recursively, where `B` is the least significant bit and `U` is the rest of the number. Conceptually, `U` should be bound by the trait `Unsigned` and `B` should be bound by the trait `Bit`, but enforcing these bounds causes linear instead of logrithmic scaling in some places, so they are left off for now. They may be enforced in future.",N,N],[6,"GetBitOut","","",N,N],[6,"SetBitOut","","Alias for the result of calling `SetBit`: `SetBitOut<N, I, B> = <N as SetBit<I, B>>::Output`.",N,N],[8,"GetBit","","",N,N],[16,"Output","","",2,N],[8,"SetBit","","A type operator that, when implemented for unsigned integer `N`, sets the bit at position `I` to `B`.",N,N],[16,"Output","","",3,N],[11,"eq","","",4,[[["self"],["uterm"]],["bool"]]],[11,"cmp","","",4,[[["self"],["uterm"]],["ordering"]]],[11,"partial_cmp","","",4,[[["self"],["uterm"]],["option",["ordering"]]]],[11,"clone","","",4,[[["self"]],["uterm"]]],[11,"hash","","",4,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"default","","",4,[[],["uterm"]]],[11,"new","","Instantiates a singleton representing this unsigned integer.",4,[[],["uterm"]]],[11,"to_u8","","",4,[[],["u8"]]],[11,"to_u16","","",4,[[],["u16"]]],[11,"to_u32","","",4,[[],["u32"]]],[11,"to_u64","","",4,[[],["u64"]]],[11,"to_usize","","",4,[[],["usize"]]],[11,"to_i8","","",4,[[],["i8"]]],[11,"to_i16","","",4,[[],["i16"]]],[11,"to_i32","","",4,[[],["i32"]]],[11,"to_i64","","",4,[[],["i64"]]],[11,"to_isize","","",4,[[],["isize"]]],[11,"eq","","",5,[[["self"],["uint"]],["bool"]]],[11,"ne","","",5,[[["self"],["uint"]],["bool"]]],[11,"cmp","","",5,[[["self"],["uint"]],["ordering"]]],[11,"partial_cmp","","",5,[[["self"],["uint"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["uint"]],["bool"]]],[11,"le","","",5,[[["self"],["uint"]],["bool"]]],[11,"gt","","",5,[[["self"],["uint"]],["bool"]]],[11,"ge","","",5,[[["self"],["uint"]],["bool"]]],[11,"clone","","",5,[[["self"]],["uint"]]],[11,"hash","","",5,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"default","","",5,[[],["uint"]]],[11,"new","","Instantiates a singleton representing this unsigned integer.",5,[[],["uint"]]],[11,"to_u8","","",5,[[],["u8"]]],[11,"to_u16","","",5,[[],["u16"]]],[11,"to_u32","","",5,[[],["u32"]]],[11,"to_u64","","",5,[[],["u64"]]],[11,"to_usize","","",5,[[],["usize"]]],[11,"to_i8","","",5,[[],["i8"]]],[11,"to_i16","","",5,[[],["i16"]]],[11,"to_i32","","",5,[[],["i32"]]],[11,"to_i64","","",5,[[],["i64"]]],[11,"to_isize","","",5,[[],["isize"]]],[11,"len","","",4,N],[11,"len","","",5,N],[11,"add","","",4,N],[11,"add","","",5,N],[11,"add","","",4,N],[11,"add","","",5,N],[11,"add","","",5,N],[11,"add","","",4,N],[11,"add","","",5,N],[11,"add","","",5,N],[11,"add","","",5,N],[11,"add","","",5,N],[11,"add","","",5,N],[11,"sub","","",4,N],[11,"sub","","",5,N],[11,"sub","","",5,N],[11,"sub","","",5,N],[11,"sub","","",5,N],[11,"sub","","",4,N],[11,"sub","","",5,N],[11,"bitand","","",4,N],[11,"bitand","","",5,N],[11,"bitor","","",4,N],[11,"bitor","","",5,N],[11,"bitor","","",5,N],[11,"bitor","","",5,N],[11,"bitor","","",5,N],[11,"bitor","","",5,N],[11,"bitxor","","",4,N],[11,"bitxor","","",5,N],[11,"shl","","",4,N],[11,"shl","","",4,N],[11,"shl","","",5,N],[11,"shl","","",5,N],[11,"shl","","",5,N],[11,"shl","","",4,N],[11,"shl","","",5,N],[11,"shr","","",4,N],[11,"shr","","",5,N],[11,"shr","","",4,N],[11,"shr","","",4,N],[11,"shr","","",5,N],[11,"shr","","",5,N],[11,"shr","","",5,N],[11,"mul","","",5,N],[11,"mul","","",4,N],[11,"mul","","",4,N],[11,"mul","","",5,N],[11,"mul","","",5,N],[11,"mul","","",4,N],[11,"mul","","",5,N],[11,"mul","","",5,N],[11,"div","","",4,N],[11,"div","","",5,N],[11,"rem","","",4,N],[11,"rem","","",5,N],[11,"partial_div","","",4,N],[11,"partial_div","","",5,N],[11,"min","","",4,N],[11,"min","","",5,N],[11,"max","","",4,N],[11,"max","","",5,N],[0,"int","typenum","Type-level signed integers.",N,N],[3,"PInt","typenum::int","Type-level signed integers with positive sign.",N,N],[3,"NInt","","Type-level signed integers with negative sign.",N,N],[3,"Z0","","The type-level signed integer 0.",N,N],[11,"eq","","",6,[[["self"],["pint"]],["bool"]]],[11,"ne","","",6,[[["self"],["pint"]],["bool"]]],[11,"cmp","","",6,[[["self"],["pint"]],["ordering"]]],[11,"partial_cmp","","",6,[[["self"],["pint"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["pint"]],["bool"]]],[11,"le","","",6,[[["self"],["pint"]],["bool"]]],[11,"gt","","",6,[[["self"],["pint"]],["bool"]]],[11,"ge","","",6,[[["self"],["pint"]],["bool"]]],[11,"clone","","",6,[[["self"]],["pint"]]],[11,"hash","","",6,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"default","","",6,[[],["pint"]]],[11,"eq","","",7,[[["self"],["nint"]],["bool"]]],[11,"ne","","",7,[[["self"],["nint"]],["bool"]]],[11,"cmp","","",7,[[["self"],["nint"]],["ordering"]]],[11,"partial_cmp","","",7,[[["self"],["nint"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["nint"]],["bool"]]],[11,"le","","",7,[[["self"],["nint"]],["bool"]]],[11,"gt","","",7,[[["self"],["nint"]],["bool"]]],[11,"ge","","",7,[[["self"],["nint"]],["bool"]]],[11,"clone","","",7,[[["self"]],["nint"]]],[11,"hash","","",7,N],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"default","","",7,[[],["nint"]]],[11,"new","","Instantiates a singleton representing this strictly positive integer.",6,[[],["pint"]]],[11,"new","","Instantiates a singleton representing this strictly negative integer.",7,[[],["nint"]]],[11,"eq","","",8,[[["self"],["z0"]],["bool"]]],[11,"cmp","","",8,[[["self"],["z0"]],["ordering"]]],[11,"partial_cmp","","",8,[[["self"],["z0"]],["option",["ordering"]]]],[11,"clone","","",8,[[["self"]],["z0"]]],[11,"hash","","",8,N],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"default","","",8,[[],["z0"]]],[11,"new","","Instantiates a singleton representing the integer 0.",8,[[],["z0"]]],[11,"to_i8","","",8,[[],["i8"]]],[11,"to_i16","","",8,[[],["i16"]]],[11,"to_i32","","",8,[[],["i32"]]],[11,"to_i64","","",8,[[],["i64"]]],[11,"to_isize","","",8,[[],["isize"]]],[11,"to_i8","","",6,[[],["i8"]]],[11,"to_i16","","",6,[[],["i16"]]],[11,"to_i32","","",6,[[],["i32"]]],[11,"to_i64","","",6,[[],["i64"]]],[11,"to_isize","","",6,[[],["isize"]]],[11,"to_i8","","",7,[[],["i8"]]],[11,"to_i16","","",7,[[],["i16"]]],[11,"to_i32","","",7,[[],["i32"]]],[11,"to_i64","","",7,[[],["i64"]]],[11,"to_isize","","",7,[[],["isize"]]],[11,"neg","","",8,N],[11,"neg","","",6,N],[11,"neg","","",7,N],[11,"add","","",8,N],[11,"add","","",6,N],[11,"add","","",7,N],[11,"add","","",6,N],[11,"add","","",7,N],[11,"add","","",6,N],[11,"add","","",7,N],[11,"sub","","",8,N],[11,"sub","","",8,N],[11,"sub","","",8,N],[11,"sub","","",6,N],[11,"sub","","",7,N],[11,"sub","","",6,N],[11,"sub","","",7,N],[11,"sub","","",6,N],[11,"sub","","",7,N],[11,"mul","","",8,N],[11,"mul","","",6,N],[11,"mul","","",7,N],[11,"mul","","",6,N],[11,"mul","","",7,N],[11,"mul","","",6,N],[11,"mul","","",7,N],[11,"div","","",8,N],[11,"div","","",6,N],[11,"div","","",6,N],[11,"div","","",7,N],[11,"div","","",7,N],[11,"rem","","",8,N],[11,"rem","","",6,N],[11,"rem","","",6,N],[11,"rem","","",7,N],[11,"rem","","",7,N],[11,"powi","","",8,N],[11,"powi","","",8,N],[11,"powi","","",8,N],[11,"powi","","",9,N],[11,"powi","","",10,N],[11,"powi","","",10,N],[11,"powi","","",6,N],[11,"powi","","",7,N],[11,"powi","","",6,N],[11,"powi","","",7,N],[11,"powi","","",7,N],[11,"min","","",8,N],[11,"min","","",8,N],[11,"min","","",8,N],[11,"min","","",6,N],[11,"min","","",7,N],[11,"min","","",6,N],[11,"min","","",7,N],[11,"min","","",6,N],[11,"min","","",7,N],[11,"max","","",8,N],[11,"max","","",8,N],[11,"max","","",8,N],[11,"max","","",6,N],[11,"max","","",7,N],[11,"max","","",6,N],[11,"max","","",7,N],[11,"max","","",6,N],[11,"max","","",7,N],[0,"marker_traits","typenum","All of the marker traits used in typenum.",N,N],[8,"NonZero","typenum::marker_traits","A marker trait to designate that a type is not zero. All number types in this crate implement `NonZero` except `B0`, `U0`, and `Z0`.",N,N],[8,"Ord","","A Marker trait for the types `Greater`, `Equal`, and `Less`.",N,N],[10,"to_ordering","","",11,[[],["ordering"]]],[8,"Bit","","The marker trait for compile time bits.",N,N],[18,"U8","","",12,N],[18,"BOOL","","",12,N],[10,"to_u8","","",12,[[],["u8"]]],[10,"to_bool","","",12,[[],["bool"]]],[8,"Unsigned","","The marker trait for compile time unsigned integers.",N,N],[18,"U8","","",13,N],[18,"U16","","",13,N],[18,"U32","","",13,N],[18,"U64","","",13,N],[18,"USIZE","","",13,N],[18,"I8","","",13,N],[18,"I16","","",13,N],[18,"I32","","",13,N],[18,"I64","","",13,N],[18,"ISIZE","","",13,N],[10,"to_u8","","",13,[[],["u8"]]],[10,"to_u16","","",13,[[],["u16"]]],[10,"to_u32","","",13,[[],["u32"]]],[10,"to_u64","","",13,[[],["u64"]]],[10,"to_usize","","",13,[[],["usize"]]],[10,"to_i8","","",13,[[],["i8"]]],[10,"to_i16","","",13,[[],["i16"]]],[10,"to_i32","","",13,[[],["i32"]]],[10,"to_i64","","",13,[[],["i64"]]],[10,"to_isize","","",13,[[],["isize"]]],[8,"Integer","","The marker trait for compile time signed integers.",N,N],[18,"I8","","",14,N],[18,"I16","","",14,N],[18,"I32","","",14,N],[18,"I64","","",14,N],[18,"ISIZE","","",14,N],[10,"to_i8","","",14,[[],["i8"]]],[10,"to_i16","","",14,[[],["i16"]]],[10,"to_i32","","",14,[[],["i32"]]],[10,"to_i64","","",14,[[],["i64"]]],[10,"to_isize","","",14,[[],["isize"]]],[8,"TypeArray","","The marker trait for type-level arrays of type-level numbers.",N,N],[8,"PowerOfTwo","","The marker trait for type-level numbers which are a power of two.",N,N],[0,"type_operators","typenum","Useful type operators that are not defined in `core::ops`.",N,N],[8,"Same","typenum::type_operators","A type operator that ensures that `Rhs` is the same as `Self`, it is mainly useful for writing macros that can take arbitrary binary or unary operators.",N,N],[16,"Output","","Should always be `Self`",15,N],[8,"Abs","","A type operator that returns the absolute value.",N,N],[16,"Output","","The absolute value.",16,N],[8,"Pow","","A type operator that provides exponentiation by repeated squaring.",N,N],[16,"Output","","The result of the exponentiation.",17,N],[10,"powi","","This function isn't used in this crate, but may be useful for others. It is implemented for primitives.",17,N],[8,"Cmp","","A type operator for comparing `Self` and `Rhs`. It provides a similar functionality to the function `core::cmp::Ord::cmp` but for types.",N,N],[16,"Output","","The result of the comparison. It should only ever be one of `Greater`, `Less`, or `Equal`.",18,N],[8,"Len","","A type operator that gives the length of an `Array` or the number of bits in a `UInt`.",N,N],[16,"Output","","The length as a type-level unsigned integer.",19,N],[10,"len","","This function isn't used in this crate, but may be useful for others.",19,N],[8,"PartialDiv","","Division as a partial function. This type operator performs division just as `Div`, but is only defined when the result is an integer (i.e. there is no remainder).",N,N],[16,"Output","","The type of the result of the division",20,N],[10,"partial_div","","Method for performing the division",20,N],[8,"Min","","A type operator that returns the minimum of `Self` and `Rhs`.",N,N],[16,"Output","","The type of the minimum of `Self` and `Rhs`",21,N],[10,"min","","Method returning the minimum",21,N],[8,"Max","","A type operator that returns the maximum of `Self` and `Rhs`.",N,N],[16,"Output","","The type of the maximum of `Self` and `Rhs`",22,N],[10,"max","","Method returning the maximum",22,N],[8,"IsLess","","A type operator that returns `True` if `Self < Rhs`, otherwise returns `False`.",N,N],[16,"Output","","The type representing either `True` or `False`",23,N],[10,"is_less","","Method returning `True` or `False`.",23,N],[8,"IsEqual","","A type operator that returns `True` if `Self == Rhs`, otherwise returns `False`.",N,N],[16,"Output","","The type representing either `True` or `False`",24,N],[10,"is_equal","","Method returning `True` or `False`.",24,N],[8,"IsGreater","","A type operator that returns `True` if `Self > Rhs`, otherwise returns `False`.",N,N],[16,"Output","","The type representing either `True` or `False`",25,N],[10,"is_greater","","Method returning `True` or `False`.",25,N],[8,"IsLessOrEqual","","A type operator that returns `True` if `Self <= Rhs`, otherwise returns `False`.",N,N],[16,"Output","","The type representing either `True` or `False`",26,N],[10,"is_less_or_equal","","Method returning `True` or `False`.",26,N],[8,"IsNotEqual","","A type operator that returns `True` if `Self != Rhs`, otherwise returns `False`.",N,N],[16,"Output","","The type representing either `True` or `False`",27,N],[10,"is_not_equal","","Method returning `True` or `False`.",27,N],[8,"IsGreaterOrEqual","","A type operator that returns `True` if `Self >= Rhs`, otherwise returns `False`.",N,N],[16,"Output","","The type representing either `True` or `False`",28,N],[10,"is_greater_or_equal","","Method returning `True` or `False`.",28,N],[0,"operator_aliases","typenum","Aliases for the type operators used in this crate. Their purpose is to increase the ergonomics of performing operations on the types defined here. For even more ergonomics, consider using the `op!` macro instead.",N,N],[6,"And","typenum::operator_aliases","Alias for the associated type of `BitAnd`: `And<A, B> = <A as BitAnd<B>>::Output`",N,N],[6,"Or","","Alias for the associated type of `BitOr`: `Or<A, B> = <A as BitOr<B>>::Output`",N,N],[6,"Xor","","Alias for the associated type of `BitXor`: `Xor<A, B> = <A as BitXor<B>>::Output`",N,N],[6,"Shleft","","Alias for the associated type of `Shl`: `Shleft<A, B> = <A as Shl<B>>::Output`",N,N],[6,"Shright","","Alias for the associated type of `Shr`: `Shright<A, B> = <A as Shr<B>>::Output`",N,N],[6,"Sum","","Alias for the associated type of `Add`: `Sum<A, B> = <A as Add<B>>::Output`",N,N],[6,"Diff","","Alias for the associated type of `Sub`: `Diff<A, B> = <A as Sub<B>>::Output`",N,N],[6,"Prod","","Alias for the associated type of `Mul`: `Prod<A, B> = <A as Mul<B>>::Output`",N,N],[6,"Quot","","Alias for the associated type of `Div`: `Quot<A, B> = <A as Div<B>>::Output`",N,N],[6,"Mod","","Alias for the associated type of `Rem`: `Mod<A, B> = <A as Rem<B>>::Output`",N,N],[6,"PartialQuot","","Alias for the associated type of `PartialDiv`: `PartialQuot<A, B> = <A as PartialDiv<B>>::Output`",N,N],[6,"Negate","","Alias for the associated type of `Neg`: `Negate<A> = <A as Neg>::Output`",N,N],[6,"AbsVal","","Alias for the associated type of `Abs`: `AbsVal<A> = <A as Abs>::Output`",N,N],[6,"Exp","","Alias for the associated type of `Pow`: `Exp<A, B> = <A as Pow<B>>::Output`",N,N],[6,"Add1","","Alias to make it easy to add 1: `Add1<A> = <A as Add<B1>>::Output`",N,N],[6,"Sub1","","Alias to make it easy to subtract 1: `Sub1<A> = <A as Sub<B1>>::Output`",N,N],[6,"Square","","Alias to make it easy to square. `Square<A> = <A as Mul<A>>::Output`",N,N],[6,"Cube","","Alias to make it easy to cube. `Cube<A> = <Square<A> as Mul<A>>::Output`",N,N],[6,"Compare","","Alias for the associated type of `Cmp`: `Compare<A, B> = <A as Cmp<B>>::Output`",N,N],[6,"Length","","Alias for the associated type of `Len`: `Length<A> = <A as Len>::Output`",N,N],[6,"Minimum","","Alias for the associated type of `Min`: `Minimum<A, B> = <A as Min<B>>::Output`",N,N],[6,"Maximum","","Alias for the associated type of `Max`: `Maximum<A, B> = <A as Max<B>>::Output`",N,N],[6,"Le","","Alias for the associated type of `IsLess`: `Le<A, B> = <A as IsLess<B>>::Output`",N,N],[6,"Eq","","Alias for the associated type of `IsEqual`: `Eq<A, B> = <A as IsEqual<B>>::Output`",N,N],[6,"Gr","","Alias for the associated type of `IsGreater`: `Gr<A, B> = <A as IsGreater<B>>::Output`",N,N],[6,"GrEq","","Alias for the associated type of `IsGreaterOrEqual`: `GrEq<A, B> = <A as IsGreaterOrEqual<B>>::Output`",N,N],[6,"LeEq","","Alias for the associated type of `IsLessOrEqual`: `LeEq<A, B> = <A as IsLessOrEqual<B>>::Output`",N,N],[6,"NotEq","","Alias for the associated type of `IsNotEqual`: `NotEq<A, B> = <A as IsNotEqual<B>>::Output`",N,N],[0,"array","typenum","A type-level array of type-level numbers.",N,N],[3,"ATerm","typenum::array","The terminating type for type arrays.",N,N],[3,"TArr","","`TArr` is a type that acts as an array of types. It is defined similarly to `UInt`, only its values can be more than bits, and it is designed to act as an array. So you can only add two if they have the same number of elements, for example.",N,N],[11,"eq","","",29,[[["self"],["aterm"]],["bool"]]],[11,"cmp","","",29,[[["self"],["aterm"]],["ordering"]]],[11,"partial_cmp","","",29,[[["self"],["aterm"]],["option",["ordering"]]]],[11,"clone","","",29,[[["self"]],["aterm"]]],[11,"hash","","",29,N],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"eq","","",30,[[["self"],["tarr"]],["bool"]]],[11,"ne","","",30,[[["self"],["tarr"]],["bool"]]],[11,"cmp","","",30,[[["self"],["tarr"]],["ordering"]]],[11,"partial_cmp","","",30,[[["self"],["tarr"]],["option",["ordering"]]]],[11,"lt","","",30,[[["self"],["tarr"]],["bool"]]],[11,"le","","",30,[[["self"],["tarr"]],["bool"]]],[11,"gt","","",30,[[["self"],["tarr"]],["bool"]]],[11,"ge","","",30,[[["self"],["tarr"]],["bool"]]],[11,"clone","","",30,[[["self"]],["tarr"]]],[11,"hash","","",30,N],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"len","","",29,N],[11,"len","","",30,N],[11,"add","","",29,N],[11,"add","","",30,N],[11,"sub","","",29,N],[11,"sub","","",30,N],[11,"mul","","",29,N],[11,"mul","","",30,N],[11,"mul","typenum::int","",8,N],[11,"mul","","",6,N],[11,"mul","","",7,N],[11,"mul","","",8,N],[11,"mul","","",6,N],[11,"mul","","",7,N],[11,"div","typenum::array","",29,N],[11,"div","","",30,N],[11,"partial_div","","",29,N],[11,"partial_div","","",30,N],[11,"rem","","",29,N],[11,"rem","","",30,N],[11,"neg","","",29,N],[11,"neg","","",30,N],[11,"eq","typenum","",31,[[["self"],["greater"]],["bool"]]],[11,"cmp","","",31,[[["self"],["greater"]],["ordering"]]],[11,"partial_cmp","","",31,[[["self"],["greater"]],["option",["ordering"]]]],[11,"clone","","",31,[[["self"]],["greater"]]],[11,"hash","","",31,N],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"default","","",31,[[],["greater"]]],[11,"eq","","",32,[[["self"],["less"]],["bool"]]],[11,"cmp","","",32,[[["self"],["less"]],["ordering"]]],[11,"partial_cmp","","",32,[[["self"],["less"]],["option",["ordering"]]]],[11,"clone","","",32,[[["self"]],["less"]]],[11,"hash","","",32,N],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"default","","",32,[[],["less"]]],[11,"eq","","",33,[[["self"],["equal"]],["bool"]]],[11,"cmp","","",33,[[["self"],["equal"]],["ordering"]]],[11,"partial_cmp","","",33,[[["self"],["equal"]],["option",["ordering"]]]],[11,"clone","","",33,[[["self"]],["equal"]]],[11,"hash","","",33,N],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"default","","",33,[[],["equal"]]],[11,"to_ordering","","",31,[[],["ordering"]]],[11,"to_ordering","","",32,[[],["ordering"]]],[11,"to_ordering","","",33,[[],["ordering"]]],[14,"op","","Convenient type operations.",N,N],[14,"cmp","","A convenience macro for comparing type numbers. Use `op!` instead.",N,N],[14,"tarr","","Create a new type-level arrray. Only usable on Rust 1.13.0 or newer.",N,N],[14,"assert_type_eq","","Asserts that two types are the same.",N,N],[14,"assert_type","","Asserts that a type is `True`, aka `B1`.",N,N]],"paths":[[3,"B0"],[3,"B1"],[8,"GetBit"],[8,"SetBit"],[3,"UTerm"],[3,"UInt"],[3,"PInt"],[3,"NInt"],[3,"Z0"],[6,"P1"],[6,"N1"],[8,"Ord"],[8,"Bit"],[8,"Unsigned"],[8,"Integer"],[8,"Same"],[8,"Abs"],[8,"Pow"],[8,"Cmp"],[8,"Len"],[8,"PartialDiv"],[8,"Min"],[8,"Max"],[8,"IsLess"],[8,"IsEqual"],[8,"IsGreater"],[8,"IsLessOrEqual"],[8,"IsNotEqual"],[8,"IsGreaterOrEqual"],[3,"ATerm"],[3,"TArr"],[3,"Greater"],[3,"Less"],[3,"Equal"]]};
searchIndex["ucd_util"]={"doc":"The `ucd-util` crate contains a smattering of utility functions that implement various algorithms specified by Unicode. There is no specific goal for exhaustiveness. Instead, implementations should be added on an as-needed basis.","items":[[5,"hangul_name","ucd_util","Return the character name of the given precomposed Hangul codepoint.",N,[[["u32"]],["option",["string"]]]],[5,"hangul_full_canonical_decomposition","","Return the full canonical decomposition of the given precomposed Hangul codepoint.",N,[[["u32"]],["option"]]],[5,"ideograph_name","","Return the character name of the given ideograph codepoint.",N,[[["u32"]],["option",["string"]]]],[5,"character_name_normalize","","Normalize the given character name in place according to UAX44-LM2.",N,[[["string"]]]],[5,"symbolic_name_normalize","","Normalize the given symbolic name in place according to UAX44-LM3.",N,[[["string"]]]],[5,"canonical_property_name","","Find the canonical property name for the given normalized property name.",N,[[["propertytable"],["str"]],["option",["str"]]]],[5,"property_values","","Find the set of possible property values for a given property.",N,[[["propertyvaluetable"],["str"]],["option",["propertyvalues"]]]],[5,"canonical_property_value","","Find the canonical property value for the given normalized property value.",N,[[["propertyvalues"],["str"]],["option",["str"]]]],[6,"PropertyTable","","The type of a property name table.",N,N],[6,"PropertyValueTable","","Type of a property value table.",N,N],[6,"PropertyValues","","A mapping of property values for a specific property.",N,N],[17,"RANGE_HANGUL_SYLLABLE","","A set of ranges that corresponds to the set of all Hangul syllable codepoints.",N,N],[17,"RANGE_IDEOGRAPH","","A set of ranges that corresponds to the set of all ideograph codepoints.",N,N]],"paths":[]};
searchIndex["unicode_xid"]={"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",N,N],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",N,N],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,[[["self"]],["bool"]]],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,[[["self"]],["bool"]]]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"]={"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",N,N],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",N,N],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,[[["self"]],["t"]]],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,[[["self"]]]],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",N,N],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,[[["self"]],["t"]]],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,[[["self"]],["e"]]]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["utf8_ranges"]={"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes. This is useful for constructing byte based automatons that need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",N,N],[12,"start","","Start of byte range (inclusive).",0,N],[12,"end","","End of byte range (inclusive).",0,N],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",N,N],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",N,N],[13,"One","","One byte range.",1,N],[13,"Two","","Two successive byte ranges.",1,N],[13,"Three","","Three successive byte ranges.",1,N],[13,"Four","","Four successive byte ranges.",1,N],[11,"clone","","",1,[[["self"]],["utf8sequence"]]],[11,"eq","","",1,[[["self"],["utf8sequence"]],["bool"]]],[11,"ne","","",1,[[["self"],["utf8sequence"]],["bool"]]],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,N],[11,"len","","Returns the number of byte ranges in this sequence.",1,[[["self"]],["usize"]]],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence of byte ranges.",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["utf8range"]]],[11,"eq","","",0,[[["self"],["utf8range"]],["bool"]]],[11,"ne","","",0,[[["self"],["utf8range"]],["bool"]]],[11,"matches","","Returns true if and only if the given byte is in this range.",0,[[["self"],["u8"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range given.",2,[[["char"],["char"]],["self"]]],[11,"next","","",2,[[["self"]],["option"]]]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["void"]={"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",N,N],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",N,N],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",N,N],[10,"void_unwrap","","Get the value out of a wrapper.",0,[[["self"]],["t"]]],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",N,N],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,[[["self"]],["e"]]],[11,"clone","","",2,[[["self"]],["void"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["t"]],["option",["ordering"]]]]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
initSearch(searchIndex);
