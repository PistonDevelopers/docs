var searchIndex = JSON.parse('{\
"ahash":{"doc":"aHashThis hashing algorithm is intended to be a high …","i":[[3,"AHasher","ahash","A <code>Hasher</code> for hashing an arbitrary stream of bytes.",null,null],[3,"RandomState","","Provides a Hasher factory. This is typically used (e.g. …",null,null],[8,"CallHasher","","Provides a way to get an optimized hasher for a given …",null,null],[10,"get_hash","","",0,[[["hasher",8]]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"write_u8","","",1,[[]]],[11,"write_u16","","",1,[[]]],[11,"write_u32","","",1,[[]]],[11,"write_u64","","",1,[[]]],[11,"write_u128","","",1,[[]]],[11,"write_usize","","",1,[[]]],[11,"write","","",1,[[]]],[11,"finish","","",1,[[]]],[11,"build_hasher","","Constructs a new [AHasher] with keys based on compile …",2,[[],["ahasher",3]]],[11,"clone","","",1,[[],["ahasher",3]]],[11,"clone","","",2,[[],["randomstate",3]]],[11,"default","","",2,[[]]],[11,"default","","Constructs a new [AHasher] with compile time generated …",1,[[],["ahasher",3]]],[11,"new_with_keys","","Creates a new hasher keyed to the provided key.",1,[[],["ahasher",3]]],[11,"new","","",2,[[],["randomstate",3]]],[11,"with_seeds","","Allows for explicitly setting the seeds to used.",2,[[],["randomstate",3]]]],"p":[[8,"CallHasher"],[3,"AHasher"],[3,"RandomState"]]},\
"bytemuck":{"doc":"This crate gives small utilities for casting between …","i":[[8,"Zeroable","bytemuck","Trait for types that can be safely created with <code>zeroed</code>.",null,null],[11,"zeroed","","Calls <code>zeroed</code>.",0,[[]]],[8,"Pod","","Marker trait for \\\"plain old data\\\".",null,null],[8,"Contiguous","","A trait indicating that:",null,null],[16,"Int","","The primitive integer type with an identical …",1,null],[18,"MAX_VALUE","","The upper <em>inclusive</em> bound for valid instances of this …",1,null],[18,"MIN_VALUE","","The lower <em>inclusive</em> bound for valid instances of this …",1,null],[11,"from_integer","","If <code>value</code> is within the range for valid instances of this …",1,[[],["option",4]]],[11,"into_integer","","Perform the conversion from <code>C</code> into the underlying …",1,[[]]],[8,"TransparentWrapper","","A trait which indicates that a type is a <code>repr(transparent)</code>…",null,null],[11,"wrap_ref","","Convert a reference to a wrapped type into a reference to …",2,[[]]],[11,"wrap_mut","","Convert a mut reference to a wrapped type into a mut …",2,[[]]],[5,"bytes_of","","Re-interprets <code>&T</code> as <code>&[u8]</code>.",null,[[]]],[5,"bytes_of_mut","","Re-interprets <code>&mut T</code> as <code>&mut [u8]</code>.",null,[[]]],[5,"from_bytes","","Re-interprets <code>&[u8]</code> as <code>&T</code>.",null,[[]]],[5,"from_bytes_mut","","Re-interprets <code>&mut [u8]</code> as <code>&mut T</code>.",null,[[]]],[5,"try_from_bytes","","Re-interprets <code>&[u8]</code> as <code>&T</code>.",null,[[],[["result",4],["podcasterror",4]]]],[5,"try_from_bytes_mut","","Re-interprets <code>&mut [u8]</code> as <code>&mut T</code>.",null,[[],[["result",4],["podcasterror",4]]]],[4,"PodCastError","","The things that can go wrong when casting between [<code>Pod</code>] …",null,null],[13,"TargetAlignmentGreaterAndInputNotAligned","","You tried to cast a slice to an element type with a …",3,null],[13,"OutputSliceWouldHaveSlop","","If the element size changes then the output slice changes …",3,null],[13,"SizeMismatch","","When casting a slice you can\'t convert between ZST …",3,null],[13,"AlignmentMismatch","","For this type of cast the alignments must be exactly the …",3,null],[5,"cast","","Cast <code>T</code> into <code>U</code>",null,[[["pod",8]],["pod",8]]],[5,"cast_mut","","Cast <code>&mut T</code> into <code>&mut U</code>.",null,[[]]],[5,"cast_ref","","Cast <code>&T</code> into <code>&U</code>.",null,[[]]],[5,"cast_slice","","Cast <code>&[A]</code> into <code>&[B]</code>.",null,[[]]],[5,"cast_slice_mut","","Cast <code>&mut [T]</code> into <code>&mut [U]</code>.",null,[[]]],[5,"pod_align_to","","As <code>align_to</code>, but safe because of the [<code>Pod</code>] bound.",null,[[]]],[5,"pod_align_to_mut","","As <code>align_to_mut</code>, but safe because of the [<code>Pod</code>] bound.",null,[[]]],[5,"try_cast","","Try to cast <code>T</code> into <code>U</code>.",null,[[["pod",8]],[["pod",8],["result",4],["podcasterror",4]]]],[5,"try_cast_ref","","Try to convert a <code>&T</code> into <code>&U</code>.",null,[[],[["result",4],["podcasterror",4]]]],[5,"try_cast_mut","","Try to convert a <code>&mut T</code> into <code>&mut U</code>.",null,[[],[["result",4],["podcasterror",4]]]],[5,"try_cast_slice","","Try to convert <code>&[A]</code> into <code>&[B]</code> (possibly with a change in …",null,[[],[["result",4],["podcasterror",4]]]],[5,"try_cast_slice_mut","","Try to convert <code>&mut [A]</code> into <code>&mut [B]</code> (possibly with a …",null,[[],[["podcasterror",4],["result",4]]]],[14,"offset_of","","Find the offset in bytes of the given <code>$field</code> of <code>$Type</code>. …",null,null],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"eq","","",3,[[["podcasterror",4]]]],[11,"hash","","",3,[[]]],[11,"clone","","",3,[[],["podcasterror",4]]],[11,"zeroed","","Calls <code>zeroed</code>.",0,[[]]],[18,"MAX_VALUE","","The upper <em>inclusive</em> bound for valid instances of this …",1,null],[18,"MIN_VALUE","","The lower <em>inclusive</em> bound for valid instances of this …",1,null],[11,"from_integer","","If <code>value</code> is within the range for valid instances of this …",1,[[],["option",4]]],[11,"into_integer","","Perform the conversion from <code>C</code> into the underlying …",1,[[]]],[11,"wrap_ref","","Convert a reference to a wrapped type into a reference to …",2,[[]]],[11,"wrap_mut","","Convert a mut reference to a wrapped type into a mut …",2,[[]]]],"p":[[8,"Zeroable"],[8,"Contiguous"],[8,"TransparentWrapper"],[4,"PodCastError"]]},\
"fallible_collections":{"doc":"impl Fallible collections on allocation errors, quite as …","i":[[0,"boxed","fallible_collections","Implement Fallible Box",null,null],[8,"FallibleBox","fallible_collections::boxed","trait to implement Fallible Box",null,null],[10,"try_new","","try creating a new box, returning a Result<Box, …",0,[[],[["tryreserveerror",4],["result",4]]]],[3,"TryBox","","TryBox is a thin wrapper around alloc::boxed::Box to …",null,null],[11,"try_new","","",1,[[],[["tryreserveerror",4],["result",4]]]],[11,"into_raw","","",1,[[["trybox",3]]]],[11,"from_raw","","SafetySee std::boxed::from_raw",1,[[]]],[0,"vec","fallible_collections","Implement Fallible Vec",null,null],[8,"FallibleVec","fallible_collections::vec","trait implementing all fallible methods on vec",null,null],[10,"try_reserve","","see reserve",2,[[],[["result",4],["tryreserveerror",4]]]],[10,"try_push","","see push",2,[[],[["result",4],["tryreserveerror",4]]]],[10,"try_push_give_back","","try push and give back ownership in case of error",2,[[],["result",4]]],[10,"try_with_capacity","","see with capacity, (Self must be sized by the constraint …",2,[[],[["tryreserveerror",4],["result",4]]]],[10,"try_insert","","see insert",2,[[],["result",4]]],[10,"try_append","","see append",2,[[],[["result",4],["tryreserveerror",4]]]],[10,"try_resize","","see resize, only works when the <code>value</code> implements Copy, …",2,[[],[["result",4],["tryreserveerror",4]]]],[10,"try_resize_with","","",2,[[],[["result",4],["tryreserveerror",4]]]],[10,"try_resize_no_copy","","resize the vec by trying to clone the value repeatingly",2,[[],[["result",4],["tryreserveerror",4]]]],[10,"try_extend_from_slice","","see resize, only works when the <code>value</code> implements Copy, …",2,[[],[["result",4],["tryreserveerror",4]]]],[10,"try_extend_from_slice_no_copy","","extend the vec by trying to clone the value in <code>other</code>",2,[[],[["result",4],["tryreserveerror",4]]]],[3,"TryVec","","TryVec is a thin wrapper around alloc::vec::Vec to …",null,null],[11,"new","","",3,[[]]],[11,"with_capacity","","",3,[[],[["tryreserveerror",4],["result",4]]]],[11,"append","","",3,[[],[["result",4],["tryreserveerror",4]]]],[11,"as_mut_slice","","",3,[[]]],[11,"as_slice","","",3,[[]]],[11,"clear","","",3,[[]]],[11,"is_empty","","",3,[[]]],[11,"iter_mut","","",3,[[],["itermut",3]]],[11,"iter","","",3,[[],["iter",3]]],[11,"pop","","",3,[[],["option",4]]],[11,"push","","",3,[[],[["result",4],["tryreserveerror",4]]]],[11,"reserve","","",3,[[],[["result",4],["tryreserveerror",4]]]],[11,"resize_with","","",3,[[],[["result",4],["tryreserveerror",4]]]],[11,"concat","","",3,[[],[["tryvec",3],["result",4],["tryreserveerror",4]]]],[11,"extend_from_slice","","",3,[[],[["result",4],["tryreserveerror",4]]]],[3,"Iter","","",null,null],[3,"IterMut","","",null,null],[8,"TryFromIterator","","",null,null],[10,"try_from_iterator","","",4,[[["intoiterator",8]],[["tryreserveerror",4],["result",4]]]],[8,"TryCollect","","",null,null],[10,"try_collect","","",5,[[],[["tryfromiterator",8],["tryreserveerror",4],["result",4]]]],[0,"rc","fallible_collections","Implement a Fallible Rc",null,null],[8,"FallibleRc","fallible_collections::rc","trait to implement Fallible Rc",null,null],[10,"try_new","","try creating a new Rc, returning a Result<Box, …",6,[[],[["tryreserveerror",4],["result",4]]]],[0,"arc","fallible_collections","Implement a Fallible Arc",null,null],[8,"FallibleArc","fallible_collections::arc","trait to implement Fallible Arc",null,null],[10,"try_new","","try creating a new Arc, returning a Result<Box, …",7,[[],[["tryreserveerror",4],["result",4]]]],[0,"hashmap","fallible_collections","Implement Fallible HashMap",null,null],[3,"TryHashMap","fallible_collections::hashmap","",null,null],[11,"with_capacity","","",8,[[],[["tryreserveerror",4],["result",4]]]],[11,"get","","",8,[[],["option",4]]],[11,"insert","","",8,[[],[["option",4],["result",4],["tryreserveerror",4]]]],[11,"iter","","",8,[[],["iter",3]]],[11,"len","","",8,[[]]],[11,"remove","","",8,[[],["option",4]]],[0,"format","fallible_collections","A try_format! macro replacing format!",null,null],[5,"try_format","fallible_collections::format","Take a max capacity a try allocating a string with it.",null,[[["arguments",3]],[["result",4],["string",3],["tryreserveerror",4]]]],[0,"try_clone","fallible_collections","this module implements try clone for primitive rust types",null,null],[4,"TryReserveError","","The error type for <code>try_reserve</code> methods.",null,null],[13,"CapacityOverflow","","Error due to the computed capacity exceeding the …",9,null],[13,"AllocError","","The memory allocator returned an error",9,null],[12,"layout","fallible_collections::TryReserveError","The layout of the allocation request that failed.",10,null],[8,"TryClone","fallible_collections","trait for trying to clone an elem, return an error …",null,null],[10,"try_clone","","try clone method, (Self must be sized because of Result …",11,[[],[["tryreserveerror",4],["result",4]]]],[14,"tryformat","","Take a max capacity a try allocating a string with it.",null,null],[11,"from","fallible_collections::boxed","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"try_collect","fallible_collections::vec","",3,[[],[["result",4],["tryreserveerror",4]]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"try_collect","","",12,[[],[["result",4],["tryreserveerror",4]]]],[11,"from","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"into_iter","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"try_collect","","",13,[[],[["result",4],["tryreserveerror",4]]]],[11,"from","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"into_iter","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"try_collect","fallible_collections::hashmap","",8,[[],[["result",4],["tryreserveerror",4]]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","fallible_collections","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"clone","","",9,[[],["tryreserveerror",4]]],[11,"fmt","","",9,[[["formatter",3]],[["error",3],["result",4]]]],[11,"eq","","",9,[[["tryreserveerror",4]]]],[11,"ne","","",9,[[["tryreserveerror",4]]]],[11,"try_clone","fallible_collections::boxed","",1,[[],[["tryreserveerror",4],["result",4]]]],[11,"try_clone","fallible_collections::vec","",3,[[],[["tryreserveerror",4],["result",4]]]],[11,"try_clone","fallible_collections::hashmap","",8,[[],[["tryreserveerror",4],["result",4]]]],[11,"deref","fallible_collections::vec","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"from","","",3,[[["vec",3]]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"eq","","",3,[[["tryvec",3]]]],[11,"ne","","",3,[[["tryvec",3]]]],[11,"eq","","",3,[[["vec",3]]]],[11,"eq","","",3,[[]]],[11,"eq","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_from","","",3,[[],["result",4]]],[11,"as_ref","","",3,[[]]],[11,"next","","",12,[[],["option",4]]],[11,"size_hint","","",12,[[]]],[11,"next","","",13,[[],["option",4]]],[11,"size_hint","","",13,[[]]],[11,"into_iter","","",3,[[]]],[11,"into_iter","fallible_collections::hashmap","",8,[[]]],[11,"default","fallible_collections::vec","",3,[[]]],[11,"default","fallible_collections::hashmap","",8,[[],["tryhashmap",3]]]],"p":[[8,"FallibleBox"],[3,"TryBox"],[8,"FallibleVec"],[3,"TryVec"],[8,"TryFromIterator"],[8,"TryCollect"],[8,"FallibleRc"],[8,"FallibleArc"],[3,"TryHashMap"],[4,"TryReserveError"],[13,"AllocError"],[8,"TryClone"],[3,"Iter"],[3,"IterMut"]]},\
"hashbrown":{"doc":"This crate is a Rust port of Google\'s high-performance …","i":[[0,"hash_map","hashbrown","A hash map implemented with quadratic probing and SIMD …",null,null],[6,"DefaultHashBuilder","hashbrown::hash_map","Default hasher for <code>HashMap</code>.",null,null],[3,"HashMap","","A hash map implemented with quadratic probing and SIMD …",null,null],[3,"Iter","","An iterator over the entries of a <code>HashMap</code>.",null,null],[3,"IterMut","","A mutable iterator over the entries of a <code>HashMap</code>.",null,null],[3,"IntoIter","","An owning iterator over the entries of a <code>HashMap</code>.",null,null],[3,"Keys","","An iterator over the keys of a <code>HashMap</code>.",null,null],[3,"Values","","An iterator over the values of a <code>HashMap</code>.",null,null],[3,"Drain","","A draining iterator over the entries of a <code>HashMap</code>.",null,null],[3,"DrainFilter","","A draining iterator over entries of a <code>HashMap</code> which don\'t …",null,null],[3,"ValuesMut","","A mutable iterator over the values of a <code>HashMap</code>.",null,null],[3,"RawEntryBuilderMut","","A builder for computing where in a [<code>HashMap</code>] a key-value …",null,null],[4,"RawEntryMut","","A view into a single entry in a map, which may either be …",null,null],[13,"Occupied","","An occupied entry.",0,null],[13,"Vacant","","A vacant entry.",0,null],[3,"RawOccupiedEntryMut","","A view into an occupied entry in a <code>HashMap</code>. It is part of …",null,null],[3,"RawVacantEntryMut","","A view into a vacant entry in a <code>HashMap</code>. It is part of …",null,null],[3,"RawEntryBuilder","","A builder for computing where in a [<code>HashMap</code>] a key-value …",null,null],[4,"Entry","","A view into a single entry in a map, which may either be …",null,null],[13,"Occupied","","An occupied entry.",1,null],[13,"Vacant","","A vacant entry.",1,null],[3,"OccupiedEntry","","A view into an occupied entry in a <code>HashMap</code>. It is part of …",null,null],[3,"VacantEntry","","A view into a vacant entry in a <code>HashMap</code>. It is part of …",null,null],[0,"hash_set","hashbrown","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.",null,null],[3,"HashSet","hashbrown::hash_set","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.",null,null],[3,"Iter","","An iterator over the items of a <code>HashSet</code>.",null,null],[3,"IntoIter","","An owning iterator over the items of a <code>HashSet</code>.",null,null],[3,"Drain","","A draining iterator over the items of a <code>HashSet</code>.",null,null],[3,"DrainFilter","","A draining iterator over entries of a <code>HashSet</code> which don\'t …",null,null],[3,"Intersection","","A lazy iterator producing elements in the intersection of …",null,null],[3,"Difference","","A lazy iterator producing elements in the difference of …",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric …",null,null],[3,"Union","","A lazy iterator producing elements in the union of <code>HashSet</code>…",null,null],[3,"HashMap","hashbrown","A hash map implemented with quadratic probing and SIMD …",null,null],[3,"HashSet","","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.",null,null],[4,"TryReserveError","","The error type for <code>try_reserve</code> methods.",null,null],[13,"CapacityOverflow","","Error due to the computed capacity exceeding the …",2,null],[13,"AllocError","","The memory allocator returned an error",2,null],[12,"layout","hashbrown::TryReserveError","The layout of the allocation request that failed.",3,null],[11,"from","hashbrown::hash_map","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"into_iter","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"into_iter","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"into_iter","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"into_iter","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"from","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"into_iter","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"from","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"into_iter","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"into_iter","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"into_iter","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"into","","",15,[[]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"into","","",16,[[]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"into","","",17,[[]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","hashbrown::hash_set","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"into","","",19,[[]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"from","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"into_iter","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"from","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"into","","",21,[[]]],[11,"try_into","","",21,[[],["result",4]]],[11,"into_iter","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"into","","",22,[[]]],[11,"try_into","","",22,[[],["result",4]]],[11,"into_iter","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"into","","",23,[[]]],[11,"try_into","","",23,[[],["result",4]]],[11,"into_iter","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"into","","",24,[[]]],[11,"try_into","","",24,[[],["result",4]]],[11,"into_iter","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"from","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"into","","",25,[[]]],[11,"try_into","","",25,[[],["result",4]]],[11,"into_iter","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"from","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"into","","",26,[[]]],[11,"try_into","","",26,[[],["result",4]]],[11,"into_iter","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"from","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"into","","",27,[[]]],[11,"try_into","","",27,[[],["result",4]]],[11,"into_iter","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"from","hashbrown","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"fmt","hashbrown::hash_map","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","hashbrown::hash_set","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","hashbrown","",2,[[["formatter",3]],["result",6]]],[11,"eq","hashbrown::hash_map","",4,[[]]],[11,"eq","hashbrown::hash_set","",19,[[]]],[11,"eq","hashbrown","",2,[[["tryreserveerror",4]]]],[11,"ne","","",2,[[["tryreserveerror",4]]]],[11,"drop","hashbrown::hash_map","",11,[[]]],[11,"drop","hashbrown::hash_set","",23,[[]]],[11,"index","hashbrown::hash_map","Returns a reference to the value corresponding to the …",4,[[]]],[11,"len","","",5,[[]]],[11,"len","","",6,[[]]],[11,"len","","",7,[[]]],[11,"len","","",8,[[]]],[11,"len","","",9,[[]]],[11,"len","","",12,[[]]],[11,"len","","",10,[[]]],[11,"len","hashbrown::hash_set","",20,[[]]],[11,"len","","",21,[[]]],[11,"len","","",22,[[]]],[11,"from_iter","hashbrown::hash_map","",4,[[["intoiterator",8]]]],[11,"from_iter","hashbrown::hash_set","",19,[[["intoiterator",8]]]],[11,"next","hashbrown::hash_map","",11,[[],["option",4]]],[11,"size_hint","","",11,[[]]],[11,"next","","",5,[[],["option",4]]],[11,"size_hint","","",5,[[]]],[11,"next","","",6,[[],["option",4]]],[11,"size_hint","","",6,[[]]],[11,"next","","",7,[[],["option",4]]],[11,"size_hint","","",7,[[]]],[11,"next","","",8,[[],["option",4]]],[11,"size_hint","","",8,[[]]],[11,"next","","",9,[[],["option",4]]],[11,"size_hint","","",9,[[]]],[11,"next","","",12,[[],["option",4]]],[11,"size_hint","","",12,[[]]],[11,"next","","",10,[[],["option",4]]],[11,"size_hint","","",10,[[]]],[11,"next","hashbrown::hash_set","",20,[[],["option",4]]],[11,"size_hint","","",20,[[]]],[11,"next","","",21,[[],["option",4]]],[11,"size_hint","","",21,[[]]],[11,"next","","",22,[[],["option",4]]],[11,"size_hint","","",22,[[]]],[11,"next","","",23,[[],["option",4]]],[11,"size_hint","","",23,[[]]],[11,"next","","",24,[[],["option",4]]],[11,"size_hint","","",24,[[]]],[11,"next","","",25,[[],["option",4]]],[11,"size_hint","","",25,[[]]],[11,"next","","",26,[[],["option",4]]],[11,"size_hint","","",26,[[]]],[11,"next","","",27,[[],["option",4]]],[11,"size_hint","","",27,[[]]],[11,"into_iter","hashbrown::hash_map","Creates a consuming iterator, that is, one that moves …",4,[[],["intoiter",3]]],[11,"into_iter","hashbrown::hash_set","Creates a consuming iterator, that is, one that moves …",19,[[],["intoiter",3]]],[11,"extend","hashbrown::hash_map","",4,[[["intoiterator",8]]]],[11,"extend","","",4,[[["intoiterator",8]]]],[11,"extend","hashbrown::hash_set","",19,[[["intoiterator",8]]]],[11,"extend","","",19,[[["intoiterator",8]]]],[11,"clone","hashbrown::hash_map","",4,[[]]],[11,"clone_from","","",4,[[]]],[11,"clone","","",5,[[]]],[11,"clone","","",8,[[]]],[11,"clone","","",9,[[]]],[11,"clone","hashbrown::hash_set","",19,[[]]],[11,"clone_from","","",19,[[]]],[11,"clone","","",20,[[]]],[11,"clone","","",24,[[]]],[11,"clone","","",25,[[]]],[11,"clone","","",26,[[]]],[11,"clone","","",27,[[]]],[11,"clone","hashbrown","",2,[[],["tryreserveerror",4]]],[11,"default","hashbrown::hash_map","Creates an empty <code>HashMap<K, V, S></code>, with the <code>Default</code> value …",4,[[]]],[11,"default","hashbrown::hash_set","Creates an empty <code>HashSet<T, S></code> with the <code>Default</code> value for …",19,[[]]],[11,"new","hashbrown::hash_map","Creates an empty <code>HashMap</code>.",4,[[]]],[11,"with_capacity","","Creates an empty <code>HashMap</code> with the specified capacity.",4,[[]]],[11,"with_hasher","","Creates an empty <code>HashMap</code> which will use the given hash …",4,[[]]],[11,"with_capacity_and_hasher","","Creates an empty <code>HashMap</code> with the specified capacity, …",4,[[]]],[11,"hasher","","Returns a reference to the map\'s <code>BuildHasher</code>.",4,[[]]],[11,"capacity","","Returns the number of elements the map can hold without …",4,[[]]],[11,"keys","","An iterator visiting all keys in arbitrary order. The …",4,[[],["keys",3]]],[11,"values","","An iterator visiting all values in arbitrary order. The …",4,[[],["values",3]]],[11,"values_mut","","An iterator visiting all values mutably in arbitrary …",4,[[],["valuesmut",3]]],[11,"iter","","An iterator visiting all key-value pairs in arbitrary …",4,[[],["iter",3]]],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary …",4,[[],["itermut",3]]],[11,"len","","Returns the number of elements in the map.",4,[[]]],[11,"is_empty","","Returns <code>true</code> if the map contains no elements.",4,[[]]],[11,"drain","","Clears the map, returning all key-value pairs as an …",4,[[],["drain",3]]],[11,"retain","","Retains only the elements specified by the predicate.",4,[[]]],[11,"drain_filter","","Drains elements which are true under the given predicate, …",4,[[],["drainfilter",3]]],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the …",4,[[]]],[11,"reserve","","Reserves capacity for at least <code>additional</code> more elements …",4,[[]]],[11,"try_reserve","","Tries to reserve capacity for at least <code>additional</code> more …",4,[[],[["result",4],["tryreserveerror",4]]]],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It …",4,[[]]],[11,"shrink_to","","Shrinks the capacity of the map with a lower limit. It …",4,[[]]],[11,"entry","","Gets the given key\'s corresponding entry in the map for …",4,[[],["entry",4]]],[11,"get","","Returns a reference to the value corresponding to the key.",4,[[],["option",4]]],[11,"get_key_value","","Returns the key-value pair corresponding to the supplied …",4,[[],["option",4]]],[11,"get_key_value_mut","","Returns the key-value pair corresponding to the supplied …",4,[[],["option",4]]],[11,"contains_key","","Returns <code>true</code> if the map contains a value for the …",4,[[]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to …",4,[[],["option",4]]],[11,"insert","","Inserts a key-value pair into the map.",4,[[],["option",4]]],[11,"remove","","Removes a key from the map, returning the value at the …",4,[[],["option",4]]],[11,"remove_entry","","Removes a key from the map, returning the stored key and …",4,[[],["option",4]]],[11,"raw_entry_mut","","Creates a raw entry builder for the HashMap.",4,[[],["rawentrybuildermut",3]]],[11,"raw_entry","","Creates a raw immutable entry builder for the HashMap.",4,[[],["rawentrybuilder",3]]],[11,"from_key","","Creates a <code>RawEntryMut</code> from the given key.",13,[[],["rawentrymut",4]]],[11,"from_key_hashed_nocheck","","Creates a <code>RawEntryMut</code> from the given key and its hash.",13,[[],["rawentrymut",4]]],[11,"from_hash","","Creates a <code>RawEntryMut</code> from the given hash.",13,[[],["rawentrymut",4]]],[11,"from_key","","Access an entry by key.",16,[[],["option",4]]],[11,"from_key_hashed_nocheck","","Access an entry by a key and its hash.",16,[[],["option",4]]],[11,"from_hash","","Access an entry by hash.",16,[[],["option",4]]],[11,"insert","","Sets the value of the entry, and returns a …",0,[[],["rawoccupiedentrymut",3]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default …",0,[[]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result …",0,[[]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry …",0,[[]]],[11,"and_replace_entry_with","","Provides shared access to the key and owned access to the …",0,[[]]],[11,"key","","Gets a reference to the key in the entry.",14,[[]]],[11,"key_mut","","Gets a mutable reference to the key in the entry.",14,[[]]],[11,"into_key","","Converts the entry into a mutable reference to the key in …",14,[[]]],[11,"get","","Gets a reference to the value in the entry.",14,[[]]],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to …",14,[[]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",14,[[]]],[11,"get_key_value","","Gets a reference to the key and value in the entry.",14,[[]]],[11,"get_key_value_mut","","Gets a mutable reference to the key and value in the …",14,[[]]],[11,"into_key_value","","Converts the OccupiedEntry into a mutable reference to …",14,[[]]],[11,"insert","","Sets the value of the entry, and returns the entry\'s old …",14,[[]]],[11,"insert_key","","Sets the value of the entry, and returns the entry\'s old …",14,[[]]],[11,"remove","","Takes the value out of the entry, and returns it.",14,[[]]],[11,"remove_entry","","Take the ownership of the key and value from the map.",14,[[]]],[11,"replace_entry_with","","Provides shared access to the key and owned access to the …",14,[[],["rawentrymut",4]]],[11,"insert","","Sets the value of the entry with the VacantEntry\'s key, …",15,[[]]],[11,"insert_hashed_nocheck","","Sets the value of the entry with the VacantEntry\'s key, …",15,[[]]],[11,"insert_with_hasher","","Set the value of an entry with a custom hasher function.",15,[[]]],[11,"insert","","Sets the value of the entry, and returns an OccupiedEntry.",1,[[],["occupiedentry",3]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default …",1,[[]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result …",1,[[["fnonce",8]]]],[11,"or_insert_with_key","","Ensures a value is in the entry by inserting, if empty, …",1,[[["fnonce",8]]]],[11,"key","","Returns a reference to this entry\'s key.",1,[[]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry …",1,[[]]],[11,"and_replace_entry_with","","Provides shared access to the key and owned access to the …",1,[[]]],[11,"or_default","","Ensures a value is in the entry by inserting the default …",1,[[]]],[11,"key","","Gets a reference to the key in the entry.",17,[[]]],[11,"remove_entry","","Take the ownership of the key and value from the map.",17,[[]]],[11,"get","","Gets a reference to the value in the entry.",17,[[]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",17,[[]]],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to …",17,[[]]],[11,"insert","","Sets the value of the entry, and returns the entry\'s old …",17,[[]]],[11,"remove","","Takes the value out of the entry, and returns it.",17,[[]]],[11,"replace_entry","","Replaces the entry, returning the old key and value. The …",17,[[]]],[11,"replace_key","","Replaces the key in the hash map with the key used to …",17,[[]]],[11,"replace_entry_with","","Provides shared access to the key and owned access to the …",17,[[],["entry",4]]],[11,"key","","Gets a reference to the key that would be used when …",18,[[]]],[11,"into_key","","Take ownership of the key.",18,[[]]],[11,"insert","","Sets the value of the entry with the VacantEntry\'s key, …",18,[[]]],[11,"new","hashbrown::hash_set","Creates an empty <code>HashSet</code>.",19,[[]]],[11,"with_capacity","","Creates an empty <code>HashSet</code> with the specified capacity.",19,[[]]],[11,"with_hasher","","Creates a new empty hash set which will use the given …",19,[[]]],[11,"with_capacity_and_hasher","","Creates an empty <code>HashSet</code> with the specified capacity, …",19,[[]]],[11,"capacity","","Returns the number of elements the set can hold without …",19,[[]]],[11,"iter","","An iterator visiting all elements in arbitrary order. The …",19,[[],["iter",3]]],[11,"len","","Returns the number of elements in the set.",19,[[]]],[11,"is_empty","","Returns <code>true</code> if the set contains no elements.",19,[[]]],[11,"drain","","Clears the set, returning all elements in an iterator.",19,[[],["drain",3]]],[11,"retain","","Retains only the elements specified by the predicate.",19,[[]]],[11,"drain_filter","","Drains elements which are true under the given predicate, …",19,[[],["drainfilter",3]]],[11,"clear","","Clears the set, removing all values.",19,[[]]],[11,"hasher","","Returns a reference to the set\'s <code>BuildHasher</code>.",19,[[]]],[11,"reserve","","Reserves capacity for at least <code>additional</code> more elements …",19,[[]]],[11,"try_reserve","","Tries to reserve capacity for at least <code>additional</code> more …",19,[[],[["result",4],["tryreserveerror",4]]]],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It …",19,[[]]],[11,"shrink_to","","Shrinks the capacity of the set with a lower limit. It …",19,[[]]],[11,"difference","","Visits the values representing the difference, i.e., the …",19,[[],["difference",3]]],[11,"symmetric_difference","","Visits the values representing the symmetric difference, …",19,[[],["symmetricdifference",3]]],[11,"intersection","","Visits the values representing the intersection, i.e., …",19,[[],["intersection",3]]],[11,"union","","Visits the values representing the union, i.e., all the …",19,[[],["union",3]]],[11,"contains","","Returns <code>true</code> if the set contains a value.",19,[[]]],[11,"get","","Returns a reference to the value in the set, if any, that …",19,[[],["option",4]]],[11,"get_or_insert","","Inserts the given <code>value</code> into the set if it is not …",19,[[]]],[11,"get_or_insert_owned","","Inserts an owned copy of the given <code>value</code> into the set if …",19,[[]]],[11,"get_or_insert_with","","Inserts a value computed from <code>f</code> into the set if the given …",19,[[]]],[11,"is_disjoint","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.…",19,[[]]],[11,"is_subset","","Returns <code>true</code> if the set is a subset of another, i.e., …",19,[[]]],[11,"is_superset","","Returns <code>true</code> if the set is a superset of another, i.e., …",19,[[]]],[11,"insert","","Adds a value to the set.",19,[[]]],[11,"replace","","Adds a value to the set, replacing the existing value, if …",19,[[],["option",4]]],[11,"remove","","Removes a value from the set. Returns whether the value …",19,[[]]],[11,"take","","Removes and returns the value in the set, if any, that is …",19,[[],["option",4]]]],"p":[[4,"RawEntryMut"],[4,"Entry"],[4,"TryReserveError"],[13,"AllocError"],[3,"HashMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"DrainFilter"],[3,"ValuesMut"],[3,"RawEntryBuilderMut"],[3,"RawOccupiedEntryMut"],[3,"RawVacantEntryMut"],[3,"RawEntryBuilder"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"DrainFilter"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"]]},\
"resize":{"doc":"Simple resampling library in pure Rust.","i":[[0,"Pixel","resize","Predefined constants for supported pixel formats.",null,null],[17,"Gray8","resize::Pixel","Grayscale, 8-bit.",null,null],[17,"Gray16","","Grayscale, 16-bit, native endian.",null,null],[17,"GrayF32","","Grayscale, 32-bit float",null,null],[17,"GrayF64","","Grayscale, 64-bit float",null,null],[17,"RGB24","","RGB, 8-bit per component.",null,null],[17,"RGB48","","RGB, 16-bit per component, native endian.",null,null],[17,"RGBA","","RGBA, 8-bit per component.",null,null],[17,"RGBA64","","RGBA, 16-bit per component, native endian.",null,null],[17,"RGBF32","","RGB, 32-bit float per component. This is pretty …",null,null],[17,"RGBF64","","RGB, 64-bit double per component.",null,null],[17,"RGBAF32","","RGBA, 32-bit float per component. This is pretty …",null,null],[17,"RGBAF64","","RGBA, 64-bit double per component.",null,null],[6,"Result","resize","See [Error]",null,null],[4,"Type","","Resizing type to use.",null,null],[13,"Point","","Point resizing.",0,null],[13,"Triangle","","Triangle (bilinear) resizing.",0,null],[13,"Catrom","","Catmull-Rom (bicubic) resizing.",0,null],[13,"Mitchell","","Resize using Mitchell-Netravali filter.",0,null],[13,"Lanczos3","","Resize using Sinc-windowed Sinc with radius of 3.",0,null],[13,"Custom","","Resize with custom filter.",0,null],[3,"Filter","","Resampling filter.",null,null],[11,"new","","Create a new filter.",1,[[["box",3],["fn",8]]]],[11,"new_cubic","","Helper to create Cubic filter with custom B and C …",1,[[]]],[11,"new_lanczos","","Helper to create Lanczos filter with custom radius.",1,[[]]],[3,"Resizer","","Resampler with preallocated buffers and coeffecients for …",null,null],[11,"new","","Create a new resizer instance.",2,[[["type",4]],["result",6]]],[11,"resize","","Resize <code>src</code> image data into <code>dst</code>.",2,[[],["result",6]]],[11,"resize_stride","","Resize <code>src</code> image data into <code>dst</code>, skipping <code>stride</code> pixels …",2,[[],["result",6]]],[5,"new","","Create a new resizer instance. Alias for <code>Resizer::new</code>.",null,[[["type",4],["pixelformat",8]],[["result",6],["resizer",3]]]],[5,"resize","","Use <code>new().resize()</code> instead.",null,[[["pixelformatbackcompatshim",8],["type",4]],["result",6]]],[4,"Error","","Resizing may run out of memory",null,null],[13,"OutOfMemory","","Allocation failed",3,null],[13,"InvalidParameters","","e.g. width or height can\'t be 0",3,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",3,[[["tryreserveerror",4]]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]]],"p":[[4,"Type"],[3,"Filter"],[3,"Resizer"],[4,"Error"]]},\
"rgb":{"doc":"Basic struct for <code>RGB</code> and <code>RGBA</code> pixels. Packed, with red …","i":[[0,"alt","rgb","BGR/BGRA alernative layouts & grayscale",null,null],[3,"BGR","rgb::alt","RGB in reverse byte order",null,null],[12,"b","","Blue first",0,null],[12,"g","","Green",0,null],[12,"r","","Red last",0,null],[3,"BGRA","","BGR+A",null,null],[12,"b","","Blue first",1,null],[12,"g","","Green",1,null],[12,"r","","Red",1,null],[12,"a","","Alpha last",1,null],[6,"BGR8","","8-bit BGR",null,null],[6,"BGR16","","16-bit BGR in machine\'s native endian",null,null],[6,"BGRA8","","8-bit BGRA",null,null],[6,"BGRA16","","16-bit BGR in machine\'s native endian",null,null],[3,"Gray","","Grayscale. Use <code>.0</code> or <code>*</code> (deref) to access the value.",null,null],[12,"0","","brightness level",2,null],[3,"GrayAlpha","","Grayscale with alpha. Use <code>.0</code>/<code>.1</code> to access.",null,null],[12,"0","","brightness level",3,null],[12,"1","","alpha",3,null],[6,"GRAY8","","8-bit gray",null,null],[6,"GRAY16","","16-bit gray in machine\'s native endian",null,null],[6,"GRAYA8","","8-bit gray with alpha in machine\'s native endian",null,null],[6,"GRAYA16","","16-bit gray with alpha in machine\'s native endian",null,null],[11,"new","","New grayscale pixel",2,[[]]],[11,"gray","","Copy <code>Gray</code> component out of the <code>GrayAlpha</code> struct",3,[[],["gray",3]]],[11,"new","","New grayscale+alpha pixel",3,[[]]],[11,"gray_mut","","Provide a mutable view of only <code>Gray</code> component (leaving …",3,[[],["gray",3]]],[11,"alpha","","Create a new <code>GrayAlpha</code> with the new alpha value, but same …",3,[[]]],[11,"map_alpha","","Create a new <code>GrayAlpha</code> with a new alpha value created by …",3,[[],["grayalpha",3]]],[11,"map_gray","","Create new <code>GrayAlpha</code> with the same alpha value, but …",3,[[],["grayalpha",3]]],[8,"Pod","rgb","Re-export from <code>bytemuck</code> crate",null,null],[8,"Zeroable","","Re-export from <code>bytemuck</code> crate",null,null],[11,"zeroed","","Calls <code>zeroed</code>.",4,[[]]],[8,"AsPixels","","Casts a slice of bytes into a slice of pixels, e.g. <code>[u8]</code> …",null,null],[10,"as_pixels","","Reinterpret the slice as a read-only/shared slice of …",5,[[]]],[10,"as_pixels_mut","","Reinterpret the slice as a mutable/exclusive slice of …",5,[[]]],[8,"FromSlice","","Cast a slice of component values (bytes) as a slice of …",null,null],[10,"as_rgb","","Reinterpert slice as RGB pixels",6,[[]]],[10,"as_rgba","","Reinterpert slice as RGBA pixels",6,[[]]],[10,"as_rgb_mut","","Reinterpert mutable slice as RGB pixels",6,[[]]],[10,"as_rgba_mut","","Reinterpert mutable slice as RGBA pixels",6,[[]]],[10,"as_gray","","Reinterpert mutable slice as grayscale pixels",6,[[]]],[10,"as_gray_alpha","","Reinterpert mutable slice as grayscale pixels with alpha",6,[[]]],[10,"as_gray_mut","","Reinterpert mutable slice as grayscale pixels",6,[[]]],[10,"as_gray_alpha_mut","","Reinterpert mutable slice as grayscale pixels with alpha",6,[[]]],[10,"as_bgr","","Reinterpert slice as reverse-order BGR pixels",6,[[]]],[10,"as_bgra","","Reinterpert slice as reverse-order BGRA pixels",6,[[]]],[10,"as_bgr_mut","","Reinterpert ntable slice as reverse-order BGR pixels",6,[[]]],[10,"as_bgra_mut","","Reinterpert mutable slice as reverse-order BGRA pixels",6,[[]]],[8,"ComponentSlice","","Casting the struct to slices of its components",null,null],[10,"as_slice","","The components interpreted as an array, e.g. one <code>RGB</code> …",7,[[]]],[10,"as_mut_slice","","The components interpreted as a mutable array, e.g. one …",7,[[]]],[8,"ComponentBytes","","Casting a slice of <code>RGB/A</code> values to a slice of <code>u8</code>",null,null],[11,"as_bytes","","The components interpreted as raw bytes, in machine\'s …",8,[[]]],[11,"as_bytes_mut","","The components interpreted as raw bytes, in machine\'s …",8,[[]]],[8,"ComponentMap","","Applying operation to every component",null,null],[10,"map","","Convenience function (equivalent of …",9,[[]]],[3,"RGB","","The RGB pixel",null,null],[12,"r","","Red",10,null],[12,"g","","Green",10,null],[12,"b","","Blue",10,null],[3,"RGBA","","The RGBA pixel",null,null],[12,"r","","Red",11,null],[12,"g","","Green",11,null],[12,"b","","Blue",11,null],[12,"a","","Alpha",11,null],[6,"RGB8","","8-bit RGB",null,null],[6,"RGB16","","16-bit RGB in machine\'s native endian",null,null],[6,"RGBA8","","8-bit RGBA, alpha is last. 0 = transparent, 255 = opaque.",null,null],[6,"RGBA16","","16-bit RGB in machine\'s native endian. 0 = transparent, …",null,null],[11,"from","rgb::alt","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","rgb","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"as_slice","","",10,[[]]],[11,"as_mut_slice","","",10,[[]]],[11,"as_slice","rgb::alt","",0,[[]]],[11,"as_mut_slice","","",0,[[]]],[11,"as_slice","rgb","",11,[[]]],[11,"as_mut_slice","","",11,[[]]],[11,"as_slice","rgb::alt","",1,[[]]],[11,"as_mut_slice","","",1,[[]]],[11,"as_slice","","",3,[[]]],[11,"as_mut_slice","","",3,[[]]],[11,"as_slice","","",2,[[]]],[11,"as_mut_slice","","",2,[[]]],[11,"map","rgb","",10,[[],["rgb",3]]],[11,"map","rgb::alt","",0,[[],["bgr",3]]],[11,"map","rgb","",11,[[],["rgba",3]]],[11,"map","rgb::alt","",1,[[],["bgra",3]]],[11,"map","","",2,[[],["gray",3]]],[11,"map","","",3,[[],["grayalpha",3]]],[11,"deref","","",2,[[]]],[11,"from","rgb","",10,[[]]],[11,"from","","",11,[[]]],[11,"from","rgb::alt","",0,[[]]],[11,"from","","",1,[[]]],[11,"from","rgb","",10,[[]]],[11,"from","","",11,[[]]],[11,"from","rgb::alt","",0,[[]]],[11,"from","","",1,[[]]],[11,"from","rgb","",10,[[["rgb",3]]]],[11,"from","","",10,[[["rgb",3]]]],[11,"from","","",10,[[["rgb",3]]]],[11,"from","","",10,[[["rgb",3]]]],[11,"from","","",10,[[["rgb",3]]]],[11,"from","","",10,[[["rgb",3]]]],[11,"from","","",10,[[["rgb",3]]]],[11,"from","","",10,[[["rgb",3]]]],[11,"from","","",10,[[["rgb",3]]]],[11,"from","","",10,[[["rgb",3]]]],[11,"from","","",11,[[["rgba",3]]]],[11,"from","","",11,[[["rgba",3]]]],[11,"from","","",11,[[["rgba",3]]]],[11,"from","","",11,[[["rgba",3]]]],[11,"from","","",11,[[["rgba",3]]]],[11,"from","","",11,[[["rgba",3]]]],[11,"from","","",11,[[["rgba",3]]]],[11,"from","","",11,[[["rgba",3]]]],[11,"from","","",11,[[["rgba",3]]]],[11,"from","","",10,[[["gray",3]]]],[11,"from","","",11,[[["grayalpha",3]]]],[11,"from","rgb::alt","",0,[[["rgb",3]]]],[11,"from","","",1,[[["rgba",3]]]],[11,"from","rgb","",10,[[["bgr",3]]]],[11,"from","","",11,[[["bgra",3]]]],[11,"from","rgb::alt","",1,[[["bgr",3]]]],[11,"from","","",1,[[["bgr",3]]]],[11,"from","","",1,[[["rgb",3]]]],[11,"from","","",1,[[["rgb",3]]]],[11,"from","rgb","",11,[[["bgr",3]]]],[11,"from","","",11,[[["bgr",3]]]],[11,"from","","",11,[[["rgb",3]]]],[11,"from","","",11,[[["rgb",3]]]],[11,"from","rgb::alt","",2,[[]]],[11,"from","","",3,[[["gray",3]]]],[11,"from","","",3,[[["gray",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","rgb","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","rgb::alt","",0,[[["formatter",3]],["result",6]]],[11,"fmt","rgb","",11,[[["formatter",3]],["result",6]]],[11,"fmt","rgb::alt","",1,[[["formatter",3]],["result",6]]],[11,"div","rgb","",10,[[]]],[11,"div","","",11,[[]]],[11,"div","rgb::alt","",2,[[]]],[11,"div","","",3,[[]]],[11,"sub","rgb","",10,[[]]],[11,"sub","","",11,[[]]],[11,"sub","rgb::alt","",2,[[]]],[11,"sub","","",3,[[]]],[11,"sub","rgb","",10,[[["rgb",3]]]],[11,"sub","rgb::alt","",2,[[["gray",3]]]],[11,"sub","rgb","",11,[[["rgba",3]]]],[11,"sub","rgb::alt","",3,[[["grayalpha",3]]]],[11,"eq","","",0,[[["bgr",3]]]],[11,"ne","","",0,[[["bgr",3]]]],[11,"eq","","",1,[[["bgra",3]]]],[11,"ne","","",1,[[["bgra",3]]]],[11,"eq","","",2,[[["gray",3]]]],[11,"ne","","",2,[[["gray",3]]]],[11,"eq","","",3,[[["grayalpha",3]]]],[11,"ne","","",3,[[["grayalpha",3]]]],[11,"eq","rgb","",10,[[["rgb",3]]]],[11,"ne","","",10,[[["rgb",3]]]],[11,"eq","","",11,[[["rgba",3]]]],[11,"ne","","",11,[[["rgba",3]]]],[11,"cmp","rgb::alt","",0,[[["bgr",3]],["ordering",4]]],[11,"cmp","","",1,[[["bgra",3]],["ordering",4]]],[11,"cmp","","",2,[[["gray",3]],["ordering",4]]],[11,"cmp","","",3,[[["grayalpha",3]],["ordering",4]]],[11,"cmp","rgb","",10,[[["rgb",3]],["ordering",4]]],[11,"cmp","","",11,[[["rgba",3]],["ordering",4]]],[11,"partial_cmp","rgb::alt","",0,[[["bgr",3]],[["ordering",4],["option",4]]]],[11,"lt","","",0,[[["bgr",3]]]],[11,"le","","",0,[[["bgr",3]]]],[11,"gt","","",0,[[["bgr",3]]]],[11,"ge","","",0,[[["bgr",3]]]],[11,"partial_cmp","","",1,[[["bgra",3]],[["ordering",4],["option",4]]]],[11,"lt","","",1,[[["bgra",3]]]],[11,"le","","",1,[[["bgra",3]]]],[11,"gt","","",1,[[["bgra",3]]]],[11,"ge","","",1,[[["bgra",3]]]],[11,"partial_cmp","","",2,[[["gray",3]],[["ordering",4],["option",4]]]],[11,"lt","","",2,[[["gray",3]]]],[11,"le","","",2,[[["gray",3]]]],[11,"gt","","",2,[[["gray",3]]]],[11,"ge","","",2,[[["gray",3]]]],[11,"partial_cmp","","",3,[[["grayalpha",3]],[["ordering",4],["option",4]]]],[11,"lt","","",3,[[["grayalpha",3]]]],[11,"le","","",3,[[["grayalpha",3]]]],[11,"gt","","",3,[[["grayalpha",3]]]],[11,"ge","","",3,[[["grayalpha",3]]]],[11,"partial_cmp","rgb","",10,[[["rgb",3]],[["ordering",4],["option",4]]]],[11,"lt","","",10,[[["rgb",3]]]],[11,"le","","",10,[[["rgb",3]]]],[11,"gt","","",10,[[["rgb",3]]]],[11,"ge","","",10,[[["rgb",3]]]],[11,"partial_cmp","","",11,[[["rgba",3]],[["ordering",4],["option",4]]]],[11,"lt","","",11,[[["rgba",3]]]],[11,"le","","",11,[[["rgba",3]]]],[11,"gt","","",11,[[["rgba",3]]]],[11,"ge","","",11,[[["rgba",3]]]],[11,"add","","",10,[[]]],[11,"add","","",11,[[]]],[11,"add","rgb::alt","",2,[[]]],[11,"add","","",3,[[]]],[11,"add","rgb","",10,[[["rgb",3]]]],[11,"add","rgb::alt","",2,[[["gray",3]]]],[11,"add","rgb","",11,[[["rgba",3]]]],[11,"add","rgb::alt","",3,[[["grayalpha",3]]]],[11,"mul","rgb","",10,[[]]],[11,"mul","","",11,[[]]],[11,"mul","rgb::alt","",2,[[]]],[11,"mul","","",3,[[]]],[11,"add_assign","rgb","",10,[[]]],[11,"add_assign","","",11,[[]]],[11,"add_assign","rgb::alt","",2,[[]]],[11,"add_assign","","",3,[[]]],[11,"add_assign","rgb","",10,[[["rgb",3]]]],[11,"add_assign","rgb::alt","",2,[[["gray",3]]]],[11,"add_assign","rgb","",11,[[["rgba",3]]]],[11,"add_assign","rgb::alt","",3,[[["grayalpha",3]]]],[11,"sub_assign","rgb","",10,[[]]],[11,"sub_assign","","",11,[[]]],[11,"sub_assign","rgb::alt","",2,[[]]],[11,"sub_assign","","",3,[[]]],[11,"sub_assign","rgb","",10,[[["rgb",3]]]],[11,"sub_assign","rgb::alt","",2,[[["gray",3]]]],[11,"sub_assign","rgb","",11,[[["rgba",3]]]],[11,"sub_assign","rgb::alt","",3,[[["grayalpha",3]]]],[11,"mul_assign","rgb","",10,[[]]],[11,"mul_assign","","",11,[[]]],[11,"mul_assign","rgb::alt","",2,[[]]],[11,"mul_assign","","",3,[[]]],[11,"div_assign","rgb","",10,[[]]],[11,"div_assign","","",11,[[]]],[11,"div_assign","rgb::alt","",2,[[]]],[11,"div_assign","","",3,[[]]],[11,"hash","","",0,[[]]],[11,"hash","","",1,[[]]],[11,"hash","","",2,[[]]],[11,"hash","","",3,[[]]],[11,"hash","rgb","",10,[[]]],[11,"hash","","",11,[[]]],[11,"from_iter","","Takes exactly 3 elements from the iterator and creates a …",10,[[["intoiterator",8]]]],[11,"from_iter","","Takes exactly 4 elements from the iterator and creates a …",11,[[["intoiterator",8]]]],[11,"as_ref","rgb::alt","",2,[[]]],[11,"as_ref","rgb","",10,[[]]],[11,"as_ref","","",11,[[]]],[11,"as_ref","rgb::alt","",3,[[]]],[11,"as_mut","","",2,[[]]],[11,"as_mut","rgb","",10,[[]]],[11,"as_mut","","",11,[[]]],[11,"as_mut","rgb::alt","",3,[[]]],[11,"into","rgb","",10,[[]]],[11,"into","","",11,[[]]],[11,"into","rgb::alt","",0,[[]]],[11,"into","","",1,[[]]],[11,"into","rgb","",10,[[]]],[11,"into","","",11,[[]]],[11,"into","rgb::alt","",0,[[]]],[11,"into","","",1,[[]]],[11,"fmt","rgb","",10,[[["formatter",3]],["result",6]]],[11,"fmt","rgb::alt","",0,[[["formatter",3]],["result",6]]],[11,"fmt","rgb","",10,[[["formatter",3]],["result",6]]],[11,"fmt","rgb::alt","",0,[[["formatter",3]],["result",6]]],[11,"sum","rgb","",10,[[["iterator",8]]]],[11,"sum","rgb::alt","",2,[[["iterator",8]]]],[11,"sum","rgb","",11,[[["iterator",8]]]],[11,"sum","rgb::alt","",3,[[["iterator",8]]]],[11,"clone","","",0,[[],["bgr",3]]],[11,"clone","","",1,[[],["bgra",3]]],[11,"clone","","",2,[[],["gray",3]]],[11,"clone","","",3,[[],["grayalpha",3]]],[11,"clone","rgb","",10,[[],["rgb",3]]],[11,"clone","","",11,[[],["rgba",3]]],[11,"default","rgb::alt","",0,[[],["bgr",3]]],[11,"default","","",1,[[],["bgra",3]]],[11,"default","","",2,[[],["gray",3]]],[11,"default","","",3,[[],["grayalpha",3]]],[11,"default","rgb","",10,[[],["rgb",3]]],[11,"default","","",11,[[],["rgba",3]]],[11,"as_bytes","","The components interpreted as raw bytes, in machine\'s …",8,[[]]],[11,"as_bytes_mut","","The components interpreted as raw bytes, in machine\'s …",8,[[]]],[11,"new","","Convenience function for creating a new pixel The order …",10,[[]]],[11,"new","rgb::alt","Convenience function for creating a new pixel Wargning: …",0,[[]]],[11,"iter","rgb","Iterate over color components (R, G, and B)",10,[[],[["cloned",3],["iter",3]]]],[11,"alpha","","Convenience function for converting to RGBA",10,[[],["rgba",3]]],[11,"new_alpha","","Convenience function for converting to RGBA with alpha …",10,[[],["rgba",3]]],[11,"iter","rgb::alt","Iterate over color components (R, G, and B)",0,[[],[["cloned",3],["iter",3]]]],[11,"alpha","","Convenience function for converting to RGBA",0,[[],["bgra",3]]],[11,"new_alpha","","Convenience function for converting to RGBA with alpha …",0,[[],["bgra",3]]],[11,"new","rgb","Convenience function for creating a new pixel The order …",11,[[]]],[11,"new_alpha","","Convenience function for creating a new pixel The order …",11,[[]]],[11,"new","rgb::alt","Convenience function for creating a new pixel Warning: …",1,[[]]],[11,"new_alpha","","Convenience function for creating a new pixel Warning: …",1,[[]]],[11,"rgb_mut","rgb","Provide a mutable view of only RGB components (leaving …",11,[[],["rgb",3]]],[11,"rgb_mut","rgb::alt","Provide a mutable view of only RGB components (leaving …",1,[[],["bgr",3]]],[11,"bgr_mut","","Provide a mutable view of only RGB components (leaving …",1,[[],["bgr",3]]],[11,"rgb","rgb","Copy RGB components out of the RGBA struct",11,[[],["rgb",3]]],[11,"rgb","rgb::alt","Copy RGB components out of the RGBA struct",1,[[],["bgr",3]]],[11,"iter","rgb","Iterate over all components (length=4)",11,[[],[["cloned",3],["iter",3]]]],[11,"bgr","","Copy RGB components out of the RGBA struct",11,[[],["bgr",3]]],[11,"map_rgb","","Create new RGBA with the same alpha value, but different …",11,[[],["rgba",3]]],[11,"alpha","","Create a new RGBA with the new alpha value, but same RGB …",11,[[]]],[11,"map_alpha","","Create a new RGBA with a new alpha value created by the …",11,[[],["rgba",3]]],[11,"iter","rgb::alt","Iterate over all components (length=4)",1,[[],[["cloned",3],["iter",3]]]],[11,"bgr","","Copy RGB components out of the RGBA struct",1,[[],["bgr",3]]],[11,"map_rgb","","Create new RGBA with the same alpha value, but different …",1,[[],["bgra",3]]],[11,"alpha","","Create a new RGBA with the new alpha value, but same RGB …",1,[[]]],[11,"map_alpha","","Create a new RGBA with a new alpha value created by the …",1,[[],["bgra",3]]]],"p":[[3,"BGR"],[3,"BGRA"],[3,"Gray"],[3,"GrayAlpha"],[8,"Zeroable"],[8,"AsPixels"],[8,"FromSlice"],[8,"ComponentSlice"],[8,"ComponentBytes"],[8,"ComponentMap"],[3,"RGB"],[3,"RGBA"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);