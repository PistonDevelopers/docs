var N=null,E="",T="t",U="u",searchIndex={};
var R=["resize","usize","filter","result","try_from","borrow","type_id","typeid","borrow_mut","try_into","resize::Pixel","to_owned","clone_into","new_accum","into_subpixel","formatter","PixelFormat"];

searchIndex[R[0]]={"doc":"Simple resampling library in pure Rust.","i":[[3,"Filter",R[0],"Resampling filter.",N,N],[3,"Resizer",E,"Resampler with preallocated buffers and coeffecients for…",N,N],[4,"Type",E,"Resizing type to use.",N,N],[13,"Point",E,"Point resizing.",0,N],[13,"Triangle",E,"Triangle (bilinear) resizing.",0,N],[13,"Catrom",E,"Catmull-Rom (bicubic) resizing.",0,N],[13,"Mitchell",E,"Resize using Mitchell-Netravali filter.",0,N],[13,"Lanczos3",E,"Resize using Sinc-windowed Sinc with radius of 3.",0,N],[13,"Custom",E,"Resize with custom filter.",0,N],[5,"new",E,"Create a new resizer instance. Alias for `Resizer::new`.",N,[[[R[1]],[R[1]],[R[1]],[R[1]],["pixel"],["type"]],["resizer"]]],[5,R[0],E,"Resize image data to the new dimension in a single step.",N,N],[0,"Pixel",E,"Supported pixel formats.",N,N],[3,"Gray8",R[10],"Grayscale, 8-bit.",N,N],[3,"Gray16",E,"Grayscale, 16-bit, native endian.",N,N],[3,"RGB24",E,"RGB, 8-bit per component.",N,N],[3,"RGB48",E,"RGB, 16-bit per component, native endian.",N,N],[3,"RGBA",E,"RGBA, 8-bit per component.",N,N],[3,"RGBA64",E,"RGBA, 16-bit per component, native endian.",N,N],[8,R[16],R[0],"See `Pixel`",N,N],[16,"Accumulator",E,"Array to hold temporary values.",1,N],[16,"Subpixel",E,"Type of a Subpixel of each pixel (8 or 16 bits).",1,N],[10,R[13],E,"New empty Accumulator.",1,N],[10,R[14],E,"Convert float to integer value in range appropriate for…",1,N],[11,"get_size",E,"Size of one pixel in that format in bytes.",1,[[["self"]],[R[1]]]],[11,"get_ncomponents",E,"Return number of components of that format.",1,[[["self"]],[R[1]]]],[11,"new",E,"Create a new filter.",2,[[["box",["fn"]],["f32"]],[R[2]]]],[11,"new_cubic",E,"Helper to create Cubic filter with custom B and C…",2,[[["f32"],["f32"]],[R[2]]]],[11,"new_lanczos",E,"Helper to create Lanczos filter with custom radius.",2,[[["f32"]],[R[2]]]],[11,"new",E,"Create a new resizer instance.",3,[[[R[1]],[R[1]],[R[1]],[R[1]],["pixel"],["type"]],["self"]]],[11,R[0],E,"Resize `src` image data into `dst`.",3,N],[11,"resize_stride",E,"Resize `src` image data into `dst`, skipping `stride`…",3,N],[11,"into",E,E,2,[[["self"]],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[4],E,E,2,[[[U]],[R[3]]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[R[7]]]],[11,R[8],E,E,2,[[["self"]],[T]]],[11,R[9],E,E,2,[[["self"]],[R[3]]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[4],E,E,3,[[[U]],[R[3]]]],[11,R[5],E,E,3,[[["self"]],[T]]],[11,R[6],E,E,3,[[["self"]],[R[7]]]],[11,R[8],E,E,3,[[["self"]],[T]]],[11,R[9],E,E,3,[[["self"]],[R[3]]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[4],E,E,0,[[[U]],[R[3]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[R[7]]]],[11,R[8],E,E,0,[[["self"]],[T]]],[11,R[9],E,E,0,[[["self"]],[R[3]]]],[11,"into",R[10],E,4,[[["self"]],[U]]],[11,R[11],E,E,4,[[["self"]],[T]]],[11,R[12],E,E,4,N],[11,"from",E,E,4,[[[T]],[T]]],[11,R[4],E,E,4,[[[U]],[R[3]]]],[11,R[5],E,E,4,[[["self"]],[T]]],[11,R[6],E,E,4,[[["self"]],[R[7]]]],[11,R[8],E,E,4,[[["self"]],[T]]],[11,R[9],E,E,4,[[["self"]],[R[3]]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[11],E,E,5,[[["self"]],[T]]],[11,R[12],E,E,5,N],[11,"from",E,E,5,[[[T]],[T]]],[11,R[4],E,E,5,[[[U]],[R[3]]]],[11,R[5],E,E,5,[[["self"]],[T]]],[11,R[6],E,E,5,[[["self"]],[R[7]]]],[11,R[8],E,E,5,[[["self"]],[T]]],[11,R[9],E,E,5,[[["self"]],[R[3]]]],[11,"into",E,E,6,[[["self"]],[U]]],[11,R[11],E,E,6,[[["self"]],[T]]],[11,R[12],E,E,6,N],[11,"from",E,E,6,[[[T]],[T]]],[11,R[4],E,E,6,[[[U]],[R[3]]]],[11,R[5],E,E,6,[[["self"]],[T]]],[11,R[6],E,E,6,[[["self"]],[R[7]]]],[11,R[8],E,E,6,[[["self"]],[T]]],[11,R[9],E,E,6,[[["self"]],[R[3]]]],[11,"into",E,E,7,[[["self"]],[U]]],[11,R[11],E,E,7,[[["self"]],[T]]],[11,R[12],E,E,7,N],[11,"from",E,E,7,[[[T]],[T]]],[11,R[4],E,E,7,[[[U]],[R[3]]]],[11,R[5],E,E,7,[[["self"]],[T]]],[11,R[6],E,E,7,[[["self"]],[R[7]]]],[11,R[8],E,E,7,[[["self"]],[T]]],[11,R[9],E,E,7,[[["self"]],[R[3]]]],[11,"into",E,E,8,[[["self"]],[U]]],[11,R[11],E,E,8,[[["self"]],[T]]],[11,R[12],E,E,8,N],[11,"from",E,E,8,[[[T]],[T]]],[11,R[4],E,E,8,[[[U]],[R[3]]]],[11,R[5],E,E,8,[[["self"]],[T]]],[11,R[6],E,E,8,[[["self"]],[R[7]]]],[11,R[8],E,E,8,[[["self"]],[T]]],[11,R[9],E,E,8,[[["self"]],[R[3]]]],[11,"into",E,E,9,[[["self"]],[U]]],[11,R[11],E,E,9,[[["self"]],[T]]],[11,R[12],E,E,9,N],[11,"from",E,E,9,[[[T]],[T]]],[11,R[4],E,E,9,[[[U]],[R[3]]]],[11,R[5],E,E,9,[[["self"]],[T]]],[11,R[6],E,E,9,[[["self"]],[R[7]]]],[11,R[8],E,E,9,[[["self"]],[T]]],[11,R[9],E,E,9,[[["self"]],[R[3]]]],[11,R[13],E,E,4,N],[11,R[14],E,E,4,N],[11,R[13],E,E,5,N],[11,R[14],E,E,5,N],[11,R[13],E,E,6,N],[11,R[14],E,E,6,N],[11,R[13],E,E,8,N],[11,R[14],E,E,8,N],[11,R[13],E,E,7,N],[11,R[14],E,E,7,N],[11,R[13],E,E,9,N],[11,R[14],E,E,9,N],[11,"clone",E,E,4,[[["self"]],["gray8"]]],[11,"clone",E,E,5,[[["self"]],["gray16"]]],[11,"clone",E,E,6,[[["self"]],["rgb24"]]],[11,"clone",E,E,7,[[["self"]],["rgb48"]]],[11,"clone",E,E,8,[[["self"]],["rgba"]]],[11,"clone",E,E,9,[[["self"]],["rgba64"]]],[11,"fmt",E,E,4,[[["self"],[R[15]]],[R[3]]]],[11,"fmt",E,E,5,[[["self"],[R[15]]],[R[3]]]],[11,"fmt",E,E,6,[[["self"],[R[15]]],[R[3]]]],[11,"fmt",E,E,7,[[["self"],[R[15]]],[R[3]]]],[11,"fmt",E,E,8,[[["self"],[R[15]]],[R[3]]]],[11,"fmt",E,E,9,[[["self"],[R[15]]],[R[3]]]],[11,"fmt",R[0],E,3,[[["self"],[R[15]]],[R[3]]]]],"p":[[4,"Type"],[8,R[16]],[3,"Filter"],[3,"Resizer"],[3,"Gray8"],[3,"Gray16"],[3,"RGB24"],[3,"RGB48"],[3,"RGBA"],[3,"RGBA64"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);